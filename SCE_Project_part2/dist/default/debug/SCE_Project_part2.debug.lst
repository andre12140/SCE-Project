

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Dec 15 12:19:54 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F18875
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    24                           	psect	inittext,global,class=CODE,delta=2
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    44                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	text74,local,class=CODE,merge=1,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	psect	text81,local,class=CODE,merge=1,delta=2
   112                           	psect	text82,local,class=CODE,merge=1,delta=2
   113                           	psect	text83,local,class=CODE,merge=1,delta=2
   114                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   115                           	dabs	1,0x7E,2
   116  0000                     
   117                           ; Version 2.30
   118                           ; Generated 15/09/2020 GMT
   119                           ; 
   120                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   121                           ; All rights reserved.
   122                           ; 
   123                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   124                           ; 
   125                           ; Redistribution and use in source and binary forms, with or without modification, are
   126                           ; permitted provided that the following conditions are met:
   127                           ; 
   128                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   129                           ;        conditions and the following disclaimer.
   130                           ; 
   131                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   132                           ;        of conditions and the following disclaimer in the documentation and/or other
   133                           ;        materials provided with the distribution. Publication is not required when
   134                           ;        this file is used in an embedded application.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC16F18875 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000F                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001C                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  008C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0110                     	;# 
   212  0110                     	;# 
   213  0111                     	;# 
   214  0112                     	;# 
   215  0112                     	;# 
   216  0113                     	;# 
   217  0114                     	;# 
   218  0114                     	;# 
   219  0115                     	;# 
   220  0116                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  0119                     	;# 
   224  0119                     	;# 
   225  0119                     	;# 
   226  011A                     	;# 
   227  011A                     	;# 
   228  011A                     	;# 
   229  011B                     	;# 
   230  011B                     	;# 
   231  011B                     	;# 
   232  011B                     	;# 
   233  011B                     	;# 
   234  011C                     	;# 
   235  011C                     	;# 
   236  011C                     	;# 
   237  011D                     	;# 
   238  011D                     	;# 
   239  011D                     	;# 
   240  011E                     	;# 
   241  011E                     	;# 
   242  011E                     	;# 
   243  011F                     	;# 
   244  011F                     	;# 
   245  011F                     	;# 
   246  011F                     	;# 
   247  011F                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250  018E                     	;# 
   251  018F                     	;# 
   252  0190                     	;# 
   253  0191                     	;# 
   254  0192                     	;# 
   255  0196                     	;# 
   256  0197                     	;# 
   257  0198                     	;# 
   258  0199                     	;# 
   259  019A                     	;# 
   260  019B                     	;# 
   261  019C                     	;# 
   262  020C                     	;# 
   263  020C                     	;# 
   264  020D                     	;# 
   265  020E                     	;# 
   266  020F                     	;# 
   267  020F                     	;# 
   268  0210                     	;# 
   269  0210                     	;# 
   270  0211                     	;# 
   271  0211                     	;# 
   272  0212                     	;# 
   273  0212                     	;# 
   274  0213                     	;# 
   275  0214                     	;# 
   276  0215                     	;# 
   277  0215                     	;# 
   278  0216                     	;# 
   279  0216                     	;# 
   280  0217                     	;# 
   281  0217                     	;# 
   282  0218                     	;# 
   283  0218                     	;# 
   284  0219                     	;# 
   285  021A                     	;# 
   286  021B                     	;# 
   287  021B                     	;# 
   288  021C                     	;# 
   289  021C                     	;# 
   290  021D                     	;# 
   291  021D                     	;# 
   292  021E                     	;# 
   293  021F                     	;# 
   294  028C                     	;# 
   295  028C                     	;# 
   296  028D                     	;# 
   297  028D                     	;# 
   298  028E                     	;# 
   299  028F                     	;# 
   300  0290                     	;# 
   301  0290                     	;# 
   302  0291                     	;# 
   303  0292                     	;# 
   304  0292                     	;# 
   305  0293                     	;# 
   306  0293                     	;# 
   307  0294                     	;# 
   308  0295                     	;# 
   309  0296                     	;# 
   310  0296                     	;# 
   311  0297                     	;# 
   312  0298                     	;# 
   313  0298                     	;# 
   314  0299                     	;# 
   315  0299                     	;# 
   316  029A                     	;# 
   317  029B                     	;# 
   318  029C                     	;# 
   319  029C                     	;# 
   320  029D                     	;# 
   321  030C                     	;# 
   322  030C                     	;# 
   323  030D                     	;# 
   324  030E                     	;# 
   325  030F                     	;# 
   326  0310                     	;# 
   327  0310                     	;# 
   328  0311                     	;# 
   329  0312                     	;# 
   330  0313                     	;# 
   331  0314                     	;# 
   332  0314                     	;# 
   333  0315                     	;# 
   334  0316                     	;# 
   335  0317                     	;# 
   336  0318                     	;# 
   337  0318                     	;# 
   338  0319                     	;# 
   339  031A                     	;# 
   340  031B                     	;# 
   341  031C                     	;# 
   342  031C                     	;# 
   343  031D                     	;# 
   344  031E                     	;# 
   345  031F                     	;# 
   346  038C                     	;# 
   347  038C                     	;# 
   348  038D                     	;# 
   349  038E                     	;# 
   350  0390                     	;# 
   351  0390                     	;# 
   352  0391                     	;# 
   353  0392                     	;# 
   354  040C                     	;# 
   355  040D                     	;# 
   356  040E                     	;# 
   357  040F                     	;# 
   358  0410                     	;# 
   359  0411                     	;# 
   360  0416                     	;# 
   361  0416                     	;# 
   362  0417                     	;# 
   363  0418                     	;# 
   364  0418                     	;# 
   365  0419                     	;# 
   366  041A                     	;# 
   367  041A                     	;# 
   368  041B                     	;# 
   369  041C                     	;# 
   370  041C                     	;# 
   371  041D                     	;# 
   372  041E                     	;# 
   373  041F                     	;# 
   374  048C                     	;# 
   375  048C                     	;# 
   376  048D                     	;# 
   377  048E                     	;# 
   378  048F                     	;# 
   379  048F                     	;# 
   380  0490                     	;# 
   381  0491                     	;# 
   382  0492                     	;# 
   383  0492                     	;# 
   384  0493                     	;# 
   385  0494                     	;# 
   386  0495                     	;# 
   387  0495                     	;# 
   388  0496                     	;# 
   389  0497                     	;# 
   390  0498                     	;# 
   391  0499                     	;# 
   392  049A                     	;# 
   393  049B                     	;# 
   394  049C                     	;# 
   395  049D                     	;# 
   396  050C                     	;# 
   397  050C                     	;# 
   398  050D                     	;# 
   399  050E                     	;# 
   400  050F                     	;# 
   401  050F                     	;# 
   402  0510                     	;# 
   403  0511                     	;# 
   404  0512                     	;# 
   405  0512                     	;# 
   406  0513                     	;# 
   407  0514                     	;# 
   408  0515                     	;# 
   409  0515                     	;# 
   410  0516                     	;# 
   411  0517                     	;# 
   412  0518                     	;# 
   413  0519                     	;# 
   414  051A                     	;# 
   415  051B                     	;# 
   416  051C                     	;# 
   417  051D                     	;# 
   418  058C                     	;# 
   419  058C                     	;# 
   420  058D                     	;# 
   421  058E                     	;# 
   422  058F                     	;# 
   423  058F                     	;# 
   424  0590                     	;# 
   425  0591                     	;# 
   426  0592                     	;# 
   427  0593                     	;# 
   428  060C                     	;# 
   429  060D                     	;# 
   430  060E                     	;# 
   431  060F                     	;# 
   432  0610                     	;# 
   433  0611                     	;# 
   434  0612                     	;# 
   435  0613                     	;# 
   436  0614                     	;# 
   437  0616                     	;# 
   438  0617                     	;# 
   439  0618                     	;# 
   440  0619                     	;# 
   441  061A                     	;# 
   442  061B                     	;# 
   443  061C                     	;# 
   444  061D                     	;# 
   445  061E                     	;# 
   446  068C                     	;# 
   447  068D                     	;# 
   448  068E                     	;# 
   449  068F                     	;# 
   450  0690                     	;# 
   451  0691                     	;# 
   452  0692                     	;# 
   453  0693                     	;# 
   454  0694                     	;# 
   455  070C                     	;# 
   456  070D                     	;# 
   457  070E                     	;# 
   458  070F                     	;# 
   459  0710                     	;# 
   460  0711                     	;# 
   461  0712                     	;# 
   462  0713                     	;# 
   463  0714                     	;# 
   464  0716                     	;# 
   465  0717                     	;# 
   466  0718                     	;# 
   467  0719                     	;# 
   468  071A                     	;# 
   469  071B                     	;# 
   470  071C                     	;# 
   471  071D                     	;# 
   472  071E                     	;# 
   473  0796                     	;# 
   474  0797                     	;# 
   475  0798                     	;# 
   476  0799                     	;# 
   477  079A                     	;# 
   478  079B                     	;# 
   479  080C                     	;# 
   480  080D                     	;# 
   481  080E                     	;# 
   482  080F                     	;# 
   483  0810                     	;# 
   484  0811                     	;# 
   485  0812                     	;# 
   486  0813                     	;# 
   487  0814                     	;# 
   488  081A                     	;# 
   489  081B                     	;# 
   490  081C                     	;# 
   491  081D                     	;# 
   492  081E                     	;# 
   493  081F                     	;# 
   494  088C                     	;# 
   495  088D                     	;# 
   496  088E                     	;# 
   497  088F                     	;# 
   498  0890                     	;# 
   499  0891                     	;# 
   500  0892                     	;# 
   501  0893                     	;# 
   502  0895                     	;# 
   503  0896                     	;# 
   504  0897                     	;# 
   505  0898                     	;# 
   506  0899                     	;# 
   507  089A                     	;# 
   508  089B                     	;# 
   509  090C                     	;# 
   510  090E                     	;# 
   511  090F                     	;# 
   512  091F                     	;# 
   513  091F                     	;# 
   514  098F                     	;# 
   515  098F                     	;# 
   516  0990                     	;# 
   517  0991                     	;# 
   518  0992                     	;# 
   519  0993                     	;# 
   520  0994                     	;# 
   521  0995                     	;# 
   522  0996                     	;# 
   523  0997                     	;# 
   524  0E0F                     	;# 
   525  0E10                     	;# 
   526  0E11                     	;# 
   527  0E12                     	;# 
   528  0E13                     	;# 
   529  0E14                     	;# 
   530  0E15                     	;# 
   531  0E16                     	;# 
   532  0E17                     	;# 
   533  0E18                     	;# 
   534  0E19                     	;# 
   535  0E1A                     	;# 
   536  0E1B                     	;# 
   537  0E1C                     	;# 
   538  0E1D                     	;# 
   539  0E1E                     	;# 
   540  0E1F                     	;# 
   541  0E20                     	;# 
   542  0E21                     	;# 
   543  0E22                     	;# 
   544  0E23                     	;# 
   545  0E24                     	;# 
   546  0E25                     	;# 
   547  0E26                     	;# 
   548  0E27                     	;# 
   549  0E28                     	;# 
   550  0E29                     	;# 
   551  0E2A                     	;# 
   552  0E2B                     	;# 
   553  0E2C                     	;# 
   554  0E2D                     	;# 
   555  0E2E                     	;# 
   556  0E2F                     	;# 
   557  0E30                     	;# 
   558  0E31                     	;# 
   559  0E32                     	;# 
   560  0E33                     	;# 
   561  0E34                     	;# 
   562  0E35                     	;# 
   563  0E36                     	;# 
   564  0E37                     	;# 
   565  0E8F                     	;# 
   566  0E90                     	;# 
   567  0E91                     	;# 
   568  0E92                     	;# 
   569  0E93                     	;# 
   570  0E94                     	;# 
   571  0E95                     	;# 
   572  0E96                     	;# 
   573  0E97                     	;# 
   574  0E9C                     	;# 
   575  0E9D                     	;# 
   576  0E9E                     	;# 
   577  0EA1                     	;# 
   578  0EA2                     	;# 
   579  0EA3                     	;# 
   580  0EA4                     	;# 
   581  0EA5                     	;# 
   582  0EA9                     	;# 
   583  0EAA                     	;# 
   584  0EAB                     	;# 
   585  0EAC                     	;# 
   586  0EB1                     	;# 
   587  0EB2                     	;# 
   588  0EB3                     	;# 
   589  0EB8                     	;# 
   590  0EB9                     	;# 
   591  0EBA                     	;# 
   592  0EBB                     	;# 
   593  0EBC                     	;# 
   594  0EBD                     	;# 
   595  0EBE                     	;# 
   596  0EC3                     	;# 
   597  0EC5                     	;# 
   598  0EC6                     	;# 
   599  0EC7                     	;# 
   600  0EC8                     	;# 
   601  0EC9                     	;# 
   602  0ECA                     	;# 
   603  0ECB                     	;# 
   604  0ECC                     	;# 
   605  0F10                     	;# 
   606  0F11                     	;# 
   607  0F12                     	;# 
   608  0F13                     	;# 
   609  0F14                     	;# 
   610  0F15                     	;# 
   611  0F16                     	;# 
   612  0F17                     	;# 
   613  0F18                     	;# 
   614  0F19                     	;# 
   615  0F1A                     	;# 
   616  0F1B                     	;# 
   617  0F1C                     	;# 
   618  0F1D                     	;# 
   619  0F1E                     	;# 
   620  0F1F                     	;# 
   621  0F20                     	;# 
   622  0F21                     	;# 
   623  0F22                     	;# 
   624  0F23                     	;# 
   625  0F24                     	;# 
   626  0F25                     	;# 
   627  0F26                     	;# 
   628  0F27                     	;# 
   629  0F28                     	;# 
   630  0F29                     	;# 
   631  0F2A                     	;# 
   632  0F2B                     	;# 
   633  0F2C                     	;# 
   634  0F2D                     	;# 
   635  0F2E                     	;# 
   636  0F2F                     	;# 
   637  0F30                     	;# 
   638  0F31                     	;# 
   639  0F32                     	;# 
   640  0F38                     	;# 
   641  0F39                     	;# 
   642  0F3A                     	;# 
   643  0F3B                     	;# 
   644  0F3C                     	;# 
   645  0F3D                     	;# 
   646  0F3E                     	;# 
   647  0F3F                     	;# 
   648  0F40                     	;# 
   649  0F41                     	;# 
   650  0F43                     	;# 
   651  0F44                     	;# 
   652  0F45                     	;# 
   653  0F46                     	;# 
   654  0F47                     	;# 
   655  0F48                     	;# 
   656  0F49                     	;# 
   657  0F4A                     	;# 
   658  0F4B                     	;# 
   659  0F4C                     	;# 
   660  0F4E                     	;# 
   661  0F4F                     	;# 
   662  0F50                     	;# 
   663  0F51                     	;# 
   664  0F52                     	;# 
   665  0F53                     	;# 
   666  0F54                     	;# 
   667  0F55                     	;# 
   668  0F56                     	;# 
   669  0F57                     	;# 
   670  0F59                     	;# 
   671  0F5A                     	;# 
   672  0F5B                     	;# 
   673  0F5C                     	;# 
   674  0F5D                     	;# 
   675  0F61                     	;# 
   676  0F62                     	;# 
   677  0F64                     	;# 
   678  0F65                     	;# 
   679  0F66                     	;# 
   680  0F67                     	;# 
   681  0F68                     	;# 
   682  0F69                     	;# 
   683  0F6A                     	;# 
   684  0F6B                     	;# 
   685  0F6C                     	;# 
   686  0F6D                     	;# 
   687  0FE4                     	;# 
   688  0FE5                     	;# 
   689  0FE6                     	;# 
   690  0FE7                     	;# 
   691  0FE8                     	;# 
   692  0FE9                     	;# 
   693  0FEA                     	;# 
   694  0FEB                     	;# 
   695  0FED                     	;# 
   696  0FEE                     	;# 
   697  0FEF                     	;# 
   698  0000                     	;# 
   699  0001                     	;# 
   700  0002                     	;# 
   701  0003                     	;# 
   702  0004                     	;# 
   703  0005                     	;# 
   704  0006                     	;# 
   705  0007                     	;# 
   706  0008                     	;# 
   707  0009                     	;# 
   708  000A                     	;# 
   709  000B                     	;# 
   710  000C                     	;# 
   711  000D                     	;# 
   712  000E                     	;# 
   713  000F                     	;# 
   714  0010                     	;# 
   715  0011                     	;# 
   716  0012                     	;# 
   717  0013                     	;# 
   718  0014                     	;# 
   719  0015                     	;# 
   720  0016                     	;# 
   721  0017                     	;# 
   722  0018                     	;# 
   723  0019                     	;# 
   724  001A                     	;# 
   725  001C                     	;# 
   726  001C                     	;# 
   727  001D                     	;# 
   728  001D                     	;# 
   729  001E                     	;# 
   730  001F                     	;# 
   731  008C                     	;# 
   732  008C                     	;# 
   733  008D                     	;# 
   734  008E                     	;# 
   735  008E                     	;# 
   736  008F                     	;# 
   737  0090                     	;# 
   738  0090                     	;# 
   739  0091                     	;# 
   740  0093                     	;# 
   741  0094                     	;# 
   742  0095                     	;# 
   743  0096                     	;# 
   744  0097                     	;# 
   745  0098                     	;# 
   746  0099                     	;# 
   747  009A                     	;# 
   748  009B                     	;# 
   749  009C                     	;# 
   750  009D                     	;# 
   751  009E                     	;# 
   752  010C                     	;# 
   753  010D                     	;# 
   754  010E                     	;# 
   755  010E                     	;# 
   756  010F                     	;# 
   757  0110                     	;# 
   758  0110                     	;# 
   759  0111                     	;# 
   760  0112                     	;# 
   761  0112                     	;# 
   762  0113                     	;# 
   763  0114                     	;# 
   764  0114                     	;# 
   765  0115                     	;# 
   766  0116                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  0119                     	;# 
   770  0119                     	;# 
   771  0119                     	;# 
   772  011A                     	;# 
   773  011A                     	;# 
   774  011A                     	;# 
   775  011B                     	;# 
   776  011B                     	;# 
   777  011B                     	;# 
   778  011B                     	;# 
   779  011B                     	;# 
   780  011C                     	;# 
   781  011C                     	;# 
   782  011C                     	;# 
   783  011D                     	;# 
   784  011D                     	;# 
   785  011D                     	;# 
   786  011E                     	;# 
   787  011E                     	;# 
   788  011E                     	;# 
   789  011F                     	;# 
   790  011F                     	;# 
   791  011F                     	;# 
   792  011F                     	;# 
   793  011F                     	;# 
   794  018C                     	;# 
   795  018D                     	;# 
   796  018E                     	;# 
   797  018F                     	;# 
   798  0190                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0196                     	;# 
   802  0197                     	;# 
   803  0198                     	;# 
   804  0199                     	;# 
   805  019A                     	;# 
   806  019B                     	;# 
   807  019C                     	;# 
   808  020C                     	;# 
   809  020C                     	;# 
   810  020D                     	;# 
   811  020E                     	;# 
   812  020F                     	;# 
   813  020F                     	;# 
   814  0210                     	;# 
   815  0210                     	;# 
   816  0211                     	;# 
   817  0211                     	;# 
   818  0212                     	;# 
   819  0212                     	;# 
   820  0213                     	;# 
   821  0214                     	;# 
   822  0215                     	;# 
   823  0215                     	;# 
   824  0216                     	;# 
   825  0216                     	;# 
   826  0217                     	;# 
   827  0217                     	;# 
   828  0218                     	;# 
   829  0218                     	;# 
   830  0219                     	;# 
   831  021A                     	;# 
   832  021B                     	;# 
   833  021B                     	;# 
   834  021C                     	;# 
   835  021C                     	;# 
   836  021D                     	;# 
   837  021D                     	;# 
   838  021E                     	;# 
   839  021F                     	;# 
   840  028C                     	;# 
   841  028C                     	;# 
   842  028D                     	;# 
   843  028D                     	;# 
   844  028E                     	;# 
   845  028F                     	;# 
   846  0290                     	;# 
   847  0290                     	;# 
   848  0291                     	;# 
   849  0292                     	;# 
   850  0292                     	;# 
   851  0293                     	;# 
   852  0293                     	;# 
   853  0294                     	;# 
   854  0295                     	;# 
   855  0296                     	;# 
   856  0296                     	;# 
   857  0297                     	;# 
   858  0298                     	;# 
   859  0298                     	;# 
   860  0299                     	;# 
   861  0299                     	;# 
   862  029A                     	;# 
   863  029B                     	;# 
   864  029C                     	;# 
   865  029C                     	;# 
   866  029D                     	;# 
   867  030C                     	;# 
   868  030C                     	;# 
   869  030D                     	;# 
   870  030E                     	;# 
   871  030F                     	;# 
   872  0310                     	;# 
   873  0310                     	;# 
   874  0311                     	;# 
   875  0312                     	;# 
   876  0313                     	;# 
   877  0314                     	;# 
   878  0314                     	;# 
   879  0315                     	;# 
   880  0316                     	;# 
   881  0317                     	;# 
   882  0318                     	;# 
   883  0318                     	;# 
   884  0319                     	;# 
   885  031A                     	;# 
   886  031B                     	;# 
   887  031C                     	;# 
   888  031C                     	;# 
   889  031D                     	;# 
   890  031E                     	;# 
   891  031F                     	;# 
   892  038C                     	;# 
   893  038C                     	;# 
   894  038D                     	;# 
   895  038E                     	;# 
   896  0390                     	;# 
   897  0390                     	;# 
   898  0391                     	;# 
   899  0392                     	;# 
   900  040C                     	;# 
   901  040D                     	;# 
   902  040E                     	;# 
   903  040F                     	;# 
   904  0410                     	;# 
   905  0411                     	;# 
   906  0416                     	;# 
   907  0416                     	;# 
   908  0417                     	;# 
   909  0418                     	;# 
   910  0418                     	;# 
   911  0419                     	;# 
   912  041A                     	;# 
   913  041A                     	;# 
   914  041B                     	;# 
   915  041C                     	;# 
   916  041C                     	;# 
   917  041D                     	;# 
   918  041E                     	;# 
   919  041F                     	;# 
   920  048C                     	;# 
   921  048C                     	;# 
   922  048D                     	;# 
   923  048E                     	;# 
   924  048F                     	;# 
   925  048F                     	;# 
   926  0490                     	;# 
   927  0491                     	;# 
   928  0492                     	;# 
   929  0492                     	;# 
   930  0493                     	;# 
   931  0494                     	;# 
   932  0495                     	;# 
   933  0495                     	;# 
   934  0496                     	;# 
   935  0497                     	;# 
   936  0498                     	;# 
   937  0499                     	;# 
   938  049A                     	;# 
   939  049B                     	;# 
   940  049C                     	;# 
   941  049D                     	;# 
   942  050C                     	;# 
   943  050C                     	;# 
   944  050D                     	;# 
   945  050E                     	;# 
   946  050F                     	;# 
   947  050F                     	;# 
   948  0510                     	;# 
   949  0511                     	;# 
   950  0512                     	;# 
   951  0512                     	;# 
   952  0513                     	;# 
   953  0514                     	;# 
   954  0515                     	;# 
   955  0515                     	;# 
   956  0516                     	;# 
   957  0517                     	;# 
   958  0518                     	;# 
   959  0519                     	;# 
   960  051A                     	;# 
   961  051B                     	;# 
   962  051C                     	;# 
   963  051D                     	;# 
   964  058C                     	;# 
   965  058C                     	;# 
   966  058D                     	;# 
   967  058E                     	;# 
   968  058F                     	;# 
   969  058F                     	;# 
   970  0590                     	;# 
   971  0591                     	;# 
   972  0592                     	;# 
   973  0593                     	;# 
   974  060C                     	;# 
   975  060D                     	;# 
   976  060E                     	;# 
   977  060F                     	;# 
   978  0610                     	;# 
   979  0611                     	;# 
   980  0612                     	;# 
   981  0613                     	;# 
   982  0614                     	;# 
   983  0616                     	;# 
   984  0617                     	;# 
   985  0618                     	;# 
   986  0619                     	;# 
   987  061A                     	;# 
   988  061B                     	;# 
   989  061C                     	;# 
   990  061D                     	;# 
   991  061E                     	;# 
   992  068C                     	;# 
   993  068D                     	;# 
   994  068E                     	;# 
   995  068F                     	;# 
   996  0690                     	;# 
   997  0691                     	;# 
   998  0692                     	;# 
   999  0693                     	;# 
  1000  0694                     	;# 
  1001  070C                     	;# 
  1002  070D                     	;# 
  1003  070E                     	;# 
  1004  070F                     	;# 
  1005  0710                     	;# 
  1006  0711                     	;# 
  1007  0712                     	;# 
  1008  0713                     	;# 
  1009  0714                     	;# 
  1010  0716                     	;# 
  1011  0717                     	;# 
  1012  0718                     	;# 
  1013  0719                     	;# 
  1014  071A                     	;# 
  1015  071B                     	;# 
  1016  071C                     	;# 
  1017  071D                     	;# 
  1018  071E                     	;# 
  1019  0796                     	;# 
  1020  0797                     	;# 
  1021  0798                     	;# 
  1022  0799                     	;# 
  1023  079A                     	;# 
  1024  079B                     	;# 
  1025  080C                     	;# 
  1026  080D                     	;# 
  1027  080E                     	;# 
  1028  080F                     	;# 
  1029  0810                     	;# 
  1030  0811                     	;# 
  1031  0812                     	;# 
  1032  0813                     	;# 
  1033  0814                     	;# 
  1034  081A                     	;# 
  1035  081B                     	;# 
  1036  081C                     	;# 
  1037  081D                     	;# 
  1038  081E                     	;# 
  1039  081F                     	;# 
  1040  088C                     	;# 
  1041  088D                     	;# 
  1042  088E                     	;# 
  1043  088F                     	;# 
  1044  0890                     	;# 
  1045  0891                     	;# 
  1046  0892                     	;# 
  1047  0893                     	;# 
  1048  0895                     	;# 
  1049  0896                     	;# 
  1050  0897                     	;# 
  1051  0898                     	;# 
  1052  0899                     	;# 
  1053  089A                     	;# 
  1054  089B                     	;# 
  1055  090C                     	;# 
  1056  090E                     	;# 
  1057  090F                     	;# 
  1058  091F                     	;# 
  1059  091F                     	;# 
  1060  098F                     	;# 
  1061  098F                     	;# 
  1062  0990                     	;# 
  1063  0991                     	;# 
  1064  0992                     	;# 
  1065  0993                     	;# 
  1066  0994                     	;# 
  1067  0995                     	;# 
  1068  0996                     	;# 
  1069  0997                     	;# 
  1070  0E0F                     	;# 
  1071  0E10                     	;# 
  1072  0E11                     	;# 
  1073  0E12                     	;# 
  1074  0E13                     	;# 
  1075  0E14                     	;# 
  1076  0E15                     	;# 
  1077  0E16                     	;# 
  1078  0E17                     	;# 
  1079  0E18                     	;# 
  1080  0E19                     	;# 
  1081  0E1A                     	;# 
  1082  0E1B                     	;# 
  1083  0E1C                     	;# 
  1084  0E1D                     	;# 
  1085  0E1E                     	;# 
  1086  0E1F                     	;# 
  1087  0E20                     	;# 
  1088  0E21                     	;# 
  1089  0E22                     	;# 
  1090  0E23                     	;# 
  1091  0E24                     	;# 
  1092  0E25                     	;# 
  1093  0E26                     	;# 
  1094  0E27                     	;# 
  1095  0E28                     	;# 
  1096  0E29                     	;# 
  1097  0E2A                     	;# 
  1098  0E2B                     	;# 
  1099  0E2C                     	;# 
  1100  0E2D                     	;# 
  1101  0E2E                     	;# 
  1102  0E2F                     	;# 
  1103  0E30                     	;# 
  1104  0E31                     	;# 
  1105  0E32                     	;# 
  1106  0E33                     	;# 
  1107  0E34                     	;# 
  1108  0E35                     	;# 
  1109  0E36                     	;# 
  1110  0E37                     	;# 
  1111  0E8F                     	;# 
  1112  0E90                     	;# 
  1113  0E91                     	;# 
  1114  0E92                     	;# 
  1115  0E93                     	;# 
  1116  0E94                     	;# 
  1117  0E95                     	;# 
  1118  0E96                     	;# 
  1119  0E97                     	;# 
  1120  0E9C                     	;# 
  1121  0E9D                     	;# 
  1122  0E9E                     	;# 
  1123  0EA1                     	;# 
  1124  0EA2                     	;# 
  1125  0EA3                     	;# 
  1126  0EA4                     	;# 
  1127  0EA5                     	;# 
  1128  0EA9                     	;# 
  1129  0EAA                     	;# 
  1130  0EAB                     	;# 
  1131  0EAC                     	;# 
  1132  0EB1                     	;# 
  1133  0EB2                     	;# 
  1134  0EB3                     	;# 
  1135  0EB8                     	;# 
  1136  0EB9                     	;# 
  1137  0EBA                     	;# 
  1138  0EBB                     	;# 
  1139  0EBC                     	;# 
  1140  0EBD                     	;# 
  1141  0EBE                     	;# 
  1142  0EC3                     	;# 
  1143  0EC5                     	;# 
  1144  0EC6                     	;# 
  1145  0EC7                     	;# 
  1146  0EC8                     	;# 
  1147  0EC9                     	;# 
  1148  0ECA                     	;# 
  1149  0ECB                     	;# 
  1150  0ECC                     	;# 
  1151  0F10                     	;# 
  1152  0F11                     	;# 
  1153  0F12                     	;# 
  1154  0F13                     	;# 
  1155  0F14                     	;# 
  1156  0F15                     	;# 
  1157  0F16                     	;# 
  1158  0F17                     	;# 
  1159  0F18                     	;# 
  1160  0F19                     	;# 
  1161  0F1A                     	;# 
  1162  0F1B                     	;# 
  1163  0F1C                     	;# 
  1164  0F1D                     	;# 
  1165  0F1E                     	;# 
  1166  0F1F                     	;# 
  1167  0F20                     	;# 
  1168  0F21                     	;# 
  1169  0F22                     	;# 
  1170  0F23                     	;# 
  1171  0F24                     	;# 
  1172  0F25                     	;# 
  1173  0F26                     	;# 
  1174  0F27                     	;# 
  1175  0F28                     	;# 
  1176  0F29                     	;# 
  1177  0F2A                     	;# 
  1178  0F2B                     	;# 
  1179  0F2C                     	;# 
  1180  0F2D                     	;# 
  1181  0F2E                     	;# 
  1182  0F2F                     	;# 
  1183  0F30                     	;# 
  1184  0F31                     	;# 
  1185  0F32                     	;# 
  1186  0F38                     	;# 
  1187  0F39                     	;# 
  1188  0F3A                     	;# 
  1189  0F3B                     	;# 
  1190  0F3C                     	;# 
  1191  0F3D                     	;# 
  1192  0F3E                     	;# 
  1193  0F3F                     	;# 
  1194  0F40                     	;# 
  1195  0F41                     	;# 
  1196  0F43                     	;# 
  1197  0F44                     	;# 
  1198  0F45                     	;# 
  1199  0F46                     	;# 
  1200  0F47                     	;# 
  1201  0F48                     	;# 
  1202  0F49                     	;# 
  1203  0F4A                     	;# 
  1204  0F4B                     	;# 
  1205  0F4C                     	;# 
  1206  0F4E                     	;# 
  1207  0F4F                     	;# 
  1208  0F50                     	;# 
  1209  0F51                     	;# 
  1210  0F52                     	;# 
  1211  0F53                     	;# 
  1212  0F54                     	;# 
  1213  0F55                     	;# 
  1214  0F56                     	;# 
  1215  0F57                     	;# 
  1216  0F59                     	;# 
  1217  0F5A                     	;# 
  1218  0F5B                     	;# 
  1219  0F5C                     	;# 
  1220  0F5D                     	;# 
  1221  0F61                     	;# 
  1222  0F62                     	;# 
  1223  0F64                     	;# 
  1224  0F65                     	;# 
  1225  0F66                     	;# 
  1226  0F67                     	;# 
  1227  0F68                     	;# 
  1228  0F69                     	;# 
  1229  0F6A                     	;# 
  1230  0F6B                     	;# 
  1231  0F6C                     	;# 
  1232  0F6D                     	;# 
  1233  0FE4                     	;# 
  1234  0FE5                     	;# 
  1235  0FE6                     	;# 
  1236  0FE7                     	;# 
  1237  0FE8                     	;# 
  1238  0FE9                     	;# 
  1239  0FEA                     	;# 
  1240  0FEB                     	;# 
  1241  0FED                     	;# 
  1242  0FEE                     	;# 
  1243  0FEF                     	;# 
  1244  0000                     	;# 
  1245  0001                     	;# 
  1246  0002                     	;# 
  1247  0003                     	;# 
  1248  0004                     	;# 
  1249  0005                     	;# 
  1250  0006                     	;# 
  1251  0007                     	;# 
  1252  0008                     	;# 
  1253  0009                     	;# 
  1254  000A                     	;# 
  1255  000B                     	;# 
  1256  000C                     	;# 
  1257  000D                     	;# 
  1258  000E                     	;# 
  1259  000F                     	;# 
  1260  0010                     	;# 
  1261  0011                     	;# 
  1262  0012                     	;# 
  1263  0013                     	;# 
  1264  0014                     	;# 
  1265  0015                     	;# 
  1266  0016                     	;# 
  1267  0017                     	;# 
  1268  0018                     	;# 
  1269  0019                     	;# 
  1270  001A                     	;# 
  1271  001C                     	;# 
  1272  001C                     	;# 
  1273  001D                     	;# 
  1274  001D                     	;# 
  1275  001E                     	;# 
  1276  001F                     	;# 
  1277  008C                     	;# 
  1278  008C                     	;# 
  1279  008D                     	;# 
  1280  008E                     	;# 
  1281  008E                     	;# 
  1282  008F                     	;# 
  1283  0090                     	;# 
  1284  0090                     	;# 
  1285  0091                     	;# 
  1286  0093                     	;# 
  1287  0094                     	;# 
  1288  0095                     	;# 
  1289  0096                     	;# 
  1290  0097                     	;# 
  1291  0098                     	;# 
  1292  0099                     	;# 
  1293  009A                     	;# 
  1294  009B                     	;# 
  1295  009C                     	;# 
  1296  009D                     	;# 
  1297  009E                     	;# 
  1298  010C                     	;# 
  1299  010D                     	;# 
  1300  010E                     	;# 
  1301  010E                     	;# 
  1302  010F                     	;# 
  1303  0110                     	;# 
  1304  0110                     	;# 
  1305  0111                     	;# 
  1306  0112                     	;# 
  1307  0112                     	;# 
  1308  0113                     	;# 
  1309  0114                     	;# 
  1310  0114                     	;# 
  1311  0115                     	;# 
  1312  0116                     	;# 
  1313  0116                     	;# 
  1314  0117                     	;# 
  1315  0119                     	;# 
  1316  0119                     	;# 
  1317  0119                     	;# 
  1318  011A                     	;# 
  1319  011A                     	;# 
  1320  011A                     	;# 
  1321  011B                     	;# 
  1322  011B                     	;# 
  1323  011B                     	;# 
  1324  011B                     	;# 
  1325  011B                     	;# 
  1326  011C                     	;# 
  1327  011C                     	;# 
  1328  011C                     	;# 
  1329  011D                     	;# 
  1330  011D                     	;# 
  1331  011D                     	;# 
  1332  011E                     	;# 
  1333  011E                     	;# 
  1334  011E                     	;# 
  1335  011F                     	;# 
  1336  011F                     	;# 
  1337  011F                     	;# 
  1338  011F                     	;# 
  1339  011F                     	;# 
  1340  018C                     	;# 
  1341  018D                     	;# 
  1342  018E                     	;# 
  1343  018F                     	;# 
  1344  0190                     	;# 
  1345  0191                     	;# 
  1346  0192                     	;# 
  1347  0196                     	;# 
  1348  0197                     	;# 
  1349  0198                     	;# 
  1350  0199                     	;# 
  1351  019A                     	;# 
  1352  019B                     	;# 
  1353  019C                     	;# 
  1354  020C                     	;# 
  1355  020C                     	;# 
  1356  020D                     	;# 
  1357  020E                     	;# 
  1358  020F                     	;# 
  1359  020F                     	;# 
  1360  0210                     	;# 
  1361  0210                     	;# 
  1362  0211                     	;# 
  1363  0211                     	;# 
  1364  0212                     	;# 
  1365  0212                     	;# 
  1366  0213                     	;# 
  1367  0214                     	;# 
  1368  0215                     	;# 
  1369  0215                     	;# 
  1370  0216                     	;# 
  1371  0216                     	;# 
  1372  0217                     	;# 
  1373  0217                     	;# 
  1374  0218                     	;# 
  1375  0218                     	;# 
  1376  0219                     	;# 
  1377  021A                     	;# 
  1378  021B                     	;# 
  1379  021B                     	;# 
  1380  021C                     	;# 
  1381  021C                     	;# 
  1382  021D                     	;# 
  1383  021D                     	;# 
  1384  021E                     	;# 
  1385  021F                     	;# 
  1386  028C                     	;# 
  1387  028C                     	;# 
  1388  028D                     	;# 
  1389  028D                     	;# 
  1390  028E                     	;# 
  1391  028F                     	;# 
  1392  0290                     	;# 
  1393  0290                     	;# 
  1394  0291                     	;# 
  1395  0292                     	;# 
  1396  0292                     	;# 
  1397  0293                     	;# 
  1398  0293                     	;# 
  1399  0294                     	;# 
  1400  0295                     	;# 
  1401  0296                     	;# 
  1402  0296                     	;# 
  1403  0297                     	;# 
  1404  0298                     	;# 
  1405  0298                     	;# 
  1406  0299                     	;# 
  1407  0299                     	;# 
  1408  029A                     	;# 
  1409  029B                     	;# 
  1410  029C                     	;# 
  1411  029C                     	;# 
  1412  029D                     	;# 
  1413  030C                     	;# 
  1414  030C                     	;# 
  1415  030D                     	;# 
  1416  030E                     	;# 
  1417  030F                     	;# 
  1418  0310                     	;# 
  1419  0310                     	;# 
  1420  0311                     	;# 
  1421  0312                     	;# 
  1422  0313                     	;# 
  1423  0314                     	;# 
  1424  0314                     	;# 
  1425  0315                     	;# 
  1426  0316                     	;# 
  1427  0317                     	;# 
  1428  0318                     	;# 
  1429  0318                     	;# 
  1430  0319                     	;# 
  1431  031A                     	;# 
  1432  031B                     	;# 
  1433  031C                     	;# 
  1434  031C                     	;# 
  1435  031D                     	;# 
  1436  031E                     	;# 
  1437  031F                     	;# 
  1438  038C                     	;# 
  1439  038C                     	;# 
  1440  038D                     	;# 
  1441  038E                     	;# 
  1442  0390                     	;# 
  1443  0390                     	;# 
  1444  0391                     	;# 
  1445  0392                     	;# 
  1446  040C                     	;# 
  1447  040D                     	;# 
  1448  040E                     	;# 
  1449  040F                     	;# 
  1450  0410                     	;# 
  1451  0411                     	;# 
  1452  0416                     	;# 
  1453  0416                     	;# 
  1454  0417                     	;# 
  1455  0418                     	;# 
  1456  0418                     	;# 
  1457  0419                     	;# 
  1458  041A                     	;# 
  1459  041A                     	;# 
  1460  041B                     	;# 
  1461  041C                     	;# 
  1462  041C                     	;# 
  1463  041D                     	;# 
  1464  041E                     	;# 
  1465  041F                     	;# 
  1466  048C                     	;# 
  1467  048C                     	;# 
  1468  048D                     	;# 
  1469  048E                     	;# 
  1470  048F                     	;# 
  1471  048F                     	;# 
  1472  0490                     	;# 
  1473  0491                     	;# 
  1474  0492                     	;# 
  1475  0492                     	;# 
  1476  0493                     	;# 
  1477  0494                     	;# 
  1478  0495                     	;# 
  1479  0495                     	;# 
  1480  0496                     	;# 
  1481  0497                     	;# 
  1482  0498                     	;# 
  1483  0499                     	;# 
  1484  049A                     	;# 
  1485  049B                     	;# 
  1486  049C                     	;# 
  1487  049D                     	;# 
  1488  050C                     	;# 
  1489  050C                     	;# 
  1490  050D                     	;# 
  1491  050E                     	;# 
  1492  050F                     	;# 
  1493  050F                     	;# 
  1494  0510                     	;# 
  1495  0511                     	;# 
  1496  0512                     	;# 
  1497  0512                     	;# 
  1498  0513                     	;# 
  1499  0514                     	;# 
  1500  0515                     	;# 
  1501  0515                     	;# 
  1502  0516                     	;# 
  1503  0517                     	;# 
  1504  0518                     	;# 
  1505  0519                     	;# 
  1506  051A                     	;# 
  1507  051B                     	;# 
  1508  051C                     	;# 
  1509  051D                     	;# 
  1510  058C                     	;# 
  1511  058C                     	;# 
  1512  058D                     	;# 
  1513  058E                     	;# 
  1514  058F                     	;# 
  1515  058F                     	;# 
  1516  0590                     	;# 
  1517  0591                     	;# 
  1518  0592                     	;# 
  1519  0593                     	;# 
  1520  060C                     	;# 
  1521  060D                     	;# 
  1522  060E                     	;# 
  1523  060F                     	;# 
  1524  0610                     	;# 
  1525  0611                     	;# 
  1526  0612                     	;# 
  1527  0613                     	;# 
  1528  0614                     	;# 
  1529  0616                     	;# 
  1530  0617                     	;# 
  1531  0618                     	;# 
  1532  0619                     	;# 
  1533  061A                     	;# 
  1534  061B                     	;# 
  1535  061C                     	;# 
  1536  061D                     	;# 
  1537  061E                     	;# 
  1538  068C                     	;# 
  1539  068D                     	;# 
  1540  068E                     	;# 
  1541  068F                     	;# 
  1542  0690                     	;# 
  1543  0691                     	;# 
  1544  0692                     	;# 
  1545  0693                     	;# 
  1546  0694                     	;# 
  1547  070C                     	;# 
  1548  070D                     	;# 
  1549  070E                     	;# 
  1550  070F                     	;# 
  1551  0710                     	;# 
  1552  0711                     	;# 
  1553  0712                     	;# 
  1554  0713                     	;# 
  1555  0714                     	;# 
  1556  0716                     	;# 
  1557  0717                     	;# 
  1558  0718                     	;# 
  1559  0719                     	;# 
  1560  071A                     	;# 
  1561  071B                     	;# 
  1562  071C                     	;# 
  1563  071D                     	;# 
  1564  071E                     	;# 
  1565  0796                     	;# 
  1566  0797                     	;# 
  1567  0798                     	;# 
  1568  0799                     	;# 
  1569  079A                     	;# 
  1570  079B                     	;# 
  1571  080C                     	;# 
  1572  080D                     	;# 
  1573  080E                     	;# 
  1574  080F                     	;# 
  1575  0810                     	;# 
  1576  0811                     	;# 
  1577  0812                     	;# 
  1578  0813                     	;# 
  1579  0814                     	;# 
  1580  081A                     	;# 
  1581  081B                     	;# 
  1582  081C                     	;# 
  1583  081D                     	;# 
  1584  081E                     	;# 
  1585  081F                     	;# 
  1586  088C                     	;# 
  1587  088D                     	;# 
  1588  088E                     	;# 
  1589  088F                     	;# 
  1590  0890                     	;# 
  1591  0891                     	;# 
  1592  0892                     	;# 
  1593  0893                     	;# 
  1594  0895                     	;# 
  1595  0896                     	;# 
  1596  0897                     	;# 
  1597  0898                     	;# 
  1598  0899                     	;# 
  1599  089A                     	;# 
  1600  089B                     	;# 
  1601  090C                     	;# 
  1602  090E                     	;# 
  1603  090F                     	;# 
  1604  091F                     	;# 
  1605  091F                     	;# 
  1606  098F                     	;# 
  1607  098F                     	;# 
  1608  0990                     	;# 
  1609  0991                     	;# 
  1610  0992                     	;# 
  1611  0993                     	;# 
  1612  0994                     	;# 
  1613  0995                     	;# 
  1614  0996                     	;# 
  1615  0997                     	;# 
  1616  0E0F                     	;# 
  1617  0E10                     	;# 
  1618  0E11                     	;# 
  1619  0E12                     	;# 
  1620  0E13                     	;# 
  1621  0E14                     	;# 
  1622  0E15                     	;# 
  1623  0E16                     	;# 
  1624  0E17                     	;# 
  1625  0E18                     	;# 
  1626  0E19                     	;# 
  1627  0E1A                     	;# 
  1628  0E1B                     	;# 
  1629  0E1C                     	;# 
  1630  0E1D                     	;# 
  1631  0E1E                     	;# 
  1632  0E1F                     	;# 
  1633  0E20                     	;# 
  1634  0E21                     	;# 
  1635  0E22                     	;# 
  1636  0E23                     	;# 
  1637  0E24                     	;# 
  1638  0E25                     	;# 
  1639  0E26                     	;# 
  1640  0E27                     	;# 
  1641  0E28                     	;# 
  1642  0E29                     	;# 
  1643  0E2A                     	;# 
  1644  0E2B                     	;# 
  1645  0E2C                     	;# 
  1646  0E2D                     	;# 
  1647  0E2E                     	;# 
  1648  0E2F                     	;# 
  1649  0E30                     	;# 
  1650  0E31                     	;# 
  1651  0E32                     	;# 
  1652  0E33                     	;# 
  1653  0E34                     	;# 
  1654  0E35                     	;# 
  1655  0E36                     	;# 
  1656  0E37                     	;# 
  1657  0E8F                     	;# 
  1658  0E90                     	;# 
  1659  0E91                     	;# 
  1660  0E92                     	;# 
  1661  0E93                     	;# 
  1662  0E94                     	;# 
  1663  0E95                     	;# 
  1664  0E96                     	;# 
  1665  0E97                     	;# 
  1666  0E9C                     	;# 
  1667  0E9D                     	;# 
  1668  0E9E                     	;# 
  1669  0EA1                     	;# 
  1670  0EA2                     	;# 
  1671  0EA3                     	;# 
  1672  0EA4                     	;# 
  1673  0EA5                     	;# 
  1674  0EA9                     	;# 
  1675  0EAA                     	;# 
  1676  0EAB                     	;# 
  1677  0EAC                     	;# 
  1678  0EB1                     	;# 
  1679  0EB2                     	;# 
  1680  0EB3                     	;# 
  1681  0EB8                     	;# 
  1682  0EB9                     	;# 
  1683  0EBA                     	;# 
  1684  0EBB                     	;# 
  1685  0EBC                     	;# 
  1686  0EBD                     	;# 
  1687  0EBE                     	;# 
  1688  0EC3                     	;# 
  1689  0EC5                     	;# 
  1690  0EC6                     	;# 
  1691  0EC7                     	;# 
  1692  0EC8                     	;# 
  1693  0EC9                     	;# 
  1694  0ECA                     	;# 
  1695  0ECB                     	;# 
  1696  0ECC                     	;# 
  1697  0F10                     	;# 
  1698  0F11                     	;# 
  1699  0F12                     	;# 
  1700  0F13                     	;# 
  1701  0F14                     	;# 
  1702  0F15                     	;# 
  1703  0F16                     	;# 
  1704  0F17                     	;# 
  1705  0F18                     	;# 
  1706  0F19                     	;# 
  1707  0F1A                     	;# 
  1708  0F1B                     	;# 
  1709  0F1C                     	;# 
  1710  0F1D                     	;# 
  1711  0F1E                     	;# 
  1712  0F1F                     	;# 
  1713  0F20                     	;# 
  1714  0F21                     	;# 
  1715  0F22                     	;# 
  1716  0F23                     	;# 
  1717  0F24                     	;# 
  1718  0F25                     	;# 
  1719  0F26                     	;# 
  1720  0F27                     	;# 
  1721  0F28                     	;# 
  1722  0F29                     	;# 
  1723  0F2A                     	;# 
  1724  0F2B                     	;# 
  1725  0F2C                     	;# 
  1726  0F2D                     	;# 
  1727  0F2E                     	;# 
  1728  0F2F                     	;# 
  1729  0F30                     	;# 
  1730  0F31                     	;# 
  1731  0F32                     	;# 
  1732  0F38                     	;# 
  1733  0F39                     	;# 
  1734  0F3A                     	;# 
  1735  0F3B                     	;# 
  1736  0F3C                     	;# 
  1737  0F3D                     	;# 
  1738  0F3E                     	;# 
  1739  0F3F                     	;# 
  1740  0F40                     	;# 
  1741  0F41                     	;# 
  1742  0F43                     	;# 
  1743  0F44                     	;# 
  1744  0F45                     	;# 
  1745  0F46                     	;# 
  1746  0F47                     	;# 
  1747  0F48                     	;# 
  1748  0F49                     	;# 
  1749  0F4A                     	;# 
  1750  0F4B                     	;# 
  1751  0F4C                     	;# 
  1752  0F4E                     	;# 
  1753  0F4F                     	;# 
  1754  0F50                     	;# 
  1755  0F51                     	;# 
  1756  0F52                     	;# 
  1757  0F53                     	;# 
  1758  0F54                     	;# 
  1759  0F55                     	;# 
  1760  0F56                     	;# 
  1761  0F57                     	;# 
  1762  0F59                     	;# 
  1763  0F5A                     	;# 
  1764  0F5B                     	;# 
  1765  0F5C                     	;# 
  1766  0F5D                     	;# 
  1767  0F61                     	;# 
  1768  0F62                     	;# 
  1769  0F64                     	;# 
  1770  0F65                     	;# 
  1771  0F66                     	;# 
  1772  0F67                     	;# 
  1773  0F68                     	;# 
  1774  0F69                     	;# 
  1775  0F6A                     	;# 
  1776  0F6B                     	;# 
  1777  0F6C                     	;# 
  1778  0F6D                     	;# 
  1779  0FE4                     	;# 
  1780  0FE5                     	;# 
  1781  0FE6                     	;# 
  1782  0FE7                     	;# 
  1783  0FE8                     	;# 
  1784  0FE9                     	;# 
  1785  0FEA                     	;# 
  1786  0FEB                     	;# 
  1787  0FED                     	;# 
  1788  0FEE                     	;# 
  1789  0FEF                     	;# 
  1790  0000                     	;# 
  1791  0001                     	;# 
  1792  0002                     	;# 
  1793  0003                     	;# 
  1794  0004                     	;# 
  1795  0005                     	;# 
  1796  0006                     	;# 
  1797  0007                     	;# 
  1798  0008                     	;# 
  1799  0009                     	;# 
  1800  000A                     	;# 
  1801  000B                     	;# 
  1802  000C                     	;# 
  1803  000D                     	;# 
  1804  000E                     	;# 
  1805  000F                     	;# 
  1806  0010                     	;# 
  1807  0011                     	;# 
  1808  0012                     	;# 
  1809  0013                     	;# 
  1810  0014                     	;# 
  1811  0015                     	;# 
  1812  0016                     	;# 
  1813  0017                     	;# 
  1814  0018                     	;# 
  1815  0019                     	;# 
  1816  001A                     	;# 
  1817  001C                     	;# 
  1818  001C                     	;# 
  1819  001D                     	;# 
  1820  001D                     	;# 
  1821  001E                     	;# 
  1822  001F                     	;# 
  1823  008C                     	;# 
  1824  008C                     	;# 
  1825  008D                     	;# 
  1826  008E                     	;# 
  1827  008E                     	;# 
  1828  008F                     	;# 
  1829  0090                     	;# 
  1830  0090                     	;# 
  1831  0091                     	;# 
  1832  0093                     	;# 
  1833  0094                     	;# 
  1834  0095                     	;# 
  1835  0096                     	;# 
  1836  0097                     	;# 
  1837  0098                     	;# 
  1838  0099                     	;# 
  1839  009A                     	;# 
  1840  009B                     	;# 
  1841  009C                     	;# 
  1842  009D                     	;# 
  1843  009E                     	;# 
  1844  010C                     	;# 
  1845  010D                     	;# 
  1846  010E                     	;# 
  1847  010E                     	;# 
  1848  010F                     	;# 
  1849  0110                     	;# 
  1850  0110                     	;# 
  1851  0111                     	;# 
  1852  0112                     	;# 
  1853  0112                     	;# 
  1854  0113                     	;# 
  1855  0114                     	;# 
  1856  0114                     	;# 
  1857  0115                     	;# 
  1858  0116                     	;# 
  1859  0116                     	;# 
  1860  0117                     	;# 
  1861  0119                     	;# 
  1862  0119                     	;# 
  1863  0119                     	;# 
  1864  011A                     	;# 
  1865  011A                     	;# 
  1866  011A                     	;# 
  1867  011B                     	;# 
  1868  011B                     	;# 
  1869  011B                     	;# 
  1870  011B                     	;# 
  1871  011B                     	;# 
  1872  011C                     	;# 
  1873  011C                     	;# 
  1874  011C                     	;# 
  1875  011D                     	;# 
  1876  011D                     	;# 
  1877  011D                     	;# 
  1878  011E                     	;# 
  1879  011E                     	;# 
  1880  011E                     	;# 
  1881  011F                     	;# 
  1882  011F                     	;# 
  1883  011F                     	;# 
  1884  011F                     	;# 
  1885  011F                     	;# 
  1886  018C                     	;# 
  1887  018D                     	;# 
  1888  018E                     	;# 
  1889  018F                     	;# 
  1890  0190                     	;# 
  1891  0191                     	;# 
  1892  0192                     	;# 
  1893  0196                     	;# 
  1894  0197                     	;# 
  1895  0198                     	;# 
  1896  0199                     	;# 
  1897  019A                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  020C                     	;# 
  1901  020C                     	;# 
  1902  020D                     	;# 
  1903  020E                     	;# 
  1904  020F                     	;# 
  1905  020F                     	;# 
  1906  0210                     	;# 
  1907  0210                     	;# 
  1908  0211                     	;# 
  1909  0211                     	;# 
  1910  0212                     	;# 
  1911  0212                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0218                     	;# 
  1921  0218                     	;# 
  1922  0219                     	;# 
  1923  021A                     	;# 
  1924  021B                     	;# 
  1925  021B                     	;# 
  1926  021C                     	;# 
  1927  021C                     	;# 
  1928  021D                     	;# 
  1929  021D                     	;# 
  1930  021E                     	;# 
  1931  021F                     	;# 
  1932  028C                     	;# 
  1933  028C                     	;# 
  1934  028D                     	;# 
  1935  028D                     	;# 
  1936  028E                     	;# 
  1937  028F                     	;# 
  1938  0290                     	;# 
  1939  0290                     	;# 
  1940  0291                     	;# 
  1941  0292                     	;# 
  1942  0292                     	;# 
  1943  0293                     	;# 
  1944  0293                     	;# 
  1945  0294                     	;# 
  1946  0295                     	;# 
  1947  0296                     	;# 
  1948  0296                     	;# 
  1949  0297                     	;# 
  1950  0298                     	;# 
  1951  0298                     	;# 
  1952  0299                     	;# 
  1953  0299                     	;# 
  1954  029A                     	;# 
  1955  029B                     	;# 
  1956  029C                     	;# 
  1957  029C                     	;# 
  1958  029D                     	;# 
  1959  030C                     	;# 
  1960  030C                     	;# 
  1961  030D                     	;# 
  1962  030E                     	;# 
  1963  030F                     	;# 
  1964  0310                     	;# 
  1965  0310                     	;# 
  1966  0311                     	;# 
  1967  0312                     	;# 
  1968  0313                     	;# 
  1969  0314                     	;# 
  1970  0314                     	;# 
  1971  0315                     	;# 
  1972  0316                     	;# 
  1973  0317                     	;# 
  1974  0318                     	;# 
  1975  0318                     	;# 
  1976  0319                     	;# 
  1977  031A                     	;# 
  1978  031B                     	;# 
  1979  031C                     	;# 
  1980  031C                     	;# 
  1981  031D                     	;# 
  1982  031E                     	;# 
  1983  031F                     	;# 
  1984  038C                     	;# 
  1985  038C                     	;# 
  1986  038D                     	;# 
  1987  038E                     	;# 
  1988  0390                     	;# 
  1989  0390                     	;# 
  1990  0391                     	;# 
  1991  0392                     	;# 
  1992  040C                     	;# 
  1993  040D                     	;# 
  1994  040E                     	;# 
  1995  040F                     	;# 
  1996  0410                     	;# 
  1997  0411                     	;# 
  1998  0416                     	;# 
  1999  0416                     	;# 
  2000  0417                     	;# 
  2001  0418                     	;# 
  2002  0418                     	;# 
  2003  0419                     	;# 
  2004  041A                     	;# 
  2005  041A                     	;# 
  2006  041B                     	;# 
  2007  041C                     	;# 
  2008  041C                     	;# 
  2009  041D                     	;# 
  2010  041E                     	;# 
  2011  041F                     	;# 
  2012  048C                     	;# 
  2013  048C                     	;# 
  2014  048D                     	;# 
  2015  048E                     	;# 
  2016  048F                     	;# 
  2017  048F                     	;# 
  2018  0490                     	;# 
  2019  0491                     	;# 
  2020  0492                     	;# 
  2021  0492                     	;# 
  2022  0493                     	;# 
  2023  0494                     	;# 
  2024  0495                     	;# 
  2025  0495                     	;# 
  2026  0496                     	;# 
  2027  0497                     	;# 
  2028  0498                     	;# 
  2029  0499                     	;# 
  2030  049A                     	;# 
  2031  049B                     	;# 
  2032  049C                     	;# 
  2033  049D                     	;# 
  2034  050C                     	;# 
  2035  050C                     	;# 
  2036  050D                     	;# 
  2037  050E                     	;# 
  2038  050F                     	;# 
  2039  050F                     	;# 
  2040  0510                     	;# 
  2041  0511                     	;# 
  2042  0512                     	;# 
  2043  0512                     	;# 
  2044  0513                     	;# 
  2045  0514                     	;# 
  2046  0515                     	;# 
  2047  0515                     	;# 
  2048  0516                     	;# 
  2049  0517                     	;# 
  2050  0518                     	;# 
  2051  0519                     	;# 
  2052  051A                     	;# 
  2053  051B                     	;# 
  2054  051C                     	;# 
  2055  051D                     	;# 
  2056  058C                     	;# 
  2057  058C                     	;# 
  2058  058D                     	;# 
  2059  058E                     	;# 
  2060  058F                     	;# 
  2061  058F                     	;# 
  2062  0590                     	;# 
  2063  0591                     	;# 
  2064  0592                     	;# 
  2065  0593                     	;# 
  2066  060C                     	;# 
  2067  060D                     	;# 
  2068  060E                     	;# 
  2069  060F                     	;# 
  2070  0610                     	;# 
  2071  0611                     	;# 
  2072  0612                     	;# 
  2073  0613                     	;# 
  2074  0614                     	;# 
  2075  0616                     	;# 
  2076  0617                     	;# 
  2077  0618                     	;# 
  2078  0619                     	;# 
  2079  061A                     	;# 
  2080  061B                     	;# 
  2081  061C                     	;# 
  2082  061D                     	;# 
  2083  061E                     	;# 
  2084  068C                     	;# 
  2085  068D                     	;# 
  2086  068E                     	;# 
  2087  068F                     	;# 
  2088  0690                     	;# 
  2089  0691                     	;# 
  2090  0692                     	;# 
  2091  0693                     	;# 
  2092  0694                     	;# 
  2093  070C                     	;# 
  2094  070D                     	;# 
  2095  070E                     	;# 
  2096  070F                     	;# 
  2097  0710                     	;# 
  2098  0711                     	;# 
  2099  0712                     	;# 
  2100  0713                     	;# 
  2101  0714                     	;# 
  2102  0716                     	;# 
  2103  0717                     	;# 
  2104  0718                     	;# 
  2105  0719                     	;# 
  2106  071A                     	;# 
  2107  071B                     	;# 
  2108  071C                     	;# 
  2109  071D                     	;# 
  2110  071E                     	;# 
  2111  0796                     	;# 
  2112  0797                     	;# 
  2113  0798                     	;# 
  2114  0799                     	;# 
  2115  079A                     	;# 
  2116  079B                     	;# 
  2117  080C                     	;# 
  2118  080D                     	;# 
  2119  080E                     	;# 
  2120  080F                     	;# 
  2121  0810                     	;# 
  2122  0811                     	;# 
  2123  0812                     	;# 
  2124  0813                     	;# 
  2125  0814                     	;# 
  2126  081A                     	;# 
  2127  081B                     	;# 
  2128  081C                     	;# 
  2129  081D                     	;# 
  2130  081E                     	;# 
  2131  081F                     	;# 
  2132  088C                     	;# 
  2133  088D                     	;# 
  2134  088E                     	;# 
  2135  088F                     	;# 
  2136  0890                     	;# 
  2137  0891                     	;# 
  2138  0892                     	;# 
  2139  0893                     	;# 
  2140  0895                     	;# 
  2141  0896                     	;# 
  2142  0897                     	;# 
  2143  0898                     	;# 
  2144  0899                     	;# 
  2145  089A                     	;# 
  2146  089B                     	;# 
  2147  090C                     	;# 
  2148  090E                     	;# 
  2149  090F                     	;# 
  2150  091F                     	;# 
  2151  091F                     	;# 
  2152  098F                     	;# 
  2153  098F                     	;# 
  2154  0990                     	;# 
  2155  0991                     	;# 
  2156  0992                     	;# 
  2157  0993                     	;# 
  2158  0994                     	;# 
  2159  0995                     	;# 
  2160  0996                     	;# 
  2161  0997                     	;# 
  2162  0E0F                     	;# 
  2163  0E10                     	;# 
  2164  0E11                     	;# 
  2165  0E12                     	;# 
  2166  0E13                     	;# 
  2167  0E14                     	;# 
  2168  0E15                     	;# 
  2169  0E16                     	;# 
  2170  0E17                     	;# 
  2171  0E18                     	;# 
  2172  0E19                     	;# 
  2173  0E1A                     	;# 
  2174  0E1B                     	;# 
  2175  0E1C                     	;# 
  2176  0E1D                     	;# 
  2177  0E1E                     	;# 
  2178  0E1F                     	;# 
  2179  0E20                     	;# 
  2180  0E21                     	;# 
  2181  0E22                     	;# 
  2182  0E23                     	;# 
  2183  0E24                     	;# 
  2184  0E25                     	;# 
  2185  0E26                     	;# 
  2186  0E27                     	;# 
  2187  0E28                     	;# 
  2188  0E29                     	;# 
  2189  0E2A                     	;# 
  2190  0E2B                     	;# 
  2191  0E2C                     	;# 
  2192  0E2D                     	;# 
  2193  0E2E                     	;# 
  2194  0E2F                     	;# 
  2195  0E30                     	;# 
  2196  0E31                     	;# 
  2197  0E32                     	;# 
  2198  0E33                     	;# 
  2199  0E34                     	;# 
  2200  0E35                     	;# 
  2201  0E36                     	;# 
  2202  0E37                     	;# 
  2203  0E8F                     	;# 
  2204  0E90                     	;# 
  2205  0E91                     	;# 
  2206  0E92                     	;# 
  2207  0E93                     	;# 
  2208  0E94                     	;# 
  2209  0E95                     	;# 
  2210  0E96                     	;# 
  2211  0E97                     	;# 
  2212  0E9C                     	;# 
  2213  0E9D                     	;# 
  2214  0E9E                     	;# 
  2215  0EA1                     	;# 
  2216  0EA2                     	;# 
  2217  0EA3                     	;# 
  2218  0EA4                     	;# 
  2219  0EA5                     	;# 
  2220  0EA9                     	;# 
  2221  0EAA                     	;# 
  2222  0EAB                     	;# 
  2223  0EAC                     	;# 
  2224  0EB1                     	;# 
  2225  0EB2                     	;# 
  2226  0EB3                     	;# 
  2227  0EB8                     	;# 
  2228  0EB9                     	;# 
  2229  0EBA                     	;# 
  2230  0EBB                     	;# 
  2231  0EBC                     	;# 
  2232  0EBD                     	;# 
  2233  0EBE                     	;# 
  2234  0EC3                     	;# 
  2235  0EC5                     	;# 
  2236  0EC6                     	;# 
  2237  0EC7                     	;# 
  2238  0EC8                     	;# 
  2239  0EC9                     	;# 
  2240  0ECA                     	;# 
  2241  0ECB                     	;# 
  2242  0ECC                     	;# 
  2243  0F10                     	;# 
  2244  0F11                     	;# 
  2245  0F12                     	;# 
  2246  0F13                     	;# 
  2247  0F14                     	;# 
  2248  0F15                     	;# 
  2249  0F16                     	;# 
  2250  0F17                     	;# 
  2251  0F18                     	;# 
  2252  0F19                     	;# 
  2253  0F1A                     	;# 
  2254  0F1B                     	;# 
  2255  0F1C                     	;# 
  2256  0F1D                     	;# 
  2257  0F1E                     	;# 
  2258  0F1F                     	;# 
  2259  0F20                     	;# 
  2260  0F21                     	;# 
  2261  0F22                     	;# 
  2262  0F23                     	;# 
  2263  0F24                     	;# 
  2264  0F25                     	;# 
  2265  0F26                     	;# 
  2266  0F27                     	;# 
  2267  0F28                     	;# 
  2268  0F29                     	;# 
  2269  0F2A                     	;# 
  2270  0F2B                     	;# 
  2271  0F2C                     	;# 
  2272  0F2D                     	;# 
  2273  0F2E                     	;# 
  2274  0F2F                     	;# 
  2275  0F30                     	;# 
  2276  0F31                     	;# 
  2277  0F32                     	;# 
  2278  0F38                     	;# 
  2279  0F39                     	;# 
  2280  0F3A                     	;# 
  2281  0F3B                     	;# 
  2282  0F3C                     	;# 
  2283  0F3D                     	;# 
  2284  0F3E                     	;# 
  2285  0F3F                     	;# 
  2286  0F40                     	;# 
  2287  0F41                     	;# 
  2288  0F43                     	;# 
  2289  0F44                     	;# 
  2290  0F45                     	;# 
  2291  0F46                     	;# 
  2292  0F47                     	;# 
  2293  0F48                     	;# 
  2294  0F49                     	;# 
  2295  0F4A                     	;# 
  2296  0F4B                     	;# 
  2297  0F4C                     	;# 
  2298  0F4E                     	;# 
  2299  0F4F                     	;# 
  2300  0F50                     	;# 
  2301  0F51                     	;# 
  2302  0F52                     	;# 
  2303  0F53                     	;# 
  2304  0F54                     	;# 
  2305  0F55                     	;# 
  2306  0F56                     	;# 
  2307  0F57                     	;# 
  2308  0F59                     	;# 
  2309  0F5A                     	;# 
  2310  0F5B                     	;# 
  2311  0F5C                     	;# 
  2312  0F5D                     	;# 
  2313  0F61                     	;# 
  2314  0F62                     	;# 
  2315  0F64                     	;# 
  2316  0F65                     	;# 
  2317  0F66                     	;# 
  2318  0F67                     	;# 
  2319  0F68                     	;# 
  2320  0F69                     	;# 
  2321  0F6A                     	;# 
  2322  0F6B                     	;# 
  2323  0F6C                     	;# 
  2324  0F6D                     	;# 
  2325  0FE4                     	;# 
  2326  0FE5                     	;# 
  2327  0FE6                     	;# 
  2328  0FE7                     	;# 
  2329  0FE8                     	;# 
  2330  0FE9                     	;# 
  2331  0FEA                     	;# 
  2332  0FEB                     	;# 
  2333  0FED                     	;# 
  2334  0FEE                     	;# 
  2335  0FEF                     	;# 
  2336  0000                     	;# 
  2337  0001                     	;# 
  2338  0002                     	;# 
  2339  0003                     	;# 
  2340  0004                     	;# 
  2341  0005                     	;# 
  2342  0006                     	;# 
  2343  0007                     	;# 
  2344  0008                     	;# 
  2345  0009                     	;# 
  2346  000A                     	;# 
  2347  000B                     	;# 
  2348  000C                     	;# 
  2349  000D                     	;# 
  2350  000E                     	;# 
  2351  000F                     	;# 
  2352  0010                     	;# 
  2353  0011                     	;# 
  2354  0012                     	;# 
  2355  0013                     	;# 
  2356  0014                     	;# 
  2357  0015                     	;# 
  2358  0016                     	;# 
  2359  0017                     	;# 
  2360  0018                     	;# 
  2361  0019                     	;# 
  2362  001A                     	;# 
  2363  001C                     	;# 
  2364  001C                     	;# 
  2365  001D                     	;# 
  2366  001D                     	;# 
  2367  001E                     	;# 
  2368  001F                     	;# 
  2369  008C                     	;# 
  2370  008C                     	;# 
  2371  008D                     	;# 
  2372  008E                     	;# 
  2373  008E                     	;# 
  2374  008F                     	;# 
  2375  0090                     	;# 
  2376  0090                     	;# 
  2377  0091                     	;# 
  2378  0093                     	;# 
  2379  0094                     	;# 
  2380  0095                     	;# 
  2381  0096                     	;# 
  2382  0097                     	;# 
  2383  0098                     	;# 
  2384  0099                     	;# 
  2385  009A                     	;# 
  2386  009B                     	;# 
  2387  009C                     	;# 
  2388  009D                     	;# 
  2389  009E                     	;# 
  2390  010C                     	;# 
  2391  010D                     	;# 
  2392  010E                     	;# 
  2393  010E                     	;# 
  2394  010F                     	;# 
  2395  0110                     	;# 
  2396  0110                     	;# 
  2397  0111                     	;# 
  2398  0112                     	;# 
  2399  0112                     	;# 
  2400  0113                     	;# 
  2401  0114                     	;# 
  2402  0114                     	;# 
  2403  0115                     	;# 
  2404  0116                     	;# 
  2405  0116                     	;# 
  2406  0117                     	;# 
  2407  0119                     	;# 
  2408  0119                     	;# 
  2409  0119                     	;# 
  2410  011A                     	;# 
  2411  011A                     	;# 
  2412  011A                     	;# 
  2413  011B                     	;# 
  2414  011B                     	;# 
  2415  011B                     	;# 
  2416  011B                     	;# 
  2417  011B                     	;# 
  2418  011C                     	;# 
  2419  011C                     	;# 
  2420  011C                     	;# 
  2421  011D                     	;# 
  2422  011D                     	;# 
  2423  011D                     	;# 
  2424  011E                     	;# 
  2425  011E                     	;# 
  2426  011E                     	;# 
  2427  011F                     	;# 
  2428  011F                     	;# 
  2429  011F                     	;# 
  2430  011F                     	;# 
  2431  011F                     	;# 
  2432  018C                     	;# 
  2433  018D                     	;# 
  2434  018E                     	;# 
  2435  018F                     	;# 
  2436  0190                     	;# 
  2437  0191                     	;# 
  2438  0192                     	;# 
  2439  0196                     	;# 
  2440  0197                     	;# 
  2441  0198                     	;# 
  2442  0199                     	;# 
  2443  019A                     	;# 
  2444  019B                     	;# 
  2445  019C                     	;# 
  2446  020C                     	;# 
  2447  020C                     	;# 
  2448  020D                     	;# 
  2449  020E                     	;# 
  2450  020F                     	;# 
  2451  020F                     	;# 
  2452  0210                     	;# 
  2453  0210                     	;# 
  2454  0211                     	;# 
  2455  0211                     	;# 
  2456  0212                     	;# 
  2457  0212                     	;# 
  2458  0213                     	;# 
  2459  0214                     	;# 
  2460  0215                     	;# 
  2461  0215                     	;# 
  2462  0216                     	;# 
  2463  0216                     	;# 
  2464  0217                     	;# 
  2465  0217                     	;# 
  2466  0218                     	;# 
  2467  0218                     	;# 
  2468  0219                     	;# 
  2469  021A                     	;# 
  2470  021B                     	;# 
  2471  021B                     	;# 
  2472  021C                     	;# 
  2473  021C                     	;# 
  2474  021D                     	;# 
  2475  021D                     	;# 
  2476  021E                     	;# 
  2477  021F                     	;# 
  2478  028C                     	;# 
  2479  028C                     	;# 
  2480  028D                     	;# 
  2481  028D                     	;# 
  2482  028E                     	;# 
  2483  028F                     	;# 
  2484  0290                     	;# 
  2485  0290                     	;# 
  2486  0291                     	;# 
  2487  0292                     	;# 
  2488  0292                     	;# 
  2489  0293                     	;# 
  2490  0293                     	;# 
  2491  0294                     	;# 
  2492  0295                     	;# 
  2493  0296                     	;# 
  2494  0296                     	;# 
  2495  0297                     	;# 
  2496  0298                     	;# 
  2497  0298                     	;# 
  2498  0299                     	;# 
  2499  0299                     	;# 
  2500  029A                     	;# 
  2501  029B                     	;# 
  2502  029C                     	;# 
  2503  029C                     	;# 
  2504  029D                     	;# 
  2505  030C                     	;# 
  2506  030C                     	;# 
  2507  030D                     	;# 
  2508  030E                     	;# 
  2509  030F                     	;# 
  2510  0310                     	;# 
  2511  0310                     	;# 
  2512  0311                     	;# 
  2513  0312                     	;# 
  2514  0313                     	;# 
  2515  0314                     	;# 
  2516  0314                     	;# 
  2517  0315                     	;# 
  2518  0316                     	;# 
  2519  0317                     	;# 
  2520  0318                     	;# 
  2521  0318                     	;# 
  2522  0319                     	;# 
  2523  031A                     	;# 
  2524  031B                     	;# 
  2525  031C                     	;# 
  2526  031C                     	;# 
  2527  031D                     	;# 
  2528  031E                     	;# 
  2529  031F                     	;# 
  2530  038C                     	;# 
  2531  038C                     	;# 
  2532  038D                     	;# 
  2533  038E                     	;# 
  2534  0390                     	;# 
  2535  0390                     	;# 
  2536  0391                     	;# 
  2537  0392                     	;# 
  2538  040C                     	;# 
  2539  040D                     	;# 
  2540  040E                     	;# 
  2541  040F                     	;# 
  2542  0410                     	;# 
  2543  0411                     	;# 
  2544  0416                     	;# 
  2545  0416                     	;# 
  2546  0417                     	;# 
  2547  0418                     	;# 
  2548  0418                     	;# 
  2549  0419                     	;# 
  2550  041A                     	;# 
  2551  041A                     	;# 
  2552  041B                     	;# 
  2553  041C                     	;# 
  2554  041C                     	;# 
  2555  041D                     	;# 
  2556  041E                     	;# 
  2557  041F                     	;# 
  2558  048C                     	;# 
  2559  048C                     	;# 
  2560  048D                     	;# 
  2561  048E                     	;# 
  2562  048F                     	;# 
  2563  048F                     	;# 
  2564  0490                     	;# 
  2565  0491                     	;# 
  2566  0492                     	;# 
  2567  0492                     	;# 
  2568  0493                     	;# 
  2569  0494                     	;# 
  2570  0495                     	;# 
  2571  0495                     	;# 
  2572  0496                     	;# 
  2573  0497                     	;# 
  2574  0498                     	;# 
  2575  0499                     	;# 
  2576  049A                     	;# 
  2577  049B                     	;# 
  2578  049C                     	;# 
  2579  049D                     	;# 
  2580  050C                     	;# 
  2581  050C                     	;# 
  2582  050D                     	;# 
  2583  050E                     	;# 
  2584  050F                     	;# 
  2585  050F                     	;# 
  2586  0510                     	;# 
  2587  0511                     	;# 
  2588  0512                     	;# 
  2589  0512                     	;# 
  2590  0513                     	;# 
  2591  0514                     	;# 
  2592  0515                     	;# 
  2593  0515                     	;# 
  2594  0516                     	;# 
  2595  0517                     	;# 
  2596  0518                     	;# 
  2597  0519                     	;# 
  2598  051A                     	;# 
  2599  051B                     	;# 
  2600  051C                     	;# 
  2601  051D                     	;# 
  2602  058C                     	;# 
  2603  058C                     	;# 
  2604  058D                     	;# 
  2605  058E                     	;# 
  2606  058F                     	;# 
  2607  058F                     	;# 
  2608  0590                     	;# 
  2609  0591                     	;# 
  2610  0592                     	;# 
  2611  0593                     	;# 
  2612  060C                     	;# 
  2613  060D                     	;# 
  2614  060E                     	;# 
  2615  060F                     	;# 
  2616  0610                     	;# 
  2617  0611                     	;# 
  2618  0612                     	;# 
  2619  0613                     	;# 
  2620  0614                     	;# 
  2621  0616                     	;# 
  2622  0617                     	;# 
  2623  0618                     	;# 
  2624  0619                     	;# 
  2625  061A                     	;# 
  2626  061B                     	;# 
  2627  061C                     	;# 
  2628  061D                     	;# 
  2629  061E                     	;# 
  2630  068C                     	;# 
  2631  068D                     	;# 
  2632  068E                     	;# 
  2633  068F                     	;# 
  2634  0690                     	;# 
  2635  0691                     	;# 
  2636  0692                     	;# 
  2637  0693                     	;# 
  2638  0694                     	;# 
  2639  070C                     	;# 
  2640  070D                     	;# 
  2641  070E                     	;# 
  2642  070F                     	;# 
  2643  0710                     	;# 
  2644  0711                     	;# 
  2645  0712                     	;# 
  2646  0713                     	;# 
  2647  0714                     	;# 
  2648  0716                     	;# 
  2649  0717                     	;# 
  2650  0718                     	;# 
  2651  0719                     	;# 
  2652  071A                     	;# 
  2653  071B                     	;# 
  2654  071C                     	;# 
  2655  071D                     	;# 
  2656  071E                     	;# 
  2657  0796                     	;# 
  2658  0797                     	;# 
  2659  0798                     	;# 
  2660  0799                     	;# 
  2661  079A                     	;# 
  2662  079B                     	;# 
  2663  080C                     	;# 
  2664  080D                     	;# 
  2665  080E                     	;# 
  2666  080F                     	;# 
  2667  0810                     	;# 
  2668  0811                     	;# 
  2669  0812                     	;# 
  2670  0813                     	;# 
  2671  0814                     	;# 
  2672  081A                     	;# 
  2673  081B                     	;# 
  2674  081C                     	;# 
  2675  081D                     	;# 
  2676  081E                     	;# 
  2677  081F                     	;# 
  2678  088C                     	;# 
  2679  088D                     	;# 
  2680  088E                     	;# 
  2681  088F                     	;# 
  2682  0890                     	;# 
  2683  0891                     	;# 
  2684  0892                     	;# 
  2685  0893                     	;# 
  2686  0895                     	;# 
  2687  0896                     	;# 
  2688  0897                     	;# 
  2689  0898                     	;# 
  2690  0899                     	;# 
  2691  089A                     	;# 
  2692  089B                     	;# 
  2693  090C                     	;# 
  2694  090E                     	;# 
  2695  090F                     	;# 
  2696  091F                     	;# 
  2697  091F                     	;# 
  2698  098F                     	;# 
  2699  098F                     	;# 
  2700  0990                     	;# 
  2701  0991                     	;# 
  2702  0992                     	;# 
  2703  0993                     	;# 
  2704  0994                     	;# 
  2705  0995                     	;# 
  2706  0996                     	;# 
  2707  0997                     	;# 
  2708  0E0F                     	;# 
  2709  0E10                     	;# 
  2710  0E11                     	;# 
  2711  0E12                     	;# 
  2712  0E13                     	;# 
  2713  0E14                     	;# 
  2714  0E15                     	;# 
  2715  0E16                     	;# 
  2716  0E17                     	;# 
  2717  0E18                     	;# 
  2718  0E19                     	;# 
  2719  0E1A                     	;# 
  2720  0E1B                     	;# 
  2721  0E1C                     	;# 
  2722  0E1D                     	;# 
  2723  0E1E                     	;# 
  2724  0E1F                     	;# 
  2725  0E20                     	;# 
  2726  0E21                     	;# 
  2727  0E22                     	;# 
  2728  0E23                     	;# 
  2729  0E24                     	;# 
  2730  0E25                     	;# 
  2731  0E26                     	;# 
  2732  0E27                     	;# 
  2733  0E28                     	;# 
  2734  0E29                     	;# 
  2735  0E2A                     	;# 
  2736  0E2B                     	;# 
  2737  0E2C                     	;# 
  2738  0E2D                     	;# 
  2739  0E2E                     	;# 
  2740  0E2F                     	;# 
  2741  0E30                     	;# 
  2742  0E31                     	;# 
  2743  0E32                     	;# 
  2744  0E33                     	;# 
  2745  0E34                     	;# 
  2746  0E35                     	;# 
  2747  0E36                     	;# 
  2748  0E37                     	;# 
  2749  0E8F                     	;# 
  2750  0E90                     	;# 
  2751  0E91                     	;# 
  2752  0E92                     	;# 
  2753  0E93                     	;# 
  2754  0E94                     	;# 
  2755  0E95                     	;# 
  2756  0E96                     	;# 
  2757  0E97                     	;# 
  2758  0E9C                     	;# 
  2759  0E9D                     	;# 
  2760  0E9E                     	;# 
  2761  0EA1                     	;# 
  2762  0EA2                     	;# 
  2763  0EA3                     	;# 
  2764  0EA4                     	;# 
  2765  0EA5                     	;# 
  2766  0EA9                     	;# 
  2767  0EAA                     	;# 
  2768  0EAB                     	;# 
  2769  0EAC                     	;# 
  2770  0EB1                     	;# 
  2771  0EB2                     	;# 
  2772  0EB3                     	;# 
  2773  0EB8                     	;# 
  2774  0EB9                     	;# 
  2775  0EBA                     	;# 
  2776  0EBB                     	;# 
  2777  0EBC                     	;# 
  2778  0EBD                     	;# 
  2779  0EBE                     	;# 
  2780  0EC3                     	;# 
  2781  0EC5                     	;# 
  2782  0EC6                     	;# 
  2783  0EC7                     	;# 
  2784  0EC8                     	;# 
  2785  0EC9                     	;# 
  2786  0ECA                     	;# 
  2787  0ECB                     	;# 
  2788  0ECC                     	;# 
  2789  0F10                     	;# 
  2790  0F11                     	;# 
  2791  0F12                     	;# 
  2792  0F13                     	;# 
  2793  0F14                     	;# 
  2794  0F15                     	;# 
  2795  0F16                     	;# 
  2796  0F17                     	;# 
  2797  0F18                     	;# 
  2798  0F19                     	;# 
  2799  0F1A                     	;# 
  2800  0F1B                     	;# 
  2801  0F1C                     	;# 
  2802  0F1D                     	;# 
  2803  0F1E                     	;# 
  2804  0F1F                     	;# 
  2805  0F20                     	;# 
  2806  0F21                     	;# 
  2807  0F22                     	;# 
  2808  0F23                     	;# 
  2809  0F24                     	;# 
  2810  0F25                     	;# 
  2811  0F26                     	;# 
  2812  0F27                     	;# 
  2813  0F28                     	;# 
  2814  0F29                     	;# 
  2815  0F2A                     	;# 
  2816  0F2B                     	;# 
  2817  0F2C                     	;# 
  2818  0F2D                     	;# 
  2819  0F2E                     	;# 
  2820  0F2F                     	;# 
  2821  0F30                     	;# 
  2822  0F31                     	;# 
  2823  0F32                     	;# 
  2824  0F38                     	;# 
  2825  0F39                     	;# 
  2826  0F3A                     	;# 
  2827  0F3B                     	;# 
  2828  0F3C                     	;# 
  2829  0F3D                     	;# 
  2830  0F3E                     	;# 
  2831  0F3F                     	;# 
  2832  0F40                     	;# 
  2833  0F41                     	;# 
  2834  0F43                     	;# 
  2835  0F44                     	;# 
  2836  0F45                     	;# 
  2837  0F46                     	;# 
  2838  0F47                     	;# 
  2839  0F48                     	;# 
  2840  0F49                     	;# 
  2841  0F4A                     	;# 
  2842  0F4B                     	;# 
  2843  0F4C                     	;# 
  2844  0F4E                     	;# 
  2845  0F4F                     	;# 
  2846  0F50                     	;# 
  2847  0F51                     	;# 
  2848  0F52                     	;# 
  2849  0F53                     	;# 
  2850  0F54                     	;# 
  2851  0F55                     	;# 
  2852  0F56                     	;# 
  2853  0F57                     	;# 
  2854  0F59                     	;# 
  2855  0F5A                     	;# 
  2856  0F5B                     	;# 
  2857  0F5C                     	;# 
  2858  0F5D                     	;# 
  2859  0F61                     	;# 
  2860  0F62                     	;# 
  2861  0F64                     	;# 
  2862  0F65                     	;# 
  2863  0F66                     	;# 
  2864  0F67                     	;# 
  2865  0F68                     	;# 
  2866  0F69                     	;# 
  2867  0F6A                     	;# 
  2868  0F6B                     	;# 
  2869  0F6C                     	;# 
  2870  0F6D                     	;# 
  2871  0FE4                     	;# 
  2872  0FE5                     	;# 
  2873  0FE6                     	;# 
  2874  0FE7                     	;# 
  2875  0FE8                     	;# 
  2876  0FE9                     	;# 
  2877  0FEA                     	;# 
  2878  0FEB                     	;# 
  2879  0FED                     	;# 
  2880  0FEE                     	;# 
  2881  0FEF                     	;# 
  2882  0000                     	;# 
  2883  0001                     	;# 
  2884  0002                     	;# 
  2885  0003                     	;# 
  2886  0004                     	;# 
  2887  0005                     	;# 
  2888  0006                     	;# 
  2889  0007                     	;# 
  2890  0008                     	;# 
  2891  0009                     	;# 
  2892  000A                     	;# 
  2893  000B                     	;# 
  2894  000C                     	;# 
  2895  000D                     	;# 
  2896  000E                     	;# 
  2897  000F                     	;# 
  2898  0010                     	;# 
  2899  0011                     	;# 
  2900  0012                     	;# 
  2901  0013                     	;# 
  2902  0014                     	;# 
  2903  0015                     	;# 
  2904  0016                     	;# 
  2905  0017                     	;# 
  2906  0018                     	;# 
  2907  0019                     	;# 
  2908  001A                     	;# 
  2909  001C                     	;# 
  2910  001C                     	;# 
  2911  001D                     	;# 
  2912  001D                     	;# 
  2913  001E                     	;# 
  2914  001F                     	;# 
  2915  008C                     	;# 
  2916  008C                     	;# 
  2917  008D                     	;# 
  2918  008E                     	;# 
  2919  008E                     	;# 
  2920  008F                     	;# 
  2921  0090                     	;# 
  2922  0090                     	;# 
  2923  0091                     	;# 
  2924  0093                     	;# 
  2925  0094                     	;# 
  2926  0095                     	;# 
  2927  0096                     	;# 
  2928  0097                     	;# 
  2929  0098                     	;# 
  2930  0099                     	;# 
  2931  009A                     	;# 
  2932  009B                     	;# 
  2933  009C                     	;# 
  2934  009D                     	;# 
  2935  009E                     	;# 
  2936  010C                     	;# 
  2937  010D                     	;# 
  2938  010E                     	;# 
  2939  010E                     	;# 
  2940  010F                     	;# 
  2941  0110                     	;# 
  2942  0110                     	;# 
  2943  0111                     	;# 
  2944  0112                     	;# 
  2945  0112                     	;# 
  2946  0113                     	;# 
  2947  0114                     	;# 
  2948  0114                     	;# 
  2949  0115                     	;# 
  2950  0116                     	;# 
  2951  0116                     	;# 
  2952  0117                     	;# 
  2953  0119                     	;# 
  2954  0119                     	;# 
  2955  0119                     	;# 
  2956  011A                     	;# 
  2957  011A                     	;# 
  2958  011A                     	;# 
  2959  011B                     	;# 
  2960  011B                     	;# 
  2961  011B                     	;# 
  2962  011B                     	;# 
  2963  011B                     	;# 
  2964  011C                     	;# 
  2965  011C                     	;# 
  2966  011C                     	;# 
  2967  011D                     	;# 
  2968  011D                     	;# 
  2969  011D                     	;# 
  2970  011E                     	;# 
  2971  011E                     	;# 
  2972  011E                     	;# 
  2973  011F                     	;# 
  2974  011F                     	;# 
  2975  011F                     	;# 
  2976  011F                     	;# 
  2977  011F                     	;# 
  2978  018C                     	;# 
  2979  018D                     	;# 
  2980  018E                     	;# 
  2981  018F                     	;# 
  2982  0190                     	;# 
  2983  0191                     	;# 
  2984  0192                     	;# 
  2985  0196                     	;# 
  2986  0197                     	;# 
  2987  0198                     	;# 
  2988  0199                     	;# 
  2989  019A                     	;# 
  2990  019B                     	;# 
  2991  019C                     	;# 
  2992  020C                     	;# 
  2993  020C                     	;# 
  2994  020D                     	;# 
  2995  020E                     	;# 
  2996  020F                     	;# 
  2997  020F                     	;# 
  2998  0210                     	;# 
  2999  0210                     	;# 
  3000  0211                     	;# 
  3001  0211                     	;# 
  3002  0212                     	;# 
  3003  0212                     	;# 
  3004  0213                     	;# 
  3005  0214                     	;# 
  3006  0215                     	;# 
  3007  0215                     	;# 
  3008  0216                     	;# 
  3009  0216                     	;# 
  3010  0217                     	;# 
  3011  0217                     	;# 
  3012  0218                     	;# 
  3013  0218                     	;# 
  3014  0219                     	;# 
  3015  021A                     	;# 
  3016  021B                     	;# 
  3017  021B                     	;# 
  3018  021C                     	;# 
  3019  021C                     	;# 
  3020  021D                     	;# 
  3021  021D                     	;# 
  3022  021E                     	;# 
  3023  021F                     	;# 
  3024  028C                     	;# 
  3025  028C                     	;# 
  3026  028D                     	;# 
  3027  028D                     	;# 
  3028  028E                     	;# 
  3029  028F                     	;# 
  3030  0290                     	;# 
  3031  0290                     	;# 
  3032  0291                     	;# 
  3033  0292                     	;# 
  3034  0292                     	;# 
  3035  0293                     	;# 
  3036  0293                     	;# 
  3037  0294                     	;# 
  3038  0295                     	;# 
  3039  0296                     	;# 
  3040  0296                     	;# 
  3041  0297                     	;# 
  3042  0298                     	;# 
  3043  0298                     	;# 
  3044  0299                     	;# 
  3045  0299                     	;# 
  3046  029A                     	;# 
  3047  029B                     	;# 
  3048  029C                     	;# 
  3049  029C                     	;# 
  3050  029D                     	;# 
  3051  030C                     	;# 
  3052  030C                     	;# 
  3053  030D                     	;# 
  3054  030E                     	;# 
  3055  030F                     	;# 
  3056  0310                     	;# 
  3057  0310                     	;# 
  3058  0311                     	;# 
  3059  0312                     	;# 
  3060  0313                     	;# 
  3061  0314                     	;# 
  3062  0314                     	;# 
  3063  0315                     	;# 
  3064  0316                     	;# 
  3065  0317                     	;# 
  3066  0318                     	;# 
  3067  0318                     	;# 
  3068  0319                     	;# 
  3069  031A                     	;# 
  3070  031B                     	;# 
  3071  031C                     	;# 
  3072  031C                     	;# 
  3073  031D                     	;# 
  3074  031E                     	;# 
  3075  031F                     	;# 
  3076  038C                     	;# 
  3077  038C                     	;# 
  3078  038D                     	;# 
  3079  038E                     	;# 
  3080  0390                     	;# 
  3081  0390                     	;# 
  3082  0391                     	;# 
  3083  0392                     	;# 
  3084  040C                     	;# 
  3085  040D                     	;# 
  3086  040E                     	;# 
  3087  040F                     	;# 
  3088  0410                     	;# 
  3089  0411                     	;# 
  3090  0416                     	;# 
  3091  0416                     	;# 
  3092  0417                     	;# 
  3093  0418                     	;# 
  3094  0418                     	;# 
  3095  0419                     	;# 
  3096  041A                     	;# 
  3097  041A                     	;# 
  3098  041B                     	;# 
  3099  041C                     	;# 
  3100  041C                     	;# 
  3101  041D                     	;# 
  3102  041E                     	;# 
  3103  041F                     	;# 
  3104  048C                     	;# 
  3105  048C                     	;# 
  3106  048D                     	;# 
  3107  048E                     	;# 
  3108  048F                     	;# 
  3109  048F                     	;# 
  3110  0490                     	;# 
  3111  0491                     	;# 
  3112  0492                     	;# 
  3113  0492                     	;# 
  3114  0493                     	;# 
  3115  0494                     	;# 
  3116  0495                     	;# 
  3117  0495                     	;# 
  3118  0496                     	;# 
  3119  0497                     	;# 
  3120  0498                     	;# 
  3121  0499                     	;# 
  3122  049A                     	;# 
  3123  049B                     	;# 
  3124  049C                     	;# 
  3125  049D                     	;# 
  3126  050C                     	;# 
  3127  050C                     	;# 
  3128  050D                     	;# 
  3129  050E                     	;# 
  3130  050F                     	;# 
  3131  050F                     	;# 
  3132  0510                     	;# 
  3133  0511                     	;# 
  3134  0512                     	;# 
  3135  0512                     	;# 
  3136  0513                     	;# 
  3137  0514                     	;# 
  3138  0515                     	;# 
  3139  0515                     	;# 
  3140  0516                     	;# 
  3141  0517                     	;# 
  3142  0518                     	;# 
  3143  0519                     	;# 
  3144  051A                     	;# 
  3145  051B                     	;# 
  3146  051C                     	;# 
  3147  051D                     	;# 
  3148  058C                     	;# 
  3149  058C                     	;# 
  3150  058D                     	;# 
  3151  058E                     	;# 
  3152  058F                     	;# 
  3153  058F                     	;# 
  3154  0590                     	;# 
  3155  0591                     	;# 
  3156  0592                     	;# 
  3157  0593                     	;# 
  3158  060C                     	;# 
  3159  060D                     	;# 
  3160  060E                     	;# 
  3161  060F                     	;# 
  3162  0610                     	;# 
  3163  0611                     	;# 
  3164  0612                     	;# 
  3165  0613                     	;# 
  3166  0614                     	;# 
  3167  0616                     	;# 
  3168  0617                     	;# 
  3169  0618                     	;# 
  3170  0619                     	;# 
  3171  061A                     	;# 
  3172  061B                     	;# 
  3173  061C                     	;# 
  3174  061D                     	;# 
  3175  061E                     	;# 
  3176  068C                     	;# 
  3177  068D                     	;# 
  3178  068E                     	;# 
  3179  068F                     	;# 
  3180  0690                     	;# 
  3181  0691                     	;# 
  3182  0692                     	;# 
  3183  0693                     	;# 
  3184  0694                     	;# 
  3185  070C                     	;# 
  3186  070D                     	;# 
  3187  070E                     	;# 
  3188  070F                     	;# 
  3189  0710                     	;# 
  3190  0711                     	;# 
  3191  0712                     	;# 
  3192  0713                     	;# 
  3193  0714                     	;# 
  3194  0716                     	;# 
  3195  0717                     	;# 
  3196  0718                     	;# 
  3197  0719                     	;# 
  3198  071A                     	;# 
  3199  071B                     	;# 
  3200  071C                     	;# 
  3201  071D                     	;# 
  3202  071E                     	;# 
  3203  0796                     	;# 
  3204  0797                     	;# 
  3205  0798                     	;# 
  3206  0799                     	;# 
  3207  079A                     	;# 
  3208  079B                     	;# 
  3209  080C                     	;# 
  3210  080D                     	;# 
  3211  080E                     	;# 
  3212  080F                     	;# 
  3213  0810                     	;# 
  3214  0811                     	;# 
  3215  0812                     	;# 
  3216  0813                     	;# 
  3217  0814                     	;# 
  3218  081A                     	;# 
  3219  081B                     	;# 
  3220  081C                     	;# 
  3221  081D                     	;# 
  3222  081E                     	;# 
  3223  081F                     	;# 
  3224  088C                     	;# 
  3225  088D                     	;# 
  3226  088E                     	;# 
  3227  088F                     	;# 
  3228  0890                     	;# 
  3229  0891                     	;# 
  3230  0892                     	;# 
  3231  0893                     	;# 
  3232  0895                     	;# 
  3233  0896                     	;# 
  3234  0897                     	;# 
  3235  0898                     	;# 
  3236  0899                     	;# 
  3237  089A                     	;# 
  3238  089B                     	;# 
  3239  090C                     	;# 
  3240  090E                     	;# 
  3241  090F                     	;# 
  3242  091F                     	;# 
  3243  091F                     	;# 
  3244  098F                     	;# 
  3245  098F                     	;# 
  3246  0990                     	;# 
  3247  0991                     	;# 
  3248  0992                     	;# 
  3249  0993                     	;# 
  3250  0994                     	;# 
  3251  0995                     	;# 
  3252  0996                     	;# 
  3253  0997                     	;# 
  3254  0E0F                     	;# 
  3255  0E10                     	;# 
  3256  0E11                     	;# 
  3257  0E12                     	;# 
  3258  0E13                     	;# 
  3259  0E14                     	;# 
  3260  0E15                     	;# 
  3261  0E16                     	;# 
  3262  0E17                     	;# 
  3263  0E18                     	;# 
  3264  0E19                     	;# 
  3265  0E1A                     	;# 
  3266  0E1B                     	;# 
  3267  0E1C                     	;# 
  3268  0E1D                     	;# 
  3269  0E1E                     	;# 
  3270  0E1F                     	;# 
  3271  0E20                     	;# 
  3272  0E21                     	;# 
  3273  0E22                     	;# 
  3274  0E23                     	;# 
  3275  0E24                     	;# 
  3276  0E25                     	;# 
  3277  0E26                     	;# 
  3278  0E27                     	;# 
  3279  0E28                     	;# 
  3280  0E29                     	;# 
  3281  0E2A                     	;# 
  3282  0E2B                     	;# 
  3283  0E2C                     	;# 
  3284  0E2D                     	;# 
  3285  0E2E                     	;# 
  3286  0E2F                     	;# 
  3287  0E30                     	;# 
  3288  0E31                     	;# 
  3289  0E32                     	;# 
  3290  0E33                     	;# 
  3291  0E34                     	;# 
  3292  0E35                     	;# 
  3293  0E36                     	;# 
  3294  0E37                     	;# 
  3295  0E8F                     	;# 
  3296  0E90                     	;# 
  3297  0E91                     	;# 
  3298  0E92                     	;# 
  3299  0E93                     	;# 
  3300  0E94                     	;# 
  3301  0E95                     	;# 
  3302  0E96                     	;# 
  3303  0E97                     	;# 
  3304  0E9C                     	;# 
  3305  0E9D                     	;# 
  3306  0E9E                     	;# 
  3307  0EA1                     	;# 
  3308  0EA2                     	;# 
  3309  0EA3                     	;# 
  3310  0EA4                     	;# 
  3311  0EA5                     	;# 
  3312  0EA9                     	;# 
  3313  0EAA                     	;# 
  3314  0EAB                     	;# 
  3315  0EAC                     	;# 
  3316  0EB1                     	;# 
  3317  0EB2                     	;# 
  3318  0EB3                     	;# 
  3319  0EB8                     	;# 
  3320  0EB9                     	;# 
  3321  0EBA                     	;# 
  3322  0EBB                     	;# 
  3323  0EBC                     	;# 
  3324  0EBD                     	;# 
  3325  0EBE                     	;# 
  3326  0EC3                     	;# 
  3327  0EC5                     	;# 
  3328  0EC6                     	;# 
  3329  0EC7                     	;# 
  3330  0EC8                     	;# 
  3331  0EC9                     	;# 
  3332  0ECA                     	;# 
  3333  0ECB                     	;# 
  3334  0ECC                     	;# 
  3335  0F10                     	;# 
  3336  0F11                     	;# 
  3337  0F12                     	;# 
  3338  0F13                     	;# 
  3339  0F14                     	;# 
  3340  0F15                     	;# 
  3341  0F16                     	;# 
  3342  0F17                     	;# 
  3343  0F18                     	;# 
  3344  0F19                     	;# 
  3345  0F1A                     	;# 
  3346  0F1B                     	;# 
  3347  0F1C                     	;# 
  3348  0F1D                     	;# 
  3349  0F1E                     	;# 
  3350  0F1F                     	;# 
  3351  0F20                     	;# 
  3352  0F21                     	;# 
  3353  0F22                     	;# 
  3354  0F23                     	;# 
  3355  0F24                     	;# 
  3356  0F25                     	;# 
  3357  0F26                     	;# 
  3358  0F27                     	;# 
  3359  0F28                     	;# 
  3360  0F29                     	;# 
  3361  0F2A                     	;# 
  3362  0F2B                     	;# 
  3363  0F2C                     	;# 
  3364  0F2D                     	;# 
  3365  0F2E                     	;# 
  3366  0F2F                     	;# 
  3367  0F30                     	;# 
  3368  0F31                     	;# 
  3369  0F32                     	;# 
  3370  0F38                     	;# 
  3371  0F39                     	;# 
  3372  0F3A                     	;# 
  3373  0F3B                     	;# 
  3374  0F3C                     	;# 
  3375  0F3D                     	;# 
  3376  0F3E                     	;# 
  3377  0F3F                     	;# 
  3378  0F40                     	;# 
  3379  0F41                     	;# 
  3380  0F43                     	;# 
  3381  0F44                     	;# 
  3382  0F45                     	;# 
  3383  0F46                     	;# 
  3384  0F47                     	;# 
  3385  0F48                     	;# 
  3386  0F49                     	;# 
  3387  0F4A                     	;# 
  3388  0F4B                     	;# 
  3389  0F4C                     	;# 
  3390  0F4E                     	;# 
  3391  0F4F                     	;# 
  3392  0F50                     	;# 
  3393  0F51                     	;# 
  3394  0F52                     	;# 
  3395  0F53                     	;# 
  3396  0F54                     	;# 
  3397  0F55                     	;# 
  3398  0F56                     	;# 
  3399  0F57                     	;# 
  3400  0F59                     	;# 
  3401  0F5A                     	;# 
  3402  0F5B                     	;# 
  3403  0F5C                     	;# 
  3404  0F5D                     	;# 
  3405  0F61                     	;# 
  3406  0F62                     	;# 
  3407  0F64                     	;# 
  3408  0F65                     	;# 
  3409  0F66                     	;# 
  3410  0F67                     	;# 
  3411  0F68                     	;# 
  3412  0F69                     	;# 
  3413  0F6A                     	;# 
  3414  0F6B                     	;# 
  3415  0F6C                     	;# 
  3416  0F6D                     	;# 
  3417  0FE4                     	;# 
  3418  0FE5                     	;# 
  3419  0FE6                     	;# 
  3420  0FE7                     	;# 
  3421  0FE8                     	;# 
  3422  0FE9                     	;# 
  3423  0FEA                     	;# 
  3424  0FEB                     	;# 
  3425  0FED                     	;# 
  3426  0FEE                     	;# 
  3427  0FEF                     	;# 
  3428  0000                     	;# 
  3429  0001                     	;# 
  3430  0002                     	;# 
  3431  0003                     	;# 
  3432  0004                     	;# 
  3433  0005                     	;# 
  3434  0006                     	;# 
  3435  0007                     	;# 
  3436  0008                     	;# 
  3437  0009                     	;# 
  3438  000A                     	;# 
  3439  000B                     	;# 
  3440  000C                     	;# 
  3441  000D                     	;# 
  3442  000E                     	;# 
  3443  000F                     	;# 
  3444  0010                     	;# 
  3445  0011                     	;# 
  3446  0012                     	;# 
  3447  0013                     	;# 
  3448  0014                     	;# 
  3449  0015                     	;# 
  3450  0016                     	;# 
  3451  0017                     	;# 
  3452  0018                     	;# 
  3453  0019                     	;# 
  3454  001A                     	;# 
  3455  001C                     	;# 
  3456  001C                     	;# 
  3457  001D                     	;# 
  3458  001D                     	;# 
  3459  001E                     	;# 
  3460  001F                     	;# 
  3461  008C                     	;# 
  3462  008C                     	;# 
  3463  008D                     	;# 
  3464  008E                     	;# 
  3465  008E                     	;# 
  3466  008F                     	;# 
  3467  0090                     	;# 
  3468  0090                     	;# 
  3469  0091                     	;# 
  3470  0093                     	;# 
  3471  0094                     	;# 
  3472  0095                     	;# 
  3473  0096                     	;# 
  3474  0097                     	;# 
  3475  0098                     	;# 
  3476  0099                     	;# 
  3477  009A                     	;# 
  3478  009B                     	;# 
  3479  009C                     	;# 
  3480  009D                     	;# 
  3481  009E                     	;# 
  3482  010C                     	;# 
  3483  010D                     	;# 
  3484  010E                     	;# 
  3485  010E                     	;# 
  3486  010F                     	;# 
  3487  0110                     	;# 
  3488  0110                     	;# 
  3489  0111                     	;# 
  3490  0112                     	;# 
  3491  0112                     	;# 
  3492  0113                     	;# 
  3493  0114                     	;# 
  3494  0114                     	;# 
  3495  0115                     	;# 
  3496  0116                     	;# 
  3497  0116                     	;# 
  3498  0117                     	;# 
  3499  0119                     	;# 
  3500  0119                     	;# 
  3501  0119                     	;# 
  3502  011A                     	;# 
  3503  011A                     	;# 
  3504  011A                     	;# 
  3505  011B                     	;# 
  3506  011B                     	;# 
  3507  011B                     	;# 
  3508  011B                     	;# 
  3509  011B                     	;# 
  3510  011C                     	;# 
  3511  011C                     	;# 
  3512  011C                     	;# 
  3513  011D                     	;# 
  3514  011D                     	;# 
  3515  011D                     	;# 
  3516  011E                     	;# 
  3517  011E                     	;# 
  3518  011E                     	;# 
  3519  011F                     	;# 
  3520  011F                     	;# 
  3521  011F                     	;# 
  3522  011F                     	;# 
  3523  011F                     	;# 
  3524  018C                     	;# 
  3525  018D                     	;# 
  3526  018E                     	;# 
  3527  018F                     	;# 
  3528  0190                     	;# 
  3529  0191                     	;# 
  3530  0192                     	;# 
  3531  0196                     	;# 
  3532  0197                     	;# 
  3533  0198                     	;# 
  3534  0199                     	;# 
  3535  019A                     	;# 
  3536  019B                     	;# 
  3537  019C                     	;# 
  3538  020C                     	;# 
  3539  020C                     	;# 
  3540  020D                     	;# 
  3541  020E                     	;# 
  3542  020F                     	;# 
  3543  020F                     	;# 
  3544  0210                     	;# 
  3545  0210                     	;# 
  3546  0211                     	;# 
  3547  0211                     	;# 
  3548  0212                     	;# 
  3549  0212                     	;# 
  3550  0213                     	;# 
  3551  0214                     	;# 
  3552  0215                     	;# 
  3553  0215                     	;# 
  3554  0216                     	;# 
  3555  0216                     	;# 
  3556  0217                     	;# 
  3557  0217                     	;# 
  3558  0218                     	;# 
  3559  0218                     	;# 
  3560  0219                     	;# 
  3561  021A                     	;# 
  3562  021B                     	;# 
  3563  021B                     	;# 
  3564  021C                     	;# 
  3565  021C                     	;# 
  3566  021D                     	;# 
  3567  021D                     	;# 
  3568  021E                     	;# 
  3569  021F                     	;# 
  3570  028C                     	;# 
  3571  028C                     	;# 
  3572  028D                     	;# 
  3573  028D                     	;# 
  3574  028E                     	;# 
  3575  028F                     	;# 
  3576  0290                     	;# 
  3577  0290                     	;# 
  3578  0291                     	;# 
  3579  0292                     	;# 
  3580  0292                     	;# 
  3581  0293                     	;# 
  3582  0293                     	;# 
  3583  0294                     	;# 
  3584  0295                     	;# 
  3585  0296                     	;# 
  3586  0296                     	;# 
  3587  0297                     	;# 
  3588  0298                     	;# 
  3589  0298                     	;# 
  3590  0299                     	;# 
  3591  0299                     	;# 
  3592  029A                     	;# 
  3593  029B                     	;# 
  3594  029C                     	;# 
  3595  029C                     	;# 
  3596  029D                     	;# 
  3597  030C                     	;# 
  3598  030C                     	;# 
  3599  030D                     	;# 
  3600  030E                     	;# 
  3601  030F                     	;# 
  3602  0310                     	;# 
  3603  0310                     	;# 
  3604  0311                     	;# 
  3605  0312                     	;# 
  3606  0313                     	;# 
  3607  0314                     	;# 
  3608  0314                     	;# 
  3609  0315                     	;# 
  3610  0316                     	;# 
  3611  0317                     	;# 
  3612  0318                     	;# 
  3613  0318                     	;# 
  3614  0319                     	;# 
  3615  031A                     	;# 
  3616  031B                     	;# 
  3617  031C                     	;# 
  3618  031C                     	;# 
  3619  031D                     	;# 
  3620  031E                     	;# 
  3621  031F                     	;# 
  3622  038C                     	;# 
  3623  038C                     	;# 
  3624  038D                     	;# 
  3625  038E                     	;# 
  3626  0390                     	;# 
  3627  0390                     	;# 
  3628  0391                     	;# 
  3629  0392                     	;# 
  3630  040C                     	;# 
  3631  040D                     	;# 
  3632  040E                     	;# 
  3633  040F                     	;# 
  3634  0410                     	;# 
  3635  0411                     	;# 
  3636  0416                     	;# 
  3637  0416                     	;# 
  3638  0417                     	;# 
  3639  0418                     	;# 
  3640  0418                     	;# 
  3641  0419                     	;# 
  3642  041A                     	;# 
  3643  041A                     	;# 
  3644  041B                     	;# 
  3645  041C                     	;# 
  3646  041C                     	;# 
  3647  041D                     	;# 
  3648  041E                     	;# 
  3649  041F                     	;# 
  3650  048C                     	;# 
  3651  048C                     	;# 
  3652  048D                     	;# 
  3653  048E                     	;# 
  3654  048F                     	;# 
  3655  048F                     	;# 
  3656  0490                     	;# 
  3657  0491                     	;# 
  3658  0492                     	;# 
  3659  0492                     	;# 
  3660  0493                     	;# 
  3661  0494                     	;# 
  3662  0495                     	;# 
  3663  0495                     	;# 
  3664  0496                     	;# 
  3665  0497                     	;# 
  3666  0498                     	;# 
  3667  0499                     	;# 
  3668  049A                     	;# 
  3669  049B                     	;# 
  3670  049C                     	;# 
  3671  049D                     	;# 
  3672  050C                     	;# 
  3673  050C                     	;# 
  3674  050D                     	;# 
  3675  050E                     	;# 
  3676  050F                     	;# 
  3677  050F                     	;# 
  3678  0510                     	;# 
  3679  0511                     	;# 
  3680  0512                     	;# 
  3681  0512                     	;# 
  3682  0513                     	;# 
  3683  0514                     	;# 
  3684  0515                     	;# 
  3685  0515                     	;# 
  3686  0516                     	;# 
  3687  0517                     	;# 
  3688  0518                     	;# 
  3689  0519                     	;# 
  3690  051A                     	;# 
  3691  051B                     	;# 
  3692  051C                     	;# 
  3693  051D                     	;# 
  3694  058C                     	;# 
  3695  058C                     	;# 
  3696  058D                     	;# 
  3697  058E                     	;# 
  3698  058F                     	;# 
  3699  058F                     	;# 
  3700  0590                     	;# 
  3701  0591                     	;# 
  3702  0592                     	;# 
  3703  0593                     	;# 
  3704  060C                     	;# 
  3705  060D                     	;# 
  3706  060E                     	;# 
  3707  060F                     	;# 
  3708  0610                     	;# 
  3709  0611                     	;# 
  3710  0612                     	;# 
  3711  0613                     	;# 
  3712  0614                     	;# 
  3713  0616                     	;# 
  3714  0617                     	;# 
  3715  0618                     	;# 
  3716  0619                     	;# 
  3717  061A                     	;# 
  3718  061B                     	;# 
  3719  061C                     	;# 
  3720  061D                     	;# 
  3721  061E                     	;# 
  3722  068C                     	;# 
  3723  068D                     	;# 
  3724  068E                     	;# 
  3725  068F                     	;# 
  3726  0690                     	;# 
  3727  0691                     	;# 
  3728  0692                     	;# 
  3729  0693                     	;# 
  3730  0694                     	;# 
  3731  070C                     	;# 
  3732  070D                     	;# 
  3733  070E                     	;# 
  3734  070F                     	;# 
  3735  0710                     	;# 
  3736  0711                     	;# 
  3737  0712                     	;# 
  3738  0713                     	;# 
  3739  0714                     	;# 
  3740  0716                     	;# 
  3741  0717                     	;# 
  3742  0718                     	;# 
  3743  0719                     	;# 
  3744  071A                     	;# 
  3745  071B                     	;# 
  3746  071C                     	;# 
  3747  071D                     	;# 
  3748  071E                     	;# 
  3749  0796                     	;# 
  3750  0797                     	;# 
  3751  0798                     	;# 
  3752  0799                     	;# 
  3753  079A                     	;# 
  3754  079B                     	;# 
  3755  080C                     	;# 
  3756  080D                     	;# 
  3757  080E                     	;# 
  3758  080F                     	;# 
  3759  0810                     	;# 
  3760  0811                     	;# 
  3761  0812                     	;# 
  3762  0813                     	;# 
  3763  0814                     	;# 
  3764  081A                     	;# 
  3765  081B                     	;# 
  3766  081C                     	;# 
  3767  081D                     	;# 
  3768  081E                     	;# 
  3769  081F                     	;# 
  3770  088C                     	;# 
  3771  088D                     	;# 
  3772  088E                     	;# 
  3773  088F                     	;# 
  3774  0890                     	;# 
  3775  0891                     	;# 
  3776  0892                     	;# 
  3777  0893                     	;# 
  3778  0895                     	;# 
  3779  0896                     	;# 
  3780  0897                     	;# 
  3781  0898                     	;# 
  3782  0899                     	;# 
  3783  089A                     	;# 
  3784  089B                     	;# 
  3785  090C                     	;# 
  3786  090E                     	;# 
  3787  090F                     	;# 
  3788  091F                     	;# 
  3789  091F                     	;# 
  3790  098F                     	;# 
  3791  098F                     	;# 
  3792  0990                     	;# 
  3793  0991                     	;# 
  3794  0992                     	;# 
  3795  0993                     	;# 
  3796  0994                     	;# 
  3797  0995                     	;# 
  3798  0996                     	;# 
  3799  0997                     	;# 
  3800  0E0F                     	;# 
  3801  0E10                     	;# 
  3802  0E11                     	;# 
  3803  0E12                     	;# 
  3804  0E13                     	;# 
  3805  0E14                     	;# 
  3806  0E15                     	;# 
  3807  0E16                     	;# 
  3808  0E17                     	;# 
  3809  0E18                     	;# 
  3810  0E19                     	;# 
  3811  0E1A                     	;# 
  3812  0E1B                     	;# 
  3813  0E1C                     	;# 
  3814  0E1D                     	;# 
  3815  0E1E                     	;# 
  3816  0E1F                     	;# 
  3817  0E20                     	;# 
  3818  0E21                     	;# 
  3819  0E22                     	;# 
  3820  0E23                     	;# 
  3821  0E24                     	;# 
  3822  0E25                     	;# 
  3823  0E26                     	;# 
  3824  0E27                     	;# 
  3825  0E28                     	;# 
  3826  0E29                     	;# 
  3827  0E2A                     	;# 
  3828  0E2B                     	;# 
  3829  0E2C                     	;# 
  3830  0E2D                     	;# 
  3831  0E2E                     	;# 
  3832  0E2F                     	;# 
  3833  0E30                     	;# 
  3834  0E31                     	;# 
  3835  0E32                     	;# 
  3836  0E33                     	;# 
  3837  0E34                     	;# 
  3838  0E35                     	;# 
  3839  0E36                     	;# 
  3840  0E37                     	;# 
  3841  0E8F                     	;# 
  3842  0E90                     	;# 
  3843  0E91                     	;# 
  3844  0E92                     	;# 
  3845  0E93                     	;# 
  3846  0E94                     	;# 
  3847  0E95                     	;# 
  3848  0E96                     	;# 
  3849  0E97                     	;# 
  3850  0E9C                     	;# 
  3851  0E9D                     	;# 
  3852  0E9E                     	;# 
  3853  0EA1                     	;# 
  3854  0EA2                     	;# 
  3855  0EA3                     	;# 
  3856  0EA4                     	;# 
  3857  0EA5                     	;# 
  3858  0EA9                     	;# 
  3859  0EAA                     	;# 
  3860  0EAB                     	;# 
  3861  0EAC                     	;# 
  3862  0EB1                     	;# 
  3863  0EB2                     	;# 
  3864  0EB3                     	;# 
  3865  0EB8                     	;# 
  3866  0EB9                     	;# 
  3867  0EBA                     	;# 
  3868  0EBB                     	;# 
  3869  0EBC                     	;# 
  3870  0EBD                     	;# 
  3871  0EBE                     	;# 
  3872  0EC3                     	;# 
  3873  0EC5                     	;# 
  3874  0EC6                     	;# 
  3875  0EC7                     	;# 
  3876  0EC8                     	;# 
  3877  0EC9                     	;# 
  3878  0ECA                     	;# 
  3879  0ECB                     	;# 
  3880  0ECC                     	;# 
  3881  0F10                     	;# 
  3882  0F11                     	;# 
  3883  0F12                     	;# 
  3884  0F13                     	;# 
  3885  0F14                     	;# 
  3886  0F15                     	;# 
  3887  0F16                     	;# 
  3888  0F17                     	;# 
  3889  0F18                     	;# 
  3890  0F19                     	;# 
  3891  0F1A                     	;# 
  3892  0F1B                     	;# 
  3893  0F1C                     	;# 
  3894  0F1D                     	;# 
  3895  0F1E                     	;# 
  3896  0F1F                     	;# 
  3897  0F20                     	;# 
  3898  0F21                     	;# 
  3899  0F22                     	;# 
  3900  0F23                     	;# 
  3901  0F24                     	;# 
  3902  0F25                     	;# 
  3903  0F26                     	;# 
  3904  0F27                     	;# 
  3905  0F28                     	;# 
  3906  0F29                     	;# 
  3907  0F2A                     	;# 
  3908  0F2B                     	;# 
  3909  0F2C                     	;# 
  3910  0F2D                     	;# 
  3911  0F2E                     	;# 
  3912  0F2F                     	;# 
  3913  0F30                     	;# 
  3914  0F31                     	;# 
  3915  0F32                     	;# 
  3916  0F38                     	;# 
  3917  0F39                     	;# 
  3918  0F3A                     	;# 
  3919  0F3B                     	;# 
  3920  0F3C                     	;# 
  3921  0F3D                     	;# 
  3922  0F3E                     	;# 
  3923  0F3F                     	;# 
  3924  0F40                     	;# 
  3925  0F41                     	;# 
  3926  0F43                     	;# 
  3927  0F44                     	;# 
  3928  0F45                     	;# 
  3929  0F46                     	;# 
  3930  0F47                     	;# 
  3931  0F48                     	;# 
  3932  0F49                     	;# 
  3933  0F4A                     	;# 
  3934  0F4B                     	;# 
  3935  0F4C                     	;# 
  3936  0F4E                     	;# 
  3937  0F4F                     	;# 
  3938  0F50                     	;# 
  3939  0F51                     	;# 
  3940  0F52                     	;# 
  3941  0F53                     	;# 
  3942  0F54                     	;# 
  3943  0F55                     	;# 
  3944  0F56                     	;# 
  3945  0F57                     	;# 
  3946  0F59                     	;# 
  3947  0F5A                     	;# 
  3948  0F5B                     	;# 
  3949  0F5C                     	;# 
  3950  0F5D                     	;# 
  3951  0F61                     	;# 
  3952  0F62                     	;# 
  3953  0F64                     	;# 
  3954  0F65                     	;# 
  3955  0F66                     	;# 
  3956  0F67                     	;# 
  3957  0F68                     	;# 
  3958  0F69                     	;# 
  3959  0F6A                     	;# 
  3960  0F6B                     	;# 
  3961  0F6C                     	;# 
  3962  0F6D                     	;# 
  3963  0FE4                     	;# 
  3964  0FE5                     	;# 
  3965  0FE6                     	;# 
  3966  0FE7                     	;# 
  3967  0FE8                     	;# 
  3968  0FE9                     	;# 
  3969  0FEA                     	;# 
  3970  0FEB                     	;# 
  3971  0FED                     	;# 
  3972  0FEE                     	;# 
  3973  0FEF                     	;# 
  3974  0000                     	;# 
  3975  0001                     	;# 
  3976  0002                     	;# 
  3977  0003                     	;# 
  3978  0004                     	;# 
  3979  0005                     	;# 
  3980  0006                     	;# 
  3981  0007                     	;# 
  3982  0008                     	;# 
  3983  0009                     	;# 
  3984  000A                     	;# 
  3985  000B                     	;# 
  3986  000C                     	;# 
  3987  000D                     	;# 
  3988  000E                     	;# 
  3989  000F                     	;# 
  3990  0010                     	;# 
  3991  0011                     	;# 
  3992  0012                     	;# 
  3993  0013                     	;# 
  3994  0014                     	;# 
  3995  0015                     	;# 
  3996  0016                     	;# 
  3997  0017                     	;# 
  3998  0018                     	;# 
  3999  0019                     	;# 
  4000  001A                     	;# 
  4001  001C                     	;# 
  4002  001C                     	;# 
  4003  001D                     	;# 
  4004  001D                     	;# 
  4005  001E                     	;# 
  4006  001F                     	;# 
  4007  008C                     	;# 
  4008  008C                     	;# 
  4009  008D                     	;# 
  4010  008E                     	;# 
  4011  008E                     	;# 
  4012  008F                     	;# 
  4013  0090                     	;# 
  4014  0090                     	;# 
  4015  0091                     	;# 
  4016  0093                     	;# 
  4017  0094                     	;# 
  4018  0095                     	;# 
  4019  0096                     	;# 
  4020  0097                     	;# 
  4021  0098                     	;# 
  4022  0099                     	;# 
  4023  009A                     	;# 
  4024  009B                     	;# 
  4025  009C                     	;# 
  4026  009D                     	;# 
  4027  009E                     	;# 
  4028  010C                     	;# 
  4029  010D                     	;# 
  4030  010E                     	;# 
  4031  010E                     	;# 
  4032  010F                     	;# 
  4033  0110                     	;# 
  4034  0110                     	;# 
  4035  0111                     	;# 
  4036  0112                     	;# 
  4037  0112                     	;# 
  4038  0113                     	;# 
  4039  0114                     	;# 
  4040  0114                     	;# 
  4041  0115                     	;# 
  4042  0116                     	;# 
  4043  0116                     	;# 
  4044  0117                     	;# 
  4045  0119                     	;# 
  4046  0119                     	;# 
  4047  0119                     	;# 
  4048  011A                     	;# 
  4049  011A                     	;# 
  4050  011A                     	;# 
  4051  011B                     	;# 
  4052  011B                     	;# 
  4053  011B                     	;# 
  4054  011B                     	;# 
  4055  011B                     	;# 
  4056  011C                     	;# 
  4057  011C                     	;# 
  4058  011C                     	;# 
  4059  011D                     	;# 
  4060  011D                     	;# 
  4061  011D                     	;# 
  4062  011E                     	;# 
  4063  011E                     	;# 
  4064  011E                     	;# 
  4065  011F                     	;# 
  4066  011F                     	;# 
  4067  011F                     	;# 
  4068  011F                     	;# 
  4069  011F                     	;# 
  4070  018C                     	;# 
  4071  018D                     	;# 
  4072  018E                     	;# 
  4073  018F                     	;# 
  4074  0190                     	;# 
  4075  0191                     	;# 
  4076  0192                     	;# 
  4077  0196                     	;# 
  4078  0197                     	;# 
  4079  0198                     	;# 
  4080  0199                     	;# 
  4081  019A                     	;# 
  4082  019B                     	;# 
  4083  019C                     	;# 
  4084  020C                     	;# 
  4085  020C                     	;# 
  4086  020D                     	;# 
  4087  020E                     	;# 
  4088  020F                     	;# 
  4089  020F                     	;# 
  4090  0210                     	;# 
  4091  0210                     	;# 
  4092  0211                     	;# 
  4093  0211                     	;# 
  4094  0212                     	;# 
  4095  0212                     	;# 
  4096  0213                     	;# 
  4097  0214                     	;# 
  4098  0215                     	;# 
  4099  0215                     	;# 
  4100  0216                     	;# 
  4101  0216                     	;# 
  4102  0217                     	;# 
  4103  0217                     	;# 
  4104  0218                     	;# 
  4105  0218                     	;# 
  4106  0219                     	;# 
  4107  021A                     	;# 
  4108  021B                     	;# 
  4109  021B                     	;# 
  4110  021C                     	;# 
  4111  021C                     	;# 
  4112  021D                     	;# 
  4113  021D                     	;# 
  4114  021E                     	;# 
  4115  021F                     	;# 
  4116  028C                     	;# 
  4117  028C                     	;# 
  4118  028D                     	;# 
  4119  028D                     	;# 
  4120  028E                     	;# 
  4121  028F                     	;# 
  4122  0290                     	;# 
  4123  0290                     	;# 
  4124  0291                     	;# 
  4125  0292                     	;# 
  4126  0292                     	;# 
  4127  0293                     	;# 
  4128  0293                     	;# 
  4129  0294                     	;# 
  4130  0295                     	;# 
  4131  0296                     	;# 
  4132  0296                     	;# 
  4133  0297                     	;# 
  4134  0298                     	;# 
  4135  0298                     	;# 
  4136  0299                     	;# 
  4137  0299                     	;# 
  4138  029A                     	;# 
  4139  029B                     	;# 
  4140  029C                     	;# 
  4141  029C                     	;# 
  4142  029D                     	;# 
  4143  030C                     	;# 
  4144  030C                     	;# 
  4145  030D                     	;# 
  4146  030E                     	;# 
  4147  030F                     	;# 
  4148  0310                     	;# 
  4149  0310                     	;# 
  4150  0311                     	;# 
  4151  0312                     	;# 
  4152  0313                     	;# 
  4153  0314                     	;# 
  4154  0314                     	;# 
  4155  0315                     	;# 
  4156  0316                     	;# 
  4157  0317                     	;# 
  4158  0318                     	;# 
  4159  0318                     	;# 
  4160  0319                     	;# 
  4161  031A                     	;# 
  4162  031B                     	;# 
  4163  031C                     	;# 
  4164  031C                     	;# 
  4165  031D                     	;# 
  4166  031E                     	;# 
  4167  031F                     	;# 
  4168  038C                     	;# 
  4169  038C                     	;# 
  4170  038D                     	;# 
  4171  038E                     	;# 
  4172  0390                     	;# 
  4173  0390                     	;# 
  4174  0391                     	;# 
  4175  0392                     	;# 
  4176  040C                     	;# 
  4177  040D                     	;# 
  4178  040E                     	;# 
  4179  040F                     	;# 
  4180  0410                     	;# 
  4181  0411                     	;# 
  4182  0416                     	;# 
  4183  0416                     	;# 
  4184  0417                     	;# 
  4185  0418                     	;# 
  4186  0418                     	;# 
  4187  0419                     	;# 
  4188  041A                     	;# 
  4189  041A                     	;# 
  4190  041B                     	;# 
  4191  041C                     	;# 
  4192  041C                     	;# 
  4193  041D                     	;# 
  4194  041E                     	;# 
  4195  041F                     	;# 
  4196  048C                     	;# 
  4197  048C                     	;# 
  4198  048D                     	;# 
  4199  048E                     	;# 
  4200  048F                     	;# 
  4201  048F                     	;# 
  4202  0490                     	;# 
  4203  0491                     	;# 
  4204  0492                     	;# 
  4205  0492                     	;# 
  4206  0493                     	;# 
  4207  0494                     	;# 
  4208  0495                     	;# 
  4209  0495                     	;# 
  4210  0496                     	;# 
  4211  0497                     	;# 
  4212  0498                     	;# 
  4213  0499                     	;# 
  4214  049A                     	;# 
  4215  049B                     	;# 
  4216  049C                     	;# 
  4217  049D                     	;# 
  4218  050C                     	;# 
  4219  050C                     	;# 
  4220  050D                     	;# 
  4221  050E                     	;# 
  4222  050F                     	;# 
  4223  050F                     	;# 
  4224  0510                     	;# 
  4225  0511                     	;# 
  4226  0512                     	;# 
  4227  0512                     	;# 
  4228  0513                     	;# 
  4229  0514                     	;# 
  4230  0515                     	;# 
  4231  0515                     	;# 
  4232  0516                     	;# 
  4233  0517                     	;# 
  4234  0518                     	;# 
  4235  0519                     	;# 
  4236  051A                     	;# 
  4237  051B                     	;# 
  4238  051C                     	;# 
  4239  051D                     	;# 
  4240  058C                     	;# 
  4241  058C                     	;# 
  4242  058D                     	;# 
  4243  058E                     	;# 
  4244  058F                     	;# 
  4245  058F                     	;# 
  4246  0590                     	;# 
  4247  0591                     	;# 
  4248  0592                     	;# 
  4249  0593                     	;# 
  4250  060C                     	;# 
  4251  060D                     	;# 
  4252  060E                     	;# 
  4253  060F                     	;# 
  4254  0610                     	;# 
  4255  0611                     	;# 
  4256  0612                     	;# 
  4257  0613                     	;# 
  4258  0614                     	;# 
  4259  0616                     	;# 
  4260  0617                     	;# 
  4261  0618                     	;# 
  4262  0619                     	;# 
  4263  061A                     	;# 
  4264  061B                     	;# 
  4265  061C                     	;# 
  4266  061D                     	;# 
  4267  061E                     	;# 
  4268  068C                     	;# 
  4269  068D                     	;# 
  4270  068E                     	;# 
  4271  068F                     	;# 
  4272  0690                     	;# 
  4273  0691                     	;# 
  4274  0692                     	;# 
  4275  0693                     	;# 
  4276  0694                     	;# 
  4277  070C                     	;# 
  4278  070D                     	;# 
  4279  070E                     	;# 
  4280  070F                     	;# 
  4281  0710                     	;# 
  4282  0711                     	;# 
  4283  0712                     	;# 
  4284  0713                     	;# 
  4285  0714                     	;# 
  4286  0716                     	;# 
  4287  0717                     	;# 
  4288  0718                     	;# 
  4289  0719                     	;# 
  4290  071A                     	;# 
  4291  071B                     	;# 
  4292  071C                     	;# 
  4293  071D                     	;# 
  4294  071E                     	;# 
  4295  0796                     	;# 
  4296  0797                     	;# 
  4297  0798                     	;# 
  4298  0799                     	;# 
  4299  079A                     	;# 
  4300  079B                     	;# 
  4301  080C                     	;# 
  4302  080D                     	;# 
  4303  080E                     	;# 
  4304  080F                     	;# 
  4305  0810                     	;# 
  4306  0811                     	;# 
  4307  0812                     	;# 
  4308  0813                     	;# 
  4309  0814                     	;# 
  4310  081A                     	;# 
  4311  081B                     	;# 
  4312  081C                     	;# 
  4313  081D                     	;# 
  4314  081E                     	;# 
  4315  081F                     	;# 
  4316  088C                     	;# 
  4317  088D                     	;# 
  4318  088E                     	;# 
  4319  088F                     	;# 
  4320  0890                     	;# 
  4321  0891                     	;# 
  4322  0892                     	;# 
  4323  0893                     	;# 
  4324  0895                     	;# 
  4325  0896                     	;# 
  4326  0897                     	;# 
  4327  0898                     	;# 
  4328  0899                     	;# 
  4329  089A                     	;# 
  4330  089B                     	;# 
  4331  090C                     	;# 
  4332  090E                     	;# 
  4333  090F                     	;# 
  4334  091F                     	;# 
  4335  091F                     	;# 
  4336  098F                     	;# 
  4337  098F                     	;# 
  4338  0990                     	;# 
  4339  0991                     	;# 
  4340  0992                     	;# 
  4341  0993                     	;# 
  4342  0994                     	;# 
  4343  0995                     	;# 
  4344  0996                     	;# 
  4345  0997                     	;# 
  4346  0E0F                     	;# 
  4347  0E10                     	;# 
  4348  0E11                     	;# 
  4349  0E12                     	;# 
  4350  0E13                     	;# 
  4351  0E14                     	;# 
  4352  0E15                     	;# 
  4353  0E16                     	;# 
  4354  0E17                     	;# 
  4355  0E18                     	;# 
  4356  0E19                     	;# 
  4357  0E1A                     	;# 
  4358  0E1B                     	;# 
  4359  0E1C                     	;# 
  4360  0E1D                     	;# 
  4361  0E1E                     	;# 
  4362  0E1F                     	;# 
  4363  0E20                     	;# 
  4364  0E21                     	;# 
  4365  0E22                     	;# 
  4366  0E23                     	;# 
  4367  0E24                     	;# 
  4368  0E25                     	;# 
  4369  0E26                     	;# 
  4370  0E27                     	;# 
  4371  0E28                     	;# 
  4372  0E29                     	;# 
  4373  0E2A                     	;# 
  4374  0E2B                     	;# 
  4375  0E2C                     	;# 
  4376  0E2D                     	;# 
  4377  0E2E                     	;# 
  4378  0E2F                     	;# 
  4379  0E30                     	;# 
  4380  0E31                     	;# 
  4381  0E32                     	;# 
  4382  0E33                     	;# 
  4383  0E34                     	;# 
  4384  0E35                     	;# 
  4385  0E36                     	;# 
  4386  0E37                     	;# 
  4387  0E8F                     	;# 
  4388  0E90                     	;# 
  4389  0E91                     	;# 
  4390  0E92                     	;# 
  4391  0E93                     	;# 
  4392  0E94                     	;# 
  4393  0E95                     	;# 
  4394  0E96                     	;# 
  4395  0E97                     	;# 
  4396  0E9C                     	;# 
  4397  0E9D                     	;# 
  4398  0E9E                     	;# 
  4399  0EA1                     	;# 
  4400  0EA2                     	;# 
  4401  0EA3                     	;# 
  4402  0EA4                     	;# 
  4403  0EA5                     	;# 
  4404  0EA9                     	;# 
  4405  0EAA                     	;# 
  4406  0EAB                     	;# 
  4407  0EAC                     	;# 
  4408  0EB1                     	;# 
  4409  0EB2                     	;# 
  4410  0EB3                     	;# 
  4411  0EB8                     	;# 
  4412  0EB9                     	;# 
  4413  0EBA                     	;# 
  4414  0EBB                     	;# 
  4415  0EBC                     	;# 
  4416  0EBD                     	;# 
  4417  0EBE                     	;# 
  4418  0EC3                     	;# 
  4419  0EC5                     	;# 
  4420  0EC6                     	;# 
  4421  0EC7                     	;# 
  4422  0EC8                     	;# 
  4423  0EC9                     	;# 
  4424  0ECA                     	;# 
  4425  0ECB                     	;# 
  4426  0ECC                     	;# 
  4427  0F10                     	;# 
  4428  0F11                     	;# 
  4429  0F12                     	;# 
  4430  0F13                     	;# 
  4431  0F14                     	;# 
  4432  0F15                     	;# 
  4433  0F16                     	;# 
  4434  0F17                     	;# 
  4435  0F18                     	;# 
  4436  0F19                     	;# 
  4437  0F1A                     	;# 
  4438  0F1B                     	;# 
  4439  0F1C                     	;# 
  4440  0F1D                     	;# 
  4441  0F1E                     	;# 
  4442  0F1F                     	;# 
  4443  0F20                     	;# 
  4444  0F21                     	;# 
  4445  0F22                     	;# 
  4446  0F23                     	;# 
  4447  0F24                     	;# 
  4448  0F25                     	;# 
  4449  0F26                     	;# 
  4450  0F27                     	;# 
  4451  0F28                     	;# 
  4452  0F29                     	;# 
  4453  0F2A                     	;# 
  4454  0F2B                     	;# 
  4455  0F2C                     	;# 
  4456  0F2D                     	;# 
  4457  0F2E                     	;# 
  4458  0F2F                     	;# 
  4459  0F30                     	;# 
  4460  0F31                     	;# 
  4461  0F32                     	;# 
  4462  0F38                     	;# 
  4463  0F39                     	;# 
  4464  0F3A                     	;# 
  4465  0F3B                     	;# 
  4466  0F3C                     	;# 
  4467  0F3D                     	;# 
  4468  0F3E                     	;# 
  4469  0F3F                     	;# 
  4470  0F40                     	;# 
  4471  0F41                     	;# 
  4472  0F43                     	;# 
  4473  0F44                     	;# 
  4474  0F45                     	;# 
  4475  0F46                     	;# 
  4476  0F47                     	;# 
  4477  0F48                     	;# 
  4478  0F49                     	;# 
  4479  0F4A                     	;# 
  4480  0F4B                     	;# 
  4481  0F4C                     	;# 
  4482  0F4E                     	;# 
  4483  0F4F                     	;# 
  4484  0F50                     	;# 
  4485  0F51                     	;# 
  4486  0F52                     	;# 
  4487  0F53                     	;# 
  4488  0F54                     	;# 
  4489  0F55                     	;# 
  4490  0F56                     	;# 
  4491  0F57                     	;# 
  4492  0F59                     	;# 
  4493  0F5A                     	;# 
  4494  0F5B                     	;# 
  4495  0F5C                     	;# 
  4496  0F5D                     	;# 
  4497  0F61                     	;# 
  4498  0F62                     	;# 
  4499  0F64                     	;# 
  4500  0F65                     	;# 
  4501  0F66                     	;# 
  4502  0F67                     	;# 
  4503  0F68                     	;# 
  4504  0F69                     	;# 
  4505  0F6A                     	;# 
  4506  0F6B                     	;# 
  4507  0F6C                     	;# 
  4508  0F6D                     	;# 
  4509  0FE4                     	;# 
  4510  0FE5                     	;# 
  4511  0FE6                     	;# 
  4512  0FE7                     	;# 
  4513  0FE8                     	;# 
  4514  0FE9                     	;# 
  4515  0FEA                     	;# 
  4516  0FEB                     	;# 
  4517  0FED                     	;# 
  4518  0FEE                     	;# 
  4519  0FEF                     	;# 
  4520  0000                     	;# 
  4521  0001                     	;# 
  4522  0002                     	;# 
  4523  0003                     	;# 
  4524  0004                     	;# 
  4525  0005                     	;# 
  4526  0006                     	;# 
  4527  0007                     	;# 
  4528  0008                     	;# 
  4529  0009                     	;# 
  4530  000A                     	;# 
  4531  000B                     	;# 
  4532  000C                     	;# 
  4533  000D                     	;# 
  4534  000E                     	;# 
  4535  000F                     	;# 
  4536  0010                     	;# 
  4537  0011                     	;# 
  4538  0012                     	;# 
  4539  0013                     	;# 
  4540  0014                     	;# 
  4541  0015                     	;# 
  4542  0016                     	;# 
  4543  0017                     	;# 
  4544  0018                     	;# 
  4545  0019                     	;# 
  4546  001A                     	;# 
  4547  001C                     	;# 
  4548  001C                     	;# 
  4549  001D                     	;# 
  4550  001D                     	;# 
  4551  001E                     	;# 
  4552  001F                     	;# 
  4553  008C                     	;# 
  4554  008C                     	;# 
  4555  008D                     	;# 
  4556  008E                     	;# 
  4557  008E                     	;# 
  4558  008F                     	;# 
  4559  0090                     	;# 
  4560  0090                     	;# 
  4561  0091                     	;# 
  4562  0093                     	;# 
  4563  0094                     	;# 
  4564  0095                     	;# 
  4565  0096                     	;# 
  4566  0097                     	;# 
  4567  0098                     	;# 
  4568  0099                     	;# 
  4569  009A                     	;# 
  4570  009B                     	;# 
  4571  009C                     	;# 
  4572  009D                     	;# 
  4573  009E                     	;# 
  4574  010C                     	;# 
  4575  010D                     	;# 
  4576  010E                     	;# 
  4577  010E                     	;# 
  4578  010F                     	;# 
  4579  0110                     	;# 
  4580  0110                     	;# 
  4581  0111                     	;# 
  4582  0112                     	;# 
  4583  0112                     	;# 
  4584  0113                     	;# 
  4585  0114                     	;# 
  4586  0114                     	;# 
  4587  0115                     	;# 
  4588  0116                     	;# 
  4589  0116                     	;# 
  4590  0117                     	;# 
  4591  0119                     	;# 
  4592  0119                     	;# 
  4593  0119                     	;# 
  4594  011A                     	;# 
  4595  011A                     	;# 
  4596  011A                     	;# 
  4597  011B                     	;# 
  4598  011B                     	;# 
  4599  011B                     	;# 
  4600  011B                     	;# 
  4601  011B                     	;# 
  4602  011C                     	;# 
  4603  011C                     	;# 
  4604  011C                     	;# 
  4605  011D                     	;# 
  4606  011D                     	;# 
  4607  011D                     	;# 
  4608  011E                     	;# 
  4609  011E                     	;# 
  4610  011E                     	;# 
  4611  011F                     	;# 
  4612  011F                     	;# 
  4613  011F                     	;# 
  4614  011F                     	;# 
  4615  011F                     	;# 
  4616  018C                     	;# 
  4617  018D                     	;# 
  4618  018E                     	;# 
  4619  018F                     	;# 
  4620  0190                     	;# 
  4621  0191                     	;# 
  4622  0192                     	;# 
  4623  0196                     	;# 
  4624  0197                     	;# 
  4625  0198                     	;# 
  4626  0199                     	;# 
  4627  019A                     	;# 
  4628  019B                     	;# 
  4629  019C                     	;# 
  4630  020C                     	;# 
  4631  020C                     	;# 
  4632  020D                     	;# 
  4633  020E                     	;# 
  4634  020F                     	;# 
  4635  020F                     	;# 
  4636  0210                     	;# 
  4637  0210                     	;# 
  4638  0211                     	;# 
  4639  0211                     	;# 
  4640  0212                     	;# 
  4641  0212                     	;# 
  4642  0213                     	;# 
  4643  0214                     	;# 
  4644  0215                     	;# 
  4645  0215                     	;# 
  4646  0216                     	;# 
  4647  0216                     	;# 
  4648  0217                     	;# 
  4649  0217                     	;# 
  4650  0218                     	;# 
  4651  0218                     	;# 
  4652  0219                     	;# 
  4653  021A                     	;# 
  4654  021B                     	;# 
  4655  021B                     	;# 
  4656  021C                     	;# 
  4657  021C                     	;# 
  4658  021D                     	;# 
  4659  021D                     	;# 
  4660  021E                     	;# 
  4661  021F                     	;# 
  4662  028C                     	;# 
  4663  028C                     	;# 
  4664  028D                     	;# 
  4665  028D                     	;# 
  4666  028E                     	;# 
  4667  028F                     	;# 
  4668  0290                     	;# 
  4669  0290                     	;# 
  4670  0291                     	;# 
  4671  0292                     	;# 
  4672  0292                     	;# 
  4673  0293                     	;# 
  4674  0293                     	;# 
  4675  0294                     	;# 
  4676  0295                     	;# 
  4677  0296                     	;# 
  4678  0296                     	;# 
  4679  0297                     	;# 
  4680  0298                     	;# 
  4681  0298                     	;# 
  4682  0299                     	;# 
  4683  0299                     	;# 
  4684  029A                     	;# 
  4685  029B                     	;# 
  4686  029C                     	;# 
  4687  029C                     	;# 
  4688  029D                     	;# 
  4689  030C                     	;# 
  4690  030C                     	;# 
  4691  030D                     	;# 
  4692  030E                     	;# 
  4693  030F                     	;# 
  4694  0310                     	;# 
  4695  0310                     	;# 
  4696  0311                     	;# 
  4697  0312                     	;# 
  4698  0313                     	;# 
  4699  0314                     	;# 
  4700  0314                     	;# 
  4701  0315                     	;# 
  4702  0316                     	;# 
  4703  0317                     	;# 
  4704  0318                     	;# 
  4705  0318                     	;# 
  4706  0319                     	;# 
  4707  031A                     	;# 
  4708  031B                     	;# 
  4709  031C                     	;# 
  4710  031C                     	;# 
  4711  031D                     	;# 
  4712  031E                     	;# 
  4713  031F                     	;# 
  4714  038C                     	;# 
  4715  038C                     	;# 
  4716  038D                     	;# 
  4717  038E                     	;# 
  4718  0390                     	;# 
  4719  0390                     	;# 
  4720  0391                     	;# 
  4721  0392                     	;# 
  4722  040C                     	;# 
  4723  040D                     	;# 
  4724  040E                     	;# 
  4725  040F                     	;# 
  4726  0410                     	;# 
  4727  0411                     	;# 
  4728  0416                     	;# 
  4729  0416                     	;# 
  4730  0417                     	;# 
  4731  0418                     	;# 
  4732  0418                     	;# 
  4733  0419                     	;# 
  4734  041A                     	;# 
  4735  041A                     	;# 
  4736  041B                     	;# 
  4737  041C                     	;# 
  4738  041C                     	;# 
  4739  041D                     	;# 
  4740  041E                     	;# 
  4741  041F                     	;# 
  4742  048C                     	;# 
  4743  048C                     	;# 
  4744  048D                     	;# 
  4745  048E                     	;# 
  4746  048F                     	;# 
  4747  048F                     	;# 
  4748  0490                     	;# 
  4749  0491                     	;# 
  4750  0492                     	;# 
  4751  0492                     	;# 
  4752  0493                     	;# 
  4753  0494                     	;# 
  4754  0495                     	;# 
  4755  0495                     	;# 
  4756  0496                     	;# 
  4757  0497                     	;# 
  4758  0498                     	;# 
  4759  0499                     	;# 
  4760  049A                     	;# 
  4761  049B                     	;# 
  4762  049C                     	;# 
  4763  049D                     	;# 
  4764  050C                     	;# 
  4765  050C                     	;# 
  4766  050D                     	;# 
  4767  050E                     	;# 
  4768  050F                     	;# 
  4769  050F                     	;# 
  4770  0510                     	;# 
  4771  0511                     	;# 
  4772  0512                     	;# 
  4773  0512                     	;# 
  4774  0513                     	;# 
  4775  0514                     	;# 
  4776  0515                     	;# 
  4777  0515                     	;# 
  4778  0516                     	;# 
  4779  0517                     	;# 
  4780  0518                     	;# 
  4781  0519                     	;# 
  4782  051A                     	;# 
  4783  051B                     	;# 
  4784  051C                     	;# 
  4785  051D                     	;# 
  4786  058C                     	;# 
  4787  058C                     	;# 
  4788  058D                     	;# 
  4789  058E                     	;# 
  4790  058F                     	;# 
  4791  058F                     	;# 
  4792  0590                     	;# 
  4793  0591                     	;# 
  4794  0592                     	;# 
  4795  0593                     	;# 
  4796  060C                     	;# 
  4797  060D                     	;# 
  4798  060E                     	;# 
  4799  060F                     	;# 
  4800  0610                     	;# 
  4801  0611                     	;# 
  4802  0612                     	;# 
  4803  0613                     	;# 
  4804  0614                     	;# 
  4805  0616                     	;# 
  4806  0617                     	;# 
  4807  0618                     	;# 
  4808  0619                     	;# 
  4809  061A                     	;# 
  4810  061B                     	;# 
  4811  061C                     	;# 
  4812  061D                     	;# 
  4813  061E                     	;# 
  4814  068C                     	;# 
  4815  068D                     	;# 
  4816  068E                     	;# 
  4817  068F                     	;# 
  4818  0690                     	;# 
  4819  0691                     	;# 
  4820  0692                     	;# 
  4821  0693                     	;# 
  4822  0694                     	;# 
  4823  070C                     	;# 
  4824  070D                     	;# 
  4825  070E                     	;# 
  4826  070F                     	;# 
  4827  0710                     	;# 
  4828  0711                     	;# 
  4829  0712                     	;# 
  4830  0713                     	;# 
  4831  0714                     	;# 
  4832  0716                     	;# 
  4833  0717                     	;# 
  4834  0718                     	;# 
  4835  0719                     	;# 
  4836  071A                     	;# 
  4837  071B                     	;# 
  4838  071C                     	;# 
  4839  071D                     	;# 
  4840  071E                     	;# 
  4841  0796                     	;# 
  4842  0797                     	;# 
  4843  0798                     	;# 
  4844  0799                     	;# 
  4845  079A                     	;# 
  4846  079B                     	;# 
  4847  080C                     	;# 
  4848  080D                     	;# 
  4849  080E                     	;# 
  4850  080F                     	;# 
  4851  0810                     	;# 
  4852  0811                     	;# 
  4853  0812                     	;# 
  4854  0813                     	;# 
  4855  0814                     	;# 
  4856  081A                     	;# 
  4857  081B                     	;# 
  4858  081C                     	;# 
  4859  081D                     	;# 
  4860  081E                     	;# 
  4861  081F                     	;# 
  4862  088C                     	;# 
  4863  088D                     	;# 
  4864  088E                     	;# 
  4865  088F                     	;# 
  4866  0890                     	;# 
  4867  0891                     	;# 
  4868  0892                     	;# 
  4869  0893                     	;# 
  4870  0895                     	;# 
  4871  0896                     	;# 
  4872  0897                     	;# 
  4873  0898                     	;# 
  4874  0899                     	;# 
  4875  089A                     	;# 
  4876  089B                     	;# 
  4877  090C                     	;# 
  4878  090E                     	;# 
  4879  090F                     	;# 
  4880  091F                     	;# 
  4881  091F                     	;# 
  4882  098F                     	;# 
  4883  098F                     	;# 
  4884  0990                     	;# 
  4885  0991                     	;# 
  4886  0992                     	;# 
  4887  0993                     	;# 
  4888  0994                     	;# 
  4889  0995                     	;# 
  4890  0996                     	;# 
  4891  0997                     	;# 
  4892  0E0F                     	;# 
  4893  0E10                     	;# 
  4894  0E11                     	;# 
  4895  0E12                     	;# 
  4896  0E13                     	;# 
  4897  0E14                     	;# 
  4898  0E15                     	;# 
  4899  0E16                     	;# 
  4900  0E17                     	;# 
  4901  0E18                     	;# 
  4902  0E19                     	;# 
  4903  0E1A                     	;# 
  4904  0E1B                     	;# 
  4905  0E1C                     	;# 
  4906  0E1D                     	;# 
  4907  0E1E                     	;# 
  4908  0E1F                     	;# 
  4909  0E20                     	;# 
  4910  0E21                     	;# 
  4911  0E22                     	;# 
  4912  0E23                     	;# 
  4913  0E24                     	;# 
  4914  0E25                     	;# 
  4915  0E26                     	;# 
  4916  0E27                     	;# 
  4917  0E28                     	;# 
  4918  0E29                     	;# 
  4919  0E2A                     	;# 
  4920  0E2B                     	;# 
  4921  0E2C                     	;# 
  4922  0E2D                     	;# 
  4923  0E2E                     	;# 
  4924  0E2F                     	;# 
  4925  0E30                     	;# 
  4926  0E31                     	;# 
  4927  0E32                     	;# 
  4928  0E33                     	;# 
  4929  0E34                     	;# 
  4930  0E35                     	;# 
  4931  0E36                     	;# 
  4932  0E37                     	;# 
  4933  0E8F                     	;# 
  4934  0E90                     	;# 
  4935  0E91                     	;# 
  4936  0E92                     	;# 
  4937  0E93                     	;# 
  4938  0E94                     	;# 
  4939  0E95                     	;# 
  4940  0E96                     	;# 
  4941  0E97                     	;# 
  4942  0E9C                     	;# 
  4943  0E9D                     	;# 
  4944  0E9E                     	;# 
  4945  0EA1                     	;# 
  4946  0EA2                     	;# 
  4947  0EA3                     	;# 
  4948  0EA4                     	;# 
  4949  0EA5                     	;# 
  4950  0EA9                     	;# 
  4951  0EAA                     	;# 
  4952  0EAB                     	;# 
  4953  0EAC                     	;# 
  4954  0EB1                     	;# 
  4955  0EB2                     	;# 
  4956  0EB3                     	;# 
  4957  0EB8                     	;# 
  4958  0EB9                     	;# 
  4959  0EBA                     	;# 
  4960  0EBB                     	;# 
  4961  0EBC                     	;# 
  4962  0EBD                     	;# 
  4963  0EBE                     	;# 
  4964  0EC3                     	;# 
  4965  0EC5                     	;# 
  4966  0EC6                     	;# 
  4967  0EC7                     	;# 
  4968  0EC8                     	;# 
  4969  0EC9                     	;# 
  4970  0ECA                     	;# 
  4971  0ECB                     	;# 
  4972  0ECC                     	;# 
  4973  0F10                     	;# 
  4974  0F11                     	;# 
  4975  0F12                     	;# 
  4976  0F13                     	;# 
  4977  0F14                     	;# 
  4978  0F15                     	;# 
  4979  0F16                     	;# 
  4980  0F17                     	;# 
  4981  0F18                     	;# 
  4982  0F19                     	;# 
  4983  0F1A                     	;# 
  4984  0F1B                     	;# 
  4985  0F1C                     	;# 
  4986  0F1D                     	;# 
  4987  0F1E                     	;# 
  4988  0F1F                     	;# 
  4989  0F20                     	;# 
  4990  0F21                     	;# 
  4991  0F22                     	;# 
  4992  0F23                     	;# 
  4993  0F24                     	;# 
  4994  0F25                     	;# 
  4995  0F26                     	;# 
  4996  0F27                     	;# 
  4997  0F28                     	;# 
  4998  0F29                     	;# 
  4999  0F2A                     	;# 
  5000  0F2B                     	;# 
  5001  0F2C                     	;# 
  5002  0F2D                     	;# 
  5003  0F2E                     	;# 
  5004  0F2F                     	;# 
  5005  0F30                     	;# 
  5006  0F31                     	;# 
  5007  0F32                     	;# 
  5008  0F38                     	;# 
  5009  0F39                     	;# 
  5010  0F3A                     	;# 
  5011  0F3B                     	;# 
  5012  0F3C                     	;# 
  5013  0F3D                     	;# 
  5014  0F3E                     	;# 
  5015  0F3F                     	;# 
  5016  0F40                     	;# 
  5017  0F41                     	;# 
  5018  0F43                     	;# 
  5019  0F44                     	;# 
  5020  0F45                     	;# 
  5021  0F46                     	;# 
  5022  0F47                     	;# 
  5023  0F48                     	;# 
  5024  0F49                     	;# 
  5025  0F4A                     	;# 
  5026  0F4B                     	;# 
  5027  0F4C                     	;# 
  5028  0F4E                     	;# 
  5029  0F4F                     	;# 
  5030  0F50                     	;# 
  5031  0F51                     	;# 
  5032  0F52                     	;# 
  5033  0F53                     	;# 
  5034  0F54                     	;# 
  5035  0F55                     	;# 
  5036  0F56                     	;# 
  5037  0F57                     	;# 
  5038  0F59                     	;# 
  5039  0F5A                     	;# 
  5040  0F5B                     	;# 
  5041  0F5C                     	;# 
  5042  0F5D                     	;# 
  5043  0F61                     	;# 
  5044  0F62                     	;# 
  5045  0F64                     	;# 
  5046  0F65                     	;# 
  5047  0F66                     	;# 
  5048  0F67                     	;# 
  5049  0F68                     	;# 
  5050  0F69                     	;# 
  5051  0F6A                     	;# 
  5052  0F6B                     	;# 
  5053  0F6C                     	;# 
  5054  0F6D                     	;# 
  5055  0FE4                     	;# 
  5056  0FE5                     	;# 
  5057  0FE6                     	;# 
  5058  0FE7                     	;# 
  5059  0FE8                     	;# 
  5060  0FE9                     	;# 
  5061  0FEA                     	;# 
  5062  0FEB                     	;# 
  5063  0FED                     	;# 
  5064  0FEE                     	;# 
  5065  0FEF                     	;# 
  5066  0000                     	;# 
  5067  0001                     	;# 
  5068  0002                     	;# 
  5069  0003                     	;# 
  5070  0004                     	;# 
  5071  0005                     	;# 
  5072  0006                     	;# 
  5073  0007                     	;# 
  5074  0008                     	;# 
  5075  0009                     	;# 
  5076  000A                     	;# 
  5077  000B                     	;# 
  5078  000C                     	;# 
  5079  000D                     	;# 
  5080  000E                     	;# 
  5081  000F                     	;# 
  5082  0010                     	;# 
  5083  0011                     	;# 
  5084  0012                     	;# 
  5085  0013                     	;# 
  5086  0014                     	;# 
  5087  0015                     	;# 
  5088  0016                     	;# 
  5089  0017                     	;# 
  5090  0018                     	;# 
  5091  0019                     	;# 
  5092  001A                     	;# 
  5093  001C                     	;# 
  5094  001C                     	;# 
  5095  001D                     	;# 
  5096  001D                     	;# 
  5097  001E                     	;# 
  5098  001F                     	;# 
  5099  008C                     	;# 
  5100  008C                     	;# 
  5101  008D                     	;# 
  5102  008E                     	;# 
  5103  008E                     	;# 
  5104  008F                     	;# 
  5105  0090                     	;# 
  5106  0090                     	;# 
  5107  0091                     	;# 
  5108  0093                     	;# 
  5109  0094                     	;# 
  5110  0095                     	;# 
  5111  0096                     	;# 
  5112  0097                     	;# 
  5113  0098                     	;# 
  5114  0099                     	;# 
  5115  009A                     	;# 
  5116  009B                     	;# 
  5117  009C                     	;# 
  5118  009D                     	;# 
  5119  009E                     	;# 
  5120  010C                     	;# 
  5121  010D                     	;# 
  5122  010E                     	;# 
  5123  010E                     	;# 
  5124  010F                     	;# 
  5125  0110                     	;# 
  5126  0110                     	;# 
  5127  0111                     	;# 
  5128  0112                     	;# 
  5129  0112                     	;# 
  5130  0113                     	;# 
  5131  0114                     	;# 
  5132  0114                     	;# 
  5133  0115                     	;# 
  5134  0116                     	;# 
  5135  0116                     	;# 
  5136  0117                     	;# 
  5137  0119                     	;# 
  5138  0119                     	;# 
  5139  0119                     	;# 
  5140  011A                     	;# 
  5141  011A                     	;# 
  5142  011A                     	;# 
  5143  011B                     	;# 
  5144  011B                     	;# 
  5145  011B                     	;# 
  5146  011B                     	;# 
  5147  011B                     	;# 
  5148  011C                     	;# 
  5149  011C                     	;# 
  5150  011C                     	;# 
  5151  011D                     	;# 
  5152  011D                     	;# 
  5153  011D                     	;# 
  5154  011E                     	;# 
  5155  011E                     	;# 
  5156  011E                     	;# 
  5157  011F                     	;# 
  5158  011F                     	;# 
  5159  011F                     	;# 
  5160  011F                     	;# 
  5161  011F                     	;# 
  5162  018C                     	;# 
  5163  018D                     	;# 
  5164  018E                     	;# 
  5165  018F                     	;# 
  5166  0190                     	;# 
  5167  0191                     	;# 
  5168  0192                     	;# 
  5169  0196                     	;# 
  5170  0197                     	;# 
  5171  0198                     	;# 
  5172  0199                     	;# 
  5173  019A                     	;# 
  5174  019B                     	;# 
  5175  019C                     	;# 
  5176  020C                     	;# 
  5177  020C                     	;# 
  5178  020D                     	;# 
  5179  020E                     	;# 
  5180  020F                     	;# 
  5181  020F                     	;# 
  5182  0210                     	;# 
  5183  0210                     	;# 
  5184  0211                     	;# 
  5185  0211                     	;# 
  5186  0212                     	;# 
  5187  0212                     	;# 
  5188  0213                     	;# 
  5189  0214                     	;# 
  5190  0215                     	;# 
  5191  0215                     	;# 
  5192  0216                     	;# 
  5193  0216                     	;# 
  5194  0217                     	;# 
  5195  0217                     	;# 
  5196  0218                     	;# 
  5197  0218                     	;# 
  5198  0219                     	;# 
  5199  021A                     	;# 
  5200  021B                     	;# 
  5201  021B                     	;# 
  5202  021C                     	;# 
  5203  021C                     	;# 
  5204  021D                     	;# 
  5205  021D                     	;# 
  5206  021E                     	;# 
  5207  021F                     	;# 
  5208  028C                     	;# 
  5209  028C                     	;# 
  5210  028D                     	;# 
  5211  028D                     	;# 
  5212  028E                     	;# 
  5213  028F                     	;# 
  5214  0290                     	;# 
  5215  0290                     	;# 
  5216  0291                     	;# 
  5217  0292                     	;# 
  5218  0292                     	;# 
  5219  0293                     	;# 
  5220  0293                     	;# 
  5221  0294                     	;# 
  5222  0295                     	;# 
  5223  0296                     	;# 
  5224  0296                     	;# 
  5225  0297                     	;# 
  5226  0298                     	;# 
  5227  0298                     	;# 
  5228  0299                     	;# 
  5229  0299                     	;# 
  5230  029A                     	;# 
  5231  029B                     	;# 
  5232  029C                     	;# 
  5233  029C                     	;# 
  5234  029D                     	;# 
  5235  030C                     	;# 
  5236  030C                     	;# 
  5237  030D                     	;# 
  5238  030E                     	;# 
  5239  030F                     	;# 
  5240  0310                     	;# 
  5241  0310                     	;# 
  5242  0311                     	;# 
  5243  0312                     	;# 
  5244  0313                     	;# 
  5245  0314                     	;# 
  5246  0314                     	;# 
  5247  0315                     	;# 
  5248  0316                     	;# 
  5249  0317                     	;# 
  5250  0318                     	;# 
  5251  0318                     	;# 
  5252  0319                     	;# 
  5253  031A                     	;# 
  5254  031B                     	;# 
  5255  031C                     	;# 
  5256  031C                     	;# 
  5257  031D                     	;# 
  5258  031E                     	;# 
  5259  031F                     	;# 
  5260  038C                     	;# 
  5261  038C                     	;# 
  5262  038D                     	;# 
  5263  038E                     	;# 
  5264  0390                     	;# 
  5265  0390                     	;# 
  5266  0391                     	;# 
  5267  0392                     	;# 
  5268  040C                     	;# 
  5269  040D                     	;# 
  5270  040E                     	;# 
  5271  040F                     	;# 
  5272  0410                     	;# 
  5273  0411                     	;# 
  5274  0416                     	;# 
  5275  0416                     	;# 
  5276  0417                     	;# 
  5277  0418                     	;# 
  5278  0418                     	;# 
  5279  0419                     	;# 
  5280  041A                     	;# 
  5281  041A                     	;# 
  5282  041B                     	;# 
  5283  041C                     	;# 
  5284  041C                     	;# 
  5285  041D                     	;# 
  5286  041E                     	;# 
  5287  041F                     	;# 
  5288  048C                     	;# 
  5289  048C                     	;# 
  5290  048D                     	;# 
  5291  048E                     	;# 
  5292  048F                     	;# 
  5293  048F                     	;# 
  5294  0490                     	;# 
  5295  0491                     	;# 
  5296  0492                     	;# 
  5297  0492                     	;# 
  5298  0493                     	;# 
  5299  0494                     	;# 
  5300  0495                     	;# 
  5301  0495                     	;# 
  5302  0496                     	;# 
  5303  0497                     	;# 
  5304  0498                     	;# 
  5305  0499                     	;# 
  5306  049A                     	;# 
  5307  049B                     	;# 
  5308  049C                     	;# 
  5309  049D                     	;# 
  5310  050C                     	;# 
  5311  050C                     	;# 
  5312  050D                     	;# 
  5313  050E                     	;# 
  5314  050F                     	;# 
  5315  050F                     	;# 
  5316  0510                     	;# 
  5317  0511                     	;# 
  5318  0512                     	;# 
  5319  0512                     	;# 
  5320  0513                     	;# 
  5321  0514                     	;# 
  5322  0515                     	;# 
  5323  0515                     	;# 
  5324  0516                     	;# 
  5325  0517                     	;# 
  5326  0518                     	;# 
  5327  0519                     	;# 
  5328  051A                     	;# 
  5329  051B                     	;# 
  5330  051C                     	;# 
  5331  051D                     	;# 
  5332  058C                     	;# 
  5333  058C                     	;# 
  5334  058D                     	;# 
  5335  058E                     	;# 
  5336  058F                     	;# 
  5337  058F                     	;# 
  5338  0590                     	;# 
  5339  0591                     	;# 
  5340  0592                     	;# 
  5341  0593                     	;# 
  5342  060C                     	;# 
  5343  060D                     	;# 
  5344  060E                     	;# 
  5345  060F                     	;# 
  5346  0610                     	;# 
  5347  0611                     	;# 
  5348  0612                     	;# 
  5349  0613                     	;# 
  5350  0614                     	;# 
  5351  0616                     	;# 
  5352  0617                     	;# 
  5353  0618                     	;# 
  5354  0619                     	;# 
  5355  061A                     	;# 
  5356  061B                     	;# 
  5357  061C                     	;# 
  5358  061D                     	;# 
  5359  061E                     	;# 
  5360  068C                     	;# 
  5361  068D                     	;# 
  5362  068E                     	;# 
  5363  068F                     	;# 
  5364  0690                     	;# 
  5365  0691                     	;# 
  5366  0692                     	;# 
  5367  0693                     	;# 
  5368  0694                     	;# 
  5369  070C                     	;# 
  5370  070D                     	;# 
  5371  070E                     	;# 
  5372  070F                     	;# 
  5373  0710                     	;# 
  5374  0711                     	;# 
  5375  0712                     	;# 
  5376  0713                     	;# 
  5377  0714                     	;# 
  5378  0716                     	;# 
  5379  0717                     	;# 
  5380  0718                     	;# 
  5381  0719                     	;# 
  5382  071A                     	;# 
  5383  071B                     	;# 
  5384  071C                     	;# 
  5385  071D                     	;# 
  5386  071E                     	;# 
  5387  0796                     	;# 
  5388  0797                     	;# 
  5389  0798                     	;# 
  5390  0799                     	;# 
  5391  079A                     	;# 
  5392  079B                     	;# 
  5393  080C                     	;# 
  5394  080D                     	;# 
  5395  080E                     	;# 
  5396  080F                     	;# 
  5397  0810                     	;# 
  5398  0811                     	;# 
  5399  0812                     	;# 
  5400  0813                     	;# 
  5401  0814                     	;# 
  5402  081A                     	;# 
  5403  081B                     	;# 
  5404  081C                     	;# 
  5405  081D                     	;# 
  5406  081E                     	;# 
  5407  081F                     	;# 
  5408  088C                     	;# 
  5409  088D                     	;# 
  5410  088E                     	;# 
  5411  088F                     	;# 
  5412  0890                     	;# 
  5413  0891                     	;# 
  5414  0892                     	;# 
  5415  0893                     	;# 
  5416  0895                     	;# 
  5417  0896                     	;# 
  5418  0897                     	;# 
  5419  0898                     	;# 
  5420  0899                     	;# 
  5421  089A                     	;# 
  5422  089B                     	;# 
  5423  090C                     	;# 
  5424  090E                     	;# 
  5425  090F                     	;# 
  5426  091F                     	;# 
  5427  091F                     	;# 
  5428  098F                     	;# 
  5429  098F                     	;# 
  5430  0990                     	;# 
  5431  0991                     	;# 
  5432  0992                     	;# 
  5433  0993                     	;# 
  5434  0994                     	;# 
  5435  0995                     	;# 
  5436  0996                     	;# 
  5437  0997                     	;# 
  5438  0E0F                     	;# 
  5439  0E10                     	;# 
  5440  0E11                     	;# 
  5441  0E12                     	;# 
  5442  0E13                     	;# 
  5443  0E14                     	;# 
  5444  0E15                     	;# 
  5445  0E16                     	;# 
  5446  0E17                     	;# 
  5447  0E18                     	;# 
  5448  0E19                     	;# 
  5449  0E1A                     	;# 
  5450  0E1B                     	;# 
  5451  0E1C                     	;# 
  5452  0E1D                     	;# 
  5453  0E1E                     	;# 
  5454  0E1F                     	;# 
  5455  0E20                     	;# 
  5456  0E21                     	;# 
  5457  0E22                     	;# 
  5458  0E23                     	;# 
  5459  0E24                     	;# 
  5460  0E25                     	;# 
  5461  0E26                     	;# 
  5462  0E27                     	;# 
  5463  0E28                     	;# 
  5464  0E29                     	;# 
  5465  0E2A                     	;# 
  5466  0E2B                     	;# 
  5467  0E2C                     	;# 
  5468  0E2D                     	;# 
  5469  0E2E                     	;# 
  5470  0E2F                     	;# 
  5471  0E30                     	;# 
  5472  0E31                     	;# 
  5473  0E32                     	;# 
  5474  0E33                     	;# 
  5475  0E34                     	;# 
  5476  0E35                     	;# 
  5477  0E36                     	;# 
  5478  0E37                     	;# 
  5479  0E8F                     	;# 
  5480  0E90                     	;# 
  5481  0E91                     	;# 
  5482  0E92                     	;# 
  5483  0E93                     	;# 
  5484  0E94                     	;# 
  5485  0E95                     	;# 
  5486  0E96                     	;# 
  5487  0E97                     	;# 
  5488  0E9C                     	;# 
  5489  0E9D                     	;# 
  5490  0E9E                     	;# 
  5491  0EA1                     	;# 
  5492  0EA2                     	;# 
  5493  0EA3                     	;# 
  5494  0EA4                     	;# 
  5495  0EA5                     	;# 
  5496  0EA9                     	;# 
  5497  0EAA                     	;# 
  5498  0EAB                     	;# 
  5499  0EAC                     	;# 
  5500  0EB1                     	;# 
  5501  0EB2                     	;# 
  5502  0EB3                     	;# 
  5503  0EB8                     	;# 
  5504  0EB9                     	;# 
  5505  0EBA                     	;# 
  5506  0EBB                     	;# 
  5507  0EBC                     	;# 
  5508  0EBD                     	;# 
  5509  0EBE                     	;# 
  5510  0EC3                     	;# 
  5511  0EC5                     	;# 
  5512  0EC6                     	;# 
  5513  0EC7                     	;# 
  5514  0EC8                     	;# 
  5515  0EC9                     	;# 
  5516  0ECA                     	;# 
  5517  0ECB                     	;# 
  5518  0ECC                     	;# 
  5519  0F10                     	;# 
  5520  0F11                     	;# 
  5521  0F12                     	;# 
  5522  0F13                     	;# 
  5523  0F14                     	;# 
  5524  0F15                     	;# 
  5525  0F16                     	;# 
  5526  0F17                     	;# 
  5527  0F18                     	;# 
  5528  0F19                     	;# 
  5529  0F1A                     	;# 
  5530  0F1B                     	;# 
  5531  0F1C                     	;# 
  5532  0F1D                     	;# 
  5533  0F1E                     	;# 
  5534  0F1F                     	;# 
  5535  0F20                     	;# 
  5536  0F21                     	;# 
  5537  0F22                     	;# 
  5538  0F23                     	;# 
  5539  0F24                     	;# 
  5540  0F25                     	;# 
  5541  0F26                     	;# 
  5542  0F27                     	;# 
  5543  0F28                     	;# 
  5544  0F29                     	;# 
  5545  0F2A                     	;# 
  5546  0F2B                     	;# 
  5547  0F2C                     	;# 
  5548  0F2D                     	;# 
  5549  0F2E                     	;# 
  5550  0F2F                     	;# 
  5551  0F30                     	;# 
  5552  0F31                     	;# 
  5553  0F32                     	;# 
  5554  0F38                     	;# 
  5555  0F39                     	;# 
  5556  0F3A                     	;# 
  5557  0F3B                     	;# 
  5558  0F3C                     	;# 
  5559  0F3D                     	;# 
  5560  0F3E                     	;# 
  5561  0F3F                     	;# 
  5562  0F40                     	;# 
  5563  0F41                     	;# 
  5564  0F43                     	;# 
  5565  0F44                     	;# 
  5566  0F45                     	;# 
  5567  0F46                     	;# 
  5568  0F47                     	;# 
  5569  0F48                     	;# 
  5570  0F49                     	;# 
  5571  0F4A                     	;# 
  5572  0F4B                     	;# 
  5573  0F4C                     	;# 
  5574  0F4E                     	;# 
  5575  0F4F                     	;# 
  5576  0F50                     	;# 
  5577  0F51                     	;# 
  5578  0F52                     	;# 
  5579  0F53                     	;# 
  5580  0F54                     	;# 
  5581  0F55                     	;# 
  5582  0F56                     	;# 
  5583  0F57                     	;# 
  5584  0F59                     	;# 
  5585  0F5A                     	;# 
  5586  0F5B                     	;# 
  5587  0F5C                     	;# 
  5588  0F5D                     	;# 
  5589  0F61                     	;# 
  5590  0F62                     	;# 
  5591  0F64                     	;# 
  5592  0F65                     	;# 
  5593  0F66                     	;# 
  5594  0F67                     	;# 
  5595  0F68                     	;# 
  5596  0F69                     	;# 
  5597  0F6A                     	;# 
  5598  0F6B                     	;# 
  5599  0F6C                     	;# 
  5600  0F6D                     	;# 
  5601  0FE4                     	;# 
  5602  0FE5                     	;# 
  5603  0FE6                     	;# 
  5604  0FE7                     	;# 
  5605  0FE8                     	;# 
  5606  0FE9                     	;# 
  5607  0FEA                     	;# 
  5608  0FEB                     	;# 
  5609  0FED                     	;# 
  5610  0FEE                     	;# 
  5611  0FEF                     	;# 
  5612  0000                     	;# 
  5613  0001                     	;# 
  5614  0002                     	;# 
  5615  0003                     	;# 
  5616  0004                     	;# 
  5617  0005                     	;# 
  5618  0006                     	;# 
  5619  0007                     	;# 
  5620  0008                     	;# 
  5621  0009                     	;# 
  5622  000A                     	;# 
  5623  000B                     	;# 
  5624  000C                     	;# 
  5625  000D                     	;# 
  5626  000E                     	;# 
  5627  000F                     	;# 
  5628  0010                     	;# 
  5629  0011                     	;# 
  5630  0012                     	;# 
  5631  0013                     	;# 
  5632  0014                     	;# 
  5633  0015                     	;# 
  5634  0016                     	;# 
  5635  0017                     	;# 
  5636  0018                     	;# 
  5637  0019                     	;# 
  5638  001A                     	;# 
  5639  001C                     	;# 
  5640  001C                     	;# 
  5641  001D                     	;# 
  5642  001D                     	;# 
  5643  001E                     	;# 
  5644  001F                     	;# 
  5645  008C                     	;# 
  5646  008C                     	;# 
  5647  008D                     	;# 
  5648  008E                     	;# 
  5649  008E                     	;# 
  5650  008F                     	;# 
  5651  0090                     	;# 
  5652  0090                     	;# 
  5653  0091                     	;# 
  5654  0093                     	;# 
  5655  0094                     	;# 
  5656  0095                     	;# 
  5657  0096                     	;# 
  5658  0097                     	;# 
  5659  0098                     	;# 
  5660  0099                     	;# 
  5661  009A                     	;# 
  5662  009B                     	;# 
  5663  009C                     	;# 
  5664  009D                     	;# 
  5665  009E                     	;# 
  5666  010C                     	;# 
  5667  010D                     	;# 
  5668  010E                     	;# 
  5669  010E                     	;# 
  5670  010F                     	;# 
  5671  0110                     	;# 
  5672  0110                     	;# 
  5673  0111                     	;# 
  5674  0112                     	;# 
  5675  0112                     	;# 
  5676  0113                     	;# 
  5677  0114                     	;# 
  5678  0114                     	;# 
  5679  0115                     	;# 
  5680  0116                     	;# 
  5681  0116                     	;# 
  5682  0117                     	;# 
  5683  0119                     	;# 
  5684  0119                     	;# 
  5685  0119                     	;# 
  5686  011A                     	;# 
  5687  011A                     	;# 
  5688  011A                     	;# 
  5689  011B                     	;# 
  5690  011B                     	;# 
  5691  011B                     	;# 
  5692  011B                     	;# 
  5693  011B                     	;# 
  5694  011C                     	;# 
  5695  011C                     	;# 
  5696  011C                     	;# 
  5697  011D                     	;# 
  5698  011D                     	;# 
  5699  011D                     	;# 
  5700  011E                     	;# 
  5701  011E                     	;# 
  5702  011E                     	;# 
  5703  011F                     	;# 
  5704  011F                     	;# 
  5705  011F                     	;# 
  5706  011F                     	;# 
  5707  011F                     	;# 
  5708  018C                     	;# 
  5709  018D                     	;# 
  5710  018E                     	;# 
  5711  018F                     	;# 
  5712  0190                     	;# 
  5713  0191                     	;# 
  5714  0192                     	;# 
  5715  0196                     	;# 
  5716  0197                     	;# 
  5717  0198                     	;# 
  5718  0199                     	;# 
  5719  019A                     	;# 
  5720  019B                     	;# 
  5721  019C                     	;# 
  5722  020C                     	;# 
  5723  020C                     	;# 
  5724  020D                     	;# 
  5725  020E                     	;# 
  5726  020F                     	;# 
  5727  020F                     	;# 
  5728  0210                     	;# 
  5729  0210                     	;# 
  5730  0211                     	;# 
  5731  0211                     	;# 
  5732  0212                     	;# 
  5733  0212                     	;# 
  5734  0213                     	;# 
  5735  0214                     	;# 
  5736  0215                     	;# 
  5737  0215                     	;# 
  5738  0216                     	;# 
  5739  0216                     	;# 
  5740  0217                     	;# 
  5741  0217                     	;# 
  5742  0218                     	;# 
  5743  0218                     	;# 
  5744  0219                     	;# 
  5745  021A                     	;# 
  5746  021B                     	;# 
  5747  021B                     	;# 
  5748  021C                     	;# 
  5749  021C                     	;# 
  5750  021D                     	;# 
  5751  021D                     	;# 
  5752  021E                     	;# 
  5753  021F                     	;# 
  5754  028C                     	;# 
  5755  028C                     	;# 
  5756  028D                     	;# 
  5757  028D                     	;# 
  5758  028E                     	;# 
  5759  028F                     	;# 
  5760  0290                     	;# 
  5761  0290                     	;# 
  5762  0291                     	;# 
  5763  0292                     	;# 
  5764  0292                     	;# 
  5765  0293                     	;# 
  5766  0293                     	;# 
  5767  0294                     	;# 
  5768  0295                     	;# 
  5769  0296                     	;# 
  5770  0296                     	;# 
  5771  0297                     	;# 
  5772  0298                     	;# 
  5773  0298                     	;# 
  5774  0299                     	;# 
  5775  0299                     	;# 
  5776  029A                     	;# 
  5777  029B                     	;# 
  5778  029C                     	;# 
  5779  029C                     	;# 
  5780  029D                     	;# 
  5781  030C                     	;# 
  5782  030C                     	;# 
  5783  030D                     	;# 
  5784  030E                     	;# 
  5785  030F                     	;# 
  5786  0310                     	;# 
  5787  0310                     	;# 
  5788  0311                     	;# 
  5789  0312                     	;# 
  5790  0313                     	;# 
  5791  0314                     	;# 
  5792  0314                     	;# 
  5793  0315                     	;# 
  5794  0316                     	;# 
  5795  0317                     	;# 
  5796  0318                     	;# 
  5797  0318                     	;# 
  5798  0319                     	;# 
  5799  031A                     	;# 
  5800  031B                     	;# 
  5801  031C                     	;# 
  5802  031C                     	;# 
  5803  031D                     	;# 
  5804  031E                     	;# 
  5805  031F                     	;# 
  5806  038C                     	;# 
  5807  038C                     	;# 
  5808  038D                     	;# 
  5809  038E                     	;# 
  5810  0390                     	;# 
  5811  0390                     	;# 
  5812  0391                     	;# 
  5813  0392                     	;# 
  5814  040C                     	;# 
  5815  040D                     	;# 
  5816  040E                     	;# 
  5817  040F                     	;# 
  5818  0410                     	;# 
  5819  0411                     	;# 
  5820  0416                     	;# 
  5821  0416                     	;# 
  5822  0417                     	;# 
  5823  0418                     	;# 
  5824  0418                     	;# 
  5825  0419                     	;# 
  5826  041A                     	;# 
  5827  041A                     	;# 
  5828  041B                     	;# 
  5829  041C                     	;# 
  5830  041C                     	;# 
  5831  041D                     	;# 
  5832  041E                     	;# 
  5833  041F                     	;# 
  5834  048C                     	;# 
  5835  048C                     	;# 
  5836  048D                     	;# 
  5837  048E                     	;# 
  5838  048F                     	;# 
  5839  048F                     	;# 
  5840  0490                     	;# 
  5841  0491                     	;# 
  5842  0492                     	;# 
  5843  0492                     	;# 
  5844  0493                     	;# 
  5845  0494                     	;# 
  5846  0495                     	;# 
  5847  0495                     	;# 
  5848  0496                     	;# 
  5849  0497                     	;# 
  5850  0498                     	;# 
  5851  0499                     	;# 
  5852  049A                     	;# 
  5853  049B                     	;# 
  5854  049C                     	;# 
  5855  049D                     	;# 
  5856  050C                     	;# 
  5857  050C                     	;# 
  5858  050D                     	;# 
  5859  050E                     	;# 
  5860  050F                     	;# 
  5861  050F                     	;# 
  5862  0510                     	;# 
  5863  0511                     	;# 
  5864  0512                     	;# 
  5865  0512                     	;# 
  5866  0513                     	;# 
  5867  0514                     	;# 
  5868  0515                     	;# 
  5869  0515                     	;# 
  5870  0516                     	;# 
  5871  0517                     	;# 
  5872  0518                     	;# 
  5873  0519                     	;# 
  5874  051A                     	;# 
  5875  051B                     	;# 
  5876  051C                     	;# 
  5877  051D                     	;# 
  5878  058C                     	;# 
  5879  058C                     	;# 
  5880  058D                     	;# 
  5881  058E                     	;# 
  5882  058F                     	;# 
  5883  058F                     	;# 
  5884  0590                     	;# 
  5885  0591                     	;# 
  5886  0592                     	;# 
  5887  0593                     	;# 
  5888  060C                     	;# 
  5889  060D                     	;# 
  5890  060E                     	;# 
  5891  060F                     	;# 
  5892  0610                     	;# 
  5893  0611                     	;# 
  5894  0612                     	;# 
  5895  0613                     	;# 
  5896  0614                     	;# 
  5897  0616                     	;# 
  5898  0617                     	;# 
  5899  0618                     	;# 
  5900  0619                     	;# 
  5901  061A                     	;# 
  5902  061B                     	;# 
  5903  061C                     	;# 
  5904  061D                     	;# 
  5905  061E                     	;# 
  5906  068C                     	;# 
  5907  068D                     	;# 
  5908  068E                     	;# 
  5909  068F                     	;# 
  5910  0690                     	;# 
  5911  0691                     	;# 
  5912  0692                     	;# 
  5913  0693                     	;# 
  5914  0694                     	;# 
  5915  070C                     	;# 
  5916  070D                     	;# 
  5917  070E                     	;# 
  5918  070F                     	;# 
  5919  0710                     	;# 
  5920  0711                     	;# 
  5921  0712                     	;# 
  5922  0713                     	;# 
  5923  0714                     	;# 
  5924  0716                     	;# 
  5925  0717                     	;# 
  5926  0718                     	;# 
  5927  0719                     	;# 
  5928  071A                     	;# 
  5929  071B                     	;# 
  5930  071C                     	;# 
  5931  071D                     	;# 
  5932  071E                     	;# 
  5933  0796                     	;# 
  5934  0797                     	;# 
  5935  0798                     	;# 
  5936  0799                     	;# 
  5937  079A                     	;# 
  5938  079B                     	;# 
  5939  080C                     	;# 
  5940  080D                     	;# 
  5941  080E                     	;# 
  5942  080F                     	;# 
  5943  0810                     	;# 
  5944  0811                     	;# 
  5945  0812                     	;# 
  5946  0813                     	;# 
  5947  0814                     	;# 
  5948  081A                     	;# 
  5949  081B                     	;# 
  5950  081C                     	;# 
  5951  081D                     	;# 
  5952  081E                     	;# 
  5953  081F                     	;# 
  5954  088C                     	;# 
  5955  088D                     	;# 
  5956  088E                     	;# 
  5957  088F                     	;# 
  5958  0890                     	;# 
  5959  0891                     	;# 
  5960  0892                     	;# 
  5961  0893                     	;# 
  5962  0895                     	;# 
  5963  0896                     	;# 
  5964  0897                     	;# 
  5965  0898                     	;# 
  5966  0899                     	;# 
  5967  089A                     	;# 
  5968  089B                     	;# 
  5969  090C                     	;# 
  5970  090E                     	;# 
  5971  090F                     	;# 
  5972  091F                     	;# 
  5973  091F                     	;# 
  5974  098F                     	;# 
  5975  098F                     	;# 
  5976  0990                     	;# 
  5977  0991                     	;# 
  5978  0992                     	;# 
  5979  0993                     	;# 
  5980  0994                     	;# 
  5981  0995                     	;# 
  5982  0996                     	;# 
  5983  0997                     	;# 
  5984  0E0F                     	;# 
  5985  0E10                     	;# 
  5986  0E11                     	;# 
  5987  0E12                     	;# 
  5988  0E13                     	;# 
  5989  0E14                     	;# 
  5990  0E15                     	;# 
  5991  0E16                     	;# 
  5992  0E17                     	;# 
  5993  0E18                     	;# 
  5994  0E19                     	;# 
  5995  0E1A                     	;# 
  5996  0E1B                     	;# 
  5997  0E1C                     	;# 
  5998  0E1D                     	;# 
  5999  0E1E                     	;# 
  6000  0E1F                     	;# 
  6001  0E20                     	;# 
  6002  0E21                     	;# 
  6003  0E22                     	;# 
  6004  0E23                     	;# 
  6005  0E24                     	;# 
  6006  0E25                     	;# 
  6007  0E26                     	;# 
  6008  0E27                     	;# 
  6009  0E28                     	;# 
  6010  0E29                     	;# 
  6011  0E2A                     	;# 
  6012  0E2B                     	;# 
  6013  0E2C                     	;# 
  6014  0E2D                     	;# 
  6015  0E2E                     	;# 
  6016  0E2F                     	;# 
  6017  0E30                     	;# 
  6018  0E31                     	;# 
  6019  0E32                     	;# 
  6020  0E33                     	;# 
  6021  0E34                     	;# 
  6022  0E35                     	;# 
  6023  0E36                     	;# 
  6024  0E37                     	;# 
  6025  0E8F                     	;# 
  6026  0E90                     	;# 
  6027  0E91                     	;# 
  6028  0E92                     	;# 
  6029  0E93                     	;# 
  6030  0E94                     	;# 
  6031  0E95                     	;# 
  6032  0E96                     	;# 
  6033  0E97                     	;# 
  6034  0E9C                     	;# 
  6035  0E9D                     	;# 
  6036  0E9E                     	;# 
  6037  0EA1                     	;# 
  6038  0EA2                     	;# 
  6039  0EA3                     	;# 
  6040  0EA4                     	;# 
  6041  0EA5                     	;# 
  6042  0EA9                     	;# 
  6043  0EAA                     	;# 
  6044  0EAB                     	;# 
  6045  0EAC                     	;# 
  6046  0EB1                     	;# 
  6047  0EB2                     	;# 
  6048  0EB3                     	;# 
  6049  0EB8                     	;# 
  6050  0EB9                     	;# 
  6051  0EBA                     	;# 
  6052  0EBB                     	;# 
  6053  0EBC                     	;# 
  6054  0EBD                     	;# 
  6055  0EBE                     	;# 
  6056  0EC3                     	;# 
  6057  0EC5                     	;# 
  6058  0EC6                     	;# 
  6059  0EC7                     	;# 
  6060  0EC8                     	;# 
  6061  0EC9                     	;# 
  6062  0ECA                     	;# 
  6063  0ECB                     	;# 
  6064  0ECC                     	;# 
  6065  0F10                     	;# 
  6066  0F11                     	;# 
  6067  0F12                     	;# 
  6068  0F13                     	;# 
  6069  0F14                     	;# 
  6070  0F15                     	;# 
  6071  0F16                     	;# 
  6072  0F17                     	;# 
  6073  0F18                     	;# 
  6074  0F19                     	;# 
  6075  0F1A                     	;# 
  6076  0F1B                     	;# 
  6077  0F1C                     	;# 
  6078  0F1D                     	;# 
  6079  0F1E                     	;# 
  6080  0F1F                     	;# 
  6081  0F20                     	;# 
  6082  0F21                     	;# 
  6083  0F22                     	;# 
  6084  0F23                     	;# 
  6085  0F24                     	;# 
  6086  0F25                     	;# 
  6087  0F26                     	;# 
  6088  0F27                     	;# 
  6089  0F28                     	;# 
  6090  0F29                     	;# 
  6091  0F2A                     	;# 
  6092  0F2B                     	;# 
  6093  0F2C                     	;# 
  6094  0F2D                     	;# 
  6095  0F2E                     	;# 
  6096  0F2F                     	;# 
  6097  0F30                     	;# 
  6098  0F31                     	;# 
  6099  0F32                     	;# 
  6100  0F38                     	;# 
  6101  0F39                     	;# 
  6102  0F3A                     	;# 
  6103  0F3B                     	;# 
  6104  0F3C                     	;# 
  6105  0F3D                     	;# 
  6106  0F3E                     	;# 
  6107  0F3F                     	;# 
  6108  0F40                     	;# 
  6109  0F41                     	;# 
  6110  0F43                     	;# 
  6111  0F44                     	;# 
  6112  0F45                     	;# 
  6113  0F46                     	;# 
  6114  0F47                     	;# 
  6115  0F48                     	;# 
  6116  0F49                     	;# 
  6117  0F4A                     	;# 
  6118  0F4B                     	;# 
  6119  0F4C                     	;# 
  6120  0F4E                     	;# 
  6121  0F4F                     	;# 
  6122  0F50                     	;# 
  6123  0F51                     	;# 
  6124  0F52                     	;# 
  6125  0F53                     	;# 
  6126  0F54                     	;# 
  6127  0F55                     	;# 
  6128  0F56                     	;# 
  6129  0F57                     	;# 
  6130  0F59                     	;# 
  6131  0F5A                     	;# 
  6132  0F5B                     	;# 
  6133  0F5C                     	;# 
  6134  0F5D                     	;# 
  6135  0F61                     	;# 
  6136  0F62                     	;# 
  6137  0F64                     	;# 
  6138  0F65                     	;# 
  6139  0F66                     	;# 
  6140  0F67                     	;# 
  6141  0F68                     	;# 
  6142  0F69                     	;# 
  6143  0F6A                     	;# 
  6144  0F6B                     	;# 
  6145  0F6C                     	;# 
  6146  0F6D                     	;# 
  6147  0FE4                     	;# 
  6148  0FE5                     	;# 
  6149  0FE6                     	;# 
  6150  0FE7                     	;# 
  6151  0FE8                     	;# 
  6152  0FE9                     	;# 
  6153  0FEA                     	;# 
  6154  0FEB                     	;# 
  6155  0FED                     	;# 
  6156  0FEE                     	;# 
  6157  0FEF                     	;# 
  6158  0000                     	;# 
  6159  0001                     	;# 
  6160  0002                     	;# 
  6161  0003                     	;# 
  6162  0004                     	;# 
  6163  0005                     	;# 
  6164  0006                     	;# 
  6165  0007                     	;# 
  6166  0008                     	;# 
  6167  0009                     	;# 
  6168  000A                     	;# 
  6169  000B                     	;# 
  6170  000C                     	;# 
  6171  000D                     	;# 
  6172  000E                     	;# 
  6173  000F                     	;# 
  6174  0010                     	;# 
  6175  0011                     	;# 
  6176  0012                     	;# 
  6177  0013                     	;# 
  6178  0014                     	;# 
  6179  0015                     	;# 
  6180  0016                     	;# 
  6181  0017                     	;# 
  6182  0018                     	;# 
  6183  0019                     	;# 
  6184  001A                     	;# 
  6185  001C                     	;# 
  6186  001C                     	;# 
  6187  001D                     	;# 
  6188  001D                     	;# 
  6189  001E                     	;# 
  6190  001F                     	;# 
  6191  008C                     	;# 
  6192  008C                     	;# 
  6193  008D                     	;# 
  6194  008E                     	;# 
  6195  008E                     	;# 
  6196  008F                     	;# 
  6197  0090                     	;# 
  6198  0090                     	;# 
  6199  0091                     	;# 
  6200  0093                     	;# 
  6201  0094                     	;# 
  6202  0095                     	;# 
  6203  0096                     	;# 
  6204  0097                     	;# 
  6205  0098                     	;# 
  6206  0099                     	;# 
  6207  009A                     	;# 
  6208  009B                     	;# 
  6209  009C                     	;# 
  6210  009D                     	;# 
  6211  009E                     	;# 
  6212  010C                     	;# 
  6213  010D                     	;# 
  6214  010E                     	;# 
  6215  010E                     	;# 
  6216  010F                     	;# 
  6217  0110                     	;# 
  6218  0110                     	;# 
  6219  0111                     	;# 
  6220  0112                     	;# 
  6221  0112                     	;# 
  6222  0113                     	;# 
  6223  0114                     	;# 
  6224  0114                     	;# 
  6225  0115                     	;# 
  6226  0116                     	;# 
  6227  0116                     	;# 
  6228  0117                     	;# 
  6229  0119                     	;# 
  6230  0119                     	;# 
  6231  0119                     	;# 
  6232  011A                     	;# 
  6233  011A                     	;# 
  6234  011A                     	;# 
  6235  011B                     	;# 
  6236  011B                     	;# 
  6237  011B                     	;# 
  6238  011B                     	;# 
  6239  011B                     	;# 
  6240  011C                     	;# 
  6241  011C                     	;# 
  6242  011C                     	;# 
  6243  011D                     	;# 
  6244  011D                     	;# 
  6245  011D                     	;# 
  6246  011E                     	;# 
  6247  011E                     	;# 
  6248  011E                     	;# 
  6249  011F                     	;# 
  6250  011F                     	;# 
  6251  011F                     	;# 
  6252  011F                     	;# 
  6253  011F                     	;# 
  6254  018C                     	;# 
  6255  018D                     	;# 
  6256  018E                     	;# 
  6257  018F                     	;# 
  6258  0190                     	;# 
  6259  0191                     	;# 
  6260  0192                     	;# 
  6261  0196                     	;# 
  6262  0197                     	;# 
  6263  0198                     	;# 
  6264  0199                     	;# 
  6265  019A                     	;# 
  6266  019B                     	;# 
  6267  019C                     	;# 
  6268  020C                     	;# 
  6269  020C                     	;# 
  6270  020D                     	;# 
  6271  020E                     	;# 
  6272  020F                     	;# 
  6273  020F                     	;# 
  6274  0210                     	;# 
  6275  0210                     	;# 
  6276  0211                     	;# 
  6277  0211                     	;# 
  6278  0212                     	;# 
  6279  0212                     	;# 
  6280  0213                     	;# 
  6281  0214                     	;# 
  6282  0215                     	;# 
  6283  0215                     	;# 
  6284  0216                     	;# 
  6285  0216                     	;# 
  6286  0217                     	;# 
  6287  0217                     	;# 
  6288  0218                     	;# 
  6289  0218                     	;# 
  6290  0219                     	;# 
  6291  021A                     	;# 
  6292  021B                     	;# 
  6293  021B                     	;# 
  6294  021C                     	;# 
  6295  021C                     	;# 
  6296  021D                     	;# 
  6297  021D                     	;# 
  6298  021E                     	;# 
  6299  021F                     	;# 
  6300  028C                     	;# 
  6301  028C                     	;# 
  6302  028D                     	;# 
  6303  028D                     	;# 
  6304  028E                     	;# 
  6305  028F                     	;# 
  6306  0290                     	;# 
  6307  0290                     	;# 
  6308  0291                     	;# 
  6309  0292                     	;# 
  6310  0292                     	;# 
  6311  0293                     	;# 
  6312  0293                     	;# 
  6313  0294                     	;# 
  6314  0295                     	;# 
  6315  0296                     	;# 
  6316  0296                     	;# 
  6317  0297                     	;# 
  6318  0298                     	;# 
  6319  0298                     	;# 
  6320  0299                     	;# 
  6321  0299                     	;# 
  6322  029A                     	;# 
  6323  029B                     	;# 
  6324  029C                     	;# 
  6325  029C                     	;# 
  6326  029D                     	;# 
  6327  030C                     	;# 
  6328  030C                     	;# 
  6329  030D                     	;# 
  6330  030E                     	;# 
  6331  030F                     	;# 
  6332  0310                     	;# 
  6333  0310                     	;# 
  6334  0311                     	;# 
  6335  0312                     	;# 
  6336  0313                     	;# 
  6337  0314                     	;# 
  6338  0314                     	;# 
  6339  0315                     	;# 
  6340  0316                     	;# 
  6341  0317                     	;# 
  6342  0318                     	;# 
  6343  0318                     	;# 
  6344  0319                     	;# 
  6345  031A                     	;# 
  6346  031B                     	;# 
  6347  031C                     	;# 
  6348  031C                     	;# 
  6349  031D                     	;# 
  6350  031E                     	;# 
  6351  031F                     	;# 
  6352  038C                     	;# 
  6353  038C                     	;# 
  6354  038D                     	;# 
  6355  038E                     	;# 
  6356  0390                     	;# 
  6357  0390                     	;# 
  6358  0391                     	;# 
  6359  0392                     	;# 
  6360  040C                     	;# 
  6361  040D                     	;# 
  6362  040E                     	;# 
  6363  040F                     	;# 
  6364  0410                     	;# 
  6365  0411                     	;# 
  6366  0416                     	;# 
  6367  0416                     	;# 
  6368  0417                     	;# 
  6369  0418                     	;# 
  6370  0418                     	;# 
  6371  0419                     	;# 
  6372  041A                     	;# 
  6373  041A                     	;# 
  6374  041B                     	;# 
  6375  041C                     	;# 
  6376  041C                     	;# 
  6377  041D                     	;# 
  6378  041E                     	;# 
  6379  041F                     	;# 
  6380  048C                     	;# 
  6381  048C                     	;# 
  6382  048D                     	;# 
  6383  048E                     	;# 
  6384  048F                     	;# 
  6385  048F                     	;# 
  6386  0490                     	;# 
  6387  0491                     	;# 
  6388  0492                     	;# 
  6389  0492                     	;# 
  6390  0493                     	;# 
  6391  0494                     	;# 
  6392  0495                     	;# 
  6393  0495                     	;# 
  6394  0496                     	;# 
  6395  0497                     	;# 
  6396  0498                     	;# 
  6397  0499                     	;# 
  6398  049A                     	;# 
  6399  049B                     	;# 
  6400  049C                     	;# 
  6401  049D                     	;# 
  6402  050C                     	;# 
  6403  050C                     	;# 
  6404  050D                     	;# 
  6405  050E                     	;# 
  6406  050F                     	;# 
  6407  050F                     	;# 
  6408  0510                     	;# 
  6409  0511                     	;# 
  6410  0512                     	;# 
  6411  0512                     	;# 
  6412  0513                     	;# 
  6413  0514                     	;# 
  6414  0515                     	;# 
  6415  0515                     	;# 
  6416  0516                     	;# 
  6417  0517                     	;# 
  6418  0518                     	;# 
  6419  0519                     	;# 
  6420  051A                     	;# 
  6421  051B                     	;# 
  6422  051C                     	;# 
  6423  051D                     	;# 
  6424  058C                     	;# 
  6425  058C                     	;# 
  6426  058D                     	;# 
  6427  058E                     	;# 
  6428  058F                     	;# 
  6429  058F                     	;# 
  6430  0590                     	;# 
  6431  0591                     	;# 
  6432  0592                     	;# 
  6433  0593                     	;# 
  6434  060C                     	;# 
  6435  060D                     	;# 
  6436  060E                     	;# 
  6437  060F                     	;# 
  6438  0610                     	;# 
  6439  0611                     	;# 
  6440  0612                     	;# 
  6441  0613                     	;# 
  6442  0614                     	;# 
  6443  0616                     	;# 
  6444  0617                     	;# 
  6445  0618                     	;# 
  6446  0619                     	;# 
  6447  061A                     	;# 
  6448  061B                     	;# 
  6449  061C                     	;# 
  6450  061D                     	;# 
  6451  061E                     	;# 
  6452  068C                     	;# 
  6453  068D                     	;# 
  6454  068E                     	;# 
  6455  068F                     	;# 
  6456  0690                     	;# 
  6457  0691                     	;# 
  6458  0692                     	;# 
  6459  0693                     	;# 
  6460  0694                     	;# 
  6461  070C                     	;# 
  6462  070D                     	;# 
  6463  070E                     	;# 
  6464  070F                     	;# 
  6465  0710                     	;# 
  6466  0711                     	;# 
  6467  0712                     	;# 
  6468  0713                     	;# 
  6469  0714                     	;# 
  6470  0716                     	;# 
  6471  0717                     	;# 
  6472  0718                     	;# 
  6473  0719                     	;# 
  6474  071A                     	;# 
  6475  071B                     	;# 
  6476  071C                     	;# 
  6477  071D                     	;# 
  6478  071E                     	;# 
  6479  0796                     	;# 
  6480  0797                     	;# 
  6481  0798                     	;# 
  6482  0799                     	;# 
  6483  079A                     	;# 
  6484  079B                     	;# 
  6485  080C                     	;# 
  6486  080D                     	;# 
  6487  080E                     	;# 
  6488  080F                     	;# 
  6489  0810                     	;# 
  6490  0811                     	;# 
  6491  0812                     	;# 
  6492  0813                     	;# 
  6493  0814                     	;# 
  6494  081A                     	;# 
  6495  081B                     	;# 
  6496  081C                     	;# 
  6497  081D                     	;# 
  6498  081E                     	;# 
  6499  081F                     	;# 
  6500  088C                     	;# 
  6501  088D                     	;# 
  6502  088E                     	;# 
  6503  088F                     	;# 
  6504  0890                     	;# 
  6505  0891                     	;# 
  6506  0892                     	;# 
  6507  0893                     	;# 
  6508  0895                     	;# 
  6509  0896                     	;# 
  6510  0897                     	;# 
  6511  0898                     	;# 
  6512  0899                     	;# 
  6513  089A                     	;# 
  6514  089B                     	;# 
  6515  090C                     	;# 
  6516  090E                     	;# 
  6517  090F                     	;# 
  6518  091F                     	;# 
  6519  091F                     	;# 
  6520  098F                     	;# 
  6521  098F                     	;# 
  6522  0990                     	;# 
  6523  0991                     	;# 
  6524  0992                     	;# 
  6525  0993                     	;# 
  6526  0994                     	;# 
  6527  0995                     	;# 
  6528  0996                     	;# 
  6529  0997                     	;# 
  6530  0E0F                     	;# 
  6531  0E10                     	;# 
  6532  0E11                     	;# 
  6533  0E12                     	;# 
  6534  0E13                     	;# 
  6535  0E14                     	;# 
  6536  0E15                     	;# 
  6537  0E16                     	;# 
  6538  0E17                     	;# 
  6539  0E18                     	;# 
  6540  0E19                     	;# 
  6541  0E1A                     	;# 
  6542  0E1B                     	;# 
  6543  0E1C                     	;# 
  6544  0E1D                     	;# 
  6545  0E1E                     	;# 
  6546  0E1F                     	;# 
  6547  0E20                     	;# 
  6548  0E21                     	;# 
  6549  0E22                     	;# 
  6550  0E23                     	;# 
  6551  0E24                     	;# 
  6552  0E25                     	;# 
  6553  0E26                     	;# 
  6554  0E27                     	;# 
  6555  0E28                     	;# 
  6556  0E29                     	;# 
  6557  0E2A                     	;# 
  6558  0E2B                     	;# 
  6559  0E2C                     	;# 
  6560  0E2D                     	;# 
  6561  0E2E                     	;# 
  6562  0E2F                     	;# 
  6563  0E30                     	;# 
  6564  0E31                     	;# 
  6565  0E32                     	;# 
  6566  0E33                     	;# 
  6567  0E34                     	;# 
  6568  0E35                     	;# 
  6569  0E36                     	;# 
  6570  0E37                     	;# 
  6571  0E8F                     	;# 
  6572  0E90                     	;# 
  6573  0E91                     	;# 
  6574  0E92                     	;# 
  6575  0E93                     	;# 
  6576  0E94                     	;# 
  6577  0E95                     	;# 
  6578  0E96                     	;# 
  6579  0E97                     	;# 
  6580  0E9C                     	;# 
  6581  0E9D                     	;# 
  6582  0E9E                     	;# 
  6583  0EA1                     	;# 
  6584  0EA2                     	;# 
  6585  0EA3                     	;# 
  6586  0EA4                     	;# 
  6587  0EA5                     	;# 
  6588  0EA9                     	;# 
  6589  0EAA                     	;# 
  6590  0EAB                     	;# 
  6591  0EAC                     	;# 
  6592  0EB1                     	;# 
  6593  0EB2                     	;# 
  6594  0EB3                     	;# 
  6595  0EB8                     	;# 
  6596  0EB9                     	;# 
  6597  0EBA                     	;# 
  6598  0EBB                     	;# 
  6599  0EBC                     	;# 
  6600  0EBD                     	;# 
  6601  0EBE                     	;# 
  6602  0EC3                     	;# 
  6603  0EC5                     	;# 
  6604  0EC6                     	;# 
  6605  0EC7                     	;# 
  6606  0EC8                     	;# 
  6607  0EC9                     	;# 
  6608  0ECA                     	;# 
  6609  0ECB                     	;# 
  6610  0ECC                     	;# 
  6611  0F10                     	;# 
  6612  0F11                     	;# 
  6613  0F12                     	;# 
  6614  0F13                     	;# 
  6615  0F14                     	;# 
  6616  0F15                     	;# 
  6617  0F16                     	;# 
  6618  0F17                     	;# 
  6619  0F18                     	;# 
  6620  0F19                     	;# 
  6621  0F1A                     	;# 
  6622  0F1B                     	;# 
  6623  0F1C                     	;# 
  6624  0F1D                     	;# 
  6625  0F1E                     	;# 
  6626  0F1F                     	;# 
  6627  0F20                     	;# 
  6628  0F21                     	;# 
  6629  0F22                     	;# 
  6630  0F23                     	;# 
  6631  0F24                     	;# 
  6632  0F25                     	;# 
  6633  0F26                     	;# 
  6634  0F27                     	;# 
  6635  0F28                     	;# 
  6636  0F29                     	;# 
  6637  0F2A                     	;# 
  6638  0F2B                     	;# 
  6639  0F2C                     	;# 
  6640  0F2D                     	;# 
  6641  0F2E                     	;# 
  6642  0F2F                     	;# 
  6643  0F30                     	;# 
  6644  0F31                     	;# 
  6645  0F32                     	;# 
  6646  0F38                     	;# 
  6647  0F39                     	;# 
  6648  0F3A                     	;# 
  6649  0F3B                     	;# 
  6650  0F3C                     	;# 
  6651  0F3D                     	;# 
  6652  0F3E                     	;# 
  6653  0F3F                     	;# 
  6654  0F40                     	;# 
  6655  0F41                     	;# 
  6656  0F43                     	;# 
  6657  0F44                     	;# 
  6658  0F45                     	;# 
  6659  0F46                     	;# 
  6660  0F47                     	;# 
  6661  0F48                     	;# 
  6662  0F49                     	;# 
  6663  0F4A                     	;# 
  6664  0F4B                     	;# 
  6665  0F4C                     	;# 
  6666  0F4E                     	;# 
  6667  0F4F                     	;# 
  6668  0F50                     	;# 
  6669  0F51                     	;# 
  6670  0F52                     	;# 
  6671  0F53                     	;# 
  6672  0F54                     	;# 
  6673  0F55                     	;# 
  6674  0F56                     	;# 
  6675  0F57                     	;# 
  6676  0F59                     	;# 
  6677  0F5A                     	;# 
  6678  0F5B                     	;# 
  6679  0F5C                     	;# 
  6680  0F5D                     	;# 
  6681  0F61                     	;# 
  6682  0F62                     	;# 
  6683  0F64                     	;# 
  6684  0F65                     	;# 
  6685  0F66                     	;# 
  6686  0F67                     	;# 
  6687  0F68                     	;# 
  6688  0F69                     	;# 
  6689  0F6A                     	;# 
  6690  0F6B                     	;# 
  6691  0F6C                     	;# 
  6692  0F6D                     	;# 
  6693  0FE4                     	;# 
  6694  0FE5                     	;# 
  6695  0FE6                     	;# 
  6696  0FE7                     	;# 
  6697  0FE8                     	;# 
  6698  0FE9                     	;# 
  6699  0FEA                     	;# 
  6700  0FEB                     	;# 
  6701  0FED                     	;# 
  6702  0FEE                     	;# 
  6703  0FEF                     	;# 
  6704  0000                     	;# 
  6705  0001                     	;# 
  6706  0002                     	;# 
  6707  0003                     	;# 
  6708  0004                     	;# 
  6709  0005                     	;# 
  6710  0006                     	;# 
  6711  0007                     	;# 
  6712  0008                     	;# 
  6713  0009                     	;# 
  6714  000A                     	;# 
  6715  000B                     	;# 
  6716  000C                     	;# 
  6717  000D                     	;# 
  6718  000E                     	;# 
  6719  000F                     	;# 
  6720  0010                     	;# 
  6721  0011                     	;# 
  6722  0012                     	;# 
  6723  0013                     	;# 
  6724  0014                     	;# 
  6725  0015                     	;# 
  6726  0016                     	;# 
  6727  0017                     	;# 
  6728  0018                     	;# 
  6729  0019                     	;# 
  6730  001A                     	;# 
  6731  001C                     	;# 
  6732  001C                     	;# 
  6733  001D                     	;# 
  6734  001D                     	;# 
  6735  001E                     	;# 
  6736  001F                     	;# 
  6737  008C                     	;# 
  6738  008C                     	;# 
  6739  008D                     	;# 
  6740  008E                     	;# 
  6741  008E                     	;# 
  6742  008F                     	;# 
  6743  0090                     	;# 
  6744  0090                     	;# 
  6745  0091                     	;# 
  6746  0093                     	;# 
  6747  0094                     	;# 
  6748  0095                     	;# 
  6749  0096                     	;# 
  6750  0097                     	;# 
  6751  0098                     	;# 
  6752  0099                     	;# 
  6753  009A                     	;# 
  6754  009B                     	;# 
  6755  009C                     	;# 
  6756  009D                     	;# 
  6757  009E                     	;# 
  6758  010C                     	;# 
  6759  010D                     	;# 
  6760  010E                     	;# 
  6761  010E                     	;# 
  6762  010F                     	;# 
  6763  0110                     	;# 
  6764  0110                     	;# 
  6765  0111                     	;# 
  6766  0112                     	;# 
  6767  0112                     	;# 
  6768  0113                     	;# 
  6769  0114                     	;# 
  6770  0114                     	;# 
  6771  0115                     	;# 
  6772  0116                     	;# 
  6773  0116                     	;# 
  6774  0117                     	;# 
  6775  0119                     	;# 
  6776  0119                     	;# 
  6777  0119                     	;# 
  6778  011A                     	;# 
  6779  011A                     	;# 
  6780  011A                     	;# 
  6781  011B                     	;# 
  6782  011B                     	;# 
  6783  011B                     	;# 
  6784  011B                     	;# 
  6785  011B                     	;# 
  6786  011C                     	;# 
  6787  011C                     	;# 
  6788  011C                     	;# 
  6789  011D                     	;# 
  6790  011D                     	;# 
  6791  011D                     	;# 
  6792  011E                     	;# 
  6793  011E                     	;# 
  6794  011E                     	;# 
  6795  011F                     	;# 
  6796  011F                     	;# 
  6797  011F                     	;# 
  6798  011F                     	;# 
  6799  011F                     	;# 
  6800  018C                     	;# 
  6801  018D                     	;# 
  6802  018E                     	;# 
  6803  018F                     	;# 
  6804  0190                     	;# 
  6805  0191                     	;# 
  6806  0192                     	;# 
  6807  0196                     	;# 
  6808  0197                     	;# 
  6809  0198                     	;# 
  6810  0199                     	;# 
  6811  019A                     	;# 
  6812  019B                     	;# 
  6813  019C                     	;# 
  6814  020C                     	;# 
  6815  020C                     	;# 
  6816  020D                     	;# 
  6817  020E                     	;# 
  6818  020F                     	;# 
  6819  020F                     	;# 
  6820  0210                     	;# 
  6821  0210                     	;# 
  6822  0211                     	;# 
  6823  0211                     	;# 
  6824  0212                     	;# 
  6825  0212                     	;# 
  6826  0213                     	;# 
  6827  0214                     	;# 
  6828  0215                     	;# 
  6829  0215                     	;# 
  6830  0216                     	;# 
  6831  0216                     	;# 
  6832  0217                     	;# 
  6833  0217                     	;# 
  6834  0218                     	;# 
  6835  0218                     	;# 
  6836  0219                     	;# 
  6837  021A                     	;# 
  6838  021B                     	;# 
  6839  021B                     	;# 
  6840  021C                     	;# 
  6841  021C                     	;# 
  6842  021D                     	;# 
  6843  021D                     	;# 
  6844  021E                     	;# 
  6845  021F                     	;# 
  6846  028C                     	;# 
  6847  028C                     	;# 
  6848  028D                     	;# 
  6849  028D                     	;# 
  6850  028E                     	;# 
  6851  028F                     	;# 
  6852  0290                     	;# 
  6853  0290                     	;# 
  6854  0291                     	;# 
  6855  0292                     	;# 
  6856  0292                     	;# 
  6857  0293                     	;# 
  6858  0293                     	;# 
  6859  0294                     	;# 
  6860  0295                     	;# 
  6861  0296                     	;# 
  6862  0296                     	;# 
  6863  0297                     	;# 
  6864  0298                     	;# 
  6865  0298                     	;# 
  6866  0299                     	;# 
  6867  0299                     	;# 
  6868  029A                     	;# 
  6869  029B                     	;# 
  6870  029C                     	;# 
  6871  029C                     	;# 
  6872  029D                     	;# 
  6873  030C                     	;# 
  6874  030C                     	;# 
  6875  030D                     	;# 
  6876  030E                     	;# 
  6877  030F                     	;# 
  6878  0310                     	;# 
  6879  0310                     	;# 
  6880  0311                     	;# 
  6881  0312                     	;# 
  6882  0313                     	;# 
  6883  0314                     	;# 
  6884  0314                     	;# 
  6885  0315                     	;# 
  6886  0316                     	;# 
  6887  0317                     	;# 
  6888  0318                     	;# 
  6889  0318                     	;# 
  6890  0319                     	;# 
  6891  031A                     	;# 
  6892  031B                     	;# 
  6893  031C                     	;# 
  6894  031C                     	;# 
  6895  031D                     	;# 
  6896  031E                     	;# 
  6897  031F                     	;# 
  6898  038C                     	;# 
  6899  038C                     	;# 
  6900  038D                     	;# 
  6901  038E                     	;# 
  6902  0390                     	;# 
  6903  0390                     	;# 
  6904  0391                     	;# 
  6905  0392                     	;# 
  6906  040C                     	;# 
  6907  040D                     	;# 
  6908  040E                     	;# 
  6909  040F                     	;# 
  6910  0410                     	;# 
  6911  0411                     	;# 
  6912  0416                     	;# 
  6913  0416                     	;# 
  6914  0417                     	;# 
  6915  0418                     	;# 
  6916  0418                     	;# 
  6917  0419                     	;# 
  6918  041A                     	;# 
  6919  041A                     	;# 
  6920  041B                     	;# 
  6921  041C                     	;# 
  6922  041C                     	;# 
  6923  041D                     	;# 
  6924  041E                     	;# 
  6925  041F                     	;# 
  6926  048C                     	;# 
  6927  048C                     	;# 
  6928  048D                     	;# 
  6929  048E                     	;# 
  6930  048F                     	;# 
  6931  048F                     	;# 
  6932  0490                     	;# 
  6933  0491                     	;# 
  6934  0492                     	;# 
  6935  0492                     	;# 
  6936  0493                     	;# 
  6937  0494                     	;# 
  6938  0495                     	;# 
  6939  0495                     	;# 
  6940  0496                     	;# 
  6941  0497                     	;# 
  6942  0498                     	;# 
  6943  0499                     	;# 
  6944  049A                     	;# 
  6945  049B                     	;# 
  6946  049C                     	;# 
  6947  049D                     	;# 
  6948  050C                     	;# 
  6949  050C                     	;# 
  6950  050D                     	;# 
  6951  050E                     	;# 
  6952  050F                     	;# 
  6953  050F                     	;# 
  6954  0510                     	;# 
  6955  0511                     	;# 
  6956  0512                     	;# 
  6957  0512                     	;# 
  6958  0513                     	;# 
  6959  0514                     	;# 
  6960  0515                     	;# 
  6961  0515                     	;# 
  6962  0516                     	;# 
  6963  0517                     	;# 
  6964  0518                     	;# 
  6965  0519                     	;# 
  6966  051A                     	;# 
  6967  051B                     	;# 
  6968  051C                     	;# 
  6969  051D                     	;# 
  6970  058C                     	;# 
  6971  058C                     	;# 
  6972  058D                     	;# 
  6973  058E                     	;# 
  6974  058F                     	;# 
  6975  058F                     	;# 
  6976  0590                     	;# 
  6977  0591                     	;# 
  6978  0592                     	;# 
  6979  0593                     	;# 
  6980  060C                     	;# 
  6981  060D                     	;# 
  6982  060E                     	;# 
  6983  060F                     	;# 
  6984  0610                     	;# 
  6985  0611                     	;# 
  6986  0612                     	;# 
  6987  0613                     	;# 
  6988  0614                     	;# 
  6989  0616                     	;# 
  6990  0617                     	;# 
  6991  0618                     	;# 
  6992  0619                     	;# 
  6993  061A                     	;# 
  6994  061B                     	;# 
  6995  061C                     	;# 
  6996  061D                     	;# 
  6997  061E                     	;# 
  6998  068C                     	;# 
  6999  068D                     	;# 
  7000  068E                     	;# 
  7001  068F                     	;# 
  7002  0690                     	;# 
  7003  0691                     	;# 
  7004  0692                     	;# 
  7005  0693                     	;# 
  7006  0694                     	;# 
  7007  070C                     	;# 
  7008  070D                     	;# 
  7009  070E                     	;# 
  7010  070F                     	;# 
  7011  0710                     	;# 
  7012  0711                     	;# 
  7013  0712                     	;# 
  7014  0713                     	;# 
  7015  0714                     	;# 
  7016  0716                     	;# 
  7017  0717                     	;# 
  7018  0718                     	;# 
  7019  0719                     	;# 
  7020  071A                     	;# 
  7021  071B                     	;# 
  7022  071C                     	;# 
  7023  071D                     	;# 
  7024  071E                     	;# 
  7025  0796                     	;# 
  7026  0797                     	;# 
  7027  0798                     	;# 
  7028  0799                     	;# 
  7029  079A                     	;# 
  7030  079B                     	;# 
  7031  080C                     	;# 
  7032  080D                     	;# 
  7033  080E                     	;# 
  7034  080F                     	;# 
  7035  0810                     	;# 
  7036  0811                     	;# 
  7037  0812                     	;# 
  7038  0813                     	;# 
  7039  0814                     	;# 
  7040  081A                     	;# 
  7041  081B                     	;# 
  7042  081C                     	;# 
  7043  081D                     	;# 
  7044  081E                     	;# 
  7045  081F                     	;# 
  7046  088C                     	;# 
  7047  088D                     	;# 
  7048  088E                     	;# 
  7049  088F                     	;# 
  7050  0890                     	;# 
  7051  0891                     	;# 
  7052  0892                     	;# 
  7053  0893                     	;# 
  7054  0895                     	;# 
  7055  0896                     	;# 
  7056  0897                     	;# 
  7057  0898                     	;# 
  7058  0899                     	;# 
  7059  089A                     	;# 
  7060  089B                     	;# 
  7061  090C                     	;# 
  7062  090E                     	;# 
  7063  090F                     	;# 
  7064  091F                     	;# 
  7065  091F                     	;# 
  7066  098F                     	;# 
  7067  098F                     	;# 
  7068  0990                     	;# 
  7069  0991                     	;# 
  7070  0992                     	;# 
  7071  0993                     	;# 
  7072  0994                     	;# 
  7073  0995                     	;# 
  7074  0996                     	;# 
  7075  0997                     	;# 
  7076  0E0F                     	;# 
  7077  0E10                     	;# 
  7078  0E11                     	;# 
  7079  0E12                     	;# 
  7080  0E13                     	;# 
  7081  0E14                     	;# 
  7082  0E15                     	;# 
  7083  0E16                     	;# 
  7084  0E17                     	;# 
  7085  0E18                     	;# 
  7086  0E19                     	;# 
  7087  0E1A                     	;# 
  7088  0E1B                     	;# 
  7089  0E1C                     	;# 
  7090  0E1D                     	;# 
  7091  0E1E                     	;# 
  7092  0E1F                     	;# 
  7093  0E20                     	;# 
  7094  0E21                     	;# 
  7095  0E22                     	;# 
  7096  0E23                     	;# 
  7097  0E24                     	;# 
  7098  0E25                     	;# 
  7099  0E26                     	;# 
  7100  0E27                     	;# 
  7101  0E28                     	;# 
  7102  0E29                     	;# 
  7103  0E2A                     	;# 
  7104  0E2B                     	;# 
  7105  0E2C                     	;# 
  7106  0E2D                     	;# 
  7107  0E2E                     	;# 
  7108  0E2F                     	;# 
  7109  0E30                     	;# 
  7110  0E31                     	;# 
  7111  0E32                     	;# 
  7112  0E33                     	;# 
  7113  0E34                     	;# 
  7114  0E35                     	;# 
  7115  0E36                     	;# 
  7116  0E37                     	;# 
  7117  0E8F                     	;# 
  7118  0E90                     	;# 
  7119  0E91                     	;# 
  7120  0E92                     	;# 
  7121  0E93                     	;# 
  7122  0E94                     	;# 
  7123  0E95                     	;# 
  7124  0E96                     	;# 
  7125  0E97                     	;# 
  7126  0E9C                     	;# 
  7127  0E9D                     	;# 
  7128  0E9E                     	;# 
  7129  0EA1                     	;# 
  7130  0EA2                     	;# 
  7131  0EA3                     	;# 
  7132  0EA4                     	;# 
  7133  0EA5                     	;# 
  7134  0EA9                     	;# 
  7135  0EAA                     	;# 
  7136  0EAB                     	;# 
  7137  0EAC                     	;# 
  7138  0EB1                     	;# 
  7139  0EB2                     	;# 
  7140  0EB3                     	;# 
  7141  0EB8                     	;# 
  7142  0EB9                     	;# 
  7143  0EBA                     	;# 
  7144  0EBB                     	;# 
  7145  0EBC                     	;# 
  7146  0EBD                     	;# 
  7147  0EBE                     	;# 
  7148  0EC3                     	;# 
  7149  0EC5                     	;# 
  7150  0EC6                     	;# 
  7151  0EC7                     	;# 
  7152  0EC8                     	;# 
  7153  0EC9                     	;# 
  7154  0ECA                     	;# 
  7155  0ECB                     	;# 
  7156  0ECC                     	;# 
  7157  0F10                     	;# 
  7158  0F11                     	;# 
  7159  0F12                     	;# 
  7160  0F13                     	;# 
  7161  0F14                     	;# 
  7162  0F15                     	;# 
  7163  0F16                     	;# 
  7164  0F17                     	;# 
  7165  0F18                     	;# 
  7166  0F19                     	;# 
  7167  0F1A                     	;# 
  7168  0F1B                     	;# 
  7169  0F1C                     	;# 
  7170  0F1D                     	;# 
  7171  0F1E                     	;# 
  7172  0F1F                     	;# 
  7173  0F20                     	;# 
  7174  0F21                     	;# 
  7175  0F22                     	;# 
  7176  0F23                     	;# 
  7177  0F24                     	;# 
  7178  0F25                     	;# 
  7179  0F26                     	;# 
  7180  0F27                     	;# 
  7181  0F28                     	;# 
  7182  0F29                     	;# 
  7183  0F2A                     	;# 
  7184  0F2B                     	;# 
  7185  0F2C                     	;# 
  7186  0F2D                     	;# 
  7187  0F2E                     	;# 
  7188  0F2F                     	;# 
  7189  0F30                     	;# 
  7190  0F31                     	;# 
  7191  0F32                     	;# 
  7192  0F38                     	;# 
  7193  0F39                     	;# 
  7194  0F3A                     	;# 
  7195  0F3B                     	;# 
  7196  0F3C                     	;# 
  7197  0F3D                     	;# 
  7198  0F3E                     	;# 
  7199  0F3F                     	;# 
  7200  0F40                     	;# 
  7201  0F41                     	;# 
  7202  0F43                     	;# 
  7203  0F44                     	;# 
  7204  0F45                     	;# 
  7205  0F46                     	;# 
  7206  0F47                     	;# 
  7207  0F48                     	;# 
  7208  0F49                     	;# 
  7209  0F4A                     	;# 
  7210  0F4B                     	;# 
  7211  0F4C                     	;# 
  7212  0F4E                     	;# 
  7213  0F4F                     	;# 
  7214  0F50                     	;# 
  7215  0F51                     	;# 
  7216  0F52                     	;# 
  7217  0F53                     	;# 
  7218  0F54                     	;# 
  7219  0F55                     	;# 
  7220  0F56                     	;# 
  7221  0F57                     	;# 
  7222  0F59                     	;# 
  7223  0F5A                     	;# 
  7224  0F5B                     	;# 
  7225  0F5C                     	;# 
  7226  0F5D                     	;# 
  7227  0F61                     	;# 
  7228  0F62                     	;# 
  7229  0F64                     	;# 
  7230  0F65                     	;# 
  7231  0F66                     	;# 
  7232  0F67                     	;# 
  7233  0F68                     	;# 
  7234  0F69                     	;# 
  7235  0F6A                     	;# 
  7236  0F6B                     	;# 
  7237  0F6C                     	;# 
  7238  0F6D                     	;# 
  7239  0FE4                     	;# 
  7240  0FE5                     	;# 
  7241  0FE6                     	;# 
  7242  0FE7                     	;# 
  7243  0FE8                     	;# 
  7244  0FE9                     	;# 
  7245  0FEA                     	;# 
  7246  0FEB                     	;# 
  7247  0FED                     	;# 
  7248  0FEE                     	;# 
  7249  0FEF                     	;# 
  7250  0000                     	;# 
  7251  0001                     	;# 
  7252  0002                     	;# 
  7253  0003                     	;# 
  7254  0004                     	;# 
  7255  0005                     	;# 
  7256  0006                     	;# 
  7257  0007                     	;# 
  7258  0008                     	;# 
  7259  0009                     	;# 
  7260  000A                     	;# 
  7261  000B                     	;# 
  7262  000C                     	;# 
  7263  000D                     	;# 
  7264  000E                     	;# 
  7265  000F                     	;# 
  7266  0010                     	;# 
  7267  0011                     	;# 
  7268  0012                     	;# 
  7269  0013                     	;# 
  7270  0014                     	;# 
  7271  0015                     	;# 
  7272  0016                     	;# 
  7273  0017                     	;# 
  7274  0018                     	;# 
  7275  0019                     	;# 
  7276  001A                     	;# 
  7277  001C                     	;# 
  7278  001C                     	;# 
  7279  001D                     	;# 
  7280  001D                     	;# 
  7281  001E                     	;# 
  7282  001F                     	;# 
  7283  008C                     	;# 
  7284  008C                     	;# 
  7285  008D                     	;# 
  7286  008E                     	;# 
  7287  008E                     	;# 
  7288  008F                     	;# 
  7289  0090                     	;# 
  7290  0090                     	;# 
  7291  0091                     	;# 
  7292  0093                     	;# 
  7293  0094                     	;# 
  7294  0095                     	;# 
  7295  0096                     	;# 
  7296  0097                     	;# 
  7297  0098                     	;# 
  7298  0099                     	;# 
  7299  009A                     	;# 
  7300  009B                     	;# 
  7301  009C                     	;# 
  7302  009D                     	;# 
  7303  009E                     	;# 
  7304  010C                     	;# 
  7305  010D                     	;# 
  7306  010E                     	;# 
  7307  010E                     	;# 
  7308  010F                     	;# 
  7309  0110                     	;# 
  7310  0110                     	;# 
  7311  0111                     	;# 
  7312  0112                     	;# 
  7313  0112                     	;# 
  7314  0113                     	;# 
  7315  0114                     	;# 
  7316  0114                     	;# 
  7317  0115                     	;# 
  7318  0116                     	;# 
  7319  0116                     	;# 
  7320  0117                     	;# 
  7321  0119                     	;# 
  7322  0119                     	;# 
  7323  0119                     	;# 
  7324  011A                     	;# 
  7325  011A                     	;# 
  7326  011A                     	;# 
  7327  011B                     	;# 
  7328  011B                     	;# 
  7329  011B                     	;# 
  7330  011B                     	;# 
  7331  011B                     	;# 
  7332  011C                     	;# 
  7333  011C                     	;# 
  7334  011C                     	;# 
  7335  011D                     	;# 
  7336  011D                     	;# 
  7337  011D                     	;# 
  7338  011E                     	;# 
  7339  011E                     	;# 
  7340  011E                     	;# 
  7341  011F                     	;# 
  7342  011F                     	;# 
  7343  011F                     	;# 
  7344  011F                     	;# 
  7345  011F                     	;# 
  7346  018C                     	;# 
  7347  018D                     	;# 
  7348  018E                     	;# 
  7349  018F                     	;# 
  7350  0190                     	;# 
  7351  0191                     	;# 
  7352  0192                     	;# 
  7353  0196                     	;# 
  7354  0197                     	;# 
  7355  0198                     	;# 
  7356  0199                     	;# 
  7357  019A                     	;# 
  7358  019B                     	;# 
  7359  019C                     	;# 
  7360  020C                     	;# 
  7361  020C                     	;# 
  7362  020D                     	;# 
  7363  020E                     	;# 
  7364  020F                     	;# 
  7365  020F                     	;# 
  7366  0210                     	;# 
  7367  0210                     	;# 
  7368  0211                     	;# 
  7369  0211                     	;# 
  7370  0212                     	;# 
  7371  0212                     	;# 
  7372  0213                     	;# 
  7373  0214                     	;# 
  7374  0215                     	;# 
  7375  0215                     	;# 
  7376  0216                     	;# 
  7377  0216                     	;# 
  7378  0217                     	;# 
  7379  0217                     	;# 
  7380  0218                     	;# 
  7381  0218                     	;# 
  7382  0219                     	;# 
  7383  021A                     	;# 
  7384  021B                     	;# 
  7385  021B                     	;# 
  7386  021C                     	;# 
  7387  021C                     	;# 
  7388  021D                     	;# 
  7389  021D                     	;# 
  7390  021E                     	;# 
  7391  021F                     	;# 
  7392  028C                     	;# 
  7393  028C                     	;# 
  7394  028D                     	;# 
  7395  028D                     	;# 
  7396  028E                     	;# 
  7397  028F                     	;# 
  7398  0290                     	;# 
  7399  0290                     	;# 
  7400  0291                     	;# 
  7401  0292                     	;# 
  7402  0292                     	;# 
  7403  0293                     	;# 
  7404  0293                     	;# 
  7405  0294                     	;# 
  7406  0295                     	;# 
  7407  0296                     	;# 
  7408  0296                     	;# 
  7409  0297                     	;# 
  7410  0298                     	;# 
  7411  0298                     	;# 
  7412  0299                     	;# 
  7413  0299                     	;# 
  7414  029A                     	;# 
  7415  029B                     	;# 
  7416  029C                     	;# 
  7417  029C                     	;# 
  7418  029D                     	;# 
  7419  030C                     	;# 
  7420  030C                     	;# 
  7421  030D                     	;# 
  7422  030E                     	;# 
  7423  030F                     	;# 
  7424  0310                     	;# 
  7425  0310                     	;# 
  7426  0311                     	;# 
  7427  0312                     	;# 
  7428  0313                     	;# 
  7429  0314                     	;# 
  7430  0314                     	;# 
  7431  0315                     	;# 
  7432  0316                     	;# 
  7433  0317                     	;# 
  7434  0318                     	;# 
  7435  0318                     	;# 
  7436  0319                     	;# 
  7437  031A                     	;# 
  7438  031B                     	;# 
  7439  031C                     	;# 
  7440  031C                     	;# 
  7441  031D                     	;# 
  7442  031E                     	;# 
  7443  031F                     	;# 
  7444  038C                     	;# 
  7445  038C                     	;# 
  7446  038D                     	;# 
  7447  038E                     	;# 
  7448  0390                     	;# 
  7449  0390                     	;# 
  7450  0391                     	;# 
  7451  0392                     	;# 
  7452  040C                     	;# 
  7453  040D                     	;# 
  7454  040E                     	;# 
  7455  040F                     	;# 
  7456  0410                     	;# 
  7457  0411                     	;# 
  7458  0416                     	;# 
  7459  0416                     	;# 
  7460  0417                     	;# 
  7461  0418                     	;# 
  7462  0418                     	;# 
  7463  0419                     	;# 
  7464  041A                     	;# 
  7465  041A                     	;# 
  7466  041B                     	;# 
  7467  041C                     	;# 
  7468  041C                     	;# 
  7469  041D                     	;# 
  7470  041E                     	;# 
  7471  041F                     	;# 
  7472  048C                     	;# 
  7473  048C                     	;# 
  7474  048D                     	;# 
  7475  048E                     	;# 
  7476  048F                     	;# 
  7477  048F                     	;# 
  7478  0490                     	;# 
  7479  0491                     	;# 
  7480  0492                     	;# 
  7481  0492                     	;# 
  7482  0493                     	;# 
  7483  0494                     	;# 
  7484  0495                     	;# 
  7485  0495                     	;# 
  7486  0496                     	;# 
  7487  0497                     	;# 
  7488  0498                     	;# 
  7489  0499                     	;# 
  7490  049A                     	;# 
  7491  049B                     	;# 
  7492  049C                     	;# 
  7493  049D                     	;# 
  7494  050C                     	;# 
  7495  050C                     	;# 
  7496  050D                     	;# 
  7497  050E                     	;# 
  7498  050F                     	;# 
  7499  050F                     	;# 
  7500  0510                     	;# 
  7501  0511                     	;# 
  7502  0512                     	;# 
  7503  0512                     	;# 
  7504  0513                     	;# 
  7505  0514                     	;# 
  7506  0515                     	;# 
  7507  0515                     	;# 
  7508  0516                     	;# 
  7509  0517                     	;# 
  7510  0518                     	;# 
  7511  0519                     	;# 
  7512  051A                     	;# 
  7513  051B                     	;# 
  7514  051C                     	;# 
  7515  051D                     	;# 
  7516  058C                     	;# 
  7517  058C                     	;# 
  7518  058D                     	;# 
  7519  058E                     	;# 
  7520  058F                     	;# 
  7521  058F                     	;# 
  7522  0590                     	;# 
  7523  0591                     	;# 
  7524  0592                     	;# 
  7525  0593                     	;# 
  7526  060C                     	;# 
  7527  060D                     	;# 
  7528  060E                     	;# 
  7529  060F                     	;# 
  7530  0610                     	;# 
  7531  0611                     	;# 
  7532  0612                     	;# 
  7533  0613                     	;# 
  7534  0614                     	;# 
  7535  0616                     	;# 
  7536  0617                     	;# 
  7537  0618                     	;# 
  7538  0619                     	;# 
  7539  061A                     	;# 
  7540  061B                     	;# 
  7541  061C                     	;# 
  7542  061D                     	;# 
  7543  061E                     	;# 
  7544  068C                     	;# 
  7545  068D                     	;# 
  7546  068E                     	;# 
  7547  068F                     	;# 
  7548  0690                     	;# 
  7549  0691                     	;# 
  7550  0692                     	;# 
  7551  0693                     	;# 
  7552  0694                     	;# 
  7553  070C                     	;# 
  7554  070D                     	;# 
  7555  070E                     	;# 
  7556  070F                     	;# 
  7557  0710                     	;# 
  7558  0711                     	;# 
  7559  0712                     	;# 
  7560  0713                     	;# 
  7561  0714                     	;# 
  7562  0716                     	;# 
  7563  0717                     	;# 
  7564  0718                     	;# 
  7565  0719                     	;# 
  7566  071A                     	;# 
  7567  071B                     	;# 
  7568  071C                     	;# 
  7569  071D                     	;# 
  7570  071E                     	;# 
  7571  0796                     	;# 
  7572  0797                     	;# 
  7573  0798                     	;# 
  7574  0799                     	;# 
  7575  079A                     	;# 
  7576  079B                     	;# 
  7577  080C                     	;# 
  7578  080D                     	;# 
  7579  080E                     	;# 
  7580  080F                     	;# 
  7581  0810                     	;# 
  7582  0811                     	;# 
  7583  0812                     	;# 
  7584  0813                     	;# 
  7585  0814                     	;# 
  7586  081A                     	;# 
  7587  081B                     	;# 
  7588  081C                     	;# 
  7589  081D                     	;# 
  7590  081E                     	;# 
  7591  081F                     	;# 
  7592  088C                     	;# 
  7593  088D                     	;# 
  7594  088E                     	;# 
  7595  088F                     	;# 
  7596  0890                     	;# 
  7597  0891                     	;# 
  7598  0892                     	;# 
  7599  0893                     	;# 
  7600  0895                     	;# 
  7601  0896                     	;# 
  7602  0897                     	;# 
  7603  0898                     	;# 
  7604  0899                     	;# 
  7605  089A                     	;# 
  7606  089B                     	;# 
  7607  090C                     	;# 
  7608  090E                     	;# 
  7609  090F                     	;# 
  7610  091F                     	;# 
  7611  091F                     	;# 
  7612  098F                     	;# 
  7613  098F                     	;# 
  7614  0990                     	;# 
  7615  0991                     	;# 
  7616  0992                     	;# 
  7617  0993                     	;# 
  7618  0994                     	;# 
  7619  0995                     	;# 
  7620  0996                     	;# 
  7621  0997                     	;# 
  7622  0E0F                     	;# 
  7623  0E10                     	;# 
  7624  0E11                     	;# 
  7625  0E12                     	;# 
  7626  0E13                     	;# 
  7627  0E14                     	;# 
  7628  0E15                     	;# 
  7629  0E16                     	;# 
  7630  0E17                     	;# 
  7631  0E18                     	;# 
  7632  0E19                     	;# 
  7633  0E1A                     	;# 
  7634  0E1B                     	;# 
  7635  0E1C                     	;# 
  7636  0E1D                     	;# 
  7637  0E1E                     	;# 
  7638  0E1F                     	;# 
  7639  0E20                     	;# 
  7640  0E21                     	;# 
  7641  0E22                     	;# 
  7642  0E23                     	;# 
  7643  0E24                     	;# 
  7644  0E25                     	;# 
  7645  0E26                     	;# 
  7646  0E27                     	;# 
  7647  0E28                     	;# 
  7648  0E29                     	;# 
  7649  0E2A                     	;# 
  7650  0E2B                     	;# 
  7651  0E2C                     	;# 
  7652  0E2D                     	;# 
  7653  0E2E                     	;# 
  7654  0E2F                     	;# 
  7655  0E30                     	;# 
  7656  0E31                     	;# 
  7657  0E32                     	;# 
  7658  0E33                     	;# 
  7659  0E34                     	;# 
  7660  0E35                     	;# 
  7661  0E36                     	;# 
  7662  0E37                     	;# 
  7663  0E8F                     	;# 
  7664  0E90                     	;# 
  7665  0E91                     	;# 
  7666  0E92                     	;# 
  7667  0E93                     	;# 
  7668  0E94                     	;# 
  7669  0E95                     	;# 
  7670  0E96                     	;# 
  7671  0E97                     	;# 
  7672  0E9C                     	;# 
  7673  0E9D                     	;# 
  7674  0E9E                     	;# 
  7675  0EA1                     	;# 
  7676  0EA2                     	;# 
  7677  0EA3                     	;# 
  7678  0EA4                     	;# 
  7679  0EA5                     	;# 
  7680  0EA9                     	;# 
  7681  0EAA                     	;# 
  7682  0EAB                     	;# 
  7683  0EAC                     	;# 
  7684  0EB1                     	;# 
  7685  0EB2                     	;# 
  7686  0EB3                     	;# 
  7687  0EB8                     	;# 
  7688  0EB9                     	;# 
  7689  0EBA                     	;# 
  7690  0EBB                     	;# 
  7691  0EBC                     	;# 
  7692  0EBD                     	;# 
  7693  0EBE                     	;# 
  7694  0EC3                     	;# 
  7695  0EC5                     	;# 
  7696  0EC6                     	;# 
  7697  0EC7                     	;# 
  7698  0EC8                     	;# 
  7699  0EC9                     	;# 
  7700  0ECA                     	;# 
  7701  0ECB                     	;# 
  7702  0ECC                     	;# 
  7703  0F10                     	;# 
  7704  0F11                     	;# 
  7705  0F12                     	;# 
  7706  0F13                     	;# 
  7707  0F14                     	;# 
  7708  0F15                     	;# 
  7709  0F16                     	;# 
  7710  0F17                     	;# 
  7711  0F18                     	;# 
  7712  0F19                     	;# 
  7713  0F1A                     	;# 
  7714  0F1B                     	;# 
  7715  0F1C                     	;# 
  7716  0F1D                     	;# 
  7717  0F1E                     	;# 
  7718  0F1F                     	;# 
  7719  0F20                     	;# 
  7720  0F21                     	;# 
  7721  0F22                     	;# 
  7722  0F23                     	;# 
  7723  0F24                     	;# 
  7724  0F25                     	;# 
  7725  0F26                     	;# 
  7726  0F27                     	;# 
  7727  0F28                     	;# 
  7728  0F29                     	;# 
  7729  0F2A                     	;# 
  7730  0F2B                     	;# 
  7731  0F2C                     	;# 
  7732  0F2D                     	;# 
  7733  0F2E                     	;# 
  7734  0F2F                     	;# 
  7735  0F30                     	;# 
  7736  0F31                     	;# 
  7737  0F32                     	;# 
  7738  0F38                     	;# 
  7739  0F39                     	;# 
  7740  0F3A                     	;# 
  7741  0F3B                     	;# 
  7742  0F3C                     	;# 
  7743  0F3D                     	;# 
  7744  0F3E                     	;# 
  7745  0F3F                     	;# 
  7746  0F40                     	;# 
  7747  0F41                     	;# 
  7748  0F43                     	;# 
  7749  0F44                     	;# 
  7750  0F45                     	;# 
  7751  0F46                     	;# 
  7752  0F47                     	;# 
  7753  0F48                     	;# 
  7754  0F49                     	;# 
  7755  0F4A                     	;# 
  7756  0F4B                     	;# 
  7757  0F4C                     	;# 
  7758  0F4E                     	;# 
  7759  0F4F                     	;# 
  7760  0F50                     	;# 
  7761  0F51                     	;# 
  7762  0F52                     	;# 
  7763  0F53                     	;# 
  7764  0F54                     	;# 
  7765  0F55                     	;# 
  7766  0F56                     	;# 
  7767  0F57                     	;# 
  7768  0F59                     	;# 
  7769  0F5A                     	;# 
  7770  0F5B                     	;# 
  7771  0F5C                     	;# 
  7772  0F5D                     	;# 
  7773  0F61                     	;# 
  7774  0F62                     	;# 
  7775  0F64                     	;# 
  7776  0F65                     	;# 
  7777  0F66                     	;# 
  7778  0F67                     	;# 
  7779  0F68                     	;# 
  7780  0F69                     	;# 
  7781  0F6A                     	;# 
  7782  0F6B                     	;# 
  7783  0F6C                     	;# 
  7784  0F6D                     	;# 
  7785  0FE4                     	;# 
  7786  0FE5                     	;# 
  7787  0FE6                     	;# 
  7788  0FE7                     	;# 
  7789  0FE8                     	;# 
  7790  0FE9                     	;# 
  7791  0FEA                     	;# 
  7792  0FEB                     	;# 
  7793  0FED                     	;# 
  7794  0FEE                     	;# 
  7795  0FEF                     	;# 
  7796                           
  7797                           	psect	idataCOMMON
  7798  07FF                     __pidataCOMMON:
  7799                           
  7800                           ;initializer for _NREG
  7801  07FF  3419               	retlw	25
  7802                           
  7803                           	psect	idataBANK1
  7804  07F5                     __pidataBANK1:
  7805                           
  7806                           ;initializer for _alarmPWMStart
  7807  07F5  34FF               	retlw	255
  7808  07F6  34FF               	retlw	255
  7809  07F7  34FF               	retlw	255
  7810                           
  7811                           ;initializer for _prevLumLevel
  7812  07F8  34FF               	retlw	255
  7813  07F9  34FF               	retlw	255
  7814                           
  7815                           ;initializer for _prevTemp
  7816  07FA  34FF               	retlw	255
  7817  07FB  34FF               	retlw	255
  7818                           
  7819                           ;initializer for _updateLCD
  7820  07FC  3401               	retlw	1
  7821                           
  7822                           ;initializer for _TALA
  7823  07FD  3405               	retlw	5
  7824                           
  7825                           ;initializer for _PMON
  7826  07FE  3403               	retlw	3
  7827                           
  7828                           	psect	stringtext1
  7829  1800                     __pstringtext1:
  7830  1800                     _commands:
  7831  1800  34EA               	retlw	low _cmd_rc
  7832  1801  3411               	retlw	high _cmd_rc
  7833  1802  34C0               	retlw	192
  7834  1803  3488               	retlw	low _cmd_sc
  7835  1804  3417               	retlw	high _cmd_sc
  7836  1805  34C1               	retlw	193
  7837  1806  345F               	retlw	low _cmd_rtl
  7838  1807  3411               	retlw	high _cmd_rtl
  7839  1808  34C2               	retlw	194
  7840  1809  340F               	retlw	low _cmd_rp
  7841  180A  3412               	retlw	high _cmd_rp
  7842  180B  34C3               	retlw	195
  7843  180C  3418               	retlw	low _cmd_mmp
  7844  180D  3410               	retlw	high _cmd_mmp
  7845  180E  34C4               	retlw	196
  7846  180F  34A2               	retlw	low _cmd_mta
  7847  1810  3410               	retlw	high _cmd_mta
  7848  1811  34C5               	retlw	197
  7849  1812  3459               	retlw	low _cmd_ra
  7850  1813  3414               	retlw	high _cmd_ra
  7851  1814  34C6               	retlw	198
  7852  1815  3406               	retlw	low _cmd_dac
  7853  1816  3408               	retlw	high _cmd_dac
  7854  1817  34C7               	retlw	199
  7855  1818  3446               	retlw	low _cmd_dtl
  7856  1819  3416               	retlw	high _cmd_dtl
  7857  181A  34C8               	retlw	200
  7858  181B  34E2               	retlw	low _cmd_aa
  7859  181C  3413               	retlw	high _cmd_aa
  7860  181D  34C9               	retlw	201
  7861  181E  345A               	retlw	low _cmd_ir
  7862  181F  3412               	retlw	high _cmd_ir
  7863  1820  34CA               	retlw	202
  7864  1821  3404               	retlw	low _cmd_trc
  7865  1822  340B               	retlw	high _cmd_trc
  7866  1823  34CB               	retlw	203
  7867  1824  3405               	retlw	low _cmd_tri
  7868  1825  340C               	retlw	high _cmd_tri
  7869  1826  34CC               	retlw	204
  7870  1827                     __end_of_commands:
  7871                           
  7872                           	psect	stringtext2
  7873  1836                     __pstringtext2:
  7874  1836                     _dpowers:
  7875  1836  3401               	retlw	1
  7876  1837  3400               	retlw	0
  7877  1838  340A               	retlw	10
  7878  1839  3400               	retlw	0
  7879  183A  3464               	retlw	100
  7880  183B  3400               	retlw	0
  7881  183C  34E8               	retlw	232
  7882  183D  3403               	retlw	3
  7883  183E  3410               	retlw	16
  7884  183F  3427               	retlw	39
  7885  1840                     __end_of_dpowers:
  7886                           
  7887                           	psect	nvBANK1
  7888  00D8                     __pnvBANK1:
  7889  00D8                     _timer1ReloadVal:
  7890  00D8                     	ds	2
  7891  00DA                     _eusartTxBufferRemaining:
  7892  00DA                     	ds	1
  7893                           
  7894                           	psect	nvBANK2
  7895  015B                     __pnvBANK2:
  7896  015B                     _INT_InterruptHandler:
  7897  015B                     	ds	2
  7898  015D                     _TMR1_InterruptHandler:
  7899  015D                     	ds	2
  7900  015F                     _EUSART_RxDefaultInterruptHandler:
  7901  015F                     	ds	2
  7902  0161                     _EUSART_TxDefaultInterruptHandler:
  7903  0161                     	ds	2
  7904  0013                     _TRISCbits	set	19
  7905  000E                     _PORTCbits	set	14
  7906  0016                     _LATAbits	set	22
  7907  000B                     _INTCONbits	set	11
  7908  0014                     _TRISD	set	20
  7909  0013                     _TRISC	set	19
  7910  0012                     _TRISB	set	18
  7911  0011                     _TRISA	set	17
  7912  0015                     _TRISE	set	21
  7913  0018                     _LATC	set	24
  7914  0017                     _LATB	set	23
  7915  0016                     _LATA	set	22
  7916  0019                     _LATD	set	25
  7917  001A                     _LATE	set	26
  7918  0094                     _ADCON1bits	set	148
  7919  008E                     _ADPREVL	set	142
  7920  008F                     _ADPREVH	set	143
  7921  0097                     _ADSTATbits	set	151
  7922  0090                     _ADACCL	set	144
  7923  0091                     _ADACCH	set	145
  7924  0095                     _ADCON2bits	set	149
  7925  009C                     _ADPRE	set	156
  7926  0096                     _ADCON3bits	set	150
  7927  008C                     _ADRESL	set	140
  7928  008D                     _ADRESH	set	141
  7929  0093                     _ADCON0bits	set	147
  7930  009D                     _ADACQ	set	157
  7931  0093                     _ADCON0	set	147
  7932  0098                     _ADCLK	set	152
  7933  0099                     _ADACT	set	153
  7934  009A                     _ADREF	set	154
  7935  0097                     _ADSTAT	set	151
  7936  0096                     _ADCON3	set	150
  7937  0095                     _ADCON2	set	149
  7938  0094                     _ADCON1	set	148
  7939  009B                     _ADCAP	set	155
  7940  009E                     _ADPCH	set	158
  7941  0119                     _RC1REG	set	281
  7942  011D                     _RC1STAbits	set	285
  7943  011A                     _TX1REG	set	282
  7944  011E                     _TX1STAbits	set	286
  7945  011C                     _SP1BRGH	set	284
  7946  011B                     _SP1BRGL	set	283
  7947  011E                     _TX1STA	set	286
  7948  011D                     _RC1STA	set	285
  7949  011F                     _BAUD1CON	set	287
  7950  0116                     _ADERRL	set	278
  7951  0117                     _ADERRH	set	279
  7952  0114                     _ADFLTRL	set	276
  7953  0115                     _ADFLTRH	set	277
  7954  010C                     _ADCNT	set	268
  7955  010D                     _ADRPT	set	269
  7956  0113                     _ADSTPTH	set	275
  7957  0112                     _ADSTPTL	set	274
  7958  0111                     _ADUTHH	set	273
  7959  0110                     _ADUTHL	set	272
  7960  010F                     _ADLTHH	set	271
  7961  010E                     _ADLTHL	set	270
  7962  018E                     _SSP1MSK	set	398
  7963  018D                     _SSP1ADD	set	397
  7964  018F                     _SSP1STAT	set	399
  7965  0191                     _SSP1CON2	set	401
  7966  0190                     _SSP1CON1bits	set	400
  7967  018C                     _SSP1BUF	set	396
  7968  018F                     _SSP1STATbits	set	399
  7969  0191                     _SSP1CON2bits	set	401
  7970  0190                     _SSP1CON1	set	400
  7971  021F                     _CCPTMRS1bits	set	543
  7972  020F                     _T1GCONbits	set	527
  7973  020E                     _T1CONbits	set	526
  7974  020E                     _T1CON	set	526
  7975  020C                     _TMR1L	set	524
  7976  020D                     _TMR1H	set	525
  7977  0211                     _T1CLK	set	529
  7978  0210                     _T1GATE	set	528
  7979  020F                     _T1GCON	set	527
  7980  028D                     _PR2	set	653
  7981  028C                     _TMR2	set	652
  7982  028E                     _T2CONbits	set	654
  7983  0291                     _T2RSTbits	set	657
  7984  028F                     _T2HLTbits	set	655
  7985  028E                     _T2CON	set	654
  7986  028C                     _T2TMR	set	652
  7987  028D                     _T2PR	set	653
  7988  0291                     _T2RST	set	657
  7989  028F                     _T2HLT	set	655
  7990  0290                     _T2CLKCON	set	656
  7991  038C                     _PWM6DCL	set	908
  7992  038D                     _PWM6DCH	set	909
  7993  038E                     _PWM6CON	set	910
  7994  1C77                     _PWM6EN	set	7287
  7995  0710                     _PIR4bits	set	1808
  7996  071A                     _PIE4bits	set	1818
  7997  070C                     _PIR0bits	set	1804
  7998  0716                     _PIE0bits	set	1814
  7999  0719                     _PIE3bits	set	1817
  8000  070F                     _PIR3bits	set	1807
  8001  079B                     _PMD5	set	1947
  8002  079A                     _PMD4	set	1946
  8003  0799                     _PMD3	set	1945
  8004  0798                     _PMD2	set	1944
  8005  0797                     _PMD1	set	1943
  8006  0796                     _PMD0	set	1942
  8007  081F                     _NVMCON2	set	2079
  8008  081C                     _NVMDATL	set	2076
  8009  081D                     _NVMDATH	set	2077
  8010  081E                     _NVMCON1bits	set	2078
  8011  081B                     _NVMADRH	set	2075
  8012  081A                     _NVMADRL	set	2074
  8013  0892                     _OSCTUNE	set	2194
  8014  0893                     _OSCFRQ	set	2195
  8015  0891                     _OSCEN	set	2193
  8016  088F                     _OSCCON3	set	2191
  8017  088D                     _OSCCON1	set	2189
  8018  0EC6                     _SSP1DATPPS	set	3782
  8019  0EC5                     _SSP1CLKPPS	set	3781
  8020  0ECB                     _RXPPS	set	3787
  8021  0E90                     _INTPPS	set	3728
  8022  0F26                     _RC6PPS	set	3878
  8023  0F16                     _RA6PPS	set	3862
  8024  0F24                     _RC4PPS	set	3876
  8025  0F23                     _RC3PPS	set	3875
  8026  0F67                     _SLRCONE	set	3943
  8027  0F5C                     _SLRCOND	set	3932
  8028  0F51                     _SLRCONC	set	3921
  8029  0F46                     _SLRCONB	set	3910
  8030  0F3B                     _SLRCONA	set	3899
  8031  0F5B                     _ODCOND	set	3931
  8032  0F50                     _ODCONC	set	3920
  8033  0F45                     _ODCONB	set	3909
  8034  0F3A                     _ODCONA	set	3898
  8035  0F66                     _ODCONE	set	3942
  8036  0F4F                     _WPUC	set	3919
  8037  0F39                     _WPUA	set	3897
  8038  0F44                     _WPUB	set	3908
  8039  0F65                     _WPUE	set	3941
  8040  0F5A                     _WPUD	set	3930
  8041  0F38                     _ANSELA	set	3896
  8042  0F64                     _ANSELE	set	3940
  8043  0F43                     _ANSELB	set	3907
  8044  0F4E                     _ANSELC	set	3918
  8045  0F59                     _ANSELD	set	3929
  8046  7A7C                     _WPUC4	set	31356
  8047  7A7B                     _WPUC3	set	31355
  8048                           
  8049                           	psect	stringtext3
  8050  1827                     __pstringtext3:
  8051  1827                     STR_1:
  8052  1827  3425               	retlw	37	;'%'
  8053  1828  3430               	retlw	48	;'0'
  8054  1829  3432               	retlw	50	;'2'
  8055  182A  3464               	retlw	100	;'d'
  8056  182B  343A               	retlw	58	;':'
  8057  182C  3425               	retlw	37	;'%'
  8058  182D  3430               	retlw	48	;'0'
  8059  182E  3432               	retlw	50	;'2'
  8060  182F  3464               	retlw	100	;'d'
  8061  1830  343A               	retlw	58	;':'
  8062  1831  3425               	retlw	37	;'%'
  8063  1832  3430               	retlw	48	;'0'
  8064  1833  3432               	retlw	50	;'2'
  8065  1834  3464               	retlw	100	;'d'
  8066  1835  3400               	retlw	0
  8067                           
  8068                           	psect	stringtext4
  8069  1840                     __pstringtext4:
  8070  1840                     STR_3:
  8071  1840  3425               	retlw	37	;'%'
  8072  1841  3430               	retlw	48	;'0'
  8073  1842  3432               	retlw	50	;'2'
  8074  1843  3464               	retlw	100	;'d'
  8075  1844  3420               	retlw	32	;' '
  8076  1845  3443               	retlw	67	;'C'
  8077  1846  3400               	retlw	0
  8078                           
  8079                           	psect	stringtext5
  8080  1847                     __pstringtext5:
  8081  1847                     STR_5:
  8082  1847  344C               	retlw	76	;'L'
  8083  1848  3420               	retlw	32	;' '
  8084  1849  3425               	retlw	37	;'%'
  8085  184A  3464               	retlw	100	;'d'
  8086  184B  3400               	retlw	0
  8087                           
  8088                           	psect	stringtext6
  8089  184C                     __pstringtext6:
  8090  184C                     STR_7:
  8091  184C  3443               	retlw	67	;'C'
  8092  184D  3454               	retlw	84	;'T'
  8093  184E  344C               	retlw	76	;'L'
  8094  184F  3400               	retlw	0
  8095                           
  8096                           	psect	stringtext7
  8097  0000                     __pstringtext7:
  8098  1840                     
  8099                           	psect	cinit
  8100  0054                     start_initialization:	
  8101                           ; #config settings
  8102                           
  8103  0054                     __initialization:
  8104                           
  8105                           ; Initialize objects allocated to COMMON
  8106  0054  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  8107  0057  00FD               	movwf	__pdataCOMMON& (0+127)
  8108                           
  8109                           ; Initialize objects allocated to BANK1
  8110  0058  30F5               	movlw	low __pidataBANK1
  8111  0059  0084               	movwf	4
  8112  005A  3087               	movlw	(high __pidataBANK1)| (0+128)
  8113  005B  0085               	movwf	5
  8114  005C  30CE               	movlw	low __pdataBANK1
  8115  005D  0086               	movwf	6
  8116  005E  3000               	movlw	high __pdataBANK1
  8117  005F  0087               	movwf	7
  8118  0060  300A               	movlw	10
  8119  0061  3188  2000  3180   	fcall	init_ram
  8120                           
  8121                           ; Clear objects allocated to COMMON
  8122  0064  01F9               	clrf	__pbssCOMMON& (0+127)
  8123  0065  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  8124  0066  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  8125  0067  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  8126                           
  8127                           ; Clear objects allocated to BANK0
  8128  0068  305C               	movlw	low __pbssBANK0
  8129  0069  0084               	movwf	4
  8130  006A  3000               	movlw	high __pbssBANK0
  8131  006B  0085               	movwf	5
  8132  006C  3009               	movlw	9
  8133  006D  319E  26E9  3180   	fcall	clear_ram0
  8134                           
  8135                           ; Clear objects allocated to BANK1
  8136  0070  30A0               	movlw	low __pbssBANK1
  8137  0071  0084               	movwf	4
  8138  0072  3000               	movlw	high __pbssBANK1
  8139  0073  0085               	movwf	5
  8140  0074  301C               	movlw	28
  8141  0075  319E  26E9  3180   	fcall	clear_ram0
  8142                           
  8143                           ; Clear objects allocated to BANK2
  8144  0078  3040               	movlw	low __pbssBANK2
  8145  0079  0084               	movwf	4
  8146  007A  3001               	movlw	high __pbssBANK2
  8147  007B  0085               	movwf	5
  8148  007C  301B               	movlw	27
  8149  007D  319E  26E9  3180   	fcall	clear_ram0
  8150                           
  8151                           ; Clear objects allocated to BANK3
  8152  0080  30A0               	movlw	low __pbssBANK3
  8153  0081  0084               	movwf	4
  8154  0082  3001               	movlw	high __pbssBANK3
  8155  0083  0085               	movwf	5
  8156  0084  3040               	movlw	64
  8157  0085  319E  26E9  3180   	fcall	clear_ram0
  8158                           
  8159                           ; Clear objects allocated to BANK4
  8160  0088  3020               	movlw	low __pbssBANK4
  8161  0089  0084               	movwf	4
  8162  008A  3002               	movlw	high __pbssBANK4
  8163  008B  0085               	movwf	5
  8164  008C  3040               	movlw	64
  8165  008D  319E  26E9  3180   	fcall	clear_ram0
  8166  0090                     end_of_initialization:	
  8167                           ;End of C runtime variable initialization code
  8168                           
  8169  0090                     __end_of__initialization:
  8170  0090  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8171  0091  0020               	movlb	0
  8172  0092  3180  2894         	ljmp	_main	;jump to C main() function
  8173                           
  8174                           	psect	bssCOMMON
  8175  0079                     __pbssCOMMON:
  8176  0079                     _nr:
  8177  0079                     	ds	1
  8178  007A                     _iwrite:
  8179  007A                     	ds	1
  8180  007B                     _iread:
  8181  007B                     	ds	1
  8182  007C                     _ALAF:
  8183  007C                     	ds	1
  8184                           
  8185                           	psect	dataCOMMON
  8186  007D                     __pdataCOMMON:
  8187  007D                     _NREG:
  8188  007D                     	ds	1
  8189                           
  8190                           	psect	bssBANK0
  8191  005C                     __pbssBANK0:
  8192  005C                     _t:
  8193  005C                     	ds	3
  8194  005F                     _modeFlag:
  8195  005F                     	ds	2
  8196  0061                     _editingClockAlarm:
  8197  0061                     	ds	2
  8198  0063                     _lumLevel:
  8199  0063                     	ds	1
  8200  0064                     _temp:
  8201  0064                     	ds	1
  8202                           
  8203                           	psect	bssBANK1
  8204  00A0                     __pbssBANK1:
  8205  00A0                     _clkAlarm:
  8206  00A0                     	ds	4
  8207  00A4                     _lumAlarm:
  8208  00A4                     	ds	3
  8209  00A7                     _tempAlarm:
  8210  00A7                     	ds	3
  8211  00AA                     _dimingLed:
  8212  00AA                     	ds	2
  8213  00AC                     _sentMessageBufHalfFull:
  8214  00AC                     	ds	1
  8215  00AD                     _flagNr:
  8216  00AD                     	ds	1
  8217  00AE                     _bufHalfFull:
  8218  00AE                     	ds	1
  8219  00AF                     _writeEEPROM_flag:
  8220  00AF                     	ds	1
  8221  00B0                     _counterMonitorAux:
  8222  00B0                     	ds	1
  8223  00B1                     _monitor_TEMP_LUM:
  8224  00B1                     	ds	1
  8225  00B2                     _flagS1pushed:
  8226  00B2                     	ds	1
  8227  00B3                     _PWM_on:
  8228  00B3                     	ds	1
  8229  00B4                     _editingLumAlarm:
  8230  00B4                     	ds	1
  8231  00B5                     _editingTempAlarm:
  8232  00B5                     	ds	1
  8233  00B6                     _S1_Value:
  8234  00B6                     	ds	1
  8235  00B7                     _eusartRxCount:
  8236  00B7                     	ds	1
  8237  00B8                     _eusartRxTail:
  8238  00B8                     	ds	1
  8239  00B9                     _eusartRxHead:
  8240  00B9                     	ds	1
  8241  00BA                     _eusartTxTail:
  8242  00BA                     	ds	1
  8243  00BB                     _eusartTxHead:
  8244  00BB                     	ds	1
  8245                           
  8246                           	psect	dataBANK1
  8247  00CE                     __pdataBANK1:
  8248  00CE                     _alarmPWMStart:
  8249  00CE                     	ds	3
  8250  00D1                     _prevLumLevel:
  8251  00D1                     	ds	2
  8252  00D3                     _prevTemp:
  8253  00D3                     	ds	2
  8254  00D5                     _updateLCD:
  8255  00D5                     	ds	1
  8256  00D6                     _TALA:
  8257  00D6                     	ds	1
  8258  00D7                     _PMON:
  8259  00D7                     	ds	1
  8260                           
  8261                           	psect	bssBANK2
  8262  0140                     __pbssBANK2:
  8263  0140                     main@F13053:
  8264  0140                     	ds	20
  8265  0154                     update_menuLCD@F12903:
  8266  0154                     	ds	3
  8267  0157                     _i2c1_driver_i2cISR:
  8268  0157                     	ds	2
  8269  0159                     _i2c1_driver_busCollisionISR:
  8270  0159                     	ds	2
  8271                           
  8272                           	psect	bssBANK3
  8273  01A0                     __pbssBANK3:
  8274  01A0                     _eusartTxBuffer:
  8275  01A0                     	ds	64
  8276                           
  8277                           	psect	bssBANK4
  8278  0220                     __pbssBANK4:
  8279  0220                     _eusartRxBuffer:
  8280  0220                     	ds	64
  8281                           
  8282                           	psect	inittext
  8283  0800                     init_ram:
  8284  0800  00FE               	movwf	btemp
  8285  0801                     initloop:
  8286  0801  0012               	moviw fsr0++
  8287  0802  001E               	movwi fsr1++
  8288  0803  0BFE               	decfsz	btemp,f
  8289  0804  2801               	goto	initloop
  8290  0805  3400               	retlw	0
  8291                           
  8292                           	psect	clrtext
  8293  1EE9                     clear_ram0:	
  8294                           ;	Called with FSR0 containing the base address, and
  8295                           ;	WREG with the size to clear
  8296                           
  8297  1EE9  0064               	clrwdt	;clear the watchdog before getting into this loop
  8298  1EEA                     clrloop0:
  8299  1EEA  0180               	clrf	0	;clear RAM location pointed to by FSR
  8300  1EEB  3101               	addfsr 0,1
  8301  1EEC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8302  1EED  2EEA               	goto	clrloop0	;have we reached the end yet?
  8303  1EEE  3400               	retlw	0	;all done for this memory range, return
  8304                           
  8305                           	psect	cstackBANK2
  8306  0120                     __pcstackBANK2:
  8307  0120                     main@buff:
  8308                           
  8309                           ; 20 bytes @ 0x0
  8310  0120                     	ds	20
  8311  0134                     _main$3499:
  8312                           
  8313                           ; 2 bytes @ 0x14
  8314  0134                     	ds	2
  8315  0136                     main@checkSumAux:
  8316                           
  8317                           ; 1 bytes @ 0x16
  8318  0136                     	ds	1
  8319  0137                     main@notInit:
  8320                           
  8321                           ; 1 bytes @ 0x17
  8322  0137                     	ds	1
  8323  0138                     main@corrupted:
  8324                           
  8325                           ; 1 bytes @ 0x18
  8326  0138                     	ds	1
  8327  0139                     main@i:
  8328                           
  8329                           ; 2 bytes @ 0x19
  8330  0139                     	ds	2
  8331  013B                     main@c:
  8332                           
  8333                           ; 1 bytes @ 0x1B
  8334  013B                     	ds	1
  8335  013C                     main@i_2535:
  8336                           
  8337                           ; 2 bytes @ 0x1C
  8338  013C                     	ds	2
  8339  013E                     main@n:
  8340                           
  8341                           ; 2 bytes @ 0x1E
  8342  013E                     	ds	2
  8343                           
  8344                           	psect	cstackBANK1
  8345  00BC                     __pcstackBANK1:
  8346  00BC                     update_menuLCD@str:
  8347                           
  8348                           ; 8 bytes @ 0x0
  8349  00BC                     	ds	8
  8350  00C4                     update_menuLCD@tt:
  8351                           
  8352                           ; 4 bytes @ 0x8
  8353  00C4                     	ds	4
  8354  00C8                     update_menuLCD@l:
  8355                           
  8356                           ; 3 bytes @ 0xC
  8357  00C8                     	ds	3
  8358  00CB                     update_menuLCD@diff:
  8359                           
  8360                           ; 3 bytes @ 0xF
  8361  00CB                     	ds	3
  8362                           
  8363                           	psect	cstackCOMMON
  8364  0070                     __pcstackCOMMON:
  8365  0070                     ?_isdigit:
  8366  0070                     ?_i2c1_driver_open:	
  8367                           ; 1 bit 
  8368                           
  8369  0070                     ?_PMD_Initialize:	
  8370                           ; 1 bit 
  8371                           
  8372  0070                     ?_OSCILLATOR_Initialize:	
  8373                           ; 1 bytes @ 0x0
  8374                           
  8375  0070                     ?_PWM6_Initialize:	
  8376                           ; 1 bytes @ 0x0
  8377                           
  8378  0070                     ?_ADCC_Initialize:	
  8379                           ; 1 bytes @ 0x0
  8380                           
  8381  0070                     ?_TMR2_Initialize:	
  8382                           ; 1 bytes @ 0x0
  8383                           
  8384  0070                     ?_TMR1_Initialize:	
  8385                           ; 1 bytes @ 0x0
  8386                           
  8387  0070                     ?_EXT_INT_Initialize:	
  8388                           ; 1 bytes @ 0x0
  8389                           
  8390  0070                     ?_EUSART_Initialize:	
  8391                           ; 1 bytes @ 0x0
  8392                           
  8393  0070                     ?_INT_ISR:	
  8394                           ; 1 bytes @ 0x0
  8395                           
  8396  0070                     ??_INT_ISR:	
  8397                           ; 1 bytes @ 0x0
  8398                           
  8399  0070                     ?_TMR1_ISR:	
  8400                           ; 1 bytes @ 0x0
  8401                           
  8402  0070                     ?_TMR1_DefaultInterruptHandler:	
  8403                           ; 1 bytes @ 0x0
  8404                           
  8405  0070                     ??_TMR1_DefaultInterruptHandler:	
  8406                           ; 1 bytes @ 0x0
  8407                           
  8408  0070                     ?_INT_CallBack:	
  8409                           ; 1 bytes @ 0x0
  8410                           
  8411  0070                     ??_INT_CallBack:	
  8412                           ; 1 bytes @ 0x0
  8413                           
  8414  0070                     ?_EUSART_Receive_ISR:	
  8415                           ; 1 bytes @ 0x0
  8416                           
  8417  0070                     ??_EUSART_Receive_ISR:	
  8418                           ; 1 bytes @ 0x0
  8419                           
  8420  0070                     ?_EUSART_Transmit_ISR:	
  8421                           ; 1 bytes @ 0x0
  8422                           
  8423  0070                     ??_EUSART_Transmit_ISR:	
  8424                           ; 1 bytes @ 0x0
  8425                           
  8426  0070                     ?_ReadI2C:	
  8427                           ; 1 bytes @ 0x0
  8428                           
  8429  0070                     ?_WriteI2C:	
  8430                           ; 1 bytes @ 0x0
  8431                           
  8432  0070                     ?_PIN_MANAGER_Initialize:	
  8433                           ; 1 bytes @ 0x0
  8434                           
  8435  0070                     ?_SYSTEM_Initialize:	
  8436                           ; 1 bytes @ 0x0
  8437                           
  8438  0070                     ?_INTERRUPT_InterruptManager:	
  8439                           ; 1 bytes @ 0x0
  8440                           
  8441  0070                     ?_TMR1_WriteTimer:	
  8442                           ; 1 bytes @ 0x0
  8443                           
  8444  0070                     ?_TMR2_Start:	
  8445                           ; 1 bytes @ 0x0
  8446                           
  8447  0070                     ?_TMR2_StartTimer:	
  8448                           ; 1 bytes @ 0x0
  8449                           
  8450  0070                     ?_TMR2_Stop:	
  8451                           ; 1 bytes @ 0x0
  8452                           
  8453  0070                     ?_TMR2_StopTimer:	
  8454                           ; 1 bytes @ 0x0
  8455                           
  8456  0070                     ?_INT_DefaultInterruptHandler:	
  8457                           ; 1 bytes @ 0x0
  8458                           
  8459  0070                     ??_INT_DefaultInterruptHandler:	
  8460                           ; 1 bytes @ 0x0
  8461                           
  8462  0070                     ?_EUSART_is_rx_ready:	
  8463                           ; 1 bytes @ 0x0
  8464                           
  8465  0070                     ?_EUSART_Read:	
  8466                           ; 1 bytes @ 0x0
  8467                           
  8468  0070                     ?_EUSART_Write:	
  8469                           ; 1 bytes @ 0x0
  8470                           
  8471  0070                     ?_getch:	
  8472                           ; 1 bytes @ 0x0
  8473                           
  8474  0070                     ?_putch:	
  8475                           ; 1 bytes @ 0x0
  8476                           
  8477  0070                     ?_tsttc:	
  8478                           ; 1 bytes @ 0x0
  8479                           
  8480  0070                     ?_LCDsend:	
  8481                           ; 1 bytes @ 0x0
  8482                           
  8483  0070                     ?_LCDinit:	
  8484                           ; 1 bytes @ 0x0
  8485                           
  8486  0070                     ?_LCDcmd:	
  8487                           ; 1 bytes @ 0x0
  8488                           
  8489  0070                     ?_LCDchar:	
  8490                           ; 1 bytes @ 0x0
  8491                           
  8492  0070                     ?_PWM_Output_D4_Enable:	
  8493                           ; 1 bytes @ 0x0
  8494                           
  8495  0070                     ?_PWM_Output_D4_Disable:	
  8496                           ; 1 bytes @ 0x0
  8497                           
  8498  0070                     ?_Clock_ISR:	
  8499                           ; 1 bytes @ 0x0
  8500                           
  8501  0070                     ?_wirteEEPROMinit:	
  8502                           ; 1 bytes @ 0x0
  8503                           
  8504  0070                     ?_update_menuLCD:	
  8505                           ; 1 bytes @ 0x0
  8506                           
  8507  0070                     ?_monitoring_TEMP_LUM:	
  8508                           ; 1 bytes @ 0x0
  8509                           
  8510  0070                     ?_S1button:	
  8511                           ; 1 bytes @ 0x0
  8512                           
  8513  0070                     ?_checkFlags:	
  8514                           ; 1 bytes @ 0x0
  8515                           
  8516  0070                     ?_editClock:	
  8517                           ; 1 bytes @ 0x0
  8518                           
  8519  0070                     ?_editTemp:	
  8520                           ; 1 bytes @ 0x0
  8521                           
  8522  0070                     ?_editLum:	
  8523                           ; 1 bytes @ 0x0
  8524                           
  8525  0070                     ?_toggleAlarms:	
  8526                           ; 1 bytes @ 0x0
  8527                           
  8528  0070                     ?_S1_ISR:	
  8529                           ; 1 bytes @ 0x0
  8530                           
  8531  0070                     ??_S1_ISR:	
  8532                           ; 1 bytes @ 0x0
  8533                           
  8534  0070                     ?_sendOKMessage:	
  8535                           ; 1 bytes @ 0x0
  8536                           
  8537  0070                     ?_sendERRORMessage:	
  8538                           ; 1 bytes @ 0x0
  8539                           
  8540  0070                     ?_main:	
  8541                           ; 1 bytes @ 0x0
  8542                           
  8543  0070                     ?___awdiv:	
  8544                           ; 1 bytes @ 0x0
  8545                           
  8546  0070                     TMR1_WriteTimer@timerVal:	
  8547                           ; 2 bytes @ 0x0
  8548                           
  8549  0070                     ___awdiv@divisor:	
  8550                           ; 2 bytes @ 0x0
  8551                           
  8552                           
  8553                           ; 2 bytes @ 0x0
  8554  0070                     	ds	2
  8555  0072                     ??_TMR1_WriteTimer:
  8556  0072                     ___awdiv@dividend:	
  8557                           ; 1 bytes @ 0x2
  8558                           
  8559                           
  8560                           ; 2 bytes @ 0x2
  8561  0072                     	ds	2
  8562  0074                     ??___awdiv:
  8563                           
  8564                           ; 1 bytes @ 0x4
  8565  0074                     	ds	1
  8566  0075                     ___awdiv@counter:
  8567                           
  8568                           ; 1 bytes @ 0x5
  8569  0075                     	ds	1
  8570  0076                     ___awdiv@sign:
  8571                           
  8572                           ; 1 bytes @ 0x6
  8573  0076                     	ds	1
  8574  0077                     ___awdiv@quotient:
  8575                           
  8576                           ; 2 bytes @ 0x7
  8577  0077                     	ds	2
  8578  0079                     ??_TMR1_ISR:
  8579  0079                     ??_INTERRUPT_InterruptManager:	
  8580                           ; 1 bytes @ 0x9
  8581                           
  8582                           
  8583                           	psect	cstackBANK0
  8584  0020                     __pcstackBANK0:	
  8585                           ; 1 bytes @ 0x9
  8586                           
  8587  0020                     ??_Clock_ISR:
  8588                           
  8589                           ; 1 bytes @ 0x0
  8590  0020                     	ds	7
  8591  0027                     ??_PMD_Initialize:
  8592  0027                     ??_OSCILLATOR_Initialize:	
  8593                           ; 1 bytes @ 0x7
  8594                           
  8595  0027                     ??_PWM6_Initialize:	
  8596                           ; 1 bytes @ 0x7
  8597                           
  8598  0027                     ??_ADCC_Initialize:	
  8599                           ; 1 bytes @ 0x7
  8600                           
  8601  0027                     ??_TMR2_Initialize:	
  8602                           ; 1 bytes @ 0x7
  8603                           
  8604  0027                     ?_TMR1_SetInterruptHandler:	
  8605                           ; 1 bytes @ 0x7
  8606                           
  8607  0027                     ?_EUSART_SetRxInterruptHandler:	
  8608                           ; 1 bytes @ 0x7
  8609                           
  8610  0027                     ?_EUSART_SetTxInterruptHandler:	
  8611                           ; 1 bytes @ 0x7
  8612                           
  8613  0027                     ?_memset:	
  8614                           ; 1 bytes @ 0x7
  8615                           
  8616  0027                     ??_isdigit:	
  8617                           ; 1 bytes @ 0x7
  8618                           
  8619  0027                     ??_ReadI2C:	
  8620                           ; 1 bytes @ 0x7
  8621                           
  8622  0027                     ??_WriteI2C:	
  8623                           ; 1 bytes @ 0x7
  8624                           
  8625  0027                     ??_PIN_MANAGER_Initialize:	
  8626                           ; 1 bytes @ 0x7
  8627                           
  8628  0027                     ??_i2c1_driver_open:	
  8629                           ; 1 bytes @ 0x7
  8630                           
  8631  0027                     ?_PWM6_LoadDutyValue:	
  8632                           ; 1 bytes @ 0x7
  8633                           
  8634  0027                     ??_TMR2_Start:	
  8635                           ; 1 bytes @ 0x7
  8636                           
  8637  0027                     ??_TMR2_StartTimer:	
  8638                           ; 1 bytes @ 0x7
  8639                           
  8640  0027                     ??_TMR2_Stop:	
  8641                           ; 1 bytes @ 0x7
  8642                           
  8643  0027                     ??_TMR2_StopTimer:	
  8644                           ; 1 bytes @ 0x7
  8645                           
  8646  0027                     ?_INT_SetInterruptHandler:	
  8647                           ; 1 bytes @ 0x7
  8648                           
  8649  0027                     ??_EUSART_is_rx_ready:	
  8650                           ; 1 bytes @ 0x7
  8651                           
  8652  0027                     ??_EUSART_Read:	
  8653                           ; 1 bytes @ 0x7
  8654                           
  8655  0027                     ??_EUSART_Write:	
  8656                           ; 1 bytes @ 0x7
  8657                           
  8658  0027                     ?_differenceBetweenTimePeriod:	
  8659                           ; 1 bytes @ 0x7
  8660                           
  8661  0027                     ??_PWM_Output_D4_Enable:	
  8662                           ; 1 bytes @ 0x7
  8663                           
  8664  0027                     ??_PWM_Output_D4_Disable:	
  8665                           ; 1 bytes @ 0x7
  8666                           
  8667  0027                     ??_S1button:	
  8668                           ; 1 bytes @ 0x7
  8669                           
  8670  0027                     ?_ADCC_GetSingleConversion:	
  8671                           ; 1 bytes @ 0x7
  8672                           
  8673  0027                     ?___wmul:	
  8674                           ; 2 bytes @ 0x7
  8675                           
  8676  0027                     ?___lwdiv:	
  8677                           ; 2 bytes @ 0x7
  8678                           
  8679  0027                     _isdigit$2993:	
  8680                           ; 2 bytes @ 0x7
  8681                           
  8682  0027                     TMR1_SetInterruptHandler@InterruptHandler:	
  8683                           ; 1 bytes @ 0x7
  8684                           
  8685  0027                     PWM6_LoadDutyValue@dutyValue:	
  8686                           ; 2 bytes @ 0x7
  8687                           
  8688  0027                     INT_SetInterruptHandler@InterruptHandler:	
  8689                           ; 2 bytes @ 0x7
  8690                           
  8691  0027                     EUSART_SetTxInterruptHandler@interruptHandler:	
  8692                           ; 2 bytes @ 0x7
  8693                           
  8694  0027                     EUSART_SetRxInterruptHandler@interruptHandler:	
  8695                           ; 2 bytes @ 0x7
  8696                           
  8697  0027                     ___wmul@multiplier:	
  8698                           ; 2 bytes @ 0x7
  8699                           
  8700  0027                     ___lwdiv@divisor:	
  8701                           ; 2 bytes @ 0x7
  8702                           
  8703  0027                     memset@c:	
  8704                           ; 2 bytes @ 0x7
  8705                           
  8706  0027                     differenceBetweenTimePeriod@start:	
  8707                           ; 2 bytes @ 0x7
  8708                           
  8709                           
  8710                           ; 3 bytes @ 0x7
  8711  0027                     	ds	1
  8712  0028                     WriteI2C@data_out:
  8713  0028                     EUSART_Read@readValue:	
  8714                           ; 1 bytes @ 0x8
  8715                           
  8716  0028                     EUSART_Write@txData:	
  8717                           ; 1 bytes @ 0x8
  8718                           
  8719  0028                     isdigit@c:	
  8720                           ; 1 bytes @ 0x8
  8721                           
  8722                           
  8723                           ; 1 bytes @ 0x8
  8724  0028                     	ds	1
  8725  0029                     ??_TMR1_Initialize:
  8726  0029                     ??_EXT_INT_Initialize:	
  8727                           ; 1 bytes @ 0x9
  8728                           
  8729  0029                     ??_EUSART_Initialize:	
  8730                           ; 1 bytes @ 0x9
  8731                           
  8732  0029                     ??_TMR1_SetInterruptHandler:	
  8733                           ; 1 bytes @ 0x9
  8734                           
  8735  0029                     ??_EUSART_SetRxInterruptHandler:	
  8736                           ; 1 bytes @ 0x9
  8737                           
  8738  0029                     ??_EUSART_SetTxInterruptHandler:	
  8739                           ; 1 bytes @ 0x9
  8740                           
  8741  0029                     ??_PWM6_LoadDutyValue:	
  8742                           ; 1 bytes @ 0x9
  8743                           
  8744  0029                     ??_INT_SetInterruptHandler:	
  8745                           ; 1 bytes @ 0x9
  8746                           
  8747  0029                     ??_getch:	
  8748                           ; 1 bytes @ 0x9
  8749                           
  8750  0029                     ??_putch:	
  8751                           ; 1 bytes @ 0x9
  8752                           
  8753  0029                     ??_tsttc:	
  8754                           ; 1 bytes @ 0x9
  8755                           
  8756  0029                     ??_LCDsend:	
  8757                           ; 1 bytes @ 0x9
  8758                           
  8759  0029                     ?_LCDsend2x4:	
  8760                           ; 1 bytes @ 0x9
  8761                           
  8762  0029                     putch@txData:	
  8763                           ; 1 bytes @ 0x9
  8764                           
  8765  0029                     LCDsend2x4@mode:	
  8766                           ; 1 bytes @ 0x9
  8767                           
  8768  0029                     ___wmul@multiplicand:	
  8769                           ; 1 bytes @ 0x9
  8770                           
  8771  0029                     ___lwdiv@dividend:	
  8772                           ; 2 bytes @ 0x9
  8773                           
  8774  0029                     memset@n:	
  8775                           ; 2 bytes @ 0x9
  8776                           
  8777                           
  8778                           ; 2 bytes @ 0x9
  8779  0029                     	ds	1
  8780  002A                     ??_SYSTEM_Initialize:
  8781  002A                     ??_ADCC_GetSingleConversion:	
  8782                           ; 1 bytes @ 0xA
  8783                           
  8784  002A                     ??_LCDsend2x4:	
  8785                           ; 1 bytes @ 0xA
  8786                           
  8787  002A                     ?_sendMessage:	
  8788                           ; 1 bytes @ 0xA
  8789                           
  8790  002A                     ADCC_GetSingleConversion@channel:	
  8791                           ; 1 bytes @ 0xA
  8792                           
  8793  002A                     tsttc@value:	
  8794                           ; 1 bytes @ 0xA
  8795                           
  8796  002A                     LCDsend@c:	
  8797                           ; 1 bytes @ 0xA
  8798                           
  8799  002A                     sendMessage@num:	
  8800                           ; 1 bytes @ 0xA
  8801                           
  8802  002A                     differenceBetweenTimePeriod@stop:	
  8803                           ; 2 bytes @ 0xA
  8804                           
  8805                           
  8806                           ; 3 bytes @ 0xA
  8807  002A                     	ds	1
  8808  002B                     ??_memset:
  8809  002B                     ??___wmul:	
  8810                           ; 1 bytes @ 0xB
  8811                           
  8812  002B                     ??___lwdiv:	
  8813                           ; 1 bytes @ 0xB
  8814                           
  8815  002B                     ___wmul@product:	
  8816                           ; 1 bytes @ 0xB
  8817                           
  8818                           
  8819                           ; 2 bytes @ 0xB
  8820  002B                     	ds	1
  8821  002C                     LCDsend2x4@c:
  8822  002C                     sendMessage@buffer:	
  8823                           ; 1 bytes @ 0xC
  8824                           
  8825  002C                     ___lwdiv@counter:	
  8826                           ; 1 bytes @ 0xC
  8827                           
  8828  002C                     memset@p:	
  8829                           ; 1 bytes @ 0xC
  8830                           
  8831                           
  8832                           ; 1 bytes @ 0xC
  8833  002C                     	ds	1
  8834  002D                     ?_DATAEE_WriteByte:
  8835  002D                     ?_DATAEE_ReadByte:	
  8836                           ; 1 bytes @ 0xD
  8837                           
  8838  002D                     ??_sendMessage:	
  8839                           ; 1 bytes @ 0xD
  8840                           
  8841  002D                     LCDsend2x4@hc:	
  8842                           ; 1 bytes @ 0xD
  8843                           
  8844  002D                     differenceBetweenTimePeriod@diff:	
  8845                           ; 1 bytes @ 0xD
  8846                           
  8847  002D                     memset@p1:	
  8848                           ; 1 bytes @ 0xD
  8849                           
  8850  002D                     DATAEE_WriteByte@bAdd:	
  8851                           ; 1 bytes @ 0xD
  8852                           
  8853  002D                     DATAEE_ReadByte@bAdd:	
  8854                           ; 2 bytes @ 0xD
  8855                           
  8856  002D                     ___lwdiv@quotient:	
  8857                           ; 2 bytes @ 0xD
  8858                           
  8859                           
  8860                           ; 2 bytes @ 0xD
  8861  002D                     	ds	1
  8862  002E                     ??_differenceBetweenTimePeriod:
  8863  002E                     LCDsend2x4@lc:	
  8864                           ; 1 bytes @ 0xE
  8865                           
  8866  002E                     sendMessage@n:	
  8867                           ; 1 bytes @ 0xE
  8868                           
  8869                           
  8870                           ; 2 bytes @ 0xE
  8871  002E                     	ds	1
  8872  002F                     ??_DATAEE_ReadByte:
  8873  002F                     ??_LCDinit:	
  8874                           ; 1 bytes @ 0xF
  8875                           
  8876  002F                     ??_LCDcmd:	
  8877                           ; 1 bytes @ 0xF
  8878                           
  8879  002F                     ??_LCDchar:	
  8880                           ; 1 bytes @ 0xF
  8881                           
  8882  002F                     ?___lwmod:	
  8883                           ; 1 bytes @ 0xF
  8884                           
  8885  002F                     DATAEE_WriteByte@bData:	
  8886                           ; 2 bytes @ 0xF
  8887                           
  8888  002F                     LCDcmd@c:	
  8889                           ; 1 bytes @ 0xF
  8890                           
  8891  002F                     LCDchar@c:	
  8892                           ; 1 bytes @ 0xF
  8893                           
  8894  002F                     ___lwmod@divisor:	
  8895                           ; 1 bytes @ 0xF
  8896                           
  8897                           
  8898                           ; 2 bytes @ 0xF
  8899  002F                     	ds	1
  8900  0030                     ??_DATAEE_WriteByte:
  8901  0030                     ?_LCDstr:	
  8902                           ; 1 bytes @ 0x10
  8903                           
  8904  0030                     ??_sendOKMessage:	
  8905                           ; 1 bytes @ 0x10
  8906                           
  8907  0030                     ??_sendERRORMessage:	
  8908                           ; 1 bytes @ 0x10
  8909                           
  8910  0030                     DATAEE_WriteByte@GIEBitValue:	
  8911                           ; 1 bytes @ 0x10
  8912                           
  8913  0030                     LCDstr@p:	
  8914                           ; 1 bytes @ 0x10
  8915                           
  8916                           
  8917                           ; 2 bytes @ 0x10
  8918  0030                     	ds	1
  8919  0031                     ??_wirteEEPROMinit:
  8920  0031                     ??_monitoring_TEMP_LUM:	
  8921                           ; 1 bytes @ 0x11
  8922                           
  8923  0031                     sendOKMessage@cmd:	
  8924                           ; 1 bytes @ 0x11
  8925                           
  8926  0031                     sendERRORMessage@cmd:	
  8927                           ; 1 bytes @ 0x11
  8928                           
  8929  0031                     ___lwmod@dividend:	
  8930                           ; 1 bytes @ 0x11
  8931                           
  8932                           
  8933                           ; 2 bytes @ 0x11
  8934  0031                     	ds	1
  8935  0032                     ??_LCDstr:
  8936  0032                     sendOKMessage@bufw:	
  8937                           ; 1 bytes @ 0x12
  8938                           
  8939  0032                     sendERRORMessage@bufw:	
  8940                           ; 4 bytes @ 0x12
  8941                           
  8942                           
  8943                           ; 4 bytes @ 0x12
  8944  0032                     	ds	1
  8945  0033                     ??___lwmod:
  8946                           
  8947                           ; 1 bytes @ 0x13
  8948  0033                     	ds	1
  8949  0034                     ___lwmod@counter:
  8950                           
  8951                           ; 1 bytes @ 0x14
  8952  0034                     	ds	1
  8953  0035                     ?_sprintf:
  8954  0035                     LCDstr@c:	
  8955                           ; 2 bytes @ 0x15
  8956                           
  8957  0035                     sprintf@f:	
  8958                           ; 1 bytes @ 0x15
  8959                           
  8960                           
  8961                           ; 2 bytes @ 0x15
  8962  0035                     	ds	1
  8963  0036                     ?_cmd_rc:
  8964  0036                     ?_cmd_sc:	
  8965                           ; 1 bytes @ 0x16
  8966                           
  8967  0036                     ?_cmd_rtl:	
  8968                           ; 1 bytes @ 0x16
  8969                           
  8970  0036                     ?_cmd_rp:	
  8971                           ; 1 bytes @ 0x16
  8972                           
  8973  0036                     ?_cmd_mmp:	
  8974                           ; 1 bytes @ 0x16
  8975                           
  8976  0036                     ?_cmd_mta:	
  8977                           ; 1 bytes @ 0x16
  8978                           
  8979  0036                     ?_cmd_ra:	
  8980                           ; 1 bytes @ 0x16
  8981                           
  8982  0036                     ?_cmd_dac:	
  8983                           ; 1 bytes @ 0x16
  8984                           
  8985  0036                     ?_cmd_dtl:	
  8986                           ; 1 bytes @ 0x16
  8987                           
  8988  0036                     ?_cmd_aa:	
  8989                           ; 1 bytes @ 0x16
  8990                           
  8991  0036                     ?_cmd_ir:	
  8992                           ; 1 bytes @ 0x16
  8993                           
  8994  0036                     ?_cmd_trc:	
  8995                           ; 1 bytes @ 0x16
  8996                           
  8997  0036                     ?_cmd_tri:	
  8998                           ; 1 bytes @ 0x16
  8999                           
  9000  0036                     cmd_rc@num:	
  9001                           ; 1 bytes @ 0x16
  9002                           
  9003  0036                     cmd_sc@num:	
  9004                           ; 2 bytes @ 0x16
  9005                           
  9006  0036                     cmd_rtl@num:	
  9007                           ; 2 bytes @ 0x16
  9008                           
  9009  0036                     cmd_rp@num:	
  9010                           ; 2 bytes @ 0x16
  9011                           
  9012  0036                     cmd_mmp@num:	
  9013                           ; 2 bytes @ 0x16
  9014                           
  9015  0036                     cmd_mta@num:	
  9016                           ; 2 bytes @ 0x16
  9017                           
  9018  0036                     cmd_ra@num:	
  9019                           ; 2 bytes @ 0x16
  9020                           
  9021  0036                     cmd_dac@num:	
  9022                           ; 2 bytes @ 0x16
  9023                           
  9024  0036                     cmd_dtl@num:	
  9025                           ; 2 bytes @ 0x16
  9026                           
  9027  0036                     cmd_aa@num:	
  9028                           ; 2 bytes @ 0x16
  9029                           
  9030  0036                     cmd_ir@num:	
  9031                           ; 2 bytes @ 0x16
  9032                           
  9033  0036                     cmd_trc@num:	
  9034                           ; 2 bytes @ 0x16
  9035                           
  9036  0036                     cmd_tri@num:	
  9037                           ; 2 bytes @ 0x16
  9038                           
  9039                           
  9040                           ; 2 bytes @ 0x16
  9041  0036                     	ds	2
  9042  0038                     cmd_rc@buffer:
  9043  0038                     cmd_sc@buffer:	
  9044                           ; 1 bytes @ 0x18
  9045                           
  9046  0038                     cmd_rtl@buffer:	
  9047                           ; 1 bytes @ 0x18
  9048                           
  9049  0038                     cmd_rp@buffer:	
  9050                           ; 1 bytes @ 0x18
  9051                           
  9052  0038                     cmd_mmp@buffer:	
  9053                           ; 1 bytes @ 0x18
  9054                           
  9055  0038                     cmd_mta@buffer:	
  9056                           ; 1 bytes @ 0x18
  9057                           
  9058  0038                     cmd_ra@buffer:	
  9059                           ; 1 bytes @ 0x18
  9060                           
  9061  0038                     cmd_dac@buffer:	
  9062                           ; 1 bytes @ 0x18
  9063                           
  9064  0038                     cmd_dtl@buffer:	
  9065                           ; 1 bytes @ 0x18
  9066                           
  9067  0038                     cmd_aa@buffer:	
  9068                           ; 1 bytes @ 0x18
  9069                           
  9070  0038                     cmd_ir@buffer:	
  9071                           ; 1 bytes @ 0x18
  9072                           
  9073  0038                     cmd_trc@buffer:	
  9074                           ; 1 bytes @ 0x18
  9075                           
  9076  0038                     cmd_tri@buffer:	
  9077                           ; 1 bytes @ 0x18
  9078                           
  9079                           
  9080                           ; 1 bytes @ 0x18
  9081  0038                     	ds	1
  9082  0039                     ??_cmd_rc:
  9083  0039                     ??_cmd_sc:	
  9084                           ; 1 bytes @ 0x19
  9085                           
  9086  0039                     ??_cmd_rtl:	
  9087                           ; 1 bytes @ 0x19
  9088                           
  9089  0039                     ??_cmd_rp:	
  9090                           ; 1 bytes @ 0x19
  9091                           
  9092  0039                     ??_cmd_mmp:	
  9093                           ; 1 bytes @ 0x19
  9094                           
  9095  0039                     ??_cmd_mta:	
  9096                           ; 1 bytes @ 0x19
  9097                           
  9098  0039                     ??_cmd_ra:	
  9099                           ; 1 bytes @ 0x19
  9100                           
  9101  0039                     ??_cmd_dac:	
  9102                           ; 1 bytes @ 0x19
  9103                           
  9104  0039                     ??_cmd_dtl:	
  9105                           ; 1 bytes @ 0x19
  9106                           
  9107  0039                     ??_cmd_aa:	
  9108                           ; 1 bytes @ 0x19
  9109                           
  9110  0039                     ??_cmd_ir:	
  9111                           ; 1 bytes @ 0x19
  9112                           
  9113  0039                     ??_cmd_trc:	
  9114                           ; 1 bytes @ 0x19
  9115                           
  9116  0039                     ??_cmd_tri:	
  9117                           ; 1 bytes @ 0x19
  9118                           
  9119                           
  9120                           ; 1 bytes @ 0x19
  9121  0039                     	ds	1
  9122  003A                     cmd_rtl@buff:
  9123  003A                     cmd_rp@buff:	
  9124                           ; 5 bytes @ 0x1A
  9125                           
  9126  003A                     cmd_rc@buff:	
  9127                           ; 5 bytes @ 0x1A
  9128                           
  9129  003A                     cmd_ir@buff:	
  9130                           ; 6 bytes @ 0x1A
  9131                           
  9132  003A                     cmd_ra@buff:	
  9133                           ; 7 bytes @ 0x1A
  9134                           
  9135                           
  9136                           ; 9 bytes @ 0x1A
  9137  003A                     	ds	1
  9138  003B                     cmd_sc@h:
  9139  003B                     cmd_dac@h:	
  9140                           ; 2 bytes @ 0x1B
  9141                           
  9142  003B                     cmd_dtl@tempAux:	
  9143                           ; 2 bytes @ 0x1B
  9144                           
  9145                           
  9146                           ; 2 bytes @ 0x1B
  9147  003B                     	ds	2
  9148  003D                     ??_sprintf:
  9149  003D                     cmd_sc@m:	
  9150                           ; 1 bytes @ 0x1D
  9151                           
  9152  003D                     cmd_dac@m:	
  9153                           ; 2 bytes @ 0x1D
  9154                           
  9155  003D                     cmd_dtl@lumAux:	
  9156                           ; 2 bytes @ 0x1D
  9157                           
  9158                           
  9159                           ; 2 bytes @ 0x1D
  9160  003D                     	ds	1
  9161  003E                     cmd_tri@buffData:
  9162                           
  9163                           ; 5 bytes @ 0x1E
  9164  003E                     	ds	1
  9165  003F                     cmd_sc@s:
  9166  003F                     cmd_dac@s:	
  9167                           ; 2 bytes @ 0x1F
  9168                           
  9169  003F                     cmd_trc@buffData:	
  9170                           ; 2 bytes @ 0x1F
  9171                           
  9172                           
  9173                           ; 5 bytes @ 0x1F
  9174  003F                     	ds	2
  9175  0041                     sprintf@ap:
  9176                           
  9177                           ; 1 bytes @ 0x21
  9178  0041                     	ds	1
  9179  0042                     sprintf@prec:
  9180                           
  9181                           ; 1 bytes @ 0x22
  9182  0042                     	ds	1
  9183  0043                     sprintf@val:
  9184  0043                     cmd_tri@buffInit:	
  9185                           ; 2 bytes @ 0x23
  9186                           
  9187                           
  9188                           ; 4 bytes @ 0x23
  9189  0043                     	ds	1
  9190  0044                     cmd_trc@buffInit:
  9191                           
  9192                           ; 3 bytes @ 0x24
  9193  0044                     	ds	1
  9194  0045                     sprintf@flag:
  9195                           
  9196                           ; 1 bytes @ 0x25
  9197  0045                     	ds	1
  9198  0046                     sprintf@width:
  9199                           
  9200                           ; 2 bytes @ 0x26
  9201  0046                     	ds	1
  9202  0047                     cmd_tri@buffEOM:
  9203  0047                     cmd_trc@i:	
  9204                           ; 1 bytes @ 0x27
  9205                           
  9206                           
  9207                           ; 2 bytes @ 0x27
  9208  0047                     	ds	1
  9209  0048                     sprintf@c:
  9210  0048                     cmd_tri@maxReadings:	
  9211                           ; 1 bytes @ 0x28
  9212                           
  9213                           
  9214                           ; 2 bytes @ 0x28
  9215  0048                     	ds	1
  9216  0049                     sprintf@sp:
  9217  0049                     cmd_trc@address:	
  9218                           ; 1 bytes @ 0x29
  9219                           
  9220                           
  9221                           ; 2 bytes @ 0x29
  9222  0049                     	ds	1
  9223  004A                     ??_update_menuLCD:
  9224  004A                     cmd_tri@i:	
  9225                           ; 1 bytes @ 0x2A
  9226                           
  9227                           
  9228                           ; 2 bytes @ 0x2A
  9229  004A                     	ds	1
  9230  004B                     cmd_trc@buffEOM:
  9231                           
  9232                           ; 1 bytes @ 0x2B
  9233  004B                     	ds	1
  9234  004C                     cmd_tri@index:
  9235  004C                     cmd_trc@maxReadings:	
  9236                           ; 1 bytes @ 0x2C
  9237                           
  9238                           
  9239                           ; 2 bytes @ 0x2C
  9240  004C                     	ds	1
  9241  004D                     cmd_tri@n:
  9242                           
  9243                           ; 1 bytes @ 0x2D
  9244  004D                     	ds	1
  9245  004E                     cmd_tri@j:
  9246  004E                     cmd_trc@n:	
  9247                           ; 1 bytes @ 0x2E
  9248                           
  9249                           
  9250                           ; 2 bytes @ 0x2E
  9251  004E                     	ds	1
  9252  004F                     cmd_tri@startingIndex:
  9253                           
  9254                           ; 2 bytes @ 0x2F
  9255  004F                     	ds	1
  9256  0050                     ??_checkFlags:
  9257  0050                     cmd_trc@j:	
  9258                           ; 1 bytes @ 0x30
  9259                           
  9260                           
  9261                           ; 1 bytes @ 0x30
  9262  0050                     	ds	1
  9263  0051                     checkFlags@buff:
  9264                           
  9265                           ; 7 bytes @ 0x31
  9266  0051                     	ds	7
  9267  0058                     ??_editClock:
  9268  0058                     ??_editTemp:	
  9269                           ; 1 bytes @ 0x38
  9270                           
  9271  0058                     ??_editLum:	
  9272                           ; 1 bytes @ 0x38
  9273                           
  9274  0058                     ??_toggleAlarms:	
  9275                           ; 1 bytes @ 0x38
  9276                           
  9277                           
  9278                           ; 1 bytes @ 0x38
  9279  0058                     	ds	1
  9280  0059                     ??_main:
  9281                           
  9282                           ; 1 bytes @ 0x39
  9283  0059                     	ds	3
  9284                           
  9285                           	psect	maintext
  9286  0094                     __pmaintext:	
  9287 ;;
  9288 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  9289 ;;
  9290 ;; *************** function _main *****************
  9291 ;; Defined at:
  9292 ;;		line 1110 in file "main.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;		None
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;  i               2   25[BANK2 ] int 
  9297 ;;  buff           20    0[BANK2 ] unsigned char [20]
  9298 ;;  n               2   30[BANK2 ] int 
  9299 ;;  i               2   28[BANK2 ] int 
  9300 ;;  c               1   27[BANK2 ] unsigned char 
  9301 ;;  corrupted       1   24[BANK2 ] unsigned char 
  9302 ;;  notInit         1   23[BANK2 ] unsigned char 
  9303 ;;  checkSumAux     1   22[BANK2 ] unsigned char 
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      void 
  9306 ;; Registers used:
  9307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9308 ;; Tracked objects:
  9309 ;;		On entry : B1F/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Locals:         0       0       0      32       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Totals:         0       3       0      32       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;Total ram usage:       35 bytes
  9318 ;; Hardware stack levels required when called:   11
  9319 ;; This function calls:
  9320 ;;		_DATAEE_ReadByte
  9321 ;;		_DATAEE_WriteByte
  9322 ;;		_EUSART_is_rx_ready
  9323 ;;		_INT_SetInterruptHandler
  9324 ;;		_LCDinit
  9325 ;;		_PWM6_LoadDutyValue
  9326 ;;		_PWM_Output_D4_Disable
  9327 ;;		_SYSTEM_Initialize
  9328 ;;		_TMR1_SetInterruptHandler
  9329 ;;		_TMR2_StopTimer
  9330 ;;		___wmul
  9331 ;;		_checkFlags
  9332 ;;		_cmd_aa
  9333 ;;		_cmd_dac
  9334 ;;		_cmd_dtl
  9335 ;;		_cmd_ir
  9336 ;;		_cmd_mmp
  9337 ;;		_cmd_mta
  9338 ;;		_cmd_ra
  9339 ;;		_cmd_rc
  9340 ;;		_cmd_rp
  9341 ;;		_cmd_rtl
  9342 ;;		_cmd_sc
  9343 ;;		_cmd_trc
  9344 ;;		_cmd_tri
  9345 ;;		_editClock
  9346 ;;		_editLum
  9347 ;;		_editTemp
  9348 ;;		_getch
  9349 ;;		_i2c1_driver_open
  9350 ;;		_memset
  9351 ;;		_toggleAlarms
  9352 ;; This function is called by:
  9353 ;;		Startup code after reset
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           
  9358                           ;psect for function _main
  9359  0094                     _main:
  9360  0094                     l7602:	
  9361                           ;incstack = 0
  9362                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9363                           
  9364                           
  9365                           ;main.c: 1113: SYSTEM_Initialize();
  9366  0094  3190  2068  3180   	fcall	_SYSTEM_Initialize
  9367                           
  9368                           ;main.c: 1115: PWM6_LoadDutyValue(0);
  9369  0097  3000               	movlw	0
  9370  0098  0020               	movlb	0	; select bank0
  9371  0099  00A7               	movwf	PWM6_LoadDutyValue@dutyValue
  9372  009A  00A8               	movwf	PWM6_LoadDutyValue@dutyValue+1
  9373  009B  319F  27E7  3180   	fcall	_PWM6_LoadDutyValue
  9374  009E                     l7604:
  9375                           
  9376                           ;main.c: 1116: TMR2_StopTimer();
  9377  009E  319E  26DB  3180   	fcall	_TMR2_StopTimer
  9378  00A1                     l7606:
  9379                           
  9380                           ;main.c: 1117: PWM_Output_D4_Disable();
  9381  00A1  319E  26D1  3180   	fcall	_PWM_Output_D4_Disable
  9382                           
  9383                           ;main.c: 1119: TMR1_SetInterruptHandler(Clock_ISR);
  9384  00A4  3013               	movlw	low _Clock_ISR
  9385  00A5  0020               	movlb	0	; select bank0
  9386  00A6  00A7               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9387  00A7  300A               	movlw	high _Clock_ISR
  9388  00A8  00A8               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9389  00A9  319F  2733  3180   	fcall	_TMR1_SetInterruptHandler
  9390                           
  9391                           ;main.c: 1121: INT_SetInterruptHandler(S1_ISR);
  9392  00AC  3006               	movlw	low _S1_ISR
  9393  00AD  0020               	movlb	0	; select bank0
  9394  00AE  00A7               	movwf	INT_SetInterruptHandler@InterruptHandler
  9395  00AF  301F               	movlw	high _S1_ISR
  9396  00B0  00A8               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  9397  00B1  319F  2721  3180   	fcall	_INT_SetInterruptHandler
  9398  00B4                     l7608:
  9399                           
  9400                           ;main.c: 1123: uint8_t checkSumAux = 0;
  9401  00B4  0022               	movlb	2	; select bank2
  9402  00B5  01B6               	clrf	main@checkSumAux^(0+256)
  9403  00B6                     l7610:
  9404                           
  9405                           ;main.c: 1124: bool notInit = 1;
  9406  00B6  01B7               	clrf	main@notInit^(0+256)
  9407  00B7  0AB7               	incf	main@notInit^(0+256),f
  9408  00B8                     l7612:
  9409                           
  9410                           ;main.c: 1125: bool corrupted = 0;
  9411  00B8  01B8               	clrf	main@corrupted^(0+256)
  9412  00B9                     l7614:
  9413                           
  9414                           ;main.c: 1126: if(DATAEE_ReadByte(0x7000) == 'S'){
  9415  00B9  3000               	movlw	0
  9416  00BA  0020               	movlb	0	; select bank0
  9417  00BB  00AD               	movwf	DATAEE_ReadByte@bAdd
  9418  00BC  3070               	movlw	112
  9419  00BD  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9420  00BE  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9421  00C1  3A53               	xorlw	83
  9422  00C2  1D03               	skipz
  9423  00C3  28C5               	goto	u9321
  9424  00C4  28C6               	goto	u9320
  9425  00C5                     u9321:
  9426  00C5  290B               	goto	l7634
  9427  00C6                     u9320:
  9428  00C6                     l7616:
  9429                           
  9430                           ;main.c: 1127: notInit = 0;
  9431  00C6  0022               	movlb	2	; select bank2
  9432  00C7  01B7               	clrf	main@notInit^(0+256)
  9433  00C8                     l7618:
  9434                           
  9435                           ;main.c: 1128: for(int i = 1; i < 13; i++){
  9436  00C8  3001               	movlw	1
  9437  00C9  00B9               	movwf	main@i^(0+256)
  9438  00CA  3000               	movlw	0
  9439  00CB  00BA               	movwf	(main@i^(0+256)+1)
  9440  00CC                     l7624:
  9441                           
  9442                           ;main.c: 1129: checkSumAux += DATAEE_ReadByte(0x7000 + (i*8));
  9443  00CC  0022               	movlb	2	; select bank2
  9444  00CD  083A               	movf	(main@i+1)^(0+256),w
  9445  00CE  0020               	movlb	0	; select bank0
  9446  00CF  00DA               	movwf	??_main+1
  9447  00D0  0022               	movlb	2	; select bank2
  9448  00D1  0839               	movf	main@i^(0+256),w
  9449  00D2  0020               	movlb	0	; select bank0
  9450  00D3  00D9               	movwf	??_main
  9451  00D4  35D9               	lslf	??_main,f
  9452  00D5  0DDA               	rlf	??_main+1,f
  9453  00D6  35D9               	lslf	??_main,f
  9454  00D7  0DDA               	rlf	??_main+1,f
  9455  00D8  35D9               	lslf	??_main,f
  9456  00D9  0DDA               	rlf	??_main+1,f
  9457  00DA  0859               	movf	??_main,w
  9458  00DB  3E00               	addlw	0
  9459  00DC  00AD               	movwf	DATAEE_ReadByte@bAdd
  9460  00DD  3070               	movlw	112
  9461  00DE  3D5A               	addwfc	??_main+1,w
  9462  00DF  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9463  00E0  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9464  00E3  0020               	movlb	0	; select bank0
  9465  00E4  00DB               	movwf	??_main+2
  9466  00E5  085B               	movf	??_main+2,w
  9467  00E6  0022               	movlb	2	; select bank2
  9468  00E7  07B6               	addwf	main@checkSumAux^(0+256),f
  9469  00E8                     l7626:
  9470  00E8  3001               	movlw	1
  9471  00E9  07B9               	addwf	main@i^(0+256),f
  9472  00EA  3000               	movlw	0
  9473  00EB  3DBA               	addwfc	(main@i+1)^(0+256),f
  9474  00EC                     l7628:
  9475  00EC  083A               	movf	(main@i+1)^(0+256),w
  9476  00ED  3A80               	xorlw	128
  9477  00EE  0020               	movlb	0	; select bank0
  9478  00EF  00D9               	movwf	??_main
  9479  00F0  3080               	movlw	128
  9480  00F1  0259               	subwf	??_main,w
  9481  00F2  1D03               	skipz
  9482  00F3  28F7               	goto	u9335
  9483  00F4  300D               	movlw	13
  9484  00F5  0022               	movlb	2	; select bank2
  9485  00F6  0239               	subwf	main@i^(0+256),w
  9486  00F7                     u9335:
  9487  00F7  1C03               	skipc
  9488  00F8  28FA               	goto	u9331
  9489  00F9  28FB               	goto	u9330
  9490  00FA                     u9331:
  9491  00FA  28CC               	goto	l7624
  9492  00FB                     u9330:
  9493  00FB                     l7630:
  9494                           
  9495                           ;main.c: 1130: };main.c: 1131: if(checkSumAux != DATAEE_ReadByte(0x7000 + (13*8))){
  9496  00FB  3068               	movlw	104
  9497  00FC  0020               	movlb	0	; select bank0
  9498  00FD  00AD               	movwf	DATAEE_ReadByte@bAdd
  9499  00FE  3070               	movlw	112
  9500  00FF  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9501  0100  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9502  0103  0022               	movlb	2	; select bank2
  9503  0104  0636               	xorwf	main@checkSumAux^(0+256),w
  9504  0105  1903               	skipnz
  9505  0106  2908               	goto	u9341
  9506  0107  2909               	goto	u9340
  9507  0108                     u9341:
  9508  0108  290B               	goto	l7634
  9509  0109                     u9340:
  9510  0109                     l7632:
  9511                           
  9512                           ;main.c: 1132: corrupted = 1;
  9513  0109  01B8               	clrf	main@corrupted^(0+256)
  9514  010A  0AB8               	incf	main@corrupted^(0+256),f
  9515  010B                     l7634:
  9516                           
  9517                           ;main.c: 1133: };main.c: 1134: };main.c: 1136: if(notInit || corrupted){
  9518  010B  0022               	movlb	2	; select bank2
  9519  010C  0837               	movf	main@notInit^(0+256),w
  9520  010D  1D03               	btfss	3,2
  9521  010E  2910               	goto	u9351
  9522  010F  2911               	goto	u9350
  9523  0110                     u9351:
  9524  0110  2916               	goto	l7638
  9525  0111                     u9350:
  9526  0111                     l7636:
  9527  0111  0838               	movf	main@corrupted^(0+256),w
  9528  0112  1903               	btfsc	3,2
  9529  0113  2915               	goto	u9361
  9530  0114  2916               	goto	u9360
  9531  0115                     u9361:
  9532  0115  29AF               	goto	l7640
  9533  0116                     u9360:
  9534  0116                     l7638:
  9535                           
  9536                           ;main.c: 1137: DATAEE_WriteByte( 0x7000 + (0), 'S');
  9537  0116  3000               	movlw	0
  9538  0117  0020               	movlb	0	; select bank0
  9539  0118  00AD               	movwf	DATAEE_WriteByte@bAdd
  9540  0119  3070               	movlw	112
  9541  011A  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9542  011B  3053               	movlw	83
  9543  011C  00D9               	movwf	??_main
  9544  011D  0859               	movf	??_main,w
  9545  011E  00AF               	movwf	DATAEE_WriteByte@bData
  9546  011F  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9547                           
  9548                           ;main.c: 1138: DATAEE_WriteByte( 0x7000 + (1), 25);
  9549  0122  3001               	movlw	1
  9550  0123  0020               	movlb	0	; select bank0
  9551  0124  00AD               	movwf	DATAEE_WriteByte@bAdd
  9552  0125  3070               	movlw	112
  9553  0126  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9554  0127  3019               	movlw	25
  9555  0128  00D9               	movwf	??_main
  9556  0129  0859               	movf	??_main,w
  9557  012A  00AF               	movwf	DATAEE_WriteByte@bData
  9558  012B  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9559                           
  9560                           ;main.c: 1139: DATAEE_WriteByte( 0x7000 + (2), 3);
  9561  012E  3002               	movlw	2
  9562  012F  0020               	movlb	0	; select bank0
  9563  0130  00AD               	movwf	DATAEE_WriteByte@bAdd
  9564  0131  3070               	movlw	112
  9565  0132  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9566  0133  3003               	movlw	3
  9567  0134  00D9               	movwf	??_main
  9568  0135  0859               	movf	??_main,w
  9569  0136  00AF               	movwf	DATAEE_WriteByte@bData
  9570  0137  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9571                           
  9572                           ;main.c: 1140: DATAEE_WriteByte( 0x7000 + (3), 5);
  9573  013A  3003               	movlw	3
  9574  013B  0020               	movlb	0	; select bank0
  9575  013C  00AD               	movwf	DATAEE_WriteByte@bAdd
  9576  013D  3070               	movlw	112
  9577  013E  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9578  013F  3005               	movlw	5
  9579  0140  00D9               	movwf	??_main
  9580  0141  0859               	movf	??_main,w
  9581  0142  00AF               	movwf	DATAEE_WriteByte@bData
  9582  0143  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9583                           
  9584                           ;main.c: 1141: DATAEE_WriteByte( 0x7000 + (4), 12);
  9585  0146  3004               	movlw	4
  9586  0147  0020               	movlb	0	; select bank0
  9587  0148  00AD               	movwf	DATAEE_WriteByte@bAdd
  9588  0149  3070               	movlw	112
  9589  014A  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9590  014B  300C               	movlw	12
  9591  014C  00D9               	movwf	??_main
  9592  014D  0859               	movf	??_main,w
  9593  014E  00AF               	movwf	DATAEE_WriteByte@bData
  9594  014F  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9595                           
  9596                           ;main.c: 1142: DATAEE_WriteByte( 0x7000 + (5), 0);
  9597  0152  3005               	movlw	5
  9598  0153  0020               	movlb	0	; select bank0
  9599  0154  00AD               	movwf	DATAEE_WriteByte@bAdd
  9600  0155  3070               	movlw	112
  9601  0156  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9602  0157  01AF               	clrf	DATAEE_WriteByte@bData
  9603  0158  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9604                           
  9605                           ;main.c: 1143: DATAEE_WriteByte( 0x7000 + (6), 0);
  9606  015B  3006               	movlw	6
  9607  015C  0020               	movlb	0	; select bank0
  9608  015D  00AD               	movwf	DATAEE_WriteByte@bAdd
  9609  015E  3070               	movlw	112
  9610  015F  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9611  0160  01AF               	clrf	DATAEE_WriteByte@bData
  9612  0161  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9613                           
  9614                           ;main.c: 1144: DATAEE_WriteByte( 0x7000 + (7), 28);
  9615  0164  3007               	movlw	7
  9616  0165  0020               	movlb	0	; select bank0
  9617  0166  00AD               	movwf	DATAEE_WriteByte@bAdd
  9618  0167  3070               	movlw	112
  9619  0168  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9620  0169  301C               	movlw	28
  9621  016A  00D9               	movwf	??_main
  9622  016B  0859               	movf	??_main,w
  9623  016C  00AF               	movwf	DATAEE_WriteByte@bData
  9624  016D  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9625                           
  9626                           ;main.c: 1145: DATAEE_WriteByte( 0x7000 + (8), 4);
  9627  0170  3008               	movlw	8
  9628  0171  0020               	movlb	0	; select bank0
  9629  0172  00AD               	movwf	DATAEE_WriteByte@bAdd
  9630  0173  3070               	movlw	112
  9631  0174  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9632  0175  3004               	movlw	4
  9633  0176  00D9               	movwf	??_main
  9634  0177  0859               	movf	??_main,w
  9635  0178  00AF               	movwf	DATAEE_WriteByte@bData
  9636  0179  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9637                           
  9638                           ;main.c: 1146: DATAEE_WriteByte( 0x7000 + (9), 'a');
  9639  017C  3009               	movlw	9
  9640  017D  0020               	movlb	0	; select bank0
  9641  017E  00AD               	movwf	DATAEE_WriteByte@bAdd
  9642  017F  3070               	movlw	112
  9643  0180  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9644  0181  3061               	movlw	97
  9645  0182  00D9               	movwf	??_main
  9646  0183  0859               	movf	??_main,w
  9647  0184  00AF               	movwf	DATAEE_WriteByte@bData
  9648  0185  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9649                           
  9650                           ;main.c: 1147: DATAEE_WriteByte( 0x7000 + (10), 0);
  9651  0188  300A               	movlw	10
  9652  0189  0020               	movlb	0	; select bank0
  9653  018A  00AD               	movwf	DATAEE_WriteByte@bAdd
  9654  018B  3070               	movlw	112
  9655  018C  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9656  018D  01AF               	clrf	DATAEE_WriteByte@bData
  9657  018E  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9658                           
  9659                           ;main.c: 1148: DATAEE_WriteByte( 0x7000 + (11), 0);
  9660  0191  300B               	movlw	11
  9661  0192  0020               	movlb	0	; select bank0
  9662  0193  00AD               	movwf	DATAEE_WriteByte@bAdd
  9663  0194  3070               	movlw	112
  9664  0195  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9665  0196  01AF               	clrf	DATAEE_WriteByte@bData
  9666  0197  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9667                           
  9668                           ;main.c: 1149: DATAEE_WriteByte( 0x7000 + (12), 0);
  9669  019A  300C               	movlw	12
  9670  019B  0020               	movlb	0	; select bank0
  9671  019C  00AD               	movwf	DATAEE_WriteByte@bAdd
  9672  019D  3070               	movlw	112
  9673  019E  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9674  019F  01AF               	clrf	DATAEE_WriteByte@bData
  9675  01A0  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9676                           
  9677                           ;main.c: 1150: DATAEE_WriteByte( 0x7000 + (13), 174);
  9678  01A3  300D               	movlw	13
  9679  01A4  0020               	movlb	0	; select bank0
  9680  01A5  00AD               	movwf	DATAEE_WriteByte@bAdd
  9681  01A6  3070               	movlw	112
  9682  01A7  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9683  01A8  30AE               	movlw	174
  9684  01A9  00D9               	movwf	??_main
  9685  01AA  0859               	movf	??_main,w
  9686  01AB  00AF               	movwf	DATAEE_WriteByte@bData
  9687  01AC  3191  21C6  3180   	fcall	_DATAEE_WriteByte
  9688  01AF                     l7640:
  9689                           
  9690                           ;main.c: 1151: };main.c: 1153: NREG = DATAEE_ReadByte(0x7000 + (1));
  9691  01AF  3001               	movlw	1
  9692  01B0  0020               	movlb	0	; select bank0
  9693  01B1  00AD               	movwf	DATAEE_ReadByte@bAdd
  9694  01B2  3070               	movlw	112
  9695  01B3  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9696  01B4  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9697  01B7  0020               	movlb	0	; select bank0
  9698  01B8  00D9               	movwf	??_main
  9699  01B9  0859               	movf	??_main,w
  9700  01BA  00FD               	movwf	_NREG
  9701  01BB                     l7642:
  9702                           
  9703                           ;main.c: 1154: PMON = DATAEE_ReadByte(0x7000 + (2));
  9704  01BB  3002               	movlw	2
  9705  01BC  00AD               	movwf	DATAEE_ReadByte@bAdd
  9706  01BD  3070               	movlw	112
  9707  01BE  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9708  01BF  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9709  01C2  0020               	movlb	0	; select bank0
  9710  01C3  00D9               	movwf	??_main
  9711  01C4  0859               	movf	??_main,w
  9712  01C5  0021               	movlb	1	; select bank1
  9713  01C6  00D7               	movwf	_PMON^(0+128)
  9714  01C7                     l7644:
  9715                           
  9716                           ;main.c: 1155: TALA = DATAEE_ReadByte(0x7000 + (3));
  9717  01C7  3003               	movlw	3
  9718  01C8  0020               	movlb	0	; select bank0
  9719  01C9  00AD               	movwf	DATAEE_ReadByte@bAdd
  9720  01CA  3070               	movlw	112
  9721  01CB  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9722  01CC  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9723  01CF  0020               	movlb	0	; select bank0
  9724  01D0  00D9               	movwf	??_main
  9725  01D1  0859               	movf	??_main,w
  9726  01D2  0021               	movlb	1	; select bank1
  9727  01D3  00D6               	movwf	_TALA^(0+128)
  9728  01D4                     l7646:
  9729                           
  9730                           ;main.c: 1156: clkAlarm.alarmVal.h = DATAEE_ReadByte(0x7000 + (4));
  9731  01D4  3004               	movlw	4
  9732  01D5  0020               	movlb	0	; select bank0
  9733  01D6  00AD               	movwf	DATAEE_ReadByte@bAdd
  9734  01D7  3070               	movlw	112
  9735  01D8  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9736  01D9  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9737  01DC  0020               	movlb	0	; select bank0
  9738  01DD  00D9               	movwf	??_main
  9739  01DE  0859               	movf	??_main,w
  9740  01DF  0021               	movlb	1	; select bank1
  9741  01E0  00A0               	movwf	_clkAlarm^(0+128)
  9742  01E1                     l7648:
  9743                           
  9744                           ;main.c: 1157: clkAlarm.alarmVal.m = DATAEE_ReadByte(0x7000 + (5));
  9745  01E1  3005               	movlw	5
  9746  01E2  0020               	movlb	0	; select bank0
  9747  01E3  00AD               	movwf	DATAEE_ReadByte@bAdd
  9748  01E4  3070               	movlw	112
  9749  01E5  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9750  01E6  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9751  01E9  0020               	movlb	0	; select bank0
  9752  01EA  00D9               	movwf	??_main
  9753  01EB  0859               	movf	??_main,w
  9754  01EC  0021               	movlb	1	; select bank1
  9755  01ED  00A1               	movwf	(_clkAlarm^(0+128)+1)
  9756  01EE                     l7650:
  9757                           
  9758                           ;main.c: 1158: clkAlarm.alarmVal.s = DATAEE_ReadByte(0x7000 + (6));
  9759  01EE  3006               	movlw	6
  9760  01EF  0020               	movlb	0	; select bank0
  9761  01F0  00AD               	movwf	DATAEE_ReadByte@bAdd
  9762  01F1  3070               	movlw	112
  9763  01F2  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9764  01F3  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9765  01F6  0020               	movlb	0	; select bank0
  9766  01F7  00D9               	movwf	??_main
  9767  01F8  0859               	movf	??_main,w
  9768  01F9  0021               	movlb	1	; select bank1
  9769  01FA  00A2               	movwf	(_clkAlarm^(0+128)+2)
  9770  01FB                     l7652:
  9771                           
  9772                           ;main.c: 1159: tempAlarm.alarmTemp = DATAEE_ReadByte(0x7000 + (7));
  9773  01FB  3007               	movlw	7
  9774  01FC  0020               	movlb	0	; select bank0
  9775  01FD  00AD               	movwf	DATAEE_ReadByte@bAdd
  9776  01FE  3070               	movlw	112
  9777  01FF  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9778  0200  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9779  0203  0020               	movlb	0	; select bank0
  9780  0204  00D9               	movwf	??_main
  9781  0205  0859               	movf	??_main,w
  9782  0206  0021               	movlb	1	; select bank1
  9783  0207  00A7               	movwf	_tempAlarm^(0+128)
  9784  0208                     l7654:
  9785                           
  9786                           ;main.c: 1160: lumAlarm.alarmLum = DATAEE_ReadByte(0x7000 + (8));
  9787  0208  3008               	movlw	8
  9788  0209  0020               	movlb	0	; select bank0
  9789  020A  00AD               	movwf	DATAEE_ReadByte@bAdd
  9790  020B  3070               	movlw	112
  9791  020C  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9792  020D  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9793  0210  0020               	movlb	0	; select bank0
  9794  0211  00D9               	movwf	??_main
  9795  0212  0859               	movf	??_main,w
  9796  0213  0021               	movlb	1	; select bank1
  9797  0214  00A4               	movwf	_lumAlarm^(0+128)
  9798  0215                     l7656:
  9799                           
  9800                           ;main.c: 1161: ALAF = DATAEE_ReadByte(0x7000 + (9));
  9801  0215  3009               	movlw	9
  9802  0216  0020               	movlb	0	; select bank0
  9803  0217  00AD               	movwf	DATAEE_ReadByte@bAdd
  9804  0218  3070               	movlw	112
  9805  0219  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9806  021A  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9807  021D  0020               	movlb	0	; select bank0
  9808  021E  00D9               	movwf	??_main
  9809  021F  0859               	movf	??_main,w
  9810  0220  00FC               	movwf	_ALAF
  9811  0221                     l7658:
  9812                           
  9813                           ;main.c: 1162: t.h = DATAEE_ReadByte(0x7000 + (10));
  9814  0221  300A               	movlw	10
  9815  0222  00AD               	movwf	DATAEE_ReadByte@bAdd
  9816  0223  3070               	movlw	112
  9817  0224  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9818  0225  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9819  0228  0020               	movlb	0	; select bank0
  9820  0229  00D9               	movwf	??_main
  9821  022A  0859               	movf	??_main,w
  9822  022B  00DC               	movwf	_t
  9823  022C                     l7660:
  9824                           
  9825                           ;main.c: 1163: t.m = DATAEE_ReadByte(0x7000 + (11));
  9826  022C  300B               	movlw	11
  9827  022D  00AD               	movwf	DATAEE_ReadByte@bAdd
  9828  022E  3070               	movlw	112
  9829  022F  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9830  0230  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9831  0233  0020               	movlb	0	; select bank0
  9832  0234  00D9               	movwf	??_main
  9833  0235  0859               	movf	??_main,w
  9834  0236  00DD               	movwf	_t+1
  9835  0237                     l7662:
  9836                           
  9837                           ;main.c: 1164: iwrite = DATAEE_ReadByte(0x7000 + (12));
  9838  0237  300C               	movlw	12
  9839  0238  00AD               	movwf	DATAEE_ReadByte@bAdd
  9840  0239  3070               	movlw	112
  9841  023A  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9842  023B  319F  2787  3180   	fcall	_DATAEE_ReadByte
  9843  023E  0020               	movlb	0	; select bank0
  9844  023F  00D9               	movwf	??_main
  9845  0240  0859               	movf	??_main,w
  9846  0241  00FA               	movwf	_iwrite
  9847  0242                     l7664:
  9848                           
  9849                           ;main.c: 1168: tempAlarm.trigger = 0;
  9850  0242  0021               	movlb	1	; select bank1
  9851  0243  01A8               	clrf	(_tempAlarm^(0+128)+1)
  9852  0244                     l7666:
  9853                           
  9854                           ;main.c: 1169: tempAlarm.triggered = 0;
  9855  0244  01A9               	clrf	(_tempAlarm^(0+128)+2)
  9856  0245                     l7668:
  9857                           
  9858                           ;main.c: 1171: lumAlarm.trigger = 0;
  9859  0245  01A5               	clrf	(_lumAlarm^(0+128)+1)
  9860  0246                     l7670:
  9861                           
  9862                           ;main.c: 1172: lumAlarm.triggered = 0;
  9863  0246  01A6               	clrf	(_lumAlarm^(0+128)+2)
  9864  0247                     l7672:
  9865                           
  9866                           ;main.c: 1174: clkAlarm.trigger = 0;
  9867  0247  01A3               	clrf	(_clkAlarm^(0+128)+3)
  9868  0248                     l7674:
  9869                           
  9870                           ;main.c: 1177: i2c1_driver_open();
  9871  0248  319F  2745  3180   	fcall	_i2c1_driver_open
  9872  024B                     l7676:
  9873                           
  9874                           ;main.c: 1178: TRISCbits.TRISC3 = 1;
  9875  024B  0020               	movlb	0	; select bank0
  9876  024C  1593               	bsf	19,3	;volatile
  9877  024D                     l7678:
  9878                           
  9879                           ;main.c: 1179: TRISCbits.TRISC4 = 1;
  9880  024D  1613               	bsf	19,4	;volatile
  9881  024E                     l7680:
  9882                           
  9883                           ;main.c: 1180: WPUC3 = 1;
  9884  024E  003E               	movlb	30	; select bank30
  9885  024F  15CF               	bsf	79,3	;volatile
  9886  0250                     l7682:
  9887                           
  9888                           ;main.c: 1181: WPUC4 = 1;
  9889  0250  164F               	bsf	79,4	;volatile
  9890  0251                     l7684:
  9891                           
  9892                           ;main.c: 1182: LCDinit();
  9893  0251  3197  2712  3180   	fcall	_LCDinit
  9894  0254                     l7686:
  9895                           
  9896                           ;main.c: 1185: (INTCONbits.GIE = 1);
  9897  0254  178B               	bsf	11,7	;volatile
  9898  0255                     l7688:
  9899                           
  9900                           ;main.c: 1188: (INTCONbits.PEIE = 1);
  9901  0255  170B               	bsf	11,6	;volatile
  9902  0256                     l7690:
  9903                           
  9904                           ;main.c: 1192: uint8_t c;;main.c: 1193: char buff[20] = "";
  9905  0256  3020               	movlw	low main@buff
  9906  0257  0086               	movwf	6
  9907  0258  3001               	movlw	high main@buff
  9908  0259  0087               	movwf	7
  9909  025A  3014               	movlw	20
  9910  025B  0020               	movlb	0	; select bank0
  9911  025C  00D9               	movwf	??_main
  9912  025D  3000               	movlw	0
  9913  025E                     u9370:
  9914  025E  001E               	movwi fsr1++
  9915  025F  0BD9               	decfsz	??_main,f
  9916  0260  2A5E               	goto	u9370
  9917  0261                     l7692:
  9918                           
  9919                           ;main.c: 1194: int n=0;
  9920  0261  0022               	movlb	2	; select bank2
  9921  0262  01BE               	clrf	main@n^(0+256)
  9922  0263  01BF               	clrf	(main@n+1)^(0+256)
  9923  0264                     l7694:
  9924  0264  2ABC               	goto	l7722
  9925  0265                     l7696:
  9926                           
  9927                           ;main.c: 1200: c = getch();
  9928  0265  319E  26DF  3180   	fcall	_getch
  9929  0268  0020               	movlb	0	; select bank0
  9930  0269  00D9               	movwf	??_main
  9931  026A  0859               	movf	??_main,w
  9932  026B  0022               	movlb	2	; select bank2
  9933  026C  00BB               	movwf	main@c^(0+256)
  9934  026D                     l7698:
  9935                           
  9936                           ;main.c: 1201: if((c == (uint8_t)0xFD || buff[0] == (uint8_t)0xFD)){
  9937  026D  30FD               	movlw	253
  9938  026E  063B               	xorwf	main@c^(0+256),w
  9939  026F  1903               	btfsc	3,2
  9940  0270  2A72               	goto	u9381
  9941  0271  2A73               	goto	u9380
  9942  0272                     u9381:
  9943  0272  2A79               	goto	l7702
  9944  0273                     u9380:
  9945  0273                     l7700:
  9946  0273  30FD               	movlw	253
  9947  0274  0620               	xorwf	main@buff^(0+256),w
  9948  0275  1D03               	btfss	3,2
  9949  0276  2A78               	goto	u9391
  9950  0277  2A79               	goto	u9390
  9951  0278                     u9391:
  9952  0278  2AB5               	goto	l7718
  9953  0279                     u9390:
  9954  0279                     l7702:
  9955                           
  9956                           ;main.c: 1202: if(c == (uint8_t)0xFD){
  9957  0279  30FD               	movlw	253
  9958  027A  063B               	xorwf	main@c^(0+256),w
  9959  027B  1D03               	btfss	3,2
  9960  027C  2A7E               	goto	u9401
  9961  027D  2A7F               	goto	u9400
  9962  027E                     u9401:
  9963  027E  2A8E               	goto	l7708
  9964  027F                     u9400:
  9965  027F                     l7704:
  9966                           
  9967                           ;main.c: 1203: memset(buff, 0, sizeof buff);
  9968  027F  3000               	movlw	0
  9969  0280  0020               	movlb	0	; select bank0
  9970  0281  00A7               	movwf	memset@c
  9971  0282  00A8               	movwf	memset@c+1
  9972  0283  3014               	movlw	20
  9973  0284  00A9               	movwf	memset@n
  9974  0285  3000               	movlw	0
  9975  0286  00AA               	movwf	memset@n+1
  9976  0287  3020               	movlw	(low (main@buff| (0+256)))& (0+255)
  9977  0288  3191  211E  3180   	fcall	_memset
  9978  028B                     l7706:
  9979                           
  9980                           ;main.c: 1204: n=0;
  9981  028B  0022               	movlb	2	; select bank2
  9982  028C  01BE               	clrf	main@n^(0+256)
  9983  028D  01BF               	clrf	(main@n+1)^(0+256)
  9984  028E                     l7708:
  9985                           
  9986                           ;main.c: 1205: };main.c: 1206: buff[n] = c;
  9987  028E  083B               	movf	main@c^(0+256),w
  9988  028F  0020               	movlb	0	; select bank0
  9989  0290  00D9               	movwf	??_main
  9990  0291  0022               	movlb	2	; select bank2
  9991  0292  083E               	movf	main@n^(0+256),w
  9992  0293  3E20               	addlw	(low (main@buff| (0+256)))& (0+255)
  9993  0294  0086               	movwf	6
  9994  0295  3001               	movlw	1	; select bank2/3
  9995  0296  0087               	movwf	7
  9996  0297  0020               	movlb	0	; select bank0
  9997  0298  0859               	movf	??_main,w
  9998  0299  0081               	movwf	1
  9999  029A                     l7710:
 10000                           
 10001                           ;main.c: 1207: n++;
 10002  029A  3001               	movlw	1
 10003  029B  0022               	movlb	2	; select bank2
 10004  029C  07BE               	addwf	main@n^(0+256),f
 10005  029D  3000               	movlw	0
 10006  029E  3DBF               	addwfc	(main@n+1)^(0+256),f
 10007  029F                     l7712:
 10008                           
 10009                           ;main.c: 1208: if(n == 20){
 10010  029F  3014               	movlw	20
 10011  02A0  063E               	xorwf	main@n^(0+256),w
 10012  02A1  043F               	iorwf	(main@n+1)^(0+256),w
 10013  02A2  1D03               	btfss	3,2
 10014  02A3  2AA5               	goto	u9411
 10015  02A4  2AA6               	goto	u9410
 10016  02A5                     u9411:
 10017  02A5  2AB5               	goto	l7718
 10018  02A6                     u9410:
 10019  02A6                     l7714:
 10020                           
 10021                           ;main.c: 1209: memset(buff, 0, sizeof buff);
 10022  02A6  3000               	movlw	0
 10023  02A7  0020               	movlb	0	; select bank0
 10024  02A8  00A7               	movwf	memset@c
 10025  02A9  00A8               	movwf	memset@c+1
 10026  02AA  3014               	movlw	20
 10027  02AB  00A9               	movwf	memset@n
 10028  02AC  3000               	movlw	0
 10029  02AD  00AA               	movwf	memset@n+1
 10030  02AE  3020               	movlw	(low (main@buff| (0+256)))& (0+255)
 10031  02AF  3191  211E  3180   	fcall	_memset
 10032  02B2                     l7716:
 10033                           
 10034                           ;main.c: 1210: n=0;
 10035  02B2  0022               	movlb	2	; select bank2
 10036  02B3  01BE               	clrf	main@n^(0+256)
 10037  02B4  01BF               	clrf	(main@n+1)^(0+256)
 10038  02B5                     l7718:
 10039                           
 10040                           ;main.c: 1211: };main.c: 1212: };main.c: 1213: if(c == (uint8_t)0xFE){
 10041  02B5  30FE               	movlw	254
 10042  02B6  063B               	xorwf	main@c^(0+256),w
 10043  02B7  1D03               	btfss	3,2
 10044  02B8  2ABA               	goto	u9421
 10045  02B9  2ABB               	goto	u9420
 10046  02BA                     u9421:
 10047  02BA  2ABC               	goto	l7722
 10048  02BB                     u9420:
 10049  02BB  2AC4               	goto	l7724
 10050  02BC                     l1556:
 10051  02BC                     l7722:
 10052  02BC  319E  26C8  3180   	fcall	_EUSART_is_rx_ready
 10053  02BF  3A00               	xorlw	0
 10054  02C0  1D03               	skipz
 10055  02C1  2AC3               	goto	u9431
 10056  02C2  2AC4               	goto	u9430
 10057  02C3                     u9431:
 10058  02C3  2A65               	goto	l7696
 10059  02C4                     u9430:
 10060  02C4                     l7724:
 10061                           
 10062                           ;main.c: 1215: };main.c: 1216: };main.c: 1217: if(buff[n-1] == (uint8_t)0xFE){
 10063  02C4  0022               	movlb	2	; select bank2
 10064  02C5  083E               	movf	main@n^(0+256),w
 10065  02C6  3EFF               	addlw	255
 10066  02C7  3E20               	addlw	(low (main@buff| (0+256)))& (0+255)
 10067  02C8  0086               	movwf	6
 10068  02C9  3001               	movlw	1	; select bank2/3
 10069  02CA  0087               	movwf	7
 10070  02CB  30FE               	movlw	254
 10071  02CC  0601               	xorwf	1,w
 10072  02CD  1D03               	btfss	3,2
 10073  02CE  2AD0               	goto	u9441
 10074  02CF  2AD1               	goto	u9440
 10075  02D0                     u9441:
 10076  02D0  2B3B               	goto	l7746
 10077  02D1                     u9440:
 10078  02D1                     l7726:
 10079                           
 10080                           ;main.c: 1218: for (i = 0; i < (sizeof(commands) / sizeof(struct command_d)); i++){
 10081  02D1  01BC               	clrf	main@i_2535^(0+256)
 10082  02D2  01BD               	clrf	(main@i_2535+1)^(0+256)
 10083  02D3                     l7732:
 10084                           
 10085                           ;main.c: 1219: if (buff[1] == commands[i].cmd_name){
 10086  02D3  083D               	movf	(main@i_2535+1)^(0+256),w
 10087  02D4  0020               	movlb	0	; select bank0
 10088  02D5  00A8               	movwf	___wmul@multiplier+1
 10089  02D6  0022               	movlb	2	; select bank2
 10090  02D7  083C               	movf	main@i_2535^(0+256),w
 10091  02D8  0020               	movlb	0	; select bank0
 10092  02D9  00A7               	movwf	___wmul@multiplier
 10093  02DA  3003               	movlw	3
 10094  02DB  00A9               	movwf	___wmul@multiplicand
 10095  02DC  3000               	movlw	0
 10096  02DD  00AA               	movwf	___wmul@multiplicand+1
 10097  02DE  3190  20FE  3180   	fcall	___wmul
 10098  02E1  0020               	movlb	0	; select bank0
 10099  02E2  0828               	movf	?___wmul+1,w
 10100  02E3  0085               	movwf	5
 10101  02E4  0827               	movf	?___wmul,w
 10102  02E5  0084               	movwf	4
 10103  02E6  3002               	movlw	low ((_commands+2)| (0+32768))
 10104  02E7  0784               	addwf	4,f
 10105  02E8  3098               	movlw	high ((_commands+2)| (0+32768))
 10106  02E9  3D85               	addwfc	5,f
 10107  02EA  0800               	movf	0,w	;code access
 10108  02EB  0022               	movlb	2	; select bank2
 10109  02EC  0621               	xorwf	(main@buff^(0+256)+1),w
 10110  02ED  1D03               	skipz
 10111  02EE  2AF0               	goto	u9451
 10112  02EF  2AF1               	goto	u9450
 10113  02F0                     u9451:
 10114  02F0  2B1F               	goto	l7738
 10115  02F1                     u9450:
 10116  02F1                     l7734:
 10117                           
 10118                           ;main.c: 1220: commands[i].cmd_fnct(n, buff);
 10119  02F1  083D               	movf	(main@i_2535+1)^(0+256),w
 10120  02F2  0020               	movlb	0	; select bank0
 10121  02F3  00A8               	movwf	___wmul@multiplier+1
 10122  02F4  0022               	movlb	2	; select bank2
 10123  02F5  083C               	movf	main@i_2535^(0+256),w
 10124  02F6  0020               	movlb	0	; select bank0
 10125  02F7  00A7               	movwf	___wmul@multiplier
 10126  02F8  3003               	movlw	3
 10127  02F9  00A9               	movwf	___wmul@multiplicand
 10128  02FA  3000               	movlw	0
 10129  02FB  00AA               	movwf	___wmul@multiplicand+1
 10130  02FC  3190  20FE  3180   	fcall	___wmul
 10131  02FF  0020               	movlb	0	; select bank0
 10132  0300  0828               	movf	?___wmul+1,w
 10133  0301  0085               	movwf	5
 10134  0302  0827               	movf	?___wmul,w
 10135  0303  0084               	movwf	4
 10136  0304  3000               	movlw	low (_commands| (0+32768))
 10137  0305  0784               	addwf	4,f
 10138  0306  3098               	movlw	high (_commands| (0+32768))
 10139  0307  3D85               	addwfc	5,f
 10140  0308  3F00               	moviw [0]fsr0
 10141  0309  0022               	movlb	2	; select bank2
 10142  030A  00B4               	movwf	_main$3499^(0+256)
 10143  030B  3F01               	moviw [1]fsr0
 10144  030C  00B5               	movwf	(_main$3499+1)^(0+256)
 10145  030D                     l7736:
 10146                           
 10147                           ;main.c: 1220: commands[i].cmd_fnct(n, buff);
 10148  030D  083F               	movf	(main@n+1)^(0+256),w
 10149  030E  0020               	movlb	0	; select bank0
 10150  030F  00B7               	movwf	cmd_tri@num+1
 10151  0310  0022               	movlb	2	; select bank2
 10152  0311  083E               	movf	main@n^(0+256),w
 10153  0312  0020               	movlb	0	; select bank0
 10154  0313  00B6               	movwf	cmd_tri@num
 10155  0314  3020               	movlw	(low (main@buff| (0+256)))& (0+255)
 10156  0315  00D9               	movwf	??_main
 10157  0316  0859               	movf	??_main,w
 10158  0317  00B8               	movwf	cmd_tri@buffer
 10159  0318  0022               	movlb	2	; select bank2
 10160  0319  0835               	movf	(_main$3499+1)^(0+256),w
 10161  031A  008A               	movwf	10
 10162  031B  0834               	movf	_main$3499^(0+256),w
 10163  031C  000A               	callw
 10164  031D  3180               	pagesel	$
 10165                           
 10166                           ;main.c: 1221: break;
 10167  031E  2B2C               	goto	l7740
 10168  031F                     l7738:
 10169  031F  3001               	movlw	1
 10170  0320  07BC               	addwf	main@i_2535^(0+256),f
 10171  0321  3000               	movlw	0
 10172  0322  3DBD               	addwfc	(main@i_2535+1)^(0+256),f
 10173  0323  3000               	movlw	0
 10174  0324  023D               	subwf	(main@i_2535+1)^(0+256),w
 10175  0325  300D               	movlw	13
 10176  0326  1903               	skipnz
 10177  0327  023C               	subwf	main@i_2535^(0+256),w
 10178  0328  1C03               	skipc
 10179  0329  2B2B               	goto	u9461
 10180  032A  2B2C               	goto	u9460
 10181  032B                     u9461:
 10182  032B  2AD3               	goto	l7732
 10183  032C                     u9460:
 10184  032C                     l7740:
 10185                           
 10186                           ;main.c: 1222: };main.c: 1223: };main.c: 1224: memset(buff, 0, sizeof buff);
 10187  032C  3000               	movlw	0
 10188  032D  0020               	movlb	0	; select bank0
 10189  032E  00A7               	movwf	memset@c
 10190  032F  00A8               	movwf	memset@c+1
 10191  0330  3014               	movlw	20
 10192  0331  00A9               	movwf	memset@n
 10193  0332  3000               	movlw	0
 10194  0333  00AA               	movwf	memset@n+1
 10195  0334  3020               	movlw	(low (main@buff| (0+256)))& (0+255)
 10196  0335  3191  211E  3180   	fcall	_memset
 10197  0338                     l7742:
 10198  0338                     l7744:
 10199                           
 10200                           ;main.c: 1226: n=0;
 10201  0338  0022               	movlb	2	; select bank2
 10202  0339  01BE               	clrf	main@n^(0+256)
 10203  033A  01BF               	clrf	(main@n+1)^(0+256)
 10204  033B                     l7746:
 10205                           
 10206                           ;main.c: 1227: };main.c: 1229: if(modeFlag == 0){
 10207  033B  0020               	movlb	0	; select bank0
 10208  033C  085F               	movf	_modeFlag,w
 10209  033D  0460               	iorwf	_modeFlag+1,w
 10210  033E  1D03               	btfss	3,2
 10211  033F  2B41               	goto	u9471
 10212  0340  2B42               	goto	u9470
 10213  0341                     u9471:
 10214  0341  2B46               	goto	l7750
 10215  0342                     u9470:
 10216  0342                     l7748:
 10217                           
 10218                           ;main.c: 1230: checkFlags();
 10219  0342  3187  2754  3180   	fcall	_checkFlags
 10220                           
 10221                           ;main.c: 1231: } else if(modeFlag == 1){
 10222  0345  2ABC               	goto	l7722
 10223  0346                     l7750:
 10224  0346  035F               	decf	_modeFlag,w
 10225  0347  0460               	iorwf	_modeFlag+1,w
 10226  0348  1D03               	btfss	3,2
 10227  0349  2B4B               	goto	u9481
 10228  034A  2B4C               	goto	u9480
 10229  034B                     u9481:
 10230  034B  2B50               	goto	l7754
 10231  034C                     u9480:
 10232  034C                     l7752:
 10233                           
 10234                           ;main.c: 1232: editClock();
 10235  034C  3196  26A5  3180   	fcall	_editClock
 10236                           
 10237                           ;main.c: 1233: } else if(modeFlag == 2){
 10238  034F  2ABC               	goto	l7722
 10239  0350                     l7754:
 10240  0350  3002               	movlw	2
 10241  0351  065F               	xorwf	_modeFlag,w
 10242  0352  0460               	iorwf	_modeFlag+1,w
 10243  0353  1D03               	btfss	3,2
 10244  0354  2B56               	goto	u9491
 10245  0355  2B57               	goto	u9490
 10246  0356                     u9491:
 10247  0356  2B5B               	goto	l7758
 10248  0357                     u9490:
 10249  0357                     l7756:
 10250                           
 10251                           ;main.c: 1234: editTemp();
 10252  0357  3193  23AD  3180   	fcall	_editTemp
 10253                           
 10254                           ;main.c: 1235: } else if(modeFlag == 3){
 10255  035A  2ABC               	goto	l7722
 10256  035B                     l7758:
 10257  035B  3003               	movlw	3
 10258  035C  065F               	xorwf	_modeFlag,w
 10259  035D  0460               	iorwf	_modeFlag+1,w
 10260  035E  1D03               	btfss	3,2
 10261  035F  2B61               	goto	u9501
 10262  0360  2B62               	goto	u9500
 10263  0361                     u9501:
 10264  0361  2B66               	goto	l7762
 10265  0362                     u9500:
 10266  0362                     l7760:
 10267                           
 10268                           ;main.c: 1236: editLum();
 10269  0362  3193  2378  3180   	fcall	_editLum
 10270                           
 10271                           ;main.c: 1237: } else if(modeFlag == 4){
 10272  0365  2ABC               	goto	l7722
 10273  0366                     l7762:
 10274  0366  3004               	movlw	4
 10275  0367  065F               	xorwf	_modeFlag,w
 10276  0368  0460               	iorwf	_modeFlag+1,w
 10277  0369  1D03               	btfss	3,2
 10278  036A  2B6C               	goto	u9511
 10279  036B  2B6D               	goto	u9510
 10280  036C                     u9511:
 10281  036C  2B71               	goto	l7766
 10282  036D                     u9510:
 10283  036D                     l7764:
 10284                           
 10285                           ;main.c: 1238: toggleAlarms();
 10286  036D  3192  22B0  3180   	fcall	_toggleAlarms
 10287                           
 10288                           ;main.c: 1239: } else if(modeFlag > 4){
 10289  0370  2ABC               	goto	l7722
 10290  0371                     l7766:
 10291  0371  0860               	movf	_modeFlag+1,w
 10292  0372  3A80               	xorlw	128
 10293  0373  00D9               	movwf	??_main
 10294  0374  3080               	movlw	128
 10295  0375  0259               	subwf	??_main,w
 10296  0376  1D03               	skipz
 10297  0377  2B7A               	goto	u9525
 10298  0378  3005               	movlw	5
 10299  0379  025F               	subwf	_modeFlag,w
 10300  037A                     u9525:
 10301  037A  1C03               	skipc
 10302  037B  2B7D               	goto	u9521
 10303  037C  2B7E               	goto	u9520
 10304  037D                     u9521:
 10305  037D  2ABC               	goto	l1556
 10306  037E                     u9520:
 10307  037E                     l7768:
 10308                           
 10309                           ;main.c: 1240: modeFlag = 0;
 10310  037E  0020               	movlb	0	; select bank0
 10311  037F  01DF               	clrf	_modeFlag
 10312  0380  01E0               	clrf	_modeFlag+1
 10313  0381  2ABC               	goto	l7722
 10314  0382  3180  2852         	ljmp	start
 10315  0384                     __end_of_main:
 10316                           
 10317                           	psect	text1
 10318  12B0                     __ptext1:	
 10319 ;; *************** function _toggleAlarms *****************
 10320 ;; Defined at:
 10321 ;;		line 803 in file "main.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;		None
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;		None
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  1    wreg      void 
 10328 ;; Registers used:
 10329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;Total ram usage:        1 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; Hardware stack levels required when called:   10
 10342 ;; This function calls:
 10343 ;;		_checkFlags
 10344 ;;		_update_menuLCD
 10345 ;; This function is called by:
 10346 ;;		_main
 10347 ;; This function uses a non-reentrant model
 10348 ;;
 10349                           
 10350                           
 10351                           ;psect for function _toggleAlarms
 10352  12B0                     _toggleAlarms:
 10353  12B0                     l1443:	
 10354                           ;incstack = 0
 10355                           ; Regs used in _toggleAlarms: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10356                           ;main.c: 805: while(1){
 10357                           
 10358                           
 10359                           ;main.c: 806: if(PORTCbits.RC5 == 0){
 10360  12B0  0020               	movlb	0	; select bank0
 10361  12B1  1A8E               	btfsc	14,5	;volatile
 10362  12B2  2AB4               	goto	u8801
 10363  12B3  2AB5               	goto	u8800
 10364  12B4                     u8801:
 10365  12B4  2AD0               	goto	l7334
 10366  12B5                     u8800:
 10367  12B5                     l7326:
 10368                           
 10369                           ;main.c: 807: if(ALAF == 'A'){
 10370  12B5  3041               	movlw	65
 10371  12B6  067C               	xorwf	_ALAF,w
 10372  12B7  1D03               	btfss	3,2
 10373  12B8  2ABA               	goto	u8811
 10374  12B9  2ABB               	goto	u8810
 10375  12BA                     u8811:
 10376  12BA  2AC0               	goto	l7330
 10377  12BB                     u8810:
 10378  12BB                     l7328:
 10379                           
 10380                           ;main.c: 808: ALAF = 'a';
 10381  12BB  3061               	movlw	97
 10382  12BC  00D8               	movwf	??_toggleAlarms
 10383  12BD  0858               	movf	??_toggleAlarms,w
 10384  12BE  00FC               	movwf	_ALAF
 10385                           
 10386                           ;main.c: 809: } else {
 10387  12BF  2AC4               	goto	l1446
 10388  12C0                     l7330:
 10389                           
 10390                           ;main.c: 810: ALAF = 'A';
 10391  12C0  3041               	movlw	65
 10392  12C1  00D8               	movwf	??_toggleAlarms
 10393  12C2  0858               	movf	??_toggleAlarms,w
 10394  12C3  00FC               	movwf	_ALAF
 10395  12C4                     l1446:
 10396                           
 10397                           ;main.c: 811: };main.c: 812: _delay((unsigned long)((100)*(1000000/4000.0)));
 10398  12C4  3021               	movlw	33
 10399  12C5  0020               	movlb	0	; select bank0
 10400  12C6  00D8               	movwf	??_toggleAlarms
 10401  12C7  3076               	movlw	118
 10402  12C8                     u9537:
 10403  12C8  0B89               	decfsz	9,f
 10404  12C9  2AC8               	goto	u9537
 10405  12CA  0BD8               	decfsz	??_toggleAlarms,f
 10406  12CB  2AC8               	goto	u9537
 10407  12CC  0000               	nop
 10408  12CD                     l7332:
 10409                           
 10410                           ;main.c: 813: update_menuLCD();
 10411  12CD  3183  2384  3192   	fcall	_update_menuLCD
 10412  12D0                     l7334:
 10413                           
 10414                           ;main.c: 814: };main.c: 815: checkFlags();
 10415  12D0  3187  2754  3192   	fcall	_checkFlags
 10416  12D3                     l7336:
 10417                           
 10418                           ;main.c: 816: if(modeFlag != 4){
 10419  12D3  3004               	movlw	4
 10420  12D4  0020               	movlb	0	; select bank0
 10421  12D5  065F               	xorwf	_modeFlag,w
 10422  12D6  0460               	iorwf	_modeFlag+1,w
 10423  12D7  1903               	btfsc	3,2
 10424  12D8  2ADA               	goto	u8821
 10425  12D9  2ADB               	goto	u8820
 10426  12DA                     u8821:
 10427  12DA  2AB0               	goto	l1443
 10428  12DB                     u8820:
 10429  12DB                     l7338:
 10430                           
 10431                           ;main.c: 817: modeFlag = 0;
 10432  12DB  01DF               	clrf	_modeFlag
 10433  12DC  01E0               	clrf	_modeFlag+1
 10434  12DD                     l1450:	
 10435                           ;main.c: 818: break;
 10436                           
 10437  12DD  0008               	return
 10438  12DE                     __end_of_toggleAlarms:
 10439                           
 10440                           	psect	text2
 10441  111E                     __ptext2:	
 10442 ;; *************** function _memset *****************
 10443 ;; Defined at:
 10444 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 10445 ;; Parameters:    Size  Location     Type
 10446 ;;  p1              1    wreg     PTR void 
 10447 ;;		 -> main@buff(20), 
 10448 ;;  c               2    7[BANK0 ] int 
 10449 ;;  n               2    9[BANK0 ] unsigned int 
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  p1              1   13[BANK0 ] PTR void 
 10452 ;;		 -> main@buff(20), 
 10453 ;;  p               1   12[BANK0 ] PTR unsigned char 
 10454 ;;		 -> main@buff(20), 
 10455 ;; Return value:  Size  Location     Type
 10456 ;;                  1    wreg      PTR void 
 10457 ;; Registers used:
 10458 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10459 ;; Tracked objects:
 10460 ;;		On entry : 0/0
 10461 ;;		On exit  : 0/0
 10462 ;;		Unchanged: 0/0
 10463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10464 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;Total ram usage:        7 bytes
 10469 ;; Hardware stack levels used:    1
 10470 ;; Hardware stack levels required when called:    4
 10471 ;; This function calls:
 10472 ;;		Nothing
 10473 ;; This function is called by:
 10474 ;;		_main
 10475 ;; This function uses a non-reentrant model
 10476 ;;
 10477                           
 10478                           
 10479                           ;psect for function _memset
 10480  111E                     _memset:
 10481                           
 10482                           ;incstack = 0
 10483                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10484                           ;memset@p1 stored from wreg
 10485  111E  0020               	movlb	0	; select bank0
 10486  111F  00AD               	movwf	memset@p1
 10487  1120                     l7586:
 10488  1120  082D               	movf	memset@p1,w
 10489  1121  00AB               	movwf	??_memset
 10490  1122  082B               	movf	??_memset,w
 10491  1123  00AC               	movwf	memset@p
 10492  1124  2931               	goto	l7592
 10493  1125                     l7588:
 10494  1125  0827               	movf	memset@c,w
 10495  1126  00AB               	movwf	??_memset
 10496  1127  082C               	movf	memset@p,w
 10497  1128  0086               	movwf	6
 10498  1129  3001               	movlw	1	; select bank2/3
 10499  112A  0087               	movwf	7
 10500  112B  082B               	movf	??_memset,w
 10501  112C  0081               	movwf	1
 10502  112D                     l7590:
 10503  112D  3001               	movlw	1
 10504  112E  00AB               	movwf	??_memset
 10505  112F  082B               	movf	??_memset,w
 10506  1130  07AC               	addwf	memset@p,f
 10507  1131                     l7592:
 10508  1131  3001               	movlw	1
 10509  1132  02A9               	subwf	memset@n,f
 10510  1133  3000               	movlw	0
 10511  1134  3BAA               	subwfb	memset@n+1,f
 10512  1135  0A29               	incf	memset@n,w
 10513  1136  1D03               	skipz
 10514  1137  293C               	goto	u9311
 10515  1138  0A2A               	incf	memset@n+1,w
 10516  1139  1D03               	btfss	3,2
 10517  113A  293C               	goto	u9311
 10518  113B  293D               	goto	u9310
 10519  113C                     u9311:
 10520  113C  2925               	goto	l7588
 10521  113D                     u9310:
 10522  113D                     l2244:
 10523  113D  0008               	return
 10524  113E                     __end_of_memset:
 10525                           
 10526                           	psect	text3
 10527  1F45                     __ptext3:	
 10528 ;; *************** function _i2c1_driver_open *****************
 10529 ;; Defined at:
 10530 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;		None
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;		None
 10535 ;; Return value:  Size  Location     Type
 10536 ;;		None               void
 10537 ;; Registers used:
 10538 ;;		wreg, status,2
 10539 ;; Tracked objects:
 10540 ;;		On entry : 0/0
 10541 ;;		On exit  : 0/0
 10542 ;;		Unchanged: 0/0
 10543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;Total ram usage:        0 bytes
 10549 ;; Hardware stack levels used:    1
 10550 ;; Hardware stack levels required when called:    4
 10551 ;; This function calls:
 10552 ;;		Nothing
 10553 ;; This function is called by:
 10554 ;;		_main
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           
 10559                           ;psect for function _i2c1_driver_open
 10560  1F45                     _i2c1_driver_open:
 10561  1F45                     l7128:	
 10562                           ;incstack = 0
 10563                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
 10564                           
 10565                           
 10566                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
 10567  1F45  0023               	movlb	3	; select bank3
 10568  1F46  1A90               	btfsc	16,5	;volatile
 10569  1F47  2F49               	goto	u8351
 10570  1F48  2F4A               	goto	u8350
 10571  1F49                     u8351:
 10572  1F49  2F50               	goto	l253
 10573  1F4A                     u8350:
 10574  1F4A                     l7130:
 10575                           
 10576                           ;i2c1_driver.c: 86: {;i2c1_driver.c: 87: SSP1STAT = 0x00;
 10577  1F4A  018F               	clrf	15	;volatile
 10578  1F4B                     l7132:
 10579                           
 10580                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
 10581  1F4B  3028               	movlw	40
 10582  1F4C  0090               	movwf	16	;volatile
 10583  1F4D                     l7134:
 10584                           
 10585                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
 10586  1F4D  0191               	clrf	17	;volatile
 10587                           
 10588                           ;i2c1_driver.c: 90: SSP1ADD = 0x3;
 10589  1F4E  3003               	movlw	3
 10590  1F4F  008D               	movwf	13	;volatile
 10591  1F50                     l253:
 10592  1F50  0008               	return
 10593  1F51                     __end_of_i2c1_driver_open:
 10594                           
 10595                           	psect	text4
 10596  1EDF                     __ptext4:	
 10597 ;; *************** function _getch *****************
 10598 ;; Defined at:
 10599 ;;		line 171 in file "mcc_generated_files/eusart.c"
 10600 ;; Parameters:    Size  Location     Type
 10601 ;;		None
 10602 ;; Auto vars:     Size  Location     Type
 10603 ;;		None
 10604 ;; Return value:  Size  Location     Type
 10605 ;;                  1    wreg      unsigned char 
 10606 ;; Registers used:
 10607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10608 ;; Tracked objects:
 10609 ;;		On entry : 0/0
 10610 ;;		On exit  : 0/0
 10611 ;;		Unchanged: 0/0
 10612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;Total ram usage:        0 bytes
 10618 ;; Hardware stack levels used:    1
 10619 ;; Hardware stack levels required when called:    5
 10620 ;; This function calls:
 10621 ;;		_EUSART_Read
 10622 ;; This function is called by:
 10623 ;;		_main
 10624 ;; This function uses a non-reentrant model
 10625 ;;
 10626                           
 10627                           
 10628                           ;psect for function _getch
 10629  1EDF                     _getch:
 10630  1EDF                     l7144:	
 10631                           ;incstack = 0
 10632                           ; Regs used in _getch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10633                           
 10634                           
 10635                           ;eusart.c: 173: return EUSART_Read();
 10636  1EDF  3192  2234  319E   	fcall	_EUSART_Read
 10637  1EE2                     l839:
 10638  1EE2  0008               	return
 10639  1EE3                     __end_of_getch:
 10640                           
 10641                           	psect	text5
 10642  1234                     __ptext5:	
 10643 ;; *************** function _EUSART_Read *****************
 10644 ;; Defined at:
 10645 ;;		line 128 in file "mcc_generated_files/eusart.c"
 10646 ;; Parameters:    Size  Location     Type
 10647 ;;		None
 10648 ;; Auto vars:     Size  Location     Type
 10649 ;;  readValue       1    8[BANK0 ] unsigned char 
 10650 ;; Return value:  Size  Location     Type
 10651 ;;                  1    wreg      unsigned char 
 10652 ;; Registers used:
 10653 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10654 ;; Tracked objects:
 10655 ;;		On entry : 0/0
 10656 ;;		On exit  : 0/0
 10657 ;;		Unchanged: 0/0
 10658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;Total ram usage:        2 bytes
 10664 ;; Hardware stack levels used:    1
 10665 ;; Hardware stack levels required when called:    4
 10666 ;; This function calls:
 10667 ;;		Nothing
 10668 ;; This function is called by:
 10669 ;;		_getch
 10670 ;; This function uses a non-reentrant model
 10671 ;;
 10672                           
 10673                           
 10674                           ;psect for function _EUSART_Read
 10675  1234                     _EUSART_Read:
 10676  1234                     l7004:	
 10677                           ;incstack = 0
 10678                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 10679                           
 10680  1234                     l7006:	
 10681                           ;eusart.c: 132: while(0 == eusartRxCount)
 10682                           
 10683  1234  0021               	movlb	1	; select bank1
 10684  1235  0837               	movf	_eusartRxCount^(0+128),w	;volatile
 10685  1236  1903               	btfsc	3,2
 10686  1237  2A39               	goto	u8171
 10687  1238  2A3A               	goto	u8170
 10688  1239                     u8171:
 10689  1239  2A34               	goto	l7006
 10690  123A                     u8170:
 10691  123A                     l7008:
 10692                           
 10693                           ;eusart.c: 134: };eusart.c: 136: readValue = eusartRxBuffer[eusartRxTail++];
 10694  123A  0838               	movf	_eusartRxTail^(0+128),w
 10695  123B  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 10696  123C  0086               	movwf	6
 10697  123D  3002               	movlw	2	; select bank4/5
 10698  123E  0087               	movwf	7
 10699  123F  0801               	movf	1,w
 10700  1240  0020               	movlb	0	; select bank0
 10701  1241  00A7               	movwf	??_EUSART_Read
 10702  1242  0827               	movf	??_EUSART_Read,w
 10703  1243  00A8               	movwf	EUSART_Read@readValue
 10704  1244                     l7010:
 10705  1244  3001               	movlw	1
 10706  1245  00A7               	movwf	??_EUSART_Read
 10707  1246  0827               	movf	??_EUSART_Read,w
 10708  1247  0021               	movlb	1	; select bank1
 10709  1248  07B8               	addwf	_eusartRxTail^(0+128),f	;volatile
 10710  1249                     l7012:
 10711                           
 10712                           ;eusart.c: 137: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 10713  1249  3040               	movlw	64
 10714  124A  0238               	subwf	_eusartRxTail^(0+128),w	;volatile
 10715  124B  1C03               	skipc
 10716  124C  2A4E               	goto	u8181
 10717  124D  2A4F               	goto	u8180
 10718  124E                     u8181:
 10719  124E  2A50               	goto	l7016
 10720  124F                     u8180:
 10721  124F                     l7014:
 10722                           
 10723                           ;eusart.c: 138: {;eusart.c: 139: eusartRxTail = 0;
 10724  124F  01B8               	clrf	_eusartRxTail^(0+128)	;volatile
 10725  1250                     l7016:
 10726                           
 10727                           ;eusart.c: 140: };eusart.c: 141: PIE3bits.RCIE = 0;
 10728  1250  002E               	movlb	14	; select bank14
 10729  1251  1299               	bcf	25,5	;volatile
 10730  1252                     l7018:
 10731                           
 10732                           ;eusart.c: 142: eusartRxCount--;
 10733  1252  3001               	movlw	1
 10734  1253  0021               	movlb	1	; select bank1
 10735  1254  02B7               	subwf	_eusartRxCount^(0+128),f	;volatile
 10736  1255                     l7020:
 10737                           
 10738                           ;eusart.c: 143: PIE3bits.RCIE = 1;
 10739  1255  002E               	movlb	14	; select bank14
 10740  1256  1699               	bsf	25,5	;volatile
 10741  1257                     l7022:
 10742                           
 10743                           ;eusart.c: 145: return readValue;
 10744  1257  0020               	movlb	0	; select bank0
 10745  1258  0828               	movf	EUSART_Read@readValue,w
 10746  1259                     l827:
 10747  1259  0008               	return
 10748  125A                     __end_of_EUSART_Read:
 10749                           
 10750                           	psect	text6
 10751  13AD                     __ptext6:	
 10752 ;; *************** function _editTemp *****************
 10753 ;; Defined at:
 10754 ;;		line 759 in file "main.c"
 10755 ;; Parameters:    Size  Location     Type
 10756 ;;		None
 10757 ;; Auto vars:     Size  Location     Type
 10758 ;;		None
 10759 ;; Return value:  Size  Location     Type
 10760 ;;                  1    wreg      void 
 10761 ;; Registers used:
 10762 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10763 ;; Tracked objects:
 10764 ;;		On entry : 0/0
 10765 ;;		On exit  : 0/0
 10766 ;;		Unchanged: 0/0
 10767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10771 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10772 ;;Total ram usage:        1 bytes
 10773 ;; Hardware stack levels used:    1
 10774 ;; Hardware stack levels required when called:   10
 10775 ;; This function calls:
 10776 ;;		_checkFlags
 10777 ;;		_update_menuLCD
 10778 ;; This function is called by:
 10779 ;;		_main
 10780 ;; This function uses a non-reentrant model
 10781 ;;
 10782                           
 10783                           
 10784                           ;psect for function _editTemp
 10785  13AD                     _editTemp:
 10786  13AD                     l1421:	
 10787                           ;incstack = 0
 10788                           ; Regs used in _editTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10789                           ;main.c: 760: while(1){
 10790                           
 10791                           
 10792                           ;main.c: 761: if(PORTCbits.RC5 == 0){
 10793  13AD  0020               	movlb	0	; select bank0
 10794  13AE  1A8E               	btfsc	14,5	;volatile
 10795  13AF  2BB1               	goto	u8721
 10796  13B0  2BB2               	goto	u8720
 10797  13B1                     u8721:
 10798  13B1  2BD4               	goto	l7300
 10799  13B2                     u8720:
 10800  13B2                     l7286:
 10801                           
 10802                           ;main.c: 762: if(editingTempAlarm == 0){
 10803  13B2  0021               	movlb	1	; select bank1
 10804  13B3  0835               	movf	_editingTempAlarm^(0+128),w
 10805  13B4  1D03               	btfss	3,2
 10806  13B5  2BB7               	goto	u8731
 10807  13B6  2BB8               	goto	u8730
 10808  13B7                     u8731:
 10809  13B7  2BBB               	goto	l7290
 10810  13B8                     u8730:
 10811  13B8                     l7288:
 10812                           
 10813                           ;main.c: 763: editingTempAlarm = 1;
 10814  13B8  01B5               	clrf	_editingTempAlarm^(0+128)
 10815  13B9  0AB5               	incf	_editingTempAlarm^(0+128),f
 10816                           
 10817                           ;main.c: 764: } else {
 10818  13BA  2BC8               	goto	l7296
 10819  13BB                     l7290:
 10820                           
 10821                           ;main.c: 765: tempAlarm.alarmTemp++;
 10822  13BB  3001               	movlw	1
 10823  13BC  0020               	movlb	0	; select bank0
 10824  13BD  00D8               	movwf	??_editTemp
 10825  13BE  0858               	movf	??_editTemp,w
 10826  13BF  0021               	movlb	1	; select bank1
 10827  13C0  07A7               	addwf	_tempAlarm^(0+128),f
 10828  13C1                     l7292:
 10829                           
 10830                           ;main.c: 766: if(tempAlarm.alarmTemp > 50){
 10831  13C1  3033               	movlw	51
 10832  13C2  0227               	subwf	_tempAlarm^(0+128),w
 10833  13C3  1C03               	skipc
 10834  13C4  2BC6               	goto	u8741
 10835  13C5  2BC7               	goto	u8740
 10836  13C6                     u8741:
 10837  13C6  2BC8               	goto	l7296
 10838  13C7                     u8740:
 10839  13C7                     l7294:
 10840                           
 10841                           ;main.c: 767: tempAlarm.alarmTemp = 0;
 10842  13C7  01A7               	clrf	_tempAlarm^(0+128)
 10843  13C8                     l7296:
 10844                           
 10845                           ;main.c: 768: };main.c: 769: };main.c: 770: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10846  13C8  3021               	movlw	33
 10847  13C9  0020               	movlb	0	; select bank0
 10848  13CA  00D8               	movwf	??_editTemp
 10849  13CB  3076               	movlw	118
 10850  13CC                     u9547:
 10851  13CC  0B89               	decfsz	9,f
 10852  13CD  2BCC               	goto	u9547
 10853  13CE  0BD8               	decfsz	??_editTemp,f
 10854  13CF  2BCC               	goto	u9547
 10855  13D0  0000               	nop
 10856  13D1                     l7298:
 10857                           
 10858                           ;main.c: 771: update_menuLCD();
 10859  13D1  3183  2384  3193   	fcall	_update_menuLCD
 10860  13D4                     l7300:
 10861                           
 10862                           ;main.c: 772: };main.c: 773: checkFlags();
 10863  13D4  3187  2754  3193   	fcall	_checkFlags
 10864  13D7                     l7302:
 10865                           
 10866                           ;main.c: 774: if(modeFlag != 2){
 10867  13D7  3002               	movlw	2
 10868  13D8  0020               	movlb	0	; select bank0
 10869  13D9  065F               	xorwf	_modeFlag,w
 10870  13DA  0460               	iorwf	_modeFlag+1,w
 10871  13DB  1903               	btfsc	3,2
 10872  13DC  2BDE               	goto	u8751
 10873  13DD  2BDF               	goto	u8750
 10874  13DE                     u8751:
 10875  13DE  2BAD               	goto	l1421
 10876  13DF                     u8750:
 10877  13DF                     l7304:
 10878                           
 10879                           ;main.c: 775: editingTempAlarm = 0;
 10880  13DF  0021               	movlb	1	; select bank1
 10881  13E0  01B5               	clrf	_editingTempAlarm^(0+128)
 10882  13E1                     l1429:	
 10883                           ;main.c: 776: break;
 10884                           
 10885  13E1  0008               	return
 10886  13E2                     __end_of_editTemp:
 10887                           
 10888                           	psect	text7
 10889  1378                     __ptext7:	
 10890 ;; *************** function _editLum *****************
 10891 ;; Defined at:
 10892 ;;		line 781 in file "main.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;		None
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;		None
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      void 
 10899 ;; Registers used:
 10900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;Total ram usage:        1 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:   10
 10913 ;; This function calls:
 10914 ;;		_checkFlags
 10915 ;;		_update_menuLCD
 10916 ;; This function is called by:
 10917 ;;		_main
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           
 10922                           ;psect for function _editLum
 10923  1378                     _editLum:
 10924  1378                     l1432:	
 10925                           ;incstack = 0
 10926                           ; Regs used in _editLum: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10927                           ;main.c: 782: while(1){
 10928                           
 10929                           
 10930                           ;main.c: 783: if(PORTCbits.RC5 == 0){
 10931  1378  0020               	movlb	0	; select bank0
 10932  1379  1A8E               	btfsc	14,5	;volatile
 10933  137A  2B7C               	goto	u8761
 10934  137B  2B7D               	goto	u8760
 10935  137C                     u8761:
 10936  137C  2B9F               	goto	l7320
 10937  137D                     u8760:
 10938  137D                     l7306:
 10939                           
 10940                           ;main.c: 784: if(editingLumAlarm == 0){
 10941  137D  0021               	movlb	1	; select bank1
 10942  137E  0834               	movf	_editingLumAlarm^(0+128),w
 10943  137F  1D03               	btfss	3,2
 10944  1380  2B82               	goto	u8771
 10945  1381  2B83               	goto	u8770
 10946  1382                     u8771:
 10947  1382  2B86               	goto	l7310
 10948  1383                     u8770:
 10949  1383                     l7308:
 10950                           
 10951                           ;main.c: 785: editingLumAlarm = 1;
 10952  1383  01B4               	clrf	_editingLumAlarm^(0+128)
 10953  1384  0AB4               	incf	_editingLumAlarm^(0+128),f
 10954                           
 10955                           ;main.c: 786: } else {
 10956  1385  2B93               	goto	l7316
 10957  1386                     l7310:
 10958                           
 10959                           ;main.c: 787: lumAlarm.alarmLum++;
 10960  1386  3001               	movlw	1
 10961  1387  0020               	movlb	0	; select bank0
 10962  1388  00D8               	movwf	??_editLum
 10963  1389  0858               	movf	??_editLum,w
 10964  138A  0021               	movlb	1	; select bank1
 10965  138B  07A4               	addwf	_lumAlarm^(0+128),f
 10966  138C                     l7312:
 10967                           
 10968                           ;main.c: 788: if(lumAlarm.alarmLum > 7){
 10969  138C  3008               	movlw	8
 10970  138D  0224               	subwf	_lumAlarm^(0+128),w
 10971  138E  1C03               	skipc
 10972  138F  2B91               	goto	u8781
 10973  1390  2B92               	goto	u8780
 10974  1391                     u8781:
 10975  1391  2B93               	goto	l7316
 10976  1392                     u8780:
 10977  1392                     l7314:
 10978                           
 10979                           ;main.c: 789: lumAlarm.alarmLum = 0;
 10980  1392  01A4               	clrf	_lumAlarm^(0+128)
 10981  1393                     l7316:
 10982                           
 10983                           ;main.c: 790: };main.c: 791: };main.c: 792: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10984  1393  3021               	movlw	33
 10985  1394  0020               	movlb	0	; select bank0
 10986  1395  00D8               	movwf	??_editLum
 10987  1396  3076               	movlw	118
 10988  1397                     u9557:
 10989  1397  0B89               	decfsz	9,f
 10990  1398  2B97               	goto	u9557
 10991  1399  0BD8               	decfsz	??_editLum,f
 10992  139A  2B97               	goto	u9557
 10993  139B  0000               	nop
 10994  139C                     l7318:
 10995                           
 10996                           ;main.c: 793: update_menuLCD();
 10997  139C  3183  2384  3193   	fcall	_update_menuLCD
 10998  139F                     l7320:
 10999                           
 11000                           ;main.c: 794: };main.c: 795: checkFlags();
 11001  139F  3187  2754  3193   	fcall	_checkFlags
 11002  13A2                     l7322:
 11003                           
 11004                           ;main.c: 796: if(modeFlag != 3){
 11005  13A2  3003               	movlw	3
 11006  13A3  0020               	movlb	0	; select bank0
 11007  13A4  065F               	xorwf	_modeFlag,w
 11008  13A5  0460               	iorwf	_modeFlag+1,w
 11009  13A6  1903               	btfsc	3,2
 11010  13A7  2BA9               	goto	u8791
 11011  13A8  2BAA               	goto	u8790
 11012  13A9                     u8791:
 11013  13A9  2B78               	goto	l1432
 11014  13AA                     u8790:
 11015  13AA                     l7324:
 11016                           
 11017                           ;main.c: 797: editingLumAlarm = 0;
 11018  13AA  0021               	movlb	1	; select bank1
 11019  13AB  01B4               	clrf	_editingLumAlarm^(0+128)
 11020  13AC                     l1440:	
 11021                           ;main.c: 798: break;
 11022                           
 11023  13AC  0008               	return
 11024  13AD                     __end_of_editLum:
 11025                           
 11026                           	psect	text8
 11027  16A5                     __ptext8:	
 11028 ;; *************** function _editClock *****************
 11029 ;; Defined at:
 11030 ;;		line 721 in file "main.c"
 11031 ;; Parameters:    Size  Location     Type
 11032 ;;		None
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;		None
 11035 ;; Return value:  Size  Location     Type
 11036 ;;                  1    wreg      void 
 11037 ;; Registers used:
 11038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11039 ;; Tracked objects:
 11040 ;;		On entry : 0/0
 11041 ;;		On exit  : 0/0
 11042 ;;		Unchanged: 0/0
 11043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;Total ram usage:        1 bytes
 11049 ;; Hardware stack levels used:    1
 11050 ;; Hardware stack levels required when called:   10
 11051 ;; This function calls:
 11052 ;;		_checkFlags
 11053 ;;		_update_menuLCD
 11054 ;; This function is called by:
 11055 ;;		_main
 11056 ;; This function uses a non-reentrant model
 11057 ;;
 11058                           
 11059                           
 11060                           ;psect for function _editClock
 11061  16A5                     _editClock:
 11062  16A5                     l1400:	
 11063                           ;incstack = 0
 11064                           ; Regs used in _editClock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11065                           ;main.c: 723: while(1){
 11066                           
 11067                           
 11068                           ;main.c: 724: if(PORTCbits.RC5 == 0){
 11069  16A5  0020               	movlb	0	; select bank0
 11070  16A6  1A8E               	btfsc	14,5	;volatile
 11071  16A7  2EA9               	goto	u8631
 11072  16A8  2EAA               	goto	u8630
 11073  16A9                     u8631:
 11074  16A9  2F05               	goto	l7280
 11075  16AA                     u8630:
 11076  16AA                     l7248:
 11077                           
 11078                           ;main.c: 725: if(editingClockAlarm == 0){
 11079  16AA  0861               	movf	_editingClockAlarm,w
 11080  16AB  0462               	iorwf	_editingClockAlarm+1,w
 11081  16AC  1D03               	btfss	3,2
 11082  16AD  2EAF               	goto	u8641
 11083  16AE  2EB0               	goto	u8640
 11084  16AF                     u8641:
 11085  16AF  2EB5               	goto	l7252
 11086  16B0                     u8640:
 11087  16B0                     l7250:
 11088                           
 11089                           ;main.c: 726: editingClockAlarm = 1;
 11090  16B0  3001               	movlw	1
 11091  16B1  00E1               	movwf	_editingClockAlarm
 11092  16B2  3000               	movlw	0
 11093  16B3  00E2               	movwf	_editingClockAlarm+1
 11094                           
 11095                           ;main.c: 728: } else if(editingClockAlarm == 1){
 11096  16B4  2EF9               	goto	l7276
 11097  16B5                     l7252:
 11098  16B5  0361               	decf	_editingClockAlarm,w
 11099  16B6  0462               	iorwf	_editingClockAlarm+1,w
 11100  16B7  1D03               	btfss	3,2
 11101  16B8  2EBA               	goto	u8651
 11102  16B9  2EBB               	goto	u8650
 11103  16BA                     u8651:
 11104  16BA  2ECB               	goto	l7260
 11105  16BB                     u8650:
 11106  16BB                     l7254:
 11107                           
 11108                           ;main.c: 729: if(clkAlarm.alarmVal.h >= 23){
 11109  16BB  3017               	movlw	23
 11110  16BC  0021               	movlb	1	; select bank1
 11111  16BD  0220               	subwf	_clkAlarm^(0+128),w
 11112  16BE  1C03               	skipc
 11113  16BF  2EC1               	goto	u8661
 11114  16C0  2EC2               	goto	u8660
 11115  16C1                     u8661:
 11116  16C1  2EC4               	goto	l7258
 11117  16C2                     u8660:
 11118  16C2                     l7256:
 11119                           
 11120                           ;main.c: 730: clkAlarm.alarmVal.h = 0;
 11121  16C2  01A0               	clrf	_clkAlarm^(0+128)
 11122                           
 11123                           ;main.c: 731: } else{
 11124  16C3  2EF9               	goto	l7276
 11125  16C4                     l7258:
 11126                           
 11127                           ;main.c: 732: clkAlarm.alarmVal.h++;
 11128  16C4  3001               	movlw	1
 11129  16C5  0020               	movlb	0	; select bank0
 11130  16C6  00D8               	movwf	??_editClock
 11131  16C7  0858               	movf	??_editClock,w
 11132  16C8  0021               	movlb	1	; select bank1
 11133  16C9  07A0               	addwf	_clkAlarm^(0+128),f
 11134  16CA  2EF9               	goto	l7276
 11135  16CB                     l7260:
 11136  16CB  3002               	movlw	2
 11137  16CC  0661               	xorwf	_editingClockAlarm,w
 11138  16CD  0462               	iorwf	_editingClockAlarm+1,w
 11139  16CE  1D03               	btfss	3,2
 11140  16CF  2ED1               	goto	u8671
 11141  16D0  2ED2               	goto	u8670
 11142  16D1                     u8671:
 11143  16D1  2EE2               	goto	l7268
 11144  16D2                     u8670:
 11145  16D2                     l7262:
 11146                           
 11147                           ;main.c: 735: if(clkAlarm.alarmVal.m == 59){
 11148  16D2  303B               	movlw	59
 11149  16D3  0021               	movlb	1	; select bank1
 11150  16D4  0621               	xorwf	(_clkAlarm^(0+128)+1),w
 11151  16D5  1D03               	btfss	3,2
 11152  16D6  2ED8               	goto	u8681
 11153  16D7  2ED9               	goto	u8680
 11154  16D8                     u8681:
 11155  16D8  2EDB               	goto	l7266
 11156  16D9                     u8680:
 11157  16D9                     l7264:
 11158                           
 11159                           ;main.c: 736: clkAlarm.alarmVal.m = 0;
 11160  16D9  01A1               	clrf	(_clkAlarm^(0+128)+1)
 11161                           
 11162                           ;main.c: 737: } else{
 11163  16DA  2EF9               	goto	l7276
 11164  16DB                     l7266:
 11165                           
 11166                           ;main.c: 738: clkAlarm.alarmVal.m++;
 11167  16DB  3001               	movlw	1
 11168  16DC  0020               	movlb	0	; select bank0
 11169  16DD  00D8               	movwf	??_editClock
 11170  16DE  0858               	movf	??_editClock,w
 11171  16DF  0021               	movlb	1	; select bank1
 11172  16E0  07A1               	addwf	(_clkAlarm^(0+128)+1),f
 11173  16E1  2EF9               	goto	l7276
 11174  16E2                     l7268:
 11175  16E2  3003               	movlw	3
 11176  16E3  0661               	xorwf	_editingClockAlarm,w
 11177  16E4  0462               	iorwf	_editingClockAlarm+1,w
 11178  16E5  1D03               	btfss	3,2
 11179  16E6  2EE8               	goto	u8691
 11180  16E7  2EE9               	goto	u8690
 11181  16E8                     u8691:
 11182  16E8  2EF9               	goto	l1407
 11183  16E9                     u8690:
 11184  16E9                     l7270:
 11185                           
 11186                           ;main.c: 741: if(clkAlarm.alarmVal.s == 59){
 11187  16E9  303B               	movlw	59
 11188  16EA  0021               	movlb	1	; select bank1
 11189  16EB  0622               	xorwf	(_clkAlarm^(0+128)+2),w
 11190  16EC  1D03               	btfss	3,2
 11191  16ED  2EEF               	goto	u8701
 11192  16EE  2EF0               	goto	u8700
 11193  16EF                     u8701:
 11194  16EF  2EF2               	goto	l7274
 11195  16F0                     u8700:
 11196  16F0                     l7272:
 11197                           
 11198                           ;main.c: 742: clkAlarm.alarmVal.s = 0;
 11199  16F0  01A2               	clrf	(_clkAlarm^(0+128)+2)
 11200                           
 11201                           ;main.c: 743: } else{
 11202  16F1  2EF9               	goto	l7276
 11203  16F2                     l7274:
 11204                           
 11205                           ;main.c: 744: clkAlarm.alarmVal.s++;
 11206  16F2  3001               	movlw	1
 11207  16F3  0020               	movlb	0	; select bank0
 11208  16F4  00D8               	movwf	??_editClock
 11209  16F5  0858               	movf	??_editClock,w
 11210  16F6  0021               	movlb	1	; select bank1
 11211  16F7  07A2               	addwf	(_clkAlarm^(0+128)+2),f
 11212  16F8  2EF9               	goto	l7276
 11213  16F9                     l1407:
 11214  16F9                     l7276:
 11215                           
 11216                           ;main.c: 745: };main.c: 746: };main.c: 747: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 11217  16F9  3021               	movlw	33
 11218  16FA  0020               	movlb	0	; select bank0
 11219  16FB  00D8               	movwf	??_editClock
 11220  16FC  3076               	movlw	118
 11221  16FD                     u9567:
 11222  16FD  0B89               	decfsz	9,f
 11223  16FE  2EFD               	goto	u9567
 11224  16FF  0BD8               	decfsz	??_editClock,f
 11225  1700  2EFD               	goto	u9567
 11226  1701  0000               	nop
 11227  1702                     l7278:
 11228                           
 11229                           ;main.c: 748: update_menuLCD();
 11230  1702  3183  2384  3196   	fcall	_update_menuLCD
 11231  1705                     l7280:
 11232                           
 11233                           ;main.c: 749: };main.c: 750: checkFlags();
 11234  1705  3187  2754  3196   	fcall	_checkFlags
 11235  1708                     l7282:
 11236                           
 11237                           ;main.c: 751: if(modeFlag != 1){
 11238  1708  0020               	movlb	0	; select bank0
 11239  1709  035F               	decf	_modeFlag,w
 11240  170A  0460               	iorwf	_modeFlag+1,w
 11241  170B  1903               	btfsc	3,2
 11242  170C  2F0E               	goto	u8711
 11243  170D  2F0F               	goto	u8710
 11244  170E                     u8711:
 11245  170E  2EA5               	goto	l1400
 11246  170F                     u8710:
 11247  170F                     l7284:
 11248                           
 11249                           ;main.c: 752: editingClockAlarm = 0;
 11250  170F  01E1               	clrf	_editingClockAlarm
 11251  1710  01E2               	clrf	_editingClockAlarm+1
 11252  1711                     l1418:	
 11253                           ;main.c: 753: break;
 11254                           
 11255  1711  0008               	return
 11256  1712                     __end_of_editClock:
 11257                           
 11258                           	psect	text9
 11259  0754                     __ptext9:	
 11260 ;; *************** function _checkFlags *****************
 11261 ;; Defined at:
 11262 ;;		line 670 in file "main.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;		None
 11265 ;; Auto vars:     Size  Location     Type
 11266 ;;  buff            7   49[BANK0 ] unsigned char [7]
 11267 ;; Return value:  Size  Location     Type
 11268 ;;                  1    wreg      void 
 11269 ;; Registers used:
 11270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11271 ;; Tracked objects:
 11272 ;;		On entry : 0/0
 11273 ;;		On exit  : 0/0
 11274 ;;		Unchanged: 0/0
 11275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11277 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;Total ram usage:        8 bytes
 11281 ;; Hardware stack levels used:    1
 11282 ;; Hardware stack levels required when called:    9
 11283 ;; This function calls:
 11284 ;;		_PWM6_LoadDutyValue
 11285 ;;		_PWM_Output_D4_Enable
 11286 ;;		_S1button
 11287 ;;		_TMR2_StartTimer
 11288 ;;		_monitoring_TEMP_LUM
 11289 ;;		_sendMessage
 11290 ;;		_update_menuLCD
 11291 ;;		_wirteEEPROMinit
 11292 ;; This function is called by:
 11293 ;;		_editClock
 11294 ;;		_editTemp
 11295 ;;		_editLum
 11296 ;;		_toggleAlarms
 11297 ;;		_main
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           
 11302                           ;psect for function _checkFlags
 11303  0754                     _checkFlags:
 11304  0754                     l7040:	
 11305                           ;incstack = 0
 11306                           ; Regs used in _checkFlags: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11307                           
 11308                           
 11309                           ;main.c: 671: if(writeEEPROM_flag){
 11310  0754  0021               	movlb	1	; select bank1
 11311  0755  082F               	movf	_writeEEPROM_flag^(0+128),w
 11312  0756  1903               	btfsc	3,2
 11313  0757  2F59               	goto	u8251
 11314  0758  2F5A               	goto	u8250
 11315  0759                     u8251:
 11316  0759  2F5F               	goto	l7046
 11317  075A                     u8250:
 11318  075A                     l7042:
 11319                           
 11320                           ;main.c: 672: wirteEEPROMinit();
 11321  075A  3188  2083  3187   	fcall	_wirteEEPROMinit
 11322  075D                     l7044:
 11323                           
 11324                           ;main.c: 673: writeEEPROM_flag = 0;
 11325  075D  0021               	movlb	1	; select bank1
 11326  075E  01AF               	clrf	_writeEEPROM_flag^(0+128)
 11327  075F                     l7046:
 11328                           
 11329                           ;main.c: 674: };main.c: 675: if(flagS1pushed){
 11330  075F  0832               	movf	_flagS1pushed^(0+128),w
 11331  0760  1903               	btfsc	3,2
 11332  0761  2F63               	goto	u8261
 11333  0762  2F64               	goto	u8260
 11334  0763                     u8261:
 11335  0763  2F6E               	goto	l7056
 11336  0764                     u8260:
 11337  0764                     l7048:
 11338                           
 11339                           ;main.c: 676: S1button();
 11340  0764  3195  258B  3187   	fcall	_S1button
 11341  0767                     l7050:
 11342                           
 11343                           ;main.c: 677: flagS1pushed=0;
 11344  0767  0021               	movlb	1	; select bank1
 11345  0768  01B2               	clrf	_flagS1pushed^(0+128)
 11346  0769                     l7052:
 11347                           
 11348                           ;main.c: 678: update_menuLCD();
 11349  0769  3183  2384  3187   	fcall	_update_menuLCD
 11350  076C                     l7054:
 11351                           
 11352                           ;main.c: 679: updateLCD=0;
 11353  076C  0021               	movlb	1	; select bank1
 11354  076D  01D5               	clrf	_updateLCD^(0+128)
 11355  076E                     l7056:
 11356                           
 11357                           ;main.c: 680: };main.c: 681: if(monitor_TEMP_LUM){
 11358  076E  0831               	movf	_monitor_TEMP_LUM^(0+128),w
 11359  076F  1903               	btfsc	3,2
 11360  0770  2F72               	goto	u8271
 11361  0771  2F73               	goto	u8270
 11362  0772                     u8271:
 11363  0772  2F78               	goto	l7062
 11364  0773                     u8270:
 11365  0773                     l7058:
 11366                           
 11367                           ;main.c: 682: monitoring_TEMP_LUM();
 11368  0773  318E  267F  3187   	fcall	_monitoring_TEMP_LUM
 11369  0776                     l7060:
 11370                           
 11371                           ;main.c: 683: monitor_TEMP_LUM = 0;
 11372  0776  0021               	movlb	1	; select bank1
 11373  0777  01B1               	clrf	_monitor_TEMP_LUM^(0+128)
 11374  0778                     l7062:
 11375                           
 11376                           ;main.c: 684: };main.c: 685: if(updateLCD){
 11377  0778  0855               	movf	_updateLCD^(0+128),w
 11378  0779  1903               	btfsc	3,2
 11379  077A  2F7C               	goto	u8281
 11380  077B  2F7D               	goto	u8280
 11381  077C                     u8281:
 11382  077C  2F82               	goto	l7068
 11383  077D                     u8280:
 11384  077D                     l7064:
 11385                           
 11386                           ;main.c: 686: update_menuLCD();
 11387  077D  3183  2384  3187   	fcall	_update_menuLCD
 11388  0780                     l7066:
 11389                           
 11390                           ;main.c: 687: updateLCD=0;
 11391  0780  0021               	movlb	1	; select bank1
 11392  0781  01D5               	clrf	_updateLCD^(0+128)
 11393  0782                     l7068:
 11394                           
 11395                           ;main.c: 688: };main.c: 689: if(bufHalfFull && !sentMessageBufHalfFull){
 11396  0782  082E               	movf	_bufHalfFull^(0+128),w
 11397  0783  1903               	btfsc	3,2
 11398  0784  2F86               	goto	u8291
 11399  0785  2F87               	goto	u8290
 11400  0786                     u8291:
 11401  0786  2FB7               	goto	l7078
 11402  0787                     u8290:
 11403  0787                     l7070:
 11404  0787  082C               	movf	_sentMessageBufHalfFull^(0+128),w
 11405  0788  1D03               	btfss	3,2
 11406  0789  2F8B               	goto	u8301
 11407  078A  2F8C               	goto	u8300
 11408  078B                     u8301:
 11409  078B  2FB7               	goto	l7078
 11410  078C                     u8300:
 11411  078C                     l7072:
 11412                           
 11413                           ;main.c: 691: uint8_t buff[7];;main.c: 692: buff[0] = (uint8_t)0xFD;
 11414  078C  30FD               	movlw	253
 11415  078D  0020               	movlb	0	; select bank0
 11416  078E  00D0               	movwf	??_checkFlags
 11417  078F  0850               	movf	??_checkFlags,w
 11418  0790  00D1               	movwf	checkFlags@buff
 11419                           
 11420                           ;main.c: 693: buff[1] = (uint8_t)0XCD;
 11421  0791  30CD               	movlw	205
 11422  0792  00D0               	movwf	??_checkFlags
 11423  0793  0850               	movf	??_checkFlags,w
 11424  0794  00D2               	movwf	checkFlags@buff+1
 11425                           
 11426                           ;main.c: 694: buff[2] = NREG;
 11427  0795  087D               	movf	_NREG,w
 11428  0796  00D0               	movwf	??_checkFlags
 11429  0797  0850               	movf	??_checkFlags,w
 11430  0798  00D3               	movwf	checkFlags@buff+2
 11431                           
 11432                           ;main.c: 695: buff[3] = nr;
 11433  0799  0879               	movf	_nr,w
 11434  079A  00D0               	movwf	??_checkFlags
 11435  079B  0850               	movf	??_checkFlags,w
 11436  079C  00D4               	movwf	checkFlags@buff+3
 11437                           
 11438                           ;main.c: 696: buff[4] = iread;
 11439  079D  087B               	movf	_iread,w
 11440  079E  00D0               	movwf	??_checkFlags
 11441  079F  0850               	movf	??_checkFlags,w
 11442  07A0  00D5               	movwf	checkFlags@buff+4
 11443                           
 11444                           ;main.c: 697: buff[5] = iwrite;
 11445  07A1  087A               	movf	_iwrite,w
 11446  07A2  00D0               	movwf	??_checkFlags
 11447  07A3  0850               	movf	??_checkFlags,w
 11448  07A4  00D6               	movwf	checkFlags@buff+5
 11449                           
 11450                           ;main.c: 698: buff[6] = (uint8_t)0xFE;
 11451  07A5  30FE               	movlw	254
 11452  07A6  00D0               	movwf	??_checkFlags
 11453  07A7  0850               	movf	??_checkFlags,w
 11454  07A8  00D7               	movwf	checkFlags@buff+6
 11455  07A9                     l7074:
 11456                           
 11457                           ;main.c: 699: sendMessage(7,buff);
 11458  07A9  3007               	movlw	7
 11459  07AA  00AA               	movwf	sendMessage@num
 11460  07AB  3000               	movlw	0
 11461  07AC  00AB               	movwf	sendMessage@num+1
 11462  07AD  3051               	movlw	(low (checkFlags@buff| 0))& (0+255)
 11463  07AE  00D0               	movwf	??_checkFlags
 11464  07AF  0850               	movf	??_checkFlags,w
 11465  07B0  00AC               	movwf	sendMessage@buffer
 11466  07B1  3191  21A3  3187   	fcall	_sendMessage
 11467  07B4                     l7076:
 11468                           
 11469                           ;main.c: 701: sentMessageBufHalfFull = 1;
 11470  07B4  0021               	movlb	1	; select bank1
 11471  07B5  01AC               	clrf	_sentMessageBufHalfFull^(0+128)
 11472  07B6  0AAC               	incf	_sentMessageBufHalfFull^(0+128),f
 11473  07B7                     l7078:
 11474                           
 11475                           ;main.c: 702: };main.c: 703: if(!bufHalfFull){
 11476  07B7  082E               	movf	_bufHalfFull^(0+128),w
 11477  07B8  1D03               	btfss	3,2
 11478  07B9  2FBB               	goto	u8311
 11479  07BA  2FBC               	goto	u8310
 11480  07BB                     u8311:
 11481  07BB  2FBD               	goto	l7082
 11482  07BC                     u8310:
 11483  07BC                     l7080:
 11484                           
 11485                           ;main.c: 704: sentMessageBufHalfFull = 0;
 11486  07BC  01AC               	clrf	_sentMessageBufHalfFull^(0+128)
 11487  07BD                     l7082:
 11488                           
 11489                           ;main.c: 705: };main.c: 706: if(PWM_on){
 11490  07BD  0833               	movf	_PWM_on^(0+128),w
 11491  07BE  1903               	btfsc	3,2
 11492  07BF  2FC1               	goto	u8321
 11493  07C0  2FC2               	goto	u8320
 11494  07C1                     u8321:
 11495  07C1  2FF4               	goto	l1397
 11496  07C2                     u8320:
 11497  07C2                     l7084:
 11498                           
 11499                           ;main.c: 707: if(PWM6EN==0){
 11500  07C2  0027               	movlb	7	; select bank7
 11501  07C3  1B8E               	btfsc	14,7	;volatile
 11502  07C4  2FC6               	goto	u8331
 11503  07C5  2FC7               	goto	u8330
 11504  07C6                     u8331:
 11505  07C6  2FCD               	goto	l7088
 11506  07C7                     u8330:
 11507  07C7                     l7086:
 11508                           
 11509                           ;main.c: 708: TMR2_StartTimer();
 11510  07C7  319E  26D7  3187   	fcall	_TMR2_StartTimer
 11511                           
 11512                           ;main.c: 709: PWM_Output_D4_Enable();
 11513  07CA  319E  26CB  3187   	fcall	_PWM_Output_D4_Enable
 11514  07CD                     l7088:
 11515                           
 11516                           ;main.c: 710: };main.c: 711: if(dimingLed <= 1023){
 11517  07CD  0021               	movlb	1	; select bank1
 11518  07CE  082B               	movf	(_dimingLed+1)^(0+128),w
 11519  07CF  3A80               	xorlw	128
 11520  07D0  0020               	movlb	0	; select bank0
 11521  07D1  00D0               	movwf	??_checkFlags
 11522  07D2  3084               	movlw	132
 11523  07D3  0250               	subwf	??_checkFlags,w
 11524  07D4  1D03               	skipz
 11525  07D5  2FD9               	goto	u8345
 11526  07D6  3000               	movlw	0
 11527  07D7  0021               	movlb	1	; select bank1
 11528  07D8  022A               	subwf	_dimingLed^(0+128),w
 11529  07D9                     u8345:
 11530  07D9  1803               	skipnc
 11531  07DA  2FDC               	goto	u8341
 11532  07DB  2FDD               	goto	u8340
 11533  07DC                     u8341:
 11534  07DC  2FE3               	goto	l7092
 11535  07DD                     u8340:
 11536  07DD                     l7090:
 11537                           
 11538                           ;main.c: 712: dimingLed += 1;
 11539  07DD  3001               	movlw	1
 11540  07DE  0021               	movlb	1	; select bank1
 11541  07DF  07AA               	addwf	_dimingLed^(0+128),f
 11542  07E0  3000               	movlw	0
 11543  07E1  3DAB               	addwfc	(_dimingLed+1)^(0+128),f
 11544                           
 11545                           ;main.c: 713: } else{
 11546  07E2  2FE6               	goto	l7094
 11547  07E3                     l7092:
 11548                           
 11549                           ;main.c: 714: dimingLed = 0;
 11550  07E3  0021               	movlb	1	; select bank1
 11551  07E4  01AA               	clrf	_dimingLed^(0+128)
 11552  07E5  01AB               	clrf	(_dimingLed+1)^(0+128)
 11553  07E6                     l7094:
 11554                           
 11555                           ;main.c: 715: };main.c: 716: PWM6_LoadDutyValue(dimingLed);
 11556  07E6  082B               	movf	(_dimingLed+1)^(0+128),w
 11557  07E7  0020               	movlb	0	; select bank0
 11558  07E8  00A8               	movwf	PWM6_LoadDutyValue@dutyValue+1
 11559  07E9  0021               	movlb	1	; select bank1
 11560  07EA  082A               	movf	_dimingLed^(0+128),w
 11561  07EB  0020               	movlb	0	; select bank0
 11562  07EC  00A7               	movwf	PWM6_LoadDutyValue@dutyValue
 11563  07ED  319F  27E7  3187   	fcall	_PWM6_LoadDutyValue
 11564  07F0                     l7096:
 11565                           
 11566                           ;main.c: 717: _delay((unsigned long)((1)*(1000000/4000.0)));
 11567  07F0  3053               	movlw	83
 11568  07F1                     u9577:
 11569  07F1  0B89               	decfsz	9,f
 11570  07F2  2FF1               	goto	u9577
 11571  07F3  0000               	nop
 11572  07F4                     l1397:
 11573  07F4  0008               	return
 11574  07F5                     __end_of_checkFlags:
 11575                           
 11576                           	psect	text10
 11577  0883                     __ptext10:	
 11578 ;; *************** function _wirteEEPROMinit *****************
 11579 ;; Defined at:
 11580 ;;		line 403 in file "main.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;		None
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;		None
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  1    wreg      void 
 11587 ;; Registers used:
 11588 ;;		wreg, status,2, status,0, pclath, cstack
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;Total ram usage:        1 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    5
 11601 ;; This function calls:
 11602 ;;		_DATAEE_WriteByte
 11603 ;; This function is called by:
 11604 ;;		_checkFlags
 11605 ;; This function uses a non-reentrant model
 11606 ;;
 11607                           
 11608                           
 11609                           ;psect for function _wirteEEPROMinit
 11610  0883                     _wirteEEPROMinit:
 11611  0883                     l6610:	
 11612                           ;incstack = 0
 11613                           ; Regs used in _wirteEEPROMinit: [wreg+status,2+status,0+pclath+cstack]
 11614                           
 11615                           
 11616                           ;main.c: 405: DATAEE_WriteByte( 0x7000 + (1), NREG);
 11617  0883  3001               	movlw	1
 11618  0884  0020               	movlb	0	; select bank0
 11619  0885  00AD               	movwf	DATAEE_WriteByte@bAdd
 11620  0886  3070               	movlw	112
 11621  0887  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11622  0888  087D               	movf	_NREG,w
 11623  0889  00B1               	movwf	??_wirteEEPROMinit
 11624  088A  0831               	movf	??_wirteEEPROMinit,w
 11625  088B  00AF               	movwf	DATAEE_WriteByte@bData
 11626  088C  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11627                           
 11628                           ;main.c: 406: DATAEE_WriteByte( 0x7000 + (2), PMON);
 11629  088F  3002               	movlw	2
 11630  0890  0020               	movlb	0	; select bank0
 11631  0891  00AD               	movwf	DATAEE_WriteByte@bAdd
 11632  0892  3070               	movlw	112
 11633  0893  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11634  0894  0021               	movlb	1	; select bank1
 11635  0895  0857               	movf	_PMON^(0+128),w
 11636  0896  0020               	movlb	0	; select bank0
 11637  0897  00B1               	movwf	??_wirteEEPROMinit
 11638  0898  0831               	movf	??_wirteEEPROMinit,w
 11639  0899  00AF               	movwf	DATAEE_WriteByte@bData
 11640  089A  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11641                           
 11642                           ;main.c: 407: DATAEE_WriteByte( 0x7000 + (3), TALA);
 11643  089D  3003               	movlw	3
 11644  089E  0020               	movlb	0	; select bank0
 11645  089F  00AD               	movwf	DATAEE_WriteByte@bAdd
 11646  08A0  3070               	movlw	112
 11647  08A1  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11648  08A2  0021               	movlb	1	; select bank1
 11649  08A3  0856               	movf	_TALA^(0+128),w
 11650  08A4  0020               	movlb	0	; select bank0
 11651  08A5  00B1               	movwf	??_wirteEEPROMinit
 11652  08A6  0831               	movf	??_wirteEEPROMinit,w
 11653  08A7  00AF               	movwf	DATAEE_WriteByte@bData
 11654  08A8  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11655                           
 11656                           ;main.c: 408: DATAEE_WriteByte( 0x7000 + (4), clkAlarm.alarmVal.h);
 11657  08AB  3004               	movlw	4
 11658  08AC  0020               	movlb	0	; select bank0
 11659  08AD  00AD               	movwf	DATAEE_WriteByte@bAdd
 11660  08AE  3070               	movlw	112
 11661  08AF  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11662  08B0  0021               	movlb	1	; select bank1
 11663  08B1  0820               	movf	_clkAlarm^(0+128),w
 11664  08B2  0020               	movlb	0	; select bank0
 11665  08B3  00B1               	movwf	??_wirteEEPROMinit
 11666  08B4  0831               	movf	??_wirteEEPROMinit,w
 11667  08B5  00AF               	movwf	DATAEE_WriteByte@bData
 11668  08B6  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11669                           
 11670                           ;main.c: 409: DATAEE_WriteByte( 0x7000 + (5), clkAlarm.alarmVal.m);
 11671  08B9  3005               	movlw	5
 11672  08BA  0020               	movlb	0	; select bank0
 11673  08BB  00AD               	movwf	DATAEE_WriteByte@bAdd
 11674  08BC  3070               	movlw	112
 11675  08BD  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11676  08BE  0021               	movlb	1	; select bank1
 11677  08BF  0821               	movf	(_clkAlarm^(0+128)+1),w
 11678  08C0  0020               	movlb	0	; select bank0
 11679  08C1  00B1               	movwf	??_wirteEEPROMinit
 11680  08C2  0831               	movf	??_wirteEEPROMinit,w
 11681  08C3  00AF               	movwf	DATAEE_WriteByte@bData
 11682  08C4  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11683                           
 11684                           ;main.c: 410: DATAEE_WriteByte( 0x7000 + (6), clkAlarm.alarmVal.s);
 11685  08C7  3006               	movlw	6
 11686  08C8  0020               	movlb	0	; select bank0
 11687  08C9  00AD               	movwf	DATAEE_WriteByte@bAdd
 11688  08CA  3070               	movlw	112
 11689  08CB  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11690  08CC  0021               	movlb	1	; select bank1
 11691  08CD  0822               	movf	(_clkAlarm^(0+128)+2),w
 11692  08CE  0020               	movlb	0	; select bank0
 11693  08CF  00B1               	movwf	??_wirteEEPROMinit
 11694  08D0  0831               	movf	??_wirteEEPROMinit,w
 11695  08D1  00AF               	movwf	DATAEE_WriteByte@bData
 11696  08D2  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11697                           
 11698                           ;main.c: 411: DATAEE_WriteByte( 0x7000 + (7), tempAlarm.alarmTemp);
 11699  08D5  3007               	movlw	7
 11700  08D6  0020               	movlb	0	; select bank0
 11701  08D7  00AD               	movwf	DATAEE_WriteByte@bAdd
 11702  08D8  3070               	movlw	112
 11703  08D9  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11704  08DA  0021               	movlb	1	; select bank1
 11705  08DB  0827               	movf	_tempAlarm^(0+128),w
 11706  08DC  0020               	movlb	0	; select bank0
 11707  08DD  00B1               	movwf	??_wirteEEPROMinit
 11708  08DE  0831               	movf	??_wirteEEPROMinit,w
 11709  08DF  00AF               	movwf	DATAEE_WriteByte@bData
 11710  08E0  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11711                           
 11712                           ;main.c: 412: DATAEE_WriteByte( 0x7000 + (8), lumAlarm.alarmLum);
 11713  08E3  3008               	movlw	8
 11714  08E4  0020               	movlb	0	; select bank0
 11715  08E5  00AD               	movwf	DATAEE_WriteByte@bAdd
 11716  08E6  3070               	movlw	112
 11717  08E7  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11718  08E8  0021               	movlb	1	; select bank1
 11719  08E9  0824               	movf	_lumAlarm^(0+128),w
 11720  08EA  0020               	movlb	0	; select bank0
 11721  08EB  00B1               	movwf	??_wirteEEPROMinit
 11722  08EC  0831               	movf	??_wirteEEPROMinit,w
 11723  08ED  00AF               	movwf	DATAEE_WriteByte@bData
 11724  08EE  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11725                           
 11726                           ;main.c: 413: DATAEE_WriteByte( 0x7000 + (9), ALAF);
 11727  08F1  3009               	movlw	9
 11728  08F2  0020               	movlb	0	; select bank0
 11729  08F3  00AD               	movwf	DATAEE_WriteByte@bAdd
 11730  08F4  3070               	movlw	112
 11731  08F5  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11732  08F6  087C               	movf	_ALAF,w
 11733  08F7  00B1               	movwf	??_wirteEEPROMinit
 11734  08F8  0831               	movf	??_wirteEEPROMinit,w
 11735  08F9  00AF               	movwf	DATAEE_WriteByte@bData
 11736  08FA  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11737                           
 11738                           ;main.c: 414: DATAEE_WriteByte( 0x7000 + (10), t.h);
 11739  08FD  300A               	movlw	10
 11740  08FE  0020               	movlb	0	; select bank0
 11741  08FF  00AD               	movwf	DATAEE_WriteByte@bAdd
 11742  0900  3070               	movlw	112
 11743  0901  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11744  0902  085C               	movf	_t,w
 11745  0903  00B1               	movwf	??_wirteEEPROMinit
 11746  0904  0831               	movf	??_wirteEEPROMinit,w
 11747  0905  00AF               	movwf	DATAEE_WriteByte@bData
 11748  0906  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11749                           
 11750                           ;main.c: 415: DATAEE_WriteByte( 0x7000 + (11), t.m);
 11751  0909  300B               	movlw	11
 11752  090A  0020               	movlb	0	; select bank0
 11753  090B  00AD               	movwf	DATAEE_WriteByte@bAdd
 11754  090C  3070               	movlw	112
 11755  090D  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11756  090E  085D               	movf	_t+1,w
 11757  090F  00B1               	movwf	??_wirteEEPROMinit
 11758  0910  0831               	movf	??_wirteEEPROMinit,w
 11759  0911  00AF               	movwf	DATAEE_WriteByte@bData
 11760  0912  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11761                           
 11762                           ;main.c: 416: DATAEE_WriteByte( 0x7000 + (12), iwrite);
 11763  0915  300C               	movlw	12
 11764  0916  0020               	movlb	0	; select bank0
 11765  0917  00AD               	movwf	DATAEE_WriteByte@bAdd
 11766  0918  3070               	movlw	112
 11767  0919  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11768  091A  087A               	movf	_iwrite,w
 11769  091B  00B1               	movwf	??_wirteEEPROMinit
 11770  091C  0831               	movf	??_wirteEEPROMinit,w
 11771  091D  00AF               	movwf	DATAEE_WriteByte@bData
 11772  091E  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11773                           
 11774                           ;main.c: 417: DATAEE_WriteByte( 0x7000 + (13), NREG + PMON + TALA + clkAlarm.alarmVal.h 
      +                          + clkAlarm.alarmVal.m + clkAlarm.alarmVal.s + tempAlarm.alarmTemp + lumAlarm.alarmLum + 
      +                          ALAF + t.h + t.m + iwrite);
 11775  0921  300D               	movlw	13
 11776  0922  0020               	movlb	0	; select bank0
 11777  0923  00AD               	movwf	DATAEE_WriteByte@bAdd
 11778  0924  3070               	movlw	112
 11779  0925  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11780  0926  0021               	movlb	1	; select bank1
 11781  0927  0821               	movf	(_clkAlarm^(0+128)+1),w
 11782  0928  0722               	addwf	(_clkAlarm^(0+128)+2),w
 11783  0929  0020               	movlb	0	; select bank0
 11784  092A  075D               	addwf	_t+1,w
 11785  092B  0021               	movlb	1	; select bank1
 11786  092C  0720               	addwf	_clkAlarm^(0+128),w
 11787  092D  0727               	addwf	_tempAlarm^(0+128),w
 11788  092E  0724               	addwf	_lumAlarm^(0+128),w
 11789  092F  0020               	movlb	0	; select bank0
 11790  0930  075C               	addwf	_t,w
 11791  0931  077D               	addwf	_NREG,w
 11792  0932  0021               	movlb	1	; select bank1
 11793  0933  0757               	addwf	_PMON^(0+128),w
 11794  0934  0756               	addwf	_TALA^(0+128),w
 11795  0935  077C               	addwf	_ALAF,w
 11796  0936  077A               	addwf	_iwrite,w
 11797  0937  0020               	movlb	0	; select bank0
 11798  0938  00B1               	movwf	??_wirteEEPROMinit
 11799  0939  0831               	movf	??_wirteEEPROMinit,w
 11800  093A  00AF               	movwf	DATAEE_WriteByte@bData
 11801  093B  3191  21C6  3188   	fcall	_DATAEE_WriteByte
 11802  093E                     l1286:
 11803  093E  0008               	return
 11804  093F                     __end_of_wirteEEPROMinit:
 11805                           
 11806                           	psect	text11
 11807  0384                     __ptext11:	
 11808 ;; *************** function _update_menuLCD *****************
 11809 ;; Defined at:
 11810 ;;		line 423 in file "main.c"
 11811 ;; Parameters:    Size  Location     Type
 11812 ;;		None
 11813 ;; Auto vars:     Size  Location     Type
 11814 ;;  diff            3   15[BANK1 ] struct Time
 11815 ;;  str             8    0[BANK1 ] unsigned char [8]
 11816 ;;  tt              4    8[BANK1 ] unsigned char [4]
 11817 ;;  l               3   12[BANK1 ] unsigned char [3]
 11818 ;; Return value:  Size  Location     Type
 11819 ;;                  1    wreg      void 
 11820 ;; Registers used:
 11821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11822 ;; Tracked objects:
 11823 ;;		On entry : 0/0
 11824 ;;		On exit  : 0/0
 11825 ;;		Unchanged: 0/0
 11826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11828 ;;      Locals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
 11829 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11830 ;;      Totals:         0       6      18       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;Total ram usage:       24 bytes
 11832 ;; Hardware stack levels used:    1
 11833 ;; Hardware stack levels required when called:    8
 11834 ;; This function calls:
 11835 ;;		_LCDchar
 11836 ;;		_LCDcmd
 11837 ;;		_LCDstr
 11838 ;;		_PWM6_LoadDutyValue
 11839 ;;		_PWM_Output_D4_Disable
 11840 ;;		_TMR2_StopTimer
 11841 ;;		_differenceBetweenTimePeriod
 11842 ;;		_sprintf
 11843 ;; This function is called by:
 11844 ;;		_checkFlags
 11845 ;;		_editClock
 11846 ;;		_editTemp
 11847 ;;		_editLum
 11848 ;;		_toggleAlarms
 11849 ;; This function uses a non-reentrant model
 11850 ;;
 11851                           
 11852                           
 11853                           ;psect for function _update_menuLCD
 11854  0384                     _update_menuLCD:
 11855  0384                     l6612:	
 11856                           ;incstack = 0
 11857                           ; Regs used in _update_menuLCD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11858                           
 11859                           
 11860                           ;main.c: 425: if(bufHalfFull){
 11861  0384  0021               	movlb	1	; select bank1
 11862  0385  082E               	movf	_bufHalfFull^(0+128),w
 11863  0386  1903               	btfsc	3,2
 11864  0387  2B89               	goto	u7641
 11865  0388  2B8A               	goto	u7640
 11866  0389                     u7641:
 11867  0389  2B93               	goto	l6616
 11868  038A                     u7640:
 11869  038A                     l6614:
 11870                           
 11871                           ;main.c: 426: LCDcmd(0xc8);
 11872  038A  30C8               	movlw	200
 11873  038B  319E  26FE  3183   	fcall	_LCDcmd
 11874                           
 11875                           ;main.c: 427: LCDchar('M');
 11876  038E  304D               	movlw	77
 11877  038F  319F  273C  3183   	fcall	_LCDchar
 11878                           
 11879                           ;main.c: 428: } else{
 11880  0392  2B9B               	goto	l6618
 11881  0393                     l6616:
 11882                           
 11883                           ;main.c: 429: LCDcmd(0xc8);
 11884  0393  30C8               	movlw	200
 11885  0394  319E  26FE  3183   	fcall	_LCDcmd
 11886                           
 11887                           ;main.c: 430: LCDchar(' ');
 11888  0397  3020               	movlw	32
 11889  0398  319F  273C  3183   	fcall	_LCDchar
 11890  039B                     l6618:
 11891                           
 11892                           ;main.c: 431: };main.c: 433: char str[8];;main.c: 434: if(editingClockAlarm){
 11893  039B  0020               	movlb	0	; select bank0
 11894  039C  0861               	movf	_editingClockAlarm,w
 11895  039D  0462               	iorwf	_editingClockAlarm+1,w
 11896  039E  1903               	btfsc	3,2
 11897  039F  2BA1               	goto	u7651
 11898  03A0  2BA2               	goto	u7650
 11899  03A1                     u7651:
 11900  03A1  2BC6               	goto	l6622
 11901  03A2                     u7650:
 11902  03A2                     l6620:
 11903                           
 11904                           ;main.c: 435: sprintf(str, "%02d:%02d:%02d", clkAlarm.alarmVal.h,clkAlarm.alarmVal.m,clk
      +                          Alarm.alarmVal.s);
 11905  03A2  3027               	movlw	low (STR_1| (0+32768))
 11906  03A3  00B5               	movwf	sprintf@f
 11907  03A4  3098               	movlw	high (STR_1| (0+32768))
 11908  03A5  00B6               	movwf	sprintf@f+1
 11909  03A6  0021               	movlb	1	; select bank1
 11910  03A7  0820               	movf	_clkAlarm^(0+128),w
 11911  03A8  0020               	movlb	0	; select bank0
 11912  03A9  00CA               	movwf	??_update_menuLCD
 11913  03AA  01CB               	clrf	??_update_menuLCD+1
 11914  03AB  084A               	movf	??_update_menuLCD,w
 11915  03AC  00B7               	movwf	?_sprintf+2
 11916  03AD  084B               	movf	??_update_menuLCD+1,w
 11917  03AE  00B8               	movwf	?_sprintf+3
 11918  03AF  0021               	movlb	1	; select bank1
 11919  03B0  0821               	movf	(_clkAlarm^(0+128)+1),w
 11920  03B1  0020               	movlb	0	; select bank0
 11921  03B2  00CC               	movwf	??_update_menuLCD+2
 11922  03B3  01CD               	clrf	??_update_menuLCD+3
 11923  03B4  084C               	movf	??_update_menuLCD+2,w
 11924  03B5  00B9               	movwf	?_sprintf+4
 11925  03B6  084D               	movf	??_update_menuLCD+3,w
 11926  03B7  00BA               	movwf	?_sprintf+5
 11927  03B8  0021               	movlb	1	; select bank1
 11928  03B9  0822               	movf	(_clkAlarm^(0+128)+2),w
 11929  03BA  0020               	movlb	0	; select bank0
 11930  03BB  00CE               	movwf	??_update_menuLCD+4
 11931  03BC  01CF               	clrf	??_update_menuLCD+5
 11932  03BD  084E               	movf	??_update_menuLCD+4,w
 11933  03BE  00BB               	movwf	?_sprintf+6
 11934  03BF  084F               	movf	??_update_menuLCD+5,w
 11935  03C0  00BC               	movwf	?_sprintf+7
 11936  03C1  30BC               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11937  03C2  3185  25B6  3183   	fcall	_sprintf
 11938                           
 11939                           ;main.c: 436: } else {
 11940  03C5  2BE3               	goto	l6624
 11941  03C6                     l6622:
 11942                           
 11943                           ;main.c: 437: sprintf(str, "%02d:%02d:%02d", t.h,t.m,t.s);
 11944  03C6  3027               	movlw	low (STR_1| (0+32768))
 11945  03C7  00B5               	movwf	sprintf@f
 11946  03C8  3098               	movlw	high (STR_1| (0+32768))
 11947  03C9  00B6               	movwf	sprintf@f+1
 11948  03CA  085C               	movf	_t,w
 11949  03CB  00CA               	movwf	??_update_menuLCD
 11950  03CC  01CB               	clrf	??_update_menuLCD+1
 11951  03CD  084A               	movf	??_update_menuLCD,w
 11952  03CE  00B7               	movwf	?_sprintf+2
 11953  03CF  084B               	movf	??_update_menuLCD+1,w
 11954  03D0  00B8               	movwf	?_sprintf+3
 11955  03D1  085D               	movf	_t+1,w
 11956  03D2  00CC               	movwf	??_update_menuLCD+2
 11957  03D3  01CD               	clrf	??_update_menuLCD+3
 11958  03D4  084C               	movf	??_update_menuLCD+2,w
 11959  03D5  00B9               	movwf	?_sprintf+4
 11960  03D6  084D               	movf	??_update_menuLCD+3,w
 11961  03D7  00BA               	movwf	?_sprintf+5
 11962  03D8  085E               	movf	_t+2,w
 11963  03D9  00CE               	movwf	??_update_menuLCD+4
 11964  03DA  01CF               	clrf	??_update_menuLCD+5
 11965  03DB  084E               	movf	??_update_menuLCD+4,w
 11966  03DC  00BB               	movwf	?_sprintf+6
 11967  03DD  084F               	movf	??_update_menuLCD+5,w
 11968  03DE  00BC               	movwf	?_sprintf+7
 11969  03DF  30BC               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11970  03E0  3185  25B6  3183   	fcall	_sprintf
 11971  03E3                     l6624:
 11972                           
 11973                           ;main.c: 438: };main.c: 439: LCDcmd(0x80);
 11974  03E3  3080               	movlw	128
 11975  03E4  319E  26FE  3183   	fcall	_LCDcmd
 11976  03E7                     l6626:
 11977                           
 11978                           ;main.c: 440: LCDstr(str);
 11979  03E7  30BC               	movlw	low update_menuLCD@str
 11980  03E8  0020               	movlb	0	; select bank0
 11981  03E9  00B0               	movwf	LCDstr@p
 11982  03EA  3000               	movlw	high update_menuLCD@str
 11983  03EB  00B1               	movwf	LCDstr@p+1
 11984  03EC  3190  204D  3183   	fcall	_LCDstr
 11985  03EF                     l6628:
 11986                           
 11987                           ;main.c: 443: if(clkAlarm.trigger == 1){
 11988  03EF  0021               	movlb	1	; select bank1
 11989  03F0  0323               	decf	(_clkAlarm^(0+128)+3),w
 11990  03F1  1D03               	btfss	3,2
 11991  03F2  2BF4               	goto	u7661
 11992  03F3  2BF5               	goto	u7660
 11993  03F4                     u7661:
 11994  03F4  2BFE               	goto	l6632
 11995  03F5                     u7660:
 11996  03F5                     l6630:
 11997                           
 11998                           ;main.c: 444: LCDcmd(0x8B);
 11999  03F5  308B               	movlw	139
 12000  03F6  319E  26FE  3183   	fcall	_LCDcmd
 12001                           
 12002                           ;main.c: 445: LCDchar('C');
 12003  03F9  3043               	movlw	67
 12004  03FA  319F  273C  3183   	fcall	_LCDchar
 12005                           
 12006                           ;main.c: 446: } else if(modeFlag == 0){
 12007  03FD  2C0D               	goto	l6636
 12008  03FE                     l6632:
 12009  03FE  0020               	movlb	0	; select bank0
 12010  03FF  085F               	movf	_modeFlag,w
 12011  0400  0460               	iorwf	_modeFlag+1,w
 12012  0401  1D03               	btfss	3,2
 12013  0402  2C04               	goto	u7671
 12014  0403  2C05               	goto	u7670
 12015  0404                     u7671:
 12016  0404  2C0D               	goto	l6636
 12017  0405                     u7670:
 12018  0405                     l6634:
 12019                           
 12020                           ;main.c: 447: LCDcmd(0x8B);
 12021  0405  308B               	movlw	139
 12022  0406  319E  26FE  3183   	fcall	_LCDcmd
 12023                           
 12024                           ;main.c: 448: LCDchar(' ');
 12025  0409  3020               	movlw	32
 12026  040A  319F  273C  3183   	fcall	_LCDchar
 12027  040D                     l6636:
 12028                           
 12029                           ;main.c: 449: };main.c: 452: if(tempAlarm.trigger == 1){
 12030  040D  0021               	movlb	1	; select bank1
 12031  040E  0328               	decf	(_tempAlarm^(0+128)+1),w
 12032  040F  1D03               	btfss	3,2
 12033  0410  2C12               	goto	u7681
 12034  0411  2C13               	goto	u7680
 12035  0412                     u7681:
 12036  0412  2C1C               	goto	l6640
 12037  0413                     u7680:
 12038  0413                     l6638:
 12039                           
 12040                           ;main.c: 453: LCDcmd(0x8C);
 12041  0413  308C               	movlw	140
 12042  0414  319E  26FE  3183   	fcall	_LCDcmd
 12043                           
 12044                           ;main.c: 454: LCDchar('T');
 12045  0417  3054               	movlw	84
 12046  0418  319F  273C  3183   	fcall	_LCDchar
 12047                           
 12048                           ;main.c: 455: } else if(modeFlag == 0){
 12049  041B  2C2B               	goto	l6644
 12050  041C                     l6640:
 12051  041C  0020               	movlb	0	; select bank0
 12052  041D  085F               	movf	_modeFlag,w
 12053  041E  0460               	iorwf	_modeFlag+1,w
 12054  041F  1D03               	btfss	3,2
 12055  0420  2C22               	goto	u7691
 12056  0421  2C23               	goto	u7690
 12057  0422                     u7691:
 12058  0422  2C2B               	goto	l6644
 12059  0423                     u7690:
 12060  0423                     l6642:
 12061                           
 12062                           ;main.c: 456: LCDcmd(0x8C);
 12063  0423  308C               	movlw	140
 12064  0424  319E  26FE  3183   	fcall	_LCDcmd
 12065                           
 12066                           ;main.c: 457: LCDchar(' ');
 12067  0427  3020               	movlw	32
 12068  0428  319F  273C  3183   	fcall	_LCDchar
 12069  042B                     l6644:
 12070                           
 12071                           ;main.c: 458: };main.c: 461: if(lumAlarm.trigger == 1){
 12072  042B  0021               	movlb	1	; select bank1
 12073  042C  0325               	decf	(_lumAlarm^(0+128)+1),w
 12074  042D  1D03               	btfss	3,2
 12075  042E  2C30               	goto	u7701
 12076  042F  2C31               	goto	u7700
 12077  0430                     u7701:
 12078  0430  2C3A               	goto	l6648
 12079  0431                     u7700:
 12080  0431                     l6646:
 12081                           
 12082                           ;main.c: 462: LCDcmd(0x8D);
 12083  0431  308D               	movlw	141
 12084  0432  319E  26FE  3183   	fcall	_LCDcmd
 12085                           
 12086                           ;main.c: 463: LCDchar('L');
 12087  0435  304C               	movlw	76
 12088  0436  319F  273C  3183   	fcall	_LCDchar
 12089                           
 12090                           ;main.c: 464: } else if(modeFlag == 0){
 12091  0439  2C49               	goto	l1300
 12092  043A                     l6648:
 12093  043A  0020               	movlb	0	; select bank0
 12094  043B  085F               	movf	_modeFlag,w
 12095  043C  0460               	iorwf	_modeFlag+1,w
 12096  043D  1D03               	btfss	3,2
 12097  043E  2C40               	goto	u7711
 12098  043F  2C41               	goto	u7710
 12099  0440                     u7711:
 12100  0440  2C49               	goto	l1300
 12101  0441                     u7710:
 12102  0441                     l6650:
 12103                           
 12104                           ;main.c: 465: LCDcmd(0x8D);
 12105  0441  308D               	movlw	141
 12106  0442  319E  26FE  3183   	fcall	_LCDcmd
 12107                           
 12108                           ;main.c: 466: LCDchar(' ');
 12109  0445  3020               	movlw	32
 12110  0446  319F  273C  3183   	fcall	_LCDchar
 12111  0449                     l1300:
 12112                           
 12113                           ;main.c: 467: };main.c: 469: LCDcmd(0x8F);
 12114  0449  308F               	movlw	143
 12115  044A  319E  26FE  3183   	fcall	_LCDcmd
 12116                           
 12117                           ;main.c: 470: LCDchar(ALAF);
 12118  044D  087C               	movf	_ALAF,w
 12119  044E  319F  273C  3183   	fcall	_LCDchar
 12120  0451                     l6652:
 12121                           
 12122                           ;main.c: 473: if(ALAF == 'A'){
 12123  0451  3041               	movlw	65
 12124  0452  067C               	xorwf	_ALAF,w
 12125  0453  1D03               	btfss	3,2
 12126  0454  2C56               	goto	u7721
 12127  0455  2C57               	goto	u7720
 12128  0456                     u7721:
 12129  0456  2CC9               	goto	l6686
 12130  0457                     u7720:
 12131  0457                     l6654:
 12132                           
 12133                           ;main.c: 474: if(clkAlarm.trigger || tempAlarm.trigger || lumAlarm.trigger){
 12134  0457  0021               	movlb	1	; select bank1
 12135  0458  0823               	movf	(_clkAlarm^(0+128)+3),w
 12136  0459  1D03               	btfss	3,2
 12137  045A  2C5C               	goto	u7731
 12138  045B  2C5D               	goto	u7730
 12139  045C                     u7731:
 12140  045C  2C67               	goto	l6660
 12141  045D                     u7730:
 12142  045D                     l6656:
 12143  045D  0828               	movf	(_tempAlarm^(0+128)+1),w
 12144  045E  1D03               	btfss	3,2
 12145  045F  2C61               	goto	u7741
 12146  0460  2C62               	goto	u7740
 12147  0461                     u7741:
 12148  0461  2C67               	goto	l6660
 12149  0462                     u7740:
 12150  0462                     l6658:
 12151  0462  0825               	movf	(_lumAlarm^(0+128)+1),w
 12152  0463  1903               	btfsc	3,2
 12153  0464  2C66               	goto	u7751
 12154  0465  2C67               	goto	u7750
 12155  0466                     u7751:
 12156  0466  2CC3               	goto	l1303
 12157  0467                     u7750:
 12158  0467                     l6660:
 12159                           
 12160                           ;main.c: 475: if(alarmPWMStart.h == 0xff){
 12161  0467  0A4E               	incf	_alarmPWMStart^(0+128),w
 12162  0468  1D03               	btfss	3,2
 12163  0469  2C6B               	goto	u7761
 12164  046A  2C6C               	goto	u7760
 12165  046B                     u7761:
 12166  046B  2C7E               	goto	l1306
 12167  046C                     u7760:
 12168  046C                     l6662:
 12169                           
 12170                           ;main.c: 476: alarmPWMStart.h = t.h;
 12171  046C  0020               	movlb	0	; select bank0
 12172  046D  085C               	movf	_t,w
 12173  046E  00CA               	movwf	??_update_menuLCD
 12174  046F  084A               	movf	??_update_menuLCD,w
 12175  0470  0021               	movlb	1	; select bank1
 12176  0471  00CE               	movwf	_alarmPWMStart^(0+128)
 12177                           
 12178                           ;main.c: 477: alarmPWMStart.m = t.m;
 12179  0472  0020               	movlb	0	; select bank0
 12180  0473  085D               	movf	_t+1,w
 12181  0474  00CA               	movwf	??_update_menuLCD
 12182  0475  084A               	movf	??_update_menuLCD,w
 12183  0476  0021               	movlb	1	; select bank1
 12184  0477  00CF               	movwf	(_alarmPWMStart^(0+128)+1)
 12185                           
 12186                           ;main.c: 478: alarmPWMStart.s = t.s;
 12187  0478  0020               	movlb	0	; select bank0
 12188  0479  085E               	movf	_t+2,w
 12189  047A  00CA               	movwf	??_update_menuLCD
 12190  047B  084A               	movf	??_update_menuLCD,w
 12191  047C  0021               	movlb	1	; select bank1
 12192  047D  00D0               	movwf	(_alarmPWMStart^(0+128)+2)
 12193  047E                     l1306:
 12194                           
 12195                           ;main.c: 479: };main.c: 480: struct Time diff = {0,0,0};
 12196  047E  0022               	movlb	2	; select bank2
 12197  047F  0854               	movf	update_menuLCD@F12903^(0+256),w
 12198  0480  0021               	movlb	1	; select bank1
 12199  0481  00CB               	movwf	update_menuLCD@diff^(0+128)
 12200  0482  0022               	movlb	2	; select bank2
 12201  0483  0855               	movf	(update_menuLCD@F12903+1)^(0+256),w
 12202  0484  0021               	movlb	1	; select bank1
 12203  0485  00CC               	movwf	(update_menuLCD@diff+1)^(0+128)
 12204  0486  0022               	movlb	2	; select bank2
 12205  0487  0856               	movf	(update_menuLCD@F12903+2)^(0+256),w
 12206  0488  0021               	movlb	1	; select bank1
 12207  0489  00CD               	movwf	(update_menuLCD@diff+2)^(0+128)
 12208  048A                     l6664:
 12209                           
 12210                           ;main.c: 481: differenceBetweenTimePeriod( t, alarmPWMStart, &diff);
 12211  048A  0020               	movlb	0	; select bank0
 12212  048B  085C               	movf	_t,w
 12213  048C  00A7               	movwf	differenceBetweenTimePeriod@start
 12214  048D  085D               	movf	_t+1,w
 12215  048E  00A8               	movwf	differenceBetweenTimePeriod@start+1
 12216  048F  085E               	movf	_t+2,w
 12217  0490  00A9               	movwf	differenceBetweenTimePeriod@start+2
 12218  0491  0021               	movlb	1	; select bank1
 12219  0492  084E               	movf	_alarmPWMStart^(0+128),w
 12220  0493  0020               	movlb	0	; select bank0
 12221  0494  00AA               	movwf	differenceBetweenTimePeriod@stop
 12222  0495  0021               	movlb	1	; select bank1
 12223  0496  084F               	movf	(_alarmPWMStart+1)^(0+128),w
 12224  0497  0020               	movlb	0	; select bank0
 12225  0498  00AB               	movwf	differenceBetweenTimePeriod@stop+1
 12226  0499  0021               	movlb	1	; select bank1
 12227  049A  0850               	movf	(_alarmPWMStart+2)^(0+128),w
 12228  049B  0020               	movlb	0	; select bank0
 12229  049C  00AC               	movwf	differenceBetweenTimePeriod@stop+2
 12230  049D  30CB               	movlw	(low (update_menuLCD@diff| 0))& (0+255)
 12231  049E  00CA               	movwf	??_update_menuLCD
 12232  049F  084A               	movf	??_update_menuLCD,w
 12233  04A0  00AD               	movwf	differenceBetweenTimePeriod@diff
 12234  04A1  3193  230E  3183   	fcall	_differenceBetweenTimePeriod
 12235  04A4                     l6666:
 12236                           
 12237                           ;main.c: 483: if(diff.s <= TALA){
 12238  04A4  0021               	movlb	1	; select bank1
 12239  04A5  084D               	movf	(update_menuLCD@diff^(0+128)+2),w
 12240  04A6  0256               	subwf	_TALA^(0+128),w
 12241  04A7  1C03               	skipc
 12242  04A8  2CAA               	goto	u7771
 12243  04A9  2CAB               	goto	u7770
 12244  04AA                     u7771:
 12245  04AA  2CAE               	goto	l1309
 12246  04AB                     u7770:
 12247  04AB                     l6668:
 12248                           
 12249                           ;main.c: 484: PWM_on = 1;
 12250  04AB  01B3               	clrf	_PWM_on^(0+128)
 12251  04AC  0AB3               	incf	_PWM_on^(0+128),f
 12252                           
 12253                           ;main.c: 495: } else if(PWM6EN==1){
 12254  04AD  2CC9               	goto	l6686
 12255  04AE                     l1309:
 12256  04AE  0027               	movlb	7	; select bank7
 12257  04AF  1F8E               	btfss	14,7	;volatile
 12258  04B0  2CB2               	goto	u7781
 12259  04B1  2CB3               	goto	u7780
 12260  04B2                     u7781:
 12261  04B2  2CC9               	goto	l1312
 12262  04B3                     u7780:
 12263  04B3                     l6670:
 12264                           
 12265                           ;main.c: 496: PWM_on = 0;
 12266  04B3  0021               	movlb	1	; select bank1
 12267  04B4  01B3               	clrf	_PWM_on^(0+128)
 12268  04B5                     l6672:
 12269                           
 12270                           ;main.c: 497: PWM6_LoadDutyValue(0);
 12271  04B5  3000               	movlw	0
 12272  04B6  0020               	movlb	0	; select bank0
 12273  04B7  00A7               	movwf	PWM6_LoadDutyValue@dutyValue
 12274  04B8  00A8               	movwf	PWM6_LoadDutyValue@dutyValue+1
 12275  04B9  319F  27E7  3183   	fcall	_PWM6_LoadDutyValue
 12276  04BC                     l6674:
 12277                           
 12278                           ;main.c: 498: TMR2_StopTimer();
 12279  04BC  319E  26DB  3183   	fcall	_TMR2_StopTimer
 12280  04BF                     l6676:
 12281                           
 12282                           ;main.c: 499: PWM_Output_D4_Disable();
 12283  04BF  319E  26D1  3183   	fcall	_PWM_Output_D4_Disable
 12284  04C2  2CC9               	goto	l6686
 12285  04C3                     l1303:
 12286  04C3  0027               	movlb	7	; select bank7
 12287  04C4  1F8E               	btfss	14,7	;volatile
 12288  04C5  2CC7               	goto	u7791
 12289  04C6  2CC8               	goto	u7790
 12290  04C7                     u7791:
 12291  04C7  2CC9               	goto	l6686
 12292  04C8                     u7790:
 12293  04C8  2CB3               	goto	l6670
 12294  04C9                     l1312:
 12295  04C9                     l6686:
 12296                           
 12297                           ;main.c: 506: };main.c: 507: };main.c: 509: LCDcmd(0xc0);
 12298  04C9  30C0               	movlw	192
 12299  04CA  319E  26FE  3183   	fcall	_LCDcmd
 12300  04CD                     l6688:
 12301                           
 12302                           ;main.c: 510: char tt[4];;main.c: 511: if(editingTempAlarm){
 12303  04CD  0021               	movlb	1	; select bank1
 12304  04CE  0835               	movf	_editingTempAlarm^(0+128),w
 12305  04CF  1903               	btfsc	3,2
 12306  04D0  2CD2               	goto	u7801
 12307  04D1  2CD3               	goto	u7800
 12308  04D2                     u7801:
 12309  04D2  2CE6               	goto	l6692
 12310  04D3                     u7800:
 12311  04D3                     l6690:
 12312                           
 12313                           ;main.c: 512: sprintf(tt, "%02d C", tempAlarm.alarmTemp);
 12314  04D3  3040               	movlw	low (STR_3| (0+32768))
 12315  04D4  0020               	movlb	0	; select bank0
 12316  04D5  00B5               	movwf	sprintf@f
 12317  04D6  3098               	movlw	high (STR_3| (0+32768))
 12318  04D7  00B6               	movwf	sprintf@f+1
 12319  04D8  0021               	movlb	1	; select bank1
 12320  04D9  0827               	movf	_tempAlarm^(0+128),w
 12321  04DA  0020               	movlb	0	; select bank0
 12322  04DB  00CA               	movwf	??_update_menuLCD
 12323  04DC  01CB               	clrf	??_update_menuLCD+1
 12324  04DD  084A               	movf	??_update_menuLCD,w
 12325  04DE  00B7               	movwf	?_sprintf+2
 12326  04DF  084B               	movf	??_update_menuLCD+1,w
 12327  04E0  00B8               	movwf	?_sprintf+3
 12328  04E1  30C4               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12329  04E2  3185  25B6  3183   	fcall	_sprintf
 12330                           
 12331                           ;main.c: 513: } else{
 12332  04E5  2CF6               	goto	l6694
 12333  04E6                     l6692:
 12334                           
 12335                           ;main.c: 514: sprintf(tt, "%02d C", temp);
 12336  04E6  3040               	movlw	low (STR_3| (0+32768))
 12337  04E7  0020               	movlb	0	; select bank0
 12338  04E8  00B5               	movwf	sprintf@f
 12339  04E9  3098               	movlw	high (STR_3| (0+32768))
 12340  04EA  00B6               	movwf	sprintf@f+1
 12341  04EB  0864               	movf	_temp,w
 12342  04EC  00CA               	movwf	??_update_menuLCD
 12343  04ED  01CB               	clrf	??_update_menuLCD+1
 12344  04EE  084A               	movf	??_update_menuLCD,w
 12345  04EF  00B7               	movwf	?_sprintf+2
 12346  04F0  084B               	movf	??_update_menuLCD+1,w
 12347  04F1  00B8               	movwf	?_sprintf+3
 12348  04F2  30C4               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12349  04F3  3185  25B6  3183   	fcall	_sprintf
 12350  04F6                     l6694:
 12351                           
 12352                           ;main.c: 515: };main.c: 516: LCDstr(tt);
 12353  04F6  30C4               	movlw	low update_menuLCD@tt
 12354  04F7  0020               	movlb	0	; select bank0
 12355  04F8  00B0               	movwf	LCDstr@p
 12356  04F9  3000               	movlw	high update_menuLCD@tt
 12357  04FA  00B1               	movwf	LCDstr@p+1
 12358  04FB  3190  204D  3183   	fcall	_LCDstr
 12359  04FE                     l6696:
 12360                           
 12361                           ;main.c: 518: LCDcmd(0xcd);
 12362  04FE  30CD               	movlw	205
 12363  04FF  319E  26FE  3183   	fcall	_LCDcmd
 12364  0502                     l6698:
 12365                           
 12366                           ;main.c: 519: char l[3];;main.c: 521: if(editingLumAlarm){
 12367  0502  0021               	movlb	1	; select bank1
 12368  0503  0834               	movf	_editingLumAlarm^(0+128),w
 12369  0504  1903               	btfsc	3,2
 12370  0505  2D07               	goto	u7811
 12371  0506  2D08               	goto	u7810
 12372  0507                     u7811:
 12373  0507  2D1B               	goto	l6702
 12374  0508                     u7810:
 12375  0508                     l6700:
 12376                           
 12377                           ;main.c: 522: sprintf(l, "L %d", lumAlarm.alarmLum);
 12378  0508  3047               	movlw	low (STR_5| (0+32768))
 12379  0509  0020               	movlb	0	; select bank0
 12380  050A  00B5               	movwf	sprintf@f
 12381  050B  3098               	movlw	high (STR_5| (0+32768))
 12382  050C  00B6               	movwf	sprintf@f+1
 12383  050D  0021               	movlb	1	; select bank1
 12384  050E  0824               	movf	_lumAlarm^(0+128),w
 12385  050F  0020               	movlb	0	; select bank0
 12386  0510  00CA               	movwf	??_update_menuLCD
 12387  0511  01CB               	clrf	??_update_menuLCD+1
 12388  0512  084A               	movf	??_update_menuLCD,w
 12389  0513  00B7               	movwf	?_sprintf+2
 12390  0514  084B               	movf	??_update_menuLCD+1,w
 12391  0515  00B8               	movwf	?_sprintf+3
 12392  0516  30C8               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12393  0517  3185  25B6  3183   	fcall	_sprintf
 12394                           
 12395                           ;main.c: 523: } else{
 12396  051A  2D2B               	goto	l6704
 12397  051B                     l6702:
 12398                           
 12399                           ;main.c: 524: sprintf(l, "L %d", lumLevel);
 12400  051B  3047               	movlw	low (STR_5| (0+32768))
 12401  051C  0020               	movlb	0	; select bank0
 12402  051D  00B5               	movwf	sprintf@f
 12403  051E  3098               	movlw	high (STR_5| (0+32768))
 12404  051F  00B6               	movwf	sprintf@f+1
 12405  0520  0863               	movf	_lumLevel,w
 12406  0521  00CA               	movwf	??_update_menuLCD
 12407  0522  01CB               	clrf	??_update_menuLCD+1
 12408  0523  084A               	movf	??_update_menuLCD,w
 12409  0524  00B7               	movwf	?_sprintf+2
 12410  0525  084B               	movf	??_update_menuLCD+1,w
 12411  0526  00B8               	movwf	?_sprintf+3
 12412  0527  30C8               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12413  0528  3185  25B6  3183   	fcall	_sprintf
 12414  052B                     l6704:
 12415                           
 12416                           ;main.c: 525: };main.c: 526: LCDstr(l);
 12417  052B  30C8               	movlw	low update_menuLCD@l
 12418  052C  0020               	movlb	0	; select bank0
 12419  052D  00B0               	movwf	LCDstr@p
 12420  052E  3000               	movlw	high update_menuLCD@l
 12421  052F  00B1               	movwf	LCDstr@p+1
 12422  0530  3190  204D  3183   	fcall	_LCDstr
 12423  0533                     l6706:
 12424                           
 12425                           ;main.c: 528: if(modeFlag != 0){
 12426  0533  0020               	movlb	0	; select bank0
 12427  0534  085F               	movf	_modeFlag,w
 12428  0535  0460               	iorwf	_modeFlag+1,w
 12429  0536  1903               	btfsc	3,2
 12430  0537  2D39               	goto	u7821
 12431  0538  2D3A               	goto	u7820
 12432  0539                     u7821:
 12433  0539  2D46               	goto	l6712
 12434  053A                     u7820:
 12435  053A                     l6708:
 12436                           
 12437                           ;main.c: 529: LCDcmd(0x8B);
 12438  053A  308B               	movlw	139
 12439  053B  319E  26FE  3183   	fcall	_LCDcmd
 12440  053E                     l6710:
 12441                           
 12442                           ;main.c: 530: LCDstr((unsigned char *)"CTL");
 12443  053E  304C               	movlw	low (STR_7| (0+32768))
 12444  053F  0020               	movlb	0	; select bank0
 12445  0540  00B0               	movwf	LCDstr@p
 12446  0541  3098               	movlw	high (STR_7| (0+32768))
 12447  0542  00B1               	movwf	LCDstr@p+1
 12448  0543  3190  204D  3183   	fcall	_LCDstr
 12449  0546                     l6712:
 12450                           
 12451                           ;main.c: 531: };main.c: 533: if(modeFlag == 1){
 12452  0546  0020               	movlb	0	; select bank0
 12453  0547  035F               	decf	_modeFlag,w
 12454  0548  0460               	iorwf	_modeFlag+1,w
 12455  0549  1D03               	btfss	3,2
 12456  054A  2D4C               	goto	u7831
 12457  054B  2D4D               	goto	u7830
 12458  054C                     u7831:
 12459  054C  2D7C               	goto	l6730
 12460  054D                     u7830:
 12461  054D                     l6714:
 12462                           
 12463                           ;main.c: 534: if(editingClockAlarm == 0){
 12464  054D  0861               	movf	_editingClockAlarm,w
 12465  054E  0462               	iorwf	_editingClockAlarm+1,w
 12466  054F  1D03               	btfss	3,2
 12467  0550  2D52               	goto	u7841
 12468  0551  2D53               	goto	u7840
 12469  0552                     u7841:
 12470  0552  2D58               	goto	l6718
 12471  0553                     u7840:
 12472  0553                     l6716:
 12473                           
 12474                           ;main.c: 535: LCDcmd(0x8B);
 12475  0553  308B               	movlw	139
 12476  0554  319E  26FE  3183   	fcall	_LCDcmd
 12477                           
 12478                           ;main.c: 536: } else{
 12479  0557  2DB5               	goto	l1337
 12480  0558                     l6718:
 12481                           
 12482                           ;main.c: 537: if(editingClockAlarm == 1){
 12483  0558  0361               	decf	_editingClockAlarm,w
 12484  0559  0462               	iorwf	_editingClockAlarm+1,w
 12485  055A  1D03               	btfss	3,2
 12486  055B  2D5D               	goto	u7851
 12487  055C  2D5E               	goto	u7850
 12488  055D                     u7851:
 12489  055D  2D63               	goto	l6722
 12490  055E                     u7850:
 12491  055E                     l6720:
 12492                           
 12493                           ;main.c: 538: LCDcmd(0x81);
 12494  055E  3081               	movlw	129
 12495  055F  319E  26FE  3183   	fcall	_LCDcmd
 12496                           
 12497                           ;main.c: 539: } else if(editingClockAlarm == 2){
 12498  0562  2DB5               	goto	l1337
 12499  0563                     l6722:
 12500  0563  3002               	movlw	2
 12501  0564  0661               	xorwf	_editingClockAlarm,w
 12502  0565  0462               	iorwf	_editingClockAlarm+1,w
 12503  0566  1D03               	btfss	3,2
 12504  0567  2D69               	goto	u7861
 12505  0568  2D6A               	goto	u7860
 12506  0569                     u7861:
 12507  0569  2D6F               	goto	l6726
 12508  056A                     u7860:
 12509  056A                     l6724:
 12510                           
 12511                           ;main.c: 540: LCDcmd(0x84);
 12512  056A  3084               	movlw	132
 12513  056B  319E  26FE  3183   	fcall	_LCDcmd
 12514                           
 12515                           ;main.c: 541: } else if(editingClockAlarm == 3){
 12516  056E  2DB5               	goto	l1337
 12517  056F                     l6726:
 12518  056F  3003               	movlw	3
 12519  0570  0661               	xorwf	_editingClockAlarm,w
 12520  0571  0462               	iorwf	_editingClockAlarm+1,w
 12521  0572  1D03               	btfss	3,2
 12522  0573  2D75               	goto	u7871
 12523  0574  2D76               	goto	u7870
 12524  0575                     u7871:
 12525  0575  2D7B               	goto	l1321
 12526  0576                     u7870:
 12527  0576                     l6728:
 12528                           
 12529                           ;main.c: 542: LCDcmd(0x87);
 12530  0576  3087               	movlw	135
 12531  0577  319E  26FE  3183   	fcall	_LCDcmd
 12532  057A  2DB5               	goto	l1337
 12533  057B                     l1321:
 12534                           
 12535                           ;main.c: 543: };main.c: 544: };main.c: 545: } else if(modeFlag == 2){
 12536  057B  2DB5               	goto	l1337
 12537  057C                     l6730:
 12538  057C  3002               	movlw	2
 12539  057D  065F               	xorwf	_modeFlag,w
 12540  057E  0460               	iorwf	_modeFlag+1,w
 12541  057F  1D03               	btfss	3,2
 12542  0580  2D82               	goto	u7881
 12543  0581  2D83               	goto	u7880
 12544  0582                     u7881:
 12545  0582  2D93               	goto	l6738
 12546  0583                     u7880:
 12547  0583                     l6732:
 12548                           
 12549                           ;main.c: 547: if(editingTempAlarm == 0){
 12550  0583  0021               	movlb	1	; select bank1
 12551  0584  0835               	movf	_editingTempAlarm^(0+128),w
 12552  0585  1D03               	btfss	3,2
 12553  0586  2D88               	goto	u7891
 12554  0587  2D89               	goto	u7890
 12555  0588                     u7891:
 12556  0588  2D8E               	goto	l6736
 12557  0589                     u7890:
 12558  0589                     l6734:
 12559                           
 12560                           ;main.c: 548: LCDcmd(0x8c);
 12561  0589  308C               	movlw	140
 12562  058A  319E  26FE  3183   	fcall	_LCDcmd
 12563                           
 12564                           ;main.c: 549: }else {
 12565  058D  2DB5               	goto	l1337
 12566  058E                     l6736:
 12567                           
 12568                           ;main.c: 550: LCDcmd(0xc1);
 12569  058E  30C1               	movlw	193
 12570  058F  319E  26FE  3183   	fcall	_LCDcmd
 12571  0592  2DB5               	goto	l1337
 12572  0593                     l6738:
 12573  0593  3003               	movlw	3
 12574  0594  065F               	xorwf	_modeFlag,w
 12575  0595  0460               	iorwf	_modeFlag+1,w
 12576  0596  1D03               	btfss	3,2
 12577  0597  2D99               	goto	u7901
 12578  0598  2D9A               	goto	u7900
 12579  0599                     u7901:
 12580  0599  2DAA               	goto	l6746
 12581  059A                     u7900:
 12582  059A                     l6740:
 12583                           
 12584                           ;main.c: 555: if(editingLumAlarm == 0){
 12585  059A  0021               	movlb	1	; select bank1
 12586  059B  0834               	movf	_editingLumAlarm^(0+128),w
 12587  059C  1D03               	btfss	3,2
 12588  059D  2D9F               	goto	u7911
 12589  059E  2DA0               	goto	u7910
 12590  059F                     u7911:
 12591  059F  2DA5               	goto	l6744
 12592  05A0                     u7910:
 12593  05A0                     l6742:
 12594                           
 12595                           ;main.c: 556: LCDcmd(0x8d);
 12596  05A0  308D               	movlw	141
 12597  05A1  319E  26FE  3183   	fcall	_LCDcmd
 12598                           
 12599                           ;main.c: 557: }else {
 12600  05A4  2DB5               	goto	l1337
 12601  05A5                     l6744:
 12602                           
 12603                           ;main.c: 558: LCDcmd(0xcf);
 12604  05A5  30CF               	movlw	207
 12605  05A6  319E  26FE  3183   	fcall	_LCDcmd
 12606  05A9  2DB5               	goto	l1337
 12607  05AA                     l6746:
 12608  05AA  3004               	movlw	4
 12609  05AB  065F               	xorwf	_modeFlag,w
 12610  05AC  0460               	iorwf	_modeFlag+1,w
 12611  05AD  1D03               	btfss	3,2
 12612  05AE  2DB0               	goto	u7921
 12613  05AF  2DB1               	goto	u7920
 12614  05B0                     u7921:
 12615  05B0  2DB5               	goto	l1337
 12616  05B1                     u7920:
 12617  05B1                     l6748:
 12618                           
 12619                           ;main.c: 562: LCDcmd(0x8f);
 12620  05B1  308F               	movlw	143
 12621  05B2  319E  26FE  3183   	fcall	_LCDcmd
 12622  05B5                     l1337:
 12623  05B5  0008               	return
 12624  05B6                     __end_of_update_menuLCD:
 12625                           
 12626                           	psect	text12
 12627  05B6                     __ptext12:	
 12628 ;; *************** function _sprintf *****************
 12629 ;; Defined at:
 12630 ;;		line 505 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;  sp              1    wreg     PTR unsigned char 
 12633 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12634 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 12635 ;;		 -> STR_6(5), STR_5(5), STR_4(7), STR_3(7), 
 12636 ;;		 -> STR_2(15), STR_1(15), 
 12637 ;; Auto vars:     Size  Location     Type
 12638 ;;  sp              1   41[BANK0 ] PTR unsigned char 
 12639 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12640 ;;  tmpval          4    0        struct .
 12641 ;;  width           2   38[BANK0 ] int 
 12642 ;;  val             2   35[BANK0 ] unsigned int 
 12643 ;;  cp              2    0        PTR const unsigned char 
 12644 ;;  len             2    0        unsigned int 
 12645 ;;  c               1   40[BANK0 ] unsigned char 
 12646 ;;  flag            1   37[BANK0 ] unsigned char 
 12647 ;;  prec            1   34[BANK0 ] char 
 12648 ;;  ap              1   33[BANK0 ] PTR void [1]
 12649 ;;		 -> ?_sprintf(2), 
 12650 ;; Return value:  Size  Location     Type
 12651 ;;                  2   21[BANK0 ] int 
 12652 ;; Registers used:
 12653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12654 ;; Tracked objects:
 12655 ;;		On entry : 0/0
 12656 ;;		On exit  : 0/0
 12657 ;;		Unchanged: 0/0
 12658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12659 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12662 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12663 ;;Total ram usage:       21 bytes
 12664 ;; Hardware stack levels used:    1
 12665 ;; Hardware stack levels required when called:    5
 12666 ;; This function calls:
 12667 ;;		___lwdiv
 12668 ;;		___lwmod
 12669 ;;		___wmul
 12670 ;;		_isdigit
 12671 ;; This function is called by:
 12672 ;;		_update_menuLCD
 12673 ;; This function uses a non-reentrant model
 12674 ;;
 12675                           
 12676                           
 12677                           ;psect for function _sprintf
 12678  05B6                     _sprintf:
 12679                           
 12680                           ;incstack = 0
 12681                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12682                           ;sprintf@sp stored from wreg
 12683  05B6  0020               	movlb	0	; select bank0
 12684  05B7  00C9               	movwf	sprintf@sp
 12685  05B8                     l6488:
 12686                           
 12687                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
 12688  05B8  3037               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 12689  05B9  00BD               	movwf	??_sprintf
 12690  05BA  083D               	movf	??_sprintf,w
 12691  05BB  00C1               	movwf	sprintf@ap
 12692                           
 12693                           ;doprnt.c: 553: while((c = *f++)) {
 12694  05BC  2F3B               	goto	l6592
 12695  05BD                     l6490:
 12696                           
 12697                           ;doprnt.c: 555: if(c != '%')
 12698  05BD  3025               	movlw	37
 12699  05BE  0648               	xorwf	sprintf@c,w
 12700  05BF  1903               	btfsc	3,2
 12701  05C0  2DC2               	goto	u7461
 12702  05C1  2DC3               	goto	u7460
 12703  05C2                     u7461:
 12704  05C2  2DCF               	goto	l6496
 12705  05C3                     u7460:
 12706  05C3                     l6492:
 12707                           
 12708                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
 12709  05C3  0848               	movf	sprintf@c,w
 12710  05C4  00BD               	movwf	??_sprintf
 12711  05C5  0849               	movf	sprintf@sp,w
 12712  05C6  0086               	movwf	6
 12713  05C7  0187               	clrf	7
 12714  05C8  083D               	movf	??_sprintf,w
 12715  05C9  0081               	movwf	1
 12716  05CA                     l6494:
 12717  05CA  3001               	movlw	1
 12718  05CB  00BD               	movwf	??_sprintf
 12719  05CC  083D               	movf	??_sprintf,w
 12720  05CD  07C9               	addwf	sprintf@sp,f
 12721                           
 12722                           ;doprnt.c: 559: continue;
 12723  05CE  2F3B               	goto	l6592
 12724  05CF                     l6496:
 12725                           
 12726                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
 12727  05CF  01C6               	clrf	sprintf@width
 12728  05D0  01C7               	clrf	sprintf@width+1
 12729                           
 12730                           ;doprnt.c: 565: flag = 0;
 12731  05D1  01C5               	clrf	sprintf@flag
 12732  05D2  2DD8               	goto	l6502
 12733  05D3                     l1746:	
 12734                           ;doprnt.c: 596: case '0':
 12735                           
 12736                           
 12737                           ;doprnt.c: 597: flag |= 0x04;
 12738  05D3  1545               	bsf	sprintf@flag,2
 12739  05D4                     l6498:
 12740                           
 12741                           ;doprnt.c: 598: f++;
 12742  05D4  3001               	movlw	1
 12743  05D5  07B5               	addwf	sprintf@f,f
 12744  05D6  3000               	movlw	0
 12745  05D7  3DB6               	addwfc	sprintf@f+1,f
 12746  05D8                     l6502:	
 12747                           ;doprnt.c: 599: continue;
 12748                           
 12749  05D8  0835               	movf	sprintf@f,w
 12750  05D9  0084               	movwf	4
 12751  05DA  0836               	movf	sprintf@f+1,w
 12752  05DB  0085               	movwf	5
 12753  05DC  0800               	movf	0,w	;code access
 12754                           
 12755                           ; Switch size 1, requested type "simple"
 12756                           ; Number of cases is 1, Range of values is 48 to 48
 12757                           ; switch strategies available:
 12758                           ; Name         Instructions Cycles
 12759                           ; simple_byte            4     3 (average)
 12760                           ; direct_byte           11     9 (fixed)
 12761                           ; jumptable            263     9 (fixed)
 12762                           ;	Chosen strategy is simple_byte
 12763  05DD  3A30               	xorlw	48	; case 48
 12764  05DE  1903               	skipnz
 12765  05DF  2DD3               	goto	l1746
 12766  05E0  2DE1               	goto	l6504
 12767  05E1                     l6504:
 12768                           
 12769                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
 12770  05E1  0835               	movf	sprintf@f,w
 12771  05E2  0084               	movwf	4
 12772  05E3  0836               	movf	sprintf@f+1,w
 12773  05E4  0085               	movwf	5
 12774  05E5  0800               	movf	0,w	;code access
 12775  05E6  319F  27A7  3185   	fcall	_isdigit
 12776  05E9  1C03               	btfss	3,0
 12777  05EA  2DEC               	goto	u7471
 12778  05EB  2DED               	goto	u7470
 12779  05EC                     u7471:
 12780  05EC  2E20               	goto	l6518
 12781  05ED                     u7470:
 12782  05ED                     l6506:
 12783                           
 12784                           ;doprnt.c: 615: width = 0;
 12785  05ED  0020               	movlb	0	; select bank0
 12786  05EE  01C6               	clrf	sprintf@width
 12787  05EF  01C7               	clrf	sprintf@width+1
 12788  05F0                     l6508:
 12789                           
 12790                           ;doprnt.c: 617: width *= 10;
 12791  05F0  300A               	movlw	10
 12792  05F1  0020               	movlb	0	; select bank0
 12793  05F2  00A7               	movwf	___wmul@multiplier
 12794  05F3  3000               	movlw	0
 12795  05F4  00A8               	movwf	___wmul@multiplier+1
 12796  05F5  0847               	movf	sprintf@width+1,w
 12797  05F6  00AA               	movwf	___wmul@multiplicand+1
 12798  05F7  0846               	movf	sprintf@width,w
 12799  05F8  00A9               	movwf	___wmul@multiplicand
 12800  05F9  3190  20FE  3185   	fcall	___wmul
 12801  05FC  0020               	movlb	0	; select bank0
 12802  05FD  0828               	movf	?___wmul+1,w
 12803  05FE  00C7               	movwf	sprintf@width+1
 12804  05FF  0827               	movf	?___wmul,w
 12805  0600  00C6               	movwf	sprintf@width
 12806  0601                     l6510:
 12807                           
 12808                           ;doprnt.c: 618: width += *f++ - '0';
 12809  0601  0835               	movf	sprintf@f,w
 12810  0602  0084               	movwf	4
 12811  0603  0836               	movf	sprintf@f+1,w
 12812  0604  0085               	movwf	5
 12813  0605  0800               	movf	0,w	;code access
 12814  0606  3ED0               	addlw	208
 12815  0607  00BD               	movwf	??_sprintf
 12816  0608  30FF               	movlw	255
 12817  0609  1803               	skipnc
 12818  060A  3000               	movlw	0
 12819  060B  00BE               	movwf	??_sprintf+1
 12820  060C  083D               	movf	??_sprintf,w
 12821  060D  07C6               	addwf	sprintf@width,f
 12822  060E  083E               	movf	??_sprintf+1,w
 12823  060F  3DC7               	addwfc	sprintf@width+1,f
 12824  0610                     l6512:
 12825  0610  3001               	movlw	1
 12826  0611  07B5               	addwf	sprintf@f,f
 12827  0612  3000               	movlw	0
 12828  0613  3DB6               	addwfc	sprintf@f+1,f
 12829  0614                     l6514:
 12830                           
 12831                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
 12832  0614  0835               	movf	sprintf@f,w
 12833  0615  0084               	movwf	4
 12834  0616  0836               	movf	sprintf@f+1,w
 12835  0617  0085               	movwf	5
 12836  0618  0800               	movf	0,w	;code access
 12837  0619  319F  27A7  3185   	fcall	_isdigit
 12838  061C  1803               	btfsc	3,0
 12839  061D  2E1F               	goto	u7481
 12840  061E  2E20               	goto	u7480
 12841  061F                     u7481:
 12842  061F  2DF0               	goto	l6508
 12843  0620                     u7480:
 12844  0620                     l6518:
 12845  0620  0020               	movlb	0	; select bank0
 12846  0621  0836               	movf	sprintf@f+1,w
 12847  0622  00BE               	movwf	??_sprintf+1
 12848  0623  0835               	movf	sprintf@f,w
 12849  0624  00BD               	movwf	??_sprintf
 12850  0625  0AB5               	incf	sprintf@f,f
 12851  0626  1903               	skipnz
 12852  0627  0AB6               	incf	sprintf@f+1,f
 12853  0628  083D               	movf	??_sprintf,w
 12854  0629  0084               	movwf	4
 12855  062A  083E               	movf	??_sprintf+1,w
 12856  062B  0085               	movwf	5
 12857  062C  0800               	movf	0,w	;code access
 12858  062D  00C8               	movwf	sprintf@c
 12859                           
 12860                           ; Switch size 1, requested type "simple"
 12861                           ; Number of cases is 3, Range of values is 0 to 105
 12862                           ; switch strategies available:
 12863                           ; Name         Instructions Cycles
 12864                           ; simple_byte           10     6 (average)
 12865                           ; direct_byte          218     6 (fixed)
 12866                           ; jumptable            260     6 (fixed)
 12867                           ;	Chosen strategy is simple_byte
 12868  062E  3A00               	xorlw	0	; case 0
 12869  062F  1903               	skipnz
 12870  0630  2F4F               	goto	l6594
 12871  0631  3A64               	xorlw	100	; case 100
 12872  0632  1903               	skipnz
 12873  0633  2E38               	goto	l6520
 12874  0634  3A0D               	xorlw	13	; case 105
 12875  0635  1903               	skipnz
 12876  0636  2E38               	goto	l6520
 12877  0637  2F3B               	goto	l6592
 12878  0638                     l6520:
 12879                           
 12880                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
 12881  0638  0841               	movf	sprintf@ap,w
 12882  0639  0086               	movwf	6
 12883  063A  0187               	clrf	7
 12884  063B  3F40               	moviw [0]fsr1
 12885  063C  00C3               	movwf	sprintf@val
 12886  063D  3F41               	moviw [1]fsr1
 12887  063E  00C4               	movwf	sprintf@val+1
 12888  063F                     l6522:
 12889  063F  3002               	movlw	2
 12890  0640  00BD               	movwf	??_sprintf
 12891  0641  083D               	movf	??_sprintf,w
 12892  0642  07C1               	addwf	sprintf@ap,f
 12893  0643                     l6524:
 12894                           
 12895                           ;doprnt.c: 1287: if((int)val < 0) {
 12896  0643  1FC4               	btfss	sprintf@val+1,7
 12897  0644  2E46               	goto	u7491
 12898  0645  2E47               	goto	u7490
 12899  0646                     u7491:
 12900  0646  2E50               	goto	l6530
 12901  0647                     u7490:
 12902  0647                     l6526:
 12903                           
 12904                           ;doprnt.c: 1288: flag |= 0x03;
 12905  0647  3003               	movlw	3
 12906  0648  00BD               	movwf	??_sprintf
 12907  0649  083D               	movf	??_sprintf,w
 12908  064A  04C5               	iorwf	sprintf@flag,f
 12909  064B                     l6528:
 12910                           
 12911                           ;doprnt.c: 1289: val = -val;
 12912  064B  09C3               	comf	sprintf@val,f
 12913  064C  09C4               	comf	sprintf@val+1,f
 12914  064D  0AC3               	incf	sprintf@val,f
 12915  064E  1903               	skipnz
 12916  064F  0AC4               	incf	sprintf@val+1,f
 12917  0650                     l6530:
 12918                           
 12919                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
 12920  0650  01C8               	clrf	sprintf@c
 12921  0651  0AC8               	incf	sprintf@c,f
 12922  0652                     l6536:
 12923                           
 12924                           ;doprnt.c: 1332: if(val < dpowers[c])
 12925  0652  0848               	movf	sprintf@c,w
 12926  0653  00BD               	movwf	??_sprintf
 12927  0654  01BE               	clrf	??_sprintf+1
 12928  0655  35BD               	lslf	??_sprintf,f
 12929  0656  0DBE               	rlf	??_sprintf+1,f
 12930  0657  3036               	movlw	low (_dpowers| (0+32768))
 12931  0658  073D               	addwf	??_sprintf,w
 12932  0659  0084               	movwf	4
 12933  065A  3098               	movlw	high (_dpowers| (0+32768))
 12934  065B  3D3E               	addwfc	??_sprintf+1,w
 12935  065C  0085               	movwf	5
 12936  065D  3F00               	moviw [0]fsr0
 12937  065E  00BF               	movwf	??_sprintf+2
 12938  065F  3F01               	moviw [1]fsr0
 12939  0660  00C0               	movwf	??_sprintf+3
 12940  0661  0840               	movf	??_sprintf+3,w
 12941  0662  0244               	subwf	sprintf@val+1,w
 12942  0663  1D03               	skipz
 12943  0664  2E67               	goto	u7505
 12944  0665  083F               	movf	??_sprintf+2,w
 12945  0666  0243               	subwf	sprintf@val,w
 12946  0667                     u7505:
 12947  0667  1803               	skipnc
 12948  0668  2E6A               	goto	u7501
 12949  0669  2E6B               	goto	u7500
 12950  066A                     u7501:
 12951  066A  2E6C               	goto	l6540
 12952  066B                     u7500:
 12953  066B  2E76               	goto	l6542
 12954  066C                     l6540:
 12955  066C  3001               	movlw	1
 12956  066D  00BD               	movwf	??_sprintf
 12957  066E  083D               	movf	??_sprintf,w
 12958  066F  07C8               	addwf	sprintf@c,f
 12959  0670  3005               	movlw	5
 12960  0671  0648               	xorwf	sprintf@c,w
 12961  0672  1D03               	btfss	3,2
 12962  0673  2E75               	goto	u7511
 12963  0674  2E76               	goto	u7510
 12964  0675                     u7511:
 12965  0675  2E52               	goto	l6536
 12966  0676                     u7510:
 12967  0676                     l6542:
 12968                           
 12969                           ;doprnt.c: 1371: if(width && flag & 0x03)
 12970  0676  0846               	movf	sprintf@width,w
 12971  0677  0447               	iorwf	sprintf@width+1,w
 12972  0678  1903               	btfsc	3,2
 12973  0679  2E7B               	goto	u7521
 12974  067A  2E7C               	goto	u7520
 12975  067B                     u7521:
 12976  067B  2E86               	goto	l1764
 12977  067C                     u7520:
 12978  067C                     l6544:
 12979  067C  0845               	movf	sprintf@flag,w
 12980  067D  3903               	andlw	3
 12981  067E  1903               	btfsc	3,2
 12982  067F  2E81               	goto	u7531
 12983  0680  2E82               	goto	u7530
 12984  0681                     u7531:
 12985  0681  2E86               	goto	l1764
 12986  0682                     u7530:
 12987  0682                     l6546:
 12988                           
 12989                           ;doprnt.c: 1372: width--;
 12990  0682  30FF               	movlw	255
 12991  0683  07C6               	addwf	sprintf@width,f
 12992  0684  30FF               	movlw	255
 12993  0685  3DC7               	addwfc	sprintf@width+1,f
 12994  0686                     l1764:
 12995                           
 12996                           ;doprnt.c: 1407: if(width > c)
 12997  0686  0847               	movf	sprintf@width+1,w
 12998  0687  3A80               	xorlw	128
 12999  0688  3C80               	sublw	128
 13000  0689  1D03               	skipz
 13001  068A  2E8D               	goto	u7545
 13002  068B  0846               	movf	sprintf@width,w
 13003  068C  0248               	subwf	sprintf@c,w
 13004  068D                     u7545:
 13005  068D  1803               	skipnc
 13006  068E  2E90               	goto	u7541
 13007  068F  2E91               	goto	u7540
 13008  0690                     u7541:
 13009  0690  2E9A               	goto	l6550
 13010  0691                     u7540:
 13011  0691                     l6548:
 13012                           
 13013                           ;doprnt.c: 1408: width -= c;
 13014  0691  0020               	movlb	0	; select bank0
 13015  0692  0848               	movf	sprintf@c,w
 13016  0693  00BD               	movwf	??_sprintf
 13017  0694  01BE               	clrf	??_sprintf+1
 13018  0695  083D               	movf	??_sprintf,w
 13019  0696  02C6               	subwf	sprintf@width,f
 13020  0697  083E               	movf	??_sprintf+1,w
 13021  0698  3BC7               	subwfb	sprintf@width+1,f
 13022  0699  2E9D               	goto	l6552
 13023  069A                     l6550:
 13024                           
 13025                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
 13026  069A  0020               	movlb	0	; select bank0
 13027  069B  01C6               	clrf	sprintf@width
 13028  069C  01C7               	clrf	sprintf@width+1
 13029  069D                     l6552:
 13030                           
 13031                           ;doprnt.c: 1413: if(flag & 0x04) {
 13032  069D  1D45               	btfss	sprintf@flag,2
 13033  069E  2EA0               	goto	u7551
 13034  069F  2EA1               	goto	u7550
 13035  06A0                     u7551:
 13036  06A0  2ECE               	goto	l6568
 13037  06A1                     u7550:
 13038  06A1                     l6554:
 13039                           
 13040                           ;doprnt.c: 1418: if(flag & 0x03)
 13041  06A1  0845               	movf	sprintf@flag,w
 13042  06A2  3903               	andlw	3
 13043  06A3  1903               	btfsc	3,2
 13044  06A4  2EA6               	goto	u7561
 13045  06A5  2EA7               	goto	u7560
 13046  06A6                     u7561:
 13047  06A6  2EB2               	goto	l6560
 13048  06A7                     u7560:
 13049  06A7                     l6556:
 13050                           
 13051                           ;doprnt.c: 1419: ((*sp++ = ('-')));
 13052  06A7  302D               	movlw	45
 13053  06A8  00BD               	movwf	??_sprintf
 13054  06A9  0849               	movf	sprintf@sp,w
 13055  06AA  0086               	movwf	6
 13056  06AB  0187               	clrf	7
 13057  06AC  083D               	movf	??_sprintf,w
 13058  06AD  0081               	movwf	1
 13059  06AE                     l6558:
 13060  06AE  3001               	movlw	1
 13061  06AF  00BD               	movwf	??_sprintf
 13062  06B0  083D               	movf	??_sprintf,w
 13063  06B1  07C9               	addwf	sprintf@sp,f
 13064  06B2                     l6560:
 13065                           
 13066                           ;doprnt.c: 1441: if(width)
 13067  06B2  0846               	movf	sprintf@width,w
 13068  06B3  0447               	iorwf	sprintf@width+1,w
 13069  06B4  1903               	btfsc	3,2
 13070  06B5  2EB7               	goto	u7571
 13071  06B6  2EB8               	goto	u7570
 13072  06B7                     u7571:
 13073  06B7  2EFA               	goto	l6582
 13074  06B8                     u7570:
 13075  06B8                     l6562:
 13076                           
 13077                           ;doprnt.c: 1443: ((*sp++ = ('0')));
 13078  06B8  3030               	movlw	48
 13079  06B9  00BD               	movwf	??_sprintf
 13080  06BA  0849               	movf	sprintf@sp,w
 13081  06BB  0086               	movwf	6
 13082  06BC  0187               	clrf	7
 13083  06BD  083D               	movf	??_sprintf,w
 13084  06BE  0081               	movwf	1
 13085  06BF                     l6564:
 13086  06BF  3001               	movlw	1
 13087  06C0  00BD               	movwf	??_sprintf
 13088  06C1  083D               	movf	??_sprintf,w
 13089  06C2  07C9               	addwf	sprintf@sp,f
 13090  06C3                     l6566:
 13091                           
 13092                           ;doprnt.c: 1444: while(--width);
 13093  06C3  30FF               	movlw	255
 13094  06C4  07C6               	addwf	sprintf@width,f
 13095  06C5  30FF               	movlw	255
 13096  06C6  3DC7               	addwfc	sprintf@width+1,f
 13097  06C7  0846               	movf	sprintf@width,w
 13098  06C8  0447               	iorwf	sprintf@width+1,w
 13099  06C9  1D03               	btfss	3,2
 13100  06CA  2ECC               	goto	u7581
 13101  06CB  2ECD               	goto	u7580
 13102  06CC                     u7581:
 13103  06CC  2EB8               	goto	l6562
 13104  06CD                     u7580:
 13105  06CD  2EFA               	goto	l6582
 13106  06CE                     l6568:
 13107                           
 13108                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
 13109  06CE  0846               	movf	sprintf@width,w
 13110  06CF  0447               	iorwf	sprintf@width+1,w
 13111  06D0  1903               	btfsc	3,2
 13112  06D1  2ED3               	goto	u7591
 13113  06D2  2ED4               	goto	u7590
 13114  06D3                     u7591:
 13115  06D3  2EE9               	goto	l6576
 13116  06D4                     u7590:
 13117  06D4                     l6570:
 13118                           
 13119                           ;doprnt.c: 1456: ((*sp++ = (' ')));
 13120  06D4  3020               	movlw	32
 13121  06D5  00BD               	movwf	??_sprintf
 13122  06D6  0849               	movf	sprintf@sp,w
 13123  06D7  0086               	movwf	6
 13124  06D8  0187               	clrf	7
 13125  06D9  083D               	movf	??_sprintf,w
 13126  06DA  0081               	movwf	1
 13127  06DB                     l6572:
 13128  06DB  3001               	movlw	1
 13129  06DC  00BD               	movwf	??_sprintf
 13130  06DD  083D               	movf	??_sprintf,w
 13131  06DE  07C9               	addwf	sprintf@sp,f
 13132  06DF                     l6574:
 13133                           
 13134                           ;doprnt.c: 1457: while(--width);
 13135  06DF  30FF               	movlw	255
 13136  06E0  07C6               	addwf	sprintf@width,f
 13137  06E1  30FF               	movlw	255
 13138  06E2  3DC7               	addwfc	sprintf@width+1,f
 13139  06E3  0846               	movf	sprintf@width,w
 13140  06E4  0447               	iorwf	sprintf@width+1,w
 13141  06E5  1D03               	btfss	3,2
 13142  06E6  2EE8               	goto	u7601
 13143  06E7  2EE9               	goto	u7600
 13144  06E8                     u7601:
 13145  06E8  2ED4               	goto	l6570
 13146  06E9                     u7600:
 13147  06E9                     l6576:
 13148                           
 13149                           ;doprnt.c: 1464: if(flag & 0x03)
 13150  06E9  0845               	movf	sprintf@flag,w
 13151  06EA  3903               	andlw	3
 13152  06EB  1903               	btfsc	3,2
 13153  06EC  2EEE               	goto	u7611
 13154  06ED  2EEF               	goto	u7610
 13155  06EE                     u7611:
 13156  06EE  2EFA               	goto	l6582
 13157  06EF                     u7610:
 13158  06EF                     l6578:
 13159                           
 13160                           ;doprnt.c: 1465: ((*sp++ = ('-')));
 13161  06EF  302D               	movlw	45
 13162  06F0  00BD               	movwf	??_sprintf
 13163  06F1  0849               	movf	sprintf@sp,w
 13164  06F2  0086               	movwf	6
 13165  06F3  0187               	clrf	7
 13166  06F4  083D               	movf	??_sprintf,w
 13167  06F5  0081               	movwf	1
 13168  06F6                     l6580:
 13169  06F6  3001               	movlw	1
 13170  06F7  00BD               	movwf	??_sprintf
 13171  06F8  083D               	movf	??_sprintf,w
 13172  06F9  07C9               	addwf	sprintf@sp,f
 13173  06FA                     l6582:
 13174                           
 13175                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
 13176  06FA  0848               	movf	sprintf@c,w
 13177  06FB  00BD               	movwf	??_sprintf
 13178  06FC  083D               	movf	??_sprintf,w
 13179  06FD  00C2               	movwf	sprintf@prec
 13180                           
 13181                           ;doprnt.c: 1500: while(prec--) {
 13182  06FE  2F32               	goto	l6590
 13183  06FF                     l6584:
 13184                           
 13185                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
 13186  06FF  300A               	movlw	10
 13187  0700  00AF               	movwf	___lwmod@divisor
 13188  0701  3000               	movlw	0
 13189  0702  00B0               	movwf	___lwmod@divisor+1
 13190  0703  0842               	movf	sprintf@prec,w
 13191  0704  00BD               	movwf	??_sprintf
 13192  0705  01BE               	clrf	??_sprintf+1
 13193  0706  35BD               	lslf	??_sprintf,f
 13194  0707  0DBE               	rlf	??_sprintf+1,f
 13195  0708  3036               	movlw	low (_dpowers| (0+32768))
 13196  0709  073D               	addwf	??_sprintf,w
 13197  070A  0084               	movwf	4
 13198  070B  3098               	movlw	high (_dpowers| (0+32768))
 13199  070C  3D3E               	addwfc	??_sprintf+1,w
 13200  070D  0085               	movwf	5
 13201  070E  3F00               	moviw [0]fsr0
 13202  070F  00A7               	movwf	___lwdiv@divisor
 13203  0710  3F01               	moviw [1]fsr0
 13204  0711  00A8               	movwf	___lwdiv@divisor+1
 13205  0712  0844               	movf	sprintf@val+1,w
 13206  0713  00AA               	movwf	___lwdiv@dividend+1
 13207  0714  0843               	movf	sprintf@val,w
 13208  0715  00A9               	movwf	___lwdiv@dividend
 13209  0716  3194  241C  3185   	fcall	___lwdiv
 13210  0719  0020               	movlb	0	; select bank0
 13211  071A  0828               	movf	?___lwdiv+1,w
 13212  071B  00B2               	movwf	___lwmod@dividend+1
 13213  071C  0827               	movf	?___lwdiv,w
 13214  071D  00B1               	movwf	___lwmod@dividend
 13215  071E  3193  2343  3185   	fcall	___lwmod
 13216  0721  0020               	movlb	0	; select bank0
 13217  0722  082F               	movf	?___lwmod,w
 13218  0723  3E30               	addlw	48
 13219  0724  00BF               	movwf	??_sprintf+2
 13220  0725  083F               	movf	??_sprintf+2,w
 13221  0726  00C8               	movwf	sprintf@c
 13222  0727                     l6586:
 13223                           
 13224                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
 13225  0727  0848               	movf	sprintf@c,w
 13226  0728  00BD               	movwf	??_sprintf
 13227  0729  0849               	movf	sprintf@sp,w
 13228  072A  0086               	movwf	6
 13229  072B  0187               	clrf	7
 13230  072C  083D               	movf	??_sprintf,w
 13231  072D  0081               	movwf	1
 13232  072E                     l6588:
 13233  072E  3001               	movlw	1
 13234  072F  00BD               	movwf	??_sprintf
 13235  0730  083D               	movf	??_sprintf,w
 13236  0731  07C9               	addwf	sprintf@sp,f
 13237  0732                     l6590:
 13238  0732  30FF               	movlw	255
 13239  0733  00BD               	movwf	??_sprintf
 13240  0734  083D               	movf	??_sprintf,w
 13241  0735  07C2               	addwf	sprintf@prec,f
 13242  0736  0A42               	incf	sprintf@prec,w
 13243  0737  1D03               	btfss	3,2
 13244  0738  2F3A               	goto	u7621
 13245  0739  2F3B               	goto	u7620
 13246  073A                     u7621:
 13247  073A  2EFF               	goto	l6584
 13248  073B                     u7620:
 13249  073B                     l6592:
 13250  073B  0836               	movf	sprintf@f+1,w
 13251  073C  00BE               	movwf	??_sprintf+1
 13252  073D  0835               	movf	sprintf@f,w
 13253  073E  00BD               	movwf	??_sprintf
 13254  073F  0AB5               	incf	sprintf@f,f
 13255  0740  1903               	skipnz
 13256  0741  0AB6               	incf	sprintf@f+1,f
 13257  0742  083D               	movf	??_sprintf,w
 13258  0743  0084               	movwf	4
 13259  0744  083E               	movf	??_sprintf+1,w
 13260  0745  0085               	movwf	5
 13261  0746  0800               	movf	0,w	;code access
 13262  0747  00BF               	movwf	??_sprintf+2
 13263  0748  083F               	movf	??_sprintf+2,w
 13264  0749  00C8               	movwf	sprintf@c
 13265  074A  0848               	movf	sprintf@c,w
 13266  074B  1D03               	btfss	3,2
 13267  074C  2F4E               	goto	u7631
 13268  074D  2F4F               	goto	u7630
 13269  074E                     u7631:
 13270  074E  2DBD               	goto	l6490
 13271  074F                     u7630:
 13272  074F                     l6594:
 13273                           
 13274                           ;doprnt.c: 1564: *sp = 0;
 13275  074F  0849               	movf	sprintf@sp,w
 13276  0750  0086               	movwf	6
 13277  0751  0187               	clrf	7
 13278  0752  0181               	clrf	1
 13279  0753                     l1781:
 13280  0753  0008               	return
 13281  0754                     __end_of_sprintf:
 13282                           
 13283                           	psect	text13
 13284  1FA7                     __ptext13:	
 13285 ;; *************** function _isdigit *****************
 13286 ;; Defined at:
 13287 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
 13288 ;; Parameters:    Size  Location     Type
 13289 ;;  c               1    wreg     unsigned char 
 13290 ;; Auto vars:     Size  Location     Type
 13291 ;;  c               1    8[BANK0 ] unsigned char 
 13292 ;; Return value:  Size  Location     Type
 13293 ;;		None               void
 13294 ;; Registers used:
 13295 ;;		wreg, status,2, status,0
 13296 ;; Tracked objects:
 13297 ;;		On entry : 0/0
 13298 ;;		On exit  : 0/0
 13299 ;;		Unchanged: 0/0
 13300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;Total ram usage:        2 bytes
 13306 ;; Hardware stack levels used:    1
 13307 ;; Hardware stack levels required when called:    4
 13308 ;; This function calls:
 13309 ;;		Nothing
 13310 ;; This function is called by:
 13311 ;;		_sprintf
 13312 ;; This function uses a non-reentrant model
 13313 ;;
 13314                           
 13315                           
 13316                           ;psect for function _isdigit
 13317  1FA7                     _isdigit:
 13318                           
 13319                           ;incstack = 0
 13320                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 13321                           ;isdigit@c stored from wreg
 13322  1FA7  0020               	movlb	0	; select bank0
 13323  1FA8  00A8               	movwf	isdigit@c
 13324  1FA9                     l6296:
 13325  1FA9  01A7               	clrf	_isdigit$2993
 13326  1FAA                     l6298:
 13327  1FAA  303A               	movlw	58
 13328  1FAB  0228               	subwf	isdigit@c,w
 13329  1FAC  1803               	skipnc
 13330  1FAD  2FAF               	goto	u6961
 13331  1FAE  2FB0               	goto	u6960
 13332  1FAF                     u6961:
 13333  1FAF  2FB8               	goto	l6304
 13334  1FB0                     u6960:
 13335  1FB0                     l6300:
 13336  1FB0  3030               	movlw	48
 13337  1FB1  0228               	subwf	isdigit@c,w
 13338  1FB2  1C03               	skipc
 13339  1FB3  2FB5               	goto	u6971
 13340  1FB4  2FB6               	goto	u6970
 13341  1FB5                     u6971:
 13342  1FB5  2FB8               	goto	l6304
 13343  1FB6                     u6970:
 13344  1FB6                     l6302:
 13345  1FB6  01A7               	clrf	_isdigit$2993
 13346  1FB7  0AA7               	incf	_isdigit$2993,f
 13347  1FB8                     l6304:
 13348  1FB8  0C27               	rrf	_isdigit$2993,w
 13349  1FB9                     l2238:
 13350  1FB9  0008               	return
 13351  1FBA                     __end_of_isdigit:
 13352                           
 13353                           	psect	text14
 13354  1343                     __ptext14:	
 13355 ;; *************** function ___lwmod *****************
 13356 ;; Defined at:
 13357 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
 13358 ;; Parameters:    Size  Location     Type
 13359 ;;  divisor         2   15[BANK0 ] unsigned int 
 13360 ;;  dividend        2   17[BANK0 ] unsigned int 
 13361 ;; Auto vars:     Size  Location     Type
 13362 ;;  counter         1   20[BANK0 ] unsigned char 
 13363 ;; Return value:  Size  Location     Type
 13364 ;;                  2   15[BANK0 ] unsigned int 
 13365 ;; Registers used:
 13366 ;;		wreg, status,2, status,0
 13367 ;; Tracked objects:
 13368 ;;		On entry : 0/0
 13369 ;;		On exit  : 0/0
 13370 ;;		Unchanged: 0/0
 13371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13372 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13373 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13374 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13375 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13376 ;;Total ram usage:        6 bytes
 13377 ;; Hardware stack levels used:    1
 13378 ;; Hardware stack levels required when called:    4
 13379 ;; This function calls:
 13380 ;;		Nothing
 13381 ;; This function is called by:
 13382 ;;		_sprintf
 13383 ;; This function uses a non-reentrant model
 13384 ;;
 13385                           
 13386                           
 13387                           ;psect for function ___lwmod
 13388  1343                     ___lwmod:
 13389  1343                     l6348:	
 13390                           ;incstack = 0
 13391                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13392                           
 13393  1343  0020               	movlb	0	; select bank0
 13394  1344  082F               	movf	___lwmod@divisor,w
 13395  1345  0430               	iorwf	___lwmod@divisor+1,w
 13396  1346  1903               	btfsc	3,2
 13397  1347  2B49               	goto	u7091
 13398  1348  2B4A               	goto	u7090
 13399  1349                     u7091:
 13400  1349  2B73               	goto	l6366
 13401  134A                     u7090:
 13402  134A                     l6350:
 13403  134A  01B4               	clrf	___lwmod@counter
 13404  134B  0AB4               	incf	___lwmod@counter,f
 13405  134C  2B56               	goto	l6356
 13406  134D                     l6352:
 13407  134D  3001               	movlw	1
 13408  134E                     u7105:
 13409  134E  35AF               	lslf	___lwmod@divisor,f
 13410  134F  0DB0               	rlf	___lwmod@divisor+1,f
 13411  1350  0B89               	decfsz	9,f
 13412  1351  2B4E               	goto	u7105
 13413  1352                     l6354:
 13414  1352  3001               	movlw	1
 13415  1353  00B3               	movwf	??___lwmod
 13416  1354  0833               	movf	??___lwmod,w
 13417  1355  07B4               	addwf	___lwmod@counter,f
 13418  1356                     l6356:
 13419  1356  1FB0               	btfss	___lwmod@divisor+1,7
 13420  1357  2B59               	goto	u7111
 13421  1358  2B5A               	goto	u7110
 13422  1359                     u7111:
 13423  1359  2B4D               	goto	l6352
 13424  135A                     u7110:
 13425  135A                     l6358:
 13426  135A  0830               	movf	___lwmod@divisor+1,w
 13427  135B  0232               	subwf	___lwmod@dividend+1,w
 13428  135C  1D03               	skipz
 13429  135D  2B60               	goto	u7125
 13430  135E  082F               	movf	___lwmod@divisor,w
 13431  135F  0231               	subwf	___lwmod@dividend,w
 13432  1360                     u7125:
 13433  1360  1C03               	skipc
 13434  1361  2B63               	goto	u7121
 13435  1362  2B64               	goto	u7120
 13436  1363                     u7121:
 13437  1363  2B68               	goto	l6362
 13438  1364                     u7120:
 13439  1364                     l6360:
 13440  1364  082F               	movf	___lwmod@divisor,w
 13441  1365  02B1               	subwf	___lwmod@dividend,f
 13442  1366  0830               	movf	___lwmod@divisor+1,w
 13443  1367  3BB2               	subwfb	___lwmod@dividend+1,f
 13444  1368                     l6362:
 13445  1368  3001               	movlw	1
 13446  1369                     u7135:
 13447  1369  36B0               	lsrf	___lwmod@divisor+1,f
 13448  136A  0CAF               	rrf	___lwmod@divisor,f
 13449  136B  0B89               	decfsz	9,f
 13450  136C  2B69               	goto	u7135
 13451  136D                     l6364:
 13452  136D  3001               	movlw	1
 13453  136E  02B4               	subwf	___lwmod@counter,f
 13454  136F  1D03               	btfss	3,2
 13455  1370  2B72               	goto	u7141
 13456  1371  2B73               	goto	u7140
 13457  1372                     u7141:
 13458  1372  2B5A               	goto	l6358
 13459  1373                     u7140:
 13460  1373                     l6366:
 13461  1373  0832               	movf	___lwmod@dividend+1,w
 13462  1374  00B0               	movwf	?___lwmod+1
 13463  1375  0831               	movf	___lwmod@dividend,w
 13464  1376  00AF               	movwf	?___lwmod
 13465  1377                     l2067:
 13466  1377  0008               	return
 13467  1378                     __end_of___lwmod:
 13468                           
 13469                           	psect	text15
 13470  141C                     __ptext15:	
 13471 ;; *************** function ___lwdiv *****************
 13472 ;; Defined at:
 13473 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
 13474 ;; Parameters:    Size  Location     Type
 13475 ;;  divisor         2    7[BANK0 ] unsigned int 
 13476 ;;  dividend        2    9[BANK0 ] unsigned int 
 13477 ;; Auto vars:     Size  Location     Type
 13478 ;;  quotient        2   13[BANK0 ] unsigned int 
 13479 ;;  counter         1   12[BANK0 ] unsigned char 
 13480 ;; Return value:  Size  Location     Type
 13481 ;;                  2    7[BANK0 ] unsigned int 
 13482 ;; Registers used:
 13483 ;;		wreg, status,2, status,0
 13484 ;; Tracked objects:
 13485 ;;		On entry : 0/0
 13486 ;;		On exit  : 0/0
 13487 ;;		Unchanged: 0/0
 13488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13489 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13492 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13493 ;;Total ram usage:        8 bytes
 13494 ;; Hardware stack levels used:    1
 13495 ;; Hardware stack levels required when called:    4
 13496 ;; This function calls:
 13497 ;;		Nothing
 13498 ;; This function is called by:
 13499 ;;		_sprintf
 13500 ;; This function uses a non-reentrant model
 13501 ;;
 13502                           
 13503                           
 13504                           ;psect for function ___lwdiv
 13505  141C                     ___lwdiv:
 13506  141C                     l6322:	
 13507                           ;incstack = 0
 13508                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13509                           
 13510  141C  0020               	movlb	0	; select bank0
 13511  141D  01AD               	clrf	___lwdiv@quotient
 13512  141E  01AE               	clrf	___lwdiv@quotient+1
 13513  141F                     l6324:
 13514  141F  0827               	movf	___lwdiv@divisor,w
 13515  1420  0428               	iorwf	___lwdiv@divisor+1,w
 13516  1421  1903               	btfsc	3,2
 13517  1422  2C24               	goto	u7021
 13518  1423  2C25               	goto	u7020
 13519  1424                     u7021:
 13520  1424  2C54               	goto	l6344
 13521  1425                     u7020:
 13522  1425                     l6326:
 13523  1425  01AC               	clrf	___lwdiv@counter
 13524  1426  0AAC               	incf	___lwdiv@counter,f
 13525  1427  2C31               	goto	l6332
 13526  1428                     l6328:
 13527  1428  3001               	movlw	1
 13528  1429                     u7035:
 13529  1429  35A7               	lslf	___lwdiv@divisor,f
 13530  142A  0DA8               	rlf	___lwdiv@divisor+1,f
 13531  142B  0B89               	decfsz	9,f
 13532  142C  2C29               	goto	u7035
 13533  142D                     l6330:
 13534  142D  3001               	movlw	1
 13535  142E  00AB               	movwf	??___lwdiv
 13536  142F  082B               	movf	??___lwdiv,w
 13537  1430  07AC               	addwf	___lwdiv@counter,f
 13538  1431                     l6332:
 13539  1431  1FA8               	btfss	___lwdiv@divisor+1,7
 13540  1432  2C34               	goto	u7041
 13541  1433  2C35               	goto	u7040
 13542  1434                     u7041:
 13543  1434  2C28               	goto	l6328
 13544  1435                     u7040:
 13545  1435                     l6334:
 13546  1435  3001               	movlw	1
 13547  1436                     u7055:
 13548  1436  35AD               	lslf	___lwdiv@quotient,f
 13549  1437  0DAE               	rlf	___lwdiv@quotient+1,f
 13550  1438  0B89               	decfsz	9,f
 13551  1439  2C36               	goto	u7055
 13552  143A  0828               	movf	___lwdiv@divisor+1,w
 13553  143B  022A               	subwf	___lwdiv@dividend+1,w
 13554  143C  1D03               	skipz
 13555  143D  2C40               	goto	u7065
 13556  143E  0827               	movf	___lwdiv@divisor,w
 13557  143F  0229               	subwf	___lwdiv@dividend,w
 13558  1440                     u7065:
 13559  1440  1C03               	skipc
 13560  1441  2C43               	goto	u7061
 13561  1442  2C44               	goto	u7060
 13562  1443                     u7061:
 13563  1443  2C49               	goto	l6340
 13564  1444                     u7060:
 13565  1444                     l6336:
 13566  1444  0827               	movf	___lwdiv@divisor,w
 13567  1445  02A9               	subwf	___lwdiv@dividend,f
 13568  1446  0828               	movf	___lwdiv@divisor+1,w
 13569  1447  3BAA               	subwfb	___lwdiv@dividend+1,f
 13570  1448                     l6338:
 13571  1448  142D               	bsf	___lwdiv@quotient,0
 13572  1449                     l6340:
 13573  1449  3001               	movlw	1
 13574  144A                     u7075:
 13575  144A  36A8               	lsrf	___lwdiv@divisor+1,f
 13576  144B  0CA7               	rrf	___lwdiv@divisor,f
 13577  144C  0B89               	decfsz	9,f
 13578  144D  2C4A               	goto	u7075
 13579  144E                     l6342:
 13580  144E  3001               	movlw	1
 13581  144F  02AC               	subwf	___lwdiv@counter,f
 13582  1450  1D03               	btfss	3,2
 13583  1451  2C53               	goto	u7081
 13584  1452  2C54               	goto	u7080
 13585  1453                     u7081:
 13586  1453  2C35               	goto	l6334
 13587  1454                     u7080:
 13588  1454                     l6344:
 13589  1454  082E               	movf	___lwdiv@quotient+1,w
 13590  1455  00A8               	movwf	?___lwdiv+1
 13591  1456  082D               	movf	___lwdiv@quotient,w
 13592  1457  00A7               	movwf	?___lwdiv
 13593  1458                     l2057:
 13594  1458  0008               	return
 13595  1459                     __end_of___lwdiv:
 13596                           
 13597                           	psect	text16
 13598  130E                     __ptext16:	
 13599 ;; *************** function _differenceBetweenTimePeriod *****************
 13600 ;; Defined at:
 13601 ;;		line 335 in file "main.c"
 13602 ;; Parameters:    Size  Location     Type
 13603 ;;  start           3    7[BANK0 ] struct Time
 13604 ;;  stop            3   10[BANK0 ] struct Time
 13605 ;;  diff            1   13[BANK0 ] PTR struct Time
 13606 ;;		 -> update_menuLCD@diff(3), 
 13607 ;; Auto vars:     Size  Location     Type
 13608 ;;		None
 13609 ;; Return value:  Size  Location     Type
 13610 ;;                  1    wreg      void 
 13611 ;; Registers used:
 13612 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13613 ;; Tracked objects:
 13614 ;;		On entry : 0/0
 13615 ;;		On exit  : 0/0
 13616 ;;		Unchanged: 0/0
 13617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13618 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;Total ram usage:        8 bytes
 13623 ;; Hardware stack levels used:    1
 13624 ;; Hardware stack levels required when called:    4
 13625 ;; This function calls:
 13626 ;;		Nothing
 13627 ;; This function is called by:
 13628 ;;		_update_menuLCD
 13629 ;; This function uses a non-reentrant model
 13630 ;;
 13631                           
 13632                           
 13633                           ;psect for function _differenceBetweenTimePeriod
 13634  130E                     _differenceBetweenTimePeriod:
 13635  130E                     l6472:	
 13636                           ;incstack = 0
 13637                           ; Regs used in _differenceBetweenTimePeriod: [wreg+fsr1l+fsr1h+status,2+status,0]
 13638                           
 13639                           
 13640                           ;main.c: 338: while (stop.s > start.s) {
 13641  130E  2B15               	goto	l6476
 13642  130F                     l6474:
 13643                           
 13644                           ;main.c: 339: --start.m;
 13645  130F  3001               	movlw	1
 13646  1310  02A8               	subwf	differenceBetweenTimePeriod@start+1,f
 13647                           
 13648                           ;main.c: 340: start.s += 60;
 13649  1311  303C               	movlw	60
 13650  1312  00AE               	movwf	??_differenceBetweenTimePeriod
 13651  1313  082E               	movf	??_differenceBetweenTimePeriod,w
 13652  1314  07A9               	addwf	differenceBetweenTimePeriod@start+2,f
 13653  1315                     l6476:
 13654  1315  0020               	movlb	0	; select bank0
 13655  1316  082C               	movf	differenceBetweenTimePeriod@stop+2,w
 13656  1317  0229               	subwf	differenceBetweenTimePeriod@start+2,w
 13657  1318  1C03               	skipc
 13658  1319  2B1B               	goto	u7441
 13659  131A  2B1C               	goto	u7440
 13660  131B                     u7441:
 13661  131B  2B0F               	goto	l6474
 13662  131C                     u7440:
 13663  131C                     l6478:
 13664                           
 13665                           ;main.c: 341: };main.c: 342: diff->s = start.s - stop.s;
 13666  131C  082C               	movf	differenceBetweenTimePeriod@stop+2,w
 13667  131D  0229               	subwf	differenceBetweenTimePeriod@start+2,w
 13668  131E  00AE               	movwf	??_differenceBetweenTimePeriod
 13669  131F  082D               	movf	differenceBetweenTimePeriod@diff,w
 13670  1320  3E02               	addlw	2
 13671  1321  0086               	movwf	6
 13672  1322  0187               	clrf	7
 13673  1323  082E               	movf	??_differenceBetweenTimePeriod,w
 13674  1324  0081               	movwf	1
 13675                           
 13676                           ;main.c: 343: while (stop.m > start.m) {
 13677  1325  2B2C               	goto	l6482
 13678  1326                     l6480:
 13679                           
 13680                           ;main.c: 344: --start.h;
 13681  1326  3001               	movlw	1
 13682  1327  02A7               	subwf	differenceBetweenTimePeriod@start,f
 13683                           
 13684                           ;main.c: 345: start.m += 60;
 13685  1328  303C               	movlw	60
 13686  1329  00AE               	movwf	??_differenceBetweenTimePeriod
 13687  132A  082E               	movf	??_differenceBetweenTimePeriod,w
 13688  132B  07A8               	addwf	differenceBetweenTimePeriod@start+1,f
 13689  132C                     l6482:
 13690  132C  082B               	movf	differenceBetweenTimePeriod@stop+1,w
 13691  132D  0228               	subwf	differenceBetweenTimePeriod@start+1,w
 13692  132E  1C03               	skipc
 13693  132F  2B31               	goto	u7451
 13694  1330  2B32               	goto	u7450
 13695  1331                     u7451:
 13696  1331  2B26               	goto	l6480
 13697  1332                     u7450:
 13698  1332                     l6484:
 13699                           
 13700                           ;main.c: 346: };main.c: 347: diff->m = start.m - stop.m;
 13701  1332  082B               	movf	differenceBetweenTimePeriod@stop+1,w
 13702  1333  0228               	subwf	differenceBetweenTimePeriod@start+1,w
 13703  1334  00AE               	movwf	??_differenceBetweenTimePeriod
 13704  1335  0A2D               	incf	differenceBetweenTimePeriod@diff,w
 13705  1336  0086               	movwf	6
 13706  1337  0187               	clrf	7
 13707  1338  082E               	movf	??_differenceBetweenTimePeriod,w
 13708  1339  0081               	movwf	1
 13709                           
 13710                           ;main.c: 348: diff->h = start.h - stop.h;
 13711  133A  082A               	movf	differenceBetweenTimePeriod@stop,w
 13712  133B  0227               	subwf	differenceBetweenTimePeriod@start,w
 13713  133C  00AE               	movwf	??_differenceBetweenTimePeriod
 13714  133D  082D               	movf	differenceBetweenTimePeriod@diff,w
 13715  133E  0086               	movwf	6
 13716  133F  0187               	clrf	7
 13717  1340  082E               	movf	??_differenceBetweenTimePeriod,w
 13718  1341  0081               	movwf	1
 13719  1342                     l1256:
 13720  1342  0008               	return
 13721  1343                     __end_of_differenceBetweenTimePeriod:
 13722                           
 13723                           	psect	text17
 13724  1EDB                     __ptext17:	
 13725 ;; *************** function _TMR2_StopTimer *****************
 13726 ;; Defined at:
 13727 ;;		line 117 in file "mcc_generated_files/tmr2.c"
 13728 ;; Parameters:    Size  Location     Type
 13729 ;;		None
 13730 ;; Auto vars:     Size  Location     Type
 13731 ;;		None
 13732 ;; Return value:  Size  Location     Type
 13733 ;;                  1    wreg      void 
 13734 ;; Registers used:
 13735 ;;		status,2, status,0, pclath, cstack
 13736 ;; Tracked objects:
 13737 ;;		On entry : 0/0
 13738 ;;		On exit  : 0/0
 13739 ;;		Unchanged: 0/0
 13740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13745 ;;Total ram usage:        0 bytes
 13746 ;; Hardware stack levels used:    1
 13747 ;; Hardware stack levels required when called:    5
 13748 ;; This function calls:
 13749 ;;		_TMR2_Stop
 13750 ;; This function is called by:
 13751 ;;		_update_menuLCD
 13752 ;;		_main
 13753 ;; This function uses a non-reentrant model
 13754 ;;
 13755                           
 13756                           
 13757                           ;psect for function _TMR2_StopTimer
 13758  1EDB                     _TMR2_StopTimer:
 13759  1EDB                     l6388:	
 13760                           ;incstack = 0
 13761                           ; Regs used in _TMR2_StopTimer: [status,2+status,0+pclath+cstack]
 13762                           
 13763                           
 13764                           ;tmr2.c: 119: TMR2_Stop();
 13765  1EDB  319E  26D4  319E   	fcall	_TMR2_Stop
 13766  1EDE                     l665:
 13767  1EDE  0008               	return
 13768  1EDF                     __end_of_TMR2_StopTimer:
 13769                           
 13770                           	psect	text18
 13771  1ED4                     __ptext18:	
 13772 ;; *************** function _TMR2_Stop *****************
 13773 ;; Defined at:
 13774 ;;		line 111 in file "mcc_generated_files/tmr2.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;		None
 13777 ;; Auto vars:     Size  Location     Type
 13778 ;;		None
 13779 ;; Return value:  Size  Location     Type
 13780 ;;                  1    wreg      void 
 13781 ;; Registers used:
 13782 ;;		None
 13783 ;; Tracked objects:
 13784 ;;		On entry : 0/0
 13785 ;;		On exit  : 0/0
 13786 ;;		Unchanged: 0/0
 13787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;Total ram usage:        0 bytes
 13793 ;; Hardware stack levels used:    1
 13794 ;; Hardware stack levels required when called:    4
 13795 ;; This function calls:
 13796 ;;		Nothing
 13797 ;; This function is called by:
 13798 ;;		_TMR2_StopTimer
 13799 ;; This function uses a non-reentrant model
 13800 ;;
 13801                           
 13802                           
 13803                           ;psect for function _TMR2_Stop
 13804  1ED4                     _TMR2_Stop:
 13805  1ED4                     l6274:	
 13806                           ;incstack = 0
 13807                           ; Regs used in _TMR2_Stop: []
 13808                           
 13809                           
 13810                           ;tmr2.c: 114: T2CONbits.TMR2ON = 0;
 13811  1ED4  0025               	movlb	5	; select bank5
 13812  1ED5  138E               	bcf	14,7	;volatile
 13813  1ED6                     l662:
 13814  1ED6  0008               	return
 13815  1ED7                     __end_of_TMR2_Stop:
 13816                           
 13817                           	psect	text19
 13818  1ED1                     __ptext19:	
 13819 ;; *************** function _PWM_Output_D4_Disable *****************
 13820 ;; Defined at:
 13821 ;;		line 355 in file "main.c"
 13822 ;; Parameters:    Size  Location     Type
 13823 ;;		None
 13824 ;; Auto vars:     Size  Location     Type
 13825 ;;		None
 13826 ;; Return value:  Size  Location     Type
 13827 ;;                  1    wreg      void 
 13828 ;; Registers used:
 13829 ;;		None
 13830 ;; Tracked objects:
 13831 ;;		On entry : 0/0
 13832 ;;		On exit  : 0/0
 13833 ;;		Unchanged: 0/0
 13834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;Total ram usage:        0 bytes
 13840 ;; Hardware stack levels used:    1
 13841 ;; Hardware stack levels required when called:    4
 13842 ;; This function calls:
 13843 ;;		Nothing
 13844 ;; This function is called by:
 13845 ;;		_update_menuLCD
 13846 ;;		_main
 13847 ;; This function uses a non-reentrant model
 13848 ;;
 13849                           
 13850                           
 13851                           ;psect for function _PWM_Output_D4_Disable
 13852  1ED1                     _PWM_Output_D4_Disable:
 13853  1ED1                     l6486:	
 13854                           ;incstack = 0
 13855                           ; Regs used in _PWM_Output_D4_Disable: []
 13856                           
 13857                           
 13858                           ;main.c: 356: PWM6EN = 0;
 13859  1ED1  0027               	movlb	7	; select bank7
 13860  1ED2  138E               	bcf	14,7	;volatile
 13861  1ED3                     l1262:
 13862  1ED3  0008               	return
 13863  1ED4                     __end_of_PWM_Output_D4_Disable:
 13864                           
 13865                           	psect	text20
 13866  1FE7                     __ptext20:	
 13867 ;; *************** function _PWM6_LoadDutyValue *****************
 13868 ;; Defined at:
 13869 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 13870 ;; Parameters:    Size  Location     Type
 13871 ;;  dutyValue       2    7[BANK0 ] unsigned int 
 13872 ;; Auto vars:     Size  Location     Type
 13873 ;;		None
 13874 ;; Return value:  Size  Location     Type
 13875 ;;                  1    wreg      void 
 13876 ;; Registers used:
 13877 ;;		wreg, status,2, status,0
 13878 ;; Tracked objects:
 13879 ;;		On entry : 0/0
 13880 ;;		On exit  : 0/0
 13881 ;;		Unchanged: 0/0
 13882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13883 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;Total ram usage:        4 bytes
 13888 ;; Hardware stack levels used:    1
 13889 ;; Hardware stack levels required when called:    4
 13890 ;; This function calls:
 13891 ;;		Nothing
 13892 ;; This function is called by:
 13893 ;;		_update_menuLCD
 13894 ;;		_checkFlags
 13895 ;;		_main
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899                           
 13900                           ;psect for function _PWM6_LoadDutyValue
 13901  1FE7                     _PWM6_LoadDutyValue:
 13902  1FE7                     l6384:	
 13903                           ;incstack = 0
 13904                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13905                           
 13906                           
 13907                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 13908  1FE7  0020               	movlb	0	; select bank0
 13909  1FE8  0828               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 13910  1FE9  00AA               	movwf	??_PWM6_LoadDutyValue+1
 13911  1FEA  0827               	movf	PWM6_LoadDutyValue@dutyValue,w
 13912  1FEB  00A9               	movwf	??_PWM6_LoadDutyValue
 13913  1FEC  36AA               	lsrf	??_PWM6_LoadDutyValue+1,f
 13914  1FED  0CA9               	rrf	??_PWM6_LoadDutyValue,f
 13915  1FEE  36AA               	lsrf	??_PWM6_LoadDutyValue+1,f
 13916  1FEF  0CA9               	rrf	??_PWM6_LoadDutyValue,f
 13917  1FF0  0829               	movf	??_PWM6_LoadDutyValue,w
 13918  1FF1  0027               	movlb	7	; select bank7
 13919  1FF2  008D               	movwf	13	;volatile
 13920                           
 13921                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 13922  1FF3  0020               	movlb	0	; select bank0
 13923  1FF4  0827               	movf	PWM6_LoadDutyValue@dutyValue,w
 13924  1FF5  3903               	andlw	3
 13925  1FF6  00A9               	movwf	??_PWM6_LoadDutyValue
 13926  1FF7  3005               	movlw	5
 13927  1FF8                     u7165:
 13928  1FF8  35A9               	lslf	??_PWM6_LoadDutyValue,f
 13929  1FF9  3EFF               	addlw	-1
 13930  1FFA  1D03               	skipz
 13931  1FFB  2FF8               	goto	u7165
 13932  1FFC  3529               	lslf	??_PWM6_LoadDutyValue,w
 13933  1FFD  0027               	movlb	7	; select bank7
 13934  1FFE  008C               	movwf	12	;volatile
 13935  1FFF                     l620:
 13936  1FFF  0008               	return
 13937  2000                     __end_of_PWM6_LoadDutyValue:
 13938                           
 13939                           	psect	text21
 13940  104D                     __ptext21:	
 13941 ;; *************** function _LCDstr *****************
 13942 ;; Defined at:
 13943 ;;		line 321 in file "main.c"
 13944 ;; Parameters:    Size  Location     Type
 13945 ;;  p               2   16[BANK0 ] PTR unsigned char 
 13946 ;;		 -> STR_7(4), update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 13947 ;; Auto vars:     Size  Location     Type
 13948 ;;  c               1   21[BANK0 ] unsigned char 
 13949 ;; Return value:  Size  Location     Type
 13950 ;;                  1    wreg      void 
 13951 ;; Registers used:
 13952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13953 ;; Tracked objects:
 13954 ;;		On entry : 0/0
 13955 ;;		On exit  : 0/0
 13956 ;;		Unchanged: 0/0
 13957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13958 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13959 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13960 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13961 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13962 ;;Total ram usage:        6 bytes
 13963 ;; Hardware stack levels used:    1
 13964 ;; Hardware stack levels required when called:    7
 13965 ;; This function calls:
 13966 ;;		_LCDchar
 13967 ;; This function is called by:
 13968 ;;		_update_menuLCD
 13969 ;; This function uses a non-reentrant model
 13970 ;;
 13971                           
 13972                           
 13973                           ;psect for function _LCDstr
 13974  104D                     _LCDstr:
 13975  104D                     l6466:	
 13976                           ;incstack = 0
 13977                           ; Regs used in _LCDstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13978                           
 13979                           
 13980                           ;main.c: 323: unsigned char c;;main.c: 325: while((c = *p++)) LCDchar(c);
 13981  104D  2852               	goto	l6470
 13982  104E                     l6468:
 13983  104E  0835               	movf	LCDstr@c,w
 13984  104F  319F  273C  3190   	fcall	_LCDchar
 13985  1052                     l6470:
 13986  1052  0020               	movlb	0	; select bank0
 13987  1053  0831               	movf	LCDstr@p+1,w
 13988  1054  00B3               	movwf	??_LCDstr+1
 13989  1055  0830               	movf	LCDstr@p,w
 13990  1056  00B2               	movwf	??_LCDstr
 13991  1057  0AB0               	incf	LCDstr@p,f
 13992  1058  1903               	skipnz
 13993  1059  0AB1               	incf	LCDstr@p+1,f
 13994  105A  0832               	movf	??_LCDstr,w
 13995  105B  0084               	movwf	4
 13996  105C  0833               	movf	??_LCDstr+1,w
 13997  105D  0085               	movwf	5
 13998  105E  0800               	movf	0,w	;code access
 13999  105F  00B4               	movwf	??_LCDstr+2
 14000  1060  0834               	movf	??_LCDstr+2,w
 14001  1061  00B5               	movwf	LCDstr@c
 14002  1062  0835               	movf	LCDstr@c,w
 14003  1063  1D03               	btfss	3,2
 14004  1064  2866               	goto	u7431
 14005  1065  2867               	goto	u7430
 14006  1066                     u7431:
 14007  1066  284E               	goto	l6468
 14008  1067                     u7430:
 14009  1067                     l1243:
 14010  1067  0008               	return
 14011  1068                     __end_of_LCDstr:
 14012                           
 14013                           	psect	text22
 14014  1F3C                     __ptext22:	
 14015 ;; *************** function _LCDchar *****************
 14016 ;; Defined at:
 14017 ;;		line 316 in file "main.c"
 14018 ;; Parameters:    Size  Location     Type
 14019 ;;  c               1    wreg     unsigned char 
 14020 ;; Auto vars:     Size  Location     Type
 14021 ;;  c               1   15[BANK0 ] unsigned char 
 14022 ;; Return value:  Size  Location     Type
 14023 ;;                  1    wreg      void 
 14024 ;; Registers used:
 14025 ;;		wreg, status,2, status,0, pclath, cstack
 14026 ;; Tracked objects:
 14027 ;;		On entry : 0/0
 14028 ;;		On exit  : 0/0
 14029 ;;		Unchanged: 0/0
 14030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14034 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14035 ;;Total ram usage:        1 bytes
 14036 ;; Hardware stack levels used:    1
 14037 ;; Hardware stack levels required when called:    6
 14038 ;; This function calls:
 14039 ;;		_LCDsend2x4
 14040 ;; This function is called by:
 14041 ;;		_LCDstr
 14042 ;;		_update_menuLCD
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           
 14047                           ;psect for function _LCDchar
 14048  1F3C                     _LCDchar:
 14049                           
 14050                           ;incstack = 0
 14051                           ; Regs used in _LCDchar: [wreg+status,2+status,0+pclath+cstack]
 14052                           ;LCDchar@c stored from wreg
 14053  1F3C  0020               	movlb	0	; select bank0
 14054  1F3D  00AF               	movwf	LCDchar@c
 14055  1F3E                     l6294:
 14056                           
 14057                           ;main.c: 318: LCDsend2x4(c, 0x01);
 14058  1F3E  01A9               	clrf	LCDsend2x4@mode
 14059  1F3F  0AA9               	incf	LCDsend2x4@mode,f
 14060  1F40  082F               	movf	LCDchar@c,w
 14061  1F41  3189  213F  319F   	fcall	_LCDsend2x4
 14062  1F44                     l1237:
 14063  1F44  0008               	return
 14064  1F45                     __end_of_LCDchar:
 14065                           
 14066                           	psect	text23
 14067  1EFE                     __ptext23:	
 14068 ;; *************** function _LCDcmd *****************
 14069 ;; Defined at:
 14070 ;;		line 311 in file "main.c"
 14071 ;; Parameters:    Size  Location     Type
 14072 ;;  c               1    wreg     unsigned char 
 14073 ;; Auto vars:     Size  Location     Type
 14074 ;;  c               1   15[BANK0 ] unsigned char 
 14075 ;; Return value:  Size  Location     Type
 14076 ;;                  1    wreg      void 
 14077 ;; Registers used:
 14078 ;;		wreg, status,2, status,0, pclath, cstack
 14079 ;; Tracked objects:
 14080 ;;		On entry : 0/0
 14081 ;;		On exit  : 0/0
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;Total ram usage:        1 bytes
 14089 ;; Hardware stack levels used:    1
 14090 ;; Hardware stack levels required when called:    6
 14091 ;; This function calls:
 14092 ;;		_LCDsend2x4
 14093 ;; This function is called by:
 14094 ;;		_update_menuLCD
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098                           
 14099                           ;psect for function _LCDcmd
 14100  1EFE                     _LCDcmd:
 14101                           
 14102                           ;incstack = 0
 14103                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
 14104                           ;LCDcmd@c stored from wreg
 14105  1EFE  0020               	movlb	0	; select bank0
 14106  1EFF  00AF               	movwf	LCDcmd@c
 14107  1F00                     l6464:
 14108                           
 14109                           ;main.c: 313: LCDsend2x4(c, 0);
 14110  1F00  01A9               	clrf	LCDsend2x4@mode
 14111  1F01  082F               	movf	LCDcmd@c,w
 14112  1F02  3189  213F  319E   	fcall	_LCDsend2x4
 14113  1F05                     l1234:
 14114  1F05  0008               	return
 14115  1F06                     __end_of_LCDcmd:
 14116                           
 14117                           	psect	text24
 14118  0E7F                     __ptext24:	
 14119 ;; *************** function _monitoring_TEMP_LUM *****************
 14120 ;; Defined at:
 14121 ;;		line 568 in file "main.c"
 14122 ;; Parameters:    Size  Location     Type
 14123 ;;		None
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;		None
 14126 ;; Return value:  Size  Location     Type
 14127 ;;                  1    wreg      void 
 14128 ;; Registers used:
 14129 ;;		wreg, status,2, status,0, pclath, cstack
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;Total ram usage:        3 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; Hardware stack levels required when called:    6
 14142 ;; This function calls:
 14143 ;;		_ADCC_GetSingleConversion
 14144 ;;		_DATAEE_WriteByte
 14145 ;;		___wmul
 14146 ;;		_tsttc
 14147 ;; This function is called by:
 14148 ;;		_checkFlags
 14149 ;; This function uses a non-reentrant model
 14150 ;;
 14151                           
 14152                           
 14153                           ;psect for function _monitoring_TEMP_LUM
 14154  0E7F                     _monitoring_TEMP_LUM:
 14155  0E7F                     l6750:	
 14156                           ;incstack = 0
 14157                           ; Regs used in _monitoring_TEMP_LUM: [wreg+status,2+status,0+pclath+cstack]
 14158                           
 14159                           
 14160                           ;main.c: 569: temp = (uint8_t)tsttc();
 14161  0E7F  318D  252F  318E   	fcall	_tsttc
 14162  0E82  0020               	movlb	0	; select bank0
 14163  0E83  00B1               	movwf	??_monitoring_TEMP_LUM
 14164  0E84  0831               	movf	??_monitoring_TEMP_LUM,w
 14165  0E85  00E4               	movwf	_temp
 14166                           
 14167                           ;main.c: 571: lumLevel = ADCC_GetSingleConversion(channel_ANA0) >> 13;
 14168  0E86  3000               	movlw	0
 14169  0E87  319F  27BA  318E   	fcall	_ADCC_GetSingleConversion
 14170  0E8A  0020               	movlb	0	; select bank0
 14171  0E8B  0827               	movf	?_ADCC_GetSingleConversion,w
 14172  0E8C  00B1               	movwf	??_monitoring_TEMP_LUM
 14173  0E8D  0828               	movf	?_ADCC_GetSingleConversion+1,w
 14174  0E8E  00B2               	movwf	??_monitoring_TEMP_LUM+1
 14175  0E8F  300D               	movlw	13
 14176  0E90                     u7935:
 14177  0E90  36B2               	lsrf	??_monitoring_TEMP_LUM+1,f
 14178  0E91  0CB1               	rrf	??_monitoring_TEMP_LUM,f
 14179  0E92  0B89               	decfsz	9,f
 14180  0E93  2E90               	goto	u7935
 14181  0E94  0831               	movf	??_monitoring_TEMP_LUM,w
 14182  0E95  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14183  0E96  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14184  0E97  00E3               	movwf	_lumLevel
 14185  0E98                     l6752:
 14186                           
 14187                           ;main.c: 573: if(prevTemp != temp || prevLumLevel != lumLevel){
 14188  0E98  0864               	movf	_temp,w
 14189  0E99  00B1               	movwf	??_monitoring_TEMP_LUM
 14190  0E9A  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14191  0E9B  0021               	movlb	1	; select bank1
 14192  0E9C  0854               	movf	(_prevTemp+1)^(0+128),w
 14193  0E9D  0020               	movlb	0	; select bank0
 14194  0E9E  0632               	xorwf	??_monitoring_TEMP_LUM+1,w
 14195  0E9F  1D03               	skipz
 14196  0EA0  2EA5               	goto	u7945
 14197  0EA1  0021               	movlb	1	; select bank1
 14198  0EA2  0853               	movf	_prevTemp^(0+128),w
 14199  0EA3  0020               	movlb	0	; select bank0
 14200  0EA4  0631               	xorwf	??_monitoring_TEMP_LUM,w
 14201  0EA5                     u7945:
 14202  0EA5  1D03               	skipz
 14203  0EA6  2EA8               	goto	u7941
 14204  0EA7  2EA9               	goto	u7940
 14205  0EA8                     u7941:
 14206  0EA8  2EBA               	goto	l6756
 14207  0EA9                     u7940:
 14208  0EA9                     l6754:
 14209  0EA9  0863               	movf	_lumLevel,w
 14210  0EAA  00B1               	movwf	??_monitoring_TEMP_LUM
 14211  0EAB  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14212  0EAC  0021               	movlb	1	; select bank1
 14213  0EAD  0852               	movf	(_prevLumLevel+1)^(0+128),w
 14214  0EAE  0020               	movlb	0	; select bank0
 14215  0EAF  0632               	xorwf	??_monitoring_TEMP_LUM+1,w
 14216  0EB0  1D03               	skipz
 14217  0EB1  2EB6               	goto	u7955
 14218  0EB2  0021               	movlb	1	; select bank1
 14219  0EB3  0851               	movf	_prevLumLevel^(0+128),w
 14220  0EB4  0020               	movlb	0	; select bank0
 14221  0EB5  0631               	xorwf	??_monitoring_TEMP_LUM,w
 14222  0EB6                     u7955:
 14223  0EB6  1903               	skipnz
 14224  0EB7  2EB9               	goto	u7951
 14225  0EB8  2EBA               	goto	u7950
 14226  0EB9                     u7951:
 14227  0EB9  2FB4               	goto	l6784
 14228  0EBA                     u7950:
 14229  0EBA                     l6756:
 14230                           
 14231                           ;main.c: 575: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x0 , t.h);
 14232  0EBA  087A               	movf	_iwrite,w
 14233  0EBB  00B1               	movwf	??_monitoring_TEMP_LUM
 14234  0EBC  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14235  0EBD  0831               	movf	??_monitoring_TEMP_LUM,w
 14236  0EBE  00A7               	movwf	___wmul@multiplier
 14237  0EBF  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14238  0EC0  00A8               	movwf	___wmul@multiplier+1
 14239  0EC1  3005               	movlw	5
 14240  0EC2  00A9               	movwf	___wmul@multiplicand
 14241  0EC3  3000               	movlw	0
 14242  0EC4  00AA               	movwf	___wmul@multiplicand+1
 14243  0EC5  3190  20FE  318E   	fcall	___wmul
 14244  0EC8  0020               	movlb	0	; select bank0
 14245  0EC9  0827               	movf	?___wmul,w
 14246  0ECA  3E12               	addlw	18
 14247  0ECB  00AD               	movwf	DATAEE_WriteByte@bAdd
 14248  0ECC  3070               	movlw	112
 14249  0ECD  3D28               	addwfc	?___wmul+1,w
 14250  0ECE  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 14251  0ECF  085C               	movf	_t,w
 14252  0ED0  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14253  0ED1  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14254  0ED2  00AF               	movwf	DATAEE_WriteByte@bData
 14255  0ED3  3191  21C6  318E   	fcall	_DATAEE_WriteByte
 14256                           
 14257                           ;main.c: 576: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x1 , t.m);
 14258  0ED6  087A               	movf	_iwrite,w
 14259  0ED7  0020               	movlb	0	; select bank0
 14260  0ED8  00B1               	movwf	??_monitoring_TEMP_LUM
 14261  0ED9  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14262  0EDA  0831               	movf	??_monitoring_TEMP_LUM,w
 14263  0EDB  00A7               	movwf	___wmul@multiplier
 14264  0EDC  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14265  0EDD  00A8               	movwf	___wmul@multiplier+1
 14266  0EDE  3005               	movlw	5
 14267  0EDF  00A9               	movwf	___wmul@multiplicand
 14268  0EE0  3000               	movlw	0
 14269  0EE1  00AA               	movwf	___wmul@multiplicand+1
 14270  0EE2  3190  20FE  318E   	fcall	___wmul
 14271  0EE5  0020               	movlb	0	; select bank0
 14272  0EE6  0827               	movf	?___wmul,w
 14273  0EE7  3E13               	addlw	19
 14274  0EE8  00AD               	movwf	DATAEE_WriteByte@bAdd
 14275  0EE9  3070               	movlw	112
 14276  0EEA  3D28               	addwfc	?___wmul+1,w
 14277  0EEB  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 14278  0EEC  085D               	movf	_t+1,w
 14279  0EED  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14280  0EEE  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14281  0EEF  00AF               	movwf	DATAEE_WriteByte@bData
 14282  0EF0  3191  21C6  318E   	fcall	_DATAEE_WriteByte
 14283                           
 14284                           ;main.c: 577: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x2 , t.s);
 14285  0EF3  087A               	movf	_iwrite,w
 14286  0EF4  0020               	movlb	0	; select bank0
 14287  0EF5  00B1               	movwf	??_monitoring_TEMP_LUM
 14288  0EF6  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14289  0EF7  0831               	movf	??_monitoring_TEMP_LUM,w
 14290  0EF8  00A7               	movwf	___wmul@multiplier
 14291  0EF9  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14292  0EFA  00A8               	movwf	___wmul@multiplier+1
 14293  0EFB  3005               	movlw	5
 14294  0EFC  00A9               	movwf	___wmul@multiplicand
 14295  0EFD  3000               	movlw	0
 14296  0EFE  00AA               	movwf	___wmul@multiplicand+1
 14297  0EFF  3190  20FE  318E   	fcall	___wmul
 14298  0F02  0020               	movlb	0	; select bank0
 14299  0F03  0827               	movf	?___wmul,w
 14300  0F04  3E14               	addlw	20
 14301  0F05  00AD               	movwf	DATAEE_WriteByte@bAdd
 14302  0F06  3070               	movlw	112
 14303  0F07  3D28               	addwfc	?___wmul+1,w
 14304  0F08  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 14305  0F09  085E               	movf	_t+2,w
 14306  0F0A  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14307  0F0B  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14308  0F0C  00AF               	movwf	DATAEE_WriteByte@bData
 14309  0F0D  3191  21C6  318E   	fcall	_DATAEE_WriteByte
 14310                           
 14311                           ;main.c: 578: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x3 , temp);
 14312  0F10  087A               	movf	_iwrite,w
 14313  0F11  0020               	movlb	0	; select bank0
 14314  0F12  00B1               	movwf	??_monitoring_TEMP_LUM
 14315  0F13  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14316  0F14  0831               	movf	??_monitoring_TEMP_LUM,w
 14317  0F15  00A7               	movwf	___wmul@multiplier
 14318  0F16  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14319  0F17  00A8               	movwf	___wmul@multiplier+1
 14320  0F18  3005               	movlw	5
 14321  0F19  00A9               	movwf	___wmul@multiplicand
 14322  0F1A  3000               	movlw	0
 14323  0F1B  00AA               	movwf	___wmul@multiplicand+1
 14324  0F1C  3190  20FE  318E   	fcall	___wmul
 14325  0F1F  0020               	movlb	0	; select bank0
 14326  0F20  0827               	movf	?___wmul,w
 14327  0F21  3E15               	addlw	21
 14328  0F22  00AD               	movwf	DATAEE_WriteByte@bAdd
 14329  0F23  3070               	movlw	112
 14330  0F24  3D28               	addwfc	?___wmul+1,w
 14331  0F25  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 14332  0F26  0864               	movf	_temp,w
 14333  0F27  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14334  0F28  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14335  0F29  00AF               	movwf	DATAEE_WriteByte@bData
 14336  0F2A  3191  21C6  318E   	fcall	_DATAEE_WriteByte
 14337                           
 14338                           ;main.c: 579: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x4 , lumLevel);
 14339  0F2D  087A               	movf	_iwrite,w
 14340  0F2E  0020               	movlb	0	; select bank0
 14341  0F2F  00B1               	movwf	??_monitoring_TEMP_LUM
 14342  0F30  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14343  0F31  0831               	movf	??_monitoring_TEMP_LUM,w
 14344  0F32  00A7               	movwf	___wmul@multiplier
 14345  0F33  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14346  0F34  00A8               	movwf	___wmul@multiplier+1
 14347  0F35  3005               	movlw	5
 14348  0F36  00A9               	movwf	___wmul@multiplicand
 14349  0F37  3000               	movlw	0
 14350  0F38  00AA               	movwf	___wmul@multiplicand+1
 14351  0F39  3190  20FE  318E   	fcall	___wmul
 14352  0F3C  0020               	movlb	0	; select bank0
 14353  0F3D  0827               	movf	?___wmul,w
 14354  0F3E  3E16               	addlw	22
 14355  0F3F  00AD               	movwf	DATAEE_WriteByte@bAdd
 14356  0F40  3070               	movlw	112
 14357  0F41  3D28               	addwfc	?___wmul+1,w
 14358  0F42  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 14359  0F43  0863               	movf	_lumLevel,w
 14360  0F44  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14361  0F45  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14362  0F46  00AF               	movwf	DATAEE_WriteByte@bData
 14363  0F47  3191  21C6  318E   	fcall	_DATAEE_WriteByte
 14364  0F4A                     l6758:
 14365                           
 14366                           ;main.c: 581: if((nr == NREG) && (iread == iwrite)){
 14367  0F4A  0879               	movf	_nr,w
 14368  0F4B  067D               	xorwf	_NREG,w
 14369  0F4C  1D03               	skipz
 14370  0F4D  2F4F               	goto	u7961
 14371  0F4E  2F50               	goto	u7960
 14372  0F4F                     u7961:
 14373  0F4F  2F5B               	goto	l1345
 14374  0F50                     u7960:
 14375  0F50                     l6760:
 14376  0F50  087B               	movf	_iread,w
 14377  0F51  067A               	xorwf	_iwrite,w
 14378  0F52  1D03               	skipz
 14379  0F53  2F55               	goto	u7971
 14380  0F54  2F56               	goto	u7970
 14381  0F55                     u7971:
 14382  0F55  2F5B               	goto	l1345
 14383  0F56                     u7970:
 14384  0F56                     l6762:
 14385                           
 14386                           ;main.c: 582: iread++;
 14387  0F56  3001               	movlw	1
 14388  0F57  0020               	movlb	0	; select bank0
 14389  0F58  00B1               	movwf	??_monitoring_TEMP_LUM
 14390  0F59  0831               	movf	??_monitoring_TEMP_LUM,w
 14391  0F5A  07FB               	addwf	_iread,f
 14392  0F5B                     l1345:
 14393                           
 14394                           ;main.c: 583: };main.c: 585: iwrite++;
 14395  0F5B  3001               	movlw	1
 14396  0F5C  0020               	movlb	0	; select bank0
 14397  0F5D  00B1               	movwf	??_monitoring_TEMP_LUM
 14398  0F5E  0831               	movf	??_monitoring_TEMP_LUM,w
 14399  0F5F  07FA               	addwf	_iwrite,f
 14400  0F60                     l6764:
 14401                           
 14402                           ;main.c: 586: if(iwrite > NREG - 1){
 14403  0F60  087D               	movf	_NREG,w
 14404  0F61  3EFF               	addlw	255
 14405  0F62  00B1               	movwf	??_monitoring_TEMP_LUM
 14406  0F63  30FF               	movlw	255
 14407  0F64  1803               	skipnc
 14408  0F65  3000               	movlw	0
 14409  0F66  00B2               	movwf	??_monitoring_TEMP_LUM+1
 14410  0F67  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14411  0F68  3A80               	xorlw	128
 14412  0F69  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14413  0F6A  3080               	movlw	128
 14414  0F6B  0233               	subwf	??_monitoring_TEMP_LUM+2,w
 14415  0F6C  1D03               	skipz
 14416  0F6D  2F70               	goto	u7985
 14417  0F6E  087A               	movf	_iwrite,w
 14418  0F6F  0231               	subwf	??_monitoring_TEMP_LUM,w
 14419  0F70                     u7985:
 14420  0F70  1803               	skipnc
 14421  0F71  2F73               	goto	u7981
 14422  0F72  2F74               	goto	u7980
 14423  0F73                     u7981:
 14424  0F73  2F78               	goto	l6770
 14425  0F74                     u7980:
 14426  0F74                     l6766:
 14427                           
 14428                           ;main.c: 587: flagNr = 1;
 14429  0F74  0021               	movlb	1	; select bank1
 14430  0F75  01AD               	clrf	_flagNr^(0+128)
 14431  0F76  0AAD               	incf	_flagNr^(0+128),f
 14432  0F77                     l6768:
 14433                           
 14434                           ;main.c: 588: iwrite = 0;
 14435  0F77  01FA               	clrf	_iwrite
 14436  0F78                     l6770:
 14437                           
 14438                           ;main.c: 589: };main.c: 590: if(flagNr){
 14439  0F78  0021               	movlb	1	; select bank1
 14440  0F79  082D               	movf	_flagNr^(0+128),w
 14441  0F7A  1903               	btfsc	3,2
 14442  0F7B  2F7D               	goto	u7991
 14443  0F7C  2F7E               	goto	u7990
 14444  0F7D                     u7991:
 14445  0F7D  2F84               	goto	l6774
 14446  0F7E                     u7990:
 14447  0F7E                     l6772:
 14448                           
 14449                           ;main.c: 591: nr = NREG;
 14450  0F7E  087D               	movf	_NREG,w
 14451  0F7F  0020               	movlb	0	; select bank0
 14452  0F80  00B1               	movwf	??_monitoring_TEMP_LUM
 14453  0F81  0831               	movf	??_monitoring_TEMP_LUM,w
 14454  0F82  00F9               	movwf	_nr
 14455                           
 14456                           ;main.c: 592: } else{
 14457  0F83  2F89               	goto	l6776
 14458  0F84                     l6774:
 14459                           
 14460                           ;main.c: 593: nr++;
 14461  0F84  3001               	movlw	1
 14462  0F85  0020               	movlb	0	; select bank0
 14463  0F86  00B1               	movwf	??_monitoring_TEMP_LUM
 14464  0F87  0831               	movf	??_monitoring_TEMP_LUM,w
 14465  0F88  07F9               	addwf	_nr,f
 14466  0F89                     l6776:
 14467                           
 14468                           ;main.c: 594: };main.c: 596: if(iread > NREG-1){
 14469  0F89  087D               	movf	_NREG,w
 14470  0F8A  3EFF               	addlw	255
 14471  0F8B  00B1               	movwf	??_monitoring_TEMP_LUM
 14472  0F8C  30FF               	movlw	255
 14473  0F8D  1803               	skipnc
 14474  0F8E  3000               	movlw	0
 14475  0F8F  00B2               	movwf	??_monitoring_TEMP_LUM+1
 14476  0F90  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14477  0F91  3A80               	xorlw	128
 14478  0F92  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14479  0F93  3080               	movlw	128
 14480  0F94  0233               	subwf	??_monitoring_TEMP_LUM+2,w
 14481  0F95  1D03               	skipz
 14482  0F96  2F99               	goto	u8005
 14483  0F97  087B               	movf	_iread,w
 14484  0F98  0231               	subwf	??_monitoring_TEMP_LUM,w
 14485  0F99                     u8005:
 14486  0F99  1803               	skipnc
 14487  0F9A  2F9C               	goto	u8001
 14488  0F9B  2F9D               	goto	u8000
 14489  0F9C                     u8001:
 14490  0F9C  2F9E               	goto	l6780
 14491  0F9D                     u8000:
 14492  0F9D                     l6778:
 14493                           
 14494                           ;main.c: 597: iread = 0;
 14495  0F9D  01FB               	clrf	_iread
 14496  0F9E                     l6780:
 14497                           
 14498                           ;main.c: 598: };main.c: 600: prevTemp = temp;
 14499  0F9E  0020               	movlb	0	; select bank0
 14500  0F9F  0864               	movf	_temp,w
 14501  0FA0  00B1               	movwf	??_monitoring_TEMP_LUM
 14502  0FA1  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14503  0FA2  0831               	movf	??_monitoring_TEMP_LUM,w
 14504  0FA3  0021               	movlb	1	; select bank1
 14505  0FA4  00D3               	movwf	_prevTemp^(0+128)
 14506  0FA5  0020               	movlb	0	; select bank0
 14507  0FA6  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14508  0FA7  0021               	movlb	1	; select bank1
 14509  0FA8  00D4               	movwf	(_prevTemp+1)^(0+128)
 14510  0FA9                     l6782:
 14511                           
 14512                           ;main.c: 601: prevLumLevel = lumLevel;
 14513  0FA9  0020               	movlb	0	; select bank0
 14514  0FAA  0863               	movf	_lumLevel,w
 14515  0FAB  00B1               	movwf	??_monitoring_TEMP_LUM
 14516  0FAC  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14517  0FAD  0831               	movf	??_monitoring_TEMP_LUM,w
 14518  0FAE  0021               	movlb	1	; select bank1
 14519  0FAF  00D1               	movwf	_prevLumLevel^(0+128)
 14520  0FB0  0020               	movlb	0	; select bank0
 14521  0FB1  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14522  0FB2  0021               	movlb	1	; select bank1
 14523  0FB3  00D2               	movwf	(_prevLumLevel+1)^(0+128)
 14524  0FB4                     l6784:
 14525                           
 14526                           ;main.c: 602: };main.c: 605: if(ALAF == 'A'){
 14527  0FB4  3041               	movlw	65
 14528  0FB5  067C               	xorwf	_ALAF,w
 14529  0FB6  1D03               	btfss	3,2
 14530  0FB7  2FB9               	goto	u8011
 14531  0FB8  2FBA               	goto	u8010
 14532  0FB9                     u8011:
 14533  0FB9  2FFF               	goto	l1365
 14534  0FBA                     u8010:
 14535  0FBA                     l6786:
 14536                           
 14537                           ;main.c: 607: if((lumAlarm.alarmLum > lumLevel) && (editingLumAlarm == 0)){
 14538  0FBA  0021               	movlb	1	; select bank1
 14539  0FBB  0824               	movf	_lumAlarm^(0+128),w
 14540  0FBC  0020               	movlb	0	; select bank0
 14541  0FBD  0263               	subwf	_lumLevel,w
 14542  0FBE  1803               	skipnc
 14543  0FBF  2FC1               	goto	u8021
 14544  0FC0  2FC2               	goto	u8020
 14545  0FC1                     u8021:
 14546  0FC1  2FDA               	goto	l6800
 14547  0FC2                     u8020:
 14548  0FC2                     l6788:
 14549  0FC2  0021               	movlb	1	; select bank1
 14550  0FC3  0834               	movf	_editingLumAlarm^(0+128),w
 14551  0FC4  1D03               	btfss	3,2
 14552  0FC5  2FC7               	goto	u8031
 14553  0FC6  2FC8               	goto	u8030
 14554  0FC7                     u8031:
 14555  0FC7  2FDA               	goto	l6800
 14556  0FC8                     u8030:
 14557  0FC8                     l6790:
 14558                           
 14559                           ;main.c: 608: if(!lumAlarm.triggered){
 14560  0FC8  0826               	movf	(_lumAlarm^(0+128)+2),w
 14561  0FC9  1D03               	btfss	3,2
 14562  0FCA  2FCC               	goto	u8041
 14563  0FCB  2FCD               	goto	u8040
 14564  0FCC                     u8041:
 14565  0FCC  2FD3               	goto	l6794
 14566  0FCD                     u8040:
 14567  0FCD                     l6792:
 14568                           
 14569                           ;main.c: 609: alarmPWMStart.h = 0xff;
 14570  0FCD  30FF               	movlw	255
 14571  0FCE  0020               	movlb	0	; select bank0
 14572  0FCF  00B1               	movwf	??_monitoring_TEMP_LUM
 14573  0FD0  0831               	movf	??_monitoring_TEMP_LUM,w
 14574  0FD1  0021               	movlb	1	; select bank1
 14575  0FD2  00CE               	movwf	_alarmPWMStart^(0+128)
 14576  0FD3                     l6794:
 14577                           
 14578                           ;main.c: 610: };main.c: 611: lumAlarm.triggered = 1;
 14579  0FD3  01A6               	clrf	(_lumAlarm^(0+128)+2)
 14580  0FD4  0AA6               	incf	(_lumAlarm^(0+128)+2),f
 14581  0FD5                     l6796:
 14582                           
 14583                           ;main.c: 613: lumAlarm.trigger = 1;
 14584  0FD5  01A5               	clrf	(_lumAlarm^(0+128)+1)
 14585  0FD6  0AA5               	incf	(_lumAlarm^(0+128)+1),f
 14586  0FD7                     l6798:
 14587  0FD7  0020               	movlb	0	; select bank0
 14588  0FD8  1616               	bsf	22,4	;volatile
 14589  0FD9  2FDE               	goto	l6804
 14590  0FDA                     l6800:
 14591                           
 14592                           ;main.c: 616: lumAlarm.triggered = 0;
 14593  0FDA  0021               	movlb	1	; select bank1
 14594  0FDB  01A6               	clrf	(_lumAlarm^(0+128)+2)
 14595  0FDC                     l6802:
 14596  0FDC  0020               	movlb	0	; select bank0
 14597  0FDD  1216               	bcf	22,4	;volatile
 14598  0FDE                     l6804:
 14599                           
 14600                           ;main.c: 618: };main.c: 621: if((tempAlarm.alarmTemp < temp) && (editingTempAlarm == 0))
      +                          {
 14601  0FDE  0864               	movf	_temp,w
 14602  0FDF  0021               	movlb	1	; select bank1
 14603  0FE0  0227               	subwf	_tempAlarm^(0+128),w
 14604  0FE1  1803               	skipnc
 14605  0FE2  2FE4               	goto	u8051
 14606  0FE3  2FE5               	goto	u8050
 14607  0FE4                     u8051:
 14608  0FE4  2FFC               	goto	l6818
 14609  0FE5                     u8050:
 14610  0FE5                     l6806:
 14611  0FE5  0835               	movf	_editingTempAlarm^(0+128),w
 14612  0FE6  1D03               	btfss	3,2
 14613  0FE7  2FE9               	goto	u8061
 14614  0FE8  2FEA               	goto	u8060
 14615  0FE9                     u8061:
 14616  0FE9  2FFC               	goto	l6818
 14617  0FEA                     u8060:
 14618  0FEA                     l6808:
 14619                           
 14620                           ;main.c: 622: if(!tempAlarm.triggered){
 14621  0FEA  0829               	movf	(_tempAlarm^(0+128)+2),w
 14622  0FEB  1D03               	btfss	3,2
 14623  0FEC  2FEE               	goto	u8071
 14624  0FED  2FEF               	goto	u8070
 14625  0FEE                     u8071:
 14626  0FEE  2FF5               	goto	l6812
 14627  0FEF                     u8070:
 14628  0FEF                     l6810:
 14629                           
 14630                           ;main.c: 623: alarmPWMStart.h = 0xff;
 14631  0FEF  30FF               	movlw	255
 14632  0FF0  0020               	movlb	0	; select bank0
 14633  0FF1  00B1               	movwf	??_monitoring_TEMP_LUM
 14634  0FF2  0831               	movf	??_monitoring_TEMP_LUM,w
 14635  0FF3  0021               	movlb	1	; select bank1
 14636  0FF4  00CE               	movwf	_alarmPWMStart^(0+128)
 14637  0FF5                     l6812:
 14638                           
 14639                           ;main.c: 624: };main.c: 626: tempAlarm.triggered = 1;
 14640  0FF5  01A9               	clrf	(_tempAlarm^(0+128)+2)
 14641  0FF6  0AA9               	incf	(_tempAlarm^(0+128)+2),f
 14642  0FF7                     l6814:
 14643                           
 14644                           ;main.c: 628: tempAlarm.trigger = 1;
 14645  0FF7  01A8               	clrf	(_tempAlarm^(0+128)+1)
 14646  0FF8  0AA8               	incf	(_tempAlarm^(0+128)+1),f
 14647  0FF9                     l6816:
 14648  0FF9  0020               	movlb	0	; select bank0
 14649  0FFA  1696               	bsf	22,5	;volatile
 14650  0FFB  2FFF               	goto	l1365
 14651  0FFC                     l6818:
 14652                           
 14653                           ;main.c: 632: tempAlarm.triggered = 0;
 14654  0FFC  01A9               	clrf	(_tempAlarm^(0+128)+2)
 14655  0FFD                     l6820:
 14656  0FFD  0020               	movlb	0	; select bank0
 14657  0FFE  1296               	bcf	22,5	;volatile
 14658  0FFF                     l1365:
 14659  0FFF  0008               	return
 14660  1000                     __end_of_monitoring_TEMP_LUM:
 14661                           
 14662                           	psect	text25
 14663  0D2F                     __ptext25:	
 14664 ;; *************** function _tsttc *****************
 14665 ;; Defined at:
 14666 ;;		line 197 in file "main.c"
 14667 ;; Parameters:    Size  Location     Type
 14668 ;;		None
 14669 ;; Auto vars:     Size  Location     Type
 14670 ;;  value           1   10[BANK0 ] unsigned char 
 14671 ;; Return value:  Size  Location     Type
 14672 ;;                  1    wreg      unsigned char 
 14673 ;; Registers used:
 14674 ;;		wreg, status,2, status,0, pclath, cstack
 14675 ;; Tracked objects:
 14676 ;;		On entry : 0/0
 14677 ;;		On exit  : 0/0
 14678 ;;		Unchanged: 0/0
 14679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14683 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14684 ;;Total ram usage:        2 bytes
 14685 ;; Hardware stack levels used:    1
 14686 ;; Hardware stack levels required when called:    5
 14687 ;; This function calls:
 14688 ;;		_ReadI2C
 14689 ;;		_WriteI2C
 14690 ;; This function is called by:
 14691 ;;		_monitoring_TEMP_LUM
 14692 ;; This function uses a non-reentrant model
 14693 ;;
 14694                           
 14695                           
 14696                           ;psect for function _tsttc
 14697  0D2F                     _tsttc:
 14698  0D2F                     l1016:	
 14699                           ;incstack = 0
 14700                           ; Regs used in _tsttc: [wreg+status,2+status,0+pclath+cstack]
 14701                           ;main.c: 199: unsigned char value;;main.c: 200: do{
 14702                           
 14703  0D2F                     l6412:	
 14704                           ;main.c: 201: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14705                           
 14706  0D2F  0023               	movlb	3	; select bank3
 14707  0D30  0C0F               	rrf	15,w	;volatile
 14708  0D31  0C89               	rrf	9,f
 14709  0D32  3901               	andlw	1
 14710  0D33  0020               	movlb	0	; select bank0
 14711  0D34  00A9               	movwf	??_tsttc
 14712  0D35  0023               	movlb	3	; select bank3
 14713  0D36  0811               	movf	17,w	;volatile
 14714  0D37  391F               	andlw	31
 14715  0D38  0020               	movlb	0	; select bank0
 14716  0D39  0429               	iorwf	??_tsttc,w
 14717  0D3A  1D03               	btfss	3,2
 14718  0D3B  2D3D               	goto	u7181
 14719  0D3C  2D3E               	goto	u7180
 14720  0D3D                     u7181:
 14721  0D3D  2D2F               	goto	l6412
 14722  0D3E                     u7180:
 14723  0D3E                     l1019:
 14724                           
 14725                           ;main.c: 202: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14726  0D3E  0023               	movlb	3	; select bank3
 14727  0D3F  1411               	bsf	17,0	;volatile
 14728  0D40                     l1020:
 14729  0D40  1811               	btfsc	17,0	;volatile
 14730  0D41  2D43               	goto	u7191
 14731  0D42  2D44               	goto	u7190
 14732  0D43                     u7191:
 14733  0D43  2D40               	goto	l1020
 14734  0D44                     u7190:
 14735  0D44                     l6414:
 14736  0D44  0023               	movlb	3	; select bank3
 14737  0D45  0C0F               	rrf	15,w	;volatile
 14738  0D46  0C89               	rrf	9,f
 14739  0D47  3901               	andlw	1
 14740  0D48  0020               	movlb	0	; select bank0
 14741  0D49  00A9               	movwf	??_tsttc
 14742  0D4A  0023               	movlb	3	; select bank3
 14743  0D4B  0811               	movf	17,w	;volatile
 14744  0D4C  391F               	andlw	31
 14745  0D4D  0020               	movlb	0	; select bank0
 14746  0D4E  0429               	iorwf	??_tsttc,w
 14747  0D4F  1D03               	btfss	3,2
 14748  0D50  2D52               	goto	u7201
 14749  0D51  2D53               	goto	u7200
 14750  0D52                     u7201:
 14751  0D52  2D44               	goto	l6414
 14752  0D53                     u7200:
 14753  0D53                     l6416:
 14754                           
 14755                           ;main.c: 204: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14756  0D53  309A               	movlw	154
 14757  0D54  3195  2531  318D   	fcall	_WriteI2C
 14758  0D57                     l6418:
 14759  0D57  0023               	movlb	3	; select bank3
 14760  0D58  0C0F               	rrf	15,w	;volatile
 14761  0D59  0C89               	rrf	9,f
 14762  0D5A  3901               	andlw	1
 14763  0D5B  0020               	movlb	0	; select bank0
 14764  0D5C  00A9               	movwf	??_tsttc
 14765  0D5D  0023               	movlb	3	; select bank3
 14766  0D5E  0811               	movf	17,w	;volatile
 14767  0D5F  391F               	andlw	31
 14768  0D60  0020               	movlb	0	; select bank0
 14769  0D61  0429               	iorwf	??_tsttc,w
 14770  0D62  1D03               	btfss	3,2
 14771  0D63  2D65               	goto	u7211
 14772  0D64  2D66               	goto	u7210
 14773  0D65                     u7211:
 14774  0D65  2D57               	goto	l6418
 14775  0D66                     u7210:
 14776  0D66                     l6420:
 14777                           
 14778                           ;main.c: 205: WriteI2C(0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14779  0D66  3001               	movlw	1
 14780  0D67  3195  2531  318D   	fcall	_WriteI2C
 14781  0D6A                     l6422:
 14782  0D6A  0023               	movlb	3	; select bank3
 14783  0D6B  0C0F               	rrf	15,w	;volatile
 14784  0D6C  0C89               	rrf	9,f
 14785  0D6D  3901               	andlw	1
 14786  0D6E  0020               	movlb	0	; select bank0
 14787  0D6F  00A9               	movwf	??_tsttc
 14788  0D70  0023               	movlb	3	; select bank3
 14789  0D71  0811               	movf	17,w	;volatile
 14790  0D72  391F               	andlw	31
 14791  0D73  0020               	movlb	0	; select bank0
 14792  0D74  0429               	iorwf	??_tsttc,w
 14793  0D75  1D03               	btfss	3,2
 14794  0D76  2D78               	goto	u7221
 14795  0D77  2D79               	goto	u7220
 14796  0D78                     u7221:
 14797  0D78  2D6A               	goto	l6422
 14798  0D79                     u7220:
 14799  0D79                     l1031:
 14800                           
 14801                           ;main.c: 206: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 14802  0D79  0023               	movlb	3	; select bank3
 14803  0D7A  1491               	bsf	17,1	;volatile
 14804  0D7B                     l1032:
 14805  0D7B  1891               	btfsc	17,1	;volatile
 14806  0D7C  2D7E               	goto	u7231
 14807  0D7D  2D7F               	goto	u7230
 14808  0D7E                     u7231:
 14809  0D7E  2D7B               	goto	l1032
 14810  0D7F                     u7230:
 14811  0D7F                     l6424:
 14812  0D7F  0023               	movlb	3	; select bank3
 14813  0D80  0C0F               	rrf	15,w	;volatile
 14814  0D81  0C89               	rrf	9,f
 14815  0D82  3901               	andlw	1
 14816  0D83  0020               	movlb	0	; select bank0
 14817  0D84  00A9               	movwf	??_tsttc
 14818  0D85  0023               	movlb	3	; select bank3
 14819  0D86  0811               	movf	17,w	;volatile
 14820  0D87  391F               	andlw	31
 14821  0D88  0020               	movlb	0	; select bank0
 14822  0D89  0429               	iorwf	??_tsttc,w
 14823  0D8A  1D03               	btfss	3,2
 14824  0D8B  2D8D               	goto	u7241
 14825  0D8C  2D8E               	goto	u7240
 14826  0D8D                     u7241:
 14827  0D8D  2D7F               	goto	l6424
 14828  0D8E                     u7240:
 14829  0D8E                     l6426:
 14830                           
 14831                           ;main.c: 207: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14832  0D8E  309B               	movlw	155
 14833  0D8F  3195  2531  318D   	fcall	_WriteI2C
 14834  0D92                     l6428:
 14835  0D92  0023               	movlb	3	; select bank3
 14836  0D93  0C0F               	rrf	15,w	;volatile
 14837  0D94  0C89               	rrf	9,f
 14838  0D95  3901               	andlw	1
 14839  0D96  0020               	movlb	0	; select bank0
 14840  0D97  00A9               	movwf	??_tsttc
 14841  0D98  0023               	movlb	3	; select bank3
 14842  0D99  0811               	movf	17,w	;volatile
 14843  0D9A  391F               	andlw	31
 14844  0D9B  0020               	movlb	0	; select bank0
 14845  0D9C  0429               	iorwf	??_tsttc,w
 14846  0D9D  1D03               	btfss	3,2
 14847  0D9E  2DA0               	goto	u7251
 14848  0D9F  2DA1               	goto	u7250
 14849  0DA0                     u7251:
 14850  0DA0  2D92               	goto	l6428
 14851  0DA1                     u7250:
 14852  0DA1                     l6430:
 14853                           
 14854                           ;main.c: 208: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14855  0DA1  3190  20DF  318D   	fcall	_ReadI2C
 14856  0DA4  0020               	movlb	0	; select bank0
 14857  0DA5  00A9               	movwf	??_tsttc
 14858  0DA6  0829               	movf	??_tsttc,w
 14859  0DA7  00AA               	movwf	tsttc@value
 14860  0DA8                     l6432:
 14861  0DA8  0023               	movlb	3	; select bank3
 14862  0DA9  0C0F               	rrf	15,w	;volatile
 14863  0DAA  0C89               	rrf	9,f
 14864  0DAB  3901               	andlw	1
 14865  0DAC  0020               	movlb	0	; select bank0
 14866  0DAD  00A9               	movwf	??_tsttc
 14867  0DAE  0023               	movlb	3	; select bank3
 14868  0DAF  0811               	movf	17,w	;volatile
 14869  0DB0  391F               	andlw	31
 14870  0DB1  0020               	movlb	0	; select bank0
 14871  0DB2  0429               	iorwf	??_tsttc,w
 14872  0DB3  1D03               	btfss	3,2
 14873  0DB4  2DB6               	goto	u7261
 14874  0DB5  2DB7               	goto	u7260
 14875  0DB6                     u7261:
 14876  0DB6  2DA8               	goto	l6432
 14877  0DB7                     u7260:
 14878  0DB7                     l1043:
 14879                           
 14880                           ;main.c: 209: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14881  0DB7  0023               	movlb	3	; select bank3
 14882  0DB8  1691               	bsf	17,5	;volatile
 14883  0DB9  1611               	bsf	17,4	;volatile
 14884  0DBA                     l1044:
 14885  0DBA  1A11               	btfsc	17,4	;volatile
 14886  0DBB  2DBD               	goto	u7271
 14887  0DBC  2DBE               	goto	u7270
 14888  0DBD                     u7271:
 14889  0DBD  2DBA               	goto	l1044
 14890  0DBE                     u7270:
 14891  0DBE                     l6434:
 14892  0DBE  0023               	movlb	3	; select bank3
 14893  0DBF  0C0F               	rrf	15,w	;volatile
 14894  0DC0  0C89               	rrf	9,f
 14895  0DC1  3901               	andlw	1
 14896  0DC2  0020               	movlb	0	; select bank0
 14897  0DC3  00A9               	movwf	??_tsttc
 14898  0DC4  0023               	movlb	3	; select bank3
 14899  0DC5  0811               	movf	17,w	;volatile
 14900  0DC6  391F               	andlw	31
 14901  0DC7  0020               	movlb	0	; select bank0
 14902  0DC8  0429               	iorwf	??_tsttc,w
 14903  0DC9  1D03               	btfss	3,2
 14904  0DCA  2DCC               	goto	u7281
 14905  0DCB  2DCD               	goto	u7280
 14906  0DCC                     u7281:
 14907  0DCC  2DBE               	goto	l6434
 14908  0DCD                     u7280:
 14909  0DCD                     l1049:
 14910                           
 14911                           ;main.c: 210: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 14912  0DCD  0023               	movlb	3	; select bank3
 14913  0DCE  1511               	bsf	17,2	;volatile
 14914  0DCF                     l1050:
 14915  0DCF  1911               	btfsc	17,2	;volatile
 14916  0DD0  2DD2               	goto	u7291
 14917  0DD1  2DD3               	goto	u7290
 14918  0DD2                     u7291:
 14919  0DD2  2DCF               	goto	l1050
 14920  0DD3                     u7290:
 14921  0DD3                     l1052:
 14922                           
 14923                           ;main.c: 211: } while (!(value & 0x40));
 14924  0DD3  0020               	movlb	0	; select bank0
 14925  0DD4  1F2A               	btfss	tsttc@value,6
 14926  0DD5  2DD7               	goto	u7301
 14927  0DD6  2DD8               	goto	u7300
 14928  0DD7                     u7301:
 14929  0DD7  2D2F               	goto	l1016
 14930  0DD8                     u7300:
 14931  0DD8                     l6436:
 14932  0DD8  0023               	movlb	3	; select bank3
 14933  0DD9  0C0F               	rrf	15,w	;volatile
 14934  0DDA  0C89               	rrf	9,f
 14935  0DDB  3901               	andlw	1
 14936  0DDC  0020               	movlb	0	; select bank0
 14937  0DDD  00A9               	movwf	??_tsttc
 14938  0DDE  0023               	movlb	3	; select bank3
 14939  0DDF  0811               	movf	17,w	;volatile
 14940  0DE0  391F               	andlw	31
 14941  0DE1  0020               	movlb	0	; select bank0
 14942  0DE2  0429               	iorwf	??_tsttc,w
 14943  0DE3  1D03               	btfss	3,2
 14944  0DE4  2DE6               	goto	u7311
 14945  0DE5  2DE7               	goto	u7310
 14946  0DE6                     u7311:
 14947  0DE6  2DD8               	goto	l6436
 14948  0DE7                     u7310:
 14949  0DE7                     l1056:
 14950                           
 14951                           ;main.c: 214: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14952  0DE7  0023               	movlb	3	; select bank3
 14953  0DE8  1411               	bsf	17,0	;volatile
 14954  0DE9                     l1057:
 14955  0DE9  1811               	btfsc	17,0	;volatile
 14956  0DEA  2DEC               	goto	u7321
 14957  0DEB  2DED               	goto	u7320
 14958  0DEC                     u7321:
 14959  0DEC  2DE9               	goto	l1057
 14960  0DED                     u7320:
 14961  0DED                     l6438:
 14962  0DED  0023               	movlb	3	; select bank3
 14963  0DEE  0C0F               	rrf	15,w	;volatile
 14964  0DEF  0C89               	rrf	9,f
 14965  0DF0  3901               	andlw	1
 14966  0DF1  0020               	movlb	0	; select bank0
 14967  0DF2  00A9               	movwf	??_tsttc
 14968  0DF3  0023               	movlb	3	; select bank3
 14969  0DF4  0811               	movf	17,w	;volatile
 14970  0DF5  391F               	andlw	31
 14971  0DF6  0020               	movlb	0	; select bank0
 14972  0DF7  0429               	iorwf	??_tsttc,w
 14973  0DF8  1D03               	btfss	3,2
 14974  0DF9  2DFB               	goto	u7331
 14975  0DFA  2DFC               	goto	u7330
 14976  0DFB                     u7331:
 14977  0DFB  2DED               	goto	l6438
 14978  0DFC                     u7330:
 14979  0DFC                     l6440:
 14980                           
 14981                           ;main.c: 215: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14982  0DFC  309A               	movlw	154
 14983  0DFD  3195  2531  318D   	fcall	_WriteI2C
 14984  0E00                     l6442:
 14985  0E00  0023               	movlb	3	; select bank3
 14986  0E01  0C0F               	rrf	15,w	;volatile
 14987  0E02  0C89               	rrf	9,f
 14988  0E03  3901               	andlw	1
 14989  0E04  0020               	movlb	0	; select bank0
 14990  0E05  00A9               	movwf	??_tsttc
 14991  0E06  0023               	movlb	3	; select bank3
 14992  0E07  0811               	movf	17,w	;volatile
 14993  0E08  391F               	andlw	31
 14994  0E09  0020               	movlb	0	; select bank0
 14995  0E0A  0429               	iorwf	??_tsttc,w
 14996  0E0B  1D03               	btfss	3,2
 14997  0E0C  2E0E               	goto	u7341
 14998  0E0D  2E0F               	goto	u7340
 14999  0E0E                     u7341:
 15000  0E0E  2E00               	goto	l6442
 15001  0E0F                     u7340:
 15002  0E0F                     l6444:
 15003                           
 15004                           ;main.c: 216: WriteI2C(0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15005  0E0F  3000               	movlw	0
 15006  0E10  3195  2531  318D   	fcall	_WriteI2C
 15007  0E13                     l6446:
 15008  0E13  0023               	movlb	3	; select bank3
 15009  0E14  0C0F               	rrf	15,w	;volatile
 15010  0E15  0C89               	rrf	9,f
 15011  0E16  3901               	andlw	1
 15012  0E17  0020               	movlb	0	; select bank0
 15013  0E18  00A9               	movwf	??_tsttc
 15014  0E19  0023               	movlb	3	; select bank3
 15015  0E1A  0811               	movf	17,w	;volatile
 15016  0E1B  391F               	andlw	31
 15017  0E1C  0020               	movlb	0	; select bank0
 15018  0E1D  0429               	iorwf	??_tsttc,w
 15019  0E1E  1D03               	btfss	3,2
 15020  0E1F  2E21               	goto	u7351
 15021  0E20  2E22               	goto	u7350
 15022  0E21                     u7351:
 15023  0E21  2E13               	goto	l6446
 15024  0E22                     u7350:
 15025  0E22                     l1068:
 15026                           
 15027                           ;main.c: 217: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 15028  0E22  0023               	movlb	3	; select bank3
 15029  0E23  1491               	bsf	17,1	;volatile
 15030  0E24                     l1069:
 15031  0E24  1891               	btfsc	17,1	;volatile
 15032  0E25  2E27               	goto	u7361
 15033  0E26  2E28               	goto	u7360
 15034  0E27                     u7361:
 15035  0E27  2E24               	goto	l1069
 15036  0E28                     u7360:
 15037  0E28                     l6448:
 15038  0E28  0023               	movlb	3	; select bank3
 15039  0E29  0C0F               	rrf	15,w	;volatile
 15040  0E2A  0C89               	rrf	9,f
 15041  0E2B  3901               	andlw	1
 15042  0E2C  0020               	movlb	0	; select bank0
 15043  0E2D  00A9               	movwf	??_tsttc
 15044  0E2E  0023               	movlb	3	; select bank3
 15045  0E2F  0811               	movf	17,w	;volatile
 15046  0E30  391F               	andlw	31
 15047  0E31  0020               	movlb	0	; select bank0
 15048  0E32  0429               	iorwf	??_tsttc,w
 15049  0E33  1D03               	btfss	3,2
 15050  0E34  2E36               	goto	u7371
 15051  0E35  2E37               	goto	u7370
 15052  0E36                     u7371:
 15053  0E36  2E28               	goto	l6448
 15054  0E37                     u7370:
 15055  0E37                     l6450:
 15056                           
 15057                           ;main.c: 218: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15058  0E37  309B               	movlw	155
 15059  0E38  3195  2531  318D   	fcall	_WriteI2C
 15060  0E3B                     l6452:
 15061  0E3B  0023               	movlb	3	; select bank3
 15062  0E3C  0C0F               	rrf	15,w	;volatile
 15063  0E3D  0C89               	rrf	9,f
 15064  0E3E  3901               	andlw	1
 15065  0E3F  0020               	movlb	0	; select bank0
 15066  0E40  00A9               	movwf	??_tsttc
 15067  0E41  0023               	movlb	3	; select bank3
 15068  0E42  0811               	movf	17,w	;volatile
 15069  0E43  391F               	andlw	31
 15070  0E44  0020               	movlb	0	; select bank0
 15071  0E45  0429               	iorwf	??_tsttc,w
 15072  0E46  1D03               	btfss	3,2
 15073  0E47  2E49               	goto	u7381
 15074  0E48  2E4A               	goto	u7380
 15075  0E49                     u7381:
 15076  0E49  2E3B               	goto	l6452
 15077  0E4A                     u7380:
 15078  0E4A                     l6454:
 15079                           
 15080                           ;main.c: 219: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15081  0E4A  3190  20DF  318D   	fcall	_ReadI2C
 15082  0E4D  0020               	movlb	0	; select bank0
 15083  0E4E  00A9               	movwf	??_tsttc
 15084  0E4F  0829               	movf	??_tsttc,w
 15085  0E50  00AA               	movwf	tsttc@value
 15086  0E51                     l6456:
 15087  0E51  0023               	movlb	3	; select bank3
 15088  0E52  0C0F               	rrf	15,w	;volatile
 15089  0E53  0C89               	rrf	9,f
 15090  0E54  3901               	andlw	1
 15091  0E55  0020               	movlb	0	; select bank0
 15092  0E56  00A9               	movwf	??_tsttc
 15093  0E57  0023               	movlb	3	; select bank3
 15094  0E58  0811               	movf	17,w	;volatile
 15095  0E59  391F               	andlw	31
 15096  0E5A  0020               	movlb	0	; select bank0
 15097  0E5B  0429               	iorwf	??_tsttc,w
 15098  0E5C  1D03               	btfss	3,2
 15099  0E5D  2E5F               	goto	u7391
 15100  0E5E  2E60               	goto	u7390
 15101  0E5F                     u7391:
 15102  0E5F  2E51               	goto	l6456
 15103  0E60                     u7390:
 15104  0E60                     l1080:
 15105                           
 15106                           ;main.c: 220: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15107  0E60  0023               	movlb	3	; select bank3
 15108  0E61  1691               	bsf	17,5	;volatile
 15109  0E62  1611               	bsf	17,4	;volatile
 15110  0E63                     l1081:
 15111  0E63  1A11               	btfsc	17,4	;volatile
 15112  0E64  2E66               	goto	u7401
 15113  0E65  2E67               	goto	u7400
 15114  0E66                     u7401:
 15115  0E66  2E63               	goto	l1081
 15116  0E67                     u7400:
 15117  0E67                     l6458:
 15118  0E67  0023               	movlb	3	; select bank3
 15119  0E68  0C0F               	rrf	15,w	;volatile
 15120  0E69  0C89               	rrf	9,f
 15121  0E6A  3901               	andlw	1
 15122  0E6B  0020               	movlb	0	; select bank0
 15123  0E6C  00A9               	movwf	??_tsttc
 15124  0E6D  0023               	movlb	3	; select bank3
 15125  0E6E  0811               	movf	17,w	;volatile
 15126  0E6F  391F               	andlw	31
 15127  0E70  0020               	movlb	0	; select bank0
 15128  0E71  0429               	iorwf	??_tsttc,w
 15129  0E72  1D03               	btfss	3,2
 15130  0E73  2E75               	goto	u7411
 15131  0E74  2E76               	goto	u7410
 15132  0E75                     u7411:
 15133  0E75  2E67               	goto	l6458
 15134  0E76                     u7410:
 15135  0E76                     l1086:
 15136                           
 15137                           ;main.c: 221: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 15138  0E76  0023               	movlb	3	; select bank3
 15139  0E77  1511               	bsf	17,2	;volatile
 15140  0E78                     l1087:
 15141  0E78  1911               	btfsc	17,2	;volatile
 15142  0E79  2E7B               	goto	u7421
 15143  0E7A  2E7C               	goto	u7420
 15144  0E7B                     u7421:
 15145  0E7B  2E78               	goto	l1087
 15146  0E7C                     u7420:
 15147  0E7C                     l6460:
 15148                           
 15149                           ;main.c: 223: return value;
 15150  0E7C  0020               	movlb	0	; select bank0
 15151  0E7D  082A               	movf	tsttc@value,w
 15152  0E7E                     l1090:
 15153  0E7E  0008               	return
 15154  0E7F                     __end_of_tsttc:
 15155                           
 15156                           	psect	text26
 15157  10DF                     __ptext26:	
 15158 ;; *************** function _ReadI2C *****************
 15159 ;; Defined at:
 15160 ;;		line 32 in file "I2C/i2c.c"
 15161 ;; Parameters:    Size  Location     Type
 15162 ;;		None
 15163 ;; Auto vars:     Size  Location     Type
 15164 ;;		None
 15165 ;; Return value:  Size  Location     Type
 15166 ;;                  1    wreg      unsigned char 
 15167 ;; Registers used:
 15168 ;;		wreg, status,2, status,0
 15169 ;; Tracked objects:
 15170 ;;		On entry : 0/0
 15171 ;;		On exit  : 0/0
 15172 ;;		Unchanged: 0/0
 15173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15177 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;Total ram usage:        1 bytes
 15179 ;; Hardware stack levels used:    1
 15180 ;; Hardware stack levels required when called:    4
 15181 ;; This function calls:
 15182 ;;		Nothing
 15183 ;; This function is called by:
 15184 ;;		_tsttc
 15185 ;;		_LCDrecv
 15186 ;; This function uses a non-reentrant model
 15187 ;;
 15188                           
 15189                           
 15190                           ;psect for function _ReadI2C
 15191  10DF                     _ReadI2C:
 15192  10DF                     l6266:	
 15193                           ;incstack = 0
 15194                           ; Regs used in _ReadI2C: [wreg+status,2+status,0]
 15195                           
 15196                           
 15197                           ;i2c.c: 34: if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 15198  10DF  300F               	movlw	15
 15199  10E0  0023               	movlb	3	; select bank3
 15200  10E1  0510               	andwf	16,w	;volatile
 15201  10E2  0020               	movlb	0	; select bank0
 15202  10E3  00A7               	movwf	??_ReadI2C
 15203  10E4  3008               	movlw	8
 15204  10E5  0627               	xorwf	??_ReadI2C,w
 15205  10E6  1903               	btfsc	3,2
 15206  10E7  28E9               	goto	u6901
 15207  10E8  28EA               	goto	u6900
 15208  10E9                     u6901:
 15209  10E9  28F5               	goto	l22
 15210  10EA                     u6900:
 15211  10EA                     l6268:
 15212  10EA  300F               	movlw	15
 15213  10EB  0023               	movlb	3	; select bank3
 15214  10EC  0510               	andwf	16,w	;volatile
 15215  10ED  0020               	movlb	0	; select bank0
 15216  10EE  00A7               	movwf	??_ReadI2C
 15217  10EF  300B               	movlw	11
 15218  10F0  0627               	xorwf	??_ReadI2C,w
 15219  10F1  1D03               	btfss	3,2
 15220  10F2  28F4               	goto	u6911
 15221  10F3  28F5               	goto	u6910
 15222  10F4                     u6911:
 15223  10F4  28F7               	goto	l23
 15224  10F5                     u6910:
 15225  10F5                     l22:
 15226                           
 15227                           ;i2c.c: 35: SSP1CON2bits.RCEN = 1;
 15228  10F5  0023               	movlb	3	; select bank3
 15229  10F6  1591               	bsf	17,3	;volatile
 15230  10F7                     l23:
 15231  10F7  0023               	movlb	3	; select bank3
 15232  10F8  1C0F               	btfss	15,0	;volatile
 15233  10F9  28FB               	goto	u6921
 15234  10FA  28FC               	goto	u6920
 15235  10FB                     u6921:
 15236  10FB  28F7               	goto	l23
 15237  10FC                     u6920:
 15238  10FC                     l6270:
 15239                           
 15240                           ;i2c.c: 37: return ( SSP1BUF );
 15241  10FC  080C               	movf	12,w	;volatile
 15242  10FD                     l26:
 15243  10FD  0008               	return
 15244  10FE                     __end_of_ReadI2C:
 15245                           
 15246                           	psect	text27
 15247  11C6                     __ptext27:	
 15248 ;; *************** function _DATAEE_WriteByte *****************
 15249 ;; Defined at:
 15250 ;;		line 180 in file "mcc_generated_files/memory.c"
 15251 ;; Parameters:    Size  Location     Type
 15252 ;;  bAdd            2   13[BANK0 ] unsigned int 
 15253 ;;  bData           1   15[BANK0 ] unsigned char 
 15254 ;; Auto vars:     Size  Location     Type
 15255 ;;  GIEBitValue     1   16[BANK0 ] unsigned char 
 15256 ;; Return value:  Size  Location     Type
 15257 ;;                  1    wreg      void 
 15258 ;; Registers used:
 15259 ;;		wreg, status,2, status,0
 15260 ;; Tracked objects:
 15261 ;;		On entry : 0/0
 15262 ;;		On exit  : 0/0
 15263 ;;		Unchanged: 0/0
 15264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15265 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;Total ram usage:        4 bytes
 15270 ;; Hardware stack levels used:    1
 15271 ;; Hardware stack levels required when called:    4
 15272 ;; This function calls:
 15273 ;;		Nothing
 15274 ;; This function is called by:
 15275 ;;		_wirteEEPROMinit
 15276 ;;		_monitoring_TEMP_LUM
 15277 ;;		_main
 15278 ;; This function uses a non-reentrant model
 15279 ;;
 15280                           
 15281                           
 15282                           ;psect for function _DATAEE_WriteByte
 15283  11C6                     _DATAEE_WriteByte:
 15284  11C6                     l6390:	
 15285                           ;incstack = 0
 15286                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 15287                           
 15288                           
 15289                           ;memory.c: 182: uint8_t GIEBitValue = INTCONbits.GIE;
 15290  11C6  3000               	movlw	0
 15291  11C7  1B8B               	btfsc	11,7	;volatile
 15292  11C8  3001               	movlw	1
 15293  11C9  0020               	movlb	0	; select bank0
 15294  11CA  00B0               	movwf	DATAEE_WriteByte@GIEBitValue
 15295                           
 15296                           ;memory.c: 184: NVMADRH = ((bAdd >> 8) & 0xFF);
 15297  11CB  082E               	movf	DATAEE_WriteByte@bAdd+1,w
 15298  11CC  0030               	movlb	16	; select bank16
 15299  11CD  009B               	movwf	27	;volatile
 15300  11CE                     l6392:
 15301                           
 15302                           ;memory.c: 185: NVMADRL = (bAdd & 0xFF);
 15303  11CE  0020               	movlb	0	; select bank0
 15304  11CF  082D               	movf	DATAEE_WriteByte@bAdd,w
 15305  11D0  0030               	movlb	16	; select bank16
 15306  11D1  009A               	movwf	26	;volatile
 15307  11D2                     l6394:
 15308                           
 15309                           ;memory.c: 186: NVMDATL = bData;
 15310  11D2  0020               	movlb	0	; select bank0
 15311  11D3  082F               	movf	DATAEE_WriteByte@bData,w
 15312  11D4  0030               	movlb	16	; select bank16
 15313  11D5  009C               	movwf	28	;volatile
 15314  11D6                     l6396:
 15315                           
 15316                           ;memory.c: 187: NVMCON1bits.NVMREGS = 1;
 15317  11D6  171E               	bsf	30,6	;volsfr
 15318  11D7                     l6398:
 15319                           
 15320                           ;memory.c: 188: NVMCON1bits.WREN = 1;
 15321  11D7  151E               	bsf	30,2	;volsfr
 15322  11D8                     l6400:
 15323                           
 15324                           ;memory.c: 189: INTCONbits.GIE = 0;
 15325  11D8  138B               	bcf	11,7	;volatile
 15326  11D9                     l6402:
 15327                           
 15328                           ;memory.c: 190: NVMCON2 = 0x55;
 15329  11D9  3055               	movlw	85
 15330  11DA  009F               	movwf	31	;volsfr
 15331  11DB                     l6404:
 15332                           
 15333                           ;memory.c: 191: NVMCON2 = 0xAA;
 15334  11DB  30AA               	movlw	170
 15335  11DC  009F               	movwf	31	;volsfr
 15336  11DD                     l6406:
 15337                           
 15338                           ;memory.c: 192: NVMCON1bits.WR = 1;
 15339  11DD  149E               	bsf	30,1	;volsfr
 15340  11DE                     l728:	
 15341                           ;memory.c: 195: {
 15342                           
 15343  11DE  189E               	btfsc	30,1	;volsfr
 15344  11DF  29E1               	goto	u7171
 15345  11E0  29E2               	goto	u7170
 15346  11E1                     u7171:
 15347  11E1  29DE               	goto	l728
 15348  11E2                     u7170:
 15349  11E2                     l730:
 15350                           
 15351                           ;memory.c: 196: };memory.c: 198: NVMCON1bits.WREN = 0;
 15352  11E2  111E               	bcf	30,2	;volsfr
 15353  11E3                     l6408:
 15354                           
 15355                           ;memory.c: 199: INTCONbits.GIE = GIEBitValue;
 15356  11E3  0020               	movlb	0	; select bank0
 15357  11E4  0C30               	rrf	DATAEE_WriteByte@GIEBitValue,w
 15358  11E5  1C03               	skipc
 15359  11E6  138B               	bcf	11,7	;volatile
 15360  11E7  1803               	skipnc
 15361  11E8  178B               	bsf	11,7	;volatile
 15362  11E9                     l731:
 15363  11E9  0008               	return
 15364  11EA                     __end_of_DATAEE_WriteByte:
 15365                           
 15366                           	psect	text28
 15367  1FBA                     __ptext28:	
 15368 ;; *************** function _ADCC_GetSingleConversion *****************
 15369 ;; Defined at:
 15370 ;;		line 130 in file "mcc_generated_files/adcc.c"
 15371 ;; Parameters:    Size  Location     Type
 15372 ;;  channel         1    wreg     enum E12086
 15373 ;; Auto vars:     Size  Location     Type
 15374 ;;  channel         1   10[BANK0 ] enum E12086
 15375 ;; Return value:  Size  Location     Type
 15376 ;;                  2    7[BANK0 ] unsigned int 
 15377 ;; Registers used:
 15378 ;;		wreg
 15379 ;; Tracked objects:
 15380 ;;		On entry : 0/0
 15381 ;;		On exit  : 0/0
 15382 ;;		Unchanged: 0/0
 15383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15384 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15387 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15388 ;;Total ram usage:        4 bytes
 15389 ;; Hardware stack levels used:    1
 15390 ;; Hardware stack levels required when called:    4
 15391 ;; This function calls:
 15392 ;;		Nothing
 15393 ;; This function is called by:
 15394 ;;		_monitoring_TEMP_LUM
 15395 ;; This function uses a non-reentrant model
 15396 ;;
 15397                           
 15398                           
 15399                           ;psect for function _ADCC_GetSingleConversion
 15400  1FBA                     _ADCC_GetSingleConversion:
 15401                           
 15402                           ;incstack = 0
 15403                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 15404                           ;ADCC_GetSingleConversion@channel stored from wreg
 15405  1FBA  0020               	movlb	0	; select bank0
 15406  1FBB  00AA               	movwf	ADCC_GetSingleConversion@channel
 15407  1FBC                     l6370:
 15408                           
 15409                           ;adcc.c: 133: ADPCH = channel;
 15410  1FBC  082A               	movf	ADCC_GetSingleConversion@channel,w
 15411  1FBD  0021               	movlb	1	; select bank1
 15412  1FBE  009E               	movwf	30	;volatile
 15413  1FBF                     l6372:
 15414                           
 15415                           ;adcc.c: 136: ADCON0bits.ADON = 1;
 15416  1FBF  1793               	bsf	19,7	;volatile
 15417  1FC0                     l6374:
 15418                           
 15419                           ;adcc.c: 139: ADCON0bits.ADCONT = 0;
 15420  1FC0  1313               	bcf	19,6	;volatile
 15421  1FC1                     l6376:
 15422                           
 15423                           ;adcc.c: 142: ADCON0bits.ADGO = 1;
 15424  1FC1  1413               	bsf	19,0	;volatile
 15425  1FC2                     l6378:
 15426                           
 15427                           ;adcc.c: 145: __nop();
 15428  1FC2  0000               	nop
 15429  1FC3                     l537:	
 15430                           ;adcc.c: 149: {
 15431                           
 15432  1FC3  0021               	movlb	1	; select bank1
 15433  1FC4  1813               	btfsc	19,0	;volatile
 15434  1FC5  2FC7               	goto	u7151
 15435  1FC6  2FC8               	goto	u7150
 15436  1FC7                     u7151:
 15437  1FC7  2FC3               	goto	l537
 15438  1FC8                     u7150:
 15439  1FC8                     l6380:
 15440                           
 15441                           ;adcc.c: 150: };adcc.c: 154: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 15442  1FC8  080D               	movf	13,w	;volatile
 15443  1FC9  0020               	movlb	0	; select bank0
 15444  1FCA  00A8               	movwf	?_ADCC_GetSingleConversion+1
 15445  1FCB  0021               	movlb	1	; select bank1
 15446  1FCC  080C               	movf	12,w	;volatile
 15447  1FCD  0020               	movlb	0	; select bank0
 15448  1FCE  00A7               	movwf	?_ADCC_GetSingleConversion
 15449  1FCF                     l540:
 15450  1FCF  0008               	return
 15451  1FD0                     __end_of_ADCC_GetSingleConversion:
 15452                           
 15453                           	psect	text29
 15454  1ED7                     __ptext29:	
 15455 ;; *************** function _TMR2_StartTimer *****************
 15456 ;; Defined at:
 15457 ;;		line 106 in file "mcc_generated_files/tmr2.c"
 15458 ;; Parameters:    Size  Location     Type
 15459 ;;		None
 15460 ;; Auto vars:     Size  Location     Type
 15461 ;;		None
 15462 ;; Return value:  Size  Location     Type
 15463 ;;                  1    wreg      void 
 15464 ;; Registers used:
 15465 ;;		status,2, status,0, pclath, cstack
 15466 ;; Tracked objects:
 15467 ;;		On entry : 0/0
 15468 ;;		On exit  : 0/0
 15469 ;;		Unchanged: 0/0
 15470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15475 ;;Total ram usage:        0 bytes
 15476 ;; Hardware stack levels used:    1
 15477 ;; Hardware stack levels required when called:    5
 15478 ;; This function calls:
 15479 ;;		_TMR2_Start
 15480 ;; This function is called by:
 15481 ;;		_checkFlags
 15482 ;; This function uses a non-reentrant model
 15483 ;;
 15484                           
 15485                           
 15486                           ;psect for function _TMR2_StartTimer
 15487  1ED7                     _TMR2_StartTimer:
 15488  1ED7                     l6600:	
 15489                           ;incstack = 0
 15490                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
 15491                           
 15492                           
 15493                           ;tmr2.c: 108: TMR2_Start();
 15494  1ED7  319E  26CE  319E   	fcall	_TMR2_Start
 15495  1EDA                     l659:
 15496  1EDA  0008               	return
 15497  1EDB                     __end_of_TMR2_StartTimer:
 15498                           
 15499                           	psect	text30
 15500  1ECE                     __ptext30:	
 15501 ;; *************** function _TMR2_Start *****************
 15502 ;; Defined at:
 15503 ;;		line 100 in file "mcc_generated_files/tmr2.c"
 15504 ;; Parameters:    Size  Location     Type
 15505 ;;		None
 15506 ;; Auto vars:     Size  Location     Type
 15507 ;;		None
 15508 ;; Return value:  Size  Location     Type
 15509 ;;                  1    wreg      void 
 15510 ;; Registers used:
 15511 ;;		None
 15512 ;; Tracked objects:
 15513 ;;		On entry : 0/0
 15514 ;;		On exit  : 0/0
 15515 ;;		Unchanged: 0/0
 15516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15521 ;;Total ram usage:        0 bytes
 15522 ;; Hardware stack levels used:    1
 15523 ;; Hardware stack levels required when called:    4
 15524 ;; This function calls:
 15525 ;;		Nothing
 15526 ;; This function is called by:
 15527 ;;		_TMR2_StartTimer
 15528 ;; This function uses a non-reentrant model
 15529 ;;
 15530                           
 15531                           
 15532                           ;psect for function _TMR2_Start
 15533  1ECE                     _TMR2_Start:
 15534  1ECE                     l6386:	
 15535                           ;incstack = 0
 15536                           ; Regs used in _TMR2_Start: []
 15537                           
 15538                           
 15539                           ;tmr2.c: 103: T2CONbits.TMR2ON = 1;
 15540  1ECE  0025               	movlb	5	; select bank5
 15541  1ECF  178E               	bsf	14,7	;volatile
 15542  1ED0                     l656:
 15543  1ED0  0008               	return
 15544  1ED1                     __end_of_TMR2_Start:
 15545                           
 15546                           	psect	text31
 15547  158B                     __ptext31:	
 15548 ;; *************** function _S1button *****************
 15549 ;; Defined at:
 15550 ;;		line 638 in file "main.c"
 15551 ;; Parameters:    Size  Location     Type
 15552 ;;		None
 15553 ;; Auto vars:     Size  Location     Type
 15554 ;;		None
 15555 ;; Return value:  Size  Location     Type
 15556 ;;                  1    wreg      void 
 15557 ;; Registers used:
 15558 ;;		wreg, status,2, status,0
 15559 ;; Tracked objects:
 15560 ;;		On entry : 0/0
 15561 ;;		On exit  : 0/0
 15562 ;;		Unchanged: 0/0
 15563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15567 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15568 ;;Total ram usage:        1 bytes
 15569 ;; Hardware stack levels used:    1
 15570 ;; Hardware stack levels required when called:    4
 15571 ;; This function calls:
 15572 ;;		Nothing
 15573 ;; This function is called by:
 15574 ;;		_checkFlags
 15575 ;; This function uses a non-reentrant model
 15576 ;;
 15577                           
 15578                           
 15579                           ;psect for function _S1button
 15580  158B                     _S1button:
 15581  158B                     l6822:	
 15582                           ;incstack = 0
 15583                           ; Regs used in _S1button: [wreg+status,2+status,0]
 15584                           
 15585                           
 15586                           ;main.c: 640: if(modeFlag == 0 && (clkAlarm.trigger || tempAlarm.trigger || lumAlarm.tri
      +                          gger)){
 15587  158B  0020               	movlb	0	; select bank0
 15588  158C  085F               	movf	_modeFlag,w
 15589  158D  0460               	iorwf	_modeFlag+1,w
 15590  158E  1D03               	btfss	3,2
 15591  158F  2D91               	goto	u8081
 15592  1590  2D92               	goto	u8080
 15593  1591                     u8081:
 15594  1591  2DA8               	goto	l6834
 15595  1592                     u8080:
 15596  1592                     l6824:
 15597  1592  0021               	movlb	1	; select bank1
 15598  1593  0823               	movf	(_clkAlarm^(0+128)+3),w
 15599  1594  1D03               	btfss	3,2
 15600  1595  2D97               	goto	u8091
 15601  1596  2D98               	goto	u8090
 15602  1597                     u8091:
 15603  1597  2DA2               	goto	l6830
 15604  1598                     u8090:
 15605  1598                     l6826:
 15606  1598  0828               	movf	(_tempAlarm^(0+128)+1),w
 15607  1599  1D03               	btfss	3,2
 15608  159A  2D9C               	goto	u8101
 15609  159B  2D9D               	goto	u8100
 15610  159C                     u8101:
 15611  159C  2DA2               	goto	l6830
 15612  159D                     u8100:
 15613  159D                     l6828:
 15614  159D  0825               	movf	(_lumAlarm^(0+128)+1),w
 15615  159E  1903               	btfsc	3,2
 15616  159F  2DA1               	goto	u8111
 15617  15A0  2DA2               	goto	u8110
 15618  15A1                     u8111:
 15619  15A1  2DA8               	goto	l6834
 15620  15A2                     u8110:
 15621  15A2                     l6830:
 15622                           
 15623                           ;main.c: 641: clkAlarm.trigger = 0;
 15624  15A2  01A3               	clrf	(_clkAlarm^(0+128)+3)
 15625                           
 15626                           ;main.c: 642: tempAlarm.trigger = 0;
 15627  15A3  01A8               	clrf	(_tempAlarm^(0+128)+1)
 15628                           
 15629                           ;main.c: 643: lumAlarm.trigger = 0;
 15630  15A4  01A5               	clrf	(_lumAlarm^(0+128)+1)
 15631  15A5                     l6832:
 15632                           
 15633                           ;main.c: 644: updateLCD = 1;
 15634  15A5  01D5               	clrf	_updateLCD^(0+128)
 15635  15A6  0AD5               	incf	_updateLCD^(0+128),f
 15636                           
 15637                           ;main.c: 645: } else{
 15638  15A7  2DDD               	goto	l1371
 15639  15A8                     l6834:
 15640                           
 15641                           ;main.c: 646: if(modeFlag == 1){
 15642  15A8  0020               	movlb	0	; select bank0
 15643  15A9  035F               	decf	_modeFlag,w
 15644  15AA  0460               	iorwf	_modeFlag+1,w
 15645  15AB  1D03               	btfss	3,2
 15646  15AC  2DAE               	goto	u8121
 15647  15AD  2DAF               	goto	u8120
 15648  15AE                     u8121:
 15649  15AE  2DD2               	goto	l6842
 15650  15AF                     u8120:
 15651  15AF                     l6836:
 15652                           
 15653                           ;main.c: 647: if(editingClockAlarm >= 1){
 15654  15AF  0862               	movf	_editingClockAlarm+1,w
 15655  15B0  3A80               	xorlw	128
 15656  15B1  00A7               	movwf	??_S1button
 15657  15B2  3080               	movlw	128
 15658  15B3  0227               	subwf	??_S1button,w
 15659  15B4  1D03               	skipz
 15660  15B5  2DB8               	goto	u8135
 15661  15B6  3001               	movlw	1
 15662  15B7  0261               	subwf	_editingClockAlarm,w
 15663  15B8                     u8135:
 15664  15B8  1C03               	skipc
 15665  15B9  2DBB               	goto	u8131
 15666  15BA  2DBC               	goto	u8130
 15667  15BB                     u8131:
 15668  15BB  2DC1               	goto	l1373
 15669  15BC                     u8130:
 15670  15BC                     l6838:
 15671                           
 15672                           ;main.c: 648: editingClockAlarm++;
 15673  15BC  3001               	movlw	1
 15674  15BD  0020               	movlb	0	; select bank0
 15675  15BE  07E1               	addwf	_editingClockAlarm,f
 15676  15BF  3000               	movlw	0
 15677  15C0  3DE2               	addwfc	_editingClockAlarm+1,f
 15678  15C1                     l1373:
 15679                           
 15680                           ;main.c: 649: };main.c: 650: if(editingClockAlarm > 3){
 15681  15C1  0020               	movlb	0	; select bank0
 15682  15C2  0862               	movf	_editingClockAlarm+1,w
 15683  15C3  3A80               	xorlw	128
 15684  15C4  00A7               	movwf	??_S1button
 15685  15C5  3080               	movlw	128
 15686  15C6  0227               	subwf	??_S1button,w
 15687  15C7  1D03               	skipz
 15688  15C8  2DCB               	goto	u8145
 15689  15C9  3004               	movlw	4
 15690  15CA  0261               	subwf	_editingClockAlarm,w
 15691  15CB                     u8145:
 15692  15CB  1C03               	skipc
 15693  15CC  2DCE               	goto	u8141
 15694  15CD  2DCF               	goto	u8140
 15695  15CE                     u8141:
 15696  15CE  2DD2               	goto	l6842
 15697  15CF                     u8140:
 15698  15CF                     l6840:
 15699                           
 15700                           ;main.c: 651: editingClockAlarm = 0;
 15701  15CF  0020               	movlb	0	; select bank0
 15702  15D0  01E1               	clrf	_editingClockAlarm
 15703  15D1  01E2               	clrf	_editingClockAlarm+1
 15704  15D2                     l6842:
 15705                           
 15706                           ;main.c: 652: };main.c: 653: };main.c: 654: if(editingClockAlarm == 0){
 15707  15D2  0020               	movlb	0	; select bank0
 15708  15D3  0861               	movf	_editingClockAlarm,w
 15709  15D4  0462               	iorwf	_editingClockAlarm+1,w
 15710  15D5  1D03               	btfss	3,2
 15711  15D6  2DD8               	goto	u8151
 15712  15D7  2DD9               	goto	u8150
 15713  15D8                     u8151:
 15714  15D8  2DDD               	goto	l1371
 15715  15D9                     u8150:
 15716  15D9                     l6844:
 15717                           
 15718                           ;main.c: 655: modeFlag++;
 15719  15D9  3001               	movlw	1
 15720  15DA  07DF               	addwf	_modeFlag,f
 15721  15DB  3000               	movlw	0
 15722  15DC  3DE0               	addwfc	_modeFlag+1,f
 15723  15DD                     l1371:
 15724                           
 15725                           ;main.c: 656: };main.c: 657: };main.c: 658: _delay((unsigned long)((50)*(1000000/4000.0)
      +                          ));
 15726  15DD  3011               	movlw	17
 15727  15DE  0020               	movlb	0	; select bank0
 15728  15DF  00A7               	movwf	??_S1button
 15729  15E0  303A               	movlw	58
 15730  15E1                     u9587:
 15731  15E1  0B89               	decfsz	9,f
 15732  15E2  2DE1               	goto	u9587
 15733  15E3  0BA7               	decfsz	??_S1button,f
 15734  15E4  2DE1               	goto	u9587
 15735  15E5  0000               	nop
 15736  15E6                     l1376:
 15737  15E6  0008               	return
 15738  15E7                     __end_of_S1button:
 15739                           
 15740                           	psect	text32
 15741  1ECB                     __ptext32:	
 15742 ;; *************** function _PWM_Output_D4_Enable *****************
 15743 ;; Defined at:
 15744 ;;		line 351 in file "main.c"
 15745 ;; Parameters:    Size  Location     Type
 15746 ;;		None
 15747 ;; Auto vars:     Size  Location     Type
 15748 ;;		None
 15749 ;; Return value:  Size  Location     Type
 15750 ;;                  1    wreg      void 
 15751 ;; Registers used:
 15752 ;;		None
 15753 ;; Tracked objects:
 15754 ;;		On entry : 0/0
 15755 ;;		On exit  : 0/0
 15756 ;;		Unchanged: 0/0
 15757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;Total ram usage:        0 bytes
 15763 ;; Hardware stack levels used:    1
 15764 ;; Hardware stack levels required when called:    4
 15765 ;; This function calls:
 15766 ;;		Nothing
 15767 ;; This function is called by:
 15768 ;;		_checkFlags
 15769 ;; This function uses a non-reentrant model
 15770 ;;
 15771                           
 15772                           
 15773                           ;psect for function _PWM_Output_D4_Enable
 15774  1ECB                     _PWM_Output_D4_Enable:
 15775  1ECB                     l6608:	
 15776                           ;incstack = 0
 15777                           ; Regs used in _PWM_Output_D4_Enable: []
 15778                           
 15779                           
 15780                           ;main.c: 352: PWM6EN = 1;
 15781  1ECB  0027               	movlb	7	; select bank7
 15782  1ECC  178E               	bsf	14,7	;volatile
 15783  1ECD                     l1259:
 15784  1ECD  0008               	return
 15785  1ECE                     __end_of_PWM_Output_D4_Enable:
 15786                           
 15787                           	psect	text33
 15788  0B04                     __ptext33:	
 15789 ;; *************** function _cmd_trc *****************
 15790 ;; Defined at:
 15791 ;;		line 1006 in file "main.c"
 15792 ;; Parameters:    Size  Location     Type
 15793 ;;  num             2   22[BANK0 ] int 
 15794 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 15795 ;;		 -> main@buff(20), 
 15796 ;; Auto vars:     Size  Location     Type
 15797 ;;  buffData        5   31[BANK0 ] unsigned char [5]
 15798 ;;  buffInit        3   36[BANK0 ] unsigned char [3]
 15799 ;;  n               2   46[BANK0 ] int 
 15800 ;;  maxReadings     2   44[BANK0 ] int 
 15801 ;;  address         2   41[BANK0 ] unsigned int 
 15802 ;;  i               2   39[BANK0 ] int 
 15803 ;;  j               1   48[BANK0 ] unsigned char 
 15804 ;;  buffEOM         1   43[BANK0 ] unsigned char [1]
 15805 ;; Return value:  Size  Location     Type
 15806 ;;                  1    wreg      void 
 15807 ;; Registers used:
 15808 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15809 ;; Tracked objects:
 15810 ;;		On entry : 0/0
 15811 ;;		On exit  : 0/0
 15812 ;;		Unchanged: 0/0
 15813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15814 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15816 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15817 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15818 ;;Total ram usage:       27 bytes
 15819 ;; Hardware stack levels used:    1
 15820 ;; Hardware stack levels required when called:    8
 15821 ;; This function calls:
 15822 ;;		_DATAEE_ReadByte
 15823 ;;		___wmul
 15824 ;;		_sendERRORMessage
 15825 ;;		_sendMessage
 15826 ;; This function is called by:
 15827 ;;		_main
 15828 ;; This function uses a non-reentrant model
 15829 ;;
 15830                           
 15831                           
 15832                           ;psect for function _cmd_trc
 15833  0B04                     _cmd_trc:
 15834  0B04                     l7460:	
 15835                           ;incstack = 0
 15836                           ; Regs used in _cmd_trc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15837                           
 15838                           
 15839                           ;main.c: 1007: if(num == 4){
 15840  0B04  3004               	movlw	4
 15841  0B05  0020               	movlb	0	; select bank0
 15842  0B06  0636               	xorwf	cmd_trc@num,w
 15843  0B07  0437               	iorwf	cmd_trc@num+1,w
 15844  0B08  1D03               	btfss	3,2
 15845  0B09  2B0B               	goto	u9101
 15846  0B0A  2B0C               	goto	u9100
 15847  0B0B                     u9101:
 15848  0B0B  2C00               	goto	l7518
 15849  0B0C                     u9100:
 15850  0B0C                     l7462:
 15851                           
 15852                           ;main.c: 1008: int n = buffer[2];
 15853  0B0C  0838               	movf	cmd_trc@buffer,w
 15854  0B0D  3E02               	addlw	2
 15855  0B0E  0086               	movwf	6
 15856  0B0F  3001               	movlw	1	; select bank2/3
 15857  0B10  0087               	movwf	7
 15858  0B11  0801               	movf	1,w
 15859  0B12  00B9               	movwf	??_cmd_trc
 15860  0B13  01BA               	clrf	??_cmd_trc+1
 15861  0B14  0839               	movf	??_cmd_trc,w
 15862  0B15  00CE               	movwf	cmd_trc@n
 15863  0B16  083A               	movf	??_cmd_trc+1,w
 15864  0B17  00CF               	movwf	cmd_trc@n+1
 15865  0B18                     l7464:
 15866                           
 15867                           ;main.c: 1009: int maxReadings = (iwrite-iread);
 15868  0B18  087B               	movf	_iread,w
 15869  0B19  027A               	subwf	_iwrite,w
 15870  0B1A  00CC               	movwf	cmd_trc@maxReadings
 15871  0B1B  01CD               	clrf	cmd_trc@maxReadings+1
 15872  0B1C  1C03               	skipc
 15873  0B1D  03CD               	decf	cmd_trc@maxReadings+1,f
 15874  0B1E                     l7466:
 15875                           
 15876                           ;main.c: 1010: if(maxReadings < 0){
 15877  0B1E  1FCD               	btfss	cmd_trc@maxReadings+1,7
 15878  0B1F  2B21               	goto	u9111
 15879  0B20  2B22               	goto	u9110
 15880  0B21                     u9111:
 15881  0B21  2B30               	goto	l1510
 15882  0B22                     u9110:
 15883  0B22                     l7468:
 15884                           
 15885                           ;main.c: 1011: maxReadings = iwrite + (NREG - iread);
 15886  0B22  087B               	movf	_iread,w
 15887  0B23  00B9               	movwf	??_cmd_trc
 15888  0B24  01BA               	clrf	??_cmd_trc+1
 15889  0B25  087A               	movf	_iwrite,w
 15890  0B26  077D               	addwf	_NREG,w
 15891  0B27  00BB               	movwf	??_cmd_trc+2
 15892  0B28  01BC               	clrf	??_cmd_trc+3
 15893  0B29  0DBC               	rlf	??_cmd_trc+3,f
 15894  0B2A  0839               	movf	??_cmd_trc,w
 15895  0B2B  023B               	subwf	??_cmd_trc+2,w
 15896  0B2C  00CC               	movwf	cmd_trc@maxReadings
 15897  0B2D  083A               	movf	??_cmd_trc+1,w
 15898  0B2E  3B3C               	subwfb	??_cmd_trc+3,w
 15899  0B2F  00CD               	movwf	cmd_trc@maxReadings+1
 15900  0B30                     l1510:
 15901                           
 15902                           ;main.c: 1012: };main.c: 1013: if(maxReadings == 0 && nr == NREG){
 15903  0B30  084C               	movf	cmd_trc@maxReadings,w
 15904  0B31  044D               	iorwf	cmd_trc@maxReadings+1,w
 15905  0B32  1D03               	btfss	3,2
 15906  0B33  2B35               	goto	u9121
 15907  0B34  2B36               	goto	u9120
 15908  0B35                     u9121:
 15909  0B35  2B43               	goto	l1511
 15910  0B36                     u9120:
 15911  0B36                     l7470:
 15912  0B36  0879               	movf	_nr,w
 15913  0B37  067D               	xorwf	_NREG,w
 15914  0B38  1D03               	skipz
 15915  0B39  2B3B               	goto	u9131
 15916  0B3A  2B3C               	goto	u9130
 15917  0B3B                     u9131:
 15918  0B3B  2B43               	goto	l1511
 15919  0B3C                     u9130:
 15920  0B3C                     l7472:
 15921                           
 15922                           ;main.c: 1014: maxReadings = nr;
 15923  0B3C  0879               	movf	_nr,w
 15924  0B3D  00B9               	movwf	??_cmd_trc
 15925  0B3E  01BA               	clrf	??_cmd_trc+1
 15926  0B3F  0839               	movf	??_cmd_trc,w
 15927  0B40  00CC               	movwf	cmd_trc@maxReadings
 15928  0B41  083A               	movf	??_cmd_trc+1,w
 15929  0B42  00CD               	movwf	cmd_trc@maxReadings+1
 15930  0B43                     l1511:
 15931                           
 15932                           ;main.c: 1015: };main.c: 1016: if((n > nr) || (n > maxReadings)){
 15933  0B43  084F               	movf	cmd_trc@n+1,w
 15934  0B44  3A80               	xorlw	128
 15935  0B45  3C80               	sublw	128
 15936  0B46  1D03               	skipz
 15937  0B47  2B4A               	goto	u9145
 15938  0B48  084E               	movf	cmd_trc@n,w
 15939  0B49  0279               	subwf	_nr,w
 15940  0B4A                     u9145:
 15941  0B4A  1C03               	skipc
 15942  0B4B  2B4D               	goto	u9141
 15943  0B4C  2B4E               	goto	u9140
 15944  0B4D                     u9141:
 15945  0B4D  2B5D               	goto	l7476
 15946  0B4E                     u9140:
 15947  0B4E                     l7474:
 15948  0B4E  0020               	movlb	0	; select bank0
 15949  0B4F  084D               	movf	cmd_trc@maxReadings+1,w
 15950  0B50  3A80               	xorlw	128
 15951  0B51  00B9               	movwf	??_cmd_trc
 15952  0B52  084F               	movf	cmd_trc@n+1,w
 15953  0B53  3A80               	xorlw	128
 15954  0B54  0239               	subwf	??_cmd_trc,w
 15955  0B55  1D03               	skipz
 15956  0B56  2B59               	goto	u9155
 15957  0B57  084E               	movf	cmd_trc@n,w
 15958  0B58  024C               	subwf	cmd_trc@maxReadings,w
 15959  0B59                     u9155:
 15960  0B59  1803               	skipnc
 15961  0B5A  2B5C               	goto	u9151
 15962  0B5B  2B5D               	goto	u9150
 15963  0B5C                     u9151:
 15964  0B5C  2B62               	goto	l7480
 15965  0B5D                     u9150:
 15966  0B5D                     l7476:
 15967                           
 15968                           ;main.c: 1017: sendERRORMessage((uint8_t)0XCB);
 15969  0B5D  30CB               	movlw	203
 15970  0B5E  3190  2084  318B   	fcall	_sendERRORMessage
 15971  0B61  2C04               	goto	l1515
 15972  0B62                     l7480:
 15973                           
 15974                           ;main.c: 1019: };main.c: 1020: uint8_t buffInit[3];;main.c: 1021: buffInit[0] = (uint8_t
      +                          )0xFD;
 15975  0B62  30FD               	movlw	253
 15976  0B63  0020               	movlb	0	; select bank0
 15977  0B64  00B9               	movwf	??_cmd_trc
 15978  0B65  0839               	movf	??_cmd_trc,w
 15979  0B66  00C4               	movwf	cmd_trc@buffInit
 15980                           
 15981                           ;main.c: 1022: buffInit[1] = (uint8_t)0XCB;
 15982  0B67  30CB               	movlw	203
 15983  0B68  00B9               	movwf	??_cmd_trc
 15984  0B69  0839               	movf	??_cmd_trc,w
 15985  0B6A  00C5               	movwf	cmd_trc@buffInit+1
 15986                           
 15987                           ;main.c: 1023: buffInit[2] = (uint8_t)n;
 15988  0B6B  084E               	movf	cmd_trc@n,w
 15989  0B6C  00B9               	movwf	??_cmd_trc
 15990  0B6D  0839               	movf	??_cmd_trc,w
 15991  0B6E  00C6               	movwf	cmd_trc@buffInit+2
 15992  0B6F                     l7482:
 15993                           
 15994                           ;main.c: 1024: sendMessage(3,buffInit);
 15995  0B6F  3003               	movlw	3
 15996  0B70  00AA               	movwf	sendMessage@num
 15997  0B71  3000               	movlw	0
 15998  0B72  00AB               	movwf	sendMessage@num+1
 15999  0B73  3044               	movlw	(low (cmd_trc@buffInit| 0))& (0+255)
 16000  0B74  00B9               	movwf	??_cmd_trc
 16001  0B75  0839               	movf	??_cmd_trc,w
 16002  0B76  00AC               	movwf	sendMessage@buffer
 16003  0B77  3191  21A3  318B   	fcall	_sendMessage
 16004  0B7A                     l7484:
 16005  0B7A                     l7486:
 16006                           
 16007                           ;main.c: 1029: for(i = 0; i < n; i++){
 16008  0B7A  0020               	movlb	0	; select bank0
 16009  0B7B  01C7               	clrf	cmd_trc@i
 16010  0B7C  01C8               	clrf	cmd_trc@i+1
 16011  0B7D  2BE1               	goto	l7512
 16012  0B7E                     l7488:
 16013                           
 16014                           ;main.c: 1030: for(j = 0; j < 5; j++){
 16015  0B7E  0020               	movlb	0	; select bank0
 16016  0B7F  01D0               	clrf	cmd_trc@j
 16017  0B80                     l7494:
 16018                           
 16019                           ;main.c: 1031: address = (iread * 0x5) + 0x7012 + j;
 16020  0B80  0850               	movf	cmd_trc@j,w
 16021  0B81  00B9               	movwf	??_cmd_trc
 16022  0B82  01BA               	clrf	??_cmd_trc+1
 16023  0B83  087B               	movf	_iread,w
 16024  0B84  00BB               	movwf	??_cmd_trc+2
 16025  0B85  01BC               	clrf	??_cmd_trc+3
 16026  0B86  083B               	movf	??_cmd_trc+2,w
 16027  0B87  00A7               	movwf	___wmul@multiplier
 16028  0B88  083C               	movf	??_cmd_trc+3,w
 16029  0B89  00A8               	movwf	___wmul@multiplier+1
 16030  0B8A  3005               	movlw	5
 16031  0B8B  00A9               	movwf	___wmul@multiplicand
 16032  0B8C  3000               	movlw	0
 16033  0B8D  00AA               	movwf	___wmul@multiplicand+1
 16034  0B8E  3190  20FE  318B   	fcall	___wmul
 16035  0B91  0020               	movlb	0	; select bank0
 16036  0B92  0839               	movf	??_cmd_trc,w
 16037  0B93  0727               	addwf	?___wmul,w
 16038  0B94  00BD               	movwf	??_cmd_trc+4
 16039  0B95  083A               	movf	??_cmd_trc+1,w
 16040  0B96  3D28               	addwfc	?___wmul+1,w
 16041  0B97  00BE               	movwf	??_cmd_trc+5
 16042  0B98  083D               	movf	??_cmd_trc+4,w
 16043  0B99  3E12               	addlw	18
 16044  0B9A  00C9               	movwf	cmd_trc@address
 16045  0B9B  3070               	movlw	112
 16046  0B9C  3D3E               	addwfc	??_cmd_trc+5,w
 16047  0B9D  00CA               	movwf	cmd_trc@address+1
 16048  0B9E                     l7496:
 16049                           
 16050                           ;main.c: 1032: buffData[j] = DATAEE_ReadByte(address);
 16051  0B9E  084A               	movf	cmd_trc@address+1,w
 16052  0B9F  00AE               	movwf	DATAEE_ReadByte@bAdd+1
 16053  0BA0  0849               	movf	cmd_trc@address,w
 16054  0BA1  00AD               	movwf	DATAEE_ReadByte@bAdd
 16055  0BA2  319F  2787  318B   	fcall	_DATAEE_ReadByte
 16056  0BA5  0020               	movlb	0	; select bank0
 16057  0BA6  00B9               	movwf	??_cmd_trc
 16058  0BA7  0850               	movf	cmd_trc@j,w
 16059  0BA8  3E3F               	addlw	(low (cmd_trc@buffData| 0))& (0+255)
 16060  0BA9  0086               	movwf	6
 16061  0BAA  0187               	clrf	7
 16062  0BAB  0839               	movf	??_cmd_trc,w
 16063  0BAC  0081               	movwf	1
 16064  0BAD                     l7498:
 16065  0BAD  3001               	movlw	1
 16066  0BAE  00B9               	movwf	??_cmd_trc
 16067  0BAF  0839               	movf	??_cmd_trc,w
 16068  0BB0  07D0               	addwf	cmd_trc@j,f
 16069  0BB1                     l7500:
 16070  0BB1  3005               	movlw	5
 16071  0BB2  0250               	subwf	cmd_trc@j,w
 16072  0BB3  1C03               	skipc
 16073  0BB4  2BB6               	goto	u9161
 16074  0BB5  2BB7               	goto	u9160
 16075  0BB6                     u9161:
 16076  0BB6  2B80               	goto	l7494
 16077  0BB7                     u9160:
 16078  0BB7                     l7502:
 16079                           
 16080                           ;main.c: 1033: };main.c: 1034: sendMessage(5,buffData);
 16081  0BB7  3005               	movlw	5
 16082  0BB8  00AA               	movwf	sendMessage@num
 16083  0BB9  3000               	movlw	0
 16084  0BBA  00AB               	movwf	sendMessage@num+1
 16085  0BBB  303F               	movlw	(low (cmd_trc@buffData| 0))& (0+255)
 16086  0BBC  00B9               	movwf	??_cmd_trc
 16087  0BBD  0839               	movf	??_cmd_trc,w
 16088  0BBE  00AC               	movwf	sendMessage@buffer
 16089  0BBF  3191  21A3  318B   	fcall	_sendMessage
 16090  0BC2                     l7504:
 16091                           
 16092                           ;main.c: 1035: iread++;
 16093  0BC2  3001               	movlw	1
 16094  0BC3  0020               	movlb	0	; select bank0
 16095  0BC4  00B9               	movwf	??_cmd_trc
 16096  0BC5  0839               	movf	??_cmd_trc,w
 16097  0BC6  07FB               	addwf	_iread,f
 16098  0BC7                     l7506:
 16099                           
 16100                           ;main.c: 1036: if(iread>NREG-1){
 16101  0BC7  087D               	movf	_NREG,w
 16102  0BC8  3EFF               	addlw	255
 16103  0BC9  00B9               	movwf	??_cmd_trc
 16104  0BCA  30FF               	movlw	255
 16105  0BCB  1803               	skipnc
 16106  0BCC  3000               	movlw	0
 16107  0BCD  00BA               	movwf	??_cmd_trc+1
 16108  0BCE  083A               	movf	??_cmd_trc+1,w
 16109  0BCF  3A80               	xorlw	128
 16110  0BD0  00BB               	movwf	??_cmd_trc+2
 16111  0BD1  3080               	movlw	128
 16112  0BD2  023B               	subwf	??_cmd_trc+2,w
 16113  0BD3  1D03               	skipz
 16114  0BD4  2BD7               	goto	u9175
 16115  0BD5  087B               	movf	_iread,w
 16116  0BD6  0239               	subwf	??_cmd_trc,w
 16117  0BD7                     u9175:
 16118  0BD7  1803               	skipnc
 16119  0BD8  2BDA               	goto	u9171
 16120  0BD9  2BDB               	goto	u9170
 16121  0BDA                     u9171:
 16122  0BDA  2BDC               	goto	l7510
 16123  0BDB                     u9170:
 16124  0BDB                     l7508:
 16125                           
 16126                           ;main.c: 1037: iread=0;
 16127  0BDB  01FB               	clrf	_iread
 16128  0BDC                     l7510:
 16129  0BDC  3001               	movlw	1
 16130  0BDD  0020               	movlb	0	; select bank0
 16131  0BDE  07C7               	addwf	cmd_trc@i,f
 16132  0BDF  3000               	movlw	0
 16133  0BE0  3DC8               	addwfc	cmd_trc@i+1,f
 16134  0BE1                     l7512:
 16135  0BE1  0848               	movf	cmd_trc@i+1,w
 16136  0BE2  3A80               	xorlw	128
 16137  0BE3  00B9               	movwf	??_cmd_trc
 16138  0BE4  084F               	movf	cmd_trc@n+1,w
 16139  0BE5  3A80               	xorlw	128
 16140  0BE6  0239               	subwf	??_cmd_trc,w
 16141  0BE7  1D03               	skipz
 16142  0BE8  2BEB               	goto	u9185
 16143  0BE9  084E               	movf	cmd_trc@n,w
 16144  0BEA  0247               	subwf	cmd_trc@i,w
 16145  0BEB                     u9185:
 16146  0BEB  1C03               	skipc
 16147  0BEC  2BEE               	goto	u9181
 16148  0BED  2BEF               	goto	u9180
 16149  0BEE                     u9181:
 16150  0BEE  2B7E               	goto	l7488
 16151  0BEF                     u9180:
 16152  0BEF                     l7514:
 16153                           
 16154                           ;main.c: 1038: };main.c: 1039: };main.c: 1040: uint8_t buffEOM[1];;main.c: 1041: buffEOM
      +                          [0] = (uint8_t)0xFE;
 16155  0BEF  30FE               	movlw	254
 16156  0BF0  0020               	movlb	0	; select bank0
 16157  0BF1  00B9               	movwf	??_cmd_trc
 16158  0BF2  0839               	movf	??_cmd_trc,w
 16159  0BF3  00CB               	movwf	cmd_trc@buffEOM
 16160  0BF4                     l7516:
 16161                           
 16162                           ;main.c: 1042: sendMessage(1,buffEOM);
 16163  0BF4  3001               	movlw	1
 16164  0BF5  00AA               	movwf	sendMessage@num
 16165  0BF6  3000               	movlw	0
 16166  0BF7  00AB               	movwf	sendMessage@num+1
 16167  0BF8  304B               	movlw	(low (cmd_trc@buffEOM| 0))& (0+255)
 16168  0BF9  00B9               	movwf	??_cmd_trc
 16169  0BFA  0839               	movf	??_cmd_trc,w
 16170  0BFB  00AC               	movwf	sendMessage@buffer
 16171  0BFC  3191  21A3  318B   	fcall	_sendMessage
 16172                           
 16173                           ;main.c: 1043: } else{
 16174  0BFF  2C04               	goto	l1515
 16175  0C00                     l7518:
 16176                           
 16177                           ;main.c: 1044: sendERRORMessage((uint8_t)0XCB);
 16178  0C00  30CB               	movlw	203
 16179  0C01  3190  2084  318B   	fcall	_sendERRORMessage
 16180  0C04                     l1515:
 16181  0C04  0008               	return
 16182  0C05                     __end_of_cmd_trc:
 16183                           
 16184                           	psect	text34
 16185  125A                     __ptext34:	
 16186 ;; *************** function _cmd_ir *****************
 16187 ;; Defined at:
 16188 ;;		line 993 in file "main.c"
 16189 ;; Parameters:    Size  Location     Type
 16190 ;;  num             2   22[BANK0 ] int 
 16191 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16192 ;;		 -> main@buff(20), 
 16193 ;; Auto vars:     Size  Location     Type
 16194 ;;  buff            7   26[BANK0 ] unsigned char [7]
 16195 ;; Return value:  Size  Location     Type
 16196 ;;                  1    wreg      void 
 16197 ;; Registers used:
 16198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16199 ;; Tracked objects:
 16200 ;;		On entry : 0/0
 16201 ;;		On exit  : 0/0
 16202 ;;		Unchanged: 0/0
 16203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16204 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16205 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;Total ram usage:       11 bytes
 16209 ;; Hardware stack levels used:    1
 16210 ;; Hardware stack levels required when called:    7
 16211 ;; This function calls:
 16212 ;;		_sendMessage
 16213 ;; This function is called by:
 16214 ;;		_main
 16215 ;; This function uses a non-reentrant model
 16216 ;;
 16217                           
 16218                           
 16219                           ;psect for function _cmd_ir
 16220  125A                     _cmd_ir:
 16221  125A                     l7456:	
 16222                           ;incstack = 0
 16223                           ; Regs used in _cmd_ir: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16224                           
 16225                           
 16226                           ;main.c: 994: uint8_t buff[7];;main.c: 995: buff[0] = (uint8_t)0xFD;
 16227  125A  30FD               	movlw	253
 16228  125B  0020               	movlb	0	; select bank0
 16229  125C  00B9               	movwf	??_cmd_ir
 16230  125D  0839               	movf	??_cmd_ir,w
 16231  125E  00BA               	movwf	cmd_ir@buff
 16232                           
 16233                           ;main.c: 996: buff[1] = (uint8_t)0XCA;
 16234  125F  30CA               	movlw	202
 16235  1260  00B9               	movwf	??_cmd_ir
 16236  1261  0839               	movf	??_cmd_ir,w
 16237  1262  00BB               	movwf	cmd_ir@buff+1
 16238                           
 16239                           ;main.c: 997: buff[2] = NREG;
 16240  1263  087D               	movf	_NREG,w
 16241  1264  00B9               	movwf	??_cmd_ir
 16242  1265  0839               	movf	??_cmd_ir,w
 16243  1266  00BC               	movwf	cmd_ir@buff+2
 16244                           
 16245                           ;main.c: 998: buff[3] = nr;
 16246  1267  0879               	movf	_nr,w
 16247  1268  00B9               	movwf	??_cmd_ir
 16248  1269  0839               	movf	??_cmd_ir,w
 16249  126A  00BD               	movwf	cmd_ir@buff+3
 16250                           
 16251                           ;main.c: 999: buff[4] = iread;
 16252  126B  087B               	movf	_iread,w
 16253  126C  00B9               	movwf	??_cmd_ir
 16254  126D  0839               	movf	??_cmd_ir,w
 16255  126E  00BE               	movwf	cmd_ir@buff+4
 16256                           
 16257                           ;main.c: 1000: buff[5] = iwrite;
 16258  126F  087A               	movf	_iwrite,w
 16259  1270  00B9               	movwf	??_cmd_ir
 16260  1271  0839               	movf	??_cmd_ir,w
 16261  1272  00BF               	movwf	cmd_ir@buff+5
 16262                           
 16263                           ;main.c: 1001: buff[6] = (uint8_t)0xFE;
 16264  1273  30FE               	movlw	254
 16265  1274  00B9               	movwf	??_cmd_ir
 16266  1275  0839               	movf	??_cmd_ir,w
 16267  1276  00C0               	movwf	cmd_ir@buff+6
 16268  1277                     l7458:
 16269                           
 16270                           ;main.c: 1003: sendMessage(7,buff);
 16271  1277  3007               	movlw	7
 16272  1278  00AA               	movwf	sendMessage@num
 16273  1279  3000               	movlw	0
 16274  127A  00AB               	movwf	sendMessage@num+1
 16275  127B  303A               	movlw	(low (cmd_ir@buff| 0))& (0+255)
 16276  127C  00B9               	movwf	??_cmd_ir
 16277  127D  0839               	movf	??_cmd_ir,w
 16278  127E  00AC               	movwf	sendMessage@buffer
 16279  127F  3191  21A3  3192   	fcall	_sendMessage
 16280  1282                     l1506:
 16281  1282  0008               	return
 16282  1283                     __end_of_cmd_ir:
 16283                           
 16284                           	psect	text35
 16285  13E2                     __ptext35:	
 16286 ;; *************** function _cmd_aa *****************
 16287 ;; Defined at:
 16288 ;;		line 981 in file "main.c"
 16289 ;; Parameters:    Size  Location     Type
 16290 ;;  num             2   22[BANK0 ] int 
 16291 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16292 ;;		 -> main@buff(20), 
 16293 ;; Auto vars:     Size  Location     Type
 16294 ;;		None
 16295 ;; Return value:  Size  Location     Type
 16296 ;;                  1    wreg      void 
 16297 ;; Registers used:
 16298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16299 ;; Tracked objects:
 16300 ;;		On entry : 0/0
 16301 ;;		On exit  : 0/0
 16302 ;;		Unchanged: 0/0
 16303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16304 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16307 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16308 ;;Total ram usage:        4 bytes
 16309 ;; Hardware stack levels used:    1
 16310 ;; Hardware stack levels required when called:    8
 16311 ;; This function calls:
 16312 ;;		_sendERRORMessage
 16313 ;;		_sendOKMessage
 16314 ;; This function is called by:
 16315 ;;		_main
 16316 ;; This function uses a non-reentrant model
 16317 ;;
 16318                           
 16319                           
 16320                           ;psect for function _cmd_aa
 16321  13E2                     _cmd_aa:
 16322  13E2                     l7438:	
 16323                           ;incstack = 0
 16324                           ; Regs used in _cmd_aa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16325                           
 16326                           
 16327                           ;main.c: 982: if(buffer[2] == 0 && num == 4){
 16328  13E2  0020               	movlb	0	; select bank0
 16329  13E3  0838               	movf	cmd_aa@buffer,w
 16330  13E4  3E02               	addlw	2
 16331  13E5  0086               	movwf	6
 16332  13E6  3001               	movlw	1	; select bank2/3
 16333  13E7  0087               	movwf	7
 16334  13E8  0801               	movf	1,w
 16335  13E9  1D03               	btfss	3,2
 16336  13EA  2BEC               	goto	u9061
 16337  13EB  2BED               	goto	u9060
 16338  13EC                     u9061:
 16339  13EC  2BFD               	goto	l7446
 16340  13ED                     u9060:
 16341  13ED                     l7440:
 16342  13ED  3004               	movlw	4
 16343  13EE  0636               	xorwf	cmd_aa@num,w
 16344  13EF  0437               	iorwf	cmd_aa@num+1,w
 16345  13F0  1D03               	btfss	3,2
 16346  13F1  2BF3               	goto	u9071
 16347  13F2  2BF4               	goto	u9070
 16348  13F3                     u9071:
 16349  13F3  2BFD               	goto	l7446
 16350  13F4                     u9070:
 16351  13F4                     l7442:
 16352                           
 16353                           ;main.c: 983: ALAF = 'a';
 16354  13F4  3061               	movlw	97
 16355  13F5  00B9               	movwf	??_cmd_aa
 16356  13F6  0839               	movf	??_cmd_aa,w
 16357  13F7  00FC               	movwf	_ALAF
 16358  13F8                     l7444:
 16359                           
 16360                           ;main.c: 984: sendOKMessage((uint8_t)0XC9);
 16361  13F8  30C9               	movlw	201
 16362  13F9  3190  2032  3193   	fcall	_sendOKMessage
 16363                           
 16364                           ;main.c: 985: } else if(buffer[2] == 1 && num == 4){
 16365  13FC  2C1B               	goto	l1503
 16366  13FD                     l7446:
 16367  13FD  0838               	movf	cmd_aa@buffer,w
 16368  13FE  3E02               	addlw	2
 16369  13FF  0086               	movwf	6
 16370  1400  3001               	movlw	1	; select bank2/3
 16371  1401  0087               	movwf	7
 16372  1402  0301               	decf	1,w
 16373  1403  1D03               	btfss	3,2
 16374  1404  2C06               	goto	u9081
 16375  1405  2C07               	goto	u9080
 16376  1406                     u9081:
 16377  1406  2C17               	goto	l7454
 16378  1407                     u9080:
 16379  1407                     l7448:
 16380  1407  3004               	movlw	4
 16381  1408  0636               	xorwf	cmd_aa@num,w
 16382  1409  0437               	iorwf	cmd_aa@num+1,w
 16383  140A  1D03               	btfss	3,2
 16384  140B  2C0D               	goto	u9091
 16385  140C  2C0E               	goto	u9090
 16386  140D                     u9091:
 16387  140D  2C17               	goto	l7454
 16388  140E                     u9090:
 16389  140E                     l7450:
 16390                           
 16391                           ;main.c: 986: ALAF = 'A';
 16392  140E  3041               	movlw	65
 16393  140F  00B9               	movwf	??_cmd_aa
 16394  1410  0839               	movf	??_cmd_aa,w
 16395  1411  00FC               	movwf	_ALAF
 16396  1412                     l7452:
 16397                           
 16398                           ;main.c: 987: sendOKMessage((uint8_t)0XC9);
 16399  1412  30C9               	movlw	201
 16400  1413  3190  2032  3193   	fcall	_sendOKMessage
 16401                           
 16402                           ;main.c: 988: } else {
 16403  1416  2C1B               	goto	l1503
 16404  1417                     l7454:
 16405                           
 16406                           ;main.c: 989: sendERRORMessage((uint8_t)0XC9);
 16407  1417  30C9               	movlw	201
 16408  1418  3190  2084  3193   	fcall	_sendERRORMessage
 16409  141B                     l1503:
 16410  141B  0008               	return
 16411  141C                     __end_of_cmd_aa:
 16412                           
 16413                           	psect	text36
 16414  1646                     __ptext36:	
 16415 ;; *************** function _cmd_dtl *****************
 16416 ;; Defined at:
 16417 ;;		line 969 in file "main.c"
 16418 ;; Parameters:    Size  Location     Type
 16419 ;;  num             2   22[BANK0 ] int 
 16420 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16421 ;;		 -> main@buff(20), 
 16422 ;; Auto vars:     Size  Location     Type
 16423 ;;  lumAux          2   29[BANK0 ] int 
 16424 ;;  tempAux         2   27[BANK0 ] int 
 16425 ;; Return value:  Size  Location     Type
 16426 ;;                  1    wreg      void 
 16427 ;; Registers used:
 16428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16429 ;; Tracked objects:
 16430 ;;		On entry : 0/0
 16431 ;;		On exit  : 0/0
 16432 ;;		Unchanged: 0/0
 16433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16434 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16435 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16437 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16438 ;;Total ram usage:        9 bytes
 16439 ;; Hardware stack levels used:    1
 16440 ;; Hardware stack levels required when called:    8
 16441 ;; This function calls:
 16442 ;;		_sendERRORMessage
 16443 ;;		_sendOKMessage
 16444 ;; This function is called by:
 16445 ;;		_main
 16446 ;; This function uses a non-reentrant model
 16447 ;;
 16448                           
 16449                           
 16450                           ;psect for function _cmd_dtl
 16451  1646                     _cmd_dtl:
 16452  1646                     l7420:	
 16453                           ;incstack = 0
 16454                           ; Regs used in _cmd_dtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16455                           
 16456                           
 16457                           ;main.c: 970: int tempAux = buffer[2];
 16458  1646  0020               	movlb	0	; select bank0
 16459  1647  0838               	movf	cmd_dtl@buffer,w
 16460  1648  3E02               	addlw	2
 16461  1649  0086               	movwf	6
 16462  164A  3001               	movlw	1	; select bank2/3
 16463  164B  0087               	movwf	7
 16464  164C  0801               	movf	1,w
 16465  164D  00B9               	movwf	??_cmd_dtl
 16466  164E  01BA               	clrf	??_cmd_dtl+1
 16467  164F  0839               	movf	??_cmd_dtl,w
 16468  1650  00BB               	movwf	cmd_dtl@tempAux
 16469  1651  083A               	movf	??_cmd_dtl+1,w
 16470  1652  00BC               	movwf	cmd_dtl@tempAux+1
 16471                           
 16472                           ;main.c: 971: int lumAux = buffer[3];
 16473  1653  0838               	movf	cmd_dtl@buffer,w
 16474  1654  3E03               	addlw	3
 16475  1655  0086               	movwf	6
 16476  1656  3001               	movlw	1	; select bank2/3
 16477  1657  0087               	movwf	7
 16478  1658  0801               	movf	1,w
 16479  1659  00B9               	movwf	??_cmd_dtl
 16480  165A  01BA               	clrf	??_cmd_dtl+1
 16481  165B  0839               	movf	??_cmd_dtl,w
 16482  165C  00BD               	movwf	cmd_dtl@lumAux
 16483  165D  083A               	movf	??_cmd_dtl+1,w
 16484  165E  00BE               	movwf	cmd_dtl@lumAux+1
 16485  165F                     l7422:
 16486                           
 16487                           ;main.c: 972: if((tempAux >= 0 && tempAux < 50) && (lumAux >= 0 && lumAux < 8) && num ==
      +                           5){
 16488  165F  1BBC               	btfsc	cmd_dtl@tempAux+1,7
 16489  1660  2E62               	goto	u9011
 16490  1661  2E63               	goto	u9010
 16491  1662                     u9011:
 16492  1662  2EA0               	goto	l7436
 16493  1663                     u9010:
 16494  1663                     l7424:
 16495  1663  083C               	movf	cmd_dtl@tempAux+1,w
 16496  1664  3A80               	xorlw	128
 16497  1665  00B9               	movwf	??_cmd_dtl
 16498  1666  3080               	movlw	128
 16499  1667  0239               	subwf	??_cmd_dtl,w
 16500  1668  1D03               	skipz
 16501  1669  2E6C               	goto	u9025
 16502  166A  3032               	movlw	50
 16503  166B  023B               	subwf	cmd_dtl@tempAux,w
 16504  166C                     u9025:
 16505  166C  1803               	skipnc
 16506  166D  2E6F               	goto	u9021
 16507  166E  2E70               	goto	u9020
 16508  166F                     u9021:
 16509  166F  2EA0               	goto	l7436
 16510  1670                     u9020:
 16511  1670                     l7426:
 16512  1670  0020               	movlb	0	; select bank0
 16513  1671  1BBE               	btfsc	cmd_dtl@lumAux+1,7
 16514  1672  2E74               	goto	u9031
 16515  1673  2E75               	goto	u9030
 16516  1674                     u9031:
 16517  1674  2EA0               	goto	l7436
 16518  1675                     u9030:
 16519  1675                     l7428:
 16520  1675  083E               	movf	cmd_dtl@lumAux+1,w
 16521  1676  3A80               	xorlw	128
 16522  1677  00B9               	movwf	??_cmd_dtl
 16523  1678  3080               	movlw	128
 16524  1679  0239               	subwf	??_cmd_dtl,w
 16525  167A  1D03               	skipz
 16526  167B  2E7E               	goto	u9045
 16527  167C  3008               	movlw	8
 16528  167D  023D               	subwf	cmd_dtl@lumAux,w
 16529  167E                     u9045:
 16530  167E  1803               	skipnc
 16531  167F  2E81               	goto	u9041
 16532  1680  2E82               	goto	u9040
 16533  1681                     u9041:
 16534  1681  2EA0               	goto	l7436
 16535  1682                     u9040:
 16536  1682                     l7430:
 16537  1682  3005               	movlw	5
 16538  1683  0020               	movlb	0	; select bank0
 16539  1684  0636               	xorwf	cmd_dtl@num,w
 16540  1685  0437               	iorwf	cmd_dtl@num+1,w
 16541  1686  1D03               	btfss	3,2
 16542  1687  2E89               	goto	u9051
 16543  1688  2E8A               	goto	u9050
 16544  1689                     u9051:
 16545  1689  2EA0               	goto	l7436
 16546  168A                     u9050:
 16547  168A                     l7432:
 16548                           
 16549                           ;main.c: 973: tempAlarm.alarmTemp = buffer[2];
 16550  168A  0838               	movf	cmd_dtl@buffer,w
 16551  168B  0086               	movwf	6
 16552  168C  3001               	movlw	1	; select bank2/3
 16553  168D  0087               	movwf	7
 16554  168E  3001               	movlw	1	; select bank2/3
 16555  168F  3F42               	moviw [2]fsr1
 16556  1690  0021               	movlb	1	; select bank1
 16557  1691  00A7               	movwf	_tempAlarm^(0+128)
 16558                           
 16559                           ;main.c: 974: lumAlarm.alarmLum = buffer[3];
 16560  1692  0020               	movlb	0	; select bank0
 16561  1693  0838               	movf	cmd_dtl@buffer,w
 16562  1694  0086               	movwf	6
 16563  1695  3001               	movlw	1	; select bank2/3
 16564  1696  0087               	movwf	7
 16565  1697  3001               	movlw	1	; select bank2/3
 16566  1698  3F43               	moviw [3]fsr1
 16567  1699  0021               	movlb	1	; select bank1
 16568  169A  00A4               	movwf	_lumAlarm^(0+128)
 16569  169B                     l7434:
 16570                           
 16571                           ;main.c: 975: sendOKMessage((uint8_t)0XC8);
 16572  169B  30C8               	movlw	200
 16573  169C  3190  2032  3196   	fcall	_sendOKMessage
 16574                           
 16575                           ;main.c: 976: } else {
 16576  169F  2EA4               	goto	l1496
 16577  16A0                     l7436:
 16578                           
 16579                           ;main.c: 977: sendERRORMessage((uint8_t)0XC8);
 16580  16A0  30C8               	movlw	200
 16581  16A1  3190  2084  3196   	fcall	_sendERRORMessage
 16582  16A4                     l1496:
 16583  16A4  0008               	return
 16584  16A5                     __end_of_cmd_dtl:
 16585                           
 16586                           	psect	text37
 16587  0806                     __ptext37:	
 16588 ;; *************** function _cmd_dac *****************
 16589 ;; Defined at:
 16590 ;;		line 955 in file "main.c"
 16591 ;; Parameters:    Size  Location     Type
 16592 ;;  num             2   22[BANK0 ] int 
 16593 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16594 ;;		 -> main@buff(20), 
 16595 ;; Auto vars:     Size  Location     Type
 16596 ;;  s               2   31[BANK0 ] int 
 16597 ;;  m               2   29[BANK0 ] int 
 16598 ;;  h               2   27[BANK0 ] int 
 16599 ;; Return value:  Size  Location     Type
 16600 ;;                  1    wreg      void 
 16601 ;; Registers used:
 16602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16603 ;; Tracked objects:
 16604 ;;		On entry : 0/0
 16605 ;;		On exit  : 0/0
 16606 ;;		Unchanged: 0/0
 16607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16608 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;Total ram usage:       11 bytes
 16613 ;; Hardware stack levels used:    1
 16614 ;; Hardware stack levels required when called:    8
 16615 ;; This function calls:
 16616 ;;		_sendERRORMessage
 16617 ;;		_sendOKMessage
 16618 ;; This function is called by:
 16619 ;;		_main
 16620 ;; This function uses a non-reentrant model
 16621 ;;
 16622                           
 16623                           
 16624                           ;psect for function _cmd_dac
 16625  0806                     _cmd_dac:
 16626  0806                     l7398:	
 16627                           ;incstack = 0
 16628                           ; Regs used in _cmd_dac: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16629                           
 16630                           
 16631                           ;main.c: 956: int h = buffer[2];
 16632  0806  0020               	movlb	0	; select bank0
 16633  0807  0838               	movf	cmd_dac@buffer,w
 16634  0808  3E02               	addlw	2
 16635  0809  0086               	movwf	6
 16636  080A  3001               	movlw	1	; select bank2/3
 16637  080B  0087               	movwf	7
 16638  080C  0801               	movf	1,w
 16639  080D  00B9               	movwf	??_cmd_dac
 16640  080E  01BA               	clrf	??_cmd_dac+1
 16641  080F  0839               	movf	??_cmd_dac,w
 16642  0810  00BB               	movwf	cmd_dac@h
 16643  0811  083A               	movf	??_cmd_dac+1,w
 16644  0812  00BC               	movwf	cmd_dac@h+1
 16645                           
 16646                           ;main.c: 957: int m = buffer[3];
 16647  0813  0838               	movf	cmd_dac@buffer,w
 16648  0814  3E03               	addlw	3
 16649  0815  0086               	movwf	6
 16650  0816  3001               	movlw	1	; select bank2/3
 16651  0817  0087               	movwf	7
 16652  0818  0801               	movf	1,w
 16653  0819  00B9               	movwf	??_cmd_dac
 16654  081A  01BA               	clrf	??_cmd_dac+1
 16655  081B  0839               	movf	??_cmd_dac,w
 16656  081C  00BD               	movwf	cmd_dac@m
 16657  081D  083A               	movf	??_cmd_dac+1,w
 16658  081E  00BE               	movwf	cmd_dac@m+1
 16659                           
 16660                           ;main.c: 958: int s = buffer[4];
 16661  081F  0838               	movf	cmd_dac@buffer,w
 16662  0820  3E04               	addlw	4
 16663  0821  0086               	movwf	6
 16664  0822  3001               	movlw	1	; select bank2/3
 16665  0823  0087               	movwf	7
 16666  0824  0801               	movf	1,w
 16667  0825  00B9               	movwf	??_cmd_dac
 16668  0826  01BA               	clrf	??_cmd_dac+1
 16669  0827  0839               	movf	??_cmd_dac,w
 16670  0828  00BF               	movwf	cmd_dac@s
 16671  0829  083A               	movf	??_cmd_dac+1,w
 16672  082A  00C0               	movwf	cmd_dac@s+1
 16673  082B                     l7400:
 16674                           
 16675                           ;main.c: 959: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 16676  082B  1BBC               	btfsc	cmd_dac@h+1,7
 16677  082C  282E               	goto	u8941
 16678  082D  282F               	goto	u8940
 16679  082E                     u8941:
 16680  082E  287E               	goto	l7418
 16681  082F                     u8940:
 16682  082F                     l7402:
 16683  082F  083C               	movf	cmd_dac@h+1,w
 16684  0830  3A80               	xorlw	128
 16685  0831  00B9               	movwf	??_cmd_dac
 16686  0832  3080               	movlw	128
 16687  0833  0239               	subwf	??_cmd_dac,w
 16688  0834  1D03               	skipz
 16689  0835  2838               	goto	u8955
 16690  0836  3018               	movlw	24
 16691  0837  023B               	subwf	cmd_dac@h,w
 16692  0838                     u8955:
 16693  0838  1803               	skipnc
 16694  0839  283B               	goto	u8951
 16695  083A  283C               	goto	u8950
 16696  083B                     u8951:
 16697  083B  287E               	goto	l7418
 16698  083C                     u8950:
 16699  083C                     l7404:
 16700  083C  0020               	movlb	0	; select bank0
 16701  083D  1BBE               	btfsc	cmd_dac@m+1,7
 16702  083E  2840               	goto	u8961
 16703  083F  2841               	goto	u8960
 16704  0840                     u8961:
 16705  0840  287E               	goto	l7418
 16706  0841                     u8960:
 16707  0841                     l7406:
 16708  0841  083E               	movf	cmd_dac@m+1,w
 16709  0842  3A80               	xorlw	128
 16710  0843  00B9               	movwf	??_cmd_dac
 16711  0844  3080               	movlw	128
 16712  0845  0239               	subwf	??_cmd_dac,w
 16713  0846  1D03               	skipz
 16714  0847  284A               	goto	u8975
 16715  0848  303C               	movlw	60
 16716  0849  023D               	subwf	cmd_dac@m,w
 16717  084A                     u8975:
 16718  084A  1803               	skipnc
 16719  084B  284D               	goto	u8971
 16720  084C  284E               	goto	u8970
 16721  084D                     u8971:
 16722  084D  287E               	goto	l7418
 16723  084E                     u8970:
 16724  084E                     l7408:
 16725  084E  0020               	movlb	0	; select bank0
 16726  084F  1BC0               	btfsc	cmd_dac@s+1,7
 16727  0850  2852               	goto	u8981
 16728  0851  2853               	goto	u8980
 16729  0852                     u8981:
 16730  0852  287E               	goto	l7418
 16731  0853                     u8980:
 16732  0853                     l7410:
 16733  0853  0840               	movf	cmd_dac@s+1,w
 16734  0854  3A80               	xorlw	128
 16735  0855  00B9               	movwf	??_cmd_dac
 16736  0856  3080               	movlw	128
 16737  0857  0239               	subwf	??_cmd_dac,w
 16738  0858  1D03               	skipz
 16739  0859  285C               	goto	u8995
 16740  085A  303C               	movlw	60
 16741  085B  023F               	subwf	cmd_dac@s,w
 16742  085C                     u8995:
 16743  085C  1803               	skipnc
 16744  085D  285F               	goto	u8991
 16745  085E  2860               	goto	u8990
 16746  085F                     u8991:
 16747  085F  287E               	goto	l7418
 16748  0860                     u8990:
 16749  0860                     l7412:
 16750  0860  3006               	movlw	6
 16751  0861  0020               	movlb	0	; select bank0
 16752  0862  0636               	xorwf	cmd_dac@num,w
 16753  0863  0437               	iorwf	cmd_dac@num+1,w
 16754  0864  1D03               	btfss	3,2
 16755  0865  2867               	goto	u9001
 16756  0866  2868               	goto	u9000
 16757  0867                     u9001:
 16758  0867  287E               	goto	l7418
 16759  0868                     u9000:
 16760  0868                     l7414:
 16761                           
 16762                           ;main.c: 960: clkAlarm.alarmVal.h = h;
 16763  0868  083B               	movf	cmd_dac@h,w
 16764  0869  00B9               	movwf	??_cmd_dac
 16765  086A  0839               	movf	??_cmd_dac,w
 16766  086B  0021               	movlb	1	; select bank1
 16767  086C  00A0               	movwf	_clkAlarm^(0+128)
 16768                           
 16769                           ;main.c: 961: clkAlarm.alarmVal.m = m;
 16770  086D  0020               	movlb	0	; select bank0
 16771  086E  083D               	movf	cmd_dac@m,w
 16772  086F  00B9               	movwf	??_cmd_dac
 16773  0870  0839               	movf	??_cmd_dac,w
 16774  0871  0021               	movlb	1	; select bank1
 16775  0872  00A1               	movwf	(_clkAlarm^(0+128)+1)
 16776                           
 16777                           ;main.c: 962: clkAlarm.alarmVal.s = s;
 16778  0873  0020               	movlb	0	; select bank0
 16779  0874  083F               	movf	cmd_dac@s,w
 16780  0875  00B9               	movwf	??_cmd_dac
 16781  0876  0839               	movf	??_cmd_dac,w
 16782  0877  0021               	movlb	1	; select bank1
 16783  0878  00A2               	movwf	(_clkAlarm^(0+128)+2)
 16784  0879                     l7416:
 16785                           
 16786                           ;main.c: 963: sendOKMessage((uint8_t)0XC7);
 16787  0879  30C7               	movlw	199
 16788  087A  3190  2032  3188   	fcall	_sendOKMessage
 16789                           
 16790                           ;main.c: 964: } else {
 16791  087D  2882               	goto	l1491
 16792  087E                     l7418:
 16793                           
 16794                           ;main.c: 965: sendERRORMessage((uint8_t)0XC7);
 16795  087E  30C7               	movlw	199
 16796  087F  3190  2084  3188   	fcall	_sendERRORMessage
 16797  0882                     l1491:
 16798  0882  0008               	return
 16799  0883                     __end_of_cmd_dac:
 16800                           
 16801                           	psect	text38
 16802  1459                     __ptext38:	
 16803 ;; *************** function _cmd_ra *****************
 16804 ;; Defined at:
 16805 ;;		line 940 in file "main.c"
 16806 ;; Parameters:    Size  Location     Type
 16807 ;;  num             2   22[BANK0 ] int 
 16808 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16809 ;;		 -> main@buff(20), 
 16810 ;; Auto vars:     Size  Location     Type
 16811 ;;  buff            9   26[BANK0 ] unsigned char [9]
 16812 ;; Return value:  Size  Location     Type
 16813 ;;                  1    wreg      void 
 16814 ;; Registers used:
 16815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16816 ;; Tracked objects:
 16817 ;;		On entry : 0/0
 16818 ;;		On exit  : 0/0
 16819 ;;		Unchanged: 0/0
 16820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16821 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16822 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16823 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16824 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16825 ;;Total ram usage:       13 bytes
 16826 ;; Hardware stack levels used:    1
 16827 ;; Hardware stack levels required when called:    7
 16828 ;; This function calls:
 16829 ;;		_sendMessage
 16830 ;; This function is called by:
 16831 ;;		_main
 16832 ;; This function uses a non-reentrant model
 16833 ;;
 16834                           
 16835                           
 16836                           ;psect for function _cmd_ra
 16837  1459                     _cmd_ra:
 16838  1459                     l7390:	
 16839                           ;incstack = 0
 16840                           ; Regs used in _cmd_ra: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16841                           
 16842                           
 16843                           ;main.c: 941: uint8_t buff[9];;main.c: 942: buff[0] = (uint8_t)0xFD;
 16844  1459  30FD               	movlw	253
 16845  145A  0020               	movlb	0	; select bank0
 16846  145B  00B9               	movwf	??_cmd_ra
 16847  145C  0839               	movf	??_cmd_ra,w
 16848  145D  00BA               	movwf	cmd_ra@buff
 16849                           
 16850                           ;main.c: 943: buff[1] = (uint8_t)0XC6;
 16851  145E  30C6               	movlw	198
 16852  145F  00B9               	movwf	??_cmd_ra
 16853  1460  0839               	movf	??_cmd_ra,w
 16854  1461  00BB               	movwf	cmd_ra@buff+1
 16855                           
 16856                           ;main.c: 944: buff[2] = clkAlarm.alarmVal.h;
 16857  1462  0021               	movlb	1	; select bank1
 16858  1463  0820               	movf	_clkAlarm^(0+128),w
 16859  1464  0020               	movlb	0	; select bank0
 16860  1465  00B9               	movwf	??_cmd_ra
 16861  1466  0839               	movf	??_cmd_ra,w
 16862  1467  00BC               	movwf	cmd_ra@buff+2
 16863                           
 16864                           ;main.c: 945: buff[3] = clkAlarm.alarmVal.m;
 16865  1468  0021               	movlb	1	; select bank1
 16866  1469  0821               	movf	(_clkAlarm^(0+128)+1),w
 16867  146A  0020               	movlb	0	; select bank0
 16868  146B  00B9               	movwf	??_cmd_ra
 16869  146C  0839               	movf	??_cmd_ra,w
 16870  146D  00BD               	movwf	cmd_ra@buff+3
 16871                           
 16872                           ;main.c: 946: buff[4] = clkAlarm.alarmVal.s;
 16873  146E  0021               	movlb	1	; select bank1
 16874  146F  0822               	movf	(_clkAlarm^(0+128)+2),w
 16875  1470  0020               	movlb	0	; select bank0
 16876  1471  00B9               	movwf	??_cmd_ra
 16877  1472  0839               	movf	??_cmd_ra,w
 16878  1473  00BE               	movwf	cmd_ra@buff+4
 16879                           
 16880                           ;main.c: 947: buff[5] = tempAlarm.alarmTemp;
 16881  1474  0021               	movlb	1	; select bank1
 16882  1475  0827               	movf	_tempAlarm^(0+128),w
 16883  1476  0020               	movlb	0	; select bank0
 16884  1477  00B9               	movwf	??_cmd_ra
 16885  1478  0839               	movf	??_cmd_ra,w
 16886  1479  00BF               	movwf	cmd_ra@buff+5
 16887                           
 16888                           ;main.c: 948: buff[6] = lumAlarm.alarmLum;
 16889  147A  0021               	movlb	1	; select bank1
 16890  147B  0824               	movf	_lumAlarm^(0+128),w
 16891  147C  0020               	movlb	0	; select bank0
 16892  147D  00B9               	movwf	??_cmd_ra
 16893  147E  0839               	movf	??_cmd_ra,w
 16894  147F  00C0               	movwf	cmd_ra@buff+6
 16895  1480                     l7392:
 16896                           
 16897                           ;main.c: 949: buff[7] = ALAF == 'A' ? 1 : 0;
 16898  1480  3041               	movlw	65
 16899  1481  067C               	xorwf	_ALAF,w
 16900  1482  1903               	btfsc	3,2
 16901  1483  2C85               	goto	u8921
 16902  1484  2C87               	goto	u8920
 16903  1485                     u8921:
 16904  1485  3001               	movlw	1
 16905  1486  2C88               	goto	u8930
 16906  1487                     u8920:
 16907  1487  3000               	movlw	0
 16908  1488                     u8930:
 16909  1488  00B9               	movwf	??_cmd_ra
 16910  1489  0839               	movf	??_cmd_ra,w
 16911  148A  00C1               	movwf	cmd_ra@buff+7
 16912  148B                     l7394:
 16913                           
 16914                           ;main.c: 950: buff[8] = (uint8_t)0xFE;
 16915  148B  30FE               	movlw	254
 16916  148C  00B9               	movwf	??_cmd_ra
 16917  148D  0839               	movf	??_cmd_ra,w
 16918  148E  00C2               	movwf	cmd_ra@buff+8
 16919  148F                     l7396:
 16920                           
 16921                           ;main.c: 952: sendMessage(9,buff);
 16922  148F  3009               	movlw	9
 16923  1490  00AA               	movwf	sendMessage@num
 16924  1491  3000               	movlw	0
 16925  1492  00AB               	movwf	sendMessage@num+1
 16926  1493  303A               	movlw	(low (cmd_ra@buff| 0))& (0+255)
 16927  1494  00B9               	movwf	??_cmd_ra
 16928  1495  0839               	movf	??_cmd_ra,w
 16929  1496  00AC               	movwf	sendMessage@buffer
 16930  1497  3191  21A3  3194   	fcall	_sendMessage
 16931  149A                     l1486:
 16932  149A  0008               	return
 16933  149B                     __end_of_cmd_ra:
 16934                           
 16935                           	psect	text39
 16936  10A2                     __ptext39:	
 16937 ;; *************** function _cmd_mta *****************
 16938 ;; Defined at:
 16939 ;;		line 931 in file "main.c"
 16940 ;; Parameters:    Size  Location     Type
 16941 ;;  num             2   22[BANK0 ] int 
 16942 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16943 ;;		 -> main@buff(20), 
 16944 ;; Auto vars:     Size  Location     Type
 16945 ;;		None
 16946 ;; Return value:  Size  Location     Type
 16947 ;;                  1    wreg      void 
 16948 ;; Registers used:
 16949 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16950 ;; Tracked objects:
 16951 ;;		On entry : 0/0
 16952 ;;		On exit  : 0/0
 16953 ;;		Unchanged: 0/0
 16954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16955 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16958 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16959 ;;Total ram usage:        3 bytes
 16960 ;; Hardware stack levels used:    1
 16961 ;; Hardware stack levels required when called:    8
 16962 ;; This function calls:
 16963 ;;		_sendERRORMessage
 16964 ;;		_sendOKMessage
 16965 ;; This function is called by:
 16966 ;;		_main
 16967 ;; This function uses a non-reentrant model
 16968 ;;
 16969                           
 16970                           
 16971                           ;psect for function _cmd_mta
 16972  10A2                     _cmd_mta:
 16973  10A2                     l7382:	
 16974                           ;incstack = 0
 16975                           ; Regs used in _cmd_mta: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16976                           
 16977                           
 16978                           ;main.c: 932: if(buffer[2] < 0x3c){
 16979  10A2  0020               	movlb	0	; select bank0
 16980  10A3  0838               	movf	cmd_mta@buffer,w
 16981  10A4  3E02               	addlw	2
 16982  10A5  0086               	movwf	6
 16983  10A6  3001               	movlw	1	; select bank2/3
 16984  10A7  0087               	movwf	7
 16985  10A8  303C               	movlw	60
 16986  10A9  0201               	subwf	1,w
 16987  10AA  1803               	skipnc
 16988  10AB  28AD               	goto	u8911
 16989  10AC  28AE               	goto	u8910
 16990  10AD                     u8911:
 16991  10AD  28BB               	goto	l7388
 16992  10AE                     u8910:
 16993  10AE                     l7384:
 16994                           
 16995                           ;main.c: 933: TALA = buffer[2];
 16996  10AE  0838               	movf	cmd_mta@buffer,w
 16997  10AF  0086               	movwf	6
 16998  10B0  3001               	movlw	1	; select bank2/3
 16999  10B1  0087               	movwf	7
 17000  10B2  3001               	movlw	1	; select bank2/3
 17001  10B3  3F42               	moviw [2]fsr1
 17002  10B4  0021               	movlb	1	; select bank1
 17003  10B5  00D6               	movwf	_TALA^(0+128)
 17004  10B6                     l7386:
 17005                           
 17006                           ;main.c: 934: sendOKMessage((uint8_t)0XC5);
 17007  10B6  30C5               	movlw	197
 17008  10B7  3190  2032  3190   	fcall	_sendOKMessage
 17009                           
 17010                           ;main.c: 935: } else {
 17011  10BA  28BF               	goto	l1483
 17012  10BB                     l7388:
 17013                           
 17014                           ;main.c: 936: sendERRORMessage((uint8_t)0XC5);
 17015  10BB  30C5               	movlw	197
 17016  10BC  3190  2084  3190   	fcall	_sendERRORMessage
 17017  10BF                     l1483:
 17018  10BF  0008               	return
 17019  10C0                     __end_of_cmd_mta:
 17020                           
 17021                           	psect	text40
 17022  1018                     __ptext40:	
 17023 ;; *************** function _cmd_mmp *****************
 17024 ;; Defined at:
 17025 ;;		line 922 in file "main.c"
 17026 ;; Parameters:    Size  Location     Type
 17027 ;;  num             2   22[BANK0 ] int 
 17028 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17029 ;;		 -> main@buff(20), 
 17030 ;; Auto vars:     Size  Location     Type
 17031 ;;		None
 17032 ;; Return value:  Size  Location     Type
 17033 ;;                  1    wreg      void 
 17034 ;; Registers used:
 17035 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17036 ;; Tracked objects:
 17037 ;;		On entry : 0/0
 17038 ;;		On exit  : 0/0
 17039 ;;		Unchanged: 0/0
 17040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17041 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17044 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17045 ;;Total ram usage:        3 bytes
 17046 ;; Hardware stack levels used:    1
 17047 ;; Hardware stack levels required when called:    8
 17048 ;; This function calls:
 17049 ;;		_sendERRORMessage
 17050 ;;		_sendOKMessage
 17051 ;; This function is called by:
 17052 ;;		_main
 17053 ;; This function uses a non-reentrant model
 17054 ;;
 17055                           
 17056                           
 17057                           ;psect for function _cmd_mmp
 17058  1018                     _cmd_mmp:
 17059  1018                     l7374:	
 17060                           ;incstack = 0
 17061                           ; Regs used in _cmd_mmp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17062                           
 17063                           
 17064                           ;main.c: 923: if(num == 4){
 17065  1018  3004               	movlw	4
 17066  1019  0020               	movlb	0	; select bank0
 17067  101A  0636               	xorwf	cmd_mmp@num,w
 17068  101B  0437               	iorwf	cmd_mmp@num+1,w
 17069  101C  1D03               	btfss	3,2
 17070  101D  281F               	goto	u8901
 17071  101E  2820               	goto	u8900
 17072  101F                     u8901:
 17073  101F  282D               	goto	l7380
 17074  1020                     u8900:
 17075  1020                     l7376:
 17076                           
 17077                           ;main.c: 924: PMON = buffer[2];
 17078  1020  0838               	movf	cmd_mmp@buffer,w
 17079  1021  0086               	movwf	6
 17080  1022  3001               	movlw	1	; select bank2/3
 17081  1023  0087               	movwf	7
 17082  1024  3001               	movlw	1	; select bank2/3
 17083  1025  3F42               	moviw [2]fsr1
 17084  1026  0021               	movlb	1	; select bank1
 17085  1027  00D7               	movwf	_PMON^(0+128)
 17086  1028                     l7378:
 17087                           
 17088                           ;main.c: 925: sendOKMessage((uint8_t)0XC4);
 17089  1028  30C4               	movlw	196
 17090  1029  3190  2032  3190   	fcall	_sendOKMessage
 17091                           
 17092                           ;main.c: 926: } else{
 17093  102C  2831               	goto	l1478
 17094  102D                     l7380:
 17095                           
 17096                           ;main.c: 927: sendERRORMessage((uint8_t)0XC4);
 17097  102D  30C4               	movlw	196
 17098  102E  3190  2084  3190   	fcall	_sendERRORMessage
 17099  1031                     l1478:
 17100  1031  0008               	return
 17101  1032                     __end_of_cmd_mmp:
 17102                           
 17103                           	psect	text41
 17104  120F                     __ptext41:	
 17105 ;; *************** function _cmd_rp *****************
 17106 ;; Defined at:
 17107 ;;		line 911 in file "main.c"
 17108 ;; Parameters:    Size  Location     Type
 17109 ;;  num             2   22[BANK0 ] int 
 17110 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17111 ;;		 -> main@buff(20), 
 17112 ;; Auto vars:     Size  Location     Type
 17113 ;;  buff            5   26[BANK0 ] unsigned char [5]
 17114 ;; Return value:  Size  Location     Type
 17115 ;;                  1    wreg      void 
 17116 ;; Registers used:
 17117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17118 ;; Tracked objects:
 17119 ;;		On entry : 0/0
 17120 ;;		On exit  : 0/0
 17121 ;;		Unchanged: 0/0
 17122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17123 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17124 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17126 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17127 ;;Total ram usage:        9 bytes
 17128 ;; Hardware stack levels used:    1
 17129 ;; Hardware stack levels required when called:    7
 17130 ;; This function calls:
 17131 ;;		_sendMessage
 17132 ;; This function is called by:
 17133 ;;		_main
 17134 ;; This function uses a non-reentrant model
 17135 ;;
 17136                           
 17137                           
 17138                           ;psect for function _cmd_rp
 17139  120F                     _cmd_rp:
 17140  120F                     l7370:	
 17141                           ;incstack = 0
 17142                           ; Regs used in _cmd_rp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17143                           
 17144                           
 17145                           ;main.c: 912: uint8_t buff[5];;main.c: 913: buff[0] = (uint8_t)0xFD;
 17146  120F  30FD               	movlw	253
 17147  1210  0020               	movlb	0	; select bank0
 17148  1211  00B9               	movwf	??_cmd_rp
 17149  1212  0839               	movf	??_cmd_rp,w
 17150  1213  00BA               	movwf	cmd_rp@buff
 17151                           
 17152                           ;main.c: 914: buff[1] = (uint8_t)0XC3;
 17153  1214  30C3               	movlw	195
 17154  1215  00B9               	movwf	??_cmd_rp
 17155  1216  0839               	movf	??_cmd_rp,w
 17156  1217  00BB               	movwf	cmd_rp@buff+1
 17157                           
 17158                           ;main.c: 915: buff[2] = PMON;
 17159  1218  0021               	movlb	1	; select bank1
 17160  1219  0857               	movf	_PMON^(0+128),w
 17161  121A  0020               	movlb	0	; select bank0
 17162  121B  00B9               	movwf	??_cmd_rp
 17163  121C  0839               	movf	??_cmd_rp,w
 17164  121D  00BC               	movwf	cmd_rp@buff+2
 17165                           
 17166                           ;main.c: 916: buff[3] = TALA;
 17167  121E  0021               	movlb	1	; select bank1
 17168  121F  0856               	movf	_TALA^(0+128),w
 17169  1220  0020               	movlb	0	; select bank0
 17170  1221  00B9               	movwf	??_cmd_rp
 17171  1222  0839               	movf	??_cmd_rp,w
 17172  1223  00BD               	movwf	cmd_rp@buff+3
 17173                           
 17174                           ;main.c: 917: buff[4] = (uint8_t)0xFE;
 17175  1224  30FE               	movlw	254
 17176  1225  00B9               	movwf	??_cmd_rp
 17177  1226  0839               	movf	??_cmd_rp,w
 17178  1227  00BE               	movwf	cmd_rp@buff+4
 17179  1228                     l7372:
 17180                           
 17181                           ;main.c: 919: sendMessage(5,buff);
 17182  1228  3005               	movlw	5
 17183  1229  00AA               	movwf	sendMessage@num
 17184  122A  3000               	movlw	0
 17185  122B  00AB               	movwf	sendMessage@num+1
 17186  122C  303A               	movlw	(low (cmd_rp@buff| 0))& (0+255)
 17187  122D  00B9               	movwf	??_cmd_rp
 17188  122E  0839               	movf	??_cmd_rp,w
 17189  122F  00AC               	movwf	sendMessage@buffer
 17190  1230  3191  21A3  3192   	fcall	_sendMessage
 17191  1233                     l1473:
 17192  1233  0008               	return
 17193  1234                     __end_of_cmd_rp:
 17194                           
 17195                           	psect	text42
 17196  115F                     __ptext42:	
 17197 ;; *************** function _cmd_rtl *****************
 17198 ;; Defined at:
 17199 ;;		line 900 in file "main.c"
 17200 ;; Parameters:    Size  Location     Type
 17201 ;;  num             2   22[BANK0 ] int 
 17202 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17203 ;;		 -> main@buff(20), 
 17204 ;; Auto vars:     Size  Location     Type
 17205 ;;  buff            5   26[BANK0 ] unsigned char [5]
 17206 ;; Return value:  Size  Location     Type
 17207 ;;                  1    wreg      void 
 17208 ;; Registers used:
 17209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17210 ;; Tracked objects:
 17211 ;;		On entry : 0/0
 17212 ;;		On exit  : 0/0
 17213 ;;		Unchanged: 0/0
 17214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17215 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17216 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17218 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17219 ;;Total ram usage:        9 bytes
 17220 ;; Hardware stack levels used:    1
 17221 ;; Hardware stack levels required when called:    7
 17222 ;; This function calls:
 17223 ;;		_sendMessage
 17224 ;; This function is called by:
 17225 ;;		_main
 17226 ;; This function uses a non-reentrant model
 17227 ;;
 17228                           
 17229                           
 17230                           ;psect for function _cmd_rtl
 17231  115F                     _cmd_rtl:
 17232  115F                     l7366:	
 17233                           ;incstack = 0
 17234                           ; Regs used in _cmd_rtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17235                           
 17236                           
 17237                           ;main.c: 901: uint8_t buff[5];;main.c: 902: buff[0] = (uint8_t)0xFD;
 17238  115F  30FD               	movlw	253
 17239  1160  0020               	movlb	0	; select bank0
 17240  1161  00B9               	movwf	??_cmd_rtl
 17241  1162  0839               	movf	??_cmd_rtl,w
 17242  1163  00BA               	movwf	cmd_rtl@buff
 17243                           
 17244                           ;main.c: 903: buff[1] = (uint8_t)0XC2;
 17245  1164  30C2               	movlw	194
 17246  1165  00B9               	movwf	??_cmd_rtl
 17247  1166  0839               	movf	??_cmd_rtl,w
 17248  1167  00BB               	movwf	cmd_rtl@buff+1
 17249                           
 17250                           ;main.c: 904: buff[2] = temp;
 17251  1168  0864               	movf	_temp,w
 17252  1169  00B9               	movwf	??_cmd_rtl
 17253  116A  0839               	movf	??_cmd_rtl,w
 17254  116B  00BC               	movwf	cmd_rtl@buff+2
 17255                           
 17256                           ;main.c: 905: buff[3] = lumLevel;
 17257  116C  0863               	movf	_lumLevel,w
 17258  116D  00B9               	movwf	??_cmd_rtl
 17259  116E  0839               	movf	??_cmd_rtl,w
 17260  116F  00BD               	movwf	cmd_rtl@buff+3
 17261                           
 17262                           ;main.c: 906: buff[4] = (uint8_t)0xFE;
 17263  1170  30FE               	movlw	254
 17264  1171  00B9               	movwf	??_cmd_rtl
 17265  1172  0839               	movf	??_cmd_rtl,w
 17266  1173  00BE               	movwf	cmd_rtl@buff+4
 17267  1174                     l7368:
 17268                           
 17269                           ;main.c: 908: sendMessage(5,buff);
 17270  1174  3005               	movlw	5
 17271  1175  00AA               	movwf	sendMessage@num
 17272  1176  3000               	movlw	0
 17273  1177  00AB               	movwf	sendMessage@num+1
 17274  1178  303A               	movlw	(low (cmd_rtl@buff| 0))& (0+255)
 17275  1179  00B9               	movwf	??_cmd_rtl
 17276  117A  0839               	movf	??_cmd_rtl,w
 17277  117B  00AC               	movwf	sendMessage@buffer
 17278  117C  3191  21A3  3191   	fcall	_sendMessage
 17279  117F                     l1470:
 17280  117F  0008               	return
 17281  1180                     __end_of_cmd_rtl:
 17282                           
 17283                           	psect	text43
 17284  1788                     __ptext43:	
 17285 ;; *************** function _cmd_sc *****************
 17286 ;; Defined at:
 17287 ;;		line 885 in file "main.c"
 17288 ;; Parameters:    Size  Location     Type
 17289 ;;  num             2   22[BANK0 ] int 
 17290 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17291 ;;		 -> main@buff(20), 
 17292 ;; Auto vars:     Size  Location     Type
 17293 ;;  s               2   31[BANK0 ] int 
 17294 ;;  m               2   29[BANK0 ] int 
 17295 ;;  h               2   27[BANK0 ] int 
 17296 ;; Return value:  Size  Location     Type
 17297 ;;                  1    wreg      void 
 17298 ;; Registers used:
 17299 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17300 ;; Tracked objects:
 17301 ;;		On entry : 0/0
 17302 ;;		On exit  : 0/0
 17303 ;;		Unchanged: 0/0
 17304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17305 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17306 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17307 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17308 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17309 ;;Total ram usage:       11 bytes
 17310 ;; Hardware stack levels used:    1
 17311 ;; Hardware stack levels required when called:    8
 17312 ;; This function calls:
 17313 ;;		_sendERRORMessage
 17314 ;;		_sendOKMessage
 17315 ;; This function is called by:
 17316 ;;		_main
 17317 ;; This function uses a non-reentrant model
 17318 ;;
 17319                           
 17320                           
 17321                           ;psect for function _cmd_sc
 17322  1788                     _cmd_sc:
 17323  1788                     l7344:	
 17324                           ;incstack = 0
 17325                           ; Regs used in _cmd_sc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17326                           
 17327                           
 17328                           ;main.c: 886: int h = buffer[2];
 17329  1788  0020               	movlb	0	; select bank0
 17330  1789  0838               	movf	cmd_sc@buffer,w
 17331  178A  3E02               	addlw	2
 17332  178B  0086               	movwf	6
 17333  178C  3001               	movlw	1	; select bank2/3
 17334  178D  0087               	movwf	7
 17335  178E  0801               	movf	1,w
 17336  178F  00B9               	movwf	??_cmd_sc
 17337  1790  01BA               	clrf	??_cmd_sc+1
 17338  1791  0839               	movf	??_cmd_sc,w
 17339  1792  00BB               	movwf	cmd_sc@h
 17340  1793  083A               	movf	??_cmd_sc+1,w
 17341  1794  00BC               	movwf	cmd_sc@h+1
 17342                           
 17343                           ;main.c: 887: int m = buffer[3];
 17344  1795  0838               	movf	cmd_sc@buffer,w
 17345  1796  3E03               	addlw	3
 17346  1797  0086               	movwf	6
 17347  1798  3001               	movlw	1	; select bank2/3
 17348  1799  0087               	movwf	7
 17349  179A  0801               	movf	1,w
 17350  179B  00B9               	movwf	??_cmd_sc
 17351  179C  01BA               	clrf	??_cmd_sc+1
 17352  179D  0839               	movf	??_cmd_sc,w
 17353  179E  00BD               	movwf	cmd_sc@m
 17354  179F  083A               	movf	??_cmd_sc+1,w
 17355  17A0  00BE               	movwf	cmd_sc@m+1
 17356                           
 17357                           ;main.c: 888: int s = buffer[4];
 17358  17A1  0838               	movf	cmd_sc@buffer,w
 17359  17A2  3E04               	addlw	4
 17360  17A3  0086               	movwf	6
 17361  17A4  3001               	movlw	1	; select bank2/3
 17362  17A5  0087               	movwf	7
 17363  17A6  0801               	movf	1,w
 17364  17A7  00B9               	movwf	??_cmd_sc
 17365  17A8  01BA               	clrf	??_cmd_sc+1
 17366  17A9  0839               	movf	??_cmd_sc,w
 17367  17AA  00BF               	movwf	cmd_sc@s
 17368  17AB  083A               	movf	??_cmd_sc+1,w
 17369  17AC  00C0               	movwf	cmd_sc@s+1
 17370  17AD                     l7346:
 17371                           
 17372                           ;main.c: 889: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 17373  17AD  1BBC               	btfsc	cmd_sc@h+1,7
 17374  17AE  2FB0               	goto	u8831
 17375  17AF  2FB1               	goto	u8830
 17376  17B0                     u8831:
 17377  17B0  2FFB               	goto	l7364
 17378  17B1                     u8830:
 17379  17B1                     l7348:
 17380  17B1  083C               	movf	cmd_sc@h+1,w
 17381  17B2  3A80               	xorlw	128
 17382  17B3  00B9               	movwf	??_cmd_sc
 17383  17B4  3080               	movlw	128
 17384  17B5  0239               	subwf	??_cmd_sc,w
 17385  17B6  1D03               	skipz
 17386  17B7  2FBA               	goto	u8845
 17387  17B8  3018               	movlw	24
 17388  17B9  023B               	subwf	cmd_sc@h,w
 17389  17BA                     u8845:
 17390  17BA  1803               	skipnc
 17391  17BB  2FBD               	goto	u8841
 17392  17BC  2FBE               	goto	u8840
 17393  17BD                     u8841:
 17394  17BD  2FFB               	goto	l7364
 17395  17BE                     u8840:
 17396  17BE                     l7350:
 17397  17BE  0020               	movlb	0	; select bank0
 17398  17BF  1BBE               	btfsc	cmd_sc@m+1,7
 17399  17C0  2FC2               	goto	u8851
 17400  17C1  2FC3               	goto	u8850
 17401  17C2                     u8851:
 17402  17C2  2FFB               	goto	l7364
 17403  17C3                     u8850:
 17404  17C3                     l7352:
 17405  17C3  083E               	movf	cmd_sc@m+1,w
 17406  17C4  3A80               	xorlw	128
 17407  17C5  00B9               	movwf	??_cmd_sc
 17408  17C6  3080               	movlw	128
 17409  17C7  0239               	subwf	??_cmd_sc,w
 17410  17C8  1D03               	skipz
 17411  17C9  2FCC               	goto	u8865
 17412  17CA  303C               	movlw	60
 17413  17CB  023D               	subwf	cmd_sc@m,w
 17414  17CC                     u8865:
 17415  17CC  1803               	skipnc
 17416  17CD  2FCF               	goto	u8861
 17417  17CE  2FD0               	goto	u8860
 17418  17CF                     u8861:
 17419  17CF  2FFB               	goto	l7364
 17420  17D0                     u8860:
 17421  17D0                     l7354:
 17422  17D0  0020               	movlb	0	; select bank0
 17423  17D1  1BC0               	btfsc	cmd_sc@s+1,7
 17424  17D2  2FD4               	goto	u8871
 17425  17D3  2FD5               	goto	u8870
 17426  17D4                     u8871:
 17427  17D4  2FFB               	goto	l7364
 17428  17D5                     u8870:
 17429  17D5                     l7356:
 17430  17D5  0840               	movf	cmd_sc@s+1,w
 17431  17D6  3A80               	xorlw	128
 17432  17D7  00B9               	movwf	??_cmd_sc
 17433  17D8  3080               	movlw	128
 17434  17D9  0239               	subwf	??_cmd_sc,w
 17435  17DA  1D03               	skipz
 17436  17DB  2FDE               	goto	u8885
 17437  17DC  303C               	movlw	60
 17438  17DD  023F               	subwf	cmd_sc@s,w
 17439  17DE                     u8885:
 17440  17DE  1803               	skipnc
 17441  17DF  2FE1               	goto	u8881
 17442  17E0  2FE2               	goto	u8880
 17443  17E1                     u8881:
 17444  17E1  2FFB               	goto	l7364
 17445  17E2                     u8880:
 17446  17E2                     l7358:
 17447  17E2  3006               	movlw	6
 17448  17E3  0020               	movlb	0	; select bank0
 17449  17E4  0636               	xorwf	cmd_sc@num,w
 17450  17E5  0437               	iorwf	cmd_sc@num+1,w
 17451  17E6  1D03               	btfss	3,2
 17452  17E7  2FE9               	goto	u8891
 17453  17E8  2FEA               	goto	u8890
 17454  17E9                     u8891:
 17455  17E9  2FFB               	goto	l7364
 17456  17EA                     u8890:
 17457  17EA                     l7360:
 17458                           
 17459                           ;main.c: 890: t.h = h;
 17460  17EA  083B               	movf	cmd_sc@h,w
 17461  17EB  00B9               	movwf	??_cmd_sc
 17462  17EC  0839               	movf	??_cmd_sc,w
 17463  17ED  00DC               	movwf	_t
 17464                           
 17465                           ;main.c: 891: t.m = m;
 17466  17EE  083D               	movf	cmd_sc@m,w
 17467  17EF  00B9               	movwf	??_cmd_sc
 17468  17F0  0839               	movf	??_cmd_sc,w
 17469  17F1  00DD               	movwf	_t+1
 17470                           
 17471                           ;main.c: 892: t.s = s;
 17472  17F2  083F               	movf	cmd_sc@s,w
 17473  17F3  00B9               	movwf	??_cmd_sc
 17474  17F4  0839               	movf	??_cmd_sc,w
 17475  17F5  00DE               	movwf	_t+2
 17476  17F6                     l7362:
 17477                           
 17478                           ;main.c: 893: sendOKMessage((uint8_t)0XC1);
 17479  17F6  30C1               	movlw	193
 17480  17F7  3190  2032  3197   	fcall	_sendOKMessage
 17481                           
 17482                           ;main.c: 894: } else {
 17483  17FA  2FFF               	goto	l1467
 17484  17FB                     l7364:
 17485                           
 17486                           ;main.c: 895: sendERRORMessage((uint8_t)0XC1);
 17487  17FB  30C1               	movlw	193
 17488  17FC  3190  2084  3197   	fcall	_sendERRORMessage
 17489  17FF                     l1467:
 17490  17FF  0008               	return
 17491  1800                     __end_of_cmd_sc:
 17492                           
 17493                           	psect	text44
 17494  11EA                     __ptext44:	
 17495 ;; *************** function _cmd_rc *****************
 17496 ;; Defined at:
 17497 ;;		line 873 in file "main.c"
 17498 ;; Parameters:    Size  Location     Type
 17499 ;;  num             2   22[BANK0 ] int 
 17500 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17501 ;;		 -> main@buff(20), 
 17502 ;; Auto vars:     Size  Location     Type
 17503 ;;  buff            6   26[BANK0 ] unsigned char [6]
 17504 ;; Return value:  Size  Location     Type
 17505 ;;                  1    wreg      void 
 17506 ;; Registers used:
 17507 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17508 ;; Tracked objects:
 17509 ;;		On entry : 0/0
 17510 ;;		On exit  : 0/0
 17511 ;;		Unchanged: 0/0
 17512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17513 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17514 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17516 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17517 ;;Total ram usage:       10 bytes
 17518 ;; Hardware stack levels used:    1
 17519 ;; Hardware stack levels required when called:    7
 17520 ;; This function calls:
 17521 ;;		_sendMessage
 17522 ;; This function is called by:
 17523 ;;		_main
 17524 ;; This function uses a non-reentrant model
 17525 ;;
 17526                           
 17527                           
 17528                           ;psect for function _cmd_rc
 17529  11EA                     _cmd_rc:
 17530  11EA                     l7340:	
 17531                           ;incstack = 0
 17532                           ; Regs used in _cmd_rc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17533                           
 17534                           
 17535                           ;main.c: 874: uint8_t buff[6];;main.c: 875: buff[0] = (uint8_t)0xFD;
 17536  11EA  30FD               	movlw	253
 17537  11EB  0020               	movlb	0	; select bank0
 17538  11EC  00B9               	movwf	??_cmd_rc
 17539  11ED  0839               	movf	??_cmd_rc,w
 17540  11EE  00BA               	movwf	cmd_rc@buff
 17541                           
 17542                           ;main.c: 876: buff[1] = (uint8_t)0xC0;
 17543  11EF  30C0               	movlw	192
 17544  11F0  00B9               	movwf	??_cmd_rc
 17545  11F1  0839               	movf	??_cmd_rc,w
 17546  11F2  00BB               	movwf	cmd_rc@buff+1
 17547                           
 17548                           ;main.c: 877: buff[2] = t.h;
 17549  11F3  085C               	movf	_t,w
 17550  11F4  00B9               	movwf	??_cmd_rc
 17551  11F5  0839               	movf	??_cmd_rc,w
 17552  11F6  00BC               	movwf	cmd_rc@buff+2
 17553                           
 17554                           ;main.c: 878: buff[3] = t.m;
 17555  11F7  085D               	movf	_t+1,w
 17556  11F8  00B9               	movwf	??_cmd_rc
 17557  11F9  0839               	movf	??_cmd_rc,w
 17558  11FA  00BD               	movwf	cmd_rc@buff+3
 17559                           
 17560                           ;main.c: 879: buff[4] = t.s;
 17561  11FB  085E               	movf	_t+2,w
 17562  11FC  00B9               	movwf	??_cmd_rc
 17563  11FD  0839               	movf	??_cmd_rc,w
 17564  11FE  00BE               	movwf	cmd_rc@buff+4
 17565                           
 17566                           ;main.c: 880: buff[5] = (uint8_t)0xFE;
 17567  11FF  30FE               	movlw	254
 17568  1200  00B9               	movwf	??_cmd_rc
 17569  1201  0839               	movf	??_cmd_rc,w
 17570  1202  00BF               	movwf	cmd_rc@buff+5
 17571  1203                     l7342:
 17572                           
 17573                           ;main.c: 882: sendMessage(6,buff);
 17574  1203  3006               	movlw	6
 17575  1204  00AA               	movwf	sendMessage@num
 17576  1205  3000               	movlw	0
 17577  1206  00AB               	movwf	sendMessage@num+1
 17578  1207  303A               	movlw	(low (cmd_rc@buff| 0))& (0+255)
 17579  1208  00B9               	movwf	??_cmd_rc
 17580  1209  0839               	movf	??_cmd_rc,w
 17581  120A  00AC               	movwf	sendMessage@buffer
 17582  120B  3191  21A3  3191   	fcall	_sendMessage
 17583  120E                     l1462:
 17584  120E  0008               	return
 17585  120F                     __end_of_cmd_rc:
 17586                           
 17587                           	psect	text45
 17588  0C05                     __ptext45:	
 17589 ;; *************** function _cmd_tri *****************
 17590 ;; Defined at:
 17591 ;;		line 1048 in file "main.c"
 17592 ;; Parameters:    Size  Location     Type
 17593 ;;  num             2   22[BANK0 ] int 
 17594 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17595 ;;		 -> main@buff(20), 
 17596 ;; Auto vars:     Size  Location     Type
 17597 ;;  buffData        5   30[BANK0 ] unsigned char [5]
 17598 ;;  buffInit        4   35[BANK0 ] unsigned char [4]
 17599 ;;  startingInde    2   47[BANK0 ] int 
 17600 ;;  i               2   42[BANK0 ] int 
 17601 ;;  maxReadings     2   40[BANK0 ] int 
 17602 ;;  j               1   46[BANK0 ] unsigned char 
 17603 ;;  n               1   45[BANK0 ] unsigned char 
 17604 ;;  index           1   44[BANK0 ] unsigned char 
 17605 ;;  buffEOM         1   39[BANK0 ] unsigned char [1]
 17606 ;; Return value:  Size  Location     Type
 17607 ;;                  1    wreg      void 
 17608 ;; Registers used:
 17609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17610 ;; Tracked objects:
 17611 ;;		On entry : 0/0
 17612 ;;		On exit  : 0/0
 17613 ;;		Unchanged: 0/0
 17614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17615 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17616 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17617 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17618 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17619 ;;Total ram usage:       27 bytes
 17620 ;; Hardware stack levels used:    1
 17621 ;; Hardware stack levels required when called:    8
 17622 ;; This function calls:
 17623 ;;		_DATAEE_ReadByte
 17624 ;;		___wmul
 17625 ;;		_sendERRORMessage
 17626 ;;		_sendMessage
 17627 ;; This function is called by:
 17628 ;;		_main
 17629 ;; This function uses a non-reentrant model
 17630 ;;
 17631                           
 17632                           
 17633                           ;psect for function _cmd_tri
 17634  0C05                     _cmd_tri:
 17635  0C05                     l7520:	
 17636                           ;incstack = 0
 17637                           ; Regs used in _cmd_tri: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17638                           
 17639                           
 17640                           ;main.c: 1049: if(num == 5){
 17641  0C05  3005               	movlw	5
 17642  0C06  0020               	movlb	0	; select bank0
 17643  0C07  0636               	xorwf	cmd_tri@num,w
 17644  0C08  0437               	iorwf	cmd_tri@num+1,w
 17645  0C09  1D03               	btfss	3,2
 17646  0C0A  2C0C               	goto	u9191
 17647  0C0B  2C0D               	goto	u9190
 17648  0C0C                     u9191:
 17649  0C0C  2D2A               	goto	l7584
 17650  0C0D                     u9190:
 17651  0C0D                     l7522:
 17652                           
 17653                           ;main.c: 1050: uint8_t n = buffer[2];
 17654  0C0D  0838               	movf	cmd_tri@buffer,w
 17655  0C0E  0086               	movwf	6
 17656  0C0F  3001               	movlw	1	; select bank2/3
 17657  0C10  0087               	movwf	7
 17658  0C11  3001               	movlw	1	; select bank2/3
 17659  0C12  3F42               	moviw [2]fsr1
 17660  0C13  00CD               	movwf	cmd_tri@n
 17661                           
 17662                           ;main.c: 1051: uint8_t index = buffer[3];
 17663  0C14  0838               	movf	cmd_tri@buffer,w
 17664  0C15  0086               	movwf	6
 17665  0C16  3001               	movlw	1	; select bank2/3
 17666  0C17  0087               	movwf	7
 17667  0C18  3001               	movlw	1	; select bank2/3
 17668  0C19  3F43               	moviw [3]fsr1
 17669  0C1A  00CC               	movwf	cmd_tri@index
 17670  0C1B                     l7524:
 17671                           
 17672                           ;main.c: 1053: int startingIndex = iwrite + index;
 17673  0C1B  087A               	movf	_iwrite,w
 17674  0C1C  074C               	addwf	cmd_tri@index,w
 17675  0C1D  00CF               	movwf	cmd_tri@startingIndex
 17676  0C1E  01D0               	clrf	cmd_tri@startingIndex+1
 17677  0C1F  0DD0               	rlf	cmd_tri@startingIndex+1,f
 17678  0C20                     l7526:
 17679                           
 17680                           ;main.c: 1054: if(startingIndex >= NREG){
 17681  0C20  0850               	movf	cmd_tri@startingIndex+1,w
 17682  0C21  3A80               	xorlw	128
 17683  0C22  00B9               	movwf	??_cmd_tri
 17684  0C23  3080               	movlw	128
 17685  0C24  0239               	subwf	??_cmd_tri,w
 17686  0C25  1D03               	skipz
 17687  0C26  2C29               	goto	u9205
 17688  0C27  087D               	movf	_NREG,w
 17689  0C28  024F               	subwf	cmd_tri@startingIndex,w
 17690  0C29                     u9205:
 17691  0C29  1C03               	skipc
 17692  0C2A  2C2C               	goto	u9201
 17693  0C2B  2C2D               	goto	u9200
 17694  0C2C                     u9201:
 17695  0C2C  2C3C               	goto	l7530
 17696  0C2D                     u9200:
 17697  0C2D                     l7528:
 17698                           
 17699                           ;main.c: 1055: startingIndex = index - (NREG - iwrite);
 17700  0C2D  087D               	movf	_NREG,w
 17701  0C2E  0020               	movlb	0	; select bank0
 17702  0C2F  00B9               	movwf	??_cmd_tri
 17703  0C30  01BA               	clrf	??_cmd_tri+1
 17704  0C31  084C               	movf	cmd_tri@index,w
 17705  0C32  077A               	addwf	_iwrite,w
 17706  0C33  00BB               	movwf	??_cmd_tri+2
 17707  0C34  01BC               	clrf	??_cmd_tri+3
 17708  0C35  0DBC               	rlf	??_cmd_tri+3,f
 17709  0C36  0839               	movf	??_cmd_tri,w
 17710  0C37  023B               	subwf	??_cmd_tri+2,w
 17711  0C38  00CF               	movwf	cmd_tri@startingIndex
 17712  0C39  083A               	movf	??_cmd_tri+1,w
 17713  0C3A  3B3C               	subwfb	??_cmd_tri+3,w
 17714  0C3B  00D0               	movwf	cmd_tri@startingIndex+1
 17715  0C3C                     l7530:
 17716                           
 17717                           ;main.c: 1056: };main.c: 1057: if(nr != NREG){
 17718  0C3C  0879               	movf	_nr,w
 17719  0C3D  067D               	xorwf	_NREG,w
 17720  0C3E  1903               	skipnz
 17721  0C3F  2C41               	goto	u9211
 17722  0C40  2C42               	goto	u9210
 17723  0C41                     u9211:
 17724  0C41  2C4A               	goto	l1527
 17725  0C42                     u9210:
 17726  0C42                     l7532:
 17727                           
 17728                           ;main.c: 1058: startingIndex = index;
 17729  0C42  0020               	movlb	0	; select bank0
 17730  0C43  084C               	movf	cmd_tri@index,w
 17731  0C44  00B9               	movwf	??_cmd_tri
 17732  0C45  01BA               	clrf	??_cmd_tri+1
 17733  0C46  0839               	movf	??_cmd_tri,w
 17734  0C47  00CF               	movwf	cmd_tri@startingIndex
 17735  0C48  083A               	movf	??_cmd_tri+1,w
 17736  0C49  00D0               	movwf	cmd_tri@startingIndex+1
 17737  0C4A                     l1527:
 17738                           
 17739                           ;main.c: 1059: };main.c: 1060: int maxReadings = iwrite - startingIndex;
 17740  0C4A  087A               	movf	_iwrite,w
 17741  0C4B  0020               	movlb	0	; select bank0
 17742  0C4C  00B9               	movwf	??_cmd_tri
 17743  0C4D  084F               	movf	cmd_tri@startingIndex,w
 17744  0C4E  0239               	subwf	??_cmd_tri,w
 17745  0C4F  00C8               	movwf	cmd_tri@maxReadings
 17746  0C50  0950               	comf	cmd_tri@startingIndex+1,w
 17747  0C51  1803               	skipnc
 17748  0C52  0A89               	incf	9,f
 17749  0C53  00C9               	movwf	cmd_tri@maxReadings+1
 17750  0C54                     l7534:
 17751                           
 17752                           ;main.c: 1061: if(maxReadings < 0){
 17753  0C54  1FC9               	btfss	cmd_tri@maxReadings+1,7
 17754  0C55  2C57               	goto	u9221
 17755  0C56  2C58               	goto	u9220
 17756  0C57                     u9221:
 17757  0C57  2C63               	goto	l1528
 17758  0C58                     u9220:
 17759  0C58                     l7536:
 17760                           
 17761                           ;main.c: 1062: maxReadings = iwrite + (NREG - startingIndex);
 17762  0C58  087A               	movf	_iwrite,w
 17763  0C59  077D               	addwf	_NREG,w
 17764  0C5A  00B9               	movwf	??_cmd_tri
 17765  0C5B  01BA               	clrf	??_cmd_tri+1
 17766  0C5C  0DBA               	rlf	??_cmd_tri+1,f
 17767  0C5D  084F               	movf	cmd_tri@startingIndex,w
 17768  0C5E  0239               	subwf	??_cmd_tri,w
 17769  0C5F  00C8               	movwf	cmd_tri@maxReadings
 17770  0C60  0850               	movf	cmd_tri@startingIndex+1,w
 17771  0C61  3B3A               	subwfb	??_cmd_tri+1,w
 17772  0C62  00C9               	movwf	cmd_tri@maxReadings+1
 17773  0C63                     l1528:
 17774                           
 17775                           ;main.c: 1063: };main.c: 1064: if(maxReadings == 0 && nr == NREG){
 17776  0C63  0848               	movf	cmd_tri@maxReadings,w
 17777  0C64  0449               	iorwf	cmd_tri@maxReadings+1,w
 17778  0C65  1D03               	btfss	3,2
 17779  0C66  2C68               	goto	u9231
 17780  0C67  2C69               	goto	u9230
 17781  0C68                     u9231:
 17782  0C68  2C76               	goto	l1529
 17783  0C69                     u9230:
 17784  0C69                     l7538:
 17785  0C69  0879               	movf	_nr,w
 17786  0C6A  067D               	xorwf	_NREG,w
 17787  0C6B  1D03               	skipz
 17788  0C6C  2C6E               	goto	u9241
 17789  0C6D  2C6F               	goto	u9240
 17790  0C6E                     u9241:
 17791  0C6E  2C76               	goto	l1529
 17792  0C6F                     u9240:
 17793  0C6F                     l7540:
 17794                           
 17795                           ;main.c: 1065: maxReadings = nr;
 17796  0C6F  0879               	movf	_nr,w
 17797  0C70  00B9               	movwf	??_cmd_tri
 17798  0C71  01BA               	clrf	??_cmd_tri+1
 17799  0C72  0839               	movf	??_cmd_tri,w
 17800  0C73  00C8               	movwf	cmd_tri@maxReadings
 17801  0C74  083A               	movf	??_cmd_tri+1,w
 17802  0C75  00C9               	movwf	cmd_tri@maxReadings+1
 17803  0C76                     l1529:
 17804                           
 17805                           ;main.c: 1066: };main.c: 1068: if((n > nr) || (maxReadings < n)){
 17806  0C76  084D               	movf	cmd_tri@n,w
 17807  0C77  0279               	subwf	_nr,w
 17808  0C78  1C03               	skipc
 17809  0C79  2C7B               	goto	u9251
 17810  0C7A  2C7C               	goto	u9250
 17811  0C7B                     u9251:
 17812  0C7B  2C89               	goto	l7544
 17813  0C7C                     u9250:
 17814  0C7C                     l7542:
 17815  0C7C  0849               	movf	cmd_tri@maxReadings+1,w
 17816  0C7D  3A80               	xorlw	128
 17817  0C7E  00B9               	movwf	??_cmd_tri
 17818  0C7F  3080               	movlw	128
 17819  0C80  0239               	subwf	??_cmd_tri,w
 17820  0C81  1D03               	skipz
 17821  0C82  2C85               	goto	u9265
 17822  0C83  084D               	movf	cmd_tri@n,w
 17823  0C84  0248               	subwf	cmd_tri@maxReadings,w
 17824  0C85                     u9265:
 17825  0C85  1803               	skipnc
 17826  0C86  2C88               	goto	u9261
 17827  0C87  2C89               	goto	u9260
 17828  0C88                     u9261:
 17829  0C88  2C8E               	goto	l7548
 17830  0C89                     u9260:
 17831  0C89                     l7544:
 17832                           
 17833                           ;main.c: 1069: sendERRORMessage((uint8_t)0XCC);
 17834  0C89  30CC               	movlw	204
 17835  0C8A  3190  2084  318C   	fcall	_sendERRORMessage
 17836  0C8D  2D2E               	goto	l1533
 17837  0C8E                     l7548:
 17838                           
 17839                           ;main.c: 1071: };main.c: 1074: uint8_t buffInit[4];;main.c: 1075: buffInit[0] = (uint8_t
      +                          )0xFD;
 17840  0C8E  30FD               	movlw	253
 17841  0C8F  0020               	movlb	0	; select bank0
 17842  0C90  00B9               	movwf	??_cmd_tri
 17843  0C91  0839               	movf	??_cmd_tri,w
 17844  0C92  00C3               	movwf	cmd_tri@buffInit
 17845                           
 17846                           ;main.c: 1076: buffInit[1] = (uint8_t)0XCC;
 17847  0C93  30CC               	movlw	204
 17848  0C94  00B9               	movwf	??_cmd_tri
 17849  0C95  0839               	movf	??_cmd_tri,w
 17850  0C96  00C4               	movwf	cmd_tri@buffInit+1
 17851                           
 17852                           ;main.c: 1077: buffInit[2] = (uint8_t)n;
 17853  0C97  084D               	movf	cmd_tri@n,w
 17854  0C98  00B9               	movwf	??_cmd_tri
 17855  0C99  0839               	movf	??_cmd_tri,w
 17856  0C9A  00C5               	movwf	cmd_tri@buffInit+2
 17857                           
 17858                           ;main.c: 1078: buffInit[3] = (uint8_t)index;
 17859  0C9B  084C               	movf	cmd_tri@index,w
 17860  0C9C  00B9               	movwf	??_cmd_tri
 17861  0C9D  0839               	movf	??_cmd_tri,w
 17862  0C9E  00C6               	movwf	cmd_tri@buffInit+3
 17863  0C9F                     l7550:
 17864                           
 17865                           ;main.c: 1079: sendMessage(4,buffInit);
 17866  0C9F  3004               	movlw	4
 17867  0CA0  00AA               	movwf	sendMessage@num
 17868  0CA1  3000               	movlw	0
 17869  0CA2  00AB               	movwf	sendMessage@num+1
 17870  0CA3  3043               	movlw	(low (cmd_tri@buffInit| 0))& (0+255)
 17871  0CA4  00B9               	movwf	??_cmd_tri
 17872  0CA5  0839               	movf	??_cmd_tri,w
 17873  0CA6  00AC               	movwf	sendMessage@buffer
 17874  0CA7  3191  21A3  318C   	fcall	_sendMessage
 17875  0CAA                     l7552:
 17876                           
 17877                           ;main.c: 1081: int i = startingIndex;
 17878  0CAA  0020               	movlb	0	; select bank0
 17879  0CAB  0850               	movf	cmd_tri@startingIndex+1,w
 17880  0CAC  00CB               	movwf	cmd_tri@i+1
 17881  0CAD  084F               	movf	cmd_tri@startingIndex,w
 17882  0CAE  00CA               	movwf	cmd_tri@i
 17883                           
 17884                           ;main.c: 1083: uint8_t j;;main.c: 1084: uint8_t buffData[5];;main.c: 1085: while(n){
 17885  0CAF  2D14               	goto	l7578
 17886  0CB0                     l7554:
 17887                           
 17888                           ;main.c: 1086: for(j = 0; j < 5; j++){
 17889  0CB0  01CE               	clrf	cmd_tri@j
 17890  0CB1                     l7560:
 17891                           
 17892                           ;main.c: 1087: buffData[j] = DATAEE_ReadByte( (i * 0x5) + 0x7012 + j);
 17893  0CB1  084E               	movf	cmd_tri@j,w
 17894  0CB2  00B9               	movwf	??_cmd_tri
 17895  0CB3  01BA               	clrf	??_cmd_tri+1
 17896  0CB4  084B               	movf	cmd_tri@i+1,w
 17897  0CB5  00A8               	movwf	___wmul@multiplier+1
 17898  0CB6  084A               	movf	cmd_tri@i,w
 17899  0CB7  00A7               	movwf	___wmul@multiplier
 17900  0CB8  3005               	movlw	5
 17901  0CB9  00A9               	movwf	___wmul@multiplicand
 17902  0CBA  3000               	movlw	0
 17903  0CBB  00AA               	movwf	___wmul@multiplicand+1
 17904  0CBC  3190  20FE  318C   	fcall	___wmul
 17905  0CBF  0020               	movlb	0	; select bank0
 17906  0CC0  0839               	movf	??_cmd_tri,w
 17907  0CC1  0727               	addwf	?___wmul,w
 17908  0CC2  00BB               	movwf	??_cmd_tri+2
 17909  0CC3  083A               	movf	??_cmd_tri+1,w
 17910  0CC4  3D28               	addwfc	?___wmul+1,w
 17911  0CC5  00BC               	movwf	??_cmd_tri+3
 17912  0CC6  083B               	movf	??_cmd_tri+2,w
 17913  0CC7  3E12               	addlw	18
 17914  0CC8  00AD               	movwf	DATAEE_ReadByte@bAdd
 17915  0CC9  3070               	movlw	112
 17916  0CCA  3D3C               	addwfc	??_cmd_tri+3,w
 17917  0CCB  00AE               	movwf	DATAEE_ReadByte@bAdd+1
 17918  0CCC  319F  2787  318C   	fcall	_DATAEE_ReadByte
 17919  0CCF  0020               	movlb	0	; select bank0
 17920  0CD0  00BD               	movwf	??_cmd_tri+4
 17921  0CD1  084E               	movf	cmd_tri@j,w
 17922  0CD2  3E3E               	addlw	(low (cmd_tri@buffData| 0))& (0+255)
 17923  0CD3  0086               	movwf	6
 17924  0CD4  0187               	clrf	7
 17925  0CD5  083D               	movf	??_cmd_tri+4,w
 17926  0CD6  0081               	movwf	1
 17927  0CD7                     l7562:
 17928  0CD7  3001               	movlw	1
 17929  0CD8  00B9               	movwf	??_cmd_tri
 17930  0CD9  0839               	movf	??_cmd_tri,w
 17931  0CDA  07CE               	addwf	cmd_tri@j,f
 17932  0CDB                     l7564:
 17933  0CDB  3005               	movlw	5
 17934  0CDC  024E               	subwf	cmd_tri@j,w
 17935  0CDD  1C03               	skipc
 17936  0CDE  2CE0               	goto	u9271
 17937  0CDF  2CE1               	goto	u9270
 17938  0CE0                     u9271:
 17939  0CE0  2CB1               	goto	l7560
 17940  0CE1                     u9270:
 17941  0CE1                     l7566:
 17942                           
 17943                           ;main.c: 1088: };main.c: 1089: sendMessage(5,buffData);
 17944  0CE1  3005               	movlw	5
 17945  0CE2  00AA               	movwf	sendMessage@num
 17946  0CE3  3000               	movlw	0
 17947  0CE4  00AB               	movwf	sendMessage@num+1
 17948  0CE5  303E               	movlw	(low (cmd_tri@buffData| 0))& (0+255)
 17949  0CE6  00B9               	movwf	??_cmd_tri
 17950  0CE7  0839               	movf	??_cmd_tri,w
 17951  0CE8  00AC               	movwf	sendMessage@buffer
 17952  0CE9  3191  21A3  318C   	fcall	_sendMessage
 17953  0CEC                     l7568:
 17954                           
 17955                           ;main.c: 1090: if(iread == i){
 17956  0CEC  087B               	movf	_iread,w
 17957  0CED  0020               	movlb	0	; select bank0
 17958  0CEE  00B9               	movwf	??_cmd_tri
 17959  0CEF  01BA               	clrf	??_cmd_tri+1
 17960  0CF0  084B               	movf	cmd_tri@i+1,w
 17961  0CF1  063A               	xorwf	??_cmd_tri+1,w
 17962  0CF2  1D03               	skipz
 17963  0CF3  2CF6               	goto	u9285
 17964  0CF4  084A               	movf	cmd_tri@i,w
 17965  0CF5  0639               	xorwf	??_cmd_tri,w
 17966  0CF6                     u9285:
 17967  0CF6  1D03               	skipz
 17968  0CF7  2CF9               	goto	u9281
 17969  0CF8  2CFA               	goto	u9280
 17970  0CF9                     u9281:
 17971  0CF9  2CFE               	goto	l7572
 17972  0CFA                     u9280:
 17973  0CFA                     l7570:
 17974                           
 17975                           ;main.c: 1091: iread++;
 17976  0CFA  3001               	movlw	1
 17977  0CFB  00B9               	movwf	??_cmd_tri
 17978  0CFC  0839               	movf	??_cmd_tri,w
 17979  0CFD  07FB               	addwf	_iread,f
 17980  0CFE                     l7572:
 17981                           
 17982                           ;main.c: 1092: };main.c: 1093: i++;
 17983  0CFE  3001               	movlw	1
 17984  0CFF  07CA               	addwf	cmd_tri@i,f
 17985  0D00  3000               	movlw	0
 17986  0D01  3DCB               	addwfc	cmd_tri@i+1,f
 17987  0D02                     l7574:
 17988                           
 17989                           ;main.c: 1094: n--;
 17990  0D02  3001               	movlw	1
 17991  0D03  02CD               	subwf	cmd_tri@n,f
 17992                           
 17993                           ;main.c: 1095: if(i >= NREG){
 17994  0D04  084B               	movf	cmd_tri@i+1,w
 17995  0D05  3A80               	xorlw	128
 17996  0D06  00B9               	movwf	??_cmd_tri
 17997  0D07  3080               	movlw	128
 17998  0D08  0239               	subwf	??_cmd_tri,w
 17999  0D09  1D03               	skipz
 18000  0D0A  2D0D               	goto	u9295
 18001  0D0B  087D               	movf	_NREG,w
 18002  0D0C  024A               	subwf	cmd_tri@i,w
 18003  0D0D                     u9295:
 18004  0D0D  1C03               	skipc
 18005  0D0E  2D10               	goto	u9291
 18006  0D0F  2D11               	goto	u9290
 18007  0D10                     u9291:
 18008  0D10  2D14               	goto	l7578
 18009  0D11                     u9290:
 18010  0D11                     l7576:
 18011                           
 18012                           ;main.c: 1096: i=0;
 18013  0D11  0020               	movlb	0	; select bank0
 18014  0D12  01CA               	clrf	cmd_tri@i
 18015  0D13  01CB               	clrf	cmd_tri@i+1
 18016  0D14                     l7578:
 18017  0D14  0020               	movlb	0	; select bank0
 18018  0D15  084D               	movf	cmd_tri@n,w
 18019  0D16  1D03               	btfss	3,2
 18020  0D17  2D19               	goto	u9301
 18021  0D18  2D1A               	goto	u9300
 18022  0D19                     u9301:
 18023  0D19  2CB0               	goto	l7554
 18024  0D1A                     u9300:
 18025  0D1A                     l7580:
 18026                           
 18027                           ;main.c: 1097: };main.c: 1098: };main.c: 1101: uint8_t buffEOM[1];;main.c: 1102: buffEOM
      +                          [0] = (uint8_t)0xFE;
 18028  0D1A  30FE               	movlw	254
 18029  0D1B  00B9               	movwf	??_cmd_tri
 18030  0D1C  0839               	movf	??_cmd_tri,w
 18031  0D1D  00C7               	movwf	cmd_tri@buffEOM
 18032  0D1E                     l7582:
 18033                           
 18034                           ;main.c: 1103: sendMessage(1,buffEOM);
 18035  0D1E  3001               	movlw	1
 18036  0D1F  00AA               	movwf	sendMessage@num
 18037  0D20  3000               	movlw	0
 18038  0D21  00AB               	movwf	sendMessage@num+1
 18039  0D22  3047               	movlw	(low (cmd_tri@buffEOM| 0))& (0+255)
 18040  0D23  00B9               	movwf	??_cmd_tri
 18041  0D24  0839               	movf	??_cmd_tri,w
 18042  0D25  00AC               	movwf	sendMessage@buffer
 18043  0D26  3191  21A3  318C   	fcall	_sendMessage
 18044                           
 18045                           ;main.c: 1104: } else{
 18046  0D29  2D2E               	goto	l1533
 18047  0D2A                     l7584:
 18048                           
 18049                           ;main.c: 1105: sendERRORMessage((uint8_t)0XCC);
 18050  0D2A  30CC               	movlw	204
 18051  0D2B  3190  2084  318C   	fcall	_sendERRORMessage
 18052  0D2E                     l1533:
 18053  0D2E  0008               	return
 18054  0D2F                     __end_of_cmd_tri:
 18055                           
 18056                           	psect	text46
 18057  10FE                     __ptext46:	
 18058 ;; *************** function ___wmul *****************
 18059 ;; Defined at:
 18060 ;;		line 15 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 18061 ;; Parameters:    Size  Location     Type
 18062 ;;  multiplier      2    7[BANK0 ] unsigned int 
 18063 ;;  multiplicand    2    9[BANK0 ] unsigned int 
 18064 ;; Auto vars:     Size  Location     Type
 18065 ;;  product         2   11[BANK0 ] unsigned int 
 18066 ;; Return value:  Size  Location     Type
 18067 ;;                  2    7[BANK0 ] unsigned int 
 18068 ;; Registers used:
 18069 ;;		wreg, status,2, status,0
 18070 ;; Tracked objects:
 18071 ;;		On entry : 0/0
 18072 ;;		On exit  : 0/0
 18073 ;;		Unchanged: 0/0
 18074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18075 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18076 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;Total ram usage:        6 bytes
 18080 ;; Hardware stack levels used:    1
 18081 ;; Hardware stack levels required when called:    4
 18082 ;; This function calls:
 18083 ;;		Nothing
 18084 ;; This function is called by:
 18085 ;;		_monitoring_TEMP_LUM
 18086 ;;		_cmd_trc
 18087 ;;		_cmd_tri
 18088 ;;		_main
 18089 ;;		_sprintf
 18090 ;;		_map
 18091 ;; This function uses a non-reentrant model
 18092 ;;
 18093                           
 18094                           
 18095                           ;psect for function ___wmul
 18096  10FE                     ___wmul:
 18097  10FE                     l6308:	
 18098                           ;incstack = 0
 18099                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18100                           
 18101  10FE  0020               	movlb	0	; select bank0
 18102  10FF  01AB               	clrf	___wmul@product
 18103  1100  01AC               	clrf	___wmul@product+1
 18104  1101                     l6310:
 18105  1101  1C27               	btfss	___wmul@multiplier,0
 18106  1102  2904               	goto	u6981
 18107  1103  2905               	goto	u6980
 18108  1104                     u6981:
 18109  1104  2909               	goto	l1785
 18110  1105                     u6980:
 18111  1105                     l6312:
 18112  1105  0829               	movf	___wmul@multiplicand,w
 18113  1106  07AB               	addwf	___wmul@product,f
 18114  1107  082A               	movf	___wmul@multiplicand+1,w
 18115  1108  3DAC               	addwfc	___wmul@product+1,f
 18116  1109                     l1785:
 18117  1109  3001               	movlw	1
 18118  110A                     u6995:
 18119  110A  35A9               	lslf	___wmul@multiplicand,f
 18120  110B  0DAA               	rlf	___wmul@multiplicand+1,f
 18121  110C  0B89               	decfsz	9,f
 18122  110D  290A               	goto	u6995
 18123  110E                     l6314:
 18124  110E  3001               	movlw	1
 18125  110F                     u7005:
 18126  110F  36A8               	lsrf	___wmul@multiplier+1,f
 18127  1110  0CA7               	rrf	___wmul@multiplier,f
 18128  1111  0B89               	decfsz	9,f
 18129  1112  290F               	goto	u7005
 18130  1113                     l6316:
 18131  1113  0827               	movf	___wmul@multiplier,w
 18132  1114  0428               	iorwf	___wmul@multiplier+1,w
 18133  1115  1D03               	btfss	3,2
 18134  1116  2918               	goto	u7011
 18135  1117  2919               	goto	u7010
 18136  1118                     u7011:
 18137  1118  2901               	goto	l6310
 18138  1119                     u7010:
 18139  1119                     l6318:
 18140  1119  082C               	movf	___wmul@product+1,w
 18141  111A  00A8               	movwf	?___wmul+1
 18142  111B  082B               	movf	___wmul@product,w
 18143  111C  00A7               	movwf	?___wmul
 18144  111D                     l1787:
 18145  111D  0008               	return
 18146  111E                     __end_of___wmul:
 18147                           
 18148                           	psect	text47
 18149  1F87                     __ptext47:	
 18150 ;; *************** function _DATAEE_ReadByte *****************
 18151 ;; Defined at:
 18152 ;;		line 202 in file "mcc_generated_files/memory.c"
 18153 ;; Parameters:    Size  Location     Type
 18154 ;;  bAdd            2   13[BANK0 ] unsigned int 
 18155 ;; Auto vars:     Size  Location     Type
 18156 ;;		None
 18157 ;; Return value:  Size  Location     Type
 18158 ;;                  1    wreg      unsigned char 
 18159 ;; Registers used:
 18160 ;;		wreg, status,2
 18161 ;; Tracked objects:
 18162 ;;		On entry : 0/0
 18163 ;;		On exit  : 0/0
 18164 ;;		Unchanged: 0/0
 18165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18166 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18169 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18170 ;;Total ram usage:        2 bytes
 18171 ;; Hardware stack levels used:    1
 18172 ;; Hardware stack levels required when called:    4
 18173 ;; This function calls:
 18174 ;;		Nothing
 18175 ;; This function is called by:
 18176 ;;		_cmd_trc
 18177 ;;		_cmd_tri
 18178 ;;		_main
 18179 ;; This function uses a non-reentrant model
 18180 ;;
 18181                           
 18182                           
 18183                           ;psect for function _DATAEE_ReadByte
 18184  1F87                     _DATAEE_ReadByte:
 18185  1F87                     l6988:	
 18186                           ;incstack = 0
 18187                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 18188                           
 18189                           
 18190                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 18191  1F87  0020               	movlb	0	; select bank0
 18192  1F88  082E               	movf	DATAEE_ReadByte@bAdd+1,w
 18193  1F89  0030               	movlb	16	; select bank16
 18194  1F8A  009B               	movwf	27	;volatile
 18195  1F8B                     l6990:
 18196                           
 18197                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 18198  1F8B  0020               	movlb	0	; select bank0
 18199  1F8C  082D               	movf	DATAEE_ReadByte@bAdd,w
 18200  1F8D  0030               	movlb	16	; select bank16
 18201  1F8E  009A               	movwf	26	;volatile
 18202  1F8F                     l6992:
 18203                           
 18204                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 18205  1F8F  171E               	bsf	30,6	;volsfr
 18206  1F90                     l6994:
 18207                           
 18208                           ;memory.c: 207: NVMCON1bits.RD = 1;
 18209  1F90  141E               	bsf	30,0	;volsfr
 18210  1F91                     l6996:
 18211                           
 18212                           ;memory.c: 208: __nop();
 18213  1F91  0000               	nop
 18214  1F92                     l6998:
 18215                           
 18216                           ;memory.c: 209: __nop();
 18217  1F92  0000               	nop
 18218  1F93                     l7000:
 18219                           
 18220                           ;memory.c: 211: return (NVMDATL);
 18221  1F93  0030               	movlb	16	; select bank16
 18222  1F94  081C               	movf	28,w	;volatile
 18223  1F95                     l734:
 18224  1F95  0008               	return
 18225  1F96                     __end_of_DATAEE_ReadByte:
 18226                           
 18227                           	psect	text48
 18228  1032                     __ptext48:	
 18229 ;; *************** function _sendOKMessage *****************
 18230 ;; Defined at:
 18231 ;;		line 853 in file "main.c"
 18232 ;; Parameters:    Size  Location     Type
 18233 ;;  cmd             1    wreg     unsigned char 
 18234 ;; Auto vars:     Size  Location     Type
 18235 ;;  cmd             1   17[BANK0 ] unsigned char 
 18236 ;;  bufw            4   18[BANK0 ] unsigned char [4]
 18237 ;; Return value:  Size  Location     Type
 18238 ;;                  1    wreg      void 
 18239 ;; Registers used:
 18240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18241 ;; Tracked objects:
 18242 ;;		On entry : 0/0
 18243 ;;		On exit  : 0/0
 18244 ;;		Unchanged: 0/0
 18245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18247 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18249 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18250 ;;Total ram usage:        6 bytes
 18251 ;; Hardware stack levels used:    1
 18252 ;; Hardware stack levels required when called:    7
 18253 ;; This function calls:
 18254 ;;		_sendMessage
 18255 ;; This function is called by:
 18256 ;;		_cmd_sc
 18257 ;;		_cmd_mmp
 18258 ;;		_cmd_mta
 18259 ;;		_cmd_dac
 18260 ;;		_cmd_dtl
 18261 ;;		_cmd_aa
 18262 ;; This function uses a non-reentrant model
 18263 ;;
 18264                           
 18265                           
 18266                           ;psect for function _sendOKMessage
 18267  1032                     _sendOKMessage:
 18268                           
 18269                           ;incstack = 0
 18270                           ; Regs used in _sendOKMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18271                           ;sendOKMessage@cmd stored from wreg
 18272  1032  0020               	movlb	0	; select bank0
 18273  1033  00B1               	movwf	sendOKMessage@cmd
 18274  1034                     l7098:
 18275                           
 18276                           ;main.c: 854: uint8_t bufw[4];;main.c: 855: bufw[0] = (uint8_t)0xFD;
 18277  1034  30FD               	movlw	253
 18278  1035  00B0               	movwf	??_sendOKMessage
 18279  1036  0830               	movf	??_sendOKMessage,w
 18280  1037  00B2               	movwf	sendOKMessage@bufw
 18281                           
 18282                           ;main.c: 856: bufw[1] = (uint8_t)cmd;
 18283  1038  0831               	movf	sendOKMessage@cmd,w
 18284  1039  00B0               	movwf	??_sendOKMessage
 18285  103A  0830               	movf	??_sendOKMessage,w
 18286  103B  00B3               	movwf	sendOKMessage@bufw+1
 18287  103C                     l7100:
 18288                           
 18289                           ;main.c: 857: bufw[2] = (uint8_t)0;
 18290  103C  01B4               	clrf	sendOKMessage@bufw+2
 18291  103D                     l7102:
 18292                           
 18293                           ;main.c: 858: bufw[3] = (uint8_t)0xFE;
 18294  103D  30FE               	movlw	254
 18295  103E  00B0               	movwf	??_sendOKMessage
 18296  103F  0830               	movf	??_sendOKMessage,w
 18297  1040  00B5               	movwf	sendOKMessage@bufw+3
 18298  1041                     l7104:
 18299                           
 18300                           ;main.c: 860: sendMessage(4,bufw);
 18301  1041  3004               	movlw	4
 18302  1042  00AA               	movwf	sendMessage@num
 18303  1043  3000               	movlw	0
 18304  1044  00AB               	movwf	sendMessage@num+1
 18305  1045  3032               	movlw	(low (sendOKMessage@bufw| 0))& (0+255)
 18306  1046  00B0               	movwf	??_sendOKMessage
 18307  1047  0830               	movf	??_sendOKMessage,w
 18308  1048  00AC               	movwf	sendMessage@buffer
 18309  1049  3191  21A3  3190   	fcall	_sendMessage
 18310  104C                     l1456:
 18311  104C  0008               	return
 18312  104D                     __end_of_sendOKMessage:
 18313                           
 18314                           	psect	text49
 18315  1084                     __ptext49:	
 18316 ;; *************** function _sendERRORMessage *****************
 18317 ;; Defined at:
 18318 ;;		line 863 in file "main.c"
 18319 ;; Parameters:    Size  Location     Type
 18320 ;;  cmd             1    wreg     unsigned char 
 18321 ;; Auto vars:     Size  Location     Type
 18322 ;;  cmd             1   17[BANK0 ] unsigned char 
 18323 ;;  bufw            4   18[BANK0 ] unsigned char [4]
 18324 ;; Return value:  Size  Location     Type
 18325 ;;                  1    wreg      void 
 18326 ;; Registers used:
 18327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18328 ;; Tracked objects:
 18329 ;;		On entry : 0/0
 18330 ;;		On exit  : 0/0
 18331 ;;		Unchanged: 0/0
 18332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18334 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18336 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18337 ;;Total ram usage:        6 bytes
 18338 ;; Hardware stack levels used:    1
 18339 ;; Hardware stack levels required when called:    7
 18340 ;; This function calls:
 18341 ;;		_sendMessage
 18342 ;; This function is called by:
 18343 ;;		_cmd_sc
 18344 ;;		_cmd_mmp
 18345 ;;		_cmd_mta
 18346 ;;		_cmd_dac
 18347 ;;		_cmd_dtl
 18348 ;;		_cmd_aa
 18349 ;;		_cmd_trc
 18350 ;;		_cmd_tri
 18351 ;; This function uses a non-reentrant model
 18352 ;;
 18353                           
 18354                           
 18355                           ;psect for function _sendERRORMessage
 18356  1084                     _sendERRORMessage:
 18357                           
 18358                           ;incstack = 0
 18359                           ; Regs used in _sendERRORMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18360                           ;sendERRORMessage@cmd stored from wreg
 18361  1084  0020               	movlb	0	; select bank0
 18362  1085  00B1               	movwf	sendERRORMessage@cmd
 18363  1086                     l7106:
 18364                           
 18365                           ;main.c: 864: uint8_t bufw[4];;main.c: 865: bufw[0] = (uint8_t)0xFD;
 18366  1086  30FD               	movlw	253
 18367  1087  00B0               	movwf	??_sendERRORMessage
 18368  1088  0830               	movf	??_sendERRORMessage,w
 18369  1089  00B2               	movwf	sendERRORMessage@bufw
 18370                           
 18371                           ;main.c: 866: bufw[1] = (uint8_t)cmd;
 18372  108A  0831               	movf	sendERRORMessage@cmd,w
 18373  108B  00B0               	movwf	??_sendERRORMessage
 18374  108C  0830               	movf	??_sendERRORMessage,w
 18375  108D  00B3               	movwf	sendERRORMessage@bufw+1
 18376                           
 18377                           ;main.c: 867: bufw[2] = (uint8_t)0xFF;
 18378  108E  30FF               	movlw	255
 18379  108F  00B0               	movwf	??_sendERRORMessage
 18380  1090  0830               	movf	??_sendERRORMessage,w
 18381  1091  00B4               	movwf	sendERRORMessage@bufw+2
 18382                           
 18383                           ;main.c: 868: bufw[3] = (uint8_t)0xFE;
 18384  1092  30FE               	movlw	254
 18385  1093  00B0               	movwf	??_sendERRORMessage
 18386  1094  0830               	movf	??_sendERRORMessage,w
 18387  1095  00B5               	movwf	sendERRORMessage@bufw+3
 18388  1096                     l7108:
 18389                           
 18390                           ;main.c: 870: sendMessage(4,bufw);
 18391  1096  3004               	movlw	4
 18392  1097  00AA               	movwf	sendMessage@num
 18393  1098  3000               	movlw	0
 18394  1099  00AB               	movwf	sendMessage@num+1
 18395  109A  3032               	movlw	(low (sendERRORMessage@bufw| 0))& (0+255)
 18396  109B  00B0               	movwf	??_sendERRORMessage
 18397  109C  0830               	movf	??_sendERRORMessage,w
 18398  109D  00AC               	movwf	sendMessage@buffer
 18399  109E  3191  21A3  3190   	fcall	_sendMessage
 18400  10A1                     l1459:
 18401  10A1  0008               	return
 18402  10A2                     __end_of_sendERRORMessage:
 18403                           
 18404                           	psect	text50
 18405  11A3                     __ptext50:	
 18406 ;; *************** function _sendMessage *****************
 18407 ;; Defined at:
 18408 ;;		line 661 in file "main.c"
 18409 ;; Parameters:    Size  Location     Type
 18410 ;;  num             2   10[BANK0 ] int 
 18411 ;;  buffer          1   12[BANK0 ] PTR unsigned char 
 18412 ;;		 -> cmd_tri@buffEOM(1), cmd_tri@buffData(5), cmd_tri@buffInit(4), cmd_trc@buffEOM(1), 
 18413 ;;		 -> cmd_trc@buffData(5), cmd_trc@buffInit(3), cmd_ir@buff(7), cmd_ra@buff(9), 
 18414 ;;		 -> cmd_rp@buff(5), cmd_rtl@buff(5), cmd_rc@buff(6), sendERRORMessage@bufw(4), 
 18415 ;;		 -> sendOKMessage@bufw(4), checkFlags@buff(7), 
 18416 ;; Auto vars:     Size  Location     Type
 18417 ;;  n               2   14[BANK0 ] int 
 18418 ;; Return value:  Size  Location     Type
 18419 ;;                  1    wreg      void 
 18420 ;; Registers used:
 18421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18422 ;; Tracked objects:
 18423 ;;		On entry : 0/0
 18424 ;;		On exit  : 0/0
 18425 ;;		Unchanged: 0/0
 18426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18427 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18428 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18430 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18431 ;;Total ram usage:        6 bytes
 18432 ;; Hardware stack levels used:    1
 18433 ;; Hardware stack levels required when called:    6
 18434 ;; This function calls:
 18435 ;;		_putch
 18436 ;; This function is called by:
 18437 ;;		_checkFlags
 18438 ;;		_sendOKMessage
 18439 ;;		_sendERRORMessage
 18440 ;;		_cmd_rc
 18441 ;;		_cmd_rtl
 18442 ;;		_cmd_rp
 18443 ;;		_cmd_ra
 18444 ;;		_cmd_ir
 18445 ;;		_cmd_trc
 18446 ;;		_cmd_tri
 18447 ;; This function uses a non-reentrant model
 18448 ;;
 18449                           
 18450                           
 18451                           ;psect for function _sendMessage
 18452  11A3                     _sendMessage:
 18453  11A3                     l6846:	
 18454                           ;incstack = 0
 18455                           ; Regs used in _sendMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18456                           
 18457                           
 18458                           ;main.c: 662: int n = 0;
 18459  11A3  0020               	movlb	0	; select bank0
 18460  11A4  01AE               	clrf	sendMessage@n
 18461  11A5  01AF               	clrf	sendMessage@n+1
 18462                           
 18463                           ;main.c: 663: while(n<num){
 18464  11A6  29B7               	goto	l6852
 18465  11A7                     l6848:
 18466                           
 18467                           ;main.c: 664: putch(buffer[n]);
 18468  11A7  0020               	movlb	0	; select bank0
 18469  11A8  082E               	movf	sendMessage@n,w
 18470  11A9  072C               	addwf	sendMessage@buffer,w
 18471  11AA  00AD               	movwf	??_sendMessage
 18472  11AB  082D               	movf	??_sendMessage,w
 18473  11AC  0086               	movwf	6
 18474  11AD  0187               	clrf	7
 18475  11AE  0801               	movf	1,w
 18476  11AF  319E  26EF  3191   	fcall	_putch
 18477  11B2                     l6850:
 18478                           
 18479                           ;main.c: 665: n++;
 18480  11B2  3001               	movlw	1
 18481  11B3  0020               	movlb	0	; select bank0
 18482  11B4  07AE               	addwf	sendMessage@n,f
 18483  11B5  3000               	movlw	0
 18484  11B6  3DAF               	addwfc	sendMessage@n+1,f
 18485  11B7                     l6852:
 18486  11B7  082F               	movf	sendMessage@n+1,w
 18487  11B8  3A80               	xorlw	128
 18488  11B9  00AD               	movwf	??_sendMessage
 18489  11BA  082B               	movf	sendMessage@num+1,w
 18490  11BB  3A80               	xorlw	128
 18491  11BC  022D               	subwf	??_sendMessage,w
 18492  11BD  1D03               	skipz
 18493  11BE  29C1               	goto	u8165
 18494  11BF  082A               	movf	sendMessage@num,w
 18495  11C0  022E               	subwf	sendMessage@n,w
 18496  11C1                     u8165:
 18497  11C1  1C03               	skipc
 18498  11C2  29C4               	goto	u8161
 18499  11C3  29C5               	goto	u8160
 18500  11C4                     u8161:
 18501  11C4  29A7               	goto	l6848
 18502  11C5                     u8160:
 18503  11C5                     l1382:
 18504  11C5  0008               	return
 18505  11C6                     __end_of_sendMessage:
 18506                           
 18507                           	psect	text51
 18508  1EEF                     __ptext51:	
 18509 ;; *************** function _putch *****************
 18510 ;; Defined at:
 18511 ;;		line 176 in file "mcc_generated_files/eusart.c"
 18512 ;; Parameters:    Size  Location     Type
 18513 ;;  txData          1    wreg     unsigned char 
 18514 ;; Auto vars:     Size  Location     Type
 18515 ;;  txData          1    9[BANK0 ] unsigned char 
 18516 ;; Return value:  Size  Location     Type
 18517 ;;                  1    wreg      void 
 18518 ;; Registers used:
 18519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18520 ;; Tracked objects:
 18521 ;;		On entry : 0/0
 18522 ;;		On exit  : 0/0
 18523 ;;		Unchanged: 0/0
 18524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18528 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18529 ;;Total ram usage:        1 bytes
 18530 ;; Hardware stack levels used:    1
 18531 ;; Hardware stack levels required when called:    5
 18532 ;; This function calls:
 18533 ;;		_EUSART_Write
 18534 ;; This function is called by:
 18535 ;;		_sendMessage
 18536 ;; This function uses a non-reentrant model
 18537 ;;
 18538                           
 18539                           
 18540                           ;psect for function _putch
 18541  1EEF                     _putch:
 18542                           
 18543                           ;incstack = 0
 18544                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18545                           ;putch@txData stored from wreg
 18546  1EEF  0020               	movlb	0	; select bank0
 18547  1EF0  00A9               	movwf	putch@txData
 18548  1EF1                     l6410:
 18549                           
 18550                           ;eusart.c: 178: EUSART_Write(txData);
 18551  1EF1  0829               	movf	putch@txData,w
 18552  1EF2  3192  22DE  319E   	fcall	_EUSART_Write
 18553  1EF5                     l842:
 18554  1EF5  0008               	return
 18555  1EF6                     __end_of_putch:
 18556                           
 18557                           	psect	text52
 18558  12DE                     __ptext52:	
 18559 ;; *************** function _EUSART_Write *****************
 18560 ;; Defined at:
 18561 ;;		line 148 in file "mcc_generated_files/eusart.c"
 18562 ;; Parameters:    Size  Location     Type
 18563 ;;  txData          1    wreg     unsigned char 
 18564 ;; Auto vars:     Size  Location     Type
 18565 ;;  txData          1    8[BANK0 ] unsigned char 
 18566 ;; Return value:  Size  Location     Type
 18567 ;;                  1    wreg      void 
 18568 ;; Registers used:
 18569 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18570 ;; Tracked objects:
 18571 ;;		On entry : 0/0
 18572 ;;		On exit  : 0/0
 18573 ;;		Unchanged: 0/0
 18574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18579 ;;Total ram usage:        2 bytes
 18580 ;; Hardware stack levels used:    1
 18581 ;; Hardware stack levels required when called:    4
 18582 ;; This function calls:
 18583 ;;		Nothing
 18584 ;; This function is called by:
 18585 ;;		_putch
 18586 ;; This function uses a non-reentrant model
 18587 ;;
 18588                           
 18589                           
 18590                           ;psect for function _EUSART_Write
 18591  12DE                     _EUSART_Write:
 18592                           
 18593                           ;incstack = 0
 18594                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 18595                           ;EUSART_Write@txData stored from wreg
 18596  12DE  0020               	movlb	0	; select bank0
 18597  12DF  00A8               	movwf	EUSART_Write@txData
 18598  12E0                     l6276:
 18599  12E0                     l6278:	
 18600                           ;eusart.c: 150: while(0 == eusartTxBufferRemaining)
 18601                           
 18602  12E0  0021               	movlb	1	; select bank1
 18603  12E1  085A               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 18604  12E2  1903               	btfsc	3,2
 18605  12E3  2AE5               	goto	u6931
 18606  12E4  2AE6               	goto	u6930
 18607  12E5                     u6931:
 18608  12E5  2AE0               	goto	l6278
 18609  12E6                     u6930:
 18610  12E6                     l832:
 18611                           
 18612                           ;eusart.c: 152: };eusart.c: 154: if(0 == PIE3bits.TXIE)
 18613  12E6  002E               	movlb	14	; select bank14
 18614  12E7  1A19               	btfsc	25,4	;volatile
 18615  12E8  2AEA               	goto	u6941
 18616  12E9  2AEB               	goto	u6940
 18617  12EA                     u6941:
 18618  12EA  2AF0               	goto	l833
 18619  12EB                     u6940:
 18620  12EB                     l6280:
 18621                           
 18622                           ;eusart.c: 155: {;eusart.c: 156: TX1REG = txData;
 18623  12EB  0020               	movlb	0	; select bank0
 18624  12EC  0828               	movf	EUSART_Write@txData,w
 18625  12ED  0022               	movlb	2	; select bank2
 18626  12EE  009A               	movwf	26	;volatile
 18627                           
 18628                           ;eusart.c: 157: }
 18629  12EF  2B0B               	goto	l6292
 18630  12F0                     l833:
 18631                           
 18632                           ;eusart.c: 158: else;eusart.c: 159: {;eusart.c: 160: PIE3bits.TXIE = 0;
 18633  12F0  1219               	bcf	25,4	;volatile
 18634  12F1                     l6282:
 18635                           
 18636                           ;eusart.c: 161: eusartTxBuffer[eusartTxHead++] = txData;
 18637  12F1  0020               	movlb	0	; select bank0
 18638  12F2  0828               	movf	EUSART_Write@txData,w
 18639  12F3  00A7               	movwf	??_EUSART_Write
 18640  12F4  0021               	movlb	1	; select bank1
 18641  12F5  083B               	movf	_eusartTxHead^(0+128),w
 18642  12F6  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 18643  12F7  0086               	movwf	6
 18644  12F8  3001               	movlw	1	; select bank3/4
 18645  12F9  0087               	movwf	7
 18646  12FA  0020               	movlb	0	; select bank0
 18647  12FB  0827               	movf	??_EUSART_Write,w
 18648  12FC  0081               	movwf	1
 18649  12FD                     l6284:
 18650  12FD  3001               	movlw	1
 18651  12FE  00A7               	movwf	??_EUSART_Write
 18652  12FF  0827               	movf	??_EUSART_Write,w
 18653  1300  0021               	movlb	1	; select bank1
 18654  1301  07BB               	addwf	_eusartTxHead^(0+128),f	;volatile
 18655  1302                     l6286:
 18656                           
 18657                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 18658  1302  3040               	movlw	64
 18659  1303  023B               	subwf	_eusartTxHead^(0+128),w	;volatile
 18660  1304  1C03               	skipc
 18661  1305  2B07               	goto	u6951
 18662  1306  2B08               	goto	u6950
 18663  1307                     u6951:
 18664  1307  2B09               	goto	l6290
 18665  1308                     u6950:
 18666  1308                     l6288:
 18667                           
 18668                           ;eusart.c: 163: {;eusart.c: 164: eusartTxHead = 0;
 18669  1308  01BB               	clrf	_eusartTxHead^(0+128)	;volatile
 18670  1309                     l6290:
 18671                           
 18672                           ;eusart.c: 165: };eusart.c: 166: eusartTxBufferRemaining--;
 18673  1309  3001               	movlw	1
 18674  130A  02DA               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 18675  130B                     l6292:
 18676                           
 18677                           ;eusart.c: 167: };eusart.c: 168: PIE3bits.TXIE = 1;
 18678  130B  002E               	movlb	14	; select bank14
 18679  130C  1619               	bsf	25,4	;volatile
 18680  130D                     l836:
 18681  130D  0008               	return
 18682  130E                     __end_of_EUSART_Write:
 18683                           
 18684                           	psect	text53
 18685  1068                     __ptext53:	
 18686 ;; *************** function _SYSTEM_Initialize *****************
 18687 ;; Defined at:
 18688 ;;		line 50 in file "mcc_generated_files/mcc.c"
 18689 ;; Parameters:    Size  Location     Type
 18690 ;;		None
 18691 ;; Auto vars:     Size  Location     Type
 18692 ;;		None
 18693 ;; Return value:  Size  Location     Type
 18694 ;;                  1    wreg      void 
 18695 ;; Registers used:
 18696 ;;		wreg, status,2, status,0, pclath, cstack
 18697 ;; Tracked objects:
 18698 ;;		On entry : 0/0
 18699 ;;		On exit  : 0/0
 18700 ;;		Unchanged: 0/0
 18701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18706 ;;Total ram usage:        0 bytes
 18707 ;; Hardware stack levels used:    1
 18708 ;; Hardware stack levels required when called:    6
 18709 ;; This function calls:
 18710 ;;		_ADCC_Initialize
 18711 ;;		_EUSART_Initialize
 18712 ;;		_EXT_INT_Initialize
 18713 ;;		_OSCILLATOR_Initialize
 18714 ;;		_PIN_MANAGER_Initialize
 18715 ;;		_PMD_Initialize
 18716 ;;		_PWM6_Initialize
 18717 ;;		_TMR1_Initialize
 18718 ;;		_TMR2_Initialize
 18719 ;; This function is called by:
 18720 ;;		_main
 18721 ;; This function uses a non-reentrant model
 18722 ;;
 18723                           
 18724                           
 18725                           ;psect for function _SYSTEM_Initialize
 18726  1068                     _SYSTEM_Initialize:
 18727  1068                     l7110:	
 18728                           ;incstack = 0
 18729                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18730                           
 18731                           
 18732                           ;mcc.c: 52: PMD_Initialize();
 18733  1068  319E  26F6  3190   	fcall	_PMD_Initialize
 18734  106B                     l7112:
 18735                           
 18736                           ;mcc.c: 53: PIN_MANAGER_Initialize();
 18737  106B  3194  249B  3190   	fcall	_PIN_MANAGER_Initialize
 18738  106E                     l7114:
 18739                           
 18740                           ;mcc.c: 54: OSCILLATOR_Initialize();
 18741  106E  319F  272A  3190   	fcall	_OSCILLATOR_Initialize
 18742  1071                     l7116:
 18743                           
 18744                           ;mcc.c: 55: PWM6_Initialize();
 18745  1071  319F  275E  3190   	fcall	_PWM6_Initialize
 18746  1074                     l7118:
 18747                           
 18748                           ;mcc.c: 56: ADCC_Initialize();
 18749  1074  3190  2001  3190   	fcall	_ADCC_Initialize
 18750  1077                     l7120:
 18751                           
 18752                           ;mcc.c: 57: TMR2_Initialize();
 18753  1077  319F  2779  3190   	fcall	_TMR2_Initialize
 18754  107A                     l7122:
 18755                           
 18756                           ;mcc.c: 58: TMR1_Initialize();
 18757  107A  3190  20C0  3190   	fcall	_TMR1_Initialize
 18758  107D                     l7124:
 18759                           
 18760                           ;mcc.c: 59: EXT_INT_Initialize();
 18761  107D  319F  276B  3190   	fcall	_EXT_INT_Initialize
 18762  1080                     l7126:
 18763                           
 18764                           ;mcc.c: 60: EUSART_Initialize();
 18765  1080  3192  2283  3190   	fcall	_EUSART_Initialize
 18766  1083                     l182:
 18767  1083  0008               	return
 18768  1084                     __end_of_SYSTEM_Initialize:
 18769                           
 18770                           	psect	text54
 18771  1F79                     __ptext54:	
 18772 ;; *************** function _TMR2_Initialize *****************
 18773 ;; Defined at:
 18774 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 18775 ;; Parameters:    Size  Location     Type
 18776 ;;		None
 18777 ;; Auto vars:     Size  Location     Type
 18778 ;;		None
 18779 ;; Return value:  Size  Location     Type
 18780 ;;                  1    wreg      void 
 18781 ;; Registers used:
 18782 ;;		wreg, status,2
 18783 ;; Tracked objects:
 18784 ;;		On entry : 0/0
 18785 ;;		On exit  : 0/0
 18786 ;;		Unchanged: 0/0
 18787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18792 ;;Total ram usage:        0 bytes
 18793 ;; Hardware stack levels used:    1
 18794 ;; Hardware stack levels required when called:    4
 18795 ;; This function calls:
 18796 ;;		Nothing
 18797 ;; This function is called by:
 18798 ;;		_SYSTEM_Initialize
 18799 ;; This function uses a non-reentrant model
 18800 ;;
 18801                           
 18802                           
 18803                           ;psect for function _TMR2_Initialize
 18804  1F79                     _TMR2_Initialize:
 18805  1F79                     l6922:	
 18806                           ;incstack = 0
 18807                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 18808                           
 18809                           
 18810                           ;tmr2.c: 67: T2CLKCON = 0x01;
 18811  1F79  3001               	movlw	1
 18812  1F7A  0025               	movlb	5	; select bank5
 18813  1F7B  0090               	movwf	16	;volatile
 18814  1F7C                     l6924:
 18815                           
 18816                           ;tmr2.c: 70: T2HLT = 0x00;
 18817  1F7C  018F               	clrf	15	;volatile
 18818  1F7D                     l6926:
 18819                           
 18820                           ;tmr2.c: 73: T2RST = 0x00;
 18821  1F7D  0191               	clrf	17	;volatile
 18822                           
 18823                           ;tmr2.c: 76: T2PR = 0xFF;
 18824  1F7E  30FF               	movlw	255
 18825  1F7F  008D               	movwf	13	;volatile
 18826  1F80                     l6928:
 18827                           
 18828                           ;tmr2.c: 79: T2TMR = 0x00;
 18829  1F80  018C               	clrf	12	;volatile
 18830  1F81                     l6930:
 18831                           
 18832                           ;tmr2.c: 82: PIR4bits.TMR2IF = 0;
 18833  1F81  002E               	movlb	14	; select bank14
 18834  1F82  1090               	bcf	16,1	;volatile
 18835  1F83                     l6932:
 18836                           
 18837                           ;tmr2.c: 85: T2CON = 0x80;
 18838  1F83  3080               	movlw	128
 18839  1F84  0025               	movlb	5	; select bank5
 18840  1F85  008E               	movwf	14	;volatile
 18841  1F86                     l647:
 18842  1F86  0008               	return
 18843  1F87                     __end_of_TMR2_Initialize:
 18844                           
 18845                           	psect	text55
 18846  10C0                     __ptext55:	
 18847 ;; *************** function _TMR1_Initialize *****************
 18848 ;; Defined at:
 18849 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 18850 ;; Parameters:    Size  Location     Type
 18851 ;;		None
 18852 ;; Auto vars:     Size  Location     Type
 18853 ;;		None
 18854 ;; Return value:  Size  Location     Type
 18855 ;;                  1    wreg      void 
 18856 ;; Registers used:
 18857 ;;		wreg, status,2, status,0, pclath, cstack
 18858 ;; Tracked objects:
 18859 ;;		On entry : 0/0
 18860 ;;		On exit  : 0/0
 18861 ;;		Unchanged: 0/0
 18862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18867 ;;Total ram usage:        0 bytes
 18868 ;; Hardware stack levels used:    1
 18869 ;; Hardware stack levels required when called:    5
 18870 ;; This function calls:
 18871 ;;		_TMR1_SetInterruptHandler
 18872 ;; This function is called by:
 18873 ;;		_SYSTEM_Initialize
 18874 ;; This function uses a non-reentrant model
 18875 ;;
 18876                           
 18877                           
 18878                           ;psect for function _TMR1_Initialize
 18879  10C0                     _TMR1_Initialize:
 18880  10C0                     l6934:	
 18881                           ;incstack = 0
 18882                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18883                           
 18884                           
 18885                           ;tmr1.c: 69: T1GCON = 0x00;
 18886  10C0  0024               	movlb	4	; select bank4
 18887  10C1  018F               	clrf	15	;volatile
 18888                           
 18889                           ;tmr1.c: 72: T1GATE = 0x00;
 18890  10C2  0190               	clrf	16	;volatile
 18891  10C3                     l6936:
 18892                           
 18893                           ;tmr1.c: 75: T1CLK = 0x04;
 18894  10C3  3004               	movlw	4
 18895  10C4  0091               	movwf	17	;volatile
 18896  10C5                     l6938:
 18897                           
 18898                           ;tmr1.c: 78: TMR1H = 0x86;
 18899  10C5  3086               	movlw	134
 18900  10C6  008D               	movwf	13	;volatile
 18901  10C7                     l6940:
 18902                           
 18903                           ;tmr1.c: 81: TMR1L = 0xE8;
 18904  10C7  30E8               	movlw	232
 18905  10C8  008C               	movwf	12	;volatile
 18906  10C9                     l6942:
 18907                           
 18908                           ;tmr1.c: 84: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 18909  10C9  080D               	movf	13,w	;volatile
 18910  10CA  0021               	movlb	1	; select bank1
 18911  10CB  00D9               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
 18912  10CC  0024               	movlb	4	; select bank4
 18913  10CD  080C               	movf	12,w	;volatile
 18914  10CE  0021               	movlb	1	; select bank1
 18915  10CF  00D8               	movwf	_timer1ReloadVal^(0+128)	;volatile
 18916  10D0                     l6944:
 18917                           
 18918                           ;tmr1.c: 87: PIR4bits.TMR1IF = 0;
 18919  10D0  002E               	movlb	14	; select bank14
 18920  10D1  1010               	bcf	16,0	;volatile
 18921  10D2                     l6946:
 18922                           
 18923                           ;tmr1.c: 90: PIE4bits.TMR1IE = 1;
 18924  10D2  141A               	bsf	26,0	;volatile
 18925  10D3                     l6948:
 18926                           
 18927                           ;tmr1.c: 93: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 18928  10D3  3003               	movlw	low _TMR1_DefaultInterruptHandler
 18929  10D4  0020               	movlb	0	; select bank0
 18930  10D5  00A7               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 18931  10D6  3000               	movlw	high _TMR1_DefaultInterruptHandler
 18932  10D7  00A8               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 18933  10D8  319F  2733  3190   	fcall	_TMR1_SetInterruptHandler
 18934  10DB                     l6950:
 18935                           
 18936                           ;tmr1.c: 96: T1CON = 0x05;
 18937  10DB  3005               	movlw	5
 18938  10DC  0024               	movlb	4	; select bank4
 18939  10DD  008E               	movwf	14	;volatile
 18940  10DE                     l409:
 18941  10DE  0008               	return
 18942  10DF                     __end_of_TMR1_Initialize:
 18943                           
 18944                           	psect	text56
 18945  1F33                     __ptext56:	
 18946 ;; *************** function _TMR1_SetInterruptHandler *****************
 18947 ;; Defined at:
 18948 ;;		line 178 in file "mcc_generated_files/tmr1.c"
 18949 ;; Parameters:    Size  Location     Type
 18950 ;;  InterruptHan    2    7[BANK0 ] PTR FTN()void 
 18951 ;;		 -> Clock_ISR(1), TMR1_DefaultInterruptHandler(1), 
 18952 ;; Auto vars:     Size  Location     Type
 18953 ;;		None
 18954 ;; Return value:  Size  Location     Type
 18955 ;;                  1    wreg      void 
 18956 ;; Registers used:
 18957 ;;		wreg
 18958 ;; Tracked objects:
 18959 ;;		On entry : 0/0
 18960 ;;		On exit  : 0/0
 18961 ;;		Unchanged: 0/0
 18962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18963 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18966 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18967 ;;Total ram usage:        2 bytes
 18968 ;; Hardware stack levels used:    1
 18969 ;; Hardware stack levels required when called:    4
 18970 ;; This function calls:
 18971 ;;		Nothing
 18972 ;; This function is called by:
 18973 ;;		_TMR1_Initialize
 18974 ;;		_main
 18975 ;; This function uses a non-reentrant model
 18976 ;;
 18977                           
 18978                           
 18979                           ;psect for function _TMR1_SetInterruptHandler
 18980  1F33                     _TMR1_SetInterruptHandler:
 18981  1F33                     l6598:	
 18982                           ;incstack = 0
 18983                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 18984                           
 18985                           
 18986                           ;tmr1.c: 179: TMR1_InterruptHandler = InterruptHandler;
 18987  1F33  0020               	movlb	0	; select bank0
 18988  1F34  0828               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 18989  1F35  0022               	movlb	2	; select bank2
 18990  1F36  00DE               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
 18991  1F37  0020               	movlb	0	; select bank0
 18992  1F38  0827               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 18993  1F39  0022               	movlb	2	; select bank2
 18994  1F3A  00DD               	movwf	_TMR1_InterruptHandler^(0+256)
 18995  1F3B                     l439:
 18996  1F3B  0008               	return
 18997  1F3C                     __end_of_TMR1_SetInterruptHandler:
 18998                           
 18999                           	psect	text57
 19000  1F5E                     __ptext57:	
 19001 ;; *************** function _PWM6_Initialize *****************
 19002 ;; Defined at:
 19003 ;;		line 58 in file "mcc_generated_files/pwm6.c"
 19004 ;; Parameters:    Size  Location     Type
 19005 ;;		None
 19006 ;; Auto vars:     Size  Location     Type
 19007 ;;		None
 19008 ;; Return value:  Size  Location     Type
 19009 ;;                  1    wreg      void 
 19010 ;; Registers used:
 19011 ;;		wreg, status,2, status,0
 19012 ;; Tracked objects:
 19013 ;;		On entry : 0/0
 19014 ;;		On exit  : 0/0
 19015 ;;		Unchanged: 0/0
 19016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19021 ;;Total ram usage:        0 bytes
 19022 ;; Hardware stack levels used:    1
 19023 ;; Hardware stack levels required when called:    4
 19024 ;; This function calls:
 19025 ;;		Nothing
 19026 ;; This function is called by:
 19027 ;;		_SYSTEM_Initialize
 19028 ;; This function uses a non-reentrant model
 19029 ;;
 19030                           
 19031                           
 19032                           ;psect for function _PWM6_Initialize
 19033  1F5E                     _PWM6_Initialize:
 19034  1F5E                     l6912:	
 19035                           ;incstack = 0
 19036                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 19037                           
 19038                           
 19039                           ;pwm6.c: 62: PWM6CON = 0x80;
 19040  1F5E  3080               	movlw	128
 19041  1F5F  0027               	movlb	7	; select bank7
 19042  1F60  008E               	movwf	14	;volatile
 19043                           
 19044                           ;pwm6.c: 65: PWM6DCH = 0xFF;
 19045  1F61  30FF               	movlw	255
 19046  1F62  008D               	movwf	13	;volatile
 19047                           
 19048                           ;pwm6.c: 68: PWM6DCL = 0xC0;
 19049  1F63  30C0               	movlw	192
 19050  1F64  008C               	movwf	12	;volatile
 19051  1F65                     l6914:
 19052                           
 19053                           ;pwm6.c: 71: CCPTMRS1bits.P6TSEL = 1;
 19054  1F65  0024               	movlb	4	; select bank4
 19055  1F66  081F               	movf	31,w	;volatile
 19056  1F67  39F3               	andlw	-13
 19057  1F68  3804               	iorlw	4
 19058  1F69  009F               	movwf	31	;volatile
 19059  1F6A                     l617:
 19060  1F6A  0008               	return
 19061  1F6B                     __end_of_PWM6_Initialize:
 19062                           
 19063                           	psect	text58
 19064  1EF6                     __ptext58:	
 19065 ;; *************** function _PMD_Initialize *****************
 19066 ;; Defined at:
 19067 ;;		line 77 in file "mcc_generated_files/mcc.c"
 19068 ;; Parameters:    Size  Location     Type
 19069 ;;		None
 19070 ;; Auto vars:     Size  Location     Type
 19071 ;;		None
 19072 ;; Return value:  Size  Location     Type
 19073 ;;                  1    wreg      void 
 19074 ;; Registers used:
 19075 ;;		status,2
 19076 ;; Tracked objects:
 19077 ;;		On entry : 0/0
 19078 ;;		On exit  : 0/0
 19079 ;;		Unchanged: 0/0
 19080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19085 ;;Total ram usage:        0 bytes
 19086 ;; Hardware stack levels used:    1
 19087 ;; Hardware stack levels required when called:    4
 19088 ;; This function calls:
 19089 ;;		Nothing
 19090 ;; This function is called by:
 19091 ;;		_SYSTEM_Initialize
 19092 ;; This function uses a non-reentrant model
 19093 ;;
 19094                           
 19095                           
 19096                           ;psect for function _PMD_Initialize
 19097  1EF6                     _PMD_Initialize:
 19098  1EF6                     l6902:	
 19099                           ;incstack = 0
 19100                           ; Regs used in _PMD_Initialize: [status,2]
 19101                           
 19102                           
 19103                           ;mcc.c: 80: PMD0 = 0x00;
 19104  1EF6  002F               	movlb	15	; select bank15
 19105  1EF7  0196               	clrf	22	;volatile
 19106                           
 19107                           ;mcc.c: 82: PMD1 = 0x00;
 19108  1EF8  0197               	clrf	23	;volatile
 19109                           
 19110                           ;mcc.c: 84: PMD2 = 0x00;
 19111  1EF9  0198               	clrf	24	;volatile
 19112                           
 19113                           ;mcc.c: 86: PMD3 = 0x00;
 19114  1EFA  0199               	clrf	25	;volatile
 19115                           
 19116                           ;mcc.c: 88: PMD4 = 0x00;
 19117  1EFB  019A               	clrf	26	;volatile
 19118                           
 19119                           ;mcc.c: 90: PMD5 = 0x00;
 19120  1EFC  019B               	clrf	27	;volatile
 19121  1EFD                     l188:
 19122  1EFD  0008               	return
 19123  1EFE                     __end_of_PMD_Initialize:
 19124                           
 19125                           	psect	text59
 19126  149B                     __ptext59:	
 19127 ;; *************** function _PIN_MANAGER_Initialize *****************
 19128 ;; Defined at:
 19129 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 19130 ;; Parameters:    Size  Location     Type
 19131 ;;		None
 19132 ;; Auto vars:     Size  Location     Type
 19133 ;;		None
 19134 ;; Return value:  Size  Location     Type
 19135 ;;                  1    wreg      void 
 19136 ;; Registers used:
 19137 ;;		wreg, status,2
 19138 ;; Tracked objects:
 19139 ;;		On entry : 0/0
 19140 ;;		On exit  : 0/0
 19141 ;;		Unchanged: 0/0
 19142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19147 ;;Total ram usage:        0 bytes
 19148 ;; Hardware stack levels used:    1
 19149 ;; Hardware stack levels required when called:    4
 19150 ;; This function calls:
 19151 ;;		Nothing
 19152 ;; This function is called by:
 19153 ;;		_SYSTEM_Initialize
 19154 ;; This function uses a non-reentrant model
 19155 ;;
 19156                           
 19157                           
 19158                           ;psect for function _PIN_MANAGER_Initialize
 19159  149B                     _PIN_MANAGER_Initialize:
 19160  149B                     l6854:	
 19161                           ;incstack = 0
 19162                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 19163                           
 19164                           
 19165                           ;pin_manager.c: 62: LATE = 0x00;
 19166  149B  0020               	movlb	0	; select bank0
 19167  149C  019A               	clrf	26	;volatile
 19168                           
 19169                           ;pin_manager.c: 63: LATD = 0x00;
 19170  149D  0199               	clrf	25	;volatile
 19171                           
 19172                           ;pin_manager.c: 64: LATA = 0x00;
 19173  149E  0196               	clrf	22	;volatile
 19174                           
 19175                           ;pin_manager.c: 65: LATB = 0x00;
 19176  149F  0197               	clrf	23	;volatile
 19177                           
 19178                           ;pin_manager.c: 66: LATC = 0x00;
 19179  14A0  0198               	clrf	24	;volatile
 19180  14A1                     l6856:
 19181                           
 19182                           ;pin_manager.c: 71: TRISE = 0x07;
 19183  14A1  3007               	movlw	7
 19184  14A2  0095               	movwf	21	;volatile
 19185  14A3                     l6858:
 19186                           
 19187                           ;pin_manager.c: 72: TRISA = 0x0F;
 19188  14A3  300F               	movlw	15
 19189  14A4  0091               	movwf	17	;volatile
 19190  14A5                     l6860:
 19191                           
 19192                           ;pin_manager.c: 73: TRISB = 0xFF;
 19193  14A5  30FF               	movlw	255
 19194  14A6  0092               	movwf	18	;volatile
 19195  14A7                     l6862:
 19196                           
 19197                           ;pin_manager.c: 74: TRISC = 0xBF;
 19198  14A7  30BF               	movlw	191
 19199  14A8  0093               	movwf	19	;volatile
 19200  14A9                     l6864:
 19201                           
 19202                           ;pin_manager.c: 75: TRISD = 0xFF;
 19203  14A9  30FF               	movlw	255
 19204  14AA  0094               	movwf	20	;volatile
 19205  14AB                     l6866:
 19206                           
 19207                           ;pin_manager.c: 80: ANSELD = 0xFF;
 19208  14AB  30FF               	movlw	255
 19209  14AC  003E               	movlb	30	; select bank30
 19210  14AD  00D9               	movwf	89	;volatile
 19211  14AE                     l6868:
 19212                           
 19213                           ;pin_manager.c: 81: ANSELC = 0x47;
 19214  14AE  3047               	movlw	71
 19215  14AF  00CE               	movwf	78	;volatile
 19216  14B0                     l6870:
 19217                           
 19218                           ;pin_manager.c: 82: ANSELB = 0xEF;
 19219  14B0  30EF               	movlw	239
 19220  14B1  00C3               	movwf	67	;volatile
 19221  14B2                     l6872:
 19222                           
 19223                           ;pin_manager.c: 83: ANSELE = 0x07;
 19224  14B2  3007               	movlw	7
 19225  14B3  00E4               	movwf	100	;volatile
 19226  14B4                     l6874:
 19227                           
 19228                           ;pin_manager.c: 84: ANSELA = 0x4F;
 19229  14B4  304F               	movlw	79
 19230  14B5  00B8               	movwf	56	;volatile
 19231                           
 19232                           ;pin_manager.c: 89: WPUD = 0x00;
 19233  14B6  01DA               	clrf	90	;volatile
 19234                           
 19235                           ;pin_manager.c: 90: WPUE = 0x00;
 19236  14B7  01E5               	clrf	101	;volatile
 19237                           
 19238                           ;pin_manager.c: 91: WPUB = 0x00;
 19239  14B8  01C4               	clrf	68	;volatile
 19240                           
 19241                           ;pin_manager.c: 92: WPUA = 0x00;
 19242  14B9  01B9               	clrf	57	;volatile
 19243                           
 19244                           ;pin_manager.c: 93: WPUC = 0x00;
 19245  14BA  01CF               	clrf	79	;volatile
 19246                           
 19247                           ;pin_manager.c: 98: ODCONE = 0x00;
 19248  14BB  01E6               	clrf	102	;volatile
 19249                           
 19250                           ;pin_manager.c: 99: ODCONA = 0x00;
 19251  14BC  01BA               	clrf	58	;volatile
 19252                           
 19253                           ;pin_manager.c: 100: ODCONB = 0x00;
 19254  14BD  01C5               	clrf	69	;volatile
 19255                           
 19256                           ;pin_manager.c: 101: ODCONC = 0x00;
 19257  14BE  01D0               	clrf	80	;volatile
 19258                           
 19259                           ;pin_manager.c: 102: ODCOND = 0x00;
 19260  14BF  01DB               	clrf	91	;volatile
 19261  14C0                     l6876:
 19262                           
 19263                           ;pin_manager.c: 107: SLRCONA = 0xFF;
 19264  14C0  30FF               	movlw	255
 19265  14C1  00BB               	movwf	59	;volatile
 19266  14C2                     l6878:
 19267                           
 19268                           ;pin_manager.c: 108: SLRCONB = 0xFF;
 19269  14C2  30FF               	movlw	255
 19270  14C3  00C6               	movwf	70	;volatile
 19271  14C4                     l6880:
 19272                           
 19273                           ;pin_manager.c: 109: SLRCONC = 0xFF;
 19274  14C4  30FF               	movlw	255
 19275  14C5  00D1               	movwf	81	;volatile
 19276  14C6                     l6882:
 19277                           
 19278                           ;pin_manager.c: 110: SLRCOND = 0xFF;
 19279  14C6  30FF               	movlw	255
 19280  14C7  00DC               	movwf	92	;volatile
 19281  14C8                     l6884:
 19282                           
 19283                           ;pin_manager.c: 111: SLRCONE = 0x07;
 19284  14C8  3007               	movlw	7
 19285  14C9  00E7               	movwf	103	;volatile
 19286  14CA                     l6886:
 19287                           
 19288                           ;pin_manager.c: 120: INTPPS = 0x0C;
 19289  14CA  300C               	movlw	12
 19290  14CB  003D               	movlb	29	; select bank29
 19291  14CC  0090               	movwf	16	;volatile
 19292  14CD                     l6888:
 19293                           
 19294                           ;pin_manager.c: 121: RXPPS = 0x17;
 19295  14CD  3017               	movlw	23
 19296  14CE  00CB               	movwf	75	;volatile
 19297  14CF                     l6890:
 19298                           
 19299                           ;pin_manager.c: 122: SSP1CLKPPS = 0x13;
 19300  14CF  3013               	movlw	19
 19301  14D0  00C5               	movwf	69	;volatile
 19302  14D1                     l6892:
 19303                           
 19304                           ;pin_manager.c: 123: RC3PPS = 0x14;
 19305  14D1  3014               	movlw	20
 19306  14D2  003E               	movlb	30	; select bank30
 19307  14D3  00A3               	movwf	35	;volatile
 19308  14D4                     l6894:
 19309                           
 19310                           ;pin_manager.c: 124: RC4PPS = 0x15;
 19311  14D4  3015               	movlw	21
 19312  14D5  00A4               	movwf	36	;volatile
 19313  14D6                     l6896:
 19314                           
 19315                           ;pin_manager.c: 125: RA6PPS = 0x0E;
 19316  14D6  300E               	movlw	14
 19317  14D7  0096               	movwf	22	;volatile
 19318  14D8                     l6898:
 19319                           
 19320                           ;pin_manager.c: 126: RC6PPS = 0x10;
 19321  14D8  3010               	movlw	16
 19322  14D9  00A6               	movwf	38	;volatile
 19323  14DA                     l6900:
 19324                           
 19325                           ;pin_manager.c: 127: SSP1DATPPS = 0x14;
 19326  14DA  3014               	movlw	20
 19327  14DB  003D               	movlb	29	; select bank29
 19328  14DC  00C6               	movwf	70	;volatile
 19329  14DD                     l128:
 19330  14DD  0008               	return
 19331  14DE                     __end_of_PIN_MANAGER_Initialize:
 19332                           
 19333                           	psect	text60
 19334  1F2A                     __ptext60:	
 19335 ;; *************** function _OSCILLATOR_Initialize *****************
 19336 ;; Defined at:
 19337 ;;		line 63 in file "mcc_generated_files/mcc.c"
 19338 ;; Parameters:    Size  Location     Type
 19339 ;;		None
 19340 ;; Auto vars:     Size  Location     Type
 19341 ;;		None
 19342 ;; Return value:  Size  Location     Type
 19343 ;;                  1    wreg      void 
 19344 ;; Registers used:
 19345 ;;		wreg, status,2
 19346 ;; Tracked objects:
 19347 ;;		On entry : 0/0
 19348 ;;		On exit  : 0/0
 19349 ;;		Unchanged: 0/0
 19350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19355 ;;Total ram usage:        0 bytes
 19356 ;; Hardware stack levels used:    1
 19357 ;; Hardware stack levels required when called:    4
 19358 ;; This function calls:
 19359 ;;		Nothing
 19360 ;; This function is called by:
 19361 ;;		_SYSTEM_Initialize
 19362 ;; This function uses a non-reentrant model
 19363 ;;
 19364                           
 19365                           
 19366                           ;psect for function _OSCILLATOR_Initialize
 19367  1F2A                     _OSCILLATOR_Initialize:
 19368  1F2A                     l6904:	
 19369                           ;incstack = 0
 19370                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 19371                           
 19372                           
 19373                           ;mcc.c: 66: OSCCON1 = 0x62;
 19374  1F2A  3062               	movlw	98
 19375  1F2B  0031               	movlb	17	; select bank17
 19376  1F2C  008D               	movwf	13	;volatile
 19377  1F2D                     l6906:
 19378                           
 19379                           ;mcc.c: 68: OSCCON3 = 0x00;
 19380  1F2D  018F               	clrf	15	;volatile
 19381  1F2E                     l6908:
 19382                           
 19383                           ;mcc.c: 70: OSCEN = 0x00;
 19384  1F2E  0191               	clrf	17	;volatile
 19385                           
 19386                           ;mcc.c: 72: OSCFRQ = 0x02;
 19387  1F2F  3002               	movlw	2
 19388  1F30  0093               	movwf	19	;volatile
 19389  1F31                     l6910:
 19390                           
 19391                           ;mcc.c: 74: OSCTUNE = 0x00;
 19392  1F31  0192               	clrf	18	;volatile
 19393  1F32                     l185:
 19394  1F32  0008               	return
 19395  1F33                     __end_of_OSCILLATOR_Initialize:
 19396                           
 19397                           	psect	text61
 19398  1F6B                     __ptext61:	
 19399 ;; *************** function _EXT_INT_Initialize *****************
 19400 ;; Defined at:
 19401 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 19402 ;; Parameters:    Size  Location     Type
 19403 ;;		None
 19404 ;; Auto vars:     Size  Location     Type
 19405 ;;		None
 19406 ;; Return value:  Size  Location     Type
 19407 ;;                  1    wreg      void 
 19408 ;; Registers used:
 19409 ;;		wreg, status,2, status,0, pclath, cstack
 19410 ;; Tracked objects:
 19411 ;;		On entry : 0/0
 19412 ;;		On exit  : 0/0
 19413 ;;		Unchanged: 0/0
 19414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19419 ;;Total ram usage:        0 bytes
 19420 ;; Hardware stack levels used:    1
 19421 ;; Hardware stack levels required when called:    5
 19422 ;; This function calls:
 19423 ;;		_INT_SetInterruptHandler
 19424 ;; This function is called by:
 19425 ;;		_SYSTEM_Initialize
 19426 ;; This function uses a non-reentrant model
 19427 ;;
 19428                           
 19429                           
 19430                           ;psect for function _EXT_INT_Initialize
 19431  1F6B                     _EXT_INT_Initialize:
 19432  1F6B                     l6952:	
 19433                           ;incstack = 0
 19434                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 19435                           
 19436                           
 19437                           ;ext_int.c: 64: (PIR0bits.INTF = 0);
 19438  1F6B  002E               	movlb	14	; select bank14
 19439  1F6C  100C               	bcf	12,0	;volatile
 19440                           
 19441                           ;ext_int.c: 66: (INTCONbits.INTEDG = 1);
 19442  1F6D  140B               	bsf	11,0	;volatile
 19443  1F6E                     l6954:
 19444                           
 19445                           ;ext_int.c: 68: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
 19446  1F6E  3002               	movlw	low _INT_DefaultInterruptHandler
 19447  1F6F  0020               	movlb	0	; select bank0
 19448  1F70  00A7               	movwf	INT_SetInterruptHandler@InterruptHandler
 19449  1F71  3000               	movlw	high _INT_DefaultInterruptHandler
 19450  1F72  00A8               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 19451  1F73  319F  2721  319F   	fcall	_INT_SetInterruptHandler
 19452  1F76                     l6956:
 19453                           
 19454                           ;ext_int.c: 69: (PIE0bits.INTE = 1);
 19455  1F76  002E               	movlb	14	; select bank14
 19456  1F77  1416               	bsf	22,0	;volatile
 19457  1F78                     l760:
 19458  1F78  0008               	return
 19459  1F79                     __end_of_EXT_INT_Initialize:
 19460                           
 19461                           	psect	text62
 19462  1F21                     __ptext62:	
 19463 ;; *************** function _INT_SetInterruptHandler *****************
 19464 ;; Defined at:
 19465 ;;		line 50 in file "mcc_generated_files/ext_int.c"
 19466 ;; Parameters:    Size  Location     Type
 19467 ;;  InterruptHan    2    7[BANK0 ] PTR FTN()void 
 19468 ;;		 -> S1_ISR(1), INT_DefaultInterruptHandler(1), 
 19469 ;; Auto vars:     Size  Location     Type
 19470 ;;		None
 19471 ;; Return value:  Size  Location     Type
 19472 ;;                  1    wreg      void 
 19473 ;; Registers used:
 19474 ;;		wreg
 19475 ;; Tracked objects:
 19476 ;;		On entry : 0/0
 19477 ;;		On exit  : 0/0
 19478 ;;		Unchanged: 0/0
 19479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19480 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19484 ;;Total ram usage:        2 bytes
 19485 ;; Hardware stack levels used:    1
 19486 ;; Hardware stack levels required when called:    4
 19487 ;; This function calls:
 19488 ;;		Nothing
 19489 ;; This function is called by:
 19490 ;;		_EXT_INT_Initialize
 19491 ;;		_main
 19492 ;; This function uses a non-reentrant model
 19493 ;;
 19494                           
 19495                           
 19496                           ;psect for function _INT_SetInterruptHandler
 19497  1F21                     _INT_SetInterruptHandler:
 19498  1F21                     l6602:	
 19499                           ;incstack = 0
 19500                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 19501                           
 19502                           
 19503                           ;ext_int.c: 51: INT_InterruptHandler = InterruptHandler;
 19504  1F21  0020               	movlb	0	; select bank0
 19505  1F22  0828               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 19506  1F23  0022               	movlb	2	; select bank2
 19507  1F24  00DC               	movwf	(_INT_InterruptHandler+1)^(0+256)
 19508  1F25  0020               	movlb	0	; select bank0
 19509  1F26  0827               	movf	INT_SetInterruptHandler@InterruptHandler,w
 19510  1F27  0022               	movlb	2	; select bank2
 19511  1F28  00DB               	movwf	_INT_InterruptHandler^(0+256)
 19512  1F29                     l754:
 19513  1F29  0008               	return
 19514  1F2A                     __end_of_INT_SetInterruptHandler:
 19515                           
 19516                           	psect	text63
 19517  1283                     __ptext63:	
 19518 ;; *************** function _EUSART_Initialize *****************
 19519 ;; Defined at:
 19520 ;;		line 75 in file "mcc_generated_files/eusart.c"
 19521 ;; Parameters:    Size  Location     Type
 19522 ;;		None
 19523 ;; Auto vars:     Size  Location     Type
 19524 ;;		None
 19525 ;; Return value:  Size  Location     Type
 19526 ;;                  1    wreg      void 
 19527 ;; Registers used:
 19528 ;;		wreg, status,2, status,0, pclath, cstack
 19529 ;; Tracked objects:
 19530 ;;		On entry : 0/0
 19531 ;;		On exit  : 0/0
 19532 ;;		Unchanged: 0/0
 19533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19537 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19538 ;;Total ram usage:        1 bytes
 19539 ;; Hardware stack levels used:    1
 19540 ;; Hardware stack levels required when called:    5
 19541 ;; This function calls:
 19542 ;;		_EUSART_SetRxInterruptHandler
 19543 ;;		_EUSART_SetTxInterruptHandler
 19544 ;; This function is called by:
 19545 ;;		_SYSTEM_Initialize
 19546 ;; This function uses a non-reentrant model
 19547 ;;
 19548                           
 19549                           
 19550                           ;psect for function _EUSART_Initialize
 19551  1283                     _EUSART_Initialize:
 19552  1283                     l6958:	
 19553                           ;incstack = 0
 19554                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 19555                           
 19556                           
 19557                           ;eusart.c: 78: PIE3bits.RCIE = 0;
 19558  1283  002E               	movlb	14	; select bank14
 19559  1284  1299               	bcf	25,5	;volatile
 19560  1285                     l6960:
 19561                           
 19562                           ;eusart.c: 79: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 19563  1285  303E               	movlw	low _EUSART_Receive_ISR
 19564  1286  0020               	movlb	0	; select bank0
 19565  1287  00A7               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 19566  1288  3011               	movlw	high _EUSART_Receive_ISR
 19567  1289  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 19568  128A  319F  270F  3192   	fcall	_EUSART_SetRxInterruptHandler
 19569  128D                     l6962:
 19570                           
 19571                           ;eusart.c: 80: PIE3bits.TXIE = 0;
 19572  128D  002E               	movlb	14	; select bank14
 19573  128E  1219               	bcf	25,4	;volatile
 19574                           
 19575                           ;eusart.c: 81: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
 19576  128F  3080               	movlw	low _EUSART_Transmit_ISR
 19577  1290  0020               	movlb	0	; select bank0
 19578  1291  00A7               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 19579  1292  3011               	movlw	high _EUSART_Transmit_ISR
 19580  1293  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 19581  1294  319F  2718  3192   	fcall	_EUSART_SetTxInterruptHandler
 19582  1297                     l6964:
 19583                           
 19584                           ;eusart.c: 85: BAUD1CON = 0x08;
 19585  1297  3008               	movlw	8
 19586  1298  0022               	movlb	2	; select bank2
 19587  1299  009F               	movwf	31	;volatile
 19588  129A                     l6966:
 19589                           
 19590                           ;eusart.c: 88: RC1STA = 0x90;
 19591  129A  3090               	movlw	144
 19592  129B  009D               	movwf	29	;volatile
 19593  129C                     l6968:
 19594                           
 19595                           ;eusart.c: 91: TX1STA = 0x24;
 19596  129C  3024               	movlw	36
 19597  129D  009E               	movwf	30	;volatile
 19598  129E                     l6970:
 19599                           
 19600                           ;eusart.c: 94: SP1BRGL = 0x19;
 19601  129E  3019               	movlw	25
 19602  129F  009B               	movwf	27	;volatile
 19603  12A0                     l6972:
 19604                           
 19605                           ;eusart.c: 97: SP1BRGH = 0x00;
 19606  12A0  019C               	clrf	28	;volatile
 19607  12A1                     l6974:
 19608                           
 19609                           ;eusart.c: 101: eusartTxHead = 0;
 19610  12A1  0021               	movlb	1	; select bank1
 19611  12A2  01BB               	clrf	_eusartTxHead^(0+128)	;volatile
 19612  12A3                     l6976:
 19613                           
 19614                           ;eusart.c: 102: eusartTxTail = 0;
 19615  12A3  01BA               	clrf	_eusartTxTail^(0+128)	;volatile
 19616  12A4                     l6978:
 19617                           
 19618                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 19619  12A4  3040               	movlw	64
 19620  12A5  0020               	movlb	0	; select bank0
 19621  12A6  00A9               	movwf	??_EUSART_Initialize
 19622  12A7  0829               	movf	??_EUSART_Initialize,w
 19623  12A8  0021               	movlb	1	; select bank1
 19624  12A9  00DA               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
 19625  12AA                     l6980:
 19626                           
 19627                           ;eusart.c: 105: eusartRxHead = 0;
 19628  12AA  01B9               	clrf	_eusartRxHead^(0+128)	;volatile
 19629  12AB                     l6982:
 19630                           
 19631                           ;eusart.c: 106: eusartRxTail = 0;
 19632  12AB  01B8               	clrf	_eusartRxTail^(0+128)	;volatile
 19633  12AC                     l6984:
 19634                           
 19635                           ;eusart.c: 107: eusartRxCount = 0;
 19636  12AC  01B7               	clrf	_eusartRxCount^(0+128)	;volatile
 19637  12AD                     l6986:
 19638                           
 19639                           ;eusart.c: 110: PIE3bits.RCIE = 1;
 19640  12AD  002E               	movlb	14	; select bank14
 19641  12AE  1699               	bsf	25,5	;volatile
 19642  12AF                     l811:
 19643  12AF  0008               	return
 19644  12B0                     __end_of_EUSART_Initialize:
 19645                           
 19646                           	psect	text64
 19647  1F18                     __ptext64:	
 19648 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 19649 ;; Defined at:
 19650 ;;		line 220 in file "mcc_generated_files/eusart.c"
 19651 ;; Parameters:    Size  Location     Type
 19652 ;;  interruptHan    2    7[BANK0 ] PTR FTN()void 
 19653 ;;		 -> EUSART_Transmit_ISR(1), 
 19654 ;; Auto vars:     Size  Location     Type
 19655 ;;		None
 19656 ;; Return value:  Size  Location     Type
 19657 ;;                  1    wreg      void 
 19658 ;; Registers used:
 19659 ;;		wreg
 19660 ;; Tracked objects:
 19661 ;;		On entry : 0/0
 19662 ;;		On exit  : 0/0
 19663 ;;		Unchanged: 0/0
 19664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19665 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19669 ;;Total ram usage:        2 bytes
 19670 ;; Hardware stack levels used:    1
 19671 ;; Hardware stack levels required when called:    4
 19672 ;; This function calls:
 19673 ;;		Nothing
 19674 ;; This function is called by:
 19675 ;;		_EUSART_Initialize
 19676 ;; This function uses a non-reentrant model
 19677 ;;
 19678                           
 19679                           
 19680                           ;psect for function _EUSART_SetTxInterruptHandler
 19681  1F18                     _EUSART_SetTxInterruptHandler:
 19682  1F18                     l6606:	
 19683                           ;incstack = 0
 19684                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 19685                           
 19686                           
 19687                           ;eusart.c: 221: EUSART_TxDefaultInterruptHandler = interruptHandler;
 19688  1F18  0020               	movlb	0	; select bank0
 19689  1F19  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 19690  1F1A  0022               	movlb	2	; select bank2
 19691  1F1B  00E2               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
 19692  1F1C  0020               	movlb	0	; select bank0
 19693  1F1D  0827               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 19694  1F1E  0022               	movlb	2	; select bank2
 19695  1F1F  00E1               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
 19696  1F20                     l856:
 19697  1F20  0008               	return
 19698  1F21                     __end_of_EUSART_SetTxInterruptHandler:
 19699                           
 19700                           	psect	text65
 19701  1F0F                     __ptext65:	
 19702 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 19703 ;; Defined at:
 19704 ;;		line 224 in file "mcc_generated_files/eusart.c"
 19705 ;; Parameters:    Size  Location     Type
 19706 ;;  interruptHan    2    7[BANK0 ] PTR FTN()void 
 19707 ;;		 -> EUSART_Receive_ISR(1), 
 19708 ;; Auto vars:     Size  Location     Type
 19709 ;;		None
 19710 ;; Return value:  Size  Location     Type
 19711 ;;                  1    wreg      void 
 19712 ;; Registers used:
 19713 ;;		wreg
 19714 ;; Tracked objects:
 19715 ;;		On entry : 0/0
 19716 ;;		On exit  : 0/0
 19717 ;;		Unchanged: 0/0
 19718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19719 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19723 ;;Total ram usage:        2 bytes
 19724 ;; Hardware stack levels used:    1
 19725 ;; Hardware stack levels required when called:    4
 19726 ;; This function calls:
 19727 ;;		Nothing
 19728 ;; This function is called by:
 19729 ;;		_EUSART_Initialize
 19730 ;; This function uses a non-reentrant model
 19731 ;;
 19732                           
 19733                           
 19734                           ;psect for function _EUSART_SetRxInterruptHandler
 19735  1F0F                     _EUSART_SetRxInterruptHandler:
 19736  1F0F                     l6604:	
 19737                           ;incstack = 0
 19738                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 19739                           
 19740                           
 19741                           ;eusart.c: 225: EUSART_RxDefaultInterruptHandler = interruptHandler;
 19742  1F0F  0020               	movlb	0	; select bank0
 19743  1F10  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 19744  1F11  0022               	movlb	2	; select bank2
 19745  1F12  00E0               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
 19746  1F13  0020               	movlb	0	; select bank0
 19747  1F14  0827               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 19748  1F15  0022               	movlb	2	; select bank2
 19749  1F16  00DF               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
 19750  1F17                     l859:
 19751  1F17  0008               	return
 19752  1F18                     __end_of_EUSART_SetRxInterruptHandler:
 19753                           
 19754                           	psect	text66
 19755  1001                     __ptext66:	
 19756 ;; *************** function _ADCC_Initialize *****************
 19757 ;; Defined at:
 19758 ;;		line 63 in file "mcc_generated_files/adcc.c"
 19759 ;; Parameters:    Size  Location     Type
 19760 ;;		None
 19761 ;; Auto vars:     Size  Location     Type
 19762 ;;		None
 19763 ;; Return value:  Size  Location     Type
 19764 ;;                  1    wreg      void 
 19765 ;; Registers used:
 19766 ;;		wreg, status,2
 19767 ;; Tracked objects:
 19768 ;;		On entry : 0/0
 19769 ;;		On exit  : 0/0
 19770 ;;		Unchanged: 0/0
 19771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19776 ;;Total ram usage:        0 bytes
 19777 ;; Hardware stack levels used:    1
 19778 ;; Hardware stack levels required when called:    4
 19779 ;; This function calls:
 19780 ;;		Nothing
 19781 ;; This function is called by:
 19782 ;;		_SYSTEM_Initialize
 19783 ;; This function uses a non-reentrant model
 19784 ;;
 19785                           
 19786                           
 19787                           ;psect for function _ADCC_Initialize
 19788  1001                     _ADCC_Initialize:
 19789  1001                     l6916:	
 19790                           ;incstack = 0
 19791                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 19792                           
 19793                           
 19794                           ;adcc.c: 67: ADLTHL = 0x00;
 19795  1001  0022               	movlb	2	; select bank2
 19796  1002  018E               	clrf	14	;volatile
 19797                           
 19798                           ;adcc.c: 69: ADLTHH = 0x00;
 19799  1003  018F               	clrf	15	;volatile
 19800                           
 19801                           ;adcc.c: 71: ADUTHL = 0x00;
 19802  1004  0190               	clrf	16	;volatile
 19803                           
 19804                           ;adcc.c: 73: ADUTHH = 0x00;
 19805  1005  0191               	clrf	17	;volatile
 19806                           
 19807                           ;adcc.c: 75: ADSTPTL = 0x00;
 19808  1006  0192               	clrf	18	;volatile
 19809                           
 19810                           ;adcc.c: 77: ADSTPTH = 0x00;
 19811  1007  0193               	clrf	19	;volatile
 19812                           
 19813                           ;adcc.c: 79: ADRPT = 0x00;
 19814  1008  018D               	clrf	13	;volatile
 19815                           
 19816                           ;adcc.c: 81: ADPCH = 0x00;
 19817  1009  0021               	movlb	1	; select bank1
 19818  100A  019E               	clrf	30	;volatile
 19819                           
 19820                           ;adcc.c: 83: ADCAP = 0x00;
 19821  100B  019B               	clrf	27	;volatile
 19822                           
 19823                           ;adcc.c: 85: ADCON1 = 0x00;
 19824  100C  0194               	clrf	20	;volatile
 19825                           
 19826                           ;adcc.c: 87: ADCON2 = 0x00;
 19827  100D  0195               	clrf	21	;volatile
 19828                           
 19829                           ;adcc.c: 89: ADCON3 = 0x00;
 19830  100E  0196               	clrf	22	;volatile
 19831                           
 19832                           ;adcc.c: 91: ADSTAT = 0x00;
 19833  100F  0197               	clrf	23	;volatile
 19834                           
 19835                           ;adcc.c: 93: ADREF = 0x00;
 19836  1010  019A               	clrf	26	;volatile
 19837                           
 19838                           ;adcc.c: 95: ADACT = 0x00;
 19839  1011  0199               	clrf	25	;volatile
 19840                           
 19841                           ;adcc.c: 97: ADCLK = 0x00;
 19842  1012  0198               	clrf	24	;volatile
 19843  1013                     l6918:
 19844                           
 19845                           ;adcc.c: 99: ADCON0 = 0x80;
 19846  1013  3080               	movlw	128
 19847  1014  0093               	movwf	19	;volatile
 19848  1015                     l6920:
 19849                           
 19850                           ;adcc.c: 101: ADACQ = 0xFF;
 19851  1015  30FF               	movlw	255
 19852  1016  009D               	movwf	29	;volatile
 19853  1017                     l525:
 19854  1017  0008               	return
 19855  1018                     __end_of_ADCC_Initialize:
 19856                           
 19857                           	psect	text67
 19858  1712                     __ptext67:	
 19859 ;; *************** function _LCDinit *****************
 19860 ;; Defined at:
 19861 ;;		line 288 in file "main.c"
 19862 ;; Parameters:    Size  Location     Type
 19863 ;;		None
 19864 ;; Auto vars:     Size  Location     Type
 19865 ;;		None
 19866 ;; Return value:  Size  Location     Type
 19867 ;;                  1    wreg      void 
 19868 ;; Registers used:
 19869 ;;		wreg, status,2, status,0, pclath, cstack
 19870 ;; Tracked objects:
 19871 ;;		On entry : 0/0
 19872 ;;		On exit  : 0/0
 19873 ;;		Unchanged: 0/0
 19874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19878 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19879 ;;Total ram usage:        1 bytes
 19880 ;; Hardware stack levels used:    1
 19881 ;; Hardware stack levels required when called:    6
 19882 ;; This function calls:
 19883 ;;		_LCDsend
 19884 ;;		_LCDsend2x4
 19885 ;; This function is called by:
 19886 ;;		_main
 19887 ;; This function uses a non-reentrant model
 19888 ;;
 19889                           
 19890                           
 19891                           ;psect for function _LCDinit
 19892  1712                     _LCDinit:
 19893  1712                     l7214:	
 19894                           ;incstack = 0
 19895                           ; Regs used in _LCDinit: [wreg+status,2+status,0+pclath+cstack]
 19896                           
 19897                           
 19898                           ;main.c: 290: _delay((unsigned long)((50)*(1000000/4000.0)));
 19899  1712  3011               	movlw	17
 19900  1713  0020               	movlb	0	; select bank0
 19901  1714  00AF               	movwf	??_LCDinit
 19902  1715  303A               	movlw	58
 19903  1716                     u9597:
 19904  1716  0B89               	decfsz	9,f
 19905  1717  2F16               	goto	u9597
 19906  1718  0BAF               	decfsz	??_LCDinit,f
 19907  1719  2F16               	goto	u9597
 19908  171A  0000               	nop
 19909  171B                     l7216:
 19910                           
 19911                           ;main.c: 291: LCDsend(0x30);
 19912  171B  3030               	movlw	48
 19913  171C  3194  24DE  3197   	fcall	_LCDsend
 19914  171F                     l7218:
 19915                           
 19916                           ;main.c: 292: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19917  171F  3034               	movlw	52
 19918  1720  3194  24DE  3197   	fcall	_LCDsend
 19919  1723  3029               	movlw	41
 19920  1724                     u9607:
 19921  1724  0B89               	decfsz	9,f
 19922  1725  2F24               	goto	u9607
 19923  1726  3200               	nop2
 19924  1727                     l7220:
 19925  1727  3030               	movlw	48
 19926  1728  3194  24DE  3197   	fcall	_LCDsend
 19927  172B                     l7222:
 19928                           
 19929                           ;main.c: 293: _delay((unsigned long)((5)*(1000000/4000.0)));
 19930  172B  30FA               	movlw	250
 19931  172C                     u9617:
 19932  172C  3200               	nop2
 19933  172D  0B89               	decfsz	9,f
 19934  172E  2F2C               	goto	u9617
 19935                           
 19936                           ;main.c: 294: LCDsend(0x30);
 19937  172F  3030               	movlw	48
 19938  1730  3194  24DE  3197   	fcall	_LCDsend
 19939                           
 19940                           ;main.c: 295: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19941  1733  3034               	movlw	52
 19942  1734  3194  24DE  3197   	fcall	_LCDsend
 19943  1737                     l7224:
 19944  1737  3029               	movlw	41
 19945  1738                     u9627:
 19946  1738  0B89               	decfsz	9,f
 19947  1739  2F38               	goto	u9627
 19948  173A  3200               	nop2
 19949  173B                     l7226:
 19950  173B  3030               	movlw	48
 19951  173C  3194  24DE  3197   	fcall	_LCDsend
 19952                           
 19953                           ;main.c: 296: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19954  173F  3008               	movlw	8
 19955  1740                     u9637:
 19956  1740  0B89               	decfsz	9,f
 19957  1741  2F40               	goto	u9637
 19958  1742  0000               	nop
 19959  1743                     l7228:
 19960                           
 19961                           ;main.c: 297: LCDsend(0x30);
 19962  1743  3030               	movlw	48
 19963  1744  3194  24DE  3197   	fcall	_LCDsend
 19964  1747                     l7230:
 19965                           
 19966                           ;main.c: 298: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19967  1747  3034               	movlw	52
 19968  1748  3194  24DE  3197   	fcall	_LCDsend
 19969  174B  3029               	movlw	41
 19970  174C                     u9647:
 19971  174C  0B89               	decfsz	9,f
 19972  174D  2F4C               	goto	u9647
 19973  174E  3200               	nop2
 19974  174F                     l7232:
 19975  174F  3030               	movlw	48
 19976  1750  3194  24DE  3197   	fcall	_LCDsend
 19977  1753                     l7234:
 19978                           
 19979                           ;main.c: 299: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19980  1753  3008               	movlw	8
 19981  1754                     u9657:
 19982  1754  0B89               	decfsz	9,f
 19983  1755  2F54               	goto	u9657
 19984  1756  0000               	nop
 19985                           
 19986                           ;main.c: 300: LCDsend(0x20);
 19987  1757  3020               	movlw	32
 19988  1758  3194  24DE  3197   	fcall	_LCDsend
 19989                           
 19990                           ;main.c: 301: LCDsend(0x24); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x20);
 19991  175B  3024               	movlw	36
 19992  175C  3194  24DE  3197   	fcall	_LCDsend
 19993  175F                     l7236:
 19994  175F  3029               	movlw	41
 19995  1760                     u9667:
 19996  1760  0B89               	decfsz	9,f
 19997  1761  2F60               	goto	u9667
 19998  1762  3200               	nop2
 19999  1763                     l7238:
 20000  1763  3020               	movlw	32
 20001  1764  3194  24DE  3197   	fcall	_LCDsend
 20002                           
 20003                           ;main.c: 302: _delay((unsigned long)((5)*(1000000/4000.0)));
 20004  1767  30FA               	movlw	250
 20005  1768                     u9677:
 20006  1768  3200               	nop2
 20007  1769  0B89               	decfsz	9,f
 20008  176A  2F68               	goto	u9677
 20009  176B                     l7240:
 20010                           
 20011                           ;main.c: 304: LCDsend2x4(0x28, 0);
 20012  176B  0020               	movlb	0	; select bank0
 20013  176C  01A9               	clrf	LCDsend2x4@mode
 20014  176D  3028               	movlw	40
 20015  176E  3189  213F  3197   	fcall	_LCDsend2x4
 20016  1771                     l7242:
 20017                           
 20018                           ;main.c: 305: LCDsend2x4(0x06, 0);
 20019  1771  0020               	movlb	0	; select bank0
 20020  1772  01A9               	clrf	LCDsend2x4@mode
 20021  1773  3006               	movlw	6
 20022  1774  3189  213F  3197   	fcall	_LCDsend2x4
 20023  1777                     l7244:
 20024                           
 20025                           ;main.c: 306: LCDsend2x4(0x0f, 0);
 20026  1777  0020               	movlb	0	; select bank0
 20027  1778  01A9               	clrf	LCDsend2x4@mode
 20028  1779  300F               	movlw	15
 20029  177A  3189  213F  3197   	fcall	_LCDsend2x4
 20030  177D                     l7246:
 20031                           
 20032                           ;main.c: 307: LCDsend2x4(0x01, 0);
 20033  177D  0020               	movlb	0	; select bank0
 20034  177E  01A9               	clrf	LCDsend2x4@mode
 20035  177F  3001               	movlw	1
 20036  1780  3189  213F  3197   	fcall	_LCDsend2x4
 20037                           
 20038                           ;main.c: 308: _delay((unsigned long)((2)*(1000000/4000.0)));
 20039  1783  30A6               	movlw	166
 20040  1784                     u9687:
 20041  1784  0B89               	decfsz	9,f
 20042  1785  2F84               	goto	u9687
 20043  1786  3200               	nop2
 20044  1787                     l1231:
 20045  1787  0008               	return
 20046  1788                     __end_of_LCDinit:
 20047                           
 20048                           	psect	text68
 20049  093F                     __ptext68:	
 20050 ;; *************** function _LCDsend2x4 *****************
 20051 ;; Defined at:
 20052 ;;		line 265 in file "main.c"
 20053 ;; Parameters:    Size  Location     Type
 20054 ;;  c               1    wreg     unsigned char 
 20055 ;;  mode            1    9[BANK0 ] unsigned char 
 20056 ;; Auto vars:     Size  Location     Type
 20057 ;;  c               1   12[BANK0 ] unsigned char 
 20058 ;;  lc              1   14[BANK0 ] unsigned char 
 20059 ;;  hc              1   13[BANK0 ] unsigned char 
 20060 ;; Return value:  Size  Location     Type
 20061 ;;                  1    wreg      void 
 20062 ;; Registers used:
 20063 ;;		wreg, status,2, status,0, pclath, cstack
 20064 ;; Tracked objects:
 20065 ;;		On entry : 0/0
 20066 ;;		On exit  : 0/0
 20067 ;;		Unchanged: 0/0
 20068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20069 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20070 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20071 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20072 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20073 ;;Total ram usage:        6 bytes
 20074 ;; Hardware stack levels used:    1
 20075 ;; Hardware stack levels required when called:    5
 20076 ;; This function calls:
 20077 ;;		_WriteI2C
 20078 ;; This function is called by:
 20079 ;;		_LCDinit
 20080 ;;		_LCDcmd
 20081 ;;		_LCDchar
 20082 ;; This function uses a non-reentrant model
 20083 ;;
 20084                           
 20085                           
 20086                           ;psect for function _LCDsend2x4
 20087  093F                     _LCDsend2x4:
 20088                           
 20089                           ;incstack = 0
 20090                           ; Regs used in _LCDsend2x4: [wreg+status,2+status,0+pclath+cstack]
 20091                           ;LCDsend2x4@c stored from wreg
 20092  093F  0020               	movlb	0	; select bank0
 20093  0940  00AC               	movwf	LCDsend2x4@c
 20094  0941                     l6228:
 20095                           
 20096                           ;main.c: 267: unsigned char hc;;main.c: 268: unsigned char lc;;main.c: 270: hc = c & 0xf
      +                          0;
 20097  0941  082C               	movf	LCDsend2x4@c,w
 20098  0942  39F0               	andlw	240
 20099  0943  00AA               	movwf	??_LCDsend2x4
 20100  0944  082A               	movf	??_LCDsend2x4,w
 20101  0945  00AD               	movwf	LCDsend2x4@hc
 20102  0946                     l6230:
 20103                           
 20104                           ;main.c: 271: lc = (c << 4) & 0xf0;
 20105  0946  082C               	movf	LCDsend2x4@c,w
 20106  0947  00AA               	movwf	??_LCDsend2x4
 20107  0948  3003               	movlw	3
 20108  0949                     u6785:
 20109  0949  35AA               	lslf	??_LCDsend2x4,f
 20110  094A  3EFF               	addlw	-1
 20111  094B  1D03               	skipz
 20112  094C  2949               	goto	u6785
 20113  094D  352A               	lslf	??_LCDsend2x4,w
 20114  094E  39F0               	andlw	240
 20115  094F  00AB               	movwf	??_LCDsend2x4+1
 20116  0950  082B               	movf	??_LCDsend2x4+1,w
 20117  0951  00AE               	movwf	LCDsend2x4@lc
 20118  0952                     l6232:	
 20119                           ;main.c: 273: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20120                           
 20121  0952  0023               	movlb	3	; select bank3
 20122  0953  0C0F               	rrf	15,w	;volatile
 20123  0954  0C89               	rrf	9,f
 20124  0955  3901               	andlw	1
 20125  0956  0020               	movlb	0	; select bank0
 20126  0957  00AA               	movwf	??_LCDsend2x4
 20127  0958  0023               	movlb	3	; select bank3
 20128  0959  0811               	movf	17,w	;volatile
 20129  095A  391F               	andlw	31
 20130  095B  0020               	movlb	0	; select bank0
 20131  095C  042A               	iorwf	??_LCDsend2x4,w
 20132  095D  1D03               	btfss	3,2
 20133  095E  2960               	goto	u6791
 20134  095F  2961               	goto	u6790
 20135  0960                     u6791:
 20136  0960  2952               	goto	l6232
 20137  0961                     u6790:
 20138  0961                     l1197:
 20139                           
 20140                           ;main.c: 274: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 20141  0961  0023               	movlb	3	; select bank3
 20142  0962  1411               	bsf	17,0	;volatile
 20143  0963                     l1198:
 20144  0963  1811               	btfsc	17,0	;volatile
 20145  0964  2966               	goto	u6801
 20146  0965  2967               	goto	u6800
 20147  0966                     u6801:
 20148  0966  2963               	goto	l1198
 20149  0967                     u6800:
 20150  0967                     l6234:
 20151  0967  0023               	movlb	3	; select bank3
 20152  0968  0C0F               	rrf	15,w	;volatile
 20153  0969  0C89               	rrf	9,f
 20154  096A  3901               	andlw	1
 20155  096B  0020               	movlb	0	; select bank0
 20156  096C  00AA               	movwf	??_LCDsend2x4
 20157  096D  0023               	movlb	3	; select bank3
 20158  096E  0811               	movf	17,w	;volatile
 20159  096F  391F               	andlw	31
 20160  0970  0020               	movlb	0	; select bank0
 20161  0971  042A               	iorwf	??_LCDsend2x4,w
 20162  0972  1D03               	btfss	3,2
 20163  0973  2975               	goto	u6811
 20164  0974  2976               	goto	u6810
 20165  0975                     u6811:
 20166  0975  2967               	goto	l6234
 20167  0976                     u6810:
 20168  0976                     l6236:
 20169                           
 20170                           ;main.c: 275: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20171  0976  304E               	movlw	78
 20172  0977  3195  2531  3189   	fcall	_WriteI2C
 20173  097A                     l6238:
 20174  097A  0023               	movlb	3	; select bank3
 20175  097B  0C0F               	rrf	15,w	;volatile
 20176  097C  0C89               	rrf	9,f
 20177  097D  3901               	andlw	1
 20178  097E  0020               	movlb	0	; select bank0
 20179  097F  00AA               	movwf	??_LCDsend2x4
 20180  0980  0023               	movlb	3	; select bank3
 20181  0981  0811               	movf	17,w	;volatile
 20182  0982  391F               	andlw	31
 20183  0983  0020               	movlb	0	; select bank0
 20184  0984  042A               	iorwf	??_LCDsend2x4,w
 20185  0985  1D03               	btfss	3,2
 20186  0986  2988               	goto	u6821
 20187  0987  2989               	goto	u6820
 20188  0988                     u6821:
 20189  0988  297A               	goto	l6238
 20190  0989                     u6820:
 20191  0989                     l6240:
 20192                           
 20193                           ;main.c: 276: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20194  0989  082D               	movf	LCDsend2x4@hc,w
 20195  098A  0429               	iorwf	LCDsend2x4@mode,w
 20196  098B  3808               	iorlw	8
 20197  098C  3195  2531  3189   	fcall	_WriteI2C
 20198  098F                     l6242:
 20199  098F  0023               	movlb	3	; select bank3
 20200  0990  0C0F               	rrf	15,w	;volatile
 20201  0991  0C89               	rrf	9,f
 20202  0992  3901               	andlw	1
 20203  0993  0020               	movlb	0	; select bank0
 20204  0994  00AA               	movwf	??_LCDsend2x4
 20205  0995  0023               	movlb	3	; select bank3
 20206  0996  0811               	movf	17,w	;volatile
 20207  0997  391F               	andlw	31
 20208  0998  0020               	movlb	0	; select bank0
 20209  0999  042A               	iorwf	??_LCDsend2x4,w
 20210  099A  1D03               	btfss	3,2
 20211  099B  299D               	goto	u6831
 20212  099C  299E               	goto	u6830
 20213  099D                     u6831:
 20214  099D  298F               	goto	l6242
 20215  099E                     u6830:
 20216  099E                     l6244:
 20217                           
 20218                           ;main.c: 277: WriteI2C(hc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 20219  099E  082D               	movf	LCDsend2x4@hc,w
 20220  099F  0429               	iorwf	LCDsend2x4@mode,w
 20221  09A0  380C               	iorlw	12
 20222  09A1  3195  2531  3189   	fcall	_WriteI2C
 20223  09A4                     l6246:
 20224  09A4  0023               	movlb	3	; select bank3
 20225  09A5  0C0F               	rrf	15,w	;volatile
 20226  09A6  0C89               	rrf	9,f
 20227  09A7  3901               	andlw	1
 20228  09A8  0020               	movlb	0	; select bank0
 20229  09A9  00AA               	movwf	??_LCDsend2x4
 20230  09AA  0023               	movlb	3	; select bank3
 20231  09AB  0811               	movf	17,w	;volatile
 20232  09AC  391F               	andlw	31
 20233  09AD  0020               	movlb	0	; select bank0
 20234  09AE  042A               	iorwf	??_LCDsend2x4,w
 20235  09AF  1D03               	btfss	3,2
 20236  09B0  29B2               	goto	u6841
 20237  09B1  29B3               	goto	u6840
 20238  09B2                     u6841:
 20239  09B2  29A4               	goto	l6246
 20240  09B3                     u6840:
 20241  09B3                     l1212:
 20242  09B3                     l6248:	
 20243                           ;main.c: 278: _delay((unsigned long)((1)*(1000000/4000000.0)));
 20244                           
 20245                           
 20246                           ;main.c: 279: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20247  09B3  0020               	movlb	0	; select bank0
 20248  09B4  082D               	movf	LCDsend2x4@hc,w
 20249  09B5  0429               	iorwf	LCDsend2x4@mode,w
 20250  09B6  3808               	iorlw	8
 20251  09B7  3195  2531  3189   	fcall	_WriteI2C
 20252  09BA                     l6250:
 20253  09BA  0023               	movlb	3	; select bank3
 20254  09BB  0C0F               	rrf	15,w	;volatile
 20255  09BC  0C89               	rrf	9,f
 20256  09BD  3901               	andlw	1
 20257  09BE  0020               	movlb	0	; select bank0
 20258  09BF  00AA               	movwf	??_LCDsend2x4
 20259  09C0  0023               	movlb	3	; select bank3
 20260  09C1  0811               	movf	17,w	;volatile
 20261  09C2  391F               	andlw	31
 20262  09C3  0020               	movlb	0	; select bank0
 20263  09C4  042A               	iorwf	??_LCDsend2x4,w
 20264  09C5  1D03               	btfss	3,2
 20265  09C6  29C8               	goto	u6851
 20266  09C7  29C9               	goto	u6850
 20267  09C8                     u6851:
 20268  09C8  29BA               	goto	l6250
 20269  09C9                     u6850:
 20270  09C9                     l6252:
 20271                           
 20272                           ;main.c: 280: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20273  09C9  082E               	movf	LCDsend2x4@lc,w
 20274  09CA  0429               	iorwf	LCDsend2x4@mode,w
 20275  09CB  3808               	iorlw	8
 20276  09CC  3195  2531  3189   	fcall	_WriteI2C
 20277  09CF                     l6254:
 20278  09CF  0023               	movlb	3	; select bank3
 20279  09D0  0C0F               	rrf	15,w	;volatile
 20280  09D1  0C89               	rrf	9,f
 20281  09D2  3901               	andlw	1
 20282  09D3  0020               	movlb	0	; select bank0
 20283  09D4  00AA               	movwf	??_LCDsend2x4
 20284  09D5  0023               	movlb	3	; select bank3
 20285  09D6  0811               	movf	17,w	;volatile
 20286  09D7  391F               	andlw	31
 20287  09D8  0020               	movlb	0	; select bank0
 20288  09D9  042A               	iorwf	??_LCDsend2x4,w
 20289  09DA  1D03               	btfss	3,2
 20290  09DB  29DD               	goto	u6861
 20291  09DC  29DE               	goto	u6860
 20292  09DD                     u6861:
 20293  09DD  29CF               	goto	l6254
 20294  09DE                     u6860:
 20295  09DE                     l6256:
 20296                           
 20297                           ;main.c: 281: WriteI2C(lc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 20298  09DE  082E               	movf	LCDsend2x4@lc,w
 20299  09DF  0429               	iorwf	LCDsend2x4@mode,w
 20300  09E0  380C               	iorlw	12
 20301  09E1  3195  2531  3189   	fcall	_WriteI2C
 20302  09E4                     l6258:
 20303  09E4  0023               	movlb	3	; select bank3
 20304  09E5  0C0F               	rrf	15,w	;volatile
 20305  09E6  0C89               	rrf	9,f
 20306  09E7  3901               	andlw	1
 20307  09E8  0020               	movlb	0	; select bank0
 20308  09E9  00AA               	movwf	??_LCDsend2x4
 20309  09EA  0023               	movlb	3	; select bank3
 20310  09EB  0811               	movf	17,w	;volatile
 20311  09EC  391F               	andlw	31
 20312  09ED  0020               	movlb	0	; select bank0
 20313  09EE  042A               	iorwf	??_LCDsend2x4,w
 20314  09EF  1D03               	btfss	3,2
 20315  09F0  29F2               	goto	u6871
 20316  09F1  29F3               	goto	u6870
 20317  09F2                     u6871:
 20318  09F2  29E4               	goto	l6258
 20319  09F3                     u6870:
 20320  09F3                     l1221:
 20321  09F3                     l6260:	
 20322                           ;main.c: 282: _delay((unsigned long)((1)*(1000000/4000000.0)));
 20323                           
 20324                           
 20325                           ;main.c: 283: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20326  09F3  0020               	movlb	0	; select bank0
 20327  09F4  082E               	movf	LCDsend2x4@lc,w
 20328  09F5  0429               	iorwf	LCDsend2x4@mode,w
 20329  09F6  3808               	iorlw	8
 20330  09F7  3195  2531  3189   	fcall	_WriteI2C
 20331  09FA                     l6262:
 20332  09FA  0023               	movlb	3	; select bank3
 20333  09FB  0C0F               	rrf	15,w	;volatile
 20334  09FC  0C89               	rrf	9,f
 20335  09FD  3901               	andlw	1
 20336  09FE  0020               	movlb	0	; select bank0
 20337  09FF  00AA               	movwf	??_LCDsend2x4
 20338  0A00  0023               	movlb	3	; select bank3
 20339  0A01  0811               	movf	17,w	;volatile
 20340  0A02  391F               	andlw	31
 20341  0A03  0020               	movlb	0	; select bank0
 20342  0A04  042A               	iorwf	??_LCDsend2x4,w
 20343  0A05  1D03               	btfss	3,2
 20344  0A06  2A08               	goto	u6881
 20345  0A07  2A09               	goto	u6880
 20346  0A08                     u6881:
 20347  0A08  29FA               	goto	l6262
 20348  0A09                     u6880:
 20349  0A09                     l1224:
 20350                           
 20351                           ;main.c: 284: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 20352  0A09  0023               	movlb	3	; select bank3
 20353  0A0A  1511               	bsf	17,2	;volatile
 20354  0A0B                     l1225:
 20355  0A0B  1911               	btfsc	17,2	;volatile
 20356  0A0C  2A0E               	goto	u6891
 20357  0A0D  2A0F               	goto	u6890
 20358  0A0E                     u6891:
 20359  0A0E  2A0B               	goto	l1225
 20360  0A0F                     u6890:
 20361  0A0F                     l6264:
 20362                           
 20363                           ;main.c: 285: _delay((unsigned long)((50)*(1000000/4000000.0)));
 20364  0A0F  3004               	movlw	4
 20365  0A10                     u9697:
 20366  0A10  0B89               	decfsz	9,f
 20367  0A11  2A10               	goto	u9697
 20368  0A12                     l1228:
 20369  0A12  0008               	return
 20370  0A13                     __end_of_LCDsend2x4:
 20371                           
 20372                           	psect	text69
 20373  14DE                     __ptext69:	
 20374 ;; *************** function _LCDsend *****************
 20375 ;; Defined at:
 20376 ;;		line 226 in file "main.c"
 20377 ;; Parameters:    Size  Location     Type
 20378 ;;  c               1    wreg     unsigned char 
 20379 ;; Auto vars:     Size  Location     Type
 20380 ;;  c               1   10[BANK0 ] unsigned char 
 20381 ;; Return value:  Size  Location     Type
 20382 ;;                  1    wreg      void 
 20383 ;; Registers used:
 20384 ;;		wreg, status,2, status,0, pclath, cstack
 20385 ;; Tracked objects:
 20386 ;;		On entry : 0/0
 20387 ;;		On exit  : 0/0
 20388 ;;		Unchanged: 0/0
 20389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20394 ;;Total ram usage:        2 bytes
 20395 ;; Hardware stack levels used:    1
 20396 ;; Hardware stack levels required when called:    5
 20397 ;; This function calls:
 20398 ;;		_WriteI2C
 20399 ;; This function is called by:
 20400 ;;		_LCDinit
 20401 ;; This function uses a non-reentrant model
 20402 ;;
 20403                           
 20404                           
 20405                           ;psect for function _LCDsend
 20406  14DE                     _LCDsend:
 20407                           
 20408                           ;incstack = 0
 20409                           ; Regs used in _LCDsend: [wreg+status,2+status,0+pclath+cstack]
 20410                           ;LCDsend@c stored from wreg
 20411  14DE  0020               	movlb	0	; select bank0
 20412  14DF  00AA               	movwf	LCDsend@c
 20413  14E0                     l7026:
 20414  14E0                     l7028:	
 20415                           ;main.c: 228: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20416                           
 20417  14E0  0023               	movlb	3	; select bank3
 20418  14E1  0C0F               	rrf	15,w	;volatile
 20419  14E2  0C89               	rrf	9,f
 20420  14E3  3901               	andlw	1
 20421  14E4  0020               	movlb	0	; select bank0
 20422  14E5  00A9               	movwf	??_LCDsend
 20423  14E6  0023               	movlb	3	; select bank3
 20424  14E7  0811               	movf	17,w	;volatile
 20425  14E8  391F               	andlw	31
 20426  14E9  0020               	movlb	0	; select bank0
 20427  14EA  0429               	iorwf	??_LCDsend,w
 20428  14EB  1D03               	btfss	3,2
 20429  14EC  2CEE               	goto	u8191
 20430  14ED  2CEF               	goto	u8190
 20431  14EE                     u8191:
 20432  14EE  2CE0               	goto	l7028
 20433  14EF                     u8190:
 20434  14EF                     l1095:
 20435                           
 20436                           ;main.c: 229: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 20437  14EF  0023               	movlb	3	; select bank3
 20438  14F0  1411               	bsf	17,0	;volatile
 20439  14F1                     l1096:
 20440  14F1  1811               	btfsc	17,0	;volatile
 20441  14F2  2CF4               	goto	u8201
 20442  14F3  2CF5               	goto	u8200
 20443  14F4                     u8201:
 20444  14F4  2CF1               	goto	l1096
 20445  14F5                     u8200:
 20446  14F5                     l7030:
 20447  14F5  0023               	movlb	3	; select bank3
 20448  14F6  0C0F               	rrf	15,w	;volatile
 20449  14F7  0C89               	rrf	9,f
 20450  14F8  3901               	andlw	1
 20451  14F9  0020               	movlb	0	; select bank0
 20452  14FA  00A9               	movwf	??_LCDsend
 20453  14FB  0023               	movlb	3	; select bank3
 20454  14FC  0811               	movf	17,w	;volatile
 20455  14FD  391F               	andlw	31
 20456  14FE  0020               	movlb	0	; select bank0
 20457  14FF  0429               	iorwf	??_LCDsend,w
 20458  1500  1D03               	btfss	3,2
 20459  1501  2D03               	goto	u8211
 20460  1502  2D04               	goto	u8210
 20461  1503                     u8211:
 20462  1503  2CF5               	goto	l7030
 20463  1504                     u8210:
 20464  1504                     l7032:
 20465                           
 20466                           ;main.c: 230: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20467  1504  304E               	movlw	78
 20468  1505  3195  2531  3194   	fcall	_WriteI2C
 20469  1508                     l7034:
 20470  1508  0023               	movlb	3	; select bank3
 20471  1509  0C0F               	rrf	15,w	;volatile
 20472  150A  0C89               	rrf	9,f
 20473  150B  3901               	andlw	1
 20474  150C  0020               	movlb	0	; select bank0
 20475  150D  00A9               	movwf	??_LCDsend
 20476  150E  0023               	movlb	3	; select bank3
 20477  150F  0811               	movf	17,w	;volatile
 20478  1510  391F               	andlw	31
 20479  1511  0020               	movlb	0	; select bank0
 20480  1512  0429               	iorwf	??_LCDsend,w
 20481  1513  1D03               	btfss	3,2
 20482  1514  2D16               	goto	u8221
 20483  1515  2D17               	goto	u8220
 20484  1516                     u8221:
 20485  1516  2D08               	goto	l7034
 20486  1517                     u8220:
 20487  1517                     l7036:
 20488                           
 20489                           ;main.c: 231: WriteI2C(c); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20490  1517  082A               	movf	LCDsend@c,w
 20491  1518  3195  2531  3194   	fcall	_WriteI2C
 20492  151B                     l7038:
 20493  151B  0023               	movlb	3	; select bank3
 20494  151C  0C0F               	rrf	15,w	;volatile
 20495  151D  0C89               	rrf	9,f
 20496  151E  3901               	andlw	1
 20497  151F  0020               	movlb	0	; select bank0
 20498  1520  00A9               	movwf	??_LCDsend
 20499  1521  0023               	movlb	3	; select bank3
 20500  1522  0811               	movf	17,w	;volatile
 20501  1523  391F               	andlw	31
 20502  1524  0020               	movlb	0	; select bank0
 20503  1525  0429               	iorwf	??_LCDsend,w
 20504  1526  1D03               	btfss	3,2
 20505  1527  2D29               	goto	u8231
 20506  1528  2D2A               	goto	u8230
 20507  1529                     u8231:
 20508  1529  2D1B               	goto	l7038
 20509  152A                     u8230:
 20510  152A                     l1107:
 20511                           
 20512                           ;main.c: 232: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 20513  152A  0023               	movlb	3	; select bank3
 20514  152B  1511               	bsf	17,2	;volatile
 20515  152C                     l1108:
 20516  152C  1911               	btfsc	17,2	;volatile
 20517  152D  2D2F               	goto	u8241
 20518  152E  2D30               	goto	u8240
 20519  152F                     u8241:
 20520  152F  2D2C               	goto	l1108
 20521  1530                     u8240:
 20522  1530                     l1111:
 20523  1530  0008               	return
 20524  1531                     __end_of_LCDsend:
 20525                           
 20526                           	psect	text70
 20527  1531                     __ptext70:	
 20528 ;; *************** function _WriteI2C *****************
 20529 ;; Defined at:
 20530 ;;		line 47 in file "I2C/i2c.c"
 20531 ;; Parameters:    Size  Location     Type
 20532 ;;  data_out        1    wreg     unsigned char 
 20533 ;; Auto vars:     Size  Location     Type
 20534 ;;  data_out        1    8[BANK0 ] unsigned char 
 20535 ;; Return value:  Size  Location     Type
 20536 ;;                  1    wreg      char 
 20537 ;; Registers used:
 20538 ;;		wreg, status,2, status,0
 20539 ;; Tracked objects:
 20540 ;;		On entry : 0/0
 20541 ;;		On exit  : 0/0
 20542 ;;		Unchanged: 0/0
 20543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20547 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20548 ;;Total ram usage:        2 bytes
 20549 ;; Hardware stack levels used:    1
 20550 ;; Hardware stack levels required when called:    4
 20551 ;; This function calls:
 20552 ;;		Nothing
 20553 ;; This function is called by:
 20554 ;;		_tsttc
 20555 ;;		_LCDsend
 20556 ;;		_LCDsend2x4
 20557 ;;		_LCDrecv
 20558 ;; This function uses a non-reentrant model
 20559 ;;
 20560                           
 20561                           
 20562                           ;psect for function _WriteI2C
 20563  1531                     _WriteI2C:
 20564                           
 20565                           ;incstack = 0
 20566                           ; Regs used in _WriteI2C: [wreg+status,2+status,0]
 20567                           ;WriteI2C@data_out stored from wreg
 20568  1531  0020               	movlb	0	; select bank0
 20569  1532  00A8               	movwf	WriteI2C@data_out
 20570  1533                     l6198:
 20571                           
 20572                           ;i2c.c: 49: SSP1BUF = data_out;
 20573  1533  0828               	movf	WriteI2C@data_out,w
 20574  1534  0023               	movlb	3	; select bank3
 20575  1535  008C               	movwf	12	;volatile
 20576  1536                     l6200:
 20577                           
 20578                           ;i2c.c: 50: if ( SSP1CON1bits.WCOL )
 20579  1536  1F90               	btfss	16,7	;volatile
 20580  1537  2D39               	goto	u6691
 20581  1538  2D3A               	goto	u6690
 20582  1539                     u6691:
 20583  1539  2D3B               	goto	l6206
 20584  153A                     u6690:
 20585  153A  2D8A               	goto	l30
 20586  153B                     l6206:
 20587                           
 20588                           ;i2c.c: 52: else;i2c.c: 53: {;i2c.c: 54: if( ((SSP1CON1&0x0F)!=0x08) && ((SSP1CON1&0x0F)
      +                          !=0x0B) )
 20589  153B  300F               	movlw	15
 20590  153C  0510               	andwf	16,w	;volatile
 20591  153D  0020               	movlb	0	; select bank0
 20592  153E  00A7               	movwf	??_WriteI2C
 20593  153F  3008               	movlw	8
 20594  1540  0627               	xorwf	??_WriteI2C,w
 20595  1541  1903               	btfsc	3,2
 20596  1542  2D44               	goto	u6701
 20597  1543  2D45               	goto	u6700
 20598  1544                     u6701:
 20599  1544  2D5E               	goto	l6218
 20600  1545                     u6700:
 20601  1545                     l6208:
 20602  1545  300F               	movlw	15
 20603  1546  0023               	movlb	3	; select bank3
 20604  1547  0510               	andwf	16,w	;volatile
 20605  1548  0020               	movlb	0	; select bank0
 20606  1549  00A7               	movwf	??_WriteI2C
 20607  154A  300B               	movlw	11
 20608  154B  0627               	xorwf	??_WriteI2C,w
 20609  154C  1903               	btfsc	3,2
 20610  154D  2D4F               	goto	u6711
 20611  154E  2D50               	goto	u6710
 20612  154F                     u6711:
 20613  154F  2D5E               	goto	l6218
 20614  1550                     u6710:
 20615  1550                     l6210:
 20616                           
 20617                           ;i2c.c: 55: {;i2c.c: 56: SSP1CON1bits.CKP = 1;
 20618  1550  0023               	movlb	3	; select bank3
 20619  1551  1610               	bsf	16,4	;volatile
 20620  1552                     l33:	
 20621                           ;i2c.c: 57: while ( !PIR3bits.SSP1IF );
 20622                           
 20623  1552  002E               	movlb	14	; select bank14
 20624  1553  1C0F               	btfss	15,0	;volatile
 20625  1554  2D56               	goto	u6721
 20626  1555  2D57               	goto	u6720
 20627  1556                     u6721:
 20628  1556  2D52               	goto	l33
 20629  1557                     u6720:
 20630  1557                     l35:
 20631                           
 20632                           ;i2c.c: 59: if ( ( !SSP1STATbits.R_W ) && ( !SSP1STATbits.BF ) )
 20633  1557  0023               	movlb	3	; select bank3
 20634  1558  190F               	btfsc	15,2	;volatile
 20635  1559  2D5B               	goto	u6731
 20636  155A  2D5C               	goto	u6730
 20637  155B                     u6731:
 20638  155B  2D8A               	goto	l30
 20639  155C                     u6730:
 20640  155C                     l6212:
 20641  155C  080F               	movf	15,w	;volatile
 20642  155D  2D8A               	goto	l30
 20643  155E                     l6218:
 20644                           
 20645                           ;i2c.c: 68: else if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 20646  155E  300F               	movlw	15
 20647  155F  0023               	movlb	3	; select bank3
 20648  1560  0510               	andwf	16,w	;volatile
 20649  1561  0020               	movlb	0	; select bank0
 20650  1562  00A7               	movwf	??_WriteI2C
 20651  1563  3008               	movlw	8
 20652  1564  0627               	xorwf	??_WriteI2C,w
 20653  1565  1903               	btfsc	3,2
 20654  1566  2D68               	goto	u6741
 20655  1567  2D69               	goto	u6740
 20656  1568                     u6741:
 20657  1568  2D74               	goto	l42
 20658  1569                     u6740:
 20659  1569                     l6220:
 20660  1569  300F               	movlw	15
 20661  156A  0023               	movlb	3	; select bank3
 20662  156B  0510               	andwf	16,w	;volatile
 20663  156C  0020               	movlb	0	; select bank0
 20664  156D  00A7               	movwf	??_WriteI2C
 20665  156E  300B               	movlw	11
 20666  156F  0627               	xorwf	??_WriteI2C,w
 20667  1570  1D03               	btfss	3,2
 20668  1571  2D73               	goto	u6751
 20669  1572  2D74               	goto	u6750
 20670  1573                     u6751:
 20671  1573  2D8A               	goto	l30
 20672  1574                     u6750:
 20673  1574                     l42:
 20674  1574  0023               	movlb	3	; select bank3
 20675  1575  180F               	btfsc	15,0	;volatile
 20676  1576  2D78               	goto	u6761
 20677  1577  2D79               	goto	u6760
 20678  1578                     u6761:
 20679  1578  2D74               	goto	l42
 20680  1579                     u6760:
 20681  1579                     l6222:
 20682  1579  0023               	movlb	3	; select bank3
 20683  157A  0C0F               	rrf	15,w	;volatile
 20684  157B  0C89               	rrf	9,f
 20685  157C  3901               	andlw	1
 20686  157D  0020               	movlb	0	; select bank0
 20687  157E  00A7               	movwf	??_WriteI2C
 20688  157F  0023               	movlb	3	; select bank3
 20689  1580  0811               	movf	17,w	;volatile
 20690  1581  391F               	andlw	31
 20691  1582  0020               	movlb	0	; select bank0
 20692  1583  0427               	iorwf	??_WriteI2C,w
 20693  1584  1D03               	btfss	3,2
 20694  1585  2D87               	goto	u6771
 20695  1586  2D88               	goto	u6770
 20696  1587                     u6771:
 20697  1587  2D79               	goto	l6222
 20698  1588                     u6770:
 20699  1588                     l47:
 20700                           
 20701                           ;i2c.c: 72: if ( SSP1CON2bits.ACKSTAT )
 20702  1588  0023               	movlb	3	; select bank3
 20703  1589  0811               	movf	17,w	;volatile
 20704  158A                     l30:
 20705  158A  0008               	return
 20706  158B                     __end_of_WriteI2C:
 20707                           
 20708                           	psect	text71
 20709  1EC8                     __ptext71:	
 20710 ;; *************** function _EUSART_is_rx_ready *****************
 20711 ;; Defined at:
 20712 ;;		line 118 in file "mcc_generated_files/eusart.c"
 20713 ;; Parameters:    Size  Location     Type
 20714 ;;		None
 20715 ;; Auto vars:     Size  Location     Type
 20716 ;;		None
 20717 ;; Return value:  Size  Location     Type
 20718 ;;                  1    wreg      unsigned char 
 20719 ;; Registers used:
 20720 ;;		wreg
 20721 ;; Tracked objects:
 20722 ;;		On entry : 0/0
 20723 ;;		On exit  : 0/0
 20724 ;;		Unchanged: 0/0
 20725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20730 ;;Total ram usage:        0 bytes
 20731 ;; Hardware stack levels used:    1
 20732 ;; Hardware stack levels required when called:    4
 20733 ;; This function calls:
 20734 ;;		Nothing
 20735 ;; This function is called by:
 20736 ;;		_main
 20737 ;; This function uses a non-reentrant model
 20738 ;;
 20739                           
 20740                           
 20741                           ;psect for function _EUSART_is_rx_ready
 20742  1EC8                     _EUSART_is_rx_ready:
 20743  1EC8                     l7140:	
 20744                           ;incstack = 0
 20745                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 20746                           
 20747                           
 20748                           ;eusart.c: 120: return eusartRxCount;
 20749  1EC8  0021               	movlb	1	; select bank1
 20750  1EC9  0837               	movf	_eusartRxCount^(0+128),w	;volatile
 20751  1ECA                     l817:
 20752  1ECA  0008               	return
 20753  1ECB                     __end_of_EUSART_is_rx_ready:
 20754                           
 20755                           	psect	intentry
 20756  0004                     __pintentry:	
 20757 ;; *************** function _INTERRUPT_InterruptManager *****************
 20758 ;; Defined at:
 20759 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 20760 ;; Parameters:    Size  Location     Type
 20761 ;;		None
 20762 ;; Auto vars:     Size  Location     Type
 20763 ;;		None
 20764 ;; Return value:  Size  Location     Type
 20765 ;;                  1    wreg      void 
 20766 ;; Registers used:
 20767 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20768 ;; Tracked objects:
 20769 ;;		On entry : 0/0
 20770 ;;		On exit  : 0/0
 20771 ;;		Unchanged: 0/0
 20772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20777 ;;Total ram usage:        0 bytes
 20778 ;; Hardware stack levels used:    1
 20779 ;; Hardware stack levels required when called:    3
 20780 ;; This function calls:
 20781 ;;		Absolute function
 20782 ;;		_EUSART_Receive_ISR
 20783 ;;		_EUSART_Transmit_ISR
 20784 ;;		_INT_ISR
 20785 ;;		_TMR1_ISR
 20786 ;; This function is called by:
 20787 ;;		Interrupt level 1
 20788 ;; This function uses a non-reentrant model
 20789 ;;
 20790                           
 20791  0004                     _INTERRUPT_InterruptManager:
 20792                           
 20793                           ;incstack = 0
 20794  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 20795                           
 20796                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 20797  0005  3180               	pagesel	$
 20798  0006                     i1l5992:
 20799                           
 20800                           ;interrupt_manager.c: 55: if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
 20801  0006  002E               	movlb	14	; select bank14
 20802  0007  1C16               	btfss	22,0	;volatile
 20803  0008  280A               	goto	u636_21
 20804  0009  280B               	goto	u636_20
 20805  000A                     u636_21:
 20806  000A  2813               	goto	i1l364
 20807  000B                     u636_20:
 20808  000B                     i1l5994:
 20809  000B  1C0C               	btfss	12,0	;volatile
 20810  000C  280E               	goto	u637_21
 20811  000D  280F               	goto	u637_20
 20812  000E                     u637_21:
 20813  000E  2813               	goto	i1l364
 20814  000F                     u637_20:
 20815  000F                     i1l5996:
 20816                           
 20817                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: INT_ISR();
 20818  000F  319E  26E3  3180   	fcall	_INT_ISR
 20819                           
 20820                           ;interrupt_manager.c: 58: }
 20821  0012  2850               	goto	i1l378
 20822  0013                     i1l364:
 20823                           
 20824                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
 20825  0013  1F0B               	btfss	11,6	;volatile
 20826  0014  2816               	goto	u638_21
 20827  0015  2817               	goto	u638_20
 20828  0016                     u638_21:
 20829  0016  2850               	goto	i1l378
 20830  0017                     u638_20:
 20831  0017                     i1l5998:
 20832                           
 20833                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: if(PIE3bits.TXIE == 1 && PIR3bits.T
      +                          XIF == 1)
 20834  0017  1E19               	btfss	25,4	;volatile
 20835  0018  281A               	goto	u639_21
 20836  0019  281B               	goto	u639_20
 20837  001A                     u639_21:
 20838  001A  2826               	goto	i1l367
 20839  001B                     u639_20:
 20840  001B                     i1l6000:
 20841  001B  1E0F               	btfss	15,4	;volatile
 20842  001C  281E               	goto	u640_21
 20843  001D  281F               	goto	u640_20
 20844  001E                     u640_21:
 20845  001E  2826               	goto	i1l367
 20846  001F                     u640_20:
 20847  001F                     i1l6002:
 20848                           
 20849                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 63: EUSART_TxDefaultInterruptHandler();
 20850  001F  0022               	movlb	2	; select bank2
 20851  0020  0862               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
 20852  0021  008A               	movwf	10
 20853  0022  0861               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
 20854  0023  000A               	callw
 20855  0024  3180               	pagesel	$
 20856                           
 20857                           ;interrupt_manager.c: 64: }
 20858  0025  2850               	goto	i1l378
 20859  0026                     i1l367:
 20860                           
 20861                           ;interrupt_manager.c: 65: else if(PIE3bits.RCIE == 1 && PIR3bits.RCIF == 1)
 20862  0026  1E99               	btfss	25,5	;volatile
 20863  0027  2829               	goto	u641_21
 20864  0028  282A               	goto	u641_20
 20865  0029                     u641_21:
 20866  0029  2835               	goto	i1l369
 20867  002A                     u641_20:
 20868  002A                     i1l6004:
 20869  002A  1E8F               	btfss	15,5	;volatile
 20870  002B  282D               	goto	u642_21
 20871  002C  282E               	goto	u642_20
 20872  002D                     u642_21:
 20873  002D  2835               	goto	i1l369
 20874  002E                     u642_20:
 20875  002E                     i1l6006:
 20876                           
 20877                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
 20878  002E  0022               	movlb	2	; select bank2
 20879  002F  0860               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 20880  0030  008A               	movwf	10
 20881  0031  085F               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 20882  0032  000A               	callw
 20883  0033  3180               	pagesel	$
 20884                           
 20885                           ;interrupt_manager.c: 68: }
 20886  0034  2850               	goto	i1l378
 20887  0035                     i1l369:
 20888                           
 20889                           ;interrupt_manager.c: 69: else if(PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1)
 20890  0035  1C1A               	btfss	26,0	;volatile
 20891  0036  2838               	goto	u643_21
 20892  0037  2839               	goto	u643_20
 20893  0038                     u643_21:
 20894  0038  2841               	goto	i1l371
 20895  0039                     u643_20:
 20896  0039                     i1l6008:
 20897  0039  1C10               	btfss	16,0	;volatile
 20898  003A  283C               	goto	u644_21
 20899  003B  283D               	goto	u644_20
 20900  003C                     u644_21:
 20901  003C  2841               	goto	i1l371
 20902  003D                     u644_20:
 20903  003D                     i1l6010:
 20904                           
 20905                           ;interrupt_manager.c: 70: {;interrupt_manager.c: 71: TMR1_ISR();
 20906  003D  319F  27D0  3180   	fcall	_TMR1_ISR
 20907                           
 20908                           ;interrupt_manager.c: 72: }
 20909  0040  2850               	goto	i1l378
 20910  0041                     i1l371:
 20911                           
 20912                           ;interrupt_manager.c: 73: else if(PIE3bits.BCL1IE == 1 && PIR3bits.BCL1IF == 1)
 20913  0041  1C99               	btfss	25,1	;volatile
 20914  0042  2844               	goto	u645_21
 20915  0043  2845               	goto	u645_20
 20916  0044                     u645_21:
 20917  0044  284A               	goto	i1l373
 20918  0045                     u645_20:
 20919  0045                     i1l6012:
 20920                           
 20921                           ;interrupt_manager.c: 74: {;interrupt_manager.c: 75: i2c1_driver_busCollisionISR();
 20922  0045  1C8F               	btfss	15,1	;volatile
 20923  0046  2848               	goto	u646_21
 20924  0047  2849               	goto	u646_20
 20925  0048                     u646_21:
 20926  0048  284A               	goto	i1l373
 20927  0049                     u646_20:
 20928  0049  2850               	goto	i1l378
 20929  004A                     i1l373:
 20930                           
 20931                           ;interrupt_manager.c: 77: else if(PIE3bits.SSP1IE == 1 && PIR3bits.SSP1IF == 1)
 20932  004A  1C19               	btfss	25,0	;volatile
 20933  004B  284D               	goto	u647_21
 20934  004C  284E               	goto	u647_20
 20935  004D                     u647_21:
 20936  004D  2850               	goto	i1l372
 20937  004E                     u647_20:
 20938  004E                     i1l6016:
 20939                           
 20940                           ;interrupt_manager.c: 78: {;interrupt_manager.c: 79: i2c1_driver_i2cISR();
 20941  004E  080F               	movf	15,w	;volatile
 20942  004F  2850               	goto	i1l378
 20943  0050                     i1l372:
 20944  0050                     i1l378:
 20945  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 20946  0051  0009               	retfie
 20947  0052                     __end_of_INTERRUPT_InterruptManager:
 20948                           
 20949                           	psect	text73
 20950  1FD0                     __ptext73:	
 20951 ;; *************** function _TMR1_ISR *****************
 20952 ;; Defined at:
 20953 ;;		line 164 in file "mcc_generated_files/tmr1.c"
 20954 ;; Parameters:    Size  Location     Type
 20955 ;;		None
 20956 ;; Auto vars:     Size  Location     Type
 20957 ;;		None
 20958 ;; Return value:  Size  Location     Type
 20959 ;;                  1    wreg      void 
 20960 ;; Registers used:
 20961 ;;		wreg, status,2, status,0, pclath, cstack
 20962 ;; Tracked objects:
 20963 ;;		On entry : 0/0
 20964 ;;		On exit  : 0/0
 20965 ;;		Unchanged: 0/0
 20966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20971 ;;Total ram usage:        0 bytes
 20972 ;; Hardware stack levels used:    1
 20973 ;; Hardware stack levels required when called:    2
 20974 ;; This function calls:
 20975 ;;		Absolute function
 20976 ;;		_Clock_ISR
 20977 ;;		_TMR1_DefaultInterruptHandler
 20978 ;;		_TMR1_WriteTimer
 20979 ;; This function is called by:
 20980 ;;		_INTERRUPT_InterruptManager
 20981 ;; This function uses a non-reentrant model
 20982 ;;
 20983                           
 20984                           
 20985                           ;psect for function _TMR1_ISR
 20986  1FD0                     _TMR1_ISR:
 20987  1FD0                     i1l5500:	
 20988                           ;incstack = 0
 20989                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 20990                           
 20991                           
 20992                           ;tmr1.c: 168: PIR4bits.TMR1IF = 0;
 20993  1FD0  002E               	movlb	14	; select bank14
 20994  1FD1  1010               	bcf	16,0	;volatile
 20995  1FD2                     i1l5502:
 20996                           
 20997                           ;tmr1.c: 169: TMR1_WriteTimer(timer1ReloadVal);
 20998  1FD2  0021               	movlb	1	; select bank1
 20999  1FD3  0859               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 21000  1FD4  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 21001  1FD5  0858               	movf	_timer1ReloadVal^(0+128),w	;volatile
 21002  1FD6  00F0               	movwf	TMR1_WriteTimer@timerVal
 21003  1FD7  319F  2796  319F   	fcall	_TMR1_WriteTimer
 21004  1FDA                     i1l5504:
 21005                           
 21006                           ;tmr1.c: 171: if(TMR1_InterruptHandler)
 21007  1FDA  0022               	movlb	2	; select bank2
 21008  1FDB  085D               	movf	_TMR1_InterruptHandler^(0+256),w
 21009  1FDC  045E               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 21010  1FDD  1903               	btfsc	3,2
 21011  1FDE  2FE0               	goto	u535_21
 21012  1FDF  2FE1               	goto	u535_20
 21013  1FE0                     u535_21:
 21014  1FE0  2FE6               	goto	i1l436
 21015  1FE1                     u535_20:
 21016  1FE1                     i1l5506:
 21017                           
 21018                           ;tmr1.c: 172: {;tmr1.c: 173: TMR1_InterruptHandler();
 21019  1FE1  085E               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 21020  1FE2  008A               	movwf	10
 21021  1FE3  085D               	movf	_TMR1_InterruptHandler^(0+256),w
 21022  1FE4  000A               	callw
 21023  1FE5  319F               	pagesel	$
 21024  1FE6                     i1l436:
 21025  1FE6  0008               	return
 21026  1FE7                     __end_of_TMR1_ISR:
 21027                           
 21028                           	psect	text74
 21029  1F96                     __ptext74:	
 21030 ;; *************** function _TMR1_WriteTimer *****************
 21031 ;; Defined at:
 21032 ;;		line 127 in file "mcc_generated_files/tmr1.c"
 21033 ;; Parameters:    Size  Location     Type
 21034 ;;  timerVal        2    0[COMMON] unsigned int 
 21035 ;; Auto vars:     Size  Location     Type
 21036 ;;		None
 21037 ;; Return value:  Size  Location     Type
 21038 ;;                  1    wreg      void 
 21039 ;; Registers used:
 21040 ;;		wreg, status,2
 21041 ;; Tracked objects:
 21042 ;;		On entry : 0/0
 21043 ;;		On exit  : 0/0
 21044 ;;		Unchanged: 0/0
 21045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21046 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21049 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21050 ;;Total ram usage:        2 bytes
 21051 ;; Hardware stack levels used:    1
 21052 ;; This function calls:
 21053 ;;		Nothing
 21054 ;; This function is called by:
 21055 ;;		_TMR1_ISR
 21056 ;;		_TMR1_Reload
 21057 ;; This function uses a non-reentrant model
 21058 ;;
 21059                           
 21060                           
 21061                           ;psect for function _TMR1_WriteTimer
 21062  1F96                     _TMR1_WriteTimer:
 21063  1F96                     i1l5272:	
 21064                           ;incstack = 0
 21065                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 21066                           
 21067                           
 21068                           ;tmr1.c: 129: if (T1CONbits.nT1SYNC == 1)
 21069  1F96  0024               	movlb	4	; select bank4
 21070  1F97  1D0E               	btfss	14,2	;volatile
 21071  1F98  2F9A               	goto	u497_21
 21072  1F99  2F9B               	goto	u497_20
 21073  1F9A                     u497_21:
 21074  1F9A  2FA2               	goto	i1l5282
 21075  1F9B                     u497_20:
 21076  1F9B                     i1l5274:
 21077                           
 21078                           ;tmr1.c: 130: {;tmr1.c: 132: T1CONbits.TMR1ON = 0;
 21079  1F9B  100E               	bcf	14,0	;volatile
 21080  1F9C                     i1l5276:
 21081                           
 21082                           ;tmr1.c: 135: TMR1H = (timerVal >> 8);
 21083  1F9C  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 21084  1F9D  008D               	movwf	13	;volatile
 21085  1F9E                     i1l5278:
 21086                           
 21087                           ;tmr1.c: 136: TMR1L = timerVal;
 21088  1F9E  0870               	movf	TMR1_WriteTimer@timerVal,w
 21089  1F9F  008C               	movwf	12	;volatile
 21090  1FA0                     i1l5280:
 21091                           
 21092                           ;tmr1.c: 139: T1CONbits.TMR1ON =1;
 21093  1FA0  140E               	bsf	14,0	;volatile
 21094                           
 21095                           ;tmr1.c: 140: }
 21096  1FA1  2FA6               	goto	i1l423
 21097  1FA2                     i1l5282:
 21098                           
 21099                           ;tmr1.c: 141: else;tmr1.c: 142: {;tmr1.c: 144: TMR1H = (timerVal >> 8);
 21100  1FA2  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 21101  1FA3  008D               	movwf	13	;volatile
 21102  1FA4                     i1l5284:
 21103                           
 21104                           ;tmr1.c: 145: TMR1L = timerVal;
 21105  1FA4  0870               	movf	TMR1_WriteTimer@timerVal,w
 21106  1FA5  008C               	movwf	12	;volatile
 21107  1FA6                     i1l423:
 21108  1FA6  0008               	return
 21109  1FA7                     __end_of_TMR1_WriteTimer:
 21110                           
 21111                           	psect	text75
 21112  0A13                     __ptext75:	
 21113 ;; *************** function _Clock_ISR *****************
 21114 ;; Defined at:
 21115 ;;		line 363 in file "main.c"
 21116 ;; Parameters:    Size  Location     Type
 21117 ;;		None
 21118 ;; Auto vars:     Size  Location     Type
 21119 ;;		None
 21120 ;; Return value:  Size  Location     Type
 21121 ;;                  1    wreg      void 
 21122 ;; Registers used:
 21123 ;;		wreg, status,2, status,0, pclath, cstack
 21124 ;; Tracked objects:
 21125 ;;		On entry : 0/0
 21126 ;;		On exit  : 0/0
 21127 ;;		Unchanged: 0/0
 21128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21131 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21132 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21133 ;;Total ram usage:        7 bytes
 21134 ;; Hardware stack levels used:    1
 21135 ;; Hardware stack levels required when called:    1
 21136 ;; This function calls:
 21137 ;;		___awdiv
 21138 ;; This function is called by:
 21139 ;;		_main
 21140 ;;		_TMR1_ISR
 21141 ;; This function uses a non-reentrant model
 21142 ;;
 21143                           
 21144                           
 21145                           ;psect for function _Clock_ISR
 21146  0A13                     _Clock_ISR:
 21147  0A13                     i1l5342:	
 21148                           ;incstack = 0
 21149                           ; Regs used in _Clock_ISR: [wreg+status,2+status,0+pclath+cstack]
 21150                           
 21151                           
 21152                           ;main.c: 365: t.s++;
 21153  0A13  3001               	movlw	1
 21154  0A14  0020               	movlb	0	; select bank0
 21155  0A15  00A0               	movwf	??_Clock_ISR
 21156  0A16  0820               	movf	??_Clock_ISR,w
 21157  0A17  07DE               	addwf	_t+2,f
 21158                           
 21159                           ;main.c: 367: if(t.s==60){
 21160  0A18  303C               	movlw	60
 21161  0A19  065E               	xorwf	_t+2,w
 21162  0A1A  1D03               	btfss	3,2
 21163  0A1B  2A1D               	goto	u507_21
 21164  0A1C  2A1E               	goto	u507_20
 21165  0A1D                     u507_21:
 21166  0A1D  2A26               	goto	i1l5350
 21167  0A1E                     u507_20:
 21168  0A1E                     i1l5344:
 21169                           
 21170                           ;main.c: 368: t.m++;
 21171  0A1E  3001               	movlw	1
 21172  0A1F  00A0               	movwf	??_Clock_ISR
 21173  0A20  0820               	movf	??_Clock_ISR,w
 21174  0A21  07DD               	addwf	_t+1,f
 21175  0A22                     i1l5346:
 21176                           
 21177                           ;main.c: 369: t.s=0;
 21178  0A22  01DE               	clrf	_t+2
 21179  0A23                     i1l5348:
 21180                           
 21181                           ;main.c: 370: writeEEPROM_flag = 1;
 21182  0A23  0021               	movlb	1	; select bank1
 21183  0A24  01AF               	clrf	_writeEEPROM_flag^(0+128)
 21184  0A25  0AAF               	incf	_writeEEPROM_flag^(0+128),f
 21185  0A26                     i1l5350:
 21186                           
 21187                           ;main.c: 371: };main.c: 372: if(t.m==60){
 21188  0A26  303C               	movlw	60
 21189  0A27  0020               	movlb	0	; select bank0
 21190  0A28  065D               	xorwf	_t+1,w
 21191  0A29  1D03               	btfss	3,2
 21192  0A2A  2A2C               	goto	u508_21
 21193  0A2B  2A2D               	goto	u508_20
 21194  0A2C                     u508_21:
 21195  0A2C  2A32               	goto	i1l5356
 21196  0A2D                     u508_20:
 21197  0A2D                     i1l5352:
 21198                           
 21199                           ;main.c: 373: t.h++;
 21200  0A2D  3001               	movlw	1
 21201  0A2E  00A0               	movwf	??_Clock_ISR
 21202  0A2F  0820               	movf	??_Clock_ISR,w
 21203  0A30  07DC               	addwf	_t,f
 21204  0A31                     i1l5354:
 21205                           
 21206                           ;main.c: 374: t.m=0;
 21207  0A31  01DD               	clrf	_t+1
 21208  0A32                     i1l5356:
 21209                           
 21210                           ;main.c: 375: };main.c: 376: if(t.h==24){
 21211  0A32  3018               	movlw	24
 21212  0A33  065C               	xorwf	_t,w
 21213  0A34  1D03               	btfss	3,2
 21214  0A35  2A37               	goto	u509_21
 21215  0A36  2A38               	goto	u509_20
 21216  0A37                     u509_21:
 21217  0A37  2A39               	goto	i1l5360
 21218  0A38                     u509_20:
 21219  0A38                     i1l5358:
 21220                           
 21221                           ;main.c: 377: t.h=0;
 21222  0A38  01DC               	clrf	_t
 21223  0A39                     i1l5360:
 21224                           
 21225                           ;main.c: 378: };main.c: 381: if((ALAF == 'A') && t.s >= clkAlarm.alarmVal.s && t.m >= cl
      +                          kAlarm.alarmVal.m && t.h >= clkAlarm.alarmVal.h && editingClockAlarm == 0){
 21226  0A39  3041               	movlw	65
 21227  0A3A  067C               	xorwf	_ALAF,w
 21228  0A3B  1D03               	btfss	3,2
 21229  0A3C  2A3E               	goto	u510_21
 21230  0A3D  2A3F               	goto	u510_20
 21231  0A3E                     u510_21:
 21232  0A3E  2A6A               	goto	i1l1271
 21233  0A3F                     u510_20:
 21234  0A3F                     i1l5362:
 21235  0A3F  0021               	movlb	1	; select bank1
 21236  0A40  0822               	movf	(_clkAlarm^(0+128)+2),w
 21237  0A41  0020               	movlb	0	; select bank0
 21238  0A42  025E               	subwf	_t+2,w
 21239  0A43  1C03               	skipc
 21240  0A44  2A46               	goto	u511_21
 21241  0A45  2A47               	goto	u511_20
 21242  0A46                     u511_21:
 21243  0A46  2A6A               	goto	i1l1271
 21244  0A47                     u511_20:
 21245  0A47                     i1l5364:
 21246  0A47  0021               	movlb	1	; select bank1
 21247  0A48  0821               	movf	(_clkAlarm^(0+128)+1),w
 21248  0A49  0020               	movlb	0	; select bank0
 21249  0A4A  025D               	subwf	_t+1,w
 21250  0A4B  1C03               	skipc
 21251  0A4C  2A4E               	goto	u512_21
 21252  0A4D  2A4F               	goto	u512_20
 21253  0A4E                     u512_21:
 21254  0A4E  2A6A               	goto	i1l1271
 21255  0A4F                     u512_20:
 21256  0A4F                     i1l5366:
 21257  0A4F  0021               	movlb	1	; select bank1
 21258  0A50  0820               	movf	_clkAlarm^(0+128),w
 21259  0A51  0020               	movlb	0	; select bank0
 21260  0A52  025C               	subwf	_t,w
 21261  0A53  1C03               	skipc
 21262  0A54  2A56               	goto	u513_21
 21263  0A55  2A57               	goto	u513_20
 21264  0A56                     u513_21:
 21265  0A56  2A6A               	goto	i1l1271
 21266  0A57                     u513_20:
 21267  0A57                     i1l5368:
 21268  0A57  0861               	movf	_editingClockAlarm,w
 21269  0A58  0462               	iorwf	_editingClockAlarm+1,w
 21270  0A59  1D03               	btfss	3,2
 21271  0A5A  2A5C               	goto	u514_21
 21272  0A5B  2A5D               	goto	u514_20
 21273  0A5C                     u514_21:
 21274  0A5C  2A6A               	goto	i1l1271
 21275  0A5D                     u514_20:
 21276  0A5D                     i1l5370:
 21277                           
 21278                           ;main.c: 382: alarmPWMStart.h = 0xff;
 21279  0A5D  30FF               	movlw	255
 21280  0A5E  00A0               	movwf	??_Clock_ISR
 21281  0A5F  0820               	movf	??_Clock_ISR,w
 21282  0A60  0021               	movlb	1	; select bank1
 21283  0A61  00CE               	movwf	_alarmPWMStart^(0+128)
 21284  0A62                     i1l5372:
 21285                           
 21286                           ;main.c: 383: clkAlarm.trigger = 1;
 21287  0A62  01A3               	clrf	(_clkAlarm^(0+128)+3)
 21288  0A63  0AA3               	incf	(_clkAlarm^(0+128)+3),f
 21289                           
 21290                           ;main.c: 384: clkAlarm.alarmVal.h = 25;
 21291  0A64  3019               	movlw	25
 21292  0A65  0020               	movlb	0	; select bank0
 21293  0A66  00A0               	movwf	??_Clock_ISR
 21294  0A67  0820               	movf	??_Clock_ISR,w
 21295  0A68  0021               	movlb	1	; select bank1
 21296  0A69  00A0               	movwf	_clkAlarm^(0+128)
 21297  0A6A                     i1l1271:
 21298                           
 21299                           ;main.c: 385: };main.c: 388: if(((iwrite >= iread) && (((iwrite-iread) >= NREG/2) || ((i
      +                          write-iread) == 0 && nr == NREG))) || ((iwrite < iread) && ((iwrite+(NREG - iread)) >= N
      +                          REG/2))){
 21300  0A6A  087B               	movf	_iread,w
 21301  0A6B  027A               	subwf	_iwrite,w
 21302  0A6C  1C03               	skipc
 21303  0A6D  2A6F               	goto	u515_21
 21304  0A6E  2A70               	goto	u515_20
 21305  0A6F                     u515_21:
 21306  0A6F  2AAF               	goto	i1l5380
 21307  0A70                     u515_20:
 21308  0A70                     i1l5374:
 21309  0A70  3002               	movlw	2
 21310  0A71  00F0               	movwf	___awdiv@divisor
 21311  0A72  3000               	movlw	0
 21312  0A73  00F1               	movwf	___awdiv@divisor+1
 21313  0A74  087D               	movf	_NREG,w
 21314  0A75  0020               	movlb	0	; select bank0
 21315  0A76  00A0               	movwf	??_Clock_ISR
 21316  0A77  01A1               	clrf	??_Clock_ISR+1
 21317  0A78  0820               	movf	??_Clock_ISR,w
 21318  0A79  00F2               	movwf	___awdiv@dividend
 21319  0A7A  0821               	movf	??_Clock_ISR+1,w
 21320  0A7B  00F3               	movwf	___awdiv@dividend+1
 21321  0A7C  3195  25E7  318A   	fcall	___awdiv
 21322  0A7F  087A               	movf	_iwrite,w
 21323  0A80  0020               	movlb	0	; select bank0
 21324  0A81  00A2               	movwf	??_Clock_ISR+2
 21325  0A82  01A3               	clrf	??_Clock_ISR+3
 21326  0A83  0823               	movf	??_Clock_ISR+3,w
 21327  0A84  00A5               	movwf	??_Clock_ISR+5
 21328  0A85  087B               	movf	_iread,w
 21329  0A86  0222               	subwf	??_Clock_ISR+2,w
 21330  0A87  00A4               	movwf	??_Clock_ISR+4
 21331  0A88  1C03               	skipc
 21332  0A89  03A5               	decf	??_Clock_ISR+5,f
 21333  0A8A  0825               	movf	??_Clock_ISR+5,w
 21334  0A8B  3A80               	xorlw	128
 21335  0A8C  00A6               	movwf	??_Clock_ISR+6
 21336  0A8D  0871               	movf	?___awdiv+1,w
 21337  0A8E  3A80               	xorlw	128
 21338  0A8F  0226               	subwf	??_Clock_ISR+6,w
 21339  0A90  1D03               	skipz
 21340  0A91  2A94               	goto	u516_25
 21341  0A92  0870               	movf	?___awdiv,w
 21342  0A93  0224               	subwf	??_Clock_ISR+4,w
 21343  0A94                     u516_25:
 21344  0A94  1803               	skipnc
 21345  0A95  2A97               	goto	u516_21
 21346  0A96  2A98               	goto	u516_20
 21347  0A97                     u516_21:
 21348  0A97  2ADF               	goto	i1l1274
 21349  0A98                     u516_20:
 21350  0A98                     i1l5376:
 21351  0A98  087A               	movf	_iwrite,w
 21352  0A99  0020               	movlb	0	; select bank0
 21353  0A9A  00A0               	movwf	??_Clock_ISR
 21354  0A9B  01A1               	clrf	??_Clock_ISR+1
 21355  0A9C  0821               	movf	??_Clock_ISR+1,w
 21356  0A9D  00A3               	movwf	??_Clock_ISR+3
 21357  0A9E  087B               	movf	_iread,w
 21358  0A9F  0220               	subwf	??_Clock_ISR,w
 21359  0AA0  00A2               	movwf	??_Clock_ISR+2
 21360  0AA1  1C03               	skipc
 21361  0AA2  03A3               	decf	??_Clock_ISR+3,f
 21362  0AA3  0822               	movf	??_Clock_ISR+2,w
 21363  0AA4  0423               	iorwf	??_Clock_ISR+3,w
 21364  0AA5  1D03               	btfss	3,2
 21365  0AA6  2AA8               	goto	u517_21
 21366  0AA7  2AA9               	goto	u517_20
 21367  0AA8                     u517_21:
 21368  0AA8  2AAF               	goto	i1l5380
 21369  0AA9                     u517_20:
 21370  0AA9                     i1l5378:
 21371  0AA9  0879               	movf	_nr,w
 21372  0AAA  067D               	xorwf	_NREG,w
 21373  0AAB  1903               	skipnz
 21374  0AAC  2AAE               	goto	u518_21
 21375  0AAD  2AAF               	goto	u518_20
 21376  0AAE                     u518_21:
 21377  0AAE  2ADF               	goto	i1l1274
 21378  0AAF                     u518_20:
 21379  0AAF                     i1l5380:
 21380  0AAF  087B               	movf	_iread,w
 21381  0AB0  027A               	subwf	_iwrite,w
 21382  0AB1  1803               	skipnc
 21383  0AB2  2AB4               	goto	u519_21
 21384  0AB3  2AB5               	goto	u519_20
 21385  0AB4                     u519_21:
 21386  0AB4  2AE3               	goto	i1l5384
 21387  0AB5                     u519_20:
 21388  0AB5                     i1l5382:
 21389  0AB5  3002               	movlw	2
 21390  0AB6  00F0               	movwf	___awdiv@divisor
 21391  0AB7  3000               	movlw	0
 21392  0AB8  00F1               	movwf	___awdiv@divisor+1
 21393  0AB9  087D               	movf	_NREG,w
 21394  0ABA  0020               	movlb	0	; select bank0
 21395  0ABB  00A0               	movwf	??_Clock_ISR
 21396  0ABC  01A1               	clrf	??_Clock_ISR+1
 21397  0ABD  0820               	movf	??_Clock_ISR,w
 21398  0ABE  00F2               	movwf	___awdiv@dividend
 21399  0ABF  0821               	movf	??_Clock_ISR+1,w
 21400  0AC0  00F3               	movwf	___awdiv@dividend+1
 21401  0AC1  3195  25E7  318A   	fcall	___awdiv
 21402  0AC4  087A               	movf	_iwrite,w
 21403  0AC5  077D               	addwf	_NREG,w
 21404  0AC6  0020               	movlb	0	; select bank0
 21405  0AC7  00A2               	movwf	??_Clock_ISR+2
 21406  0AC8  01A3               	clrf	??_Clock_ISR+3
 21407  0AC9  0DA3               	rlf	??_Clock_ISR+3,f
 21408  0ACA  0823               	movf	??_Clock_ISR+3,w
 21409  0ACB  00A5               	movwf	??_Clock_ISR+5
 21410  0ACC  087B               	movf	_iread,w
 21411  0ACD  0222               	subwf	??_Clock_ISR+2,w
 21412  0ACE  00A4               	movwf	??_Clock_ISR+4
 21413  0ACF  1C03               	skipc
 21414  0AD0  03A5               	decf	??_Clock_ISR+5,f
 21415  0AD1  0825               	movf	??_Clock_ISR+5,w
 21416  0AD2  3A80               	xorlw	128
 21417  0AD3  00A6               	movwf	??_Clock_ISR+6
 21418  0AD4  0871               	movf	?___awdiv+1,w
 21419  0AD5  3A80               	xorlw	128
 21420  0AD6  0226               	subwf	??_Clock_ISR+6,w
 21421  0AD7  1D03               	skipz
 21422  0AD8  2ADB               	goto	u520_25
 21423  0AD9  0870               	movf	?___awdiv,w
 21424  0ADA  0224               	subwf	??_Clock_ISR+4,w
 21425  0ADB                     u520_25:
 21426  0ADB  1C03               	skipc
 21427  0ADC  2ADE               	goto	u520_21
 21428  0ADD  2ADF               	goto	u520_20
 21429  0ADE                     u520_21:
 21430  0ADE  2AE3               	goto	i1l5384
 21431  0ADF                     u520_20:
 21432  0ADF                     i1l1274:
 21433                           
 21434                           ;main.c: 389: bufHalfFull = 1;
 21435  0ADF  0021               	movlb	1	; select bank1
 21436  0AE0  01AE               	clrf	_bufHalfFull^(0+128)
 21437  0AE1  0AAE               	incf	_bufHalfFull^(0+128),f
 21438                           
 21439                           ;main.c: 390: } else {
 21440  0AE2  2AE5               	goto	i1l5386
 21441  0AE3                     i1l5384:
 21442                           
 21443                           ;main.c: 391: bufHalfFull = 0;
 21444  0AE3  0021               	movlb	1	; select bank1
 21445  0AE4  01AE               	clrf	_bufHalfFull^(0+128)
 21446  0AE5                     i1l5386:
 21447  0AE5  1003               	clrc
 21448  0AE6  0020               	movlb	0	; select bank0
 21449  0AE7  1F96               	btfss	22,7	;volatile
 21450  0AE8  1403               	setc
 21451  0AE9  1803               	btfsc	3,0
 21452  0AEA  2AEC               	goto	u521_21
 21453  0AEB  2AEF               	goto	u521_20
 21454  0AEC                     u521_21:
 21455  0AEC  0020               	movlb	0	; select bank0
 21456  0AED  1796               	bsf	22,7	;volatile
 21457  0AEE  2AF1               	goto	u522_24
 21458  0AEF                     u521_20:
 21459  0AEF  0020               	movlb	0	; select bank0
 21460  0AF0  1396               	bcf	22,7	;volatile
 21461  0AF1                     u522_24:
 21462  0AF1                     i1l5388:
 21463                           
 21464                           ;main.c: 395: updateLCD = 1;
 21465  0AF1  0021               	movlb	1	; select bank1
 21466  0AF2  01D5               	clrf	_updateLCD^(0+128)
 21467  0AF3  0AD5               	incf	_updateLCD^(0+128),f
 21468  0AF4                     i1l5390:
 21469                           
 21470                           ;main.c: 396: counterMonitorAux++;
 21471  0AF4  3001               	movlw	1
 21472  0AF5  0020               	movlb	0	; select bank0
 21473  0AF6  00A0               	movwf	??_Clock_ISR
 21474  0AF7  0820               	movf	??_Clock_ISR,w
 21475  0AF8  0021               	movlb	1	; select bank1
 21476  0AF9  07B0               	addwf	_counterMonitorAux^(0+128),f
 21477                           
 21478                           ;main.c: 397: if(counterMonitorAux >= PMON){
 21479  0AFA  0857               	movf	_PMON^(0+128),w
 21480  0AFB  0230               	subwf	_counterMonitorAux^(0+128),w
 21481  0AFC  1C03               	skipc
 21482  0AFD  2AFF               	goto	u523_21
 21483  0AFE  2B00               	goto	u523_20
 21484  0AFF                     u523_21:
 21485  0AFF  2B03               	goto	i1l1283
 21486  0B00                     u523_20:
 21487  0B00                     i1l5392:
 21488                           
 21489                           ;main.c: 398: counterMonitorAux = 0;
 21490  0B00  01B0               	clrf	_counterMonitorAux^(0+128)
 21491  0B01                     i1l5394:
 21492                           
 21493                           ;main.c: 399: monitor_TEMP_LUM = 1;
 21494  0B01  01B1               	clrf	_monitor_TEMP_LUM^(0+128)
 21495  0B02  0AB1               	incf	_monitor_TEMP_LUM^(0+128),f
 21496  0B03                     i1l1283:
 21497  0B03  0008               	return
 21498  0B04                     __end_of_Clock_ISR:
 21499                           
 21500                           	psect	text76
 21501  0003                     __ptext76:	
 21502 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 21503 ;; Defined at:
 21504 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 21505 ;; Parameters:    Size  Location     Type
 21506 ;;		None
 21507 ;; Auto vars:     Size  Location     Type
 21508 ;;		None
 21509 ;; Return value:  Size  Location     Type
 21510 ;;                  1    wreg      void 
 21511 ;; Registers used:
 21512 ;;		None
 21513 ;; Tracked objects:
 21514 ;;		On entry : 0/0
 21515 ;;		On exit  : 0/0
 21516 ;;		Unchanged: 0/0
 21517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21522 ;;Total ram usage:        0 bytes
 21523 ;; Hardware stack levels used:    1
 21524 ;; This function calls:
 21525 ;;		Nothing
 21526 ;; This function is called by:
 21527 ;;		_TMR1_Initialize
 21528 ;;		_TMR1_ISR
 21529 ;; This function uses a non-reentrant model
 21530 ;;
 21531                           
 21532                           
 21533                           ;psect for function _TMR1_DefaultInterruptHandler
 21534  0003                     _TMR1_DefaultInterruptHandler:
 21535  0003                     i1l442:	
 21536                           ;incstack = 0
 21537                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 21538                           
 21539  0003  0008               	return
 21540  0004                     __end_of_TMR1_DefaultInterruptHandler:
 21541                           
 21542                           	psect	text77
 21543  15E7                     __ptext77:	
 21544 ;; *************** function ___awdiv *****************
 21545 ;; Defined at:
 21546 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\awdiv.c"
 21547 ;; Parameters:    Size  Location     Type
 21548 ;;  divisor         2    0[COMMON] int 
 21549 ;;  dividend        2    2[COMMON] int 
 21550 ;; Auto vars:     Size  Location     Type
 21551 ;;  quotient        2    7[COMMON] int 
 21552 ;;  sign            1    6[COMMON] unsigned char 
 21553 ;;  counter         1    5[COMMON] unsigned char 
 21554 ;; Return value:  Size  Location     Type
 21555 ;;                  2    0[COMMON] int 
 21556 ;; Registers used:
 21557 ;;		wreg, status,2, status,0
 21558 ;; Tracked objects:
 21559 ;;		On entry : 0/0
 21560 ;;		On exit  : 0/0
 21561 ;;		Unchanged: 0/0
 21562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21563 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21564 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21566 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21567 ;;Total ram usage:        9 bytes
 21568 ;; Hardware stack levels used:    1
 21569 ;; This function calls:
 21570 ;;		Nothing
 21571 ;; This function is called by:
 21572 ;;		_Clock_ISR
 21573 ;;		_map
 21574 ;; This function uses a non-reentrant model
 21575 ;;
 21576                           
 21577                           
 21578                           ;psect for function ___awdiv
 21579  15E7                     ___awdiv:
 21580  15E7                     i1l5094:	
 21581                           ;incstack = 0
 21582                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 21583                           
 21584  15E7  01F6               	clrf	___awdiv@sign
 21585  15E8                     i1l5096:
 21586  15E8  1FF1               	btfss	___awdiv@divisor+1,7
 21587  15E9  2DEB               	goto	u487_21
 21588  15EA  2DEC               	goto	u487_20
 21589  15EB                     u487_21:
 21590  15EB  2DF3               	goto	i1l5102
 21591  15EC                     u487_20:
 21592  15EC                     i1l5098:
 21593  15EC  09F0               	comf	___awdiv@divisor,f
 21594  15ED  09F1               	comf	___awdiv@divisor+1,f
 21595  15EE  0AF0               	incf	___awdiv@divisor,f
 21596  15EF  1903               	skipnz
 21597  15F0  0AF1               	incf	___awdiv@divisor+1,f
 21598  15F1                     i1l5100:
 21599  15F1  01F6               	clrf	___awdiv@sign
 21600  15F2  0AF6               	incf	___awdiv@sign,f
 21601  15F3                     i1l5102:
 21602  15F3  1FF3               	btfss	___awdiv@dividend+1,7
 21603  15F4  2DF6               	goto	u488_21
 21604  15F5  2DF7               	goto	u488_20
 21605  15F6                     u488_21:
 21606  15F6  2E00               	goto	i1l5108
 21607  15F7                     u488_20:
 21608  15F7                     i1l5104:
 21609  15F7  09F2               	comf	___awdiv@dividend,f
 21610  15F8  09F3               	comf	___awdiv@dividend+1,f
 21611  15F9  0AF2               	incf	___awdiv@dividend,f
 21612  15FA  1903               	skipnz
 21613  15FB  0AF3               	incf	___awdiv@dividend+1,f
 21614  15FC                     i1l5106:
 21615  15FC  3001               	movlw	1
 21616  15FD  00F4               	movwf	??___awdiv
 21617  15FE  0874               	movf	??___awdiv,w
 21618  15FF  06F6               	xorwf	___awdiv@sign,f
 21619  1600                     i1l5108:
 21620  1600  01F7               	clrf	___awdiv@quotient
 21621  1601  01F8               	clrf	___awdiv@quotient+1
 21622  1602                     i1l5110:
 21623  1602  0870               	movf	___awdiv@divisor,w
 21624  1603  0471               	iorwf	___awdiv@divisor+1,w
 21625  1604  1903               	btfsc	3,2
 21626  1605  2E07               	goto	u489_21
 21627  1606  2E08               	goto	u489_20
 21628  1607                     u489_21:
 21629  1607  2E37               	goto	i1l5130
 21630  1608                     u489_20:
 21631  1608                     i1l5112:
 21632  1608  01F5               	clrf	___awdiv@counter
 21633  1609  0AF5               	incf	___awdiv@counter,f
 21634  160A  2E14               	goto	i1l5118
 21635  160B                     i1l5114:
 21636  160B  3001               	movlw	1
 21637  160C                     u490_25:
 21638  160C  35F0               	lslf	___awdiv@divisor,f
 21639  160D  0DF1               	rlf	___awdiv@divisor+1,f
 21640  160E  0B89               	decfsz	9,f
 21641  160F  2E0C               	goto	u490_25
 21642  1610                     i1l5116:
 21643  1610  3001               	movlw	1
 21644  1611  00F4               	movwf	??___awdiv
 21645  1612  0874               	movf	??___awdiv,w
 21646  1613  07F5               	addwf	___awdiv@counter,f
 21647  1614                     i1l5118:
 21648  1614  1FF1               	btfss	___awdiv@divisor+1,7
 21649  1615  2E17               	goto	u491_21
 21650  1616  2E18               	goto	u491_20
 21651  1617                     u491_21:
 21652  1617  2E0B               	goto	i1l5114
 21653  1618                     u491_20:
 21654  1618                     i1l5120:
 21655  1618  3001               	movlw	1
 21656  1619                     u492_25:
 21657  1619  35F7               	lslf	___awdiv@quotient,f
 21658  161A  0DF8               	rlf	___awdiv@quotient+1,f
 21659  161B  0B89               	decfsz	9,f
 21660  161C  2E19               	goto	u492_25
 21661  161D  0871               	movf	___awdiv@divisor+1,w
 21662  161E  0273               	subwf	___awdiv@dividend+1,w
 21663  161F  1D03               	skipz
 21664  1620  2E23               	goto	u493_25
 21665  1621  0870               	movf	___awdiv@divisor,w
 21666  1622  0272               	subwf	___awdiv@dividend,w
 21667  1623                     u493_25:
 21668  1623  1C03               	skipc
 21669  1624  2E26               	goto	u493_21
 21670  1625  2E27               	goto	u493_20
 21671  1626                     u493_21:
 21672  1626  2E2C               	goto	i1l5126
 21673  1627                     u493_20:
 21674  1627                     i1l5122:
 21675  1627  0870               	movf	___awdiv@divisor,w
 21676  1628  02F2               	subwf	___awdiv@dividend,f
 21677  1629  0871               	movf	___awdiv@divisor+1,w
 21678  162A  3BF3               	subwfb	___awdiv@dividend+1,f
 21679  162B                     i1l5124:
 21680  162B  1477               	bsf	___awdiv@quotient,0
 21681  162C                     i1l5126:
 21682  162C  3001               	movlw	1
 21683  162D                     u494_25:
 21684  162D  36F1               	lsrf	___awdiv@divisor+1,f
 21685  162E  0CF0               	rrf	___awdiv@divisor,f
 21686  162F  0B89               	decfsz	9,f
 21687  1630  2E2D               	goto	u494_25
 21688  1631                     i1l5128:
 21689  1631  3001               	movlw	1
 21690  1632  02F5               	subwf	___awdiv@counter,f
 21691  1633  1D03               	btfss	3,2
 21692  1634  2E36               	goto	u495_21
 21693  1635  2E37               	goto	u495_20
 21694  1636                     u495_21:
 21695  1636  2E18               	goto	i1l5120
 21696  1637                     u495_20:
 21697  1637                     i1l5130:
 21698  1637  0876               	movf	___awdiv@sign,w
 21699  1638  1903               	btfsc	3,2
 21700  1639  2E3B               	goto	u496_21
 21701  163A  2E3C               	goto	u496_20
 21702  163B                     u496_21:
 21703  163B  2E41               	goto	i1l5134
 21704  163C                     u496_20:
 21705  163C                     i1l5132:
 21706  163C  09F7               	comf	___awdiv@quotient,f
 21707  163D  09F8               	comf	___awdiv@quotient+1,f
 21708  163E  0AF7               	incf	___awdiv@quotient,f
 21709  163F  1903               	skipnz
 21710  1640  0AF8               	incf	___awdiv@quotient+1,f
 21711  1641                     i1l5134:
 21712  1641  0878               	movf	___awdiv@quotient+1,w
 21713  1642  00F1               	movwf	?___awdiv+1
 21714  1643  0877               	movf	___awdiv@quotient,w
 21715  1644  00F0               	movwf	?___awdiv
 21716  1645                     i1l1938:
 21717  1645  0008               	return
 21718  1646                     __end_of___awdiv:
 21719                           
 21720                           	psect	text78
 21721  1EE3                     __ptext78:	
 21722 ;; *************** function _INT_ISR *****************
 21723 ;; Defined at:
 21724 ;;		line 32 in file "mcc_generated_files/ext_int.c"
 21725 ;; Parameters:    Size  Location     Type
 21726 ;;		None
 21727 ;; Auto vars:     Size  Location     Type
 21728 ;;		None
 21729 ;; Return value:  Size  Location     Type
 21730 ;;                  1    wreg      void 
 21731 ;; Registers used:
 21732 ;;		wreg, status,2, status,0, pclath, cstack
 21733 ;; Tracked objects:
 21734 ;;		On entry : 0/0
 21735 ;;		On exit  : 0/0
 21736 ;;		Unchanged: 0/0
 21737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21742 ;;Total ram usage:        0 bytes
 21743 ;; Hardware stack levels used:    1
 21744 ;; Hardware stack levels required when called:    2
 21745 ;; This function calls:
 21746 ;;		_INT_CallBack
 21747 ;; This function is called by:
 21748 ;;		_INTERRUPT_InterruptManager
 21749 ;; This function uses a non-reentrant model
 21750 ;;
 21751                           
 21752                           
 21753                           ;psect for function _INT_ISR
 21754  1EE3                     _INT_ISR:
 21755  1EE3                     i1l5496:	
 21756                           ;incstack = 0
 21757                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 21758                           
 21759                           
 21760                           ;ext_int.c: 34: (PIR0bits.INTF = 0);
 21761  1EE3  002E               	movlb	14	; select bank14
 21762  1EE4  100C               	bcf	12,0	;volatile
 21763  1EE5                     i1l5498:
 21764                           
 21765                           ;ext_int.c: 37: INT_CallBack();
 21766  1EE5  319F  2751  319E   	fcall	_INT_CallBack
 21767  1EE8                     i1l747:
 21768  1EE8  0008               	return
 21769  1EE9                     __end_of_INT_ISR:
 21770                           
 21771                           	psect	text79
 21772  1F51                     __ptext79:	
 21773 ;; *************** function _INT_CallBack *****************
 21774 ;; Defined at:
 21775 ;;		line 41 in file "mcc_generated_files/ext_int.c"
 21776 ;; Parameters:    Size  Location     Type
 21777 ;;		None
 21778 ;; Auto vars:     Size  Location     Type
 21779 ;;		None
 21780 ;; Return value:  Size  Location     Type
 21781 ;;                  1    wreg      void 
 21782 ;; Registers used:
 21783 ;;		wreg, status,2, status,0, pclath, cstack
 21784 ;; Tracked objects:
 21785 ;;		On entry : 0/0
 21786 ;;		On exit  : 0/0
 21787 ;;		Unchanged: 0/0
 21788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21793 ;;Total ram usage:        0 bytes
 21794 ;; Hardware stack levels used:    1
 21795 ;; Hardware stack levels required when called:    1
 21796 ;; This function calls:
 21797 ;;		Absolute function
 21798 ;;		_INT_DefaultInterruptHandler
 21799 ;;		_S1_ISR
 21800 ;; This function is called by:
 21801 ;;		_INT_ISR
 21802 ;; This function uses a non-reentrant model
 21803 ;;
 21804                           
 21805                           
 21806                           ;psect for function _INT_CallBack
 21807  1F51                     _INT_CallBack:
 21808  1F51                     i1l5302:	
 21809                           ;incstack = 0
 21810                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 21811                           
 21812                           
 21813                           ;ext_int.c: 44: if(INT_InterruptHandler)
 21814  1F51  0022               	movlb	2	; select bank2
 21815  1F52  085B               	movf	_INT_InterruptHandler^(0+256),w
 21816  1F53  045C               	iorwf	(_INT_InterruptHandler+1)^(0+256),w
 21817  1F54  1903               	btfsc	3,2
 21818  1F55  2F57               	goto	u498_21
 21819  1F56  2F58               	goto	u498_20
 21820  1F57                     u498_21:
 21821  1F57  2F5D               	goto	i1l751
 21822  1F58                     u498_20:
 21823  1F58                     i1l5304:
 21824                           
 21825                           ;ext_int.c: 45: {;ext_int.c: 46: INT_InterruptHandler();
 21826  1F58  085C               	movf	(_INT_InterruptHandler+1)^(0+256),w
 21827  1F59  008A               	movwf	10
 21828  1F5A  085B               	movf	_INT_InterruptHandler^(0+256),w
 21829  1F5B  000A               	callw
 21830  1F5C  319F               	pagesel	$
 21831  1F5D                     i1l751:
 21832  1F5D  0008               	return
 21833  1F5E                     __end_of_INT_CallBack:
 21834                           
 21835                           	psect	text80
 21836  0002                     __ptext80:	
 21837 ;; *************** function _INT_DefaultInterruptHandler *****************
 21838 ;; Defined at:
 21839 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 21840 ;; Parameters:    Size  Location     Type
 21841 ;;		None
 21842 ;; Auto vars:     Size  Location     Type
 21843 ;;		None
 21844 ;; Return value:  Size  Location     Type
 21845 ;;                  1    wreg      void 
 21846 ;; Registers used:
 21847 ;;		None
 21848 ;; Tracked objects:
 21849 ;;		On entry : 0/0
 21850 ;;		On exit  : 0/0
 21851 ;;		Unchanged: 0/0
 21852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21857 ;;Total ram usage:        0 bytes
 21858 ;; Hardware stack levels used:    1
 21859 ;; This function calls:
 21860 ;;		Nothing
 21861 ;; This function is called by:
 21862 ;;		_EXT_INT_Initialize
 21863 ;;		_INT_CallBack
 21864 ;; This function uses a non-reentrant model
 21865 ;;
 21866                           
 21867                           
 21868                           ;psect for function _INT_DefaultInterruptHandler
 21869  0002                     _INT_DefaultInterruptHandler:
 21870  0002                     i1l757:	
 21871                           ;incstack = 0
 21872                           ; Regs used in _INT_DefaultInterruptHandler: []
 21873                           
 21874  0002  0008               	return
 21875  0003                     __end_of_INT_DefaultInterruptHandler:
 21876                           
 21877                           	psect	text81
 21878  1F06                     __ptext81:	
 21879 ;; *************** function _S1_ISR *****************
 21880 ;; Defined at:
 21881 ;;		line 824 in file "main.c"
 21882 ;; Parameters:    Size  Location     Type
 21883 ;;		None
 21884 ;; Auto vars:     Size  Location     Type
 21885 ;;		None
 21886 ;; Return value:  Size  Location     Type
 21887 ;;                  1    wreg      void 
 21888 ;; Registers used:
 21889 ;;		None
 21890 ;; Tracked objects:
 21891 ;;		On entry : 0/0
 21892 ;;		On exit  : 0/0
 21893 ;;		Unchanged: 0/0
 21894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21899 ;;Total ram usage:        0 bytes
 21900 ;; Hardware stack levels used:    1
 21901 ;; This function calls:
 21902 ;;		Nothing
 21903 ;; This function is called by:
 21904 ;;		_main
 21905 ;;		_INT_CallBack
 21906 ;; This function uses a non-reentrant model
 21907 ;;
 21908                           
 21909                           
 21910                           ;psect for function _S1_ISR
 21911  1F06                     _S1_ISR:
 21912  1F06                     i1l5092:	
 21913                           ;incstack = 0
 21914                           ; Regs used in _S1_ISR: []
 21915                           
 21916                           
 21917                           ;main.c: 825: PIE0bits.INTE = 0;
 21918  1F06  002E               	movlb	14	; select bank14
 21919  1F07  1016               	bcf	22,0	;volatile
 21920                           
 21921                           ;main.c: 826: flagS1pushed = 1;
 21922  1F08  0021               	movlb	1	; select bank1
 21923  1F09  01B2               	clrf	_flagS1pushed^(0+128)
 21924  1F0A  0AB2               	incf	_flagS1pushed^(0+128),f
 21925                           
 21926                           ;main.c: 845: (PIR0bits.INTF = 0);
 21927  1F0B  002E               	movlb	14	; select bank14
 21928  1F0C  100C               	bcf	12,0	;volatile
 21929                           
 21930                           ;main.c: 846: PIE0bits.INTE = 1;
 21931  1F0D  1416               	bsf	22,0	;volatile
 21932  1F0E                     i1l1453:
 21933  1F0E  0008               	return
 21934  1F0F                     __end_of_S1_ISR:
 21935                           
 21936                           	psect	text82
 21937  1180                     __ptext82:	
 21938 ;; *************** function _EUSART_Transmit_ISR *****************
 21939 ;; Defined at:
 21940 ;;		line 181 in file "mcc_generated_files/eusart.c"
 21941 ;; Parameters:    Size  Location     Type
 21942 ;;		None
 21943 ;; Auto vars:     Size  Location     Type
 21944 ;;		None
 21945 ;; Return value:  Size  Location     Type
 21946 ;;                  1    wreg      void 
 21947 ;; Registers used:
 21948 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21949 ;; Tracked objects:
 21950 ;;		On entry : 0/0
 21951 ;;		On exit  : 0/0
 21952 ;;		Unchanged: 0/0
 21953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21956 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21958 ;;Total ram usage:        1 bytes
 21959 ;; Hardware stack levels used:    1
 21960 ;; This function calls:
 21961 ;;		Nothing
 21962 ;; This function is called by:
 21963 ;;		_EUSART_Initialize
 21964 ;;		_INTERRUPT_InterruptManager
 21965 ;; This function uses a non-reentrant model
 21966 ;;
 21967                           
 21968                           
 21969                           ;psect for function _EUSART_Transmit_ISR
 21970  1180                     _EUSART_Transmit_ISR:
 21971  1180                     i1l5516:	
 21972                           ;incstack = 0
 21973                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 21974                           
 21975                           
 21976                           ;eusart.c: 185: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 21977  1180  3040               	movlw	64
 21978  1181  0021               	movlb	1	; select bank1
 21979  1182  025A               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 21980  1183  1803               	skipnc
 21981  1184  2986               	goto	u536_21
 21982  1185  2987               	goto	u536_20
 21983  1186                     u536_21:
 21984  1186  29A0               	goto	i1l845
 21985  1187                     u536_20:
 21986  1187                     i1l5518:
 21987                           
 21988                           ;eusart.c: 186: {;eusart.c: 187: TX1REG = eusartTxBuffer[eusartTxTail++];
 21989  1187  083A               	movf	_eusartTxTail^(0+128),w
 21990  1188  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 21991  1189  0086               	movwf	6
 21992  118A  3001               	movlw	1	; select bank3/4
 21993  118B  0087               	movwf	7
 21994  118C  0801               	movf	1,w
 21995  118D  0022               	movlb	2	; select bank2
 21996  118E  009A               	movwf	26	;volatile
 21997  118F                     i1l5520:
 21998  118F  3001               	movlw	1
 21999  1190  00F0               	movwf	??_EUSART_Transmit_ISR
 22000  1191  0870               	movf	??_EUSART_Transmit_ISR,w
 22001  1192  0021               	movlb	1	; select bank1
 22002  1193  07BA               	addwf	_eusartTxTail^(0+128),f	;volatile
 22003  1194                     i1l5522:
 22004                           
 22005                           ;eusart.c: 188: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 22006  1194  3040               	movlw	64
 22007  1195  023A               	subwf	_eusartTxTail^(0+128),w	;volatile
 22008  1196  1C03               	skipc
 22009  1197  2999               	goto	u537_21
 22010  1198  299A               	goto	u537_20
 22011  1199                     u537_21:
 22012  1199  299B               	goto	i1l5526
 22013  119A                     u537_20:
 22014  119A                     i1l5524:
 22015                           
 22016                           ;eusart.c: 189: {;eusart.c: 190: eusartTxTail = 0;
 22017  119A  01BA               	clrf	_eusartTxTail^(0+128)	;volatile
 22018  119B                     i1l5526:
 22019                           
 22020                           ;eusart.c: 191: };eusart.c: 192: eusartTxBufferRemaining++;
 22021  119B  3001               	movlw	1
 22022  119C  00F0               	movwf	??_EUSART_Transmit_ISR
 22023  119D  0870               	movf	??_EUSART_Transmit_ISR,w
 22024  119E  07DA               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 22025                           
 22026                           ;eusart.c: 193: }
 22027  119F  29A2               	goto	i1l848
 22028  11A0                     i1l845:
 22029                           
 22030                           ;eusart.c: 194: else;eusart.c: 195: {;eusart.c: 196: PIE3bits.TXIE = 0;
 22031  11A0  002E               	movlb	14	; select bank14
 22032  11A1  1219               	bcf	25,4	;volatile
 22033  11A2                     i1l848:
 22034  11A2  0008               	return
 22035  11A3                     __end_of_EUSART_Transmit_ISR:
 22036                           
 22037                           	psect	text83
 22038  113E                     __ptext83:	
 22039 ;; *************** function _EUSART_Receive_ISR *****************
 22040 ;; Defined at:
 22041 ;;		line 200 in file "mcc_generated_files/eusart.c"
 22042 ;; Parameters:    Size  Location     Type
 22043 ;;		None
 22044 ;; Auto vars:     Size  Location     Type
 22045 ;;		None
 22046 ;; Return value:  Size  Location     Type
 22047 ;;                  1    wreg      void 
 22048 ;; Registers used:
 22049 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 22050 ;; Tracked objects:
 22051 ;;		On entry : 0/0
 22052 ;;		On exit  : 0/0
 22053 ;;		Unchanged: 0/0
 22054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22057 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22058 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22059 ;;Total ram usage:        1 bytes
 22060 ;; Hardware stack levels used:    1
 22061 ;; This function calls:
 22062 ;;		Nothing
 22063 ;; This function is called by:
 22064 ;;		_EUSART_Initialize
 22065 ;;		_INTERRUPT_InterruptManager
 22066 ;; This function uses a non-reentrant model
 22067 ;;
 22068                           
 22069                           
 22070                           ;psect for function _EUSART_Receive_ISR
 22071  113E                     _EUSART_Receive_ISR:
 22072  113E                     i1l5528:	
 22073                           ;incstack = 0
 22074                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 22075                           
 22076                           
 22077                           ;eusart.c: 203: if(1 == RC1STAbits.OERR)
 22078  113E  0022               	movlb	2	; select bank2
 22079  113F  1C9D               	btfss	29,1	;volatile
 22080  1140  2942               	goto	u538_21
 22081  1141  2943               	goto	u538_20
 22082  1142                     u538_21:
 22083  1142  2945               	goto	i1l5532
 22084  1143                     u538_20:
 22085  1143                     i1l5530:
 22086                           
 22087                           ;eusart.c: 204: {;eusart.c: 207: RC1STAbits.CREN = 0;
 22088  1143  121D               	bcf	29,4	;volatile
 22089                           
 22090                           ;eusart.c: 208: RC1STAbits.CREN = 1;
 22091  1144  161D               	bsf	29,4	;volatile
 22092  1145                     i1l5532:
 22093                           
 22094                           ;eusart.c: 209: };eusart.c: 212: eusartRxBuffer[eusartRxHead++] = RC1REG;
 22095  1145  0819               	movf	25,w	;volatile
 22096  1146  00F0               	movwf	??_EUSART_Receive_ISR
 22097  1147  0021               	movlb	1	; select bank1
 22098  1148  0839               	movf	_eusartRxHead^(0+128),w
 22099  1149  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 22100  114A  0086               	movwf	6
 22101  114B  3002               	movlw	2	; select bank4/5
 22102  114C  0087               	movwf	7
 22103  114D  0870               	movf	??_EUSART_Receive_ISR,w
 22104  114E  0081               	movwf	1
 22105  114F                     i1l5534:
 22106  114F  3001               	movlw	1
 22107  1150  00F0               	movwf	??_EUSART_Receive_ISR
 22108  1151  0870               	movf	??_EUSART_Receive_ISR,w
 22109  1152  07B9               	addwf	_eusartRxHead^(0+128),f	;volatile
 22110  1153                     i1l5536:
 22111                           
 22112                           ;eusart.c: 213: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 22113  1153  3040               	movlw	64
 22114  1154  0239               	subwf	_eusartRxHead^(0+128),w	;volatile
 22115  1155  1C03               	skipc
 22116  1156  2958               	goto	u539_21
 22117  1157  2959               	goto	u539_20
 22118  1158                     u539_21:
 22119  1158  295A               	goto	i1l5540
 22120  1159                     u539_20:
 22121  1159                     i1l5538:
 22122                           
 22123                           ;eusart.c: 214: {;eusart.c: 215: eusartRxHead = 0;
 22124  1159  01B9               	clrf	_eusartRxHead^(0+128)	;volatile
 22125  115A                     i1l5540:
 22126                           
 22127                           ;eusart.c: 216: };eusart.c: 217: eusartRxCount++;
 22128  115A  3001               	movlw	1
 22129  115B  00F0               	movwf	??_EUSART_Receive_ISR
 22130  115C  0870               	movf	??_EUSART_Receive_ISR,w
 22131  115D  07B7               	addwf	_eusartRxCount^(0+128),f	;volatile
 22132  115E                     i1l853:
 22133  115E  0008               	return
 22134  115F                     __end_of_EUSART_Receive_ISR:
 22135  007E                     btemp	set	126	;btemp
 22136  007E                     int$flags	set	126
 22137  007E                     wtemp0	set	126
 22138                           
 22139                           	psect	config
 22140                           
 22141                           ;Config register CONFIG1 @ 0x8007
 22142                           ;	External Oscillator mode selection bits
 22143                           ;	FEXTOSC = OFF, Oscillator not enabled
 22144                           ;	Power-up default value for COSC bits
 22145                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
 22146                           ;	Clock Out Enable bit
 22147                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
 22148                           ;	Clock Switch Enable bit
 22149                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 22150                           ;	Fail-Safe Clock Monitor Enable bit
 22151                           ;	FCMEN = ON, FSCM timer enabled
 22152  8007                     	org	32775
 22153  8007  3FEC               	dw	16364
 22154                           
 22155                           ;Config register CONFIG2 @ 0x8008
 22156                           ;	Master Clear Enable bit
 22157                           ;	MCLRE = ON, MCLR pin is Master Clear function
 22158                           ;	Power-up Timer Enable bit
 22159                           ;	PWRTE = OFF, PWRT disabled
 22160                           ;	Low-Power BOR enable bit
 22161                           ;	LPBOREN = OFF, ULPBOR disabled
 22162                           ;	Brown-out reset enable bits
 22163                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
 22164                           ;	Brown-out Reset Voltage Selection
 22165                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
 22166                           ;	Zero-cross detect disable
 22167                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
 22168                           ;	Peripheral Pin Select one-way control
 22169                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
 22170                           ;	Stack Overflow/Underflow Reset Enable bit
 22171                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
 22172                           ;	Background Debugger
 22173                           ;	DEBUG = OFF, Background Debugger disabled
 22174  8008                     	org	32776
 22175  8008  3FFF               	dw	16383
 22176                           
 22177                           ;Config register CONFIG3 @ 0x8009
 22178                           ;	WDT Period Select bits
 22179                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 22180                           ;	WDT operating mode
 22181                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
 22182                           ;	WDT Window Select bits
 22183                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 22184                           ;	WDT input clock selector
 22185                           ;	WDTCCS = SC, Software Control
 22186  8009                     	org	32777
 22187  8009  3F9F               	dw	16287
 22188                           
 22189                           ;Config register CONFIG4 @ 0x800A
 22190                           ;	UserNVM self-write protection bits
 22191                           ;	WRT = OFF, Write protection off
 22192                           ;	Scanner Enable bit
 22193                           ;	SCANE = available, Scanner module is available for use
 22194                           ;	Low Voltage Programming Enable bit
 22195                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
 22196  800A                     	org	32778
 22197  800A  3FFF               	dw	16383
 22198                           
 22199                           ;Config register CONFIG5 @ 0x800B
 22200                           ;	UserNVM Program memory code protection bit
 22201                           ;	CP = OFF, Program Memory code protection disabled
 22202                           ;	DataNVM code protection bit
 22203                           ;	CPD = OFF, Data EEPROM code protection disabled
 22204  800B                     	org	32779
 22205  800B  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    49
    Data        11
    BSS         196
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     60      69
    BANK1            80     18      59
    BANK2            80     32      67
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    main$3499$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    main$3499	const PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    cmd_rc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_rtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_rp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_ra@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_ir@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    S1885$0$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    memset@p1	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    memset@p	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[7]), STR_3(CODE[7]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> update_menuLCD@l(BANK1[3]), update_menuLCD@tt(BANK1[4]), update_menuLCD@str(BANK1[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_tri@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_trc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_aa@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_dtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_dac@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_mta@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_mmp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_sc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    sendMessage@buffer	PTR unsigned char  size(1) Largest target is 9
		 -> cmd_tri@buffEOM(BANK0[1]), cmd_tri@buffData(BANK0[5]), cmd_tri@buffInit(BANK0[4]), cmd_trc@buffEOM(BANK0[1]), 
		 -> cmd_trc@buffData(BANK0[5]), cmd_trc@buffInit(BANK0[3]), cmd_ir@buff(BANK0[7]), cmd_ra@buff(BANK0[9]), 
		 -> cmd_rp@buff(BANK0[5]), cmd_rtl@buff(BANK0[5]), cmd_rc@buff(BANK0[6]), sendERRORMessage@bufw(BANK0[4]), 
		 -> sendOKMessage@bufw(BANK0[4]), checkFlags@buff(BANK0[7]), 

    differenceBetweenTimePeriod@diff	PTR struct Time size(1) Largest target is 3
		 -> update_menuLCD@diff(BANK1[3]), 

    LCDstr@p	PTR unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[4]), update_menuLCD@l(BANK1[3]), update_menuLCD@tt(BANK1[4]), update_menuLCD@str(BANK1[8]), 

    S1885command_d$cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    commands.cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _Clock_ISR->___awdiv

Critical Paths under _main in BANK0

    _main->_editClock
    _main->_editLum
    _main->_editTemp
    _main->_toggleAlarms
    _toggleAlarms->_checkFlags
    _getch->_EUSART_Read
    _editTemp->_checkFlags
    _editLum->_checkFlags
    _editClock->_checkFlags
    _checkFlags->_update_menuLCD
    _wirteEEPROMinit->_DATAEE_WriteByte
    _update_menuLCD->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDstr->_LCDchar
    _LCDchar->_LCDsend2x4
    _LCDcmd->_LCDsend2x4
    _monitoring_TEMP_LUM->_DATAEE_WriteByte
    _tsttc->_WriteI2C
    _DATAEE_WriteByte->___wmul
    _cmd_tri->_sendERRORMessage
    _cmd_trc->_sendERRORMessage
    _DATAEE_ReadByte->___wmul
    _cmd_sc->_sendERRORMessage
    _cmd_sc->_sendOKMessage
    _cmd_mta->_sendERRORMessage
    _cmd_mta->_sendOKMessage
    _cmd_mmp->_sendERRORMessage
    _cmd_mmp->_sendOKMessage
    _cmd_dtl->_sendERRORMessage
    _cmd_dtl->_sendOKMessage
    _cmd_dac->_sendERRORMessage
    _cmd_dac->_sendOKMessage
    _cmd_aa->_sendERRORMessage
    _cmd_aa->_sendOKMessage
    _sendOKMessage->_sendMessage
    _sendERRORMessage->_sendMessage
    _sendMessage->_putch
    _putch->_EUSART_Write
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _LCDinit->_LCDsend2x4
    _LCDsend2x4->_WriteI2C
    _LCDsend->_WriteI2C

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR1_ISR->_Clock_ISR

Critical Paths under _main in BANK1

    _toggleAlarms->_update_menuLCD
    _editTemp->_update_menuLCD
    _editLum->_update_menuLCD
    _editClock->_update_menuLCD
    _checkFlags->_update_menuLCD

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  266878
                                             57 BANK0      3     3      0
                                              0 BANK2     32    32      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                 _EUSART_is_rx_ready
            _INT_SetInterruptHandler
                            _LCDinit
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                  _SYSTEM_Initialize
           _TMR1_SetInterruptHandler
                     _TMR2_StopTimer
                             ___wmul
                         _checkFlags
                             _cmd_aa *
                            _cmd_dac *
                            _cmd_dtl *
                             _cmd_ir *
                            _cmd_mmp *
                            _cmd_mta *
                             _cmd_ra *
                             _cmd_rc *
                             _cmd_rp *
                            _cmd_rtl *
                             _cmd_sc *
                            _cmd_trc *
                            _cmd_tri *
                          _editClock
                            _editLum
                           _editTemp
                              _getch
                   _i2c1_driver_open
                             _memset
                       _toggleAlarms
 ---------------------------------------------------------------------------------
 (1) _toggleAlarms                                         1     1      0   38268
                                             56 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     785
                                              7 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getch                                                0     0      0      37
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _editTemp                                             1     1      0   38268
                                             56 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editLum                                              1     1      0   38268
                                             56 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editClock                                            1     1      0   38268
                                             56 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (2) _checkFlags                                           8     8      0   27856
                                             48 BANK0      8     8      0
                 _PWM6_LoadDutyValue
               _PWM_Output_D4_Enable
                           _S1button
                    _TMR2_StartTimer
                _monitoring_TEMP_LUM
                        _sendMessage
                     _update_menuLCD
                    _wirteEEPROMinit
 ---------------------------------------------------------------------------------
 (3) _wirteEEPROMinit                                      1     1      0    5887
                                             17 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _update_menuLCD                                      24    24      0   10412
                                             42 BANK0      6     6      0
                                              0 BANK1     18    18      0
                            _LCDchar
                             _LCDcmd
                             _LCDstr
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                     _TMR2_StopTimer
        _differenceBetweenTimePeriod
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             29    21      8    5128
                                             21 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     412
                                             15 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     421
                                              7 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _differenceBetweenTimePeriod                          8     1      7     811
                                              7 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (3) _TMR2_StopTimer                                       0     0      0       0
                          _TMR2_Stop
 ---------------------------------------------------------------------------------
 (4) _TMR2_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Disable                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_LoadDutyValue                                   4     2      2     422
                                              7 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _LCDstr                                               6     4      2    1467
                                             16 BANK0      6     4      2
                            _LCDchar
 ---------------------------------------------------------------------------------
 (4) _LCDchar                                              1     1      0    1042
                                             15 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               1     1      0    1042
                                             15 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _monitoring_TEMP_LUM                                  3     3      0    8133
                                             17 BANK0      3     3      0
           _ADCC_GetSingleConversion
                   _DATAEE_WriteByte
                             ___wmul
                              _tsttc
 ---------------------------------------------------------------------------------
 (4) _tsttc                                                2     2      0      99
                                              9 BANK0      2     2      0
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (5) _ReadI2C                                              1     1      0       0
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DATAEE_WriteByte                                     4     1      3    5887
                                             13 BANK0      4     1      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADCC_GetSingleConversion                             4     1      3      31
                                              7 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (4) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _S1button                                             1     1      0       0
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Enable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cmd_tri                                             27    24      3   10576
                                             22 BANK0     27    24      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_trc                                             27    24      3   10087
                                             22 BANK0     27    24      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2116
                                              7 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2    1592
                                             13 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _cmd_sc                                              11     8      3    6256
                                             22 BANK0     11     8      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rtl                                              9     6      3    2928
                                             22 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rp                                               9     6      3    2928
                                             22 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rc                                              10     7      3    2965
                                             22 BANK0     10     7      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ra                                              13    10      3    3076
                                             22 BANK0     13    10      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mta                                              3     0      3    5906
                                             22 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mmp                                              3     0      3    5906
                                             22 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ir                                              11     8      3    3002
                                             22 BANK0     11     8      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dtl                                              9     6      3    6129
                                             22 BANK0      9     6      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dac                                             11     8      3    6256
                                             22 BANK0     11     8      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_aa                                               4     1      3    5968
                                             22 BANK0      4     1      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (2) _sendOKMessage                                        6     6      0    2922
                                             16 BANK0      6     6      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (2) _sendERRORMessage                                     6     6      0    2922
                                             16 BANK0      6     6      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (3) _sendMessage                                          6     3      3    2743
                                             10 BANK0      6     3      3
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                              9 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         2     2      0      62
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     664
                    _ADCC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM6_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     211
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     211
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     211
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     211
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     242
                                              9 BANK0      1     1      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0    1073
                                             15 BANK0      1     1      0
                            _LCDsend
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (5) _LCDsend2x4                                           6     5      1    1011
                                              9 BANK0      6     5      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _LCDsend                                              2     2      0      62
                                              9 BANK0      2     2      0
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (6) _WriteI2C                                             2     2      0      31
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     996
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                            _INT_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     996
                   Absolute function *
                          _Clock_ISR *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Clock_ISR                                           7     7      0     756
                                              0 BANK0      7     7      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (11) ___awdiv                                             9     5      4     756
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (9) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (10) _INT_CallBack                                        0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
                             _S1_ISR *
 ---------------------------------------------------------------------------------
 (11) _S1_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
     ___wmul (ARG)
   _DATAEE_WriteByte
     ___wmul (ARG)
   _EUSART_is_rx_ready
   _INT_SetInterruptHandler
   _LCDinit
     _LCDsend
       _WriteI2C
     _LCDsend2x4
       _WriteI2C
   _PWM6_LoadDutyValue
   _PWM_Output_D4_Disable
   _SYSTEM_Initialize
     _ADCC_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM6_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
   _TMR1_SetInterruptHandler
   _TMR2_StopTimer
     _TMR2_Stop
   ___wmul
   _checkFlags
     _PWM6_LoadDutyValue
     _PWM_Output_D4_Enable
     _S1button
     _TMR2_StartTimer
       _TMR2_Start
     _monitoring_TEMP_LUM
       _ADCC_GetSingleConversion
       _DATAEE_WriteByte
         ___wmul (ARG)
       ___wmul
       _tsttc
         _ReadI2C
         _WriteI2C
     _sendMessage
       _putch
         _EUSART_Write
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _wirteEEPROMinit
       _DATAEE_WriteByte
         ___wmul (ARG)
   _cmd_aa *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dac *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dtl *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ir *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_mmp *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_mta *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ra *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rc *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rp *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rtl *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_sc *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_trc *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _cmd_tri *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _editClock *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editLum *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editTemp *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _getch *
     _EUSART_Read
   _i2c1_driver_open *
   _memset *
   _toggleAlarms *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
       _S1_ISR *
   _TMR1_ISR *
     Absolute function(Fake) *
     _Clock_ISR *
       ___awdiv
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      45       5       86.2%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     12      3B       7       73.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     20      43       9       83.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     151      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     151      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Dec 15 12:19:54 2020

               ?_EUSART_SetRxInterruptHandler 0027                                             _t 005C  
                                          l30 158A                                            l22 10F5  
                                          l23 10F7                                            l33 1552  
                                          l42 1574                                            l26 10FD  
                                          l35 1557                                            l47 1588  
                                ___awdiv@sign 0076                                            _nr 0079  
                         ___wmul@multiplicand 0029                   __size_of_PWM6_LoadDutyValue 0019  
                           sendMessage@buffer 002C                                _update_menuLCD 0384  
                                         l128 14DD                                           l253 1F50  
                                         l182 1083                                           l185 1F32  
                                         l409 10DE                                           l188 1EFD  
                                         l540 1FCF                                           l620 1FFF  
                                         l525 1017                                           l439 1F3B  
                                         l617 1F6A                                           l537 1FC3  
                                         l730 11E2                                           l811 12AF  
                                         l731 11E9                                           l734 1F95  
                                         l662 1ED6                                           l647 1F86  
                                         l760 1F78                                           l832 12E6  
                                         l656 1ED0                                           l728 11DE  
                                         l817 1ECA                                           l833 12F0  
                                         l665 1EDE                                           l754 1F29  
                                         l842 1EF5                                           l659 1EDA  
                                         l827 1259                                           l836 130D  
                                         l839 1EE2                                           l856 1F20  
                                         l859 1F17                                           _PR2 028D  
                             _timer1ReloadVal 00D8                       __size_of_PMD_Initialize 0008  
                             _TMR2_Initialize 1F79                                           wreg 0009  
                                ?_EUSART_Read 0070                                   ?_LCDsend2x4 0029  
                             __end_of_LCDchar 1F45                                          l1020 0D40  
                                        l1111 1530                                          l1031 0D79  
                                        l1032 0D7B                                          l1016 0D2F  
                                        l1050 0DCF                                          l1107 152A  
                                        l1043 0DB7                                          l1019 0D3E  
                                        l1108 152C                                          l1212 09B3  
                                        l1052 0DD3                                          l1044 0DBA  
                                        l1300 0449                                          l1221 09F3  
                                        l1231 1787                                          l1303 04C3  
                                        l1224 0A09                                          l1080 0E60  
                                        l1056 0DE7                                          l1312 04C9  
                                        l1400 16A5                                          l1225 0A0B  
                                        l1081 0E63                                          l1057 0DE9  
                                        l1049 0DCD                                          l1321 057B  
                                        l1090 0E7E                                          l1234 1F05  
                                        l1306 047E                                          l1243 1067  
                                        l1228 0A12                                          l1068 0E22  
                                        l1069 0E24                                          l1237 1F44  
                                        l1309 04AE                                          l1421 13AD  
                                        l1510 0B30                                          l1086 0E76  
                                        l1262 1ED3                                          l1095 14EF  
                                        l1503 141B                                          l1511 0B43  
                                        l1087 0E78                                          l1407 16F9  
                                        l1096 14F1                                          l1256 1342  
                                        l1440 13AC                                          l1432 1378  
                                        l1345 0F5B                                          l2057 1458  
                                        l1337 05B5                                          l1506 1282  
                                        l1418 1711                                          l1450 12DD  
                                        l1515 0C04                                          l1259 1ECD  
                                        l1371 15DD                                          l2067 1377  
                                        l1443 12B0                                          l2244 113D  
                                        l1197 0961                                          l1533 0D2E  
                                        l1373 15C1                                          l1365 0FFF  
                                        l1429 13E1                                          l1198 0963  
                                        l1382 11C5                                          l1462 120E  
                                        l1470 117F                                          l2238 1FB9  
                                        l1286 093E                                          l1446 12C4  
                                        l1527 0C4A                                          l1456 104C  
                                        l1528 0C63                                          l1376 15E6  
                                        l1529 0C76                                          l1473 1233  
                                        l1459 10A1                                          l1467 17FF  
                                        l1483 10BF                                          l1491 0882  
                                        l1556 02BC                                          l1397 07F4  
                                        l1478 1031                                          l1486 149A  
                                        l1496 16A4                                          l1746 05D3  
                                        l1764 0686                                          l1781 0753  
                                        l6200 1536                                          l7000 1F93  
                                        l1785 1109                                          l6210 1550  
                                        l7010 1244                                          l1787 111D  
                                        l6220 1569                                          l6212 155C  
                                        l7100 103C                                          l6300 1FB0  
                                        l7020 1255                                          l7012 1249  
                                        l7004 1234                                          l6222 1579  
                                        l6206 153B                                          l7030 14F5  
                                        l6230 0946                                          l7110 1068  
                                        l7102 103D                                          l6310 1101  
                                        l6302 1FB6                                          l7022 1257  
                                        l7014 124F                                          l7006 1234  
                                        l6208 1545                                          l7032 1504  
                                        l6240 0989                                          l6232 0952  
                                        l7120 1077                                          l7112 106B  
                                        l7104 1041                                          l6312 1105  
                                        l6400 11D8                                          l6304 1FB8  
                                        l7040 0754                                          l7016 1250  
                                        l7008 123A                               __end_of_LCDinit 1788  
                                        l6218 155E                                          l7034 1508  
                                        l7026 14E0                                          l6250 09BA  
                                        l6242 098F                                          l6234 0967  
                                        l7122 107A                                          l7114 106E  
                                        l6410 1EF1                                          l7106 1086  
                                        l6314 110E                                          l6402 11D9  
                                        l6330 142D                                          l6322 141C  
                                        l7050 0767                                          l7042 075A  
                                        l7018 1252                                          l7130 1F4A  
                                        l7140 1EC8                                          l7036 1517  
                                        l7028 14E0                                          l6260 09F3  
                                        l6252 09C9                                          l6244 099E  
                                        l6236 0976                                          l6228 0941  
                                        l7220 1727                                          l7124 107D  
                                        l7116 1071                                          l7108 1096  
                                        l6316 1113                                          l6308 10FE  
                                        l6404 11DB                                          l6420 0D66  
                                        l6412 0D2F                                          l6340 1449  
                                        l6332 1431                                          l6324 141F  
                                        l7060 0776                                          l7052 0769  
                                        l7044 075D                                          l7300 13D4  
                                        l7132 1F4B                                          l7038 151B  
                                        l6262 09FA                                          l6254 09CF  
                                        l6246 09A4                                          l6238 097A  
                                        l7230 1747                                          l7222 172B  
                                        l7214 1712                                          l7126 1080  
                                        l7118 1074                                          l6318 1119  
                                        l6406 11DD                                          l6270 10FC  
                                        l6430 0DA1                                          l6422 0D6A  
                                        l6414 0D44                                          l6342 144E  
                                        l6334 1435                                          l6326 1425  
                                        l6350 134A                                          l6510 0601  
                                        l6502 05D8                                          l7070 0787  
                                        l7062 0778                                          l7054 076C  
                                        l7046 075F                                          l7310 1386  
                                        l7302 13D7                                          l7134 1F4D  
                                        l6264 0A0F                                          l6256 09DE  
                                        l6248 09B3                                          l7240 176B  
                                        l7232 174F                                          l7224 1737  
                                        l7216 171B                                          l6280 12EB  
                                        l7400 082B                                          l6600 1ED7  
                                        l6408 11E3                                          l6440 0DFC  
                                        l6432 0DA8                                          l6424 0D7F  
                                        l6416 0D53                                          l6336 1444  
                                        l6328 1428                                          l6344 1454  
                                        l6360 1364                                          l6352 134D  
                                        l6520 0638                                          l6512 0610  
                                        l6504 05E1                                          l7080 07BC  
                                        l7072 078C                                          l7064 077D  
                                        l7048 0764                                          l7056 076E  
                                        l7312 138C                                          l7320 139F  
                                        l7304 13DF                                          l7144 1EDF  
                                        l7128 1F45                                          l6258 09E4  
                                        l7242 1771                                          l7234 1753  
                                        l7226 173B                                          l7218 171F  
                                        l6602 1F21                                          l6290 1309  
                                        l6282 12F1                                          l7410 0853  
                                        l7402 082F                                          l6370 1FBC  
                                        l6266 10DF                                          l6450 0E37  
                                        l6442 0E00                                          l6434 0DBE  
                                        l6426 0D8E                                          l6418 0D57  
                                        l6274 1ED4                                          l6338 1448  
                                        l6362 1368                                          l6354 1352  
                                        l6530 0650                                          l6522 063F  
                                        l6514 0614                                          l6506 05ED  
                                        l6610 0883                                          l7090 07DD  
                                        l7082 07BD                                          l7074 07A9  
                                        l7066 0780                                          l7058 0773  
                                        l7250 16B0                                          l7322 13A2  
                                        l7314 1392                                          l7306 137D  
                                        l7330 12C0                                          l7244 1777  
                                        l7236 175F                                          l7228 1743  
                                        l6604 1F0F                                          l6284 12FD  
                                        l6292 130B                                          l6276 12E0  
                                        l7340 11EA                                          l7412 0860  
                                        l7404 083C                                          l7420 1646  
                                        l7500 0BB1                                          l6380 1FC8  
                                        l6372 1FBF                                          l6268 10EA  
                                        l6460 0E7C                                          l6452 0E3B  
                                        l6444 0E0F                                          l6436 0DD8  
                                        l6428 0D92                                          l6364 136D  
                                        l6356 1356                                          l6348 1343  
                                        l6540 066C                                          l6524 0643  
                                        l6508 05F0                                          l6700 0508  
                                        l6620 03A2                                          l6612 0384  
                                        l7092 07E3                                          l7084 07C2  
                                        l7076 07B4                                          l7068 0782  
                                        l7260 16CB                                          l7252 16B5  
                                        l7324 13AA                                          l7316 1393  
                                        l7308 1383                                          l7332 12CD  
                                        l6198 1533                                          l7246 177D  
                                        l7238 1763                                          l6606 1F18  
                                        l6286 1302                                          l6278 12E0  
                                        l7342 1203                                          l7350 17BE  
                                        l7414 0868                                          l7406 0841  
                                        l7430 1682                                          l7422 165F  
                                        l7510 0BDC                                          l7502 0BB7  
                                        l6374 1FC0                                          l6390 11C6  
                                        l6454 0E4A                                          l6446 0E13  
                                        l6438 0DED                                          l6294 1F3E  
                                        l6470 1052                                          l6358 135A  
                                        l6366 1373                                          l6550 069A  
                                        l6542 0676                                          l6526 0647  
                                        l6518 0620                                          l6710 053E  
                                        l6702 051B                                          l6630 03F5  
                                        l6622 03C6                                          l6614 038A  
                                        l7094 07E6                                          l7086 07C7  
                                        l7078 07B7                                          l7270 16E9  
                                        l7262 16D2                                          l7254 16BB  
                                        l7318 139C                                          l7326 12B5  
                                        l7334 12D0                                          l6288 1308  
                                        l7520 0C05                                          l7360 17EA  
                                        l7352 17C3                                          l7344 1788  
                                        l7416 0879                                          l7408 084E  
                                        l7432 168A                                          l7424 1663  
                                        l7440 13ED                                          l7504 0BC2  
                                        l7512 0BE1                                          l6608 1ECB  
                                        l6376 1FC1                                          l6392 11CE  
                                        l6456 0E51                                          l6448 0E28  
                                        l6800 0FDA                                          l6464 1F00  
                                        l6384 1FE7                                          l6480 1326  
                                        l6472 130E                                          l6296 1FA9  
                                        l6560 06B2                                          l6552 069D  
                                        l6544 067C                                          l6536 0652  
                                        l6528 064B                                          l6720 055E  
                                        l6712 0546                                          l6704 052B  
                                        l6640 041C                                          l6632 03FE  
                                        l6624 03E3                                          l6616 0393  
                                        l7096 07F0                                          l7088 07CD  
                                        l7272 16F0                                          l7264 16D9  
                                        l7256 16C2                                          l7248 16AA  
                                        l7280 1705                                          l7336 12D3  
                                        l7328 12BB                                          l7098 1034  
                                        l7530 0C3C                                          l7522 0C0D  
                                        l7362 17F6                                          l7354 17D0  
                                        l7346 17AD                                          l7370 120F  
                                        l7418 087E                                          l7434 169B  
                                        l7426 1670                                          l7450 140E  
                                        l7442 13F4                                          l7514 0BEF  
                                        l7506 0BC7                                          l6386 1ECE  
                                        l6378 1FC2                                          l6394 11D2  
                                        l6458 0E67                                          l6810 0FEF  
                                        l6802 0FDC                                          l6466 104D  
                                        l6482 132C                                          l6474 130F  
                                        l6298 1FAA                                          l6570 06D4  
                                        l6562 06B8                                          l6554 06A1  
                                        l6546 0682                                          l6490 05BD  
                                        l6722 0563                                          l6714 054D  
                                        l6730 057C                                          l6706 0533  
                                        l6650 0441                                          l6642 0423  
                                        l6634 0405                                          l6626 03E7  
                                        l6618 039B                                          l7282 1708  
                                        l7274 16F2                                          l7266 16DB  
                                        l7258 16C4                                          l7290 13BB  
                                        l7338 12DB                                          l7610 00B6  
                                        l7602 0094                                          l6900 14DA  
                                        l7540 0C6F                                          l7532 0C42  
                                        l7524 0C1B                                          l7356 17D5  
                                        l7348 17B1                                          l7364 17FB  
                                        l7372 1228                                          l7380 102D  
                                        l7428 1675                                          l7436 16A0  
                                        l7452 1412                                          l7444 13F8  
                                        l7516 0BF4                                          l7508 0BDB  
                                        l7460 0B04                                          l6396 11D6  
                                        l6820 0FFD                                          l6812 0FF5  
                                        l6804 0FDE                                          l6468 104E  
                                        l6388 1EDB                                          l6484 1332  
                                        l6476 1315                                          l6580 06F6  
                                        l6572 06DB                                          l6564 06BF  
                                        l6556 06A7                                          l6548 0691  
                                        l6492 05C3                                          l6740 059A  
                                        l6732 0583                                          l6724 056A  
                                        l6716 0553                                          l6708 053A  
                                        l6660 0467                                          l6652 0451  
                                        l6644 042B                                          l6636 040D  
                                        l6628 03EF                                          l7284 170F  
                                        l7268 16E2                                          l7276 16F9  
                                        l7292 13C1                                          l7700 0273  
                                        l7612 00B8                                          l7604 009E  
                                        l6910 1F31                                          l6902 1EF6  
                                        l7550 0C9F                                          l7542 0C7C  
                                        l7534 0C54                                          l7526 0C20  
                                        l7358 17E2                                          l7366 115F  
                                        l7374 1018                                          l7382 10A2  
                                        l7390 1459                                          l7454 1417  
                                        l7446 13FD                                          l7438 13E2  
                                        l7470 0B36                                          l7462 0B0C  
                                        l7518 0C00                                          l6830 15A2  
                                        l6822 158B                                          l6398 11D7  
                                        l6814 0FF7                                          l6806 0FE5  
                                        l6750 0E7F                                          l6486 1ED1  
                                        l6478 131C                                          l6590 0732  
                                        l6574 06DF                                          l6566 06C3  
                                        l6582 06FA                                          l6558 06AE  
                                        l6494 05CA                                          l6742 05A0  
                                        l6734 0589                                          l6726 056F  
                                        l6718 0558                                          l6670 04B3  
                                        l6662 046C                                          l6654 0457  
                                        l6646 0431                                          l6638 0413  
                                        l7278 1702                                          l7294 13C7  
                                        l7286 13B2                                          l7710 029A  
                                        l7702 0279                                          l7630 00FB  
                                        l7614 00B9                                          l7606 00A1  
                                        l6920 1015                                          l6904 1F2A  
                                        l6912 1F5E                                          l7560 0CB1  
                                        l7552 0CAA                                          l7544 0C89  
                                        l7536 0C58                                          l7528 0C2D  
                                        l7368 1174                                          l7376 1020  
                                        l7384 10AE                                          l7392 1480  
                                        l7448 1407                                          l7456 125A  
                                        l7480 0B62                                          l7472 0B3C  
                                        l7464 0B18                                          l6840 15CF  
                                        l6832 15A5                                          l6824 1592  
                                        l6816 0FF9                                          l6808 0FEA  
                                        l6760 0F50                                          l6752 0E98  
                                        l6584 06FF                                          l6576 06E9  
                                        l6568 06CE                                          l6496 05CF  
                                        l6592 073B                                          l6488 05B8  
                                        l6744 05A5                                          l6736 058E  
                                        l6728 0576                                          l6672 04B5  
                                        l6664 048A                                          l6656 045D  
                                        l6648 043A                                          l7296 13C8  
                                        l7288 13B8                                          l7712 029F  
                                        l7704 027F                                          l7640 01AF  
                                        l7632 0109                                          l7624 00CC  
                                        l7616 00C6                                          l7608 00B4  
                                        l6906 1F2D                                          l6914 1F65  
                                        l6930 1F81                                          l6922 1F79  
                                        l6850 11B2                                          l7570 0CFA  
                                        l7562 0CD7                                          l7554 0CB0  
                                        l7538 0C69                                          l7378 1028  
                                        l7386 10B6                                          l7394 148B  
                                        l7458 1277                                          l7482 0B6F  
                                        l7474 0B4E                                          l7466 0B1E  
                                        l6842 15D2                                          l6826 1598  
                                        l6834 15A8                                          l6818 0FFC  
                                        l6770 0F78                                          l6762 0F56  
                                        l6754 0EA9                                          l6586 0727  
                                        l6578 06EF                                          l6594 074F  
                                        l6498 05D4                                          l6746 05AA  
                                        l6738 0593                                          l6690 04D3  
                                        l6674 04BC                                          l6666 04A4  
                                        l6658 0462                                          l7298 13D1  
                                        l7714 02A6                                          l7706 028B  
                                        l7722 02BC                                          l7650 01EE  
                                        l7642 01BB                                          l7626 00E8  
                                        l7618 00C8                                          l7634 010B  
                                        l6916 1001                                          l6908 1F2E  
                                        l6860 14A5                                          l6940 10C7  
                                        l6932 1F83                                          l6924 1F7C  
                                        l6852 11B7                                          l7580 0D1A  
                                        l7572 0CFE                                          l7564 0CDB  
                                        l7548 0C8E                                          l7388 10BB  
                                        l7396 148F                                          l7484 0B7A  
                                        l7476 0B5D                                          l7468 0B22  
                                        l6844 15D9                                          l6836 15AF  
                                        l6828 159D                                          l6780 0F9E  
                                        l6772 0F7E                                          l6764 0F60  
                                        l6756 0EBA                                          l6588 072E  
                                        l6748 05B1                                          l6692 04E6  
                                        l6676 04BF                                          l6668 04AB  
                                        l7740 032C                                          l7732 02D3  
                                        l7724 02C4                                          l7716 02B2  
                                        l7708 028E                                          l7660 022C  
                                        l7652 01FB                                          l7644 01C7  
                                        l7636 0111                                          l7628 00EC  
                                        l6918 1013                                          l6870 14B0  
                                        l6862 14A7                                          l6854 149B  
                                        l6598 1F33                                          l6950 10DB  
                                        l6942 10C9                                          l6934 10C0  
                                        l6926 1F7D                                          l6846 11A3  
                                        l7582 0D1E                                          l7574 0D02  
                                        l7566 0CE1                                          l7398 0806  
                                        l7494 0B80                                          l7486 0B7A  
                                        l6838 15BC                                          l6790 0FC8  
                                        l6782 0FA9                                          l6774 0F84  
                                        l6766 0F74                                          l6758 0F4A  
                                        l6694 04F6                                          l6686 04C9  
                                        l7590 112D                                          l7750 0346  
                                        l7742 0338                                          l7734 02F1  
                                        l7726 02D1                                          l7718 02B5  
                                        l7670 0246                                          l7662 0237  
                                        l7654 0208                                          l7646 01D4  
                                        l7638 0116                                          l6960 1285  
                                        l6952 1F6B                                          l6880 14C4  
                                        l6872 14B2                                          l6864 14A9  
                                        l6856 14A1                                          l6944 10D0  
                                        l6936 10C3                                          l6928 1F80  
                                        l6848 11A7                                          l7576 0D11  
                                        l7568 0CEC                                          l7584 0D2A  
                                        l7496 0B9E                                          l7488 0B7E  
                                        l6792 0FCD                                          l6776 0F89  
                                        l6768 0F77                                          l6784 0FB4  
                                        l6696 04FE                                          l6688 04CD  
                                        l7592 1131                                          l7760 0362  
                                        l7752 034C                                          l7744 0338  
                                        l7736 030D                                          l7680 024E  
                                        l7672 0247                                          l7664 0242  
                                        l7656 0215                                          l7648 01E1  
                                        _ALAF 007C                                          l6970 129E  
                                        l6962 128D                                          l6954 1F6E  
                                        l6890 14CF                                          l6882 14C6  
                                        l6874 14B4                                          l6866 14AB  
                                        l6858 14A3                                          l6946 10D2  
                                        l6938 10C5                                          l7578 0D14  
                                        l7498 0BAD                                          l6794 0FD3  
                                        l6786 0FBA                                          l6778 0F9D  
                                        l6698 0502                                          l7586 1120  
                                        l7762 0366                                          l7754 0350  
                                        l7738 031F                                          l7746 033B  
                                        l7690 0256                                          l7682 0250  
                                        l7674 0248                                          l7666 0244  
                                        l7658 0221                                          l6980 12AA  
                                        l6972 12A0                                          l6964 1297  
                                        l6956 1F76                                          l6892 14D1  
                                        l6884 14C8                                          l6876 14C0  
                                        l6868 14AE                                          l6948 10D3  
                                        l6796 0FD5                                          l6788 0FC2  
                                        l7588 1125                                          l7764 036D  
                                        l7756 0357                                          l7748 0342  
                                        l7692 0261                                          l7684 0251  
                                        l7676 024B                                          l7668 0245  
                                        l6982 12AB                                          l6974 12A1  
                                        l6966 129A                                          l6958 1283  
                                        l6894 14D4                                          l6886 14CA  
                                        l6878 14C2                                          l6990 1F8B  
                                        l6798 0FD7                                          l7766 0371  
                                        l7758 035B                                          l7694 0264  
                                        l7686 0254                                          l7678 024D  
                             __end_of_LCDsend 1531                                          l6984 12AC  
                                        l6976 12A3                                          l6968 129C  
                                        l6896 14D6                                          l6888 14CD  
                                        l6992 1F8F                                          l7768 037E  
                                        l7696 0265                                          l7688 0255  
                                        l6986 12AD                                          l6978 12A4  
                                        l6898 14D8                                          l6994 1F90  
                                        l7698 026D                                          l6996 1F91  
                                        l6988 1F87                                          l6998 1F92  
                                        STR_1 1827                                          STR_2 1827  
                                        STR_3 1840                                          STR_4 1840  
                                        STR_5 1847                                          STR_6 1847  
                                        STR_7 184C                                          _LATA 0016  
                                        _LATB 0017                               __end_of_INT_ISR 1EE9  
                                        _LATC 0018                                          _LATD 0019  
                                        _LATE 001A                                          _T2PR 028D  
                                        u7010 1119                                          u7011 1118  
                                        u7020 1425                                          _PMD0 0796  
                                        u7005 110F                                          u7021 1424  
                                        _PMD1 0797                                          u7110 135A  
                                        _PMD2 0798                                          u7111 1359  
                                        _PMD3 0799                                          u7200 0D53  
                                        u8000 0F9D                                          u7040 1435  
                                        u7120 1364                                          _PMD4 079A  
                                        u7201 0D52                                          u8001 0F9C  
                                        u7041 1434                                          u7121 1363  
                                        u7105 134E                                          _PMD5 079B  
                                        u7210 0D66                                          u8010 0FBA  
                                        u7211 0D65                                          u8011 0FB9  
                                        u7035 1429                                          u8100 159D  
                                        u7300 0DD8                                          u7220 0D79  
                                        u8020 0FC2                                          u7060 1444  
                                        u7140 1373                                          u8101 159C  
                                        u7301 0DD7                                          u7221 0D78  
                                        u8021 0FC1                                          u8005 0F99  
                                        u7061 1443                                          u7141 1372  
                                        u7125 1360                                          u8110 15A2  
                                        u7150 1FC8                                          u7310 0DE7  
                                        u7230 0D7F                                          u8030 0FC8  
                                        u8111 15A1                                          u7151 1FC7  
                                        u7311 0DE6                                          u7231 0D7E  
                                        u8031 0FC7                                          u7055 1436  
                                        u7135 1369                                          u8200 14F5  
                                        u9000 0868                                          u8120 15AF  
                                        u7400 0E67                                          u7320 0DED  
                                        u7240 0D8E                                          u8040 0FCD  
                                        u7080 1454                                          u8201 14F4  
                                        u9001 0867                                          u8121 15AE  
                                        u7401 0E66                                          u7321 0DEC  
                                        u7241 0D8D                                          u8041 0FCC  
                                        u7081 1453                                          u7065 1440  
                                        u8210 1504                                          u9010 1663  
                                        u8130 15BC                                          u7170 11E2  
                                        u7410 0E76                                          u7330 0DFC  
                                        u7250 0DA1                                          u8050 0FE5  
                                        u7090 134A                                          u8211 1503  
                                        u9011 1662                                          u8131 15BB  
                                        u7171 11E1                                          u7411 0E75  
                                        u7331 0DFB                                          u7251 0DA0  
                                        u8051 0FE4                                          u7075 144A  
                                        u7091 1349                                          u6700 1545  
                                        u8220 1517                                          u9020 1670  
                                        u9100 0B0C                                          u8140 15CF  
                                        u7420 0E7C                                          u7340 0E0F  
                                        u7260 0DB7                                          u7180 0D3E  
                                        u8060 0FEA                                          u7500 066B  
                                        u8300 078C                                          u6701 1544  
                                        u8221 1516                                          u9021 166F  
                                        u9101 0B0B                                          u8141 15CE  
                                        u7421 0E7B                                          u7341 0E0E  
                                        u7261 0DB6                                          u7181 0D3D  
                                        u8061 0FE9                                          u7165 1FF8  
                                        u7501 066A                                          u8301 078B  
                                        _TALA 00D6                                          u6710 1550  
                                        u8230 152A                                          u9030 1675  
                                        u9110 0B22                                          u8150 15D9  
                                        u7350 0E22                                          u7270 0DBE  
                                        u7190 0D44                                          u8070 0FEF  
                                        u7430 1067                                          u7510 0676  
                                        u8310 07BC                                          u6711 154F  
                                        u8231 1529                                          u9031 1674  
                                        u9111 0B21                                          u8151 15D8  
                                        u8135 15B8                                          u7351 0E21  
                                        u7271 0DBD                                          u7191 0D43  
                                        u8071 0FEE                                          u7431 1066  
                                        u7511 0675                                          u8311 07BB  
                                        u6720 1557                                          u8240 1530  
                                        u6800 0967                                          u8160 11C5  
                                        u9200 0C2D                                          u9040 1682  
                                        u9120 0B36                                          u8080 1592  
                                        u7360 0E28                                          u7280 0DCD  
                                        u7440 131C                                          u7600 06E9  
                                        u7520 067C                                          u8320 07C2  
                                        u6721 1556                                          u8241 152F  
                                        u6801 0966                                          u8161 11C4  
                                        u9201 0C2C                                          u9041 1681  
                                        u9025 166C                                          u9121 0B35  
                                        u8145 15CB                                          u8081 1591  
                                        u7361 0E27                                          u7281 0DCC  
                                        u7441 131B                                          u7601 06E8  
                                        u7521 067B                                          u7505 0667  
                                        u8321 07C1                                          u6730 155C  
                                        u6810 0976                                          u9210 0C42  
                                        u9050 168A                                          u9130 0B3C  
                                        u8090 1598                                          u7370 0E37  
                                        u7290 0DD3                                          u7450 1332  
                                        u7610 06EF                                          u7530 0682  
                                        u8330 07C7                                          u8250 075A  
                                        u8170 123A                                          u6731 155B  
                                        u6811 0975                                          u9211 0C41  
                                        u9051 1689                                          u9131 0B3B  
                                        u8091 1597                                          u7371 0E36  
                                        u7291 0DD2                                          u7451 1331  
                                        u7611 06EE                                          u7531 0681  
                                        u8331 07C6                                          u8251 0759  
                                        u8171 1239                                          u6740 1569  
                                        u6820 0989                                          u9300 0D1A  
                                        u9220 0C58                                          u9060 13ED  
                                        u9140 0B4E                                          u6900 10EA  
                                        u7380 0E4A                                          u7620 073B  
                                        u7540 0691                                          u7460 05C3  
                                        u7700 0431                                          u8340 07DD  
                                        u8260 0764                                          u8180 124F  
                                        u6741 1568                                          u6821 0988  
                                        u8165 11C1                                          u9301 0D19  
                                        u9221 0C57                                          u9205 0C29  
                                        u9045 167E                                          u9061 13EC  
                                        u9141 0B4D                                          u6901 10E9  
                                        u7381 0E49                                          u7621 073A  
                                        u7541 0690                                          u7461 05C2  
                                        u7701 0430                                          u8341 07DC  
                                        u8261 0763                                          u8181 124E  
                                        u6750 1574                                          u8190 14EF  
                                        u6830 099E                                          u9230 0C69  
                                        u9070 13F4                                          u9150 0B5D  
                                        u6910 10F5                                          u7390 0E60  
                                        u7630 074F                                          u7550 06A1  
                                        u7470 05ED                                          u7710 0441  
                                        u8270 0773                                          u8350 1F4A  
                                        u9310 113D                                          u6751 1573  
                                        u8191 14EE                                          u6831 099D  
                                        u9231 0C68                                          u9071 13F3  
                                        u9151 0B5C                                          u6911 10F4  
                                        u7391 0E5F                                          u7631 074E  
                                        u7551 06A0                                          u7471 05EC  
                                        u7711 0440                                          u8271 0772  
                                        u8351 1F49                                          u9311 113C  
                                        u6760 1579                                          u6840 09B3  
                                        u9240 0C6F                                          u9080 1407  
                                        u9160 0BB7                                          u6920 10FC  
                                        u7560 06A7                                          u7480 0620  
                                        u7800 04D3                                          u7720 0457  
                                        u7640 038A                                          u8280 077D  
                                        u9400 027F                                          u9320 00C6  
                                        u6761 1578                                          u6841 09B2  
                                        u9241 0C6E                                          u9081 1406  
                                        u9161 0BB6                                          u9145 0B4A  
                                        u6921 10FB                                          u7561 06A6  
                                        u7545 068D                                          u7481 061F  
                                        u7801 04D2                                          u7721 0456  
                                        u7641 0389                                          u8345 07D9  
                                        u8281 077C                                          u9401 027E  
                                        u9321 00C5                                          _NREG 007D  
                                        u6770 1588                                          u6690 153A  
                                        u6850 09C9                                          u6930 12E6  
                                        u9250 0C7C                                          u9090 140E  
                                        u9170 0BDB                                          u7570 06B8  
                                        u7490 0647                                          u7810 0508  
                                        u7730 045D                                          u7650 03A2  
                                        u8290 0787                                          u9410 02A6  
                                        u9330 00FB                                          u6771 1587  
                                        u6691 1539                                          u6851 09C8  
                                        u6931 12E5                                          u9251 0C7B  
                                        u9091 140D                                          u9171 0BDA  
                                        u9155 0B59                                          u7571 06B7  
                                        u7491 0646                                          u7811 0507  
                                        u7731 045C                                          u7651 03A1  
                                        u8291 0786                                          u9411 02A5  
                                        u9331 00FA                                          u6860 09DE  
                                        u6940 12EB                                          u9260 0C89  
                                        u9180 0BEF                                          u7580 06CD  
                                        u7900 059A                                          u7820 053A  
                                        u7740 0462                                          u7660 03F5  
                                        u8700 16F0                                          u9500 0362  
                                        u9420 02BB                                          u9340 0109  
                                        u6861 09DD                                          u6941 12EA  
                                        u9261 0C88                                          u9181 0BEE  
                                        u7581 06CC                                          u7901 0599  
                                        u7821 0539                                          u7741 0461  
                                        u7661 03F4                                          u8701 16EF  
                                        u9501 0361                                          u9421 02BA  
                                        u9341 0108                                          u6870 09F3  
                                        u6790 0961                                          u6950 1308  
                                        u9270 0CE1                                          u9190 0C0D  
                                        u7590 06D4                                          u7910 05A0  
                                        u7830 054D                                          u7750 0467  
                                        u7670 0405                                          u8710 170F  
                                        u8630 16AA                                          u9510 036D  
                                        u9430 02C4                                          u9350 0111  
                                        u6871 09F2                                          u6791 0960  
                                        u6951 1307                                          u9271 0CE0  
                                        u9191 0C0C                                          u9175 0BD7  
                                        u7591 06D3                                          u7911 059F  
                                        u7831 054C                                          u7751 0466  
                                        u7671 0404                                          u8711 170E  
                                        u8631 16A9                                          u9511 036C  
                                        u9431 02C3                                          u9351 0110  
                                        u9335 00F7                                          u6880 0A09  
                                        u9280 0CFA                                          u6960 1FB0  
                                        u7920 05B1                                          u7840 0553  
                                        u7760 046C                                          u7680 0413  
                                        u8640 16B0                                          u8720 13B2  
                                        u8800 12B5                                          u9520 037E  
                                        u9440 02D1                                          u9360 0116  
                                        u6881 0A08                                          u6785 0949  
                                        u9281 0CF9                                          u9265 0C85  
                                        u9185 0BEB                                          u6961 1FAF  
                                        u7921 05B0                                          u7841 0552  
                                        u7761 046B                                          u7681 0412  
                                        u8641 16AF                                          u8721 13B1  
                                        u8801 12B4                                          u9521 037D  
                                        u9441 02D0                                          u9361 0115  
                                        u6890 0A0F                                          u9290 0D11  
                                        u6970 1FB6                                          u7850 055E  
                                        u7770 04AB                                          u7690 0423  
                                        u8650 16BB                                          u8730 13B8  
                                        u8810 12BB                                          u9450 02F1  
                                        u9370 025E                                          u6891 0A0E  
                                        u9291 0D10                                          u6971 1FB5  
                                        u7851 055D                                          u7771 04AA  
                                        u7691 0422                                          u8651 16BA  
                                        u8731 13B7                                          u8811 12BA  
                                        u9451 02F0                                          u6980 1105  
                                        u8900 1020                                          u7940 0EA9  
                                        u7860 056A                                          u7780 04B3  
                                        u8660 16C2                                          u8740 13C7  
                                        u8820 12DB                                          u9460 032C  
                                        u9380 0273                                          u6981 1104  
                                        u9285 0CF6                                          u8901 101F  
                                        u7941 0EA8                                          u7861 0569  
                                        u7781 04B2                                          u8661 16C1  
                                        u8741 13C6                                          u8821 12DA  
                                        u9525 037A                                          u9461 032B  
                                        u9381 0272                                          u8830 17B1  
                                        u8910 10AE                                          u7950 0EBA  
                                        u7870 0576                                          u7790 04C8  
                                        u8670 16D2                                          u8750 13DF  
                                        u9470 0342                                          u9390 0279  
                                        u9607 1724                                          u9295 0D0D  
                                        u8831 17B0                                          u8911 10AD  
                                        u7951 0EB9                                          u7935 0E90  
                                        u7871 0575                                          u7791 04C7  
                                        u8671 16D1                                          u8751 13DE  
                                        u9471 0341                                          u9391 0278  
                                        u8840 17BE                                          u8920 1487  
                                        u7960 0F50                                          u7880 0583  
                                        u8680 16D9                                          u8760 137D  
                                        u9480 034C                                          u9617 172C  
                                        u8841 17BD                                          u8921 1485  
                                        u7961 0F4F                                          u7945 0EA5  
                                        u7881 0582                                          u8681 16D8  
                                        u8761 137C                                          u9537 12C8  
                                        u9481 034B                                          u8850 17C3  
                                        u8930 1488                                          u7970 0F56  
                                        u7890 0589                                          u8690 16E9  
                                        u8770 1383                                          u9490 0357  
                                        u9627 1738                                          u6995 110A  
                                        u8851 17C2                                          u7971 0F55  
                                        u7955 0EB6                                          u7891 0588  
                                        u8691 16E8                                          u8771 1382  
                                        u9547 13CC                                          u9491 0356  
                                        u8860 17D0                                          u8940 082F  
                                        u7980 0F74                                          u8780 1392  
                                        u9637 1740                                          u8861 17CF  
                                        u8845 17BA                                          u8941 082E  
                                        u7981 0F73                                          u9557 1397  
                                        u8781 1391                                          u8870 17D5  
                                        u8950 083C                                          u7990 0F7E  
                                        u8790 13AA                                          u9647 174C  
                                        u8871 17D4                                          u8951 083B  
                                        u7991 0F7D                                          u9567 16FD  
                                        u8791 13A9                                          u8880 17E2  
                                        u8960 0841                                          _PMON 00D7  
                                        u9657 1754                                          u8881 17E1  
                                        u8865 17CC                                          u8961 0840  
                                        u7985 0F70                                          u9577 07F1  
                                        u8890 17EA                                          u8970 084E  
                                        u9667 1760                                          u8891 17E9  
                                        u8971 084D                                          u8955 0838  
                                        u9587 15E1                                          u8980 0853  
                                        u9677 1768                                          u9597 1716  
                                        u8885 17DE                                          u8981 0852  
                                        u8990 0860                                          u9687 1784  
                                        u8991 085F                                          u8975 084A  
                                        u9697 0A10                                          _TMR2 028C  
                                        u8995 085C                                          _WPUA 0F39  
                                        _WPUB 0F44                                          _WPUC 0F4F  
                                        _WPUD 0F5A                                          _WPUE 0F65  
                                 main@notInit 0137                                          _main 0094  
                                        _temp 0064                                          fsr0h 0005  
                                        fsr1h 0007                                          indf0 0000  
                                        fsr0l 0004                                          indf1 0001  
                                        fsr1l 0006                                          btemp 007E  
         __end_of_INT_DefaultInterruptHandler 0003                   _INT_DefaultInterruptHandler 0002  
                                        start 0052                                cmd_dtl@tempAux 003B  
             __end_of_INT_SetInterruptHandler 1F2A                    ??_TMR1_SetInterruptHandler 0029  
                             __end_of_ReadI2C 10FE                     __size_of_DATAEE_WriteByte 0024  
                      __end_of_update_menuLCD 05B6                                 ?_EUSART_Write 0070  
              __size_of_OSCILLATOR_Initialize 0009                 __end_of_OSCILLATOR_Initialize 1F33  
                                       _ADACQ 009D                                         _ADCAP 009B  
                                       _ADACT 0099                      __end_of_i2c1_driver_open 1F51  
                                       ?_main 0070                                         _ADCLK 0098  
                                       _ADCNT 010C                                         _ADPCH 009E  
                                       _ADREF 009A                               __end_of___awdiv 1646  
                                       _ADPRE 009C                                         _ADRPT 010D  
                                       _T1CLK 0211                               ___awdiv@divisor 0070  
                                       _T1CON 020E                                         _T2CON 028E  
                                       _T2HLT 028F                               __end_of___lwdiv 1459  
                                       _T2TMR 028C                                         _T2RST 0291  
                                       i1l423 1FA6                               __end_of___lwmod 1378  
                                       i1l442 0003                                         i1l371 0041  
                                       i1l436 1FE6                                         i1l372 0050  
                                       i1l364 0013                                         i1l373 004A  
                                       i1l367 0026                                         i1l369 0035  
                                       i1l378 0050                                         i1l751 1F5D  
                                       i1l747 1EE8                                         i1l853 115E  
                                       i1l845 11A0                                         i1l757 0002  
                                       i1l848 11A2                               ___awdiv@counter 0075  
                                       _OSCEN 0891                                         _TMR1H 020D  
                    __size_of_wirteEEPROMinit 00BC                                         _TMR1L 020C  
                                       _TRISA 0011                                         _TRISB 0012  
                                       _TRISC 0013                                         _TRISD 0014  
                                       _TRISE 0015                                         _WPUC3 7A7B  
                                       _WPUC4 7A7C                                         _RXPPS 0ECB  
                             __end_of_cmd_dac 0883                               __end_of_editLum 13AD  
                             __end_of_cmd_dtl 16A5                               _PWM6_Initialize 1F5E  
                             __end_of_cmd_mta 10C0                               __end_of_cmd_mmp 1032  
                             __end_of_cmd_trc 0C05                               __end_of_cmd_rtl 1180  
                             __end_of_cmd_tri 0D2F                              __end_of_TMR1_ISR 1FE7  
                            __end_of_S1button 15E7                               _DATAEE_ReadByte 1F87  
                                       _getch 1EDF                               __end_of_dpowers 1840  
                          __size_of_TMR2_Stop 0003                                   ?_TMR2_Start 0070  
                                       _iread 007B                               __end_of_isdigit 1FBA  
                                       _putch 1EEF                                         main@c 013B  
                                       main@i 0139                                         main@n 013E  
                                       _tsttc 0D2F                       __end_of_TMR1_Initialize 10DF  
                                       pclath 000A                                         status 0003  
                                       wtemp0 007E                               __end_of_sprintf 0754  
                      ??_PWM_Output_D4_Enable 0027                               _TMR2_StartTimer 1ED7  
                             _TMR1_WriteTimer 1F96                               __initialization 0054  
                                __end_of_main 0384                           __size_of_LCDsend2x4 00D4  
                              ??_EUSART_Write 0027                               ?_update_menuLCD 0070  
                     __end_of_TMR2_Initialize 1F87                   ?_INTERRUPT_InterruptManager 0070  
              ??_EUSART_SetRxInterruptHandler 0029                                        ??_main 0059  
                             update_menuLCD@l 00C8                                  ?_sendMessage 002A  
                   __size_of_sendERRORMessage 001E                            __size_of_Clock_ISR 00F1  
            differenceBetweenTimePeriod@start 0027                                     ??_LCDchar 002F  
                                   ??_LCDinit 002F                                     ??_LCDsend 0029  
                                   ??_INT_ISR 0070                                        _ADACCH 0091  
                                      _ADACCL 0090                                        ?_getch 0070  
                                      _ADCON0 0093                                        _ADCON1 0094  
                                      _ADCON2 0095                                        _ADCON3 0096  
                                      _ADERRH 0117                                        _ADERRL 0116  
                                      _ADLTHH 010F                                        _ADLTHL 010E  
                                      _ADRESH 008D                                        _ADRESL 008C  
                                      _ADSTAT 0097                                        _ADUTHH 0111  
                            ___awdiv@dividend 0072                                        _ADUTHL 0110  
                            __end_of_WriteI2C 158B                                        _ANSELA 0F38  
                                      ?_putch 0070                                        _ANSELB 0F43  
                                      _ANSELC 0F4E                                        _ANSELD 0F59  
                                      _ANSELE 0F64                    __end_of_EUSART_is_rx_ready 1ECB  
                                      _T1GATE 0210                                        _T1GCON 020F  
                                      ?_tsttc 0070                                        _RC1REG 0119  
                                      _RC1STA 011D                                        _RA6PPS 0F16  
                                      _RC3PPS 0F23                       TMR1_WriteTimer@timerVal 0070  
                                      _RC4PPS 0F24                                        i1l1271 0A6A  
                                      _ODCONA 0F3A                                        i1l1274 0ADF  
                                      _ODCONB 0F45                                        i1l1283 0B03  
                                      _ODCONC 0F50                                        _RC6PPS 0F26  
                                      _ODCOND 0F5B                                        i1l1453 1F0E  
                                      _ODCONE 0F66                                        i1l5100 15F1  
                                      i1l5110 1602                                        i1l5102 15F3  
                                      i1l5120 1618                                        i1l5112 1608  
                                      i1l5104 15F7                                        i1l6000 001B  
                                      i1l5122 1627                                        i1l5114 160B  
                                      i1l5130 1637                                        i1l5106 15FC  
                                      i1l6010 003D                                        i1l6002 001F  
                                      i1l5132 163C                                        i1l5124 162B  
                                      i1l5116 1610                                        i1l5108 1600  
                                      i1l6012 0045                                        i1l6004 002A  
                                      i1l5302 1F51                                        i1l5134 1641  
                                      i1l5126 162C                                        i1l5118 1614  
                                      i1l6006 002E                                        i1l5304 1F58  
                                      i1l5128 1631                                        i1l6016 004E  
                                      i1l6008 0039                                        i1l1938 1645  
                                      i1l5092 1F06                                        i1l5500 1FD0  
                                      i1l5094 15E7                                        i1l5350 0A26  
                                      i1l5342 0A13                                        i1l5502 1FD2  
                                      i1l5520 118F                                        i1l5096 15E8  
                                      i1l5360 0A39                                        i1l5352 0A2D  
                                      i1l5344 0A1E                                        i1l5280 1FA0  
                                      i1l5272 1F96                                        i1l5504 1FDA  
                                      i1l5530 1143                                        i1l5522 1194  
                                      i1l5098 15EC                                        i1l5370 0A5D  
                                      i1l5362 0A3F                                        i1l5354 0A31  
                                      i1l5346 0A22                                        i1l5274 1F9B  
                                      i1l5282 1FA2                                        i1l5506 1FE1  
                                      i1l5540 115A                                        i1l5532 1145  
                                      i1l5524 119A                                        i1l5516 1180  
                                      i1l5380 0AAF                                        i1l5372 0A62  
                                      i1l5364 0A47                                        i1l5356 0A32  
                                      i1l5348 0A23                                        i1l5284 1FA4  
                                      i1l5276 1F9C                                        i1l5534 114F  
                                      i1l5526 119B                                        i1l5518 1187  
                                      i1l5390 0AF4                                        i1l5382 0AB5  
                                      i1l5374 0A70                                        i1l5366 0A4F  
                                      i1l5358 0A38                                        i1l5278 1F9E  
                                      i1l5536 1153                                        i1l5528 113E  
                                      i1l5392 0B00                                        i1l5384 0AE3  
                                      i1l5376 0A98                                        i1l5368 0A57  
                                      i1l5538 1159                                        i1l5394 0B01  
                                      i1l5386 0AE5                                        i1l5378 0AA9  
                                      i1l5388 0AF1                                        i1l5496 1EE3  
                                      i1l5498 1EE5                                        _S1_ISR 1F06  
                                      i1l5992 0006                                        i1l5994 000B  
                                      i1l5996 000F                                        i1l5998 0017  
                                      _LCDcmd 1EFE                                        u510_20 0A3F  
                                      u510_21 0A3E                                        u511_20 0A47  
                                      u511_21 0A46                                        u520_20 0ADF  
                                      u512_20 0A4F                                        u520_21 0ADE  
                                      u512_21 0A4E                                        _INTPPS 0E90  
                                      u520_25 0ADB                                        u521_20 0AEF  
                                      u513_20 0A57                                        u521_21 0AEC  
                                      u513_21 0A56                                        u514_20 0A5D  
                                      u514_21 0A5C                                 main@corrupted 0138  
                                      u522_24 0AF1                                        u523_20 0B00  
                                      u515_20 0A70                                        u507_20 0A1E  
                                      u523_21 0AFF                                        u515_21 0A6F  
                                      u507_21 0A1D                                        u516_20 0A98  
                                      u508_20 0A2D                                        u516_21 0A97  
                                      u508_21 0A2C                                        u516_25 0A94  
                                      _LCDstr 104D                                        u517_20 0AA9  
                                      u509_20 0A38                                        u517_21 0AA8  
                                      u509_21 0A37                                        u518_20 0AAF  
                                      u518_21 0AAE                                        u519_20 0AB5  
                                      u535_20 1FE1                                        u519_21 0AB4  
                                      u535_21 1FE0                                        u536_20 1187  
                                      u640_20 001F                                        u536_21 1186  
                                      u640_21 001E                                        u537_20 119A  
                                      u641_20 002A                                        u537_21 1199  
                                      u641_21 0029                                        u538_20 1143  
                                      u642_20 002E                                        u538_21 1142  
                                      u642_21 002D                                        u490_25 160C  
                                      u539_20 1159                                        u491_20 1618  
                                      u643_20 0039                                        u539_21 1158  
                                      u491_21 1617                                        u643_21 0038  
                                      u644_20 003D                                        u636_20 000B  
                                      u644_21 003C                                        u636_21 000A  
                                      u492_25 1619                                        _OSCFRQ 0893  
                                      u493_20 1627                                        u645_20 0045  
                                      u637_20 000F                                        u493_21 1626  
                                      u645_21 0044                                        u637_21 000E  
                                      u493_25 1623                                        u646_20 0049  
                                      u638_20 0017                                        u646_21 0048  
                                      u638_21 0016                                        u494_25 162D  
                                      u495_20 1637                                        u487_20 15EC  
                                      u647_20 004E                                        u639_20 001B  
                                      u495_21 1636                                        u487_21 15EB  
                                      u647_21 004D                                        u639_21 001A  
                                      u496_20 163C                                        u488_20 15F7  
                                      u496_21 163B                                        u488_21 15F6  
                                      u489_20 1608                                        u497_20 1F9B  
                                      u489_21 1607                                        u497_21 1F9A  
                                      u498_20 1F58                                        u498_21 1F57  
                                      _PWM6EN 1C77                                        _TX1REG 011A  
                                      _TX1STA 011E                                     ??_ReadI2C 0027  
                            _writeEEPROM_flag 00AF                                        _PWM_on 00B3  
                                 LCDsend2x4@c 002C                              __end_of_editTemp 13E2  
        __end_of_TMR1_DefaultInterruptHandler 0004         __size_of_TMR1_DefaultInterruptHandler 0001  
                _TMR1_DefaultInterruptHandler 0003                                  _CCPTMRS1bits 021F  
                            __end_of_commands 1827                                        ___wmul 10FE  
                                   ??___awdiv 0074                             __end_of_TMR2_Stop 1ED7  
                                      _cmd_aa 13E2                                        _cmd_ir 125A  
                                      _cmd_ra 1459                                        _cmd_rc 11EA  
                                      _cmd_sc 1788                                        _cmd_rp 120F  
                                      _flagNr 00AD                                     ??___lwdiv 002B  
                                   ??___lwmod 0033                           __size_of_TMR2_Start 0003  
                         _EUSART_Transmit_ISR 1180                                        _memset 111E  
                     __end_of_PWM6_Initialize 1F6B                              ___awdiv@quotient 0077  
                                   ??_cmd_dac 0039                                     ??_editLum 0058  
                                   ??_cmd_dtl 0039                                     ??_cmd_mta 0039  
                                   ??_cmd_mmp 0039                                        _iwrite 007A  
                                   ??_cmd_trc 0039                                     ??_cmd_rtl 0039  
                                   ??_cmd_tri 0039                  __size_of_monitoring_TEMP_LUM 0181  
                               ?_INT_CallBack 0070                       __end_of_DATAEE_ReadByte 1F96  
                             _ADCC_Initialize 1001                                _PMD_Initialize 1EF6  
                                __pdataCOMMON 007D                                     ??_isdigit 0027  
                           sendOKMessage@bufw 0032                            update_menuLCD@diff 00CB  
           __size_of_ADCC_GetSingleConversion 0016              __size_of_INT_SetInterruptHandler 0009  
                   ?_ADCC_GetSingleConversion 0027                       __end_of_TMR2_StartTimer 1EDB  
     INT_SetInterruptHandler@InterruptHandler 0027      TMR1_SetInterruptHandler@InterruptHandler 0027  
                                   ??_sprintf 003D                       __end_of_TMR1_WriteTimer 1FA7  
                           ??_wirteEEPROMinit 0031                       ??_PWM_Output_D4_Disable 0027  
                        ?_EUSART_Transmit_ISR 0070                              ?_TMR1_Initialize 0070  
                        __size_of_EUSART_Read 0026                             _SYSTEM_Initialize 1068  
                     __end_of__initialization 0090                                cmd_trc@address 0049  
                          ?_SYSTEM_Initialize 0070                             __end_of_Clock_ISR 0B04  
                              cmd_trc@buffEOM 004B          __end_of_EUSART_SetTxInterruptHandler 1F21  
       __size_of_EUSART_SetTxInterruptHandler 0009                  _EUSART_SetTxInterruptHandler 1F18  
                          cmd_trc@maxReadings 004C                                __pcstackCOMMON 0070  
                                __pidataBANK1 07F5                           ??_SYSTEM_Initialize 002A  
                                   ?_TMR1_ISR 0070                 ?_TMR1_DefaultInterruptHandler 0070  
                               __end_of_getch 1EE3                                     ?_S1button 0070  
                            _DATAEE_WriteByte 11C6                                 __end_of_putch 1EF6  
                          __size_of_editClock 006D               differenceBetweenTimePeriod@diff 002D  
                               __end_of_tsttc 0E7F                              ?_TMR2_Initialize 0070  
                              ??_INT_CallBack 0070               differenceBetweenTimePeriod@stop 002A  
                      __end_of_PMD_Initialize 1EFE                                cmd_tri@buffEOM 0047  
                 __size_of_EXT_INT_Initialize 000E                                  ??_LCDsend2x4 002A  
                                     ??_getch 0029                     __end_of_SYSTEM_Initialize 1084  
                                  _checkFlags 0754                         ??_EUSART_Transmit_ISR 0070  
                                sprintf@width 0046                              update_menuLCD@tt 00C4  
                                     ??_putch 0029                                       ??_tsttc 0029  
                                  __pbssBANK0 005C                                    __pbssBANK1 00A0  
                                  __pbssBANK2 0140                                    __pbssBANK3 01A0  
                                  __pbssBANK4 0220                                       ?_S1_ISR 0070  
                                     ?_LCDcmd 0070                          __end_of_EUSART_Write 130E  
                                     ?_LCDstr 0030                                  _flagS1pushed 00B2  
                                     LCDcmd@c 002F                   __size_of_EUSART_Receive_ISR 0021  
                                     LCDstr@c 0035                                       LCDstr@p 0030  
                                  __pmaintext 0094                 ?_EUSART_SetTxInterruptHandler 0027  
            _EUSART_TxDefaultInterruptHandler 0161                                       ?___wmul 0027  
                                  ??_TMR1_ISR 0079                                       ?_cmd_aa 0036  
                     __end_of_ADCC_Initialize 1018                    __end_of_PWM6_LoadDutyValue 2000  
                                     ?_cmd_ir 0036                                       ?_cmd_ra 0036  
                                     ?_cmd_rc 0036                                       ?_cmd_sc 0036  
                                     ?_cmd_rp 0036                                    ??_S1button 0027  
                                  __pintentry 0004                                       _ADFLTRH 0115  
                                     _ADFLTRL 0114                                       ?_memset 0027  
                          __end_of_LCDsend2x4 0A13                                       _ADPREVH 008F  
                                     _ADPREVL 008E                                     ?_WriteI2C 0070  
                            ?_PWM6_Initialize 0070                                       _ADSTPTH 0113  
                                     _ADSTPTL 0112                               ?_PMD_Initialize 0070  
                            _sendERRORMessage 1084                              ?_DATAEE_ReadByte 002D  
                           ?_i2c1_driver_open 0070                                 _eusartRxCount 00B7  
                                     _LCDchar 1F3C                                       _LCDinit 1712  
                                     _SP1BRGH 011C                                       _SP1BRGL 011B  
                                     _LCDsend 14DE                          __size_of_sendMessage 0023  
                          ??_i2c1_driver_open 0027                                       _INT_ISR 1EE3  
                                     _OSCCON1 088D                                       _OSCCON3 088F  
                                   ?_editTemp 0070                        __size_of_sendOKMessage 001B  
                              checkFlags@buff 0051                                       _NVMADRH 081B  
                                     _NVMADRL 081A                                       _NVMDATH 081D  
                                     _OSCTUNE 0892                                       _NVMDATL 081C  
                                     _NVMCON2 081F                                       _PWM6DCH 038D  
                                     _PWM6DCL 038C                                       _PWM6CON 038E  
                                     _SSP1ADD 018D                                       _SLRCONA 0F3B  
                                     _SLRCONB 0F46                                       _SLRCONC 0F51  
                                     _SLRCOND 0F5C                                       _SLRCONE 0F67  
                                     _SSP1BUF 018C                                       _SSP1MSK 018E  
                                ??_TMR2_Start 0027                       __size_of_TMR2_StopTimer 0004  
                            ?_TMR2_StartTimer 0070                              ?_TMR1_WriteTimer 0070  
                                LCDsend2x4@hc 002D                                  LCDsend2x4@lc 002E  
                           __end_of_editClock 1712                               __size_of_S1_ISR 0009  
                             __size_of_LCDcmd 0008                          DATAEE_WriteByte@bAdd 002D  
                          _i2c1_driver_i2cISR 0157                               __size_of_LCDstr 001B  
                                     _ReadI2C 10DF                              ??_update_menuLCD 004A  
                                     ___awdiv 15E7                               __size_of___wmul 0020  
                                     ___lwdiv 141C                               __size_of_cmd_aa 003A  
                                     ___lwmod 1343                               __size_of_cmd_ir 0029  
                             __size_of_cmd_ra 0042                               __size_of_cmd_rc 0025  
                             __size_of_cmd_sc 0078                               __size_of_cmd_rp 0025  
                          __end_of_TMR2_Start 1ED1                                    ??_WriteI2C 0027  
                                     _cmd_dac 0806                               __size_of_memset 0020  
                                     _editLum 1378                                       _cmd_dtl 1646  
                                     _cmd_mta 10A2                                       _cmd_mmp 1018  
                                     _cmd_trc 0B04                                       _cmd_rtl 115F  
                                     _cmd_tri 0C05                                       __ptext1 12B0  
                                     __ptext2 111E                                       __ptext3 1F45  
                                     __ptext4 1EDF                                       __ptext5 1234  
                                     __ptext6 13AD                                       __ptext7 1378  
                                     __ptext8 16A5                                       __ptext9 0754  
              ??_TMR1_DefaultInterruptHandler 0070                                     _T1CONbits 020E  
                               cmd_dac@buffer 0038                                       _dpowers 1836  
                       _OSCILLATOR_Initialize 1F2A                                     _T2CONbits 028E  
                                     _isdigit 1FA7                                    cmd_dac@num 0036  
           __size_of_TMR1_SetInterruptHandler 0009                                       cmd_sc@h 003B  
                                     cmd_sc@m 003D                                       cmd_sc@s 003F  
                    ??_PIN_MANAGER_Initialize 0027                     ?_TMR1_SetInterruptHandler 0027  
                                   _T2HLTbits 028F                       _INT_SetInterruptHandler 1F21  
                                  ??_editTemp 0058                                    cmd_ir@buff 003A  
                                  cmd_ra@buff 003A                                    cmd_rc@buff 003A  
                  __size_of_SYSTEM_Initialize 001C                                   ?_checkFlags 0070  
                                     _sprintf 05B6                                       clrloop0 1EEA  
                                  cmd_dtl@num 0036                          end_of_initialization 0090  
                                   _T2RSTbits 0291                                    cmd_rp@buff 003A  
                                  cmd_mta@num 0036                                    cmd_mmp@num 0036  
                                     init_ram 0800                                       memset@c 0027  
                                     memset@n 0029                                       memset@p 002C  
                         _monitoring_TEMP_LUM 0E7F                                       initloop 0801  
                        __end_of_INT_CallBack 1F5E                                    cmd_trc@num 0036  
                                  cmd_rtl@num 0036                                    cmd_tri@num 0036  
                           _EUSART_Initialize 1283                 __size_of_PWM_Output_D4_Enable 0003  
                               _sendOKMessage 1032                            ?_EUSART_Initialize 0070  
                          _EUSART_is_rx_ready 1EC8                  ?_differenceBetweenTimePeriod 0027  
                                  main@F13053 0140                              ?_ADCC_Initialize 0070  
            __end_of_ADCC_GetSingleConversion 1FD0                           ??_EUSART_Initialize 0029  
              ??_EUSART_SetTxInterruptHandler 0029                          ?_monitoring_TEMP_LUM 0070  
                         ?_EUSART_is_rx_ready 0070                                     _PORTCbits 000E  
                                   _TMR2_Stop 1ED4                               _wirteEEPROMinit 0883  
                                   _TRISCbits 0013                         __size_of_EUSART_Write 0030  
                               ?_toggleAlarms 0070                                    main@i_2535 013C  
                    __end_of_DATAEE_WriteByte 11EA                                 _alarmPWMStart 00CE  
              __size_of_PWM_Output_D4_Disable 0003                     __end_of_EUSART_Initialize 12B0  
                        ??_EUSART_is_rx_ready 0027                 __end_of_PWM_Output_D4_Disable 1ED4  
                              __end_of_S1_ISR 1F0F                                __end_of_LCDcmd 1F06  
                              __end_of_LCDstr 1068                               cmd_trc@buffData 003F  
                               cmd_dtl@buffer 0038                                LCDsend2x4@mode 0029  
                             cmd_trc@buffInit 0044                                 cmd_dtl@lumAux 003D  
                              ?_sendOKMessage 0070                        _sentMessageBufHalfFull 00AC  
                                   _Clock_ISR 0A13                              _monitor_TEMP_LUM 00B1  
                         __size_of_checkFlags 00A1                                __end_of___wmul 111E  
                              __end_of_cmd_aa 141C                                __end_of_cmd_ir 1283  
                              __end_of_cmd_ra 149B                                __end_of_cmd_rc 120F  
                              __end_of_cmd_sc 1800                                __end_of_cmd_rp 1234  
                               __pidataCOMMON 07FF                         ??_monitoring_TEMP_LUM 0031  
                                _EUSART_Write 12DE                             __size_of_TMR1_ISR 0017  
                           __size_of_S1button 005C                                    ?_TMR2_Stop 0070  
                      ?_OSCILLATOR_Initialize 0070                                __end_of_memset 113E  
                   ??_INT_SetInterruptHandler 0029                               main@checkSumAux 0136  
                         start_initialization 0054                                ??_toggleAlarms 0058  
             __size_of_PIN_MANAGER_Initialize 0043                                _TMR2_StopTimer 1EDB  
                               ??_EUSART_Read 0027  EUSART_SetRxInterruptHandler@interruptHandler 0027  
EUSART_SetTxInterruptHandler@interruptHandler 0027                               cmd_tri@buffData 003E  
                            WriteI2C@data_out 0028                               cmd_tri@buffInit 0043  
                                 putch@txData 0029                                 cmd_mta@buffer 0038  
                               cmd_mmp@buffer 0038                                      ??_S1_ISR 0070  
                                    ??_LCDcmd 002F                                      ??_LCDstr 0032  
                    __end_of_sendERRORMessage 10A2                             _counterMonitorAux 00B0  
                         DATAEE_ReadByte@bAdd 002D                  ?_INT_DefaultInterruptHandler 0070  
                    __size_of_TMR1_Initialize 001F                              ??_PMD_Initialize 0027  
                                  ?_Clock_ISR 0070                       __end_of_wirteEEPROMinit 093F  
                                    ??___wmul 002B                                      ??_cmd_aa 0039  
                                    ??_cmd_ir 0039                                      ??_cmd_ra 0039  
                                    ??_cmd_rc 0039                                      ??_cmd_sc 0039  
                                    ??_cmd_rp 0039                                   __pdataBANK1 00CE  
                                    ??_memset 002B                              sendOKMessage@cmd 0031  
                  __end_of_EXT_INT_Initialize 1F79                             _editingClockAlarm 0061  
                           update_menuLCD@str 00BC                             __size_of_WriteI2C 005A  
                    _ADCC_GetSingleConversion 1FBA                   __end_of_EUSART_Transmit_ISR 11A3  
                      __end_of_TMR2_StopTimer 1EDF                                      ?_LCDchar 0070  
                                 __pbssCOMMON 0079                                      ?_LCDinit 0070  
                                    ?_LCDsend 0070                                     ___latbits 0002  
                                    ?_INT_ISR 0070                                 __pcstackBANK0 0020  
                               cmd_trc@buffer 0038                                 __pcstackBANK1 00BC  
                               __pcstackBANK2 0120                            _PWM6_LoadDutyValue 1FE7  
                    __size_of_TMR2_Initialize 000E                                  _isdigit$2993 0027  
                       __size_of_INT_CallBack 000D          __size_of_differenceBetweenTimePeriod 0035  
                                    LCDchar@c 002F                             __size_of_editTemp 0035  
                               cmd_rtl@buffer 0038                                 cmd_tri@buffer 0038  
                  __end_of_EUSART_Receive_ISR 115F                                      LCDsend@c 002A  
                         ?_PWM6_LoadDutyValue 0027                    __size_of_EUSART_Initialize 002D  
                                 sprintf@flag 0045                     __size_of_i2c1_driver_open 000C  
                                 sprintf@prec 0042              _EUSART_RxDefaultInterruptHandler 015F  
                             ??_sendOKMessage 0030                           __end_of_EUSART_Read 125A  
                                    ?_ReadI2C 0070                                     __pnvBANK1 00D8  
                                   __pnvBANK2 015B                                   _bufHalfFull 00AE  
                                   _editClock 16A5                                     _main$3499 0134  
                            ___lwdiv@dividend 0029                        _PIN_MANAGER_Initialize 149B  
               ??_INT_DefaultInterruptHandler 0070                          EUSART_Read@readValue 0028  
            __end_of_TMR1_SetInterruptHandler 1F3C               ADCC_GetSingleConversion@channel 002A  
                                    ?___awdiv 0070                            cmd_tri@maxReadings 0048  
                                   _dimingLed 00AA                                      ?___lwdiv 0027  
                                    ?___lwmod 002F                   _i2c1_driver_busCollisionISR 0159  
                                _eusartRxHead 00B9                                  _eusartTxHead 00BB  
                                _eusartRxTail 00B8                                  _eusartTxTail 00BA  
                        ??_PWM6_LoadDutyValue 0029                                      ?_cmd_dac 0036  
                                    ?_editLum 0070                                      ?_cmd_dtl 0036  
                                    ?_cmd_mta 0036                                      ?_cmd_mmp 0036  
                                cmd_aa@buffer 0038                  ??_INTERRUPT_InterruptManager 0079  
                                    ?_cmd_trc 0036                                      ?_cmd_rtl 0036  
                                    ?_cmd_tri 0036                                 ??_sendMessage 002D  
                                 ??_TMR2_Stop 0027                                  sendMessage@n 002E  
                     _eusartTxBufferRemaining 00DA                                  _INT_CallBack 1F51  
                                    _BAUD1CON 011F                                      ?_isdigit 0070  
                             ?_TMR2_StopTimer 0070                      __size_of_PWM6_Initialize 000D  
                            ___lwdiv@quotient 002D                                  ??_checkFlags 0050  
                              __size_of_getch 0004                                      ?_sprintf 0035  
                                    _T2CLKCON 0290                      __size_of_DATAEE_ReadByte 000F  
                        cmd_tri@startingIndex 004F                                __size_of_putch 0007  
                                   cmd_aa@num 0036                                __size_of_tsttc 0150  
                              _eusartRxBuffer 0220                                _eusartTxBuffer 01A0  
                              ___wmul@product 002B                                     cmd_ir@num 0036  
                                   cmd_ra@num 0036                                      _LATAbits 0016  
                                   cmd_rc@num 0036                                     cmd_sc@num 0036  
                                   clear_ram0 1EE9                                     cmd_rp@num 0036  
                                    _PIE0bits 0716                                      _PIE3bits 0719  
                                    _PIE4bits 071A                      __size_of_TMR2_StartTimer 0004  
                                  ?_editClock 0070                                     _tempAlarm 00A7  
                                    _S1_Value 00B6                      __size_of_TMR1_WriteTimer 0011  
         __size_of_INTERRUPT_InterruptManager 004E                                      _PIR0bits 070C  
                                    _PIR3bits 070F                                      _PIR4bits 0710  
                                 ??_Clock_ISR 0020                          __end_of_toggleAlarms 12DE  
                            ?_wirteEEPROMinit 0070                                      _SSP1CON1 0190  
                                    _SSP1CON2 0191                                      _TMR1_ISR 1FD0  
                                    _S1button 158B                                      _SSP1STAT 018F  
                                   _updateLCD 00D5                            __end_of_checkFlags 07F5  
                           ??_TMR1_Initialize 0029                                    _ADCON0bits 0093  
                                  _ADCON1bits 0094                                sendMessage@num 002A  
                                  _ADCON2bits 0095                                    _ADCON3bits 0096  
                                cmd_ir@buffer 0038                             ___wmul@multiplier 0027  
                                cmd_ra@buffer 0038                  __end_of_PWM_Output_D4_Enable 1ECE  
                                cmd_rc@buffer 0038          __size_of_INT_DefaultInterruptHandler 0001  
                                cmd_sc@buffer 0038                              __size_of_LCDchar 0009  
                       DATAEE_WriteByte@bData 002F                              __size_of_LCDinit 0076  
                            __size_of_LCDsend 0053                              __size_of_INT_ISR 0006  
                         __end_of_sendMessage 11C6                                   _EUSART_Read 1234  
                           ?_DATAEE_WriteByte 002D                             ??_TMR2_Initialize 0027  
                                cmd_rp@buffer 0038                            ??_DATAEE_WriteByte 0030  
                            __size_of_ReadI2C 001F                                    _ADSTATbits 0097  
                     ??_OSCILLATOR_Initialize 0027                              __size_of___awdiv 005F  
                            __size_of___lwdiv 003D                              __size_of___lwmod 0035  
                                    _WriteI2C 1531                      _TMR1_SetInterruptHandler 1F33  
                            __size_of_cmd_dac 007D                              __size_of_editLum 0035  
                            __size_of_cmd_dtl 005F                       __size_of_update_menuLCD 0232  
                            __size_of_cmd_mta 001E                              __size_of_cmd_mmp 001A  
                            __size_of_cmd_trc 0101                              __size_of_cmd_rtl 0021  
                            __size_of_cmd_tri 012A                                  cmd_tri@index 004C  
                       _TMR1_InterruptHandler 015D                                    sprintf@val 0043  
                                    _clkAlarm 00A0                      __size_of_ADCC_Initialize 0017  
                            __size_of_isdigit 0013                                      _editTemp 13AD  
                             ___lwdiv@divisor 0027                               ___lwdiv@counter 002C  
                                    __ptext10 0883                                      __ptext11 0384  
                                    __ptext20 1FE7                                      __ptext12 05B6  
                                    __ptext21 104D                                      __ptext13 1FA7  
                                  _T1GCONbits 020F                                      __ptext30 1ECE  
                                    __ptext22 1F3C                                      __ptext14 1343  
                                    __ptext31 158B                                      __ptext23 1EFE  
                                    __ptext15 141C                                      __ptext40 1018  
                                    __ptext32 1ECB                                      __ptext24 0E7F  
                                    __ptext16 130E                                      __ptext41 120F  
                                    __ptext33 0B04                                      __ptext25 0D2F  
                                    __ptext17 1EDB                                      __ptext50 11A3  
                                    __ptext42 115F                                      __ptext34 125A  
                                    __ptext26 10DF                                      __ptext18 1ED4  
                                    __ptext51 1EEF                                      __ptext43 1788  
                                    __ptext35 13E2                                      __ptext27 11C6  
                                    __ptext19 1ED1                                      __ptext60 1F2A  
                                    __ptext52 12DE                                      __ptext44 11EA  
                                    __ptext36 1646                                      __ptext28 1FBA  
                                    __ptext61 1F6B                                      __ptext53 1068  
                                    __ptext45 0C05                                      __ptext37 0806  
                                    __ptext29 1ED7                                      __ptext70 1531  
                                    __ptext62 1F21                                      __ptext54 1F79  
                                    __ptext46 10FE                                      __ptext38 1459  
                                    __ptext71 1EC8                                      __ptext63 1283  
                                    __ptext55 10C0                                      __ptext47 1F87  
                                    __ptext39 10A2                                      __ptext80 0002  
                                    __ptext64 1F18                                      __ptext56 1F33  
                                    __ptext48 1032                                      __ptext81 1F06  
                                    __ptext73 1FD0                                      __ptext65 1F0F  
                                    __ptext57 1F5E                                      __ptext49 1084  
                                    __ptext82 1180                                      __ptext74 1F96  
                                    __ptext66 1001                                      __ptext58 1EF6  
                                    __ptext83 113E                                      __ptext75 0A13  
                                    __ptext67 1712                                      __ptext59 149B  
                                    __ptext76 0003                                      __ptext68 093F  
                                    __ptext77 15E7                                      __ptext69 14DE  
                                    __ptext78 1EE3                                      __ptext79 1F51  
                                _SSP1CON1bits 0190                                  _SSP1CON2bits 0191  
                                    _commands 1800                              __size_of_sprintf 019E  
                 DATAEE_WriteByte@GIEBitValue 0030                              _i2c1_driver_open 1F45  
                                    _modeFlag 005F                             ??_PWM6_Initialize 0027  
                 __size_of_EUSART_is_rx_ready 0003                                 __size_of_main 02F0  
                                    cmd_dac@h 003B                                      cmd_dac@m 003D  
                                    _lumAlarm 00A4                                      cmd_dac@s 003F  
                           ?_sendERRORMessage 0070                             ??_DATAEE_ReadByte 002F  
                                    _lumLevel 0063                         _PWM_Output_D4_Disable 1ED1  
                                 ??_editClock 0058                                      cmd_trc@i 0047  
                                    cmd_trc@j 0050                                      cmd_trc@n 004E  
                                    cmd_tri@i 004A                                      cmd_tri@j 004E  
                                    cmd_tri@n 004D                              _editingTempAlarm 00B5  
                                  _RC1STAbits 011D                            ??_sendERRORMessage 0030  
                 __end_of_monitoring_TEMP_LUM 1000                                      _prevTemp 00D3  
                                  tsttc@value 002A                    ??_ADCC_GetSingleConversion 002A  
                                    int$flags 007E                             ??_TMR2_StartTimer 0027  
          __end_of_INTERRUPT_InterruptManager 0052                    _INTERRUPT_InterruptManager 0004  
                                    main@buff 0120                                  _SSP1STATbits 018F  
                           ??_TMR1_WriteTimer 0072                                   _sendMessage 11A3  
                        update_menuLCD@F12903 0154                                    _INTCONbits 000B  
                                 _NVMCON1bits 081E                                  _prevLumLevel 00D1  
                        _INT_InterruptHandler 015B                                      isdigit@c 0028  
                                    memset@p1 002D                                    _LCDsend2x4 093F  
                          _EXT_INT_Initialize 1F6B                                   cmd_rtl@buff 003A  
                                    intlevel1 0000                                     sprintf@ap 0041  
                                   sprintf@sp 0049                              ___lwmod@dividend 0031  
                     ?_PIN_MANAGER_Initialize 0070                          sendERRORMessage@bufw 0032  
                       __size_of_toggleAlarms 002E                           ?_EXT_INT_Initialize 0070  
                             _editingLumAlarm 00B4          __end_of_EUSART_SetRxInterruptHandler 1F18  
       __size_of_EUSART_SetRxInterruptHandler 0009                  _EUSART_SetRxInterruptHandler 1F0F  
                        _PWM_Output_D4_Enable 1ECB           __end_of_differenceBetweenTimePeriod 1343  
                 _differenceBetweenTimePeriod 130E                            _EUSART_Receive_ISR 113E  
                    ?_INT_SetInterruptHandler 0027                              ??_TMR2_StopTimer 0027  
                               __pstringtext1 1800                                 __pstringtext2 1836  
                               __pstringtext3 1827                                 __pstringtext4 1840  
                               __pstringtext5 1847                                 __pstringtext6 184C  
                               __pstringtext7 0000                          ??_EXT_INT_Initialize 0029  
               ??_differenceBetweenTimePeriod 002E                                      sprintf@c 0048  
                                    sprintf@f 0035                           ?_EUSART_Receive_ISR 0070  
                                  _SSP1DATPPS 0EC6                                    _SSP1CLKPPS 0EC5  
                             ___lwmod@divisor 002F                           sendERRORMessage@cmd 0031  
                             ___lwmod@counter 0034                   PWM6_LoadDutyValue@dutyValue 0027  
                                  _TX1STAbits 011E                                  _toggleAlarms 12B0  
                                  _TMR2_Start 1ECE                            EUSART_Write@txData 0028  
                __size_of_EUSART_Transmit_ISR 0023                __end_of_PIN_MANAGER_Initialize 14DE  
                           ??_ADCC_Initialize 0027                        ?_PWM_Output_D4_Disable 0070  
                        ??_EUSART_Receive_ISR 0070                         ?_PWM_Output_D4_Enable 0070  
                             _TMR1_Initialize 10C0                         __end_of_sendOKMessage 104D  
