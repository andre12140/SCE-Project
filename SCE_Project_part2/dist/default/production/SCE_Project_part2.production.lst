

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Sun Dec 13 12:10:32 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F18875
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    25                           	psect	inittext,global,class=CODE,delta=2
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    44                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	text74,local,class=CODE,merge=1,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	psect	text81,local,class=CODE,merge=1,delta=2
   112                           	psect	text82,local,class=CODE,merge=1,delta=2
   113                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   114                           	dabs	1,0x7E,2
   115  0000                     
   116                           ; Version 2.30
   117                           ; Generated 15/09/2020 GMT
   118                           ; 
   119                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution. Publication is not required when
   133                           ;        this file is used in an embedded application.
   134                           ; 
   135                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   136                           ;        software without specific prior written permission.
   137                           ; 
   138                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   139                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   140                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   141                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   142                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   143                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   144                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   145                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   146                           ; 
   147                           ; 
   148                           ; Code-generator required, PIC16F18875 Definitions
   149                           ; 
   150                           ; SFR Addresses
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0008                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001C                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  008C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0110                     	;# 
   211  0110                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0112                     	;# 
   215  0113                     	;# 
   216  0114                     	;# 
   217  0114                     	;# 
   218  0115                     	;# 
   219  0116                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  0119                     	;# 
   223  0119                     	;# 
   224  0119                     	;# 
   225  011A                     	;# 
   226  011A                     	;# 
   227  011A                     	;# 
   228  011B                     	;# 
   229  011B                     	;# 
   230  011B                     	;# 
   231  011B                     	;# 
   232  011B                     	;# 
   233  011C                     	;# 
   234  011C                     	;# 
   235  011C                     	;# 
   236  011D                     	;# 
   237  011D                     	;# 
   238  011D                     	;# 
   239  011E                     	;# 
   240  011E                     	;# 
   241  011E                     	;# 
   242  011F                     	;# 
   243  011F                     	;# 
   244  011F                     	;# 
   245  011F                     	;# 
   246  011F                     	;# 
   247  018C                     	;# 
   248  018D                     	;# 
   249  018E                     	;# 
   250  018F                     	;# 
   251  0190                     	;# 
   252  0191                     	;# 
   253  0192                     	;# 
   254  0196                     	;# 
   255  0197                     	;# 
   256  0198                     	;# 
   257  0199                     	;# 
   258  019A                     	;# 
   259  019B                     	;# 
   260  019C                     	;# 
   261  020C                     	;# 
   262  020C                     	;# 
   263  020D                     	;# 
   264  020E                     	;# 
   265  020F                     	;# 
   266  020F                     	;# 
   267  0210                     	;# 
   268  0210                     	;# 
   269  0211                     	;# 
   270  0211                     	;# 
   271  0212                     	;# 
   272  0212                     	;# 
   273  0213                     	;# 
   274  0214                     	;# 
   275  0215                     	;# 
   276  0215                     	;# 
   277  0216                     	;# 
   278  0216                     	;# 
   279  0217                     	;# 
   280  0217                     	;# 
   281  0218                     	;# 
   282  0218                     	;# 
   283  0219                     	;# 
   284  021A                     	;# 
   285  021B                     	;# 
   286  021B                     	;# 
   287  021C                     	;# 
   288  021C                     	;# 
   289  021D                     	;# 
   290  021D                     	;# 
   291  021E                     	;# 
   292  021F                     	;# 
   293  028C                     	;# 
   294  028C                     	;# 
   295  028D                     	;# 
   296  028D                     	;# 
   297  028E                     	;# 
   298  028F                     	;# 
   299  0290                     	;# 
   300  0290                     	;# 
   301  0291                     	;# 
   302  0292                     	;# 
   303  0292                     	;# 
   304  0293                     	;# 
   305  0293                     	;# 
   306  0294                     	;# 
   307  0295                     	;# 
   308  0296                     	;# 
   309  0296                     	;# 
   310  0297                     	;# 
   311  0298                     	;# 
   312  0298                     	;# 
   313  0299                     	;# 
   314  0299                     	;# 
   315  029A                     	;# 
   316  029B                     	;# 
   317  029C                     	;# 
   318  029C                     	;# 
   319  029D                     	;# 
   320  030C                     	;# 
   321  030C                     	;# 
   322  030D                     	;# 
   323  030E                     	;# 
   324  030F                     	;# 
   325  0310                     	;# 
   326  0310                     	;# 
   327  0311                     	;# 
   328  0312                     	;# 
   329  0313                     	;# 
   330  0314                     	;# 
   331  0314                     	;# 
   332  0315                     	;# 
   333  0316                     	;# 
   334  0317                     	;# 
   335  0318                     	;# 
   336  0318                     	;# 
   337  0319                     	;# 
   338  031A                     	;# 
   339  031B                     	;# 
   340  031C                     	;# 
   341  031C                     	;# 
   342  031D                     	;# 
   343  031E                     	;# 
   344  031F                     	;# 
   345  038C                     	;# 
   346  038C                     	;# 
   347  038D                     	;# 
   348  038E                     	;# 
   349  0390                     	;# 
   350  0390                     	;# 
   351  0391                     	;# 
   352  0392                     	;# 
   353  040C                     	;# 
   354  040D                     	;# 
   355  040E                     	;# 
   356  040F                     	;# 
   357  0410                     	;# 
   358  0411                     	;# 
   359  0416                     	;# 
   360  0416                     	;# 
   361  0417                     	;# 
   362  0418                     	;# 
   363  0418                     	;# 
   364  0419                     	;# 
   365  041A                     	;# 
   366  041A                     	;# 
   367  041B                     	;# 
   368  041C                     	;# 
   369  041C                     	;# 
   370  041D                     	;# 
   371  041E                     	;# 
   372  041F                     	;# 
   373  048C                     	;# 
   374  048C                     	;# 
   375  048D                     	;# 
   376  048E                     	;# 
   377  048F                     	;# 
   378  048F                     	;# 
   379  0490                     	;# 
   380  0491                     	;# 
   381  0492                     	;# 
   382  0492                     	;# 
   383  0493                     	;# 
   384  0494                     	;# 
   385  0495                     	;# 
   386  0495                     	;# 
   387  0496                     	;# 
   388  0497                     	;# 
   389  0498                     	;# 
   390  0499                     	;# 
   391  049A                     	;# 
   392  049B                     	;# 
   393  049C                     	;# 
   394  049D                     	;# 
   395  050C                     	;# 
   396  050C                     	;# 
   397  050D                     	;# 
   398  050E                     	;# 
   399  050F                     	;# 
   400  050F                     	;# 
   401  0510                     	;# 
   402  0511                     	;# 
   403  0512                     	;# 
   404  0512                     	;# 
   405  0513                     	;# 
   406  0514                     	;# 
   407  0515                     	;# 
   408  0515                     	;# 
   409  0516                     	;# 
   410  0517                     	;# 
   411  0518                     	;# 
   412  0519                     	;# 
   413  051A                     	;# 
   414  051B                     	;# 
   415  051C                     	;# 
   416  051D                     	;# 
   417  058C                     	;# 
   418  058C                     	;# 
   419  058D                     	;# 
   420  058E                     	;# 
   421  058F                     	;# 
   422  058F                     	;# 
   423  0590                     	;# 
   424  0591                     	;# 
   425  0592                     	;# 
   426  0593                     	;# 
   427  060C                     	;# 
   428  060D                     	;# 
   429  060E                     	;# 
   430  060F                     	;# 
   431  0610                     	;# 
   432  0611                     	;# 
   433  0612                     	;# 
   434  0613                     	;# 
   435  0614                     	;# 
   436  0616                     	;# 
   437  0617                     	;# 
   438  0618                     	;# 
   439  0619                     	;# 
   440  061A                     	;# 
   441  061B                     	;# 
   442  061C                     	;# 
   443  061D                     	;# 
   444  061E                     	;# 
   445  068C                     	;# 
   446  068D                     	;# 
   447  068E                     	;# 
   448  068F                     	;# 
   449  0690                     	;# 
   450  0691                     	;# 
   451  0692                     	;# 
   452  0693                     	;# 
   453  0694                     	;# 
   454  070C                     	;# 
   455  070D                     	;# 
   456  070E                     	;# 
   457  070F                     	;# 
   458  0710                     	;# 
   459  0711                     	;# 
   460  0712                     	;# 
   461  0713                     	;# 
   462  0714                     	;# 
   463  0716                     	;# 
   464  0717                     	;# 
   465  0718                     	;# 
   466  0719                     	;# 
   467  071A                     	;# 
   468  071B                     	;# 
   469  071C                     	;# 
   470  071D                     	;# 
   471  071E                     	;# 
   472  0796                     	;# 
   473  0797                     	;# 
   474  0798                     	;# 
   475  0799                     	;# 
   476  079A                     	;# 
   477  079B                     	;# 
   478  080C                     	;# 
   479  080D                     	;# 
   480  080E                     	;# 
   481  080F                     	;# 
   482  0810                     	;# 
   483  0811                     	;# 
   484  0812                     	;# 
   485  0813                     	;# 
   486  0814                     	;# 
   487  081A                     	;# 
   488  081B                     	;# 
   489  081C                     	;# 
   490  081D                     	;# 
   491  081E                     	;# 
   492  081F                     	;# 
   493  088C                     	;# 
   494  088D                     	;# 
   495  088E                     	;# 
   496  088F                     	;# 
   497  0890                     	;# 
   498  0891                     	;# 
   499  0892                     	;# 
   500  0893                     	;# 
   501  0895                     	;# 
   502  0896                     	;# 
   503  0897                     	;# 
   504  0898                     	;# 
   505  0899                     	;# 
   506  089A                     	;# 
   507  089B                     	;# 
   508  090C                     	;# 
   509  090E                     	;# 
   510  090F                     	;# 
   511  091F                     	;# 
   512  091F                     	;# 
   513  098F                     	;# 
   514  098F                     	;# 
   515  0990                     	;# 
   516  0991                     	;# 
   517  0992                     	;# 
   518  0993                     	;# 
   519  0994                     	;# 
   520  0995                     	;# 
   521  0996                     	;# 
   522  0997                     	;# 
   523  0E0F                     	;# 
   524  0E10                     	;# 
   525  0E11                     	;# 
   526  0E12                     	;# 
   527  0E13                     	;# 
   528  0E14                     	;# 
   529  0E15                     	;# 
   530  0E16                     	;# 
   531  0E17                     	;# 
   532  0E18                     	;# 
   533  0E19                     	;# 
   534  0E1A                     	;# 
   535  0E1B                     	;# 
   536  0E1C                     	;# 
   537  0E1D                     	;# 
   538  0E1E                     	;# 
   539  0E1F                     	;# 
   540  0E20                     	;# 
   541  0E21                     	;# 
   542  0E22                     	;# 
   543  0E23                     	;# 
   544  0E24                     	;# 
   545  0E25                     	;# 
   546  0E26                     	;# 
   547  0E27                     	;# 
   548  0E28                     	;# 
   549  0E29                     	;# 
   550  0E2A                     	;# 
   551  0E2B                     	;# 
   552  0E2C                     	;# 
   553  0E2D                     	;# 
   554  0E2E                     	;# 
   555  0E2F                     	;# 
   556  0E30                     	;# 
   557  0E31                     	;# 
   558  0E32                     	;# 
   559  0E33                     	;# 
   560  0E34                     	;# 
   561  0E35                     	;# 
   562  0E36                     	;# 
   563  0E37                     	;# 
   564  0E8F                     	;# 
   565  0E90                     	;# 
   566  0E91                     	;# 
   567  0E92                     	;# 
   568  0E93                     	;# 
   569  0E94                     	;# 
   570  0E95                     	;# 
   571  0E96                     	;# 
   572  0E97                     	;# 
   573  0E9C                     	;# 
   574  0E9D                     	;# 
   575  0E9E                     	;# 
   576  0EA1                     	;# 
   577  0EA2                     	;# 
   578  0EA3                     	;# 
   579  0EA4                     	;# 
   580  0EA5                     	;# 
   581  0EA9                     	;# 
   582  0EAA                     	;# 
   583  0EAB                     	;# 
   584  0EAC                     	;# 
   585  0EB1                     	;# 
   586  0EB2                     	;# 
   587  0EB3                     	;# 
   588  0EB8                     	;# 
   589  0EB9                     	;# 
   590  0EBA                     	;# 
   591  0EBB                     	;# 
   592  0EBC                     	;# 
   593  0EBD                     	;# 
   594  0EBE                     	;# 
   595  0EC3                     	;# 
   596  0EC5                     	;# 
   597  0EC6                     	;# 
   598  0EC7                     	;# 
   599  0EC8                     	;# 
   600  0EC9                     	;# 
   601  0ECA                     	;# 
   602  0ECB                     	;# 
   603  0ECC                     	;# 
   604  0F10                     	;# 
   605  0F11                     	;# 
   606  0F12                     	;# 
   607  0F13                     	;# 
   608  0F14                     	;# 
   609  0F15                     	;# 
   610  0F16                     	;# 
   611  0F17                     	;# 
   612  0F18                     	;# 
   613  0F19                     	;# 
   614  0F1A                     	;# 
   615  0F1B                     	;# 
   616  0F1C                     	;# 
   617  0F1D                     	;# 
   618  0F1E                     	;# 
   619  0F1F                     	;# 
   620  0F20                     	;# 
   621  0F21                     	;# 
   622  0F22                     	;# 
   623  0F23                     	;# 
   624  0F24                     	;# 
   625  0F25                     	;# 
   626  0F26                     	;# 
   627  0F27                     	;# 
   628  0F28                     	;# 
   629  0F29                     	;# 
   630  0F2A                     	;# 
   631  0F2B                     	;# 
   632  0F2C                     	;# 
   633  0F2D                     	;# 
   634  0F2E                     	;# 
   635  0F2F                     	;# 
   636  0F30                     	;# 
   637  0F31                     	;# 
   638  0F32                     	;# 
   639  0F38                     	;# 
   640  0F39                     	;# 
   641  0F3A                     	;# 
   642  0F3B                     	;# 
   643  0F3C                     	;# 
   644  0F3D                     	;# 
   645  0F3E                     	;# 
   646  0F3F                     	;# 
   647  0F40                     	;# 
   648  0F41                     	;# 
   649  0F43                     	;# 
   650  0F44                     	;# 
   651  0F45                     	;# 
   652  0F46                     	;# 
   653  0F47                     	;# 
   654  0F48                     	;# 
   655  0F49                     	;# 
   656  0F4A                     	;# 
   657  0F4B                     	;# 
   658  0F4C                     	;# 
   659  0F4E                     	;# 
   660  0F4F                     	;# 
   661  0F50                     	;# 
   662  0F51                     	;# 
   663  0F52                     	;# 
   664  0F53                     	;# 
   665  0F54                     	;# 
   666  0F55                     	;# 
   667  0F56                     	;# 
   668  0F57                     	;# 
   669  0F59                     	;# 
   670  0F5A                     	;# 
   671  0F5B                     	;# 
   672  0F5C                     	;# 
   673  0F5D                     	;# 
   674  0F61                     	;# 
   675  0F62                     	;# 
   676  0F64                     	;# 
   677  0F65                     	;# 
   678  0F66                     	;# 
   679  0F67                     	;# 
   680  0F68                     	;# 
   681  0F69                     	;# 
   682  0F6A                     	;# 
   683  0F6B                     	;# 
   684  0F6C                     	;# 
   685  0F6D                     	;# 
   686  0FE4                     	;# 
   687  0FE5                     	;# 
   688  0FE6                     	;# 
   689  0FE7                     	;# 
   690  0FE8                     	;# 
   691  0FE9                     	;# 
   692  0FEA                     	;# 
   693  0FEB                     	;# 
   694  0FED                     	;# 
   695  0FEE                     	;# 
   696  0FEF                     	;# 
   697  0000                     	;# 
   698  0001                     	;# 
   699  0002                     	;# 
   700  0003                     	;# 
   701  0004                     	;# 
   702  0005                     	;# 
   703  0006                     	;# 
   704  0007                     	;# 
   705  0008                     	;# 
   706  0009                     	;# 
   707  000A                     	;# 
   708  000B                     	;# 
   709  000C                     	;# 
   710  000D                     	;# 
   711  000E                     	;# 
   712  000F                     	;# 
   713  0010                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0013                     	;# 
   717  0014                     	;# 
   718  0015                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001C                     	;# 
   725  001C                     	;# 
   726  001D                     	;# 
   727  001D                     	;# 
   728  001E                     	;# 
   729  001F                     	;# 
   730  008C                     	;# 
   731  008C                     	;# 
   732  008D                     	;# 
   733  008E                     	;# 
   734  008E                     	;# 
   735  008F                     	;# 
   736  0090                     	;# 
   737  0090                     	;# 
   738  0091                     	;# 
   739  0093                     	;# 
   740  0094                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0097                     	;# 
   744  0098                     	;# 
   745  0099                     	;# 
   746  009A                     	;# 
   747  009B                     	;# 
   748  009C                     	;# 
   749  009D                     	;# 
   750  009E                     	;# 
   751  010C                     	;# 
   752  010D                     	;# 
   753  010E                     	;# 
   754  010E                     	;# 
   755  010F                     	;# 
   756  0110                     	;# 
   757  0110                     	;# 
   758  0111                     	;# 
   759  0112                     	;# 
   760  0112                     	;# 
   761  0113                     	;# 
   762  0114                     	;# 
   763  0114                     	;# 
   764  0115                     	;# 
   765  0116                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  0119                     	;# 
   769  0119                     	;# 
   770  0119                     	;# 
   771  011A                     	;# 
   772  011A                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011B                     	;# 
   776  011B                     	;# 
   777  011B                     	;# 
   778  011B                     	;# 
   779  011C                     	;# 
   780  011C                     	;# 
   781  011C                     	;# 
   782  011D                     	;# 
   783  011D                     	;# 
   784  011D                     	;# 
   785  011E                     	;# 
   786  011E                     	;# 
   787  011E                     	;# 
   788  011F                     	;# 
   789  011F                     	;# 
   790  011F                     	;# 
   791  011F                     	;# 
   792  011F                     	;# 
   793  018C                     	;# 
   794  018D                     	;# 
   795  018E                     	;# 
   796  018F                     	;# 
   797  0190                     	;# 
   798  0191                     	;# 
   799  0192                     	;# 
   800  0196                     	;# 
   801  0197                     	;# 
   802  0198                     	;# 
   803  0199                     	;# 
   804  019A                     	;# 
   805  019B                     	;# 
   806  019C                     	;# 
   807  020C                     	;# 
   808  020C                     	;# 
   809  020D                     	;# 
   810  020E                     	;# 
   811  020F                     	;# 
   812  020F                     	;# 
   813  0210                     	;# 
   814  0210                     	;# 
   815  0211                     	;# 
   816  0211                     	;# 
   817  0212                     	;# 
   818  0212                     	;# 
   819  0213                     	;# 
   820  0214                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0218                     	;# 
   828  0218                     	;# 
   829  0219                     	;# 
   830  021A                     	;# 
   831  021B                     	;# 
   832  021B                     	;# 
   833  021C                     	;# 
   834  021C                     	;# 
   835  021D                     	;# 
   836  021D                     	;# 
   837  021E                     	;# 
   838  021F                     	;# 
   839  028C                     	;# 
   840  028C                     	;# 
   841  028D                     	;# 
   842  028D                     	;# 
   843  028E                     	;# 
   844  028F                     	;# 
   845  0290                     	;# 
   846  0290                     	;# 
   847  0291                     	;# 
   848  0292                     	;# 
   849  0292                     	;# 
   850  0293                     	;# 
   851  0293                     	;# 
   852  0294                     	;# 
   853  0295                     	;# 
   854  0296                     	;# 
   855  0296                     	;# 
   856  0297                     	;# 
   857  0298                     	;# 
   858  0298                     	;# 
   859  0299                     	;# 
   860  0299                     	;# 
   861  029A                     	;# 
   862  029B                     	;# 
   863  029C                     	;# 
   864  029C                     	;# 
   865  029D                     	;# 
   866  030C                     	;# 
   867  030C                     	;# 
   868  030D                     	;# 
   869  030E                     	;# 
   870  030F                     	;# 
   871  0310                     	;# 
   872  0310                     	;# 
   873  0311                     	;# 
   874  0312                     	;# 
   875  0313                     	;# 
   876  0314                     	;# 
   877  0314                     	;# 
   878  0315                     	;# 
   879  0316                     	;# 
   880  0317                     	;# 
   881  0318                     	;# 
   882  0318                     	;# 
   883  0319                     	;# 
   884  031A                     	;# 
   885  031B                     	;# 
   886  031C                     	;# 
   887  031C                     	;# 
   888  031D                     	;# 
   889  031E                     	;# 
   890  031F                     	;# 
   891  038C                     	;# 
   892  038C                     	;# 
   893  038D                     	;# 
   894  038E                     	;# 
   895  0390                     	;# 
   896  0390                     	;# 
   897  0391                     	;# 
   898  0392                     	;# 
   899  040C                     	;# 
   900  040D                     	;# 
   901  040E                     	;# 
   902  040F                     	;# 
   903  0410                     	;# 
   904  0411                     	;# 
   905  0416                     	;# 
   906  0416                     	;# 
   907  0417                     	;# 
   908  0418                     	;# 
   909  0418                     	;# 
   910  0419                     	;# 
   911  041A                     	;# 
   912  041A                     	;# 
   913  041B                     	;# 
   914  041C                     	;# 
   915  041C                     	;# 
   916  041D                     	;# 
   917  041E                     	;# 
   918  041F                     	;# 
   919  048C                     	;# 
   920  048C                     	;# 
   921  048D                     	;# 
   922  048E                     	;# 
   923  048F                     	;# 
   924  048F                     	;# 
   925  0490                     	;# 
   926  0491                     	;# 
   927  0492                     	;# 
   928  0492                     	;# 
   929  0493                     	;# 
   930  0494                     	;# 
   931  0495                     	;# 
   932  0495                     	;# 
   933  0496                     	;# 
   934  0497                     	;# 
   935  0498                     	;# 
   936  0499                     	;# 
   937  049A                     	;# 
   938  049B                     	;# 
   939  049C                     	;# 
   940  049D                     	;# 
   941  050C                     	;# 
   942  050C                     	;# 
   943  050D                     	;# 
   944  050E                     	;# 
   945  050F                     	;# 
   946  050F                     	;# 
   947  0510                     	;# 
   948  0511                     	;# 
   949  0512                     	;# 
   950  0512                     	;# 
   951  0513                     	;# 
   952  0514                     	;# 
   953  0515                     	;# 
   954  0515                     	;# 
   955  0516                     	;# 
   956  0517                     	;# 
   957  0518                     	;# 
   958  0519                     	;# 
   959  051A                     	;# 
   960  051B                     	;# 
   961  051C                     	;# 
   962  051D                     	;# 
   963  058C                     	;# 
   964  058C                     	;# 
   965  058D                     	;# 
   966  058E                     	;# 
   967  058F                     	;# 
   968  058F                     	;# 
   969  0590                     	;# 
   970  0591                     	;# 
   971  0592                     	;# 
   972  0593                     	;# 
   973  060C                     	;# 
   974  060D                     	;# 
   975  060E                     	;# 
   976  060F                     	;# 
   977  0610                     	;# 
   978  0611                     	;# 
   979  0612                     	;# 
   980  0613                     	;# 
   981  0614                     	;# 
   982  0616                     	;# 
   983  0617                     	;# 
   984  0618                     	;# 
   985  0619                     	;# 
   986  061A                     	;# 
   987  061B                     	;# 
   988  061C                     	;# 
   989  061D                     	;# 
   990  061E                     	;# 
   991  068C                     	;# 
   992  068D                     	;# 
   993  068E                     	;# 
   994  068F                     	;# 
   995  0690                     	;# 
   996  0691                     	;# 
   997  0692                     	;# 
   998  0693                     	;# 
   999  0694                     	;# 
  1000  070C                     	;# 
  1001  070D                     	;# 
  1002  070E                     	;# 
  1003  070F                     	;# 
  1004  0710                     	;# 
  1005  0711                     	;# 
  1006  0712                     	;# 
  1007  0713                     	;# 
  1008  0714                     	;# 
  1009  0716                     	;# 
  1010  0717                     	;# 
  1011  0718                     	;# 
  1012  0719                     	;# 
  1013  071A                     	;# 
  1014  071B                     	;# 
  1015  071C                     	;# 
  1016  071D                     	;# 
  1017  071E                     	;# 
  1018  0796                     	;# 
  1019  0797                     	;# 
  1020  0798                     	;# 
  1021  0799                     	;# 
  1022  079A                     	;# 
  1023  079B                     	;# 
  1024  080C                     	;# 
  1025  080D                     	;# 
  1026  080E                     	;# 
  1027  080F                     	;# 
  1028  0810                     	;# 
  1029  0811                     	;# 
  1030  0812                     	;# 
  1031  0813                     	;# 
  1032  0814                     	;# 
  1033  081A                     	;# 
  1034  081B                     	;# 
  1035  081C                     	;# 
  1036  081D                     	;# 
  1037  081E                     	;# 
  1038  081F                     	;# 
  1039  088C                     	;# 
  1040  088D                     	;# 
  1041  088E                     	;# 
  1042  088F                     	;# 
  1043  0890                     	;# 
  1044  0891                     	;# 
  1045  0892                     	;# 
  1046  0893                     	;# 
  1047  0895                     	;# 
  1048  0896                     	;# 
  1049  0897                     	;# 
  1050  0898                     	;# 
  1051  0899                     	;# 
  1052  089A                     	;# 
  1053  089B                     	;# 
  1054  090C                     	;# 
  1055  090E                     	;# 
  1056  090F                     	;# 
  1057  091F                     	;# 
  1058  091F                     	;# 
  1059  098F                     	;# 
  1060  098F                     	;# 
  1061  0990                     	;# 
  1062  0991                     	;# 
  1063  0992                     	;# 
  1064  0993                     	;# 
  1065  0994                     	;# 
  1066  0995                     	;# 
  1067  0996                     	;# 
  1068  0997                     	;# 
  1069  0E0F                     	;# 
  1070  0E10                     	;# 
  1071  0E11                     	;# 
  1072  0E12                     	;# 
  1073  0E13                     	;# 
  1074  0E14                     	;# 
  1075  0E15                     	;# 
  1076  0E16                     	;# 
  1077  0E17                     	;# 
  1078  0E18                     	;# 
  1079  0E19                     	;# 
  1080  0E1A                     	;# 
  1081  0E1B                     	;# 
  1082  0E1C                     	;# 
  1083  0E1D                     	;# 
  1084  0E1E                     	;# 
  1085  0E1F                     	;# 
  1086  0E20                     	;# 
  1087  0E21                     	;# 
  1088  0E22                     	;# 
  1089  0E23                     	;# 
  1090  0E24                     	;# 
  1091  0E25                     	;# 
  1092  0E26                     	;# 
  1093  0E27                     	;# 
  1094  0E28                     	;# 
  1095  0E29                     	;# 
  1096  0E2A                     	;# 
  1097  0E2B                     	;# 
  1098  0E2C                     	;# 
  1099  0E2D                     	;# 
  1100  0E2E                     	;# 
  1101  0E2F                     	;# 
  1102  0E30                     	;# 
  1103  0E31                     	;# 
  1104  0E32                     	;# 
  1105  0E33                     	;# 
  1106  0E34                     	;# 
  1107  0E35                     	;# 
  1108  0E36                     	;# 
  1109  0E37                     	;# 
  1110  0E8F                     	;# 
  1111  0E90                     	;# 
  1112  0E91                     	;# 
  1113  0E92                     	;# 
  1114  0E93                     	;# 
  1115  0E94                     	;# 
  1116  0E95                     	;# 
  1117  0E96                     	;# 
  1118  0E97                     	;# 
  1119  0E9C                     	;# 
  1120  0E9D                     	;# 
  1121  0E9E                     	;# 
  1122  0EA1                     	;# 
  1123  0EA2                     	;# 
  1124  0EA3                     	;# 
  1125  0EA4                     	;# 
  1126  0EA5                     	;# 
  1127  0EA9                     	;# 
  1128  0EAA                     	;# 
  1129  0EAB                     	;# 
  1130  0EAC                     	;# 
  1131  0EB1                     	;# 
  1132  0EB2                     	;# 
  1133  0EB3                     	;# 
  1134  0EB8                     	;# 
  1135  0EB9                     	;# 
  1136  0EBA                     	;# 
  1137  0EBB                     	;# 
  1138  0EBC                     	;# 
  1139  0EBD                     	;# 
  1140  0EBE                     	;# 
  1141  0EC3                     	;# 
  1142  0EC5                     	;# 
  1143  0EC6                     	;# 
  1144  0EC7                     	;# 
  1145  0EC8                     	;# 
  1146  0EC9                     	;# 
  1147  0ECA                     	;# 
  1148  0ECB                     	;# 
  1149  0ECC                     	;# 
  1150  0F10                     	;# 
  1151  0F11                     	;# 
  1152  0F12                     	;# 
  1153  0F13                     	;# 
  1154  0F14                     	;# 
  1155  0F15                     	;# 
  1156  0F16                     	;# 
  1157  0F17                     	;# 
  1158  0F18                     	;# 
  1159  0F19                     	;# 
  1160  0F1A                     	;# 
  1161  0F1B                     	;# 
  1162  0F1C                     	;# 
  1163  0F1D                     	;# 
  1164  0F1E                     	;# 
  1165  0F1F                     	;# 
  1166  0F20                     	;# 
  1167  0F21                     	;# 
  1168  0F22                     	;# 
  1169  0F23                     	;# 
  1170  0F24                     	;# 
  1171  0F25                     	;# 
  1172  0F26                     	;# 
  1173  0F27                     	;# 
  1174  0F28                     	;# 
  1175  0F29                     	;# 
  1176  0F2A                     	;# 
  1177  0F2B                     	;# 
  1178  0F2C                     	;# 
  1179  0F2D                     	;# 
  1180  0F2E                     	;# 
  1181  0F2F                     	;# 
  1182  0F30                     	;# 
  1183  0F31                     	;# 
  1184  0F32                     	;# 
  1185  0F38                     	;# 
  1186  0F39                     	;# 
  1187  0F3A                     	;# 
  1188  0F3B                     	;# 
  1189  0F3C                     	;# 
  1190  0F3D                     	;# 
  1191  0F3E                     	;# 
  1192  0F3F                     	;# 
  1193  0F40                     	;# 
  1194  0F41                     	;# 
  1195  0F43                     	;# 
  1196  0F44                     	;# 
  1197  0F45                     	;# 
  1198  0F46                     	;# 
  1199  0F47                     	;# 
  1200  0F48                     	;# 
  1201  0F49                     	;# 
  1202  0F4A                     	;# 
  1203  0F4B                     	;# 
  1204  0F4C                     	;# 
  1205  0F4E                     	;# 
  1206  0F4F                     	;# 
  1207  0F50                     	;# 
  1208  0F51                     	;# 
  1209  0F52                     	;# 
  1210  0F53                     	;# 
  1211  0F54                     	;# 
  1212  0F55                     	;# 
  1213  0F56                     	;# 
  1214  0F57                     	;# 
  1215  0F59                     	;# 
  1216  0F5A                     	;# 
  1217  0F5B                     	;# 
  1218  0F5C                     	;# 
  1219  0F5D                     	;# 
  1220  0F61                     	;# 
  1221  0F62                     	;# 
  1222  0F64                     	;# 
  1223  0F65                     	;# 
  1224  0F66                     	;# 
  1225  0F67                     	;# 
  1226  0F68                     	;# 
  1227  0F69                     	;# 
  1228  0F6A                     	;# 
  1229  0F6B                     	;# 
  1230  0F6C                     	;# 
  1231  0F6D                     	;# 
  1232  0FE4                     	;# 
  1233  0FE5                     	;# 
  1234  0FE6                     	;# 
  1235  0FE7                     	;# 
  1236  0FE8                     	;# 
  1237  0FE9                     	;# 
  1238  0FEA                     	;# 
  1239  0FEB                     	;# 
  1240  0FED                     	;# 
  1241  0FEE                     	;# 
  1242  0FEF                     	;# 
  1243  0000                     	;# 
  1244  0001                     	;# 
  1245  0002                     	;# 
  1246  0003                     	;# 
  1247  0004                     	;# 
  1248  0005                     	;# 
  1249  0006                     	;# 
  1250  0007                     	;# 
  1251  0008                     	;# 
  1252  0009                     	;# 
  1253  000A                     	;# 
  1254  000B                     	;# 
  1255  000C                     	;# 
  1256  000D                     	;# 
  1257  000E                     	;# 
  1258  000F                     	;# 
  1259  0010                     	;# 
  1260  0011                     	;# 
  1261  0012                     	;# 
  1262  0013                     	;# 
  1263  0014                     	;# 
  1264  0015                     	;# 
  1265  0016                     	;# 
  1266  0017                     	;# 
  1267  0018                     	;# 
  1268  0019                     	;# 
  1269  001A                     	;# 
  1270  001C                     	;# 
  1271  001C                     	;# 
  1272  001D                     	;# 
  1273  001D                     	;# 
  1274  001E                     	;# 
  1275  001F                     	;# 
  1276  008C                     	;# 
  1277  008C                     	;# 
  1278  008D                     	;# 
  1279  008E                     	;# 
  1280  008E                     	;# 
  1281  008F                     	;# 
  1282  0090                     	;# 
  1283  0090                     	;# 
  1284  0091                     	;# 
  1285  0093                     	;# 
  1286  0094                     	;# 
  1287  0095                     	;# 
  1288  0096                     	;# 
  1289  0097                     	;# 
  1290  0098                     	;# 
  1291  0099                     	;# 
  1292  009A                     	;# 
  1293  009B                     	;# 
  1294  009C                     	;# 
  1295  009D                     	;# 
  1296  009E                     	;# 
  1297  010C                     	;# 
  1298  010D                     	;# 
  1299  010E                     	;# 
  1300  010E                     	;# 
  1301  010F                     	;# 
  1302  0110                     	;# 
  1303  0110                     	;# 
  1304  0111                     	;# 
  1305  0112                     	;# 
  1306  0112                     	;# 
  1307  0113                     	;# 
  1308  0114                     	;# 
  1309  0114                     	;# 
  1310  0115                     	;# 
  1311  0116                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  0119                     	;# 
  1315  0119                     	;# 
  1316  0119                     	;# 
  1317  011A                     	;# 
  1318  011A                     	;# 
  1319  011A                     	;# 
  1320  011B                     	;# 
  1321  011B                     	;# 
  1322  011B                     	;# 
  1323  011B                     	;# 
  1324  011B                     	;# 
  1325  011C                     	;# 
  1326  011C                     	;# 
  1327  011C                     	;# 
  1328  011D                     	;# 
  1329  011D                     	;# 
  1330  011D                     	;# 
  1331  011E                     	;# 
  1332  011E                     	;# 
  1333  011E                     	;# 
  1334  011F                     	;# 
  1335  011F                     	;# 
  1336  011F                     	;# 
  1337  011F                     	;# 
  1338  011F                     	;# 
  1339  018C                     	;# 
  1340  018D                     	;# 
  1341  018E                     	;# 
  1342  018F                     	;# 
  1343  0190                     	;# 
  1344  0191                     	;# 
  1345  0192                     	;# 
  1346  0196                     	;# 
  1347  0197                     	;# 
  1348  0198                     	;# 
  1349  0199                     	;# 
  1350  019A                     	;# 
  1351  019B                     	;# 
  1352  019C                     	;# 
  1353  020C                     	;# 
  1354  020C                     	;# 
  1355  020D                     	;# 
  1356  020E                     	;# 
  1357  020F                     	;# 
  1358  020F                     	;# 
  1359  0210                     	;# 
  1360  0210                     	;# 
  1361  0211                     	;# 
  1362  0211                     	;# 
  1363  0212                     	;# 
  1364  0212                     	;# 
  1365  0213                     	;# 
  1366  0214                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0216                     	;# 
  1370  0216                     	;# 
  1371  0217                     	;# 
  1372  0217                     	;# 
  1373  0218                     	;# 
  1374  0218                     	;# 
  1375  0219                     	;# 
  1376  021A                     	;# 
  1377  021B                     	;# 
  1378  021B                     	;# 
  1379  021C                     	;# 
  1380  021C                     	;# 
  1381  021D                     	;# 
  1382  021D                     	;# 
  1383  021E                     	;# 
  1384  021F                     	;# 
  1385  028C                     	;# 
  1386  028C                     	;# 
  1387  028D                     	;# 
  1388  028D                     	;# 
  1389  028E                     	;# 
  1390  028F                     	;# 
  1391  0290                     	;# 
  1392  0290                     	;# 
  1393  0291                     	;# 
  1394  0292                     	;# 
  1395  0292                     	;# 
  1396  0293                     	;# 
  1397  0293                     	;# 
  1398  0294                     	;# 
  1399  0295                     	;# 
  1400  0296                     	;# 
  1401  0296                     	;# 
  1402  0297                     	;# 
  1403  0298                     	;# 
  1404  0298                     	;# 
  1405  0299                     	;# 
  1406  0299                     	;# 
  1407  029A                     	;# 
  1408  029B                     	;# 
  1409  029C                     	;# 
  1410  029C                     	;# 
  1411  029D                     	;# 
  1412  030C                     	;# 
  1413  030C                     	;# 
  1414  030D                     	;# 
  1415  030E                     	;# 
  1416  030F                     	;# 
  1417  0310                     	;# 
  1418  0310                     	;# 
  1419  0311                     	;# 
  1420  0312                     	;# 
  1421  0313                     	;# 
  1422  0314                     	;# 
  1423  0314                     	;# 
  1424  0315                     	;# 
  1425  0316                     	;# 
  1426  0317                     	;# 
  1427  0318                     	;# 
  1428  0318                     	;# 
  1429  0319                     	;# 
  1430  031A                     	;# 
  1431  031B                     	;# 
  1432  031C                     	;# 
  1433  031C                     	;# 
  1434  031D                     	;# 
  1435  031E                     	;# 
  1436  031F                     	;# 
  1437  038C                     	;# 
  1438  038C                     	;# 
  1439  038D                     	;# 
  1440  038E                     	;# 
  1441  0390                     	;# 
  1442  0390                     	;# 
  1443  0391                     	;# 
  1444  0392                     	;# 
  1445  040C                     	;# 
  1446  040D                     	;# 
  1447  040E                     	;# 
  1448  040F                     	;# 
  1449  0410                     	;# 
  1450  0411                     	;# 
  1451  0416                     	;# 
  1452  0416                     	;# 
  1453  0417                     	;# 
  1454  0418                     	;# 
  1455  0418                     	;# 
  1456  0419                     	;# 
  1457  041A                     	;# 
  1458  041A                     	;# 
  1459  041B                     	;# 
  1460  041C                     	;# 
  1461  041C                     	;# 
  1462  041D                     	;# 
  1463  041E                     	;# 
  1464  041F                     	;# 
  1465  048C                     	;# 
  1466  048C                     	;# 
  1467  048D                     	;# 
  1468  048E                     	;# 
  1469  048F                     	;# 
  1470  048F                     	;# 
  1471  0490                     	;# 
  1472  0491                     	;# 
  1473  0492                     	;# 
  1474  0492                     	;# 
  1475  0493                     	;# 
  1476  0494                     	;# 
  1477  0495                     	;# 
  1478  0495                     	;# 
  1479  0496                     	;# 
  1480  0497                     	;# 
  1481  0498                     	;# 
  1482  0499                     	;# 
  1483  049A                     	;# 
  1484  049B                     	;# 
  1485  049C                     	;# 
  1486  049D                     	;# 
  1487  050C                     	;# 
  1488  050C                     	;# 
  1489  050D                     	;# 
  1490  050E                     	;# 
  1491  050F                     	;# 
  1492  050F                     	;# 
  1493  0510                     	;# 
  1494  0511                     	;# 
  1495  0512                     	;# 
  1496  0512                     	;# 
  1497  0513                     	;# 
  1498  0514                     	;# 
  1499  0515                     	;# 
  1500  0515                     	;# 
  1501  0516                     	;# 
  1502  0517                     	;# 
  1503  0518                     	;# 
  1504  0519                     	;# 
  1505  051A                     	;# 
  1506  051B                     	;# 
  1507  051C                     	;# 
  1508  051D                     	;# 
  1509  058C                     	;# 
  1510  058C                     	;# 
  1511  058D                     	;# 
  1512  058E                     	;# 
  1513  058F                     	;# 
  1514  058F                     	;# 
  1515  0590                     	;# 
  1516  0591                     	;# 
  1517  0592                     	;# 
  1518  0593                     	;# 
  1519  060C                     	;# 
  1520  060D                     	;# 
  1521  060E                     	;# 
  1522  060F                     	;# 
  1523  0610                     	;# 
  1524  0611                     	;# 
  1525  0612                     	;# 
  1526  0613                     	;# 
  1527  0614                     	;# 
  1528  0616                     	;# 
  1529  0617                     	;# 
  1530  0618                     	;# 
  1531  0619                     	;# 
  1532  061A                     	;# 
  1533  061B                     	;# 
  1534  061C                     	;# 
  1535  061D                     	;# 
  1536  061E                     	;# 
  1537  068C                     	;# 
  1538  068D                     	;# 
  1539  068E                     	;# 
  1540  068F                     	;# 
  1541  0690                     	;# 
  1542  0691                     	;# 
  1543  0692                     	;# 
  1544  0693                     	;# 
  1545  0694                     	;# 
  1546  070C                     	;# 
  1547  070D                     	;# 
  1548  070E                     	;# 
  1549  070F                     	;# 
  1550  0710                     	;# 
  1551  0711                     	;# 
  1552  0712                     	;# 
  1553  0713                     	;# 
  1554  0714                     	;# 
  1555  0716                     	;# 
  1556  0717                     	;# 
  1557  0718                     	;# 
  1558  0719                     	;# 
  1559  071A                     	;# 
  1560  071B                     	;# 
  1561  071C                     	;# 
  1562  071D                     	;# 
  1563  071E                     	;# 
  1564  0796                     	;# 
  1565  0797                     	;# 
  1566  0798                     	;# 
  1567  0799                     	;# 
  1568  079A                     	;# 
  1569  079B                     	;# 
  1570  080C                     	;# 
  1571  080D                     	;# 
  1572  080E                     	;# 
  1573  080F                     	;# 
  1574  0810                     	;# 
  1575  0811                     	;# 
  1576  0812                     	;# 
  1577  0813                     	;# 
  1578  0814                     	;# 
  1579  081A                     	;# 
  1580  081B                     	;# 
  1581  081C                     	;# 
  1582  081D                     	;# 
  1583  081E                     	;# 
  1584  081F                     	;# 
  1585  088C                     	;# 
  1586  088D                     	;# 
  1587  088E                     	;# 
  1588  088F                     	;# 
  1589  0890                     	;# 
  1590  0891                     	;# 
  1591  0892                     	;# 
  1592  0893                     	;# 
  1593  0895                     	;# 
  1594  0896                     	;# 
  1595  0897                     	;# 
  1596  0898                     	;# 
  1597  0899                     	;# 
  1598  089A                     	;# 
  1599  089B                     	;# 
  1600  090C                     	;# 
  1601  090E                     	;# 
  1602  090F                     	;# 
  1603  091F                     	;# 
  1604  091F                     	;# 
  1605  098F                     	;# 
  1606  098F                     	;# 
  1607  0990                     	;# 
  1608  0991                     	;# 
  1609  0992                     	;# 
  1610  0993                     	;# 
  1611  0994                     	;# 
  1612  0995                     	;# 
  1613  0996                     	;# 
  1614  0997                     	;# 
  1615  0E0F                     	;# 
  1616  0E10                     	;# 
  1617  0E11                     	;# 
  1618  0E12                     	;# 
  1619  0E13                     	;# 
  1620  0E14                     	;# 
  1621  0E15                     	;# 
  1622  0E16                     	;# 
  1623  0E17                     	;# 
  1624  0E18                     	;# 
  1625  0E19                     	;# 
  1626  0E1A                     	;# 
  1627  0E1B                     	;# 
  1628  0E1C                     	;# 
  1629  0E1D                     	;# 
  1630  0E1E                     	;# 
  1631  0E1F                     	;# 
  1632  0E20                     	;# 
  1633  0E21                     	;# 
  1634  0E22                     	;# 
  1635  0E23                     	;# 
  1636  0E24                     	;# 
  1637  0E25                     	;# 
  1638  0E26                     	;# 
  1639  0E27                     	;# 
  1640  0E28                     	;# 
  1641  0E29                     	;# 
  1642  0E2A                     	;# 
  1643  0E2B                     	;# 
  1644  0E2C                     	;# 
  1645  0E2D                     	;# 
  1646  0E2E                     	;# 
  1647  0E2F                     	;# 
  1648  0E30                     	;# 
  1649  0E31                     	;# 
  1650  0E32                     	;# 
  1651  0E33                     	;# 
  1652  0E34                     	;# 
  1653  0E35                     	;# 
  1654  0E36                     	;# 
  1655  0E37                     	;# 
  1656  0E8F                     	;# 
  1657  0E90                     	;# 
  1658  0E91                     	;# 
  1659  0E92                     	;# 
  1660  0E93                     	;# 
  1661  0E94                     	;# 
  1662  0E95                     	;# 
  1663  0E96                     	;# 
  1664  0E97                     	;# 
  1665  0E9C                     	;# 
  1666  0E9D                     	;# 
  1667  0E9E                     	;# 
  1668  0EA1                     	;# 
  1669  0EA2                     	;# 
  1670  0EA3                     	;# 
  1671  0EA4                     	;# 
  1672  0EA5                     	;# 
  1673  0EA9                     	;# 
  1674  0EAA                     	;# 
  1675  0EAB                     	;# 
  1676  0EAC                     	;# 
  1677  0EB1                     	;# 
  1678  0EB2                     	;# 
  1679  0EB3                     	;# 
  1680  0EB8                     	;# 
  1681  0EB9                     	;# 
  1682  0EBA                     	;# 
  1683  0EBB                     	;# 
  1684  0EBC                     	;# 
  1685  0EBD                     	;# 
  1686  0EBE                     	;# 
  1687  0EC3                     	;# 
  1688  0EC5                     	;# 
  1689  0EC6                     	;# 
  1690  0EC7                     	;# 
  1691  0EC8                     	;# 
  1692  0EC9                     	;# 
  1693  0ECA                     	;# 
  1694  0ECB                     	;# 
  1695  0ECC                     	;# 
  1696  0F10                     	;# 
  1697  0F11                     	;# 
  1698  0F12                     	;# 
  1699  0F13                     	;# 
  1700  0F14                     	;# 
  1701  0F15                     	;# 
  1702  0F16                     	;# 
  1703  0F17                     	;# 
  1704  0F18                     	;# 
  1705  0F19                     	;# 
  1706  0F1A                     	;# 
  1707  0F1B                     	;# 
  1708  0F1C                     	;# 
  1709  0F1D                     	;# 
  1710  0F1E                     	;# 
  1711  0F1F                     	;# 
  1712  0F20                     	;# 
  1713  0F21                     	;# 
  1714  0F22                     	;# 
  1715  0F23                     	;# 
  1716  0F24                     	;# 
  1717  0F25                     	;# 
  1718  0F26                     	;# 
  1719  0F27                     	;# 
  1720  0F28                     	;# 
  1721  0F29                     	;# 
  1722  0F2A                     	;# 
  1723  0F2B                     	;# 
  1724  0F2C                     	;# 
  1725  0F2D                     	;# 
  1726  0F2E                     	;# 
  1727  0F2F                     	;# 
  1728  0F30                     	;# 
  1729  0F31                     	;# 
  1730  0F32                     	;# 
  1731  0F38                     	;# 
  1732  0F39                     	;# 
  1733  0F3A                     	;# 
  1734  0F3B                     	;# 
  1735  0F3C                     	;# 
  1736  0F3D                     	;# 
  1737  0F3E                     	;# 
  1738  0F3F                     	;# 
  1739  0F40                     	;# 
  1740  0F41                     	;# 
  1741  0F43                     	;# 
  1742  0F44                     	;# 
  1743  0F45                     	;# 
  1744  0F46                     	;# 
  1745  0F47                     	;# 
  1746  0F48                     	;# 
  1747  0F49                     	;# 
  1748  0F4A                     	;# 
  1749  0F4B                     	;# 
  1750  0F4C                     	;# 
  1751  0F4E                     	;# 
  1752  0F4F                     	;# 
  1753  0F50                     	;# 
  1754  0F51                     	;# 
  1755  0F52                     	;# 
  1756  0F53                     	;# 
  1757  0F54                     	;# 
  1758  0F55                     	;# 
  1759  0F56                     	;# 
  1760  0F57                     	;# 
  1761  0F59                     	;# 
  1762  0F5A                     	;# 
  1763  0F5B                     	;# 
  1764  0F5C                     	;# 
  1765  0F5D                     	;# 
  1766  0F61                     	;# 
  1767  0F62                     	;# 
  1768  0F64                     	;# 
  1769  0F65                     	;# 
  1770  0F66                     	;# 
  1771  0F67                     	;# 
  1772  0F68                     	;# 
  1773  0F69                     	;# 
  1774  0F6A                     	;# 
  1775  0F6B                     	;# 
  1776  0F6C                     	;# 
  1777  0F6D                     	;# 
  1778  0FE4                     	;# 
  1779  0FE5                     	;# 
  1780  0FE6                     	;# 
  1781  0FE7                     	;# 
  1782  0FE8                     	;# 
  1783  0FE9                     	;# 
  1784  0FEA                     	;# 
  1785  0FEB                     	;# 
  1786  0FED                     	;# 
  1787  0FEE                     	;# 
  1788  0FEF                     	;# 
  1789  0000                     	;# 
  1790  0001                     	;# 
  1791  0002                     	;# 
  1792  0003                     	;# 
  1793  0004                     	;# 
  1794  0005                     	;# 
  1795  0006                     	;# 
  1796  0007                     	;# 
  1797  0008                     	;# 
  1798  0009                     	;# 
  1799  000A                     	;# 
  1800  000B                     	;# 
  1801  000C                     	;# 
  1802  000D                     	;# 
  1803  000E                     	;# 
  1804  000F                     	;# 
  1805  0010                     	;# 
  1806  0011                     	;# 
  1807  0012                     	;# 
  1808  0013                     	;# 
  1809  0014                     	;# 
  1810  0015                     	;# 
  1811  0016                     	;# 
  1812  0017                     	;# 
  1813  0018                     	;# 
  1814  0019                     	;# 
  1815  001A                     	;# 
  1816  001C                     	;# 
  1817  001C                     	;# 
  1818  001D                     	;# 
  1819  001D                     	;# 
  1820  001E                     	;# 
  1821  001F                     	;# 
  1822  008C                     	;# 
  1823  008C                     	;# 
  1824  008D                     	;# 
  1825  008E                     	;# 
  1826  008E                     	;# 
  1827  008F                     	;# 
  1828  0090                     	;# 
  1829  0090                     	;# 
  1830  0091                     	;# 
  1831  0093                     	;# 
  1832  0094                     	;# 
  1833  0095                     	;# 
  1834  0096                     	;# 
  1835  0097                     	;# 
  1836  0098                     	;# 
  1837  0099                     	;# 
  1838  009A                     	;# 
  1839  009B                     	;# 
  1840  009C                     	;# 
  1841  009D                     	;# 
  1842  009E                     	;# 
  1843  010C                     	;# 
  1844  010D                     	;# 
  1845  010E                     	;# 
  1846  010E                     	;# 
  1847  010F                     	;# 
  1848  0110                     	;# 
  1849  0110                     	;# 
  1850  0111                     	;# 
  1851  0112                     	;# 
  1852  0112                     	;# 
  1853  0113                     	;# 
  1854  0114                     	;# 
  1855  0114                     	;# 
  1856  0115                     	;# 
  1857  0116                     	;# 
  1858  0116                     	;# 
  1859  0117                     	;# 
  1860  0119                     	;# 
  1861  0119                     	;# 
  1862  0119                     	;# 
  1863  011A                     	;# 
  1864  011A                     	;# 
  1865  011A                     	;# 
  1866  011B                     	;# 
  1867  011B                     	;# 
  1868  011B                     	;# 
  1869  011B                     	;# 
  1870  011B                     	;# 
  1871  011C                     	;# 
  1872  011C                     	;# 
  1873  011C                     	;# 
  1874  011D                     	;# 
  1875  011D                     	;# 
  1876  011D                     	;# 
  1877  011E                     	;# 
  1878  011E                     	;# 
  1879  011E                     	;# 
  1880  011F                     	;# 
  1881  011F                     	;# 
  1882  011F                     	;# 
  1883  011F                     	;# 
  1884  011F                     	;# 
  1885  018C                     	;# 
  1886  018D                     	;# 
  1887  018E                     	;# 
  1888  018F                     	;# 
  1889  0190                     	;# 
  1890  0191                     	;# 
  1891  0192                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0198                     	;# 
  1895  0199                     	;# 
  1896  019A                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  020C                     	;# 
  1900  020C                     	;# 
  1901  020D                     	;# 
  1902  020E                     	;# 
  1903  020F                     	;# 
  1904  020F                     	;# 
  1905  0210                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0218                     	;# 
  1920  0218                     	;# 
  1921  0219                     	;# 
  1922  021A                     	;# 
  1923  021B                     	;# 
  1924  021B                     	;# 
  1925  021C                     	;# 
  1926  021C                     	;# 
  1927  021D                     	;# 
  1928  021D                     	;# 
  1929  021E                     	;# 
  1930  021F                     	;# 
  1931  028C                     	;# 
  1932  028C                     	;# 
  1933  028D                     	;# 
  1934  028D                     	;# 
  1935  028E                     	;# 
  1936  028F                     	;# 
  1937  0290                     	;# 
  1938  0290                     	;# 
  1939  0291                     	;# 
  1940  0292                     	;# 
  1941  0292                     	;# 
  1942  0293                     	;# 
  1943  0293                     	;# 
  1944  0294                     	;# 
  1945  0295                     	;# 
  1946  0296                     	;# 
  1947  0296                     	;# 
  1948  0297                     	;# 
  1949  0298                     	;# 
  1950  0298                     	;# 
  1951  0299                     	;# 
  1952  0299                     	;# 
  1953  029A                     	;# 
  1954  029B                     	;# 
  1955  029C                     	;# 
  1956  029C                     	;# 
  1957  029D                     	;# 
  1958  030C                     	;# 
  1959  030C                     	;# 
  1960  030D                     	;# 
  1961  030E                     	;# 
  1962  030F                     	;# 
  1963  0310                     	;# 
  1964  0310                     	;# 
  1965  0311                     	;# 
  1966  0312                     	;# 
  1967  0313                     	;# 
  1968  0314                     	;# 
  1969  0314                     	;# 
  1970  0315                     	;# 
  1971  0316                     	;# 
  1972  0317                     	;# 
  1973  0318                     	;# 
  1974  0318                     	;# 
  1975  0319                     	;# 
  1976  031A                     	;# 
  1977  031B                     	;# 
  1978  031C                     	;# 
  1979  031C                     	;# 
  1980  031D                     	;# 
  1981  031E                     	;# 
  1982  031F                     	;# 
  1983  038C                     	;# 
  1984  038C                     	;# 
  1985  038D                     	;# 
  1986  038E                     	;# 
  1987  0390                     	;# 
  1988  0390                     	;# 
  1989  0391                     	;# 
  1990  0392                     	;# 
  1991  040C                     	;# 
  1992  040D                     	;# 
  1993  040E                     	;# 
  1994  040F                     	;# 
  1995  0410                     	;# 
  1996  0411                     	;# 
  1997  0416                     	;# 
  1998  0416                     	;# 
  1999  0417                     	;# 
  2000  0418                     	;# 
  2001  0418                     	;# 
  2002  0419                     	;# 
  2003  041A                     	;# 
  2004  041A                     	;# 
  2005  041B                     	;# 
  2006  041C                     	;# 
  2007  041C                     	;# 
  2008  041D                     	;# 
  2009  041E                     	;# 
  2010  041F                     	;# 
  2011  048C                     	;# 
  2012  048C                     	;# 
  2013  048D                     	;# 
  2014  048E                     	;# 
  2015  048F                     	;# 
  2016  048F                     	;# 
  2017  0490                     	;# 
  2018  0491                     	;# 
  2019  0492                     	;# 
  2020  0492                     	;# 
  2021  0493                     	;# 
  2022  0494                     	;# 
  2023  0495                     	;# 
  2024  0495                     	;# 
  2025  0496                     	;# 
  2026  0497                     	;# 
  2027  0498                     	;# 
  2028  0499                     	;# 
  2029  049A                     	;# 
  2030  049B                     	;# 
  2031  049C                     	;# 
  2032  049D                     	;# 
  2033  050C                     	;# 
  2034  050C                     	;# 
  2035  050D                     	;# 
  2036  050E                     	;# 
  2037  050F                     	;# 
  2038  050F                     	;# 
  2039  0510                     	;# 
  2040  0511                     	;# 
  2041  0512                     	;# 
  2042  0512                     	;# 
  2043  0513                     	;# 
  2044  0514                     	;# 
  2045  0515                     	;# 
  2046  0515                     	;# 
  2047  0516                     	;# 
  2048  0517                     	;# 
  2049  0518                     	;# 
  2050  0519                     	;# 
  2051  051A                     	;# 
  2052  051B                     	;# 
  2053  051C                     	;# 
  2054  051D                     	;# 
  2055  058C                     	;# 
  2056  058C                     	;# 
  2057  058D                     	;# 
  2058  058E                     	;# 
  2059  058F                     	;# 
  2060  058F                     	;# 
  2061  0590                     	;# 
  2062  0591                     	;# 
  2063  0592                     	;# 
  2064  0593                     	;# 
  2065  060C                     	;# 
  2066  060D                     	;# 
  2067  060E                     	;# 
  2068  060F                     	;# 
  2069  0610                     	;# 
  2070  0611                     	;# 
  2071  0612                     	;# 
  2072  0613                     	;# 
  2073  0614                     	;# 
  2074  0616                     	;# 
  2075  0617                     	;# 
  2076  0618                     	;# 
  2077  0619                     	;# 
  2078  061A                     	;# 
  2079  061B                     	;# 
  2080  061C                     	;# 
  2081  061D                     	;# 
  2082  061E                     	;# 
  2083  068C                     	;# 
  2084  068D                     	;# 
  2085  068E                     	;# 
  2086  068F                     	;# 
  2087  0690                     	;# 
  2088  0691                     	;# 
  2089  0692                     	;# 
  2090  0693                     	;# 
  2091  0694                     	;# 
  2092  070C                     	;# 
  2093  070D                     	;# 
  2094  070E                     	;# 
  2095  070F                     	;# 
  2096  0710                     	;# 
  2097  0711                     	;# 
  2098  0712                     	;# 
  2099  0713                     	;# 
  2100  0714                     	;# 
  2101  0716                     	;# 
  2102  0717                     	;# 
  2103  0718                     	;# 
  2104  0719                     	;# 
  2105  071A                     	;# 
  2106  071B                     	;# 
  2107  071C                     	;# 
  2108  071D                     	;# 
  2109  071E                     	;# 
  2110  0796                     	;# 
  2111  0797                     	;# 
  2112  0798                     	;# 
  2113  0799                     	;# 
  2114  079A                     	;# 
  2115  079B                     	;# 
  2116  080C                     	;# 
  2117  080D                     	;# 
  2118  080E                     	;# 
  2119  080F                     	;# 
  2120  0810                     	;# 
  2121  0811                     	;# 
  2122  0812                     	;# 
  2123  0813                     	;# 
  2124  0814                     	;# 
  2125  081A                     	;# 
  2126  081B                     	;# 
  2127  081C                     	;# 
  2128  081D                     	;# 
  2129  081E                     	;# 
  2130  081F                     	;# 
  2131  088C                     	;# 
  2132  088D                     	;# 
  2133  088E                     	;# 
  2134  088F                     	;# 
  2135  0890                     	;# 
  2136  0891                     	;# 
  2137  0892                     	;# 
  2138  0893                     	;# 
  2139  0895                     	;# 
  2140  0896                     	;# 
  2141  0897                     	;# 
  2142  0898                     	;# 
  2143  0899                     	;# 
  2144  089A                     	;# 
  2145  089B                     	;# 
  2146  090C                     	;# 
  2147  090E                     	;# 
  2148  090F                     	;# 
  2149  091F                     	;# 
  2150  091F                     	;# 
  2151  098F                     	;# 
  2152  098F                     	;# 
  2153  0990                     	;# 
  2154  0991                     	;# 
  2155  0992                     	;# 
  2156  0993                     	;# 
  2157  0994                     	;# 
  2158  0995                     	;# 
  2159  0996                     	;# 
  2160  0997                     	;# 
  2161  0E0F                     	;# 
  2162  0E10                     	;# 
  2163  0E11                     	;# 
  2164  0E12                     	;# 
  2165  0E13                     	;# 
  2166  0E14                     	;# 
  2167  0E15                     	;# 
  2168  0E16                     	;# 
  2169  0E17                     	;# 
  2170  0E18                     	;# 
  2171  0E19                     	;# 
  2172  0E1A                     	;# 
  2173  0E1B                     	;# 
  2174  0E1C                     	;# 
  2175  0E1D                     	;# 
  2176  0E1E                     	;# 
  2177  0E1F                     	;# 
  2178  0E20                     	;# 
  2179  0E21                     	;# 
  2180  0E22                     	;# 
  2181  0E23                     	;# 
  2182  0E24                     	;# 
  2183  0E25                     	;# 
  2184  0E26                     	;# 
  2185  0E27                     	;# 
  2186  0E28                     	;# 
  2187  0E29                     	;# 
  2188  0E2A                     	;# 
  2189  0E2B                     	;# 
  2190  0E2C                     	;# 
  2191  0E2D                     	;# 
  2192  0E2E                     	;# 
  2193  0E2F                     	;# 
  2194  0E30                     	;# 
  2195  0E31                     	;# 
  2196  0E32                     	;# 
  2197  0E33                     	;# 
  2198  0E34                     	;# 
  2199  0E35                     	;# 
  2200  0E36                     	;# 
  2201  0E37                     	;# 
  2202  0E8F                     	;# 
  2203  0E90                     	;# 
  2204  0E91                     	;# 
  2205  0E92                     	;# 
  2206  0E93                     	;# 
  2207  0E94                     	;# 
  2208  0E95                     	;# 
  2209  0E96                     	;# 
  2210  0E97                     	;# 
  2211  0E9C                     	;# 
  2212  0E9D                     	;# 
  2213  0E9E                     	;# 
  2214  0EA1                     	;# 
  2215  0EA2                     	;# 
  2216  0EA3                     	;# 
  2217  0EA4                     	;# 
  2218  0EA5                     	;# 
  2219  0EA9                     	;# 
  2220  0EAA                     	;# 
  2221  0EAB                     	;# 
  2222  0EAC                     	;# 
  2223  0EB1                     	;# 
  2224  0EB2                     	;# 
  2225  0EB3                     	;# 
  2226  0EB8                     	;# 
  2227  0EB9                     	;# 
  2228  0EBA                     	;# 
  2229  0EBB                     	;# 
  2230  0EBC                     	;# 
  2231  0EBD                     	;# 
  2232  0EBE                     	;# 
  2233  0EC3                     	;# 
  2234  0EC5                     	;# 
  2235  0EC6                     	;# 
  2236  0EC7                     	;# 
  2237  0EC8                     	;# 
  2238  0EC9                     	;# 
  2239  0ECA                     	;# 
  2240  0ECB                     	;# 
  2241  0ECC                     	;# 
  2242  0F10                     	;# 
  2243  0F11                     	;# 
  2244  0F12                     	;# 
  2245  0F13                     	;# 
  2246  0F14                     	;# 
  2247  0F15                     	;# 
  2248  0F16                     	;# 
  2249  0F17                     	;# 
  2250  0F18                     	;# 
  2251  0F19                     	;# 
  2252  0F1A                     	;# 
  2253  0F1B                     	;# 
  2254  0F1C                     	;# 
  2255  0F1D                     	;# 
  2256  0F1E                     	;# 
  2257  0F1F                     	;# 
  2258  0F20                     	;# 
  2259  0F21                     	;# 
  2260  0F22                     	;# 
  2261  0F23                     	;# 
  2262  0F24                     	;# 
  2263  0F25                     	;# 
  2264  0F26                     	;# 
  2265  0F27                     	;# 
  2266  0F28                     	;# 
  2267  0F29                     	;# 
  2268  0F2A                     	;# 
  2269  0F2B                     	;# 
  2270  0F2C                     	;# 
  2271  0F2D                     	;# 
  2272  0F2E                     	;# 
  2273  0F2F                     	;# 
  2274  0F30                     	;# 
  2275  0F31                     	;# 
  2276  0F32                     	;# 
  2277  0F38                     	;# 
  2278  0F39                     	;# 
  2279  0F3A                     	;# 
  2280  0F3B                     	;# 
  2281  0F3C                     	;# 
  2282  0F3D                     	;# 
  2283  0F3E                     	;# 
  2284  0F3F                     	;# 
  2285  0F40                     	;# 
  2286  0F41                     	;# 
  2287  0F43                     	;# 
  2288  0F44                     	;# 
  2289  0F45                     	;# 
  2290  0F46                     	;# 
  2291  0F47                     	;# 
  2292  0F48                     	;# 
  2293  0F49                     	;# 
  2294  0F4A                     	;# 
  2295  0F4B                     	;# 
  2296  0F4C                     	;# 
  2297  0F4E                     	;# 
  2298  0F4F                     	;# 
  2299  0F50                     	;# 
  2300  0F51                     	;# 
  2301  0F52                     	;# 
  2302  0F53                     	;# 
  2303  0F54                     	;# 
  2304  0F55                     	;# 
  2305  0F56                     	;# 
  2306  0F57                     	;# 
  2307  0F59                     	;# 
  2308  0F5A                     	;# 
  2309  0F5B                     	;# 
  2310  0F5C                     	;# 
  2311  0F5D                     	;# 
  2312  0F61                     	;# 
  2313  0F62                     	;# 
  2314  0F64                     	;# 
  2315  0F65                     	;# 
  2316  0F66                     	;# 
  2317  0F67                     	;# 
  2318  0F68                     	;# 
  2319  0F69                     	;# 
  2320  0F6A                     	;# 
  2321  0F6B                     	;# 
  2322  0F6C                     	;# 
  2323  0F6D                     	;# 
  2324  0FE4                     	;# 
  2325  0FE5                     	;# 
  2326  0FE6                     	;# 
  2327  0FE7                     	;# 
  2328  0FE8                     	;# 
  2329  0FE9                     	;# 
  2330  0FEA                     	;# 
  2331  0FEB                     	;# 
  2332  0FED                     	;# 
  2333  0FEE                     	;# 
  2334  0FEF                     	;# 
  2335  0000                     	;# 
  2336  0001                     	;# 
  2337  0002                     	;# 
  2338  0003                     	;# 
  2339  0004                     	;# 
  2340  0005                     	;# 
  2341  0006                     	;# 
  2342  0007                     	;# 
  2343  0008                     	;# 
  2344  0009                     	;# 
  2345  000A                     	;# 
  2346  000B                     	;# 
  2347  000C                     	;# 
  2348  000D                     	;# 
  2349  000E                     	;# 
  2350  000F                     	;# 
  2351  0010                     	;# 
  2352  0011                     	;# 
  2353  0012                     	;# 
  2354  0013                     	;# 
  2355  0014                     	;# 
  2356  0015                     	;# 
  2357  0016                     	;# 
  2358  0017                     	;# 
  2359  0018                     	;# 
  2360  0019                     	;# 
  2361  001A                     	;# 
  2362  001C                     	;# 
  2363  001C                     	;# 
  2364  001D                     	;# 
  2365  001D                     	;# 
  2366  001E                     	;# 
  2367  001F                     	;# 
  2368  008C                     	;# 
  2369  008C                     	;# 
  2370  008D                     	;# 
  2371  008E                     	;# 
  2372  008E                     	;# 
  2373  008F                     	;# 
  2374  0090                     	;# 
  2375  0090                     	;# 
  2376  0091                     	;# 
  2377  0093                     	;# 
  2378  0094                     	;# 
  2379  0095                     	;# 
  2380  0096                     	;# 
  2381  0097                     	;# 
  2382  0098                     	;# 
  2383  0099                     	;# 
  2384  009A                     	;# 
  2385  009B                     	;# 
  2386  009C                     	;# 
  2387  009D                     	;# 
  2388  009E                     	;# 
  2389  010C                     	;# 
  2390  010D                     	;# 
  2391  010E                     	;# 
  2392  010E                     	;# 
  2393  010F                     	;# 
  2394  0110                     	;# 
  2395  0110                     	;# 
  2396  0111                     	;# 
  2397  0112                     	;# 
  2398  0112                     	;# 
  2399  0113                     	;# 
  2400  0114                     	;# 
  2401  0114                     	;# 
  2402  0115                     	;# 
  2403  0116                     	;# 
  2404  0116                     	;# 
  2405  0117                     	;# 
  2406  0119                     	;# 
  2407  0119                     	;# 
  2408  0119                     	;# 
  2409  011A                     	;# 
  2410  011A                     	;# 
  2411  011A                     	;# 
  2412  011B                     	;# 
  2413  011B                     	;# 
  2414  011B                     	;# 
  2415  011B                     	;# 
  2416  011B                     	;# 
  2417  011C                     	;# 
  2418  011C                     	;# 
  2419  011C                     	;# 
  2420  011D                     	;# 
  2421  011D                     	;# 
  2422  011D                     	;# 
  2423  011E                     	;# 
  2424  011E                     	;# 
  2425  011E                     	;# 
  2426  011F                     	;# 
  2427  011F                     	;# 
  2428  011F                     	;# 
  2429  011F                     	;# 
  2430  011F                     	;# 
  2431  018C                     	;# 
  2432  018D                     	;# 
  2433  018E                     	;# 
  2434  018F                     	;# 
  2435  0190                     	;# 
  2436  0191                     	;# 
  2437  0192                     	;# 
  2438  0196                     	;# 
  2439  0197                     	;# 
  2440  0198                     	;# 
  2441  0199                     	;# 
  2442  019A                     	;# 
  2443  019B                     	;# 
  2444  019C                     	;# 
  2445  020C                     	;# 
  2446  020C                     	;# 
  2447  020D                     	;# 
  2448  020E                     	;# 
  2449  020F                     	;# 
  2450  020F                     	;# 
  2451  0210                     	;# 
  2452  0210                     	;# 
  2453  0211                     	;# 
  2454  0211                     	;# 
  2455  0212                     	;# 
  2456  0212                     	;# 
  2457  0213                     	;# 
  2458  0214                     	;# 
  2459  0215                     	;# 
  2460  0215                     	;# 
  2461  0216                     	;# 
  2462  0216                     	;# 
  2463  0217                     	;# 
  2464  0217                     	;# 
  2465  0218                     	;# 
  2466  0218                     	;# 
  2467  0219                     	;# 
  2468  021A                     	;# 
  2469  021B                     	;# 
  2470  021B                     	;# 
  2471  021C                     	;# 
  2472  021C                     	;# 
  2473  021D                     	;# 
  2474  021D                     	;# 
  2475  021E                     	;# 
  2476  021F                     	;# 
  2477  028C                     	;# 
  2478  028C                     	;# 
  2479  028D                     	;# 
  2480  028D                     	;# 
  2481  028E                     	;# 
  2482  028F                     	;# 
  2483  0290                     	;# 
  2484  0290                     	;# 
  2485  0291                     	;# 
  2486  0292                     	;# 
  2487  0292                     	;# 
  2488  0293                     	;# 
  2489  0293                     	;# 
  2490  0294                     	;# 
  2491  0295                     	;# 
  2492  0296                     	;# 
  2493  0296                     	;# 
  2494  0297                     	;# 
  2495  0298                     	;# 
  2496  0298                     	;# 
  2497  0299                     	;# 
  2498  0299                     	;# 
  2499  029A                     	;# 
  2500  029B                     	;# 
  2501  029C                     	;# 
  2502  029C                     	;# 
  2503  029D                     	;# 
  2504  030C                     	;# 
  2505  030C                     	;# 
  2506  030D                     	;# 
  2507  030E                     	;# 
  2508  030F                     	;# 
  2509  0310                     	;# 
  2510  0310                     	;# 
  2511  0311                     	;# 
  2512  0312                     	;# 
  2513  0313                     	;# 
  2514  0314                     	;# 
  2515  0314                     	;# 
  2516  0315                     	;# 
  2517  0316                     	;# 
  2518  0317                     	;# 
  2519  0318                     	;# 
  2520  0318                     	;# 
  2521  0319                     	;# 
  2522  031A                     	;# 
  2523  031B                     	;# 
  2524  031C                     	;# 
  2525  031C                     	;# 
  2526  031D                     	;# 
  2527  031E                     	;# 
  2528  031F                     	;# 
  2529  038C                     	;# 
  2530  038C                     	;# 
  2531  038D                     	;# 
  2532  038E                     	;# 
  2533  0390                     	;# 
  2534  0390                     	;# 
  2535  0391                     	;# 
  2536  0392                     	;# 
  2537  040C                     	;# 
  2538  040D                     	;# 
  2539  040E                     	;# 
  2540  040F                     	;# 
  2541  0410                     	;# 
  2542  0411                     	;# 
  2543  0416                     	;# 
  2544  0416                     	;# 
  2545  0417                     	;# 
  2546  0418                     	;# 
  2547  0418                     	;# 
  2548  0419                     	;# 
  2549  041A                     	;# 
  2550  041A                     	;# 
  2551  041B                     	;# 
  2552  041C                     	;# 
  2553  041C                     	;# 
  2554  041D                     	;# 
  2555  041E                     	;# 
  2556  041F                     	;# 
  2557  048C                     	;# 
  2558  048C                     	;# 
  2559  048D                     	;# 
  2560  048E                     	;# 
  2561  048F                     	;# 
  2562  048F                     	;# 
  2563  0490                     	;# 
  2564  0491                     	;# 
  2565  0492                     	;# 
  2566  0492                     	;# 
  2567  0493                     	;# 
  2568  0494                     	;# 
  2569  0495                     	;# 
  2570  0495                     	;# 
  2571  0496                     	;# 
  2572  0497                     	;# 
  2573  0498                     	;# 
  2574  0499                     	;# 
  2575  049A                     	;# 
  2576  049B                     	;# 
  2577  049C                     	;# 
  2578  049D                     	;# 
  2579  050C                     	;# 
  2580  050C                     	;# 
  2581  050D                     	;# 
  2582  050E                     	;# 
  2583  050F                     	;# 
  2584  050F                     	;# 
  2585  0510                     	;# 
  2586  0511                     	;# 
  2587  0512                     	;# 
  2588  0512                     	;# 
  2589  0513                     	;# 
  2590  0514                     	;# 
  2591  0515                     	;# 
  2592  0515                     	;# 
  2593  0516                     	;# 
  2594  0517                     	;# 
  2595  0518                     	;# 
  2596  0519                     	;# 
  2597  051A                     	;# 
  2598  051B                     	;# 
  2599  051C                     	;# 
  2600  051D                     	;# 
  2601  058C                     	;# 
  2602  058C                     	;# 
  2603  058D                     	;# 
  2604  058E                     	;# 
  2605  058F                     	;# 
  2606  058F                     	;# 
  2607  0590                     	;# 
  2608  0591                     	;# 
  2609  0592                     	;# 
  2610  0593                     	;# 
  2611  060C                     	;# 
  2612  060D                     	;# 
  2613  060E                     	;# 
  2614  060F                     	;# 
  2615  0610                     	;# 
  2616  0611                     	;# 
  2617  0612                     	;# 
  2618  0613                     	;# 
  2619  0614                     	;# 
  2620  0616                     	;# 
  2621  0617                     	;# 
  2622  0618                     	;# 
  2623  0619                     	;# 
  2624  061A                     	;# 
  2625  061B                     	;# 
  2626  061C                     	;# 
  2627  061D                     	;# 
  2628  061E                     	;# 
  2629  068C                     	;# 
  2630  068D                     	;# 
  2631  068E                     	;# 
  2632  068F                     	;# 
  2633  0690                     	;# 
  2634  0691                     	;# 
  2635  0692                     	;# 
  2636  0693                     	;# 
  2637  0694                     	;# 
  2638  070C                     	;# 
  2639  070D                     	;# 
  2640  070E                     	;# 
  2641  070F                     	;# 
  2642  0710                     	;# 
  2643  0711                     	;# 
  2644  0712                     	;# 
  2645  0713                     	;# 
  2646  0714                     	;# 
  2647  0716                     	;# 
  2648  0717                     	;# 
  2649  0718                     	;# 
  2650  0719                     	;# 
  2651  071A                     	;# 
  2652  071B                     	;# 
  2653  071C                     	;# 
  2654  071D                     	;# 
  2655  071E                     	;# 
  2656  0796                     	;# 
  2657  0797                     	;# 
  2658  0798                     	;# 
  2659  0799                     	;# 
  2660  079A                     	;# 
  2661  079B                     	;# 
  2662  080C                     	;# 
  2663  080D                     	;# 
  2664  080E                     	;# 
  2665  080F                     	;# 
  2666  0810                     	;# 
  2667  0811                     	;# 
  2668  0812                     	;# 
  2669  0813                     	;# 
  2670  0814                     	;# 
  2671  081A                     	;# 
  2672  081B                     	;# 
  2673  081C                     	;# 
  2674  081D                     	;# 
  2675  081E                     	;# 
  2676  081F                     	;# 
  2677  088C                     	;# 
  2678  088D                     	;# 
  2679  088E                     	;# 
  2680  088F                     	;# 
  2681  0890                     	;# 
  2682  0891                     	;# 
  2683  0892                     	;# 
  2684  0893                     	;# 
  2685  0895                     	;# 
  2686  0896                     	;# 
  2687  0897                     	;# 
  2688  0898                     	;# 
  2689  0899                     	;# 
  2690  089A                     	;# 
  2691  089B                     	;# 
  2692  090C                     	;# 
  2693  090E                     	;# 
  2694  090F                     	;# 
  2695  091F                     	;# 
  2696  091F                     	;# 
  2697  098F                     	;# 
  2698  098F                     	;# 
  2699  0990                     	;# 
  2700  0991                     	;# 
  2701  0992                     	;# 
  2702  0993                     	;# 
  2703  0994                     	;# 
  2704  0995                     	;# 
  2705  0996                     	;# 
  2706  0997                     	;# 
  2707  0E0F                     	;# 
  2708  0E10                     	;# 
  2709  0E11                     	;# 
  2710  0E12                     	;# 
  2711  0E13                     	;# 
  2712  0E14                     	;# 
  2713  0E15                     	;# 
  2714  0E16                     	;# 
  2715  0E17                     	;# 
  2716  0E18                     	;# 
  2717  0E19                     	;# 
  2718  0E1A                     	;# 
  2719  0E1B                     	;# 
  2720  0E1C                     	;# 
  2721  0E1D                     	;# 
  2722  0E1E                     	;# 
  2723  0E1F                     	;# 
  2724  0E20                     	;# 
  2725  0E21                     	;# 
  2726  0E22                     	;# 
  2727  0E23                     	;# 
  2728  0E24                     	;# 
  2729  0E25                     	;# 
  2730  0E26                     	;# 
  2731  0E27                     	;# 
  2732  0E28                     	;# 
  2733  0E29                     	;# 
  2734  0E2A                     	;# 
  2735  0E2B                     	;# 
  2736  0E2C                     	;# 
  2737  0E2D                     	;# 
  2738  0E2E                     	;# 
  2739  0E2F                     	;# 
  2740  0E30                     	;# 
  2741  0E31                     	;# 
  2742  0E32                     	;# 
  2743  0E33                     	;# 
  2744  0E34                     	;# 
  2745  0E35                     	;# 
  2746  0E36                     	;# 
  2747  0E37                     	;# 
  2748  0E8F                     	;# 
  2749  0E90                     	;# 
  2750  0E91                     	;# 
  2751  0E92                     	;# 
  2752  0E93                     	;# 
  2753  0E94                     	;# 
  2754  0E95                     	;# 
  2755  0E96                     	;# 
  2756  0E97                     	;# 
  2757  0E9C                     	;# 
  2758  0E9D                     	;# 
  2759  0E9E                     	;# 
  2760  0EA1                     	;# 
  2761  0EA2                     	;# 
  2762  0EA3                     	;# 
  2763  0EA4                     	;# 
  2764  0EA5                     	;# 
  2765  0EA9                     	;# 
  2766  0EAA                     	;# 
  2767  0EAB                     	;# 
  2768  0EAC                     	;# 
  2769  0EB1                     	;# 
  2770  0EB2                     	;# 
  2771  0EB3                     	;# 
  2772  0EB8                     	;# 
  2773  0EB9                     	;# 
  2774  0EBA                     	;# 
  2775  0EBB                     	;# 
  2776  0EBC                     	;# 
  2777  0EBD                     	;# 
  2778  0EBE                     	;# 
  2779  0EC3                     	;# 
  2780  0EC5                     	;# 
  2781  0EC6                     	;# 
  2782  0EC7                     	;# 
  2783  0EC8                     	;# 
  2784  0EC9                     	;# 
  2785  0ECA                     	;# 
  2786  0ECB                     	;# 
  2787  0ECC                     	;# 
  2788  0F10                     	;# 
  2789  0F11                     	;# 
  2790  0F12                     	;# 
  2791  0F13                     	;# 
  2792  0F14                     	;# 
  2793  0F15                     	;# 
  2794  0F16                     	;# 
  2795  0F17                     	;# 
  2796  0F18                     	;# 
  2797  0F19                     	;# 
  2798  0F1A                     	;# 
  2799  0F1B                     	;# 
  2800  0F1C                     	;# 
  2801  0F1D                     	;# 
  2802  0F1E                     	;# 
  2803  0F1F                     	;# 
  2804  0F20                     	;# 
  2805  0F21                     	;# 
  2806  0F22                     	;# 
  2807  0F23                     	;# 
  2808  0F24                     	;# 
  2809  0F25                     	;# 
  2810  0F26                     	;# 
  2811  0F27                     	;# 
  2812  0F28                     	;# 
  2813  0F29                     	;# 
  2814  0F2A                     	;# 
  2815  0F2B                     	;# 
  2816  0F2C                     	;# 
  2817  0F2D                     	;# 
  2818  0F2E                     	;# 
  2819  0F2F                     	;# 
  2820  0F30                     	;# 
  2821  0F31                     	;# 
  2822  0F32                     	;# 
  2823  0F38                     	;# 
  2824  0F39                     	;# 
  2825  0F3A                     	;# 
  2826  0F3B                     	;# 
  2827  0F3C                     	;# 
  2828  0F3D                     	;# 
  2829  0F3E                     	;# 
  2830  0F3F                     	;# 
  2831  0F40                     	;# 
  2832  0F41                     	;# 
  2833  0F43                     	;# 
  2834  0F44                     	;# 
  2835  0F45                     	;# 
  2836  0F46                     	;# 
  2837  0F47                     	;# 
  2838  0F48                     	;# 
  2839  0F49                     	;# 
  2840  0F4A                     	;# 
  2841  0F4B                     	;# 
  2842  0F4C                     	;# 
  2843  0F4E                     	;# 
  2844  0F4F                     	;# 
  2845  0F50                     	;# 
  2846  0F51                     	;# 
  2847  0F52                     	;# 
  2848  0F53                     	;# 
  2849  0F54                     	;# 
  2850  0F55                     	;# 
  2851  0F56                     	;# 
  2852  0F57                     	;# 
  2853  0F59                     	;# 
  2854  0F5A                     	;# 
  2855  0F5B                     	;# 
  2856  0F5C                     	;# 
  2857  0F5D                     	;# 
  2858  0F61                     	;# 
  2859  0F62                     	;# 
  2860  0F64                     	;# 
  2861  0F65                     	;# 
  2862  0F66                     	;# 
  2863  0F67                     	;# 
  2864  0F68                     	;# 
  2865  0F69                     	;# 
  2866  0F6A                     	;# 
  2867  0F6B                     	;# 
  2868  0F6C                     	;# 
  2869  0F6D                     	;# 
  2870  0FE4                     	;# 
  2871  0FE5                     	;# 
  2872  0FE6                     	;# 
  2873  0FE7                     	;# 
  2874  0FE8                     	;# 
  2875  0FE9                     	;# 
  2876  0FEA                     	;# 
  2877  0FEB                     	;# 
  2878  0FED                     	;# 
  2879  0FEE                     	;# 
  2880  0FEF                     	;# 
  2881  0000                     	;# 
  2882  0001                     	;# 
  2883  0002                     	;# 
  2884  0003                     	;# 
  2885  0004                     	;# 
  2886  0005                     	;# 
  2887  0006                     	;# 
  2888  0007                     	;# 
  2889  0008                     	;# 
  2890  0009                     	;# 
  2891  000A                     	;# 
  2892  000B                     	;# 
  2893  000C                     	;# 
  2894  000D                     	;# 
  2895  000E                     	;# 
  2896  000F                     	;# 
  2897  0010                     	;# 
  2898  0011                     	;# 
  2899  0012                     	;# 
  2900  0013                     	;# 
  2901  0014                     	;# 
  2902  0015                     	;# 
  2903  0016                     	;# 
  2904  0017                     	;# 
  2905  0018                     	;# 
  2906  0019                     	;# 
  2907  001A                     	;# 
  2908  001C                     	;# 
  2909  001C                     	;# 
  2910  001D                     	;# 
  2911  001D                     	;# 
  2912  001E                     	;# 
  2913  001F                     	;# 
  2914  008C                     	;# 
  2915  008C                     	;# 
  2916  008D                     	;# 
  2917  008E                     	;# 
  2918  008E                     	;# 
  2919  008F                     	;# 
  2920  0090                     	;# 
  2921  0090                     	;# 
  2922  0091                     	;# 
  2923  0093                     	;# 
  2924  0094                     	;# 
  2925  0095                     	;# 
  2926  0096                     	;# 
  2927  0097                     	;# 
  2928  0098                     	;# 
  2929  0099                     	;# 
  2930  009A                     	;# 
  2931  009B                     	;# 
  2932  009C                     	;# 
  2933  009D                     	;# 
  2934  009E                     	;# 
  2935  010C                     	;# 
  2936  010D                     	;# 
  2937  010E                     	;# 
  2938  010E                     	;# 
  2939  010F                     	;# 
  2940  0110                     	;# 
  2941  0110                     	;# 
  2942  0111                     	;# 
  2943  0112                     	;# 
  2944  0112                     	;# 
  2945  0113                     	;# 
  2946  0114                     	;# 
  2947  0114                     	;# 
  2948  0115                     	;# 
  2949  0116                     	;# 
  2950  0116                     	;# 
  2951  0117                     	;# 
  2952  0119                     	;# 
  2953  0119                     	;# 
  2954  0119                     	;# 
  2955  011A                     	;# 
  2956  011A                     	;# 
  2957  011A                     	;# 
  2958  011B                     	;# 
  2959  011B                     	;# 
  2960  011B                     	;# 
  2961  011B                     	;# 
  2962  011B                     	;# 
  2963  011C                     	;# 
  2964  011C                     	;# 
  2965  011C                     	;# 
  2966  011D                     	;# 
  2967  011D                     	;# 
  2968  011D                     	;# 
  2969  011E                     	;# 
  2970  011E                     	;# 
  2971  011E                     	;# 
  2972  011F                     	;# 
  2973  011F                     	;# 
  2974  011F                     	;# 
  2975  011F                     	;# 
  2976  011F                     	;# 
  2977  018C                     	;# 
  2978  018D                     	;# 
  2979  018E                     	;# 
  2980  018F                     	;# 
  2981  0190                     	;# 
  2982  0191                     	;# 
  2983  0192                     	;# 
  2984  0196                     	;# 
  2985  0197                     	;# 
  2986  0198                     	;# 
  2987  0199                     	;# 
  2988  019A                     	;# 
  2989  019B                     	;# 
  2990  019C                     	;# 
  2991  020C                     	;# 
  2992  020C                     	;# 
  2993  020D                     	;# 
  2994  020E                     	;# 
  2995  020F                     	;# 
  2996  020F                     	;# 
  2997  0210                     	;# 
  2998  0210                     	;# 
  2999  0211                     	;# 
  3000  0211                     	;# 
  3001  0212                     	;# 
  3002  0212                     	;# 
  3003  0213                     	;# 
  3004  0214                     	;# 
  3005  0215                     	;# 
  3006  0215                     	;# 
  3007  0216                     	;# 
  3008  0216                     	;# 
  3009  0217                     	;# 
  3010  0217                     	;# 
  3011  0218                     	;# 
  3012  0218                     	;# 
  3013  0219                     	;# 
  3014  021A                     	;# 
  3015  021B                     	;# 
  3016  021B                     	;# 
  3017  021C                     	;# 
  3018  021C                     	;# 
  3019  021D                     	;# 
  3020  021D                     	;# 
  3021  021E                     	;# 
  3022  021F                     	;# 
  3023  028C                     	;# 
  3024  028C                     	;# 
  3025  028D                     	;# 
  3026  028D                     	;# 
  3027  028E                     	;# 
  3028  028F                     	;# 
  3029  0290                     	;# 
  3030  0290                     	;# 
  3031  0291                     	;# 
  3032  0292                     	;# 
  3033  0292                     	;# 
  3034  0293                     	;# 
  3035  0293                     	;# 
  3036  0294                     	;# 
  3037  0295                     	;# 
  3038  0296                     	;# 
  3039  0296                     	;# 
  3040  0297                     	;# 
  3041  0298                     	;# 
  3042  0298                     	;# 
  3043  0299                     	;# 
  3044  0299                     	;# 
  3045  029A                     	;# 
  3046  029B                     	;# 
  3047  029C                     	;# 
  3048  029C                     	;# 
  3049  029D                     	;# 
  3050  030C                     	;# 
  3051  030C                     	;# 
  3052  030D                     	;# 
  3053  030E                     	;# 
  3054  030F                     	;# 
  3055  0310                     	;# 
  3056  0310                     	;# 
  3057  0311                     	;# 
  3058  0312                     	;# 
  3059  0313                     	;# 
  3060  0314                     	;# 
  3061  0314                     	;# 
  3062  0315                     	;# 
  3063  0316                     	;# 
  3064  0317                     	;# 
  3065  0318                     	;# 
  3066  0318                     	;# 
  3067  0319                     	;# 
  3068  031A                     	;# 
  3069  031B                     	;# 
  3070  031C                     	;# 
  3071  031C                     	;# 
  3072  031D                     	;# 
  3073  031E                     	;# 
  3074  031F                     	;# 
  3075  038C                     	;# 
  3076  038C                     	;# 
  3077  038D                     	;# 
  3078  038E                     	;# 
  3079  0390                     	;# 
  3080  0390                     	;# 
  3081  0391                     	;# 
  3082  0392                     	;# 
  3083  040C                     	;# 
  3084  040D                     	;# 
  3085  040E                     	;# 
  3086  040F                     	;# 
  3087  0410                     	;# 
  3088  0411                     	;# 
  3089  0416                     	;# 
  3090  0416                     	;# 
  3091  0417                     	;# 
  3092  0418                     	;# 
  3093  0418                     	;# 
  3094  0419                     	;# 
  3095  041A                     	;# 
  3096  041A                     	;# 
  3097  041B                     	;# 
  3098  041C                     	;# 
  3099  041C                     	;# 
  3100  041D                     	;# 
  3101  041E                     	;# 
  3102  041F                     	;# 
  3103  048C                     	;# 
  3104  048C                     	;# 
  3105  048D                     	;# 
  3106  048E                     	;# 
  3107  048F                     	;# 
  3108  048F                     	;# 
  3109  0490                     	;# 
  3110  0491                     	;# 
  3111  0492                     	;# 
  3112  0492                     	;# 
  3113  0493                     	;# 
  3114  0494                     	;# 
  3115  0495                     	;# 
  3116  0495                     	;# 
  3117  0496                     	;# 
  3118  0497                     	;# 
  3119  0498                     	;# 
  3120  0499                     	;# 
  3121  049A                     	;# 
  3122  049B                     	;# 
  3123  049C                     	;# 
  3124  049D                     	;# 
  3125  050C                     	;# 
  3126  050C                     	;# 
  3127  050D                     	;# 
  3128  050E                     	;# 
  3129  050F                     	;# 
  3130  050F                     	;# 
  3131  0510                     	;# 
  3132  0511                     	;# 
  3133  0512                     	;# 
  3134  0512                     	;# 
  3135  0513                     	;# 
  3136  0514                     	;# 
  3137  0515                     	;# 
  3138  0515                     	;# 
  3139  0516                     	;# 
  3140  0517                     	;# 
  3141  0518                     	;# 
  3142  0519                     	;# 
  3143  051A                     	;# 
  3144  051B                     	;# 
  3145  051C                     	;# 
  3146  051D                     	;# 
  3147  058C                     	;# 
  3148  058C                     	;# 
  3149  058D                     	;# 
  3150  058E                     	;# 
  3151  058F                     	;# 
  3152  058F                     	;# 
  3153  0590                     	;# 
  3154  0591                     	;# 
  3155  0592                     	;# 
  3156  0593                     	;# 
  3157  060C                     	;# 
  3158  060D                     	;# 
  3159  060E                     	;# 
  3160  060F                     	;# 
  3161  0610                     	;# 
  3162  0611                     	;# 
  3163  0612                     	;# 
  3164  0613                     	;# 
  3165  0614                     	;# 
  3166  0616                     	;# 
  3167  0617                     	;# 
  3168  0618                     	;# 
  3169  0619                     	;# 
  3170  061A                     	;# 
  3171  061B                     	;# 
  3172  061C                     	;# 
  3173  061D                     	;# 
  3174  061E                     	;# 
  3175  068C                     	;# 
  3176  068D                     	;# 
  3177  068E                     	;# 
  3178  068F                     	;# 
  3179  0690                     	;# 
  3180  0691                     	;# 
  3181  0692                     	;# 
  3182  0693                     	;# 
  3183  0694                     	;# 
  3184  070C                     	;# 
  3185  070D                     	;# 
  3186  070E                     	;# 
  3187  070F                     	;# 
  3188  0710                     	;# 
  3189  0711                     	;# 
  3190  0712                     	;# 
  3191  0713                     	;# 
  3192  0714                     	;# 
  3193  0716                     	;# 
  3194  0717                     	;# 
  3195  0718                     	;# 
  3196  0719                     	;# 
  3197  071A                     	;# 
  3198  071B                     	;# 
  3199  071C                     	;# 
  3200  071D                     	;# 
  3201  071E                     	;# 
  3202  0796                     	;# 
  3203  0797                     	;# 
  3204  0798                     	;# 
  3205  0799                     	;# 
  3206  079A                     	;# 
  3207  079B                     	;# 
  3208  080C                     	;# 
  3209  080D                     	;# 
  3210  080E                     	;# 
  3211  080F                     	;# 
  3212  0810                     	;# 
  3213  0811                     	;# 
  3214  0812                     	;# 
  3215  0813                     	;# 
  3216  0814                     	;# 
  3217  081A                     	;# 
  3218  081B                     	;# 
  3219  081C                     	;# 
  3220  081D                     	;# 
  3221  081E                     	;# 
  3222  081F                     	;# 
  3223  088C                     	;# 
  3224  088D                     	;# 
  3225  088E                     	;# 
  3226  088F                     	;# 
  3227  0890                     	;# 
  3228  0891                     	;# 
  3229  0892                     	;# 
  3230  0893                     	;# 
  3231  0895                     	;# 
  3232  0896                     	;# 
  3233  0897                     	;# 
  3234  0898                     	;# 
  3235  0899                     	;# 
  3236  089A                     	;# 
  3237  089B                     	;# 
  3238  090C                     	;# 
  3239  090E                     	;# 
  3240  090F                     	;# 
  3241  091F                     	;# 
  3242  091F                     	;# 
  3243  098F                     	;# 
  3244  098F                     	;# 
  3245  0990                     	;# 
  3246  0991                     	;# 
  3247  0992                     	;# 
  3248  0993                     	;# 
  3249  0994                     	;# 
  3250  0995                     	;# 
  3251  0996                     	;# 
  3252  0997                     	;# 
  3253  0E0F                     	;# 
  3254  0E10                     	;# 
  3255  0E11                     	;# 
  3256  0E12                     	;# 
  3257  0E13                     	;# 
  3258  0E14                     	;# 
  3259  0E15                     	;# 
  3260  0E16                     	;# 
  3261  0E17                     	;# 
  3262  0E18                     	;# 
  3263  0E19                     	;# 
  3264  0E1A                     	;# 
  3265  0E1B                     	;# 
  3266  0E1C                     	;# 
  3267  0E1D                     	;# 
  3268  0E1E                     	;# 
  3269  0E1F                     	;# 
  3270  0E20                     	;# 
  3271  0E21                     	;# 
  3272  0E22                     	;# 
  3273  0E23                     	;# 
  3274  0E24                     	;# 
  3275  0E25                     	;# 
  3276  0E26                     	;# 
  3277  0E27                     	;# 
  3278  0E28                     	;# 
  3279  0E29                     	;# 
  3280  0E2A                     	;# 
  3281  0E2B                     	;# 
  3282  0E2C                     	;# 
  3283  0E2D                     	;# 
  3284  0E2E                     	;# 
  3285  0E2F                     	;# 
  3286  0E30                     	;# 
  3287  0E31                     	;# 
  3288  0E32                     	;# 
  3289  0E33                     	;# 
  3290  0E34                     	;# 
  3291  0E35                     	;# 
  3292  0E36                     	;# 
  3293  0E37                     	;# 
  3294  0E8F                     	;# 
  3295  0E90                     	;# 
  3296  0E91                     	;# 
  3297  0E92                     	;# 
  3298  0E93                     	;# 
  3299  0E94                     	;# 
  3300  0E95                     	;# 
  3301  0E96                     	;# 
  3302  0E97                     	;# 
  3303  0E9C                     	;# 
  3304  0E9D                     	;# 
  3305  0E9E                     	;# 
  3306  0EA1                     	;# 
  3307  0EA2                     	;# 
  3308  0EA3                     	;# 
  3309  0EA4                     	;# 
  3310  0EA5                     	;# 
  3311  0EA9                     	;# 
  3312  0EAA                     	;# 
  3313  0EAB                     	;# 
  3314  0EAC                     	;# 
  3315  0EB1                     	;# 
  3316  0EB2                     	;# 
  3317  0EB3                     	;# 
  3318  0EB8                     	;# 
  3319  0EB9                     	;# 
  3320  0EBA                     	;# 
  3321  0EBB                     	;# 
  3322  0EBC                     	;# 
  3323  0EBD                     	;# 
  3324  0EBE                     	;# 
  3325  0EC3                     	;# 
  3326  0EC5                     	;# 
  3327  0EC6                     	;# 
  3328  0EC7                     	;# 
  3329  0EC8                     	;# 
  3330  0EC9                     	;# 
  3331  0ECA                     	;# 
  3332  0ECB                     	;# 
  3333  0ECC                     	;# 
  3334  0F10                     	;# 
  3335  0F11                     	;# 
  3336  0F12                     	;# 
  3337  0F13                     	;# 
  3338  0F14                     	;# 
  3339  0F15                     	;# 
  3340  0F16                     	;# 
  3341  0F17                     	;# 
  3342  0F18                     	;# 
  3343  0F19                     	;# 
  3344  0F1A                     	;# 
  3345  0F1B                     	;# 
  3346  0F1C                     	;# 
  3347  0F1D                     	;# 
  3348  0F1E                     	;# 
  3349  0F1F                     	;# 
  3350  0F20                     	;# 
  3351  0F21                     	;# 
  3352  0F22                     	;# 
  3353  0F23                     	;# 
  3354  0F24                     	;# 
  3355  0F25                     	;# 
  3356  0F26                     	;# 
  3357  0F27                     	;# 
  3358  0F28                     	;# 
  3359  0F29                     	;# 
  3360  0F2A                     	;# 
  3361  0F2B                     	;# 
  3362  0F2C                     	;# 
  3363  0F2D                     	;# 
  3364  0F2E                     	;# 
  3365  0F2F                     	;# 
  3366  0F30                     	;# 
  3367  0F31                     	;# 
  3368  0F32                     	;# 
  3369  0F38                     	;# 
  3370  0F39                     	;# 
  3371  0F3A                     	;# 
  3372  0F3B                     	;# 
  3373  0F3C                     	;# 
  3374  0F3D                     	;# 
  3375  0F3E                     	;# 
  3376  0F3F                     	;# 
  3377  0F40                     	;# 
  3378  0F41                     	;# 
  3379  0F43                     	;# 
  3380  0F44                     	;# 
  3381  0F45                     	;# 
  3382  0F46                     	;# 
  3383  0F47                     	;# 
  3384  0F48                     	;# 
  3385  0F49                     	;# 
  3386  0F4A                     	;# 
  3387  0F4B                     	;# 
  3388  0F4C                     	;# 
  3389  0F4E                     	;# 
  3390  0F4F                     	;# 
  3391  0F50                     	;# 
  3392  0F51                     	;# 
  3393  0F52                     	;# 
  3394  0F53                     	;# 
  3395  0F54                     	;# 
  3396  0F55                     	;# 
  3397  0F56                     	;# 
  3398  0F57                     	;# 
  3399  0F59                     	;# 
  3400  0F5A                     	;# 
  3401  0F5B                     	;# 
  3402  0F5C                     	;# 
  3403  0F5D                     	;# 
  3404  0F61                     	;# 
  3405  0F62                     	;# 
  3406  0F64                     	;# 
  3407  0F65                     	;# 
  3408  0F66                     	;# 
  3409  0F67                     	;# 
  3410  0F68                     	;# 
  3411  0F69                     	;# 
  3412  0F6A                     	;# 
  3413  0F6B                     	;# 
  3414  0F6C                     	;# 
  3415  0F6D                     	;# 
  3416  0FE4                     	;# 
  3417  0FE5                     	;# 
  3418  0FE6                     	;# 
  3419  0FE7                     	;# 
  3420  0FE8                     	;# 
  3421  0FE9                     	;# 
  3422  0FEA                     	;# 
  3423  0FEB                     	;# 
  3424  0FED                     	;# 
  3425  0FEE                     	;# 
  3426  0FEF                     	;# 
  3427  0000                     	;# 
  3428  0001                     	;# 
  3429  0002                     	;# 
  3430  0003                     	;# 
  3431  0004                     	;# 
  3432  0005                     	;# 
  3433  0006                     	;# 
  3434  0007                     	;# 
  3435  0008                     	;# 
  3436  0009                     	;# 
  3437  000A                     	;# 
  3438  000B                     	;# 
  3439  000C                     	;# 
  3440  000D                     	;# 
  3441  000E                     	;# 
  3442  000F                     	;# 
  3443  0010                     	;# 
  3444  0011                     	;# 
  3445  0012                     	;# 
  3446  0013                     	;# 
  3447  0014                     	;# 
  3448  0015                     	;# 
  3449  0016                     	;# 
  3450  0017                     	;# 
  3451  0018                     	;# 
  3452  0019                     	;# 
  3453  001A                     	;# 
  3454  001C                     	;# 
  3455  001C                     	;# 
  3456  001D                     	;# 
  3457  001D                     	;# 
  3458  001E                     	;# 
  3459  001F                     	;# 
  3460  008C                     	;# 
  3461  008C                     	;# 
  3462  008D                     	;# 
  3463  008E                     	;# 
  3464  008E                     	;# 
  3465  008F                     	;# 
  3466  0090                     	;# 
  3467  0090                     	;# 
  3468  0091                     	;# 
  3469  0093                     	;# 
  3470  0094                     	;# 
  3471  0095                     	;# 
  3472  0096                     	;# 
  3473  0097                     	;# 
  3474  0098                     	;# 
  3475  0099                     	;# 
  3476  009A                     	;# 
  3477  009B                     	;# 
  3478  009C                     	;# 
  3479  009D                     	;# 
  3480  009E                     	;# 
  3481  010C                     	;# 
  3482  010D                     	;# 
  3483  010E                     	;# 
  3484  010E                     	;# 
  3485  010F                     	;# 
  3486  0110                     	;# 
  3487  0110                     	;# 
  3488  0111                     	;# 
  3489  0112                     	;# 
  3490  0112                     	;# 
  3491  0113                     	;# 
  3492  0114                     	;# 
  3493  0114                     	;# 
  3494  0115                     	;# 
  3495  0116                     	;# 
  3496  0116                     	;# 
  3497  0117                     	;# 
  3498  0119                     	;# 
  3499  0119                     	;# 
  3500  0119                     	;# 
  3501  011A                     	;# 
  3502  011A                     	;# 
  3503  011A                     	;# 
  3504  011B                     	;# 
  3505  011B                     	;# 
  3506  011B                     	;# 
  3507  011B                     	;# 
  3508  011B                     	;# 
  3509  011C                     	;# 
  3510  011C                     	;# 
  3511  011C                     	;# 
  3512  011D                     	;# 
  3513  011D                     	;# 
  3514  011D                     	;# 
  3515  011E                     	;# 
  3516  011E                     	;# 
  3517  011E                     	;# 
  3518  011F                     	;# 
  3519  011F                     	;# 
  3520  011F                     	;# 
  3521  011F                     	;# 
  3522  011F                     	;# 
  3523  018C                     	;# 
  3524  018D                     	;# 
  3525  018E                     	;# 
  3526  018F                     	;# 
  3527  0190                     	;# 
  3528  0191                     	;# 
  3529  0192                     	;# 
  3530  0196                     	;# 
  3531  0197                     	;# 
  3532  0198                     	;# 
  3533  0199                     	;# 
  3534  019A                     	;# 
  3535  019B                     	;# 
  3536  019C                     	;# 
  3537  020C                     	;# 
  3538  020C                     	;# 
  3539  020D                     	;# 
  3540  020E                     	;# 
  3541  020F                     	;# 
  3542  020F                     	;# 
  3543  0210                     	;# 
  3544  0210                     	;# 
  3545  0211                     	;# 
  3546  0211                     	;# 
  3547  0212                     	;# 
  3548  0212                     	;# 
  3549  0213                     	;# 
  3550  0214                     	;# 
  3551  0215                     	;# 
  3552  0215                     	;# 
  3553  0216                     	;# 
  3554  0216                     	;# 
  3555  0217                     	;# 
  3556  0217                     	;# 
  3557  0218                     	;# 
  3558  0218                     	;# 
  3559  0219                     	;# 
  3560  021A                     	;# 
  3561  021B                     	;# 
  3562  021B                     	;# 
  3563  021C                     	;# 
  3564  021C                     	;# 
  3565  021D                     	;# 
  3566  021D                     	;# 
  3567  021E                     	;# 
  3568  021F                     	;# 
  3569  028C                     	;# 
  3570  028C                     	;# 
  3571  028D                     	;# 
  3572  028D                     	;# 
  3573  028E                     	;# 
  3574  028F                     	;# 
  3575  0290                     	;# 
  3576  0290                     	;# 
  3577  0291                     	;# 
  3578  0292                     	;# 
  3579  0292                     	;# 
  3580  0293                     	;# 
  3581  0293                     	;# 
  3582  0294                     	;# 
  3583  0295                     	;# 
  3584  0296                     	;# 
  3585  0296                     	;# 
  3586  0297                     	;# 
  3587  0298                     	;# 
  3588  0298                     	;# 
  3589  0299                     	;# 
  3590  0299                     	;# 
  3591  029A                     	;# 
  3592  029B                     	;# 
  3593  029C                     	;# 
  3594  029C                     	;# 
  3595  029D                     	;# 
  3596  030C                     	;# 
  3597  030C                     	;# 
  3598  030D                     	;# 
  3599  030E                     	;# 
  3600  030F                     	;# 
  3601  0310                     	;# 
  3602  0310                     	;# 
  3603  0311                     	;# 
  3604  0312                     	;# 
  3605  0313                     	;# 
  3606  0314                     	;# 
  3607  0314                     	;# 
  3608  0315                     	;# 
  3609  0316                     	;# 
  3610  0317                     	;# 
  3611  0318                     	;# 
  3612  0318                     	;# 
  3613  0319                     	;# 
  3614  031A                     	;# 
  3615  031B                     	;# 
  3616  031C                     	;# 
  3617  031C                     	;# 
  3618  031D                     	;# 
  3619  031E                     	;# 
  3620  031F                     	;# 
  3621  038C                     	;# 
  3622  038C                     	;# 
  3623  038D                     	;# 
  3624  038E                     	;# 
  3625  0390                     	;# 
  3626  0390                     	;# 
  3627  0391                     	;# 
  3628  0392                     	;# 
  3629  040C                     	;# 
  3630  040D                     	;# 
  3631  040E                     	;# 
  3632  040F                     	;# 
  3633  0410                     	;# 
  3634  0411                     	;# 
  3635  0416                     	;# 
  3636  0416                     	;# 
  3637  0417                     	;# 
  3638  0418                     	;# 
  3639  0418                     	;# 
  3640  0419                     	;# 
  3641  041A                     	;# 
  3642  041A                     	;# 
  3643  041B                     	;# 
  3644  041C                     	;# 
  3645  041C                     	;# 
  3646  041D                     	;# 
  3647  041E                     	;# 
  3648  041F                     	;# 
  3649  048C                     	;# 
  3650  048C                     	;# 
  3651  048D                     	;# 
  3652  048E                     	;# 
  3653  048F                     	;# 
  3654  048F                     	;# 
  3655  0490                     	;# 
  3656  0491                     	;# 
  3657  0492                     	;# 
  3658  0492                     	;# 
  3659  0493                     	;# 
  3660  0494                     	;# 
  3661  0495                     	;# 
  3662  0495                     	;# 
  3663  0496                     	;# 
  3664  0497                     	;# 
  3665  0498                     	;# 
  3666  0499                     	;# 
  3667  049A                     	;# 
  3668  049B                     	;# 
  3669  049C                     	;# 
  3670  049D                     	;# 
  3671  050C                     	;# 
  3672  050C                     	;# 
  3673  050D                     	;# 
  3674  050E                     	;# 
  3675  050F                     	;# 
  3676  050F                     	;# 
  3677  0510                     	;# 
  3678  0511                     	;# 
  3679  0512                     	;# 
  3680  0512                     	;# 
  3681  0513                     	;# 
  3682  0514                     	;# 
  3683  0515                     	;# 
  3684  0515                     	;# 
  3685  0516                     	;# 
  3686  0517                     	;# 
  3687  0518                     	;# 
  3688  0519                     	;# 
  3689  051A                     	;# 
  3690  051B                     	;# 
  3691  051C                     	;# 
  3692  051D                     	;# 
  3693  058C                     	;# 
  3694  058C                     	;# 
  3695  058D                     	;# 
  3696  058E                     	;# 
  3697  058F                     	;# 
  3698  058F                     	;# 
  3699  0590                     	;# 
  3700  0591                     	;# 
  3701  0592                     	;# 
  3702  0593                     	;# 
  3703  060C                     	;# 
  3704  060D                     	;# 
  3705  060E                     	;# 
  3706  060F                     	;# 
  3707  0610                     	;# 
  3708  0611                     	;# 
  3709  0612                     	;# 
  3710  0613                     	;# 
  3711  0614                     	;# 
  3712  0616                     	;# 
  3713  0617                     	;# 
  3714  0618                     	;# 
  3715  0619                     	;# 
  3716  061A                     	;# 
  3717  061B                     	;# 
  3718  061C                     	;# 
  3719  061D                     	;# 
  3720  061E                     	;# 
  3721  068C                     	;# 
  3722  068D                     	;# 
  3723  068E                     	;# 
  3724  068F                     	;# 
  3725  0690                     	;# 
  3726  0691                     	;# 
  3727  0692                     	;# 
  3728  0693                     	;# 
  3729  0694                     	;# 
  3730  070C                     	;# 
  3731  070D                     	;# 
  3732  070E                     	;# 
  3733  070F                     	;# 
  3734  0710                     	;# 
  3735  0711                     	;# 
  3736  0712                     	;# 
  3737  0713                     	;# 
  3738  0714                     	;# 
  3739  0716                     	;# 
  3740  0717                     	;# 
  3741  0718                     	;# 
  3742  0719                     	;# 
  3743  071A                     	;# 
  3744  071B                     	;# 
  3745  071C                     	;# 
  3746  071D                     	;# 
  3747  071E                     	;# 
  3748  0796                     	;# 
  3749  0797                     	;# 
  3750  0798                     	;# 
  3751  0799                     	;# 
  3752  079A                     	;# 
  3753  079B                     	;# 
  3754  080C                     	;# 
  3755  080D                     	;# 
  3756  080E                     	;# 
  3757  080F                     	;# 
  3758  0810                     	;# 
  3759  0811                     	;# 
  3760  0812                     	;# 
  3761  0813                     	;# 
  3762  0814                     	;# 
  3763  081A                     	;# 
  3764  081B                     	;# 
  3765  081C                     	;# 
  3766  081D                     	;# 
  3767  081E                     	;# 
  3768  081F                     	;# 
  3769  088C                     	;# 
  3770  088D                     	;# 
  3771  088E                     	;# 
  3772  088F                     	;# 
  3773  0890                     	;# 
  3774  0891                     	;# 
  3775  0892                     	;# 
  3776  0893                     	;# 
  3777  0895                     	;# 
  3778  0896                     	;# 
  3779  0897                     	;# 
  3780  0898                     	;# 
  3781  0899                     	;# 
  3782  089A                     	;# 
  3783  089B                     	;# 
  3784  090C                     	;# 
  3785  090E                     	;# 
  3786  090F                     	;# 
  3787  091F                     	;# 
  3788  091F                     	;# 
  3789  098F                     	;# 
  3790  098F                     	;# 
  3791  0990                     	;# 
  3792  0991                     	;# 
  3793  0992                     	;# 
  3794  0993                     	;# 
  3795  0994                     	;# 
  3796  0995                     	;# 
  3797  0996                     	;# 
  3798  0997                     	;# 
  3799  0E0F                     	;# 
  3800  0E10                     	;# 
  3801  0E11                     	;# 
  3802  0E12                     	;# 
  3803  0E13                     	;# 
  3804  0E14                     	;# 
  3805  0E15                     	;# 
  3806  0E16                     	;# 
  3807  0E17                     	;# 
  3808  0E18                     	;# 
  3809  0E19                     	;# 
  3810  0E1A                     	;# 
  3811  0E1B                     	;# 
  3812  0E1C                     	;# 
  3813  0E1D                     	;# 
  3814  0E1E                     	;# 
  3815  0E1F                     	;# 
  3816  0E20                     	;# 
  3817  0E21                     	;# 
  3818  0E22                     	;# 
  3819  0E23                     	;# 
  3820  0E24                     	;# 
  3821  0E25                     	;# 
  3822  0E26                     	;# 
  3823  0E27                     	;# 
  3824  0E28                     	;# 
  3825  0E29                     	;# 
  3826  0E2A                     	;# 
  3827  0E2B                     	;# 
  3828  0E2C                     	;# 
  3829  0E2D                     	;# 
  3830  0E2E                     	;# 
  3831  0E2F                     	;# 
  3832  0E30                     	;# 
  3833  0E31                     	;# 
  3834  0E32                     	;# 
  3835  0E33                     	;# 
  3836  0E34                     	;# 
  3837  0E35                     	;# 
  3838  0E36                     	;# 
  3839  0E37                     	;# 
  3840  0E8F                     	;# 
  3841  0E90                     	;# 
  3842  0E91                     	;# 
  3843  0E92                     	;# 
  3844  0E93                     	;# 
  3845  0E94                     	;# 
  3846  0E95                     	;# 
  3847  0E96                     	;# 
  3848  0E97                     	;# 
  3849  0E9C                     	;# 
  3850  0E9D                     	;# 
  3851  0E9E                     	;# 
  3852  0EA1                     	;# 
  3853  0EA2                     	;# 
  3854  0EA3                     	;# 
  3855  0EA4                     	;# 
  3856  0EA5                     	;# 
  3857  0EA9                     	;# 
  3858  0EAA                     	;# 
  3859  0EAB                     	;# 
  3860  0EAC                     	;# 
  3861  0EB1                     	;# 
  3862  0EB2                     	;# 
  3863  0EB3                     	;# 
  3864  0EB8                     	;# 
  3865  0EB9                     	;# 
  3866  0EBA                     	;# 
  3867  0EBB                     	;# 
  3868  0EBC                     	;# 
  3869  0EBD                     	;# 
  3870  0EBE                     	;# 
  3871  0EC3                     	;# 
  3872  0EC5                     	;# 
  3873  0EC6                     	;# 
  3874  0EC7                     	;# 
  3875  0EC8                     	;# 
  3876  0EC9                     	;# 
  3877  0ECA                     	;# 
  3878  0ECB                     	;# 
  3879  0ECC                     	;# 
  3880  0F10                     	;# 
  3881  0F11                     	;# 
  3882  0F12                     	;# 
  3883  0F13                     	;# 
  3884  0F14                     	;# 
  3885  0F15                     	;# 
  3886  0F16                     	;# 
  3887  0F17                     	;# 
  3888  0F18                     	;# 
  3889  0F19                     	;# 
  3890  0F1A                     	;# 
  3891  0F1B                     	;# 
  3892  0F1C                     	;# 
  3893  0F1D                     	;# 
  3894  0F1E                     	;# 
  3895  0F1F                     	;# 
  3896  0F20                     	;# 
  3897  0F21                     	;# 
  3898  0F22                     	;# 
  3899  0F23                     	;# 
  3900  0F24                     	;# 
  3901  0F25                     	;# 
  3902  0F26                     	;# 
  3903  0F27                     	;# 
  3904  0F28                     	;# 
  3905  0F29                     	;# 
  3906  0F2A                     	;# 
  3907  0F2B                     	;# 
  3908  0F2C                     	;# 
  3909  0F2D                     	;# 
  3910  0F2E                     	;# 
  3911  0F2F                     	;# 
  3912  0F30                     	;# 
  3913  0F31                     	;# 
  3914  0F32                     	;# 
  3915  0F38                     	;# 
  3916  0F39                     	;# 
  3917  0F3A                     	;# 
  3918  0F3B                     	;# 
  3919  0F3C                     	;# 
  3920  0F3D                     	;# 
  3921  0F3E                     	;# 
  3922  0F3F                     	;# 
  3923  0F40                     	;# 
  3924  0F41                     	;# 
  3925  0F43                     	;# 
  3926  0F44                     	;# 
  3927  0F45                     	;# 
  3928  0F46                     	;# 
  3929  0F47                     	;# 
  3930  0F48                     	;# 
  3931  0F49                     	;# 
  3932  0F4A                     	;# 
  3933  0F4B                     	;# 
  3934  0F4C                     	;# 
  3935  0F4E                     	;# 
  3936  0F4F                     	;# 
  3937  0F50                     	;# 
  3938  0F51                     	;# 
  3939  0F52                     	;# 
  3940  0F53                     	;# 
  3941  0F54                     	;# 
  3942  0F55                     	;# 
  3943  0F56                     	;# 
  3944  0F57                     	;# 
  3945  0F59                     	;# 
  3946  0F5A                     	;# 
  3947  0F5B                     	;# 
  3948  0F5C                     	;# 
  3949  0F5D                     	;# 
  3950  0F61                     	;# 
  3951  0F62                     	;# 
  3952  0F64                     	;# 
  3953  0F65                     	;# 
  3954  0F66                     	;# 
  3955  0F67                     	;# 
  3956  0F68                     	;# 
  3957  0F69                     	;# 
  3958  0F6A                     	;# 
  3959  0F6B                     	;# 
  3960  0F6C                     	;# 
  3961  0F6D                     	;# 
  3962  0FE4                     	;# 
  3963  0FE5                     	;# 
  3964  0FE6                     	;# 
  3965  0FE7                     	;# 
  3966  0FE8                     	;# 
  3967  0FE9                     	;# 
  3968  0FEA                     	;# 
  3969  0FEB                     	;# 
  3970  0FED                     	;# 
  3971  0FEE                     	;# 
  3972  0FEF                     	;# 
  3973  0000                     	;# 
  3974  0001                     	;# 
  3975  0002                     	;# 
  3976  0003                     	;# 
  3977  0004                     	;# 
  3978  0005                     	;# 
  3979  0006                     	;# 
  3980  0007                     	;# 
  3981  0008                     	;# 
  3982  0009                     	;# 
  3983  000A                     	;# 
  3984  000B                     	;# 
  3985  000C                     	;# 
  3986  000D                     	;# 
  3987  000E                     	;# 
  3988  000F                     	;# 
  3989  0010                     	;# 
  3990  0011                     	;# 
  3991  0012                     	;# 
  3992  0013                     	;# 
  3993  0014                     	;# 
  3994  0015                     	;# 
  3995  0016                     	;# 
  3996  0017                     	;# 
  3997  0018                     	;# 
  3998  0019                     	;# 
  3999  001A                     	;# 
  4000  001C                     	;# 
  4001  001C                     	;# 
  4002  001D                     	;# 
  4003  001D                     	;# 
  4004  001E                     	;# 
  4005  001F                     	;# 
  4006  008C                     	;# 
  4007  008C                     	;# 
  4008  008D                     	;# 
  4009  008E                     	;# 
  4010  008E                     	;# 
  4011  008F                     	;# 
  4012  0090                     	;# 
  4013  0090                     	;# 
  4014  0091                     	;# 
  4015  0093                     	;# 
  4016  0094                     	;# 
  4017  0095                     	;# 
  4018  0096                     	;# 
  4019  0097                     	;# 
  4020  0098                     	;# 
  4021  0099                     	;# 
  4022  009A                     	;# 
  4023  009B                     	;# 
  4024  009C                     	;# 
  4025  009D                     	;# 
  4026  009E                     	;# 
  4027  010C                     	;# 
  4028  010D                     	;# 
  4029  010E                     	;# 
  4030  010E                     	;# 
  4031  010F                     	;# 
  4032  0110                     	;# 
  4033  0110                     	;# 
  4034  0111                     	;# 
  4035  0112                     	;# 
  4036  0112                     	;# 
  4037  0113                     	;# 
  4038  0114                     	;# 
  4039  0114                     	;# 
  4040  0115                     	;# 
  4041  0116                     	;# 
  4042  0116                     	;# 
  4043  0117                     	;# 
  4044  0119                     	;# 
  4045  0119                     	;# 
  4046  0119                     	;# 
  4047  011A                     	;# 
  4048  011A                     	;# 
  4049  011A                     	;# 
  4050  011B                     	;# 
  4051  011B                     	;# 
  4052  011B                     	;# 
  4053  011B                     	;# 
  4054  011B                     	;# 
  4055  011C                     	;# 
  4056  011C                     	;# 
  4057  011C                     	;# 
  4058  011D                     	;# 
  4059  011D                     	;# 
  4060  011D                     	;# 
  4061  011E                     	;# 
  4062  011E                     	;# 
  4063  011E                     	;# 
  4064  011F                     	;# 
  4065  011F                     	;# 
  4066  011F                     	;# 
  4067  011F                     	;# 
  4068  011F                     	;# 
  4069  018C                     	;# 
  4070  018D                     	;# 
  4071  018E                     	;# 
  4072  018F                     	;# 
  4073  0190                     	;# 
  4074  0191                     	;# 
  4075  0192                     	;# 
  4076  0196                     	;# 
  4077  0197                     	;# 
  4078  0198                     	;# 
  4079  0199                     	;# 
  4080  019A                     	;# 
  4081  019B                     	;# 
  4082  019C                     	;# 
  4083  020C                     	;# 
  4084  020C                     	;# 
  4085  020D                     	;# 
  4086  020E                     	;# 
  4087  020F                     	;# 
  4088  020F                     	;# 
  4089  0210                     	;# 
  4090  0210                     	;# 
  4091  0211                     	;# 
  4092  0211                     	;# 
  4093  0212                     	;# 
  4094  0212                     	;# 
  4095  0213                     	;# 
  4096  0214                     	;# 
  4097  0215                     	;# 
  4098  0215                     	;# 
  4099  0216                     	;# 
  4100  0216                     	;# 
  4101  0217                     	;# 
  4102  0217                     	;# 
  4103  0218                     	;# 
  4104  0218                     	;# 
  4105  0219                     	;# 
  4106  021A                     	;# 
  4107  021B                     	;# 
  4108  021B                     	;# 
  4109  021C                     	;# 
  4110  021C                     	;# 
  4111  021D                     	;# 
  4112  021D                     	;# 
  4113  021E                     	;# 
  4114  021F                     	;# 
  4115  028C                     	;# 
  4116  028C                     	;# 
  4117  028D                     	;# 
  4118  028D                     	;# 
  4119  028E                     	;# 
  4120  028F                     	;# 
  4121  0290                     	;# 
  4122  0290                     	;# 
  4123  0291                     	;# 
  4124  0292                     	;# 
  4125  0292                     	;# 
  4126  0293                     	;# 
  4127  0293                     	;# 
  4128  0294                     	;# 
  4129  0295                     	;# 
  4130  0296                     	;# 
  4131  0296                     	;# 
  4132  0297                     	;# 
  4133  0298                     	;# 
  4134  0298                     	;# 
  4135  0299                     	;# 
  4136  0299                     	;# 
  4137  029A                     	;# 
  4138  029B                     	;# 
  4139  029C                     	;# 
  4140  029C                     	;# 
  4141  029D                     	;# 
  4142  030C                     	;# 
  4143  030C                     	;# 
  4144  030D                     	;# 
  4145  030E                     	;# 
  4146  030F                     	;# 
  4147  0310                     	;# 
  4148  0310                     	;# 
  4149  0311                     	;# 
  4150  0312                     	;# 
  4151  0313                     	;# 
  4152  0314                     	;# 
  4153  0314                     	;# 
  4154  0315                     	;# 
  4155  0316                     	;# 
  4156  0317                     	;# 
  4157  0318                     	;# 
  4158  0318                     	;# 
  4159  0319                     	;# 
  4160  031A                     	;# 
  4161  031B                     	;# 
  4162  031C                     	;# 
  4163  031C                     	;# 
  4164  031D                     	;# 
  4165  031E                     	;# 
  4166  031F                     	;# 
  4167  038C                     	;# 
  4168  038C                     	;# 
  4169  038D                     	;# 
  4170  038E                     	;# 
  4171  0390                     	;# 
  4172  0390                     	;# 
  4173  0391                     	;# 
  4174  0392                     	;# 
  4175  040C                     	;# 
  4176  040D                     	;# 
  4177  040E                     	;# 
  4178  040F                     	;# 
  4179  0410                     	;# 
  4180  0411                     	;# 
  4181  0416                     	;# 
  4182  0416                     	;# 
  4183  0417                     	;# 
  4184  0418                     	;# 
  4185  0418                     	;# 
  4186  0419                     	;# 
  4187  041A                     	;# 
  4188  041A                     	;# 
  4189  041B                     	;# 
  4190  041C                     	;# 
  4191  041C                     	;# 
  4192  041D                     	;# 
  4193  041E                     	;# 
  4194  041F                     	;# 
  4195  048C                     	;# 
  4196  048C                     	;# 
  4197  048D                     	;# 
  4198  048E                     	;# 
  4199  048F                     	;# 
  4200  048F                     	;# 
  4201  0490                     	;# 
  4202  0491                     	;# 
  4203  0492                     	;# 
  4204  0492                     	;# 
  4205  0493                     	;# 
  4206  0494                     	;# 
  4207  0495                     	;# 
  4208  0495                     	;# 
  4209  0496                     	;# 
  4210  0497                     	;# 
  4211  0498                     	;# 
  4212  0499                     	;# 
  4213  049A                     	;# 
  4214  049B                     	;# 
  4215  049C                     	;# 
  4216  049D                     	;# 
  4217  050C                     	;# 
  4218  050C                     	;# 
  4219  050D                     	;# 
  4220  050E                     	;# 
  4221  050F                     	;# 
  4222  050F                     	;# 
  4223  0510                     	;# 
  4224  0511                     	;# 
  4225  0512                     	;# 
  4226  0512                     	;# 
  4227  0513                     	;# 
  4228  0514                     	;# 
  4229  0515                     	;# 
  4230  0515                     	;# 
  4231  0516                     	;# 
  4232  0517                     	;# 
  4233  0518                     	;# 
  4234  0519                     	;# 
  4235  051A                     	;# 
  4236  051B                     	;# 
  4237  051C                     	;# 
  4238  051D                     	;# 
  4239  058C                     	;# 
  4240  058C                     	;# 
  4241  058D                     	;# 
  4242  058E                     	;# 
  4243  058F                     	;# 
  4244  058F                     	;# 
  4245  0590                     	;# 
  4246  0591                     	;# 
  4247  0592                     	;# 
  4248  0593                     	;# 
  4249  060C                     	;# 
  4250  060D                     	;# 
  4251  060E                     	;# 
  4252  060F                     	;# 
  4253  0610                     	;# 
  4254  0611                     	;# 
  4255  0612                     	;# 
  4256  0613                     	;# 
  4257  0614                     	;# 
  4258  0616                     	;# 
  4259  0617                     	;# 
  4260  0618                     	;# 
  4261  0619                     	;# 
  4262  061A                     	;# 
  4263  061B                     	;# 
  4264  061C                     	;# 
  4265  061D                     	;# 
  4266  061E                     	;# 
  4267  068C                     	;# 
  4268  068D                     	;# 
  4269  068E                     	;# 
  4270  068F                     	;# 
  4271  0690                     	;# 
  4272  0691                     	;# 
  4273  0692                     	;# 
  4274  0693                     	;# 
  4275  0694                     	;# 
  4276  070C                     	;# 
  4277  070D                     	;# 
  4278  070E                     	;# 
  4279  070F                     	;# 
  4280  0710                     	;# 
  4281  0711                     	;# 
  4282  0712                     	;# 
  4283  0713                     	;# 
  4284  0714                     	;# 
  4285  0716                     	;# 
  4286  0717                     	;# 
  4287  0718                     	;# 
  4288  0719                     	;# 
  4289  071A                     	;# 
  4290  071B                     	;# 
  4291  071C                     	;# 
  4292  071D                     	;# 
  4293  071E                     	;# 
  4294  0796                     	;# 
  4295  0797                     	;# 
  4296  0798                     	;# 
  4297  0799                     	;# 
  4298  079A                     	;# 
  4299  079B                     	;# 
  4300  080C                     	;# 
  4301  080D                     	;# 
  4302  080E                     	;# 
  4303  080F                     	;# 
  4304  0810                     	;# 
  4305  0811                     	;# 
  4306  0812                     	;# 
  4307  0813                     	;# 
  4308  0814                     	;# 
  4309  081A                     	;# 
  4310  081B                     	;# 
  4311  081C                     	;# 
  4312  081D                     	;# 
  4313  081E                     	;# 
  4314  081F                     	;# 
  4315  088C                     	;# 
  4316  088D                     	;# 
  4317  088E                     	;# 
  4318  088F                     	;# 
  4319  0890                     	;# 
  4320  0891                     	;# 
  4321  0892                     	;# 
  4322  0893                     	;# 
  4323  0895                     	;# 
  4324  0896                     	;# 
  4325  0897                     	;# 
  4326  0898                     	;# 
  4327  0899                     	;# 
  4328  089A                     	;# 
  4329  089B                     	;# 
  4330  090C                     	;# 
  4331  090E                     	;# 
  4332  090F                     	;# 
  4333  091F                     	;# 
  4334  091F                     	;# 
  4335  098F                     	;# 
  4336  098F                     	;# 
  4337  0990                     	;# 
  4338  0991                     	;# 
  4339  0992                     	;# 
  4340  0993                     	;# 
  4341  0994                     	;# 
  4342  0995                     	;# 
  4343  0996                     	;# 
  4344  0997                     	;# 
  4345  0E0F                     	;# 
  4346  0E10                     	;# 
  4347  0E11                     	;# 
  4348  0E12                     	;# 
  4349  0E13                     	;# 
  4350  0E14                     	;# 
  4351  0E15                     	;# 
  4352  0E16                     	;# 
  4353  0E17                     	;# 
  4354  0E18                     	;# 
  4355  0E19                     	;# 
  4356  0E1A                     	;# 
  4357  0E1B                     	;# 
  4358  0E1C                     	;# 
  4359  0E1D                     	;# 
  4360  0E1E                     	;# 
  4361  0E1F                     	;# 
  4362  0E20                     	;# 
  4363  0E21                     	;# 
  4364  0E22                     	;# 
  4365  0E23                     	;# 
  4366  0E24                     	;# 
  4367  0E25                     	;# 
  4368  0E26                     	;# 
  4369  0E27                     	;# 
  4370  0E28                     	;# 
  4371  0E29                     	;# 
  4372  0E2A                     	;# 
  4373  0E2B                     	;# 
  4374  0E2C                     	;# 
  4375  0E2D                     	;# 
  4376  0E2E                     	;# 
  4377  0E2F                     	;# 
  4378  0E30                     	;# 
  4379  0E31                     	;# 
  4380  0E32                     	;# 
  4381  0E33                     	;# 
  4382  0E34                     	;# 
  4383  0E35                     	;# 
  4384  0E36                     	;# 
  4385  0E37                     	;# 
  4386  0E8F                     	;# 
  4387  0E90                     	;# 
  4388  0E91                     	;# 
  4389  0E92                     	;# 
  4390  0E93                     	;# 
  4391  0E94                     	;# 
  4392  0E95                     	;# 
  4393  0E96                     	;# 
  4394  0E97                     	;# 
  4395  0E9C                     	;# 
  4396  0E9D                     	;# 
  4397  0E9E                     	;# 
  4398  0EA1                     	;# 
  4399  0EA2                     	;# 
  4400  0EA3                     	;# 
  4401  0EA4                     	;# 
  4402  0EA5                     	;# 
  4403  0EA9                     	;# 
  4404  0EAA                     	;# 
  4405  0EAB                     	;# 
  4406  0EAC                     	;# 
  4407  0EB1                     	;# 
  4408  0EB2                     	;# 
  4409  0EB3                     	;# 
  4410  0EB8                     	;# 
  4411  0EB9                     	;# 
  4412  0EBA                     	;# 
  4413  0EBB                     	;# 
  4414  0EBC                     	;# 
  4415  0EBD                     	;# 
  4416  0EBE                     	;# 
  4417  0EC3                     	;# 
  4418  0EC5                     	;# 
  4419  0EC6                     	;# 
  4420  0EC7                     	;# 
  4421  0EC8                     	;# 
  4422  0EC9                     	;# 
  4423  0ECA                     	;# 
  4424  0ECB                     	;# 
  4425  0ECC                     	;# 
  4426  0F10                     	;# 
  4427  0F11                     	;# 
  4428  0F12                     	;# 
  4429  0F13                     	;# 
  4430  0F14                     	;# 
  4431  0F15                     	;# 
  4432  0F16                     	;# 
  4433  0F17                     	;# 
  4434  0F18                     	;# 
  4435  0F19                     	;# 
  4436  0F1A                     	;# 
  4437  0F1B                     	;# 
  4438  0F1C                     	;# 
  4439  0F1D                     	;# 
  4440  0F1E                     	;# 
  4441  0F1F                     	;# 
  4442  0F20                     	;# 
  4443  0F21                     	;# 
  4444  0F22                     	;# 
  4445  0F23                     	;# 
  4446  0F24                     	;# 
  4447  0F25                     	;# 
  4448  0F26                     	;# 
  4449  0F27                     	;# 
  4450  0F28                     	;# 
  4451  0F29                     	;# 
  4452  0F2A                     	;# 
  4453  0F2B                     	;# 
  4454  0F2C                     	;# 
  4455  0F2D                     	;# 
  4456  0F2E                     	;# 
  4457  0F2F                     	;# 
  4458  0F30                     	;# 
  4459  0F31                     	;# 
  4460  0F32                     	;# 
  4461  0F38                     	;# 
  4462  0F39                     	;# 
  4463  0F3A                     	;# 
  4464  0F3B                     	;# 
  4465  0F3C                     	;# 
  4466  0F3D                     	;# 
  4467  0F3E                     	;# 
  4468  0F3F                     	;# 
  4469  0F40                     	;# 
  4470  0F41                     	;# 
  4471  0F43                     	;# 
  4472  0F44                     	;# 
  4473  0F45                     	;# 
  4474  0F46                     	;# 
  4475  0F47                     	;# 
  4476  0F48                     	;# 
  4477  0F49                     	;# 
  4478  0F4A                     	;# 
  4479  0F4B                     	;# 
  4480  0F4C                     	;# 
  4481  0F4E                     	;# 
  4482  0F4F                     	;# 
  4483  0F50                     	;# 
  4484  0F51                     	;# 
  4485  0F52                     	;# 
  4486  0F53                     	;# 
  4487  0F54                     	;# 
  4488  0F55                     	;# 
  4489  0F56                     	;# 
  4490  0F57                     	;# 
  4491  0F59                     	;# 
  4492  0F5A                     	;# 
  4493  0F5B                     	;# 
  4494  0F5C                     	;# 
  4495  0F5D                     	;# 
  4496  0F61                     	;# 
  4497  0F62                     	;# 
  4498  0F64                     	;# 
  4499  0F65                     	;# 
  4500  0F66                     	;# 
  4501  0F67                     	;# 
  4502  0F68                     	;# 
  4503  0F69                     	;# 
  4504  0F6A                     	;# 
  4505  0F6B                     	;# 
  4506  0F6C                     	;# 
  4507  0F6D                     	;# 
  4508  0FE4                     	;# 
  4509  0FE5                     	;# 
  4510  0FE6                     	;# 
  4511  0FE7                     	;# 
  4512  0FE8                     	;# 
  4513  0FE9                     	;# 
  4514  0FEA                     	;# 
  4515  0FEB                     	;# 
  4516  0FED                     	;# 
  4517  0FEE                     	;# 
  4518  0FEF                     	;# 
  4519  0000                     	;# 
  4520  0001                     	;# 
  4521  0002                     	;# 
  4522  0003                     	;# 
  4523  0004                     	;# 
  4524  0005                     	;# 
  4525  0006                     	;# 
  4526  0007                     	;# 
  4527  0008                     	;# 
  4528  0009                     	;# 
  4529  000A                     	;# 
  4530  000B                     	;# 
  4531  000C                     	;# 
  4532  000D                     	;# 
  4533  000E                     	;# 
  4534  000F                     	;# 
  4535  0010                     	;# 
  4536  0011                     	;# 
  4537  0012                     	;# 
  4538  0013                     	;# 
  4539  0014                     	;# 
  4540  0015                     	;# 
  4541  0016                     	;# 
  4542  0017                     	;# 
  4543  0018                     	;# 
  4544  0019                     	;# 
  4545  001A                     	;# 
  4546  001C                     	;# 
  4547  001C                     	;# 
  4548  001D                     	;# 
  4549  001D                     	;# 
  4550  001E                     	;# 
  4551  001F                     	;# 
  4552  008C                     	;# 
  4553  008C                     	;# 
  4554  008D                     	;# 
  4555  008E                     	;# 
  4556  008E                     	;# 
  4557  008F                     	;# 
  4558  0090                     	;# 
  4559  0090                     	;# 
  4560  0091                     	;# 
  4561  0093                     	;# 
  4562  0094                     	;# 
  4563  0095                     	;# 
  4564  0096                     	;# 
  4565  0097                     	;# 
  4566  0098                     	;# 
  4567  0099                     	;# 
  4568  009A                     	;# 
  4569  009B                     	;# 
  4570  009C                     	;# 
  4571  009D                     	;# 
  4572  009E                     	;# 
  4573  010C                     	;# 
  4574  010D                     	;# 
  4575  010E                     	;# 
  4576  010E                     	;# 
  4577  010F                     	;# 
  4578  0110                     	;# 
  4579  0110                     	;# 
  4580  0111                     	;# 
  4581  0112                     	;# 
  4582  0112                     	;# 
  4583  0113                     	;# 
  4584  0114                     	;# 
  4585  0114                     	;# 
  4586  0115                     	;# 
  4587  0116                     	;# 
  4588  0116                     	;# 
  4589  0117                     	;# 
  4590  0119                     	;# 
  4591  0119                     	;# 
  4592  0119                     	;# 
  4593  011A                     	;# 
  4594  011A                     	;# 
  4595  011A                     	;# 
  4596  011B                     	;# 
  4597  011B                     	;# 
  4598  011B                     	;# 
  4599  011B                     	;# 
  4600  011B                     	;# 
  4601  011C                     	;# 
  4602  011C                     	;# 
  4603  011C                     	;# 
  4604  011D                     	;# 
  4605  011D                     	;# 
  4606  011D                     	;# 
  4607  011E                     	;# 
  4608  011E                     	;# 
  4609  011E                     	;# 
  4610  011F                     	;# 
  4611  011F                     	;# 
  4612  011F                     	;# 
  4613  011F                     	;# 
  4614  011F                     	;# 
  4615  018C                     	;# 
  4616  018D                     	;# 
  4617  018E                     	;# 
  4618  018F                     	;# 
  4619  0190                     	;# 
  4620  0191                     	;# 
  4621  0192                     	;# 
  4622  0196                     	;# 
  4623  0197                     	;# 
  4624  0198                     	;# 
  4625  0199                     	;# 
  4626  019A                     	;# 
  4627  019B                     	;# 
  4628  019C                     	;# 
  4629  020C                     	;# 
  4630  020C                     	;# 
  4631  020D                     	;# 
  4632  020E                     	;# 
  4633  020F                     	;# 
  4634  020F                     	;# 
  4635  0210                     	;# 
  4636  0210                     	;# 
  4637  0211                     	;# 
  4638  0211                     	;# 
  4639  0212                     	;# 
  4640  0212                     	;# 
  4641  0213                     	;# 
  4642  0214                     	;# 
  4643  0215                     	;# 
  4644  0215                     	;# 
  4645  0216                     	;# 
  4646  0216                     	;# 
  4647  0217                     	;# 
  4648  0217                     	;# 
  4649  0218                     	;# 
  4650  0218                     	;# 
  4651  0219                     	;# 
  4652  021A                     	;# 
  4653  021B                     	;# 
  4654  021B                     	;# 
  4655  021C                     	;# 
  4656  021C                     	;# 
  4657  021D                     	;# 
  4658  021D                     	;# 
  4659  021E                     	;# 
  4660  021F                     	;# 
  4661  028C                     	;# 
  4662  028C                     	;# 
  4663  028D                     	;# 
  4664  028D                     	;# 
  4665  028E                     	;# 
  4666  028F                     	;# 
  4667  0290                     	;# 
  4668  0290                     	;# 
  4669  0291                     	;# 
  4670  0292                     	;# 
  4671  0292                     	;# 
  4672  0293                     	;# 
  4673  0293                     	;# 
  4674  0294                     	;# 
  4675  0295                     	;# 
  4676  0296                     	;# 
  4677  0296                     	;# 
  4678  0297                     	;# 
  4679  0298                     	;# 
  4680  0298                     	;# 
  4681  0299                     	;# 
  4682  0299                     	;# 
  4683  029A                     	;# 
  4684  029B                     	;# 
  4685  029C                     	;# 
  4686  029C                     	;# 
  4687  029D                     	;# 
  4688  030C                     	;# 
  4689  030C                     	;# 
  4690  030D                     	;# 
  4691  030E                     	;# 
  4692  030F                     	;# 
  4693  0310                     	;# 
  4694  0310                     	;# 
  4695  0311                     	;# 
  4696  0312                     	;# 
  4697  0313                     	;# 
  4698  0314                     	;# 
  4699  0314                     	;# 
  4700  0315                     	;# 
  4701  0316                     	;# 
  4702  0317                     	;# 
  4703  0318                     	;# 
  4704  0318                     	;# 
  4705  0319                     	;# 
  4706  031A                     	;# 
  4707  031B                     	;# 
  4708  031C                     	;# 
  4709  031C                     	;# 
  4710  031D                     	;# 
  4711  031E                     	;# 
  4712  031F                     	;# 
  4713  038C                     	;# 
  4714  038C                     	;# 
  4715  038D                     	;# 
  4716  038E                     	;# 
  4717  0390                     	;# 
  4718  0390                     	;# 
  4719  0391                     	;# 
  4720  0392                     	;# 
  4721  040C                     	;# 
  4722  040D                     	;# 
  4723  040E                     	;# 
  4724  040F                     	;# 
  4725  0410                     	;# 
  4726  0411                     	;# 
  4727  0416                     	;# 
  4728  0416                     	;# 
  4729  0417                     	;# 
  4730  0418                     	;# 
  4731  0418                     	;# 
  4732  0419                     	;# 
  4733  041A                     	;# 
  4734  041A                     	;# 
  4735  041B                     	;# 
  4736  041C                     	;# 
  4737  041C                     	;# 
  4738  041D                     	;# 
  4739  041E                     	;# 
  4740  041F                     	;# 
  4741  048C                     	;# 
  4742  048C                     	;# 
  4743  048D                     	;# 
  4744  048E                     	;# 
  4745  048F                     	;# 
  4746  048F                     	;# 
  4747  0490                     	;# 
  4748  0491                     	;# 
  4749  0492                     	;# 
  4750  0492                     	;# 
  4751  0493                     	;# 
  4752  0494                     	;# 
  4753  0495                     	;# 
  4754  0495                     	;# 
  4755  0496                     	;# 
  4756  0497                     	;# 
  4757  0498                     	;# 
  4758  0499                     	;# 
  4759  049A                     	;# 
  4760  049B                     	;# 
  4761  049C                     	;# 
  4762  049D                     	;# 
  4763  050C                     	;# 
  4764  050C                     	;# 
  4765  050D                     	;# 
  4766  050E                     	;# 
  4767  050F                     	;# 
  4768  050F                     	;# 
  4769  0510                     	;# 
  4770  0511                     	;# 
  4771  0512                     	;# 
  4772  0512                     	;# 
  4773  0513                     	;# 
  4774  0514                     	;# 
  4775  0515                     	;# 
  4776  0515                     	;# 
  4777  0516                     	;# 
  4778  0517                     	;# 
  4779  0518                     	;# 
  4780  0519                     	;# 
  4781  051A                     	;# 
  4782  051B                     	;# 
  4783  051C                     	;# 
  4784  051D                     	;# 
  4785  058C                     	;# 
  4786  058C                     	;# 
  4787  058D                     	;# 
  4788  058E                     	;# 
  4789  058F                     	;# 
  4790  058F                     	;# 
  4791  0590                     	;# 
  4792  0591                     	;# 
  4793  0592                     	;# 
  4794  0593                     	;# 
  4795  060C                     	;# 
  4796  060D                     	;# 
  4797  060E                     	;# 
  4798  060F                     	;# 
  4799  0610                     	;# 
  4800  0611                     	;# 
  4801  0612                     	;# 
  4802  0613                     	;# 
  4803  0614                     	;# 
  4804  0616                     	;# 
  4805  0617                     	;# 
  4806  0618                     	;# 
  4807  0619                     	;# 
  4808  061A                     	;# 
  4809  061B                     	;# 
  4810  061C                     	;# 
  4811  061D                     	;# 
  4812  061E                     	;# 
  4813  068C                     	;# 
  4814  068D                     	;# 
  4815  068E                     	;# 
  4816  068F                     	;# 
  4817  0690                     	;# 
  4818  0691                     	;# 
  4819  0692                     	;# 
  4820  0693                     	;# 
  4821  0694                     	;# 
  4822  070C                     	;# 
  4823  070D                     	;# 
  4824  070E                     	;# 
  4825  070F                     	;# 
  4826  0710                     	;# 
  4827  0711                     	;# 
  4828  0712                     	;# 
  4829  0713                     	;# 
  4830  0714                     	;# 
  4831  0716                     	;# 
  4832  0717                     	;# 
  4833  0718                     	;# 
  4834  0719                     	;# 
  4835  071A                     	;# 
  4836  071B                     	;# 
  4837  071C                     	;# 
  4838  071D                     	;# 
  4839  071E                     	;# 
  4840  0796                     	;# 
  4841  0797                     	;# 
  4842  0798                     	;# 
  4843  0799                     	;# 
  4844  079A                     	;# 
  4845  079B                     	;# 
  4846  080C                     	;# 
  4847  080D                     	;# 
  4848  080E                     	;# 
  4849  080F                     	;# 
  4850  0810                     	;# 
  4851  0811                     	;# 
  4852  0812                     	;# 
  4853  0813                     	;# 
  4854  0814                     	;# 
  4855  081A                     	;# 
  4856  081B                     	;# 
  4857  081C                     	;# 
  4858  081D                     	;# 
  4859  081E                     	;# 
  4860  081F                     	;# 
  4861  088C                     	;# 
  4862  088D                     	;# 
  4863  088E                     	;# 
  4864  088F                     	;# 
  4865  0890                     	;# 
  4866  0891                     	;# 
  4867  0892                     	;# 
  4868  0893                     	;# 
  4869  0895                     	;# 
  4870  0896                     	;# 
  4871  0897                     	;# 
  4872  0898                     	;# 
  4873  0899                     	;# 
  4874  089A                     	;# 
  4875  089B                     	;# 
  4876  090C                     	;# 
  4877  090E                     	;# 
  4878  090F                     	;# 
  4879  091F                     	;# 
  4880  091F                     	;# 
  4881  098F                     	;# 
  4882  098F                     	;# 
  4883  0990                     	;# 
  4884  0991                     	;# 
  4885  0992                     	;# 
  4886  0993                     	;# 
  4887  0994                     	;# 
  4888  0995                     	;# 
  4889  0996                     	;# 
  4890  0997                     	;# 
  4891  0E0F                     	;# 
  4892  0E10                     	;# 
  4893  0E11                     	;# 
  4894  0E12                     	;# 
  4895  0E13                     	;# 
  4896  0E14                     	;# 
  4897  0E15                     	;# 
  4898  0E16                     	;# 
  4899  0E17                     	;# 
  4900  0E18                     	;# 
  4901  0E19                     	;# 
  4902  0E1A                     	;# 
  4903  0E1B                     	;# 
  4904  0E1C                     	;# 
  4905  0E1D                     	;# 
  4906  0E1E                     	;# 
  4907  0E1F                     	;# 
  4908  0E20                     	;# 
  4909  0E21                     	;# 
  4910  0E22                     	;# 
  4911  0E23                     	;# 
  4912  0E24                     	;# 
  4913  0E25                     	;# 
  4914  0E26                     	;# 
  4915  0E27                     	;# 
  4916  0E28                     	;# 
  4917  0E29                     	;# 
  4918  0E2A                     	;# 
  4919  0E2B                     	;# 
  4920  0E2C                     	;# 
  4921  0E2D                     	;# 
  4922  0E2E                     	;# 
  4923  0E2F                     	;# 
  4924  0E30                     	;# 
  4925  0E31                     	;# 
  4926  0E32                     	;# 
  4927  0E33                     	;# 
  4928  0E34                     	;# 
  4929  0E35                     	;# 
  4930  0E36                     	;# 
  4931  0E37                     	;# 
  4932  0E8F                     	;# 
  4933  0E90                     	;# 
  4934  0E91                     	;# 
  4935  0E92                     	;# 
  4936  0E93                     	;# 
  4937  0E94                     	;# 
  4938  0E95                     	;# 
  4939  0E96                     	;# 
  4940  0E97                     	;# 
  4941  0E9C                     	;# 
  4942  0E9D                     	;# 
  4943  0E9E                     	;# 
  4944  0EA1                     	;# 
  4945  0EA2                     	;# 
  4946  0EA3                     	;# 
  4947  0EA4                     	;# 
  4948  0EA5                     	;# 
  4949  0EA9                     	;# 
  4950  0EAA                     	;# 
  4951  0EAB                     	;# 
  4952  0EAC                     	;# 
  4953  0EB1                     	;# 
  4954  0EB2                     	;# 
  4955  0EB3                     	;# 
  4956  0EB8                     	;# 
  4957  0EB9                     	;# 
  4958  0EBA                     	;# 
  4959  0EBB                     	;# 
  4960  0EBC                     	;# 
  4961  0EBD                     	;# 
  4962  0EBE                     	;# 
  4963  0EC3                     	;# 
  4964  0EC5                     	;# 
  4965  0EC6                     	;# 
  4966  0EC7                     	;# 
  4967  0EC8                     	;# 
  4968  0EC9                     	;# 
  4969  0ECA                     	;# 
  4970  0ECB                     	;# 
  4971  0ECC                     	;# 
  4972  0F10                     	;# 
  4973  0F11                     	;# 
  4974  0F12                     	;# 
  4975  0F13                     	;# 
  4976  0F14                     	;# 
  4977  0F15                     	;# 
  4978  0F16                     	;# 
  4979  0F17                     	;# 
  4980  0F18                     	;# 
  4981  0F19                     	;# 
  4982  0F1A                     	;# 
  4983  0F1B                     	;# 
  4984  0F1C                     	;# 
  4985  0F1D                     	;# 
  4986  0F1E                     	;# 
  4987  0F1F                     	;# 
  4988  0F20                     	;# 
  4989  0F21                     	;# 
  4990  0F22                     	;# 
  4991  0F23                     	;# 
  4992  0F24                     	;# 
  4993  0F25                     	;# 
  4994  0F26                     	;# 
  4995  0F27                     	;# 
  4996  0F28                     	;# 
  4997  0F29                     	;# 
  4998  0F2A                     	;# 
  4999  0F2B                     	;# 
  5000  0F2C                     	;# 
  5001  0F2D                     	;# 
  5002  0F2E                     	;# 
  5003  0F2F                     	;# 
  5004  0F30                     	;# 
  5005  0F31                     	;# 
  5006  0F32                     	;# 
  5007  0F38                     	;# 
  5008  0F39                     	;# 
  5009  0F3A                     	;# 
  5010  0F3B                     	;# 
  5011  0F3C                     	;# 
  5012  0F3D                     	;# 
  5013  0F3E                     	;# 
  5014  0F3F                     	;# 
  5015  0F40                     	;# 
  5016  0F41                     	;# 
  5017  0F43                     	;# 
  5018  0F44                     	;# 
  5019  0F45                     	;# 
  5020  0F46                     	;# 
  5021  0F47                     	;# 
  5022  0F48                     	;# 
  5023  0F49                     	;# 
  5024  0F4A                     	;# 
  5025  0F4B                     	;# 
  5026  0F4C                     	;# 
  5027  0F4E                     	;# 
  5028  0F4F                     	;# 
  5029  0F50                     	;# 
  5030  0F51                     	;# 
  5031  0F52                     	;# 
  5032  0F53                     	;# 
  5033  0F54                     	;# 
  5034  0F55                     	;# 
  5035  0F56                     	;# 
  5036  0F57                     	;# 
  5037  0F59                     	;# 
  5038  0F5A                     	;# 
  5039  0F5B                     	;# 
  5040  0F5C                     	;# 
  5041  0F5D                     	;# 
  5042  0F61                     	;# 
  5043  0F62                     	;# 
  5044  0F64                     	;# 
  5045  0F65                     	;# 
  5046  0F66                     	;# 
  5047  0F67                     	;# 
  5048  0F68                     	;# 
  5049  0F69                     	;# 
  5050  0F6A                     	;# 
  5051  0F6B                     	;# 
  5052  0F6C                     	;# 
  5053  0F6D                     	;# 
  5054  0FE4                     	;# 
  5055  0FE5                     	;# 
  5056  0FE6                     	;# 
  5057  0FE7                     	;# 
  5058  0FE8                     	;# 
  5059  0FE9                     	;# 
  5060  0FEA                     	;# 
  5061  0FEB                     	;# 
  5062  0FED                     	;# 
  5063  0FEE                     	;# 
  5064  0FEF                     	;# 
  5065  0000                     	;# 
  5066  0001                     	;# 
  5067  0002                     	;# 
  5068  0003                     	;# 
  5069  0004                     	;# 
  5070  0005                     	;# 
  5071  0006                     	;# 
  5072  0007                     	;# 
  5073  0008                     	;# 
  5074  0009                     	;# 
  5075  000A                     	;# 
  5076  000B                     	;# 
  5077  000C                     	;# 
  5078  000D                     	;# 
  5079  000E                     	;# 
  5080  000F                     	;# 
  5081  0010                     	;# 
  5082  0011                     	;# 
  5083  0012                     	;# 
  5084  0013                     	;# 
  5085  0014                     	;# 
  5086  0015                     	;# 
  5087  0016                     	;# 
  5088  0017                     	;# 
  5089  0018                     	;# 
  5090  0019                     	;# 
  5091  001A                     	;# 
  5092  001C                     	;# 
  5093  001C                     	;# 
  5094  001D                     	;# 
  5095  001D                     	;# 
  5096  001E                     	;# 
  5097  001F                     	;# 
  5098  008C                     	;# 
  5099  008C                     	;# 
  5100  008D                     	;# 
  5101  008E                     	;# 
  5102  008E                     	;# 
  5103  008F                     	;# 
  5104  0090                     	;# 
  5105  0090                     	;# 
  5106  0091                     	;# 
  5107  0093                     	;# 
  5108  0094                     	;# 
  5109  0095                     	;# 
  5110  0096                     	;# 
  5111  0097                     	;# 
  5112  0098                     	;# 
  5113  0099                     	;# 
  5114  009A                     	;# 
  5115  009B                     	;# 
  5116  009C                     	;# 
  5117  009D                     	;# 
  5118  009E                     	;# 
  5119  010C                     	;# 
  5120  010D                     	;# 
  5121  010E                     	;# 
  5122  010E                     	;# 
  5123  010F                     	;# 
  5124  0110                     	;# 
  5125  0110                     	;# 
  5126  0111                     	;# 
  5127  0112                     	;# 
  5128  0112                     	;# 
  5129  0113                     	;# 
  5130  0114                     	;# 
  5131  0114                     	;# 
  5132  0115                     	;# 
  5133  0116                     	;# 
  5134  0116                     	;# 
  5135  0117                     	;# 
  5136  0119                     	;# 
  5137  0119                     	;# 
  5138  0119                     	;# 
  5139  011A                     	;# 
  5140  011A                     	;# 
  5141  011A                     	;# 
  5142  011B                     	;# 
  5143  011B                     	;# 
  5144  011B                     	;# 
  5145  011B                     	;# 
  5146  011B                     	;# 
  5147  011C                     	;# 
  5148  011C                     	;# 
  5149  011C                     	;# 
  5150  011D                     	;# 
  5151  011D                     	;# 
  5152  011D                     	;# 
  5153  011E                     	;# 
  5154  011E                     	;# 
  5155  011E                     	;# 
  5156  011F                     	;# 
  5157  011F                     	;# 
  5158  011F                     	;# 
  5159  011F                     	;# 
  5160  011F                     	;# 
  5161  018C                     	;# 
  5162  018D                     	;# 
  5163  018E                     	;# 
  5164  018F                     	;# 
  5165  0190                     	;# 
  5166  0191                     	;# 
  5167  0192                     	;# 
  5168  0196                     	;# 
  5169  0197                     	;# 
  5170  0198                     	;# 
  5171  0199                     	;# 
  5172  019A                     	;# 
  5173  019B                     	;# 
  5174  019C                     	;# 
  5175  020C                     	;# 
  5176  020C                     	;# 
  5177  020D                     	;# 
  5178  020E                     	;# 
  5179  020F                     	;# 
  5180  020F                     	;# 
  5181  0210                     	;# 
  5182  0210                     	;# 
  5183  0211                     	;# 
  5184  0211                     	;# 
  5185  0212                     	;# 
  5186  0212                     	;# 
  5187  0213                     	;# 
  5188  0214                     	;# 
  5189  0215                     	;# 
  5190  0215                     	;# 
  5191  0216                     	;# 
  5192  0216                     	;# 
  5193  0217                     	;# 
  5194  0217                     	;# 
  5195  0218                     	;# 
  5196  0218                     	;# 
  5197  0219                     	;# 
  5198  021A                     	;# 
  5199  021B                     	;# 
  5200  021B                     	;# 
  5201  021C                     	;# 
  5202  021C                     	;# 
  5203  021D                     	;# 
  5204  021D                     	;# 
  5205  021E                     	;# 
  5206  021F                     	;# 
  5207  028C                     	;# 
  5208  028C                     	;# 
  5209  028D                     	;# 
  5210  028D                     	;# 
  5211  028E                     	;# 
  5212  028F                     	;# 
  5213  0290                     	;# 
  5214  0290                     	;# 
  5215  0291                     	;# 
  5216  0292                     	;# 
  5217  0292                     	;# 
  5218  0293                     	;# 
  5219  0293                     	;# 
  5220  0294                     	;# 
  5221  0295                     	;# 
  5222  0296                     	;# 
  5223  0296                     	;# 
  5224  0297                     	;# 
  5225  0298                     	;# 
  5226  0298                     	;# 
  5227  0299                     	;# 
  5228  0299                     	;# 
  5229  029A                     	;# 
  5230  029B                     	;# 
  5231  029C                     	;# 
  5232  029C                     	;# 
  5233  029D                     	;# 
  5234  030C                     	;# 
  5235  030C                     	;# 
  5236  030D                     	;# 
  5237  030E                     	;# 
  5238  030F                     	;# 
  5239  0310                     	;# 
  5240  0310                     	;# 
  5241  0311                     	;# 
  5242  0312                     	;# 
  5243  0313                     	;# 
  5244  0314                     	;# 
  5245  0314                     	;# 
  5246  0315                     	;# 
  5247  0316                     	;# 
  5248  0317                     	;# 
  5249  0318                     	;# 
  5250  0318                     	;# 
  5251  0319                     	;# 
  5252  031A                     	;# 
  5253  031B                     	;# 
  5254  031C                     	;# 
  5255  031C                     	;# 
  5256  031D                     	;# 
  5257  031E                     	;# 
  5258  031F                     	;# 
  5259  038C                     	;# 
  5260  038C                     	;# 
  5261  038D                     	;# 
  5262  038E                     	;# 
  5263  0390                     	;# 
  5264  0390                     	;# 
  5265  0391                     	;# 
  5266  0392                     	;# 
  5267  040C                     	;# 
  5268  040D                     	;# 
  5269  040E                     	;# 
  5270  040F                     	;# 
  5271  0410                     	;# 
  5272  0411                     	;# 
  5273  0416                     	;# 
  5274  0416                     	;# 
  5275  0417                     	;# 
  5276  0418                     	;# 
  5277  0418                     	;# 
  5278  0419                     	;# 
  5279  041A                     	;# 
  5280  041A                     	;# 
  5281  041B                     	;# 
  5282  041C                     	;# 
  5283  041C                     	;# 
  5284  041D                     	;# 
  5285  041E                     	;# 
  5286  041F                     	;# 
  5287  048C                     	;# 
  5288  048C                     	;# 
  5289  048D                     	;# 
  5290  048E                     	;# 
  5291  048F                     	;# 
  5292  048F                     	;# 
  5293  0490                     	;# 
  5294  0491                     	;# 
  5295  0492                     	;# 
  5296  0492                     	;# 
  5297  0493                     	;# 
  5298  0494                     	;# 
  5299  0495                     	;# 
  5300  0495                     	;# 
  5301  0496                     	;# 
  5302  0497                     	;# 
  5303  0498                     	;# 
  5304  0499                     	;# 
  5305  049A                     	;# 
  5306  049B                     	;# 
  5307  049C                     	;# 
  5308  049D                     	;# 
  5309  050C                     	;# 
  5310  050C                     	;# 
  5311  050D                     	;# 
  5312  050E                     	;# 
  5313  050F                     	;# 
  5314  050F                     	;# 
  5315  0510                     	;# 
  5316  0511                     	;# 
  5317  0512                     	;# 
  5318  0512                     	;# 
  5319  0513                     	;# 
  5320  0514                     	;# 
  5321  0515                     	;# 
  5322  0515                     	;# 
  5323  0516                     	;# 
  5324  0517                     	;# 
  5325  0518                     	;# 
  5326  0519                     	;# 
  5327  051A                     	;# 
  5328  051B                     	;# 
  5329  051C                     	;# 
  5330  051D                     	;# 
  5331  058C                     	;# 
  5332  058C                     	;# 
  5333  058D                     	;# 
  5334  058E                     	;# 
  5335  058F                     	;# 
  5336  058F                     	;# 
  5337  0590                     	;# 
  5338  0591                     	;# 
  5339  0592                     	;# 
  5340  0593                     	;# 
  5341  060C                     	;# 
  5342  060D                     	;# 
  5343  060E                     	;# 
  5344  060F                     	;# 
  5345  0610                     	;# 
  5346  0611                     	;# 
  5347  0612                     	;# 
  5348  0613                     	;# 
  5349  0614                     	;# 
  5350  0616                     	;# 
  5351  0617                     	;# 
  5352  0618                     	;# 
  5353  0619                     	;# 
  5354  061A                     	;# 
  5355  061B                     	;# 
  5356  061C                     	;# 
  5357  061D                     	;# 
  5358  061E                     	;# 
  5359  068C                     	;# 
  5360  068D                     	;# 
  5361  068E                     	;# 
  5362  068F                     	;# 
  5363  0690                     	;# 
  5364  0691                     	;# 
  5365  0692                     	;# 
  5366  0693                     	;# 
  5367  0694                     	;# 
  5368  070C                     	;# 
  5369  070D                     	;# 
  5370  070E                     	;# 
  5371  070F                     	;# 
  5372  0710                     	;# 
  5373  0711                     	;# 
  5374  0712                     	;# 
  5375  0713                     	;# 
  5376  0714                     	;# 
  5377  0716                     	;# 
  5378  0717                     	;# 
  5379  0718                     	;# 
  5380  0719                     	;# 
  5381  071A                     	;# 
  5382  071B                     	;# 
  5383  071C                     	;# 
  5384  071D                     	;# 
  5385  071E                     	;# 
  5386  0796                     	;# 
  5387  0797                     	;# 
  5388  0798                     	;# 
  5389  0799                     	;# 
  5390  079A                     	;# 
  5391  079B                     	;# 
  5392  080C                     	;# 
  5393  080D                     	;# 
  5394  080E                     	;# 
  5395  080F                     	;# 
  5396  0810                     	;# 
  5397  0811                     	;# 
  5398  0812                     	;# 
  5399  0813                     	;# 
  5400  0814                     	;# 
  5401  081A                     	;# 
  5402  081B                     	;# 
  5403  081C                     	;# 
  5404  081D                     	;# 
  5405  081E                     	;# 
  5406  081F                     	;# 
  5407  088C                     	;# 
  5408  088D                     	;# 
  5409  088E                     	;# 
  5410  088F                     	;# 
  5411  0890                     	;# 
  5412  0891                     	;# 
  5413  0892                     	;# 
  5414  0893                     	;# 
  5415  0895                     	;# 
  5416  0896                     	;# 
  5417  0897                     	;# 
  5418  0898                     	;# 
  5419  0899                     	;# 
  5420  089A                     	;# 
  5421  089B                     	;# 
  5422  090C                     	;# 
  5423  090E                     	;# 
  5424  090F                     	;# 
  5425  091F                     	;# 
  5426  091F                     	;# 
  5427  098F                     	;# 
  5428  098F                     	;# 
  5429  0990                     	;# 
  5430  0991                     	;# 
  5431  0992                     	;# 
  5432  0993                     	;# 
  5433  0994                     	;# 
  5434  0995                     	;# 
  5435  0996                     	;# 
  5436  0997                     	;# 
  5437  0E0F                     	;# 
  5438  0E10                     	;# 
  5439  0E11                     	;# 
  5440  0E12                     	;# 
  5441  0E13                     	;# 
  5442  0E14                     	;# 
  5443  0E15                     	;# 
  5444  0E16                     	;# 
  5445  0E17                     	;# 
  5446  0E18                     	;# 
  5447  0E19                     	;# 
  5448  0E1A                     	;# 
  5449  0E1B                     	;# 
  5450  0E1C                     	;# 
  5451  0E1D                     	;# 
  5452  0E1E                     	;# 
  5453  0E1F                     	;# 
  5454  0E20                     	;# 
  5455  0E21                     	;# 
  5456  0E22                     	;# 
  5457  0E23                     	;# 
  5458  0E24                     	;# 
  5459  0E25                     	;# 
  5460  0E26                     	;# 
  5461  0E27                     	;# 
  5462  0E28                     	;# 
  5463  0E29                     	;# 
  5464  0E2A                     	;# 
  5465  0E2B                     	;# 
  5466  0E2C                     	;# 
  5467  0E2D                     	;# 
  5468  0E2E                     	;# 
  5469  0E2F                     	;# 
  5470  0E30                     	;# 
  5471  0E31                     	;# 
  5472  0E32                     	;# 
  5473  0E33                     	;# 
  5474  0E34                     	;# 
  5475  0E35                     	;# 
  5476  0E36                     	;# 
  5477  0E37                     	;# 
  5478  0E8F                     	;# 
  5479  0E90                     	;# 
  5480  0E91                     	;# 
  5481  0E92                     	;# 
  5482  0E93                     	;# 
  5483  0E94                     	;# 
  5484  0E95                     	;# 
  5485  0E96                     	;# 
  5486  0E97                     	;# 
  5487  0E9C                     	;# 
  5488  0E9D                     	;# 
  5489  0E9E                     	;# 
  5490  0EA1                     	;# 
  5491  0EA2                     	;# 
  5492  0EA3                     	;# 
  5493  0EA4                     	;# 
  5494  0EA5                     	;# 
  5495  0EA9                     	;# 
  5496  0EAA                     	;# 
  5497  0EAB                     	;# 
  5498  0EAC                     	;# 
  5499  0EB1                     	;# 
  5500  0EB2                     	;# 
  5501  0EB3                     	;# 
  5502  0EB8                     	;# 
  5503  0EB9                     	;# 
  5504  0EBA                     	;# 
  5505  0EBB                     	;# 
  5506  0EBC                     	;# 
  5507  0EBD                     	;# 
  5508  0EBE                     	;# 
  5509  0EC3                     	;# 
  5510  0EC5                     	;# 
  5511  0EC6                     	;# 
  5512  0EC7                     	;# 
  5513  0EC8                     	;# 
  5514  0EC9                     	;# 
  5515  0ECA                     	;# 
  5516  0ECB                     	;# 
  5517  0ECC                     	;# 
  5518  0F10                     	;# 
  5519  0F11                     	;# 
  5520  0F12                     	;# 
  5521  0F13                     	;# 
  5522  0F14                     	;# 
  5523  0F15                     	;# 
  5524  0F16                     	;# 
  5525  0F17                     	;# 
  5526  0F18                     	;# 
  5527  0F19                     	;# 
  5528  0F1A                     	;# 
  5529  0F1B                     	;# 
  5530  0F1C                     	;# 
  5531  0F1D                     	;# 
  5532  0F1E                     	;# 
  5533  0F1F                     	;# 
  5534  0F20                     	;# 
  5535  0F21                     	;# 
  5536  0F22                     	;# 
  5537  0F23                     	;# 
  5538  0F24                     	;# 
  5539  0F25                     	;# 
  5540  0F26                     	;# 
  5541  0F27                     	;# 
  5542  0F28                     	;# 
  5543  0F29                     	;# 
  5544  0F2A                     	;# 
  5545  0F2B                     	;# 
  5546  0F2C                     	;# 
  5547  0F2D                     	;# 
  5548  0F2E                     	;# 
  5549  0F2F                     	;# 
  5550  0F30                     	;# 
  5551  0F31                     	;# 
  5552  0F32                     	;# 
  5553  0F38                     	;# 
  5554  0F39                     	;# 
  5555  0F3A                     	;# 
  5556  0F3B                     	;# 
  5557  0F3C                     	;# 
  5558  0F3D                     	;# 
  5559  0F3E                     	;# 
  5560  0F3F                     	;# 
  5561  0F40                     	;# 
  5562  0F41                     	;# 
  5563  0F43                     	;# 
  5564  0F44                     	;# 
  5565  0F45                     	;# 
  5566  0F46                     	;# 
  5567  0F47                     	;# 
  5568  0F48                     	;# 
  5569  0F49                     	;# 
  5570  0F4A                     	;# 
  5571  0F4B                     	;# 
  5572  0F4C                     	;# 
  5573  0F4E                     	;# 
  5574  0F4F                     	;# 
  5575  0F50                     	;# 
  5576  0F51                     	;# 
  5577  0F52                     	;# 
  5578  0F53                     	;# 
  5579  0F54                     	;# 
  5580  0F55                     	;# 
  5581  0F56                     	;# 
  5582  0F57                     	;# 
  5583  0F59                     	;# 
  5584  0F5A                     	;# 
  5585  0F5B                     	;# 
  5586  0F5C                     	;# 
  5587  0F5D                     	;# 
  5588  0F61                     	;# 
  5589  0F62                     	;# 
  5590  0F64                     	;# 
  5591  0F65                     	;# 
  5592  0F66                     	;# 
  5593  0F67                     	;# 
  5594  0F68                     	;# 
  5595  0F69                     	;# 
  5596  0F6A                     	;# 
  5597  0F6B                     	;# 
  5598  0F6C                     	;# 
  5599  0F6D                     	;# 
  5600  0FE4                     	;# 
  5601  0FE5                     	;# 
  5602  0FE6                     	;# 
  5603  0FE7                     	;# 
  5604  0FE8                     	;# 
  5605  0FE9                     	;# 
  5606  0FEA                     	;# 
  5607  0FEB                     	;# 
  5608  0FED                     	;# 
  5609  0FEE                     	;# 
  5610  0FEF                     	;# 
  5611  0000                     	;# 
  5612  0001                     	;# 
  5613  0002                     	;# 
  5614  0003                     	;# 
  5615  0004                     	;# 
  5616  0005                     	;# 
  5617  0006                     	;# 
  5618  0007                     	;# 
  5619  0008                     	;# 
  5620  0009                     	;# 
  5621  000A                     	;# 
  5622  000B                     	;# 
  5623  000C                     	;# 
  5624  000D                     	;# 
  5625  000E                     	;# 
  5626  000F                     	;# 
  5627  0010                     	;# 
  5628  0011                     	;# 
  5629  0012                     	;# 
  5630  0013                     	;# 
  5631  0014                     	;# 
  5632  0015                     	;# 
  5633  0016                     	;# 
  5634  0017                     	;# 
  5635  0018                     	;# 
  5636  0019                     	;# 
  5637  001A                     	;# 
  5638  001C                     	;# 
  5639  001C                     	;# 
  5640  001D                     	;# 
  5641  001D                     	;# 
  5642  001E                     	;# 
  5643  001F                     	;# 
  5644  008C                     	;# 
  5645  008C                     	;# 
  5646  008D                     	;# 
  5647  008E                     	;# 
  5648  008E                     	;# 
  5649  008F                     	;# 
  5650  0090                     	;# 
  5651  0090                     	;# 
  5652  0091                     	;# 
  5653  0093                     	;# 
  5654  0094                     	;# 
  5655  0095                     	;# 
  5656  0096                     	;# 
  5657  0097                     	;# 
  5658  0098                     	;# 
  5659  0099                     	;# 
  5660  009A                     	;# 
  5661  009B                     	;# 
  5662  009C                     	;# 
  5663  009D                     	;# 
  5664  009E                     	;# 
  5665  010C                     	;# 
  5666  010D                     	;# 
  5667  010E                     	;# 
  5668  010E                     	;# 
  5669  010F                     	;# 
  5670  0110                     	;# 
  5671  0110                     	;# 
  5672  0111                     	;# 
  5673  0112                     	;# 
  5674  0112                     	;# 
  5675  0113                     	;# 
  5676  0114                     	;# 
  5677  0114                     	;# 
  5678  0115                     	;# 
  5679  0116                     	;# 
  5680  0116                     	;# 
  5681  0117                     	;# 
  5682  0119                     	;# 
  5683  0119                     	;# 
  5684  0119                     	;# 
  5685  011A                     	;# 
  5686  011A                     	;# 
  5687  011A                     	;# 
  5688  011B                     	;# 
  5689  011B                     	;# 
  5690  011B                     	;# 
  5691  011B                     	;# 
  5692  011B                     	;# 
  5693  011C                     	;# 
  5694  011C                     	;# 
  5695  011C                     	;# 
  5696  011D                     	;# 
  5697  011D                     	;# 
  5698  011D                     	;# 
  5699  011E                     	;# 
  5700  011E                     	;# 
  5701  011E                     	;# 
  5702  011F                     	;# 
  5703  011F                     	;# 
  5704  011F                     	;# 
  5705  011F                     	;# 
  5706  011F                     	;# 
  5707  018C                     	;# 
  5708  018D                     	;# 
  5709  018E                     	;# 
  5710  018F                     	;# 
  5711  0190                     	;# 
  5712  0191                     	;# 
  5713  0192                     	;# 
  5714  0196                     	;# 
  5715  0197                     	;# 
  5716  0198                     	;# 
  5717  0199                     	;# 
  5718  019A                     	;# 
  5719  019B                     	;# 
  5720  019C                     	;# 
  5721  020C                     	;# 
  5722  020C                     	;# 
  5723  020D                     	;# 
  5724  020E                     	;# 
  5725  020F                     	;# 
  5726  020F                     	;# 
  5727  0210                     	;# 
  5728  0210                     	;# 
  5729  0211                     	;# 
  5730  0211                     	;# 
  5731  0212                     	;# 
  5732  0212                     	;# 
  5733  0213                     	;# 
  5734  0214                     	;# 
  5735  0215                     	;# 
  5736  0215                     	;# 
  5737  0216                     	;# 
  5738  0216                     	;# 
  5739  0217                     	;# 
  5740  0217                     	;# 
  5741  0218                     	;# 
  5742  0218                     	;# 
  5743  0219                     	;# 
  5744  021A                     	;# 
  5745  021B                     	;# 
  5746  021B                     	;# 
  5747  021C                     	;# 
  5748  021C                     	;# 
  5749  021D                     	;# 
  5750  021D                     	;# 
  5751  021E                     	;# 
  5752  021F                     	;# 
  5753  028C                     	;# 
  5754  028C                     	;# 
  5755  028D                     	;# 
  5756  028D                     	;# 
  5757  028E                     	;# 
  5758  028F                     	;# 
  5759  0290                     	;# 
  5760  0290                     	;# 
  5761  0291                     	;# 
  5762  0292                     	;# 
  5763  0292                     	;# 
  5764  0293                     	;# 
  5765  0293                     	;# 
  5766  0294                     	;# 
  5767  0295                     	;# 
  5768  0296                     	;# 
  5769  0296                     	;# 
  5770  0297                     	;# 
  5771  0298                     	;# 
  5772  0298                     	;# 
  5773  0299                     	;# 
  5774  0299                     	;# 
  5775  029A                     	;# 
  5776  029B                     	;# 
  5777  029C                     	;# 
  5778  029C                     	;# 
  5779  029D                     	;# 
  5780  030C                     	;# 
  5781  030C                     	;# 
  5782  030D                     	;# 
  5783  030E                     	;# 
  5784  030F                     	;# 
  5785  0310                     	;# 
  5786  0310                     	;# 
  5787  0311                     	;# 
  5788  0312                     	;# 
  5789  0313                     	;# 
  5790  0314                     	;# 
  5791  0314                     	;# 
  5792  0315                     	;# 
  5793  0316                     	;# 
  5794  0317                     	;# 
  5795  0318                     	;# 
  5796  0318                     	;# 
  5797  0319                     	;# 
  5798  031A                     	;# 
  5799  031B                     	;# 
  5800  031C                     	;# 
  5801  031C                     	;# 
  5802  031D                     	;# 
  5803  031E                     	;# 
  5804  031F                     	;# 
  5805  038C                     	;# 
  5806  038C                     	;# 
  5807  038D                     	;# 
  5808  038E                     	;# 
  5809  0390                     	;# 
  5810  0390                     	;# 
  5811  0391                     	;# 
  5812  0392                     	;# 
  5813  040C                     	;# 
  5814  040D                     	;# 
  5815  040E                     	;# 
  5816  040F                     	;# 
  5817  0410                     	;# 
  5818  0411                     	;# 
  5819  0416                     	;# 
  5820  0416                     	;# 
  5821  0417                     	;# 
  5822  0418                     	;# 
  5823  0418                     	;# 
  5824  0419                     	;# 
  5825  041A                     	;# 
  5826  041A                     	;# 
  5827  041B                     	;# 
  5828  041C                     	;# 
  5829  041C                     	;# 
  5830  041D                     	;# 
  5831  041E                     	;# 
  5832  041F                     	;# 
  5833  048C                     	;# 
  5834  048C                     	;# 
  5835  048D                     	;# 
  5836  048E                     	;# 
  5837  048F                     	;# 
  5838  048F                     	;# 
  5839  0490                     	;# 
  5840  0491                     	;# 
  5841  0492                     	;# 
  5842  0492                     	;# 
  5843  0493                     	;# 
  5844  0494                     	;# 
  5845  0495                     	;# 
  5846  0495                     	;# 
  5847  0496                     	;# 
  5848  0497                     	;# 
  5849  0498                     	;# 
  5850  0499                     	;# 
  5851  049A                     	;# 
  5852  049B                     	;# 
  5853  049C                     	;# 
  5854  049D                     	;# 
  5855  050C                     	;# 
  5856  050C                     	;# 
  5857  050D                     	;# 
  5858  050E                     	;# 
  5859  050F                     	;# 
  5860  050F                     	;# 
  5861  0510                     	;# 
  5862  0511                     	;# 
  5863  0512                     	;# 
  5864  0512                     	;# 
  5865  0513                     	;# 
  5866  0514                     	;# 
  5867  0515                     	;# 
  5868  0515                     	;# 
  5869  0516                     	;# 
  5870  0517                     	;# 
  5871  0518                     	;# 
  5872  0519                     	;# 
  5873  051A                     	;# 
  5874  051B                     	;# 
  5875  051C                     	;# 
  5876  051D                     	;# 
  5877  058C                     	;# 
  5878  058C                     	;# 
  5879  058D                     	;# 
  5880  058E                     	;# 
  5881  058F                     	;# 
  5882  058F                     	;# 
  5883  0590                     	;# 
  5884  0591                     	;# 
  5885  0592                     	;# 
  5886  0593                     	;# 
  5887  060C                     	;# 
  5888  060D                     	;# 
  5889  060E                     	;# 
  5890  060F                     	;# 
  5891  0610                     	;# 
  5892  0611                     	;# 
  5893  0612                     	;# 
  5894  0613                     	;# 
  5895  0614                     	;# 
  5896  0616                     	;# 
  5897  0617                     	;# 
  5898  0618                     	;# 
  5899  0619                     	;# 
  5900  061A                     	;# 
  5901  061B                     	;# 
  5902  061C                     	;# 
  5903  061D                     	;# 
  5904  061E                     	;# 
  5905  068C                     	;# 
  5906  068D                     	;# 
  5907  068E                     	;# 
  5908  068F                     	;# 
  5909  0690                     	;# 
  5910  0691                     	;# 
  5911  0692                     	;# 
  5912  0693                     	;# 
  5913  0694                     	;# 
  5914  070C                     	;# 
  5915  070D                     	;# 
  5916  070E                     	;# 
  5917  070F                     	;# 
  5918  0710                     	;# 
  5919  0711                     	;# 
  5920  0712                     	;# 
  5921  0713                     	;# 
  5922  0714                     	;# 
  5923  0716                     	;# 
  5924  0717                     	;# 
  5925  0718                     	;# 
  5926  0719                     	;# 
  5927  071A                     	;# 
  5928  071B                     	;# 
  5929  071C                     	;# 
  5930  071D                     	;# 
  5931  071E                     	;# 
  5932  0796                     	;# 
  5933  0797                     	;# 
  5934  0798                     	;# 
  5935  0799                     	;# 
  5936  079A                     	;# 
  5937  079B                     	;# 
  5938  080C                     	;# 
  5939  080D                     	;# 
  5940  080E                     	;# 
  5941  080F                     	;# 
  5942  0810                     	;# 
  5943  0811                     	;# 
  5944  0812                     	;# 
  5945  0813                     	;# 
  5946  0814                     	;# 
  5947  081A                     	;# 
  5948  081B                     	;# 
  5949  081C                     	;# 
  5950  081D                     	;# 
  5951  081E                     	;# 
  5952  081F                     	;# 
  5953  088C                     	;# 
  5954  088D                     	;# 
  5955  088E                     	;# 
  5956  088F                     	;# 
  5957  0890                     	;# 
  5958  0891                     	;# 
  5959  0892                     	;# 
  5960  0893                     	;# 
  5961  0895                     	;# 
  5962  0896                     	;# 
  5963  0897                     	;# 
  5964  0898                     	;# 
  5965  0899                     	;# 
  5966  089A                     	;# 
  5967  089B                     	;# 
  5968  090C                     	;# 
  5969  090E                     	;# 
  5970  090F                     	;# 
  5971  091F                     	;# 
  5972  091F                     	;# 
  5973  098F                     	;# 
  5974  098F                     	;# 
  5975  0990                     	;# 
  5976  0991                     	;# 
  5977  0992                     	;# 
  5978  0993                     	;# 
  5979  0994                     	;# 
  5980  0995                     	;# 
  5981  0996                     	;# 
  5982  0997                     	;# 
  5983  0E0F                     	;# 
  5984  0E10                     	;# 
  5985  0E11                     	;# 
  5986  0E12                     	;# 
  5987  0E13                     	;# 
  5988  0E14                     	;# 
  5989  0E15                     	;# 
  5990  0E16                     	;# 
  5991  0E17                     	;# 
  5992  0E18                     	;# 
  5993  0E19                     	;# 
  5994  0E1A                     	;# 
  5995  0E1B                     	;# 
  5996  0E1C                     	;# 
  5997  0E1D                     	;# 
  5998  0E1E                     	;# 
  5999  0E1F                     	;# 
  6000  0E20                     	;# 
  6001  0E21                     	;# 
  6002  0E22                     	;# 
  6003  0E23                     	;# 
  6004  0E24                     	;# 
  6005  0E25                     	;# 
  6006  0E26                     	;# 
  6007  0E27                     	;# 
  6008  0E28                     	;# 
  6009  0E29                     	;# 
  6010  0E2A                     	;# 
  6011  0E2B                     	;# 
  6012  0E2C                     	;# 
  6013  0E2D                     	;# 
  6014  0E2E                     	;# 
  6015  0E2F                     	;# 
  6016  0E30                     	;# 
  6017  0E31                     	;# 
  6018  0E32                     	;# 
  6019  0E33                     	;# 
  6020  0E34                     	;# 
  6021  0E35                     	;# 
  6022  0E36                     	;# 
  6023  0E37                     	;# 
  6024  0E8F                     	;# 
  6025  0E90                     	;# 
  6026  0E91                     	;# 
  6027  0E92                     	;# 
  6028  0E93                     	;# 
  6029  0E94                     	;# 
  6030  0E95                     	;# 
  6031  0E96                     	;# 
  6032  0E97                     	;# 
  6033  0E9C                     	;# 
  6034  0E9D                     	;# 
  6035  0E9E                     	;# 
  6036  0EA1                     	;# 
  6037  0EA2                     	;# 
  6038  0EA3                     	;# 
  6039  0EA4                     	;# 
  6040  0EA5                     	;# 
  6041  0EA9                     	;# 
  6042  0EAA                     	;# 
  6043  0EAB                     	;# 
  6044  0EAC                     	;# 
  6045  0EB1                     	;# 
  6046  0EB2                     	;# 
  6047  0EB3                     	;# 
  6048  0EB8                     	;# 
  6049  0EB9                     	;# 
  6050  0EBA                     	;# 
  6051  0EBB                     	;# 
  6052  0EBC                     	;# 
  6053  0EBD                     	;# 
  6054  0EBE                     	;# 
  6055  0EC3                     	;# 
  6056  0EC5                     	;# 
  6057  0EC6                     	;# 
  6058  0EC7                     	;# 
  6059  0EC8                     	;# 
  6060  0EC9                     	;# 
  6061  0ECA                     	;# 
  6062  0ECB                     	;# 
  6063  0ECC                     	;# 
  6064  0F10                     	;# 
  6065  0F11                     	;# 
  6066  0F12                     	;# 
  6067  0F13                     	;# 
  6068  0F14                     	;# 
  6069  0F15                     	;# 
  6070  0F16                     	;# 
  6071  0F17                     	;# 
  6072  0F18                     	;# 
  6073  0F19                     	;# 
  6074  0F1A                     	;# 
  6075  0F1B                     	;# 
  6076  0F1C                     	;# 
  6077  0F1D                     	;# 
  6078  0F1E                     	;# 
  6079  0F1F                     	;# 
  6080  0F20                     	;# 
  6081  0F21                     	;# 
  6082  0F22                     	;# 
  6083  0F23                     	;# 
  6084  0F24                     	;# 
  6085  0F25                     	;# 
  6086  0F26                     	;# 
  6087  0F27                     	;# 
  6088  0F28                     	;# 
  6089  0F29                     	;# 
  6090  0F2A                     	;# 
  6091  0F2B                     	;# 
  6092  0F2C                     	;# 
  6093  0F2D                     	;# 
  6094  0F2E                     	;# 
  6095  0F2F                     	;# 
  6096  0F30                     	;# 
  6097  0F31                     	;# 
  6098  0F32                     	;# 
  6099  0F38                     	;# 
  6100  0F39                     	;# 
  6101  0F3A                     	;# 
  6102  0F3B                     	;# 
  6103  0F3C                     	;# 
  6104  0F3D                     	;# 
  6105  0F3E                     	;# 
  6106  0F3F                     	;# 
  6107  0F40                     	;# 
  6108  0F41                     	;# 
  6109  0F43                     	;# 
  6110  0F44                     	;# 
  6111  0F45                     	;# 
  6112  0F46                     	;# 
  6113  0F47                     	;# 
  6114  0F48                     	;# 
  6115  0F49                     	;# 
  6116  0F4A                     	;# 
  6117  0F4B                     	;# 
  6118  0F4C                     	;# 
  6119  0F4E                     	;# 
  6120  0F4F                     	;# 
  6121  0F50                     	;# 
  6122  0F51                     	;# 
  6123  0F52                     	;# 
  6124  0F53                     	;# 
  6125  0F54                     	;# 
  6126  0F55                     	;# 
  6127  0F56                     	;# 
  6128  0F57                     	;# 
  6129  0F59                     	;# 
  6130  0F5A                     	;# 
  6131  0F5B                     	;# 
  6132  0F5C                     	;# 
  6133  0F5D                     	;# 
  6134  0F61                     	;# 
  6135  0F62                     	;# 
  6136  0F64                     	;# 
  6137  0F65                     	;# 
  6138  0F66                     	;# 
  6139  0F67                     	;# 
  6140  0F68                     	;# 
  6141  0F69                     	;# 
  6142  0F6A                     	;# 
  6143  0F6B                     	;# 
  6144  0F6C                     	;# 
  6145  0F6D                     	;# 
  6146  0FE4                     	;# 
  6147  0FE5                     	;# 
  6148  0FE6                     	;# 
  6149  0FE7                     	;# 
  6150  0FE8                     	;# 
  6151  0FE9                     	;# 
  6152  0FEA                     	;# 
  6153  0FEB                     	;# 
  6154  0FED                     	;# 
  6155  0FEE                     	;# 
  6156  0FEF                     	;# 
  6157  0000                     	;# 
  6158  0001                     	;# 
  6159  0002                     	;# 
  6160  0003                     	;# 
  6161  0004                     	;# 
  6162  0005                     	;# 
  6163  0006                     	;# 
  6164  0007                     	;# 
  6165  0008                     	;# 
  6166  0009                     	;# 
  6167  000A                     	;# 
  6168  000B                     	;# 
  6169  000C                     	;# 
  6170  000D                     	;# 
  6171  000E                     	;# 
  6172  000F                     	;# 
  6173  0010                     	;# 
  6174  0011                     	;# 
  6175  0012                     	;# 
  6176  0013                     	;# 
  6177  0014                     	;# 
  6178  0015                     	;# 
  6179  0016                     	;# 
  6180  0017                     	;# 
  6181  0018                     	;# 
  6182  0019                     	;# 
  6183  001A                     	;# 
  6184  001C                     	;# 
  6185  001C                     	;# 
  6186  001D                     	;# 
  6187  001D                     	;# 
  6188  001E                     	;# 
  6189  001F                     	;# 
  6190  008C                     	;# 
  6191  008C                     	;# 
  6192  008D                     	;# 
  6193  008E                     	;# 
  6194  008E                     	;# 
  6195  008F                     	;# 
  6196  0090                     	;# 
  6197  0090                     	;# 
  6198  0091                     	;# 
  6199  0093                     	;# 
  6200  0094                     	;# 
  6201  0095                     	;# 
  6202  0096                     	;# 
  6203  0097                     	;# 
  6204  0098                     	;# 
  6205  0099                     	;# 
  6206  009A                     	;# 
  6207  009B                     	;# 
  6208  009C                     	;# 
  6209  009D                     	;# 
  6210  009E                     	;# 
  6211  010C                     	;# 
  6212  010D                     	;# 
  6213  010E                     	;# 
  6214  010E                     	;# 
  6215  010F                     	;# 
  6216  0110                     	;# 
  6217  0110                     	;# 
  6218  0111                     	;# 
  6219  0112                     	;# 
  6220  0112                     	;# 
  6221  0113                     	;# 
  6222  0114                     	;# 
  6223  0114                     	;# 
  6224  0115                     	;# 
  6225  0116                     	;# 
  6226  0116                     	;# 
  6227  0117                     	;# 
  6228  0119                     	;# 
  6229  0119                     	;# 
  6230  0119                     	;# 
  6231  011A                     	;# 
  6232  011A                     	;# 
  6233  011A                     	;# 
  6234  011B                     	;# 
  6235  011B                     	;# 
  6236  011B                     	;# 
  6237  011B                     	;# 
  6238  011B                     	;# 
  6239  011C                     	;# 
  6240  011C                     	;# 
  6241  011C                     	;# 
  6242  011D                     	;# 
  6243  011D                     	;# 
  6244  011D                     	;# 
  6245  011E                     	;# 
  6246  011E                     	;# 
  6247  011E                     	;# 
  6248  011F                     	;# 
  6249  011F                     	;# 
  6250  011F                     	;# 
  6251  011F                     	;# 
  6252  011F                     	;# 
  6253  018C                     	;# 
  6254  018D                     	;# 
  6255  018E                     	;# 
  6256  018F                     	;# 
  6257  0190                     	;# 
  6258  0191                     	;# 
  6259  0192                     	;# 
  6260  0196                     	;# 
  6261  0197                     	;# 
  6262  0198                     	;# 
  6263  0199                     	;# 
  6264  019A                     	;# 
  6265  019B                     	;# 
  6266  019C                     	;# 
  6267  020C                     	;# 
  6268  020C                     	;# 
  6269  020D                     	;# 
  6270  020E                     	;# 
  6271  020F                     	;# 
  6272  020F                     	;# 
  6273  0210                     	;# 
  6274  0210                     	;# 
  6275  0211                     	;# 
  6276  0211                     	;# 
  6277  0212                     	;# 
  6278  0212                     	;# 
  6279  0213                     	;# 
  6280  0214                     	;# 
  6281  0215                     	;# 
  6282  0215                     	;# 
  6283  0216                     	;# 
  6284  0216                     	;# 
  6285  0217                     	;# 
  6286  0217                     	;# 
  6287  0218                     	;# 
  6288  0218                     	;# 
  6289  0219                     	;# 
  6290  021A                     	;# 
  6291  021B                     	;# 
  6292  021B                     	;# 
  6293  021C                     	;# 
  6294  021C                     	;# 
  6295  021D                     	;# 
  6296  021D                     	;# 
  6297  021E                     	;# 
  6298  021F                     	;# 
  6299  028C                     	;# 
  6300  028C                     	;# 
  6301  028D                     	;# 
  6302  028D                     	;# 
  6303  028E                     	;# 
  6304  028F                     	;# 
  6305  0290                     	;# 
  6306  0290                     	;# 
  6307  0291                     	;# 
  6308  0292                     	;# 
  6309  0292                     	;# 
  6310  0293                     	;# 
  6311  0293                     	;# 
  6312  0294                     	;# 
  6313  0295                     	;# 
  6314  0296                     	;# 
  6315  0296                     	;# 
  6316  0297                     	;# 
  6317  0298                     	;# 
  6318  0298                     	;# 
  6319  0299                     	;# 
  6320  0299                     	;# 
  6321  029A                     	;# 
  6322  029B                     	;# 
  6323  029C                     	;# 
  6324  029C                     	;# 
  6325  029D                     	;# 
  6326  030C                     	;# 
  6327  030C                     	;# 
  6328  030D                     	;# 
  6329  030E                     	;# 
  6330  030F                     	;# 
  6331  0310                     	;# 
  6332  0310                     	;# 
  6333  0311                     	;# 
  6334  0312                     	;# 
  6335  0313                     	;# 
  6336  0314                     	;# 
  6337  0314                     	;# 
  6338  0315                     	;# 
  6339  0316                     	;# 
  6340  0317                     	;# 
  6341  0318                     	;# 
  6342  0318                     	;# 
  6343  0319                     	;# 
  6344  031A                     	;# 
  6345  031B                     	;# 
  6346  031C                     	;# 
  6347  031C                     	;# 
  6348  031D                     	;# 
  6349  031E                     	;# 
  6350  031F                     	;# 
  6351  038C                     	;# 
  6352  038C                     	;# 
  6353  038D                     	;# 
  6354  038E                     	;# 
  6355  0390                     	;# 
  6356  0390                     	;# 
  6357  0391                     	;# 
  6358  0392                     	;# 
  6359  040C                     	;# 
  6360  040D                     	;# 
  6361  040E                     	;# 
  6362  040F                     	;# 
  6363  0410                     	;# 
  6364  0411                     	;# 
  6365  0416                     	;# 
  6366  0416                     	;# 
  6367  0417                     	;# 
  6368  0418                     	;# 
  6369  0418                     	;# 
  6370  0419                     	;# 
  6371  041A                     	;# 
  6372  041A                     	;# 
  6373  041B                     	;# 
  6374  041C                     	;# 
  6375  041C                     	;# 
  6376  041D                     	;# 
  6377  041E                     	;# 
  6378  041F                     	;# 
  6379  048C                     	;# 
  6380  048C                     	;# 
  6381  048D                     	;# 
  6382  048E                     	;# 
  6383  048F                     	;# 
  6384  048F                     	;# 
  6385  0490                     	;# 
  6386  0491                     	;# 
  6387  0492                     	;# 
  6388  0492                     	;# 
  6389  0493                     	;# 
  6390  0494                     	;# 
  6391  0495                     	;# 
  6392  0495                     	;# 
  6393  0496                     	;# 
  6394  0497                     	;# 
  6395  0498                     	;# 
  6396  0499                     	;# 
  6397  049A                     	;# 
  6398  049B                     	;# 
  6399  049C                     	;# 
  6400  049D                     	;# 
  6401  050C                     	;# 
  6402  050C                     	;# 
  6403  050D                     	;# 
  6404  050E                     	;# 
  6405  050F                     	;# 
  6406  050F                     	;# 
  6407  0510                     	;# 
  6408  0511                     	;# 
  6409  0512                     	;# 
  6410  0512                     	;# 
  6411  0513                     	;# 
  6412  0514                     	;# 
  6413  0515                     	;# 
  6414  0515                     	;# 
  6415  0516                     	;# 
  6416  0517                     	;# 
  6417  0518                     	;# 
  6418  0519                     	;# 
  6419  051A                     	;# 
  6420  051B                     	;# 
  6421  051C                     	;# 
  6422  051D                     	;# 
  6423  058C                     	;# 
  6424  058C                     	;# 
  6425  058D                     	;# 
  6426  058E                     	;# 
  6427  058F                     	;# 
  6428  058F                     	;# 
  6429  0590                     	;# 
  6430  0591                     	;# 
  6431  0592                     	;# 
  6432  0593                     	;# 
  6433  060C                     	;# 
  6434  060D                     	;# 
  6435  060E                     	;# 
  6436  060F                     	;# 
  6437  0610                     	;# 
  6438  0611                     	;# 
  6439  0612                     	;# 
  6440  0613                     	;# 
  6441  0614                     	;# 
  6442  0616                     	;# 
  6443  0617                     	;# 
  6444  0618                     	;# 
  6445  0619                     	;# 
  6446  061A                     	;# 
  6447  061B                     	;# 
  6448  061C                     	;# 
  6449  061D                     	;# 
  6450  061E                     	;# 
  6451  068C                     	;# 
  6452  068D                     	;# 
  6453  068E                     	;# 
  6454  068F                     	;# 
  6455  0690                     	;# 
  6456  0691                     	;# 
  6457  0692                     	;# 
  6458  0693                     	;# 
  6459  0694                     	;# 
  6460  070C                     	;# 
  6461  070D                     	;# 
  6462  070E                     	;# 
  6463  070F                     	;# 
  6464  0710                     	;# 
  6465  0711                     	;# 
  6466  0712                     	;# 
  6467  0713                     	;# 
  6468  0714                     	;# 
  6469  0716                     	;# 
  6470  0717                     	;# 
  6471  0718                     	;# 
  6472  0719                     	;# 
  6473  071A                     	;# 
  6474  071B                     	;# 
  6475  071C                     	;# 
  6476  071D                     	;# 
  6477  071E                     	;# 
  6478  0796                     	;# 
  6479  0797                     	;# 
  6480  0798                     	;# 
  6481  0799                     	;# 
  6482  079A                     	;# 
  6483  079B                     	;# 
  6484  080C                     	;# 
  6485  080D                     	;# 
  6486  080E                     	;# 
  6487  080F                     	;# 
  6488  0810                     	;# 
  6489  0811                     	;# 
  6490  0812                     	;# 
  6491  0813                     	;# 
  6492  0814                     	;# 
  6493  081A                     	;# 
  6494  081B                     	;# 
  6495  081C                     	;# 
  6496  081D                     	;# 
  6497  081E                     	;# 
  6498  081F                     	;# 
  6499  088C                     	;# 
  6500  088D                     	;# 
  6501  088E                     	;# 
  6502  088F                     	;# 
  6503  0890                     	;# 
  6504  0891                     	;# 
  6505  0892                     	;# 
  6506  0893                     	;# 
  6507  0895                     	;# 
  6508  0896                     	;# 
  6509  0897                     	;# 
  6510  0898                     	;# 
  6511  0899                     	;# 
  6512  089A                     	;# 
  6513  089B                     	;# 
  6514  090C                     	;# 
  6515  090E                     	;# 
  6516  090F                     	;# 
  6517  091F                     	;# 
  6518  091F                     	;# 
  6519  098F                     	;# 
  6520  098F                     	;# 
  6521  0990                     	;# 
  6522  0991                     	;# 
  6523  0992                     	;# 
  6524  0993                     	;# 
  6525  0994                     	;# 
  6526  0995                     	;# 
  6527  0996                     	;# 
  6528  0997                     	;# 
  6529  0E0F                     	;# 
  6530  0E10                     	;# 
  6531  0E11                     	;# 
  6532  0E12                     	;# 
  6533  0E13                     	;# 
  6534  0E14                     	;# 
  6535  0E15                     	;# 
  6536  0E16                     	;# 
  6537  0E17                     	;# 
  6538  0E18                     	;# 
  6539  0E19                     	;# 
  6540  0E1A                     	;# 
  6541  0E1B                     	;# 
  6542  0E1C                     	;# 
  6543  0E1D                     	;# 
  6544  0E1E                     	;# 
  6545  0E1F                     	;# 
  6546  0E20                     	;# 
  6547  0E21                     	;# 
  6548  0E22                     	;# 
  6549  0E23                     	;# 
  6550  0E24                     	;# 
  6551  0E25                     	;# 
  6552  0E26                     	;# 
  6553  0E27                     	;# 
  6554  0E28                     	;# 
  6555  0E29                     	;# 
  6556  0E2A                     	;# 
  6557  0E2B                     	;# 
  6558  0E2C                     	;# 
  6559  0E2D                     	;# 
  6560  0E2E                     	;# 
  6561  0E2F                     	;# 
  6562  0E30                     	;# 
  6563  0E31                     	;# 
  6564  0E32                     	;# 
  6565  0E33                     	;# 
  6566  0E34                     	;# 
  6567  0E35                     	;# 
  6568  0E36                     	;# 
  6569  0E37                     	;# 
  6570  0E8F                     	;# 
  6571  0E90                     	;# 
  6572  0E91                     	;# 
  6573  0E92                     	;# 
  6574  0E93                     	;# 
  6575  0E94                     	;# 
  6576  0E95                     	;# 
  6577  0E96                     	;# 
  6578  0E97                     	;# 
  6579  0E9C                     	;# 
  6580  0E9D                     	;# 
  6581  0E9E                     	;# 
  6582  0EA1                     	;# 
  6583  0EA2                     	;# 
  6584  0EA3                     	;# 
  6585  0EA4                     	;# 
  6586  0EA5                     	;# 
  6587  0EA9                     	;# 
  6588  0EAA                     	;# 
  6589  0EAB                     	;# 
  6590  0EAC                     	;# 
  6591  0EB1                     	;# 
  6592  0EB2                     	;# 
  6593  0EB3                     	;# 
  6594  0EB8                     	;# 
  6595  0EB9                     	;# 
  6596  0EBA                     	;# 
  6597  0EBB                     	;# 
  6598  0EBC                     	;# 
  6599  0EBD                     	;# 
  6600  0EBE                     	;# 
  6601  0EC3                     	;# 
  6602  0EC5                     	;# 
  6603  0EC6                     	;# 
  6604  0EC7                     	;# 
  6605  0EC8                     	;# 
  6606  0EC9                     	;# 
  6607  0ECA                     	;# 
  6608  0ECB                     	;# 
  6609  0ECC                     	;# 
  6610  0F10                     	;# 
  6611  0F11                     	;# 
  6612  0F12                     	;# 
  6613  0F13                     	;# 
  6614  0F14                     	;# 
  6615  0F15                     	;# 
  6616  0F16                     	;# 
  6617  0F17                     	;# 
  6618  0F18                     	;# 
  6619  0F19                     	;# 
  6620  0F1A                     	;# 
  6621  0F1B                     	;# 
  6622  0F1C                     	;# 
  6623  0F1D                     	;# 
  6624  0F1E                     	;# 
  6625  0F1F                     	;# 
  6626  0F20                     	;# 
  6627  0F21                     	;# 
  6628  0F22                     	;# 
  6629  0F23                     	;# 
  6630  0F24                     	;# 
  6631  0F25                     	;# 
  6632  0F26                     	;# 
  6633  0F27                     	;# 
  6634  0F28                     	;# 
  6635  0F29                     	;# 
  6636  0F2A                     	;# 
  6637  0F2B                     	;# 
  6638  0F2C                     	;# 
  6639  0F2D                     	;# 
  6640  0F2E                     	;# 
  6641  0F2F                     	;# 
  6642  0F30                     	;# 
  6643  0F31                     	;# 
  6644  0F32                     	;# 
  6645  0F38                     	;# 
  6646  0F39                     	;# 
  6647  0F3A                     	;# 
  6648  0F3B                     	;# 
  6649  0F3C                     	;# 
  6650  0F3D                     	;# 
  6651  0F3E                     	;# 
  6652  0F3F                     	;# 
  6653  0F40                     	;# 
  6654  0F41                     	;# 
  6655  0F43                     	;# 
  6656  0F44                     	;# 
  6657  0F45                     	;# 
  6658  0F46                     	;# 
  6659  0F47                     	;# 
  6660  0F48                     	;# 
  6661  0F49                     	;# 
  6662  0F4A                     	;# 
  6663  0F4B                     	;# 
  6664  0F4C                     	;# 
  6665  0F4E                     	;# 
  6666  0F4F                     	;# 
  6667  0F50                     	;# 
  6668  0F51                     	;# 
  6669  0F52                     	;# 
  6670  0F53                     	;# 
  6671  0F54                     	;# 
  6672  0F55                     	;# 
  6673  0F56                     	;# 
  6674  0F57                     	;# 
  6675  0F59                     	;# 
  6676  0F5A                     	;# 
  6677  0F5B                     	;# 
  6678  0F5C                     	;# 
  6679  0F5D                     	;# 
  6680  0F61                     	;# 
  6681  0F62                     	;# 
  6682  0F64                     	;# 
  6683  0F65                     	;# 
  6684  0F66                     	;# 
  6685  0F67                     	;# 
  6686  0F68                     	;# 
  6687  0F69                     	;# 
  6688  0F6A                     	;# 
  6689  0F6B                     	;# 
  6690  0F6C                     	;# 
  6691  0F6D                     	;# 
  6692  0FE4                     	;# 
  6693  0FE5                     	;# 
  6694  0FE6                     	;# 
  6695  0FE7                     	;# 
  6696  0FE8                     	;# 
  6697  0FE9                     	;# 
  6698  0FEA                     	;# 
  6699  0FEB                     	;# 
  6700  0FED                     	;# 
  6701  0FEE                     	;# 
  6702  0FEF                     	;# 
  6703  0000                     	;# 
  6704  0001                     	;# 
  6705  0002                     	;# 
  6706  0003                     	;# 
  6707  0004                     	;# 
  6708  0005                     	;# 
  6709  0006                     	;# 
  6710  0007                     	;# 
  6711  0008                     	;# 
  6712  0009                     	;# 
  6713  000A                     	;# 
  6714  000B                     	;# 
  6715  000C                     	;# 
  6716  000D                     	;# 
  6717  000E                     	;# 
  6718  000F                     	;# 
  6719  0010                     	;# 
  6720  0011                     	;# 
  6721  0012                     	;# 
  6722  0013                     	;# 
  6723  0014                     	;# 
  6724  0015                     	;# 
  6725  0016                     	;# 
  6726  0017                     	;# 
  6727  0018                     	;# 
  6728  0019                     	;# 
  6729  001A                     	;# 
  6730  001C                     	;# 
  6731  001C                     	;# 
  6732  001D                     	;# 
  6733  001D                     	;# 
  6734  001E                     	;# 
  6735  001F                     	;# 
  6736  008C                     	;# 
  6737  008C                     	;# 
  6738  008D                     	;# 
  6739  008E                     	;# 
  6740  008E                     	;# 
  6741  008F                     	;# 
  6742  0090                     	;# 
  6743  0090                     	;# 
  6744  0091                     	;# 
  6745  0093                     	;# 
  6746  0094                     	;# 
  6747  0095                     	;# 
  6748  0096                     	;# 
  6749  0097                     	;# 
  6750  0098                     	;# 
  6751  0099                     	;# 
  6752  009A                     	;# 
  6753  009B                     	;# 
  6754  009C                     	;# 
  6755  009D                     	;# 
  6756  009E                     	;# 
  6757  010C                     	;# 
  6758  010D                     	;# 
  6759  010E                     	;# 
  6760  010E                     	;# 
  6761  010F                     	;# 
  6762  0110                     	;# 
  6763  0110                     	;# 
  6764  0111                     	;# 
  6765  0112                     	;# 
  6766  0112                     	;# 
  6767  0113                     	;# 
  6768  0114                     	;# 
  6769  0114                     	;# 
  6770  0115                     	;# 
  6771  0116                     	;# 
  6772  0116                     	;# 
  6773  0117                     	;# 
  6774  0119                     	;# 
  6775  0119                     	;# 
  6776  0119                     	;# 
  6777  011A                     	;# 
  6778  011A                     	;# 
  6779  011A                     	;# 
  6780  011B                     	;# 
  6781  011B                     	;# 
  6782  011B                     	;# 
  6783  011B                     	;# 
  6784  011B                     	;# 
  6785  011C                     	;# 
  6786  011C                     	;# 
  6787  011C                     	;# 
  6788  011D                     	;# 
  6789  011D                     	;# 
  6790  011D                     	;# 
  6791  011E                     	;# 
  6792  011E                     	;# 
  6793  011E                     	;# 
  6794  011F                     	;# 
  6795  011F                     	;# 
  6796  011F                     	;# 
  6797  011F                     	;# 
  6798  011F                     	;# 
  6799  018C                     	;# 
  6800  018D                     	;# 
  6801  018E                     	;# 
  6802  018F                     	;# 
  6803  0190                     	;# 
  6804  0191                     	;# 
  6805  0192                     	;# 
  6806  0196                     	;# 
  6807  0197                     	;# 
  6808  0198                     	;# 
  6809  0199                     	;# 
  6810  019A                     	;# 
  6811  019B                     	;# 
  6812  019C                     	;# 
  6813  020C                     	;# 
  6814  020C                     	;# 
  6815  020D                     	;# 
  6816  020E                     	;# 
  6817  020F                     	;# 
  6818  020F                     	;# 
  6819  0210                     	;# 
  6820  0210                     	;# 
  6821  0211                     	;# 
  6822  0211                     	;# 
  6823  0212                     	;# 
  6824  0212                     	;# 
  6825  0213                     	;# 
  6826  0214                     	;# 
  6827  0215                     	;# 
  6828  0215                     	;# 
  6829  0216                     	;# 
  6830  0216                     	;# 
  6831  0217                     	;# 
  6832  0217                     	;# 
  6833  0218                     	;# 
  6834  0218                     	;# 
  6835  0219                     	;# 
  6836  021A                     	;# 
  6837  021B                     	;# 
  6838  021B                     	;# 
  6839  021C                     	;# 
  6840  021C                     	;# 
  6841  021D                     	;# 
  6842  021D                     	;# 
  6843  021E                     	;# 
  6844  021F                     	;# 
  6845  028C                     	;# 
  6846  028C                     	;# 
  6847  028D                     	;# 
  6848  028D                     	;# 
  6849  028E                     	;# 
  6850  028F                     	;# 
  6851  0290                     	;# 
  6852  0290                     	;# 
  6853  0291                     	;# 
  6854  0292                     	;# 
  6855  0292                     	;# 
  6856  0293                     	;# 
  6857  0293                     	;# 
  6858  0294                     	;# 
  6859  0295                     	;# 
  6860  0296                     	;# 
  6861  0296                     	;# 
  6862  0297                     	;# 
  6863  0298                     	;# 
  6864  0298                     	;# 
  6865  0299                     	;# 
  6866  0299                     	;# 
  6867  029A                     	;# 
  6868  029B                     	;# 
  6869  029C                     	;# 
  6870  029C                     	;# 
  6871  029D                     	;# 
  6872  030C                     	;# 
  6873  030C                     	;# 
  6874  030D                     	;# 
  6875  030E                     	;# 
  6876  030F                     	;# 
  6877  0310                     	;# 
  6878  0310                     	;# 
  6879  0311                     	;# 
  6880  0312                     	;# 
  6881  0313                     	;# 
  6882  0314                     	;# 
  6883  0314                     	;# 
  6884  0315                     	;# 
  6885  0316                     	;# 
  6886  0317                     	;# 
  6887  0318                     	;# 
  6888  0318                     	;# 
  6889  0319                     	;# 
  6890  031A                     	;# 
  6891  031B                     	;# 
  6892  031C                     	;# 
  6893  031C                     	;# 
  6894  031D                     	;# 
  6895  031E                     	;# 
  6896  031F                     	;# 
  6897  038C                     	;# 
  6898  038C                     	;# 
  6899  038D                     	;# 
  6900  038E                     	;# 
  6901  0390                     	;# 
  6902  0390                     	;# 
  6903  0391                     	;# 
  6904  0392                     	;# 
  6905  040C                     	;# 
  6906  040D                     	;# 
  6907  040E                     	;# 
  6908  040F                     	;# 
  6909  0410                     	;# 
  6910  0411                     	;# 
  6911  0416                     	;# 
  6912  0416                     	;# 
  6913  0417                     	;# 
  6914  0418                     	;# 
  6915  0418                     	;# 
  6916  0419                     	;# 
  6917  041A                     	;# 
  6918  041A                     	;# 
  6919  041B                     	;# 
  6920  041C                     	;# 
  6921  041C                     	;# 
  6922  041D                     	;# 
  6923  041E                     	;# 
  6924  041F                     	;# 
  6925  048C                     	;# 
  6926  048C                     	;# 
  6927  048D                     	;# 
  6928  048E                     	;# 
  6929  048F                     	;# 
  6930  048F                     	;# 
  6931  0490                     	;# 
  6932  0491                     	;# 
  6933  0492                     	;# 
  6934  0492                     	;# 
  6935  0493                     	;# 
  6936  0494                     	;# 
  6937  0495                     	;# 
  6938  0495                     	;# 
  6939  0496                     	;# 
  6940  0497                     	;# 
  6941  0498                     	;# 
  6942  0499                     	;# 
  6943  049A                     	;# 
  6944  049B                     	;# 
  6945  049C                     	;# 
  6946  049D                     	;# 
  6947  050C                     	;# 
  6948  050C                     	;# 
  6949  050D                     	;# 
  6950  050E                     	;# 
  6951  050F                     	;# 
  6952  050F                     	;# 
  6953  0510                     	;# 
  6954  0511                     	;# 
  6955  0512                     	;# 
  6956  0512                     	;# 
  6957  0513                     	;# 
  6958  0514                     	;# 
  6959  0515                     	;# 
  6960  0515                     	;# 
  6961  0516                     	;# 
  6962  0517                     	;# 
  6963  0518                     	;# 
  6964  0519                     	;# 
  6965  051A                     	;# 
  6966  051B                     	;# 
  6967  051C                     	;# 
  6968  051D                     	;# 
  6969  058C                     	;# 
  6970  058C                     	;# 
  6971  058D                     	;# 
  6972  058E                     	;# 
  6973  058F                     	;# 
  6974  058F                     	;# 
  6975  0590                     	;# 
  6976  0591                     	;# 
  6977  0592                     	;# 
  6978  0593                     	;# 
  6979  060C                     	;# 
  6980  060D                     	;# 
  6981  060E                     	;# 
  6982  060F                     	;# 
  6983  0610                     	;# 
  6984  0611                     	;# 
  6985  0612                     	;# 
  6986  0613                     	;# 
  6987  0614                     	;# 
  6988  0616                     	;# 
  6989  0617                     	;# 
  6990  0618                     	;# 
  6991  0619                     	;# 
  6992  061A                     	;# 
  6993  061B                     	;# 
  6994  061C                     	;# 
  6995  061D                     	;# 
  6996  061E                     	;# 
  6997  068C                     	;# 
  6998  068D                     	;# 
  6999  068E                     	;# 
  7000  068F                     	;# 
  7001  0690                     	;# 
  7002  0691                     	;# 
  7003  0692                     	;# 
  7004  0693                     	;# 
  7005  0694                     	;# 
  7006  070C                     	;# 
  7007  070D                     	;# 
  7008  070E                     	;# 
  7009  070F                     	;# 
  7010  0710                     	;# 
  7011  0711                     	;# 
  7012  0712                     	;# 
  7013  0713                     	;# 
  7014  0714                     	;# 
  7015  0716                     	;# 
  7016  0717                     	;# 
  7017  0718                     	;# 
  7018  0719                     	;# 
  7019  071A                     	;# 
  7020  071B                     	;# 
  7021  071C                     	;# 
  7022  071D                     	;# 
  7023  071E                     	;# 
  7024  0796                     	;# 
  7025  0797                     	;# 
  7026  0798                     	;# 
  7027  0799                     	;# 
  7028  079A                     	;# 
  7029  079B                     	;# 
  7030  080C                     	;# 
  7031  080D                     	;# 
  7032  080E                     	;# 
  7033  080F                     	;# 
  7034  0810                     	;# 
  7035  0811                     	;# 
  7036  0812                     	;# 
  7037  0813                     	;# 
  7038  0814                     	;# 
  7039  081A                     	;# 
  7040  081B                     	;# 
  7041  081C                     	;# 
  7042  081D                     	;# 
  7043  081E                     	;# 
  7044  081F                     	;# 
  7045  088C                     	;# 
  7046  088D                     	;# 
  7047  088E                     	;# 
  7048  088F                     	;# 
  7049  0890                     	;# 
  7050  0891                     	;# 
  7051  0892                     	;# 
  7052  0893                     	;# 
  7053  0895                     	;# 
  7054  0896                     	;# 
  7055  0897                     	;# 
  7056  0898                     	;# 
  7057  0899                     	;# 
  7058  089A                     	;# 
  7059  089B                     	;# 
  7060  090C                     	;# 
  7061  090E                     	;# 
  7062  090F                     	;# 
  7063  091F                     	;# 
  7064  091F                     	;# 
  7065  098F                     	;# 
  7066  098F                     	;# 
  7067  0990                     	;# 
  7068  0991                     	;# 
  7069  0992                     	;# 
  7070  0993                     	;# 
  7071  0994                     	;# 
  7072  0995                     	;# 
  7073  0996                     	;# 
  7074  0997                     	;# 
  7075  0E0F                     	;# 
  7076  0E10                     	;# 
  7077  0E11                     	;# 
  7078  0E12                     	;# 
  7079  0E13                     	;# 
  7080  0E14                     	;# 
  7081  0E15                     	;# 
  7082  0E16                     	;# 
  7083  0E17                     	;# 
  7084  0E18                     	;# 
  7085  0E19                     	;# 
  7086  0E1A                     	;# 
  7087  0E1B                     	;# 
  7088  0E1C                     	;# 
  7089  0E1D                     	;# 
  7090  0E1E                     	;# 
  7091  0E1F                     	;# 
  7092  0E20                     	;# 
  7093  0E21                     	;# 
  7094  0E22                     	;# 
  7095  0E23                     	;# 
  7096  0E24                     	;# 
  7097  0E25                     	;# 
  7098  0E26                     	;# 
  7099  0E27                     	;# 
  7100  0E28                     	;# 
  7101  0E29                     	;# 
  7102  0E2A                     	;# 
  7103  0E2B                     	;# 
  7104  0E2C                     	;# 
  7105  0E2D                     	;# 
  7106  0E2E                     	;# 
  7107  0E2F                     	;# 
  7108  0E30                     	;# 
  7109  0E31                     	;# 
  7110  0E32                     	;# 
  7111  0E33                     	;# 
  7112  0E34                     	;# 
  7113  0E35                     	;# 
  7114  0E36                     	;# 
  7115  0E37                     	;# 
  7116  0E8F                     	;# 
  7117  0E90                     	;# 
  7118  0E91                     	;# 
  7119  0E92                     	;# 
  7120  0E93                     	;# 
  7121  0E94                     	;# 
  7122  0E95                     	;# 
  7123  0E96                     	;# 
  7124  0E97                     	;# 
  7125  0E9C                     	;# 
  7126  0E9D                     	;# 
  7127  0E9E                     	;# 
  7128  0EA1                     	;# 
  7129  0EA2                     	;# 
  7130  0EA3                     	;# 
  7131  0EA4                     	;# 
  7132  0EA5                     	;# 
  7133  0EA9                     	;# 
  7134  0EAA                     	;# 
  7135  0EAB                     	;# 
  7136  0EAC                     	;# 
  7137  0EB1                     	;# 
  7138  0EB2                     	;# 
  7139  0EB3                     	;# 
  7140  0EB8                     	;# 
  7141  0EB9                     	;# 
  7142  0EBA                     	;# 
  7143  0EBB                     	;# 
  7144  0EBC                     	;# 
  7145  0EBD                     	;# 
  7146  0EBE                     	;# 
  7147  0EC3                     	;# 
  7148  0EC5                     	;# 
  7149  0EC6                     	;# 
  7150  0EC7                     	;# 
  7151  0EC8                     	;# 
  7152  0EC9                     	;# 
  7153  0ECA                     	;# 
  7154  0ECB                     	;# 
  7155  0ECC                     	;# 
  7156  0F10                     	;# 
  7157  0F11                     	;# 
  7158  0F12                     	;# 
  7159  0F13                     	;# 
  7160  0F14                     	;# 
  7161  0F15                     	;# 
  7162  0F16                     	;# 
  7163  0F17                     	;# 
  7164  0F18                     	;# 
  7165  0F19                     	;# 
  7166  0F1A                     	;# 
  7167  0F1B                     	;# 
  7168  0F1C                     	;# 
  7169  0F1D                     	;# 
  7170  0F1E                     	;# 
  7171  0F1F                     	;# 
  7172  0F20                     	;# 
  7173  0F21                     	;# 
  7174  0F22                     	;# 
  7175  0F23                     	;# 
  7176  0F24                     	;# 
  7177  0F25                     	;# 
  7178  0F26                     	;# 
  7179  0F27                     	;# 
  7180  0F28                     	;# 
  7181  0F29                     	;# 
  7182  0F2A                     	;# 
  7183  0F2B                     	;# 
  7184  0F2C                     	;# 
  7185  0F2D                     	;# 
  7186  0F2E                     	;# 
  7187  0F2F                     	;# 
  7188  0F30                     	;# 
  7189  0F31                     	;# 
  7190  0F32                     	;# 
  7191  0F38                     	;# 
  7192  0F39                     	;# 
  7193  0F3A                     	;# 
  7194  0F3B                     	;# 
  7195  0F3C                     	;# 
  7196  0F3D                     	;# 
  7197  0F3E                     	;# 
  7198  0F3F                     	;# 
  7199  0F40                     	;# 
  7200  0F41                     	;# 
  7201  0F43                     	;# 
  7202  0F44                     	;# 
  7203  0F45                     	;# 
  7204  0F46                     	;# 
  7205  0F47                     	;# 
  7206  0F48                     	;# 
  7207  0F49                     	;# 
  7208  0F4A                     	;# 
  7209  0F4B                     	;# 
  7210  0F4C                     	;# 
  7211  0F4E                     	;# 
  7212  0F4F                     	;# 
  7213  0F50                     	;# 
  7214  0F51                     	;# 
  7215  0F52                     	;# 
  7216  0F53                     	;# 
  7217  0F54                     	;# 
  7218  0F55                     	;# 
  7219  0F56                     	;# 
  7220  0F57                     	;# 
  7221  0F59                     	;# 
  7222  0F5A                     	;# 
  7223  0F5B                     	;# 
  7224  0F5C                     	;# 
  7225  0F5D                     	;# 
  7226  0F61                     	;# 
  7227  0F62                     	;# 
  7228  0F64                     	;# 
  7229  0F65                     	;# 
  7230  0F66                     	;# 
  7231  0F67                     	;# 
  7232  0F68                     	;# 
  7233  0F69                     	;# 
  7234  0F6A                     	;# 
  7235  0F6B                     	;# 
  7236  0F6C                     	;# 
  7237  0F6D                     	;# 
  7238  0FE4                     	;# 
  7239  0FE5                     	;# 
  7240  0FE6                     	;# 
  7241  0FE7                     	;# 
  7242  0FE8                     	;# 
  7243  0FE9                     	;# 
  7244  0FEA                     	;# 
  7245  0FEB                     	;# 
  7246  0FED                     	;# 
  7247  0FEE                     	;# 
  7248  0FEF                     	;# 
  7249  0000                     	;# 
  7250  0001                     	;# 
  7251  0002                     	;# 
  7252  0003                     	;# 
  7253  0004                     	;# 
  7254  0005                     	;# 
  7255  0006                     	;# 
  7256  0007                     	;# 
  7257  0008                     	;# 
  7258  0009                     	;# 
  7259  000A                     	;# 
  7260  000B                     	;# 
  7261  000C                     	;# 
  7262  000D                     	;# 
  7263  000E                     	;# 
  7264  000F                     	;# 
  7265  0010                     	;# 
  7266  0011                     	;# 
  7267  0012                     	;# 
  7268  0013                     	;# 
  7269  0014                     	;# 
  7270  0015                     	;# 
  7271  0016                     	;# 
  7272  0017                     	;# 
  7273  0018                     	;# 
  7274  0019                     	;# 
  7275  001A                     	;# 
  7276  001C                     	;# 
  7277  001C                     	;# 
  7278  001D                     	;# 
  7279  001D                     	;# 
  7280  001E                     	;# 
  7281  001F                     	;# 
  7282  008C                     	;# 
  7283  008C                     	;# 
  7284  008D                     	;# 
  7285  008E                     	;# 
  7286  008E                     	;# 
  7287  008F                     	;# 
  7288  0090                     	;# 
  7289  0090                     	;# 
  7290  0091                     	;# 
  7291  0093                     	;# 
  7292  0094                     	;# 
  7293  0095                     	;# 
  7294  0096                     	;# 
  7295  0097                     	;# 
  7296  0098                     	;# 
  7297  0099                     	;# 
  7298  009A                     	;# 
  7299  009B                     	;# 
  7300  009C                     	;# 
  7301  009D                     	;# 
  7302  009E                     	;# 
  7303  010C                     	;# 
  7304  010D                     	;# 
  7305  010E                     	;# 
  7306  010E                     	;# 
  7307  010F                     	;# 
  7308  0110                     	;# 
  7309  0110                     	;# 
  7310  0111                     	;# 
  7311  0112                     	;# 
  7312  0112                     	;# 
  7313  0113                     	;# 
  7314  0114                     	;# 
  7315  0114                     	;# 
  7316  0115                     	;# 
  7317  0116                     	;# 
  7318  0116                     	;# 
  7319  0117                     	;# 
  7320  0119                     	;# 
  7321  0119                     	;# 
  7322  0119                     	;# 
  7323  011A                     	;# 
  7324  011A                     	;# 
  7325  011A                     	;# 
  7326  011B                     	;# 
  7327  011B                     	;# 
  7328  011B                     	;# 
  7329  011B                     	;# 
  7330  011B                     	;# 
  7331  011C                     	;# 
  7332  011C                     	;# 
  7333  011C                     	;# 
  7334  011D                     	;# 
  7335  011D                     	;# 
  7336  011D                     	;# 
  7337  011E                     	;# 
  7338  011E                     	;# 
  7339  011E                     	;# 
  7340  011F                     	;# 
  7341  011F                     	;# 
  7342  011F                     	;# 
  7343  011F                     	;# 
  7344  011F                     	;# 
  7345  018C                     	;# 
  7346  018D                     	;# 
  7347  018E                     	;# 
  7348  018F                     	;# 
  7349  0190                     	;# 
  7350  0191                     	;# 
  7351  0192                     	;# 
  7352  0196                     	;# 
  7353  0197                     	;# 
  7354  0198                     	;# 
  7355  0199                     	;# 
  7356  019A                     	;# 
  7357  019B                     	;# 
  7358  019C                     	;# 
  7359  020C                     	;# 
  7360  020C                     	;# 
  7361  020D                     	;# 
  7362  020E                     	;# 
  7363  020F                     	;# 
  7364  020F                     	;# 
  7365  0210                     	;# 
  7366  0210                     	;# 
  7367  0211                     	;# 
  7368  0211                     	;# 
  7369  0212                     	;# 
  7370  0212                     	;# 
  7371  0213                     	;# 
  7372  0214                     	;# 
  7373  0215                     	;# 
  7374  0215                     	;# 
  7375  0216                     	;# 
  7376  0216                     	;# 
  7377  0217                     	;# 
  7378  0217                     	;# 
  7379  0218                     	;# 
  7380  0218                     	;# 
  7381  0219                     	;# 
  7382  021A                     	;# 
  7383  021B                     	;# 
  7384  021B                     	;# 
  7385  021C                     	;# 
  7386  021C                     	;# 
  7387  021D                     	;# 
  7388  021D                     	;# 
  7389  021E                     	;# 
  7390  021F                     	;# 
  7391  028C                     	;# 
  7392  028C                     	;# 
  7393  028D                     	;# 
  7394  028D                     	;# 
  7395  028E                     	;# 
  7396  028F                     	;# 
  7397  0290                     	;# 
  7398  0290                     	;# 
  7399  0291                     	;# 
  7400  0292                     	;# 
  7401  0292                     	;# 
  7402  0293                     	;# 
  7403  0293                     	;# 
  7404  0294                     	;# 
  7405  0295                     	;# 
  7406  0296                     	;# 
  7407  0296                     	;# 
  7408  0297                     	;# 
  7409  0298                     	;# 
  7410  0298                     	;# 
  7411  0299                     	;# 
  7412  0299                     	;# 
  7413  029A                     	;# 
  7414  029B                     	;# 
  7415  029C                     	;# 
  7416  029C                     	;# 
  7417  029D                     	;# 
  7418  030C                     	;# 
  7419  030C                     	;# 
  7420  030D                     	;# 
  7421  030E                     	;# 
  7422  030F                     	;# 
  7423  0310                     	;# 
  7424  0310                     	;# 
  7425  0311                     	;# 
  7426  0312                     	;# 
  7427  0313                     	;# 
  7428  0314                     	;# 
  7429  0314                     	;# 
  7430  0315                     	;# 
  7431  0316                     	;# 
  7432  0317                     	;# 
  7433  0318                     	;# 
  7434  0318                     	;# 
  7435  0319                     	;# 
  7436  031A                     	;# 
  7437  031B                     	;# 
  7438  031C                     	;# 
  7439  031C                     	;# 
  7440  031D                     	;# 
  7441  031E                     	;# 
  7442  031F                     	;# 
  7443  038C                     	;# 
  7444  038C                     	;# 
  7445  038D                     	;# 
  7446  038E                     	;# 
  7447  0390                     	;# 
  7448  0390                     	;# 
  7449  0391                     	;# 
  7450  0392                     	;# 
  7451  040C                     	;# 
  7452  040D                     	;# 
  7453  040E                     	;# 
  7454  040F                     	;# 
  7455  0410                     	;# 
  7456  0411                     	;# 
  7457  0416                     	;# 
  7458  0416                     	;# 
  7459  0417                     	;# 
  7460  0418                     	;# 
  7461  0418                     	;# 
  7462  0419                     	;# 
  7463  041A                     	;# 
  7464  041A                     	;# 
  7465  041B                     	;# 
  7466  041C                     	;# 
  7467  041C                     	;# 
  7468  041D                     	;# 
  7469  041E                     	;# 
  7470  041F                     	;# 
  7471  048C                     	;# 
  7472  048C                     	;# 
  7473  048D                     	;# 
  7474  048E                     	;# 
  7475  048F                     	;# 
  7476  048F                     	;# 
  7477  0490                     	;# 
  7478  0491                     	;# 
  7479  0492                     	;# 
  7480  0492                     	;# 
  7481  0493                     	;# 
  7482  0494                     	;# 
  7483  0495                     	;# 
  7484  0495                     	;# 
  7485  0496                     	;# 
  7486  0497                     	;# 
  7487  0498                     	;# 
  7488  0499                     	;# 
  7489  049A                     	;# 
  7490  049B                     	;# 
  7491  049C                     	;# 
  7492  049D                     	;# 
  7493  050C                     	;# 
  7494  050C                     	;# 
  7495  050D                     	;# 
  7496  050E                     	;# 
  7497  050F                     	;# 
  7498  050F                     	;# 
  7499  0510                     	;# 
  7500  0511                     	;# 
  7501  0512                     	;# 
  7502  0512                     	;# 
  7503  0513                     	;# 
  7504  0514                     	;# 
  7505  0515                     	;# 
  7506  0515                     	;# 
  7507  0516                     	;# 
  7508  0517                     	;# 
  7509  0518                     	;# 
  7510  0519                     	;# 
  7511  051A                     	;# 
  7512  051B                     	;# 
  7513  051C                     	;# 
  7514  051D                     	;# 
  7515  058C                     	;# 
  7516  058C                     	;# 
  7517  058D                     	;# 
  7518  058E                     	;# 
  7519  058F                     	;# 
  7520  058F                     	;# 
  7521  0590                     	;# 
  7522  0591                     	;# 
  7523  0592                     	;# 
  7524  0593                     	;# 
  7525  060C                     	;# 
  7526  060D                     	;# 
  7527  060E                     	;# 
  7528  060F                     	;# 
  7529  0610                     	;# 
  7530  0611                     	;# 
  7531  0612                     	;# 
  7532  0613                     	;# 
  7533  0614                     	;# 
  7534  0616                     	;# 
  7535  0617                     	;# 
  7536  0618                     	;# 
  7537  0619                     	;# 
  7538  061A                     	;# 
  7539  061B                     	;# 
  7540  061C                     	;# 
  7541  061D                     	;# 
  7542  061E                     	;# 
  7543  068C                     	;# 
  7544  068D                     	;# 
  7545  068E                     	;# 
  7546  068F                     	;# 
  7547  0690                     	;# 
  7548  0691                     	;# 
  7549  0692                     	;# 
  7550  0693                     	;# 
  7551  0694                     	;# 
  7552  070C                     	;# 
  7553  070D                     	;# 
  7554  070E                     	;# 
  7555  070F                     	;# 
  7556  0710                     	;# 
  7557  0711                     	;# 
  7558  0712                     	;# 
  7559  0713                     	;# 
  7560  0714                     	;# 
  7561  0716                     	;# 
  7562  0717                     	;# 
  7563  0718                     	;# 
  7564  0719                     	;# 
  7565  071A                     	;# 
  7566  071B                     	;# 
  7567  071C                     	;# 
  7568  071D                     	;# 
  7569  071E                     	;# 
  7570  0796                     	;# 
  7571  0797                     	;# 
  7572  0798                     	;# 
  7573  0799                     	;# 
  7574  079A                     	;# 
  7575  079B                     	;# 
  7576  080C                     	;# 
  7577  080D                     	;# 
  7578  080E                     	;# 
  7579  080F                     	;# 
  7580  0810                     	;# 
  7581  0811                     	;# 
  7582  0812                     	;# 
  7583  0813                     	;# 
  7584  0814                     	;# 
  7585  081A                     	;# 
  7586  081B                     	;# 
  7587  081C                     	;# 
  7588  081D                     	;# 
  7589  081E                     	;# 
  7590  081F                     	;# 
  7591  088C                     	;# 
  7592  088D                     	;# 
  7593  088E                     	;# 
  7594  088F                     	;# 
  7595  0890                     	;# 
  7596  0891                     	;# 
  7597  0892                     	;# 
  7598  0893                     	;# 
  7599  0895                     	;# 
  7600  0896                     	;# 
  7601  0897                     	;# 
  7602  0898                     	;# 
  7603  0899                     	;# 
  7604  089A                     	;# 
  7605  089B                     	;# 
  7606  090C                     	;# 
  7607  090E                     	;# 
  7608  090F                     	;# 
  7609  091F                     	;# 
  7610  091F                     	;# 
  7611  098F                     	;# 
  7612  098F                     	;# 
  7613  0990                     	;# 
  7614  0991                     	;# 
  7615  0992                     	;# 
  7616  0993                     	;# 
  7617  0994                     	;# 
  7618  0995                     	;# 
  7619  0996                     	;# 
  7620  0997                     	;# 
  7621  0E0F                     	;# 
  7622  0E10                     	;# 
  7623  0E11                     	;# 
  7624  0E12                     	;# 
  7625  0E13                     	;# 
  7626  0E14                     	;# 
  7627  0E15                     	;# 
  7628  0E16                     	;# 
  7629  0E17                     	;# 
  7630  0E18                     	;# 
  7631  0E19                     	;# 
  7632  0E1A                     	;# 
  7633  0E1B                     	;# 
  7634  0E1C                     	;# 
  7635  0E1D                     	;# 
  7636  0E1E                     	;# 
  7637  0E1F                     	;# 
  7638  0E20                     	;# 
  7639  0E21                     	;# 
  7640  0E22                     	;# 
  7641  0E23                     	;# 
  7642  0E24                     	;# 
  7643  0E25                     	;# 
  7644  0E26                     	;# 
  7645  0E27                     	;# 
  7646  0E28                     	;# 
  7647  0E29                     	;# 
  7648  0E2A                     	;# 
  7649  0E2B                     	;# 
  7650  0E2C                     	;# 
  7651  0E2D                     	;# 
  7652  0E2E                     	;# 
  7653  0E2F                     	;# 
  7654  0E30                     	;# 
  7655  0E31                     	;# 
  7656  0E32                     	;# 
  7657  0E33                     	;# 
  7658  0E34                     	;# 
  7659  0E35                     	;# 
  7660  0E36                     	;# 
  7661  0E37                     	;# 
  7662  0E8F                     	;# 
  7663  0E90                     	;# 
  7664  0E91                     	;# 
  7665  0E92                     	;# 
  7666  0E93                     	;# 
  7667  0E94                     	;# 
  7668  0E95                     	;# 
  7669  0E96                     	;# 
  7670  0E97                     	;# 
  7671  0E9C                     	;# 
  7672  0E9D                     	;# 
  7673  0E9E                     	;# 
  7674  0EA1                     	;# 
  7675  0EA2                     	;# 
  7676  0EA3                     	;# 
  7677  0EA4                     	;# 
  7678  0EA5                     	;# 
  7679  0EA9                     	;# 
  7680  0EAA                     	;# 
  7681  0EAB                     	;# 
  7682  0EAC                     	;# 
  7683  0EB1                     	;# 
  7684  0EB2                     	;# 
  7685  0EB3                     	;# 
  7686  0EB8                     	;# 
  7687  0EB9                     	;# 
  7688  0EBA                     	;# 
  7689  0EBB                     	;# 
  7690  0EBC                     	;# 
  7691  0EBD                     	;# 
  7692  0EBE                     	;# 
  7693  0EC3                     	;# 
  7694  0EC5                     	;# 
  7695  0EC6                     	;# 
  7696  0EC7                     	;# 
  7697  0EC8                     	;# 
  7698  0EC9                     	;# 
  7699  0ECA                     	;# 
  7700  0ECB                     	;# 
  7701  0ECC                     	;# 
  7702  0F10                     	;# 
  7703  0F11                     	;# 
  7704  0F12                     	;# 
  7705  0F13                     	;# 
  7706  0F14                     	;# 
  7707  0F15                     	;# 
  7708  0F16                     	;# 
  7709  0F17                     	;# 
  7710  0F18                     	;# 
  7711  0F19                     	;# 
  7712  0F1A                     	;# 
  7713  0F1B                     	;# 
  7714  0F1C                     	;# 
  7715  0F1D                     	;# 
  7716  0F1E                     	;# 
  7717  0F1F                     	;# 
  7718  0F20                     	;# 
  7719  0F21                     	;# 
  7720  0F22                     	;# 
  7721  0F23                     	;# 
  7722  0F24                     	;# 
  7723  0F25                     	;# 
  7724  0F26                     	;# 
  7725  0F27                     	;# 
  7726  0F28                     	;# 
  7727  0F29                     	;# 
  7728  0F2A                     	;# 
  7729  0F2B                     	;# 
  7730  0F2C                     	;# 
  7731  0F2D                     	;# 
  7732  0F2E                     	;# 
  7733  0F2F                     	;# 
  7734  0F30                     	;# 
  7735  0F31                     	;# 
  7736  0F32                     	;# 
  7737  0F38                     	;# 
  7738  0F39                     	;# 
  7739  0F3A                     	;# 
  7740  0F3B                     	;# 
  7741  0F3C                     	;# 
  7742  0F3D                     	;# 
  7743  0F3E                     	;# 
  7744  0F3F                     	;# 
  7745  0F40                     	;# 
  7746  0F41                     	;# 
  7747  0F43                     	;# 
  7748  0F44                     	;# 
  7749  0F45                     	;# 
  7750  0F46                     	;# 
  7751  0F47                     	;# 
  7752  0F48                     	;# 
  7753  0F49                     	;# 
  7754  0F4A                     	;# 
  7755  0F4B                     	;# 
  7756  0F4C                     	;# 
  7757  0F4E                     	;# 
  7758  0F4F                     	;# 
  7759  0F50                     	;# 
  7760  0F51                     	;# 
  7761  0F52                     	;# 
  7762  0F53                     	;# 
  7763  0F54                     	;# 
  7764  0F55                     	;# 
  7765  0F56                     	;# 
  7766  0F57                     	;# 
  7767  0F59                     	;# 
  7768  0F5A                     	;# 
  7769  0F5B                     	;# 
  7770  0F5C                     	;# 
  7771  0F5D                     	;# 
  7772  0F61                     	;# 
  7773  0F62                     	;# 
  7774  0F64                     	;# 
  7775  0F65                     	;# 
  7776  0F66                     	;# 
  7777  0F67                     	;# 
  7778  0F68                     	;# 
  7779  0F69                     	;# 
  7780  0F6A                     	;# 
  7781  0F6B                     	;# 
  7782  0F6C                     	;# 
  7783  0F6D                     	;# 
  7784  0FE4                     	;# 
  7785  0FE5                     	;# 
  7786  0FE6                     	;# 
  7787  0FE7                     	;# 
  7788  0FE8                     	;# 
  7789  0FE9                     	;# 
  7790  0FEA                     	;# 
  7791  0FEB                     	;# 
  7792  0FED                     	;# 
  7793  0FEE                     	;# 
  7794  0FEF                     	;# 
  7795                           
  7796                           	psect	idataCOMMON
  7797  11EA                     __pidataCOMMON:
  7798                           
  7799                           ;initializer for _NREG
  7800  11EA  3419               	retlw	25
  7801                           
  7802                           	psect	idataBANK0
  7803  0002                     __pidataBANK0:
  7804                           
  7805                           ;initializer for _TALA
  7806  0002  3405               	retlw	5
  7807                           
  7808                           ;initializer for _PMON
  7809  0003  3403               	retlw	3
  7810                           
  7811                           	psect	idataBANK1
  7812  1246                     __pidataBANK1:
  7813                           
  7814                           ;initializer for _alarmPWMStart
  7815  1246  34FF               	retlw	255
  7816  1247  34FF               	retlw	255
  7817  1248  34FF               	retlw	255
  7818                           
  7819                           ;initializer for _prevLumLevel
  7820  1249  34FF               	retlw	255
  7821  124A  34FF               	retlw	255
  7822                           
  7823                           ;initializer for _prevTemp
  7824  124B  34FF               	retlw	255
  7825  124C  34FF               	retlw	255
  7826                           
  7827                           ;initializer for _updateLCD
  7828  124D  3401               	retlw	1
  7829                           
  7830                           	psect	stringtext1
  7831  1800                     __pstringtext1:
  7832  1800                     _commands:
  7833  1800  3428               	retlw	low _cmd_rc
  7834  1801  3415               	retlw	high _cmd_rc
  7835  1802  34C0               	retlw	192
  7836  1803  3482               	retlw	low _cmd_sc
  7837  1804  3417               	retlw	high _cmd_sc
  7838  1805  34C1               	retlw	193
  7839  1806  3458               	retlw	low _cmd_rtl
  7840  1807  3414               	retlw	high _cmd_rtl
  7841  1808  34C2               	retlw	194
  7842  1809  3479               	retlw	low _cmd_rp
  7843  180A  3414               	retlw	high _cmd_rp
  7844  180B  34C3               	retlw	195
  7845  180C  3421               	retlw	low _cmd_mmp
  7846  180D  3413               	retlw	high _cmd_mmp
  7847  180E  34C4               	retlw	196
  7848  180F  3438               	retlw	low _cmd_mta
  7849  1810  3413               	retlw	high _cmd_mta
  7850  1811  34C5               	retlw	197
  7851  1812  340A               	retlw	low _cmd_ra
  7852  1813  3417               	retlw	high _cmd_ra
  7853  1814  34C6               	retlw	198
  7854  1815  34C1               	retlw	low _cmd_dac
  7855  1816  3417               	retlw	high _cmd_dac
  7856  1817  34C7               	retlw	199
  7857  1818  3468               	retlw	low _cmd_dtl
  7858  1819  3416               	retlw	high _cmd_dtl
  7859  181A  34C8               	retlw	200
  7860  181B  34D2               	retlw	low _cmd_aa
  7861  181C  3416               	retlw	high _cmd_aa
  7862  181D  34C9               	retlw	201
  7863  181E  344D               	retlw	low _cmd_ir
  7864  181F  3415               	retlw	high _cmd_ir
  7865  1820  34CA               	retlw	202
  7866  1821  3478               	retlw	low _cmd_trc
  7867  1822  340C               	retlw	high _cmd_trc
  7868  1823  34CB               	retlw	203
  7869  1824  3492               	retlw	low _cmd_tri
  7870  1825  340B               	retlw	high _cmd_tri
  7871  1826  34CC               	retlw	204
  7872  1827                     __end_of_commands:
  7873                           
  7874                           	psect	stringtext2
  7875  1836                     __pstringtext2:
  7876  1836                     _dpowers:
  7877  1836  3401               	retlw	1
  7878  1837  3400               	retlw	0
  7879  1838  340A               	retlw	10
  7880  1839  3400               	retlw	0
  7881  183A  3464               	retlw	100
  7882  183B  3400               	retlw	0
  7883  183C  34E8               	retlw	232
  7884  183D  3403               	retlw	3
  7885  183E  3410               	retlw	16
  7886  183F  3427               	retlw	39
  7887  1840                     __end_of_dpowers:
  7888                           
  7889                           	psect	nvBANK1
  7890  00D8                     __pnvBANK1:
  7891  00D8                     _INT_InterruptHandler:
  7892  00D8                     	ds	2
  7893  00DA                     _TMR1_InterruptHandler:
  7894  00DA                     	ds	2
  7895  00DC                     _timer1ReloadVal:
  7896  00DC                     	ds	2
  7897  00DE                     _EUSART_RxDefaultInterruptHandler:
  7898  00DE                     	ds	2
  7899  00E0                     _EUSART_TxDefaultInterruptHandler:
  7900  00E0                     	ds	2
  7901  00E2                     _eusartTxBufferRemaining:
  7902  00E2                     	ds	1
  7903  0013                     _TRISCbits	set	19
  7904  000E                     _PORTCbits	set	14
  7905  0016                     _LATAbits	set	22
  7906  000B                     _INTCONbits	set	11
  7907  0014                     _TRISD	set	20
  7908  0013                     _TRISC	set	19
  7909  0012                     _TRISB	set	18
  7910  0011                     _TRISA	set	17
  7911  0015                     _TRISE	set	21
  7912  0018                     _LATC	set	24
  7913  0017                     _LATB	set	23
  7914  0016                     _LATA	set	22
  7915  0019                     _LATD	set	25
  7916  001A                     _LATE	set	26
  7917  0094                     _ADCON1bits	set	148
  7918  008E                     _ADPREVL	set	142
  7919  008F                     _ADPREVH	set	143
  7920  0097                     _ADSTATbits	set	151
  7921  0090                     _ADACCL	set	144
  7922  0091                     _ADACCH	set	145
  7923  0095                     _ADCON2bits	set	149
  7924  009C                     _ADPRE	set	156
  7925  0096                     _ADCON3bits	set	150
  7926  008C                     _ADRESL	set	140
  7927  008D                     _ADRESH	set	141
  7928  0093                     _ADCON0bits	set	147
  7929  009D                     _ADACQ	set	157
  7930  0093                     _ADCON0	set	147
  7931  0098                     _ADCLK	set	152
  7932  0099                     _ADACT	set	153
  7933  009A                     _ADREF	set	154
  7934  0097                     _ADSTAT	set	151
  7935  0096                     _ADCON3	set	150
  7936  0095                     _ADCON2	set	149
  7937  0094                     _ADCON1	set	148
  7938  009B                     _ADCAP	set	155
  7939  009E                     _ADPCH	set	158
  7940  0119                     _RC1REG	set	281
  7941  011D                     _RC1STAbits	set	285
  7942  011A                     _TX1REG	set	282
  7943  011E                     _TX1STAbits	set	286
  7944  011C                     _SP1BRGH	set	284
  7945  011B                     _SP1BRGL	set	283
  7946  011E                     _TX1STA	set	286
  7947  011D                     _RC1STA	set	285
  7948  011F                     _BAUD1CON	set	287
  7949  0116                     _ADERRL	set	278
  7950  0117                     _ADERRH	set	279
  7951  0114                     _ADFLTRL	set	276
  7952  0115                     _ADFLTRH	set	277
  7953  010C                     _ADCNT	set	268
  7954  010D                     _ADRPT	set	269
  7955  0113                     _ADSTPTH	set	275
  7956  0112                     _ADSTPTL	set	274
  7957  0111                     _ADUTHH	set	273
  7958  0110                     _ADUTHL	set	272
  7959  010F                     _ADLTHH	set	271
  7960  010E                     _ADLTHL	set	270
  7961  018E                     _SSP1MSK	set	398
  7962  018D                     _SSP1ADD	set	397
  7963  018F                     _SSP1STAT	set	399
  7964  0191                     _SSP1CON2	set	401
  7965  0190                     _SSP1CON1bits	set	400
  7966  018C                     _SSP1BUF	set	396
  7967  018F                     _SSP1STATbits	set	399
  7968  0191                     _SSP1CON2bits	set	401
  7969  0190                     _SSP1CON1	set	400
  7970  021F                     _CCPTMRS1bits	set	543
  7971  020F                     _T1GCONbits	set	527
  7972  020E                     _T1CONbits	set	526
  7973  020E                     _T1CON	set	526
  7974  020C                     _TMR1L	set	524
  7975  020D                     _TMR1H	set	525
  7976  0211                     _T1CLK	set	529
  7977  0210                     _T1GATE	set	528
  7978  020F                     _T1GCON	set	527
  7979  028D                     _PR2	set	653
  7980  028C                     _TMR2	set	652
  7981  028E                     _T2CONbits	set	654
  7982  0291                     _T2RSTbits	set	657
  7983  028F                     _T2HLTbits	set	655
  7984  028E                     _T2CON	set	654
  7985  028C                     _T2TMR	set	652
  7986  028D                     _T2PR	set	653
  7987  0291                     _T2RST	set	657
  7988  028F                     _T2HLT	set	655
  7989  0290                     _T2CLKCON	set	656
  7990  038C                     _PWM6DCL	set	908
  7991  038D                     _PWM6DCH	set	909
  7992  038E                     _PWM6CON	set	910
  7993  1C77                     _PWM6EN	set	7287
  7994  0710                     _PIR4bits	set	1808
  7995  071A                     _PIE4bits	set	1818
  7996  070C                     _PIR0bits	set	1804
  7997  0716                     _PIE0bits	set	1814
  7998  0719                     _PIE3bits	set	1817
  7999  070F                     _PIR3bits	set	1807
  8000  079B                     _PMD5	set	1947
  8001  079A                     _PMD4	set	1946
  8002  0799                     _PMD3	set	1945
  8003  0798                     _PMD2	set	1944
  8004  0797                     _PMD1	set	1943
  8005  0796                     _PMD0	set	1942
  8006  081F                     _NVMCON2	set	2079
  8007  081C                     _NVMDATL	set	2076
  8008  081D                     _NVMDATH	set	2077
  8009  081E                     _NVMCON1bits	set	2078
  8010  081B                     _NVMADRH	set	2075
  8011  081A                     _NVMADRL	set	2074
  8012  0892                     _OSCTUNE	set	2194
  8013  0893                     _OSCFRQ	set	2195
  8014  0891                     _OSCEN	set	2193
  8015  088F                     _OSCCON3	set	2191
  8016  088D                     _OSCCON1	set	2189
  8017  0EC6                     _SSP1DATPPS	set	3782
  8018  0EC5                     _SSP1CLKPPS	set	3781
  8019  0ECB                     _RXPPS	set	3787
  8020  0E90                     _INTPPS	set	3728
  8021  0F26                     _RC6PPS	set	3878
  8022  0F16                     _RA6PPS	set	3862
  8023  0F24                     _RC4PPS	set	3876
  8024  0F23                     _RC3PPS	set	3875
  8025  0F67                     _SLRCONE	set	3943
  8026  0F5C                     _SLRCOND	set	3932
  8027  0F51                     _SLRCONC	set	3921
  8028  0F46                     _SLRCONB	set	3910
  8029  0F3B                     _SLRCONA	set	3899
  8030  0F5B                     _ODCOND	set	3931
  8031  0F50                     _ODCONC	set	3920
  8032  0F45                     _ODCONB	set	3909
  8033  0F3A                     _ODCONA	set	3898
  8034  0F66                     _ODCONE	set	3942
  8035  0F4F                     _WPUC	set	3919
  8036  0F39                     _WPUA	set	3897
  8037  0F44                     _WPUB	set	3908
  8038  0F65                     _WPUE	set	3941
  8039  0F5A                     _WPUD	set	3930
  8040  0F38                     _ANSELA	set	3896
  8041  0F64                     _ANSELE	set	3940
  8042  0F43                     _ANSELB	set	3907
  8043  0F4E                     _ANSELC	set	3918
  8044  0F59                     _ANSELD	set	3929
  8045  7A7C                     _WPUC4	set	31356
  8046  7A7B                     _WPUC3	set	31355
  8047                           
  8048                           	psect	stringtext3
  8049  1827                     __pstringtext3:
  8050  1827                     STR_1:
  8051  1827  3425               	retlw	37	;'%'
  8052  1828  3430               	retlw	48	;'0'
  8053  1829  3432               	retlw	50	;'2'
  8054  182A  3464               	retlw	100	;'d'
  8055  182B  343A               	retlw	58	;':'
  8056  182C  3425               	retlw	37	;'%'
  8057  182D  3430               	retlw	48	;'0'
  8058  182E  3432               	retlw	50	;'2'
  8059  182F  3464               	retlw	100	;'d'
  8060  1830  343A               	retlw	58	;':'
  8061  1831  3425               	retlw	37	;'%'
  8062  1832  3430               	retlw	48	;'0'
  8063  1833  3432               	retlw	50	;'2'
  8064  1834  3464               	retlw	100	;'d'
  8065  1835  3400               	retlw	0
  8066                           
  8067                           	psect	stringtext4
  8068  1840                     __pstringtext4:
  8069  1840                     STR_3:
  8070  1840  3425               	retlw	37	;'%'
  8071  1841  3430               	retlw	48	;'0'
  8072  1842  3432               	retlw	50	;'2'
  8073  1843  3464               	retlw	100	;'d'
  8074  1844  3420               	retlw	32	;' '
  8075  1845  3443               	retlw	67	;'C'
  8076  1846  3400               	retlw	0
  8077                           
  8078                           	psect	stringtext5
  8079  1847                     __pstringtext5:
  8080  1847                     STR_5:
  8081  1847  344C               	retlw	76	;'L'
  8082  1848  3420               	retlw	32	;' '
  8083  1849  3425               	retlw	37	;'%'
  8084  184A  3464               	retlw	100	;'d'
  8085  184B  3400               	retlw	0
  8086                           
  8087                           	psect	stringtext6
  8088  184C                     __pstringtext6:
  8089  184C                     STR_7:
  8090  184C  3443               	retlw	67	;'C'
  8091  184D  3454               	retlw	84	;'T'
  8092  184E  344C               	retlw	76	;'L'
  8093  184F  3400               	retlw	0
  8094                           
  8095                           	psect	stringtext7
  8096  0000                     __pstringtext7:
  8097  1840                     
  8098                           	psect	cinit
  8099  0054                     start_initialization:	
  8100                           ; #config settings
  8101                           
  8102  0054                     __initialization:
  8103                           
  8104                           ; Initialize objects allocated to COMMON
  8105  0054  3191  21EA  3180   	fcall	__pidataCOMMON	;fetch initializer
  8106  0057  00FB               	movwf	__pdataCOMMON& (0+127)
  8107                           
  8108                           ; Initialize objects allocated to BANK0
  8109  0058  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
  8110  005B  00ED               	movwf	__pdataBANK0& (0+127)
  8111  005C  3180  2003  3180   	fcall	__pidataBANK0+1	;fetch initializer
  8112  005F  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  8113                           
  8114                           ; Initialize objects allocated to BANK1
  8115  0060  3046               	movlw	low __pidataBANK1
  8116  0061  0084               	movwf	4
  8117  0062  3092               	movlw	(high __pidataBANK1)| (0+128)
  8118  0063  0085               	movwf	5
  8119  0064  30E3               	movlw	low __pdataBANK1
  8120  0065  0086               	movwf	6
  8121  0066  3000               	movlw	high __pdataBANK1
  8122  0067  0087               	movwf	7
  8123  0068  3008               	movlw	8
  8124  0069  3192  2230  3180   	fcall	init_ram
  8125                           
  8126                           ; Clear objects allocated to COMMON
  8127  006C  01FA               	clrf	__pbssCOMMON& (0+127)
  8128                           
  8129                           ; Clear objects allocated to BANK0
  8130  006D  3055               	movlw	low __pbssBANK0
  8131  006E  0084               	movwf	4
  8132  006F  3000               	movlw	high __pbssBANK0
  8133  0070  0085               	movwf	5
  8134  0071  3018               	movlw	24
  8135  0072  3192  222A  3180   	fcall	clear_ram0
  8136                           
  8137                           ; Clear objects allocated to BANK1
  8138  0075  30C3               	movlw	low __pbssBANK1
  8139  0076  0084               	movwf	4
  8140  0077  3000               	movlw	high __pbssBANK1
  8141  0078  0085               	movwf	5
  8142  0079  3015               	movlw	21
  8143  007A  3192  222A  3180   	fcall	clear_ram0
  8144                           
  8145                           ; Clear objects allocated to BANK2
  8146  007D  3020               	movlw	low __pbssBANK2
  8147  007E  0084               	movwf	4
  8148  007F  3001               	movlw	high __pbssBANK2
  8149  0080  0085               	movwf	5
  8150  0081  3014               	movlw	20
  8151  0082  3192  222A  3180   	fcall	clear_ram0
  8152                           
  8153                           ; Clear objects allocated to BANK3
  8154  0085  30A0               	movlw	low __pbssBANK3
  8155  0086  0084               	movwf	4
  8156  0087  3001               	movlw	high __pbssBANK3
  8157  0088  0085               	movwf	5
  8158  0089  3040               	movlw	64
  8159  008A  3192  222A  3180   	fcall	clear_ram0
  8160                           
  8161                           ; Clear objects allocated to BANK4
  8162  008D  3020               	movlw	low __pbssBANK4
  8163  008E  0084               	movwf	4
  8164  008F  3002               	movlw	high __pbssBANK4
  8165  0090  0085               	movwf	5
  8166  0091  3040               	movlw	64
  8167  0092  3192  222A  3180   	fcall	clear_ram0
  8168  0095                     end_of_initialization:	
  8169                           ;End of C runtime variable initialization code
  8170                           
  8171  0095                     __end_of__initialization:
  8172  0095  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8173  0096  0020               	movlb	0
  8174  0097  3180  2899         	ljmp	_main	;jump to C main() function
  8175                           
  8176                           	psect	bssCOMMON
  8177  007A                     __pbssCOMMON:
  8178  007A                     _iwrite:
  8179  007A                     	ds	1
  8180                           
  8181                           	psect	dataCOMMON
  8182  007B                     __pdataCOMMON:
  8183  007B                     _NREG:
  8184  007B                     	ds	1
  8185                           
  8186                           	psect	bssBANK0
  8187  0055                     __pbssBANK0:
  8188  0055                     _clkAlarm:
  8189  0055                     	ds	4
  8190  0059                     _t:
  8191  0059                     	ds	3
  8192  005C                     _modeFlag:
  8193  005C                     	ds	2
  8194  005E                     _editingClockAlarm:
  8195  005E                     	ds	2
  8196  0060                     _nr:
  8197  0060                     	ds	1
  8198  0061                     _iread:
  8199  0061                     	ds	1
  8200  0062                     _PWM_on:
  8201  0062                     	ds	1
  8202  0063                     _editingLumAlarm:
  8203  0063                     	ds	1
  8204  0064                     _editingTempAlarm:
  8205  0064                     	ds	1
  8206  0065                     _lumLevel:
  8207  0065                     	ds	1
  8208  0066                     _temp:
  8209  0066                     	ds	1
  8210  0067                     _ALAF:
  8211  0067                     	ds	1
  8212  0068                     _eusartRxCount:
  8213  0068                     	ds	1
  8214  0069                     _eusartRxTail:
  8215  0069                     	ds	1
  8216  006A                     _eusartRxHead:
  8217  006A                     	ds	1
  8218  006B                     _eusartTxTail:
  8219  006B                     	ds	1
  8220  006C                     _eusartTxHead:
  8221  006C                     	ds	1
  8222                           
  8223                           	psect	dataBANK0
  8224  006D                     __pdataBANK0:
  8225  006D                     _TALA:
  8226  006D                     	ds	1
  8227  006E                     _PMON:
  8228  006E                     	ds	1
  8229                           
  8230                           	psect	bssBANK1
  8231  00C3                     __pbssBANK1:
  8232  00C3                     update_menuLCD@F12902:
  8233  00C3                     	ds	3
  8234  00C6                     _lumAlarm:
  8235  00C6                     	ds	3
  8236  00C9                     _tempAlarm:
  8237  00C9                     	ds	3
  8238  00CC                     _dimingLed:
  8239  00CC                     	ds	2
  8240  00CE                     _i2c1_driver_i2cISR:
  8241  00CE                     	ds	2
  8242  00D0                     _i2c1_driver_busCollisionISR:
  8243  00D0                     	ds	2
  8244  00D2                     _flagNr:
  8245  00D2                     	ds	1
  8246  00D3                     _writeEEPROM_flag:
  8247  00D3                     	ds	1
  8248  00D4                     _counterMonitorAux:
  8249  00D4                     	ds	1
  8250  00D5                     _monitor_TEMP_LUM:
  8251  00D5                     	ds	1
  8252  00D6                     _flagS1pushed:
  8253  00D6                     	ds	1
  8254  00D7                     _S1_Value:
  8255  00D7                     	ds	1
  8256                           
  8257                           	psect	dataBANK1
  8258  00E3                     __pdataBANK1:
  8259  00E3                     _alarmPWMStart:
  8260  00E3                     	ds	3
  8261  00E6                     _prevLumLevel:
  8262  00E6                     	ds	2
  8263  00E8                     _prevTemp:
  8264  00E8                     	ds	2
  8265  00EA                     _updateLCD:
  8266  00EA                     	ds	1
  8267                           
  8268                           	psect	bssBANK2
  8269  0120                     __pbssBANK2:
  8270  0120                     main@F13047:
  8271  0120                     	ds	20
  8272                           
  8273                           	psect	bssBANK3
  8274  01A0                     __pbssBANK3:
  8275  01A0                     _eusartTxBuffer:
  8276  01A0                     	ds	64
  8277                           
  8278                           	psect	bssBANK4
  8279  0220                     __pbssBANK4:
  8280  0220                     _eusartRxBuffer:
  8281  0220                     	ds	64
  8282                           
  8283                           	psect	inittext
  8284  1230                     init_ram:
  8285  1230  00FE               	movwf	btemp
  8286  1231                     initloop:
  8287  1231  0012               	moviw fsr0++
  8288  1232  001E               	movwi fsr1++
  8289  1233  0BFE               	decfsz	btemp,f
  8290  1234  2A31               	goto	initloop
  8291  1235  3400               	retlw	0
  8292                           
  8293                           	psect	clrtext
  8294  122A                     clear_ram0:	
  8295                           ;	Called with FSR0 containing the base address, and
  8296                           ;	WREG with the size to clear
  8297                           
  8298  122A  0064               	clrwdt	;clear the watchdog before getting into this loop
  8299  122B                     clrloop0:
  8300  122B  0180               	clrf	0	;clear RAM location pointed to by FSR
  8301  122C  3101               	addfsr 0,1
  8302  122D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8303  122E  2A2B               	goto	clrloop0	;have we reached the end yet?
  8304  122F  3400               	retlw	0	;all done for this memory range, return
  8305                           
  8306                           	psect	cstackBANK1
  8307  00A0                     __pcstackBANK1:
  8308  00A0                     ??_main:
  8309                           
  8310                           ; 1 bytes @ 0x0
  8311  00A0                     	ds	3
  8312  00A3                     main@buff:
  8313                           
  8314                           ; 20 bytes @ 0x3
  8315  00A3                     	ds	20
  8316  00B7                     _main$3496:
  8317                           
  8318                           ; 2 bytes @ 0x17
  8319  00B7                     	ds	2
  8320  00B9                     main@checkSumAux:
  8321                           
  8322                           ; 1 bytes @ 0x19
  8323  00B9                     	ds	1
  8324  00BA                     main@notInit:
  8325                           
  8326                           ; 1 bytes @ 0x1A
  8327  00BA                     	ds	1
  8328  00BB                     main@corrupted:
  8329                           
  8330                           ; 1 bytes @ 0x1B
  8331  00BB                     	ds	1
  8332  00BC                     main@i:
  8333                           
  8334                           ; 2 bytes @ 0x1C
  8335  00BC                     	ds	2
  8336  00BE                     main@c:
  8337                           
  8338                           ; 1 bytes @ 0x1E
  8339  00BE                     	ds	1
  8340  00BF                     main@i_2532:
  8341                           
  8342                           ; 2 bytes @ 0x1F
  8343  00BF                     	ds	2
  8344  00C1                     main@n:
  8345                           
  8346                           ; 2 bytes @ 0x21
  8347  00C1                     	ds	2
  8348                           
  8349                           	psect	cstackCOMMON
  8350  0070                     __pcstackCOMMON:
  8351  0070                     ?_isdigit:
  8352  0070                     ?_i2c1_driver_open:	
  8353                           ; 1 bit 
  8354                           
  8355  0070                     ?_PMD_Initialize:	
  8356                           ; 1 bit 
  8357                           
  8358  0070                     ?_OSCILLATOR_Initialize:	
  8359                           ; 1 bytes @ 0x0
  8360                           
  8361  0070                     ?_PWM6_Initialize:	
  8362                           ; 1 bytes @ 0x0
  8363                           
  8364  0070                     ?_ADCC_Initialize:	
  8365                           ; 1 bytes @ 0x0
  8366                           
  8367  0070                     ?_TMR2_Initialize:	
  8368                           ; 1 bytes @ 0x0
  8369                           
  8370  0070                     ?_TMR1_Initialize:	
  8371                           ; 1 bytes @ 0x0
  8372                           
  8373  0070                     ?_EXT_INT_Initialize:	
  8374                           ; 1 bytes @ 0x0
  8375                           
  8376  0070                     ?_EUSART_Initialize:	
  8377                           ; 1 bytes @ 0x0
  8378                           
  8379  0070                     ?_INT_ISR:	
  8380                           ; 1 bytes @ 0x0
  8381                           
  8382  0070                     ??_INT_ISR:	
  8383                           ; 1 bytes @ 0x0
  8384                           
  8385  0070                     ?_TMR1_ISR:	
  8386                           ; 1 bytes @ 0x0
  8387                           
  8388  0070                     ?_TMR1_DefaultInterruptHandler:	
  8389                           ; 1 bytes @ 0x0
  8390                           
  8391  0070                     ??_TMR1_DefaultInterruptHandler:	
  8392                           ; 1 bytes @ 0x0
  8393                           
  8394  0070                     ?_INT_CallBack:	
  8395                           ; 1 bytes @ 0x0
  8396                           
  8397  0070                     ??_INT_CallBack:	
  8398                           ; 1 bytes @ 0x0
  8399                           
  8400  0070                     ?_EUSART_Receive_ISR:	
  8401                           ; 1 bytes @ 0x0
  8402                           
  8403  0070                     ??_EUSART_Receive_ISR:	
  8404                           ; 1 bytes @ 0x0
  8405                           
  8406  0070                     ?_EUSART_Transmit_ISR:	
  8407                           ; 1 bytes @ 0x0
  8408                           
  8409  0070                     ??_EUSART_Transmit_ISR:	
  8410                           ; 1 bytes @ 0x0
  8411                           
  8412  0070                     ?_ReadI2C:	
  8413                           ; 1 bytes @ 0x0
  8414                           
  8415  0070                     ?_WriteI2C:	
  8416                           ; 1 bytes @ 0x0
  8417                           
  8418  0070                     ?_PIN_MANAGER_Initialize:	
  8419                           ; 1 bytes @ 0x0
  8420                           
  8421  0070                     ?_SYSTEM_Initialize:	
  8422                           ; 1 bytes @ 0x0
  8423                           
  8424  0070                     ?_INTERRUPT_InterruptManager:	
  8425                           ; 1 bytes @ 0x0
  8426                           
  8427  0070                     ?_TMR1_WriteTimer:	
  8428                           ; 1 bytes @ 0x0
  8429                           
  8430  0070                     ?_TMR2_Start:	
  8431                           ; 1 bytes @ 0x0
  8432                           
  8433  0070                     ?_TMR2_StartTimer:	
  8434                           ; 1 bytes @ 0x0
  8435                           
  8436  0070                     ?_TMR2_Stop:	
  8437                           ; 1 bytes @ 0x0
  8438                           
  8439  0070                     ?_TMR2_StopTimer:	
  8440                           ; 1 bytes @ 0x0
  8441                           
  8442  0070                     ?_INT_DefaultInterruptHandler:	
  8443                           ; 1 bytes @ 0x0
  8444                           
  8445  0070                     ??_INT_DefaultInterruptHandler:	
  8446                           ; 1 bytes @ 0x0
  8447                           
  8448  0070                     ?_EUSART_is_rx_ready:	
  8449                           ; 1 bytes @ 0x0
  8450                           
  8451  0070                     ?_EUSART_Read:	
  8452                           ; 1 bytes @ 0x0
  8453                           
  8454  0070                     ?_EUSART_Write:	
  8455                           ; 1 bytes @ 0x0
  8456                           
  8457  0070                     ?_getch:	
  8458                           ; 1 bytes @ 0x0
  8459                           
  8460  0070                     ?_putch:	
  8461                           ; 1 bytes @ 0x0
  8462                           
  8463  0070                     ?_tsttc:	
  8464                           ; 1 bytes @ 0x0
  8465                           
  8466  0070                     ?_LCDsend:	
  8467                           ; 1 bytes @ 0x0
  8468                           
  8469  0070                     ?_LCDinit:	
  8470                           ; 1 bytes @ 0x0
  8471                           
  8472  0070                     ?_LCDcmd:	
  8473                           ; 1 bytes @ 0x0
  8474                           
  8475  0070                     ?_LCDchar:	
  8476                           ; 1 bytes @ 0x0
  8477                           
  8478  0070                     ?_PWM_Output_D4_Enable:	
  8479                           ; 1 bytes @ 0x0
  8480                           
  8481  0070                     ?_PWM_Output_D4_Disable:	
  8482                           ; 1 bytes @ 0x0
  8483                           
  8484  0070                     ?_Clock_ISR:	
  8485                           ; 1 bytes @ 0x0
  8486                           
  8487  0070                     ??_Clock_ISR:	
  8488                           ; 1 bytes @ 0x0
  8489                           
  8490  0070                     ?_wirteEEPROMinit:	
  8491                           ; 1 bytes @ 0x0
  8492                           
  8493  0070                     ?_update_menuLCD:	
  8494                           ; 1 bytes @ 0x0
  8495                           
  8496  0070                     ?_monitoring_TEMP_LUM:	
  8497                           ; 1 bytes @ 0x0
  8498                           
  8499  0070                     ?_S1button:	
  8500                           ; 1 bytes @ 0x0
  8501                           
  8502  0070                     ?_checkFlags:	
  8503                           ; 1 bytes @ 0x0
  8504                           
  8505  0070                     ?_editClock:	
  8506                           ; 1 bytes @ 0x0
  8507                           
  8508  0070                     ?_editTemp:	
  8509                           ; 1 bytes @ 0x0
  8510                           
  8511  0070                     ?_editLum:	
  8512                           ; 1 bytes @ 0x0
  8513                           
  8514  0070                     ?_toggleAlarms:	
  8515                           ; 1 bytes @ 0x0
  8516                           
  8517  0070                     ?_S1_ISR:	
  8518                           ; 1 bytes @ 0x0
  8519                           
  8520  0070                     ??_S1_ISR:	
  8521                           ; 1 bytes @ 0x0
  8522                           
  8523  0070                     ?_sendOKMessage:	
  8524                           ; 1 bytes @ 0x0
  8525                           
  8526  0070                     ?_sendERRORMessage:	
  8527                           ; 1 bytes @ 0x0
  8528                           
  8529  0070                     ?_main:	
  8530                           ; 1 bytes @ 0x0
  8531                           
  8532  0070                     TMR1_WriteTimer@timerVal:	
  8533                           ; 1 bytes @ 0x0
  8534                           
  8535                           
  8536                           ; 2 bytes @ 0x0
  8537  0070                     	ds	2
  8538  0072                     ??_PMD_Initialize:
  8539  0072                     ??_OSCILLATOR_Initialize:	
  8540                           ; 1 bytes @ 0x2
  8541                           
  8542  0072                     ??_PWM6_Initialize:	
  8543                           ; 1 bytes @ 0x2
  8544                           
  8545  0072                     ??_ADCC_Initialize:	
  8546                           ; 1 bytes @ 0x2
  8547                           
  8548  0072                     ??_TMR2_Initialize:	
  8549                           ; 1 bytes @ 0x2
  8550                           
  8551  0072                     ??_TMR1_ISR:	
  8552                           ; 1 bytes @ 0x2
  8553                           
  8554  0072                     ?_TMR1_SetInterruptHandler:	
  8555                           ; 1 bytes @ 0x2
  8556                           
  8557  0072                     ?_EUSART_SetRxInterruptHandler:	
  8558                           ; 1 bytes @ 0x2
  8559                           
  8560  0072                     ?_EUSART_SetTxInterruptHandler:	
  8561                           ; 1 bytes @ 0x2
  8562                           
  8563  0072                     ?_memset:	
  8564                           ; 1 bytes @ 0x2
  8565                           
  8566  0072                     ??_isdigit:	
  8567                           ; 1 bytes @ 0x2
  8568                           
  8569  0072                     ??_ReadI2C:	
  8570                           ; 1 bytes @ 0x2
  8571                           
  8572  0072                     ??_WriteI2C:	
  8573                           ; 1 bytes @ 0x2
  8574                           
  8575  0072                     ??_PIN_MANAGER_Initialize:	
  8576                           ; 1 bytes @ 0x2
  8577                           
  8578  0072                     ??_i2c1_driver_open:	
  8579                           ; 1 bytes @ 0x2
  8580                           
  8581  0072                     ??_INTERRUPT_InterruptManager:	
  8582                           ; 1 bytes @ 0x2
  8583                           
  8584  0072                     ??_TMR1_WriteTimer:	
  8585                           ; 1 bytes @ 0x2
  8586                           
  8587  0072                     ?_PWM6_LoadDutyValue:	
  8588                           ; 1 bytes @ 0x2
  8589                           
  8590  0072                     ??_TMR2_Start:	
  8591                           ; 1 bytes @ 0x2
  8592                           
  8593  0072                     ??_TMR2_StartTimer:	
  8594                           ; 1 bytes @ 0x2
  8595                           
  8596  0072                     ??_TMR2_Stop:	
  8597                           ; 1 bytes @ 0x2
  8598                           
  8599  0072                     ??_TMR2_StopTimer:	
  8600                           ; 1 bytes @ 0x2
  8601                           
  8602  0072                     ?_INT_SetInterruptHandler:	
  8603                           ; 1 bytes @ 0x2
  8604                           
  8605  0072                     ??_EUSART_is_rx_ready:	
  8606                           ; 1 bytes @ 0x2
  8607                           
  8608  0072                     ??_EUSART_Read:	
  8609                           ; 1 bytes @ 0x2
  8610                           
  8611  0072                     ??_EUSART_Write:	
  8612                           ; 1 bytes @ 0x2
  8613                           
  8614  0072                     ?_differenceBetweenTimePeriod:	
  8615                           ; 1 bytes @ 0x2
  8616                           
  8617  0072                     ??_PWM_Output_D4_Enable:	
  8618                           ; 1 bytes @ 0x2
  8619                           
  8620  0072                     ??_PWM_Output_D4_Disable:	
  8621                           ; 1 bytes @ 0x2
  8622                           
  8623  0072                     ??_S1button:	
  8624                           ; 1 bytes @ 0x2
  8625                           
  8626  0072                     ?_ADCC_GetSingleConversion:	
  8627                           ; 1 bytes @ 0x2
  8628                           
  8629  0072                     ?___wmul:	
  8630                           ; 2 bytes @ 0x2
  8631                           
  8632  0072                     ?___lwdiv:	
  8633                           ; 2 bytes @ 0x2
  8634                           
  8635  0072                     _isdigit$2990:	
  8636                           ; 2 bytes @ 0x2
  8637                           
  8638  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  8639                           ; 1 bytes @ 0x2
  8640                           
  8641  0072                     PWM6_LoadDutyValue@dutyValue:	
  8642                           ; 2 bytes @ 0x2
  8643                           
  8644  0072                     INT_SetInterruptHandler@InterruptHandler:	
  8645                           ; 2 bytes @ 0x2
  8646                           
  8647  0072                     EUSART_SetTxInterruptHandler@interruptHandler:	
  8648                           ; 2 bytes @ 0x2
  8649                           
  8650  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  8651                           ; 2 bytes @ 0x2
  8652                           
  8653  0072                     ___wmul@multiplier:	
  8654                           ; 2 bytes @ 0x2
  8655                           
  8656  0072                     ___lwdiv@divisor:	
  8657                           ; 2 bytes @ 0x2
  8658                           
  8659  0072                     memset@c:	
  8660                           ; 2 bytes @ 0x2
  8661                           
  8662  0072                     differenceBetweenTimePeriod@start:	
  8663                           ; 2 bytes @ 0x2
  8664                           
  8665                           
  8666                           ; 3 bytes @ 0x2
  8667  0072                     	ds	1
  8668  0073                     WriteI2C@data_out:
  8669  0073                     EUSART_Read@readValue:	
  8670                           ; 1 bytes @ 0x3
  8671                           
  8672  0073                     EUSART_Write@txData:	
  8673                           ; 1 bytes @ 0x3
  8674                           
  8675  0073                     isdigit@c:	
  8676                           ; 1 bytes @ 0x3
  8677                           
  8678                           
  8679                           ; 1 bytes @ 0x3
  8680  0073                     	ds	1
  8681  0074                     ??_TMR1_Initialize:
  8682  0074                     ??_EXT_INT_Initialize:	
  8683                           ; 1 bytes @ 0x4
  8684                           
  8685  0074                     ??_EUSART_Initialize:	
  8686                           ; 1 bytes @ 0x4
  8687                           
  8688  0074                     ??_TMR1_SetInterruptHandler:	
  8689                           ; 1 bytes @ 0x4
  8690                           
  8691  0074                     ??_EUSART_SetRxInterruptHandler:	
  8692                           ; 1 bytes @ 0x4
  8693                           
  8694  0074                     ??_EUSART_SetTxInterruptHandler:	
  8695                           ; 1 bytes @ 0x4
  8696                           
  8697  0074                     ??_PWM6_LoadDutyValue:	
  8698                           ; 1 bytes @ 0x4
  8699                           
  8700  0074                     ??_INT_SetInterruptHandler:	
  8701                           ; 1 bytes @ 0x4
  8702                           
  8703  0074                     ??_getch:	
  8704                           ; 1 bytes @ 0x4
  8705                           
  8706  0074                     ??_putch:	
  8707                           ; 1 bytes @ 0x4
  8708                           
  8709  0074                     ??_tsttc:	
  8710                           ; 1 bytes @ 0x4
  8711                           
  8712  0074                     ??_LCDsend:	
  8713                           ; 1 bytes @ 0x4
  8714                           
  8715  0074                     ?_LCDsend2x4:	
  8716                           ; 1 bytes @ 0x4
  8717                           
  8718  0074                     putch@txData:	
  8719                           ; 1 bytes @ 0x4
  8720                           
  8721  0074                     LCDsend2x4@mode:	
  8722                           ; 1 bytes @ 0x4
  8723                           
  8724  0074                     ___wmul@multiplicand:	
  8725                           ; 1 bytes @ 0x4
  8726                           
  8727  0074                     ___lwdiv@dividend:	
  8728                           ; 2 bytes @ 0x4
  8729                           
  8730  0074                     memset@n:	
  8731                           ; 2 bytes @ 0x4
  8732                           
  8733                           
  8734                           ; 2 bytes @ 0x4
  8735  0074                     	ds	1
  8736  0075                     ??_SYSTEM_Initialize:
  8737  0075                     ??_ADCC_GetSingleConversion:	
  8738                           ; 1 bytes @ 0x5
  8739                           
  8740  0075                     ??_LCDsend2x4:	
  8741                           ; 1 bytes @ 0x5
  8742                           
  8743  0075                     ?_sendMessage:	
  8744                           ; 1 bytes @ 0x5
  8745                           
  8746  0075                     ADCC_GetSingleConversion@channel:	
  8747                           ; 1 bytes @ 0x5
  8748                           
  8749  0075                     tsttc@value:	
  8750                           ; 1 bytes @ 0x5
  8751                           
  8752  0075                     LCDsend@c:	
  8753                           ; 1 bytes @ 0x5
  8754                           
  8755  0075                     sendMessage@num:	
  8756                           ; 1 bytes @ 0x5
  8757                           
  8758  0075                     differenceBetweenTimePeriod@stop:	
  8759                           ; 2 bytes @ 0x5
  8760                           
  8761                           
  8762                           ; 3 bytes @ 0x5
  8763  0075                     	ds	1
  8764  0076                     ??_memset:
  8765  0076                     ??___wmul:	
  8766                           ; 1 bytes @ 0x6
  8767                           
  8768  0076                     ??___lwdiv:	
  8769                           ; 1 bytes @ 0x6
  8770                           
  8771  0076                     ___wmul@product:	
  8772                           ; 1 bytes @ 0x6
  8773                           
  8774                           
  8775                           ; 2 bytes @ 0x6
  8776  0076                     	ds	1
  8777  0077                     LCDsend2x4@c:
  8778  0077                     sendMessage@buffer:	
  8779                           ; 1 bytes @ 0x7
  8780                           
  8781  0077                     memset@p:	
  8782                           ; 1 bytes @ 0x7
  8783                           
  8784  0077                     ___lwdiv@quotient:	
  8785                           ; 1 bytes @ 0x7
  8786                           
  8787                           
  8788                           ; 2 bytes @ 0x7
  8789  0077                     	ds	1
  8790  0078                     ??_DATAEE_WriteByte:
  8791  0078                     ?_DATAEE_ReadByte:	
  8792                           ; 1 bytes @ 0x8
  8793                           
  8794  0078                     ??_sendMessage:	
  8795                           ; 1 bytes @ 0x8
  8796                           
  8797  0078                     DATAEE_WriteByte@GIEBitValue:	
  8798                           ; 1 bytes @ 0x8
  8799                           
  8800  0078                     LCDsend2x4@hc:	
  8801                           ; 1 bytes @ 0x8
  8802                           
  8803  0078                     differenceBetweenTimePeriod@diff:	
  8804                           ; 1 bytes @ 0x8
  8805                           
  8806  0078                     memset@p1:	
  8807                           ; 1 bytes @ 0x8
  8808                           
  8809  0078                     DATAEE_ReadByte@bAdd:	
  8810                           ; 1 bytes @ 0x8
  8811                           
  8812                           
  8813                           ; 2 bytes @ 0x8
  8814  0078                     	ds	1
  8815  0079                     ??_differenceBetweenTimePeriod:
  8816  0079                     ??_wirteEEPROMinit:	
  8817                           ; 1 bytes @ 0x9
  8818                           
  8819  0079                     ??_sendOKMessage:	
  8820                           ; 1 bytes @ 0x9
  8821                           
  8822  0079                     ??_sendERRORMessage:	
  8823                           ; 1 bytes @ 0x9
  8824                           
  8825  0079                     LCDsend2x4@lc:	
  8826                           ; 1 bytes @ 0x9
  8827                           
  8828  0079                     ___lwdiv@counter:	
  8829                           ; 1 bytes @ 0x9
  8830                           
  8831                           
  8832                           ; 1 bytes @ 0x9
  8833  0079                     	ds	1
  8834  007A                     ??_cmd_mmp:
  8835  007A                     ??_cmd_mta:	
  8836                           ; 1 bytes @ 0xA
  8837                           
  8838  007A                     ??_cmd_dtl:	
  8839                           ; 1 bytes @ 0xA
  8840                           
  8841  007A                     ??_DATAEE_ReadByte:	
  8842                           ; 1 bytes @ 0xA
  8843                           
  8844  007A                     ??_LCDcmd:	
  8845                           ; 1 bytes @ 0xA
  8846                           
  8847  007A                     ??_LCDchar:	
  8848                           ; 1 bytes @ 0xA
  8849                           
  8850                           
  8851                           	psect	cstackBANK0
  8852  0020                     __pcstackBANK0:	
  8853                           ; 1 bytes @ 0xA
  8854                           
  8855  0020                     ?_DATAEE_WriteByte:
  8856  0020                     ??_LCDinit:	
  8857                           ; 1 bytes @ 0x0
  8858                           
  8859  0020                     ?___lwmod:	
  8860                           ; 1 bytes @ 0x0
  8861                           
  8862  0020                     LCDcmd@c:	
  8863                           ; 2 bytes @ 0x0
  8864                           
  8865  0020                     LCDchar@c:	
  8866                           ; 1 bytes @ 0x0
  8867                           
  8868  0020                     DATAEE_WriteByte@bAdd:	
  8869                           ; 1 bytes @ 0x0
  8870                           
  8871  0020                     sendMessage@n:	
  8872                           ; 2 bytes @ 0x0
  8873                           
  8874  0020                     ___lwmod@divisor:	
  8875                           ; 2 bytes @ 0x0
  8876                           
  8877                           
  8878                           ; 2 bytes @ 0x0
  8879  0020                     	ds	1
  8880  0021                     ?_LCDstr:
  8881  0021                     LCDstr@p:	
  8882                           ; 1 bytes @ 0x1
  8883                           
  8884                           
  8885                           ; 2 bytes @ 0x1
  8886  0021                     	ds	1
  8887  0022                     DATAEE_WriteByte@bData:
  8888  0022                     sendOKMessage@cmd:	
  8889                           ; 1 bytes @ 0x2
  8890                           
  8891  0022                     sendERRORMessage@cmd:	
  8892                           ; 1 bytes @ 0x2
  8893                           
  8894  0022                     ___lwmod@dividend:	
  8895                           ; 1 bytes @ 0x2
  8896                           
  8897                           
  8898                           ; 2 bytes @ 0x2
  8899  0022                     	ds	1
  8900  0023                     ??_LCDstr:
  8901  0023                     ??_monitoring_TEMP_LUM:	
  8902                           ; 1 bytes @ 0x3
  8903                           
  8904  0023                     sendOKMessage@bufw:	
  8905                           ; 1 bytes @ 0x3
  8906                           
  8907  0023                     sendERRORMessage@bufw:	
  8908                           ; 4 bytes @ 0x3
  8909                           
  8910                           
  8911                           ; 4 bytes @ 0x3
  8912  0023                     	ds	1
  8913  0024                     ??___lwmod:
  8914                           
  8915                           ; 1 bytes @ 0x4
  8916  0024                     	ds	1
  8917  0025                     ___lwmod@counter:
  8918                           
  8919                           ; 1 bytes @ 0x5
  8920  0025                     	ds	1
  8921  0026                     ?_sprintf:
  8922  0026                     LCDstr@c:	
  8923                           ; 2 bytes @ 0x6
  8924                           
  8925  0026                     sprintf@f:	
  8926                           ; 1 bytes @ 0x6
  8927                           
  8928                           
  8929                           ; 2 bytes @ 0x6
  8930  0026                     	ds	1
  8931  0027                     ?_cmd_rc:
  8932  0027                     ?_cmd_sc:	
  8933                           ; 1 bytes @ 0x7
  8934                           
  8935  0027                     ?_cmd_rtl:	
  8936                           ; 1 bytes @ 0x7
  8937                           
  8938  0027                     ?_cmd_rp:	
  8939                           ; 1 bytes @ 0x7
  8940                           
  8941  0027                     ?_cmd_mmp:	
  8942                           ; 1 bytes @ 0x7
  8943                           
  8944  0027                     ?_cmd_mta:	
  8945                           ; 1 bytes @ 0x7
  8946                           
  8947  0027                     ?_cmd_ra:	
  8948                           ; 1 bytes @ 0x7
  8949                           
  8950  0027                     ?_cmd_dac:	
  8951                           ; 1 bytes @ 0x7
  8952                           
  8953  0027                     ?_cmd_dtl:	
  8954                           ; 1 bytes @ 0x7
  8955                           
  8956  0027                     ?_cmd_aa:	
  8957                           ; 1 bytes @ 0x7
  8958                           
  8959  0027                     ?_cmd_ir:	
  8960                           ; 1 bytes @ 0x7
  8961                           
  8962  0027                     ?_cmd_trc:	
  8963                           ; 1 bytes @ 0x7
  8964                           
  8965  0027                     ?_cmd_tri:	
  8966                           ; 1 bytes @ 0x7
  8967                           
  8968  0027                     cmd_rc@num:	
  8969                           ; 1 bytes @ 0x7
  8970                           
  8971  0027                     cmd_sc@num:	
  8972                           ; 2 bytes @ 0x7
  8973                           
  8974  0027                     cmd_rtl@num:	
  8975                           ; 2 bytes @ 0x7
  8976                           
  8977  0027                     cmd_rp@num:	
  8978                           ; 2 bytes @ 0x7
  8979                           
  8980  0027                     cmd_mmp@num:	
  8981                           ; 2 bytes @ 0x7
  8982                           
  8983  0027                     cmd_mta@num:	
  8984                           ; 2 bytes @ 0x7
  8985                           
  8986  0027                     cmd_ra@num:	
  8987                           ; 2 bytes @ 0x7
  8988                           
  8989  0027                     cmd_dac@num:	
  8990                           ; 2 bytes @ 0x7
  8991                           
  8992  0027                     cmd_dtl@num:	
  8993                           ; 2 bytes @ 0x7
  8994                           
  8995  0027                     cmd_aa@num:	
  8996                           ; 2 bytes @ 0x7
  8997                           
  8998  0027                     cmd_ir@num:	
  8999                           ; 2 bytes @ 0x7
  9000                           
  9001  0027                     cmd_trc@num:	
  9002                           ; 2 bytes @ 0x7
  9003                           
  9004  0027                     cmd_tri@num:	
  9005                           ; 2 bytes @ 0x7
  9006                           
  9007                           
  9008                           ; 2 bytes @ 0x7
  9009  0027                     	ds	2
  9010  0029                     cmd_rc@buffer:
  9011  0029                     cmd_sc@buffer:	
  9012                           ; 1 bytes @ 0x9
  9013                           
  9014  0029                     cmd_rtl@buffer:	
  9015                           ; 1 bytes @ 0x9
  9016                           
  9017  0029                     cmd_rp@buffer:	
  9018                           ; 1 bytes @ 0x9
  9019                           
  9020  0029                     cmd_mmp@buffer:	
  9021                           ; 1 bytes @ 0x9
  9022                           
  9023  0029                     cmd_mta@buffer:	
  9024                           ; 1 bytes @ 0x9
  9025                           
  9026  0029                     cmd_ra@buffer:	
  9027                           ; 1 bytes @ 0x9
  9028                           
  9029  0029                     cmd_dac@buffer:	
  9030                           ; 1 bytes @ 0x9
  9031                           
  9032  0029                     cmd_dtl@buffer:	
  9033                           ; 1 bytes @ 0x9
  9034                           
  9035  0029                     cmd_aa@buffer:	
  9036                           ; 1 bytes @ 0x9
  9037                           
  9038  0029                     cmd_ir@buffer:	
  9039                           ; 1 bytes @ 0x9
  9040                           
  9041  0029                     cmd_trc@buffer:	
  9042                           ; 1 bytes @ 0x9
  9043                           
  9044  0029                     cmd_tri@buffer:	
  9045                           ; 1 bytes @ 0x9
  9046                           
  9047                           
  9048                           ; 1 bytes @ 0x9
  9049  0029                     	ds	1
  9050  002A                     ??_cmd_rc:
  9051  002A                     ??_cmd_sc:	
  9052                           ; 1 bytes @ 0xA
  9053                           
  9054  002A                     ??_cmd_rtl:	
  9055                           ; 1 bytes @ 0xA
  9056                           
  9057  002A                     ??_cmd_rp:	
  9058                           ; 1 bytes @ 0xA
  9059                           
  9060  002A                     ??_cmd_ra:	
  9061                           ; 1 bytes @ 0xA
  9062                           
  9063  002A                     ??_cmd_dac:	
  9064                           ; 1 bytes @ 0xA
  9065                           
  9066  002A                     ??_cmd_aa:	
  9067                           ; 1 bytes @ 0xA
  9068                           
  9069  002A                     ??_cmd_ir:	
  9070                           ; 1 bytes @ 0xA
  9071                           
  9072  002A                     ??_cmd_trc:	
  9073                           ; 1 bytes @ 0xA
  9074                           
  9075  002A                     ??_cmd_tri:	
  9076                           ; 1 bytes @ 0xA
  9077                           
  9078  002A                     cmd_dtl@tempAux:	
  9079                           ; 1 bytes @ 0xA
  9080                           
  9081                           
  9082                           ; 1 bytes @ 0xA
  9083  002A                     	ds	1
  9084  002B                     cmd_sc@h:
  9085  002B                     cmd_dac@h:	
  9086                           ; 1 bytes @ 0xB
  9087                           
  9088  002B                     cmd_dtl@lumAux:	
  9089                           ; 1 bytes @ 0xB
  9090                           
  9091  002B                     cmd_rtl@buff:	
  9092                           ; 1 bytes @ 0xB
  9093                           
  9094  002B                     cmd_rp@buff:	
  9095                           ; 5 bytes @ 0xB
  9096                           
  9097  002B                     cmd_rc@buff:	
  9098                           ; 5 bytes @ 0xB
  9099                           
  9100  002B                     cmd_ir@buff:	
  9101                           ; 6 bytes @ 0xB
  9102                           
  9103  002B                     cmd_ra@buff:	
  9104                           ; 7 bytes @ 0xB
  9105                           
  9106                           
  9107                           ; 9 bytes @ 0xB
  9108  002B                     	ds	1
  9109  002C                     cmd_sc@m:
  9110  002C                     cmd_dac@m:	
  9111                           ; 1 bytes @ 0xC
  9112                           
  9113                           
  9114                           ; 1 bytes @ 0xC
  9115  002C                     	ds	1
  9116  002D                     cmd_sc@s:
  9117  002D                     cmd_dac@s:	
  9118                           ; 1 bytes @ 0xD
  9119                           
  9120                           
  9121                           ; 1 bytes @ 0xD
  9122  002D                     	ds	1
  9123  002E                     ??_sprintf:
  9124                           
  9125                           ; 1 bytes @ 0xE
  9126  002E                     	ds	1
  9127  002F                     cmd_tri@buffData:
  9128                           
  9129                           ; 5 bytes @ 0xF
  9130  002F                     	ds	1
  9131  0030                     cmd_trc@buffData:
  9132                           
  9133                           ; 5 bytes @ 0x10
  9134  0030                     	ds	2
  9135  0032                     sprintf@ap:
  9136                           
  9137                           ; 1 bytes @ 0x12
  9138  0032                     	ds	1
  9139  0033                     sprintf@prec:
  9140                           
  9141                           ; 1 bytes @ 0x13
  9142  0033                     	ds	1
  9143  0034                     sprintf@val:
  9144  0034                     cmd_tri@buffInit:	
  9145                           ; 2 bytes @ 0x14
  9146                           
  9147                           
  9148                           ; 4 bytes @ 0x14
  9149  0034                     	ds	1
  9150  0035                     cmd_trc@buffInit:
  9151                           
  9152                           ; 3 bytes @ 0x15
  9153  0035                     	ds	1
  9154  0036                     sprintf@flag:
  9155                           
  9156                           ; 1 bytes @ 0x16
  9157  0036                     	ds	1
  9158  0037                     sprintf@width:
  9159                           
  9160                           ; 2 bytes @ 0x17
  9161  0037                     	ds	1
  9162  0038                     cmd_tri@maxReadings:
  9163  0038                     cmd_trc@i:	
  9164                           ; 1 bytes @ 0x18
  9165                           
  9166                           
  9167                           ; 2 bytes @ 0x18
  9168  0038                     	ds	1
  9169  0039                     cmd_tri@buffEOM:
  9170  0039                     sprintf@c:	
  9171                           ; 1 bytes @ 0x19
  9172                           
  9173                           
  9174                           ; 1 bytes @ 0x19
  9175  0039                     	ds	1
  9176  003A                     sprintf@sp:
  9177  003A                     cmd_trc@address:	
  9178                           ; 1 bytes @ 0x1A
  9179                           
  9180  003A                     cmd_tri@i:	
  9181                           ; 2 bytes @ 0x1A
  9182                           
  9183                           
  9184                           ; 2 bytes @ 0x1A
  9185  003A                     	ds	1
  9186  003B                     ??_update_menuLCD:
  9187                           
  9188                           ; 1 bytes @ 0x1B
  9189  003B                     	ds	1
  9190  003C                     cmd_trc@buffEOM:
  9191  003C                     cmd_tri@index:	
  9192                           ; 1 bytes @ 0x1C
  9193                           
  9194                           
  9195                           ; 1 bytes @ 0x1C
  9196  003C                     	ds	1
  9197  003D                     cmd_tri@n:
  9198  003D                     cmd_trc@maxReadings:	
  9199                           ; 1 bytes @ 0x1D
  9200                           
  9201                           
  9202                           ; 2 bytes @ 0x1D
  9203  003D                     	ds	1
  9204  003E                     cmd_tri@j:
  9205                           
  9206                           ; 1 bytes @ 0x1E
  9207  003E                     	ds	1
  9208  003F                     cmd_tri@startingIndex:
  9209  003F                     cmd_trc@n:	
  9210                           ; 1 bytes @ 0x1F
  9211                           
  9212                           
  9213                           ; 2 bytes @ 0x1F
  9214  003F                     	ds	2
  9215  0041                     cmd_trc@j:
  9216  0041                     update_menuLCD@str:	
  9217                           ; 1 bytes @ 0x21
  9218                           
  9219                           
  9220                           ; 8 bytes @ 0x21
  9221  0041                     	ds	8
  9222  0049                     update_menuLCD@tt:
  9223                           
  9224                           ; 4 bytes @ 0x29
  9225  0049                     	ds	4
  9226  004D                     update_menuLCD@l:
  9227                           
  9228                           ; 3 bytes @ 0x2D
  9229  004D                     	ds	3
  9230  0050                     update_menuLCD@diff:
  9231                           
  9232                           ; 3 bytes @ 0x30
  9233  0050                     	ds	3
  9234  0053                     ??_checkFlags:
  9235                           
  9236                           ; 1 bytes @ 0x33
  9237  0053                     	ds	1
  9238  0054                     ??_editClock:
  9239  0054                     ??_editTemp:	
  9240                           ; 1 bytes @ 0x34
  9241                           
  9242  0054                     ??_editLum:	
  9243                           ; 1 bytes @ 0x34
  9244                           
  9245  0054                     ??_toggleAlarms:	
  9246                           ; 1 bytes @ 0x34
  9247                           
  9248                           
  9249                           ; 1 bytes @ 0x34
  9250  0054                     	ds	1
  9251                           
  9252                           	psect	maintext
  9253  0099                     __pmaintext:	
  9254 ;;
  9255 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  9256 ;;
  9257 ;; *************** function _main *****************
  9258 ;; Defined at:
  9259 ;;		line 1077 in file "main.c"
  9260 ;; Parameters:    Size  Location     Type
  9261 ;;		None
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;  i               2   28[BANK1 ] int 
  9264 ;;  buff           20    3[BANK1 ] unsigned char [20]
  9265 ;;  n               2   33[BANK1 ] int 
  9266 ;;  i               2   31[BANK1 ] int 
  9267 ;;  c               1   30[BANK1 ] unsigned char 
  9268 ;;  corrupted       1   27[BANK1 ] unsigned char 
  9269 ;;  notInit         1   26[BANK1 ] unsigned char 
  9270 ;;  checkSumAux     1   25[BANK1 ] unsigned char 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;                  1    wreg      void 
  9273 ;; Registers used:
  9274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9275 ;; Tracked objects:
  9276 ;;		On entry : B1F/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Locals:         0       0      32       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;Total ram usage:       35 bytes
  9285 ;; Hardware stack levels required when called:   11
  9286 ;; This function calls:
  9287 ;;		_DATAEE_ReadByte
  9288 ;;		_DATAEE_WriteByte
  9289 ;;		_EUSART_is_rx_ready
  9290 ;;		_INT_SetInterruptHandler
  9291 ;;		_LCDinit
  9292 ;;		_PWM6_LoadDutyValue
  9293 ;;		_PWM_Output_D4_Disable
  9294 ;;		_SYSTEM_Initialize
  9295 ;;		_TMR1_SetInterruptHandler
  9296 ;;		_TMR2_StopTimer
  9297 ;;		___wmul
  9298 ;;		_checkFlags
  9299 ;;		_cmd_aa
  9300 ;;		_cmd_dac
  9301 ;;		_cmd_dtl
  9302 ;;		_cmd_ir
  9303 ;;		_cmd_mmp
  9304 ;;		_cmd_mta
  9305 ;;		_cmd_ra
  9306 ;;		_cmd_rc
  9307 ;;		_cmd_rp
  9308 ;;		_cmd_rtl
  9309 ;;		_cmd_sc
  9310 ;;		_cmd_trc
  9311 ;;		_cmd_tri
  9312 ;;		_editClock
  9313 ;;		_editLum
  9314 ;;		_editTemp
  9315 ;;		_getch
  9316 ;;		_i2c1_driver_open
  9317 ;;		_memset
  9318 ;;		_toggleAlarms
  9319 ;; This function is called by:
  9320 ;;		Startup code after reset
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           
  9325                           ;psect for function _main
  9326  0099                     _main:
  9327  0099                     l7000:	
  9328                           ;incstack = 0
  9329                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9330                           
  9331                           
  9332                           ;main.c: 1080: SYSTEM_Initialize();
  9333  0099  3193  23A2  3180   	fcall	_SYSTEM_Initialize
  9334                           
  9335                           ;main.c: 1082: PWM6_LoadDutyValue(0);
  9336  009C  3000               	movlw	0
  9337  009D  00F2               	movwf	PWM6_LoadDutyValue@dutyValue
  9338  009E  00F3               	movwf	PWM6_LoadDutyValue@dutyValue+1
  9339  009F  3192  22DD  3180   	fcall	_PWM6_LoadDutyValue
  9340  00A2                     l7002:
  9341                           
  9342                           ;main.c: 1083: TMR2_StopTimer();
  9343  00A2  3191  21FE  3180   	fcall	_TMR2_StopTimer
  9344  00A5                     l7004:
  9345                           
  9346                           ;main.c: 1084: PWM_Output_D4_Disable();
  9347  00A5  3191  21F4  3180   	fcall	_PWM_Output_D4_Disable
  9348                           
  9349                           ;main.c: 1086: TMR1_SetInterruptHandler(Clock_ISR);
  9350  00A8  3004               	movlw	low _Clock_ISR
  9351  00A9  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9352  00AA  300A               	movlw	high _Clock_ISR
  9353  00AB  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9354  00AC  3192  221E  3180   	fcall	_TMR1_SetInterruptHandler
  9355                           
  9356                           ;main.c: 1088: INT_SetInterruptHandler(S1_ISR);
  9357  00AF  304E               	movlw	low _S1_ISR
  9358  00B0  00F2               	movwf	INT_SetInterruptHandler@InterruptHandler
  9359  00B1  3012               	movlw	high _S1_ISR
  9360  00B2  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  9361  00B3  3192  2218  3180   	fcall	_INT_SetInterruptHandler
  9362  00B6                     l7006:
  9363                           
  9364                           ;main.c: 1090: uint8_t checkSumAux = 0;
  9365  00B6  0021               	movlb	1	; select bank1
  9366  00B7  01B9               	clrf	main@checkSumAux^(0+128)
  9367  00B8                     l7008:
  9368                           
  9369                           ;main.c: 1091: bool notInit = 1;
  9370  00B8  01BA               	clrf	main@notInit^(0+128)
  9371  00B9  0ABA               	incf	main@notInit^(0+128),f
  9372  00BA                     l7010:
  9373                           
  9374                           ;main.c: 1092: bool corrupted = 0;
  9375  00BA  01BB               	clrf	main@corrupted^(0+128)
  9376  00BB                     l7012:
  9377                           
  9378                           ;main.c: 1093: if(DATAEE_ReadByte(0x7000) == 'S'){
  9379  00BB  3000               	movlw	0
  9380  00BC  00F8               	movwf	DATAEE_ReadByte@bAdd
  9381  00BD  3070               	movlw	112
  9382  00BE  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9383  00BF  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9384  00C2  3A53               	xorlw	83
  9385  00C3  1D03               	skipz
  9386  00C4  28C6               	goto	u8171
  9387  00C5  28C7               	goto	u8170
  9388  00C6                     u8171:
  9389  00C6  2905               	goto	l7032
  9390  00C7                     u8170:
  9391  00C7                     l7014:
  9392                           
  9393                           ;main.c: 1094: notInit = 0;
  9394  00C7  0021               	movlb	1	; select bank1
  9395  00C8  01BA               	clrf	main@notInit^(0+128)
  9396  00C9                     l7016:
  9397                           
  9398                           ;main.c: 1095: for(int i = 1; i < 13; i++){
  9399  00C9  3001               	movlw	1
  9400  00CA  00BC               	movwf	main@i^(0+128)
  9401  00CB  3000               	movlw	0
  9402  00CC  00BD               	movwf	(main@i^(0+128)+1)
  9403  00CD                     l7022:
  9404                           
  9405                           ;main.c: 1096: checkSumAux += DATAEE_ReadByte(0x7000 + (i*8));
  9406  00CD  0021               	movlb	1	; select bank1
  9407  00CE  083D               	movf	(main@i+1)^(0+128),w
  9408  00CF  00A1               	movwf	(??_main^(0+128)+1)
  9409  00D0  083C               	movf	main@i^(0+128),w
  9410  00D1  00A0               	movwf	??_main^(0+128)
  9411  00D2  35A0               	lslf	??_main^(0+128),f
  9412  00D3  0DA1               	rlf	(??_main^(0+128)+1),f
  9413  00D4  35A0               	lslf	??_main^(0+128),f
  9414  00D5  0DA1               	rlf	(??_main^(0+128)+1),f
  9415  00D6  35A0               	lslf	??_main^(0+128),f
  9416  00D7  0DA1               	rlf	(??_main^(0+128)+1),f
  9417  00D8  0820               	movf	??_main^(0+128),w
  9418  00D9  3E00               	addlw	0
  9419  00DA  00F8               	movwf	DATAEE_ReadByte@bAdd
  9420  00DB  3070               	movlw	112
  9421  00DC  3D21               	addwfc	(??_main+1)^(0+128),w
  9422  00DD  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9423  00DE  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9424  00E1  0021               	movlb	1	; select bank1
  9425  00E2  00A2               	movwf	(??_main+2)^(0+128)
  9426  00E3  0822               	movf	(??_main+2)^(0+128),w
  9427  00E4  07B9               	addwf	main@checkSumAux^(0+128),f
  9428  00E5                     l7024:
  9429  00E5  3001               	movlw	1
  9430  00E6  07BC               	addwf	main@i^(0+128),f
  9431  00E7  3000               	movlw	0
  9432  00E8  3DBD               	addwfc	(main@i+1)^(0+128),f
  9433  00E9                     l7026:
  9434  00E9  083D               	movf	(main@i+1)^(0+128),w
  9435  00EA  3A80               	xorlw	128
  9436  00EB  00A0               	movwf	??_main^(0+128)
  9437  00EC  3080               	movlw	128
  9438  00ED  0220               	subwf	??_main^(0+128),w
  9439  00EE  1D03               	skipz
  9440  00EF  28F2               	goto	u8185
  9441  00F0  300D               	movlw	13
  9442  00F1  023C               	subwf	main@i^(0+128),w
  9443  00F2                     u8185:
  9444  00F2  1C03               	skipc
  9445  00F3  28F5               	goto	u8181
  9446  00F4  28F6               	goto	u8180
  9447  00F5                     u8181:
  9448  00F5  28CD               	goto	l7022
  9449  00F6                     u8180:
  9450  00F6                     l7028:
  9451                           
  9452                           ;main.c: 1097: };main.c: 1098: if(checkSumAux != DATAEE_ReadByte(0x7000 + (13*8))){
  9453  00F6  3068               	movlw	104
  9454  00F7  00F8               	movwf	DATAEE_ReadByte@bAdd
  9455  00F8  3070               	movlw	112
  9456  00F9  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9457  00FA  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9458  00FD  0021               	movlb	1	; select bank1
  9459  00FE  0639               	xorwf	main@checkSumAux^(0+128),w
  9460  00FF  1903               	skipnz
  9461  0100  2902               	goto	u8191
  9462  0101  2903               	goto	u8190
  9463  0102                     u8191:
  9464  0102  2905               	goto	l7032
  9465  0103                     u8190:
  9466  0103                     l7030:
  9467                           
  9468                           ;main.c: 1099: corrupted = 1;
  9469  0103  01BB               	clrf	main@corrupted^(0+128)
  9470  0104  0ABB               	incf	main@corrupted^(0+128),f
  9471  0105                     l7032:
  9472                           
  9473                           ;main.c: 1100: };main.c: 1101: };main.c: 1103: if(notInit || corrupted){
  9474  0105  0021               	movlb	1	; select bank1
  9475  0106  083A               	movf	main@notInit^(0+128),w
  9476  0107  1D03               	btfss	3,2
  9477  0108  290A               	goto	u8201
  9478  0109  290B               	goto	u8200
  9479  010A                     u8201:
  9480  010A  2910               	goto	l7036
  9481  010B                     u8200:
  9482  010B                     l7034:
  9483  010B  083B               	movf	main@corrupted^(0+128),w
  9484  010C  1903               	btfsc	3,2
  9485  010D  290F               	goto	u8211
  9486  010E  2910               	goto	u8210
  9487  010F                     u8211:
  9488  010F  29BB               	goto	l7038
  9489  0110                     u8210:
  9490  0110                     l7036:
  9491                           
  9492                           ;main.c: 1104: DATAEE_WriteByte( 0x7000 + (0), 'S');
  9493  0110  3000               	movlw	0
  9494  0111  0020               	movlb	0	; select bank0
  9495  0112  00A0               	movwf	DATAEE_WriteByte@bAdd
  9496  0113  3070               	movlw	112
  9497  0114  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9498  0115  3053               	movlw	83
  9499  0116  0021               	movlb	1	; select bank1
  9500  0117  00A0               	movwf	??_main^(0+128)
  9501  0118  0820               	movf	??_main^(0+128),w
  9502  0119  0020               	movlb	0	; select bank0
  9503  011A  00A2               	movwf	DATAEE_WriteByte@bData
  9504  011B  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9505                           
  9506                           ;main.c: 1105: DATAEE_WriteByte( 0x7000 + (1), 25);
  9507  011E  3001               	movlw	1
  9508  011F  0020               	movlb	0	; select bank0
  9509  0120  00A0               	movwf	DATAEE_WriteByte@bAdd
  9510  0121  3070               	movlw	112
  9511  0122  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9512  0123  3019               	movlw	25
  9513  0124  0021               	movlb	1	; select bank1
  9514  0125  00A0               	movwf	??_main^(0+128)
  9515  0126  0820               	movf	??_main^(0+128),w
  9516  0127  0020               	movlb	0	; select bank0
  9517  0128  00A2               	movwf	DATAEE_WriteByte@bData
  9518  0129  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9519                           
  9520                           ;main.c: 1106: DATAEE_WriteByte( 0x7000 + (2), 3);
  9521  012C  3002               	movlw	2
  9522  012D  0020               	movlb	0	; select bank0
  9523  012E  00A0               	movwf	DATAEE_WriteByte@bAdd
  9524  012F  3070               	movlw	112
  9525  0130  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9526  0131  3003               	movlw	3
  9527  0132  0021               	movlb	1	; select bank1
  9528  0133  00A0               	movwf	??_main^(0+128)
  9529  0134  0820               	movf	??_main^(0+128),w
  9530  0135  0020               	movlb	0	; select bank0
  9531  0136  00A2               	movwf	DATAEE_WriteByte@bData
  9532  0137  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9533                           
  9534                           ;main.c: 1107: DATAEE_WriteByte( 0x7000 + (3), 5);
  9535  013A  3003               	movlw	3
  9536  013B  0020               	movlb	0	; select bank0
  9537  013C  00A0               	movwf	DATAEE_WriteByte@bAdd
  9538  013D  3070               	movlw	112
  9539  013E  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9540  013F  3005               	movlw	5
  9541  0140  0021               	movlb	1	; select bank1
  9542  0141  00A0               	movwf	??_main^(0+128)
  9543  0142  0820               	movf	??_main^(0+128),w
  9544  0143  0020               	movlb	0	; select bank0
  9545  0144  00A2               	movwf	DATAEE_WriteByte@bData
  9546  0145  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9547                           
  9548                           ;main.c: 1108: DATAEE_WriteByte( 0x7000 + (4), 12);
  9549  0148  3004               	movlw	4
  9550  0149  0020               	movlb	0	; select bank0
  9551  014A  00A0               	movwf	DATAEE_WriteByte@bAdd
  9552  014B  3070               	movlw	112
  9553  014C  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9554  014D  300C               	movlw	12
  9555  014E  0021               	movlb	1	; select bank1
  9556  014F  00A0               	movwf	??_main^(0+128)
  9557  0150  0820               	movf	??_main^(0+128),w
  9558  0151  0020               	movlb	0	; select bank0
  9559  0152  00A2               	movwf	DATAEE_WriteByte@bData
  9560  0153  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9561                           
  9562                           ;main.c: 1109: DATAEE_WriteByte( 0x7000 + (5), 0);
  9563  0156  3005               	movlw	5
  9564  0157  0020               	movlb	0	; select bank0
  9565  0158  00A0               	movwf	DATAEE_WriteByte@bAdd
  9566  0159  3070               	movlw	112
  9567  015A  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9568  015B  01A2               	clrf	DATAEE_WriteByte@bData
  9569  015C  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9570                           
  9571                           ;main.c: 1110: DATAEE_WriteByte( 0x7000 + (6), 0);
  9572  015F  3006               	movlw	6
  9573  0160  0020               	movlb	0	; select bank0
  9574  0161  00A0               	movwf	DATAEE_WriteByte@bAdd
  9575  0162  3070               	movlw	112
  9576  0163  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9577  0164  01A2               	clrf	DATAEE_WriteByte@bData
  9578  0165  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9579                           
  9580                           ;main.c: 1111: DATAEE_WriteByte( 0x7000 + (7), 28);
  9581  0168  3007               	movlw	7
  9582  0169  0020               	movlb	0	; select bank0
  9583  016A  00A0               	movwf	DATAEE_WriteByte@bAdd
  9584  016B  3070               	movlw	112
  9585  016C  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9586  016D  301C               	movlw	28
  9587  016E  0021               	movlb	1	; select bank1
  9588  016F  00A0               	movwf	??_main^(0+128)
  9589  0170  0820               	movf	??_main^(0+128),w
  9590  0171  0020               	movlb	0	; select bank0
  9591  0172  00A2               	movwf	DATAEE_WriteByte@bData
  9592  0173  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9593                           
  9594                           ;main.c: 1112: DATAEE_WriteByte( 0x7000 + (8), 4);
  9595  0176  3008               	movlw	8
  9596  0177  0020               	movlb	0	; select bank0
  9597  0178  00A0               	movwf	DATAEE_WriteByte@bAdd
  9598  0179  3070               	movlw	112
  9599  017A  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9600  017B  3004               	movlw	4
  9601  017C  0021               	movlb	1	; select bank1
  9602  017D  00A0               	movwf	??_main^(0+128)
  9603  017E  0820               	movf	??_main^(0+128),w
  9604  017F  0020               	movlb	0	; select bank0
  9605  0180  00A2               	movwf	DATAEE_WriteByte@bData
  9606  0181  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9607                           
  9608                           ;main.c: 1113: DATAEE_WriteByte( 0x7000 + (9), 'a');
  9609  0184  3009               	movlw	9
  9610  0185  0020               	movlb	0	; select bank0
  9611  0186  00A0               	movwf	DATAEE_WriteByte@bAdd
  9612  0187  3070               	movlw	112
  9613  0188  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9614  0189  3061               	movlw	97
  9615  018A  0021               	movlb	1	; select bank1
  9616  018B  00A0               	movwf	??_main^(0+128)
  9617  018C  0820               	movf	??_main^(0+128),w
  9618  018D  0020               	movlb	0	; select bank0
  9619  018E  00A2               	movwf	DATAEE_WriteByte@bData
  9620  018F  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9621                           
  9622                           ;main.c: 1114: DATAEE_WriteByte( 0x7000 + (10), 0);
  9623  0192  300A               	movlw	10
  9624  0193  0020               	movlb	0	; select bank0
  9625  0194  00A0               	movwf	DATAEE_WriteByte@bAdd
  9626  0195  3070               	movlw	112
  9627  0196  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9628  0197  01A2               	clrf	DATAEE_WriteByte@bData
  9629  0198  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9630                           
  9631                           ;main.c: 1115: DATAEE_WriteByte( 0x7000 + (11), 0);
  9632  019B  300B               	movlw	11
  9633  019C  0020               	movlb	0	; select bank0
  9634  019D  00A0               	movwf	DATAEE_WriteByte@bAdd
  9635  019E  3070               	movlw	112
  9636  019F  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9637  01A0  01A2               	clrf	DATAEE_WriteByte@bData
  9638  01A1  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9639                           
  9640                           ;main.c: 1116: DATAEE_WriteByte( 0x7000 + (12), 0);
  9641  01A4  300C               	movlw	12
  9642  01A5  0020               	movlb	0	; select bank0
  9643  01A6  00A0               	movwf	DATAEE_WriteByte@bAdd
  9644  01A7  3070               	movlw	112
  9645  01A8  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9646  01A9  01A2               	clrf	DATAEE_WriteByte@bData
  9647  01AA  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9648                           
  9649                           ;main.c: 1117: DATAEE_WriteByte( 0x7000 + (13), 174);
  9650  01AD  300D               	movlw	13
  9651  01AE  0020               	movlb	0	; select bank0
  9652  01AF  00A0               	movwf	DATAEE_WriteByte@bAdd
  9653  01B0  3070               	movlw	112
  9654  01B1  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9655  01B2  30AE               	movlw	174
  9656  01B3  0021               	movlb	1	; select bank1
  9657  01B4  00A0               	movwf	??_main^(0+128)
  9658  01B5  0820               	movf	??_main^(0+128),w
  9659  01B6  0020               	movlb	0	; select bank0
  9660  01B7  00A2               	movwf	DATAEE_WriteByte@bData
  9661  01B8  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9662  01BB                     l7038:
  9663                           
  9664                           ;main.c: 1118: };main.c: 1120: NREG = DATAEE_ReadByte(0x7000 + (1));
  9665  01BB  3001               	movlw	1
  9666  01BC  00F8               	movwf	DATAEE_ReadByte@bAdd
  9667  01BD  3070               	movlw	112
  9668  01BE  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9669  01BF  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9670  01C2  0021               	movlb	1	; select bank1
  9671  01C3  00A0               	movwf	??_main^(0+128)
  9672  01C4  0820               	movf	??_main^(0+128),w
  9673  01C5  00FB               	movwf	_NREG
  9674  01C6                     l7040:
  9675                           
  9676                           ;main.c: 1121: PMON = DATAEE_ReadByte(0x7000 + (2));
  9677  01C6  3002               	movlw	2
  9678  01C7  00F8               	movwf	DATAEE_ReadByte@bAdd
  9679  01C8  3070               	movlw	112
  9680  01C9  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9681  01CA  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9682  01CD  0021               	movlb	1	; select bank1
  9683  01CE  00A0               	movwf	??_main^(0+128)
  9684  01CF  0820               	movf	??_main^(0+128),w
  9685  01D0  0020               	movlb	0	; select bank0
  9686  01D1  00EE               	movwf	_PMON
  9687  01D2                     l7042:
  9688                           
  9689                           ;main.c: 1122: TALA = DATAEE_ReadByte(0x7000 + (3));
  9690  01D2  3003               	movlw	3
  9691  01D3  00F8               	movwf	DATAEE_ReadByte@bAdd
  9692  01D4  3070               	movlw	112
  9693  01D5  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9694  01D6  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9695  01D9  0021               	movlb	1	; select bank1
  9696  01DA  00A0               	movwf	??_main^(0+128)
  9697  01DB  0820               	movf	??_main^(0+128),w
  9698  01DC  0020               	movlb	0	; select bank0
  9699  01DD  00ED               	movwf	_TALA
  9700  01DE                     l7044:
  9701                           
  9702                           ;main.c: 1123: clkAlarm.alarmVal.h = DATAEE_ReadByte(0x7000 + (4));
  9703  01DE  3004               	movlw	4
  9704  01DF  00F8               	movwf	DATAEE_ReadByte@bAdd
  9705  01E0  3070               	movlw	112
  9706  01E1  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9707  01E2  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9708  01E5  0021               	movlb	1	; select bank1
  9709  01E6  00A0               	movwf	??_main^(0+128)
  9710  01E7  0820               	movf	??_main^(0+128),w
  9711  01E8  0020               	movlb	0	; select bank0
  9712  01E9  00D5               	movwf	_clkAlarm
  9713  01EA                     l7046:
  9714                           
  9715                           ;main.c: 1124: clkAlarm.alarmVal.m = DATAEE_ReadByte(0x7000 + (5));
  9716  01EA  3005               	movlw	5
  9717  01EB  00F8               	movwf	DATAEE_ReadByte@bAdd
  9718  01EC  3070               	movlw	112
  9719  01ED  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9720  01EE  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9721  01F1  0021               	movlb	1	; select bank1
  9722  01F2  00A0               	movwf	??_main^(0+128)
  9723  01F3  0820               	movf	??_main^(0+128),w
  9724  01F4  0020               	movlb	0	; select bank0
  9725  01F5  00D6               	movwf	_clkAlarm+1
  9726  01F6                     l7048:
  9727                           
  9728                           ;main.c: 1125: clkAlarm.alarmVal.s = DATAEE_ReadByte(0x7000 + (6));
  9729  01F6  3006               	movlw	6
  9730  01F7  00F8               	movwf	DATAEE_ReadByte@bAdd
  9731  01F8  3070               	movlw	112
  9732  01F9  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9733  01FA  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9734  01FD  0021               	movlb	1	; select bank1
  9735  01FE  00A0               	movwf	??_main^(0+128)
  9736  01FF  0820               	movf	??_main^(0+128),w
  9737  0200  0020               	movlb	0	; select bank0
  9738  0201  00D7               	movwf	_clkAlarm+2
  9739  0202                     l7050:
  9740                           
  9741                           ;main.c: 1126: tempAlarm.alarmTemp = DATAEE_ReadByte(0x7000 + (7));
  9742  0202  3007               	movlw	7
  9743  0203  00F8               	movwf	DATAEE_ReadByte@bAdd
  9744  0204  3070               	movlw	112
  9745  0205  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9746  0206  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9747  0209  0021               	movlb	1	; select bank1
  9748  020A  00A0               	movwf	??_main^(0+128)
  9749  020B  0820               	movf	??_main^(0+128),w
  9750  020C  00C9               	movwf	_tempAlarm^(0+128)
  9751  020D                     l7052:
  9752                           
  9753                           ;main.c: 1127: lumAlarm.alarmLum = DATAEE_ReadByte(0x7000 + (8));
  9754  020D  3008               	movlw	8
  9755  020E  00F8               	movwf	DATAEE_ReadByte@bAdd
  9756  020F  3070               	movlw	112
  9757  0210  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9758  0211  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9759  0214  0021               	movlb	1	; select bank1
  9760  0215  00A0               	movwf	??_main^(0+128)
  9761  0216  0820               	movf	??_main^(0+128),w
  9762  0217  00C6               	movwf	_lumAlarm^(0+128)
  9763  0218                     l7054:
  9764                           
  9765                           ;main.c: 1128: ALAF = DATAEE_ReadByte(0x7000 + (9));
  9766  0218  3009               	movlw	9
  9767  0219  00F8               	movwf	DATAEE_ReadByte@bAdd
  9768  021A  3070               	movlw	112
  9769  021B  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9770  021C  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9771  021F  0021               	movlb	1	; select bank1
  9772  0220  00A0               	movwf	??_main^(0+128)
  9773  0221  0820               	movf	??_main^(0+128),w
  9774  0222  0020               	movlb	0	; select bank0
  9775  0223  00E7               	movwf	_ALAF
  9776  0224                     l7056:
  9777                           
  9778                           ;main.c: 1129: t.h = DATAEE_ReadByte(0x7000 + (10));
  9779  0224  300A               	movlw	10
  9780  0225  00F8               	movwf	DATAEE_ReadByte@bAdd
  9781  0226  3070               	movlw	112
  9782  0227  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9783  0228  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9784  022B  0021               	movlb	1	; select bank1
  9785  022C  00A0               	movwf	??_main^(0+128)
  9786  022D  0820               	movf	??_main^(0+128),w
  9787  022E  0020               	movlb	0	; select bank0
  9788  022F  00D9               	movwf	_t
  9789  0230                     l7058:
  9790                           
  9791                           ;main.c: 1130: t.m = DATAEE_ReadByte(0x7000 + (11));
  9792  0230  300B               	movlw	11
  9793  0231  00F8               	movwf	DATAEE_ReadByte@bAdd
  9794  0232  3070               	movlw	112
  9795  0233  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9796  0234  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9797  0237  0021               	movlb	1	; select bank1
  9798  0238  00A0               	movwf	??_main^(0+128)
  9799  0239  0820               	movf	??_main^(0+128),w
  9800  023A  0020               	movlb	0	; select bank0
  9801  023B  00DA               	movwf	_t+1
  9802  023C                     l7060:
  9803                           
  9804                           ;main.c: 1131: iwrite = DATAEE_ReadByte(0x7000 + (12));
  9805  023C  300C               	movlw	12
  9806  023D  00F8               	movwf	DATAEE_ReadByte@bAdd
  9807  023E  3070               	movlw	112
  9808  023F  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9809  0240  3192  2269  3180   	fcall	_DATAEE_ReadByte
  9810  0243  0021               	movlb	1	; select bank1
  9811  0244  00A0               	movwf	??_main^(0+128)
  9812  0245  0820               	movf	??_main^(0+128),w
  9813  0246  00FA               	movwf	_iwrite
  9814  0247                     l7062:
  9815                           
  9816                           ;main.c: 1135: tempAlarm.trigger = 0;
  9817  0247  01CA               	clrf	(_tempAlarm^(0+128)+1)
  9818  0248                     l7064:
  9819                           
  9820                           ;main.c: 1136: tempAlarm.triggered = 0;
  9821  0248  01CB               	clrf	(_tempAlarm^(0+128)+2)
  9822  0249                     l7066:
  9823                           
  9824                           ;main.c: 1138: lumAlarm.trigger = 0;
  9825  0249  01C7               	clrf	(_lumAlarm^(0+128)+1)
  9826  024A                     l7068:
  9827                           
  9828                           ;main.c: 1139: lumAlarm.triggered = 0;
  9829  024A  01C8               	clrf	(_lumAlarm^(0+128)+2)
  9830  024B                     l7070:
  9831                           
  9832                           ;main.c: 1141: clkAlarm.trigger = 0;
  9833  024B  0020               	movlb	0	; select bank0
  9834  024C  01D8               	clrf	_clkAlarm+3
  9835  024D                     l7072:
  9836                           
  9837                           ;main.c: 1144: i2c1_driver_open();
  9838  024D  3192  2275  3180   	fcall	_i2c1_driver_open
  9839  0250                     l7074:
  9840                           
  9841                           ;main.c: 1145: TRISCbits.TRISC3 = 1;
  9842  0250  0020               	movlb	0	; select bank0
  9843  0251  1593               	bsf	19,3	;volatile
  9844  0252                     l7076:
  9845                           
  9846                           ;main.c: 1146: TRISCbits.TRISC4 = 1;
  9847  0252  1613               	bsf	19,4	;volatile
  9848  0253                     l7078:
  9849                           
  9850                           ;main.c: 1147: WPUC3 = 1;
  9851  0253  003E               	movlb	30	; select bank30
  9852  0254  15CF               	bsf	79,3	;volatile
  9853  0255                     l7080:
  9854                           
  9855                           ;main.c: 1148: WPUC4 = 1;
  9856  0255  164F               	bsf	79,4	;volatile
  9857  0256                     l7082:
  9858                           
  9859                           ;main.c: 1149: LCDinit();
  9860  0256  318A  2272  3180   	fcall	_LCDinit
  9861  0259                     l7084:
  9862                           
  9863                           ;main.c: 1152: (INTCONbits.GIE = 1);
  9864  0259  178B               	bsf	11,7	;volatile
  9865  025A                     l7086:
  9866                           
  9867                           ;main.c: 1155: (INTCONbits.PEIE = 1);
  9868  025A  170B               	bsf	11,6	;volatile
  9869  025B                     l7088:
  9870                           
  9871                           ;main.c: 1159: uint8_t c;;main.c: 1160: char buff[20] = "";
  9872  025B  30A3               	movlw	low main@buff
  9873  025C  0086               	movwf	6
  9874  025D  3000               	movlw	high main@buff
  9875  025E  0087               	movwf	7
  9876  025F  3014               	movlw	20
  9877  0260  0021               	movlb	1	; select bank1
  9878  0261  00A0               	movwf	??_main^(0+128)
  9879  0262  3000               	movlw	0
  9880  0263                     u8220:
  9881  0263  001E               	movwi fsr1++
  9882  0264  0BA0               	decfsz	??_main^(0+128),f
  9883  0265  2A63               	goto	u8220
  9884  0266                     l7090:
  9885                           
  9886                           ;main.c: 1161: int n=0;
  9887  0266  01C1               	clrf	main@n^(0+128)
  9888  0267  01C2               	clrf	(main@n+1)^(0+128)
  9889  0268                     l7092:
  9890  0268  2AB8               	goto	l7120
  9891  0269                     l7094:
  9892                           
  9893                           ;main.c: 1167: c = getch();
  9894  0269  3192  2202  3180   	fcall	_getch
  9895  026C  0021               	movlb	1	; select bank1
  9896  026D  00A0               	movwf	??_main^(0+128)
  9897  026E  0820               	movf	??_main^(0+128),w
  9898  026F  00BE               	movwf	main@c^(0+128)
  9899  0270                     l7096:
  9900                           
  9901                           ;main.c: 1168: if((c == (uint8_t)0xFD || buff[0] == (uint8_t)0xFD)){
  9902  0270  30FD               	movlw	253
  9903  0271  063E               	xorwf	main@c^(0+128),w
  9904  0272  1903               	btfsc	3,2
  9905  0273  2A75               	goto	u8231
  9906  0274  2A76               	goto	u8230
  9907  0275                     u8231:
  9908  0275  2A7C               	goto	l7100
  9909  0276                     u8230:
  9910  0276                     l7098:
  9911  0276  30FD               	movlw	253
  9912  0277  0623               	xorwf	main@buff^(0+128),w
  9913  0278  1D03               	btfss	3,2
  9914  0279  2A7B               	goto	u8241
  9915  027A  2A7C               	goto	u8240
  9916  027B                     u8241:
  9917  027B  2AB1               	goto	l7116
  9918  027C                     u8240:
  9919  027C                     l7100:
  9920                           
  9921                           ;main.c: 1169: if(c == (uint8_t)0xFD){
  9922  027C  30FD               	movlw	253
  9923  027D  063E               	xorwf	main@c^(0+128),w
  9924  027E  1D03               	btfss	3,2
  9925  027F  2A81               	goto	u8251
  9926  0280  2A82               	goto	u8250
  9927  0281                     u8251:
  9928  0281  2A90               	goto	l7106
  9929  0282                     u8250:
  9930  0282                     l7102:
  9931                           
  9932                           ;main.c: 1170: memset(buff, 0, sizeof buff);
  9933  0282  3000               	movlw	0
  9934  0283  00F2               	movwf	memset@c
  9935  0284  00F3               	movwf	memset@c+1
  9936  0285  3014               	movlw	20
  9937  0286  00F4               	movwf	memset@n
  9938  0287  3000               	movlw	0
  9939  0288  00F5               	movwf	memset@n+1
  9940  0289  30A3               	movlw	(low (main@buff| 0))& (0+255)
  9941  028A  3193  23FA  3180   	fcall	_memset
  9942  028D                     l7104:
  9943                           
  9944                           ;main.c: 1171: n=0;
  9945  028D  0021               	movlb	1	; select bank1
  9946  028E  01C1               	clrf	main@n^(0+128)
  9947  028F  01C2               	clrf	(main@n+1)^(0+128)
  9948  0290                     l7106:
  9949                           
  9950                           ;main.c: 1172: };main.c: 1173: buff[n] = c;
  9951  0290  083E               	movf	main@c^(0+128),w
  9952  0291  00A0               	movwf	??_main^(0+128)
  9953  0292  0841               	movf	main@n^(0+128),w
  9954  0293  3EA3               	addlw	(low (main@buff| 0))& (0+255)
  9955  0294  0086               	movwf	6
  9956  0295  0187               	clrf	7
  9957  0296  0820               	movf	??_main^(0+128),w
  9958  0297  0081               	movwf	1
  9959  0298                     l7108:
  9960                           
  9961                           ;main.c: 1174: n++;
  9962  0298  3001               	movlw	1
  9963  0299  07C1               	addwf	main@n^(0+128),f
  9964  029A  3000               	movlw	0
  9965  029B  3DC2               	addwfc	(main@n+1)^(0+128),f
  9966  029C                     l7110:
  9967                           
  9968                           ;main.c: 1175: if(n == 20){
  9969  029C  3014               	movlw	20
  9970  029D  0641               	xorwf	main@n^(0+128),w
  9971  029E  0442               	iorwf	(main@n+1)^(0+128),w
  9972  029F  1D03               	btfss	3,2
  9973  02A0  2AA2               	goto	u8261
  9974  02A1  2AA3               	goto	u8260
  9975  02A2                     u8261:
  9976  02A2  2AB1               	goto	l7116
  9977  02A3                     u8260:
  9978  02A3                     l7112:
  9979                           
  9980                           ;main.c: 1176: memset(buff, 0, sizeof buff);
  9981  02A3  3000               	movlw	0
  9982  02A4  00F2               	movwf	memset@c
  9983  02A5  00F3               	movwf	memset@c+1
  9984  02A6  3014               	movlw	20
  9985  02A7  00F4               	movwf	memset@n
  9986  02A8  3000               	movlw	0
  9987  02A9  00F5               	movwf	memset@n+1
  9988  02AA  30A3               	movlw	(low (main@buff| 0))& (0+255)
  9989  02AB  3193  23FA  3180   	fcall	_memset
  9990  02AE                     l7114:
  9991                           
  9992                           ;main.c: 1177: n=0;
  9993  02AE  0021               	movlb	1	; select bank1
  9994  02AF  01C1               	clrf	main@n^(0+128)
  9995  02B0  01C2               	clrf	(main@n+1)^(0+128)
  9996  02B1                     l7116:
  9997                           
  9998                           ;main.c: 1178: };main.c: 1179: };main.c: 1180: if(c == (uint8_t)0xFE){
  9999  02B1  30FE               	movlw	254
 10000  02B2  063E               	xorwf	main@c^(0+128),w
 10001  02B3  1D03               	btfss	3,2
 10002  02B4  2AB6               	goto	u8271
 10003  02B5  2AB7               	goto	u8270
 10004  02B6                     u8271:
 10005  02B6  2AB8               	goto	l7120
 10006  02B7                     u8270:
 10007  02B7  2AC0               	goto	l7122
 10008  02B8                     l1538:
 10009  02B8                     l7120:
 10010  02B8  3191  21EB  3180   	fcall	_EUSART_is_rx_ready
 10011  02BB  3A00               	xorlw	0
 10012  02BC  1D03               	skipz
 10013  02BD  2ABF               	goto	u8281
 10014  02BE  2AC0               	goto	u8280
 10015  02BF                     u8281:
 10016  02BF  2A69               	goto	l7094
 10017  02C0                     u8280:
 10018  02C0                     l7122:
 10019                           
 10020                           ;main.c: 1182: };main.c: 1183: };main.c: 1184: if(buff[n-1] == (uint8_t)0xFE){
 10021  02C0  0021               	movlb	1	; select bank1
 10022  02C1  0841               	movf	main@n^(0+128),w
 10023  02C2  3EFF               	addlw	255
 10024  02C3  3EA3               	addlw	(low (main@buff| 0))& (0+255)
 10025  02C4  0086               	movwf	6
 10026  02C5  0187               	clrf	7
 10027  02C6  30FE               	movlw	254
 10028  02C7  0601               	xorwf	1,w
 10029  02C8  1D03               	btfss	3,2
 10030  02C9  2ACB               	goto	u8291
 10031  02CA  2ACC               	goto	u8290
 10032  02CB                     u8291:
 10033  02CB  2B2F               	goto	l7144
 10034  02CC                     u8290:
 10035  02CC                     l7124:
 10036                           
 10037                           ;main.c: 1185: for (i = 0; i < (sizeof(commands) / sizeof(struct command_d)); i++){
 10038  02CC  01BF               	clrf	main@i_2532^(0+128)
 10039  02CD  01C0               	clrf	(main@i_2532+1)^(0+128)
 10040  02CE                     l7130:
 10041                           
 10042                           ;main.c: 1186: if (buff[1] == commands[i].cmd_name){
 10043  02CE  0840               	movf	(main@i_2532+1)^(0+128),w
 10044  02CF  00F3               	movwf	___wmul@multiplier+1
 10045  02D0  083F               	movf	main@i_2532^(0+128),w
 10046  02D1  00F2               	movwf	___wmul@multiplier
 10047  02D2  3003               	movlw	3
 10048  02D3  00F4               	movwf	___wmul@multiplicand
 10049  02D4  3000               	movlw	0
 10050  02D5  00F5               	movwf	___wmul@multiplicand+1
 10051  02D6  3194  2418  3180   	fcall	___wmul
 10052  02D9  0873               	movf	?___wmul+1,w
 10053  02DA  0085               	movwf	5
 10054  02DB  0872               	movf	?___wmul,w
 10055  02DC  0084               	movwf	4
 10056  02DD  3002               	movlw	low ((_commands+2)| (0+32768))
 10057  02DE  0784               	addwf	4,f
 10058  02DF  3098               	movlw	high ((_commands+2)| (0+32768))
 10059  02E0  3D85               	addwfc	5,f
 10060  02E1  0800               	movf	0,w	;code access
 10061  02E2  0021               	movlb	1	; select bank1
 10062  02E3  0624               	xorwf	(main@buff^(0+128)+1),w
 10063  02E4  1D03               	skipz
 10064  02E5  2AE7               	goto	u8301
 10065  02E6  2AE8               	goto	u8300
 10066  02E7                     u8301:
 10067  02E7  2B14               	goto	l7136
 10068  02E8                     u8300:
 10069  02E8                     l7132:
 10070                           
 10071                           ;main.c: 1187: commands[i].cmd_fnct(n, buff);
 10072  02E8  0840               	movf	(main@i_2532+1)^(0+128),w
 10073  02E9  00F3               	movwf	___wmul@multiplier+1
 10074  02EA  083F               	movf	main@i_2532^(0+128),w
 10075  02EB  00F2               	movwf	___wmul@multiplier
 10076  02EC  3003               	movlw	3
 10077  02ED  00F4               	movwf	___wmul@multiplicand
 10078  02EE  3000               	movlw	0
 10079  02EF  00F5               	movwf	___wmul@multiplicand+1
 10080  02F0  3194  2418  3180   	fcall	___wmul
 10081  02F3  0873               	movf	?___wmul+1,w
 10082  02F4  0085               	movwf	5
 10083  02F5  0872               	movf	?___wmul,w
 10084  02F6  0084               	movwf	4
 10085  02F7  3000               	movlw	low (_commands| (0+32768))
 10086  02F8  0784               	addwf	4,f
 10087  02F9  3098               	movlw	high (_commands| (0+32768))
 10088  02FA  3D85               	addwfc	5,f
 10089  02FB  3F00               	moviw [0]fsr0
 10090  02FC  0021               	movlb	1	; select bank1
 10091  02FD  00B7               	movwf	_main$3496^(0+128)
 10092  02FE  3F01               	moviw [1]fsr0
 10093  02FF  00B8               	movwf	(_main$3496+1)^(0+128)
 10094  0300                     l7134:
 10095                           
 10096                           ;main.c: 1187: commands[i].cmd_fnct(n, buff);
 10097  0300  0842               	movf	(main@n+1)^(0+128),w
 10098  0301  0020               	movlb	0	; select bank0
 10099  0302  00A8               	movwf	cmd_tri@num+1
 10100  0303  0021               	movlb	1	; select bank1
 10101  0304  0841               	movf	main@n^(0+128),w
 10102  0305  0020               	movlb	0	; select bank0
 10103  0306  00A7               	movwf	cmd_tri@num
 10104  0307  30A3               	movlw	(low (main@buff| 0))& (0+255)
 10105  0308  0021               	movlb	1	; select bank1
 10106  0309  00A0               	movwf	??_main^(0+128)
 10107  030A  0820               	movf	??_main^(0+128),w
 10108  030B  0020               	movlb	0	; select bank0
 10109  030C  00A9               	movwf	cmd_tri@buffer
 10110  030D  0021               	movlb	1	; select bank1
 10111  030E  0838               	movf	(_main$3496+1)^(0+128),w
 10112  030F  008A               	movwf	10
 10113  0310  0837               	movf	_main$3496^(0+128),w
 10114  0311  000A               	callw
 10115  0312  3180               	pagesel	$
 10116                           
 10117                           ;main.c: 1188: break;
 10118  0313  2B21               	goto	l7138
 10119  0314                     l7136:
 10120  0314  3001               	movlw	1
 10121  0315  07BF               	addwf	main@i_2532^(0+128),f
 10122  0316  3000               	movlw	0
 10123  0317  3DC0               	addwfc	(main@i_2532+1)^(0+128),f
 10124  0318  3000               	movlw	0
 10125  0319  0240               	subwf	(main@i_2532+1)^(0+128),w
 10126  031A  300D               	movlw	13
 10127  031B  1903               	skipnz
 10128  031C  023F               	subwf	main@i_2532^(0+128),w
 10129  031D  1C03               	skipc
 10130  031E  2B20               	goto	u8311
 10131  031F  2B21               	goto	u8310
 10132  0320                     u8311:
 10133  0320  2ACE               	goto	l7130
 10134  0321                     u8310:
 10135  0321                     l7138:
 10136                           
 10137                           ;main.c: 1189: };main.c: 1190: };main.c: 1191: memset(buff, 0, sizeof buff);
 10138  0321  3000               	movlw	0
 10139  0322  00F2               	movwf	memset@c
 10140  0323  00F3               	movwf	memset@c+1
 10141  0324  3014               	movlw	20
 10142  0325  00F4               	movwf	memset@n
 10143  0326  3000               	movlw	0
 10144  0327  00F5               	movwf	memset@n+1
 10145  0328  30A3               	movlw	(low (main@buff| 0))& (0+255)
 10146  0329  3193  23FA  3180   	fcall	_memset
 10147  032C                     l7140:
 10148  032C                     l7142:
 10149                           
 10150                           ;main.c: 1193: n=0;
 10151  032C  0021               	movlb	1	; select bank1
 10152  032D  01C1               	clrf	main@n^(0+128)
 10153  032E  01C2               	clrf	(main@n+1)^(0+128)
 10154  032F                     l7144:
 10155                           
 10156                           ;main.c: 1194: };main.c: 1196: if(modeFlag == 0){
 10157  032F  0020               	movlb	0	; select bank0
 10158  0330  085C               	movf	_modeFlag,w
 10159  0331  045D               	iorwf	_modeFlag+1,w
 10160  0332  1D03               	btfss	3,2
 10161  0333  2B35               	goto	u8321
 10162  0334  2B36               	goto	u8320
 10163  0335                     u8321:
 10164  0335  2B3A               	goto	l7148
 10165  0336                     u8320:
 10166  0336                     l7146:
 10167                           
 10168                           ;main.c: 1197: checkFlags();
 10169  0336  3189  213C  3180   	fcall	_checkFlags
 10170                           
 10171                           ;main.c: 1198: } else if(modeFlag == 1){
 10172  0339  2AB8               	goto	l7120
 10173  033A                     l7148:
 10174  033A  035C               	decf	_modeFlag,w
 10175  033B  045D               	iorwf	_modeFlag+1,w
 10176  033C  1D03               	btfss	3,2
 10177  033D  2B3F               	goto	u8331
 10178  033E  2B40               	goto	u8330
 10179  033F                     u8331:
 10180  033F  2B44               	goto	l7152
 10181  0340                     u8330:
 10182  0340                     l7150:
 10183                           
 10184                           ;main.c: 1199: editClock();
 10185  0340  3189  21A0  3180   	fcall	_editClock
 10186                           
 10187                           ;main.c: 1200: } else if(modeFlag == 2){
 10188  0343  2AB8               	goto	l7120
 10189  0344                     l7152:
 10190  0344  3002               	movlw	2
 10191  0345  065C               	xorwf	_modeFlag,w
 10192  0346  045D               	iorwf	_modeFlag+1,w
 10193  0347  1D03               	btfss	3,2
 10194  0348  2B4A               	goto	u8341
 10195  0349  2B4B               	goto	u8340
 10196  034A                     u8341:
 10197  034A  2B4F               	goto	l7156
 10198  034B                     u8340:
 10199  034B                     l7154:
 10200                           
 10201                           ;main.c: 1201: editTemp();
 10202  034B  3196  2602  3180   	fcall	_editTemp
 10203                           
 10204                           ;main.c: 1202: } else if(modeFlag == 3){
 10205  034E  2AB8               	goto	l7120
 10206  034F                     l7156:
 10207  034F  3003               	movlw	3
 10208  0350  065C               	xorwf	_modeFlag,w
 10209  0351  045D               	iorwf	_modeFlag+1,w
 10210  0352  1D03               	btfss	3,2
 10211  0353  2B55               	goto	u8351
 10212  0354  2B56               	goto	u8350
 10213  0355                     u8351:
 10214  0355  2B5A               	goto	l7160
 10215  0356                     u8350:
 10216  0356                     l7158:
 10217                           
 10218                           ;main.c: 1203: editLum();
 10219  0356  3195  25D0  3180   	fcall	_editLum
 10220                           
 10221                           ;main.c: 1204: } else if(modeFlag == 4){
 10222  0359  2AB8               	goto	l7120
 10223  035A                     l7160:
 10224  035A  3004               	movlw	4
 10225  035B  065C               	xorwf	_modeFlag,w
 10226  035C  045D               	iorwf	_modeFlag+1,w
 10227  035D  1D03               	btfss	3,2
 10228  035E  2B60               	goto	u8361
 10229  035F  2B61               	goto	u8360
 10230  0360                     u8361:
 10231  0360  2B65               	goto	l7164
 10232  0361                     u8360:
 10233  0361                     l7162:
 10234                           
 10235                           ;main.c: 1205: toggleAlarms();
 10236  0361  3195  25A2  3180   	fcall	_toggleAlarms
 10237                           
 10238                           ;main.c: 1206: } else if(modeFlag > 4){
 10239  0364  2AB8               	goto	l7120
 10240  0365                     l7164:
 10241  0365  085D               	movf	_modeFlag+1,w
 10242  0366  3A80               	xorlw	128
 10243  0367  0021               	movlb	1	; select bank1
 10244  0368  00A0               	movwf	??_main^(0+128)
 10245  0369  3080               	movlw	128
 10246  036A  0220               	subwf	??_main^(0+128),w
 10247  036B  1D03               	skipz
 10248  036C  2B70               	goto	u8375
 10249  036D  3005               	movlw	5
 10250  036E  0020               	movlb	0	; select bank0
 10251  036F  025C               	subwf	_modeFlag,w
 10252  0370                     u8375:
 10253  0370  1C03               	skipc
 10254  0371  2B73               	goto	u8371
 10255  0372  2B74               	goto	u8370
 10256  0373                     u8371:
 10257  0373  2AB8               	goto	l1538
 10258  0374                     u8370:
 10259  0374                     l7166:
 10260                           
 10261                           ;main.c: 1207: modeFlag = 0;
 10262  0374  0020               	movlb	0	; select bank0
 10263  0375  01DC               	clrf	_modeFlag
 10264  0376  01DD               	clrf	_modeFlag+1
 10265  0377  2AB8               	goto	l7120
 10266  0378  3180  2852         	ljmp	start
 10267  037A                     __end_of_main:
 10268                           
 10269                           	psect	text1
 10270  15A2                     __ptext1:	
 10271 ;; *************** function _toggleAlarms *****************
 10272 ;; Defined at:
 10273 ;;		line 765 in file "main.c"
 10274 ;; Parameters:    Size  Location     Type
 10275 ;;		None
 10276 ;; Auto vars:     Size  Location     Type
 10277 ;;		None
 10278 ;; Return value:  Size  Location     Type
 10279 ;;                  1    wreg      void 
 10280 ;; Registers used:
 10281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10282 ;; Tracked objects:
 10283 ;;		On entry : 0/0
 10284 ;;		On exit  : 0/0
 10285 ;;		Unchanged: 0/0
 10286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;Total ram usage:        1 bytes
 10292 ;; Hardware stack levels used:    1
 10293 ;; Hardware stack levels required when called:   10
 10294 ;; This function calls:
 10295 ;;		_checkFlags
 10296 ;;		_update_menuLCD
 10297 ;; This function is called by:
 10298 ;;		_main
 10299 ;; This function uses a non-reentrant model
 10300 ;;
 10301                           
 10302                           
 10303                           ;psect for function _toggleAlarms
 10304  15A2                     _toggleAlarms:
 10305  15A2                     l1421:	
 10306                           ;incstack = 0
 10307                           ; Regs used in _toggleAlarms: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10308                           ;main.c: 767: while(1){
 10309                           
 10310                           
 10311                           ;main.c: 768: if(PORTCbits.RC5 == 0){
 10312  15A2  0020               	movlb	0	; select bank0
 10313  15A3  1A8E               	btfsc	14,5	;volatile
 10314  15A4  2DA6               	goto	u7791
 10315  15A5  2DA7               	goto	u7790
 10316  15A6                     u7791:
 10317  15A6  2DC2               	goto	l6764
 10318  15A7                     u7790:
 10319  15A7                     l6756:
 10320                           
 10321                           ;main.c: 769: if(ALAF == 'A'){
 10322  15A7  3041               	movlw	65
 10323  15A8  0667               	xorwf	_ALAF,w
 10324  15A9  1D03               	btfss	3,2
 10325  15AA  2DAC               	goto	u7801
 10326  15AB  2DAD               	goto	u7800
 10327  15AC                     u7801:
 10328  15AC  2DB2               	goto	l6760
 10329  15AD                     u7800:
 10330  15AD                     l6758:
 10331                           
 10332                           ;main.c: 770: ALAF = 'a';
 10333  15AD  3061               	movlw	97
 10334  15AE  00D4               	movwf	??_toggleAlarms
 10335  15AF  0854               	movf	??_toggleAlarms,w
 10336  15B0  00E7               	movwf	_ALAF
 10337                           
 10338                           ;main.c: 771: } else {
 10339  15B1  2DB6               	goto	l1424
 10340  15B2                     l6760:
 10341                           
 10342                           ;main.c: 772: ALAF = 'A';
 10343  15B2  3041               	movlw	65
 10344  15B3  00D4               	movwf	??_toggleAlarms
 10345  15B4  0854               	movf	??_toggleAlarms,w
 10346  15B5  00E7               	movwf	_ALAF
 10347  15B6                     l1424:
 10348                           
 10349                           ;main.c: 773: };main.c: 774: _delay((unsigned long)((100)*(1000000/4000.0)));
 10350  15B6  3021               	movlw	33
 10351  15B7  0020               	movlb	0	; select bank0
 10352  15B8  00D4               	movwf	??_toggleAlarms
 10353  15B9  3076               	movlw	118
 10354  15BA                     u8387:
 10355  15BA  0B89               	decfsz	9,f
 10356  15BB  2DBA               	goto	u8387
 10357  15BC  0BD4               	decfsz	??_toggleAlarms,f
 10358  15BD  2DBA               	goto	u8387
 10359  15BE  0000               	nop
 10360  15BF                     l6762:
 10361                           
 10362                           ;main.c: 775: update_menuLCD();
 10363  15BF  3183  237A  3195   	fcall	_update_menuLCD
 10364  15C2                     l6764:
 10365                           
 10366                           ;main.c: 776: };main.c: 777: checkFlags();
 10367  15C2  3189  213C  3195   	fcall	_checkFlags
 10368  15C5                     l6766:
 10369                           
 10370                           ;main.c: 778: if(modeFlag != 4){
 10371  15C5  3004               	movlw	4
 10372  15C6  0020               	movlb	0	; select bank0
 10373  15C7  065C               	xorwf	_modeFlag,w
 10374  15C8  045D               	iorwf	_modeFlag+1,w
 10375  15C9  1903               	btfsc	3,2
 10376  15CA  2DCC               	goto	u7811
 10377  15CB  2DCD               	goto	u7810
 10378  15CC                     u7811:
 10379  15CC  2DA2               	goto	l1421
 10380  15CD                     u7810:
 10381  15CD                     l6768:
 10382                           
 10383                           ;main.c: 779: modeFlag = 0;
 10384  15CD  01DC               	clrf	_modeFlag
 10385  15CE  01DD               	clrf	_modeFlag+1
 10386  15CF                     l1428:	
 10387                           ;main.c: 780: break;
 10388                           
 10389  15CF  0008               	return
 10390  15D0                     __end_of_toggleAlarms:
 10391                           
 10392                           	psect	text2
 10393  13FA                     __ptext2:	
 10394 ;; *************** function _memset *****************
 10395 ;; Defined at:
 10396 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;  p1              1    wreg     PTR void 
 10399 ;;		 -> main@buff(20), 
 10400 ;;  c               2    2[COMMON] int 
 10401 ;;  n               2    4[COMMON] unsigned int 
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;  p1              1    8[COMMON] PTR void 
 10404 ;;		 -> main@buff(20), 
 10405 ;;  p               1    7[COMMON] PTR unsigned char 
 10406 ;;		 -> main@buff(20), 
 10407 ;; Return value:  Size  Location     Type
 10408 ;;                  1    wreg      PTR void 
 10409 ;; Registers used:
 10410 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10411 ;; Tracked objects:
 10412 ;;		On entry : 0/0
 10413 ;;		On exit  : 0/0
 10414 ;;		Unchanged: 0/0
 10415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10416 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;Total ram usage:        7 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:    4
 10423 ;; This function calls:
 10424 ;;		Nothing
 10425 ;; This function is called by:
 10426 ;;		_main
 10427 ;; This function uses a non-reentrant model
 10428 ;;
 10429                           
 10430                           
 10431                           ;psect for function _memset
 10432  13FA                     _memset:
 10433                           
 10434                           ;incstack = 0
 10435                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10436                           ;memset@p1 stored from wreg
 10437  13FA  00F8               	movwf	memset@p1
 10438  13FB                     l5774:
 10439  13FB  0878               	movf	memset@p1,w
 10440  13FC  00F6               	movwf	??_memset
 10441  13FD  0876               	movf	??_memset,w
 10442  13FE  00F7               	movwf	memset@p
 10443  13FF  2C0B               	goto	l5780
 10444  1400                     l5776:
 10445  1400  0872               	movf	memset@c,w
 10446  1401  00F6               	movwf	??_memset
 10447  1402  0877               	movf	memset@p,w
 10448  1403  0086               	movwf	6
 10449  1404  0187               	clrf	7
 10450  1405  0876               	movf	??_memset,w
 10451  1406  0081               	movwf	1
 10452  1407                     l5778:
 10453  1407  3001               	movlw	1
 10454  1408  00F6               	movwf	??_memset
 10455  1409  0876               	movf	??_memset,w
 10456  140A  07F7               	addwf	memset@p,f
 10457  140B                     l5780:
 10458  140B  3001               	movlw	1
 10459  140C  02F4               	subwf	memset@n,f
 10460  140D  3000               	movlw	0
 10461  140E  3BF5               	subwfb	memset@n+1,f
 10462  140F  0A74               	incf	memset@n,w
 10463  1410  1D03               	skipz
 10464  1411  2C16               	goto	u5691
 10465  1412  0A75               	incf	memset@n+1,w
 10466  1413  1D03               	btfss	3,2
 10467  1414  2C16               	goto	u5691
 10468  1415  2C17               	goto	u5690
 10469  1416                     u5691:
 10470  1416  2C00               	goto	l5776
 10471  1417                     u5690:
 10472  1417                     l2226:
 10473  1417  0008               	return
 10474  1418                     __end_of_memset:
 10475                           
 10476                           	psect	text3
 10477  1275                     __ptext3:	
 10478 ;; *************** function _i2c1_driver_open *****************
 10479 ;; Defined at:
 10480 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;		None
 10483 ;; Auto vars:     Size  Location     Type
 10484 ;;		None
 10485 ;; Return value:  Size  Location     Type
 10486 ;;		None               void
 10487 ;; Registers used:
 10488 ;;		wreg, status,2
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;Total ram usage:        0 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; Hardware stack levels required when called:    4
 10501 ;; This function calls:
 10502 ;;		Nothing
 10503 ;; This function is called by:
 10504 ;;		_main
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           
 10509                           ;psect for function _i2c1_driver_open
 10510  1275                     _i2c1_driver_open:
 10511  1275                     l5298:	
 10512                           ;incstack = 0
 10513                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
 10514                           
 10515                           
 10516                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
 10517  1275  0023               	movlb	3	; select bank3
 10518  1276  1A90               	btfsc	16,5	;volatile
 10519  1277  2A79               	goto	u4811
 10520  1278  2A7A               	goto	u4810
 10521  1279                     u4811:
 10522  1279  2A80               	goto	l253
 10523  127A                     u4810:
 10524  127A                     l5300:
 10525                           
 10526                           ;i2c1_driver.c: 86: {;i2c1_driver.c: 87: SSP1STAT = 0x00;
 10527  127A  018F               	clrf	15	;volatile
 10528  127B                     l5302:
 10529                           
 10530                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
 10531  127B  3028               	movlw	40
 10532  127C  0090               	movwf	16	;volatile
 10533  127D                     l5304:
 10534                           
 10535                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
 10536  127D  0191               	clrf	17	;volatile
 10537                           
 10538                           ;i2c1_driver.c: 90: SSP1ADD = 0x3;
 10539  127E  3003               	movlw	3
 10540  127F  008D               	movwf	13	;volatile
 10541  1280                     l253:
 10542  1280  0008               	return
 10543  1281                     __end_of_i2c1_driver_open:
 10544                           
 10545                           	psect	text4
 10546  1202                     __ptext4:	
 10547 ;; *************** function _getch *****************
 10548 ;; Defined at:
 10549 ;;		line 171 in file "mcc_generated_files/eusart.c"
 10550 ;; Parameters:    Size  Location     Type
 10551 ;;		None
 10552 ;; Auto vars:     Size  Location     Type
 10553 ;;		None
 10554 ;; Return value:  Size  Location     Type
 10555 ;;                  1    wreg      unsigned char 
 10556 ;; Registers used:
 10557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;Total ram usage:        0 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; Hardware stack levels required when called:    5
 10570 ;; This function calls:
 10571 ;;		_EUSART_Read
 10572 ;; This function is called by:
 10573 ;;		_main
 10574 ;; This function uses a non-reentrant model
 10575 ;;
 10576                           
 10577                           
 10578                           ;psect for function _getch
 10579  1202                     _getch:
 10580  1202                     l5326:	
 10581                           ;incstack = 0
 10582                           ; Regs used in _getch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10583                           
 10584                           
 10585                           ;eusart.c: 173: return EUSART_Read();
 10586  1202  3194  24E0  3192   	fcall	_EUSART_Read
 10587  1205                     l839:
 10588  1205  0008               	return
 10589  1206                     __end_of_getch:
 10590                           
 10591                           	psect	text5
 10592  14E0                     __ptext5:	
 10593 ;; *************** function _EUSART_Read *****************
 10594 ;; Defined at:
 10595 ;;		line 128 in file "mcc_generated_files/eusart.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;		None
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;  readValue       1    3[COMMON] unsigned char 
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  1    wreg      unsigned char 
 10602 ;; Registers used:
 10603 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;Total ram usage:        2 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:    4
 10616 ;; This function calls:
 10617 ;;		Nothing
 10618 ;; This function is called by:
 10619 ;;		_getch
 10620 ;; This function uses a non-reentrant model
 10621 ;;
 10622                           
 10623                           
 10624                           ;psect for function _EUSART_Read
 10625  14E0                     _EUSART_Read:
 10626  14E0                     l5144:	
 10627                           ;incstack = 0
 10628                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 10629                           
 10630  14E0                     l5146:	
 10631                           ;eusart.c: 132: while(0 == eusartRxCount)
 10632                           
 10633  14E0  0020               	movlb	0	; select bank0
 10634  14E1  0868               	movf	_eusartRxCount,w	;volatile
 10635  14E2  1903               	btfsc	3,2
 10636  14E3  2CE5               	goto	u4551
 10637  14E4  2CE6               	goto	u4550
 10638  14E5                     u4551:
 10639  14E5  2CE0               	goto	l5146
 10640  14E6                     u4550:
 10641  14E6                     l5148:
 10642                           
 10643                           ;eusart.c: 134: };eusart.c: 136: readValue = eusartRxBuffer[eusartRxTail++];
 10644  14E6  0869               	movf	_eusartRxTail,w
 10645  14E7  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 10646  14E8  0086               	movwf	6
 10647  14E9  3002               	movlw	2	; select bank4/5
 10648  14EA  0087               	movwf	7
 10649  14EB  0801               	movf	1,w
 10650  14EC  00F2               	movwf	??_EUSART_Read
 10651  14ED  0872               	movf	??_EUSART_Read,w
 10652  14EE  00F3               	movwf	EUSART_Read@readValue
 10653  14EF                     l5150:
 10654  14EF  3001               	movlw	1
 10655  14F0  00F2               	movwf	??_EUSART_Read
 10656  14F1  0872               	movf	??_EUSART_Read,w
 10657  14F2  07E9               	addwf	_eusartRxTail,f	;volatile
 10658  14F3                     l5152:
 10659                           
 10660                           ;eusart.c: 137: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 10661  14F3  3040               	movlw	64
 10662  14F4  0269               	subwf	_eusartRxTail,w	;volatile
 10663  14F5  1C03               	skipc
 10664  14F6  2CF8               	goto	u4561
 10665  14F7  2CF9               	goto	u4560
 10666  14F8                     u4561:
 10667  14F8  2CFA               	goto	l5156
 10668  14F9                     u4560:
 10669  14F9                     l5154:
 10670                           
 10671                           ;eusart.c: 138: {;eusart.c: 139: eusartRxTail = 0;
 10672  14F9  01E9               	clrf	_eusartRxTail	;volatile
 10673  14FA                     l5156:
 10674                           
 10675                           ;eusart.c: 140: };eusart.c: 141: PIE3bits.RCIE = 0;
 10676  14FA  002E               	movlb	14	; select bank14
 10677  14FB  1299               	bcf	25,5	;volatile
 10678  14FC                     l5158:
 10679                           
 10680                           ;eusart.c: 142: eusartRxCount--;
 10681  14FC  3001               	movlw	1
 10682  14FD  0020               	movlb	0	; select bank0
 10683  14FE  02E8               	subwf	_eusartRxCount,f	;volatile
 10684  14FF                     l5160:
 10685                           
 10686                           ;eusart.c: 143: PIE3bits.RCIE = 1;
 10687  14FF  002E               	movlb	14	; select bank14
 10688  1500  1699               	bsf	25,5	;volatile
 10689  1501                     l5162:
 10690                           
 10691                           ;eusart.c: 145: return readValue;
 10692  1501  0873               	movf	EUSART_Read@readValue,w
 10693  1502                     l827:
 10694  1502  0008               	return
 10695  1503                     __end_of_EUSART_Read:
 10696                           
 10697                           	psect	text6
 10698  1602                     __ptext6:	
 10699 ;; *************** function _editTemp *****************
 10700 ;; Defined at:
 10701 ;;		line 721 in file "main.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;		None
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;		None
 10706 ;; Return value:  Size  Location     Type
 10707 ;;                  1    wreg      void 
 10708 ;; Registers used:
 10709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;Total ram usage:        1 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:   10
 10722 ;; This function calls:
 10723 ;;		_checkFlags
 10724 ;;		_update_menuLCD
 10725 ;; This function is called by:
 10726 ;;		_main
 10727 ;; This function uses a non-reentrant model
 10728 ;;
 10729                           
 10730                           
 10731                           ;psect for function _editTemp
 10732  1602                     _editTemp:
 10733  1602                     l1399:	
 10734                           ;incstack = 0
 10735                           ; Regs used in _editTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10736                           ;main.c: 722: while(1){
 10737                           
 10738                           
 10739                           ;main.c: 723: if(PORTCbits.RC5 == 0){
 10740  1602  0020               	movlb	0	; select bank0
 10741  1603  1A8E               	btfsc	14,5	;volatile
 10742  1604  2E06               	goto	u7711
 10743  1605  2E07               	goto	u7710
 10744  1606                     u7711:
 10745  1606  2E27               	goto	l6730
 10746  1607                     u7710:
 10747  1607                     l6716:
 10748                           
 10749                           ;main.c: 724: if(editingTempAlarm == 0){
 10750  1607  0864               	movf	_editingTempAlarm,w
 10751  1608  1D03               	btfss	3,2
 10752  1609  2E0B               	goto	u7721
 10753  160A  2E0C               	goto	u7720
 10754  160B                     u7721:
 10755  160B  2E0F               	goto	l6720
 10756  160C                     u7720:
 10757  160C                     l6718:
 10758                           
 10759                           ;main.c: 725: editingTempAlarm = 1;
 10760  160C  01E4               	clrf	_editingTempAlarm
 10761  160D  0AE4               	incf	_editingTempAlarm,f
 10762                           
 10763                           ;main.c: 726: } else {
 10764  160E  2E1B               	goto	l6726
 10765  160F                     l6720:
 10766                           
 10767                           ;main.c: 727: tempAlarm.alarmTemp++;
 10768  160F  3001               	movlw	1
 10769  1610  00D4               	movwf	??_editTemp
 10770  1611  0854               	movf	??_editTemp,w
 10771  1612  0021               	movlb	1	; select bank1
 10772  1613  07C9               	addwf	_tempAlarm^(0+128),f
 10773  1614                     l6722:
 10774                           
 10775                           ;main.c: 728: if(tempAlarm.alarmTemp > 50){
 10776  1614  3033               	movlw	51
 10777  1615  0249               	subwf	_tempAlarm^(0+128),w
 10778  1616  1C03               	skipc
 10779  1617  2E19               	goto	u7731
 10780  1618  2E1A               	goto	u7730
 10781  1619                     u7731:
 10782  1619  2E1B               	goto	l6726
 10783  161A                     u7730:
 10784  161A                     l6724:
 10785                           
 10786                           ;main.c: 729: tempAlarm.alarmTemp = 0;
 10787  161A  01C9               	clrf	_tempAlarm^(0+128)
 10788  161B                     l6726:
 10789                           
 10790                           ;main.c: 730: };main.c: 731: };main.c: 732: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10791  161B  3021               	movlw	33
 10792  161C  0020               	movlb	0	; select bank0
 10793  161D  00D4               	movwf	??_editTemp
 10794  161E  3076               	movlw	118
 10795  161F                     u8397:
 10796  161F  0B89               	decfsz	9,f
 10797  1620  2E1F               	goto	u8397
 10798  1621  0BD4               	decfsz	??_editTemp,f
 10799  1622  2E1F               	goto	u8397
 10800  1623  0000               	nop
 10801  1624                     l6728:
 10802                           
 10803                           ;main.c: 733: update_menuLCD();
 10804  1624  3183  237A  3196   	fcall	_update_menuLCD
 10805  1627                     l6730:
 10806                           
 10807                           ;main.c: 734: };main.c: 735: checkFlags();
 10808  1627  3189  213C  3196   	fcall	_checkFlags
 10809  162A                     l6732:
 10810                           
 10811                           ;main.c: 736: if(modeFlag != 2){
 10812  162A  3002               	movlw	2
 10813  162B  0020               	movlb	0	; select bank0
 10814  162C  065C               	xorwf	_modeFlag,w
 10815  162D  045D               	iorwf	_modeFlag+1,w
 10816  162E  1903               	btfsc	3,2
 10817  162F  2E31               	goto	u7741
 10818  1630  2E32               	goto	u7740
 10819  1631                     u7741:
 10820  1631  2E02               	goto	l1399
 10821  1632                     u7740:
 10822  1632                     l6734:
 10823                           
 10824                           ;main.c: 737: editingTempAlarm = 0;
 10825  1632  01E4               	clrf	_editingTempAlarm
 10826  1633                     l1407:	
 10827                           ;main.c: 738: break;
 10828                           
 10829  1633  0008               	return
 10830  1634                     __end_of_editTemp:
 10831                           
 10832                           	psect	text7
 10833  15D0                     __ptext7:	
 10834 ;; *************** function _editLum *****************
 10835 ;; Defined at:
 10836 ;;		line 743 in file "main.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;		None
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;		None
 10841 ;; Return value:  Size  Location     Type
 10842 ;;                  1    wreg      void 
 10843 ;; Registers used:
 10844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10845 ;; Tracked objects:
 10846 ;;		On entry : 0/0
 10847 ;;		On exit  : 0/0
 10848 ;;		Unchanged: 0/0
 10849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;Total ram usage:        1 bytes
 10855 ;; Hardware stack levels used:    1
 10856 ;; Hardware stack levels required when called:   10
 10857 ;; This function calls:
 10858 ;;		_checkFlags
 10859 ;;		_update_menuLCD
 10860 ;; This function is called by:
 10861 ;;		_main
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           
 10866                           ;psect for function _editLum
 10867  15D0                     _editLum:
 10868  15D0                     l1410:	
 10869                           ;incstack = 0
 10870                           ; Regs used in _editLum: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10871                           ;main.c: 744: while(1){
 10872                           
 10873                           
 10874                           ;main.c: 745: if(PORTCbits.RC5 == 0){
 10875  15D0  0020               	movlb	0	; select bank0
 10876  15D1  1A8E               	btfsc	14,5	;volatile
 10877  15D2  2DD4               	goto	u7751
 10878  15D3  2DD5               	goto	u7750
 10879  15D4                     u7751:
 10880  15D4  2DF5               	goto	l6750
 10881  15D5                     u7750:
 10882  15D5                     l6736:
 10883                           
 10884                           ;main.c: 746: if(editingLumAlarm == 0){
 10885  15D5  0863               	movf	_editingLumAlarm,w
 10886  15D6  1D03               	btfss	3,2
 10887  15D7  2DD9               	goto	u7761
 10888  15D8  2DDA               	goto	u7760
 10889  15D9                     u7761:
 10890  15D9  2DDD               	goto	l6740
 10891  15DA                     u7760:
 10892  15DA                     l6738:
 10893                           
 10894                           ;main.c: 747: editingLumAlarm = 1;
 10895  15DA  01E3               	clrf	_editingLumAlarm
 10896  15DB  0AE3               	incf	_editingLumAlarm,f
 10897                           
 10898                           ;main.c: 748: } else {
 10899  15DC  2DE9               	goto	l6746
 10900  15DD                     l6740:
 10901                           
 10902                           ;main.c: 749: lumAlarm.alarmLum++;
 10903  15DD  3001               	movlw	1
 10904  15DE  00D4               	movwf	??_editLum
 10905  15DF  0854               	movf	??_editLum,w
 10906  15E0  0021               	movlb	1	; select bank1
 10907  15E1  07C6               	addwf	_lumAlarm^(0+128),f
 10908  15E2                     l6742:
 10909                           
 10910                           ;main.c: 750: if(lumAlarm.alarmLum > 7){
 10911  15E2  3008               	movlw	8
 10912  15E3  0246               	subwf	_lumAlarm^(0+128),w
 10913  15E4  1C03               	skipc
 10914  15E5  2DE7               	goto	u7771
 10915  15E6  2DE8               	goto	u7770
 10916  15E7                     u7771:
 10917  15E7  2DE9               	goto	l6746
 10918  15E8                     u7770:
 10919  15E8                     l6744:
 10920                           
 10921                           ;main.c: 751: lumAlarm.alarmLum = 0;
 10922  15E8  01C6               	clrf	_lumAlarm^(0+128)
 10923  15E9                     l6746:
 10924                           
 10925                           ;main.c: 752: };main.c: 753: };main.c: 754: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10926  15E9  3021               	movlw	33
 10927  15EA  0020               	movlb	0	; select bank0
 10928  15EB  00D4               	movwf	??_editLum
 10929  15EC  3076               	movlw	118
 10930  15ED                     u8407:
 10931  15ED  0B89               	decfsz	9,f
 10932  15EE  2DED               	goto	u8407
 10933  15EF  0BD4               	decfsz	??_editLum,f
 10934  15F0  2DED               	goto	u8407
 10935  15F1  0000               	nop
 10936  15F2                     l6748:
 10937                           
 10938                           ;main.c: 755: update_menuLCD();
 10939  15F2  3183  237A  3195   	fcall	_update_menuLCD
 10940  15F5                     l6750:
 10941                           
 10942                           ;main.c: 756: };main.c: 757: checkFlags();
 10943  15F5  3189  213C  3195   	fcall	_checkFlags
 10944  15F8                     l6752:
 10945                           
 10946                           ;main.c: 758: if(modeFlag != 3){
 10947  15F8  3003               	movlw	3
 10948  15F9  0020               	movlb	0	; select bank0
 10949  15FA  065C               	xorwf	_modeFlag,w
 10950  15FB  045D               	iorwf	_modeFlag+1,w
 10951  15FC  1903               	btfsc	3,2
 10952  15FD  2DFF               	goto	u7781
 10953  15FE  2E00               	goto	u7780
 10954  15FF                     u7781:
 10955  15FF  2DD0               	goto	l1410
 10956  1600                     u7780:
 10957  1600                     l6754:
 10958                           
 10959                           ;main.c: 759: editingLumAlarm = 0;
 10960  1600  01E3               	clrf	_editingLumAlarm
 10961  1601                     l1418:	
 10962                           ;main.c: 760: break;
 10963                           
 10964  1601  0008               	return
 10965  1602                     __end_of_editLum:
 10966                           
 10967                           	psect	text8
 10968  09A0                     __ptext8:	
 10969 ;; *************** function _editClock *****************
 10970 ;; Defined at:
 10971 ;;		line 683 in file "main.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;		None
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;		None
 10976 ;; Return value:  Size  Location     Type
 10977 ;;                  1    wreg      void 
 10978 ;; Registers used:
 10979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;Total ram usage:        1 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; Hardware stack levels required when called:   10
 10992 ;; This function calls:
 10993 ;;		_checkFlags
 10994 ;;		_update_menuLCD
 10995 ;; This function is called by:
 10996 ;;		_main
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           
 11001                           ;psect for function _editClock
 11002  09A0                     _editClock:
 11003  09A0                     l1378:	
 11004                           ;incstack = 0
 11005                           ; Regs used in _editClock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11006                           ;main.c: 685: while(1){
 11007                           
 11008                           
 11009                           ;main.c: 686: if(PORTCbits.RC5 == 0){
 11010  09A0  0020               	movlb	0	; select bank0
 11011  09A1  1A8E               	btfsc	14,5	;volatile
 11012  09A2  29A4               	goto	u7621
 11013  09A3  29A5               	goto	u7620
 11014  09A4                     u7621:
 11015  09A4  29F7               	goto	l6710
 11016  09A5                     u7620:
 11017  09A5                     l6678:
 11018                           
 11019                           ;main.c: 687: if(editingClockAlarm == 0){
 11020  09A5  085E               	movf	_editingClockAlarm,w
 11021  09A6  045F               	iorwf	_editingClockAlarm+1,w
 11022  09A7  1D03               	btfss	3,2
 11023  09A8  29AA               	goto	u7631
 11024  09A9  29AB               	goto	u7630
 11025  09AA                     u7631:
 11026  09AA  29B0               	goto	l6682
 11027  09AB                     u7630:
 11028  09AB                     l6680:
 11029                           
 11030                           ;main.c: 688: editingClockAlarm = 1;
 11031  09AB  3001               	movlw	1
 11032  09AC  00DE               	movwf	_editingClockAlarm
 11033  09AD  3000               	movlw	0
 11034  09AE  00DF               	movwf	_editingClockAlarm+1
 11035                           
 11036                           ;main.c: 690: } else if(editingClockAlarm == 1){
 11037  09AF  29EB               	goto	l6706
 11038  09B0                     l6682:
 11039  09B0  035E               	decf	_editingClockAlarm,w
 11040  09B1  045F               	iorwf	_editingClockAlarm+1,w
 11041  09B2  1D03               	btfss	3,2
 11042  09B3  29B5               	goto	u7641
 11043  09B4  29B6               	goto	u7640
 11044  09B5                     u7641:
 11045  09B5  29C3               	goto	l6690
 11046  09B6                     u7640:
 11047  09B6                     l6684:
 11048                           
 11049                           ;main.c: 691: if(clkAlarm.alarmVal.h >= 23){
 11050  09B6  3017               	movlw	23
 11051  09B7  0255               	subwf	_clkAlarm,w
 11052  09B8  1C03               	skipc
 11053  09B9  29BB               	goto	u7651
 11054  09BA  29BC               	goto	u7650
 11055  09BB                     u7651:
 11056  09BB  29BE               	goto	l6688
 11057  09BC                     u7650:
 11058  09BC                     l6686:
 11059                           
 11060                           ;main.c: 692: clkAlarm.alarmVal.h = 0;
 11061  09BC  01D5               	clrf	_clkAlarm
 11062                           
 11063                           ;main.c: 693: } else{
 11064  09BD  29EB               	goto	l6706
 11065  09BE                     l6688:
 11066                           
 11067                           ;main.c: 694: clkAlarm.alarmVal.h++;
 11068  09BE  3001               	movlw	1
 11069  09BF  00D4               	movwf	??_editClock
 11070  09C0  0854               	movf	??_editClock,w
 11071  09C1  07D5               	addwf	_clkAlarm,f
 11072  09C2  29EB               	goto	l6706
 11073  09C3                     l6690:
 11074  09C3  3002               	movlw	2
 11075  09C4  065E               	xorwf	_editingClockAlarm,w
 11076  09C5  045F               	iorwf	_editingClockAlarm+1,w
 11077  09C6  1D03               	btfss	3,2
 11078  09C7  29C9               	goto	u7661
 11079  09C8  29CA               	goto	u7660
 11080  09C9                     u7661:
 11081  09C9  29D7               	goto	l6698
 11082  09CA                     u7660:
 11083  09CA                     l6692:
 11084                           
 11085                           ;main.c: 697: if(clkAlarm.alarmVal.m == 59){
 11086  09CA  303B               	movlw	59
 11087  09CB  0656               	xorwf	_clkAlarm+1,w
 11088  09CC  1D03               	btfss	3,2
 11089  09CD  29CF               	goto	u7671
 11090  09CE  29D0               	goto	u7670
 11091  09CF                     u7671:
 11092  09CF  29D2               	goto	l6696
 11093  09D0                     u7670:
 11094  09D0                     l6694:
 11095                           
 11096                           ;main.c: 698: clkAlarm.alarmVal.m = 0;
 11097  09D0  01D6               	clrf	_clkAlarm+1
 11098                           
 11099                           ;main.c: 699: } else{
 11100  09D1  29EB               	goto	l6706
 11101  09D2                     l6696:
 11102                           
 11103                           ;main.c: 700: clkAlarm.alarmVal.m++;
 11104  09D2  3001               	movlw	1
 11105  09D3  00D4               	movwf	??_editClock
 11106  09D4  0854               	movf	??_editClock,w
 11107  09D5  07D6               	addwf	_clkAlarm+1,f
 11108  09D6  29EB               	goto	l6706
 11109  09D7                     l6698:
 11110  09D7  3003               	movlw	3
 11111  09D8  065E               	xorwf	_editingClockAlarm,w
 11112  09D9  045F               	iorwf	_editingClockAlarm+1,w
 11113  09DA  1D03               	btfss	3,2
 11114  09DB  29DD               	goto	u7681
 11115  09DC  29DE               	goto	u7680
 11116  09DD                     u7681:
 11117  09DD  29EB               	goto	l1385
 11118  09DE                     u7680:
 11119  09DE                     l6700:
 11120                           
 11121                           ;main.c: 703: if(clkAlarm.alarmVal.s == 59){
 11122  09DE  303B               	movlw	59
 11123  09DF  0657               	xorwf	_clkAlarm+2,w
 11124  09E0  1D03               	btfss	3,2
 11125  09E1  29E3               	goto	u7691
 11126  09E2  29E4               	goto	u7690
 11127  09E3                     u7691:
 11128  09E3  29E6               	goto	l6704
 11129  09E4                     u7690:
 11130  09E4                     l6702:
 11131                           
 11132                           ;main.c: 704: clkAlarm.alarmVal.s = 0;
 11133  09E4  01D7               	clrf	_clkAlarm+2
 11134                           
 11135                           ;main.c: 705: } else{
 11136  09E5  29EB               	goto	l6706
 11137  09E6                     l6704:
 11138                           
 11139                           ;main.c: 706: clkAlarm.alarmVal.s++;
 11140  09E6  3001               	movlw	1
 11141  09E7  00D4               	movwf	??_editClock
 11142  09E8  0854               	movf	??_editClock,w
 11143  09E9  07D7               	addwf	_clkAlarm+2,f
 11144  09EA  29EB               	goto	l6706
 11145  09EB                     l1385:
 11146  09EB                     l6706:
 11147                           
 11148                           ;main.c: 707: };main.c: 708: };main.c: 709: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 11149  09EB  3021               	movlw	33
 11150  09EC  0020               	movlb	0	; select bank0
 11151  09ED  00D4               	movwf	??_editClock
 11152  09EE  3076               	movlw	118
 11153  09EF                     u8417:
 11154  09EF  0B89               	decfsz	9,f
 11155  09F0  29EF               	goto	u8417
 11156  09F1  0BD4               	decfsz	??_editClock,f
 11157  09F2  29EF               	goto	u8417
 11158  09F3  0000               	nop
 11159  09F4                     l6708:
 11160                           
 11161                           ;main.c: 710: update_menuLCD();
 11162  09F4  3183  237A  3189   	fcall	_update_menuLCD
 11163  09F7                     l6710:
 11164                           
 11165                           ;main.c: 711: };main.c: 712: checkFlags();
 11166  09F7  3189  213C  3189   	fcall	_checkFlags
 11167  09FA                     l6712:
 11168                           
 11169                           ;main.c: 713: if(modeFlag != 1){
 11170  09FA  0020               	movlb	0	; select bank0
 11171  09FB  035C               	decf	_modeFlag,w
 11172  09FC  045D               	iorwf	_modeFlag+1,w
 11173  09FD  1903               	btfsc	3,2
 11174  09FE  2A00               	goto	u7701
 11175  09FF  2A01               	goto	u7700
 11176  0A00                     u7701:
 11177  0A00  29A0               	goto	l1378
 11178  0A01                     u7700:
 11179  0A01                     l6714:
 11180                           
 11181                           ;main.c: 714: editingClockAlarm = 0;
 11182  0A01  01DE               	clrf	_editingClockAlarm
 11183  0A02  01DF               	clrf	_editingClockAlarm+1
 11184  0A03                     l1396:	
 11185                           ;main.c: 715: break;
 11186                           
 11187  0A03  0008               	return
 11188  0A04                     __end_of_editClock:
 11189                           
 11190                           	psect	text9
 11191  093C                     __ptext9:	
 11192 ;; *************** function _checkFlags *****************
 11193 ;; Defined at:
 11194 ;;		line 649 in file "main.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;		None
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      void 
 11201 ;; Registers used:
 11202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;Total ram usage:        1 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    9
 11215 ;; This function calls:
 11216 ;;		_PWM6_LoadDutyValue
 11217 ;;		_PWM_Output_D4_Enable
 11218 ;;		_S1button
 11219 ;;		_TMR2_StartTimer
 11220 ;;		_monitoring_TEMP_LUM
 11221 ;;		_update_menuLCD
 11222 ;;		_wirteEEPROMinit
 11223 ;; This function is called by:
 11224 ;;		_editClock
 11225 ;;		_editTemp
 11226 ;;		_editLum
 11227 ;;		_toggleAlarms
 11228 ;;		_main
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           
 11233                           ;psect for function _checkFlags
 11234  093C                     _checkFlags:
 11235  093C                     l6522:	
 11236                           ;incstack = 0
 11237                           ; Regs used in _checkFlags: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11238                           
 11239                           
 11240                           ;main.c: 650: if(writeEEPROM_flag){
 11241  093C  0021               	movlb	1	; select bank1
 11242  093D  0853               	movf	_writeEEPROM_flag^(0+128),w
 11243  093E  1903               	btfsc	3,2
 11244  093F  2941               	goto	u7281
 11245  0940  2942               	goto	u7280
 11246  0941                     u7281:
 11247  0941  2947               	goto	l6528
 11248  0942                     u7280:
 11249  0942                     l6524:
 11250                           
 11251                           ;main.c: 651: wirteEEPROMinit();
 11252  0942  318A  22E4  3189   	fcall	_wirteEEPROMinit
 11253  0945                     l6526:
 11254                           
 11255                           ;main.c: 652: writeEEPROM_flag = 0;
 11256  0945  0021               	movlb	1	; select bank1
 11257  0946  01D3               	clrf	_writeEEPROM_flag^(0+128)
 11258  0947                     l6528:
 11259                           
 11260                           ;main.c: 653: };main.c: 654: if(flagS1pushed){
 11261  0947  0856               	movf	_flagS1pushed^(0+128),w
 11262  0948  1903               	btfsc	3,2
 11263  0949  294B               	goto	u7291
 11264  094A  294C               	goto	u7290
 11265  094B                     u7291:
 11266  094B  2956               	goto	l6538
 11267  094C                     u7290:
 11268  094C                     l6530:
 11269                           
 11270                           ;main.c: 655: S1button();
 11271  094C  3188  20DF  3189   	fcall	_S1button
 11272  094F                     l6532:
 11273                           
 11274                           ;main.c: 656: flagS1pushed=0;
 11275  094F  0021               	movlb	1	; select bank1
 11276  0950  01D6               	clrf	_flagS1pushed^(0+128)
 11277  0951                     l6534:
 11278                           
 11279                           ;main.c: 657: update_menuLCD();
 11280  0951  3183  237A  3189   	fcall	_update_menuLCD
 11281  0954                     l6536:
 11282                           
 11283                           ;main.c: 658: updateLCD=0;
 11284  0954  0021               	movlb	1	; select bank1
 11285  0955  01EA               	clrf	_updateLCD^(0+128)
 11286  0956                     l6538:
 11287                           
 11288                           ;main.c: 659: };main.c: 660: if(monitor_TEMP_LUM){
 11289  0956  0855               	movf	_monitor_TEMP_LUM^(0+128),w
 11290  0957  1903               	btfsc	3,2
 11291  0958  295A               	goto	u7301
 11292  0959  295B               	goto	u7300
 11293  095A                     u7301:
 11294  095A  2960               	goto	l6544
 11295  095B                     u7300:
 11296  095B                     l6540:
 11297                           
 11298                           ;main.c: 661: monitoring_TEMP_LUM();
 11299  095B  318E  2673  3189   	fcall	_monitoring_TEMP_LUM
 11300  095E                     l6542:
 11301                           
 11302                           ;main.c: 662: monitor_TEMP_LUM = 0;
 11303  095E  0021               	movlb	1	; select bank1
 11304  095F  01D5               	clrf	_monitor_TEMP_LUM^(0+128)
 11305  0960                     l6544:
 11306                           
 11307                           ;main.c: 663: };main.c: 664: if(updateLCD){
 11308  0960  086A               	movf	_updateLCD^(0+128),w
 11309  0961  1903               	btfsc	3,2
 11310  0962  2964               	goto	u7311
 11311  0963  2965               	goto	u7310
 11312  0964                     u7311:
 11313  0964  296A               	goto	l6550
 11314  0965                     u7310:
 11315  0965                     l6546:
 11316                           
 11317                           ;main.c: 665: update_menuLCD();
 11318  0965  3183  237A  3189   	fcall	_update_menuLCD
 11319  0968                     l6548:
 11320                           
 11321                           ;main.c: 666: updateLCD=0;
 11322  0968  0021               	movlb	1	; select bank1
 11323  0969  01EA               	clrf	_updateLCD^(0+128)
 11324  096A                     l6550:
 11325                           
 11326                           ;main.c: 667: };main.c: 668: if(PWM_on){
 11327  096A  0020               	movlb	0	; select bank0
 11328  096B  0862               	movf	_PWM_on,w
 11329  096C  1903               	btfsc	3,2
 11330  096D  296F               	goto	u7321
 11331  096E  2970               	goto	u7320
 11332  096F                     u7321:
 11333  096F  299F               	goto	l1375
 11334  0970                     u7320:
 11335  0970                     l6552:
 11336                           
 11337                           ;main.c: 669: if(PWM6EN==0){
 11338  0970  0027               	movlb	7	; select bank7
 11339  0971  1B8E               	btfsc	14,7	;volatile
 11340  0972  2974               	goto	u7331
 11341  0973  2975               	goto	u7330
 11342  0974                     u7331:
 11343  0974  297B               	goto	l6556
 11344  0975                     u7330:
 11345  0975                     l6554:
 11346                           
 11347                           ;main.c: 670: TMR2_StartTimer();
 11348  0975  3191  21FA  3189   	fcall	_TMR2_StartTimer
 11349                           
 11350                           ;main.c: 671: PWM_Output_D4_Enable();
 11351  0978  3191  21EE  3189   	fcall	_PWM_Output_D4_Enable
 11352  097B                     l6556:
 11353                           
 11354                           ;main.c: 672: };main.c: 673: if(dimingLed <= 1023){
 11355  097B  0021               	movlb	1	; select bank1
 11356  097C  084D               	movf	(_dimingLed+1)^(0+128),w
 11357  097D  3A80               	xorlw	128
 11358  097E  0020               	movlb	0	; select bank0
 11359  097F  00D3               	movwf	??_checkFlags
 11360  0980  3084               	movlw	132
 11361  0981  0253               	subwf	??_checkFlags,w
 11362  0982  1D03               	skipz
 11363  0983  2987               	goto	u7345
 11364  0984  3000               	movlw	0
 11365  0985  0021               	movlb	1	; select bank1
 11366  0986  024C               	subwf	_dimingLed^(0+128),w
 11367  0987                     u7345:
 11368  0987  1803               	skipnc
 11369  0988  298A               	goto	u7341
 11370  0989  298B               	goto	u7340
 11371  098A                     u7341:
 11372  098A  2991               	goto	l6560
 11373  098B                     u7340:
 11374  098B                     l6558:
 11375                           
 11376                           ;main.c: 674: dimingLed += 1;
 11377  098B  3001               	movlw	1
 11378  098C  0021               	movlb	1	; select bank1
 11379  098D  07CC               	addwf	_dimingLed^(0+128),f
 11380  098E  3000               	movlw	0
 11381  098F  3DCD               	addwfc	(_dimingLed+1)^(0+128),f
 11382                           
 11383                           ;main.c: 675: } else{
 11384  0990  2994               	goto	l6562
 11385  0991                     l6560:
 11386                           
 11387                           ;main.c: 676: dimingLed = 0;
 11388  0991  0021               	movlb	1	; select bank1
 11389  0992  01CC               	clrf	_dimingLed^(0+128)
 11390  0993  01CD               	clrf	(_dimingLed+1)^(0+128)
 11391  0994                     l6562:
 11392                           
 11393                           ;main.c: 677: };main.c: 678: PWM6_LoadDutyValue(dimingLed);
 11394  0994  084D               	movf	(_dimingLed+1)^(0+128),w
 11395  0995  00F3               	movwf	PWM6_LoadDutyValue@dutyValue+1
 11396  0996  084C               	movf	_dimingLed^(0+128),w
 11397  0997  00F2               	movwf	PWM6_LoadDutyValue@dutyValue
 11398  0998  3192  22DD  3189   	fcall	_PWM6_LoadDutyValue
 11399  099B                     l6564:
 11400                           
 11401                           ;main.c: 679: _delay((unsigned long)((1)*(1000000/4000.0)));
 11402  099B  3053               	movlw	83
 11403  099C                     u8427:
 11404  099C  0B89               	decfsz	9,f
 11405  099D  299C               	goto	u8427
 11406  099E  0000               	nop
 11407  099F                     l1375:
 11408  099F  0008               	return
 11409  09A0                     __end_of_checkFlags:
 11410                           
 11411                           	psect	text10
 11412  0AE4                     __ptext10:	
 11413 ;; *************** function _wirteEEPROMinit *****************
 11414 ;; Defined at:
 11415 ;;		line 394 in file "main.c"
 11416 ;; Parameters:    Size  Location     Type
 11417 ;;		None
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;		None
 11420 ;; Return value:  Size  Location     Type
 11421 ;;                  1    wreg      void 
 11422 ;; Registers used:
 11423 ;;		wreg, status,2, status,0, pclath, cstack
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/0
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11432 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11433 ;;Total ram usage:        1 bytes
 11434 ;; Hardware stack levels used:    1
 11435 ;; Hardware stack levels required when called:    5
 11436 ;; This function calls:
 11437 ;;		_DATAEE_WriteByte
 11438 ;; This function is called by:
 11439 ;;		_checkFlags
 11440 ;; This function uses a non-reentrant model
 11441 ;;
 11442                           
 11443                           
 11444                           ;psect for function _wirteEEPROMinit
 11445  0AE4                     _wirteEEPROMinit:
 11446  0AE4                     l6294:	
 11447                           ;incstack = 0
 11448                           ; Regs used in _wirteEEPROMinit: [wreg+status,2+status,0+pclath+cstack]
 11449                           
 11450                           
 11451                           ;main.c: 396: DATAEE_WriteByte( 0x7000 + (1), NREG);
 11452  0AE4  3001               	movlw	1
 11453  0AE5  0020               	movlb	0	; select bank0
 11454  0AE6  00A0               	movwf	DATAEE_WriteByte@bAdd
 11455  0AE7  3070               	movlw	112
 11456  0AE8  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11457  0AE9  087B               	movf	_NREG,w
 11458  0AEA  00F9               	movwf	??_wirteEEPROMinit
 11459  0AEB  0879               	movf	??_wirteEEPROMinit,w
 11460  0AEC  00A2               	movwf	DATAEE_WriteByte@bData
 11461  0AED  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11462                           
 11463                           ;main.c: 397: DATAEE_WriteByte( 0x7000 + (2), PMON);
 11464  0AF0  3002               	movlw	2
 11465  0AF1  0020               	movlb	0	; select bank0
 11466  0AF2  00A0               	movwf	DATAEE_WriteByte@bAdd
 11467  0AF3  3070               	movlw	112
 11468  0AF4  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11469  0AF5  086E               	movf	_PMON,w
 11470  0AF6  00F9               	movwf	??_wirteEEPROMinit
 11471  0AF7  0879               	movf	??_wirteEEPROMinit,w
 11472  0AF8  00A2               	movwf	DATAEE_WriteByte@bData
 11473  0AF9  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11474                           
 11475                           ;main.c: 398: DATAEE_WriteByte( 0x7000 + (3), TALA);
 11476  0AFC  3003               	movlw	3
 11477  0AFD  0020               	movlb	0	; select bank0
 11478  0AFE  00A0               	movwf	DATAEE_WriteByte@bAdd
 11479  0AFF  3070               	movlw	112
 11480  0B00  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11481  0B01  086D               	movf	_TALA,w
 11482  0B02  00F9               	movwf	??_wirteEEPROMinit
 11483  0B03  0879               	movf	??_wirteEEPROMinit,w
 11484  0B04  00A2               	movwf	DATAEE_WriteByte@bData
 11485  0B05  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11486                           
 11487                           ;main.c: 399: DATAEE_WriteByte( 0x7000 + (4), clkAlarm.alarmVal.h);
 11488  0B08  3004               	movlw	4
 11489  0B09  0020               	movlb	0	; select bank0
 11490  0B0A  00A0               	movwf	DATAEE_WriteByte@bAdd
 11491  0B0B  3070               	movlw	112
 11492  0B0C  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11493  0B0D  0855               	movf	_clkAlarm,w
 11494  0B0E  00F9               	movwf	??_wirteEEPROMinit
 11495  0B0F  0879               	movf	??_wirteEEPROMinit,w
 11496  0B10  00A2               	movwf	DATAEE_WriteByte@bData
 11497  0B11  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11498                           
 11499                           ;main.c: 400: DATAEE_WriteByte( 0x7000 + (5), clkAlarm.alarmVal.m);
 11500  0B14  3005               	movlw	5
 11501  0B15  0020               	movlb	0	; select bank0
 11502  0B16  00A0               	movwf	DATAEE_WriteByte@bAdd
 11503  0B17  3070               	movlw	112
 11504  0B18  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11505  0B19  0856               	movf	_clkAlarm+1,w
 11506  0B1A  00F9               	movwf	??_wirteEEPROMinit
 11507  0B1B  0879               	movf	??_wirteEEPROMinit,w
 11508  0B1C  00A2               	movwf	DATAEE_WriteByte@bData
 11509  0B1D  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11510                           
 11511                           ;main.c: 401: DATAEE_WriteByte( 0x7000 + (6), clkAlarm.alarmVal.s);
 11512  0B20  3006               	movlw	6
 11513  0B21  0020               	movlb	0	; select bank0
 11514  0B22  00A0               	movwf	DATAEE_WriteByte@bAdd
 11515  0B23  3070               	movlw	112
 11516  0B24  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11517  0B25  0857               	movf	_clkAlarm+2,w
 11518  0B26  00F9               	movwf	??_wirteEEPROMinit
 11519  0B27  0879               	movf	??_wirteEEPROMinit,w
 11520  0B28  00A2               	movwf	DATAEE_WriteByte@bData
 11521  0B29  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11522                           
 11523                           ;main.c: 402: DATAEE_WriteByte( 0x7000 + (7), tempAlarm.alarmTemp);
 11524  0B2C  3007               	movlw	7
 11525  0B2D  0020               	movlb	0	; select bank0
 11526  0B2E  00A0               	movwf	DATAEE_WriteByte@bAdd
 11527  0B2F  3070               	movlw	112
 11528  0B30  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11529  0B31  0021               	movlb	1	; select bank1
 11530  0B32  0849               	movf	_tempAlarm^(0+128),w
 11531  0B33  00F9               	movwf	??_wirteEEPROMinit
 11532  0B34  0879               	movf	??_wirteEEPROMinit,w
 11533  0B35  0020               	movlb	0	; select bank0
 11534  0B36  00A2               	movwf	DATAEE_WriteByte@bData
 11535  0B37  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11536                           
 11537                           ;main.c: 403: DATAEE_WriteByte( 0x7000 + (8), lumAlarm.alarmLum);
 11538  0B3A  3008               	movlw	8
 11539  0B3B  0020               	movlb	0	; select bank0
 11540  0B3C  00A0               	movwf	DATAEE_WriteByte@bAdd
 11541  0B3D  3070               	movlw	112
 11542  0B3E  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11543  0B3F  0021               	movlb	1	; select bank1
 11544  0B40  0846               	movf	_lumAlarm^(0+128),w
 11545  0B41  00F9               	movwf	??_wirteEEPROMinit
 11546  0B42  0879               	movf	??_wirteEEPROMinit,w
 11547  0B43  0020               	movlb	0	; select bank0
 11548  0B44  00A2               	movwf	DATAEE_WriteByte@bData
 11549  0B45  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11550                           
 11551                           ;main.c: 404: DATAEE_WriteByte( 0x7000 + (9), ALAF);
 11552  0B48  3009               	movlw	9
 11553  0B49  0020               	movlb	0	; select bank0
 11554  0B4A  00A0               	movwf	DATAEE_WriteByte@bAdd
 11555  0B4B  3070               	movlw	112
 11556  0B4C  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11557  0B4D  0867               	movf	_ALAF,w
 11558  0B4E  00F9               	movwf	??_wirteEEPROMinit
 11559  0B4F  0879               	movf	??_wirteEEPROMinit,w
 11560  0B50  00A2               	movwf	DATAEE_WriteByte@bData
 11561  0B51  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11562                           
 11563                           ;main.c: 405: DATAEE_WriteByte( 0x7000 + (10), t.h);
 11564  0B54  300A               	movlw	10
 11565  0B55  0020               	movlb	0	; select bank0
 11566  0B56  00A0               	movwf	DATAEE_WriteByte@bAdd
 11567  0B57  3070               	movlw	112
 11568  0B58  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11569  0B59  0859               	movf	_t,w
 11570  0B5A  00F9               	movwf	??_wirteEEPROMinit
 11571  0B5B  0879               	movf	??_wirteEEPROMinit,w
 11572  0B5C  00A2               	movwf	DATAEE_WriteByte@bData
 11573  0B5D  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11574                           
 11575                           ;main.c: 406: DATAEE_WriteByte( 0x7000 + (11), t.m);
 11576  0B60  300B               	movlw	11
 11577  0B61  0020               	movlb	0	; select bank0
 11578  0B62  00A0               	movwf	DATAEE_WriteByte@bAdd
 11579  0B63  3070               	movlw	112
 11580  0B64  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11581  0B65  085A               	movf	_t+1,w
 11582  0B66  00F9               	movwf	??_wirteEEPROMinit
 11583  0B67  0879               	movf	??_wirteEEPROMinit,w
 11584  0B68  00A2               	movwf	DATAEE_WriteByte@bData
 11585  0B69  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11586                           
 11587                           ;main.c: 407: DATAEE_WriteByte( 0x7000 + (12), iwrite);
 11588  0B6C  300C               	movlw	12
 11589  0B6D  0020               	movlb	0	; select bank0
 11590  0B6E  00A0               	movwf	DATAEE_WriteByte@bAdd
 11591  0B6F  3070               	movlw	112
 11592  0B70  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11593  0B71  087A               	movf	_iwrite,w
 11594  0B72  00F9               	movwf	??_wirteEEPROMinit
 11595  0B73  0879               	movf	??_wirteEEPROMinit,w
 11596  0B74  00A2               	movwf	DATAEE_WriteByte@bData
 11597  0B75  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11598                           
 11599                           ;main.c: 408: DATAEE_WriteByte( 0x7000 + (13), NREG + PMON + TALA + clkAlarm.alarmVal.h 
      +                          + clkAlarm.alarmVal.m + clkAlarm.alarmVal.s + tempAlarm.alarmTemp + lumAlarm.alarmLum + 
      +                          ALAF + t.h + t.m + iwrite);
 11600  0B78  300D               	movlw	13
 11601  0B79  0020               	movlb	0	; select bank0
 11602  0B7A  00A0               	movwf	DATAEE_WriteByte@bAdd
 11603  0B7B  3070               	movlw	112
 11604  0B7C  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11605  0B7D  0856               	movf	_clkAlarm+1,w
 11606  0B7E  0757               	addwf	_clkAlarm+2,w
 11607  0B7F  075A               	addwf	_t+1,w
 11608  0B80  0755               	addwf	_clkAlarm,w
 11609  0B81  0021               	movlb	1	; select bank1
 11610  0B82  0749               	addwf	_tempAlarm^(0+128),w
 11611  0B83  0746               	addwf	_lumAlarm^(0+128),w
 11612  0B84  0020               	movlb	0	; select bank0
 11613  0B85  0759               	addwf	_t,w
 11614  0B86  077B               	addwf	_NREG,w
 11615  0B87  076E               	addwf	_PMON,w
 11616  0B88  076D               	addwf	_TALA,w
 11617  0B89  0767               	addwf	_ALAF,w
 11618  0B8A  077A               	addwf	_iwrite,w
 11619  0B8B  00F9               	movwf	??_wirteEEPROMinit
 11620  0B8C  0879               	movf	??_wirteEEPROMinit,w
 11621  0B8D  00A2               	movwf	DATAEE_WriteByte@bData
 11622  0B8E  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11623  0B91                     l1276:
 11624  0B91  0008               	return
 11625  0B92                     __end_of_wirteEEPROMinit:
 11626                           
 11627                           	psect	text11
 11628  037A                     __ptext11:	
 11629 ;; *************** function _update_menuLCD *****************
 11630 ;; Defined at:
 11631 ;;		line 414 in file "main.c"
 11632 ;; Parameters:    Size  Location     Type
 11633 ;;		None
 11634 ;; Auto vars:     Size  Location     Type
 11635 ;;  diff            3   48[BANK0 ] struct Time
 11636 ;;  str             8   33[BANK0 ] unsigned char [8]
 11637 ;;  tt              4   41[BANK0 ] unsigned char [4]
 11638 ;;  l               3   45[BANK0 ] unsigned char [3]
 11639 ;; Return value:  Size  Location     Type
 11640 ;;                  1    wreg      void 
 11641 ;; Registers used:
 11642 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11643 ;; Tracked objects:
 11644 ;;		On entry : 0/0
 11645 ;;		On exit  : 0/0
 11646 ;;		Unchanged: 0/0
 11647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;Total ram usage:       24 bytes
 11653 ;; Hardware stack levels used:    1
 11654 ;; Hardware stack levels required when called:    8
 11655 ;; This function calls:
 11656 ;;		_LCDchar
 11657 ;;		_LCDcmd
 11658 ;;		_LCDstr
 11659 ;;		_PWM6_LoadDutyValue
 11660 ;;		_PWM_Output_D4_Disable
 11661 ;;		_TMR2_StopTimer
 11662 ;;		_differenceBetweenTimePeriod
 11663 ;;		_sprintf
 11664 ;; This function is called by:
 11665 ;;		_checkFlags
 11666 ;;		_editClock
 11667 ;;		_editTemp
 11668 ;;		_editLum
 11669 ;;		_toggleAlarms
 11670 ;; This function uses a non-reentrant model
 11671 ;;
 11672                           
 11673                           
 11674                           ;psect for function _update_menuLCD
 11675  037A                     _update_menuLCD:
 11676  037A                     l6296:	
 11677                           ;incstack = 0
 11678                           ; Regs used in _update_menuLCD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11679                           
 11680                           
 11681                           ;main.c: 416: char str[8];;main.c: 417: if(editingClockAlarm){
 11682  037A  0020               	movlb	0	; select bank0
 11683  037B  085E               	movf	_editingClockAlarm,w
 11684  037C  045F               	iorwf	_editingClockAlarm+1,w
 11685  037D  1903               	btfsc	3,2
 11686  037E  2B80               	goto	u6781
 11687  037F  2B81               	goto	u6780
 11688  0380                     u6781:
 11689  0380  2B9F               	goto	l6300
 11690  0381                     u6780:
 11691  0381                     l6298:
 11692                           
 11693                           ;main.c: 418: sprintf(str, "%02d:%02d:%02d", clkAlarm.alarmVal.h,clkAlarm.alarmVal.m,clk
      +                          Alarm.alarmVal.s);
 11694  0381  3027               	movlw	low (STR_1| (0+32768))
 11695  0382  00A6               	movwf	sprintf@f
 11696  0383  3098               	movlw	high (STR_1| (0+32768))
 11697  0384  00A7               	movwf	sprintf@f+1
 11698  0385  0855               	movf	_clkAlarm,w
 11699  0386  00BB               	movwf	??_update_menuLCD
 11700  0387  01BC               	clrf	??_update_menuLCD+1
 11701  0388  083B               	movf	??_update_menuLCD,w
 11702  0389  00A8               	movwf	?_sprintf+2
 11703  038A  083C               	movf	??_update_menuLCD+1,w
 11704  038B  00A9               	movwf	?_sprintf+3
 11705  038C  0856               	movf	_clkAlarm+1,w
 11706  038D  00BD               	movwf	??_update_menuLCD+2
 11707  038E  01BE               	clrf	??_update_menuLCD+3
 11708  038F  083D               	movf	??_update_menuLCD+2,w
 11709  0390  00AA               	movwf	?_sprintf+4
 11710  0391  083E               	movf	??_update_menuLCD+3,w
 11711  0392  00AB               	movwf	?_sprintf+5
 11712  0393  0857               	movf	_clkAlarm+2,w
 11713  0394  00BF               	movwf	??_update_menuLCD+4
 11714  0395  01C0               	clrf	??_update_menuLCD+5
 11715  0396  083F               	movf	??_update_menuLCD+4,w
 11716  0397  00AC               	movwf	?_sprintf+6
 11717  0398  0840               	movf	??_update_menuLCD+5,w
 11718  0399  00AD               	movwf	?_sprintf+7
 11719  039A  3041               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11720  039B  3185  2584  3183   	fcall	_sprintf
 11721                           
 11722                           ;main.c: 419: } else {
 11723  039E  2BBC               	goto	l6302
 11724  039F                     l6300:
 11725                           
 11726                           ;main.c: 420: sprintf(str, "%02d:%02d:%02d", t.h,t.m,t.s);
 11727  039F  3027               	movlw	low (STR_1| (0+32768))
 11728  03A0  00A6               	movwf	sprintf@f
 11729  03A1  3098               	movlw	high (STR_1| (0+32768))
 11730  03A2  00A7               	movwf	sprintf@f+1
 11731  03A3  0859               	movf	_t,w
 11732  03A4  00BB               	movwf	??_update_menuLCD
 11733  03A5  01BC               	clrf	??_update_menuLCD+1
 11734  03A6  083B               	movf	??_update_menuLCD,w
 11735  03A7  00A8               	movwf	?_sprintf+2
 11736  03A8  083C               	movf	??_update_menuLCD+1,w
 11737  03A9  00A9               	movwf	?_sprintf+3
 11738  03AA  085A               	movf	_t+1,w
 11739  03AB  00BD               	movwf	??_update_menuLCD+2
 11740  03AC  01BE               	clrf	??_update_menuLCD+3
 11741  03AD  083D               	movf	??_update_menuLCD+2,w
 11742  03AE  00AA               	movwf	?_sprintf+4
 11743  03AF  083E               	movf	??_update_menuLCD+3,w
 11744  03B0  00AB               	movwf	?_sprintf+5
 11745  03B1  085B               	movf	_t+2,w
 11746  03B2  00BF               	movwf	??_update_menuLCD+4
 11747  03B3  01C0               	clrf	??_update_menuLCD+5
 11748  03B4  083F               	movf	??_update_menuLCD+4,w
 11749  03B5  00AC               	movwf	?_sprintf+6
 11750  03B6  0840               	movf	??_update_menuLCD+5,w
 11751  03B7  00AD               	movwf	?_sprintf+7
 11752  03B8  3041               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11753  03B9  3185  2584  3183   	fcall	_sprintf
 11754  03BC                     l6302:
 11755                           
 11756                           ;main.c: 421: };main.c: 422: LCDcmd(0x80);
 11757  03BC  3080               	movlw	128
 11758  03BD  3192  223E  3183   	fcall	_LCDcmd
 11759  03C0                     l6304:
 11760                           
 11761                           ;main.c: 423: LCDstr(str);
 11762  03C0  3041               	movlw	low update_menuLCD@str
 11763  03C1  0020               	movlb	0	; select bank0
 11764  03C2  00A1               	movwf	LCDstr@p
 11765  03C3  3000               	movlw	high update_menuLCD@str
 11766  03C4  00A2               	movwf	LCDstr@p+1
 11767  03C5  3193  2387  3183   	fcall	_LCDstr
 11768  03C8                     l6306:
 11769                           
 11770                           ;main.c: 426: if(clkAlarm.trigger == 1){
 11771  03C8  0020               	movlb	0	; select bank0
 11772  03C9  0358               	decf	_clkAlarm+3,w
 11773  03CA  1D03               	btfss	3,2
 11774  03CB  2BCD               	goto	u6791
 11775  03CC  2BCE               	goto	u6790
 11776  03CD                     u6791:
 11777  03CD  2BD7               	goto	l6310
 11778  03CE                     u6790:
 11779  03CE                     l6308:
 11780                           
 11781                           ;main.c: 427: LCDcmd(0x8B);
 11782  03CE  308B               	movlw	139
 11783  03CF  3192  223E  3183   	fcall	_LCDcmd
 11784                           
 11785                           ;main.c: 428: LCDchar('C');
 11786  03D2  3043               	movlw	67
 11787  03D3  3192  2260  3183   	fcall	_LCDchar
 11788                           
 11789                           ;main.c: 429: } else if(modeFlag == 0){
 11790  03D6  2BE5               	goto	l6314
 11791  03D7                     l6310:
 11792  03D7  085C               	movf	_modeFlag,w
 11793  03D8  045D               	iorwf	_modeFlag+1,w
 11794  03D9  1D03               	btfss	3,2
 11795  03DA  2BDC               	goto	u6801
 11796  03DB  2BDD               	goto	u6800
 11797  03DC                     u6801:
 11798  03DC  2BE5               	goto	l6314
 11799  03DD                     u6800:
 11800  03DD                     l6312:
 11801                           
 11802                           ;main.c: 430: LCDcmd(0x8B);
 11803  03DD  308B               	movlw	139
 11804  03DE  3192  223E  3183   	fcall	_LCDcmd
 11805                           
 11806                           ;main.c: 431: LCDchar(' ');
 11807  03E1  3020               	movlw	32
 11808  03E2  3192  2260  3183   	fcall	_LCDchar
 11809  03E5                     l6314:
 11810                           
 11811                           ;main.c: 432: };main.c: 435: if(tempAlarm.trigger == 1){
 11812  03E5  0021               	movlb	1	; select bank1
 11813  03E6  034A               	decf	(_tempAlarm^(0+128)+1),w
 11814  03E7  1D03               	btfss	3,2
 11815  03E8  2BEA               	goto	u6811
 11816  03E9  2BEB               	goto	u6810
 11817  03EA                     u6811:
 11818  03EA  2BF4               	goto	l6318
 11819  03EB                     u6810:
 11820  03EB                     l6316:
 11821                           
 11822                           ;main.c: 436: LCDcmd(0x8C);
 11823  03EB  308C               	movlw	140
 11824  03EC  3192  223E  3183   	fcall	_LCDcmd
 11825                           
 11826                           ;main.c: 437: LCDchar('T');
 11827  03EF  3054               	movlw	84
 11828  03F0  3192  2260  3183   	fcall	_LCDchar
 11829                           
 11830                           ;main.c: 438: } else if(modeFlag == 0){
 11831  03F3  2C03               	goto	l6322
 11832  03F4                     l6318:
 11833  03F4  0020               	movlb	0	; select bank0
 11834  03F5  085C               	movf	_modeFlag,w
 11835  03F6  045D               	iorwf	_modeFlag+1,w
 11836  03F7  1D03               	btfss	3,2
 11837  03F8  2BFA               	goto	u6821
 11838  03F9  2BFB               	goto	u6820
 11839  03FA                     u6821:
 11840  03FA  2C03               	goto	l6322
 11841  03FB                     u6820:
 11842  03FB                     l6320:
 11843                           
 11844                           ;main.c: 439: LCDcmd(0x8C);
 11845  03FB  308C               	movlw	140
 11846  03FC  3192  223E  3183   	fcall	_LCDcmd
 11847                           
 11848                           ;main.c: 440: LCDchar(' ');
 11849  03FF  3020               	movlw	32
 11850  0400  3192  2260  3183   	fcall	_LCDchar
 11851  0403                     l6322:
 11852                           
 11853                           ;main.c: 441: };main.c: 444: if(lumAlarm.trigger == 1){
 11854  0403  0021               	movlb	1	; select bank1
 11855  0404  0347               	decf	(_lumAlarm^(0+128)+1),w
 11856  0405  1D03               	btfss	3,2
 11857  0406  2C08               	goto	u6831
 11858  0407  2C09               	goto	u6830
 11859  0408                     u6831:
 11860  0408  2C12               	goto	l6326
 11861  0409                     u6830:
 11862  0409                     l6324:
 11863                           
 11864                           ;main.c: 445: LCDcmd(0x8D);
 11865  0409  308D               	movlw	141
 11866  040A  3192  223E  3183   	fcall	_LCDcmd
 11867                           
 11868                           ;main.c: 446: LCDchar('L');
 11869  040D  304C               	movlw	76
 11870  040E  3192  2260  3183   	fcall	_LCDchar
 11871                           
 11872                           ;main.c: 447: } else if(modeFlag == 0){
 11873  0411  2C21               	goto	l1288
 11874  0412                     l6326:
 11875  0412  0020               	movlb	0	; select bank0
 11876  0413  085C               	movf	_modeFlag,w
 11877  0414  045D               	iorwf	_modeFlag+1,w
 11878  0415  1D03               	btfss	3,2
 11879  0416  2C18               	goto	u6841
 11880  0417  2C19               	goto	u6840
 11881  0418                     u6841:
 11882  0418  2C21               	goto	l1288
 11883  0419                     u6840:
 11884  0419                     l6328:
 11885                           
 11886                           ;main.c: 448: LCDcmd(0x8D);
 11887  0419  308D               	movlw	141
 11888  041A  3192  223E  3183   	fcall	_LCDcmd
 11889                           
 11890                           ;main.c: 449: LCDchar(' ');
 11891  041D  3020               	movlw	32
 11892  041E  3192  2260  3183   	fcall	_LCDchar
 11893  0421                     l1288:
 11894                           
 11895                           ;main.c: 450: };main.c: 452: LCDcmd(0x8F);
 11896  0421  308F               	movlw	143
 11897  0422  3192  223E  3183   	fcall	_LCDcmd
 11898                           
 11899                           ;main.c: 453: LCDchar(ALAF);
 11900  0425  0020               	movlb	0	; select bank0
 11901  0426  0867               	movf	_ALAF,w
 11902  0427  3192  2260  3183   	fcall	_LCDchar
 11903  042A                     l6330:
 11904                           
 11905                           ;main.c: 456: if(ALAF == 'A'){
 11906  042A  3041               	movlw	65
 11907  042B  0020               	movlb	0	; select bank0
 11908  042C  0667               	xorwf	_ALAF,w
 11909  042D  1D03               	btfss	3,2
 11910  042E  2C30               	goto	u6851
 11911  042F  2C31               	goto	u6850
 11912  0430                     u6851:
 11913  0430  2C9D               	goto	l6364
 11914  0431                     u6850:
 11915  0431                     l6332:
 11916                           
 11917                           ;main.c: 457: if(clkAlarm.trigger || tempAlarm.trigger || lumAlarm.trigger){
 11918  0431  0858               	movf	_clkAlarm+3,w
 11919  0432  1D03               	btfss	3,2
 11920  0433  2C35               	goto	u6861
 11921  0434  2C36               	goto	u6860
 11922  0435                     u6861:
 11923  0435  2C41               	goto	l6338
 11924  0436                     u6860:
 11925  0436                     l6334:
 11926  0436  0021               	movlb	1	; select bank1
 11927  0437  084A               	movf	(_tempAlarm^(0+128)+1),w
 11928  0438  1D03               	btfss	3,2
 11929  0439  2C3B               	goto	u6871
 11930  043A  2C3C               	goto	u6870
 11931  043B                     u6871:
 11932  043B  2C41               	goto	l6338
 11933  043C                     u6870:
 11934  043C                     l6336:
 11935  043C  0847               	movf	(_lumAlarm^(0+128)+1),w
 11936  043D  1903               	btfsc	3,2
 11937  043E  2C40               	goto	u6881
 11938  043F  2C41               	goto	u6880
 11939  0440                     u6881:
 11940  0440  2C97               	goto	l1291
 11941  0441                     u6880:
 11942  0441                     l6338:
 11943                           
 11944                           ;main.c: 458: if(alarmPWMStart.h == 0xff){
 11945  0441  0021               	movlb	1	; select bank1
 11946  0442  0A63               	incf	_alarmPWMStart^(0+128),w
 11947  0443  1D03               	btfss	3,2
 11948  0444  2C46               	goto	u6891
 11949  0445  2C47               	goto	u6890
 11950  0446                     u6891:
 11951  0446  2C59               	goto	l1294
 11952  0447                     u6890:
 11953  0447                     l6340:
 11954                           
 11955                           ;main.c: 459: alarmPWMStart.h = t.h;
 11956  0447  0020               	movlb	0	; select bank0
 11957  0448  0859               	movf	_t,w
 11958  0449  00BB               	movwf	??_update_menuLCD
 11959  044A  083B               	movf	??_update_menuLCD,w
 11960  044B  0021               	movlb	1	; select bank1
 11961  044C  00E3               	movwf	_alarmPWMStart^(0+128)
 11962                           
 11963                           ;main.c: 460: alarmPWMStart.m = t.m;
 11964  044D  0020               	movlb	0	; select bank0
 11965  044E  085A               	movf	_t+1,w
 11966  044F  00BB               	movwf	??_update_menuLCD
 11967  0450  083B               	movf	??_update_menuLCD,w
 11968  0451  0021               	movlb	1	; select bank1
 11969  0452  00E4               	movwf	(_alarmPWMStart^(0+128)+1)
 11970                           
 11971                           ;main.c: 461: alarmPWMStart.s = t.s;
 11972  0453  0020               	movlb	0	; select bank0
 11973  0454  085B               	movf	_t+2,w
 11974  0455  00BB               	movwf	??_update_menuLCD
 11975  0456  083B               	movf	??_update_menuLCD,w
 11976  0457  0021               	movlb	1	; select bank1
 11977  0458  00E5               	movwf	(_alarmPWMStart^(0+128)+2)
 11978  0459                     l1294:
 11979                           
 11980                           ;main.c: 462: };main.c: 463: struct Time diff = {0,0,0};
 11981  0459  0843               	movf	update_menuLCD@F12902^(0+128),w
 11982  045A  0020               	movlb	0	; select bank0
 11983  045B  00D0               	movwf	update_menuLCD@diff
 11984  045C  0021               	movlb	1	; select bank1
 11985  045D  0844               	movf	(update_menuLCD@F12902+1)^(0+128),w
 11986  045E  0020               	movlb	0	; select bank0
 11987  045F  00D1               	movwf	update_menuLCD@diff+1
 11988  0460  0021               	movlb	1	; select bank1
 11989  0461  0845               	movf	(update_menuLCD@F12902+2)^(0+128),w
 11990  0462  0020               	movlb	0	; select bank0
 11991  0463  00D2               	movwf	update_menuLCD@diff+2
 11992  0464                     l6342:
 11993                           
 11994                           ;main.c: 464: differenceBetweenTimePeriod( t, alarmPWMStart, &diff);
 11995  0464  0859               	movf	_t,w
 11996  0465  00F2               	movwf	differenceBetweenTimePeriod@start
 11997  0466  085A               	movf	_t+1,w
 11998  0467  00F3               	movwf	differenceBetweenTimePeriod@start+1
 11999  0468  085B               	movf	_t+2,w
 12000  0469  00F4               	movwf	differenceBetweenTimePeriod@start+2
 12001  046A  0021               	movlb	1	; select bank1
 12002  046B  0863               	movf	_alarmPWMStart^(0+128),w
 12003  046C  00F5               	movwf	differenceBetweenTimePeriod@stop
 12004  046D  0864               	movf	(_alarmPWMStart+1)^(0+128),w
 12005  046E  00F6               	movwf	differenceBetweenTimePeriod@stop+1
 12006  046F  0865               	movf	(_alarmPWMStart+2)^(0+128),w
 12007  0470  00F7               	movwf	differenceBetweenTimePeriod@stop+2
 12008  0471  3050               	movlw	(low (update_menuLCD@diff| 0))& (0+255)
 12009  0472  0020               	movlb	0	; select bank0
 12010  0473  00BB               	movwf	??_update_menuLCD
 12011  0474  083B               	movf	??_update_menuLCD,w
 12012  0475  00F8               	movwf	differenceBetweenTimePeriod@diff
 12013  0476  3196  2634  3183   	fcall	_differenceBetweenTimePeriod
 12014  0479                     l6344:
 12015                           
 12016                           ;main.c: 466: if(diff.s <= TALA){
 12017  0479  0020               	movlb	0	; select bank0
 12018  047A  0852               	movf	update_menuLCD@diff+2,w
 12019  047B  026D               	subwf	_TALA,w
 12020  047C  1C03               	skipc
 12021  047D  2C7F               	goto	u6901
 12022  047E  2C80               	goto	u6900
 12023  047F                     u6901:
 12024  047F  2C83               	goto	l1297
 12025  0480                     u6900:
 12026  0480                     l6346:
 12027                           
 12028                           ;main.c: 467: PWM_on = 1;
 12029  0480  01E2               	clrf	_PWM_on
 12030  0481  0AE2               	incf	_PWM_on,f
 12031                           
 12032                           ;main.c: 478: } else if(PWM6EN==1){
 12033  0482  2C9D               	goto	l6364
 12034  0483                     l1297:
 12035  0483  0027               	movlb	7	; select bank7
 12036  0484  1F8E               	btfss	14,7	;volatile
 12037  0485  2C87               	goto	u6911
 12038  0486  2C88               	goto	u6910
 12039  0487                     u6911:
 12040  0487  2C9D               	goto	l1300
 12041  0488                     u6910:
 12042  0488                     l6348:
 12043                           
 12044                           ;main.c: 479: PWM_on = 0;
 12045  0488  0020               	movlb	0	; select bank0
 12046  0489  01E2               	clrf	_PWM_on
 12047  048A                     l6350:
 12048                           
 12049                           ;main.c: 480: PWM6_LoadDutyValue(0);
 12050  048A  3000               	movlw	0
 12051  048B  00F2               	movwf	PWM6_LoadDutyValue@dutyValue
 12052  048C  00F3               	movwf	PWM6_LoadDutyValue@dutyValue+1
 12053  048D  3192  22DD  3183   	fcall	_PWM6_LoadDutyValue
 12054  0490                     l6352:
 12055                           
 12056                           ;main.c: 481: TMR2_StopTimer();
 12057  0490  3191  21FE  3183   	fcall	_TMR2_StopTimer
 12058  0493                     l6354:
 12059                           
 12060                           ;main.c: 482: PWM_Output_D4_Disable();
 12061  0493  3191  21F4  3183   	fcall	_PWM_Output_D4_Disable
 12062  0496  2C9D               	goto	l6364
 12063  0497                     l1291:
 12064  0497  0027               	movlb	7	; select bank7
 12065  0498  1F8E               	btfss	14,7	;volatile
 12066  0499  2C9B               	goto	u6921
 12067  049A  2C9C               	goto	u6920
 12068  049B                     u6921:
 12069  049B  2C9D               	goto	l6364
 12070  049C                     u6920:
 12071  049C  2C88               	goto	l6348
 12072  049D                     l1300:
 12073  049D                     l6364:
 12074                           
 12075                           ;main.c: 489: };main.c: 490: };main.c: 492: LCDcmd(0xc0);
 12076  049D  30C0               	movlw	192
 12077  049E  3192  223E  3183   	fcall	_LCDcmd
 12078  04A1                     l6366:
 12079                           
 12080                           ;main.c: 493: char tt[4];;main.c: 494: if(editingTempAlarm){
 12081  04A1  0020               	movlb	0	; select bank0
 12082  04A2  0864               	movf	_editingTempAlarm,w
 12083  04A3  1903               	btfsc	3,2
 12084  04A4  2CA6               	goto	u6931
 12085  04A5  2CA7               	goto	u6930
 12086  04A6                     u6931:
 12087  04A6  2CB9               	goto	l6370
 12088  04A7                     u6930:
 12089  04A7                     l6368:
 12090                           
 12091                           ;main.c: 495: sprintf(tt, "%02d C", tempAlarm.alarmTemp);
 12092  04A7  3040               	movlw	low (STR_3| (0+32768))
 12093  04A8  00A6               	movwf	sprintf@f
 12094  04A9  3098               	movlw	high (STR_3| (0+32768))
 12095  04AA  00A7               	movwf	sprintf@f+1
 12096  04AB  0021               	movlb	1	; select bank1
 12097  04AC  0849               	movf	_tempAlarm^(0+128),w
 12098  04AD  0020               	movlb	0	; select bank0
 12099  04AE  00BB               	movwf	??_update_menuLCD
 12100  04AF  01BC               	clrf	??_update_menuLCD+1
 12101  04B0  083B               	movf	??_update_menuLCD,w
 12102  04B1  00A8               	movwf	?_sprintf+2
 12103  04B2  083C               	movf	??_update_menuLCD+1,w
 12104  04B3  00A9               	movwf	?_sprintf+3
 12105  04B4  3049               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12106  04B5  3185  2584  3183   	fcall	_sprintf
 12107                           
 12108                           ;main.c: 496: } else{
 12109  04B8  2CC8               	goto	l6372
 12110  04B9                     l6370:
 12111                           
 12112                           ;main.c: 497: sprintf(tt, "%02d C", temp);
 12113  04B9  3040               	movlw	low (STR_3| (0+32768))
 12114  04BA  00A6               	movwf	sprintf@f
 12115  04BB  3098               	movlw	high (STR_3| (0+32768))
 12116  04BC  00A7               	movwf	sprintf@f+1
 12117  04BD  0866               	movf	_temp,w
 12118  04BE  00BB               	movwf	??_update_menuLCD
 12119  04BF  01BC               	clrf	??_update_menuLCD+1
 12120  04C0  083B               	movf	??_update_menuLCD,w
 12121  04C1  00A8               	movwf	?_sprintf+2
 12122  04C2  083C               	movf	??_update_menuLCD+1,w
 12123  04C3  00A9               	movwf	?_sprintf+3
 12124  04C4  3049               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12125  04C5  3185  2584  3183   	fcall	_sprintf
 12126  04C8                     l6372:
 12127                           
 12128                           ;main.c: 498: };main.c: 499: LCDstr(tt);
 12129  04C8  3049               	movlw	low update_menuLCD@tt
 12130  04C9  0020               	movlb	0	; select bank0
 12131  04CA  00A1               	movwf	LCDstr@p
 12132  04CB  3000               	movlw	high update_menuLCD@tt
 12133  04CC  00A2               	movwf	LCDstr@p+1
 12134  04CD  3193  2387  3183   	fcall	_LCDstr
 12135  04D0                     l6374:
 12136                           
 12137                           ;main.c: 501: LCDcmd(0xcd);
 12138  04D0  30CD               	movlw	205
 12139  04D1  3192  223E  3183   	fcall	_LCDcmd
 12140  04D4                     l6376:
 12141                           
 12142                           ;main.c: 502: char l[3];;main.c: 504: if(editingLumAlarm){
 12143  04D4  0020               	movlb	0	; select bank0
 12144  04D5  0863               	movf	_editingLumAlarm,w
 12145  04D6  1903               	btfsc	3,2
 12146  04D7  2CD9               	goto	u6941
 12147  04D8  2CDA               	goto	u6940
 12148  04D9                     u6941:
 12149  04D9  2CEC               	goto	l6380
 12150  04DA                     u6940:
 12151  04DA                     l6378:
 12152                           
 12153                           ;main.c: 505: sprintf(l, "L %d", lumAlarm.alarmLum);
 12154  04DA  3047               	movlw	low (STR_5| (0+32768))
 12155  04DB  00A6               	movwf	sprintf@f
 12156  04DC  3098               	movlw	high (STR_5| (0+32768))
 12157  04DD  00A7               	movwf	sprintf@f+1
 12158  04DE  0021               	movlb	1	; select bank1
 12159  04DF  0846               	movf	_lumAlarm^(0+128),w
 12160  04E0  0020               	movlb	0	; select bank0
 12161  04E1  00BB               	movwf	??_update_menuLCD
 12162  04E2  01BC               	clrf	??_update_menuLCD+1
 12163  04E3  083B               	movf	??_update_menuLCD,w
 12164  04E4  00A8               	movwf	?_sprintf+2
 12165  04E5  083C               	movf	??_update_menuLCD+1,w
 12166  04E6  00A9               	movwf	?_sprintf+3
 12167  04E7  304D               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12168  04E8  3185  2584  3183   	fcall	_sprintf
 12169                           
 12170                           ;main.c: 506: } else{
 12171  04EB  2CFB               	goto	l6382
 12172  04EC                     l6380:
 12173                           
 12174                           ;main.c: 507: sprintf(l, "L %d", lumLevel);
 12175  04EC  3047               	movlw	low (STR_5| (0+32768))
 12176  04ED  00A6               	movwf	sprintf@f
 12177  04EE  3098               	movlw	high (STR_5| (0+32768))
 12178  04EF  00A7               	movwf	sprintf@f+1
 12179  04F0  0865               	movf	_lumLevel,w
 12180  04F1  00BB               	movwf	??_update_menuLCD
 12181  04F2  01BC               	clrf	??_update_menuLCD+1
 12182  04F3  083B               	movf	??_update_menuLCD,w
 12183  04F4  00A8               	movwf	?_sprintf+2
 12184  04F5  083C               	movf	??_update_menuLCD+1,w
 12185  04F6  00A9               	movwf	?_sprintf+3
 12186  04F7  304D               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12187  04F8  3185  2584  3183   	fcall	_sprintf
 12188  04FB                     l6382:
 12189                           
 12190                           ;main.c: 508: };main.c: 509: LCDstr(l);
 12191  04FB  304D               	movlw	low update_menuLCD@l
 12192  04FC  0020               	movlb	0	; select bank0
 12193  04FD  00A1               	movwf	LCDstr@p
 12194  04FE  3000               	movlw	high update_menuLCD@l
 12195  04FF  00A2               	movwf	LCDstr@p+1
 12196  0500  3193  2387  3183   	fcall	_LCDstr
 12197  0503                     l6384:
 12198                           
 12199                           ;main.c: 511: if(modeFlag != 0){
 12200  0503  0020               	movlb	0	; select bank0
 12201  0504  085C               	movf	_modeFlag,w
 12202  0505  045D               	iorwf	_modeFlag+1,w
 12203  0506  1903               	btfsc	3,2
 12204  0507  2D09               	goto	u6951
 12205  0508  2D0A               	goto	u6950
 12206  0509                     u6951:
 12207  0509  2D16               	goto	l6390
 12208  050A                     u6950:
 12209  050A                     l6386:
 12210                           
 12211                           ;main.c: 512: LCDcmd(0x8B);
 12212  050A  308B               	movlw	139
 12213  050B  3192  223E  3183   	fcall	_LCDcmd
 12214  050E                     l6388:
 12215                           
 12216                           ;main.c: 513: LCDstr((unsigned char *)"CTL");
 12217  050E  304C               	movlw	low (STR_7| (0+32768))
 12218  050F  0020               	movlb	0	; select bank0
 12219  0510  00A1               	movwf	LCDstr@p
 12220  0511  3098               	movlw	high (STR_7| (0+32768))
 12221  0512  00A2               	movwf	LCDstr@p+1
 12222  0513  3193  2387  3183   	fcall	_LCDstr
 12223  0516                     l6390:
 12224                           
 12225                           ;main.c: 514: };main.c: 516: if(modeFlag == 1){
 12226  0516  0020               	movlb	0	; select bank0
 12227  0517  035C               	decf	_modeFlag,w
 12228  0518  045D               	iorwf	_modeFlag+1,w
 12229  0519  1D03               	btfss	3,2
 12230  051A  2D1C               	goto	u6961
 12231  051B  2D1D               	goto	u6960
 12232  051C                     u6961:
 12233  051C  2D4C               	goto	l6408
 12234  051D                     u6960:
 12235  051D                     l6392:
 12236                           
 12237                           ;main.c: 517: if(editingClockAlarm == 0){
 12238  051D  085E               	movf	_editingClockAlarm,w
 12239  051E  045F               	iorwf	_editingClockAlarm+1,w
 12240  051F  1D03               	btfss	3,2
 12241  0520  2D22               	goto	u6971
 12242  0521  2D23               	goto	u6970
 12243  0522                     u6971:
 12244  0522  2D28               	goto	l6396
 12245  0523                     u6970:
 12246  0523                     l6394:
 12247                           
 12248                           ;main.c: 518: LCDcmd(0x8B);
 12249  0523  308B               	movlw	139
 12250  0524  3192  223E  3183   	fcall	_LCDcmd
 12251                           
 12252                           ;main.c: 519: } else{
 12253  0527  2D83               	goto	l1325
 12254  0528                     l6396:
 12255                           
 12256                           ;main.c: 520: if(editingClockAlarm == 1){
 12257  0528  035E               	decf	_editingClockAlarm,w
 12258  0529  045F               	iorwf	_editingClockAlarm+1,w
 12259  052A  1D03               	btfss	3,2
 12260  052B  2D2D               	goto	u6981
 12261  052C  2D2E               	goto	u6980
 12262  052D                     u6981:
 12263  052D  2D33               	goto	l6400
 12264  052E                     u6980:
 12265  052E                     l6398:
 12266                           
 12267                           ;main.c: 521: LCDcmd(0x81);
 12268  052E  3081               	movlw	129
 12269  052F  3192  223E  3183   	fcall	_LCDcmd
 12270                           
 12271                           ;main.c: 522: } else if(editingClockAlarm == 2){
 12272  0532  2D83               	goto	l1325
 12273  0533                     l6400:
 12274  0533  3002               	movlw	2
 12275  0534  065E               	xorwf	_editingClockAlarm,w
 12276  0535  045F               	iorwf	_editingClockAlarm+1,w
 12277  0536  1D03               	btfss	3,2
 12278  0537  2D39               	goto	u6991
 12279  0538  2D3A               	goto	u6990
 12280  0539                     u6991:
 12281  0539  2D3F               	goto	l6404
 12282  053A                     u6990:
 12283  053A                     l6402:
 12284                           
 12285                           ;main.c: 523: LCDcmd(0x84);
 12286  053A  3084               	movlw	132
 12287  053B  3192  223E  3183   	fcall	_LCDcmd
 12288                           
 12289                           ;main.c: 524: } else if(editingClockAlarm == 3){
 12290  053E  2D83               	goto	l1325
 12291  053F                     l6404:
 12292  053F  3003               	movlw	3
 12293  0540  065E               	xorwf	_editingClockAlarm,w
 12294  0541  045F               	iorwf	_editingClockAlarm+1,w
 12295  0542  1D03               	btfss	3,2
 12296  0543  2D45               	goto	u7001
 12297  0544  2D46               	goto	u7000
 12298  0545                     u7001:
 12299  0545  2D4B               	goto	l1309
 12300  0546                     u7000:
 12301  0546                     l6406:
 12302                           
 12303                           ;main.c: 525: LCDcmd(0x87);
 12304  0546  3087               	movlw	135
 12305  0547  3192  223E  3183   	fcall	_LCDcmd
 12306  054A  2D83               	goto	l1325
 12307  054B                     l1309:
 12308                           
 12309                           ;main.c: 526: };main.c: 527: };main.c: 528: } else if(modeFlag == 2){
 12310  054B  2D83               	goto	l1325
 12311  054C                     l6408:
 12312  054C  3002               	movlw	2
 12313  054D  065C               	xorwf	_modeFlag,w
 12314  054E  045D               	iorwf	_modeFlag+1,w
 12315  054F  1D03               	btfss	3,2
 12316  0550  2D52               	goto	u7011
 12317  0551  2D53               	goto	u7010
 12318  0552                     u7011:
 12319  0552  2D62               	goto	l6416
 12320  0553                     u7010:
 12321  0553                     l6410:
 12322                           
 12323                           ;main.c: 530: if(editingTempAlarm == 0){
 12324  0553  0864               	movf	_editingTempAlarm,w
 12325  0554  1D03               	btfss	3,2
 12326  0555  2D57               	goto	u7021
 12327  0556  2D58               	goto	u7020
 12328  0557                     u7021:
 12329  0557  2D5D               	goto	l6414
 12330  0558                     u7020:
 12331  0558                     l6412:
 12332                           
 12333                           ;main.c: 531: LCDcmd(0x8c);
 12334  0558  308C               	movlw	140
 12335  0559  3192  223E  3183   	fcall	_LCDcmd
 12336                           
 12337                           ;main.c: 532: }else {
 12338  055C  2D83               	goto	l1325
 12339  055D                     l6414:
 12340                           
 12341                           ;main.c: 533: LCDcmd(0xc1);
 12342  055D  30C1               	movlw	193
 12343  055E  3192  223E  3183   	fcall	_LCDcmd
 12344  0561  2D83               	goto	l1325
 12345  0562                     l6416:
 12346  0562  3003               	movlw	3
 12347  0563  065C               	xorwf	_modeFlag,w
 12348  0564  045D               	iorwf	_modeFlag+1,w
 12349  0565  1D03               	btfss	3,2
 12350  0566  2D68               	goto	u7031
 12351  0567  2D69               	goto	u7030
 12352  0568                     u7031:
 12353  0568  2D78               	goto	l6424
 12354  0569                     u7030:
 12355  0569                     l6418:
 12356                           
 12357                           ;main.c: 538: if(editingLumAlarm == 0){
 12358  0569  0863               	movf	_editingLumAlarm,w
 12359  056A  1D03               	btfss	3,2
 12360  056B  2D6D               	goto	u7041
 12361  056C  2D6E               	goto	u7040
 12362  056D                     u7041:
 12363  056D  2D73               	goto	l6422
 12364  056E                     u7040:
 12365  056E                     l6420:
 12366                           
 12367                           ;main.c: 539: LCDcmd(0x8d);
 12368  056E  308D               	movlw	141
 12369  056F  3192  223E  3183   	fcall	_LCDcmd
 12370                           
 12371                           ;main.c: 540: }else {
 12372  0572  2D83               	goto	l1325
 12373  0573                     l6422:
 12374                           
 12375                           ;main.c: 541: LCDcmd(0xcf);
 12376  0573  30CF               	movlw	207
 12377  0574  3192  223E  3183   	fcall	_LCDcmd
 12378  0577  2D83               	goto	l1325
 12379  0578                     l6424:
 12380  0578  3004               	movlw	4
 12381  0579  065C               	xorwf	_modeFlag,w
 12382  057A  045D               	iorwf	_modeFlag+1,w
 12383  057B  1D03               	btfss	3,2
 12384  057C  2D7E               	goto	u7051
 12385  057D  2D7F               	goto	u7050
 12386  057E                     u7051:
 12387  057E  2D83               	goto	l1325
 12388  057F                     u7050:
 12389  057F                     l6426:
 12390                           
 12391                           ;main.c: 545: LCDcmd(0x8f);
 12392  057F  308F               	movlw	143
 12393  0580  3192  223E  3183   	fcall	_LCDcmd
 12394  0583                     l1325:
 12395  0583  0008               	return
 12396  0584                     __end_of_update_menuLCD:
 12397                           
 12398                           	psect	text12
 12399  0584                     __ptext12:	
 12400 ;; *************** function _sprintf *****************
 12401 ;; Defined at:
 12402 ;;		line 505 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;  sp              1    wreg     PTR unsigned char 
 12405 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12406 ;;  f               2    6[BANK0 ] PTR const unsigned char 
 12407 ;;		 -> STR_6(5), STR_5(5), STR_4(7), STR_3(7), 
 12408 ;;		 -> STR_2(15), STR_1(15), 
 12409 ;; Auto vars:     Size  Location     Type
 12410 ;;  sp              1   26[BANK0 ] PTR unsigned char 
 12411 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12412 ;;  tmpval          4    0        struct .
 12413 ;;  width           2   23[BANK0 ] int 
 12414 ;;  val             2   20[BANK0 ] unsigned int 
 12415 ;;  cp              2    0        PTR const unsigned char 
 12416 ;;  len             2    0        unsigned int 
 12417 ;;  c               1   25[BANK0 ] unsigned char 
 12418 ;;  flag            1   22[BANK0 ] unsigned char 
 12419 ;;  prec            1   19[BANK0 ] char 
 12420 ;;  ap              1   18[BANK0 ] PTR void [1]
 12421 ;;		 -> ?_sprintf(2), 
 12422 ;; Return value:  Size  Location     Type
 12423 ;;                  2    6[BANK0 ] int 
 12424 ;; Registers used:
 12425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12426 ;; Tracked objects:
 12427 ;;		On entry : 0/0
 12428 ;;		On exit  : 0/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12431 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;Total ram usage:       21 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:    5
 12438 ;; This function calls:
 12439 ;;		___lwdiv
 12440 ;;		___lwmod
 12441 ;;		___wmul
 12442 ;;		_isdigit
 12443 ;; This function is called by:
 12444 ;;		_update_menuLCD
 12445 ;; This function uses a non-reentrant model
 12446 ;;
 12447                           
 12448                           
 12449                           ;psect for function _sprintf
 12450  0584                     _sprintf:
 12451                           
 12452                           ;incstack = 0
 12453                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12454                           ;sprintf@sp stored from wreg
 12455  0584  0020               	movlb	0	; select bank0
 12456  0585  00BA               	movwf	sprintf@sp
 12457  0586                     l6184:
 12458                           
 12459                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
 12460  0586  3028               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 12461  0587  00AE               	movwf	??_sprintf
 12462  0588  082E               	movf	??_sprintf,w
 12463  0589  00B2               	movwf	sprintf@ap
 12464                           
 12465                           ;doprnt.c: 553: while((c = *f++)) {
 12466  058A  2F09               	goto	l6288
 12467  058B                     l6186:
 12468                           
 12469                           ;doprnt.c: 555: if(c != '%')
 12470  058B  3025               	movlw	37
 12471  058C  0639               	xorwf	sprintf@c,w
 12472  058D  1903               	btfsc	3,2
 12473  058E  2D90               	goto	u6601
 12474  058F  2D91               	goto	u6600
 12475  0590                     u6601:
 12476  0590  2D9D               	goto	l6192
 12477  0591                     u6600:
 12478  0591                     l6188:
 12479                           
 12480                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
 12481  0591  0839               	movf	sprintf@c,w
 12482  0592  00AE               	movwf	??_sprintf
 12483  0593  083A               	movf	sprintf@sp,w
 12484  0594  0086               	movwf	6
 12485  0595  0187               	clrf	7
 12486  0596  082E               	movf	??_sprintf,w
 12487  0597  0081               	movwf	1
 12488  0598                     l6190:
 12489  0598  3001               	movlw	1
 12490  0599  00AE               	movwf	??_sprintf
 12491  059A  082E               	movf	??_sprintf,w
 12492  059B  07BA               	addwf	sprintf@sp,f
 12493                           
 12494                           ;doprnt.c: 559: continue;
 12495  059C  2F09               	goto	l6288
 12496  059D                     l6192:
 12497                           
 12498                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
 12499  059D  01B7               	clrf	sprintf@width
 12500  059E  01B8               	clrf	sprintf@width+1
 12501                           
 12502                           ;doprnt.c: 565: flag = 0;
 12503  059F  01B6               	clrf	sprintf@flag
 12504  05A0  2DA6               	goto	l6198
 12505  05A1                     l1728:	
 12506                           ;doprnt.c: 596: case '0':
 12507                           
 12508                           
 12509                           ;doprnt.c: 597: flag |= 0x04;
 12510  05A1  1536               	bsf	sprintf@flag,2
 12511  05A2                     l6194:
 12512                           
 12513                           ;doprnt.c: 598: f++;
 12514  05A2  3001               	movlw	1
 12515  05A3  07A6               	addwf	sprintf@f,f
 12516  05A4  3000               	movlw	0
 12517  05A5  3DA7               	addwfc	sprintf@f+1,f
 12518  05A6                     l6198:	
 12519                           ;doprnt.c: 599: continue;
 12520                           
 12521  05A6  0826               	movf	sprintf@f,w
 12522  05A7  0084               	movwf	4
 12523  05A8  0827               	movf	sprintf@f+1,w
 12524  05A9  0085               	movwf	5
 12525  05AA  0800               	movf	0,w	;code access
 12526                           
 12527                           ; Switch size 1, requested type "simple"
 12528                           ; Number of cases is 1, Range of values is 48 to 48
 12529                           ; switch strategies available:
 12530                           ; Name         Instructions Cycles
 12531                           ; simple_byte            4     3 (average)
 12532                           ; direct_byte           11     9 (fixed)
 12533                           ; jumptable            263     9 (fixed)
 12534                           ;	Chosen strategy is simple_byte
 12535  05AB  3A30               	xorlw	48	; case 48
 12536  05AC  1903               	skipnz
 12537  05AD  2DA1               	goto	l1728
 12538  05AE  2DAF               	goto	l6200
 12539  05AF                     l6200:
 12540                           
 12541                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
 12542  05AF  0826               	movf	sprintf@f,w
 12543  05B0  0084               	movwf	4
 12544  05B1  0827               	movf	sprintf@f+1,w
 12545  05B2  0085               	movwf	5
 12546  05B3  0800               	movf	0,w	;code access
 12547  05B4  3192  22CB  3185   	fcall	_isdigit
 12548  05B7  1C03               	btfss	3,0
 12549  05B8  2DBA               	goto	u6611
 12550  05B9  2DBB               	goto	u6610
 12551  05BA                     u6611:
 12552  05BA  2DEE               	goto	l6214
 12553  05BB                     u6610:
 12554  05BB                     l6202:
 12555                           
 12556                           ;doprnt.c: 615: width = 0;
 12557  05BB  0020               	movlb	0	; select bank0
 12558  05BC  01B7               	clrf	sprintf@width
 12559  05BD  01B8               	clrf	sprintf@width+1
 12560  05BE                     l6204:
 12561                           
 12562                           ;doprnt.c: 617: width *= 10;
 12563  05BE  300A               	movlw	10
 12564  05BF  00F2               	movwf	___wmul@multiplier
 12565  05C0  3000               	movlw	0
 12566  05C1  00F3               	movwf	___wmul@multiplier+1
 12567  05C2  0020               	movlb	0	; select bank0
 12568  05C3  0838               	movf	sprintf@width+1,w
 12569  05C4  00F5               	movwf	___wmul@multiplicand+1
 12570  05C5  0837               	movf	sprintf@width,w
 12571  05C6  00F4               	movwf	___wmul@multiplicand
 12572  05C7  3194  2418  3185   	fcall	___wmul
 12573  05CA  0873               	movf	?___wmul+1,w
 12574  05CB  0020               	movlb	0	; select bank0
 12575  05CC  00B8               	movwf	sprintf@width+1
 12576  05CD  0872               	movf	?___wmul,w
 12577  05CE  00B7               	movwf	sprintf@width
 12578  05CF                     l6206:
 12579                           
 12580                           ;doprnt.c: 618: width += *f++ - '0';
 12581  05CF  0826               	movf	sprintf@f,w
 12582  05D0  0084               	movwf	4
 12583  05D1  0827               	movf	sprintf@f+1,w
 12584  05D2  0085               	movwf	5
 12585  05D3  0800               	movf	0,w	;code access
 12586  05D4  3ED0               	addlw	208
 12587  05D5  00AE               	movwf	??_sprintf
 12588  05D6  30FF               	movlw	255
 12589  05D7  1803               	skipnc
 12590  05D8  3000               	movlw	0
 12591  05D9  00AF               	movwf	??_sprintf+1
 12592  05DA  082E               	movf	??_sprintf,w
 12593  05DB  07B7               	addwf	sprintf@width,f
 12594  05DC  082F               	movf	??_sprintf+1,w
 12595  05DD  3DB8               	addwfc	sprintf@width+1,f
 12596  05DE                     l6208:
 12597  05DE  3001               	movlw	1
 12598  05DF  07A6               	addwf	sprintf@f,f
 12599  05E0  3000               	movlw	0
 12600  05E1  3DA7               	addwfc	sprintf@f+1,f
 12601  05E2                     l6210:
 12602                           
 12603                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
 12604  05E2  0826               	movf	sprintf@f,w
 12605  05E3  0084               	movwf	4
 12606  05E4  0827               	movf	sprintf@f+1,w
 12607  05E5  0085               	movwf	5
 12608  05E6  0800               	movf	0,w	;code access
 12609  05E7  3192  22CB  3185   	fcall	_isdigit
 12610  05EA  1803               	btfsc	3,0
 12611  05EB  2DED               	goto	u6621
 12612  05EC  2DEE               	goto	u6620
 12613  05ED                     u6621:
 12614  05ED  2DBE               	goto	l6204
 12615  05EE                     u6620:
 12616  05EE                     l6214:
 12617  05EE  0020               	movlb	0	; select bank0
 12618  05EF  0827               	movf	sprintf@f+1,w
 12619  05F0  00AF               	movwf	??_sprintf+1
 12620  05F1  0826               	movf	sprintf@f,w
 12621  05F2  00AE               	movwf	??_sprintf
 12622  05F3  0AA6               	incf	sprintf@f,f
 12623  05F4  1903               	skipnz
 12624  05F5  0AA7               	incf	sprintf@f+1,f
 12625  05F6  082E               	movf	??_sprintf,w
 12626  05F7  0084               	movwf	4
 12627  05F8  082F               	movf	??_sprintf+1,w
 12628  05F9  0085               	movwf	5
 12629  05FA  0800               	movf	0,w	;code access
 12630  05FB  00B9               	movwf	sprintf@c
 12631                           
 12632                           ; Switch size 1, requested type "simple"
 12633                           ; Number of cases is 3, Range of values is 0 to 105
 12634                           ; switch strategies available:
 12635                           ; Name         Instructions Cycles
 12636                           ; simple_byte           10     6 (average)
 12637                           ; direct_byte          218     6 (fixed)
 12638                           ; jumptable            260     6 (fixed)
 12639                           ;	Chosen strategy is simple_byte
 12640  05FC  3A00               	xorlw	0	; case 0
 12641  05FD  1903               	skipnz
 12642  05FE  2F1D               	goto	l6290
 12643  05FF  3A64               	xorlw	100	; case 100
 12644  0600  1903               	skipnz
 12645  0601  2E06               	goto	l6216
 12646  0602  3A0D               	xorlw	13	; case 105
 12647  0603  1903               	skipnz
 12648  0604  2E06               	goto	l6216
 12649  0605  2F09               	goto	l6288
 12650  0606                     l6216:
 12651                           
 12652                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
 12653  0606  0832               	movf	sprintf@ap,w
 12654  0607  0086               	movwf	6
 12655  0608  0187               	clrf	7
 12656  0609  3F40               	moviw [0]fsr1
 12657  060A  00B4               	movwf	sprintf@val
 12658  060B  3F41               	moviw [1]fsr1
 12659  060C  00B5               	movwf	sprintf@val+1
 12660  060D                     l6218:
 12661  060D  3002               	movlw	2
 12662  060E  00AE               	movwf	??_sprintf
 12663  060F  082E               	movf	??_sprintf,w
 12664  0610  07B2               	addwf	sprintf@ap,f
 12665  0611                     l6220:
 12666                           
 12667                           ;doprnt.c: 1287: if((int)val < 0) {
 12668  0611  1FB5               	btfss	sprintf@val+1,7
 12669  0612  2E14               	goto	u6631
 12670  0613  2E15               	goto	u6630
 12671  0614                     u6631:
 12672  0614  2E1E               	goto	l6226
 12673  0615                     u6630:
 12674  0615                     l6222:
 12675                           
 12676                           ;doprnt.c: 1288: flag |= 0x03;
 12677  0615  3003               	movlw	3
 12678  0616  00AE               	movwf	??_sprintf
 12679  0617  082E               	movf	??_sprintf,w
 12680  0618  04B6               	iorwf	sprintf@flag,f
 12681  0619                     l6224:
 12682                           
 12683                           ;doprnt.c: 1289: val = -val;
 12684  0619  09B4               	comf	sprintf@val,f
 12685  061A  09B5               	comf	sprintf@val+1,f
 12686  061B  0AB4               	incf	sprintf@val,f
 12687  061C  1903               	skipnz
 12688  061D  0AB5               	incf	sprintf@val+1,f
 12689  061E                     l6226:
 12690                           
 12691                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
 12692  061E  01B9               	clrf	sprintf@c
 12693  061F  0AB9               	incf	sprintf@c,f
 12694  0620                     l6232:
 12695                           
 12696                           ;doprnt.c: 1332: if(val < dpowers[c])
 12697  0620  0839               	movf	sprintf@c,w
 12698  0621  00AE               	movwf	??_sprintf
 12699  0622  01AF               	clrf	??_sprintf+1
 12700  0623  35AE               	lslf	??_sprintf,f
 12701  0624  0DAF               	rlf	??_sprintf+1,f
 12702  0625  3036               	movlw	low (_dpowers| (0+32768))
 12703  0626  072E               	addwf	??_sprintf,w
 12704  0627  0084               	movwf	4
 12705  0628  3098               	movlw	high (_dpowers| (0+32768))
 12706  0629  3D2F               	addwfc	??_sprintf+1,w
 12707  062A  0085               	movwf	5
 12708  062B  3F00               	moviw [0]fsr0
 12709  062C  00B0               	movwf	??_sprintf+2
 12710  062D  3F01               	moviw [1]fsr0
 12711  062E  00B1               	movwf	??_sprintf+3
 12712  062F  0831               	movf	??_sprintf+3,w
 12713  0630  0235               	subwf	sprintf@val+1,w
 12714  0631  1D03               	skipz
 12715  0632  2E35               	goto	u6645
 12716  0633  0830               	movf	??_sprintf+2,w
 12717  0634  0234               	subwf	sprintf@val,w
 12718  0635                     u6645:
 12719  0635  1803               	skipnc
 12720  0636  2E38               	goto	u6641
 12721  0637  2E39               	goto	u6640
 12722  0638                     u6641:
 12723  0638  2E3A               	goto	l6236
 12724  0639                     u6640:
 12725  0639  2E44               	goto	l6238
 12726  063A                     l6236:
 12727  063A  3001               	movlw	1
 12728  063B  00AE               	movwf	??_sprintf
 12729  063C  082E               	movf	??_sprintf,w
 12730  063D  07B9               	addwf	sprintf@c,f
 12731  063E  3005               	movlw	5
 12732  063F  0639               	xorwf	sprintf@c,w
 12733  0640  1D03               	btfss	3,2
 12734  0641  2E43               	goto	u6651
 12735  0642  2E44               	goto	u6650
 12736  0643                     u6651:
 12737  0643  2E20               	goto	l6232
 12738  0644                     u6650:
 12739  0644                     l6238:
 12740                           
 12741                           ;doprnt.c: 1371: if(width && flag & 0x03)
 12742  0644  0837               	movf	sprintf@width,w
 12743  0645  0438               	iorwf	sprintf@width+1,w
 12744  0646  1903               	btfsc	3,2
 12745  0647  2E49               	goto	u6661
 12746  0648  2E4A               	goto	u6660
 12747  0649                     u6661:
 12748  0649  2E54               	goto	l1746
 12749  064A                     u6660:
 12750  064A                     l6240:
 12751  064A  0836               	movf	sprintf@flag,w
 12752  064B  3903               	andlw	3
 12753  064C  1903               	btfsc	3,2
 12754  064D  2E4F               	goto	u6671
 12755  064E  2E50               	goto	u6670
 12756  064F                     u6671:
 12757  064F  2E54               	goto	l1746
 12758  0650                     u6670:
 12759  0650                     l6242:
 12760                           
 12761                           ;doprnt.c: 1372: width--;
 12762  0650  30FF               	movlw	255
 12763  0651  07B7               	addwf	sprintf@width,f
 12764  0652  30FF               	movlw	255
 12765  0653  3DB8               	addwfc	sprintf@width+1,f
 12766  0654                     l1746:
 12767                           
 12768                           ;doprnt.c: 1407: if(width > c)
 12769  0654  0838               	movf	sprintf@width+1,w
 12770  0655  3A80               	xorlw	128
 12771  0656  3C80               	sublw	128
 12772  0657  1D03               	skipz
 12773  0658  2E5B               	goto	u6685
 12774  0659  0837               	movf	sprintf@width,w
 12775  065A  0239               	subwf	sprintf@c,w
 12776  065B                     u6685:
 12777  065B  1803               	skipnc
 12778  065C  2E5E               	goto	u6681
 12779  065D  2E5F               	goto	u6680
 12780  065E                     u6681:
 12781  065E  2E68               	goto	l6246
 12782  065F                     u6680:
 12783  065F                     l6244:
 12784                           
 12785                           ;doprnt.c: 1408: width -= c;
 12786  065F  0020               	movlb	0	; select bank0
 12787  0660  0839               	movf	sprintf@c,w
 12788  0661  00AE               	movwf	??_sprintf
 12789  0662  01AF               	clrf	??_sprintf+1
 12790  0663  082E               	movf	??_sprintf,w
 12791  0664  02B7               	subwf	sprintf@width,f
 12792  0665  082F               	movf	??_sprintf+1,w
 12793  0666  3BB8               	subwfb	sprintf@width+1,f
 12794  0667  2E6B               	goto	l6248
 12795  0668                     l6246:
 12796                           
 12797                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
 12798  0668  0020               	movlb	0	; select bank0
 12799  0669  01B7               	clrf	sprintf@width
 12800  066A  01B8               	clrf	sprintf@width+1
 12801  066B                     l6248:
 12802                           
 12803                           ;doprnt.c: 1413: if(flag & 0x04) {
 12804  066B  1D36               	btfss	sprintf@flag,2
 12805  066C  2E6E               	goto	u6691
 12806  066D  2E6F               	goto	u6690
 12807  066E                     u6691:
 12808  066E  2E9C               	goto	l6264
 12809  066F                     u6690:
 12810  066F                     l6250:
 12811                           
 12812                           ;doprnt.c: 1418: if(flag & 0x03)
 12813  066F  0836               	movf	sprintf@flag,w
 12814  0670  3903               	andlw	3
 12815  0671  1903               	btfsc	3,2
 12816  0672  2E74               	goto	u6701
 12817  0673  2E75               	goto	u6700
 12818  0674                     u6701:
 12819  0674  2E80               	goto	l6256
 12820  0675                     u6700:
 12821  0675                     l6252:
 12822                           
 12823                           ;doprnt.c: 1419: ((*sp++ = ('-')));
 12824  0675  302D               	movlw	45
 12825  0676  00AE               	movwf	??_sprintf
 12826  0677  083A               	movf	sprintf@sp,w
 12827  0678  0086               	movwf	6
 12828  0679  0187               	clrf	7
 12829  067A  082E               	movf	??_sprintf,w
 12830  067B  0081               	movwf	1
 12831  067C                     l6254:
 12832  067C  3001               	movlw	1
 12833  067D  00AE               	movwf	??_sprintf
 12834  067E  082E               	movf	??_sprintf,w
 12835  067F  07BA               	addwf	sprintf@sp,f
 12836  0680                     l6256:
 12837                           
 12838                           ;doprnt.c: 1441: if(width)
 12839  0680  0837               	movf	sprintf@width,w
 12840  0681  0438               	iorwf	sprintf@width+1,w
 12841  0682  1903               	btfsc	3,2
 12842  0683  2E85               	goto	u6711
 12843  0684  2E86               	goto	u6710
 12844  0685                     u6711:
 12845  0685  2EC8               	goto	l6278
 12846  0686                     u6710:
 12847  0686                     l6258:
 12848                           
 12849                           ;doprnt.c: 1443: ((*sp++ = ('0')));
 12850  0686  3030               	movlw	48
 12851  0687  00AE               	movwf	??_sprintf
 12852  0688  083A               	movf	sprintf@sp,w
 12853  0689  0086               	movwf	6
 12854  068A  0187               	clrf	7
 12855  068B  082E               	movf	??_sprintf,w
 12856  068C  0081               	movwf	1
 12857  068D                     l6260:
 12858  068D  3001               	movlw	1
 12859  068E  00AE               	movwf	??_sprintf
 12860  068F  082E               	movf	??_sprintf,w
 12861  0690  07BA               	addwf	sprintf@sp,f
 12862  0691                     l6262:
 12863                           
 12864                           ;doprnt.c: 1444: while(--width);
 12865  0691  30FF               	movlw	255
 12866  0692  07B7               	addwf	sprintf@width,f
 12867  0693  30FF               	movlw	255
 12868  0694  3DB8               	addwfc	sprintf@width+1,f
 12869  0695  0837               	movf	sprintf@width,w
 12870  0696  0438               	iorwf	sprintf@width+1,w
 12871  0697  1D03               	btfss	3,2
 12872  0698  2E9A               	goto	u6721
 12873  0699  2E9B               	goto	u6720
 12874  069A                     u6721:
 12875  069A  2E86               	goto	l6258
 12876  069B                     u6720:
 12877  069B  2EC8               	goto	l6278
 12878  069C                     l6264:
 12879                           
 12880                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
 12881  069C  0837               	movf	sprintf@width,w
 12882  069D  0438               	iorwf	sprintf@width+1,w
 12883  069E  1903               	btfsc	3,2
 12884  069F  2EA1               	goto	u6731
 12885  06A0  2EA2               	goto	u6730
 12886  06A1                     u6731:
 12887  06A1  2EB7               	goto	l6272
 12888  06A2                     u6730:
 12889  06A2                     l6266:
 12890                           
 12891                           ;doprnt.c: 1456: ((*sp++ = (' ')));
 12892  06A2  3020               	movlw	32
 12893  06A3  00AE               	movwf	??_sprintf
 12894  06A4  083A               	movf	sprintf@sp,w
 12895  06A5  0086               	movwf	6
 12896  06A6  0187               	clrf	7
 12897  06A7  082E               	movf	??_sprintf,w
 12898  06A8  0081               	movwf	1
 12899  06A9                     l6268:
 12900  06A9  3001               	movlw	1
 12901  06AA  00AE               	movwf	??_sprintf
 12902  06AB  082E               	movf	??_sprintf,w
 12903  06AC  07BA               	addwf	sprintf@sp,f
 12904  06AD                     l6270:
 12905                           
 12906                           ;doprnt.c: 1457: while(--width);
 12907  06AD  30FF               	movlw	255
 12908  06AE  07B7               	addwf	sprintf@width,f
 12909  06AF  30FF               	movlw	255
 12910  06B0  3DB8               	addwfc	sprintf@width+1,f
 12911  06B1  0837               	movf	sprintf@width,w
 12912  06B2  0438               	iorwf	sprintf@width+1,w
 12913  06B3  1D03               	btfss	3,2
 12914  06B4  2EB6               	goto	u6741
 12915  06B5  2EB7               	goto	u6740
 12916  06B6                     u6741:
 12917  06B6  2EA2               	goto	l6266
 12918  06B7                     u6740:
 12919  06B7                     l6272:
 12920                           
 12921                           ;doprnt.c: 1464: if(flag & 0x03)
 12922  06B7  0836               	movf	sprintf@flag,w
 12923  06B8  3903               	andlw	3
 12924  06B9  1903               	btfsc	3,2
 12925  06BA  2EBC               	goto	u6751
 12926  06BB  2EBD               	goto	u6750
 12927  06BC                     u6751:
 12928  06BC  2EC8               	goto	l6278
 12929  06BD                     u6750:
 12930  06BD                     l6274:
 12931                           
 12932                           ;doprnt.c: 1465: ((*sp++ = ('-')));
 12933  06BD  302D               	movlw	45
 12934  06BE  00AE               	movwf	??_sprintf
 12935  06BF  083A               	movf	sprintf@sp,w
 12936  06C0  0086               	movwf	6
 12937  06C1  0187               	clrf	7
 12938  06C2  082E               	movf	??_sprintf,w
 12939  06C3  0081               	movwf	1
 12940  06C4                     l6276:
 12941  06C4  3001               	movlw	1
 12942  06C5  00AE               	movwf	??_sprintf
 12943  06C6  082E               	movf	??_sprintf,w
 12944  06C7  07BA               	addwf	sprintf@sp,f
 12945  06C8                     l6278:
 12946                           
 12947                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
 12948  06C8  0839               	movf	sprintf@c,w
 12949  06C9  00AE               	movwf	??_sprintf
 12950  06CA  082E               	movf	??_sprintf,w
 12951  06CB  00B3               	movwf	sprintf@prec
 12952                           
 12953                           ;doprnt.c: 1500: while(prec--) {
 12954  06CC  2F00               	goto	l6286
 12955  06CD                     l6280:
 12956                           
 12957                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
 12958  06CD  300A               	movlw	10
 12959  06CE  00A0               	movwf	___lwmod@divisor
 12960  06CF  3000               	movlw	0
 12961  06D0  00A1               	movwf	___lwmod@divisor+1
 12962  06D1  0833               	movf	sprintf@prec,w
 12963  06D2  00AE               	movwf	??_sprintf
 12964  06D3  01AF               	clrf	??_sprintf+1
 12965  06D4  35AE               	lslf	??_sprintf,f
 12966  06D5  0DAF               	rlf	??_sprintf+1,f
 12967  06D6  3036               	movlw	low (_dpowers| (0+32768))
 12968  06D7  072E               	addwf	??_sprintf,w
 12969  06D8  0084               	movwf	4
 12970  06D9  3098               	movlw	high (_dpowers| (0+32768))
 12971  06DA  3D2F               	addwfc	??_sprintf+1,w
 12972  06DB  0085               	movwf	5
 12973  06DC  3F00               	moviw [0]fsr0
 12974  06DD  00F2               	movwf	___lwdiv@divisor
 12975  06DE  3F01               	moviw [1]fsr0
 12976  06DF  00F3               	movwf	___lwdiv@divisor+1
 12977  06E0  0835               	movf	sprintf@val+1,w
 12978  06E1  00F5               	movwf	___lwdiv@dividend+1
 12979  06E2  0834               	movf	sprintf@val,w
 12980  06E3  00F4               	movwf	___lwdiv@dividend
 12981  06E4  3197  2746  3185   	fcall	___lwdiv
 12982  06E7  0873               	movf	?___lwdiv+1,w
 12983  06E8  0020               	movlb	0	; select bank0
 12984  06E9  00A3               	movwf	___lwmod@dividend+1
 12985  06EA  0872               	movf	?___lwdiv,w
 12986  06EB  00A2               	movwf	___lwmod@dividend
 12987  06EC  3196  269D  3185   	fcall	___lwmod
 12988  06EF  0020               	movlb	0	; select bank0
 12989  06F0  0820               	movf	?___lwmod,w
 12990  06F1  3E30               	addlw	48
 12991  06F2  00B0               	movwf	??_sprintf+2
 12992  06F3  0830               	movf	??_sprintf+2,w
 12993  06F4  00B9               	movwf	sprintf@c
 12994  06F5                     l6282:
 12995                           
 12996                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
 12997  06F5  0839               	movf	sprintf@c,w
 12998  06F6  00AE               	movwf	??_sprintf
 12999  06F7  083A               	movf	sprintf@sp,w
 13000  06F8  0086               	movwf	6
 13001  06F9  0187               	clrf	7
 13002  06FA  082E               	movf	??_sprintf,w
 13003  06FB  0081               	movwf	1
 13004  06FC                     l6284:
 13005  06FC  3001               	movlw	1
 13006  06FD  00AE               	movwf	??_sprintf
 13007  06FE  082E               	movf	??_sprintf,w
 13008  06FF  07BA               	addwf	sprintf@sp,f
 13009  0700                     l6286:
 13010  0700  30FF               	movlw	255
 13011  0701  00AE               	movwf	??_sprintf
 13012  0702  082E               	movf	??_sprintf,w
 13013  0703  07B3               	addwf	sprintf@prec,f
 13014  0704  0A33               	incf	sprintf@prec,w
 13015  0705  1D03               	btfss	3,2
 13016  0706  2F08               	goto	u6761
 13017  0707  2F09               	goto	u6760
 13018  0708                     u6761:
 13019  0708  2ECD               	goto	l6280
 13020  0709                     u6760:
 13021  0709                     l6288:
 13022  0709  0827               	movf	sprintf@f+1,w
 13023  070A  00AF               	movwf	??_sprintf+1
 13024  070B  0826               	movf	sprintf@f,w
 13025  070C  00AE               	movwf	??_sprintf
 13026  070D  0AA6               	incf	sprintf@f,f
 13027  070E  1903               	skipnz
 13028  070F  0AA7               	incf	sprintf@f+1,f
 13029  0710  082E               	movf	??_sprintf,w
 13030  0711  0084               	movwf	4
 13031  0712  082F               	movf	??_sprintf+1,w
 13032  0713  0085               	movwf	5
 13033  0714  0800               	movf	0,w	;code access
 13034  0715  00B0               	movwf	??_sprintf+2
 13035  0716  0830               	movf	??_sprintf+2,w
 13036  0717  00B9               	movwf	sprintf@c
 13037  0718  0839               	movf	sprintf@c,w
 13038  0719  1D03               	btfss	3,2
 13039  071A  2F1C               	goto	u6771
 13040  071B  2F1D               	goto	u6770
 13041  071C                     u6771:
 13042  071C  2D8B               	goto	l6186
 13043  071D                     u6770:
 13044  071D                     l6290:
 13045                           
 13046                           ;doprnt.c: 1564: *sp = 0;
 13047  071D  083A               	movf	sprintf@sp,w
 13048  071E  0086               	movwf	6
 13049  071F  0187               	clrf	7
 13050  0720  0181               	clrf	1
 13051  0721                     l1763:
 13052  0721  0008               	return
 13053  0722                     __end_of_sprintf:
 13054                           
 13055                           	psect	text13
 13056  12CB                     __ptext13:	
 13057 ;; *************** function _isdigit *****************
 13058 ;; Defined at:
 13059 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
 13060 ;; Parameters:    Size  Location     Type
 13061 ;;  c               1    wreg     unsigned char 
 13062 ;; Auto vars:     Size  Location     Type
 13063 ;;  c               1    3[COMMON] unsigned char 
 13064 ;; Return value:  Size  Location     Type
 13065 ;;		None               void
 13066 ;; Registers used:
 13067 ;;		wreg, status,2, status,0
 13068 ;; Tracked objects:
 13069 ;;		On entry : 0/0
 13070 ;;		On exit  : 0/0
 13071 ;;		Unchanged: 0/0
 13072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13076 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13077 ;;Total ram usage:        2 bytes
 13078 ;; Hardware stack levels used:    1
 13079 ;; Hardware stack levels required when called:    4
 13080 ;; This function calls:
 13081 ;;		Nothing
 13082 ;; This function is called by:
 13083 ;;		_sprintf
 13084 ;; This function uses a non-reentrant model
 13085 ;;
 13086                           
 13087                           
 13088                           ;psect for function _isdigit
 13089  12CB                     _isdigit:
 13090                           
 13091                           ;incstack = 0
 13092                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 13093                           ;isdigit@c stored from wreg
 13094  12CB  00F3               	movwf	isdigit@c
 13095  12CC                     l4422:
 13096  12CC  01F2               	clrf	_isdigit$2990
 13097  12CD                     l4424:
 13098  12CD  303A               	movlw	58
 13099  12CE  0273               	subwf	isdigit@c,w
 13100  12CF  1803               	skipnc
 13101  12D0  2AD2               	goto	u3331
 13102  12D1  2AD3               	goto	u3330
 13103  12D2                     u3331:
 13104  12D2  2ADB               	goto	l4430
 13105  12D3                     u3330:
 13106  12D3                     l4426:
 13107  12D3  3030               	movlw	48
 13108  12D4  0273               	subwf	isdigit@c,w
 13109  12D5  1C03               	skipc
 13110  12D6  2AD8               	goto	u3341
 13111  12D7  2AD9               	goto	u3340
 13112  12D8                     u3341:
 13113  12D8  2ADB               	goto	l4430
 13114  12D9                     u3340:
 13115  12D9                     l4428:
 13116  12D9  01F2               	clrf	_isdigit$2990
 13117  12DA  0AF2               	incf	_isdigit$2990,f
 13118  12DB                     l4430:
 13119  12DB  0C72               	rrf	_isdigit$2990,w
 13120  12DC                     l2220:
 13121  12DC  0008               	return
 13122  12DD                     __end_of_isdigit:
 13123                           
 13124                           	psect	text14
 13125  169D                     __ptext14:	
 13126 ;; *************** function ___lwmod *****************
 13127 ;; Defined at:
 13128 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
 13129 ;; Parameters:    Size  Location     Type
 13130 ;;  divisor         2    0[BANK0 ] unsigned int 
 13131 ;;  dividend        2    2[BANK0 ] unsigned int 
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;  counter         1    5[BANK0 ] unsigned char 
 13134 ;; Return value:  Size  Location     Type
 13135 ;;                  2    0[BANK0 ] unsigned int 
 13136 ;; Registers used:
 13137 ;;		wreg, status,2, status,0
 13138 ;; Tracked objects:
 13139 ;;		On entry : 0/0
 13140 ;;		On exit  : 0/0
 13141 ;;		Unchanged: 0/0
 13142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13143 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13147 ;;Total ram usage:        6 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; Hardware stack levels required when called:    4
 13150 ;; This function calls:
 13151 ;;		Nothing
 13152 ;; This function is called by:
 13153 ;;		_sprintf
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           
 13158                           ;psect for function ___lwmod
 13159  169D                     ___lwmod:
 13160  169D                     l6080:	
 13161                           ;incstack = 0
 13162                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13163                           
 13164  169D  0020               	movlb	0	; select bank0
 13165  169E  0820               	movf	___lwmod@divisor,w
 13166  169F  0421               	iorwf	___lwmod@divisor+1,w
 13167  16A0  1903               	btfsc	3,2
 13168  16A1  2EA3               	goto	u6271
 13169  16A2  2EA4               	goto	u6270
 13170  16A3                     u6271:
 13171  16A3  2ECD               	goto	l6098
 13172  16A4                     u6270:
 13173  16A4                     l6082:
 13174  16A4  01A5               	clrf	___lwmod@counter
 13175  16A5  0AA5               	incf	___lwmod@counter,f
 13176  16A6  2EB0               	goto	l6088
 13177  16A7                     l6084:
 13178  16A7  3001               	movlw	1
 13179  16A8                     u6285:
 13180  16A8  35A0               	lslf	___lwmod@divisor,f
 13181  16A9  0DA1               	rlf	___lwmod@divisor+1,f
 13182  16AA  0B89               	decfsz	9,f
 13183  16AB  2EA8               	goto	u6285
 13184  16AC                     l6086:
 13185  16AC  3001               	movlw	1
 13186  16AD  00A4               	movwf	??___lwmod
 13187  16AE  0824               	movf	??___lwmod,w
 13188  16AF  07A5               	addwf	___lwmod@counter,f
 13189  16B0                     l6088:
 13190  16B0  1FA1               	btfss	___lwmod@divisor+1,7
 13191  16B1  2EB3               	goto	u6291
 13192  16B2  2EB4               	goto	u6290
 13193  16B3                     u6291:
 13194  16B3  2EA7               	goto	l6084
 13195  16B4                     u6290:
 13196  16B4                     l6090:
 13197  16B4  0821               	movf	___lwmod@divisor+1,w
 13198  16B5  0223               	subwf	___lwmod@dividend+1,w
 13199  16B6  1D03               	skipz
 13200  16B7  2EBA               	goto	u6305
 13201  16B8  0820               	movf	___lwmod@divisor,w
 13202  16B9  0222               	subwf	___lwmod@dividend,w
 13203  16BA                     u6305:
 13204  16BA  1C03               	skipc
 13205  16BB  2EBD               	goto	u6301
 13206  16BC  2EBE               	goto	u6300
 13207  16BD                     u6301:
 13208  16BD  2EC2               	goto	l6094
 13209  16BE                     u6300:
 13210  16BE                     l6092:
 13211  16BE  0820               	movf	___lwmod@divisor,w
 13212  16BF  02A2               	subwf	___lwmod@dividend,f
 13213  16C0  0821               	movf	___lwmod@divisor+1,w
 13214  16C1  3BA3               	subwfb	___lwmod@dividend+1,f
 13215  16C2                     l6094:
 13216  16C2  3001               	movlw	1
 13217  16C3                     u6315:
 13218  16C3  36A1               	lsrf	___lwmod@divisor+1,f
 13219  16C4  0CA0               	rrf	___lwmod@divisor,f
 13220  16C5  0B89               	decfsz	9,f
 13221  16C6  2EC3               	goto	u6315
 13222  16C7                     l6096:
 13223  16C7  3001               	movlw	1
 13224  16C8  02A5               	subwf	___lwmod@counter,f
 13225  16C9  1D03               	btfss	3,2
 13226  16CA  2ECC               	goto	u6321
 13227  16CB  2ECD               	goto	u6320
 13228  16CC                     u6321:
 13229  16CC  2EB4               	goto	l6090
 13230  16CD                     u6320:
 13231  16CD                     l6098:
 13232  16CD  0823               	movf	___lwmod@dividend+1,w
 13233  16CE  00A1               	movwf	?___lwmod+1
 13234  16CF  0822               	movf	___lwmod@dividend,w
 13235  16D0  00A0               	movwf	?___lwmod
 13236  16D1                     l2049:
 13237  16D1  0008               	return
 13238  16D2                     __end_of___lwmod:
 13239                           
 13240                           	psect	text15
 13241  1746                     __ptext15:	
 13242 ;; *************** function ___lwdiv *****************
 13243 ;; Defined at:
 13244 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
 13245 ;; Parameters:    Size  Location     Type
 13246 ;;  divisor         2    2[COMMON] unsigned int 
 13247 ;;  dividend        2    4[COMMON] unsigned int 
 13248 ;; Auto vars:     Size  Location     Type
 13249 ;;  quotient        2    7[COMMON] unsigned int 
 13250 ;;  counter         1    9[COMMON] unsigned char 
 13251 ;; Return value:  Size  Location     Type
 13252 ;;                  2    2[COMMON] unsigned int 
 13253 ;; Registers used:
 13254 ;;		wreg, status,2, status,0
 13255 ;; Tracked objects:
 13256 ;;		On entry : 0/0
 13257 ;;		On exit  : 0/0
 13258 ;;		Unchanged: 0/0
 13259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13260 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13263 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13264 ;;Total ram usage:        8 bytes
 13265 ;; Hardware stack levels used:    1
 13266 ;; Hardware stack levels required when called:    4
 13267 ;; This function calls:
 13268 ;;		Nothing
 13269 ;; This function is called by:
 13270 ;;		_sprintf
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           
 13275                           ;psect for function ___lwdiv
 13276  1746                     ___lwdiv:
 13277  1746                     l4448:	
 13278                           ;incstack = 0
 13279                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13280                           
 13281  1746  01F7               	clrf	___lwdiv@quotient
 13282  1747  01F8               	clrf	___lwdiv@quotient+1
 13283  1748                     l4450:
 13284  1748  0872               	movf	___lwdiv@divisor,w
 13285  1749  0473               	iorwf	___lwdiv@divisor+1,w
 13286  174A  1903               	btfsc	3,2
 13287  174B  2F4D               	goto	u3391
 13288  174C  2F4E               	goto	u3390
 13289  174D                     u3391:
 13290  174D  2F7D               	goto	l4470
 13291  174E                     u3390:
 13292  174E                     l4452:
 13293  174E  01F9               	clrf	___lwdiv@counter
 13294  174F  0AF9               	incf	___lwdiv@counter,f
 13295  1750  2F5A               	goto	l4458
 13296  1751                     l4454:
 13297  1751  3001               	movlw	1
 13298  1752                     u3405:
 13299  1752  35F2               	lslf	___lwdiv@divisor,f
 13300  1753  0DF3               	rlf	___lwdiv@divisor+1,f
 13301  1754  0B89               	decfsz	9,f
 13302  1755  2F52               	goto	u3405
 13303  1756                     l4456:
 13304  1756  3001               	movlw	1
 13305  1757  00F6               	movwf	??___lwdiv
 13306  1758  0876               	movf	??___lwdiv,w
 13307  1759  07F9               	addwf	___lwdiv@counter,f
 13308  175A                     l4458:
 13309  175A  1FF3               	btfss	___lwdiv@divisor+1,7
 13310  175B  2F5D               	goto	u3411
 13311  175C  2F5E               	goto	u3410
 13312  175D                     u3411:
 13313  175D  2F51               	goto	l4454
 13314  175E                     u3410:
 13315  175E                     l4460:
 13316  175E  3001               	movlw	1
 13317  175F                     u3425:
 13318  175F  35F7               	lslf	___lwdiv@quotient,f
 13319  1760  0DF8               	rlf	___lwdiv@quotient+1,f
 13320  1761  0B89               	decfsz	9,f
 13321  1762  2F5F               	goto	u3425
 13322  1763  0873               	movf	___lwdiv@divisor+1,w
 13323  1764  0275               	subwf	___lwdiv@dividend+1,w
 13324  1765  1D03               	skipz
 13325  1766  2F69               	goto	u3435
 13326  1767  0872               	movf	___lwdiv@divisor,w
 13327  1768  0274               	subwf	___lwdiv@dividend,w
 13328  1769                     u3435:
 13329  1769  1C03               	skipc
 13330  176A  2F6C               	goto	u3431
 13331  176B  2F6D               	goto	u3430
 13332  176C                     u3431:
 13333  176C  2F72               	goto	l4466
 13334  176D                     u3430:
 13335  176D                     l4462:
 13336  176D  0872               	movf	___lwdiv@divisor,w
 13337  176E  02F4               	subwf	___lwdiv@dividend,f
 13338  176F  0873               	movf	___lwdiv@divisor+1,w
 13339  1770  3BF5               	subwfb	___lwdiv@dividend+1,f
 13340  1771                     l4464:
 13341  1771  1477               	bsf	___lwdiv@quotient,0
 13342  1772                     l4466:
 13343  1772  3001               	movlw	1
 13344  1773                     u3445:
 13345  1773  36F3               	lsrf	___lwdiv@divisor+1,f
 13346  1774  0CF2               	rrf	___lwdiv@divisor,f
 13347  1775  0B89               	decfsz	9,f
 13348  1776  2F73               	goto	u3445
 13349  1777                     l4468:
 13350  1777  3001               	movlw	1
 13351  1778  02F9               	subwf	___lwdiv@counter,f
 13352  1779  1D03               	btfss	3,2
 13353  177A  2F7C               	goto	u3451
 13354  177B  2F7D               	goto	u3450
 13355  177C                     u3451:
 13356  177C  2F5E               	goto	l4460
 13357  177D                     u3450:
 13358  177D                     l4470:
 13359  177D  0878               	movf	___lwdiv@quotient+1,w
 13360  177E  00F3               	movwf	?___lwdiv+1
 13361  177F  0877               	movf	___lwdiv@quotient,w
 13362  1780  00F2               	movwf	?___lwdiv
 13363  1781                     l2039:
 13364  1781  0008               	return
 13365  1782                     __end_of___lwdiv:
 13366                           
 13367                           	psect	text16
 13368  1634                     __ptext16:	
 13369 ;; *************** function _differenceBetweenTimePeriod *****************
 13370 ;; Defined at:
 13371 ;;		line 333 in file "main.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;  start           3    2[COMMON] struct Time
 13374 ;;  stop            3    5[COMMON] struct Time
 13375 ;;  diff            1    8[COMMON] PTR struct Time
 13376 ;;		 -> update_menuLCD@diff(3), 
 13377 ;; Auto vars:     Size  Location     Type
 13378 ;;		None
 13379 ;; Return value:  Size  Location     Type
 13380 ;;                  1    wreg      void 
 13381 ;; Registers used:
 13382 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13383 ;; Tracked objects:
 13384 ;;		On entry : 0/0
 13385 ;;		On exit  : 0/0
 13386 ;;		Unchanged: 0/0
 13387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13388 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;Total ram usage:        8 bytes
 13393 ;; Hardware stack levels used:    1
 13394 ;; Hardware stack levels required when called:    4
 13395 ;; This function calls:
 13396 ;;		Nothing
 13397 ;; This function is called by:
 13398 ;;		_update_menuLCD
 13399 ;; This function uses a non-reentrant model
 13400 ;;
 13401                           
 13402                           
 13403                           ;psect for function _differenceBetweenTimePeriod
 13404  1634                     _differenceBetweenTimePeriod:
 13405  1634                     l4598:	
 13406                           ;incstack = 0
 13407                           ; Regs used in _differenceBetweenTimePeriod: [wreg+fsr1l+fsr1h+status,2+status,0]
 13408                           
 13409                           
 13410                           ;main.c: 336: while (stop.s > start.s) {
 13411  1634  2E3B               	goto	l4602
 13412  1635                     l4600:
 13413                           
 13414                           ;main.c: 337: --start.m;
 13415  1635  3001               	movlw	1
 13416  1636  02F3               	subwf	differenceBetweenTimePeriod@start+1,f
 13417                           
 13418                           ;main.c: 338: start.s += 60;
 13419  1637  303C               	movlw	60
 13420  1638  00F9               	movwf	??_differenceBetweenTimePeriod
 13421  1639  0879               	movf	??_differenceBetweenTimePeriod,w
 13422  163A  07F4               	addwf	differenceBetweenTimePeriod@start+2,f
 13423  163B                     l4602:
 13424  163B  0877               	movf	differenceBetweenTimePeriod@stop+2,w
 13425  163C  0274               	subwf	differenceBetweenTimePeriod@start+2,w
 13426  163D  1C03               	skipc
 13427  163E  2E40               	goto	u3811
 13428  163F  2E41               	goto	u3810
 13429  1640                     u3811:
 13430  1640  2E35               	goto	l4600
 13431  1641                     u3810:
 13432  1641                     l4604:
 13433                           
 13434                           ;main.c: 339: };main.c: 340: diff->s = start.s - stop.s;
 13435  1641  0877               	movf	differenceBetweenTimePeriod@stop+2,w
 13436  1642  0274               	subwf	differenceBetweenTimePeriod@start+2,w
 13437  1643  00F9               	movwf	??_differenceBetweenTimePeriod
 13438  1644  0878               	movf	differenceBetweenTimePeriod@diff,w
 13439  1645  3E02               	addlw	2
 13440  1646  0086               	movwf	6
 13441  1647  0187               	clrf	7
 13442  1648  0879               	movf	??_differenceBetweenTimePeriod,w
 13443  1649  0081               	movwf	1
 13444                           
 13445                           ;main.c: 341: while (stop.m > start.m) {
 13446  164A  2E51               	goto	l4608
 13447  164B                     l4606:
 13448                           
 13449                           ;main.c: 342: --start.h;
 13450  164B  3001               	movlw	1
 13451  164C  02F2               	subwf	differenceBetweenTimePeriod@start,f
 13452                           
 13453                           ;main.c: 343: start.m += 60;
 13454  164D  303C               	movlw	60
 13455  164E  00F9               	movwf	??_differenceBetweenTimePeriod
 13456  164F  0879               	movf	??_differenceBetweenTimePeriod,w
 13457  1650  07F3               	addwf	differenceBetweenTimePeriod@start+1,f
 13458  1651                     l4608:
 13459  1651  0876               	movf	differenceBetweenTimePeriod@stop+1,w
 13460  1652  0273               	subwf	differenceBetweenTimePeriod@start+1,w
 13461  1653  1C03               	skipc
 13462  1654  2E56               	goto	u3821
 13463  1655  2E57               	goto	u3820
 13464  1656                     u3821:
 13465  1656  2E4B               	goto	l4606
 13466  1657                     u3820:
 13467  1657                     l4610:
 13468                           
 13469                           ;main.c: 344: };main.c: 345: diff->m = start.m - stop.m;
 13470  1657  0876               	movf	differenceBetweenTimePeriod@stop+1,w
 13471  1658  0273               	subwf	differenceBetweenTimePeriod@start+1,w
 13472  1659  00F9               	movwf	??_differenceBetweenTimePeriod
 13473  165A  0A78               	incf	differenceBetweenTimePeriod@diff,w
 13474  165B  0086               	movwf	6
 13475  165C  0187               	clrf	7
 13476  165D  0879               	movf	??_differenceBetweenTimePeriod,w
 13477  165E  0081               	movwf	1
 13478                           
 13479                           ;main.c: 346: diff->h = start.h - stop.h;
 13480  165F  0875               	movf	differenceBetweenTimePeriod@stop,w
 13481  1660  0272               	subwf	differenceBetweenTimePeriod@start,w
 13482  1661  00F9               	movwf	??_differenceBetweenTimePeriod
 13483  1662  0878               	movf	differenceBetweenTimePeriod@diff,w
 13484  1663  0086               	movwf	6
 13485  1664  0187               	clrf	7
 13486  1665  0879               	movf	??_differenceBetweenTimePeriod,w
 13487  1666  0081               	movwf	1
 13488  1667                     l1254:
 13489  1667  0008               	return
 13490  1668                     __end_of_differenceBetweenTimePeriod:
 13491                           
 13492                           	psect	text17
 13493  11FE                     __ptext17:	
 13494 ;; *************** function _TMR2_StopTimer *****************
 13495 ;; Defined at:
 13496 ;;		line 117 in file "mcc_generated_files/tmr2.c"
 13497 ;; Parameters:    Size  Location     Type
 13498 ;;		None
 13499 ;; Auto vars:     Size  Location     Type
 13500 ;;		None
 13501 ;; Return value:  Size  Location     Type
 13502 ;;                  1    wreg      void 
 13503 ;; Registers used:
 13504 ;;		status,2, status,0, pclath, cstack
 13505 ;; Tracked objects:
 13506 ;;		On entry : 0/0
 13507 ;;		On exit  : 0/0
 13508 ;;		Unchanged: 0/0
 13509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13514 ;;Total ram usage:        0 bytes
 13515 ;; Hardware stack levels used:    1
 13516 ;; Hardware stack levels required when called:    5
 13517 ;; This function calls:
 13518 ;;		_TMR2_Stop
 13519 ;; This function is called by:
 13520 ;;		_update_menuLCD
 13521 ;;		_main
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           
 13526                           ;psect for function _TMR2_StopTimer
 13527  11FE                     _TMR2_StopTimer:
 13528  11FE                     l4514:	
 13529                           ;incstack = 0
 13530                           ; Regs used in _TMR2_StopTimer: [status,2+status,0+pclath+cstack]
 13531                           
 13532                           
 13533                           ;tmr2.c: 119: TMR2_Stop();
 13534  11FE  3191  21F7  3191   	fcall	_TMR2_Stop
 13535  1201                     l665:
 13536  1201  0008               	return
 13537  1202                     __end_of_TMR2_StopTimer:
 13538                           
 13539                           	psect	text18
 13540  11F7                     __ptext18:	
 13541 ;; *************** function _TMR2_Stop *****************
 13542 ;; Defined at:
 13543 ;;		line 111 in file "mcc_generated_files/tmr2.c"
 13544 ;; Parameters:    Size  Location     Type
 13545 ;;		None
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;		None
 13548 ;; Return value:  Size  Location     Type
 13549 ;;                  1    wreg      void 
 13550 ;; Registers used:
 13551 ;;		None
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;Total ram usage:        0 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; Hardware stack levels required when called:    4
 13564 ;; This function calls:
 13565 ;;		Nothing
 13566 ;; This function is called by:
 13567 ;;		_TMR2_StopTimer
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           
 13572                           ;psect for function _TMR2_Stop
 13573  11F7                     _TMR2_Stop:
 13574  11F7                     l4400:	
 13575                           ;incstack = 0
 13576                           ; Regs used in _TMR2_Stop: []
 13577                           
 13578                           
 13579                           ;tmr2.c: 114: T2CONbits.TMR2ON = 0;
 13580  11F7  0025               	movlb	5	; select bank5
 13581  11F8  138E               	bcf	14,7	;volatile
 13582  11F9                     l662:
 13583  11F9  0008               	return
 13584  11FA                     __end_of_TMR2_Stop:
 13585                           
 13586                           	psect	text19
 13587  11F4                     __ptext19:	
 13588 ;; *************** function _PWM_Output_D4_Disable *****************
 13589 ;; Defined at:
 13590 ;;		line 353 in file "main.c"
 13591 ;; Parameters:    Size  Location     Type
 13592 ;;		None
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;		None
 13595 ;; Return value:  Size  Location     Type
 13596 ;;                  1    wreg      void 
 13597 ;; Registers used:
 13598 ;;		None
 13599 ;; Tracked objects:
 13600 ;;		On entry : 0/0
 13601 ;;		On exit  : 0/0
 13602 ;;		Unchanged: 0/0
 13603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;Total ram usage:        0 bytes
 13609 ;; Hardware stack levels used:    1
 13610 ;; Hardware stack levels required when called:    4
 13611 ;; This function calls:
 13612 ;;		Nothing
 13613 ;; This function is called by:
 13614 ;;		_update_menuLCD
 13615 ;;		_main
 13616 ;; This function uses a non-reentrant model
 13617 ;;
 13618                           
 13619                           
 13620                           ;psect for function _PWM_Output_D4_Disable
 13621  11F4                     _PWM_Output_D4_Disable:
 13622  11F4                     l4612:	
 13623                           ;incstack = 0
 13624                           ; Regs used in _PWM_Output_D4_Disable: []
 13625                           
 13626                           
 13627                           ;main.c: 354: PWM6EN = 0;
 13628  11F4  0027               	movlb	7	; select bank7
 13629  11F5  138E               	bcf	14,7	;volatile
 13630  11F6                     l1260:
 13631  11F6  0008               	return
 13632  11F7                     __end_of_PWM_Output_D4_Disable:
 13633                           
 13634                           	psect	text20
 13635  12DD                     __ptext20:	
 13636 ;; *************** function _PWM6_LoadDutyValue *****************
 13637 ;; Defined at:
 13638 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 13639 ;; Parameters:    Size  Location     Type
 13640 ;;  dutyValue       2    2[COMMON] unsigned int 
 13641 ;; Auto vars:     Size  Location     Type
 13642 ;;		None
 13643 ;; Return value:  Size  Location     Type
 13644 ;;                  1    wreg      void 
 13645 ;; Registers used:
 13646 ;;		wreg, status,2, status,0
 13647 ;; Tracked objects:
 13648 ;;		On entry : 0/0
 13649 ;;		On exit  : 0/0
 13650 ;;		Unchanged: 0/0
 13651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13656 ;;Total ram usage:        4 bytes
 13657 ;; Hardware stack levels used:    1
 13658 ;; Hardware stack levels required when called:    4
 13659 ;; This function calls:
 13660 ;;		Nothing
 13661 ;; This function is called by:
 13662 ;;		_update_menuLCD
 13663 ;;		_checkFlags
 13664 ;;		_main
 13665 ;; This function uses a non-reentrant model
 13666 ;;
 13667                           
 13668                           
 13669                           ;psect for function _PWM6_LoadDutyValue
 13670  12DD                     _PWM6_LoadDutyValue:
 13671  12DD                     l4510:	
 13672                           ;incstack = 0
 13673                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13674                           
 13675                           
 13676                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 13677  12DD  0873               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 13678  12DE  00F5               	movwf	??_PWM6_LoadDutyValue+1
 13679  12DF  0872               	movf	PWM6_LoadDutyValue@dutyValue,w
 13680  12E0  00F4               	movwf	??_PWM6_LoadDutyValue
 13681  12E1  36F5               	lsrf	??_PWM6_LoadDutyValue+1,f
 13682  12E2  0CF4               	rrf	??_PWM6_LoadDutyValue,f
 13683  12E3  36F5               	lsrf	??_PWM6_LoadDutyValue+1,f
 13684  12E4  0CF4               	rrf	??_PWM6_LoadDutyValue,f
 13685  12E5  0874               	movf	??_PWM6_LoadDutyValue,w
 13686  12E6  0027               	movlb	7	; select bank7
 13687  12E7  008D               	movwf	13	;volatile
 13688                           
 13689                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 13690  12E8  0872               	movf	PWM6_LoadDutyValue@dutyValue,w
 13691  12E9  3903               	andlw	3
 13692  12EA  00F4               	movwf	??_PWM6_LoadDutyValue
 13693  12EB  3005               	movlw	5
 13694  12EC                     u3535:
 13695  12EC  35F4               	lslf	??_PWM6_LoadDutyValue,f
 13696  12ED  3EFF               	addlw	-1
 13697  12EE  1D03               	skipz
 13698  12EF  2AEC               	goto	u3535
 13699  12F0  3574               	lslf	??_PWM6_LoadDutyValue,w
 13700  12F1  008C               	movwf	12	;volatile
 13701  12F2                     l620:
 13702  12F2  0008               	return
 13703  12F3                     __end_of_PWM6_LoadDutyValue:
 13704                           
 13705                           	psect	text21
 13706  1387                     __ptext21:	
 13707 ;; *************** function _LCDstr *****************
 13708 ;; Defined at:
 13709 ;;		line 319 in file "main.c"
 13710 ;; Parameters:    Size  Location     Type
 13711 ;;  p               2    1[BANK0 ] PTR unsigned char 
 13712 ;;		 -> STR_7(4), update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 13713 ;; Auto vars:     Size  Location     Type
 13714 ;;  c               1    6[BANK0 ] unsigned char 
 13715 ;; Return value:  Size  Location     Type
 13716 ;;                  1    wreg      void 
 13717 ;; Registers used:
 13718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13719 ;; Tracked objects:
 13720 ;;		On entry : 0/0
 13721 ;;		On exit  : 0/0
 13722 ;;		Unchanged: 0/0
 13723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13724 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13726 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;Total ram usage:        6 bytes
 13729 ;; Hardware stack levels used:    1
 13730 ;; Hardware stack levels required when called:    7
 13731 ;; This function calls:
 13732 ;;		_LCDchar
 13733 ;; This function is called by:
 13734 ;;		_update_menuLCD
 13735 ;; This function uses a non-reentrant model
 13736 ;;
 13737                           
 13738                           
 13739                           ;psect for function _LCDstr
 13740  1387                     _LCDstr:
 13741  1387                     l6178:	
 13742                           ;incstack = 0
 13743                           ; Regs used in _LCDstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13744                           
 13745                           
 13746                           ;main.c: 321: unsigned char c;;main.c: 323: while((c = *p++)) LCDchar(c);
 13747  1387  2B8C               	goto	l6182
 13748  1388                     l6180:
 13749  1388  0826               	movf	LCDstr@c,w
 13750  1389  3192  2260  3193   	fcall	_LCDchar
 13751  138C                     l6182:
 13752  138C  0020               	movlb	0	; select bank0
 13753  138D  0822               	movf	LCDstr@p+1,w
 13754  138E  00A4               	movwf	??_LCDstr+1
 13755  138F  0821               	movf	LCDstr@p,w
 13756  1390  00A3               	movwf	??_LCDstr
 13757  1391  0AA1               	incf	LCDstr@p,f
 13758  1392  1903               	skipnz
 13759  1393  0AA2               	incf	LCDstr@p+1,f
 13760  1394  0823               	movf	??_LCDstr,w
 13761  1395  0084               	movwf	4
 13762  1396  0824               	movf	??_LCDstr+1,w
 13763  1397  0085               	movwf	5
 13764  1398  0800               	movf	0,w	;code access
 13765  1399  00A5               	movwf	??_LCDstr+2
 13766  139A  0825               	movf	??_LCDstr+2,w
 13767  139B  00A6               	movwf	LCDstr@c
 13768  139C  0826               	movf	LCDstr@c,w
 13769  139D  1D03               	btfss	3,2
 13770  139E  2BA0               	goto	u6591
 13771  139F  2BA1               	goto	u6590
 13772  13A0                     u6591:
 13773  13A0  2B88               	goto	l6180
 13774  13A1                     u6590:
 13775  13A1                     l1241:
 13776  13A1  0008               	return
 13777  13A2                     __end_of_LCDstr:
 13778                           
 13779                           	psect	text22
 13780  1260                     __ptext22:	
 13781 ;; *************** function _LCDchar *****************
 13782 ;; Defined at:
 13783 ;;		line 314 in file "main.c"
 13784 ;; Parameters:    Size  Location     Type
 13785 ;;  c               1    wreg     unsigned char 
 13786 ;; Auto vars:     Size  Location     Type
 13787 ;;  c               1    0[BANK0 ] unsigned char 
 13788 ;; Return value:  Size  Location     Type
 13789 ;;                  1    wreg      void 
 13790 ;; Registers used:
 13791 ;;		wreg, status,2, status,0, pclath, cstack
 13792 ;; Tracked objects:
 13793 ;;		On entry : 0/0
 13794 ;;		On exit  : 0/0
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;Total ram usage:        1 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    6
 13804 ;; This function calls:
 13805 ;;		_LCDsend2x4
 13806 ;; This function is called by:
 13807 ;;		_LCDstr
 13808 ;;		_update_menuLCD
 13809 ;; This function uses a non-reentrant model
 13810 ;;
 13811                           
 13812                           
 13813                           ;psect for function _LCDchar
 13814  1260                     _LCDchar:
 13815                           
 13816                           ;incstack = 0
 13817                           ; Regs used in _LCDchar: [wreg+status,2+status,0+pclath+cstack]
 13818                           ;LCDchar@c stored from wreg
 13819  1260  0020               	movlb	0	; select bank0
 13820  1261  00A0               	movwf	LCDchar@c
 13821  1262                     l6078:
 13822                           
 13823                           ;main.c: 316: LCDsend2x4(c, 0x01);
 13824  1262  01F4               	clrf	LCDsend2x4@mode
 13825  1263  0AF4               	incf	LCDsend2x4@mode,f
 13826  1264  0820               	movf	LCDchar@c,w
 13827  1265  3187  2722  3192   	fcall	_LCDsend2x4
 13828  1268                     l1235:
 13829  1268  0008               	return
 13830  1269                     __end_of_LCDchar:
 13831                           
 13832                           	psect	text23
 13833  123E                     __ptext23:	
 13834 ;; *************** function _LCDcmd *****************
 13835 ;; Defined at:
 13836 ;;		line 309 in file "main.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;  c               1    wreg     unsigned char 
 13839 ;; Auto vars:     Size  Location     Type
 13840 ;;  c               1    0[BANK0 ] unsigned char 
 13841 ;; Return value:  Size  Location     Type
 13842 ;;                  1    wreg      void 
 13843 ;; Registers used:
 13844 ;;		wreg, status,2, status,0, pclath, cstack
 13845 ;; Tracked objects:
 13846 ;;		On entry : 0/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;Total ram usage:        1 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:    6
 13857 ;; This function calls:
 13858 ;;		_LCDsend2x4
 13859 ;; This function is called by:
 13860 ;;		_update_menuLCD
 13861 ;; This function uses a non-reentrant model
 13862 ;;
 13863                           
 13864                           
 13865                           ;psect for function _LCDcmd
 13866  123E                     _LCDcmd:
 13867                           
 13868                           ;incstack = 0
 13869                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
 13870                           ;LCDcmd@c stored from wreg
 13871  123E  0020               	movlb	0	; select bank0
 13872  123F  00A0               	movwf	LCDcmd@c
 13873  1240                     l6176:
 13874                           
 13875                           ;main.c: 311: LCDsend2x4(c, 0);
 13876  1240  01F4               	clrf	LCDsend2x4@mode
 13877  1241  0820               	movf	LCDcmd@c,w
 13878  1242  3187  2722  3192   	fcall	_LCDsend2x4
 13879  1245                     l1232:
 13880  1245  0008               	return
 13881  1246                     __end_of_LCDcmd:
 13882                           
 13883                           	psect	text24
 13884  0E73                     __ptext24:	
 13885 ;; *************** function _monitoring_TEMP_LUM *****************
 13886 ;; Defined at:
 13887 ;;		line 551 in file "main.c"
 13888 ;; Parameters:    Size  Location     Type
 13889 ;;		None
 13890 ;; Auto vars:     Size  Location     Type
 13891 ;;		None
 13892 ;; Return value:  Size  Location     Type
 13893 ;;                  1    wreg      void 
 13894 ;; Registers used:
 13895 ;;		wreg, status,2, status,0, pclath, cstack
 13896 ;; Tracked objects:
 13897 ;;		On entry : 0/0
 13898 ;;		On exit  : 0/0
 13899 ;;		Unchanged: 0/0
 13900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13905 ;;Total ram usage:        3 bytes
 13906 ;; Hardware stack levels used:    1
 13907 ;; Hardware stack levels required when called:    6
 13908 ;; This function calls:
 13909 ;;		_ADCC_GetSingleConversion
 13910 ;;		_DATAEE_WriteByte
 13911 ;;		___wmul
 13912 ;;		_tsttc
 13913 ;; This function is called by:
 13914 ;;		_checkFlags
 13915 ;; This function uses a non-reentrant model
 13916 ;;
 13917                           
 13918                           
 13919                           ;psect for function _monitoring_TEMP_LUM
 13920  0E73                     _monitoring_TEMP_LUM:
 13921  0E73                     l6428:	
 13922                           ;incstack = 0
 13923                           ; Regs used in _monitoring_TEMP_LUM: [wreg+status,2+status,0+pclath+cstack]
 13924                           
 13925                           
 13926                           ;main.c: 552: temp = (uint8_t)tsttc();
 13927  0E73  318D  2566  318E   	fcall	_tsttc
 13928  0E76  0020               	movlb	0	; select bank0
 13929  0E77  00A3               	movwf	??_monitoring_TEMP_LUM
 13930  0E78  0823               	movf	??_monitoring_TEMP_LUM,w
 13931  0E79  00E6               	movwf	_temp
 13932                           
 13933                           ;main.c: 554: lumLevel = ADCC_GetSingleConversion(channel_ANA0) >> 13;
 13934  0E7A  3000               	movlw	0
 13935  0E7B  3192  22B9  318E   	fcall	_ADCC_GetSingleConversion
 13936  0E7E  0872               	movf	?_ADCC_GetSingleConversion,w
 13937  0E7F  0020               	movlb	0	; select bank0
 13938  0E80  00A3               	movwf	??_monitoring_TEMP_LUM
 13939  0E81  0873               	movf	?_ADCC_GetSingleConversion+1,w
 13940  0E82  00A4               	movwf	??_monitoring_TEMP_LUM+1
 13941  0E83  300D               	movlw	13
 13942  0E84                     u7065:
 13943  0E84  36A4               	lsrf	??_monitoring_TEMP_LUM+1,f
 13944  0E85  0CA3               	rrf	??_monitoring_TEMP_LUM,f
 13945  0E86  0B89               	decfsz	9,f
 13946  0E87  2E84               	goto	u7065
 13947  0E88  0823               	movf	??_monitoring_TEMP_LUM,w
 13948  0E89  00A5               	movwf	??_monitoring_TEMP_LUM+2
 13949  0E8A  0825               	movf	??_monitoring_TEMP_LUM+2,w
 13950  0E8B  00E5               	movwf	_lumLevel
 13951  0E8C                     l6430:
 13952                           
 13953                           ;main.c: 556: if(prevTemp != temp || prevLumLevel != lumLevel){
 13954  0E8C  0866               	movf	_temp,w
 13955  0E8D  00A3               	movwf	??_monitoring_TEMP_LUM
 13956  0E8E  01A4               	clrf	??_monitoring_TEMP_LUM+1
 13957  0E8F  0021               	movlb	1	; select bank1
 13958  0E90  0869               	movf	(_prevTemp+1)^(0+128),w
 13959  0E91  0020               	movlb	0	; select bank0
 13960  0E92  0624               	xorwf	??_monitoring_TEMP_LUM+1,w
 13961  0E93  1D03               	skipz
 13962  0E94  2E99               	goto	u7075
 13963  0E95  0021               	movlb	1	; select bank1
 13964  0E96  0868               	movf	_prevTemp^(0+128),w
 13965  0E97  0020               	movlb	0	; select bank0
 13966  0E98  0623               	xorwf	??_monitoring_TEMP_LUM,w
 13967  0E99                     u7075:
 13968  0E99  1D03               	skipz
 13969  0E9A  2E9C               	goto	u7071
 13970  0E9B  2E9D               	goto	u7070
 13971  0E9C                     u7071:
 13972  0E9C  2EAE               	goto	l6434
 13973  0E9D                     u7070:
 13974  0E9D                     l6432:
 13975  0E9D  0865               	movf	_lumLevel,w
 13976  0E9E  00A3               	movwf	??_monitoring_TEMP_LUM
 13977  0E9F  01A4               	clrf	??_monitoring_TEMP_LUM+1
 13978  0EA0  0021               	movlb	1	; select bank1
 13979  0EA1  0867               	movf	(_prevLumLevel+1)^(0+128),w
 13980  0EA2  0020               	movlb	0	; select bank0
 13981  0EA3  0624               	xorwf	??_monitoring_TEMP_LUM+1,w
 13982  0EA4  1D03               	skipz
 13983  0EA5  2EAA               	goto	u7085
 13984  0EA6  0021               	movlb	1	; select bank1
 13985  0EA7  0866               	movf	_prevLumLevel^(0+128),w
 13986  0EA8  0020               	movlb	0	; select bank0
 13987  0EA9  0623               	xorwf	??_monitoring_TEMP_LUM,w
 13988  0EAA                     u7085:
 13989  0EAA  1903               	skipnz
 13990  0EAB  2EAD               	goto	u7081
 13991  0EAC  2EAE               	goto	u7080
 13992  0EAD                     u7081:
 13993  0EAD  2FB0               	goto	l6462
 13994  0EAE                     u7080:
 13995  0EAE                     l6434:
 13996                           
 13997                           ;main.c: 563: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x0 , t.h);
 13998  0EAE  087A               	movf	_iwrite,w
 13999  0EAF  00A3               	movwf	??_monitoring_TEMP_LUM
 14000  0EB0  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14001  0EB1  0823               	movf	??_monitoring_TEMP_LUM,w
 14002  0EB2  00F2               	movwf	___wmul@multiplier
 14003  0EB3  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14004  0EB4  00F3               	movwf	___wmul@multiplier+1
 14005  0EB5  3005               	movlw	5
 14006  0EB6  00F4               	movwf	___wmul@multiplicand
 14007  0EB7  3000               	movlw	0
 14008  0EB8  00F5               	movwf	___wmul@multiplicand+1
 14009  0EB9  3194  2418  318E   	fcall	___wmul
 14010  0EBC  0872               	movf	?___wmul,w
 14011  0EBD  3E12               	addlw	18
 14012  0EBE  0020               	movlb	0	; select bank0
 14013  0EBF  00A0               	movwf	DATAEE_WriteByte@bAdd
 14014  0EC0  3070               	movlw	112
 14015  0EC1  3D73               	addwfc	?___wmul+1,w
 14016  0EC2  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14017  0EC3  0859               	movf	_t,w
 14018  0EC4  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14019  0EC5  0825               	movf	??_monitoring_TEMP_LUM+2,w
 14020  0EC6  00A2               	movwf	DATAEE_WriteByte@bData
 14021  0EC7  3194  24BD  318E   	fcall	_DATAEE_WriteByte
 14022                           
 14023                           ;main.c: 564: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x1 , t.m);
 14024  0ECA  087A               	movf	_iwrite,w
 14025  0ECB  0020               	movlb	0	; select bank0
 14026  0ECC  00A3               	movwf	??_monitoring_TEMP_LUM
 14027  0ECD  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14028  0ECE  0823               	movf	??_monitoring_TEMP_LUM,w
 14029  0ECF  00F2               	movwf	___wmul@multiplier
 14030  0ED0  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14031  0ED1  00F3               	movwf	___wmul@multiplier+1
 14032  0ED2  3005               	movlw	5
 14033  0ED3  00F4               	movwf	___wmul@multiplicand
 14034  0ED4  3000               	movlw	0
 14035  0ED5  00F5               	movwf	___wmul@multiplicand+1
 14036  0ED6  3194  2418  318E   	fcall	___wmul
 14037  0ED9  0872               	movf	?___wmul,w
 14038  0EDA  3E13               	addlw	19
 14039  0EDB  0020               	movlb	0	; select bank0
 14040  0EDC  00A0               	movwf	DATAEE_WriteByte@bAdd
 14041  0EDD  3070               	movlw	112
 14042  0EDE  3D73               	addwfc	?___wmul+1,w
 14043  0EDF  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14044  0EE0  085A               	movf	_t+1,w
 14045  0EE1  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14046  0EE2  0825               	movf	??_monitoring_TEMP_LUM+2,w
 14047  0EE3  00A2               	movwf	DATAEE_WriteByte@bData
 14048  0EE4  3194  24BD  318E   	fcall	_DATAEE_WriteByte
 14049                           
 14050                           ;main.c: 565: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x2 , t.s);
 14051  0EE7  087A               	movf	_iwrite,w
 14052  0EE8  0020               	movlb	0	; select bank0
 14053  0EE9  00A3               	movwf	??_monitoring_TEMP_LUM
 14054  0EEA  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14055  0EEB  0823               	movf	??_monitoring_TEMP_LUM,w
 14056  0EEC  00F2               	movwf	___wmul@multiplier
 14057  0EED  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14058  0EEE  00F3               	movwf	___wmul@multiplier+1
 14059  0EEF  3005               	movlw	5
 14060  0EF0  00F4               	movwf	___wmul@multiplicand
 14061  0EF1  3000               	movlw	0
 14062  0EF2  00F5               	movwf	___wmul@multiplicand+1
 14063  0EF3  3194  2418  318E   	fcall	___wmul
 14064  0EF6  0872               	movf	?___wmul,w
 14065  0EF7  3E14               	addlw	20
 14066  0EF8  0020               	movlb	0	; select bank0
 14067  0EF9  00A0               	movwf	DATAEE_WriteByte@bAdd
 14068  0EFA  3070               	movlw	112
 14069  0EFB  3D73               	addwfc	?___wmul+1,w
 14070  0EFC  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14071  0EFD  085B               	movf	_t+2,w
 14072  0EFE  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14073  0EFF  0825               	movf	??_monitoring_TEMP_LUM+2,w
 14074  0F00  00A2               	movwf	DATAEE_WriteByte@bData
 14075  0F01  3194  24BD  318E   	fcall	_DATAEE_WriteByte
 14076                           
 14077                           ;main.c: 566: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x3 , temp);
 14078  0F04  087A               	movf	_iwrite,w
 14079  0F05  0020               	movlb	0	; select bank0
 14080  0F06  00A3               	movwf	??_monitoring_TEMP_LUM
 14081  0F07  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14082  0F08  0823               	movf	??_monitoring_TEMP_LUM,w
 14083  0F09  00F2               	movwf	___wmul@multiplier
 14084  0F0A  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14085  0F0B  00F3               	movwf	___wmul@multiplier+1
 14086  0F0C  3005               	movlw	5
 14087  0F0D  00F4               	movwf	___wmul@multiplicand
 14088  0F0E  3000               	movlw	0
 14089  0F0F  00F5               	movwf	___wmul@multiplicand+1
 14090  0F10  3194  2418  318E   	fcall	___wmul
 14091  0F13  0872               	movf	?___wmul,w
 14092  0F14  3E15               	addlw	21
 14093  0F15  0020               	movlb	0	; select bank0
 14094  0F16  00A0               	movwf	DATAEE_WriteByte@bAdd
 14095  0F17  3070               	movlw	112
 14096  0F18  3D73               	addwfc	?___wmul+1,w
 14097  0F19  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14098  0F1A  0866               	movf	_temp,w
 14099  0F1B  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14100  0F1C  0825               	movf	??_monitoring_TEMP_LUM+2,w
 14101  0F1D  00A2               	movwf	DATAEE_WriteByte@bData
 14102  0F1E  3194  24BD  318E   	fcall	_DATAEE_WriteByte
 14103                           
 14104                           ;main.c: 567: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x4 , lumLevel);
 14105  0F21  087A               	movf	_iwrite,w
 14106  0F22  0020               	movlb	0	; select bank0
 14107  0F23  00A3               	movwf	??_monitoring_TEMP_LUM
 14108  0F24  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14109  0F25  0823               	movf	??_monitoring_TEMP_LUM,w
 14110  0F26  00F2               	movwf	___wmul@multiplier
 14111  0F27  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14112  0F28  00F3               	movwf	___wmul@multiplier+1
 14113  0F29  3005               	movlw	5
 14114  0F2A  00F4               	movwf	___wmul@multiplicand
 14115  0F2B  3000               	movlw	0
 14116  0F2C  00F5               	movwf	___wmul@multiplicand+1
 14117  0F2D  3194  2418  318E   	fcall	___wmul
 14118  0F30  0872               	movf	?___wmul,w
 14119  0F31  3E16               	addlw	22
 14120  0F32  0020               	movlb	0	; select bank0
 14121  0F33  00A0               	movwf	DATAEE_WriteByte@bAdd
 14122  0F34  3070               	movlw	112
 14123  0F35  3D73               	addwfc	?___wmul+1,w
 14124  0F36  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14125  0F37  0865               	movf	_lumLevel,w
 14126  0F38  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14127  0F39  0825               	movf	??_monitoring_TEMP_LUM+2,w
 14128  0F3A  00A2               	movwf	DATAEE_WriteByte@bData
 14129  0F3B  3194  24BD  318E   	fcall	_DATAEE_WriteByte
 14130  0F3E                     l6436:
 14131                           
 14132                           ;main.c: 569: if((nr == NREG) && (iread == (iwrite-1))){
 14133  0F3E  0020               	movlb	0	; select bank0
 14134  0F3F  0860               	movf	_nr,w
 14135  0F40  067B               	xorwf	_NREG,w
 14136  0F41  1D03               	skipz
 14137  0F42  2F44               	goto	u7091
 14138  0F43  2F45               	goto	u7090
 14139  0F44                     u7091:
 14140  0F44  2F57               	goto	l1333
 14141  0F45                     u7090:
 14142  0F45                     l6438:
 14143  0F45  087A               	movf	_iwrite,w
 14144  0F46  3EFF               	addlw	255
 14145  0F47  00A3               	movwf	??_monitoring_TEMP_LUM
 14146  0F48  30FF               	movlw	255
 14147  0F49  1803               	skipnc
 14148  0F4A  3000               	movlw	0
 14149  0F4B  00A4               	movwf	??_monitoring_TEMP_LUM+1
 14150  0F4C  0861               	movf	_iread,w
 14151  0F4D  0623               	xorwf	??_monitoring_TEMP_LUM,w
 14152  0F4E  0424               	iorwf	??_monitoring_TEMP_LUM+1,w
 14153  0F4F  1D03               	skipz
 14154  0F50  2F52               	goto	u7101
 14155  0F51  2F53               	goto	u7100
 14156  0F52                     u7101:
 14157  0F52  2F57               	goto	l1333
 14158  0F53                     u7100:
 14159  0F53                     l6440:
 14160                           
 14161                           ;main.c: 570: iread++;
 14162  0F53  3001               	movlw	1
 14163  0F54  00A3               	movwf	??_monitoring_TEMP_LUM
 14164  0F55  0823               	movf	??_monitoring_TEMP_LUM,w
 14165  0F56  07E1               	addwf	_iread,f
 14166  0F57                     l1333:
 14167                           
 14168                           ;main.c: 571: };main.c: 573: iwrite++;
 14169  0F57  3001               	movlw	1
 14170  0F58  00A3               	movwf	??_monitoring_TEMP_LUM
 14171  0F59  0823               	movf	??_monitoring_TEMP_LUM,w
 14172  0F5A  07FA               	addwf	_iwrite,f
 14173  0F5B                     l6442:
 14174                           
 14175                           ;main.c: 574: if(iwrite > NREG - 1){
 14176  0F5B  087B               	movf	_NREG,w
 14177  0F5C  3EFF               	addlw	255
 14178  0F5D  00A3               	movwf	??_monitoring_TEMP_LUM
 14179  0F5E  30FF               	movlw	255
 14180  0F5F  1803               	skipnc
 14181  0F60  3000               	movlw	0
 14182  0F61  00A4               	movwf	??_monitoring_TEMP_LUM+1
 14183  0F62  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14184  0F63  3A80               	xorlw	128
 14185  0F64  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14186  0F65  3080               	movlw	128
 14187  0F66  0225               	subwf	??_monitoring_TEMP_LUM+2,w
 14188  0F67  1D03               	skipz
 14189  0F68  2F6B               	goto	u7115
 14190  0F69  087A               	movf	_iwrite,w
 14191  0F6A  0223               	subwf	??_monitoring_TEMP_LUM,w
 14192  0F6B                     u7115:
 14193  0F6B  1803               	skipnc
 14194  0F6C  2F6E               	goto	u7111
 14195  0F6D  2F6F               	goto	u7110
 14196  0F6E                     u7111:
 14197  0F6E  2F73               	goto	l6448
 14198  0F6F                     u7110:
 14199  0F6F                     l6444:
 14200                           
 14201                           ;main.c: 575: flagNr = 1;
 14202  0F6F  0021               	movlb	1	; select bank1
 14203  0F70  01D2               	clrf	_flagNr^(0+128)
 14204  0F71  0AD2               	incf	_flagNr^(0+128),f
 14205  0F72                     l6446:
 14206                           
 14207                           ;main.c: 576: iwrite = 0;
 14208  0F72  01FA               	clrf	_iwrite
 14209  0F73                     l6448:
 14210                           
 14211                           ;main.c: 577: };main.c: 578: if(flagNr){
 14212  0F73  0021               	movlb	1	; select bank1
 14213  0F74  0852               	movf	_flagNr^(0+128),w
 14214  0F75  1903               	btfsc	3,2
 14215  0F76  2F78               	goto	u7121
 14216  0F77  2F79               	goto	u7120
 14217  0F78                     u7121:
 14218  0F78  2F7F               	goto	l6452
 14219  0F79                     u7120:
 14220  0F79                     l6450:
 14221                           
 14222                           ;main.c: 579: nr = NREG;
 14223  0F79  087B               	movf	_NREG,w
 14224  0F7A  0020               	movlb	0	; select bank0
 14225  0F7B  00A3               	movwf	??_monitoring_TEMP_LUM
 14226  0F7C  0823               	movf	??_monitoring_TEMP_LUM,w
 14227  0F7D  00E0               	movwf	_nr
 14228                           
 14229                           ;main.c: 580: } else{
 14230  0F7E  2F84               	goto	l6454
 14231  0F7F                     l6452:
 14232                           
 14233                           ;main.c: 581: nr++;
 14234  0F7F  3001               	movlw	1
 14235  0F80  0020               	movlb	0	; select bank0
 14236  0F81  00A3               	movwf	??_monitoring_TEMP_LUM
 14237  0F82  0823               	movf	??_monitoring_TEMP_LUM,w
 14238  0F83  07E0               	addwf	_nr,f
 14239  0F84                     l6454:
 14240                           
 14241                           ;main.c: 582: };main.c: 584: if(iread > NREG-1){
 14242  0F84  087B               	movf	_NREG,w
 14243  0F85  3EFF               	addlw	255
 14244  0F86  00A3               	movwf	??_monitoring_TEMP_LUM
 14245  0F87  30FF               	movlw	255
 14246  0F88  1803               	skipnc
 14247  0F89  3000               	movlw	0
 14248  0F8A  00A4               	movwf	??_monitoring_TEMP_LUM+1
 14249  0F8B  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14250  0F8C  3A80               	xorlw	128
 14251  0F8D  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14252  0F8E  3080               	movlw	128
 14253  0F8F  0225               	subwf	??_monitoring_TEMP_LUM+2,w
 14254  0F90  1D03               	skipz
 14255  0F91  2F94               	goto	u7135
 14256  0F92  0861               	movf	_iread,w
 14257  0F93  0223               	subwf	??_monitoring_TEMP_LUM,w
 14258  0F94                     u7135:
 14259  0F94  1803               	skipnc
 14260  0F95  2F97               	goto	u7131
 14261  0F96  2F98               	goto	u7130
 14262  0F97                     u7131:
 14263  0F97  2F9A               	goto	l6458
 14264  0F98                     u7130:
 14265  0F98                     l6456:
 14266                           
 14267                           ;main.c: 585: iread = 0;
 14268  0F98  0020               	movlb	0	; select bank0
 14269  0F99  01E1               	clrf	_iread
 14270  0F9A                     l6458:
 14271                           
 14272                           ;main.c: 586: };main.c: 588: prevTemp = temp;
 14273  0F9A  0020               	movlb	0	; select bank0
 14274  0F9B  0866               	movf	_temp,w
 14275  0F9C  00A3               	movwf	??_monitoring_TEMP_LUM
 14276  0F9D  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14277  0F9E  0823               	movf	??_monitoring_TEMP_LUM,w
 14278  0F9F  0021               	movlb	1	; select bank1
 14279  0FA0  00E8               	movwf	_prevTemp^(0+128)
 14280  0FA1  0020               	movlb	0	; select bank0
 14281  0FA2  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14282  0FA3  0021               	movlb	1	; select bank1
 14283  0FA4  00E9               	movwf	(_prevTemp+1)^(0+128)
 14284  0FA5                     l6460:
 14285                           
 14286                           ;main.c: 589: prevLumLevel = lumLevel;
 14287  0FA5  0020               	movlb	0	; select bank0
 14288  0FA6  0865               	movf	_lumLevel,w
 14289  0FA7  00A3               	movwf	??_monitoring_TEMP_LUM
 14290  0FA8  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14291  0FA9  0823               	movf	??_monitoring_TEMP_LUM,w
 14292  0FAA  0021               	movlb	1	; select bank1
 14293  0FAB  00E6               	movwf	_prevLumLevel^(0+128)
 14294  0FAC  0020               	movlb	0	; select bank0
 14295  0FAD  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14296  0FAE  0021               	movlb	1	; select bank1
 14297  0FAF  00E7               	movwf	(_prevLumLevel+1)^(0+128)
 14298  0FB0                     l6462:
 14299                           
 14300                           ;main.c: 590: };main.c: 593: if(ALAF == 'A'){
 14301  0FB0  3041               	movlw	65
 14302  0FB1  0020               	movlb	0	; select bank0
 14303  0FB2  0667               	xorwf	_ALAF,w
 14304  0FB3  1D03               	btfss	3,2
 14305  0FB4  2FB6               	goto	u7141
 14306  0FB5  2FB7               	goto	u7140
 14307  0FB6                     u7141:
 14308  0FB6  2FFF               	goto	l1353
 14309  0FB7                     u7140:
 14310  0FB7                     l6464:
 14311                           
 14312                           ;main.c: 595: if((lumAlarm.alarmLum > lumLevel) && (editingLumAlarm == 0)){
 14313  0FB7  0021               	movlb	1	; select bank1
 14314  0FB8  0846               	movf	_lumAlarm^(0+128),w
 14315  0FB9  0020               	movlb	0	; select bank0
 14316  0FBA  0265               	subwf	_lumLevel,w
 14317  0FBB  1803               	skipnc
 14318  0FBC  2FBE               	goto	u7151
 14319  0FBD  2FBF               	goto	u7150
 14320  0FBE                     u7151:
 14321  0FBE  2FD7               	goto	l6478
 14322  0FBF                     u7150:
 14323  0FBF                     l6466:
 14324  0FBF  0863               	movf	_editingLumAlarm,w
 14325  0FC0  1D03               	btfss	3,2
 14326  0FC1  2FC3               	goto	u7161
 14327  0FC2  2FC4               	goto	u7160
 14328  0FC3                     u7161:
 14329  0FC3  2FD7               	goto	l6478
 14330  0FC4                     u7160:
 14331  0FC4                     l6468:
 14332                           
 14333                           ;main.c: 596: if(!lumAlarm.triggered){
 14334  0FC4  0021               	movlb	1	; select bank1
 14335  0FC5  0848               	movf	(_lumAlarm^(0+128)+2),w
 14336  0FC6  1D03               	btfss	3,2
 14337  0FC7  2FC9               	goto	u7171
 14338  0FC8  2FCA               	goto	u7170
 14339  0FC9                     u7171:
 14340  0FC9  2FD0               	goto	l6472
 14341  0FCA                     u7170:
 14342  0FCA                     l6470:
 14343                           
 14344                           ;main.c: 597: alarmPWMStart.h = 0xff;
 14345  0FCA  30FF               	movlw	255
 14346  0FCB  0020               	movlb	0	; select bank0
 14347  0FCC  00A3               	movwf	??_monitoring_TEMP_LUM
 14348  0FCD  0823               	movf	??_monitoring_TEMP_LUM,w
 14349  0FCE  0021               	movlb	1	; select bank1
 14350  0FCF  00E3               	movwf	_alarmPWMStart^(0+128)
 14351  0FD0                     l6472:
 14352                           
 14353                           ;main.c: 598: };main.c: 599: lumAlarm.triggered = 1;
 14354  0FD0  01C8               	clrf	(_lumAlarm^(0+128)+2)
 14355  0FD1  0AC8               	incf	(_lumAlarm^(0+128)+2),f
 14356  0FD2                     l6474:
 14357                           
 14358                           ;main.c: 601: lumAlarm.trigger = 1;
 14359  0FD2  01C7               	clrf	(_lumAlarm^(0+128)+1)
 14360  0FD3  0AC7               	incf	(_lumAlarm^(0+128)+1),f
 14361  0FD4                     l6476:
 14362  0FD4  0020               	movlb	0	; select bank0
 14363  0FD5  1616               	bsf	22,4	;volatile
 14364  0FD6  2FDB               	goto	l6482
 14365  0FD7                     l6478:
 14366                           
 14367                           ;main.c: 604: lumAlarm.triggered = 0;
 14368  0FD7  0021               	movlb	1	; select bank1
 14369  0FD8  01C8               	clrf	(_lumAlarm^(0+128)+2)
 14370  0FD9                     l6480:
 14371  0FD9  0020               	movlb	0	; select bank0
 14372  0FDA  1216               	bcf	22,4	;volatile
 14373  0FDB                     l6482:
 14374                           
 14375                           ;main.c: 606: };main.c: 609: if((tempAlarm.alarmTemp < temp) && (editingTempAlarm == 0))
      +                          {
 14376  0FDB  0866               	movf	_temp,w
 14377  0FDC  0021               	movlb	1	; select bank1
 14378  0FDD  0249               	subwf	_tempAlarm^(0+128),w
 14379  0FDE  1803               	skipnc
 14380  0FDF  2FE1               	goto	u7181
 14381  0FE0  2FE2               	goto	u7180
 14382  0FE1                     u7181:
 14383  0FE1  2FFB               	goto	l6496
 14384  0FE2                     u7180:
 14385  0FE2                     l6484:
 14386  0FE2  0020               	movlb	0	; select bank0
 14387  0FE3  0864               	movf	_editingTempAlarm,w
 14388  0FE4  1D03               	btfss	3,2
 14389  0FE5  2FE7               	goto	u7191
 14390  0FE6  2FE8               	goto	u7190
 14391  0FE7                     u7191:
 14392  0FE7  2FFB               	goto	l6496
 14393  0FE8                     u7190:
 14394  0FE8                     l6486:
 14395                           
 14396                           ;main.c: 610: if(!tempAlarm.triggered){
 14397  0FE8  0021               	movlb	1	; select bank1
 14398  0FE9  084B               	movf	(_tempAlarm^(0+128)+2),w
 14399  0FEA  1D03               	btfss	3,2
 14400  0FEB  2FED               	goto	u7201
 14401  0FEC  2FEE               	goto	u7200
 14402  0FED                     u7201:
 14403  0FED  2FF4               	goto	l6490
 14404  0FEE                     u7200:
 14405  0FEE                     l6488:
 14406                           
 14407                           ;main.c: 611: alarmPWMStart.h = 0xff;
 14408  0FEE  30FF               	movlw	255
 14409  0FEF  0020               	movlb	0	; select bank0
 14410  0FF0  00A3               	movwf	??_monitoring_TEMP_LUM
 14411  0FF1  0823               	movf	??_monitoring_TEMP_LUM,w
 14412  0FF2  0021               	movlb	1	; select bank1
 14413  0FF3  00E3               	movwf	_alarmPWMStart^(0+128)
 14414  0FF4                     l6490:
 14415                           
 14416                           ;main.c: 612: };main.c: 614: tempAlarm.triggered = 1;
 14417  0FF4  01CB               	clrf	(_tempAlarm^(0+128)+2)
 14418  0FF5  0ACB               	incf	(_tempAlarm^(0+128)+2),f
 14419  0FF6                     l6492:
 14420                           
 14421                           ;main.c: 616: tempAlarm.trigger = 1;
 14422  0FF6  01CA               	clrf	(_tempAlarm^(0+128)+1)
 14423  0FF7  0ACA               	incf	(_tempAlarm^(0+128)+1),f
 14424  0FF8                     l6494:
 14425  0FF8  0020               	movlb	0	; select bank0
 14426  0FF9  1696               	bsf	22,5	;volatile
 14427  0FFA  2FFF               	goto	l1353
 14428  0FFB                     l6496:
 14429                           
 14430                           ;main.c: 620: tempAlarm.triggered = 0;
 14431  0FFB  0021               	movlb	1	; select bank1
 14432  0FFC  01CB               	clrf	(_tempAlarm^(0+128)+2)
 14433  0FFD                     l6498:
 14434  0FFD  0020               	movlb	0	; select bank0
 14435  0FFE  1296               	bcf	22,5	;volatile
 14436  0FFF                     l1353:
 14437  0FFF  0008               	return
 14438  1000                     __end_of_monitoring_TEMP_LUM:
 14439                           
 14440                           	psect	text25
 14441  0D66                     __ptext25:	
 14442 ;; *************** function _tsttc *****************
 14443 ;; Defined at:
 14444 ;;		line 195 in file "main.c"
 14445 ;; Parameters:    Size  Location     Type
 14446 ;;		None
 14447 ;; Auto vars:     Size  Location     Type
 14448 ;;  value           1    5[COMMON] unsigned char 
 14449 ;; Return value:  Size  Location     Type
 14450 ;;                  1    wreg      unsigned char 
 14451 ;; Registers used:
 14452 ;;		wreg, status,2, status,0, pclath, cstack
 14453 ;; Tracked objects:
 14454 ;;		On entry : 0/0
 14455 ;;		On exit  : 0/0
 14456 ;;		Unchanged: 0/0
 14457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14461 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;Total ram usage:        2 bytes
 14463 ;; Hardware stack levels used:    1
 14464 ;; Hardware stack levels required when called:    5
 14465 ;; This function calls:
 14466 ;;		_ReadI2C
 14467 ;;		_WriteI2C
 14468 ;; This function is called by:
 14469 ;;		_monitoring_TEMP_LUM
 14470 ;; This function uses a non-reentrant model
 14471 ;;
 14472                           
 14473                           
 14474                           ;psect for function _tsttc
 14475  0D66                     _tsttc:
 14476  0D66                     l1014:	
 14477                           ;incstack = 0
 14478                           ; Regs used in _tsttc: [wreg+status,2+status,0+pclath+cstack]
 14479                           ;main.c: 197: unsigned char value;;main.c: 198: do{
 14480                           
 14481  0D66                     l6124:	
 14482                           ;main.c: 199: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14483                           
 14484  0D66  0023               	movlb	3	; select bank3
 14485  0D67  0C0F               	rrf	15,w	;volatile
 14486  0D68  0C89               	rrf	9,f
 14487  0D69  3901               	andlw	1
 14488  0D6A  00F4               	movwf	??_tsttc
 14489  0D6B  0811               	movf	17,w	;volatile
 14490  0D6C  391F               	andlw	31
 14491  0D6D  0474               	iorwf	??_tsttc,w
 14492  0D6E  1D03               	btfss	3,2
 14493  0D6F  2D71               	goto	u6341
 14494  0D70  2D72               	goto	u6340
 14495  0D71                     u6341:
 14496  0D71  2D66               	goto	l6124
 14497  0D72                     u6340:
 14498  0D72                     l1017:
 14499                           
 14500                           ;main.c: 200: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14501  0D72  1411               	bsf	17,0	;volatile
 14502  0D73                     l1018:
 14503  0D73  1811               	btfsc	17,0	;volatile
 14504  0D74  2D76               	goto	u6351
 14505  0D75  2D77               	goto	u6350
 14506  0D76                     u6351:
 14507  0D76  2D73               	goto	l1018
 14508  0D77                     u6350:
 14509  0D77                     l6126:
 14510  0D77  0C0F               	rrf	15,w	;volatile
 14511  0D78  0C89               	rrf	9,f
 14512  0D79  3901               	andlw	1
 14513  0D7A  00F4               	movwf	??_tsttc
 14514  0D7B  0811               	movf	17,w	;volatile
 14515  0D7C  391F               	andlw	31
 14516  0D7D  0474               	iorwf	??_tsttc,w
 14517  0D7E  1D03               	btfss	3,2
 14518  0D7F  2D81               	goto	u6361
 14519  0D80  2D82               	goto	u6360
 14520  0D81                     u6361:
 14521  0D81  2D77               	goto	l6126
 14522  0D82                     u6360:
 14523  0D82                     l6128:
 14524                           
 14525                           ;main.c: 202: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14526  0D82  309A               	movlw	154
 14527  0D83  3188  2094  318D   	fcall	_WriteI2C
 14528  0D86                     l6130:
 14529  0D86  0023               	movlb	3	; select bank3
 14530  0D87  0C0F               	rrf	15,w	;volatile
 14531  0D88  0C89               	rrf	9,f
 14532  0D89  3901               	andlw	1
 14533  0D8A  00F4               	movwf	??_tsttc
 14534  0D8B  0811               	movf	17,w	;volatile
 14535  0D8C  391F               	andlw	31
 14536  0D8D  0474               	iorwf	??_tsttc,w
 14537  0D8E  1D03               	btfss	3,2
 14538  0D8F  2D91               	goto	u6371
 14539  0D90  2D92               	goto	u6370
 14540  0D91                     u6371:
 14541  0D91  2D86               	goto	l6130
 14542  0D92                     u6370:
 14543  0D92                     l6132:
 14544                           
 14545                           ;main.c: 203: WriteI2C(0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14546  0D92  3001               	movlw	1
 14547  0D93  3188  2094  318D   	fcall	_WriteI2C
 14548  0D96                     l6134:
 14549  0D96  0023               	movlb	3	; select bank3
 14550  0D97  0C0F               	rrf	15,w	;volatile
 14551  0D98  0C89               	rrf	9,f
 14552  0D99  3901               	andlw	1
 14553  0D9A  00F4               	movwf	??_tsttc
 14554  0D9B  0811               	movf	17,w	;volatile
 14555  0D9C  391F               	andlw	31
 14556  0D9D  0474               	iorwf	??_tsttc,w
 14557  0D9E  1D03               	btfss	3,2
 14558  0D9F  2DA1               	goto	u6381
 14559  0DA0  2DA2               	goto	u6380
 14560  0DA1                     u6381:
 14561  0DA1  2D96               	goto	l6134
 14562  0DA2                     u6380:
 14563  0DA2                     l1029:
 14564                           
 14565                           ;main.c: 204: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 14566  0DA2  1491               	bsf	17,1	;volatile
 14567  0DA3                     l1030:
 14568  0DA3  1891               	btfsc	17,1	;volatile
 14569  0DA4  2DA6               	goto	u6391
 14570  0DA5  2DA7               	goto	u6390
 14571  0DA6                     u6391:
 14572  0DA6  2DA3               	goto	l1030
 14573  0DA7                     u6390:
 14574  0DA7                     l6136:
 14575  0DA7  0C0F               	rrf	15,w	;volatile
 14576  0DA8  0C89               	rrf	9,f
 14577  0DA9  3901               	andlw	1
 14578  0DAA  00F4               	movwf	??_tsttc
 14579  0DAB  0811               	movf	17,w	;volatile
 14580  0DAC  391F               	andlw	31
 14581  0DAD  0474               	iorwf	??_tsttc,w
 14582  0DAE  1D03               	btfss	3,2
 14583  0DAF  2DB1               	goto	u6401
 14584  0DB0  2DB2               	goto	u6400
 14585  0DB1                     u6401:
 14586  0DB1  2DA7               	goto	l6136
 14587  0DB2                     u6400:
 14588  0DB2                     l6138:
 14589                           
 14590                           ;main.c: 205: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14591  0DB2  309B               	movlw	155
 14592  0DB3  3188  2094  318D   	fcall	_WriteI2C
 14593  0DB6                     l6140:
 14594  0DB6  0023               	movlb	3	; select bank3
 14595  0DB7  0C0F               	rrf	15,w	;volatile
 14596  0DB8  0C89               	rrf	9,f
 14597  0DB9  3901               	andlw	1
 14598  0DBA  00F4               	movwf	??_tsttc
 14599  0DBB  0811               	movf	17,w	;volatile
 14600  0DBC  391F               	andlw	31
 14601  0DBD  0474               	iorwf	??_tsttc,w
 14602  0DBE  1D03               	btfss	3,2
 14603  0DBF  2DC1               	goto	u6411
 14604  0DC0  2DC2               	goto	u6410
 14605  0DC1                     u6411:
 14606  0DC1  2DB6               	goto	l6140
 14607  0DC2                     u6410:
 14608  0DC2                     l6142:
 14609                           
 14610                           ;main.c: 206: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14611  0DC2  3193  2352  318D   	fcall	_ReadI2C
 14612  0DC5  00F4               	movwf	??_tsttc
 14613  0DC6  0874               	movf	??_tsttc,w
 14614  0DC7  00F5               	movwf	tsttc@value
 14615  0DC8                     l6144:
 14616  0DC8  0023               	movlb	3	; select bank3
 14617  0DC9  0C0F               	rrf	15,w	;volatile
 14618  0DCA  0C89               	rrf	9,f
 14619  0DCB  3901               	andlw	1
 14620  0DCC  00F4               	movwf	??_tsttc
 14621  0DCD  0811               	movf	17,w	;volatile
 14622  0DCE  391F               	andlw	31
 14623  0DCF  0474               	iorwf	??_tsttc,w
 14624  0DD0  1D03               	btfss	3,2
 14625  0DD1  2DD3               	goto	u6421
 14626  0DD2  2DD4               	goto	u6420
 14627  0DD3                     u6421:
 14628  0DD3  2DC8               	goto	l6144
 14629  0DD4                     u6420:
 14630  0DD4                     l1041:
 14631                           
 14632                           ;main.c: 207: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14633  0DD4  1691               	bsf	17,5	;volatile
 14634  0DD5  1611               	bsf	17,4	;volatile
 14635  0DD6                     l1042:
 14636  0DD6  1A11               	btfsc	17,4	;volatile
 14637  0DD7  2DD9               	goto	u6431
 14638  0DD8  2DDA               	goto	u6430
 14639  0DD9                     u6431:
 14640  0DD9  2DD6               	goto	l1042
 14641  0DDA                     u6430:
 14642  0DDA                     l6146:
 14643  0DDA  0C0F               	rrf	15,w	;volatile
 14644  0DDB  0C89               	rrf	9,f
 14645  0DDC  3901               	andlw	1
 14646  0DDD  00F4               	movwf	??_tsttc
 14647  0DDE  0811               	movf	17,w	;volatile
 14648  0DDF  391F               	andlw	31
 14649  0DE0  0474               	iorwf	??_tsttc,w
 14650  0DE1  1D03               	btfss	3,2
 14651  0DE2  2DE4               	goto	u6441
 14652  0DE3  2DE5               	goto	u6440
 14653  0DE4                     u6441:
 14654  0DE4  2DDA               	goto	l6146
 14655  0DE5                     u6440:
 14656  0DE5                     l1047:
 14657                           
 14658                           ;main.c: 208: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 14659  0DE5  1511               	bsf	17,2	;volatile
 14660  0DE6                     l1048:
 14661  0DE6  1911               	btfsc	17,2	;volatile
 14662  0DE7  2DE9               	goto	u6451
 14663  0DE8  2DEA               	goto	u6450
 14664  0DE9                     u6451:
 14665  0DE9  2DE6               	goto	l1048
 14666  0DEA                     u6450:
 14667  0DEA                     l1050:
 14668                           
 14669                           ;main.c: 209: } while (!(value & 0x40));
 14670  0DEA  1F75               	btfss	tsttc@value,6
 14671  0DEB  2DED               	goto	u6461
 14672  0DEC  2DEE               	goto	u6460
 14673  0DED                     u6461:
 14674  0DED  2D66               	goto	l1014
 14675  0DEE                     u6460:
 14676  0DEE                     l6148:
 14677  0DEE  0C0F               	rrf	15,w	;volatile
 14678  0DEF  0C89               	rrf	9,f
 14679  0DF0  3901               	andlw	1
 14680  0DF1  00F4               	movwf	??_tsttc
 14681  0DF2  0811               	movf	17,w	;volatile
 14682  0DF3  391F               	andlw	31
 14683  0DF4  0474               	iorwf	??_tsttc,w
 14684  0DF5  1D03               	btfss	3,2
 14685  0DF6  2DF8               	goto	u6471
 14686  0DF7  2DF9               	goto	u6470
 14687  0DF8                     u6471:
 14688  0DF8  2DEE               	goto	l6148
 14689  0DF9                     u6470:
 14690  0DF9                     l1054:
 14691                           
 14692                           ;main.c: 212: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14693  0DF9  1411               	bsf	17,0	;volatile
 14694  0DFA                     l1055:
 14695  0DFA  1811               	btfsc	17,0	;volatile
 14696  0DFB  2DFD               	goto	u6481
 14697  0DFC  2DFE               	goto	u6480
 14698  0DFD                     u6481:
 14699  0DFD  2DFA               	goto	l1055
 14700  0DFE                     u6480:
 14701  0DFE                     l6150:
 14702  0DFE  0C0F               	rrf	15,w	;volatile
 14703  0DFF  0C89               	rrf	9,f
 14704  0E00  3901               	andlw	1
 14705  0E01  00F4               	movwf	??_tsttc
 14706  0E02  0811               	movf	17,w	;volatile
 14707  0E03  391F               	andlw	31
 14708  0E04  0474               	iorwf	??_tsttc,w
 14709  0E05  1D03               	btfss	3,2
 14710  0E06  2E08               	goto	u6491
 14711  0E07  2E09               	goto	u6490
 14712  0E08                     u6491:
 14713  0E08  2DFE               	goto	l6150
 14714  0E09                     u6490:
 14715  0E09                     l6152:
 14716                           
 14717                           ;main.c: 213: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14718  0E09  309A               	movlw	154
 14719  0E0A  3188  2094  318D   	fcall	_WriteI2C
 14720  0E0D                     l6154:
 14721  0E0D  0023               	movlb	3	; select bank3
 14722  0E0E  0C0F               	rrf	15,w	;volatile
 14723  0E0F  0C89               	rrf	9,f
 14724  0E10  3901               	andlw	1
 14725  0E11  00F4               	movwf	??_tsttc
 14726  0E12  0811               	movf	17,w	;volatile
 14727  0E13  391F               	andlw	31
 14728  0E14  0474               	iorwf	??_tsttc,w
 14729  0E15  1D03               	btfss	3,2
 14730  0E16  2E18               	goto	u6501
 14731  0E17  2E19               	goto	u6500
 14732  0E18                     u6501:
 14733  0E18  2E0D               	goto	l6154
 14734  0E19                     u6500:
 14735  0E19                     l6156:
 14736                           
 14737                           ;main.c: 214: WriteI2C(0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14738  0E19  3000               	movlw	0
 14739  0E1A  3188  2094  318D   	fcall	_WriteI2C
 14740  0E1D                     l6158:
 14741  0E1D  0023               	movlb	3	; select bank3
 14742  0E1E  0C0F               	rrf	15,w	;volatile
 14743  0E1F  0C89               	rrf	9,f
 14744  0E20  3901               	andlw	1
 14745  0E21  00F4               	movwf	??_tsttc
 14746  0E22  0811               	movf	17,w	;volatile
 14747  0E23  391F               	andlw	31
 14748  0E24  0474               	iorwf	??_tsttc,w
 14749  0E25  1D03               	btfss	3,2
 14750  0E26  2E28               	goto	u6511
 14751  0E27  2E29               	goto	u6510
 14752  0E28                     u6511:
 14753  0E28  2E1D               	goto	l6158
 14754  0E29                     u6510:
 14755  0E29                     l1066:
 14756                           
 14757                           ;main.c: 215: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 14758  0E29  1491               	bsf	17,1	;volatile
 14759  0E2A                     l1067:
 14760  0E2A  1891               	btfsc	17,1	;volatile
 14761  0E2B  2E2D               	goto	u6521
 14762  0E2C  2E2E               	goto	u6520
 14763  0E2D                     u6521:
 14764  0E2D  2E2A               	goto	l1067
 14765  0E2E                     u6520:
 14766  0E2E                     l6160:
 14767  0E2E  0C0F               	rrf	15,w	;volatile
 14768  0E2F  0C89               	rrf	9,f
 14769  0E30  3901               	andlw	1
 14770  0E31  00F4               	movwf	??_tsttc
 14771  0E32  0811               	movf	17,w	;volatile
 14772  0E33  391F               	andlw	31
 14773  0E34  0474               	iorwf	??_tsttc,w
 14774  0E35  1D03               	btfss	3,2
 14775  0E36  2E38               	goto	u6531
 14776  0E37  2E39               	goto	u6530
 14777  0E38                     u6531:
 14778  0E38  2E2E               	goto	l6160
 14779  0E39                     u6530:
 14780  0E39                     l6162:
 14781                           
 14782                           ;main.c: 216: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14783  0E39  309B               	movlw	155
 14784  0E3A  3188  2094  318D   	fcall	_WriteI2C
 14785  0E3D                     l6164:
 14786  0E3D  0023               	movlb	3	; select bank3
 14787  0E3E  0C0F               	rrf	15,w	;volatile
 14788  0E3F  0C89               	rrf	9,f
 14789  0E40  3901               	andlw	1
 14790  0E41  00F4               	movwf	??_tsttc
 14791  0E42  0811               	movf	17,w	;volatile
 14792  0E43  391F               	andlw	31
 14793  0E44  0474               	iorwf	??_tsttc,w
 14794  0E45  1D03               	btfss	3,2
 14795  0E46  2E48               	goto	u6541
 14796  0E47  2E49               	goto	u6540
 14797  0E48                     u6541:
 14798  0E48  2E3D               	goto	l6164
 14799  0E49                     u6540:
 14800  0E49                     l6166:
 14801                           
 14802                           ;main.c: 217: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14803  0E49  3193  2352  318D   	fcall	_ReadI2C
 14804  0E4C  00F4               	movwf	??_tsttc
 14805  0E4D  0874               	movf	??_tsttc,w
 14806  0E4E  00F5               	movwf	tsttc@value
 14807  0E4F                     l6168:
 14808  0E4F  0023               	movlb	3	; select bank3
 14809  0E50  0C0F               	rrf	15,w	;volatile
 14810  0E51  0C89               	rrf	9,f
 14811  0E52  3901               	andlw	1
 14812  0E53  00F4               	movwf	??_tsttc
 14813  0E54  0811               	movf	17,w	;volatile
 14814  0E55  391F               	andlw	31
 14815  0E56  0474               	iorwf	??_tsttc,w
 14816  0E57  1D03               	btfss	3,2
 14817  0E58  2E5A               	goto	u6551
 14818  0E59  2E5B               	goto	u6550
 14819  0E5A                     u6551:
 14820  0E5A  2E4F               	goto	l6168
 14821  0E5B                     u6550:
 14822  0E5B                     l1078:
 14823                           
 14824                           ;main.c: 218: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14825  0E5B  1691               	bsf	17,5	;volatile
 14826  0E5C  1611               	bsf	17,4	;volatile
 14827  0E5D                     l1079:
 14828  0E5D  1A11               	btfsc	17,4	;volatile
 14829  0E5E  2E60               	goto	u6561
 14830  0E5F  2E61               	goto	u6560
 14831  0E60                     u6561:
 14832  0E60  2E5D               	goto	l1079
 14833  0E61                     u6560:
 14834  0E61                     l6170:
 14835  0E61  0C0F               	rrf	15,w	;volatile
 14836  0E62  0C89               	rrf	9,f
 14837  0E63  3901               	andlw	1
 14838  0E64  00F4               	movwf	??_tsttc
 14839  0E65  0811               	movf	17,w	;volatile
 14840  0E66  391F               	andlw	31
 14841  0E67  0474               	iorwf	??_tsttc,w
 14842  0E68  1D03               	btfss	3,2
 14843  0E69  2E6B               	goto	u6571
 14844  0E6A  2E6C               	goto	u6570
 14845  0E6B                     u6571:
 14846  0E6B  2E61               	goto	l6170
 14847  0E6C                     u6570:
 14848  0E6C                     l1084:
 14849                           
 14850                           ;main.c: 219: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 14851  0E6C  1511               	bsf	17,2	;volatile
 14852  0E6D                     l1085:
 14853  0E6D  1911               	btfsc	17,2	;volatile
 14854  0E6E  2E70               	goto	u6581
 14855  0E6F  2E71               	goto	u6580
 14856  0E70                     u6581:
 14857  0E70  2E6D               	goto	l1085
 14858  0E71                     u6580:
 14859  0E71                     l6172:
 14860                           
 14861                           ;main.c: 221: return value;
 14862  0E71  0875               	movf	tsttc@value,w
 14863  0E72                     l1088:
 14864  0E72  0008               	return
 14865  0E73                     __end_of_tsttc:
 14866                           
 14867                           	psect	text26
 14868  1352                     __ptext26:	
 14869 ;; *************** function _ReadI2C *****************
 14870 ;; Defined at:
 14871 ;;		line 32 in file "I2C/i2c.c"
 14872 ;; Parameters:    Size  Location     Type
 14873 ;;		None
 14874 ;; Auto vars:     Size  Location     Type
 14875 ;;		None
 14876 ;; Return value:  Size  Location     Type
 14877 ;;                  1    wreg      unsigned char 
 14878 ;; Registers used:
 14879 ;;		wreg, status,2, status,0
 14880 ;; Tracked objects:
 14881 ;;		On entry : 0/0
 14882 ;;		On exit  : 0/0
 14883 ;;		Unchanged: 0/0
 14884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;Total ram usage:        1 bytes
 14890 ;; Hardware stack levels used:    1
 14891 ;; Hardware stack levels required when called:    4
 14892 ;; This function calls:
 14893 ;;		Nothing
 14894 ;; This function is called by:
 14895 ;;		_tsttc
 14896 ;;		_LCDrecv
 14897 ;; This function uses a non-reentrant model
 14898 ;;
 14899                           
 14900                           
 14901                           ;psect for function _ReadI2C
 14902  1352                     _ReadI2C:
 14903  1352                     l4392:	
 14904                           ;incstack = 0
 14905                           ; Regs used in _ReadI2C: [wreg+status,2+status,0]
 14906                           
 14907                           
 14908                           ;i2c.c: 34: if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 14909  1352  300F               	movlw	15
 14910  1353  0023               	movlb	3	; select bank3
 14911  1354  0510               	andwf	16,w	;volatile
 14912  1355  00F2               	movwf	??_ReadI2C
 14913  1356  3008               	movlw	8
 14914  1357  0672               	xorwf	??_ReadI2C,w
 14915  1358  1903               	btfsc	3,2
 14916  1359  2B5B               	goto	u3271
 14917  135A  2B5C               	goto	u3270
 14918  135B                     u3271:
 14919  135B  2B65               	goto	l22
 14920  135C                     u3270:
 14921  135C                     l4394:
 14922  135C  300F               	movlw	15
 14923  135D  0510               	andwf	16,w	;volatile
 14924  135E  00F2               	movwf	??_ReadI2C
 14925  135F  300B               	movlw	11
 14926  1360  0672               	xorwf	??_ReadI2C,w
 14927  1361  1D03               	btfss	3,2
 14928  1362  2B64               	goto	u3281
 14929  1363  2B65               	goto	u3280
 14930  1364                     u3281:
 14931  1364  2B66               	goto	l23
 14932  1365                     u3280:
 14933  1365                     l22:
 14934                           
 14935                           ;i2c.c: 35: SSP1CON2bits.RCEN = 1;
 14936  1365  1591               	bsf	17,3	;volatile
 14937  1366                     l23:
 14938  1366  1C0F               	btfss	15,0	;volatile
 14939  1367  2B69               	goto	u3291
 14940  1368  2B6A               	goto	u3290
 14941  1369                     u3291:
 14942  1369  2B66               	goto	l23
 14943  136A                     u3290:
 14944  136A                     l4396:
 14945                           
 14946                           ;i2c.c: 37: return ( SSP1BUF );
 14947  136A  080C               	movf	12,w	;volatile
 14948  136B                     l26:
 14949  136B  0008               	return
 14950  136C                     __end_of_ReadI2C:
 14951                           
 14952                           	psect	text27
 14953  14BD                     __ptext27:	
 14954 ;; *************** function _DATAEE_WriteByte *****************
 14955 ;; Defined at:
 14956 ;;		line 180 in file "mcc_generated_files/memory.c"
 14957 ;; Parameters:    Size  Location     Type
 14958 ;;  bAdd            2    0[BANK0 ] unsigned int 
 14959 ;;  bData           1    2[BANK0 ] unsigned char 
 14960 ;; Auto vars:     Size  Location     Type
 14961 ;;  GIEBitValue     1    8[COMMON] unsigned char 
 14962 ;; Return value:  Size  Location     Type
 14963 ;;                  1    wreg      void 
 14964 ;; Registers used:
 14965 ;;		wreg, status,2, status,0
 14966 ;; Tracked objects:
 14967 ;;		On entry : 0/0
 14968 ;;		On exit  : 0/0
 14969 ;;		Unchanged: 0/0
 14970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14971 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;Total ram usage:        4 bytes
 14976 ;; Hardware stack levels used:    1
 14977 ;; Hardware stack levels required when called:    4
 14978 ;; This function calls:
 14979 ;;		Nothing
 14980 ;; This function is called by:
 14981 ;;		_wirteEEPROMinit
 14982 ;;		_monitoring_TEMP_LUM
 14983 ;;		_main
 14984 ;; This function uses a non-reentrant model
 14985 ;;
 14986                           
 14987                           
 14988                           ;psect for function _DATAEE_WriteByte
 14989  14BD                     _DATAEE_WriteByte:
 14990  14BD                     l6102:	
 14991                           ;incstack = 0
 14992                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 14993                           
 14994                           
 14995                           ;memory.c: 182: uint8_t GIEBitValue = INTCONbits.GIE;
 14996  14BD  3000               	movlw	0
 14997  14BE  1B8B               	btfsc	11,7	;volatile
 14998  14BF  3001               	movlw	1
 14999  14C0  00F8               	movwf	DATAEE_WriteByte@GIEBitValue
 15000                           
 15001                           ;memory.c: 184: NVMADRH = ((bAdd >> 8) & 0xFF);
 15002  14C1  0020               	movlb	0	; select bank0
 15003  14C2  0821               	movf	DATAEE_WriteByte@bAdd+1,w
 15004  14C3  0030               	movlb	16	; select bank16
 15005  14C4  009B               	movwf	27	;volatile
 15006  14C5                     l6104:
 15007                           
 15008                           ;memory.c: 185: NVMADRL = (bAdd & 0xFF);
 15009  14C5  0020               	movlb	0	; select bank0
 15010  14C6  0820               	movf	DATAEE_WriteByte@bAdd,w
 15011  14C7  0030               	movlb	16	; select bank16
 15012  14C8  009A               	movwf	26	;volatile
 15013  14C9                     l6106:
 15014                           
 15015                           ;memory.c: 186: NVMDATL = bData;
 15016  14C9  0020               	movlb	0	; select bank0
 15017  14CA  0822               	movf	DATAEE_WriteByte@bData,w
 15018  14CB  0030               	movlb	16	; select bank16
 15019  14CC  009C               	movwf	28	;volatile
 15020  14CD                     l6108:
 15021                           
 15022                           ;memory.c: 187: NVMCON1bits.NVMREGS = 1;
 15023  14CD  171E               	bsf	30,6	;volsfr
 15024  14CE                     l6110:
 15025                           
 15026                           ;memory.c: 188: NVMCON1bits.WREN = 1;
 15027  14CE  151E               	bsf	30,2	;volsfr
 15028  14CF                     l6112:
 15029                           
 15030                           ;memory.c: 189: INTCONbits.GIE = 0;
 15031  14CF  138B               	bcf	11,7	;volatile
 15032  14D0                     l6114:
 15033                           
 15034                           ;memory.c: 190: NVMCON2 = 0x55;
 15035  14D0  3055               	movlw	85
 15036  14D1  009F               	movwf	31	;volsfr
 15037  14D2                     l6116:
 15038                           
 15039                           ;memory.c: 191: NVMCON2 = 0xAA;
 15040  14D2  30AA               	movlw	170
 15041  14D3  009F               	movwf	31	;volsfr
 15042  14D4                     l6118:
 15043                           
 15044                           ;memory.c: 192: NVMCON1bits.WR = 1;
 15045  14D4  149E               	bsf	30,1	;volsfr
 15046  14D5                     l728:	
 15047                           ;memory.c: 195: {
 15048                           
 15049  14D5  189E               	btfsc	30,1	;volsfr
 15050  14D6  2CD8               	goto	u6331
 15051  14D7  2CD9               	goto	u6330
 15052  14D8                     u6331:
 15053  14D8  2CD5               	goto	l728
 15054  14D9                     u6330:
 15055  14D9                     l730:
 15056                           
 15057                           ;memory.c: 196: };memory.c: 198: NVMCON1bits.WREN = 0;
 15058  14D9  111E               	bcf	30,2	;volsfr
 15059  14DA                     l6120:
 15060                           
 15061                           ;memory.c: 199: INTCONbits.GIE = GIEBitValue;
 15062  14DA  0C78               	rrf	DATAEE_WriteByte@GIEBitValue,w
 15063  14DB  1C03               	skipc
 15064  14DC  138B               	bcf	11,7	;volatile
 15065  14DD  1803               	skipnc
 15066  14DE  178B               	bsf	11,7	;volatile
 15067  14DF                     l731:
 15068  14DF  0008               	return
 15069  14E0                     __end_of_DATAEE_WriteByte:
 15070                           
 15071                           	psect	text28
 15072  12B9                     __ptext28:	
 15073 ;; *************** function _ADCC_GetSingleConversion *****************
 15074 ;; Defined at:
 15075 ;;		line 130 in file "mcc_generated_files/adcc.c"
 15076 ;; Parameters:    Size  Location     Type
 15077 ;;  channel         1    wreg     enum E12086
 15078 ;; Auto vars:     Size  Location     Type
 15079 ;;  channel         1    5[COMMON] enum E12086
 15080 ;; Return value:  Size  Location     Type
 15081 ;;                  2    2[COMMON] unsigned int 
 15082 ;; Registers used:
 15083 ;;		wreg
 15084 ;; Tracked objects:
 15085 ;;		On entry : 0/0
 15086 ;;		On exit  : 0/0
 15087 ;;		Unchanged: 0/0
 15088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15089 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15092 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15093 ;;Total ram usage:        4 bytes
 15094 ;; Hardware stack levels used:    1
 15095 ;; Hardware stack levels required when called:    4
 15096 ;; This function calls:
 15097 ;;		Nothing
 15098 ;; This function is called by:
 15099 ;;		_monitoring_TEMP_LUM
 15100 ;; This function uses a non-reentrant model
 15101 ;;
 15102                           
 15103                           
 15104                           ;psect for function _ADCC_GetSingleConversion
 15105  12B9                     _ADCC_GetSingleConversion:
 15106                           
 15107                           ;incstack = 0
 15108                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 15109                           ;ADCC_GetSingleConversion@channel stored from wreg
 15110  12B9  00F5               	movwf	ADCC_GetSingleConversion@channel
 15111  12BA                     l4496:
 15112                           
 15113                           ;adcc.c: 133: ADPCH = channel;
 15114  12BA  0875               	movf	ADCC_GetSingleConversion@channel,w
 15115  12BB  0021               	movlb	1	; select bank1
 15116  12BC  009E               	movwf	30	;volatile
 15117  12BD                     l4498:
 15118                           
 15119                           ;adcc.c: 136: ADCON0bits.ADON = 1;
 15120  12BD  1793               	bsf	19,7	;volatile
 15121  12BE                     l4500:
 15122                           
 15123                           ;adcc.c: 139: ADCON0bits.ADCONT = 0;
 15124  12BE  1313               	bcf	19,6	;volatile
 15125  12BF                     l4502:
 15126                           
 15127                           ;adcc.c: 142: ADCON0bits.ADGO = 1;
 15128  12BF  1413               	bsf	19,0	;volatile
 15129  12C0                     l4504:
 15130                           
 15131                           ;adcc.c: 145: __nop();
 15132  12C0  0000               	nop
 15133  12C1                     l537:	
 15134                           ;adcc.c: 149: {
 15135                           
 15136  12C1  0021               	movlb	1	; select bank1
 15137  12C2  1813               	btfsc	19,0	;volatile
 15138  12C3  2AC5               	goto	u3521
 15139  12C4  2AC6               	goto	u3520
 15140  12C5                     u3521:
 15141  12C5  2AC1               	goto	l537
 15142  12C6                     u3520:
 15143  12C6                     l4506:
 15144                           
 15145                           ;adcc.c: 150: };adcc.c: 154: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 15146  12C6  080D               	movf	13,w	;volatile
 15147  12C7  00F3               	movwf	?_ADCC_GetSingleConversion+1
 15148  12C8  080C               	movf	12,w	;volatile
 15149  12C9  00F2               	movwf	?_ADCC_GetSingleConversion
 15150  12CA                     l540:
 15151  12CA  0008               	return
 15152  12CB                     __end_of_ADCC_GetSingleConversion:
 15153                           
 15154                           	psect	text29
 15155  11FA                     __ptext29:	
 15156 ;; *************** function _TMR2_StartTimer *****************
 15157 ;; Defined at:
 15158 ;;		line 106 in file "mcc_generated_files/tmr2.c"
 15159 ;; Parameters:    Size  Location     Type
 15160 ;;		None
 15161 ;; Auto vars:     Size  Location     Type
 15162 ;;		None
 15163 ;; Return value:  Size  Location     Type
 15164 ;;                  1    wreg      void 
 15165 ;; Registers used:
 15166 ;;		status,2, status,0, pclath, cstack
 15167 ;; Tracked objects:
 15168 ;;		On entry : 0/0
 15169 ;;		On exit  : 0/0
 15170 ;;		Unchanged: 0/0
 15171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15176 ;;Total ram usage:        0 bytes
 15177 ;; Hardware stack levels used:    1
 15178 ;; Hardware stack levels required when called:    5
 15179 ;; This function calls:
 15180 ;;		_TMR2_Start
 15181 ;; This function is called by:
 15182 ;;		_checkFlags
 15183 ;; This function uses a non-reentrant model
 15184 ;;
 15185                           
 15186                           
 15187                           ;psect for function _TMR2_StartTimer
 15188  11FA                     _TMR2_StartTimer:
 15189  11FA                     l4726:	
 15190                           ;incstack = 0
 15191                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
 15192                           
 15193                           
 15194                           ;tmr2.c: 108: TMR2_Start();
 15195  11FA  3191  21F1  3191   	fcall	_TMR2_Start
 15196  11FD                     l659:
 15197  11FD  0008               	return
 15198  11FE                     __end_of_TMR2_StartTimer:
 15199                           
 15200                           	psect	text30
 15201  11F1                     __ptext30:	
 15202 ;; *************** function _TMR2_Start *****************
 15203 ;; Defined at:
 15204 ;;		line 100 in file "mcc_generated_files/tmr2.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;		None
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;		None
 15209 ;; Return value:  Size  Location     Type
 15210 ;;                  1    wreg      void 
 15211 ;; Registers used:
 15212 ;;		None
 15213 ;; Tracked objects:
 15214 ;;		On entry : 0/0
 15215 ;;		On exit  : 0/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;Total ram usage:        0 bytes
 15223 ;; Hardware stack levels used:    1
 15224 ;; Hardware stack levels required when called:    4
 15225 ;; This function calls:
 15226 ;;		Nothing
 15227 ;; This function is called by:
 15228 ;;		_TMR2_StartTimer
 15229 ;; This function uses a non-reentrant model
 15230 ;;
 15231                           
 15232                           
 15233                           ;psect for function _TMR2_Start
 15234  11F1                     _TMR2_Start:
 15235  11F1                     l4512:	
 15236                           ;incstack = 0
 15237                           ; Regs used in _TMR2_Start: []
 15238                           
 15239                           
 15240                           ;tmr2.c: 103: T2CONbits.TMR2ON = 1;
 15241  11F1  0025               	movlb	5	; select bank5
 15242  11F2  178E               	bsf	14,7	;volatile
 15243  11F3                     l656:
 15244  11F3  0008               	return
 15245  11F4                     __end_of_TMR2_Start:
 15246                           
 15247                           	psect	text31
 15248  08DF                     __ptext31:	
 15249 ;; *************** function _S1button *****************
 15250 ;; Defined at:
 15251 ;;		line 626 in file "main.c"
 15252 ;; Parameters:    Size  Location     Type
 15253 ;;		None
 15254 ;; Auto vars:     Size  Location     Type
 15255 ;;		None
 15256 ;; Return value:  Size  Location     Type
 15257 ;;                  1    wreg      void 
 15258 ;; Registers used:
 15259 ;;		wreg, status,2, status,0
 15260 ;; Tracked objects:
 15261 ;;		On entry : 0/0
 15262 ;;		On exit  : 0/0
 15263 ;;		Unchanged: 0/0
 15264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;Total ram usage:        1 bytes
 15270 ;; Hardware stack levels used:    1
 15271 ;; Hardware stack levels required when called:    4
 15272 ;; This function calls:
 15273 ;;		Nothing
 15274 ;; This function is called by:
 15275 ;;		_checkFlags
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           
 15280                           ;psect for function _S1button
 15281  08DF                     _S1button:
 15282  08DF                     l4942:	
 15283                           ;incstack = 0
 15284                           ; Regs used in _S1button: [wreg+status,2+status,0]
 15285                           
 15286                           
 15287                           ;main.c: 628: if(modeFlag == 0 && (clkAlarm.trigger || tempAlarm.trigger || lumAlarm.tri
      +                          gger)){
 15288  08DF  0020               	movlb	0	; select bank0
 15289  08E0  085C               	movf	_modeFlag,w
 15290  08E1  045D               	iorwf	_modeFlag+1,w
 15291  08E2  1D03               	btfss	3,2
 15292  08E3  28E5               	goto	u4441
 15293  08E4  28E6               	goto	u4440
 15294  08E5                     u4441:
 15295  08E5  28FE               	goto	l4954
 15296  08E6                     u4440:
 15297  08E6                     l4944:
 15298  08E6  0858               	movf	_clkAlarm+3,w
 15299  08E7  1D03               	btfss	3,2
 15300  08E8  28EA               	goto	u4451
 15301  08E9  28EB               	goto	u4450
 15302  08EA                     u4451:
 15303  08EA  28F6               	goto	l4950
 15304  08EB                     u4450:
 15305  08EB                     l4946:
 15306  08EB  0021               	movlb	1	; select bank1
 15307  08EC  084A               	movf	(_tempAlarm^(0+128)+1),w
 15308  08ED  1D03               	btfss	3,2
 15309  08EE  28F0               	goto	u4461
 15310  08EF  28F1               	goto	u4460
 15311  08F0                     u4461:
 15312  08F0  28F6               	goto	l4950
 15313  08F1                     u4460:
 15314  08F1                     l4948:
 15315  08F1  0847               	movf	(_lumAlarm^(0+128)+1),w
 15316  08F2  1903               	btfsc	3,2
 15317  08F3  28F5               	goto	u4471
 15318  08F4  28F6               	goto	u4470
 15319  08F5                     u4471:
 15320  08F5  28FE               	goto	l4954
 15321  08F6                     u4470:
 15322  08F6                     l4950:
 15323                           
 15324                           ;main.c: 629: clkAlarm.trigger = 0;
 15325  08F6  0020               	movlb	0	; select bank0
 15326  08F7  01D8               	clrf	_clkAlarm+3
 15327                           
 15328                           ;main.c: 630: tempAlarm.trigger = 0;
 15329  08F8  0021               	movlb	1	; select bank1
 15330  08F9  01CA               	clrf	(_tempAlarm^(0+128)+1)
 15331                           
 15332                           ;main.c: 631: lumAlarm.trigger = 0;
 15333  08FA  01C7               	clrf	(_lumAlarm^(0+128)+1)
 15334  08FB                     l4952:
 15335                           
 15336                           ;main.c: 632: updateLCD = 1;
 15337  08FB  01EA               	clrf	_updateLCD^(0+128)
 15338  08FC  0AEA               	incf	_updateLCD^(0+128),f
 15339                           
 15340                           ;main.c: 633: } else{
 15341  08FD  2933               	goto	l1359
 15342  08FE                     l4954:
 15343                           
 15344                           ;main.c: 634: if(modeFlag == 1){
 15345  08FE  0020               	movlb	0	; select bank0
 15346  08FF  035C               	decf	_modeFlag,w
 15347  0900  045D               	iorwf	_modeFlag+1,w
 15348  0901  1D03               	btfss	3,2
 15349  0902  2904               	goto	u4481
 15350  0903  2905               	goto	u4480
 15351  0904                     u4481:
 15352  0904  2928               	goto	l4962
 15353  0905                     u4480:
 15354  0905                     l4956:
 15355                           
 15356                           ;main.c: 635: if(editingClockAlarm >= 1){
 15357  0905  085F               	movf	_editingClockAlarm+1,w
 15358  0906  3A80               	xorlw	128
 15359  0907  00F2               	movwf	??_S1button
 15360  0908  3080               	movlw	128
 15361  0909  0272               	subwf	??_S1button,w
 15362  090A  1D03               	skipz
 15363  090B  290E               	goto	u4495
 15364  090C  3001               	movlw	1
 15365  090D  025E               	subwf	_editingClockAlarm,w
 15366  090E                     u4495:
 15367  090E  1C03               	skipc
 15368  090F  2911               	goto	u4491
 15369  0910  2912               	goto	u4490
 15370  0911                     u4491:
 15371  0911  2917               	goto	l1361
 15372  0912                     u4490:
 15373  0912                     l4958:
 15374                           
 15375                           ;main.c: 636: editingClockAlarm++;
 15376  0912  3001               	movlw	1
 15377  0913  0020               	movlb	0	; select bank0
 15378  0914  07DE               	addwf	_editingClockAlarm,f
 15379  0915  3000               	movlw	0
 15380  0916  3DDF               	addwfc	_editingClockAlarm+1,f
 15381  0917                     l1361:
 15382                           
 15383                           ;main.c: 637: };main.c: 638: if(editingClockAlarm > 3){
 15384  0917  0020               	movlb	0	; select bank0
 15385  0918  085F               	movf	_editingClockAlarm+1,w
 15386  0919  3A80               	xorlw	128
 15387  091A  00F2               	movwf	??_S1button
 15388  091B  3080               	movlw	128
 15389  091C  0272               	subwf	??_S1button,w
 15390  091D  1D03               	skipz
 15391  091E  2921               	goto	u4505
 15392  091F  3004               	movlw	4
 15393  0920  025E               	subwf	_editingClockAlarm,w
 15394  0921                     u4505:
 15395  0921  1C03               	skipc
 15396  0922  2924               	goto	u4501
 15397  0923  2925               	goto	u4500
 15398  0924                     u4501:
 15399  0924  2928               	goto	l4962
 15400  0925                     u4500:
 15401  0925                     l4960:
 15402                           
 15403                           ;main.c: 639: editingClockAlarm = 0;
 15404  0925  0020               	movlb	0	; select bank0
 15405  0926  01DE               	clrf	_editingClockAlarm
 15406  0927  01DF               	clrf	_editingClockAlarm+1
 15407  0928                     l4962:
 15408                           
 15409                           ;main.c: 640: };main.c: 641: };main.c: 642: if(editingClockAlarm == 0){
 15410  0928  0020               	movlb	0	; select bank0
 15411  0929  085E               	movf	_editingClockAlarm,w
 15412  092A  045F               	iorwf	_editingClockAlarm+1,w
 15413  092B  1D03               	btfss	3,2
 15414  092C  292E               	goto	u4511
 15415  092D  292F               	goto	u4510
 15416  092E                     u4511:
 15417  092E  2933               	goto	l1359
 15418  092F                     u4510:
 15419  092F                     l4964:
 15420                           
 15421                           ;main.c: 643: modeFlag++;
 15422  092F  3001               	movlw	1
 15423  0930  07DC               	addwf	_modeFlag,f
 15424  0931  3000               	movlw	0
 15425  0932  3DDD               	addwfc	_modeFlag+1,f
 15426  0933                     l1359:
 15427                           
 15428                           ;main.c: 644: };main.c: 645: };main.c: 646: _delay((unsigned long)((50)*(1000000/4000.0)
      +                          ));
 15429  0933  3011               	movlw	17
 15430  0934  00F2               	movwf	??_S1button
 15431  0935  303A               	movlw	58
 15432  0936                     u8437:
 15433  0936  0B89               	decfsz	9,f
 15434  0937  2936               	goto	u8437
 15435  0938  0BF2               	decfsz	??_S1button,f
 15436  0939  2936               	goto	u8437
 15437  093A  3200               	nop2
 15438  093B                     l1364:
 15439  093B  0008               	return
 15440  093C                     __end_of_S1button:
 15441                           
 15442                           	psect	text32
 15443  11EE                     __ptext32:	
 15444 ;; *************** function _PWM_Output_D4_Enable *****************
 15445 ;; Defined at:
 15446 ;;		line 349 in file "main.c"
 15447 ;; Parameters:    Size  Location     Type
 15448 ;;		None
 15449 ;; Auto vars:     Size  Location     Type
 15450 ;;		None
 15451 ;; Return value:  Size  Location     Type
 15452 ;;                  1    wreg      void 
 15453 ;; Registers used:
 15454 ;;		None
 15455 ;; Tracked objects:
 15456 ;;		On entry : 0/0
 15457 ;;		On exit  : 0/0
 15458 ;;		Unchanged: 0/0
 15459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15464 ;;Total ram usage:        0 bytes
 15465 ;; Hardware stack levels used:    1
 15466 ;; Hardware stack levels required when called:    4
 15467 ;; This function calls:
 15468 ;;		Nothing
 15469 ;; This function is called by:
 15470 ;;		_checkFlags
 15471 ;; This function uses a non-reentrant model
 15472 ;;
 15473                           
 15474                           
 15475                           ;psect for function _PWM_Output_D4_Enable
 15476  11EE                     _PWM_Output_D4_Enable:
 15477  11EE                     l4734:	
 15478                           ;incstack = 0
 15479                           ; Regs used in _PWM_Output_D4_Enable: []
 15480                           
 15481                           
 15482                           ;main.c: 350: PWM6EN = 1;
 15483  11EE  0027               	movlb	7	; select bank7
 15484  11EF  178E               	bsf	14,7	;volatile
 15485  11F0                     l1257:
 15486  11F0  0008               	return
 15487  11F1                     __end_of_PWM_Output_D4_Enable:
 15488                           
 15489                           	psect	text33
 15490  0C78                     __ptext33:	
 15491 ;; *************** function _cmd_trc *****************
 15492 ;; Defined at:
 15493 ;;		line 976 in file "main.c"
 15494 ;; Parameters:    Size  Location     Type
 15495 ;;  num             2    7[BANK0 ] int 
 15496 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 15497 ;;		 -> main@buff(20), 
 15498 ;; Auto vars:     Size  Location     Type
 15499 ;;  buffData        5   16[BANK0 ] unsigned char [5]
 15500 ;;  buffInit        3   21[BANK0 ] unsigned char [3]
 15501 ;;  n               2   31[BANK0 ] int 
 15502 ;;  maxReadings     2   29[BANK0 ] int 
 15503 ;;  address         2   26[BANK0 ] unsigned int 
 15504 ;;  i               2   24[BANK0 ] int 
 15505 ;;  j               1   33[BANK0 ] unsigned char 
 15506 ;;  buffEOM         1   28[BANK0 ] unsigned char [1]
 15507 ;; Return value:  Size  Location     Type
 15508 ;;                  1    wreg      void 
 15509 ;; Registers used:
 15510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15511 ;; Tracked objects:
 15512 ;;		On entry : 0/0
 15513 ;;		On exit  : 0/0
 15514 ;;		Unchanged: 0/0
 15515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15516 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15517 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15519 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;Total ram usage:       27 bytes
 15521 ;; Hardware stack levels used:    1
 15522 ;; Hardware stack levels required when called:    8
 15523 ;; This function calls:
 15524 ;;		_DATAEE_ReadByte
 15525 ;;		___wmul
 15526 ;;		_sendERRORMessage
 15527 ;;		_sendMessage
 15528 ;; This function is called by:
 15529 ;;		_main
 15530 ;; This function uses a non-reentrant model
 15531 ;;
 15532                           
 15533                           
 15534                           ;psect for function _cmd_trc
 15535  0C78                     _cmd_trc:
 15536  0C78                     l6874:	
 15537                           ;incstack = 0
 15538                           ; Regs used in _cmd_trc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15539                           
 15540                           
 15541                           ;main.c: 977: if(num == 4){
 15542  0C78  3004               	movlw	4
 15543  0C79  0020               	movlb	0	; select bank0
 15544  0C7A  0627               	xorwf	cmd_trc@num,w
 15545  0C7B  0428               	iorwf	cmd_trc@num+1,w
 15546  0C7C  1D03               	btfss	3,2
 15547  0C7D  2C7F               	goto	u8011
 15548  0C7E  2C80               	goto	u8010
 15549  0C7F                     u8011:
 15550  0C7F  2D61               	goto	l6930
 15551  0C80                     u8010:
 15552  0C80                     l6876:
 15553                           
 15554                           ;main.c: 978: int n = buffer[2];
 15555  0C80  0829               	movf	cmd_trc@buffer,w
 15556  0C81  3E02               	addlw	2
 15557  0C82  0086               	movwf	6
 15558  0C83  0187               	clrf	7
 15559  0C84  0801               	movf	1,w
 15560  0C85  00AA               	movwf	??_cmd_trc
 15561  0C86  01AB               	clrf	??_cmd_trc+1
 15562  0C87  082A               	movf	??_cmd_trc,w
 15563  0C88  00BF               	movwf	cmd_trc@n
 15564  0C89  082B               	movf	??_cmd_trc+1,w
 15565  0C8A  00C0               	movwf	cmd_trc@n+1
 15566  0C8B                     l6878:
 15567                           
 15568                           ;main.c: 979: int maxReadings = (iwrite-iread);
 15569  0C8B  0861               	movf	_iread,w
 15570  0C8C  027A               	subwf	_iwrite,w
 15571  0C8D  00BD               	movwf	cmd_trc@maxReadings
 15572  0C8E  01BE               	clrf	cmd_trc@maxReadings+1
 15573  0C8F  1C03               	skipc
 15574  0C90  03BE               	decf	cmd_trc@maxReadings+1,f
 15575  0C91                     l6880:
 15576                           
 15577                           ;main.c: 980: if(maxReadings < 0){
 15578  0C91  1FBE               	btfss	cmd_trc@maxReadings+1,7
 15579  0C92  2C94               	goto	u8021
 15580  0C93  2C95               	goto	u8020
 15581  0C94                     u8021:
 15582  0C94  2CA3               	goto	l6884
 15583  0C95                     u8020:
 15584  0C95                     l6882:
 15585                           
 15586                           ;main.c: 981: maxReadings = iwrite + (NREG - iread);
 15587  0C95  0861               	movf	_iread,w
 15588  0C96  00AA               	movwf	??_cmd_trc
 15589  0C97  01AB               	clrf	??_cmd_trc+1
 15590  0C98  087A               	movf	_iwrite,w
 15591  0C99  077B               	addwf	_NREG,w
 15592  0C9A  00AC               	movwf	??_cmd_trc+2
 15593  0C9B  01AD               	clrf	??_cmd_trc+3
 15594  0C9C  0DAD               	rlf	??_cmd_trc+3,f
 15595  0C9D  082A               	movf	??_cmd_trc,w
 15596  0C9E  022C               	subwf	??_cmd_trc+2,w
 15597  0C9F  00BD               	movwf	cmd_trc@maxReadings
 15598  0CA0  082B               	movf	??_cmd_trc+1,w
 15599  0CA1  3B2D               	subwfb	??_cmd_trc+3,w
 15600  0CA2  00BE               	movwf	cmd_trc@maxReadings+1
 15601  0CA3                     l6884:
 15602                           
 15603                           ;main.c: 982: };main.c: 983: if((n > nr) || (n > maxReadings)){
 15604  0CA3  0840               	movf	cmd_trc@n+1,w
 15605  0CA4  3A80               	xorlw	128
 15606  0CA5  3C80               	sublw	128
 15607  0CA6  1D03               	skipz
 15608  0CA7  2CAA               	goto	u8035
 15609  0CA8  083F               	movf	cmd_trc@n,w
 15610  0CA9  0260               	subwf	_nr,w
 15611  0CAA                     u8035:
 15612  0CAA  1C03               	skipc
 15613  0CAB  2CAD               	goto	u8031
 15614  0CAC  2CAE               	goto	u8030
 15615  0CAD                     u8031:
 15616  0CAD  2CBD               	goto	l6888
 15617  0CAE                     u8030:
 15618  0CAE                     l6886:
 15619  0CAE  0020               	movlb	0	; select bank0
 15620  0CAF  083E               	movf	cmd_trc@maxReadings+1,w
 15621  0CB0  3A80               	xorlw	128
 15622  0CB1  00AA               	movwf	??_cmd_trc
 15623  0CB2  0840               	movf	cmd_trc@n+1,w
 15624  0CB3  3A80               	xorlw	128
 15625  0CB4  022A               	subwf	??_cmd_trc,w
 15626  0CB5  1D03               	skipz
 15627  0CB6  2CB9               	goto	u8045
 15628  0CB7  083F               	movf	cmd_trc@n,w
 15629  0CB8  023D               	subwf	cmd_trc@maxReadings,w
 15630  0CB9                     u8045:
 15631  0CB9  1803               	skipnc
 15632  0CBA  2CBC               	goto	u8041
 15633  0CBB  2CBD               	goto	u8040
 15634  0CBC                     u8041:
 15635  0CBC  2CC2               	goto	l6892
 15636  0CBD                     u8040:
 15637  0CBD                     l6888:
 15638                           
 15639                           ;main.c: 984: sendERRORMessage((uint8_t)0XCB);
 15640  0CBD  30CB               	movlw	203
 15641  0CBE  3193  23DC  318C   	fcall	_sendERRORMessage
 15642  0CC1  2D65               	goto	l1498
 15643  0CC2                     l6892:
 15644                           
 15645                           ;main.c: 986: };main.c: 991: uint8_t buffInit[3];;main.c: 992: buffInit[0] = (uint8_t)0x
      +                          FD;
 15646  0CC2  30FD               	movlw	253
 15647  0CC3  0020               	movlb	0	; select bank0
 15648  0CC4  00AA               	movwf	??_cmd_trc
 15649  0CC5  082A               	movf	??_cmd_trc,w
 15650  0CC6  00B5               	movwf	cmd_trc@buffInit
 15651                           
 15652                           ;main.c: 993: buffInit[1] = (uint8_t)0XCB;
 15653  0CC7  30CB               	movlw	203
 15654  0CC8  00AA               	movwf	??_cmd_trc
 15655  0CC9  082A               	movf	??_cmd_trc,w
 15656  0CCA  00B6               	movwf	cmd_trc@buffInit+1
 15657                           
 15658                           ;main.c: 994: buffInit[2] = (uint8_t)n;
 15659  0CCB  083F               	movf	cmd_trc@n,w
 15660  0CCC  00AA               	movwf	??_cmd_trc
 15661  0CCD  082A               	movf	??_cmd_trc,w
 15662  0CCE  00B7               	movwf	cmd_trc@buffInit+2
 15663  0CCF                     l6894:
 15664                           
 15665                           ;main.c: 995: sendMessage(3,buffInit);
 15666  0CCF  3003               	movlw	3
 15667  0CD0  00F5               	movwf	sendMessage@num
 15668  0CD1  3000               	movlw	0
 15669  0CD2  00F6               	movwf	sendMessage@num+1
 15670  0CD3  3035               	movlw	(low (cmd_trc@buffInit| 0))& (0+255)
 15671  0CD4  00AA               	movwf	??_cmd_trc
 15672  0CD5  082A               	movf	??_cmd_trc,w
 15673  0CD6  00F7               	movwf	sendMessage@buffer
 15674  0CD7  3194  249A  318C   	fcall	_sendMessage
 15675  0CDA                     l6896:
 15676  0CDA                     l6898:
 15677                           
 15678                           ;main.c: 1000: for(i = 0; i < n; i++){
 15679  0CDA  0020               	movlb	0	; select bank0
 15680  0CDB  01B8               	clrf	cmd_trc@i
 15681  0CDC  01B9               	clrf	cmd_trc@i+1
 15682  0CDD  2D42               	goto	l6924
 15683  0CDE                     l6900:
 15684                           
 15685                           ;main.c: 1001: for(j = 0; j < 5; j++){
 15686  0CDE  0020               	movlb	0	; select bank0
 15687  0CDF  01C1               	clrf	cmd_trc@j
 15688  0CE0                     l6906:
 15689                           
 15690                           ;main.c: 1002: address = (iread * 0x5) + 0x7012 + j;
 15691  0CE0  0841               	movf	cmd_trc@j,w
 15692  0CE1  00AA               	movwf	??_cmd_trc
 15693  0CE2  01AB               	clrf	??_cmd_trc+1
 15694  0CE3  0861               	movf	_iread,w
 15695  0CE4  00AC               	movwf	??_cmd_trc+2
 15696  0CE5  01AD               	clrf	??_cmd_trc+3
 15697  0CE6  082C               	movf	??_cmd_trc+2,w
 15698  0CE7  00F2               	movwf	___wmul@multiplier
 15699  0CE8  082D               	movf	??_cmd_trc+3,w
 15700  0CE9  00F3               	movwf	___wmul@multiplier+1
 15701  0CEA  3005               	movlw	5
 15702  0CEB  00F4               	movwf	___wmul@multiplicand
 15703  0CEC  3000               	movlw	0
 15704  0CED  00F5               	movwf	___wmul@multiplicand+1
 15705  0CEE  3194  2418  318C   	fcall	___wmul
 15706  0CF1  0020               	movlb	0	; select bank0
 15707  0CF2  082A               	movf	??_cmd_trc,w
 15708  0CF3  0772               	addwf	?___wmul,w
 15709  0CF4  00AE               	movwf	??_cmd_trc+4
 15710  0CF5  082B               	movf	??_cmd_trc+1,w
 15711  0CF6  3D73               	addwfc	?___wmul+1,w
 15712  0CF7  00AF               	movwf	??_cmd_trc+5
 15713  0CF8  082E               	movf	??_cmd_trc+4,w
 15714  0CF9  3E12               	addlw	18
 15715  0CFA  00BA               	movwf	cmd_trc@address
 15716  0CFB  3070               	movlw	112
 15717  0CFC  3D2F               	addwfc	??_cmd_trc+5,w
 15718  0CFD  00BB               	movwf	cmd_trc@address+1
 15719  0CFE                     l6908:
 15720                           
 15721                           ;main.c: 1003: buffData[j] = DATAEE_ReadByte(address);
 15722  0CFE  083B               	movf	cmd_trc@address+1,w
 15723  0CFF  00F9               	movwf	DATAEE_ReadByte@bAdd+1
 15724  0D00  083A               	movf	cmd_trc@address,w
 15725  0D01  00F8               	movwf	DATAEE_ReadByte@bAdd
 15726  0D02  3192  2269  318C   	fcall	_DATAEE_ReadByte
 15727  0D05  0020               	movlb	0	; select bank0
 15728  0D06  00AA               	movwf	??_cmd_trc
 15729  0D07  0841               	movf	cmd_trc@j,w
 15730  0D08  3E30               	addlw	(low (cmd_trc@buffData| 0))& (0+255)
 15731  0D09  0086               	movwf	6
 15732  0D0A  0187               	clrf	7
 15733  0D0B  082A               	movf	??_cmd_trc,w
 15734  0D0C  0081               	movwf	1
 15735  0D0D                     l6910:
 15736  0D0D  3001               	movlw	1
 15737  0D0E  00AA               	movwf	??_cmd_trc
 15738  0D0F  082A               	movf	??_cmd_trc,w
 15739  0D10  07C1               	addwf	cmd_trc@j,f
 15740  0D11                     l6912:
 15741  0D11  3005               	movlw	5
 15742  0D12  0241               	subwf	cmd_trc@j,w
 15743  0D13  1C03               	skipc
 15744  0D14  2D16               	goto	u8051
 15745  0D15  2D17               	goto	u8050
 15746  0D16                     u8051:
 15747  0D16  2CE0               	goto	l6906
 15748  0D17                     u8050:
 15749  0D17                     l6914:
 15750                           
 15751                           ;main.c: 1004: };main.c: 1005: sendMessage(5,buffData);
 15752  0D17  3005               	movlw	5
 15753  0D18  00F5               	movwf	sendMessage@num
 15754  0D19  3000               	movlw	0
 15755  0D1A  00F6               	movwf	sendMessage@num+1
 15756  0D1B  3030               	movlw	(low (cmd_trc@buffData| 0))& (0+255)
 15757  0D1C  00AA               	movwf	??_cmd_trc
 15758  0D1D  082A               	movf	??_cmd_trc,w
 15759  0D1E  00F7               	movwf	sendMessage@buffer
 15760  0D1F  3194  249A  318C   	fcall	_sendMessage
 15761  0D22                     l6916:
 15762                           
 15763                           ;main.c: 1006: iread++;
 15764  0D22  3001               	movlw	1
 15765  0D23  0020               	movlb	0	; select bank0
 15766  0D24  00AA               	movwf	??_cmd_trc
 15767  0D25  082A               	movf	??_cmd_trc,w
 15768  0D26  07E1               	addwf	_iread,f
 15769  0D27                     l6918:
 15770                           
 15771                           ;main.c: 1007: if(iread>NREG-1){
 15772  0D27  087B               	movf	_NREG,w
 15773  0D28  3EFF               	addlw	255
 15774  0D29  00AA               	movwf	??_cmd_trc
 15775  0D2A  30FF               	movlw	255
 15776  0D2B  1803               	skipnc
 15777  0D2C  3000               	movlw	0
 15778  0D2D  00AB               	movwf	??_cmd_trc+1
 15779  0D2E  082B               	movf	??_cmd_trc+1,w
 15780  0D2F  3A80               	xorlw	128
 15781  0D30  00AC               	movwf	??_cmd_trc+2
 15782  0D31  3080               	movlw	128
 15783  0D32  022C               	subwf	??_cmd_trc+2,w
 15784  0D33  1D03               	skipz
 15785  0D34  2D37               	goto	u8065
 15786  0D35  0861               	movf	_iread,w
 15787  0D36  022A               	subwf	??_cmd_trc,w
 15788  0D37                     u8065:
 15789  0D37  1803               	skipnc
 15790  0D38  2D3A               	goto	u8061
 15791  0D39  2D3B               	goto	u8060
 15792  0D3A                     u8061:
 15793  0D3A  2D3D               	goto	l6922
 15794  0D3B                     u8060:
 15795  0D3B                     l6920:
 15796                           
 15797                           ;main.c: 1008: iread=0;
 15798  0D3B  0020               	movlb	0	; select bank0
 15799  0D3C  01E1               	clrf	_iread
 15800  0D3D                     l6922:
 15801  0D3D  3001               	movlw	1
 15802  0D3E  0020               	movlb	0	; select bank0
 15803  0D3F  07B8               	addwf	cmd_trc@i,f
 15804  0D40  3000               	movlw	0
 15805  0D41  3DB9               	addwfc	cmd_trc@i+1,f
 15806  0D42                     l6924:
 15807  0D42  0839               	movf	cmd_trc@i+1,w
 15808  0D43  3A80               	xorlw	128
 15809  0D44  00AA               	movwf	??_cmd_trc
 15810  0D45  0840               	movf	cmd_trc@n+1,w
 15811  0D46  3A80               	xorlw	128
 15812  0D47  022A               	subwf	??_cmd_trc,w
 15813  0D48  1D03               	skipz
 15814  0D49  2D4C               	goto	u8075
 15815  0D4A  083F               	movf	cmd_trc@n,w
 15816  0D4B  0238               	subwf	cmd_trc@i,w
 15817  0D4C                     u8075:
 15818  0D4C  1C03               	skipc
 15819  0D4D  2D4F               	goto	u8071
 15820  0D4E  2D50               	goto	u8070
 15821  0D4F                     u8071:
 15822  0D4F  2CDE               	goto	l6900
 15823  0D50                     u8070:
 15824  0D50                     l6926:
 15825                           
 15826                           ;main.c: 1009: };main.c: 1010: };main.c: 1011: uint8_t buffEOM[1];;main.c: 1012: buffEOM
      +                          [0] = (uint8_t)0xFE;
 15827  0D50  30FE               	movlw	254
 15828  0D51  0020               	movlb	0	; select bank0
 15829  0D52  00AA               	movwf	??_cmd_trc
 15830  0D53  082A               	movf	??_cmd_trc,w
 15831  0D54  00BC               	movwf	cmd_trc@buffEOM
 15832  0D55                     l6928:
 15833                           
 15834                           ;main.c: 1013: sendMessage(1,buffEOM);
 15835  0D55  3001               	movlw	1
 15836  0D56  00F5               	movwf	sendMessage@num
 15837  0D57  3000               	movlw	0
 15838  0D58  00F6               	movwf	sendMessage@num+1
 15839  0D59  303C               	movlw	(low (cmd_trc@buffEOM| 0))& (0+255)
 15840  0D5A  00AA               	movwf	??_cmd_trc
 15841  0D5B  082A               	movf	??_cmd_trc,w
 15842  0D5C  00F7               	movwf	sendMessage@buffer
 15843  0D5D  3194  249A  318C   	fcall	_sendMessage
 15844                           
 15845                           ;main.c: 1014: } else{
 15846  0D60  2D65               	goto	l1498
 15847  0D61                     l6930:
 15848                           
 15849                           ;main.c: 1015: sendERRORMessage((uint8_t)0XCB);
 15850  0D61  30CB               	movlw	203
 15851  0D62  3193  23DC  318C   	fcall	_sendERRORMessage
 15852  0D65                     l1498:
 15853  0D65  0008               	return
 15854  0D66                     __end_of_cmd_trc:
 15855                           
 15856                           	psect	text34
 15857  154D                     __ptext34:	
 15858 ;; *************** function _cmd_ir *****************
 15859 ;; Defined at:
 15860 ;;		line 963 in file "main.c"
 15861 ;; Parameters:    Size  Location     Type
 15862 ;;  num             2    7[BANK0 ] int 
 15863 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 15864 ;;		 -> main@buff(20), 
 15865 ;; Auto vars:     Size  Location     Type
 15866 ;;  buff            7   11[BANK0 ] unsigned char [7]
 15867 ;; Return value:  Size  Location     Type
 15868 ;;                  1    wreg      void 
 15869 ;; Registers used:
 15870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15871 ;; Tracked objects:
 15872 ;;		On entry : 0/0
 15873 ;;		On exit  : 0/0
 15874 ;;		Unchanged: 0/0
 15875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15876 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15877 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15878 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;Total ram usage:       11 bytes
 15881 ;; Hardware stack levels used:    1
 15882 ;; Hardware stack levels required when called:    7
 15883 ;; This function calls:
 15884 ;;		_sendMessage
 15885 ;; This function is called by:
 15886 ;;		_main
 15887 ;; This function uses a non-reentrant model
 15888 ;;
 15889                           
 15890                           
 15891                           ;psect for function _cmd_ir
 15892  154D                     _cmd_ir:
 15893  154D                     l6870:	
 15894                           ;incstack = 0
 15895                           ; Regs used in _cmd_ir: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15896                           
 15897                           
 15898                           ;main.c: 964: uint8_t buff[7];;main.c: 965: buff[0] = (uint8_t)0xFD;
 15899  154D  30FD               	movlw	253
 15900  154E  0020               	movlb	0	; select bank0
 15901  154F  00AA               	movwf	??_cmd_ir
 15902  1550  082A               	movf	??_cmd_ir,w
 15903  1551  00AB               	movwf	cmd_ir@buff
 15904                           
 15905                           ;main.c: 966: buff[1] = (uint8_t)0XCA;
 15906  1552  30CA               	movlw	202
 15907  1553  00AA               	movwf	??_cmd_ir
 15908  1554  082A               	movf	??_cmd_ir,w
 15909  1555  00AC               	movwf	cmd_ir@buff+1
 15910                           
 15911                           ;main.c: 967: buff[2] = NREG;
 15912  1556  087B               	movf	_NREG,w
 15913  1557  00AA               	movwf	??_cmd_ir
 15914  1558  082A               	movf	??_cmd_ir,w
 15915  1559  00AD               	movwf	cmd_ir@buff+2
 15916                           
 15917                           ;main.c: 968: buff[3] = nr;
 15918  155A  0860               	movf	_nr,w
 15919  155B  00AA               	movwf	??_cmd_ir
 15920  155C  082A               	movf	??_cmd_ir,w
 15921  155D  00AE               	movwf	cmd_ir@buff+3
 15922                           
 15923                           ;main.c: 969: buff[4] = iread;
 15924  155E  0861               	movf	_iread,w
 15925  155F  00AA               	movwf	??_cmd_ir
 15926  1560  082A               	movf	??_cmd_ir,w
 15927  1561  00AF               	movwf	cmd_ir@buff+4
 15928                           
 15929                           ;main.c: 970: buff[5] = iwrite;
 15930  1562  087A               	movf	_iwrite,w
 15931  1563  00AA               	movwf	??_cmd_ir
 15932  1564  082A               	movf	??_cmd_ir,w
 15933  1565  00B0               	movwf	cmd_ir@buff+5
 15934                           
 15935                           ;main.c: 971: buff[6] = (uint8_t)0xFE;
 15936  1566  30FE               	movlw	254
 15937  1567  00AA               	movwf	??_cmd_ir
 15938  1568  082A               	movf	??_cmd_ir,w
 15939  1569  00B1               	movwf	cmd_ir@buff+6
 15940  156A                     l6872:
 15941                           
 15942                           ;main.c: 973: sendMessage(7,buff);
 15943  156A  3007               	movlw	7
 15944  156B  00F5               	movwf	sendMessage@num
 15945  156C  3000               	movlw	0
 15946  156D  00F6               	movwf	sendMessage@num+1
 15947  156E  302B               	movlw	(low (cmd_ir@buff| 0))& (0+255)
 15948  156F  00AA               	movwf	??_cmd_ir
 15949  1570  082A               	movf	??_cmd_ir,w
 15950  1571  00F7               	movwf	sendMessage@buffer
 15951  1572  3194  249A  3195   	fcall	_sendMessage
 15952  1575                     l1490:
 15953  1575  0008               	return
 15954  1576                     __end_of_cmd_ir:
 15955                           
 15956                           	psect	text35
 15957  16D2                     __ptext35:	
 15958 ;; *************** function _cmd_aa *****************
 15959 ;; Defined at:
 15960 ;;		line 951 in file "main.c"
 15961 ;; Parameters:    Size  Location     Type
 15962 ;;  num             2    7[BANK0 ] int 
 15963 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 15964 ;;		 -> main@buff(20), 
 15965 ;; Auto vars:     Size  Location     Type
 15966 ;;		None
 15967 ;; Return value:  Size  Location     Type
 15968 ;;                  1    wreg      void 
 15969 ;; Registers used:
 15970 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15971 ;; Tracked objects:
 15972 ;;		On entry : 0/0
 15973 ;;		On exit  : 0/0
 15974 ;;		Unchanged: 0/0
 15975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15976 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15979 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15980 ;;Total ram usage:        4 bytes
 15981 ;; Hardware stack levels used:    1
 15982 ;; Hardware stack levels required when called:    8
 15983 ;; This function calls:
 15984 ;;		_sendERRORMessage
 15985 ;;		_sendOKMessage
 15986 ;; This function is called by:
 15987 ;;		_main
 15988 ;; This function uses a non-reentrant model
 15989 ;;
 15990                           
 15991                           
 15992                           ;psect for function _cmd_aa
 15993  16D2                     _cmd_aa:
 15994  16D2                     l6852:	
 15995                           ;incstack = 0
 15996                           ; Regs used in _cmd_aa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15997                           
 15998                           
 15999                           ;main.c: 952: if(buffer[2] == 0 && num == 4){
 16000  16D2  0020               	movlb	0	; select bank0
 16001  16D3  0829               	movf	cmd_aa@buffer,w
 16002  16D4  3E02               	addlw	2
 16003  16D5  0086               	movwf	6
 16004  16D6  0187               	clrf	7
 16005  16D7  0801               	movf	1,w
 16006  16D8  1D03               	btfss	3,2
 16007  16D9  2EDB               	goto	u7971
 16008  16DA  2EDC               	goto	u7970
 16009  16DB                     u7971:
 16010  16DB  2EEC               	goto	l6860
 16011  16DC                     u7970:
 16012  16DC                     l6854:
 16013  16DC  3004               	movlw	4
 16014  16DD  0627               	xorwf	cmd_aa@num,w
 16015  16DE  0428               	iorwf	cmd_aa@num+1,w
 16016  16DF  1D03               	btfss	3,2
 16017  16E0  2EE2               	goto	u7981
 16018  16E1  2EE3               	goto	u7980
 16019  16E2                     u7981:
 16020  16E2  2EEC               	goto	l6860
 16021  16E3                     u7980:
 16022  16E3                     l6856:
 16023                           
 16024                           ;main.c: 953: ALAF = 'a';
 16025  16E3  3061               	movlw	97
 16026  16E4  00AA               	movwf	??_cmd_aa
 16027  16E5  082A               	movf	??_cmd_aa,w
 16028  16E6  00E7               	movwf	_ALAF
 16029  16E7                     l6858:
 16030                           
 16031                           ;main.c: 954: sendOKMessage((uint8_t)0XC9);
 16032  16E7  30C9               	movlw	201
 16033  16E8  3193  236C  3196   	fcall	_sendOKMessage
 16034                           
 16035                           ;main.c: 955: } else if(buffer[2] == 1 && num == 4){
 16036  16EB  2F09               	goto	l1487
 16037  16EC                     l6860:
 16038  16EC  0829               	movf	cmd_aa@buffer,w
 16039  16ED  3E02               	addlw	2
 16040  16EE  0086               	movwf	6
 16041  16EF  0187               	clrf	7
 16042  16F0  0301               	decf	1,w
 16043  16F1  1D03               	btfss	3,2
 16044  16F2  2EF4               	goto	u7991
 16045  16F3  2EF5               	goto	u7990
 16046  16F4                     u7991:
 16047  16F4  2F05               	goto	l6868
 16048  16F5                     u7990:
 16049  16F5                     l6862:
 16050  16F5  3004               	movlw	4
 16051  16F6  0627               	xorwf	cmd_aa@num,w
 16052  16F7  0428               	iorwf	cmd_aa@num+1,w
 16053  16F8  1D03               	btfss	3,2
 16054  16F9  2EFB               	goto	u8001
 16055  16FA  2EFC               	goto	u8000
 16056  16FB                     u8001:
 16057  16FB  2F05               	goto	l6868
 16058  16FC                     u8000:
 16059  16FC                     l6864:
 16060                           
 16061                           ;main.c: 956: ALAF = 'A';
 16062  16FC  3041               	movlw	65
 16063  16FD  00AA               	movwf	??_cmd_aa
 16064  16FE  082A               	movf	??_cmd_aa,w
 16065  16FF  00E7               	movwf	_ALAF
 16066  1700                     l6866:
 16067                           
 16068                           ;main.c: 957: sendOKMessage((uint8_t)0XC9);
 16069  1700  30C9               	movlw	201
 16070  1701  3193  236C  3196   	fcall	_sendOKMessage
 16071                           
 16072                           ;main.c: 958: } else {
 16073  1704  2F09               	goto	l1487
 16074  1705                     l6868:
 16075                           
 16076                           ;main.c: 959: sendERRORMessage((uint8_t)0XC9);
 16077  1705  30C9               	movlw	201
 16078  1706  3193  23DC  3196   	fcall	_sendERRORMessage
 16079  1709                     l1487:
 16080  1709  0008               	return
 16081  170A                     __end_of_cmd_aa:
 16082                           
 16083                           	psect	text36
 16084  1668                     __ptext36:	
 16085 ;; *************** function _cmd_dtl *****************
 16086 ;; Defined at:
 16087 ;;		line 939 in file "main.c"
 16088 ;; Parameters:    Size  Location     Type
 16089 ;;  num             2    7[BANK0 ] int 
 16090 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16091 ;;		 -> main@buff(20), 
 16092 ;; Auto vars:     Size  Location     Type
 16093 ;;  lumAux          1   11[BANK0 ] unsigned char 
 16094 ;;  tempAux         1   10[BANK0 ] unsigned char 
 16095 ;; Return value:  Size  Location     Type
 16096 ;;                  1    wreg      void 
 16097 ;; Registers used:
 16098 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16099 ;; Tracked objects:
 16100 ;;		On entry : 0/0
 16101 ;;		On exit  : 0/0
 16102 ;;		Unchanged: 0/0
 16103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16104 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16105 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;Total ram usage:        5 bytes
 16109 ;; Hardware stack levels used:    1
 16110 ;; Hardware stack levels required when called:    8
 16111 ;; This function calls:
 16112 ;;		_sendERRORMessage
 16113 ;;		_sendOKMessage
 16114 ;; This function is called by:
 16115 ;;		_main
 16116 ;; This function uses a non-reentrant model
 16117 ;;
 16118                           
 16119                           
 16120                           ;psect for function _cmd_dtl
 16121  1668                     _cmd_dtl:
 16122  1668                     l6838:	
 16123                           ;incstack = 0
 16124                           ; Regs used in _cmd_dtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16125                           
 16126                           
 16127                           ;main.c: 940: uint8_t tempAux = buffer[2];
 16128  1668  0020               	movlb	0	; select bank0
 16129  1669  0829               	movf	cmd_dtl@buffer,w
 16130  166A  0086               	movwf	6
 16131  166B  0187               	clrf	7
 16132  166C  3F42               	moviw [2]fsr1
 16133  166D  00AA               	movwf	cmd_dtl@tempAux
 16134                           
 16135                           ;main.c: 941: uint8_t lumAux = buffer[3];
 16136  166E  0829               	movf	cmd_dtl@buffer,w
 16137  166F  0086               	movwf	6
 16138  1670  0187               	clrf	7
 16139  1671  3F43               	moviw [3]fsr1
 16140  1672  00AB               	movwf	cmd_dtl@lumAux
 16141  1673                     l6840:
 16142                           
 16143                           ;main.c: 942: if((tempAux >= 0 && tempAux < 50) && (lumAux >= 0 && lumAux < 8) && num ==
      +                           5){
 16144  1673  3032               	movlw	50
 16145  1674  022A               	subwf	cmd_dtl@tempAux,w
 16146  1675  1803               	skipnc
 16147  1676  2E78               	goto	u7941
 16148  1677  2E79               	goto	u7940
 16149  1678                     u7941:
 16150  1678  2E98               	goto	l6850
 16151  1679                     u7940:
 16152  1679                     l6842:
 16153  1679  3008               	movlw	8
 16154  167A  022B               	subwf	cmd_dtl@lumAux,w
 16155  167B  1803               	skipnc
 16156  167C  2E7E               	goto	u7951
 16157  167D  2E7F               	goto	u7950
 16158  167E                     u7951:
 16159  167E  2E98               	goto	l6850
 16160  167F                     u7950:
 16161  167F                     l6844:
 16162  167F  3005               	movlw	5
 16163  1680  0627               	xorwf	cmd_dtl@num,w
 16164  1681  0428               	iorwf	cmd_dtl@num+1,w
 16165  1682  1D03               	btfss	3,2
 16166  1683  2E85               	goto	u7961
 16167  1684  2E86               	goto	u7960
 16168  1685                     u7961:
 16169  1685  2E98               	goto	l6850
 16170  1686                     u7960:
 16171  1686                     l6846:
 16172                           
 16173                           ;main.c: 943: tempAlarm.alarmTemp = buffer[2];
 16174  1686  0829               	movf	cmd_dtl@buffer,w
 16175  1687  0086               	movwf	6
 16176  1688  0187               	clrf	7
 16177  1689  3F42               	moviw [2]fsr1
 16178  168A  0021               	movlb	1	; select bank1
 16179  168B  00C9               	movwf	_tempAlarm^(0+128)
 16180                           
 16181                           ;main.c: 944: lumAlarm.alarmLum = buffer[3];
 16182  168C  0020               	movlb	0	; select bank0
 16183  168D  0829               	movf	cmd_dtl@buffer,w
 16184  168E  0086               	movwf	6
 16185  168F  0187               	clrf	7
 16186  1690  3F43               	moviw [3]fsr1
 16187  1691  0021               	movlb	1	; select bank1
 16188  1692  00C6               	movwf	_lumAlarm^(0+128)
 16189  1693                     l6848:
 16190                           
 16191                           ;main.c: 945: sendOKMessage((uint8_t)0XC8);
 16192  1693  30C8               	movlw	200
 16193  1694  3193  236C  3196   	fcall	_sendOKMessage
 16194                           
 16195                           ;main.c: 946: } else {
 16196  1697  2E9C               	goto	l1480
 16197  1698                     l6850:
 16198                           
 16199                           ;main.c: 947: sendERRORMessage((uint8_t)0XC8);
 16200  1698  30C8               	movlw	200
 16201  1699  3193  23DC  3196   	fcall	_sendERRORMessage
 16202  169C                     l1480:
 16203  169C  0008               	return
 16204  169D                     __end_of_cmd_dtl:
 16205                           
 16206                           	psect	text37
 16207  17C1                     __ptext37:	
 16208 ;; *************** function _cmd_dac *****************
 16209 ;; Defined at:
 16210 ;;		line 925 in file "main.c"
 16211 ;; Parameters:    Size  Location     Type
 16212 ;;  num             2    7[BANK0 ] int 
 16213 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16214 ;;		 -> main@buff(20), 
 16215 ;; Auto vars:     Size  Location     Type
 16216 ;;  s               1   13[BANK0 ] unsigned char 
 16217 ;;  m               1   12[BANK0 ] unsigned char 
 16218 ;;  h               1   11[BANK0 ] unsigned char 
 16219 ;; Return value:  Size  Location     Type
 16220 ;;                  1    wreg      void 
 16221 ;; Registers used:
 16222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16223 ;; Tracked objects:
 16224 ;;		On entry : 0/0
 16225 ;;		On exit  : 0/0
 16226 ;;		Unchanged: 0/0
 16227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16228 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;Total ram usage:        7 bytes
 16233 ;; Hardware stack levels used:    1
 16234 ;; Hardware stack levels required when called:    8
 16235 ;; This function calls:
 16236 ;;		_sendERRORMessage
 16237 ;;		_sendOKMessage
 16238 ;; This function is called by:
 16239 ;;		_main
 16240 ;; This function uses a non-reentrant model
 16241 ;;
 16242                           
 16243                           
 16244                           ;psect for function _cmd_dac
 16245  17C1                     _cmd_dac:
 16246  17C1                     l6822:	
 16247                           ;incstack = 0
 16248                           ; Regs used in _cmd_dac: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16249                           
 16250                           
 16251                           ;main.c: 926: uint8_t h = buffer[2];
 16252  17C1  0020               	movlb	0	; select bank0
 16253  17C2  0829               	movf	cmd_dac@buffer,w
 16254  17C3  0086               	movwf	6
 16255  17C4  0187               	clrf	7
 16256  17C5  3F42               	moviw [2]fsr1
 16257  17C6  00AB               	movwf	cmd_dac@h
 16258                           
 16259                           ;main.c: 927: uint8_t m = buffer[3];
 16260  17C7  0829               	movf	cmd_dac@buffer,w
 16261  17C8  0086               	movwf	6
 16262  17C9  0187               	clrf	7
 16263  17CA  3F43               	moviw [3]fsr1
 16264  17CB  00AC               	movwf	cmd_dac@m
 16265                           
 16266                           ;main.c: 928: uint8_t s = buffer[4];
 16267  17CC  0829               	movf	cmd_dac@buffer,w
 16268  17CD  0086               	movwf	6
 16269  17CE  0187               	clrf	7
 16270  17CF  3F44               	moviw [4]fsr1
 16271  17D0  00AD               	movwf	cmd_dac@s
 16272  17D1                     l6824:
 16273                           
 16274                           ;main.c: 929: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 16275  17D1  3018               	movlw	24
 16276  17D2  022B               	subwf	cmd_dac@h,w
 16277  17D3  1803               	skipnc
 16278  17D4  2FD6               	goto	u7901
 16279  17D5  2FD7               	goto	u7900
 16280  17D6                     u7901:
 16281  17D6  2FFB               	goto	l6836
 16282  17D7                     u7900:
 16283  17D7                     l6826:
 16284  17D7  303C               	movlw	60
 16285  17D8  022C               	subwf	cmd_dac@m,w
 16286  17D9  1803               	skipnc
 16287  17DA  2FDC               	goto	u7911
 16288  17DB  2FDD               	goto	u7910
 16289  17DC                     u7911:
 16290  17DC  2FFB               	goto	l6836
 16291  17DD                     u7910:
 16292  17DD                     l6828:
 16293  17DD  303C               	movlw	60
 16294  17DE  022D               	subwf	cmd_dac@s,w
 16295  17DF  1803               	skipnc
 16296  17E0  2FE2               	goto	u7921
 16297  17E1  2FE3               	goto	u7920
 16298  17E2                     u7921:
 16299  17E2  2FFB               	goto	l6836
 16300  17E3                     u7920:
 16301  17E3                     l6830:
 16302  17E3  3006               	movlw	6
 16303  17E4  0627               	xorwf	cmd_dac@num,w
 16304  17E5  0428               	iorwf	cmd_dac@num+1,w
 16305  17E6  1D03               	btfss	3,2
 16306  17E7  2FE9               	goto	u7931
 16307  17E8  2FEA               	goto	u7930
 16308  17E9                     u7931:
 16309  17E9  2FFB               	goto	l6836
 16310  17EA                     u7930:
 16311  17EA                     l6832:
 16312                           
 16313                           ;main.c: 930: clkAlarm.alarmVal.h = h;
 16314  17EA  082B               	movf	cmd_dac@h,w
 16315  17EB  00AA               	movwf	??_cmd_dac
 16316  17EC  082A               	movf	??_cmd_dac,w
 16317  17ED  00D5               	movwf	_clkAlarm
 16318                           
 16319                           ;main.c: 931: clkAlarm.alarmVal.m = m;
 16320  17EE  082C               	movf	cmd_dac@m,w
 16321  17EF  00AA               	movwf	??_cmd_dac
 16322  17F0  082A               	movf	??_cmd_dac,w
 16323  17F1  00D6               	movwf	_clkAlarm+1
 16324                           
 16325                           ;main.c: 932: clkAlarm.alarmVal.s = s;
 16326  17F2  082D               	movf	cmd_dac@s,w
 16327  17F3  00AA               	movwf	??_cmd_dac
 16328  17F4  082A               	movf	??_cmd_dac,w
 16329  17F5  00D7               	movwf	_clkAlarm+2
 16330  17F6                     l6834:
 16331                           
 16332                           ;main.c: 933: sendOKMessage((uint8_t)0XC7);
 16333  17F6  30C7               	movlw	199
 16334  17F7  3193  236C  3197   	fcall	_sendOKMessage
 16335                           
 16336                           ;main.c: 934: } else {
 16337  17FA  2FFF               	goto	l1475
 16338  17FB                     l6836:
 16339                           
 16340                           ;main.c: 935: sendERRORMessage((uint8_t)0XC7);
 16341  17FB  30C7               	movlw	199
 16342  17FC  3193  23DC  3197   	fcall	_sendERRORMessage
 16343  17FF                     l1475:
 16344  17FF  0008               	return
 16345  1800                     __end_of_cmd_dac:
 16346                           
 16347                           	psect	text38
 16348  170A                     __ptext38:	
 16349 ;; *************** function _cmd_ra *****************
 16350 ;; Defined at:
 16351 ;;		line 910 in file "main.c"
 16352 ;; Parameters:    Size  Location     Type
 16353 ;;  num             2    7[BANK0 ] int 
 16354 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16355 ;;		 -> main@buff(20), 
 16356 ;; Auto vars:     Size  Location     Type
 16357 ;;  buff            9   11[BANK0 ] unsigned char [9]
 16358 ;; Return value:  Size  Location     Type
 16359 ;;                  1    wreg      void 
 16360 ;; Registers used:
 16361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16362 ;; Tracked objects:
 16363 ;;		On entry : 0/0
 16364 ;;		On exit  : 0/0
 16365 ;;		Unchanged: 0/0
 16366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16367 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16368 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16371 ;;Total ram usage:       13 bytes
 16372 ;; Hardware stack levels used:    1
 16373 ;; Hardware stack levels required when called:    7
 16374 ;; This function calls:
 16375 ;;		_sendMessage
 16376 ;; This function is called by:
 16377 ;;		_main
 16378 ;; This function uses a non-reentrant model
 16379 ;;
 16380                           
 16381                           
 16382                           ;psect for function _cmd_ra
 16383  170A                     _cmd_ra:
 16384  170A                     l6814:	
 16385                           ;incstack = 0
 16386                           ; Regs used in _cmd_ra: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16387                           
 16388                           
 16389                           ;main.c: 911: uint8_t buff[9];;main.c: 912: buff[0] = (uint8_t)0xFD;
 16390  170A  30FD               	movlw	253
 16391  170B  0020               	movlb	0	; select bank0
 16392  170C  00AA               	movwf	??_cmd_ra
 16393  170D  082A               	movf	??_cmd_ra,w
 16394  170E  00AB               	movwf	cmd_ra@buff
 16395                           
 16396                           ;main.c: 913: buff[1] = (uint8_t)0XC6;
 16397  170F  30C6               	movlw	198
 16398  1710  00AA               	movwf	??_cmd_ra
 16399  1711  082A               	movf	??_cmd_ra,w
 16400  1712  00AC               	movwf	cmd_ra@buff+1
 16401                           
 16402                           ;main.c: 914: buff[2] = clkAlarm.alarmVal.h;
 16403  1713  0855               	movf	_clkAlarm,w
 16404  1714  00AA               	movwf	??_cmd_ra
 16405  1715  082A               	movf	??_cmd_ra,w
 16406  1716  00AD               	movwf	cmd_ra@buff+2
 16407                           
 16408                           ;main.c: 915: buff[3] = clkAlarm.alarmVal.m;
 16409  1717  0856               	movf	_clkAlarm+1,w
 16410  1718  00AA               	movwf	??_cmd_ra
 16411  1719  082A               	movf	??_cmd_ra,w
 16412  171A  00AE               	movwf	cmd_ra@buff+3
 16413                           
 16414                           ;main.c: 916: buff[4] = clkAlarm.alarmVal.s;
 16415  171B  0857               	movf	_clkAlarm+2,w
 16416  171C  00AA               	movwf	??_cmd_ra
 16417  171D  082A               	movf	??_cmd_ra,w
 16418  171E  00AF               	movwf	cmd_ra@buff+4
 16419                           
 16420                           ;main.c: 917: buff[5] = tempAlarm.alarmTemp;
 16421  171F  0021               	movlb	1	; select bank1
 16422  1720  0849               	movf	_tempAlarm^(0+128),w
 16423  1721  0020               	movlb	0	; select bank0
 16424  1722  00AA               	movwf	??_cmd_ra
 16425  1723  082A               	movf	??_cmd_ra,w
 16426  1724  00B0               	movwf	cmd_ra@buff+5
 16427                           
 16428                           ;main.c: 918: buff[6] = lumAlarm.alarmLum;
 16429  1725  0021               	movlb	1	; select bank1
 16430  1726  0846               	movf	_lumAlarm^(0+128),w
 16431  1727  0020               	movlb	0	; select bank0
 16432  1728  00AA               	movwf	??_cmd_ra
 16433  1729  082A               	movf	??_cmd_ra,w
 16434  172A  00B1               	movwf	cmd_ra@buff+6
 16435  172B                     l6816:
 16436                           
 16437                           ;main.c: 919: buff[7] = ALAF == 'A' ? 1 : 0;
 16438  172B  3041               	movlw	65
 16439  172C  0667               	xorwf	_ALAF,w
 16440  172D  1903               	btfsc	3,2
 16441  172E  2F30               	goto	u7881
 16442  172F  2F32               	goto	u7880
 16443  1730                     u7881:
 16444  1730  3001               	movlw	1
 16445  1731  2F33               	goto	u7890
 16446  1732                     u7880:
 16447  1732  3000               	movlw	0
 16448  1733                     u7890:
 16449  1733  00AA               	movwf	??_cmd_ra
 16450  1734  082A               	movf	??_cmd_ra,w
 16451  1735  00B2               	movwf	cmd_ra@buff+7
 16452  1736                     l6818:
 16453                           
 16454                           ;main.c: 920: buff[8] = (uint8_t)0xFE;
 16455  1736  30FE               	movlw	254
 16456  1737  00AA               	movwf	??_cmd_ra
 16457  1738  082A               	movf	??_cmd_ra,w
 16458  1739  00B3               	movwf	cmd_ra@buff+8
 16459  173A                     l6820:
 16460                           
 16461                           ;main.c: 922: sendMessage(9,buff);
 16462  173A  3009               	movlw	9
 16463  173B  00F5               	movwf	sendMessage@num
 16464  173C  3000               	movlw	0
 16465  173D  00F6               	movwf	sendMessage@num+1
 16466  173E  302B               	movlw	(low (cmd_ra@buff| 0))& (0+255)
 16467  173F  00AA               	movwf	??_cmd_ra
 16468  1740  082A               	movf	??_cmd_ra,w
 16469  1741  00F7               	movwf	sendMessage@buffer
 16470  1742  3194  249A  3197   	fcall	_sendMessage
 16471  1745                     l1470:
 16472  1745  0008               	return
 16473  1746                     __end_of_cmd_ra:
 16474                           
 16475                           	psect	text39
 16476  1338                     __ptext39:	
 16477 ;; *************** function _cmd_mta *****************
 16478 ;; Defined at:
 16479 ;;		line 901 in file "main.c"
 16480 ;; Parameters:    Size  Location     Type
 16481 ;;  num             2    7[BANK0 ] int 
 16482 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16483 ;;		 -> main@buff(20), 
 16484 ;; Auto vars:     Size  Location     Type
 16485 ;;		None
 16486 ;; Return value:  Size  Location     Type
 16487 ;;                  1    wreg      void 
 16488 ;; Registers used:
 16489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16490 ;; Tracked objects:
 16491 ;;		On entry : 0/0
 16492 ;;		On exit  : 0/0
 16493 ;;		Unchanged: 0/0
 16494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16495 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16498 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;Total ram usage:        3 bytes
 16500 ;; Hardware stack levels used:    1
 16501 ;; Hardware stack levels required when called:    8
 16502 ;; This function calls:
 16503 ;;		_sendERRORMessage
 16504 ;;		_sendOKMessage
 16505 ;; This function is called by:
 16506 ;;		_main
 16507 ;; This function uses a non-reentrant model
 16508 ;;
 16509                           
 16510                           
 16511                           ;psect for function _cmd_mta
 16512  1338                     _cmd_mta:
 16513  1338                     l6806:	
 16514                           ;incstack = 0
 16515                           ; Regs used in _cmd_mta: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16516                           
 16517                           
 16518                           ;main.c: 902: if(buffer[2] >= 0x00 && buffer[2] < 0x3c){
 16519  1338  0020               	movlb	0	; select bank0
 16520  1339  0829               	movf	cmd_mta@buffer,w
 16521  133A  3E02               	addlw	2
 16522  133B  0086               	movwf	6
 16523  133C  0187               	clrf	7
 16524  133D  303C               	movlw	60
 16525  133E  0201               	subwf	1,w
 16526  133F  1803               	skipnc
 16527  1340  2B42               	goto	u7871
 16528  1341  2B43               	goto	u7870
 16529  1342                     u7871:
 16530  1342  2B4D               	goto	l6812
 16531  1343                     u7870:
 16532  1343                     l6808:
 16533                           
 16534                           ;main.c: 903: TALA = buffer[2];
 16535  1343  0829               	movf	cmd_mta@buffer,w
 16536  1344  0086               	movwf	6
 16537  1345  0187               	clrf	7
 16538  1346  3F42               	moviw [2]fsr1
 16539  1347  00ED               	movwf	_TALA
 16540  1348                     l6810:
 16541                           
 16542                           ;main.c: 904: sendOKMessage((uint8_t)0XC5);
 16543  1348  30C5               	movlw	197
 16544  1349  3193  236C  3193   	fcall	_sendOKMessage
 16545                           
 16546                           ;main.c: 905: } else {
 16547  134C  2B51               	goto	l1467
 16548  134D                     l6812:
 16549                           
 16550                           ;main.c: 906: sendERRORMessage((uint8_t)0XC5);
 16551  134D  30C5               	movlw	197
 16552  134E  3193  23DC  3193   	fcall	_sendERRORMessage
 16553  1351                     l1467:
 16554  1351  0008               	return
 16555  1352                     __end_of_cmd_mta:
 16556                           
 16557                           	psect	text40
 16558  1321                     __ptext40:	
 16559 ;; *************** function _cmd_mmp *****************
 16560 ;; Defined at:
 16561 ;;		line 892 in file "main.c"
 16562 ;; Parameters:    Size  Location     Type
 16563 ;;  num             2    7[BANK0 ] int 
 16564 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16565 ;;		 -> main@buff(20), 
 16566 ;; Auto vars:     Size  Location     Type
 16567 ;;		None
 16568 ;; Return value:  Size  Location     Type
 16569 ;;                  1    wreg      void 
 16570 ;; Registers used:
 16571 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16572 ;; Tracked objects:
 16573 ;;		On entry : 0/0
 16574 ;;		On exit  : 0/0
 16575 ;;		Unchanged: 0/0
 16576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16577 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16580 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16581 ;;Total ram usage:        3 bytes
 16582 ;; Hardware stack levels used:    1
 16583 ;; Hardware stack levels required when called:    8
 16584 ;; This function calls:
 16585 ;;		_sendERRORMessage
 16586 ;;		_sendOKMessage
 16587 ;; This function is called by:
 16588 ;;		_main
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592                           
 16593                           ;psect for function _cmd_mmp
 16594  1321                     _cmd_mmp:
 16595  1321                     l6798:	
 16596                           ;incstack = 0
 16597                           ; Regs used in _cmd_mmp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16598                           
 16599                           
 16600                           ;main.c: 893: if(num == 4){
 16601  1321  3004               	movlw	4
 16602  1322  0020               	movlb	0	; select bank0
 16603  1323  0627               	xorwf	cmd_mmp@num,w
 16604  1324  0428               	iorwf	cmd_mmp@num+1,w
 16605  1325  1D03               	btfss	3,2
 16606  1326  2B28               	goto	u7861
 16607  1327  2B29               	goto	u7860
 16608  1328                     u7861:
 16609  1328  2B33               	goto	l6804
 16610  1329                     u7860:
 16611  1329                     l6800:
 16612                           
 16613                           ;main.c: 894: PMON = buffer[2];
 16614  1329  0829               	movf	cmd_mmp@buffer,w
 16615  132A  0086               	movwf	6
 16616  132B  0187               	clrf	7
 16617  132C  3F42               	moviw [2]fsr1
 16618  132D  00EE               	movwf	_PMON
 16619  132E                     l6802:
 16620                           
 16621                           ;main.c: 895: sendOKMessage((uint8_t)0XC4);
 16622  132E  30C4               	movlw	196
 16623  132F  3193  236C  3193   	fcall	_sendOKMessage
 16624                           
 16625                           ;main.c: 896: } else{
 16626  1332  2B37               	goto	l1462
 16627  1333                     l6804:
 16628                           
 16629                           ;main.c: 897: sendERRORMessage((uint8_t)0XC4);
 16630  1333  30C4               	movlw	196
 16631  1334  3193  23DC  3193   	fcall	_sendERRORMessage
 16632  1337                     l1462:
 16633  1337  0008               	return
 16634  1338                     __end_of_cmd_mmp:
 16635                           
 16636                           	psect	text41
 16637  1479                     __ptext41:	
 16638 ;; *************** function _cmd_rp *****************
 16639 ;; Defined at:
 16640 ;;		line 881 in file "main.c"
 16641 ;; Parameters:    Size  Location     Type
 16642 ;;  num             2    7[BANK0 ] int 
 16643 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16644 ;;		 -> main@buff(20), 
 16645 ;; Auto vars:     Size  Location     Type
 16646 ;;  buff            5   11[BANK0 ] unsigned char [5]
 16647 ;; Return value:  Size  Location     Type
 16648 ;;                  1    wreg      void 
 16649 ;; Registers used:
 16650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16651 ;; Tracked objects:
 16652 ;;		On entry : 0/0
 16653 ;;		On exit  : 0/0
 16654 ;;		Unchanged: 0/0
 16655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16656 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16658 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16659 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16660 ;;Total ram usage:        9 bytes
 16661 ;; Hardware stack levels used:    1
 16662 ;; Hardware stack levels required when called:    7
 16663 ;; This function calls:
 16664 ;;		_sendMessage
 16665 ;; This function is called by:
 16666 ;;		_main
 16667 ;; This function uses a non-reentrant model
 16668 ;;
 16669                           
 16670                           
 16671                           ;psect for function _cmd_rp
 16672  1479                     _cmd_rp:
 16673  1479                     l6794:	
 16674                           ;incstack = 0
 16675                           ; Regs used in _cmd_rp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16676                           
 16677                           
 16678                           ;main.c: 882: uint8_t buff[5];;main.c: 883: buff[0] = (uint8_t)0xFD;
 16679  1479  30FD               	movlw	253
 16680  147A  0020               	movlb	0	; select bank0
 16681  147B  00AA               	movwf	??_cmd_rp
 16682  147C  082A               	movf	??_cmd_rp,w
 16683  147D  00AB               	movwf	cmd_rp@buff
 16684                           
 16685                           ;main.c: 884: buff[1] = (uint8_t)0XC3;
 16686  147E  30C3               	movlw	195
 16687  147F  00AA               	movwf	??_cmd_rp
 16688  1480  082A               	movf	??_cmd_rp,w
 16689  1481  00AC               	movwf	cmd_rp@buff+1
 16690                           
 16691                           ;main.c: 885: buff[2] = PMON;
 16692  1482  086E               	movf	_PMON,w
 16693  1483  00AA               	movwf	??_cmd_rp
 16694  1484  082A               	movf	??_cmd_rp,w
 16695  1485  00AD               	movwf	cmd_rp@buff+2
 16696                           
 16697                           ;main.c: 886: buff[3] = TALA;
 16698  1486  086D               	movf	_TALA,w
 16699  1487  00AA               	movwf	??_cmd_rp
 16700  1488  082A               	movf	??_cmd_rp,w
 16701  1489  00AE               	movwf	cmd_rp@buff+3
 16702                           
 16703                           ;main.c: 887: buff[4] = (uint8_t)0xFE;
 16704  148A  30FE               	movlw	254
 16705  148B  00AA               	movwf	??_cmd_rp
 16706  148C  082A               	movf	??_cmd_rp,w
 16707  148D  00AF               	movwf	cmd_rp@buff+4
 16708  148E                     l6796:
 16709                           
 16710                           ;main.c: 889: sendMessage(5,buff);
 16711  148E  3005               	movlw	5
 16712  148F  00F5               	movwf	sendMessage@num
 16713  1490  3000               	movlw	0
 16714  1491  00F6               	movwf	sendMessage@num+1
 16715  1492  302B               	movlw	(low (cmd_rp@buff| 0))& (0+255)
 16716  1493  00AA               	movwf	??_cmd_rp
 16717  1494  082A               	movf	??_cmd_rp,w
 16718  1495  00F7               	movwf	sendMessage@buffer
 16719  1496  3194  249A  3194   	fcall	_sendMessage
 16720  1499                     l1457:
 16721  1499  0008               	return
 16722  149A                     __end_of_cmd_rp:
 16723                           
 16724                           	psect	text42
 16725  1458                     __ptext42:	
 16726 ;; *************** function _cmd_rtl *****************
 16727 ;; Defined at:
 16728 ;;		line 870 in file "main.c"
 16729 ;; Parameters:    Size  Location     Type
 16730 ;;  num             2    7[BANK0 ] int 
 16731 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16732 ;;		 -> main@buff(20), 
 16733 ;; Auto vars:     Size  Location     Type
 16734 ;;  buff            5   11[BANK0 ] unsigned char [5]
 16735 ;; Return value:  Size  Location     Type
 16736 ;;                  1    wreg      void 
 16737 ;; Registers used:
 16738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16739 ;; Tracked objects:
 16740 ;;		On entry : 0/0
 16741 ;;		On exit  : 0/0
 16742 ;;		Unchanged: 0/0
 16743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16744 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16745 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16746 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16748 ;;Total ram usage:        9 bytes
 16749 ;; Hardware stack levels used:    1
 16750 ;; Hardware stack levels required when called:    7
 16751 ;; This function calls:
 16752 ;;		_sendMessage
 16753 ;; This function is called by:
 16754 ;;		_main
 16755 ;; This function uses a non-reentrant model
 16756 ;;
 16757                           
 16758                           
 16759                           ;psect for function _cmd_rtl
 16760  1458                     _cmd_rtl:
 16761  1458                     l6790:	
 16762                           ;incstack = 0
 16763                           ; Regs used in _cmd_rtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16764                           
 16765                           
 16766                           ;main.c: 871: uint8_t buff[5];;main.c: 872: buff[0] = (uint8_t)0xFD;
 16767  1458  30FD               	movlw	253
 16768  1459  0020               	movlb	0	; select bank0
 16769  145A  00AA               	movwf	??_cmd_rtl
 16770  145B  082A               	movf	??_cmd_rtl,w
 16771  145C  00AB               	movwf	cmd_rtl@buff
 16772                           
 16773                           ;main.c: 873: buff[1] = (uint8_t)0XC2;
 16774  145D  30C2               	movlw	194
 16775  145E  00AA               	movwf	??_cmd_rtl
 16776  145F  082A               	movf	??_cmd_rtl,w
 16777  1460  00AC               	movwf	cmd_rtl@buff+1
 16778                           
 16779                           ;main.c: 874: buff[2] = temp;
 16780  1461  0866               	movf	_temp,w
 16781  1462  00AA               	movwf	??_cmd_rtl
 16782  1463  082A               	movf	??_cmd_rtl,w
 16783  1464  00AD               	movwf	cmd_rtl@buff+2
 16784                           
 16785                           ;main.c: 875: buff[3] = lumLevel;
 16786  1465  0865               	movf	_lumLevel,w
 16787  1466  00AA               	movwf	??_cmd_rtl
 16788  1467  082A               	movf	??_cmd_rtl,w
 16789  1468  00AE               	movwf	cmd_rtl@buff+3
 16790                           
 16791                           ;main.c: 876: buff[4] = (uint8_t)0xFE;
 16792  1469  30FE               	movlw	254
 16793  146A  00AA               	movwf	??_cmd_rtl
 16794  146B  082A               	movf	??_cmd_rtl,w
 16795  146C  00AF               	movwf	cmd_rtl@buff+4
 16796  146D                     l6792:
 16797                           
 16798                           ;main.c: 878: sendMessage(5,buff);
 16799  146D  3005               	movlw	5
 16800  146E  00F5               	movwf	sendMessage@num
 16801  146F  3000               	movlw	0
 16802  1470  00F6               	movwf	sendMessage@num+1
 16803  1471  302B               	movlw	(low (cmd_rtl@buff| 0))& (0+255)
 16804  1472  00AA               	movwf	??_cmd_rtl
 16805  1473  082A               	movf	??_cmd_rtl,w
 16806  1474  00F7               	movwf	sendMessage@buffer
 16807  1475  3194  249A  3194   	fcall	_sendMessage
 16808  1478                     l1454:
 16809  1478  0008               	return
 16810  1479                     __end_of_cmd_rtl:
 16811                           
 16812                           	psect	text43
 16813  1782                     __ptext43:	
 16814 ;; *************** function _cmd_sc *****************
 16815 ;; Defined at:
 16816 ;;		line 855 in file "main.c"
 16817 ;; Parameters:    Size  Location     Type
 16818 ;;  num             2    7[BANK0 ] int 
 16819 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16820 ;;		 -> main@buff(20), 
 16821 ;; Auto vars:     Size  Location     Type
 16822 ;;  s               1   13[BANK0 ] unsigned char 
 16823 ;;  m               1   12[BANK0 ] unsigned char 
 16824 ;;  h               1   11[BANK0 ] unsigned char 
 16825 ;; Return value:  Size  Location     Type
 16826 ;;                  1    wreg      void 
 16827 ;; Registers used:
 16828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16829 ;; Tracked objects:
 16830 ;;		On entry : 0/0
 16831 ;;		On exit  : 0/0
 16832 ;;		Unchanged: 0/0
 16833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16834 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16835 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16837 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16838 ;;Total ram usage:        7 bytes
 16839 ;; Hardware stack levels used:    1
 16840 ;; Hardware stack levels required when called:    8
 16841 ;; This function calls:
 16842 ;;		_sendERRORMessage
 16843 ;;		_sendOKMessage
 16844 ;; This function is called by:
 16845 ;;		_main
 16846 ;; This function uses a non-reentrant model
 16847 ;;
 16848                           
 16849                           
 16850                           ;psect for function _cmd_sc
 16851  1782                     _cmd_sc:
 16852  1782                     l6774:	
 16853                           ;incstack = 0
 16854                           ; Regs used in _cmd_sc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16855                           
 16856                           
 16857                           ;main.c: 856: uint8_t h = buffer[2];
 16858  1782  0020               	movlb	0	; select bank0
 16859  1783  0829               	movf	cmd_sc@buffer,w
 16860  1784  0086               	movwf	6
 16861  1785  0187               	clrf	7
 16862  1786  3F42               	moviw [2]fsr1
 16863  1787  00AB               	movwf	cmd_sc@h
 16864                           
 16865                           ;main.c: 857: uint8_t m = buffer[3];
 16866  1788  0829               	movf	cmd_sc@buffer,w
 16867  1789  0086               	movwf	6
 16868  178A  0187               	clrf	7
 16869  178B  3F43               	moviw [3]fsr1
 16870  178C  00AC               	movwf	cmd_sc@m
 16871                           
 16872                           ;main.c: 858: uint8_t s = buffer[4];
 16873  178D  0829               	movf	cmd_sc@buffer,w
 16874  178E  0086               	movwf	6
 16875  178F  0187               	clrf	7
 16876  1790  3F44               	moviw [4]fsr1
 16877  1791  00AD               	movwf	cmd_sc@s
 16878  1792                     l6776:
 16879                           
 16880                           ;main.c: 859: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 16881  1792  3018               	movlw	24
 16882  1793  022B               	subwf	cmd_sc@h,w
 16883  1794  1803               	skipnc
 16884  1795  2F97               	goto	u7821
 16885  1796  2F98               	goto	u7820
 16886  1797                     u7821:
 16887  1797  2FBC               	goto	l6788
 16888  1798                     u7820:
 16889  1798                     l6778:
 16890  1798  303C               	movlw	60
 16891  1799  022C               	subwf	cmd_sc@m,w
 16892  179A  1803               	skipnc
 16893  179B  2F9D               	goto	u7831
 16894  179C  2F9E               	goto	u7830
 16895  179D                     u7831:
 16896  179D  2FBC               	goto	l6788
 16897  179E                     u7830:
 16898  179E                     l6780:
 16899  179E  303C               	movlw	60
 16900  179F  022D               	subwf	cmd_sc@s,w
 16901  17A0  1803               	skipnc
 16902  17A1  2FA3               	goto	u7841
 16903  17A2  2FA4               	goto	u7840
 16904  17A3                     u7841:
 16905  17A3  2FBC               	goto	l6788
 16906  17A4                     u7840:
 16907  17A4                     l6782:
 16908  17A4  3006               	movlw	6
 16909  17A5  0627               	xorwf	cmd_sc@num,w
 16910  17A6  0428               	iorwf	cmd_sc@num+1,w
 16911  17A7  1D03               	btfss	3,2
 16912  17A8  2FAA               	goto	u7851
 16913  17A9  2FAB               	goto	u7850
 16914  17AA                     u7851:
 16915  17AA  2FBC               	goto	l6788
 16916  17AB                     u7850:
 16917  17AB                     l6784:
 16918                           
 16919                           ;main.c: 860: t.h = h;
 16920  17AB  082B               	movf	cmd_sc@h,w
 16921  17AC  00AA               	movwf	??_cmd_sc
 16922  17AD  082A               	movf	??_cmd_sc,w
 16923  17AE  00D9               	movwf	_t
 16924                           
 16925                           ;main.c: 861: t.m = m;
 16926  17AF  082C               	movf	cmd_sc@m,w
 16927  17B0  00AA               	movwf	??_cmd_sc
 16928  17B1  082A               	movf	??_cmd_sc,w
 16929  17B2  00DA               	movwf	_t+1
 16930                           
 16931                           ;main.c: 862: t.s = s;
 16932  17B3  082D               	movf	cmd_sc@s,w
 16933  17B4  00AA               	movwf	??_cmd_sc
 16934  17B5  082A               	movf	??_cmd_sc,w
 16935  17B6  00DB               	movwf	_t+2
 16936  17B7                     l6786:
 16937                           
 16938                           ;main.c: 863: sendOKMessage((uint8_t)0XC1);
 16939  17B7  30C1               	movlw	193
 16940  17B8  3193  236C  3197   	fcall	_sendOKMessage
 16941                           
 16942                           ;main.c: 864: } else {
 16943  17BB  2FC0               	goto	l1451
 16944  17BC                     l6788:
 16945                           
 16946                           ;main.c: 865: sendERRORMessage((uint8_t)0XC1);
 16947  17BC  30C1               	movlw	193
 16948  17BD  3193  23DC  3197   	fcall	_sendERRORMessage
 16949  17C0                     l1451:
 16950  17C0  0008               	return
 16951  17C1                     __end_of_cmd_sc:
 16952                           
 16953                           	psect	text44
 16954  1528                     __ptext44:	
 16955 ;; *************** function _cmd_rc *****************
 16956 ;; Defined at:
 16957 ;;		line 843 in file "main.c"
 16958 ;; Parameters:    Size  Location     Type
 16959 ;;  num             2    7[BANK0 ] int 
 16960 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16961 ;;		 -> main@buff(20), 
 16962 ;; Auto vars:     Size  Location     Type
 16963 ;;  buff            6   11[BANK0 ] unsigned char [6]
 16964 ;; Return value:  Size  Location     Type
 16965 ;;                  1    wreg      void 
 16966 ;; Registers used:
 16967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16968 ;; Tracked objects:
 16969 ;;		On entry : 0/0
 16970 ;;		On exit  : 0/0
 16971 ;;		Unchanged: 0/0
 16972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16973 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16974 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16976 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16977 ;;Total ram usage:       10 bytes
 16978 ;; Hardware stack levels used:    1
 16979 ;; Hardware stack levels required when called:    7
 16980 ;; This function calls:
 16981 ;;		_sendMessage
 16982 ;; This function is called by:
 16983 ;;		_main
 16984 ;; This function uses a non-reentrant model
 16985 ;;
 16986                           
 16987                           
 16988                           ;psect for function _cmd_rc
 16989  1528                     _cmd_rc:
 16990  1528                     l6770:	
 16991                           ;incstack = 0
 16992                           ; Regs used in _cmd_rc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16993                           
 16994                           
 16995                           ;main.c: 844: uint8_t buff[6];;main.c: 845: buff[0] = (uint8_t)0xFD;
 16996  1528  30FD               	movlw	253
 16997  1529  0020               	movlb	0	; select bank0
 16998  152A  00AA               	movwf	??_cmd_rc
 16999  152B  082A               	movf	??_cmd_rc,w
 17000  152C  00AB               	movwf	cmd_rc@buff
 17001                           
 17002                           ;main.c: 846: buff[1] = (uint8_t)0xC0;
 17003  152D  30C0               	movlw	192
 17004  152E  00AA               	movwf	??_cmd_rc
 17005  152F  082A               	movf	??_cmd_rc,w
 17006  1530  00AC               	movwf	cmd_rc@buff+1
 17007                           
 17008                           ;main.c: 847: buff[2] = t.h;
 17009  1531  0859               	movf	_t,w
 17010  1532  00AA               	movwf	??_cmd_rc
 17011  1533  082A               	movf	??_cmd_rc,w
 17012  1534  00AD               	movwf	cmd_rc@buff+2
 17013                           
 17014                           ;main.c: 848: buff[3] = t.m;
 17015  1535  085A               	movf	_t+1,w
 17016  1536  00AA               	movwf	??_cmd_rc
 17017  1537  082A               	movf	??_cmd_rc,w
 17018  1538  00AE               	movwf	cmd_rc@buff+3
 17019                           
 17020                           ;main.c: 849: buff[4] = t.s;
 17021  1539  085B               	movf	_t+2,w
 17022  153A  00AA               	movwf	??_cmd_rc
 17023  153B  082A               	movf	??_cmd_rc,w
 17024  153C  00AF               	movwf	cmd_rc@buff+4
 17025                           
 17026                           ;main.c: 850: buff[5] = (uint8_t)0xFE;
 17027  153D  30FE               	movlw	254
 17028  153E  00AA               	movwf	??_cmd_rc
 17029  153F  082A               	movf	??_cmd_rc,w
 17030  1540  00B0               	movwf	cmd_rc@buff+5
 17031  1541                     l6772:
 17032                           
 17033                           ;main.c: 852: sendMessage(6,buff);
 17034  1541  3006               	movlw	6
 17035  1542  00F5               	movwf	sendMessage@num
 17036  1543  3000               	movlw	0
 17037  1544  00F6               	movwf	sendMessage@num+1
 17038  1545  302B               	movlw	(low (cmd_rc@buff| 0))& (0+255)
 17039  1546  00AA               	movwf	??_cmd_rc
 17040  1547  082A               	movf	??_cmd_rc,w
 17041  1548  00F7               	movwf	sendMessage@buffer
 17042  1549  3194  249A  3195   	fcall	_sendMessage
 17043  154C                     l1446:
 17044  154C  0008               	return
 17045  154D                     __end_of_cmd_rc:
 17046                           
 17047                           	psect	text45
 17048  0B92                     __ptext45:	
 17049 ;; *************** function _cmd_tri *****************
 17050 ;; Defined at:
 17051 ;;		line 1019 in file "main.c"
 17052 ;; Parameters:    Size  Location     Type
 17053 ;;  num             2    7[BANK0 ] int 
 17054 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 17055 ;;		 -> main@buff(20), 
 17056 ;; Auto vars:     Size  Location     Type
 17057 ;;  buffData        5   15[BANK0 ] unsigned char [5]
 17058 ;;  buffInit        4   20[BANK0 ] unsigned char [4]
 17059 ;;  i               2   26[BANK0 ] int 
 17060 ;;  startingInde    1   31[BANK0 ] unsigned char 
 17061 ;;  j               1   30[BANK0 ] unsigned char 
 17062 ;;  n               1   29[BANK0 ] unsigned char 
 17063 ;;  index           1   28[BANK0 ] unsigned char 
 17064 ;;  buffEOM         1   25[BANK0 ] unsigned char [1]
 17065 ;;  maxReadings     1   24[BANK0 ] unsigned char 
 17066 ;; Return value:  Size  Location     Type
 17067 ;;                  1    wreg      void 
 17068 ;; Registers used:
 17069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17070 ;; Tracked objects:
 17071 ;;		On entry : 0/0
 17072 ;;		On exit  : 0/0
 17073 ;;		Unchanged: 0/0
 17074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17075 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17076 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17077 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17078 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17079 ;;Total ram usage:       25 bytes
 17080 ;; Hardware stack levels used:    1
 17081 ;; Hardware stack levels required when called:    8
 17082 ;; This function calls:
 17083 ;;		_DATAEE_ReadByte
 17084 ;;		___wmul
 17085 ;;		_sendERRORMessage
 17086 ;;		_sendMessage
 17087 ;; This function is called by:
 17088 ;;		_main
 17089 ;; This function uses a non-reentrant model
 17090 ;;
 17091                           
 17092                           
 17093                           ;psect for function _cmd_tri
 17094  0B92                     _cmd_tri:
 17095  0B92                     l6932:	
 17096                           ;incstack = 0
 17097                           ; Regs used in _cmd_tri: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17098                           
 17099                           
 17100                           ;main.c: 1020: if(num == 5){
 17101  0B92  3005               	movlw	5
 17102  0B93  0020               	movlb	0	; select bank0
 17103  0B94  0627               	xorwf	cmd_tri@num,w
 17104  0B95  0428               	iorwf	cmd_tri@num+1,w
 17105  0B96  1D03               	btfss	3,2
 17106  0B97  2B99               	goto	u8081
 17107  0B98  2B9A               	goto	u8080
 17108  0B99                     u8081:
 17109  0B99  2C73               	goto	l6994
 17110  0B9A                     u8080:
 17111  0B9A                     l6934:
 17112                           
 17113                           ;main.c: 1021: uint8_t n = buffer[2];
 17114  0B9A  0829               	movf	cmd_tri@buffer,w
 17115  0B9B  0086               	movwf	6
 17116  0B9C  0187               	clrf	7
 17117  0B9D  3F42               	moviw [2]fsr1
 17118  0B9E  00BD               	movwf	cmd_tri@n
 17119                           
 17120                           ;main.c: 1022: uint8_t index = buffer[3];
 17121  0B9F  0829               	movf	cmd_tri@buffer,w
 17122  0BA0  0086               	movwf	6
 17123  0BA1  0187               	clrf	7
 17124  0BA2  3F43               	moviw [3]fsr1
 17125  0BA3  00BC               	movwf	cmd_tri@index
 17126  0BA4                     l6936:
 17127                           
 17128                           ;main.c: 1024: uint8_t startingIndex = iwrite + index;
 17129  0BA4  087A               	movf	_iwrite,w
 17130  0BA5  073C               	addwf	cmd_tri@index,w
 17131  0BA6  00AA               	movwf	??_cmd_tri
 17132  0BA7  082A               	movf	??_cmd_tri,w
 17133  0BA8  00BF               	movwf	cmd_tri@startingIndex
 17134  0BA9                     l6938:
 17135                           
 17136                           ;main.c: 1025: if(startingIndex >= NREG){
 17137  0BA9  087B               	movf	_NREG,w
 17138  0BAA  023F               	subwf	cmd_tri@startingIndex,w
 17139  0BAB  1C03               	skipc
 17140  0BAC  2BAE               	goto	u8091
 17141  0BAD  2BAF               	goto	u8090
 17142  0BAE                     u8091:
 17143  0BAE  2BB5               	goto	l6942
 17144  0BAF                     u8090:
 17145  0BAF                     l6940:
 17146                           
 17147                           ;main.c: 1026: startingIndex = index - (NREG - iwrite);
 17148  0BAF  087B               	movf	_NREG,w
 17149  0BB0  023C               	subwf	cmd_tri@index,w
 17150  0BB1  077A               	addwf	_iwrite,w
 17151  0BB2  00AA               	movwf	??_cmd_tri
 17152  0BB3  082A               	movf	??_cmd_tri,w
 17153  0BB4  00BF               	movwf	cmd_tri@startingIndex
 17154  0BB5                     l6942:
 17155                           
 17156                           ;main.c: 1027: };main.c: 1028: if(nr != NREG){
 17157  0BB5  0860               	movf	_nr,w
 17158  0BB6  067B               	xorwf	_NREG,w
 17159  0BB7  1903               	skipnz
 17160  0BB8  2BBA               	goto	u8101
 17161  0BB9  2BBB               	goto	u8100
 17162  0BBA                     u8101:
 17163  0BBA  2BBF               	goto	l6946
 17164  0BBB                     u8100:
 17165  0BBB                     l6944:
 17166                           
 17167                           ;main.c: 1029: startingIndex = index;
 17168  0BBB  083C               	movf	cmd_tri@index,w
 17169  0BBC  00AA               	movwf	??_cmd_tri
 17170  0BBD  082A               	movf	??_cmd_tri,w
 17171  0BBE  00BF               	movwf	cmd_tri@startingIndex
 17172  0BBF                     l6946:
 17173                           
 17174                           ;main.c: 1030: };main.c: 1031: uint8_t maxReadings = iwrite - startingIndex;
 17175  0BBF  083F               	movf	cmd_tri@startingIndex,w
 17176  0BC0  027A               	subwf	_iwrite,w
 17177  0BC1  00AA               	movwf	??_cmd_tri
 17178  0BC2  082A               	movf	??_cmd_tri,w
 17179  0BC3  00B8               	movwf	cmd_tri@maxReadings
 17180  0BC4                     l6950:	
 17181                           ;main.c: 1032: if(maxReadings < 0){
 17182                           
 17183                           
 17184                           ;main.c: 1034: };main.c: 1036: if((n > nr) || (maxReadings < n)){
 17185  0BC4  083D               	movf	cmd_tri@n,w
 17186  0BC5  0260               	subwf	_nr,w
 17187  0BC6  1C03               	skipc
 17188  0BC7  2BC9               	goto	u8111
 17189  0BC8  2BCA               	goto	u8110
 17190  0BC9                     u8111:
 17191  0BC9  2BD0               	goto	l6954
 17192  0BCA                     u8110:
 17193  0BCA                     l6952:
 17194  0BCA  083D               	movf	cmd_tri@n,w
 17195  0BCB  0238               	subwf	cmd_tri@maxReadings,w
 17196  0BCC  1803               	skipnc
 17197  0BCD  2BCF               	goto	u8121
 17198  0BCE  2BD0               	goto	u8120
 17199  0BCF                     u8121:
 17200  0BCF  2BD5               	goto	l6958
 17201  0BD0                     u8120:
 17202  0BD0                     l6954:
 17203                           
 17204                           ;main.c: 1037: sendERRORMessage((uint8_t)0XCC);
 17205  0BD0  30CC               	movlw	204
 17206  0BD1  3193  23DC  318B   	fcall	_sendERRORMessage
 17207  0BD4  2C77               	goto	l1515
 17208  0BD5                     l6958:
 17209                           
 17210                           ;main.c: 1039: };main.c: 1042: uint8_t buffInit[4];;main.c: 1043: buffInit[0] = (uint8_t
      +                          )0xFD;
 17211  0BD5  30FD               	movlw	253
 17212  0BD6  00AA               	movwf	??_cmd_tri
 17213  0BD7  082A               	movf	??_cmd_tri,w
 17214  0BD8  00B4               	movwf	cmd_tri@buffInit
 17215                           
 17216                           ;main.c: 1044: buffInit[1] = (uint8_t)0XCC;
 17217  0BD9  30CC               	movlw	204
 17218  0BDA  00AA               	movwf	??_cmd_tri
 17219  0BDB  082A               	movf	??_cmd_tri,w
 17220  0BDC  00B5               	movwf	cmd_tri@buffInit+1
 17221                           
 17222                           ;main.c: 1045: buffInit[2] = (uint8_t)n;
 17223  0BDD  083D               	movf	cmd_tri@n,w
 17224  0BDE  00AA               	movwf	??_cmd_tri
 17225  0BDF  082A               	movf	??_cmd_tri,w
 17226  0BE0  00B6               	movwf	cmd_tri@buffInit+2
 17227                           
 17228                           ;main.c: 1046: buffInit[3] = (uint8_t)index;
 17229  0BE1  083C               	movf	cmd_tri@index,w
 17230  0BE2  00AA               	movwf	??_cmd_tri
 17231  0BE3  082A               	movf	??_cmd_tri,w
 17232  0BE4  00B7               	movwf	cmd_tri@buffInit+3
 17233  0BE5                     l6960:
 17234                           
 17235                           ;main.c: 1047: sendMessage(4,buffInit);
 17236  0BE5  3004               	movlw	4
 17237  0BE6  00F5               	movwf	sendMessage@num
 17238  0BE7  3000               	movlw	0
 17239  0BE8  00F6               	movwf	sendMessage@num+1
 17240  0BE9  3034               	movlw	(low (cmd_tri@buffInit| 0))& (0+255)
 17241  0BEA  00AA               	movwf	??_cmd_tri
 17242  0BEB  082A               	movf	??_cmd_tri,w
 17243  0BEC  00F7               	movwf	sendMessage@buffer
 17244  0BED  3194  249A  318B   	fcall	_sendMessage
 17245  0BF0                     l6962:
 17246                           
 17247                           ;main.c: 1049: int i = startingIndex;
 17248  0BF0  0020               	movlb	0	; select bank0
 17249  0BF1  083F               	movf	cmd_tri@startingIndex,w
 17250  0BF2  00AA               	movwf	??_cmd_tri
 17251  0BF3  01AB               	clrf	??_cmd_tri+1
 17252  0BF4  082A               	movf	??_cmd_tri,w
 17253  0BF5  00BA               	movwf	cmd_tri@i
 17254  0BF6  082B               	movf	??_cmd_tri+1,w
 17255  0BF7  00BB               	movwf	cmd_tri@i+1
 17256                           
 17257                           ;main.c: 1051: uint8_t j;;main.c: 1052: uint8_t buffData[5];;main.c: 1053: while(n){
 17258  0BF8  2C5D               	goto	l6988
 17259  0BF9                     l6964:
 17260                           
 17261                           ;main.c: 1054: for(j = 0; j < 5; j++){
 17262  0BF9  01BE               	clrf	cmd_tri@j
 17263  0BFA                     l6970:
 17264                           
 17265                           ;main.c: 1055: buffData[j] = DATAEE_ReadByte( (i * 0x5) + 0x7012 + j);
 17266  0BFA  083E               	movf	cmd_tri@j,w
 17267  0BFB  00AA               	movwf	??_cmd_tri
 17268  0BFC  01AB               	clrf	??_cmd_tri+1
 17269  0BFD  083B               	movf	cmd_tri@i+1,w
 17270  0BFE  00F3               	movwf	___wmul@multiplier+1
 17271  0BFF  083A               	movf	cmd_tri@i,w
 17272  0C00  00F2               	movwf	___wmul@multiplier
 17273  0C01  3005               	movlw	5
 17274  0C02  00F4               	movwf	___wmul@multiplicand
 17275  0C03  3000               	movlw	0
 17276  0C04  00F5               	movwf	___wmul@multiplicand+1
 17277  0C05  3194  2418  318B   	fcall	___wmul
 17278  0C08  0020               	movlb	0	; select bank0
 17279  0C09  082A               	movf	??_cmd_tri,w
 17280  0C0A  0772               	addwf	?___wmul,w
 17281  0C0B  00AC               	movwf	??_cmd_tri+2
 17282  0C0C  082B               	movf	??_cmd_tri+1,w
 17283  0C0D  3D73               	addwfc	?___wmul+1,w
 17284  0C0E  00AD               	movwf	??_cmd_tri+3
 17285  0C0F  082C               	movf	??_cmd_tri+2,w
 17286  0C10  3E12               	addlw	18
 17287  0C11  00F8               	movwf	DATAEE_ReadByte@bAdd
 17288  0C12  3070               	movlw	112
 17289  0C13  3D2D               	addwfc	??_cmd_tri+3,w
 17290  0C14  00F9               	movwf	DATAEE_ReadByte@bAdd+1
 17291  0C15  3192  2269  318B   	fcall	_DATAEE_ReadByte
 17292  0C18  0020               	movlb	0	; select bank0
 17293  0C19  00AE               	movwf	??_cmd_tri+4
 17294  0C1A  083E               	movf	cmd_tri@j,w
 17295  0C1B  3E2F               	addlw	(low (cmd_tri@buffData| 0))& (0+255)
 17296  0C1C  0086               	movwf	6
 17297  0C1D  0187               	clrf	7
 17298  0C1E  082E               	movf	??_cmd_tri+4,w
 17299  0C1F  0081               	movwf	1
 17300  0C20                     l6972:
 17301  0C20  3001               	movlw	1
 17302  0C21  00AA               	movwf	??_cmd_tri
 17303  0C22  082A               	movf	??_cmd_tri,w
 17304  0C23  07BE               	addwf	cmd_tri@j,f
 17305  0C24                     l6974:
 17306  0C24  3005               	movlw	5
 17307  0C25  023E               	subwf	cmd_tri@j,w
 17308  0C26  1C03               	skipc
 17309  0C27  2C29               	goto	u8131
 17310  0C28  2C2A               	goto	u8130
 17311  0C29                     u8131:
 17312  0C29  2BFA               	goto	l6970
 17313  0C2A                     u8130:
 17314  0C2A                     l6976:
 17315                           
 17316                           ;main.c: 1056: };main.c: 1057: sendMessage(5,buffData);
 17317  0C2A  3005               	movlw	5
 17318  0C2B  00F5               	movwf	sendMessage@num
 17319  0C2C  3000               	movlw	0
 17320  0C2D  00F6               	movwf	sendMessage@num+1
 17321  0C2E  302F               	movlw	(low (cmd_tri@buffData| 0))& (0+255)
 17322  0C2F  00AA               	movwf	??_cmd_tri
 17323  0C30  082A               	movf	??_cmd_tri,w
 17324  0C31  00F7               	movwf	sendMessage@buffer
 17325  0C32  3194  249A  318B   	fcall	_sendMessage
 17326  0C35                     l6978:
 17327                           
 17328                           ;main.c: 1058: if(iread == i){
 17329  0C35  0020               	movlb	0	; select bank0
 17330  0C36  0861               	movf	_iread,w
 17331  0C37  00AA               	movwf	??_cmd_tri
 17332  0C38  01AB               	clrf	??_cmd_tri+1
 17333  0C39  083B               	movf	cmd_tri@i+1,w
 17334  0C3A  062B               	xorwf	??_cmd_tri+1,w
 17335  0C3B  1D03               	skipz
 17336  0C3C  2C3F               	goto	u8145
 17337  0C3D  083A               	movf	cmd_tri@i,w
 17338  0C3E  062A               	xorwf	??_cmd_tri,w
 17339  0C3F                     u8145:
 17340  0C3F  1D03               	skipz
 17341  0C40  2C42               	goto	u8141
 17342  0C41  2C43               	goto	u8140
 17343  0C42                     u8141:
 17344  0C42  2C47               	goto	l6982
 17345  0C43                     u8140:
 17346  0C43                     l6980:
 17347                           
 17348                           ;main.c: 1059: iread++;
 17349  0C43  3001               	movlw	1
 17350  0C44  00AA               	movwf	??_cmd_tri
 17351  0C45  082A               	movf	??_cmd_tri,w
 17352  0C46  07E1               	addwf	_iread,f
 17353  0C47                     l6982:
 17354                           
 17355                           ;main.c: 1060: };main.c: 1061: i++;
 17356  0C47  3001               	movlw	1
 17357  0C48  07BA               	addwf	cmd_tri@i,f
 17358  0C49  3000               	movlw	0
 17359  0C4A  3DBB               	addwfc	cmd_tri@i+1,f
 17360  0C4B                     l6984:
 17361                           
 17362                           ;main.c: 1062: n--;
 17363  0C4B  3001               	movlw	1
 17364  0C4C  02BD               	subwf	cmd_tri@n,f
 17365                           
 17366                           ;main.c: 1063: if(i >= NREG){
 17367  0C4D  083B               	movf	cmd_tri@i+1,w
 17368  0C4E  3A80               	xorlw	128
 17369  0C4F  00AA               	movwf	??_cmd_tri
 17370  0C50  3080               	movlw	128
 17371  0C51  022A               	subwf	??_cmd_tri,w
 17372  0C52  1D03               	skipz
 17373  0C53  2C56               	goto	u8155
 17374  0C54  087B               	movf	_NREG,w
 17375  0C55  023A               	subwf	cmd_tri@i,w
 17376  0C56                     u8155:
 17377  0C56  1C03               	skipc
 17378  0C57  2C59               	goto	u8151
 17379  0C58  2C5A               	goto	u8150
 17380  0C59                     u8151:
 17381  0C59  2C5D               	goto	l6988
 17382  0C5A                     u8150:
 17383  0C5A                     l6986:
 17384                           
 17385                           ;main.c: 1064: i=0;
 17386  0C5A  0020               	movlb	0	; select bank0
 17387  0C5B  01BA               	clrf	cmd_tri@i
 17388  0C5C  01BB               	clrf	cmd_tri@i+1
 17389  0C5D                     l6988:
 17390  0C5D  0020               	movlb	0	; select bank0
 17391  0C5E  083D               	movf	cmd_tri@n,w
 17392  0C5F  1D03               	btfss	3,2
 17393  0C60  2C62               	goto	u8161
 17394  0C61  2C63               	goto	u8160
 17395  0C62                     u8161:
 17396  0C62  2BF9               	goto	l6964
 17397  0C63                     u8160:
 17398  0C63                     l6990:
 17399                           
 17400                           ;main.c: 1065: };main.c: 1066: };main.c: 1069: uint8_t buffEOM[1];;main.c: 1070: buffEOM
      +                          [0] = (uint8_t)0xFE;
 17401  0C63  30FE               	movlw	254
 17402  0C64  00AA               	movwf	??_cmd_tri
 17403  0C65  082A               	movf	??_cmd_tri,w
 17404  0C66  00B9               	movwf	cmd_tri@buffEOM
 17405  0C67                     l6992:
 17406                           
 17407                           ;main.c: 1071: sendMessage(1,buffEOM);
 17408  0C67  3001               	movlw	1
 17409  0C68  00F5               	movwf	sendMessage@num
 17410  0C69  3000               	movlw	0
 17411  0C6A  00F6               	movwf	sendMessage@num+1
 17412  0C6B  3039               	movlw	(low (cmd_tri@buffEOM| 0))& (0+255)
 17413  0C6C  00AA               	movwf	??_cmd_tri
 17414  0C6D  082A               	movf	??_cmd_tri,w
 17415  0C6E  00F7               	movwf	sendMessage@buffer
 17416  0C6F  3194  249A  318B   	fcall	_sendMessage
 17417                           
 17418                           ;main.c: 1072: } else{
 17419  0C72  2C77               	goto	l1515
 17420  0C73                     l6994:
 17421                           
 17422                           ;main.c: 1073: sendERRORMessage((uint8_t)0XCC);
 17423  0C73  30CC               	movlw	204
 17424  0C74  3193  23DC  318B   	fcall	_sendERRORMessage
 17425  0C77                     l1515:
 17426  0C77  0008               	return
 17427  0C78                     __end_of_cmd_tri:
 17428                           
 17429                           	psect	text46
 17430  1418                     __ptext46:	
 17431 ;; *************** function ___wmul *****************
 17432 ;; Defined at:
 17433 ;;		line 15 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 17434 ;; Parameters:    Size  Location     Type
 17435 ;;  multiplier      2    2[COMMON] unsigned int 
 17436 ;;  multiplicand    2    4[COMMON] unsigned int 
 17437 ;; Auto vars:     Size  Location     Type
 17438 ;;  product         2    6[COMMON] unsigned int 
 17439 ;; Return value:  Size  Location     Type
 17440 ;;                  2    2[COMMON] unsigned int 
 17441 ;; Registers used:
 17442 ;;		wreg, status,2, status,0
 17443 ;; Tracked objects:
 17444 ;;		On entry : 0/0
 17445 ;;		On exit  : 0/0
 17446 ;;		Unchanged: 0/0
 17447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17448 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17452 ;;Total ram usage:        6 bytes
 17453 ;; Hardware stack levels used:    1
 17454 ;; Hardware stack levels required when called:    4
 17455 ;; This function calls:
 17456 ;;		Nothing
 17457 ;; This function is called by:
 17458 ;;		_monitoring_TEMP_LUM
 17459 ;;		_cmd_trc
 17460 ;;		_cmd_tri
 17461 ;;		_main
 17462 ;;		_sprintf
 17463 ;;		_map
 17464 ;; This function uses a non-reentrant model
 17465 ;;
 17466                           
 17467                           
 17468                           ;psect for function ___wmul
 17469  1418                     ___wmul:
 17470  1418                     l4434:	
 17471                           ;incstack = 0
 17472                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 17473                           
 17474  1418  01F6               	clrf	___wmul@product
 17475  1419  01F7               	clrf	___wmul@product+1
 17476  141A                     l4436:
 17477  141A  1C72               	btfss	___wmul@multiplier,0
 17478  141B  2C1D               	goto	u3351
 17479  141C  2C1E               	goto	u3350
 17480  141D                     u3351:
 17481  141D  2C22               	goto	l1767
 17482  141E                     u3350:
 17483  141E                     l4438:
 17484  141E  0874               	movf	___wmul@multiplicand,w
 17485  141F  07F6               	addwf	___wmul@product,f
 17486  1420  0875               	movf	___wmul@multiplicand+1,w
 17487  1421  3DF7               	addwfc	___wmul@product+1,f
 17488  1422                     l1767:
 17489  1422  3001               	movlw	1
 17490  1423                     u3365:
 17491  1423  35F4               	lslf	___wmul@multiplicand,f
 17492  1424  0DF5               	rlf	___wmul@multiplicand+1,f
 17493  1425  0B89               	decfsz	9,f
 17494  1426  2C23               	goto	u3365
 17495  1427                     l4440:
 17496  1427  3001               	movlw	1
 17497  1428                     u3375:
 17498  1428  36F3               	lsrf	___wmul@multiplier+1,f
 17499  1429  0CF2               	rrf	___wmul@multiplier,f
 17500  142A  0B89               	decfsz	9,f
 17501  142B  2C28               	goto	u3375
 17502  142C                     l4442:
 17503  142C  0872               	movf	___wmul@multiplier,w
 17504  142D  0473               	iorwf	___wmul@multiplier+1,w
 17505  142E  1D03               	btfss	3,2
 17506  142F  2C31               	goto	u3381
 17507  1430  2C32               	goto	u3380
 17508  1431                     u3381:
 17509  1431  2C1A               	goto	l4436
 17510  1432                     u3380:
 17511  1432                     l4444:
 17512  1432  0877               	movf	___wmul@product+1,w
 17513  1433  00F3               	movwf	?___wmul+1
 17514  1434  0876               	movf	___wmul@product,w
 17515  1435  00F2               	movwf	?___wmul
 17516  1436                     l1769:
 17517  1436  0008               	return
 17518  1437                     __end_of___wmul:
 17519                           
 17520                           	psect	text47
 17521  1269                     __ptext47:	
 17522 ;; *************** function _DATAEE_ReadByte *****************
 17523 ;; Defined at:
 17524 ;;		line 202 in file "mcc_generated_files/memory.c"
 17525 ;; Parameters:    Size  Location     Type
 17526 ;;  bAdd            2    8[COMMON] unsigned int 
 17527 ;; Auto vars:     Size  Location     Type
 17528 ;;		None
 17529 ;; Return value:  Size  Location     Type
 17530 ;;                  1    wreg      unsigned char 
 17531 ;; Registers used:
 17532 ;;		wreg, status,2
 17533 ;; Tracked objects:
 17534 ;;		On entry : 0/0
 17535 ;;		On exit  : 0/0
 17536 ;;		Unchanged: 0/0
 17537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17538 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17542 ;;Total ram usage:        2 bytes
 17543 ;; Hardware stack levels used:    1
 17544 ;; Hardware stack levels required when called:    4
 17545 ;; This function calls:
 17546 ;;		Nothing
 17547 ;; This function is called by:
 17548 ;;		_cmd_trc
 17549 ;;		_cmd_tri
 17550 ;;		_main
 17551 ;; This function uses a non-reentrant model
 17552 ;;
 17553                           
 17554                           
 17555                           ;psect for function _DATAEE_ReadByte
 17556  1269                     _DATAEE_ReadByte:
 17557  1269                     l5124:	
 17558                           ;incstack = 0
 17559                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 17560                           
 17561                           
 17562                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 17563  1269  0879               	movf	DATAEE_ReadByte@bAdd+1,w
 17564  126A  0030               	movlb	16	; select bank16
 17565  126B  009B               	movwf	27	;volatile
 17566  126C                     l5126:
 17567                           
 17568                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 17569  126C  0878               	movf	DATAEE_ReadByte@bAdd,w
 17570  126D  009A               	movwf	26	;volatile
 17571  126E                     l5128:
 17572                           
 17573                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 17574  126E  171E               	bsf	30,6	;volsfr
 17575  126F                     l5130:
 17576                           
 17577                           ;memory.c: 207: NVMCON1bits.RD = 1;
 17578  126F  141E               	bsf	30,0	;volsfr
 17579  1270                     l5132:
 17580                           
 17581                           ;memory.c: 208: __nop();
 17582  1270  0000               	nop
 17583  1271                     l5134:
 17584                           
 17585                           ;memory.c: 209: __nop();
 17586  1271  0000               	nop
 17587  1272                     l5136:
 17588                           
 17589                           ;memory.c: 211: return (NVMDATL);
 17590  1272  0030               	movlb	16	; select bank16
 17591  1273  081C               	movf	28,w	;volatile
 17592  1274                     l734:
 17593  1274  0008               	return
 17594  1275                     __end_of_DATAEE_ReadByte:
 17595                           
 17596                           	psect	text48
 17597  136C                     __ptext48:	
 17598 ;; *************** function _sendOKMessage *****************
 17599 ;; Defined at:
 17600 ;;		line 823 in file "main.c"
 17601 ;; Parameters:    Size  Location     Type
 17602 ;;  cmd             1    wreg     unsigned char 
 17603 ;; Auto vars:     Size  Location     Type
 17604 ;;  cmd             1    2[BANK0 ] unsigned char 
 17605 ;;  bufw            4    3[BANK0 ] unsigned char [4]
 17606 ;; Return value:  Size  Location     Type
 17607 ;;                  1    wreg      void 
 17608 ;; Registers used:
 17609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17610 ;; Tracked objects:
 17611 ;;		On entry : 0/0
 17612 ;;		On exit  : 0/0
 17613 ;;		Unchanged: 0/0
 17614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17616 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17618 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17619 ;;Total ram usage:        6 bytes
 17620 ;; Hardware stack levels used:    1
 17621 ;; Hardware stack levels required when called:    7
 17622 ;; This function calls:
 17623 ;;		_sendMessage
 17624 ;; This function is called by:
 17625 ;;		_cmd_sc
 17626 ;;		_cmd_mmp
 17627 ;;		_cmd_mta
 17628 ;;		_cmd_dac
 17629 ;;		_cmd_dtl
 17630 ;;		_cmd_aa
 17631 ;; This function uses a non-reentrant model
 17632 ;;
 17633                           
 17634                           
 17635                           ;psect for function _sendOKMessage
 17636  136C                     _sendOKMessage:
 17637                           
 17638                           ;incstack = 0
 17639                           ; Regs used in _sendOKMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17640                           ;sendOKMessage@cmd stored from wreg
 17641  136C  0020               	movlb	0	; select bank0
 17642  136D  00A2               	movwf	sendOKMessage@cmd
 17643  136E                     l6566:
 17644                           
 17645                           ;main.c: 824: uint8_t bufw[4];;main.c: 825: bufw[0] = (uint8_t)0xFD;
 17646  136E  30FD               	movlw	253
 17647  136F  00F9               	movwf	??_sendOKMessage
 17648  1370  0879               	movf	??_sendOKMessage,w
 17649  1371  00A3               	movwf	sendOKMessage@bufw
 17650                           
 17651                           ;main.c: 826: bufw[1] = (uint8_t)cmd;
 17652  1372  0822               	movf	sendOKMessage@cmd,w
 17653  1373  00F9               	movwf	??_sendOKMessage
 17654  1374  0879               	movf	??_sendOKMessage,w
 17655  1375  00A4               	movwf	sendOKMessage@bufw+1
 17656  1376                     l6568:
 17657                           
 17658                           ;main.c: 827: bufw[2] = (uint8_t)0;
 17659  1376  01A5               	clrf	sendOKMessage@bufw+2
 17660  1377                     l6570:
 17661                           
 17662                           ;main.c: 828: bufw[3] = (uint8_t)0xFE;
 17663  1377  30FE               	movlw	254
 17664  1378  00F9               	movwf	??_sendOKMessage
 17665  1379  0879               	movf	??_sendOKMessage,w
 17666  137A  00A6               	movwf	sendOKMessage@bufw+3
 17667  137B                     l6572:
 17668                           
 17669                           ;main.c: 830: sendMessage(4,bufw);
 17670  137B  3004               	movlw	4
 17671  137C  00F5               	movwf	sendMessage@num
 17672  137D  3000               	movlw	0
 17673  137E  00F6               	movwf	sendMessage@num+1
 17674  137F  3023               	movlw	(low (sendOKMessage@bufw| 0))& (0+255)
 17675  1380  00F9               	movwf	??_sendOKMessage
 17676  1381  0879               	movf	??_sendOKMessage,w
 17677  1382  00F7               	movwf	sendMessage@buffer
 17678  1383  3194  249A  3193   	fcall	_sendMessage
 17679  1386                     l1440:
 17680  1386  0008               	return
 17681  1387                     __end_of_sendOKMessage:
 17682                           
 17683                           	psect	text49
 17684  13DC                     __ptext49:	
 17685 ;; *************** function _sendERRORMessage *****************
 17686 ;; Defined at:
 17687 ;;		line 833 in file "main.c"
 17688 ;; Parameters:    Size  Location     Type
 17689 ;;  cmd             1    wreg     unsigned char 
 17690 ;; Auto vars:     Size  Location     Type
 17691 ;;  cmd             1    2[BANK0 ] unsigned char 
 17692 ;;  bufw            4    3[BANK0 ] unsigned char [4]
 17693 ;; Return value:  Size  Location     Type
 17694 ;;                  1    wreg      void 
 17695 ;; Registers used:
 17696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17697 ;; Tracked objects:
 17698 ;;		On entry : 0/0
 17699 ;;		On exit  : 0/0
 17700 ;;		Unchanged: 0/0
 17701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17703 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17704 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17705 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17706 ;;Total ram usage:        6 bytes
 17707 ;; Hardware stack levels used:    1
 17708 ;; Hardware stack levels required when called:    7
 17709 ;; This function calls:
 17710 ;;		_sendMessage
 17711 ;; This function is called by:
 17712 ;;		_cmd_sc
 17713 ;;		_cmd_mmp
 17714 ;;		_cmd_mta
 17715 ;;		_cmd_dac
 17716 ;;		_cmd_dtl
 17717 ;;		_cmd_aa
 17718 ;;		_cmd_trc
 17719 ;;		_cmd_tri
 17720 ;; This function uses a non-reentrant model
 17721 ;;
 17722                           
 17723                           
 17724                           ;psect for function _sendERRORMessage
 17725  13DC                     _sendERRORMessage:
 17726                           
 17727                           ;incstack = 0
 17728                           ; Regs used in _sendERRORMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17729                           ;sendERRORMessage@cmd stored from wreg
 17730  13DC  0020               	movlb	0	; select bank0
 17731  13DD  00A2               	movwf	sendERRORMessage@cmd
 17732  13DE                     l6574:
 17733                           
 17734                           ;main.c: 834: uint8_t bufw[4];;main.c: 835: bufw[0] = (uint8_t)0xFD;
 17735  13DE  30FD               	movlw	253
 17736  13DF  00F9               	movwf	??_sendERRORMessage
 17737  13E0  0879               	movf	??_sendERRORMessage,w
 17738  13E1  00A3               	movwf	sendERRORMessage@bufw
 17739                           
 17740                           ;main.c: 836: bufw[1] = (uint8_t)cmd;
 17741  13E2  0822               	movf	sendERRORMessage@cmd,w
 17742  13E3  00F9               	movwf	??_sendERRORMessage
 17743  13E4  0879               	movf	??_sendERRORMessage,w
 17744  13E5  00A4               	movwf	sendERRORMessage@bufw+1
 17745                           
 17746                           ;main.c: 837: bufw[2] = (uint8_t)0xFF;
 17747  13E6  30FF               	movlw	255
 17748  13E7  00F9               	movwf	??_sendERRORMessage
 17749  13E8  0879               	movf	??_sendERRORMessage,w
 17750  13E9  00A5               	movwf	sendERRORMessage@bufw+2
 17751                           
 17752                           ;main.c: 838: bufw[3] = (uint8_t)0xFE;
 17753  13EA  30FE               	movlw	254
 17754  13EB  00F9               	movwf	??_sendERRORMessage
 17755  13EC  0879               	movf	??_sendERRORMessage,w
 17756  13ED  00A6               	movwf	sendERRORMessage@bufw+3
 17757  13EE                     l6576:
 17758                           
 17759                           ;main.c: 840: sendMessage(4,bufw);
 17760  13EE  3004               	movlw	4
 17761  13EF  00F5               	movwf	sendMessage@num
 17762  13F0  3000               	movlw	0
 17763  13F1  00F6               	movwf	sendMessage@num+1
 17764  13F2  3023               	movlw	(low (sendERRORMessage@bufw| 0))& (0+255)
 17765  13F3  00F9               	movwf	??_sendERRORMessage
 17766  13F4  0879               	movf	??_sendERRORMessage,w
 17767  13F5  00F7               	movwf	sendMessage@buffer
 17768  13F6  3194  249A  3193   	fcall	_sendMessage
 17769  13F9                     l1443:
 17770  13F9  0008               	return
 17771  13FA                     __end_of_sendERRORMessage:
 17772                           
 17773                           	psect	text50
 17774  149A                     __ptext50:	
 17775 ;; *************** function _sendMessage *****************
 17776 ;; Defined at:
 17777 ;;		line 815 in file "main.c"
 17778 ;; Parameters:    Size  Location     Type
 17779 ;;  num             2    5[COMMON] int 
 17780 ;;  buffer          1    7[COMMON] PTR unsigned char 
 17781 ;;		 -> cmd_tri@buffEOM(1), cmd_tri@buffData(5), cmd_tri@buffInit(4), cmd_trc@buffEOM(1), 
 17782 ;;		 -> cmd_trc@buffData(5), cmd_trc@buffInit(3), cmd_ir@buff(7), cmd_ra@buff(9), 
 17783 ;;		 -> cmd_rp@buff(5), cmd_rtl@buff(5), cmd_rc@buff(6), sendERRORMessage@bufw(4), 
 17784 ;;		 -> sendOKMessage@bufw(4), 
 17785 ;; Auto vars:     Size  Location     Type
 17786 ;;  n               2    0[BANK0 ] int 
 17787 ;; Return value:  Size  Location     Type
 17788 ;;                  1    wreg      void 
 17789 ;; Registers used:
 17790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17791 ;; Tracked objects:
 17792 ;;		On entry : 0/0
 17793 ;;		On exit  : 0/0
 17794 ;;		Unchanged: 0/0
 17795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17796 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17799 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17800 ;;Total ram usage:        6 bytes
 17801 ;; Hardware stack levels used:    1
 17802 ;; Hardware stack levels required when called:    6
 17803 ;; This function calls:
 17804 ;;		_putch
 17805 ;; This function is called by:
 17806 ;;		_sendOKMessage
 17807 ;;		_sendERRORMessage
 17808 ;;		_cmd_rc
 17809 ;;		_cmd_rtl
 17810 ;;		_cmd_rp
 17811 ;;		_cmd_ra
 17812 ;;		_cmd_ir
 17813 ;;		_cmd_trc
 17814 ;;		_cmd_tri
 17815 ;; This function uses a non-reentrant model
 17816 ;;
 17817                           
 17818                           
 17819                           ;psect for function _sendMessage
 17820  149A                     _sendMessage:
 17821  149A                     l6500:	
 17822                           ;incstack = 0
 17823                           ; Regs used in _sendMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17824                           
 17825                           
 17826                           ;main.c: 816: int n = 0;
 17827  149A  0020               	movlb	0	; select bank0
 17828  149B  01A0               	clrf	sendMessage@n
 17829  149C  01A1               	clrf	sendMessage@n+1
 17830                           
 17831                           ;main.c: 817: while(n<num){
 17832  149D  2CAE               	goto	l6506
 17833  149E                     l6502:
 17834                           
 17835                           ;main.c: 818: putch(buffer[n]);
 17836  149E  0020               	movlb	0	; select bank0
 17837  149F  0820               	movf	sendMessage@n,w
 17838  14A0  0777               	addwf	sendMessage@buffer,w
 17839  14A1  00F8               	movwf	??_sendMessage
 17840  14A2  0878               	movf	??_sendMessage,w
 17841  14A3  0086               	movwf	6
 17842  14A4  0187               	clrf	7
 17843  14A5  0801               	movf	1,w
 17844  14A6  3192  2224  3194   	fcall	_putch
 17845  14A9                     l6504:
 17846                           
 17847                           ;main.c: 819: n++;
 17848  14A9  3001               	movlw	1
 17849  14AA  0020               	movlb	0	; select bank0
 17850  14AB  07A0               	addwf	sendMessage@n,f
 17851  14AC  3000               	movlw	0
 17852  14AD  3DA1               	addwfc	sendMessage@n+1,f
 17853  14AE                     l6506:
 17854  14AE  0821               	movf	sendMessage@n+1,w
 17855  14AF  3A80               	xorlw	128
 17856  14B0  00F8               	movwf	??_sendMessage
 17857  14B1  0876               	movf	sendMessage@num+1,w
 17858  14B2  3A80               	xorlw	128
 17859  14B3  0278               	subwf	??_sendMessage,w
 17860  14B4  1D03               	skipz
 17861  14B5  2CB8               	goto	u7215
 17862  14B6  0875               	movf	sendMessage@num,w
 17863  14B7  0220               	subwf	sendMessage@n,w
 17864  14B8                     u7215:
 17865  14B8  1C03               	skipc
 17866  14B9  2CBB               	goto	u7211
 17867  14BA  2CBC               	goto	u7210
 17868  14BB                     u7211:
 17869  14BB  2C9E               	goto	l6502
 17870  14BC                     u7210:
 17871  14BC                     l1437:
 17872  14BC  0008               	return
 17873  14BD                     __end_of_sendMessage:
 17874                           
 17875                           	psect	text51
 17876  1224                     __ptext51:	
 17877 ;; *************** function _putch *****************
 17878 ;; Defined at:
 17879 ;;		line 176 in file "mcc_generated_files/eusart.c"
 17880 ;; Parameters:    Size  Location     Type
 17881 ;;  txData          1    wreg     unsigned char 
 17882 ;; Auto vars:     Size  Location     Type
 17883 ;;  txData          1    4[COMMON] unsigned char 
 17884 ;; Return value:  Size  Location     Type
 17885 ;;                  1    wreg      void 
 17886 ;; Registers used:
 17887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17888 ;; Tracked objects:
 17889 ;;		On entry : 0/0
 17890 ;;		On exit  : 0/0
 17891 ;;		Unchanged: 0/0
 17892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17894 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17896 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17897 ;;Total ram usage:        1 bytes
 17898 ;; Hardware stack levels used:    1
 17899 ;; Hardware stack levels required when called:    5
 17900 ;; This function calls:
 17901 ;;		_EUSART_Write
 17902 ;; This function is called by:
 17903 ;;		_sendMessage
 17904 ;; This function uses a non-reentrant model
 17905 ;;
 17906                           
 17907                           
 17908                           ;psect for function _putch
 17909  1224                     _putch:
 17910                           
 17911                           ;incstack = 0
 17912                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17913                           ;putch@txData stored from wreg
 17914  1224  00F4               	movwf	putch@txData
 17915  1225                     l6122:
 17916                           
 17917                           ;eusart.c: 178: EUSART_Write(txData);
 17918  1225  0874               	movf	putch@txData,w
 17919  1226  3195  2576  3192   	fcall	_EUSART_Write
 17920  1229                     l842:
 17921  1229  0008               	return
 17922  122A                     __end_of_putch:
 17923                           
 17924                           	psect	text52
 17925  1576                     __ptext52:	
 17926 ;; *************** function _EUSART_Write *****************
 17927 ;; Defined at:
 17928 ;;		line 148 in file "mcc_generated_files/eusart.c"
 17929 ;; Parameters:    Size  Location     Type
 17930 ;;  txData          1    wreg     unsigned char 
 17931 ;; Auto vars:     Size  Location     Type
 17932 ;;  txData          1    3[COMMON] unsigned char 
 17933 ;; Return value:  Size  Location     Type
 17934 ;;                  1    wreg      void 
 17935 ;; Registers used:
 17936 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17937 ;; Tracked objects:
 17938 ;;		On entry : 0/0
 17939 ;;		On exit  : 0/0
 17940 ;;		Unchanged: 0/0
 17941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;Total ram usage:        2 bytes
 17947 ;; Hardware stack levels used:    1
 17948 ;; Hardware stack levels required when called:    4
 17949 ;; This function calls:
 17950 ;;		Nothing
 17951 ;; This function is called by:
 17952 ;;		_putch
 17953 ;; This function uses a non-reentrant model
 17954 ;;
 17955                           
 17956                           
 17957                           ;psect for function _EUSART_Write
 17958  1576                     _EUSART_Write:
 17959                           
 17960                           ;incstack = 0
 17961                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 17962                           ;EUSART_Write@txData stored from wreg
 17963  1576  00F3               	movwf	EUSART_Write@txData
 17964  1577                     l6060:
 17965  1577                     l6062:	
 17966                           ;eusart.c: 150: while(0 == eusartTxBufferRemaining)
 17967                           
 17968  1577  0021               	movlb	1	; select bank1
 17969  1578  0862               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 17970  1579  1903               	btfsc	3,2
 17971  157A  2D7C               	goto	u6241
 17972  157B  2D7D               	goto	u6240
 17973  157C                     u6241:
 17974  157C  2D77               	goto	l6062
 17975  157D                     u6240:
 17976  157D                     l832:
 17977                           
 17978                           ;eusart.c: 152: };eusart.c: 154: if(0 == PIE3bits.TXIE)
 17979  157D  002E               	movlb	14	; select bank14
 17980  157E  1A19               	btfsc	25,4	;volatile
 17981  157F  2D81               	goto	u6251
 17982  1580  2D82               	goto	u6250
 17983  1581                     u6251:
 17984  1581  2D86               	goto	l833
 17985  1582                     u6250:
 17986  1582                     l6064:
 17987                           
 17988                           ;eusart.c: 155: {;eusart.c: 156: TX1REG = txData;
 17989  1582  0873               	movf	EUSART_Write@txData,w
 17990  1583  0022               	movlb	2	; select bank2
 17991  1584  009A               	movwf	26	;volatile
 17992                           
 17993                           ;eusart.c: 157: }
 17994  1585  2D9F               	goto	l6076
 17995  1586                     l833:
 17996                           
 17997                           ;eusart.c: 158: else;eusart.c: 159: {;eusart.c: 160: PIE3bits.TXIE = 0;
 17998  1586  1219               	bcf	25,4	;volatile
 17999  1587                     l6066:
 18000                           
 18001                           ;eusart.c: 161: eusartTxBuffer[eusartTxHead++] = txData;
 18002  1587  0873               	movf	EUSART_Write@txData,w
 18003  1588  00F2               	movwf	??_EUSART_Write
 18004  1589  0020               	movlb	0	; select bank0
 18005  158A  086C               	movf	_eusartTxHead,w
 18006  158B  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 18007  158C  0086               	movwf	6
 18008  158D  3001               	movlw	1	; select bank3/4
 18009  158E  0087               	movwf	7
 18010  158F  0872               	movf	??_EUSART_Write,w
 18011  1590  0081               	movwf	1
 18012  1591                     l6068:
 18013  1591  3001               	movlw	1
 18014  1592  00F2               	movwf	??_EUSART_Write
 18015  1593  0872               	movf	??_EUSART_Write,w
 18016  1594  07EC               	addwf	_eusartTxHead,f	;volatile
 18017  1595                     l6070:
 18018                           
 18019                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 18020  1595  3040               	movlw	64
 18021  1596  026C               	subwf	_eusartTxHead,w	;volatile
 18022  1597  1C03               	skipc
 18023  1598  2D9A               	goto	u6261
 18024  1599  2D9B               	goto	u6260
 18025  159A                     u6261:
 18026  159A  2D9C               	goto	l6074
 18027  159B                     u6260:
 18028  159B                     l6072:
 18029                           
 18030                           ;eusart.c: 163: {;eusart.c: 164: eusartTxHead = 0;
 18031  159B  01EC               	clrf	_eusartTxHead	;volatile
 18032  159C                     l6074:
 18033                           
 18034                           ;eusart.c: 165: };eusart.c: 166: eusartTxBufferRemaining--;
 18035  159C  3001               	movlw	1
 18036  159D  0021               	movlb	1	; select bank1
 18037  159E  02E2               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 18038  159F                     l6076:
 18039                           
 18040                           ;eusart.c: 167: };eusart.c: 168: PIE3bits.TXIE = 1;
 18041  159F  002E               	movlb	14	; select bank14
 18042  15A0  1619               	bsf	25,4	;volatile
 18043  15A1                     l836:
 18044  15A1  0008               	return
 18045  15A2                     __end_of_EUSART_Write:
 18046                           
 18047                           	psect	text53
 18048  13A2                     __ptext53:	
 18049 ;; *************** function _SYSTEM_Initialize *****************
 18050 ;; Defined at:
 18051 ;;		line 50 in file "mcc_generated_files/mcc.c"
 18052 ;; Parameters:    Size  Location     Type
 18053 ;;		None
 18054 ;; Auto vars:     Size  Location     Type
 18055 ;;		None
 18056 ;; Return value:  Size  Location     Type
 18057 ;;                  1    wreg      void 
 18058 ;; Registers used:
 18059 ;;		wreg, status,2, status,0, pclath, cstack
 18060 ;; Tracked objects:
 18061 ;;		On entry : 0/0
 18062 ;;		On exit  : 0/0
 18063 ;;		Unchanged: 0/0
 18064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18069 ;;Total ram usage:        0 bytes
 18070 ;; Hardware stack levels used:    1
 18071 ;; Hardware stack levels required when called:    6
 18072 ;; This function calls:
 18073 ;;		_ADCC_Initialize
 18074 ;;		_EUSART_Initialize
 18075 ;;		_EXT_INT_Initialize
 18076 ;;		_OSCILLATOR_Initialize
 18077 ;;		_PIN_MANAGER_Initialize
 18078 ;;		_PMD_Initialize
 18079 ;;		_PWM6_Initialize
 18080 ;;		_TMR1_Initialize
 18081 ;;		_TMR2_Initialize
 18082 ;; This function is called by:
 18083 ;;		_main
 18084 ;; This function uses a non-reentrant model
 18085 ;;
 18086                           
 18087                           
 18088                           ;psect for function _SYSTEM_Initialize
 18089  13A2                     _SYSTEM_Initialize:
 18090  13A2                     l5280:	
 18091                           ;incstack = 0
 18092                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18093                           
 18094                           
 18095                           ;mcc.c: 52: PMD_Initialize();
 18096  13A2  3192  2236  3193   	fcall	_PMD_Initialize
 18097  13A5                     l5282:
 18098                           
 18099                           ;mcc.c: 53: PIN_MANAGER_Initialize();
 18100  13A5  3188  2051  3193   	fcall	_PIN_MANAGER_Initialize
 18101  13A8                     l5284:
 18102                           
 18103                           ;mcc.c: 54: OSCILLATOR_Initialize();
 18104  13A8  3192  2257  3193   	fcall	_OSCILLATOR_Initialize
 18105  13AB                     l5286:
 18106                           
 18107                           ;mcc.c: 55: PWM6_Initialize();
 18108  13AB  3192  229B  3193   	fcall	_PWM6_Initialize
 18109  13AE                     l5288:
 18110                           
 18111                           ;mcc.c: 56: ADCC_Initialize();
 18112  13AE  3193  230A  3193   	fcall	_ADCC_Initialize
 18113  13B1                     l5290:
 18114                           
 18115                           ;mcc.c: 57: TMR2_Initialize();
 18116  13B1  3188  2000  3193   	fcall	_TMR2_Initialize
 18117  13B4                     l5292:
 18118                           
 18119                           ;mcc.c: 58: TMR1_Initialize();
 18120  13B4  3193  23BE  3193   	fcall	_TMR1_Initialize
 18121  13B7                     l5294:
 18122                           
 18123                           ;mcc.c: 59: EXT_INT_Initialize();
 18124  13B7  3192  228E  3193   	fcall	_EXT_INT_Initialize
 18125  13BA                     l5296:
 18126                           
 18127                           ;mcc.c: 60: EUSART_Initialize();
 18128  13BA  3187  27D5  3193   	fcall	_EUSART_Initialize
 18129  13BD                     l182:
 18130  13BD  0008               	return
 18131  13BE                     __end_of_SYSTEM_Initialize:
 18132                           
 18133                           	psect	text54
 18134  0800                     __ptext54:	
 18135 ;; *************** function _TMR2_Initialize *****************
 18136 ;; Defined at:
 18137 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 18138 ;; Parameters:    Size  Location     Type
 18139 ;;		None
 18140 ;; Auto vars:     Size  Location     Type
 18141 ;;		None
 18142 ;; Return value:  Size  Location     Type
 18143 ;;                  1    wreg      void 
 18144 ;; Registers used:
 18145 ;;		wreg, status,2
 18146 ;; Tracked objects:
 18147 ;;		On entry : 0/0
 18148 ;;		On exit  : 0/0
 18149 ;;		Unchanged: 0/0
 18150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18155 ;;Total ram usage:        0 bytes
 18156 ;; Hardware stack levels used:    1
 18157 ;; Hardware stack levels required when called:    4
 18158 ;; This function calls:
 18159 ;;		Nothing
 18160 ;; This function is called by:
 18161 ;;		_SYSTEM_Initialize
 18162 ;; This function uses a non-reentrant model
 18163 ;;
 18164                           
 18165                           
 18166                           ;psect for function _TMR2_Initialize
 18167  0800                     _TMR2_Initialize:
 18168  0800                     l5044:	
 18169                           ;incstack = 0
 18170                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 18171                           
 18172                           
 18173                           ;tmr2.c: 67: T2CLKCON = 0x01;
 18174  0800  3001               	movlw	1
 18175  0801  0025               	movlb	5	; select bank5
 18176  0802  0090               	movwf	16	;volatile
 18177  0803                     l5046:
 18178                           
 18179                           ;tmr2.c: 70: T2HLT = 0x00;
 18180  0803  018F               	clrf	15	;volatile
 18181  0804                     l5048:
 18182                           
 18183                           ;tmr2.c: 73: T2RST = 0x00;
 18184  0804  0191               	clrf	17	;volatile
 18185                           
 18186                           ;tmr2.c: 76: T2PR = 0xFF;
 18187  0805  30FF               	movlw	255
 18188  0806  008D               	movwf	13	;volatile
 18189  0807                     l5050:
 18190                           
 18191                           ;tmr2.c: 79: T2TMR = 0x00;
 18192  0807  018C               	clrf	12	;volatile
 18193  0808                     l5052:
 18194                           
 18195                           ;tmr2.c: 82: PIR4bits.TMR2IF = 0;
 18196  0808  002E               	movlb	14	; select bank14
 18197  0809  1090               	bcf	16,1	;volatile
 18198  080A                     l5054:
 18199                           
 18200                           ;tmr2.c: 85: T2CON = 0x80;
 18201  080A  3080               	movlw	128
 18202  080B  0025               	movlb	5	; select bank5
 18203  080C  008E               	movwf	14	;volatile
 18204  080D                     l647:
 18205  080D  0008               	return
 18206  080E                     __end_of_TMR2_Initialize:
 18207                           
 18208                           	psect	text55
 18209  13BE                     __ptext55:	
 18210 ;; *************** function _TMR1_Initialize *****************
 18211 ;; Defined at:
 18212 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 18213 ;; Parameters:    Size  Location     Type
 18214 ;;		None
 18215 ;; Auto vars:     Size  Location     Type
 18216 ;;		None
 18217 ;; Return value:  Size  Location     Type
 18218 ;;                  1    wreg      void 
 18219 ;; Registers used:
 18220 ;;		wreg, status,2, status,0, pclath, cstack
 18221 ;; Tracked objects:
 18222 ;;		On entry : 0/0
 18223 ;;		On exit  : 0/0
 18224 ;;		Unchanged: 0/0
 18225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;Total ram usage:        0 bytes
 18231 ;; Hardware stack levels used:    1
 18232 ;; Hardware stack levels required when called:    5
 18233 ;; This function calls:
 18234 ;;		_TMR1_SetInterruptHandler
 18235 ;; This function is called by:
 18236 ;;		_SYSTEM_Initialize
 18237 ;; This function uses a non-reentrant model
 18238 ;;
 18239                           
 18240                           
 18241                           ;psect for function _TMR1_Initialize
 18242  13BE                     _TMR1_Initialize:
 18243  13BE                     l5056:	
 18244                           ;incstack = 0
 18245                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18246                           
 18247                           
 18248                           ;tmr1.c: 69: T1GCON = 0x00;
 18249  13BE  0024               	movlb	4	; select bank4
 18250  13BF  018F               	clrf	15	;volatile
 18251                           
 18252                           ;tmr1.c: 72: T1GATE = 0x00;
 18253  13C0  0190               	clrf	16	;volatile
 18254  13C1                     l5058:
 18255                           
 18256                           ;tmr1.c: 75: T1CLK = 0x04;
 18257  13C1  3004               	movlw	4
 18258  13C2  0091               	movwf	17	;volatile
 18259  13C3                     l5060:
 18260                           
 18261                           ;tmr1.c: 78: TMR1H = 0x86;
 18262  13C3  3086               	movlw	134
 18263  13C4  008D               	movwf	13	;volatile
 18264  13C5                     l5062:
 18265                           
 18266                           ;tmr1.c: 81: TMR1L = 0xE8;
 18267  13C5  30E8               	movlw	232
 18268  13C6  008C               	movwf	12	;volatile
 18269  13C7                     l5064:
 18270                           
 18271                           ;tmr1.c: 84: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 18272  13C7  080D               	movf	13,w	;volatile
 18273  13C8  0021               	movlb	1	; select bank1
 18274  13C9  00DD               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
 18275  13CA  0024               	movlb	4	; select bank4
 18276  13CB  080C               	movf	12,w	;volatile
 18277  13CC  0021               	movlb	1	; select bank1
 18278  13CD  00DC               	movwf	_timer1ReloadVal^(0+128)	;volatile
 18279  13CE                     l5066:
 18280                           
 18281                           ;tmr1.c: 87: PIR4bits.TMR1IF = 0;
 18282  13CE  002E               	movlb	14	; select bank14
 18283  13CF  1010               	bcf	16,0	;volatile
 18284  13D0                     l5068:
 18285                           
 18286                           ;tmr1.c: 90: PIE4bits.TMR1IE = 1;
 18287  13D0  141A               	bsf	26,0	;volatile
 18288  13D1                     l5070:
 18289                           
 18290                           ;tmr1.c: 93: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 18291  13D1  30E9               	movlw	low _TMR1_DefaultInterruptHandler
 18292  13D2  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 18293  13D3  3011               	movlw	high _TMR1_DefaultInterruptHandler
 18294  13D4  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 18295  13D5  3192  221E  3193   	fcall	_TMR1_SetInterruptHandler
 18296  13D8                     l5072:
 18297                           
 18298                           ;tmr1.c: 96: T1CON = 0x05;
 18299  13D8  3005               	movlw	5
 18300  13D9  0024               	movlb	4	; select bank4
 18301  13DA  008E               	movwf	14	;volatile
 18302  13DB                     l409:
 18303  13DB  0008               	return
 18304  13DC                     __end_of_TMR1_Initialize:
 18305                           
 18306                           	psect	text56
 18307  121E                     __ptext56:	
 18308 ;; *************** function _TMR1_SetInterruptHandler *****************
 18309 ;; Defined at:
 18310 ;;		line 178 in file "mcc_generated_files/tmr1.c"
 18311 ;; Parameters:    Size  Location     Type
 18312 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
 18313 ;;		 -> Clock_ISR(1), TMR1_DefaultInterruptHandler(1), 
 18314 ;; Auto vars:     Size  Location     Type
 18315 ;;		None
 18316 ;; Return value:  Size  Location     Type
 18317 ;;                  1    wreg      void 
 18318 ;; Registers used:
 18319 ;;		wreg
 18320 ;; Tracked objects:
 18321 ;;		On entry : 0/0
 18322 ;;		On exit  : 0/0
 18323 ;;		Unchanged: 0/0
 18324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18325 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18329 ;;Total ram usage:        2 bytes
 18330 ;; Hardware stack levels used:    1
 18331 ;; Hardware stack levels required when called:    4
 18332 ;; This function calls:
 18333 ;;		Nothing
 18334 ;; This function is called by:
 18335 ;;		_TMR1_Initialize
 18336 ;;		_main
 18337 ;; This function uses a non-reentrant model
 18338 ;;
 18339                           
 18340                           
 18341                           ;psect for function _TMR1_SetInterruptHandler
 18342  121E                     _TMR1_SetInterruptHandler:
 18343  121E                     l4724:	
 18344                           ;incstack = 0
 18345                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 18346                           
 18347                           
 18348                           ;tmr1.c: 179: TMR1_InterruptHandler = InterruptHandler;
 18349  121E  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 18350  121F  0021               	movlb	1	; select bank1
 18351  1220  00DB               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
 18352  1221  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 18353  1222  00DA               	movwf	_TMR1_InterruptHandler^(0+128)
 18354  1223                     l439:
 18355  1223  0008               	return
 18356  1224                     __end_of_TMR1_SetInterruptHandler:
 18357                           
 18358                           	psect	text57
 18359  129B                     __ptext57:	
 18360 ;; *************** function _PWM6_Initialize *****************
 18361 ;; Defined at:
 18362 ;;		line 58 in file "mcc_generated_files/pwm6.c"
 18363 ;; Parameters:    Size  Location     Type
 18364 ;;		None
 18365 ;; Auto vars:     Size  Location     Type
 18366 ;;		None
 18367 ;; Return value:  Size  Location     Type
 18368 ;;                  1    wreg      void 
 18369 ;; Registers used:
 18370 ;;		wreg, status,2, status,0
 18371 ;; Tracked objects:
 18372 ;;		On entry : 0/0
 18373 ;;		On exit  : 0/0
 18374 ;;		Unchanged: 0/0
 18375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;Total ram usage:        0 bytes
 18381 ;; Hardware stack levels used:    1
 18382 ;; Hardware stack levels required when called:    4
 18383 ;; This function calls:
 18384 ;;		Nothing
 18385 ;; This function is called by:
 18386 ;;		_SYSTEM_Initialize
 18387 ;; This function uses a non-reentrant model
 18388 ;;
 18389                           
 18390                           
 18391                           ;psect for function _PWM6_Initialize
 18392  129B                     _PWM6_Initialize:
 18393  129B                     l5034:	
 18394                           ;incstack = 0
 18395                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 18396                           
 18397                           
 18398                           ;pwm6.c: 62: PWM6CON = 0x80;
 18399  129B  3080               	movlw	128
 18400  129C  0027               	movlb	7	; select bank7
 18401  129D  008E               	movwf	14	;volatile
 18402                           
 18403                           ;pwm6.c: 65: PWM6DCH = 0xFF;
 18404  129E  30FF               	movlw	255
 18405  129F  008D               	movwf	13	;volatile
 18406                           
 18407                           ;pwm6.c: 68: PWM6DCL = 0xC0;
 18408  12A0  30C0               	movlw	192
 18409  12A1  008C               	movwf	12	;volatile
 18410  12A2                     l5036:
 18411                           
 18412                           ;pwm6.c: 71: CCPTMRS1bits.P6TSEL = 1;
 18413  12A2  0024               	movlb	4	; select bank4
 18414  12A3  081F               	movf	31,w	;volatile
 18415  12A4  39F3               	andlw	-13
 18416  12A5  3804               	iorlw	4
 18417  12A6  009F               	movwf	31	;volatile
 18418  12A7                     l617:
 18419  12A7  0008               	return
 18420  12A8                     __end_of_PWM6_Initialize:
 18421                           
 18422                           	psect	text58
 18423  1236                     __ptext58:	
 18424 ;; *************** function _PMD_Initialize *****************
 18425 ;; Defined at:
 18426 ;;		line 77 in file "mcc_generated_files/mcc.c"
 18427 ;; Parameters:    Size  Location     Type
 18428 ;;		None
 18429 ;; Auto vars:     Size  Location     Type
 18430 ;;		None
 18431 ;; Return value:  Size  Location     Type
 18432 ;;                  1    wreg      void 
 18433 ;; Registers used:
 18434 ;;		status,2
 18435 ;; Tracked objects:
 18436 ;;		On entry : 0/0
 18437 ;;		On exit  : 0/0
 18438 ;;		Unchanged: 0/0
 18439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18444 ;;Total ram usage:        0 bytes
 18445 ;; Hardware stack levels used:    1
 18446 ;; Hardware stack levels required when called:    4
 18447 ;; This function calls:
 18448 ;;		Nothing
 18449 ;; This function is called by:
 18450 ;;		_SYSTEM_Initialize
 18451 ;; This function uses a non-reentrant model
 18452 ;;
 18453                           
 18454                           
 18455                           ;psect for function _PMD_Initialize
 18456  1236                     _PMD_Initialize:
 18457  1236                     l5024:	
 18458                           ;incstack = 0
 18459                           ; Regs used in _PMD_Initialize: [status,2]
 18460                           
 18461                           
 18462                           ;mcc.c: 80: PMD0 = 0x00;
 18463  1236  002F               	movlb	15	; select bank15
 18464  1237  0196               	clrf	22	;volatile
 18465                           
 18466                           ;mcc.c: 82: PMD1 = 0x00;
 18467  1238  0197               	clrf	23	;volatile
 18468                           
 18469                           ;mcc.c: 84: PMD2 = 0x00;
 18470  1239  0198               	clrf	24	;volatile
 18471                           
 18472                           ;mcc.c: 86: PMD3 = 0x00;
 18473  123A  0199               	clrf	25	;volatile
 18474                           
 18475                           ;mcc.c: 88: PMD4 = 0x00;
 18476  123B  019A               	clrf	26	;volatile
 18477                           
 18478                           ;mcc.c: 90: PMD5 = 0x00;
 18479  123C  019B               	clrf	27	;volatile
 18480  123D                     l188:
 18481  123D  0008               	return
 18482  123E                     __end_of_PMD_Initialize:
 18483                           
 18484                           	psect	text59
 18485  0851                     __ptext59:	
 18486 ;; *************** function _PIN_MANAGER_Initialize *****************
 18487 ;; Defined at:
 18488 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 18489 ;; Parameters:    Size  Location     Type
 18490 ;;		None
 18491 ;; Auto vars:     Size  Location     Type
 18492 ;;		None
 18493 ;; Return value:  Size  Location     Type
 18494 ;;                  1    wreg      void 
 18495 ;; Registers used:
 18496 ;;		wreg, status,2
 18497 ;; Tracked objects:
 18498 ;;		On entry : 0/0
 18499 ;;		On exit  : 0/0
 18500 ;;		Unchanged: 0/0
 18501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18506 ;;Total ram usage:        0 bytes
 18507 ;; Hardware stack levels used:    1
 18508 ;; Hardware stack levels required when called:    4
 18509 ;; This function calls:
 18510 ;;		Nothing
 18511 ;; This function is called by:
 18512 ;;		_SYSTEM_Initialize
 18513 ;; This function uses a non-reentrant model
 18514 ;;
 18515                           
 18516                           
 18517                           ;psect for function _PIN_MANAGER_Initialize
 18518  0851                     _PIN_MANAGER_Initialize:
 18519  0851                     l4976:	
 18520                           ;incstack = 0
 18521                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 18522                           
 18523                           
 18524                           ;pin_manager.c: 62: LATE = 0x00;
 18525  0851  0020               	movlb	0	; select bank0
 18526  0852  019A               	clrf	26	;volatile
 18527                           
 18528                           ;pin_manager.c: 63: LATD = 0x00;
 18529  0853  0199               	clrf	25	;volatile
 18530                           
 18531                           ;pin_manager.c: 64: LATA = 0x00;
 18532  0854  0196               	clrf	22	;volatile
 18533                           
 18534                           ;pin_manager.c: 65: LATB = 0x00;
 18535  0855  0197               	clrf	23	;volatile
 18536                           
 18537                           ;pin_manager.c: 66: LATC = 0x00;
 18538  0856  0198               	clrf	24	;volatile
 18539  0857                     l4978:
 18540                           
 18541                           ;pin_manager.c: 71: TRISE = 0x07;
 18542  0857  3007               	movlw	7
 18543  0858  0095               	movwf	21	;volatile
 18544  0859                     l4980:
 18545                           
 18546                           ;pin_manager.c: 72: TRISA = 0x0F;
 18547  0859  300F               	movlw	15
 18548  085A  0091               	movwf	17	;volatile
 18549  085B                     l4982:
 18550                           
 18551                           ;pin_manager.c: 73: TRISB = 0xFF;
 18552  085B  30FF               	movlw	255
 18553  085C  0092               	movwf	18	;volatile
 18554  085D                     l4984:
 18555                           
 18556                           ;pin_manager.c: 74: TRISC = 0xBF;
 18557  085D  30BF               	movlw	191
 18558  085E  0093               	movwf	19	;volatile
 18559  085F                     l4986:
 18560                           
 18561                           ;pin_manager.c: 75: TRISD = 0xFF;
 18562  085F  30FF               	movlw	255
 18563  0860  0094               	movwf	20	;volatile
 18564  0861                     l4988:
 18565                           
 18566                           ;pin_manager.c: 80: ANSELD = 0xFF;
 18567  0861  30FF               	movlw	255
 18568  0862  003E               	movlb	30	; select bank30
 18569  0863  00D9               	movwf	89	;volatile
 18570  0864                     l4990:
 18571                           
 18572                           ;pin_manager.c: 81: ANSELC = 0x47;
 18573  0864  3047               	movlw	71
 18574  0865  00CE               	movwf	78	;volatile
 18575  0866                     l4992:
 18576                           
 18577                           ;pin_manager.c: 82: ANSELB = 0xEF;
 18578  0866  30EF               	movlw	239
 18579  0867  00C3               	movwf	67	;volatile
 18580  0868                     l4994:
 18581                           
 18582                           ;pin_manager.c: 83: ANSELE = 0x07;
 18583  0868  3007               	movlw	7
 18584  0869  00E4               	movwf	100	;volatile
 18585  086A                     l4996:
 18586                           
 18587                           ;pin_manager.c: 84: ANSELA = 0x4F;
 18588  086A  304F               	movlw	79
 18589  086B  00B8               	movwf	56	;volatile
 18590                           
 18591                           ;pin_manager.c: 89: WPUD = 0x00;
 18592  086C  01DA               	clrf	90	;volatile
 18593                           
 18594                           ;pin_manager.c: 90: WPUE = 0x00;
 18595  086D  01E5               	clrf	101	;volatile
 18596                           
 18597                           ;pin_manager.c: 91: WPUB = 0x00;
 18598  086E  01C4               	clrf	68	;volatile
 18599                           
 18600                           ;pin_manager.c: 92: WPUA = 0x00;
 18601  086F  01B9               	clrf	57	;volatile
 18602                           
 18603                           ;pin_manager.c: 93: WPUC = 0x00;
 18604  0870  01CF               	clrf	79	;volatile
 18605                           
 18606                           ;pin_manager.c: 98: ODCONE = 0x00;
 18607  0871  01E6               	clrf	102	;volatile
 18608                           
 18609                           ;pin_manager.c: 99: ODCONA = 0x00;
 18610  0872  01BA               	clrf	58	;volatile
 18611                           
 18612                           ;pin_manager.c: 100: ODCONB = 0x00;
 18613  0873  01C5               	clrf	69	;volatile
 18614                           
 18615                           ;pin_manager.c: 101: ODCONC = 0x00;
 18616  0874  01D0               	clrf	80	;volatile
 18617                           
 18618                           ;pin_manager.c: 102: ODCOND = 0x00;
 18619  0875  01DB               	clrf	91	;volatile
 18620  0876                     l4998:
 18621                           
 18622                           ;pin_manager.c: 107: SLRCONA = 0xFF;
 18623  0876  30FF               	movlw	255
 18624  0877  00BB               	movwf	59	;volatile
 18625  0878                     l5000:
 18626                           
 18627                           ;pin_manager.c: 108: SLRCONB = 0xFF;
 18628  0878  30FF               	movlw	255
 18629  0879  00C6               	movwf	70	;volatile
 18630  087A                     l5002:
 18631                           
 18632                           ;pin_manager.c: 109: SLRCONC = 0xFF;
 18633  087A  30FF               	movlw	255
 18634  087B  00D1               	movwf	81	;volatile
 18635  087C                     l5004:
 18636                           
 18637                           ;pin_manager.c: 110: SLRCOND = 0xFF;
 18638  087C  30FF               	movlw	255
 18639  087D  00DC               	movwf	92	;volatile
 18640  087E                     l5006:
 18641                           
 18642                           ;pin_manager.c: 111: SLRCONE = 0x07;
 18643  087E  3007               	movlw	7
 18644  087F  00E7               	movwf	103	;volatile
 18645  0880                     l5008:
 18646                           
 18647                           ;pin_manager.c: 120: INTPPS = 0x0C;
 18648  0880  300C               	movlw	12
 18649  0881  003D               	movlb	29	; select bank29
 18650  0882  0090               	movwf	16	;volatile
 18651  0883                     l5010:
 18652                           
 18653                           ;pin_manager.c: 121: RXPPS = 0x17;
 18654  0883  3017               	movlw	23
 18655  0884  00CB               	movwf	75	;volatile
 18656  0885                     l5012:
 18657                           
 18658                           ;pin_manager.c: 122: SSP1CLKPPS = 0x13;
 18659  0885  3013               	movlw	19
 18660  0886  00C5               	movwf	69	;volatile
 18661  0887                     l5014:
 18662                           
 18663                           ;pin_manager.c: 123: RC3PPS = 0x14;
 18664  0887  3014               	movlw	20
 18665  0888  003E               	movlb	30	; select bank30
 18666  0889  00A3               	movwf	35	;volatile
 18667  088A                     l5016:
 18668                           
 18669                           ;pin_manager.c: 124: RC4PPS = 0x15;
 18670  088A  3015               	movlw	21
 18671  088B  00A4               	movwf	36	;volatile
 18672  088C                     l5018:
 18673                           
 18674                           ;pin_manager.c: 125: RA6PPS = 0x0E;
 18675  088C  300E               	movlw	14
 18676  088D  0096               	movwf	22	;volatile
 18677  088E                     l5020:
 18678                           
 18679                           ;pin_manager.c: 126: RC6PPS = 0x10;
 18680  088E  3010               	movlw	16
 18681  088F  00A6               	movwf	38	;volatile
 18682  0890                     l5022:
 18683                           
 18684                           ;pin_manager.c: 127: SSP1DATPPS = 0x14;
 18685  0890  3014               	movlw	20
 18686  0891  003D               	movlb	29	; select bank29
 18687  0892  00C6               	movwf	70	;volatile
 18688  0893                     l128:
 18689  0893  0008               	return
 18690  0894                     __end_of_PIN_MANAGER_Initialize:
 18691                           
 18692                           	psect	text60
 18693  1257                     __ptext60:	
 18694 ;; *************** function _OSCILLATOR_Initialize *****************
 18695 ;; Defined at:
 18696 ;;		line 63 in file "mcc_generated_files/mcc.c"
 18697 ;; Parameters:    Size  Location     Type
 18698 ;;		None
 18699 ;; Auto vars:     Size  Location     Type
 18700 ;;		None
 18701 ;; Return value:  Size  Location     Type
 18702 ;;                  1    wreg      void 
 18703 ;; Registers used:
 18704 ;;		wreg, status,2
 18705 ;; Tracked objects:
 18706 ;;		On entry : 0/0
 18707 ;;		On exit  : 0/0
 18708 ;;		Unchanged: 0/0
 18709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18714 ;;Total ram usage:        0 bytes
 18715 ;; Hardware stack levels used:    1
 18716 ;; Hardware stack levels required when called:    4
 18717 ;; This function calls:
 18718 ;;		Nothing
 18719 ;; This function is called by:
 18720 ;;		_SYSTEM_Initialize
 18721 ;; This function uses a non-reentrant model
 18722 ;;
 18723                           
 18724                           
 18725                           ;psect for function _OSCILLATOR_Initialize
 18726  1257                     _OSCILLATOR_Initialize:
 18727  1257                     l5026:	
 18728                           ;incstack = 0
 18729                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 18730                           
 18731                           
 18732                           ;mcc.c: 66: OSCCON1 = 0x62;
 18733  1257  3062               	movlw	98
 18734  1258  0031               	movlb	17	; select bank17
 18735  1259  008D               	movwf	13	;volatile
 18736  125A                     l5028:
 18737                           
 18738                           ;mcc.c: 68: OSCCON3 = 0x00;
 18739  125A  018F               	clrf	15	;volatile
 18740  125B                     l5030:
 18741                           
 18742                           ;mcc.c: 70: OSCEN = 0x00;
 18743  125B  0191               	clrf	17	;volatile
 18744                           
 18745                           ;mcc.c: 72: OSCFRQ = 0x02;
 18746  125C  3002               	movlw	2
 18747  125D  0093               	movwf	19	;volatile
 18748  125E                     l5032:
 18749                           
 18750                           ;mcc.c: 74: OSCTUNE = 0x00;
 18751  125E  0192               	clrf	18	;volatile
 18752  125F                     l185:
 18753  125F  0008               	return
 18754  1260                     __end_of_OSCILLATOR_Initialize:
 18755                           
 18756                           	psect	text61
 18757  128E                     __ptext61:	
 18758 ;; *************** function _EXT_INT_Initialize *****************
 18759 ;; Defined at:
 18760 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 18761 ;; Parameters:    Size  Location     Type
 18762 ;;		None
 18763 ;; Auto vars:     Size  Location     Type
 18764 ;;		None
 18765 ;; Return value:  Size  Location     Type
 18766 ;;                  1    wreg      void 
 18767 ;; Registers used:
 18768 ;;		wreg, status,2, status,0, pclath, cstack
 18769 ;; Tracked objects:
 18770 ;;		On entry : 0/0
 18771 ;;		On exit  : 0/0
 18772 ;;		Unchanged: 0/0
 18773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18778 ;;Total ram usage:        0 bytes
 18779 ;; Hardware stack levels used:    1
 18780 ;; Hardware stack levels required when called:    5
 18781 ;; This function calls:
 18782 ;;		_INT_SetInterruptHandler
 18783 ;; This function is called by:
 18784 ;;		_SYSTEM_Initialize
 18785 ;; This function uses a non-reentrant model
 18786 ;;
 18787                           
 18788                           
 18789                           ;psect for function _EXT_INT_Initialize
 18790  128E                     _EXT_INT_Initialize:
 18791  128E                     l5074:	
 18792                           ;incstack = 0
 18793                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18794                           
 18795                           
 18796                           ;ext_int.c: 64: (PIR0bits.INTF = 0);
 18797  128E  002E               	movlb	14	; select bank14
 18798  128F  100C               	bcf	12,0	;volatile
 18799                           
 18800                           ;ext_int.c: 66: (INTCONbits.INTEDG = 1);
 18801  1290  140B               	bsf	11,0	;volatile
 18802  1291                     l5076:
 18803                           
 18804                           ;ext_int.c: 68: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
 18805  1291  30E8               	movlw	low _INT_DefaultInterruptHandler
 18806  1292  00F2               	movwf	INT_SetInterruptHandler@InterruptHandler
 18807  1293  3011               	movlw	high _INT_DefaultInterruptHandler
 18808  1294  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 18809  1295  3192  2218  3192   	fcall	_INT_SetInterruptHandler
 18810  1298                     l5078:
 18811                           
 18812                           ;ext_int.c: 69: (PIE0bits.INTE = 1);
 18813  1298  002E               	movlb	14	; select bank14
 18814  1299  1416               	bsf	22,0	;volatile
 18815  129A                     l760:
 18816  129A  0008               	return
 18817  129B                     __end_of_EXT_INT_Initialize:
 18818                           
 18819                           	psect	text62
 18820  1218                     __ptext62:	
 18821 ;; *************** function _INT_SetInterruptHandler *****************
 18822 ;; Defined at:
 18823 ;;		line 50 in file "mcc_generated_files/ext_int.c"
 18824 ;; Parameters:    Size  Location     Type
 18825 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
 18826 ;;		 -> S1_ISR(1), INT_DefaultInterruptHandler(1), 
 18827 ;; Auto vars:     Size  Location     Type
 18828 ;;		None
 18829 ;; Return value:  Size  Location     Type
 18830 ;;                  1    wreg      void 
 18831 ;; Registers used:
 18832 ;;		wreg
 18833 ;; Tracked objects:
 18834 ;;		On entry : 0/0
 18835 ;;		On exit  : 0/0
 18836 ;;		Unchanged: 0/0
 18837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18838 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18841 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18842 ;;Total ram usage:        2 bytes
 18843 ;; Hardware stack levels used:    1
 18844 ;; Hardware stack levels required when called:    4
 18845 ;; This function calls:
 18846 ;;		Nothing
 18847 ;; This function is called by:
 18848 ;;		_EXT_INT_Initialize
 18849 ;;		_main
 18850 ;; This function uses a non-reentrant model
 18851 ;;
 18852                           
 18853                           
 18854                           ;psect for function _INT_SetInterruptHandler
 18855  1218                     _INT_SetInterruptHandler:
 18856  1218                     l4728:	
 18857                           ;incstack = 0
 18858                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 18859                           
 18860                           
 18861                           ;ext_int.c: 51: INT_InterruptHandler = InterruptHandler;
 18862  1218  0873               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 18863  1219  0021               	movlb	1	; select bank1
 18864  121A  00D9               	movwf	(_INT_InterruptHandler+1)^(0+128)
 18865  121B  0872               	movf	INT_SetInterruptHandler@InterruptHandler,w
 18866  121C  00D8               	movwf	_INT_InterruptHandler^(0+128)
 18867  121D                     l754:
 18868  121D  0008               	return
 18869  121E                     __end_of_INT_SetInterruptHandler:
 18870                           
 18871                           	psect	text63
 18872  07D5                     __ptext63:	
 18873 ;; *************** function _EUSART_Initialize *****************
 18874 ;; Defined at:
 18875 ;;		line 75 in file "mcc_generated_files/eusart.c"
 18876 ;; Parameters:    Size  Location     Type
 18877 ;;		None
 18878 ;; Auto vars:     Size  Location     Type
 18879 ;;		None
 18880 ;; Return value:  Size  Location     Type
 18881 ;;                  1    wreg      void 
 18882 ;; Registers used:
 18883 ;;		wreg, status,2, status,0, pclath, cstack
 18884 ;; Tracked objects:
 18885 ;;		On entry : 0/0
 18886 ;;		On exit  : 0/0
 18887 ;;		Unchanged: 0/0
 18888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18893 ;;Total ram usage:        1 bytes
 18894 ;; Hardware stack levels used:    1
 18895 ;; Hardware stack levels required when called:    5
 18896 ;; This function calls:
 18897 ;;		_EUSART_SetRxInterruptHandler
 18898 ;;		_EUSART_SetTxInterruptHandler
 18899 ;; This function is called by:
 18900 ;;		_SYSTEM_Initialize
 18901 ;; This function uses a non-reentrant model
 18902 ;;
 18903                           
 18904                           
 18905                           ;psect for function _EUSART_Initialize
 18906  07D5                     _EUSART_Initialize:
 18907  07D5                     l5080:	
 18908                           ;incstack = 0
 18909                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18910                           
 18911                           
 18912                           ;eusart.c: 78: PIE3bits.RCIE = 0;
 18913  07D5  002E               	movlb	14	; select bank14
 18914  07D6  1299               	bcf	25,5	;volatile
 18915  07D7                     l5082:
 18916                           
 18917                           ;eusart.c: 79: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 18918  07D7  3037               	movlw	low _EUSART_Receive_ISR
 18919  07D8  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 18920  07D9  3014               	movlw	high _EUSART_Receive_ISR
 18921  07DA  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 18922  07DB  3192  220C  3187   	fcall	_EUSART_SetRxInterruptHandler
 18923  07DE                     l5084:
 18924                           
 18925                           ;eusart.c: 80: PIE3bits.TXIE = 0;
 18926  07DE  002E               	movlb	14	; select bank14
 18927  07DF  1219               	bcf	25,4	;volatile
 18928                           
 18929                           ;eusart.c: 81: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
 18930  07E0  3003               	movlw	low _EUSART_Transmit_ISR
 18931  07E1  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 18932  07E2  3015               	movlw	high _EUSART_Transmit_ISR
 18933  07E3  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 18934  07E4  3192  2212  3187   	fcall	_EUSART_SetTxInterruptHandler
 18935  07E7                     l5086:
 18936                           
 18937                           ;eusart.c: 85: BAUD1CON = 0x08;
 18938  07E7  3008               	movlw	8
 18939  07E8  0022               	movlb	2	; select bank2
 18940  07E9  009F               	movwf	31	;volatile
 18941  07EA                     l5088:
 18942                           
 18943                           ;eusart.c: 88: RC1STA = 0x90;
 18944  07EA  3090               	movlw	144
 18945  07EB  009D               	movwf	29	;volatile
 18946  07EC                     l5090:
 18947                           
 18948                           ;eusart.c: 91: TX1STA = 0x24;
 18949  07EC  3024               	movlw	36
 18950  07ED  009E               	movwf	30	;volatile
 18951  07EE                     l5092:
 18952                           
 18953                           ;eusart.c: 94: SP1BRGL = 0x19;
 18954  07EE  3019               	movlw	25
 18955  07EF  009B               	movwf	27	;volatile
 18956  07F0                     l5094:
 18957                           
 18958                           ;eusart.c: 97: SP1BRGH = 0x00;
 18959  07F0  019C               	clrf	28	;volatile
 18960  07F1                     l5096:
 18961                           
 18962                           ;eusart.c: 101: eusartTxHead = 0;
 18963  07F1  0020               	movlb	0	; select bank0
 18964  07F2  01EC               	clrf	_eusartTxHead	;volatile
 18965  07F3                     l5098:
 18966                           
 18967                           ;eusart.c: 102: eusartTxTail = 0;
 18968  07F3  01EB               	clrf	_eusartTxTail	;volatile
 18969  07F4                     l5100:
 18970                           
 18971                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 18972  07F4  3040               	movlw	64
 18973  07F5  00F4               	movwf	??_EUSART_Initialize
 18974  07F6  0874               	movf	??_EUSART_Initialize,w
 18975  07F7  0021               	movlb	1	; select bank1
 18976  07F8  00E2               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
 18977  07F9                     l5102:
 18978                           
 18979                           ;eusart.c: 105: eusartRxHead = 0;
 18980  07F9  0020               	movlb	0	; select bank0
 18981  07FA  01EA               	clrf	_eusartRxHead	;volatile
 18982  07FB                     l5104:
 18983                           
 18984                           ;eusart.c: 106: eusartRxTail = 0;
 18985  07FB  01E9               	clrf	_eusartRxTail	;volatile
 18986  07FC                     l5106:
 18987                           
 18988                           ;eusart.c: 107: eusartRxCount = 0;
 18989  07FC  01E8               	clrf	_eusartRxCount	;volatile
 18990  07FD                     l5108:
 18991                           
 18992                           ;eusart.c: 110: PIE3bits.RCIE = 1;
 18993  07FD  002E               	movlb	14	; select bank14
 18994  07FE  1699               	bsf	25,5	;volatile
 18995  07FF                     l811:
 18996  07FF  0008               	return
 18997  0800                     __end_of_EUSART_Initialize:
 18998                           
 18999                           	psect	text64
 19000  1212                     __ptext64:	
 19001 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 19002 ;; Defined at:
 19003 ;;		line 220 in file "mcc_generated_files/eusart.c"
 19004 ;; Parameters:    Size  Location     Type
 19005 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
 19006 ;;		 -> EUSART_Transmit_ISR(1), 
 19007 ;; Auto vars:     Size  Location     Type
 19008 ;;		None
 19009 ;; Return value:  Size  Location     Type
 19010 ;;                  1    wreg      void 
 19011 ;; Registers used:
 19012 ;;		wreg
 19013 ;; Tracked objects:
 19014 ;;		On entry : 0/0
 19015 ;;		On exit  : 0/0
 19016 ;;		Unchanged: 0/0
 19017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19022 ;;Total ram usage:        2 bytes
 19023 ;; Hardware stack levels used:    1
 19024 ;; Hardware stack levels required when called:    4
 19025 ;; This function calls:
 19026 ;;		Nothing
 19027 ;; This function is called by:
 19028 ;;		_EUSART_Initialize
 19029 ;; This function uses a non-reentrant model
 19030 ;;
 19031                           
 19032                           
 19033                           ;psect for function _EUSART_SetTxInterruptHandler
 19034  1212                     _EUSART_SetTxInterruptHandler:
 19035  1212                     l4732:	
 19036                           ;incstack = 0
 19037                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 19038                           
 19039                           
 19040                           ;eusart.c: 221: EUSART_TxDefaultInterruptHandler = interruptHandler;
 19041  1212  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 19042  1213  0021               	movlb	1	; select bank1
 19043  1214  00E1               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
 19044  1215  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 19045  1216  00E0               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
 19046  1217                     l856:
 19047  1217  0008               	return
 19048  1218                     __end_of_EUSART_SetTxInterruptHandler:
 19049                           
 19050                           	psect	text65
 19051  120C                     __ptext65:	
 19052 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 19053 ;; Defined at:
 19054 ;;		line 224 in file "mcc_generated_files/eusart.c"
 19055 ;; Parameters:    Size  Location     Type
 19056 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
 19057 ;;		 -> EUSART_Receive_ISR(1), 
 19058 ;; Auto vars:     Size  Location     Type
 19059 ;;		None
 19060 ;; Return value:  Size  Location     Type
 19061 ;;                  1    wreg      void 
 19062 ;; Registers used:
 19063 ;;		wreg
 19064 ;; Tracked objects:
 19065 ;;		On entry : 0/0
 19066 ;;		On exit  : 0/0
 19067 ;;		Unchanged: 0/0
 19068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19069 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19072 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19073 ;;Total ram usage:        2 bytes
 19074 ;; Hardware stack levels used:    1
 19075 ;; Hardware stack levels required when called:    4
 19076 ;; This function calls:
 19077 ;;		Nothing
 19078 ;; This function is called by:
 19079 ;;		_EUSART_Initialize
 19080 ;; This function uses a non-reentrant model
 19081 ;;
 19082                           
 19083                           
 19084                           ;psect for function _EUSART_SetRxInterruptHandler
 19085  120C                     _EUSART_SetRxInterruptHandler:
 19086  120C                     l4730:	
 19087                           ;incstack = 0
 19088                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 19089                           
 19090                           
 19091                           ;eusart.c: 225: EUSART_RxDefaultInterruptHandler = interruptHandler;
 19092  120C  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 19093  120D  0021               	movlb	1	; select bank1
 19094  120E  00DF               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
 19095  120F  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 19096  1210  00DE               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
 19097  1211                     l859:
 19098  1211  0008               	return
 19099  1212                     __end_of_EUSART_SetRxInterruptHandler:
 19100                           
 19101                           	psect	text66
 19102  130A                     __ptext66:	
 19103 ;; *************** function _ADCC_Initialize *****************
 19104 ;; Defined at:
 19105 ;;		line 63 in file "mcc_generated_files/adcc.c"
 19106 ;; Parameters:    Size  Location     Type
 19107 ;;		None
 19108 ;; Auto vars:     Size  Location     Type
 19109 ;;		None
 19110 ;; Return value:  Size  Location     Type
 19111 ;;                  1    wreg      void 
 19112 ;; Registers used:
 19113 ;;		wreg, status,2
 19114 ;; Tracked objects:
 19115 ;;		On entry : 0/0
 19116 ;;		On exit  : 0/0
 19117 ;;		Unchanged: 0/0
 19118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19123 ;;Total ram usage:        0 bytes
 19124 ;; Hardware stack levels used:    1
 19125 ;; Hardware stack levels required when called:    4
 19126 ;; This function calls:
 19127 ;;		Nothing
 19128 ;; This function is called by:
 19129 ;;		_SYSTEM_Initialize
 19130 ;; This function uses a non-reentrant model
 19131 ;;
 19132                           
 19133                           
 19134                           ;psect for function _ADCC_Initialize
 19135  130A                     _ADCC_Initialize:
 19136  130A                     l5038:	
 19137                           ;incstack = 0
 19138                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 19139                           
 19140                           
 19141                           ;adcc.c: 67: ADLTHL = 0x00;
 19142  130A  0022               	movlb	2	; select bank2
 19143  130B  018E               	clrf	14	;volatile
 19144                           
 19145                           ;adcc.c: 69: ADLTHH = 0x00;
 19146  130C  018F               	clrf	15	;volatile
 19147                           
 19148                           ;adcc.c: 71: ADUTHL = 0x00;
 19149  130D  0190               	clrf	16	;volatile
 19150                           
 19151                           ;adcc.c: 73: ADUTHH = 0x00;
 19152  130E  0191               	clrf	17	;volatile
 19153                           
 19154                           ;adcc.c: 75: ADSTPTL = 0x00;
 19155  130F  0192               	clrf	18	;volatile
 19156                           
 19157                           ;adcc.c: 77: ADSTPTH = 0x00;
 19158  1310  0193               	clrf	19	;volatile
 19159                           
 19160                           ;adcc.c: 79: ADRPT = 0x00;
 19161  1311  018D               	clrf	13	;volatile
 19162                           
 19163                           ;adcc.c: 81: ADPCH = 0x00;
 19164  1312  0021               	movlb	1	; select bank1
 19165  1313  019E               	clrf	30	;volatile
 19166                           
 19167                           ;adcc.c: 83: ADCAP = 0x00;
 19168  1314  019B               	clrf	27	;volatile
 19169                           
 19170                           ;adcc.c: 85: ADCON1 = 0x00;
 19171  1315  0194               	clrf	20	;volatile
 19172                           
 19173                           ;adcc.c: 87: ADCON2 = 0x00;
 19174  1316  0195               	clrf	21	;volatile
 19175                           
 19176                           ;adcc.c: 89: ADCON3 = 0x00;
 19177  1317  0196               	clrf	22	;volatile
 19178                           
 19179                           ;adcc.c: 91: ADSTAT = 0x00;
 19180  1318  0197               	clrf	23	;volatile
 19181                           
 19182                           ;adcc.c: 93: ADREF = 0x00;
 19183  1319  019A               	clrf	26	;volatile
 19184                           
 19185                           ;adcc.c: 95: ADACT = 0x00;
 19186  131A  0199               	clrf	25	;volatile
 19187                           
 19188                           ;adcc.c: 97: ADCLK = 0x00;
 19189  131B  0198               	clrf	24	;volatile
 19190  131C                     l5040:
 19191                           
 19192                           ;adcc.c: 99: ADCON0 = 0x80;
 19193  131C  3080               	movlw	128
 19194  131D  0093               	movwf	19	;volatile
 19195  131E                     l5042:
 19196                           
 19197                           ;adcc.c: 101: ADACQ = 0xFF;
 19198  131E  30FF               	movlw	255
 19199  131F  009D               	movwf	29	;volatile
 19200  1320                     l525:
 19201  1320  0008               	return
 19202  1321                     __end_of_ADCC_Initialize:
 19203                           
 19204                           	psect	text67
 19205  0A72                     __ptext67:	
 19206 ;; *************** function _LCDinit *****************
 19207 ;; Defined at:
 19208 ;;		line 286 in file "main.c"
 19209 ;; Parameters:    Size  Location     Type
 19210 ;;		None
 19211 ;; Auto vars:     Size  Location     Type
 19212 ;;		None
 19213 ;; Return value:  Size  Location     Type
 19214 ;;                  1    wreg      void 
 19215 ;; Registers used:
 19216 ;;		wreg, status,2, status,0, pclath, cstack
 19217 ;; Tracked objects:
 19218 ;;		On entry : 0/0
 19219 ;;		On exit  : 0/0
 19220 ;;		Unchanged: 0/0
 19221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19225 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19226 ;;Total ram usage:        1 bytes
 19227 ;; Hardware stack levels used:    1
 19228 ;; Hardware stack levels required when called:    6
 19229 ;; This function calls:
 19230 ;;		_LCDsend
 19231 ;;		_LCDsend2x4
 19232 ;; This function is called by:
 19233 ;;		_main
 19234 ;; This function uses a non-reentrant model
 19235 ;;
 19236                           
 19237                           
 19238                           ;psect for function _LCDinit
 19239  0A72                     _LCDinit:
 19240  0A72                     l6644:	
 19241                           ;incstack = 0
 19242                           ; Regs used in _LCDinit: [wreg+status,2+status,0+pclath+cstack]
 19243                           
 19244                           
 19245                           ;main.c: 288: _delay((unsigned long)((50)*(1000000/4000.0)));
 19246  0A72  3011               	movlw	17
 19247  0A73  0020               	movlb	0	; select bank0
 19248  0A74  00A0               	movwf	??_LCDinit
 19249  0A75  303A               	movlw	58
 19250  0A76                     u8447:
 19251  0A76  0B89               	decfsz	9,f
 19252  0A77  2A76               	goto	u8447
 19253  0A78  0BA0               	decfsz	??_LCDinit,f
 19254  0A79  2A76               	goto	u8447
 19255  0A7A  0000               	nop
 19256  0A7B                     l6646:
 19257                           
 19258                           ;main.c: 289: LCDsend(0x30);
 19259  0A7B  3030               	movlw	48
 19260  0A7C  3188  200E  318A   	fcall	_LCDsend
 19261  0A7F                     l6648:
 19262                           
 19263                           ;main.c: 290: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19264  0A7F  3034               	movlw	52
 19265  0A80  3188  200E  318A   	fcall	_LCDsend
 19266  0A83  3029               	movlw	41
 19267  0A84                     u8457:
 19268  0A84  0B89               	decfsz	9,f
 19269  0A85  2A84               	goto	u8457
 19270  0A86  3200               	nop2
 19271  0A87                     l6650:
 19272  0A87  3030               	movlw	48
 19273  0A88  3188  200E  318A   	fcall	_LCDsend
 19274  0A8B                     l6652:
 19275                           
 19276                           ;main.c: 291: _delay((unsigned long)((5)*(1000000/4000.0)));
 19277  0A8B  30FA               	movlw	250
 19278  0A8C                     u8467:
 19279  0A8C  3200               	nop2
 19280  0A8D  0B89               	decfsz	9,f
 19281  0A8E  2A8C               	goto	u8467
 19282                           
 19283                           ;main.c: 292: LCDsend(0x30);
 19284  0A8F  3030               	movlw	48
 19285  0A90  3188  200E  318A   	fcall	_LCDsend
 19286                           
 19287                           ;main.c: 293: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19288  0A93  3034               	movlw	52
 19289  0A94  3188  200E  318A   	fcall	_LCDsend
 19290  0A97                     l6654:
 19291  0A97  3029               	movlw	41
 19292  0A98                     u8477:
 19293  0A98  0B89               	decfsz	9,f
 19294  0A99  2A98               	goto	u8477
 19295  0A9A  3200               	nop2
 19296  0A9B                     l6656:
 19297  0A9B  3030               	movlw	48
 19298  0A9C  3188  200E  318A   	fcall	_LCDsend
 19299                           
 19300                           ;main.c: 294: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19301  0A9F  3008               	movlw	8
 19302  0AA0                     u8487:
 19303  0AA0  0B89               	decfsz	9,f
 19304  0AA1  2AA0               	goto	u8487
 19305  0AA2  0000               	nop
 19306  0AA3                     l6658:
 19307                           
 19308                           ;main.c: 295: LCDsend(0x30);
 19309  0AA3  3030               	movlw	48
 19310  0AA4  3188  200E  318A   	fcall	_LCDsend
 19311  0AA7                     l6660:
 19312                           
 19313                           ;main.c: 296: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19314  0AA7  3034               	movlw	52
 19315  0AA8  3188  200E  318A   	fcall	_LCDsend
 19316  0AAB  3029               	movlw	41
 19317  0AAC                     u8497:
 19318  0AAC  0B89               	decfsz	9,f
 19319  0AAD  2AAC               	goto	u8497
 19320  0AAE  3200               	nop2
 19321  0AAF                     l6662:
 19322  0AAF  3030               	movlw	48
 19323  0AB0  3188  200E  318A   	fcall	_LCDsend
 19324  0AB3                     l6664:
 19325                           
 19326                           ;main.c: 297: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19327  0AB3  3008               	movlw	8
 19328  0AB4                     u8507:
 19329  0AB4  0B89               	decfsz	9,f
 19330  0AB5  2AB4               	goto	u8507
 19331  0AB6  0000               	nop
 19332                           
 19333                           ;main.c: 298: LCDsend(0x20);
 19334  0AB7  3020               	movlw	32
 19335  0AB8  3188  200E  318A   	fcall	_LCDsend
 19336                           
 19337                           ;main.c: 299: LCDsend(0x24); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x20);
 19338  0ABB  3024               	movlw	36
 19339  0ABC  3188  200E  318A   	fcall	_LCDsend
 19340  0ABF                     l6666:
 19341  0ABF  3029               	movlw	41
 19342  0AC0                     u8517:
 19343  0AC0  0B89               	decfsz	9,f
 19344  0AC1  2AC0               	goto	u8517
 19345  0AC2  3200               	nop2
 19346  0AC3                     l6668:
 19347  0AC3  3020               	movlw	32
 19348  0AC4  3188  200E  318A   	fcall	_LCDsend
 19349                           
 19350                           ;main.c: 300: _delay((unsigned long)((5)*(1000000/4000.0)));
 19351  0AC7  30FA               	movlw	250
 19352  0AC8                     u8527:
 19353  0AC8  3200               	nop2
 19354  0AC9  0B89               	decfsz	9,f
 19355  0ACA  2AC8               	goto	u8527
 19356  0ACB                     l6670:
 19357                           
 19358                           ;main.c: 302: LCDsend2x4(0x28, 0);
 19359  0ACB  01F4               	clrf	LCDsend2x4@mode
 19360  0ACC  3028               	movlw	40
 19361  0ACD  3187  2722  318A   	fcall	_LCDsend2x4
 19362  0AD0                     l6672:
 19363                           
 19364                           ;main.c: 303: LCDsend2x4(0x06, 0);
 19365  0AD0  01F4               	clrf	LCDsend2x4@mode
 19366  0AD1  3006               	movlw	6
 19367  0AD2  3187  2722  318A   	fcall	_LCDsend2x4
 19368  0AD5                     l6674:
 19369                           
 19370                           ;main.c: 304: LCDsend2x4(0x0f, 0);
 19371  0AD5  01F4               	clrf	LCDsend2x4@mode
 19372  0AD6  300F               	movlw	15
 19373  0AD7  3187  2722  318A   	fcall	_LCDsend2x4
 19374  0ADA                     l6676:
 19375                           
 19376                           ;main.c: 305: LCDsend2x4(0x01, 0);
 19377  0ADA  01F4               	clrf	LCDsend2x4@mode
 19378  0ADB  3001               	movlw	1
 19379  0ADC  3187  2722  318A   	fcall	_LCDsend2x4
 19380                           
 19381                           ;main.c: 306: _delay((unsigned long)((2)*(1000000/4000.0)));
 19382  0ADF  30A6               	movlw	166
 19383  0AE0                     u8537:
 19384  0AE0  0B89               	decfsz	9,f
 19385  0AE1  2AE0               	goto	u8537
 19386  0AE2  3200               	nop2
 19387  0AE3                     l1229:
 19388  0AE3  0008               	return
 19389  0AE4                     __end_of_LCDinit:
 19390                           
 19391                           	psect	text68
 19392  0722                     __ptext68:	
 19393 ;; *************** function _LCDsend2x4 *****************
 19394 ;; Defined at:
 19395 ;;		line 263 in file "main.c"
 19396 ;; Parameters:    Size  Location     Type
 19397 ;;  c               1    wreg     unsigned char 
 19398 ;;  mode            1    4[COMMON] unsigned char 
 19399 ;; Auto vars:     Size  Location     Type
 19400 ;;  c               1    7[COMMON] unsigned char 
 19401 ;;  lc              1    9[COMMON] unsigned char 
 19402 ;;  hc              1    8[COMMON] unsigned char 
 19403 ;; Return value:  Size  Location     Type
 19404 ;;                  1    wreg      void 
 19405 ;; Registers used:
 19406 ;;		wreg, status,2, status,0, pclath, cstack
 19407 ;; Tracked objects:
 19408 ;;		On entry : 0/0
 19409 ;;		On exit  : 0/0
 19410 ;;		Unchanged: 0/0
 19411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19412 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19413 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19415 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19416 ;;Total ram usage:        6 bytes
 19417 ;; Hardware stack levels used:    1
 19418 ;; Hardware stack levels required when called:    5
 19419 ;; This function calls:
 19420 ;;		_WriteI2C
 19421 ;; This function is called by:
 19422 ;;		_LCDinit
 19423 ;;		_LCDcmd
 19424 ;;		_LCDchar
 19425 ;; This function uses a non-reentrant model
 19426 ;;
 19427                           
 19428                           
 19429                           ;psect for function _LCDsend2x4
 19430  0722                     _LCDsend2x4:
 19431                           
 19432                           ;incstack = 0
 19433                           ; Regs used in _LCDsend2x4: [wreg+status,2+status,0+pclath+cstack]
 19434                           ;LCDsend2x4@c stored from wreg
 19435  0722  00F7               	movwf	LCDsend2x4@c
 19436  0723                     l6022:
 19437                           
 19438                           ;main.c: 265: unsigned char hc;;main.c: 266: unsigned char lc;;main.c: 268: hc = c & 0xf
      +                          0;
 19439  0723  0877               	movf	LCDsend2x4@c,w
 19440  0724  39F0               	andlw	240
 19441  0725  00F5               	movwf	??_LCDsend2x4
 19442  0726  0875               	movf	??_LCDsend2x4,w
 19443  0727  00F8               	movwf	LCDsend2x4@hc
 19444  0728                     l6024:
 19445                           
 19446                           ;main.c: 269: lc = (c << 4) & 0xf0;
 19447  0728  0877               	movf	LCDsend2x4@c,w
 19448  0729  00F5               	movwf	??_LCDsend2x4
 19449  072A  3003               	movlw	3
 19450  072B                     u6125:
 19451  072B  35F5               	lslf	??_LCDsend2x4,f
 19452  072C  3EFF               	addlw	-1
 19453  072D  1D03               	skipz
 19454  072E  2F2B               	goto	u6125
 19455  072F  3575               	lslf	??_LCDsend2x4,w
 19456  0730  39F0               	andlw	240
 19457  0731  00F6               	movwf	??_LCDsend2x4+1
 19458  0732  0876               	movf	??_LCDsend2x4+1,w
 19459  0733  00F9               	movwf	LCDsend2x4@lc
 19460  0734                     l6026:	
 19461                           ;main.c: 271: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 19462                           
 19463  0734  0023               	movlb	3	; select bank3
 19464  0735  0C0F               	rrf	15,w	;volatile
 19465  0736  0C89               	rrf	9,f
 19466  0737  3901               	andlw	1
 19467  0738  00F5               	movwf	??_LCDsend2x4
 19468  0739  0811               	movf	17,w	;volatile
 19469  073A  391F               	andlw	31
 19470  073B  0475               	iorwf	??_LCDsend2x4,w
 19471  073C  1D03               	btfss	3,2
 19472  073D  2F3F               	goto	u6131
 19473  073E  2F40               	goto	u6130
 19474  073F                     u6131:
 19475  073F  2F34               	goto	l6026
 19476  0740                     u6130:
 19477  0740                     l1195:
 19478                           
 19479                           ;main.c: 272: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 19480  0740  1411               	bsf	17,0	;volatile
 19481  0741                     l1196:
 19482  0741  1811               	btfsc	17,0	;volatile
 19483  0742  2F44               	goto	u6141
 19484  0743  2F45               	goto	u6140
 19485  0744                     u6141:
 19486  0744  2F41               	goto	l1196
 19487  0745                     u6140:
 19488  0745                     l6028:
 19489  0745  0C0F               	rrf	15,w	;volatile
 19490  0746  0C89               	rrf	9,f
 19491  0747  3901               	andlw	1
 19492  0748  00F5               	movwf	??_LCDsend2x4
 19493  0749  0811               	movf	17,w	;volatile
 19494  074A  391F               	andlw	31
 19495  074B  0475               	iorwf	??_LCDsend2x4,w
 19496  074C  1D03               	btfss	3,2
 19497  074D  2F4F               	goto	u6151
 19498  074E  2F50               	goto	u6150
 19499  074F                     u6151:
 19500  074F  2F45               	goto	l6028
 19501  0750                     u6150:
 19502  0750                     l6030:
 19503                           
 19504                           ;main.c: 273: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 19505  0750  304E               	movlw	78
 19506  0751  3188  2094  3187   	fcall	_WriteI2C
 19507  0754                     l6032:
 19508  0754  0023               	movlb	3	; select bank3
 19509  0755  0C0F               	rrf	15,w	;volatile
 19510  0756  0C89               	rrf	9,f
 19511  0757  3901               	andlw	1
 19512  0758  00F5               	movwf	??_LCDsend2x4
 19513  0759  0811               	movf	17,w	;volatile
 19514  075A  391F               	andlw	31
 19515  075B  0475               	iorwf	??_LCDsend2x4,w
 19516  075C  1D03               	btfss	3,2
 19517  075D  2F5F               	goto	u6161
 19518  075E  2F60               	goto	u6160
 19519  075F                     u6161:
 19520  075F  2F54               	goto	l6032
 19521  0760                     u6160:
 19522  0760                     l6034:
 19523                           
 19524                           ;main.c: 274: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 19525  0760  0878               	movf	LCDsend2x4@hc,w
 19526  0761  0474               	iorwf	LCDsend2x4@mode,w
 19527  0762  3808               	iorlw	8
 19528  0763  3188  2094  3187   	fcall	_WriteI2C
 19529  0766                     l6036:
 19530  0766  0023               	movlb	3	; select bank3
 19531  0767  0C0F               	rrf	15,w	;volatile
 19532  0768  0C89               	rrf	9,f
 19533  0769  3901               	andlw	1
 19534  076A  00F5               	movwf	??_LCDsend2x4
 19535  076B  0811               	movf	17,w	;volatile
 19536  076C  391F               	andlw	31
 19537  076D  0475               	iorwf	??_LCDsend2x4,w
 19538  076E  1D03               	btfss	3,2
 19539  076F  2F71               	goto	u6171
 19540  0770  2F72               	goto	u6170
 19541  0771                     u6171:
 19542  0771  2F66               	goto	l6036
 19543  0772                     u6170:
 19544  0772                     l6038:
 19545                           
 19546                           ;main.c: 275: WriteI2C(hc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 19547  0772  0878               	movf	LCDsend2x4@hc,w
 19548  0773  0474               	iorwf	LCDsend2x4@mode,w
 19549  0774  380C               	iorlw	12
 19550  0775  3188  2094  3187   	fcall	_WriteI2C
 19551  0778                     l6040:
 19552  0778  0023               	movlb	3	; select bank3
 19553  0779  0C0F               	rrf	15,w	;volatile
 19554  077A  0C89               	rrf	9,f
 19555  077B  3901               	andlw	1
 19556  077C  00F5               	movwf	??_LCDsend2x4
 19557  077D  0811               	movf	17,w	;volatile
 19558  077E  391F               	andlw	31
 19559  077F  0475               	iorwf	??_LCDsend2x4,w
 19560  0780  1D03               	btfss	3,2
 19561  0781  2F83               	goto	u6181
 19562  0782  2F84               	goto	u6180
 19563  0783                     u6181:
 19564  0783  2F78               	goto	l6040
 19565  0784                     u6180:
 19566  0784                     l1210:
 19567  0784                     l6042:	
 19568                           ;main.c: 276: _delay((unsigned long)((1)*(1000000/4000000.0)));
 19569                           
 19570                           
 19571                           ;main.c: 277: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 19572  0784  0878               	movf	LCDsend2x4@hc,w
 19573  0785  0474               	iorwf	LCDsend2x4@mode,w
 19574  0786  3808               	iorlw	8
 19575  0787  3188  2094  3187   	fcall	_WriteI2C
 19576  078A                     l6044:
 19577  078A  0023               	movlb	3	; select bank3
 19578  078B  0C0F               	rrf	15,w	;volatile
 19579  078C  0C89               	rrf	9,f
 19580  078D  3901               	andlw	1
 19581  078E  00F5               	movwf	??_LCDsend2x4
 19582  078F  0811               	movf	17,w	;volatile
 19583  0790  391F               	andlw	31
 19584  0791  0475               	iorwf	??_LCDsend2x4,w
 19585  0792  1D03               	btfss	3,2
 19586  0793  2F95               	goto	u6191
 19587  0794  2F96               	goto	u6190
 19588  0795                     u6191:
 19589  0795  2F8A               	goto	l6044
 19590  0796                     u6190:
 19591  0796                     l6046:
 19592                           
 19593                           ;main.c: 278: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 19594  0796  0879               	movf	LCDsend2x4@lc,w
 19595  0797  0474               	iorwf	LCDsend2x4@mode,w
 19596  0798  3808               	iorlw	8
 19597  0799  3188  2094  3187   	fcall	_WriteI2C
 19598  079C                     l6048:
 19599  079C  0023               	movlb	3	; select bank3
 19600  079D  0C0F               	rrf	15,w	;volatile
 19601  079E  0C89               	rrf	9,f
 19602  079F  3901               	andlw	1
 19603  07A0  00F5               	movwf	??_LCDsend2x4
 19604  07A1  0811               	movf	17,w	;volatile
 19605  07A2  391F               	andlw	31
 19606  07A3  0475               	iorwf	??_LCDsend2x4,w
 19607  07A4  1D03               	btfss	3,2
 19608  07A5  2FA7               	goto	u6201
 19609  07A6  2FA8               	goto	u6200
 19610  07A7                     u6201:
 19611  07A7  2F9C               	goto	l6048
 19612  07A8                     u6200:
 19613  07A8                     l6050:
 19614                           
 19615                           ;main.c: 279: WriteI2C(lc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 19616  07A8  0879               	movf	LCDsend2x4@lc,w
 19617  07A9  0474               	iorwf	LCDsend2x4@mode,w
 19618  07AA  380C               	iorlw	12
 19619  07AB  3188  2094  3187   	fcall	_WriteI2C
 19620  07AE                     l6052:
 19621  07AE  0023               	movlb	3	; select bank3
 19622  07AF  0C0F               	rrf	15,w	;volatile
 19623  07B0  0C89               	rrf	9,f
 19624  07B1  3901               	andlw	1
 19625  07B2  00F5               	movwf	??_LCDsend2x4
 19626  07B3  0811               	movf	17,w	;volatile
 19627  07B4  391F               	andlw	31
 19628  07B5  0475               	iorwf	??_LCDsend2x4,w
 19629  07B6  1D03               	btfss	3,2
 19630  07B7  2FB9               	goto	u6211
 19631  07B8  2FBA               	goto	u6210
 19632  07B9                     u6211:
 19633  07B9  2FAE               	goto	l6052
 19634  07BA                     u6210:
 19635  07BA                     l1219:
 19636  07BA                     l6054:	
 19637                           ;main.c: 280: _delay((unsigned long)((1)*(1000000/4000000.0)));
 19638                           
 19639                           
 19640                           ;main.c: 281: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 19641  07BA  0879               	movf	LCDsend2x4@lc,w
 19642  07BB  0474               	iorwf	LCDsend2x4@mode,w
 19643  07BC  3808               	iorlw	8
 19644  07BD  3188  2094  3187   	fcall	_WriteI2C
 19645  07C0                     l6056:
 19646  07C0  0023               	movlb	3	; select bank3
 19647  07C1  0C0F               	rrf	15,w	;volatile
 19648  07C2  0C89               	rrf	9,f
 19649  07C3  3901               	andlw	1
 19650  07C4  00F5               	movwf	??_LCDsend2x4
 19651  07C5  0811               	movf	17,w	;volatile
 19652  07C6  391F               	andlw	31
 19653  07C7  0475               	iorwf	??_LCDsend2x4,w
 19654  07C8  1D03               	btfss	3,2
 19655  07C9  2FCB               	goto	u6221
 19656  07CA  2FCC               	goto	u6220
 19657  07CB                     u6221:
 19658  07CB  2FC0               	goto	l6056
 19659  07CC                     u6220:
 19660  07CC                     l1222:
 19661                           
 19662                           ;main.c: 282: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 19663  07CC  1511               	bsf	17,2	;volatile
 19664  07CD                     l1223:
 19665  07CD  1911               	btfsc	17,2	;volatile
 19666  07CE  2FD0               	goto	u6231
 19667  07CF  2FD1               	goto	u6230
 19668  07D0                     u6231:
 19669  07D0  2FCD               	goto	l1223
 19670  07D1                     u6230:
 19671  07D1                     l6058:
 19672                           
 19673                           ;main.c: 283: _delay((unsigned long)((50)*(1000000/4000000.0)));
 19674  07D1  3004               	movlw	4
 19675  07D2                     u8547:
 19676  07D2  0B89               	decfsz	9,f
 19677  07D3  2FD2               	goto	u8547
 19678  07D4                     l1226:
 19679  07D4  0008               	return
 19680  07D5                     __end_of_LCDsend2x4:
 19681                           
 19682                           	psect	text69
 19683  080E                     __ptext69:	
 19684 ;; *************** function _LCDsend *****************
 19685 ;; Defined at:
 19686 ;;		line 224 in file "main.c"
 19687 ;; Parameters:    Size  Location     Type
 19688 ;;  c               1    wreg     unsigned char 
 19689 ;; Auto vars:     Size  Location     Type
 19690 ;;  c               1    5[COMMON] unsigned char 
 19691 ;; Return value:  Size  Location     Type
 19692 ;;                  1    wreg      void 
 19693 ;; Registers used:
 19694 ;;		wreg, status,2, status,0, pclath, cstack
 19695 ;; Tracked objects:
 19696 ;;		On entry : 0/0
 19697 ;;		On exit  : 0/0
 19698 ;;		Unchanged: 0/0
 19699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19703 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19704 ;;Total ram usage:        2 bytes
 19705 ;; Hardware stack levels used:    1
 19706 ;; Hardware stack levels required when called:    5
 19707 ;; This function calls:
 19708 ;;		_WriteI2C
 19709 ;; This function is called by:
 19710 ;;		_LCDinit
 19711 ;; This function uses a non-reentrant model
 19712 ;;
 19713                           
 19714                           
 19715                           ;psect for function _LCDsend
 19716  080E                     _LCDsend:
 19717                           
 19718                           ;incstack = 0
 19719                           ; Regs used in _LCDsend: [wreg+status,2+status,0+pclath+cstack]
 19720                           ;LCDsend@c stored from wreg
 19721  080E  00F5               	movwf	LCDsend@c
 19722  080F                     l6508:
 19723  080F                     l6510:	
 19724                           ;main.c: 226: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 19725                           
 19726  080F  0023               	movlb	3	; select bank3
 19727  0810  0C0F               	rrf	15,w	;volatile
 19728  0811  0C89               	rrf	9,f
 19729  0812  3901               	andlw	1
 19730  0813  00F4               	movwf	??_LCDsend
 19731  0814  0811               	movf	17,w	;volatile
 19732  0815  391F               	andlw	31
 19733  0816  0474               	iorwf	??_LCDsend,w
 19734  0817  1D03               	btfss	3,2
 19735  0818  281A               	goto	u7221
 19736  0819  281B               	goto	u7220
 19737  081A                     u7221:
 19738  081A  280F               	goto	l6510
 19739  081B                     u7220:
 19740  081B                     l1093:
 19741                           
 19742                           ;main.c: 227: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 19743  081B  1411               	bsf	17,0	;volatile
 19744  081C                     l1094:
 19745  081C  1811               	btfsc	17,0	;volatile
 19746  081D  281F               	goto	u7231
 19747  081E  2820               	goto	u7230
 19748  081F                     u7231:
 19749  081F  281C               	goto	l1094
 19750  0820                     u7230:
 19751  0820                     l6512:
 19752  0820  0C0F               	rrf	15,w	;volatile
 19753  0821  0C89               	rrf	9,f
 19754  0822  3901               	andlw	1
 19755  0823  00F4               	movwf	??_LCDsend
 19756  0824  0811               	movf	17,w	;volatile
 19757  0825  391F               	andlw	31
 19758  0826  0474               	iorwf	??_LCDsend,w
 19759  0827  1D03               	btfss	3,2
 19760  0828  282A               	goto	u7241
 19761  0829  282B               	goto	u7240
 19762  082A                     u7241:
 19763  082A  2820               	goto	l6512
 19764  082B                     u7240:
 19765  082B                     l6514:
 19766                           
 19767                           ;main.c: 228: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 19768  082B  304E               	movlw	78
 19769  082C  3188  2094  3188   	fcall	_WriteI2C
 19770  082F                     l6516:
 19771  082F  0023               	movlb	3	; select bank3
 19772  0830  0C0F               	rrf	15,w	;volatile
 19773  0831  0C89               	rrf	9,f
 19774  0832  3901               	andlw	1
 19775  0833  00F4               	movwf	??_LCDsend
 19776  0834  0811               	movf	17,w	;volatile
 19777  0835  391F               	andlw	31
 19778  0836  0474               	iorwf	??_LCDsend,w
 19779  0837  1D03               	btfss	3,2
 19780  0838  283A               	goto	u7251
 19781  0839  283B               	goto	u7250
 19782  083A                     u7251:
 19783  083A  282F               	goto	l6516
 19784  083B                     u7250:
 19785  083B                     l6518:
 19786                           
 19787                           ;main.c: 229: WriteI2C(c); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 19788  083B  0875               	movf	LCDsend@c,w
 19789  083C  3188  2094  3188   	fcall	_WriteI2C
 19790  083F                     l6520:
 19791  083F  0023               	movlb	3	; select bank3
 19792  0840  0C0F               	rrf	15,w	;volatile
 19793  0841  0C89               	rrf	9,f
 19794  0842  3901               	andlw	1
 19795  0843  00F4               	movwf	??_LCDsend
 19796  0844  0811               	movf	17,w	;volatile
 19797  0845  391F               	andlw	31
 19798  0846  0474               	iorwf	??_LCDsend,w
 19799  0847  1D03               	btfss	3,2
 19800  0848  284A               	goto	u7261
 19801  0849  284B               	goto	u7260
 19802  084A                     u7261:
 19803  084A  283F               	goto	l6520
 19804  084B                     u7260:
 19805  084B                     l1105:
 19806                           
 19807                           ;main.c: 230: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 19808  084B  1511               	bsf	17,2	;volatile
 19809  084C                     l1106:
 19810  084C  1911               	btfsc	17,2	;volatile
 19811  084D  284F               	goto	u7271
 19812  084E  2850               	goto	u7270
 19813  084F                     u7271:
 19814  084F  284C               	goto	l1106
 19815  0850                     u7270:
 19816  0850                     l1109:
 19817  0850  0008               	return
 19818  0851                     __end_of_LCDsend:
 19819                           
 19820                           	psect	text70
 19821  0894                     __ptext70:	
 19822 ;; *************** function _WriteI2C *****************
 19823 ;; Defined at:
 19824 ;;		line 47 in file "I2C/i2c.c"
 19825 ;; Parameters:    Size  Location     Type
 19826 ;;  data_out        1    wreg     unsigned char 
 19827 ;; Auto vars:     Size  Location     Type
 19828 ;;  data_out        1    3[COMMON] unsigned char 
 19829 ;; Return value:  Size  Location     Type
 19830 ;;                  1    wreg      char 
 19831 ;; Registers used:
 19832 ;;		wreg, status,2, status,0
 19833 ;; Tracked objects:
 19834 ;;		On entry : 0/0
 19835 ;;		On exit  : 0/0
 19836 ;;		Unchanged: 0/0
 19837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19839 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19840 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19841 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19842 ;;Total ram usage:        2 bytes
 19843 ;; Hardware stack levels used:    1
 19844 ;; Hardware stack levels required when called:    4
 19845 ;; This function calls:
 19846 ;;		Nothing
 19847 ;; This function is called by:
 19848 ;;		_tsttc
 19849 ;;		_LCDsend
 19850 ;;		_LCDsend2x4
 19851 ;;		_LCDrecv
 19852 ;; This function uses a non-reentrant model
 19853 ;;
 19854                           
 19855                           
 19856                           ;psect for function _WriteI2C
 19857  0894                     _WriteI2C:
 19858                           
 19859                           ;incstack = 0
 19860                           ; Regs used in _WriteI2C: [wreg+status,2+status,0]
 19861                           ;WriteI2C@data_out stored from wreg
 19862  0894  00F3               	movwf	WriteI2C@data_out
 19863  0895                     l5992:
 19864                           
 19865                           ;i2c.c: 49: SSP1BUF = data_out;
 19866  0895  0873               	movf	WriteI2C@data_out,w
 19867  0896  0023               	movlb	3	; select bank3
 19868  0897  008C               	movwf	12	;volatile
 19869  0898                     l5994:
 19870                           
 19871                           ;i2c.c: 50: if ( SSP1CON1bits.WCOL )
 19872  0898  1F90               	btfss	16,7	;volatile
 19873  0899  289B               	goto	u6031
 19874  089A  289C               	goto	u6030
 19875  089B                     u6031:
 19876  089B  289D               	goto	l6000
 19877  089C                     u6030:
 19878  089C  28DE               	goto	l30
 19879  089D                     l6000:
 19880                           
 19881                           ;i2c.c: 52: else;i2c.c: 53: {;i2c.c: 54: if( ((SSP1CON1&0x0F)!=0x08) && ((SSP1CON1&0x0F)
      +                          !=0x0B) )
 19882  089D  300F               	movlw	15
 19883  089E  0510               	andwf	16,w	;volatile
 19884  089F  00F2               	movwf	??_WriteI2C
 19885  08A0  3008               	movlw	8
 19886  08A1  0672               	xorwf	??_WriteI2C,w
 19887  08A2  1903               	btfsc	3,2
 19888  08A3  28A5               	goto	u6041
 19889  08A4  28A6               	goto	u6040
 19890  08A5                     u6041:
 19891  08A5  28BC               	goto	l6012
 19892  08A6                     u6040:
 19893  08A6                     l6002:
 19894  08A6  300F               	movlw	15
 19895  08A7  0510               	andwf	16,w	;volatile
 19896  08A8  00F2               	movwf	??_WriteI2C
 19897  08A9  300B               	movlw	11
 19898  08AA  0672               	xorwf	??_WriteI2C,w
 19899  08AB  1903               	btfsc	3,2
 19900  08AC  28AE               	goto	u6051
 19901  08AD  28AF               	goto	u6050
 19902  08AE                     u6051:
 19903  08AE  28BC               	goto	l6012
 19904  08AF                     u6050:
 19905  08AF                     l6004:
 19906                           
 19907                           ;i2c.c: 55: {;i2c.c: 56: SSP1CON1bits.CKP = 1;
 19908  08AF  1610               	bsf	16,4	;volatile
 19909  08B0                     l33:	
 19910                           ;i2c.c: 57: while ( !PIR3bits.SSP1IF );
 19911                           
 19912  08B0  002E               	movlb	14	; select bank14
 19913  08B1  1C0F               	btfss	15,0	;volatile
 19914  08B2  28B4               	goto	u6061
 19915  08B3  28B5               	goto	u6060
 19916  08B4                     u6061:
 19917  08B4  28B0               	goto	l33
 19918  08B5                     u6060:
 19919  08B5                     l35:
 19920                           
 19921                           ;i2c.c: 59: if ( ( !SSP1STATbits.R_W ) && ( !SSP1STATbits.BF ) )
 19922  08B5  0023               	movlb	3	; select bank3
 19923  08B6  190F               	btfsc	15,2	;volatile
 19924  08B7  28B9               	goto	u6071
 19925  08B8  28BA               	goto	u6070
 19926  08B9                     u6071:
 19927  08B9  28DE               	goto	l30
 19928  08BA                     u6070:
 19929  08BA                     l6006:
 19930  08BA  080F               	movf	15,w	;volatile
 19931  08BB  28DE               	goto	l30
 19932  08BC                     l6012:
 19933                           
 19934                           ;i2c.c: 68: else if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 19935  08BC  300F               	movlw	15
 19936  08BD  0510               	andwf	16,w	;volatile
 19937  08BE  00F2               	movwf	??_WriteI2C
 19938  08BF  3008               	movlw	8
 19939  08C0  0672               	xorwf	??_WriteI2C,w
 19940  08C1  1903               	btfsc	3,2
 19941  08C2  28C4               	goto	u6081
 19942  08C3  28C5               	goto	u6080
 19943  08C4                     u6081:
 19944  08C4  28CE               	goto	l42
 19945  08C5                     u6080:
 19946  08C5                     l6014:
 19947  08C5  300F               	movlw	15
 19948  08C6  0510               	andwf	16,w	;volatile
 19949  08C7  00F2               	movwf	??_WriteI2C
 19950  08C8  300B               	movlw	11
 19951  08C9  0672               	xorwf	??_WriteI2C,w
 19952  08CA  1D03               	btfss	3,2
 19953  08CB  28CD               	goto	u6091
 19954  08CC  28CE               	goto	u6090
 19955  08CD                     u6091:
 19956  08CD  28DE               	goto	l30
 19957  08CE                     u6090:
 19958  08CE                     l42:
 19959  08CE  180F               	btfsc	15,0	;volatile
 19960  08CF  28D1               	goto	u6101
 19961  08D0  28D2               	goto	u6100
 19962  08D1                     u6101:
 19963  08D1  28CE               	goto	l42
 19964  08D2                     u6100:
 19965  08D2                     l6016:
 19966  08D2  0C0F               	rrf	15,w	;volatile
 19967  08D3  0C89               	rrf	9,f
 19968  08D4  3901               	andlw	1
 19969  08D5  00F2               	movwf	??_WriteI2C
 19970  08D6  0811               	movf	17,w	;volatile
 19971  08D7  391F               	andlw	31
 19972  08D8  0472               	iorwf	??_WriteI2C,w
 19973  08D9  1D03               	btfss	3,2
 19974  08DA  28DC               	goto	u6111
 19975  08DB  28DD               	goto	u6110
 19976  08DC                     u6111:
 19977  08DC  28D2               	goto	l6016
 19978  08DD                     u6110:
 19979  08DD                     l47:
 19980                           
 19981                           ;i2c.c: 72: if ( SSP1CON2bits.ACKSTAT )
 19982  08DD  0811               	movf	17,w	;volatile
 19983  08DE                     l30:
 19984  08DE  0008               	return
 19985  08DF                     __end_of_WriteI2C:
 19986                           
 19987                           	psect	text71
 19988  11EB                     __ptext71:	
 19989 ;; *************** function _EUSART_is_rx_ready *****************
 19990 ;; Defined at:
 19991 ;;		line 118 in file "mcc_generated_files/eusart.c"
 19992 ;; Parameters:    Size  Location     Type
 19993 ;;		None
 19994 ;; Auto vars:     Size  Location     Type
 19995 ;;		None
 19996 ;; Return value:  Size  Location     Type
 19997 ;;                  1    wreg      unsigned char 
 19998 ;; Registers used:
 19999 ;;		wreg
 20000 ;; Tracked objects:
 20001 ;;		On entry : 0/0
 20002 ;;		On exit  : 0/0
 20003 ;;		Unchanged: 0/0
 20004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20009 ;;Total ram usage:        0 bytes
 20010 ;; Hardware stack levels used:    1
 20011 ;; Hardware stack levels required when called:    4
 20012 ;; This function calls:
 20013 ;;		Nothing
 20014 ;; This function is called by:
 20015 ;;		_main
 20016 ;; This function uses a non-reentrant model
 20017 ;;
 20018                           
 20019                           
 20020                           ;psect for function _EUSART_is_rx_ready
 20021  11EB                     _EUSART_is_rx_ready:
 20022  11EB                     l5322:	
 20023                           ;incstack = 0
 20024                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 20025                           
 20026                           
 20027                           ;eusart.c: 120: return eusartRxCount;
 20028  11EB  0020               	movlb	0	; select bank0
 20029  11EC  0868               	movf	_eusartRxCount,w	;volatile
 20030  11ED                     l817:
 20031  11ED  0008               	return
 20032  11EE                     __end_of_EUSART_is_rx_ready:
 20033                           
 20034                           	psect	intentry
 20035  0004                     __pintentry:	
 20036 ;; *************** function _INTERRUPT_InterruptManager *****************
 20037 ;; Defined at:
 20038 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 20039 ;; Parameters:    Size  Location     Type
 20040 ;;		None
 20041 ;; Auto vars:     Size  Location     Type
 20042 ;;		None
 20043 ;; Return value:  Size  Location     Type
 20044 ;;                  1    wreg      void 
 20045 ;; Registers used:
 20046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20047 ;; Tracked objects:
 20048 ;;		On entry : 0/0
 20049 ;;		On exit  : 0/0
 20050 ;;		Unchanged: 0/0
 20051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20056 ;;Total ram usage:        0 bytes
 20057 ;; Hardware stack levels used:    1
 20058 ;; Hardware stack levels required when called:    3
 20059 ;; This function calls:
 20060 ;;		Absolute function
 20061 ;;		_EUSART_Receive_ISR
 20062 ;;		_EUSART_Transmit_ISR
 20063 ;;		_INT_ISR
 20064 ;;		_TMR1_ISR
 20065 ;; This function is called by:
 20066 ;;		Interrupt level 1
 20067 ;; This function uses a non-reentrant model
 20068 ;;
 20069                           
 20070  0004                     _INTERRUPT_InterruptManager:
 20071                           
 20072                           ;incstack = 0
 20073  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 20074                           
 20075                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 20076  0005  3180               	pagesel	$
 20077  0006                     i1l5786:
 20078                           
 20079                           ;interrupt_manager.c: 55: if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
 20080  0006  002E               	movlb	14	; select bank14
 20081  0007  1C16               	btfss	22,0	;volatile
 20082  0008  280A               	goto	u570_21
 20083  0009  280B               	goto	u570_20
 20084  000A                     u570_21:
 20085  000A  2813               	goto	i1l364
 20086  000B                     u570_20:
 20087  000B                     i1l5788:
 20088  000B  1C0C               	btfss	12,0	;volatile
 20089  000C  280E               	goto	u571_21
 20090  000D  280F               	goto	u571_20
 20091  000E                     u571_21:
 20092  000E  2813               	goto	i1l364
 20093  000F                     u571_20:
 20094  000F                     i1l5790:
 20095                           
 20096                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: INT_ISR();
 20097  000F  3192  2206  3180   	fcall	_INT_ISR
 20098                           
 20099                           ;interrupt_manager.c: 58: }
 20100  0012  2850               	goto	i1l378
 20101  0013                     i1l364:
 20102                           
 20103                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
 20104  0013  1F0B               	btfss	11,6	;volatile
 20105  0014  2816               	goto	u572_21
 20106  0015  2817               	goto	u572_20
 20107  0016                     u572_21:
 20108  0016  2850               	goto	i1l378
 20109  0017                     u572_20:
 20110  0017                     i1l5792:
 20111                           
 20112                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: if(PIE3bits.TXIE == 1 && PIR3bits.T
      +                          XIF == 1)
 20113  0017  1E19               	btfss	25,4	;volatile
 20114  0018  281A               	goto	u573_21
 20115  0019  281B               	goto	u573_20
 20116  001A                     u573_21:
 20117  001A  2826               	goto	i1l367
 20118  001B                     u573_20:
 20119  001B                     i1l5794:
 20120  001B  1E0F               	btfss	15,4	;volatile
 20121  001C  281E               	goto	u574_21
 20122  001D  281F               	goto	u574_20
 20123  001E                     u574_21:
 20124  001E  2826               	goto	i1l367
 20125  001F                     u574_20:
 20126  001F                     i1l5796:
 20127                           
 20128                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 63: EUSART_TxDefaultInterruptHandler();
 20129  001F  0021               	movlb	1	; select bank1
 20130  0020  0861               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 20131  0021  008A               	movwf	10
 20132  0022  0860               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 20133  0023  000A               	callw
 20134  0024  3180               	pagesel	$
 20135                           
 20136                           ;interrupt_manager.c: 64: }
 20137  0025  2850               	goto	i1l378
 20138  0026                     i1l367:
 20139                           
 20140                           ;interrupt_manager.c: 65: else if(PIE3bits.RCIE == 1 && PIR3bits.RCIF == 1)
 20141  0026  1E99               	btfss	25,5	;volatile
 20142  0027  2829               	goto	u575_21
 20143  0028  282A               	goto	u575_20
 20144  0029                     u575_21:
 20145  0029  2835               	goto	i1l369
 20146  002A                     u575_20:
 20147  002A                     i1l5798:
 20148  002A  1E8F               	btfss	15,5	;volatile
 20149  002B  282D               	goto	u576_21
 20150  002C  282E               	goto	u576_20
 20151  002D                     u576_21:
 20152  002D  2835               	goto	i1l369
 20153  002E                     u576_20:
 20154  002E                     i1l5800:
 20155                           
 20156                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
 20157  002E  0021               	movlb	1	; select bank1
 20158  002F  085F               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 20159  0030  008A               	movwf	10
 20160  0031  085E               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 20161  0032  000A               	callw
 20162  0033  3180               	pagesel	$
 20163                           
 20164                           ;interrupt_manager.c: 68: }
 20165  0034  2850               	goto	i1l378
 20166  0035                     i1l369:
 20167                           
 20168                           ;interrupt_manager.c: 69: else if(PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1)
 20169  0035  1C1A               	btfss	26,0	;volatile
 20170  0036  2838               	goto	u577_21
 20171  0037  2839               	goto	u577_20
 20172  0038                     u577_21:
 20173  0038  2841               	goto	i1l371
 20174  0039                     u577_20:
 20175  0039                     i1l5802:
 20176  0039  1C10               	btfss	16,0	;volatile
 20177  003A  283C               	goto	u578_21
 20178  003B  283D               	goto	u578_20
 20179  003C                     u578_21:
 20180  003C  2841               	goto	i1l371
 20181  003D                     u578_20:
 20182  003D                     i1l5804:
 20183                           
 20184                           ;interrupt_manager.c: 70: {;interrupt_manager.c: 71: TMR1_ISR();
 20185  003D  3192  22F3  3180   	fcall	_TMR1_ISR
 20186                           
 20187                           ;interrupt_manager.c: 72: }
 20188  0040  2850               	goto	i1l378
 20189  0041                     i1l371:
 20190                           
 20191                           ;interrupt_manager.c: 73: else if(PIE3bits.BCL1IE == 1 && PIR3bits.BCL1IF == 1)
 20192  0041  1C99               	btfss	25,1	;volatile
 20193  0042  2844               	goto	u579_21
 20194  0043  2845               	goto	u579_20
 20195  0044                     u579_21:
 20196  0044  284A               	goto	i1l373
 20197  0045                     u579_20:
 20198  0045                     i1l5806:
 20199                           
 20200                           ;interrupt_manager.c: 74: {;interrupt_manager.c: 75: i2c1_driver_busCollisionISR();
 20201  0045  1C8F               	btfss	15,1	;volatile
 20202  0046  2848               	goto	u580_21
 20203  0047  2849               	goto	u580_20
 20204  0048                     u580_21:
 20205  0048  284A               	goto	i1l373
 20206  0049                     u580_20:
 20207  0049  2850               	goto	i1l378
 20208  004A                     i1l373:
 20209                           
 20210                           ;interrupt_manager.c: 77: else if(PIE3bits.SSP1IE == 1 && PIR3bits.SSP1IF == 1)
 20211  004A  1C19               	btfss	25,0	;volatile
 20212  004B  284D               	goto	u581_21
 20213  004C  284E               	goto	u581_20
 20214  004D                     u581_21:
 20215  004D  2850               	goto	i1l372
 20216  004E                     u581_20:
 20217  004E                     i1l5810:
 20218                           
 20219                           ;interrupt_manager.c: 78: {;interrupt_manager.c: 79: i2c1_driver_i2cISR();
 20220  004E  080F               	movf	15,w	;volatile
 20221  004F  2850               	goto	i1l378
 20222  0050                     i1l372:
 20223  0050                     i1l378:
 20224  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 20225  0051  0009               	retfie
 20226  0052                     __end_of_INTERRUPT_InterruptManager:
 20227                           
 20228                           	psect	text73
 20229  12F3                     __ptext73:	
 20230 ;; *************** function _TMR1_ISR *****************
 20231 ;; Defined at:
 20232 ;;		line 164 in file "mcc_generated_files/tmr1.c"
 20233 ;; Parameters:    Size  Location     Type
 20234 ;;		None
 20235 ;; Auto vars:     Size  Location     Type
 20236 ;;		None
 20237 ;; Return value:  Size  Location     Type
 20238 ;;                  1    wreg      void 
 20239 ;; Registers used:
 20240 ;;		wreg, status,2, status,0, pclath, cstack
 20241 ;; Tracked objects:
 20242 ;;		On entry : 0/0
 20243 ;;		On exit  : 0/0
 20244 ;;		Unchanged: 0/0
 20245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20250 ;;Total ram usage:        0 bytes
 20251 ;; Hardware stack levels used:    1
 20252 ;; Hardware stack levels required when called:    1
 20253 ;; This function calls:
 20254 ;;		Absolute function
 20255 ;;		_Clock_ISR
 20256 ;;		_TMR1_DefaultInterruptHandler
 20257 ;;		_TMR1_WriteTimer
 20258 ;; This function is called by:
 20259 ;;		_INTERRUPT_InterruptManager
 20260 ;; This function uses a non-reentrant model
 20261 ;;
 20262                           
 20263                           
 20264                           ;psect for function _TMR1_ISR
 20265  12F3                     _TMR1_ISR:
 20266  12F3                     i1l5314:	
 20267                           ;incstack = 0
 20268                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 20269                           
 20270                           
 20271                           ;tmr1.c: 168: PIR4bits.TMR1IF = 0;
 20272  12F3  002E               	movlb	14	; select bank14
 20273  12F4  1010               	bcf	16,0	;volatile
 20274  12F5                     i1l5316:
 20275                           
 20276                           ;tmr1.c: 169: TMR1_WriteTimer(timer1ReloadVal);
 20277  12F5  0021               	movlb	1	; select bank1
 20278  12F6  085D               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 20279  12F7  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 20280  12F8  085C               	movf	_timer1ReloadVal^(0+128),w	;volatile
 20281  12F9  00F0               	movwf	TMR1_WriteTimer@timerVal
 20282  12FA  3192  22A8  3192   	fcall	_TMR1_WriteTimer
 20283  12FD                     i1l5318:
 20284                           
 20285                           ;tmr1.c: 171: if(TMR1_InterruptHandler)
 20286  12FD  0021               	movlb	1	; select bank1
 20287  12FE  085A               	movf	_TMR1_InterruptHandler^(0+128),w
 20288  12FF  045B               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 20289  1300  1903               	btfsc	3,2
 20290  1301  2B03               	goto	u482_21
 20291  1302  2B04               	goto	u482_20
 20292  1303                     u482_21:
 20293  1303  2B09               	goto	i1l436
 20294  1304                     u482_20:
 20295  1304                     i1l5320:
 20296                           
 20297                           ;tmr1.c: 172: {;tmr1.c: 173: TMR1_InterruptHandler();
 20298  1304  085B               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 20299  1305  008A               	movwf	10
 20300  1306  085A               	movf	_TMR1_InterruptHandler^(0+128),w
 20301  1307  000A               	callw
 20302  1308  3192               	pagesel	$
 20303  1309                     i1l436:
 20304  1309  0008               	return
 20305  130A                     __end_of_TMR1_ISR:
 20306                           
 20307                           	psect	text74
 20308  12A8                     __ptext74:	
 20309 ;; *************** function _TMR1_WriteTimer *****************
 20310 ;; Defined at:
 20311 ;;		line 127 in file "mcc_generated_files/tmr1.c"
 20312 ;; Parameters:    Size  Location     Type
 20313 ;;  timerVal        2    0[COMMON] unsigned int 
 20314 ;; Auto vars:     Size  Location     Type
 20315 ;;		None
 20316 ;; Return value:  Size  Location     Type
 20317 ;;                  1    wreg      void 
 20318 ;; Registers used:
 20319 ;;		wreg, status,2
 20320 ;; Tracked objects:
 20321 ;;		On entry : 0/0
 20322 ;;		On exit  : 0/0
 20323 ;;		Unchanged: 0/0
 20324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20325 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20329 ;;Total ram usage:        2 bytes
 20330 ;; Hardware stack levels used:    1
 20331 ;; This function calls:
 20332 ;;		Nothing
 20333 ;; This function is called by:
 20334 ;;		_TMR1_ISR
 20335 ;;		_TMR1_Reload
 20336 ;; This function uses a non-reentrant model
 20337 ;;
 20338                           
 20339                           
 20340                           ;psect for function _TMR1_WriteTimer
 20341  12A8                     _TMR1_WriteTimer:
 20342  12A8                     i1l5110:	
 20343                           ;incstack = 0
 20344                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 20345                           
 20346                           
 20347                           ;tmr1.c: 129: if (T1CONbits.nT1SYNC == 1)
 20348  12A8  0024               	movlb	4	; select bank4
 20349  12A9  1D0E               	btfss	14,2	;volatile
 20350  12AA  2AAC               	goto	u453_21
 20351  12AB  2AAD               	goto	u453_20
 20352  12AC                     u453_21:
 20353  12AC  2AB4               	goto	i1l5120
 20354  12AD                     u453_20:
 20355  12AD                     i1l5112:
 20356                           
 20357                           ;tmr1.c: 130: {;tmr1.c: 132: T1CONbits.TMR1ON = 0;
 20358  12AD  100E               	bcf	14,0	;volatile
 20359  12AE                     i1l5114:
 20360                           
 20361                           ;tmr1.c: 135: TMR1H = (timerVal >> 8);
 20362  12AE  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 20363  12AF  008D               	movwf	13	;volatile
 20364  12B0                     i1l5116:
 20365                           
 20366                           ;tmr1.c: 136: TMR1L = timerVal;
 20367  12B0  0870               	movf	TMR1_WriteTimer@timerVal,w
 20368  12B1  008C               	movwf	12	;volatile
 20369  12B2                     i1l5118:
 20370                           
 20371                           ;tmr1.c: 139: T1CONbits.TMR1ON =1;
 20372  12B2  140E               	bsf	14,0	;volatile
 20373                           
 20374                           ;tmr1.c: 140: }
 20375  12B3  2AB8               	goto	i1l423
 20376  12B4                     i1l5120:
 20377                           
 20378                           ;tmr1.c: 141: else;tmr1.c: 142: {;tmr1.c: 144: TMR1H = (timerVal >> 8);
 20379  12B4  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 20380  12B5  008D               	movwf	13	;volatile
 20381  12B6                     i1l5122:
 20382                           
 20383                           ;tmr1.c: 145: TMR1L = timerVal;
 20384  12B6  0870               	movf	TMR1_WriteTimer@timerVal,w
 20385  12B7  008C               	movwf	12	;volatile
 20386  12B8                     i1l423:
 20387  12B8  0008               	return
 20388  12B9                     __end_of_TMR1_WriteTimer:
 20389                           
 20390                           	psect	text75
 20391  0A04                     __ptext75:	
 20392 ;; *************** function _Clock_ISR *****************
 20393 ;; Defined at:
 20394 ;;		line 361 in file "main.c"
 20395 ;; Parameters:    Size  Location     Type
 20396 ;;		None
 20397 ;; Auto vars:     Size  Location     Type
 20398 ;;		None
 20399 ;; Return value:  Size  Location     Type
 20400 ;;                  1    wreg      void 
 20401 ;; Registers used:
 20402 ;;		wreg, status,2, status,0
 20403 ;; Tracked objects:
 20404 ;;		On entry : 0/0
 20405 ;;		On exit  : 0/0
 20406 ;;		Unchanged: 0/0
 20407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20410 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20412 ;;Total ram usage:        1 bytes
 20413 ;; Hardware stack levels used:    1
 20414 ;; This function calls:
 20415 ;;		Nothing
 20416 ;; This function is called by:
 20417 ;;		_main
 20418 ;;		_TMR1_ISR
 20419 ;; This function uses a non-reentrant model
 20420 ;;
 20421                           
 20422                           
 20423                           ;psect for function _Clock_ISR
 20424  0A04                     _Clock_ISR:
 20425  0A04                     i1l5180:	
 20426                           ;incstack = 0
 20427                           ; Regs used in _Clock_ISR: [wreg+status,2+status,0]
 20428                           
 20429                           
 20430                           ;main.c: 363: t.s++;
 20431  0A04  3001               	movlw	1
 20432  0A05  00F0               	movwf	??_Clock_ISR
 20433  0A06  0870               	movf	??_Clock_ISR,w
 20434  0A07  0020               	movlb	0	; select bank0
 20435  0A08  07DB               	addwf	_t+2,f
 20436                           
 20437                           ;main.c: 365: if(t.s==60){
 20438  0A09  303C               	movlw	60
 20439  0A0A  065B               	xorwf	_t+2,w
 20440  0A0B  1D03               	btfss	3,2
 20441  0A0C  2A0E               	goto	u463_21
 20442  0A0D  2A0F               	goto	u463_20
 20443  0A0E                     u463_21:
 20444  0A0E  2A17               	goto	i1l5188
 20445  0A0F                     u463_20:
 20446  0A0F                     i1l5182:
 20447                           
 20448                           ;main.c: 366: t.m++;
 20449  0A0F  3001               	movlw	1
 20450  0A10  00F0               	movwf	??_Clock_ISR
 20451  0A11  0870               	movf	??_Clock_ISR,w
 20452  0A12  07DA               	addwf	_t+1,f
 20453  0A13                     i1l5184:
 20454                           
 20455                           ;main.c: 367: t.s=0;
 20456  0A13  01DB               	clrf	_t+2
 20457  0A14                     i1l5186:
 20458                           
 20459                           ;main.c: 368: writeEEPROM_flag = 1;
 20460  0A14  0021               	movlb	1	; select bank1
 20461  0A15  01D3               	clrf	_writeEEPROM_flag^(0+128)
 20462  0A16  0AD3               	incf	_writeEEPROM_flag^(0+128),f
 20463  0A17                     i1l5188:
 20464                           
 20465                           ;main.c: 369: };main.c: 370: if(t.m==60){
 20466  0A17  303C               	movlw	60
 20467  0A18  0020               	movlb	0	; select bank0
 20468  0A19  065A               	xorwf	_t+1,w
 20469  0A1A  1D03               	btfss	3,2
 20470  0A1B  2A1D               	goto	u464_21
 20471  0A1C  2A1E               	goto	u464_20
 20472  0A1D                     u464_21:
 20473  0A1D  2A23               	goto	i1l5194
 20474  0A1E                     u464_20:
 20475  0A1E                     i1l5190:
 20476                           
 20477                           ;main.c: 371: t.h++;
 20478  0A1E  3001               	movlw	1
 20479  0A1F  00F0               	movwf	??_Clock_ISR
 20480  0A20  0870               	movf	??_Clock_ISR,w
 20481  0A21  07D9               	addwf	_t,f
 20482  0A22                     i1l5192:
 20483                           
 20484                           ;main.c: 372: t.m=0;
 20485  0A22  01DA               	clrf	_t+1
 20486  0A23                     i1l5194:
 20487                           
 20488                           ;main.c: 373: };main.c: 374: if(t.h==24){
 20489  0A23  3018               	movlw	24
 20490  0A24  0659               	xorwf	_t,w
 20491  0A25  1D03               	btfss	3,2
 20492  0A26  2A28               	goto	u465_21
 20493  0A27  2A29               	goto	u465_20
 20494  0A28                     u465_21:
 20495  0A28  2A2A               	goto	i1l5198
 20496  0A29                     u465_20:
 20497  0A29                     i1l5196:
 20498                           
 20499                           ;main.c: 375: t.h=0;
 20500  0A29  01D9               	clrf	_t
 20501  0A2A                     i1l5198:
 20502                           
 20503                           ;main.c: 376: };main.c: 379: if((ALAF == 'A') && t.s >= clkAlarm.alarmVal.s && t.m >= cl
      +                          kAlarm.alarmVal.m && t.h >= clkAlarm.alarmVal.h && editingClockAlarm == 0){
 20504  0A2A  3041               	movlw	65
 20505  0A2B  0667               	xorwf	_ALAF,w
 20506  0A2C  1D03               	btfss	3,2
 20507  0A2D  2A2F               	goto	u466_21
 20508  0A2E  2A30               	goto	u466_20
 20509  0A2F                     u466_21:
 20510  0A2F  2A54               	goto	i1l5212
 20511  0A30                     u466_20:
 20512  0A30                     i1l5200:
 20513  0A30  0857               	movf	_clkAlarm+2,w
 20514  0A31  025B               	subwf	_t+2,w
 20515  0A32  1C03               	skipc
 20516  0A33  2A35               	goto	u467_21
 20517  0A34  2A36               	goto	u467_20
 20518  0A35                     u467_21:
 20519  0A35  2A54               	goto	i1l5212
 20520  0A36                     u467_20:
 20521  0A36                     i1l5202:
 20522  0A36  0856               	movf	_clkAlarm+1,w
 20523  0A37  025A               	subwf	_t+1,w
 20524  0A38  1C03               	skipc
 20525  0A39  2A3B               	goto	u468_21
 20526  0A3A  2A3C               	goto	u468_20
 20527  0A3B                     u468_21:
 20528  0A3B  2A54               	goto	i1l5212
 20529  0A3C                     u468_20:
 20530  0A3C                     i1l5204:
 20531  0A3C  0855               	movf	_clkAlarm,w
 20532  0A3D  0259               	subwf	_t,w
 20533  0A3E  1C03               	skipc
 20534  0A3F  2A41               	goto	u469_21
 20535  0A40  2A42               	goto	u469_20
 20536  0A41                     u469_21:
 20537  0A41  2A54               	goto	i1l5212
 20538  0A42                     u469_20:
 20539  0A42                     i1l5206:
 20540  0A42  085E               	movf	_editingClockAlarm,w
 20541  0A43  045F               	iorwf	_editingClockAlarm+1,w
 20542  0A44  1D03               	btfss	3,2
 20543  0A45  2A47               	goto	u470_21
 20544  0A46  2A48               	goto	u470_20
 20545  0A47                     u470_21:
 20546  0A47  2A54               	goto	i1l5212
 20547  0A48                     u470_20:
 20548  0A48                     i1l5208:
 20549                           
 20550                           ;main.c: 380: alarmPWMStart.h = 0xff;
 20551  0A48  30FF               	movlw	255
 20552  0A49  00F0               	movwf	??_Clock_ISR
 20553  0A4A  0870               	movf	??_Clock_ISR,w
 20554  0A4B  0021               	movlb	1	; select bank1
 20555  0A4C  00E3               	movwf	_alarmPWMStart^(0+128)
 20556  0A4D                     i1l5210:
 20557                           
 20558                           ;main.c: 381: clkAlarm.trigger = 1;
 20559  0A4D  0020               	movlb	0	; select bank0
 20560  0A4E  01D8               	clrf	_clkAlarm+3
 20561  0A4F  0AD8               	incf	_clkAlarm+3,f
 20562                           
 20563                           ;main.c: 382: clkAlarm.alarmVal.h = 25;
 20564  0A50  3019               	movlw	25
 20565  0A51  00F0               	movwf	??_Clock_ISR
 20566  0A52  0870               	movf	??_Clock_ISR,w
 20567  0A53  00D5               	movwf	_clkAlarm
 20568  0A54                     i1l5212:
 20569  0A54  1003               	clrc
 20570  0A55  1F96               	btfss	22,7	;volatile
 20571  0A56  1403               	setc
 20572  0A57  1803               	btfsc	3,0
 20573  0A58  2A5A               	goto	u471_21
 20574  0A59  2A5D               	goto	u471_20
 20575  0A5A                     u471_21:
 20576  0A5A  0020               	movlb	0	; select bank0
 20577  0A5B  1796               	bsf	22,7	;volatile
 20578  0A5C  2A5F               	goto	u472_24
 20579  0A5D                     u471_20:
 20580  0A5D  0020               	movlb	0	; select bank0
 20581  0A5E  1396               	bcf	22,7	;volatile
 20582  0A5F                     u472_24:
 20583  0A5F                     i1l5214:
 20584                           
 20585                           ;main.c: 386: updateLCD = 1;
 20586  0A5F  0021               	movlb	1	; select bank1
 20587  0A60  01EA               	clrf	_updateLCD^(0+128)
 20588  0A61  0AEA               	incf	_updateLCD^(0+128),f
 20589  0A62                     i1l5216:
 20590                           
 20591                           ;main.c: 387: counterMonitorAux++;
 20592  0A62  3001               	movlw	1
 20593  0A63  00F0               	movwf	??_Clock_ISR
 20594  0A64  0870               	movf	??_Clock_ISR,w
 20595  0A65  07D4               	addwf	_counterMonitorAux^(0+128),f
 20596  0A66                     i1l5218:
 20597                           
 20598                           ;main.c: 388: if(counterMonitorAux >= PMON){
 20599  0A66  0020               	movlb	0	; select bank0
 20600  0A67  086E               	movf	_PMON,w
 20601  0A68  0021               	movlb	1	; select bank1
 20602  0A69  0254               	subwf	_counterMonitorAux^(0+128),w
 20603  0A6A  1C03               	skipc
 20604  0A6B  2A6D               	goto	u473_21
 20605  0A6C  2A6E               	goto	u473_20
 20606  0A6D                     u473_21:
 20607  0A6D  2A71               	goto	i1l1273
 20608  0A6E                     u473_20:
 20609  0A6E                     i1l5220:
 20610                           
 20611                           ;main.c: 389: counterMonitorAux = 0;
 20612  0A6E  01D4               	clrf	_counterMonitorAux^(0+128)
 20613  0A6F                     i1l5222:
 20614                           
 20615                           ;main.c: 390: monitor_TEMP_LUM = 1;
 20616  0A6F  01D5               	clrf	_monitor_TEMP_LUM^(0+128)
 20617  0A70  0AD5               	incf	_monitor_TEMP_LUM^(0+128),f
 20618  0A71                     i1l1273:
 20619  0A71  0008               	return
 20620  0A72                     __end_of_Clock_ISR:
 20621                           
 20622                           	psect	text76
 20623  11E9                     __ptext76:	
 20624 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 20625 ;; Defined at:
 20626 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 20627 ;; Parameters:    Size  Location     Type
 20628 ;;		None
 20629 ;; Auto vars:     Size  Location     Type
 20630 ;;		None
 20631 ;; Return value:  Size  Location     Type
 20632 ;;                  1    wreg      void 
 20633 ;; Registers used:
 20634 ;;		None
 20635 ;; Tracked objects:
 20636 ;;		On entry : 0/0
 20637 ;;		On exit  : 0/0
 20638 ;;		Unchanged: 0/0
 20639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20644 ;;Total ram usage:        0 bytes
 20645 ;; Hardware stack levels used:    1
 20646 ;; This function calls:
 20647 ;;		Nothing
 20648 ;; This function is called by:
 20649 ;;		_TMR1_Initialize
 20650 ;;		_TMR1_ISR
 20651 ;; This function uses a non-reentrant model
 20652 ;;
 20653                           
 20654                           
 20655                           ;psect for function _TMR1_DefaultInterruptHandler
 20656  11E9                     _TMR1_DefaultInterruptHandler:
 20657  11E9                     i1l442:	
 20658                           ;incstack = 0
 20659                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 20660                           
 20661  11E9  0008               	return
 20662  11EA                     __end_of_TMR1_DefaultInterruptHandler:
 20663                           
 20664                           	psect	text77
 20665  1206                     __ptext77:	
 20666 ;; *************** function _INT_ISR *****************
 20667 ;; Defined at:
 20668 ;;		line 32 in file "mcc_generated_files/ext_int.c"
 20669 ;; Parameters:    Size  Location     Type
 20670 ;;		None
 20671 ;; Auto vars:     Size  Location     Type
 20672 ;;		None
 20673 ;; Return value:  Size  Location     Type
 20674 ;;                  1    wreg      void 
 20675 ;; Registers used:
 20676 ;;		wreg, status,2, status,0, pclath, cstack
 20677 ;; Tracked objects:
 20678 ;;		On entry : 0/0
 20679 ;;		On exit  : 0/0
 20680 ;;		Unchanged: 0/0
 20681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20686 ;;Total ram usage:        0 bytes
 20687 ;; Hardware stack levels used:    1
 20688 ;; Hardware stack levels required when called:    2
 20689 ;; This function calls:
 20690 ;;		_INT_CallBack
 20691 ;; This function is called by:
 20692 ;;		_INTERRUPT_InterruptManager
 20693 ;; This function uses a non-reentrant model
 20694 ;;
 20695                           
 20696                           
 20697                           ;psect for function _INT_ISR
 20698  1206                     _INT_ISR:
 20699  1206                     i1l5310:	
 20700                           ;incstack = 0
 20701                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 20702                           
 20703                           
 20704                           ;ext_int.c: 34: (PIR0bits.INTF = 0);
 20705  1206  002E               	movlb	14	; select bank14
 20706  1207  100C               	bcf	12,0	;volatile
 20707  1208                     i1l5312:
 20708                           
 20709                           ;ext_int.c: 37: INT_CallBack();
 20710  1208  3192  2281  3192   	fcall	_INT_CallBack
 20711  120B                     i1l747:
 20712  120B  0008               	return
 20713  120C                     __end_of_INT_ISR:
 20714                           
 20715                           	psect	text78
 20716  1281                     __ptext78:	
 20717 ;; *************** function _INT_CallBack *****************
 20718 ;; Defined at:
 20719 ;;		line 41 in file "mcc_generated_files/ext_int.c"
 20720 ;; Parameters:    Size  Location     Type
 20721 ;;		None
 20722 ;; Auto vars:     Size  Location     Type
 20723 ;;		None
 20724 ;; Return value:  Size  Location     Type
 20725 ;;                  1    wreg      void 
 20726 ;; Registers used:
 20727 ;;		wreg, status,2, status,0, pclath, cstack
 20728 ;; Tracked objects:
 20729 ;;		On entry : 0/0
 20730 ;;		On exit  : 0/0
 20731 ;;		Unchanged: 0/0
 20732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20737 ;;Total ram usage:        0 bytes
 20738 ;; Hardware stack levels used:    1
 20739 ;; Hardware stack levels required when called:    1
 20740 ;; This function calls:
 20741 ;;		Absolute function
 20742 ;;		_INT_DefaultInterruptHandler
 20743 ;;		_S1_ISR
 20744 ;; This function is called by:
 20745 ;;		_INT_ISR
 20746 ;; This function uses a non-reentrant model
 20747 ;;
 20748                           
 20749                           
 20750                           ;psect for function _INT_CallBack
 20751  1281                     _INT_CallBack:
 20752  1281                     i1l5140:	
 20753                           ;incstack = 0
 20754                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 20755                           
 20756                           
 20757                           ;ext_int.c: 44: if(INT_InterruptHandler)
 20758  1281  0021               	movlb	1	; select bank1
 20759  1282  0858               	movf	_INT_InterruptHandler^(0+128),w
 20760  1283  0459               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 20761  1284  1903               	btfsc	3,2
 20762  1285  2A87               	goto	u454_21
 20763  1286  2A88               	goto	u454_20
 20764  1287                     u454_21:
 20765  1287  2A8D               	goto	i1l751
 20766  1288                     u454_20:
 20767  1288                     i1l5142:
 20768                           
 20769                           ;ext_int.c: 45: {;ext_int.c: 46: INT_InterruptHandler();
 20770  1288  0859               	movf	(_INT_InterruptHandler+1)^(0+128),w
 20771  1289  008A               	movwf	10
 20772  128A  0858               	movf	_INT_InterruptHandler^(0+128),w
 20773  128B  000A               	callw
 20774  128C  3192               	pagesel	$
 20775  128D                     i1l751:
 20776  128D  0008               	return
 20777  128E                     __end_of_INT_CallBack:
 20778                           
 20779                           	psect	text79
 20780  11E8                     __ptext79:	
 20781 ;; *************** function _INT_DefaultInterruptHandler *****************
 20782 ;; Defined at:
 20783 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 20784 ;; Parameters:    Size  Location     Type
 20785 ;;		None
 20786 ;; Auto vars:     Size  Location     Type
 20787 ;;		None
 20788 ;; Return value:  Size  Location     Type
 20789 ;;                  1    wreg      void 
 20790 ;; Registers used:
 20791 ;;		None
 20792 ;; Tracked objects:
 20793 ;;		On entry : 0/0
 20794 ;;		On exit  : 0/0
 20795 ;;		Unchanged: 0/0
 20796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20801 ;;Total ram usage:        0 bytes
 20802 ;; Hardware stack levels used:    1
 20803 ;; This function calls:
 20804 ;;		Nothing
 20805 ;; This function is called by:
 20806 ;;		_EXT_INT_Initialize
 20807 ;;		_INT_CallBack
 20808 ;; This function uses a non-reentrant model
 20809 ;;
 20810                           
 20811                           
 20812                           ;psect for function _INT_DefaultInterruptHandler
 20813  11E8                     _INT_DefaultInterruptHandler:
 20814  11E8                     i1l757:	
 20815                           ;incstack = 0
 20816                           ; Regs used in _INT_DefaultInterruptHandler: []
 20817                           
 20818  11E8  0008               	return
 20819  11E9                     __end_of_INT_DefaultInterruptHandler:
 20820                           
 20821                           	psect	text80
 20822  124E                     __ptext80:	
 20823 ;; *************** function _S1_ISR *****************
 20824 ;; Defined at:
 20825 ;;		line 786 in file "main.c"
 20826 ;; Parameters:    Size  Location     Type
 20827 ;;		None
 20828 ;; Auto vars:     Size  Location     Type
 20829 ;;		None
 20830 ;; Return value:  Size  Location     Type
 20831 ;;                  1    wreg      void 
 20832 ;; Registers used:
 20833 ;;		None
 20834 ;; Tracked objects:
 20835 ;;		On entry : 0/0
 20836 ;;		On exit  : 0/0
 20837 ;;		Unchanged: 0/0
 20838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20843 ;;Total ram usage:        0 bytes
 20844 ;; Hardware stack levels used:    1
 20845 ;; This function calls:
 20846 ;;		Nothing
 20847 ;; This function is called by:
 20848 ;;		_main
 20849 ;;		_INT_CallBack
 20850 ;; This function uses a non-reentrant model
 20851 ;;
 20852                           
 20853                           
 20854                           ;psect for function _S1_ISR
 20855  124E                     _S1_ISR:
 20856  124E                     i1l4966:	
 20857                           ;incstack = 0
 20858                           ; Regs used in _S1_ISR: []
 20859                           
 20860                           
 20861                           ;main.c: 787: PIE0bits.INTE = 0;
 20862  124E  002E               	movlb	14	; select bank14
 20863  124F  1016               	bcf	22,0	;volatile
 20864                           
 20865                           ;main.c: 788: flagS1pushed = 1;
 20866  1250  0021               	movlb	1	; select bank1
 20867  1251  01D6               	clrf	_flagS1pushed^(0+128)
 20868  1252  0AD6               	incf	_flagS1pushed^(0+128),f
 20869                           
 20870                           ;main.c: 807: (PIR0bits.INTF = 0);
 20871  1253  002E               	movlb	14	; select bank14
 20872  1254  100C               	bcf	12,0	;volatile
 20873                           
 20874                           ;main.c: 808: PIE0bits.INTE = 1;
 20875  1255  1416               	bsf	22,0	;volatile
 20876  1256                     i1l1431:
 20877  1256  0008               	return
 20878  1257                     __end_of_S1_ISR:
 20879                           
 20880                           	psect	text81
 20881  1503                     __ptext81:	
 20882 ;; *************** function _EUSART_Transmit_ISR *****************
 20883 ;; Defined at:
 20884 ;;		line 181 in file "mcc_generated_files/eusart.c"
 20885 ;; Parameters:    Size  Location     Type
 20886 ;;		None
 20887 ;; Auto vars:     Size  Location     Type
 20888 ;;		None
 20889 ;; Return value:  Size  Location     Type
 20890 ;;                  1    wreg      void 
 20891 ;; Registers used:
 20892 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20893 ;; Tracked objects:
 20894 ;;		On entry : 0/0
 20895 ;;		On exit  : 0/0
 20896 ;;		Unchanged: 0/0
 20897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20900 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20901 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20902 ;;Total ram usage:        1 bytes
 20903 ;; Hardware stack levels used:    1
 20904 ;; This function calls:
 20905 ;;		Nothing
 20906 ;; This function is called by:
 20907 ;;		_EUSART_Initialize
 20908 ;;		_INTERRUPT_InterruptManager
 20909 ;; This function uses a non-reentrant model
 20910 ;;
 20911                           
 20912                           
 20913                           ;psect for function _EUSART_Transmit_ISR
 20914  1503                     _EUSART_Transmit_ISR:
 20915  1503                     i1l5330:	
 20916                           ;incstack = 0
 20917                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 20918                           
 20919                           
 20920                           ;eusart.c: 185: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 20921  1503  3040               	movlw	64
 20922  1504  0021               	movlb	1	; select bank1
 20923  1505  0262               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 20924  1506  1803               	skipnc
 20925  1507  2D09               	goto	u483_21
 20926  1508  2D0A               	goto	u483_20
 20927  1509                     u483_21:
 20928  1509  2D25               	goto	i1l845
 20929  150A                     u483_20:
 20930  150A                     i1l5332:
 20931                           
 20932                           ;eusart.c: 186: {;eusart.c: 187: TX1REG = eusartTxBuffer[eusartTxTail++];
 20933  150A  0020               	movlb	0	; select bank0
 20934  150B  086B               	movf	_eusartTxTail,w
 20935  150C  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 20936  150D  0086               	movwf	6
 20937  150E  3001               	movlw	1	; select bank3/4
 20938  150F  0087               	movwf	7
 20939  1510  0801               	movf	1,w
 20940  1511  0022               	movlb	2	; select bank2
 20941  1512  009A               	movwf	26	;volatile
 20942  1513                     i1l5334:
 20943  1513  3001               	movlw	1
 20944  1514  00F0               	movwf	??_EUSART_Transmit_ISR
 20945  1515  0870               	movf	??_EUSART_Transmit_ISR,w
 20946  1516  0020               	movlb	0	; select bank0
 20947  1517  07EB               	addwf	_eusartTxTail,f	;volatile
 20948  1518                     i1l5336:
 20949                           
 20950                           ;eusart.c: 188: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 20951  1518  3040               	movlw	64
 20952  1519  026B               	subwf	_eusartTxTail,w	;volatile
 20953  151A  1C03               	skipc
 20954  151B  2D1D               	goto	u484_21
 20955  151C  2D1E               	goto	u484_20
 20956  151D                     u484_21:
 20957  151D  2D1F               	goto	i1l5340
 20958  151E                     u484_20:
 20959  151E                     i1l5338:
 20960                           
 20961                           ;eusart.c: 189: {;eusart.c: 190: eusartTxTail = 0;
 20962  151E  01EB               	clrf	_eusartTxTail	;volatile
 20963  151F                     i1l5340:
 20964                           
 20965                           ;eusart.c: 191: };eusart.c: 192: eusartTxBufferRemaining++;
 20966  151F  3001               	movlw	1
 20967  1520  00F0               	movwf	??_EUSART_Transmit_ISR
 20968  1521  0870               	movf	??_EUSART_Transmit_ISR,w
 20969  1522  0021               	movlb	1	; select bank1
 20970  1523  07E2               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 20971                           
 20972                           ;eusart.c: 193: }
 20973  1524  2D27               	goto	i1l848
 20974  1525                     i1l845:
 20975                           
 20976                           ;eusart.c: 194: else;eusart.c: 195: {;eusart.c: 196: PIE3bits.TXIE = 0;
 20977  1525  002E               	movlb	14	; select bank14
 20978  1526  1219               	bcf	25,4	;volatile
 20979  1527                     i1l848:
 20980  1527  0008               	return
 20981  1528                     __end_of_EUSART_Transmit_ISR:
 20982                           
 20983                           	psect	text82
 20984  1437                     __ptext82:	
 20985 ;; *************** function _EUSART_Receive_ISR *****************
 20986 ;; Defined at:
 20987 ;;		line 200 in file "mcc_generated_files/eusart.c"
 20988 ;; Parameters:    Size  Location     Type
 20989 ;;		None
 20990 ;; Auto vars:     Size  Location     Type
 20991 ;;		None
 20992 ;; Return value:  Size  Location     Type
 20993 ;;                  1    wreg      void 
 20994 ;; Registers used:
 20995 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20996 ;; Tracked objects:
 20997 ;;		On entry : 0/0
 20998 ;;		On exit  : 0/0
 20999 ;;		Unchanged: 0/0
 21000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21003 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21005 ;;Total ram usage:        1 bytes
 21006 ;; Hardware stack levels used:    1
 21007 ;; This function calls:
 21008 ;;		Nothing
 21009 ;; This function is called by:
 21010 ;;		_EUSART_Initialize
 21011 ;;		_INTERRUPT_InterruptManager
 21012 ;; This function uses a non-reentrant model
 21013 ;;
 21014                           
 21015                           
 21016                           ;psect for function _EUSART_Receive_ISR
 21017  1437                     _EUSART_Receive_ISR:
 21018  1437                     i1l5342:	
 21019                           ;incstack = 0
 21020                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 21021                           
 21022                           
 21023                           ;eusart.c: 203: if(1 == RC1STAbits.OERR)
 21024  1437  0022               	movlb	2	; select bank2
 21025  1438  1C9D               	btfss	29,1	;volatile
 21026  1439  2C3B               	goto	u485_21
 21027  143A  2C3C               	goto	u485_20
 21028  143B                     u485_21:
 21029  143B  2C3E               	goto	i1l5346
 21030  143C                     u485_20:
 21031  143C                     i1l5344:
 21032                           
 21033                           ;eusart.c: 204: {;eusart.c: 207: RC1STAbits.CREN = 0;
 21034  143C  121D               	bcf	29,4	;volatile
 21035                           
 21036                           ;eusart.c: 208: RC1STAbits.CREN = 1;
 21037  143D  161D               	bsf	29,4	;volatile
 21038  143E                     i1l5346:
 21039                           
 21040                           ;eusart.c: 209: };eusart.c: 212: eusartRxBuffer[eusartRxHead++] = RC1REG;
 21041  143E  0819               	movf	25,w	;volatile
 21042  143F  00F0               	movwf	??_EUSART_Receive_ISR
 21043  1440  0020               	movlb	0	; select bank0
 21044  1441  086A               	movf	_eusartRxHead,w
 21045  1442  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 21046  1443  0086               	movwf	6
 21047  1444  3002               	movlw	2	; select bank4/5
 21048  1445  0087               	movwf	7
 21049  1446  0870               	movf	??_EUSART_Receive_ISR,w
 21050  1447  0081               	movwf	1
 21051  1448                     i1l5348:
 21052  1448  3001               	movlw	1
 21053  1449  00F0               	movwf	??_EUSART_Receive_ISR
 21054  144A  0870               	movf	??_EUSART_Receive_ISR,w
 21055  144B  07EA               	addwf	_eusartRxHead,f	;volatile
 21056  144C                     i1l5350:
 21057                           
 21058                           ;eusart.c: 213: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 21059  144C  3040               	movlw	64
 21060  144D  026A               	subwf	_eusartRxHead,w	;volatile
 21061  144E  1C03               	skipc
 21062  144F  2C51               	goto	u486_21
 21063  1450  2C52               	goto	u486_20
 21064  1451                     u486_21:
 21065  1451  2C53               	goto	i1l5354
 21066  1452                     u486_20:
 21067  1452                     i1l5352:
 21068                           
 21069                           ;eusart.c: 214: {;eusart.c: 215: eusartRxHead = 0;
 21070  1452  01EA               	clrf	_eusartRxHead	;volatile
 21071  1453                     i1l5354:
 21072                           
 21073                           ;eusart.c: 216: };eusart.c: 217: eusartRxCount++;
 21074  1453  3001               	movlw	1
 21075  1454  00F0               	movwf	??_EUSART_Receive_ISR
 21076  1455  0870               	movf	??_EUSART_Receive_ISR,w
 21077  1456  07E8               	addwf	_eusartRxCount,f	;volatile
 21078  1457                     i1l853:
 21079  1457  0008               	return
 21080  1458                     __end_of_EUSART_Receive_ISR:
 21081  007E                     btemp	set	126	;btemp
 21082  007E                     int$flags	set	126
 21083  007E                     wtemp0	set	126
 21084                           
 21085                           	psect	config
 21086                           
 21087                           ;Config register CONFIG1 @ 0x8007
 21088                           ;	External Oscillator mode selection bits
 21089                           ;	FEXTOSC = OFF, Oscillator not enabled
 21090                           ;	Power-up default value for COSC bits
 21091                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
 21092                           ;	Clock Out Enable bit
 21093                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
 21094                           ;	Clock Switch Enable bit
 21095                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 21096                           ;	Fail-Safe Clock Monitor Enable bit
 21097                           ;	FCMEN = ON, FSCM timer enabled
 21098  8007                     	org	32775
 21099  8007  3FEC               	dw	16364
 21100                           
 21101                           ;Config register CONFIG2 @ 0x8008
 21102                           ;	Master Clear Enable bit
 21103                           ;	MCLRE = ON, MCLR pin is Master Clear function
 21104                           ;	Power-up Timer Enable bit
 21105                           ;	PWRTE = OFF, PWRT disabled
 21106                           ;	Low-Power BOR enable bit
 21107                           ;	LPBOREN = OFF, ULPBOR disabled
 21108                           ;	Brown-out reset enable bits
 21109                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
 21110                           ;	Brown-out Reset Voltage Selection
 21111                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
 21112                           ;	Zero-cross detect disable
 21113                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
 21114                           ;	Peripheral Pin Select one-way control
 21115                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
 21116                           ;	Stack Overflow/Underflow Reset Enable bit
 21117                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
 21118                           ;	Background Debugger
 21119                           ;	DEBUG = OFF, Background Debugger disabled
 21120  8008                     	org	32776
 21121  8008  3FFF               	dw	16383
 21122                           
 21123                           ;Config register CONFIG3 @ 0x8009
 21124                           ;	WDT Period Select bits
 21125                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 21126                           ;	WDT operating mode
 21127                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
 21128                           ;	WDT Window Select bits
 21129                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 21130                           ;	WDT input clock selector
 21131                           ;	WDTCCS = SC, Software Control
 21132  8009                     	org	32777
 21133  8009  3F9F               	dw	16287
 21134                           
 21135                           ;Config register CONFIG4 @ 0x800A
 21136                           ;	UserNVM self-write protection bits
 21137                           ;	WRT = OFF, Write protection off
 21138                           ;	Scanner Enable bit
 21139                           ;	SCANE = available, Scanner module is available for use
 21140                           ;	Low Voltage Programming Enable bit
 21141                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
 21142  800A                     	org	32778
 21143  800A  3FFF               	dw	16383
 21144                           
 21145                           ;Config register CONFIG5 @ 0x800B
 21146                           ;	UserNVM Program memory code protection bit
 21147                           ;	CP = OFF, Program Memory code protection disabled
 21148                           ;	DataNVM code protection bit
 21149                           ;	CPD = OFF, Data EEPROM code protection disabled
 21150  800B                     	org	32779
 21151  800B  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    49
    Data        11
    BSS         194
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     53      79
    BANK1            80     35      75
    BANK2            80      0      20
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    main$3496$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    main$3496	const PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    cmd_rc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_rtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_rp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_ra@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_ir@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    S1885$0$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    memset@p1	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    memset@p	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[7]), STR_3(CODE[7]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> update_menuLCD@l(BANK0[3]), update_menuLCD@tt(BANK0[4]), update_menuLCD@str(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_tri@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_trc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_aa@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_dtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_dac@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_mta@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_mmp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_sc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    sendMessage@buffer	PTR unsigned char  size(1) Largest target is 9
		 -> cmd_tri@buffEOM(BANK0[1]), cmd_tri@buffData(BANK0[5]), cmd_tri@buffInit(BANK0[4]), cmd_trc@buffEOM(BANK0[1]), 
		 -> cmd_trc@buffData(BANK0[5]), cmd_trc@buffInit(BANK0[3]), cmd_ir@buff(BANK0[7]), cmd_ra@buff(BANK0[9]), 
		 -> cmd_rp@buff(BANK0[5]), cmd_rtl@buff(BANK0[5]), cmd_rc@buff(BANK0[6]), sendERRORMessage@bufw(BANK0[4]), 
		 -> sendOKMessage@bufw(BANK0[4]), 

    differenceBetweenTimePeriod@diff	PTR struct Time size(1) Largest target is 3
		 -> update_menuLCD@diff(BANK0[3]), 

    LCDstr@p	PTR unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[4]), update_menuLCD@l(BANK0[3]), update_menuLCD@tt(BANK0[4]), update_menuLCD@str(BANK0[8]), 

    S1885command_d$cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    commands.cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    _main->_DATAEE_ReadByte
    _getch->_EUSART_Read
    _checkFlags->_wirteEEPROMinit
    _wirteEEPROMinit->_DATAEE_WriteByte
    _update_menuLCD->_differenceBetweenTimePeriod
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _LCDchar->_LCDsend2x4
    _LCDcmd->_LCDsend2x4
    _monitoring_TEMP_LUM->_DATAEE_WriteByte
    _tsttc->_WriteI2C
    _DATAEE_WriteByte->___wmul
    _cmd_tri->_DATAEE_ReadByte
    _cmd_tri->_sendERRORMessage
    _cmd_trc->_DATAEE_ReadByte
    _cmd_trc->_sendERRORMessage
    _DATAEE_ReadByte->___wmul
    _cmd_sc->_sendERRORMessage
    _cmd_sc->_sendOKMessage
    _cmd_mta->_sendERRORMessage
    _cmd_mta->_sendOKMessage
    _cmd_mmp->_sendERRORMessage
    _cmd_mmp->_sendOKMessage
    _cmd_dtl->_sendERRORMessage
    _cmd_dtl->_sendOKMessage
    _cmd_dac->_sendERRORMessage
    _cmd_dac->_sendOKMessage
    _cmd_aa->_sendERRORMessage
    _cmd_aa->_sendOKMessage
    _sendOKMessage->_sendMessage
    _sendERRORMessage->_sendMessage
    _sendMessage->_putch
    _putch->_EUSART_Write
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _LCDinit->_LCDsend2x4
    _LCDsend2x4->_WriteI2C
    _LCDsend->_WriteI2C

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _main->_editClock
    _main->_editLum
    _main->_editTemp
    _main->_toggleAlarms
    _toggleAlarms->_checkFlags
    _editTemp->_checkFlags
    _editLum->_checkFlags
    _editClock->_checkFlags
    _checkFlags->_update_menuLCD
    _wirteEEPROMinit->_DATAEE_WriteByte
    _update_menuLCD->_sprintf
    _sprintf->___lwmod
    _LCDstr->_LCDchar
    _monitoring_TEMP_LUM->_DATAEE_WriteByte
    _cmd_tri->_sendERRORMessage
    _cmd_trc->_sendERRORMessage
    _cmd_sc->_sendERRORMessage
    _cmd_sc->_sendOKMessage
    _cmd_mta->_sendERRORMessage
    _cmd_mta->_sendOKMessage
    _cmd_mmp->_sendERRORMessage
    _cmd_mmp->_sendOKMessage
    _cmd_dtl->_sendERRORMessage
    _cmd_dtl->_sendOKMessage
    _cmd_dac->_sendERRORMessage
    _cmd_dac->_sendOKMessage
    _cmd_aa->_sendERRORMessage
    _cmd_aa->_sendOKMessage
    _sendOKMessage->_sendMessage
    _sendERRORMessage->_sendMessage

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  236307
                                              0 BANK1     35    35      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                 _EUSART_is_rx_ready
            _INT_SetInterruptHandler
                            _LCDinit
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                  _SYSTEM_Initialize
           _TMR1_SetInterruptHandler
                     _TMR2_StopTimer
                             ___wmul
                         _checkFlags
                             _cmd_aa *
                            _cmd_dac *
                            _cmd_dtl *
                             _cmd_ir *
                            _cmd_mmp *
                            _cmd_mta *
                             _cmd_ra *
                             _cmd_rc *
                             _cmd_rp *
                            _cmd_rtl *
                             _cmd_sc *
                            _cmd_trc *
                            _cmd_tri *
                          _editClock
                            _editLum
                           _editTemp
                              _getch
                   _i2c1_driver_open
                             _memset
                       _toggleAlarms
 ---------------------------------------------------------------------------------
 (1) _toggleAlarms                                         1     1      0   33271
                                             52 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     651
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getch                                                0     0      0      24
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _editTemp                                             1     1      0   33271
                                             52 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editLum                                              1     1      0   33271
                                             52 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editClock                                            1     1      0   33271
                                             52 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (2) _checkFlags                                           1     1      0   23639
                                             51 BANK0      1     1      0
                 _PWM6_LoadDutyValue
               _PWM_Output_D4_Enable
                           _S1button
                    _TMR2_StartTimer
                _monitoring_TEMP_LUM
                     _update_menuLCD
                    _wirteEEPROMinit
 ---------------------------------------------------------------------------------
 (3) _wirteEEPROMinit                                      1     1      0    5887
                                              9 COMMON     1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _update_menuLCD                                      24    24      0    9632
                                             27 BANK0     24    24      0
                            _LCDchar
                             _LCDcmd
                             _LCDstr
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                     _TMR2_StopTimer
        _differenceBetweenTimePeriod
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             29    21      8    4638
                                              6 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     412
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _differenceBetweenTimePeriod                          8     1      7     595
                                              2 COMMON     8     1      7
 ---------------------------------------------------------------------------------
 (3) _TMR2_StopTimer                                       0     0      0       0
                          _TMR2_Stop
 ---------------------------------------------------------------------------------
 (4) _TMR2_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Disable                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_LoadDutyValue                                   4     2      2     348
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _LCDstr                                               6     4      2    1467
                                              1 BANK0      6     4      2
                            _LCDchar
 ---------------------------------------------------------------------------------
 (4) _LCDchar                                              1     1      0    1042
                                              0 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               1     1      0    1042
                                              0 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _monitoring_TEMP_LUM                                  3     3      0    7772
                                              3 BANK0      3     3      0
           _ADCC_GetSingleConversion
                   _DATAEE_WriteByte
                             ___wmul
                              _tsttc
 ---------------------------------------------------------------------------------
 (4) _tsttc                                                2     2      0      99
                                              4 COMMON     2     2      0
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (5) _ReadI2C                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _DATAEE_WriteByte                                     4     1      3    5887
                                              8 COMMON     1     1      0
                                              0 BANK0      3     0      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADCC_GetSingleConversion                             4     1      3      22
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (4) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _S1button                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Enable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cmd_tri                                             25    22      3    9543
                                              7 BANK0     25    22      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_trc                                             27    24      3    9085
                                              7 BANK0     27    24      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1764
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2    1336
                                              8 COMMON     2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _cmd_sc                                               7     4      3    5803
                                              7 BANK0      7     4      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rtl                                              9     6      3    2748
                                              7 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rp                                               9     6      3    2748
                                              7 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rc                                              10     7      3    2785
                                              7 BANK0     10     7      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ra                                              13    10      3    2896
                                              7 BANK0     13    10      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mta                                              3     0      3    5546
                                              7 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mmp                                              3     0      3    5546
                                              7 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ir                                              11     8      3    2822
                                              7 BANK0     11     8      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dtl                                              5     2      3    5707
                                              7 BANK0      5     2      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dac                                              7     4      3    5803
                                              7 BANK0      7     4      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_aa                                               4     1      3    5608
                                              7 BANK0      4     1      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (2) _sendOKMessage                                        6     6      0    2742
                                              9 COMMON     1     1      0
                                              2 BANK0      5     5      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (2) _sendERRORMessage                                     6     6      0    2742
                                              9 COMMON     1     1      0
                                              2 BANK0      5     5      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (2) _sendMessage                                          6     3      3    2563
                                              5 COMMON     4     1      3
                                              0 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     544
                    _ADCC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM6_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     174
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     196
                                              4 COMMON     1     1      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0    1073
                                              0 BANK0      1     1      0
                            _LCDsend
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (5) _LCDsend2x4                                           6     5      1    1011
                                              4 COMMON     6     5      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _LCDsend                                              2     2      0      62
                                              4 COMMON     2     2      0
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (6) _WriteI2C                                             2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     240
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                            _INT_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     240
                   Absolute function *
                          _Clock_ISR *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Clock_ISR                                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (10) _INT_CallBack                                        0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
                             _S1_ISR *
 ---------------------------------------------------------------------------------
 (11) _S1_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
     ___wmul (ARG)
   _DATAEE_WriteByte
     ___wmul (ARG)
   _EUSART_is_rx_ready
   _INT_SetInterruptHandler
   _LCDinit
     _LCDsend
       _WriteI2C
     _LCDsend2x4
       _WriteI2C
   _PWM6_LoadDutyValue
   _PWM_Output_D4_Disable
   _SYSTEM_Initialize
     _ADCC_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM6_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
   _TMR1_SetInterruptHandler
   _TMR2_StopTimer
     _TMR2_Stop
   ___wmul
   _checkFlags
     _PWM6_LoadDutyValue
     _PWM_Output_D4_Enable
     _S1button
     _TMR2_StartTimer
       _TMR2_Start
     _monitoring_TEMP_LUM
       _ADCC_GetSingleConversion
       _DATAEE_WriteByte
         ___wmul (ARG)
       ___wmul
       _tsttc
         _ReadI2C
         _WriteI2C
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _wirteEEPROMinit
       _DATAEE_WriteByte
         ___wmul (ARG)
   _cmd_aa *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dac *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dtl *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ir *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_mmp *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_mta *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ra *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rc *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rp *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rtl *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_sc *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_trc *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _cmd_tri *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _editClock *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editLum *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editTemp *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _getch *
     _EUSART_Read
   _i2c1_driver_open *
   _memset *
   _toggleAlarms *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
       _S1_ISR *
   _TMR1_ISR *
     Absolute function(Fake) *
     _Clock_ISR *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     35      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     23      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      14       9       25.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     13A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Sun Dec 13 12:10:32 2020

               ?_EUSART_SetRxInterruptHandler 0072                                             _t 0059  
                                          l30 08DE                                            l22 1365  
                                          l23 1366                                            l33 08B0  
                                          l42 08CE                                            l26 136B  
                                          l35 08B5                                            l47 08DD  
                                          _nr 0060                           ___wmul@multiplicand 0074  
                 __size_of_PWM6_LoadDutyValue 0016                             sendMessage@buffer 0077  
                              _update_menuLCD 037A                                           l128 0893  
                                         l253 1280                                           l182 13BD  
                                         l185 125F                                           l409 13DB  
                                         l188 123D                                           l540 12CA  
                                         l620 12F2                                           l525 1320  
                                         l439 1223                                           l617 12A7  
                                         l537 12C1                                           l730 14D9  
                                         l811 07FF                                           l731 14DF  
                                         l734 1274                                           l662 11F9  
                                         l647 080D                                           l760 129A  
                                         l832 157D                                           l656 11F3  
                                         l728 14D5                                           l817 11ED  
                                         l833 1586                                           l665 1201  
                                         l754 121D                                           l842 1229  
                                         l659 11FD                                           l827 1502  
                                         l836 15A1                                           l839 1205  
                                         l856 1217                                           l859 1211  
                                         _PR2 028D                               _timer1ReloadVal 00DC  
                     __size_of_PMD_Initialize 0008                               _TMR2_Initialize 0800  
                                         wreg 0009                                  ?_EUSART_Read 0070  
                                 ?_LCDsend2x4 0074                               __end_of_LCDchar 1269  
                                        l1030 0DA3                                          l1014 0D66  
                                        l1105 084B                                          l1041 0DD4  
                                        l1017 0D72                                          l1106 084C  
                                        l1210 0784                                          l1050 0DEA  
                                        l1042 0DD6                                          l1018 0D73  
                                        l1300 049D                                          l1109 0850  
                                        l1029 0DA2                                          l1222 07CC  
                                        l1054 0DF9                                          l1223 07CD  
                                        l1055 0DFA                                          l1047 0DE5  
                                        l1048 0DE6                                          l1232 1245  
                                        l1241 13A1                                          l1226 07D4  
                                        l1066 0E29                                          l1410 15D0  
                                        l1219 07BA                                          l1067 0E2A  
                                        l1235 1268                                          l1084 0E6C  
                                        l1260 11F6                                          l2220 12DC  
                                        l1093 081B                                          l1229 0AE3  
                                        l1085 0E6D                                          l1333 0F57  
                                        l1309 054B                                          l1325 0583  
                                        l1421 15A2                                          l1094 081C  
                                        l1078 0E5B                                          l1254 1667  
                                        l1079 0E5D                                          l2039 1781  
                                        l1407 1633                                          l1440 1386  
                                        l1088 0E72                                          l1424 15B6  
                                        l1257 11F0                                          l1361 0917  
                                        l1353 0FFF                                          l2049 16D1  
                                        l1418 1601                                          l2226 1417  
                                        l1195 0740                                          l1443 13F9  
                                        l1515 0C77                                          l1451 17C0  
                                        l1291 0497                                          l1196 0741  
                                        l1364 093B                                          l1276 0B91  
                                        l1428 15CF                                          l1437 14BC  
                                        l1446 154C                                          l1454 1478  
                                        l1462 1337                                          l1470 1745  
                                        l1294 0459                                          l1359 0933  
                                        l1375 099F                                          l5000 0878  
                                        l1480 169C                                          l1288 0421  
                                        l1457 1499                                          l1297 0483  
                                        l1385 09EB                                          l5010 0883  
                                        l5002 087A                                          l1490 1575  
                                        l1378 09A0                                          l1538 02B8  
                                        l1467 1351                                          l1475 17FF  
                                        l5100 07F4                                          l5020 088E  
                                        l5012 0885                                          l5004 087C  
                                        l1396 0A03                                          l5102 07F9  
                                        l5030 125B                                          l5022 0890  
                                        l5014 0887                                          l5006 087E  
                                        l1487 1709                                          l1399 1602  
                                        l6000 089D                                          l5040 131C  
                                        l5104 07FB                                          l5032 125E  
                                        l5016 088A                                          l5008 0880  
                                        l5024 1236                                          l4400 11F7  
                                        l1728 05A1                                          l6002 08A6  
                                        l5042 131E                                          l5106 07FC  
                                        l5026 1257                                          l5018 088C  
                                        l5034 129B                                          l5050 0807  
                                        l5130 126F                                          l1498 0D65  
                                        l1746 0654                                          l1763 0721  
                                        l6004 08AF                                          l6012 08BC  
                                        l5108 07FD                                          l5028 125A  
                                        l5036 12A2                                          l5060 13C3  
                                        l5052 0808                                          l5044 0800  
                                        l5132 1270                                          l5124 1269  
                                        l4500 12BE                                          l5300 127A  
                                        l6014 08C5                                          l6006 08BA  
                                        l6030 0750                                          l6022 0723  
                                        l5038 130A                                          l5070 13D1  
                                        l5062 13C5                                          l5054 080A  
                                        l5046 0803                                          l5134 1271  
                                        l5126 126C                                          l4502 12BF  
                                        l6110 14CE                                          l6102 14BD  
                                        l4510 12DD                                          l4430 12DB  
                                        l4422 12CC                                          l5150 14EF  
                                        l5302 127B                                          l1767 1422  
                                        l6016 08D2                                          l6040 0778  
                                        l6032 0754                                          l6024 0728  
                                        l5080 07D5                                          l5072 13D8  
                                        l5064 13C7                                          l5056 13BE  
                                        l5048 0804                                          l5136 1272  
                                        l5128 126E                                          l4440 1427  
                                        l4512 11F1                                          l4504 12C0  
                                        l6120 14DA                                          l6112 14CF  
                                        l6104 14C5                                          l4600 1635  
                                        l4424 12CD                                          l6200 05AF  
                                        l5160 14FF                                          l5152 14F3  
                                        l5144 14E0                                          l5304 127D  
                                        l7000 0099                                          l1769 1436  
                                        l5322 11EB                                          l6050 07A8  
                                        l6042 0784                                          l6034 0760  
                                        l6026 0734                                          l5090 07EC  
                                        l5082 07D7                                          l5074 128E  
                                        l5066 13CE                                          l5058 13C1  
                                        l6122 1225                                          l4442 142C  
                                        l4434 1418                                          l4506 12C6  
                                        l6114 14D0                                          l6106 14C9  
                                        l6130 0D86                                          l4514 11FE  
                                        l4610 1657                                          l4602 163B  
                                        l4450 1748                                          l4426 12D3  
                                        l6210 05E2                                          l6202 05BB  
                                        l5162 1501                                          l5154 14F9  
                                        l5146 14E0                                          l7010 00BA  
                                        l7002 00A2                                          l6052 07AE  
                                        l6044 078A                                          l6036 0766  
                                        l6028 0745                                          l5092 07EE  
                                        l5084 07DE                                          l5076 1291  
                                        l5068 13D0                                          l6060 1577  
                                        l4444 1432                                          l4436 141A  
                                        l6116 14D2                                          l6108 14CD  
                                        l6140 0DB6                                          l6132 0D92  
                                        l6124 0D66                                          l4612 11F4  
                                        l4604 1641                                          l4460 175E  
                                        l4452 174E                                          l4428 12D9  
                                        l6220 0611                                          l6204 05BE  
                                        l6300 039F                                          l5156 14FA  
                                        l5148 14E6                                          l7100 027C  
                                        l7012 00BB                                          l7004 00A5  
                                        l6054 07BA                                          l6046 0796  
                                        l6038 0772                                          l5094 07F0  
                                        l5086 07E7                                          l5078 1298  
                                        l6070 1595                                          l6062 1577  
                                        l4438 141E                                          l6118 14D4  
                                        l6150 0DFE                                          l6142 0DC2  
                                        l6134 0D96                                          l6126 0D77  
                                        l4606 164B                                          l4462 176D  
                                        l4454 1751                                          l4470 177D  
                                        l6222 0615                                          l6206 05CF  
                                        l6214 05EE                                          l6310 03D7  
                                        l6302 03BC                                          l5158 14FC  
                                        l5326 1202                                          l7110 029C  
                                        l7102 0282                                          l7030 0103  
                                        l7022 00CD                                          l7014 00C7  
                                        l7006 00B6                                          l6056 07C0  
                                        l6048 079C                                          l5096 07F1  
                                        l5088 07EA                                          l5280 13A2  
                                        l6072 159B                                          l6064 1582  
                                        l4392 1352                                          l6160 0E2E  
                                        l6152 0E09                                          l6144 0DC8  
                                        l6136 0DA7                                          l6128 0D82  
                                        l4608 1651                                          l4464 1771  
                                        l4456 1756                                          l4448 1746  
                                        l6080 169D                                          l6240 064A  
                                        l6232 0620                                          l6224 0619  
                                        l6216 0606                                          l6208 05DE  
                                        l6400 0533                                          l6320 03FB  
                                        l6312 03DD                                          l6304 03C0  
                                        l7112 02A3                                          l7104 028D  
                                        l7120 02B8                                          l7040 01C6  
                                        l7024 00E5                                          l7016 00C9  
                                        l7032 0105                                          l7008 00B8  
                             __end_of_LCDinit 0AE4                                          l6058 07D1  
                                        l4730 120C                                          l5098 07F3  
                                        l5290 13B1                                          l5282 13A5  
                                        l6074 159C                                          l6066 1587  
                                        l4394 135C                                          l6170 0E61  
                                        l6162 0E39                                          l6154 0E0D  
                                        l6146 0DDA                                          l6138 0DB2  
                                        l4466 1772                                          l4458 175A  
                                        l6090 16B4                                          l6082 16A4  
                                        l6250 066F                                          l6242 0650  
                                        l6226 061E                                          l6218 060D  
                                        l6410 0553                                          l6402 053A  
                                        l6330 042A                                          l6322 0403  
                                        l6314 03E5                                          l6306 03C8  
                                        l7130 02CE                                          l7122 02C0  
                                        l7114 02AE                                          l7106 0290  
                                        l7050 0202                                          l7042 01D2  
                                        l7034 010B                                          l7026 00E9  
                                        l4732 1212                                          l4724 121E  
                                        l5292 13B4                                          l5284 13A8  
                                        l6068 1591                                          l6076 159F  
                                        l6500 149A                                          l4396 136A  
                                        l6172 0E71                                          l6164 0E3D  
                                        l6156 0E19                                          l6148 0DEE  
                                        l6180 1388                                          l4468 1777  
                                        l6092 16BE                                          l6084 16A7  
                                        l6260 068D                                          l6252 0675  
                                        l6244 065F                                          l6236 063A  
                                        l6420 056E                                          l6412 0558  
                                        l6404 053F                                          l6340 0447  
                                        l6332 0431                                          l6324 0409  
                                        l6316 03EB                                          l6308 03CE  
                                        l7140 032C                                          l7132 02E8  
                                        l7124 02CC                                          l7108 0298  
                                        l7116 02B1                                          l7060 023C  
                                        l7052 020D                                          l7044 01DE  
                                        l7036 0110                                          l7028 00F6  
                                        l6510 080F                                          l5294 13B7  
                                        l5286 13AB                                          l6502 149E  
                                        l4734 11EE                                          l4726 11FA  
                                        l6166 0E49                                          l6158 0E1D  
                                        l6430 0E8C                                          l6078 1262  
                                        l6182 138C                                          l6094 16C2  
                                        l6086 16AC                                          l6270 06AD  
                                        l6262 0691                                          l6254 067C  
                                        l6246 0668                                          l6238 0644  
                                        l6190 0598                                          l6422 0573  
                                        l6414 055D                                          l6406 0546  
                                        l6350 048A                                          l6342 0464  
                                        l6334 0436                                          l6326 0412  
                                        l6318 03F4                                          l7150 0340  
                                        l7142 032C                                          l7134 0300  
                                        l7070 024B                                          l7062 0247  
                                        l7054 0218                                          l7046 01EA  
                                        l7038 01BB                                          l6520 083F  
                                        l6512 0820                                          l4728 1218  
                                        l5296 13BA                                          l5288 13AE  
                                        l6504 14A9                                          l4496 12BA  
                                        l6168 0E4F                                          l6440 0F53  
                                        l6432 0E9D                                          l6176 1240  
                                        l6096 16C7                                          l6088 16B0  
                                        l6280 06CD                                          l6272 06B7  
                                        l6256 0680                                          l6264 069C  
                                        l6248 066B                                          l6192 059D  
                                        l6184 0586                                          l6424 0578  
                                        l6416 0562                                          l6408 054C  
                                        l6352 0490                                          l6344 0479  
                                        l6336 043C                                          l6328 0419  
                                        l7160 035A                                          l7152 0344  
                                        l7136 0314                                          l7144 032F  
                                        l7080 0255                                          l7072 024D  
                                        l7064 0248                                          l7056 0224  
                                        l7048 01F6                                          l6514 082B  
                                        l6506 14AE                                          l4498 12BD  
                                        l6450 0F79                                          l6442 0F5B  
                                        l6434 0EAE                                          l6178 1387  
                                        l6098 16CD                                          l6282 06F5  
                                        l6274 06BD                                          l6266 06A2  
                                        l6258 0686                                          l6290 071D  
                                        l6194 05A2                                          l6186 058B  
                                        l6426 057F                                          l6418 0569  
                                        l6370 04B9                                          l6354 0493  
                                        l6346 0480                                          l6338 0441  
                                        l6530 094C                                          l6522 093C  
                                        l5298 1275                                          l7162 0361  
                                        l7154 034B                                          l7146 0336  
                                        l7138 0321                                          l7090 0266  
                                        l7082 0256                                          l7074 0250  
                                        l7066 0249                                          l7058 0230  
                                        l6516 082F                                          l6508 080F  
                                        l6460 0FA5                                          l6452 0F7F  
                                        l6444 0F6F                                          l6436 0F3E  
                                        l6428 0E73                                          l6284 06FC  
                                        l6276 06C4                                          l6268 06A9  
                                        l6188 0591                                          l6380 04EC  
                                        l6372 04C8                                          l6348 0488  
                                        l6364 049D                                          l6540 095B  
                                        l6532 094F                                          l6524 0942  
                                        l6700 09DE                                          l7164 0365  
                                        l7156 034F                                          l7148 033A  
                                        l7092 0268                                          l7084 0259  
                                        l7076 0252                                          l7068 024A  
                                        l6518 083B                                          l4950 08F6  
                                        l4942 08DF                                          l6470 0FCA  
                                        l6454 0F84                                          l6446 0F72  
                                        l6438 0F45                                          l6462 0FB0  
                                        l4598 1634                                          l6286 0700  
                                        l6278 06C8                                          l6198 05A6  
                                        l6390 0516                                          l6382 04FB  
                                        l6374 04D0                                          l6366 04A1  
                                        l6294 0AE4                                          l6550 096A  
                                        l6542 095E                                          l6534 0951  
                                        l6526 0945                                          l6702 09E4  
                                        l6710 09F7                                          l7166 0374  
                                        l7158 0356                                          l7094 0269  
                                        l7086 025A                                          l7078 0253  
                                        l6800 1329                                          l4960 0925  
                                        l4952 08FB                                          l4944 08E6  
                                        l6480 0FD9                                          l6472 0FD0  
                                        l6464 0FB7                                          l6456 0F98  
                                        l6448 0F73                                          l6288 0709  
                                        l6392 051D                                          l6384 0503  
                                        l6376 04D4                                          l6368 04A7  
                                        l6296 037A                                          l6560 0991  
                                        l6552 0970                                          l6544 0960  
                                        l6536 0954                                          l6528 0947  
                                        l6712 09FA                                          l6704 09E6  
                                        l6720 160F                                          l7096 0270  
                                        l7088 025B                                          l6650 0A87  
                                        l6570 1377                                          l6802 132E  
                                        l6810 1348                                          l4962 0928  
                                        l4946 08EB                                          l4954 08FE  
                                        l6490 0FF4                                          l6482 0FDB  
                                        l6474 0FD2                                          l6466 0FBF  
                                        l6458 0F9A                                          l6394 0523  
                                        l6386 050A                                          l6378 04DA  
                                        l6298 0381                                          l6562 0994  
                                        l6554 0975                                          l6546 0965  
                                        l6538 0956                                          l6714 0A01  
                                        l6706 09EB                                          l6722 1614  
                                        l6730 1627                                          l7098 0276  
                                        l6660 0AA7                                          l6652 0A8B  
                                        l6644 0A72                                          l4980 0859  
                                        l6572 137B                                          l6804 1333  
                                        l6812 134D                                          l6820 173A  
                                        l6900 0CDE                                          l4964 092F  
                                        l4956 0905                                          l4948 08F1  
                                        l6492 0FF6                                          l6484 0FE2  
                                        l6476 0FD4                                          l6468 0FC4  
                                        l6396 0528                                          l6388 050E  
                                        l6564 099B                                          l6556 097B  
                                        l6548 0968                                          l6708 09F4  
                                        l6740 15DD                                          l6732 162A  
                                        l6724 161A                                          l6716 1607  
                                        l5780 140B                                          l6670 0ACB  
                                        l6662 0AAF                                          l6654 0A97  
                                        l6646 0A7B                                          l4990 0864  
                                        l4982 085B                                          l6574 13DE  
                                        l6566 136E                                          l6806 1338  
                                        l6814 170A                                          l6830 17E3  
                                        l6822 17C1                                          l6910 0D0D  
                                        l4958 0912                                          l6494 0FF8  
                                        l6486 0FE8                                          l6478 0FD7  
                                        l6398 052E                                          l6558 098B  
                                        l6742 15E2                                          l6750 15F5  
                                        l6734 1632                                          l6726 161B  
                                        l6718 160C                                          l5774 13FB  
                                        l6672 0AD0                                          l6664 0AB3  
                                        l6656 0A9B                                          l6648 0A7F  
                                        l4992 0866                                          l4984 085D  
                                        l4976 0851                                          l6576 13EE  
                                        l6568 1376                                          l6808 1343  
                                        l6816 172B                                          l6832 17EA  
                                        l6824 17D1                                          l6840 1673  
                                        l6920 0D3B                                          l6912 0D11  
                                        l6488 0FEE                                          l6496 0FFB  
                                        l6680 09AB                                          l6752 15F8  
                                        l6744 15E8                                          l6736 15D5  
                                        l6728 1624                                          l5776 1400  
                                        l6760 15B2                                          l6674 0AD5  
                                        l6666 0ABF                                          l6658 0AA3  
                                        l4994 0868                                          l4986 085F  
                                        l4978 0857                                          l6770 1528  
                                        l6818 1736                                          l6834 17F6  
                                        l6826 17D7                                          l6842 1679  
                                        l6850 1698                                          l6922 0D3D  
                                        l6914 0D17                                          l6906 0CE0  
                                        l6930 0D61                                          l6498 0FFD  
                                        l6690 09C3                                          l6682 09B0  
                                        l6754 1600                                          l6746 15E9  
                                        l6738 15DA                                          l5778 1407  
                                        l6762 15BF                                          l6676 0ADA  
                                        l6668 0AC3                                          l4996 086A  
                                        l4988 0861                                          l6940 0BAF  
                                        l6932 0B92                                          l6772 1541  
                                        l6780 179E                                          l6828 17DD  
                                        l6836 17FB                                          l6844 167F  
                                        l6860 16EC                                          l6852 16D2  
                                        l6916 0D22                                          l6908 0CFE  
                                        l6924 0D42                                          l6692 09CA  
                                        l6684 09B6                                          l6748 15F2  
                                        l6756 15A7                                          l6764 15C2  
                                        l4998 0876                                          l6950 0BC4  
                                        l6942 0BB5                                          l6934 0B9A  
                                        l6782 17A4                                          l6774 1782  
                                        l6790 1458                                          l6846 1686  
                                        l6838 1668                                          l6862 16F5  
                                        l6854 16DC                                          l6870 154D  
                                        l6926 0D50                                          l6918 0D27  
                                        l6694 09D0                                          l6686 09BC  
                                        l6678 09A5                                          l6766 15C5  
                                        l6758 15AD                                          l5992 0895  
                                        l6960 0BE5                                          l6952 0BCA  
                                        l6944 0BBB                                          l6936 0BA4  
                                        l6784 17AB                                          l6776 1792  
                                        l6792 146D                                          l6848 1693  
                                        l6864 16FC                                          l6856 16E3  
                                        l6872 156A                                          l6928 0D55  
                                        l6880 0C91                                          l6696 09D2  
                                        l6688 09BE                                          l6768 15CD  
                                        _ALAF 0067                                          l5994 0898  
                                        l6970 0BFA                                          l6962 0BF0  
                                        l6954 0BD0                                          l6946 0BBF  
                                        l6938 0BA9                                          l6786 17B7  
                                        l6778 1798                                          l6794 1479  
                                        l6866 1700                                          l6858 16E7  
                                        l6882 0C95                                          l6874 0C78  
                                        l6698 09D7                                          l6980 0C43  
                                        l6972 0C20                                          l6964 0BF9  
                                        l6788 17BC                                          l6796 148E  
                                        l6868 1705                                          l6892 0CC2  
                                        l6884 0CA3                                          l6876 0C80  
                                        l6990 0C63                                          l6982 0C47  
                                        l6974 0C24                                          l6958 0BD5  
                                        l6798 1321                                          l6894 0CCF  
                                        l6886 0CAE                                          l6878 0C8B  
                             __end_of_LCDsend 0851                                          l6992 0C67  
                                        l6984 0C4B                                          l6976 0C2A  
                                        l6896 0CDA                                          l6888 0CBD  
                                        l6986 0C5A                                          l6978 0C35  
                                        l6994 0C73                                          l6898 0CDA  
                                        l6988 0C5D                                          STR_1 1827  
                                        STR_2 1827                                          STR_3 1840  
                                        STR_4 1840                                          STR_5 1847  
                                        STR_6 1847                                          STR_7 184C  
                                        _LATA 0016                                          _LATB 0017  
                             __end_of_INT_ISR 120C                                          _LATC 0018  
                                        _LATD 0019                                          _LATE 001A  
                                        u3410 175E                                          u3330 12D3  
                                        _T2PR 028D                                          u3411 175D  
                                        u3331 12D2                                          u3340 12D9  
                                        u3405 1752                                          u3341 12D8  
                                        u3350 141E                                          u3270 135C  
                                        u3430 176D                                          u3351 141D  
                                        u3271 135B                                          u3431 176C  
                                        u3520 12C6                                          u3280 1365  
                                        u3521 12C5                                          u3281 1364  
                                        u3425 175F                                          u3290 136A  
                                        u3450 177D                                          u3291 1369  
                                        u3451 177C                                          u3435 1769  
                                        u6100 08D2                                          u3380 1432  
                                        u4500 0925                                          u6101 08D1  
                                        u3381 1431                                          u3365 1423  
                                        u4501 0924                                          u3445 1773  
                                        u6110 08DD                                          u6030 089C  
                                        u4510 092F                                          u3390 174E  
                                        u6111 08DC                                          u6031 089B  
                                        u3375 1428                                          u4511 092E  
                                        u3535 12EC                                          u3391 174D  
                                        u6040 08A6                                          u6200 07A8  
                                        u4440 08E6                                          u7000 0546  
                                        u6041 08A5                                          u6201 07A7  
                                        u4505 0921                                          u4441 08E5  
                                        u7001 0545                                          u6050 08AF  
                                        u6210 07BA                                          u6130 0740  
                                        u4450 08EB                                          u3810 1641  
                                        u7010 0553                                          u6051 08AE  
                                        u6211 07B9                                          u6131 073F  
                                        u4451 08EA                                          u3811 1640  
                                        u7011 0552                                          u6060 08B5  
                                        u6220 07CC                                          u6140 0745  
                                        u4460 08F1                                          u7100 0F53  
                                        u3820 1657                                          u6300 16BE  
                                        u7020 0558                                          _PMD0 0796  
                                        u6061 08B4                                          u6221 07CB  
                                        u6141 0744                                          u6125 072B  
                                        u4461 08F0                                          u7101 0F52  
                                        u3821 1656                                          u6301 16BD  
                                        u7021 0557                                          _PMD1 0797  
                                        u6070 08BA                                          u6230 07D1  
                                        u6150 0750                                          u4470 08F6  
                                        u7110 0F6F                                          u7030 0569  
                                        u4550 14E6                                          _PMD2 0798  
                                        u6071 08B9                                          u6231 07D0  
                                        u6151 074F                                          u4471 08F5  
                                        u7111 0F6E                                          u7031 0568  
                                        u4551 14E5                                          _PMD3 0799  
                                        u6080 08C5                                          u6160 0760  
                                        u6240 157D                                          u8000 16FC  
                                        u4480 0905                                          u6400 0DB2  
                                        u7200 0FEE                                          u7120 0F79  
                                        u6320 16CD                                          u7040 056E  
                                        u4560 14F9                                          _PMD4 079A  
                                        u6081 08C4                                          u6161 075F  
                                        u6241 157C                                          u8001 16FB  
                                        u4481 0904                                          u6401 0DB1  
                                        u7201 0FED                                          u7121 0F78  
                                        u6321 16CC                                          u6305 16BA  
                                        u7041 056D                                          u4561 14F8  
                                        _PMD5 079B                                          u6090 08CE  
                                        u6170 0772                                          u6250 1582  
                                        u7210 14BC                                          u8010 0C80  
                                        u4490 0912                                          u6330 14D9  
                                        u6410 0DC2                                          u7130 0F98  
                                        u7050 057F                                          u4810 127A  
                                        u6091 08CD                                          u6171 0771  
                                        u6251 1581                                          u7211 14BB  
                                        u8011 0C7F                                          u4491 0911  
                                        u6331 14D8                                          u6411 0DC1  
                                        u7131 0F97                                          u7115 0F6B  
                                        u6315 16C3                                          u7051 057E  
                                        u4811 1279                                          u7220 081B  
                                        u6180 0784                                          u6260 159B  
                                        u8100 0BBB                                          u8020 0C95  
                                        u6500 0E19                                          u6420 0DD4  
                                        u6340 0D72                                          u7140 0FB7  
                                        u7300 095B                                          u7221 081A  
                                        u6181 0783                                          u6261 159A  
                                        u8101 0BBA                                          u8021 0C94  
                                        u6501 0E18                                          u6421 0DD3  
                                        u6341 0D71                                          u7141 0FB6  
                                        u7301 095A                                          u7230 0820  
                                        u6190 0796                                          u8110 0BCA  
                                        u8030 0CAE                                          u6510 0E29  
                                        u6430 0DDA                                          u6350 0D77  
                                        u7150 0FBF                                          u7070 0E9D  
                                        u6270 16A4                                          u7310 0965  
                                        u7231 081F                                          u6191 0795  
                                        u7215 14B8                                          u8111 0BC9  
                                        u8031 0CAD                                          u4495 090E  
                                        u6511 0E28                                          u6431 0DD9  
                                        u6351 0D76                                          u7151 0FBE  
                                        u7135 0F94                                          u7071 0E9C  
                                        u6271 16A3                                          u7311 0964  
                                        u7240 082B                                          u8120 0BD0  
                                        u8040 0CBD                                          u6520 0E2E  
                                        u6440 0DE5                                          u6360 0D82  
                                        u7160 0FC4                                          u7080 0EAE  
                                        u6600 0591                                          u7320 0970  
                                        u8200 010B                                          u7241 082A  
                                        u8121 0BCF                                          u8041 0CBC  
                                        u6521 0E2D                                          u6441 0DE4  
                                        u6361 0D81                                          u7161 0FC3  
                                        u7081 0EAD                                          u7065 0E84  
                                        u6601 0590                                          u7321 096F  
                                        u8201 010A                                          u7250 083B  
                                        u8130 0C2A                                          u8050 0D17  
                                        u6530 0E39                                          u6450 0DEA  
                                        u6370 0D92                                          u7170 0FCA  
                                        u7090 0F45                                          u6290 16B4  
                                        u6610 05BB                                          u7330 0975  
                                        u8210 0110                                          u7251 083A  
                                        u8131 0C29                                          u8051 0D16  
                                        u8035 0CAA                                          u6531 0E38  
                                        u6451 0DE9                                          u6371 0D91  
                                        u7171 0FC9                                          u7091 0F44  
                                        u7075 0E99                                          u6291 16B3  
                                        u6611 05BA                                          u7331 0974  
                                        u8211 010F                                          u7260 084B  
                                        u8140 0C43                                          u8060 0D3B  
                                        u6540 0E49                                          u6460 0DEE  
                                        u6380 0DA2                                          u7180 0FE2  
                                        u6700 0675                                          u6620 05EE  
                                        u7340 098B                                          u8300 02E8  
                                        u8220 0263                                          u7261 084A  
                                        u8141 0C42                                          u8061 0D3A  
                                        u8045 0CB9                                          u6541 0E48  
                                        u6461 0DED                                          u6381 0DA1  
                                        u7181 0FE1                                          u7085 0EAA  
                                        u6285 16A8                                          u6701 0674  
                                        u6621 05ED                                          u7341 098A  
                                        u8301 02E7                                          _TALA 006D  
                                        u7270 0850                                          u8150 0C5A  
                                        u8070 0D50                                          u6550 0E5B  
                                        u6470 0DF9                                          u6390 0DA7  
                                        u7190 0FE8                                          u6710 0686  
                                        u6630 0615                                          u8310 0321  
                                        u8230 0276                                          u7271 084F  
                                        u8151 0C59                                          u8071 0D4F  
                                        u6551 0E5A                                          u6471 0DF8  
                                        u6391 0DA6                                          u7191 0FE7  
                                        u6711 0685                                          u6631 0614  
                                        u8311 0320                                          u8231 0275  
                                        u8160 0C63                                          u8080 0B9A  
                                        u6560 0E61                                          u6480 0DFE  
                                        u6720 069B                                          u6640 0639  
                                        u6800 03DD                                          u7280 0942  
                                        u8320 0336                                          u8240 027C  
                                        u8161 0C62                                          u8145 0C3F  
                                        u8081 0B99                                          u8065 0D37  
                                        u6561 0E60                                          u6481 0DFD  
                                        u6721 069A                                          u6641 0638  
                                        u6801 03DC                                          u7345 0987  
                                        u7281 0941                                          u8321 0335  
                                        u8241 027B                                          u8090 0BAF  
                                        u6570 0E6C                                          u6490 0E09  
                                        u6730 06A2                                          u6650 0644  
                                        u6810 03EB                                          u7290 094C  
                                        u5690 1417                                          u8330 0340  
                                        u8250 0282                                          u8170 00C7  
                                        u8155 0C56                                          u8091 0BAE  
                                        u8075 0D4C                                          u6571 0E6B  
                                        u6491 0E08                                          u6731 06A1  
                                        u6651 0643                                          u6811 03EA  
                                        u7291 094B                                          u5691 1416  
                                        u8331 033F                                          u8251 0281  
                                        u8171 00C6                                          u6580 0E71  
                                        u6740 06B7                                          u6660 064A  
                                        u6900 0480                                          u6820 03FB  
                                        u7700 0A01                                          u7620 09A5  
                                        u8340 034B                                          u8260 02A3  
                                        u8180 00F6                                          u6581 0E70  
                                        u6741 06B6                                          u6661 0649  
                                        u6645 0635                                          u6901 047F  
                                        u6821 03FA                                          u7701 0A00  
                                        u7621 09A4                                          u8341 034A  
                                        u8261 02A2                                          u8181 00F5  
                                        u6590 13A1                                          u6750 06BD  
                                        u6670 0650                                          u6910 0488  
                                        u6830 0409                                          u7630 09AB  
                                        u7710 1607                                          u8350 0356  
                                        u8270 02B7                                          u8190 0103  
                                        u6591 13A0                                          u6751 06BC  
                                        u6671 064F                                          u6911 0487  
                                        u6831 0408                                          u7631 09AA  
                                        u8407 15ED                                          u7711 1606  
                                        u8351 0355                                          u8271 02B6  
                                        u8191 0102                                          u6760 0709  
                                        u6680 065F                                          u6920 049C  
                                        u6840 0419                                          u7640 09B6  
                                        u7720 160C                                          u7800 15AD  
                                        u8360 0361                                          u8280 02C0  
                                        u6761 0708                                          u6681 065E  
                                        u6921 049B                                          u6841 0418  
                                        u8417 09EF                                          u7641 09B5  
                                        u7721 160B                                          u7801 15AC  
                                        u8361 0360                                          u8281 02BF  
                                        u8185 00F2                                          _NREG 007B  
                                        u6770 071D                                          u6690 066F  
                                        u6930 04A7                                          u6850 0431  
                                        u7650 09BC                                          u7730 161A  
                                        u7810 15CD                                          u8370 0374  
                                        u8290 02CC                                          u8507 0AB4  
                                        u6771 071C                                          u6691 066E  
                                        u6931 04A6                                          u6851 0430  
                                        u8427 099C                                          u7651 09BB  
                                        u7731 1619                                          u7811 15CC  
                                        u8371 0373                                          u8291 02CB  
                                        u7820 1798                                          u7900 17D7  
                                        u6940 04DA                                          u6860 0436  
                                        u6780 0381                                          u7660 09CA  
                                        u7740 1632                                          u8517 0AC0  
                                        u7821 1797                                          u7901 17D6  
                                        u8437 0936                                          u6685 065B  
                                        u6941 04D9                                          u6861 0435  
                                        u6781 0380                                          u7661 09C9  
                                        u7741 1631                                          u7830 179E  
                                        u7910 17DD                                          u6950 050A  
                                        u6870 043C                                          u6790 03CE  
                                        u7670 09D0                                          u7750 15D5  
                                        u8527 0AC8                                          u8447 0A76  
                                        u7831 179D                                          u7911 17DC  
                                        u6951 0509                                          u6871 043B  
                                        u6791 03CD                                          u7671 09CF  
                                        u7751 15D4                                          u8375 0370  
                                        u7840 17A4                                          u7920 17E3  
                                        u6960 051D                                          u6880 0441  
                                        u7680 09DE                                          u7760 15DA  
                                        u8537 0AE0                                          u8457 0A84  
                                        u7841 17A3                                          u7921 17E2  
                                        u6961 051C                                          u6881 0440  
                                        u7681 09DD                                          u7761 15D9  
                                        u7850 17AB                                          u7930 17EA  
                                        u6970 0523                                          u6890 0447  
                                        u7690 09E4                                          u7770 15E8  
                                        u8547 07D2                                          u8467 0A8C  
                                        u7851 17AA                                          u7931 17E9  
                                        u6971 0522                                          u6891 0446  
                                        u7691 09E3                                          u7771 15E7  
                                        u8387 15BA                                          u7860 1329  
                                        u7940 1679                                          u6980 052E  
                                        u7780 1600                                          u8477 0A98  
                                        u7861 1328                                          u7941 1678  
                                        u6981 052D                                          u7781 15FF  
                                        u8397 161F                                          u7870 1343  
                                        u7950 167F                                          u6990 053A  
                                        u7790 15A7                                          u8487 0AA0  
                                        u7871 1342                                          u7951 167E  
                                        u6991 0539                                          u7791 15A6  
                                        u7880 1732                                          u7960 1686  
                                        u8497 0AAC                                          u7881 1730  
                                        u7961 1685                                          u7890 1733  
                                        u7970 16DC                                          u7971 16DB  
                                        u7980 16E3                                          u7981 16E2  
                                        u7990 16F5                                          u7991 16F4  
                                        _PMON 006E                                          _TMR2 028C  
                                        _WPUA 0F39                                          _WPUB 0F44  
                                        _WPUC 0F4F                                          _WPUD 0F5A  
                                        _WPUE 0F65                                   main@notInit 00BA  
                                        _main 0099                                          _temp 0066  
                                        fsr0h 0005                                          fsr1h 0007  
                                        indf0 0000                                          fsr0l 0004  
                                        indf1 0001                                          fsr1l 0006  
                                        btemp 007E           __end_of_INT_DefaultInterruptHandler 11E9  
                 _INT_DefaultInterruptHandler 11E8                                          start 0052  
                              cmd_dtl@tempAux 002A               __end_of_INT_SetInterruptHandler 121E  
                  ??_TMR1_SetInterruptHandler 0074                               __end_of_ReadI2C 136C  
                   __size_of_DATAEE_WriteByte 0023                        __end_of_update_menuLCD 0584  
                               ?_EUSART_Write 0070                __size_of_OSCILLATOR_Initialize 0009  
               __end_of_OSCILLATOR_Initialize 1260                                         _ADACQ 009D  
                                       _ADCAP 009B                                         _ADACT 0099  
                    __end_of_i2c1_driver_open 1281                                         ?_main 0070  
                                       _ADCLK 0098                                         _ADCNT 010C  
                                       _ADPCH 009E                                         _ADREF 009A  
                                       _ADPRE 009C                                         _ADRPT 010D  
                                       _T1CLK 0211                                         _T1CON 020E  
                                       _T2CON 028E                                         _T2HLT 028F  
                             __end_of___lwdiv 1782                                         _T2TMR 028C  
                                       _T2RST 0291                                         i1l423 12B8  
                             __end_of___lwmod 16D2                                         i1l442 11E9  
                                       i1l371 0041                                         i1l436 1309  
                                       i1l372 0050                                         i1l364 0013  
                                       i1l373 004A                                         i1l367 0026  
                                       i1l369 0035                                         i1l378 0050  
                                       i1l751 128D                                         i1l747 120B  
                                       i1l853 1457                                         i1l845 1525  
                                       i1l757 11E8                                         i1l848 1527  
                                       _OSCEN 0891                                         _TMR1H 020D  
                    __size_of_wirteEEPROMinit 00AE                                         _TMR1L 020C  
                                       _TRISA 0011                                         _TRISB 0012  
                                       _TRISC 0013                                         _TRISD 0014  
                                       _TRISE 0015                                         _WPUC3 7A7B  
                                       _WPUC4 7A7C                                         _RXPPS 0ECB  
                             __end_of_cmd_dac 1800                               __end_of_editLum 1602  
                             __end_of_cmd_dtl 169D                               _PWM6_Initialize 129B  
                             __end_of_cmd_mta 1352                               __end_of_cmd_mmp 1338  
                             __end_of_cmd_trc 0D66                               __end_of_cmd_rtl 1479  
                             __end_of_cmd_tri 0C78                              __end_of_TMR1_ISR 130A  
                            __end_of_S1button 093C                               _DATAEE_ReadByte 1269  
                                       _getch 1202                               __end_of_dpowers 1840  
                          __size_of_TMR2_Stop 0003                                   ?_TMR2_Start 0070  
                                       _iread 0061                               __end_of_isdigit 12DD  
                                       _putch 1224                                         main@c 00BE  
                                       main@i 00BC                                         main@n 00C1  
                                       _tsttc 0D66                       __end_of_TMR1_Initialize 13DC  
                                       pclath 000A                                         status 0003  
                                       wtemp0 007E                               __end_of_sprintf 0722  
                      ??_PWM_Output_D4_Enable 0072                               _TMR2_StartTimer 11FA  
                             _TMR1_WriteTimer 12A8                               __initialization 0054  
                                __end_of_main 037A                           __size_of_LCDsend2x4 00B3  
                              ??_EUSART_Write 0072                               ?_update_menuLCD 0070  
                     __end_of_TMR2_Initialize 080E                   ?_INTERRUPT_InterruptManager 0070  
              ??_EUSART_SetRxInterruptHandler 0074                                        ??_main 00A0  
                             update_menuLCD@l 004D                                  ?_sendMessage 0075  
                   __size_of_sendERRORMessage 001E                            __size_of_Clock_ISR 006E  
            differenceBetweenTimePeriod@start 0072                                     ??_LCDchar 007A  
                                   ??_LCDinit 0020                                     ??_LCDsend 0074  
                                   ??_INT_ISR 0070                                        _ADACCH 0091  
                                      _ADACCL 0090                                        ?_getch 0070  
                                      _ADCON0 0093                                        _ADCON1 0094  
                                      _ADCON2 0095                                        _ADCON3 0096  
                                      _ADERRH 0117                                        _ADERRL 0116  
                                      _ADLTHH 010F                                        _ADLTHL 010E  
                                      _ADRESH 008D                                        _ADRESL 008C  
                                      _ADSTAT 0097                                        _ADUTHH 0111  
                                      _ADUTHL 0110                              __end_of_WriteI2C 08DF  
                                      _ANSELA 0F38                                        ?_putch 0070  
                                      _ANSELB 0F43                                        _ANSELC 0F4E  
                                      _ANSELD 0F59                                        _ANSELE 0F64  
                  __end_of_EUSART_is_rx_ready 11EE                                        _T1GATE 0210  
                                      _T1GCON 020F                                        ?_tsttc 0070  
                                      _RC1REG 0119                                        _RC1STA 011D  
                                      _RA6PPS 0F16                                        _RC3PPS 0F23  
                     TMR1_WriteTimer@timerVal 0070                                        _RC4PPS 0F24  
                                      i1l1431 1256                                        i1l1273 0A71  
                                      _ODCONA 0F3A                                        _ODCONB 0F45  
                                      _ODCONC 0F50                                        _RC6PPS 0F26  
                                      _ODCOND 0F5B                                        _ODCONE 0F66  
                                      i1l5110 12A8                                        i1l5200 0A30  
                                      i1l5112 12AD                                        i1l5120 12B4  
                                      i1l5210 0A4D                                        i1l5202 0A36  
                                      i1l5122 12B6                                        i1l5114 12AE  
                                      i1l5140 1281                                        i1l5220 0A6E  
                                      i1l5204 0A3C                                        i1l5212 0A54  
                                      i1l5116 12B0                                        i1l5142 1288  
                                      i1l5310 1206                                        i1l5222 0A6F  
                                      i1l5214 0A5F                                        i1l5206 0A42  
                                      i1l5118 12B2                                        i1l5312 1208  
                                      i1l5216 0A62                                        i1l5208 0A48  
                                      i1l5320 1304                                        i1l5330 1503  
                                      i1l5218 0A66                                        i1l5314 12F3  
                                      i1l5340 151F                                        i1l5332 150A  
                                      i1l5180 0A04                                        i1l5316 12F5  
                                      i1l5350 144C                                        i1l5342 1437  
                                      i1l5334 1513                                        i1l5190 0A1E  
                                      i1l5182 0A0F                                        i1l5318 12FD  
                                      i1l5352 1452                                        i1l5344 143C  
                                      i1l5336 1518                                        i1l5192 0A22  
                                      i1l5184 0A13                                        i1l5354 1453  
                                      i1l5346 143E                                        i1l5338 151E  
                                      i1l5194 0A23                                        i1l5186 0A14  
                                      i1l5348 1448                                        i1l5196 0A29  
                                      i1l5188 0A17                                        i1l5198 0A2A  
                                      i1l5800 002E                                        i1l5810 004E  
                                      i1l5802 0039                                        i1l5804 003D  
                                      i1l5806 0045                                        _S1_ISR 124E  
                                      i1l4966 124E                                        i1l5790 000F  
                                      i1l5792 0017                                        i1l5794 001B  
                                      i1l5786 0006                                        i1l5796 001F  
                                      i1l5788 000B                                        i1l5798 002A  
                                      _LCDcmd 123E                                        _INTPPS 0E90  
                               main@corrupted 00BB                                        _LCDstr 1387  
                                      u453_20 12AD                                        u453_21 12AC  
                                      u454_20 1288                                        u470_20 0A48  
                                      u454_21 1287                                        u470_21 0A47  
                                      u471_20 0A5D                                        u463_20 0A0F  
                                      u471_21 0A5A                                        u463_21 0A0E  
                                      u464_20 0A1E                                        u464_21 0A1D  
                                      u472_24 0A5F                                        u473_20 0A6E  
                                      u465_20 0A29                                        u473_21 0A6D  
                                      u465_21 0A28                                        u466_20 0A30  
                                      u482_20 1304                                        u570_20 000B  
                                      u466_21 0A2F                                        u482_21 1303  
                                      u570_21 000A                                        u483_20 150A  
                                      u467_20 0A36                                        u571_20 000F  
                                      u483_21 1509                                        u467_21 0A35  
                                      u571_21 000E                                        u484_20 151E  
                                      u468_20 0A3C                                        u580_20 0049  
                                      u572_20 0017                                        u484_21 151D  
                                      u468_21 0A3B                                        u580_21 0048  
                                      u572_21 0016                                        _OSCFRQ 0893  
                                      u485_20 143C                                        u469_20 0A42  
                                      u581_20 004E                                        u573_20 001B  
                                      u485_21 143B                                        u469_21 0A41  
                                      u581_21 004D                                        u573_21 001A  
                                      u486_20 1452                                        u574_20 001F  
                                      u486_21 1451                                        u574_21 001E  
                                      u575_20 002A                                        u575_21 0029  
                                      u576_20 002E                                        u576_21 002D  
                                      u577_20 0039                                        u577_21 0038  
                                      u578_20 003D                                        u578_21 003C  
                                      u579_20 0045                                        u579_21 0044  
                                      _PWM6EN 1C77                                        _TX1REG 011A  
                                      _TX1STA 011E                                     ??_ReadI2C 0072  
                            _writeEEPROM_flag 00D3                                        _PWM_on 0062  
                                 LCDsend2x4@c 0077                              __end_of_editTemp 1634  
        __end_of_TMR1_DefaultInterruptHandler 11EA         __size_of_TMR1_DefaultInterruptHandler 0001  
                _TMR1_DefaultInterruptHandler 11E9                                  _CCPTMRS1bits 021F  
                            __end_of_commands 1827                                        ___wmul 1418  
                           __end_of_TMR2_Stop 11FA                                        _cmd_aa 16D2  
                                      _cmd_ir 154D                                        _cmd_ra 170A  
                                      _cmd_rc 1528                                        _cmd_sc 1782  
                                      _cmd_rp 1479                                        _flagNr 00D2  
                                   ??___lwdiv 0076                                     ??___lwmod 0024  
                         __size_of_TMR2_Start 0003                           _EUSART_Transmit_ISR 1503  
                                      _memset 13FA                       __end_of_PWM6_Initialize 12A8  
                                   ??_cmd_dac 002A                                     ??_editLum 0054  
                                   ??_cmd_dtl 007A                                     ??_cmd_mta 007A  
                                   ??_cmd_mmp 007A                                        _iwrite 007A  
                                   ??_cmd_trc 002A                                     ??_cmd_rtl 002A  
                                   ??_cmd_tri 002A                  __size_of_monitoring_TEMP_LUM 018D  
                               ?_INT_CallBack 0070                       __end_of_DATAEE_ReadByte 1275  
                             _ADCC_Initialize 130A                                _PMD_Initialize 1236  
                                __pdataCOMMON 007B                                     ??_isdigit 0072  
                           sendOKMessage@bufw 0023                            update_menuLCD@diff 0050  
           __size_of_ADCC_GetSingleConversion 0012              __size_of_INT_SetInterruptHandler 0006  
                   ?_ADCC_GetSingleConversion 0072                       __end_of_TMR2_StartTimer 11FE  
     INT_SetInterruptHandler@InterruptHandler 0072      TMR1_SetInterruptHandler@InterruptHandler 0072  
                                   ??_sprintf 002E                       __end_of_TMR1_WriteTimer 12B9  
                           ??_wirteEEPROMinit 0079                       ??_PWM_Output_D4_Disable 0072  
                        ?_EUSART_Transmit_ISR 0070                              ?_TMR1_Initialize 0070  
                        __size_of_EUSART_Read 0023                             _SYSTEM_Initialize 13A2  
                     __end_of__initialization 0095                                cmd_trc@address 003A  
                          ?_SYSTEM_Initialize 0070                             __end_of_Clock_ISR 0A72  
                              cmd_trc@buffEOM 003C          __end_of_EUSART_SetTxInterruptHandler 1218  
       __size_of_EUSART_SetTxInterruptHandler 0006                  _EUSART_SetTxInterruptHandler 1212  
                          cmd_trc@maxReadings 003D                                __pcstackCOMMON 0070  
                                __pidataBANK0 0002                                  __pidataBANK1 1246  
                         ??_SYSTEM_Initialize 0075                                     ?_TMR1_ISR 0070  
               ?_TMR1_DefaultInterruptHandler 0070                                 __end_of_getch 1206  
                                   ?_S1button 0070                              _DATAEE_WriteByte 14BD  
                               __end_of_putch 122A                            __size_of_editClock 0064  
             differenceBetweenTimePeriod@diff 0078                                 __end_of_tsttc 0E73  
                            ?_TMR2_Initialize 0070                                ??_INT_CallBack 0070  
             differenceBetweenTimePeriod@stop 0075                        __end_of_PMD_Initialize 123E  
                              cmd_tri@buffEOM 0039                   __size_of_EXT_INT_Initialize 000D  
                                ??_LCDsend2x4 0075                                       ??_getch 0074  
                   __end_of_SYSTEM_Initialize 13BE                                    _checkFlags 093C  
                       ??_EUSART_Transmit_ISR 0070                                  sprintf@width 0037  
                            update_menuLCD@tt 0049                                       ??_putch 0074  
                                     ??_tsttc 0074                                    __pbssBANK0 0055  
                                  __pbssBANK1 00C3                                    __pbssBANK2 0120  
                                  __pbssBANK3 01A0                                    __pbssBANK4 0220  
                                     ?_S1_ISR 0070                                       ?_LCDcmd 0070  
                        __end_of_EUSART_Write 15A2                                       ?_LCDstr 0021  
                                _flagS1pushed 00D6                                       LCDcmd@c 0020  
                 __size_of_EUSART_Receive_ISR 0021                                       LCDstr@c 0026  
                                     LCDstr@p 0021                                    __pmaintext 0099  
               ?_EUSART_SetTxInterruptHandler 0072              _EUSART_TxDefaultInterruptHandler 00E0  
                                     ?___wmul 0072                                    ??_TMR1_ISR 0072  
                                     ?_cmd_aa 0027                       __end_of_ADCC_Initialize 1321  
                  __end_of_PWM6_LoadDutyValue 12F3                                       ?_cmd_ir 0027  
                                     ?_cmd_ra 0027                                       ?_cmd_rc 0027  
                                     ?_cmd_sc 0027                                       ?_cmd_rp 0027  
                                  ??_S1button 0072                                    __pintentry 0004  
                                     _ADFLTRH 0115                                       _ADFLTRL 0114  
                                     ?_memset 0072                            __end_of_LCDsend2x4 07D5  
                                     _ADPREVH 008F                                       _ADPREVL 008E  
                                   ?_WriteI2C 0070                              ?_PWM6_Initialize 0070  
                                     _ADSTPTH 0113                                       _ADSTPTL 0112  
                             ?_PMD_Initialize 0070                              _sendERRORMessage 13DC  
                            ?_DATAEE_ReadByte 0078                             ?_i2c1_driver_open 0070  
                               _eusartRxCount 0068                                       _LCDchar 1260  
                                     _LCDinit 0A72                                       _SP1BRGH 011C  
                                     _SP1BRGL 011B                                       _LCDsend 080E  
                        __size_of_sendMessage 0023                            ??_i2c1_driver_open 0072  
                                     _INT_ISR 1206                                       _OSCCON1 088D  
                                     _OSCCON3 088F                                     ?_editTemp 0070  
                      __size_of_sendOKMessage 001B                                       _NVMADRH 081B  
                                     _NVMADRL 081A                                       _NVMDATH 081D  
                                     _OSCTUNE 0892                                       _NVMDATL 081C  
                                     _NVMCON2 081F                                       _PWM6DCH 038D  
                                     _PWM6DCL 038C                                       _PWM6CON 038E  
                                     _SSP1ADD 018D                                       _SLRCONA 0F3B  
                                     _SLRCONB 0F46                                       _SLRCONC 0F51  
                                     _SLRCOND 0F5C                                       _SLRCONE 0F67  
                                     _SSP1BUF 018C                                       _SSP1MSK 018E  
                                ??_TMR2_Start 0072                       __size_of_TMR2_StopTimer 0004  
                            ?_TMR2_StartTimer 0070                              ?_TMR1_WriteTimer 0070  
                                LCDsend2x4@hc 0078                                  LCDsend2x4@lc 0079  
                           __end_of_editClock 0A04                               __size_of_S1_ISR 0009  
                             __size_of_LCDcmd 0008                          DATAEE_WriteByte@bAdd 0020  
                          _i2c1_driver_i2cISR 00CE                               __size_of_LCDstr 001B  
                                     _ReadI2C 1352                              ??_update_menuLCD 003B  
                             __size_of___wmul 001F                                       ___lwdiv 1746  
                             __size_of_cmd_aa 0038                                       ___lwmod 169D  
                             __size_of_cmd_ir 0029                               __size_of_cmd_ra 003C  
                             __size_of_cmd_rc 0025                               __size_of_cmd_sc 003F  
                             __size_of_cmd_rp 0021                            __end_of_TMR2_Start 11F4  
                                  ??_WriteI2C 0072                                       _cmd_dac 17C1  
                             __size_of_memset 001E                                       _editLum 15D0  
                                     _cmd_dtl 1668                                       _cmd_mta 1338  
                                     _cmd_mmp 1321                                       _cmd_trc 0C78  
                                     _cmd_rtl 1458                                       _cmd_tri 0B92  
                                     __ptext1 15A2                                       __ptext2 13FA  
                                     __ptext3 1275                                       __ptext4 1202  
                                     __ptext5 14E0                                       __ptext6 1602  
                                     __ptext7 15D0                                       __ptext8 09A0  
                                     __ptext9 093C                ??_TMR1_DefaultInterruptHandler 0070  
                                   _T1CONbits 020E                                 cmd_dac@buffer 0029  
                                     _dpowers 1836                         _OSCILLATOR_Initialize 1257  
                                   _T2CONbits 028E                                       _isdigit 12CB  
                                  cmd_dac@num 0027             __size_of_TMR1_SetInterruptHandler 0006  
                                     cmd_sc@h 002B                                       cmd_sc@m 002C  
                                     cmd_sc@s 002D                      ??_PIN_MANAGER_Initialize 0072  
                   ?_TMR1_SetInterruptHandler 0072                                     _T2HLTbits 028F  
                     _INT_SetInterruptHandler 1218                                    ??_editTemp 0054  
                                  cmd_ir@buff 002B                                    cmd_ra@buff 002B  
                                  cmd_rc@buff 002B                    __size_of_SYSTEM_Initialize 001C  
                                 ?_checkFlags 0070                                       _sprintf 0584  
                                     clrloop0 122B                                    cmd_dtl@num 0027  
                        end_of_initialization 0095                                     _T2RSTbits 0291  
                                  cmd_rp@buff 002B                                    cmd_mta@num 0027  
                                  cmd_mmp@num 0027                                       init_ram 1230  
                                     memset@c 0072                                       memset@n 0074  
                                     memset@p 0077                           _monitoring_TEMP_LUM 0E73  
                                     initloop 1231                          __end_of_INT_CallBack 128E  
                                  cmd_trc@num 0027                                    cmd_rtl@num 0027  
                                  cmd_tri@num 0027                             _EUSART_Initialize 07D5  
               __size_of_PWM_Output_D4_Enable 0003                                 _sendOKMessage 136C  
                          ?_EUSART_Initialize 0070                            _EUSART_is_rx_ready 11EB  
                ?_differenceBetweenTimePeriod 0072                                    main@F13047 0120  
                            ?_ADCC_Initialize 0070              __end_of_ADCC_GetSingleConversion 12CB  
                         ??_EUSART_Initialize 0074                ??_EUSART_SetTxInterruptHandler 0074  
                        ?_monitoring_TEMP_LUM 0070                           ?_EUSART_is_rx_ready 0070  
                                   _PORTCbits 000E                                     _TMR2_Stop 11F7  
                             _wirteEEPROMinit 0AE4                                     _TRISCbits 0013  
                       __size_of_EUSART_Write 002C                                 ?_toggleAlarms 0070  
                                  main@i_2532 00BF                      __end_of_DATAEE_WriteByte 14E0  
                               _alarmPWMStart 00E3                __size_of_PWM_Output_D4_Disable 0003  
                   __end_of_EUSART_Initialize 0800                          ??_EUSART_is_rx_ready 0072  
               __end_of_PWM_Output_D4_Disable 11F7                                __end_of_S1_ISR 1257  
                              __end_of_LCDcmd 1246                                __end_of_LCDstr 13A2  
                             cmd_trc@buffData 0030                                 cmd_dtl@buffer 0029  
                              LCDsend2x4@mode 0074                               cmd_trc@buffInit 0035  
                               cmd_dtl@lumAux 002B                                ?_sendOKMessage 0070  
                                   _Clock_ISR 0A04                              _monitor_TEMP_LUM 00D5  
                         __size_of_checkFlags 0064                                __end_of___wmul 1437  
                              __end_of_cmd_aa 170A                                __end_of_cmd_ir 1576  
                              __end_of_cmd_ra 1746                                __end_of_cmd_rc 154D  
                              __end_of_cmd_sc 17C1                                __end_of_cmd_rp 149A  
                               __pidataCOMMON 11EA                         ??_monitoring_TEMP_LUM 0023  
                                _EUSART_Write 1576                             __size_of_TMR1_ISR 0017  
                           __size_of_S1button 005D                                    ?_TMR2_Stop 0070  
                      ?_OSCILLATOR_Initialize 0070                                __end_of_memset 1418  
                   ??_INT_SetInterruptHandler 0074                               main@checkSumAux 00B9  
                         start_initialization 0054                                ??_toggleAlarms 0054  
             __size_of_PIN_MANAGER_Initialize 0043                                _TMR2_StopTimer 11FE  
                               ??_EUSART_Read 0072  EUSART_SetRxInterruptHandler@interruptHandler 0072  
EUSART_SetTxInterruptHandler@interruptHandler 0072                               cmd_tri@buffData 002F  
                            WriteI2C@data_out 0073                               cmd_tri@buffInit 0034  
                                 putch@txData 0074                                 cmd_mta@buffer 0029  
                               cmd_mmp@buffer 0029                                      ??_S1_ISR 0070  
                                    ??_LCDcmd 007A                                      ??_LCDstr 0023  
                    __end_of_sendERRORMessage 13FA                             _counterMonitorAux 00D4  
                         DATAEE_ReadByte@bAdd 0078                  ?_INT_DefaultInterruptHandler 0070  
                    __size_of_TMR1_Initialize 001E                              ??_PMD_Initialize 0072  
                                  ?_Clock_ISR 0070                       __end_of_wirteEEPROMinit 0B92  
                                    ??___wmul 0076                                      ??_cmd_aa 002A  
                                    ??_cmd_ir 002A                                      ??_cmd_ra 002A  
                                    ??_cmd_rc 002A                                      ??_cmd_sc 002A  
                                    ??_cmd_rp 002A                                   __pdataBANK0 006D  
                                 __pdataBANK1 00E3                                      ??_memset 0076  
                            sendOKMessage@cmd 0022                    __end_of_EXT_INT_Initialize 129B  
                           _editingClockAlarm 005E                             update_menuLCD@str 0041  
                           __size_of_WriteI2C 004B                      _ADCC_GetSingleConversion 12B9  
                 __end_of_EUSART_Transmit_ISR 1528                        __end_of_TMR2_StopTimer 1202  
                                    ?_LCDchar 0070                                   __pbssCOMMON 007A  
                                    ?_LCDinit 0070                                      ?_LCDsend 0070  
                                   ___latbits 0002                                      ?_INT_ISR 0070  
                               __pcstackBANK0 0020                                 cmd_trc@buffer 0029  
                               __pcstackBANK1 00A0                            _PWM6_LoadDutyValue 12DD  
                    __size_of_TMR2_Initialize 000E                                  _isdigit$2990 0072  
                       __size_of_INT_CallBack 000D          __size_of_differenceBetweenTimePeriod 0034  
                                    LCDchar@c 0020                             __size_of_editTemp 0032  
                               cmd_rtl@buffer 0029                                 cmd_tri@buffer 0029  
                  __end_of_EUSART_Receive_ISR 1458                                      LCDsend@c 0075  
                         ?_PWM6_LoadDutyValue 0072                    __size_of_EUSART_Initialize 002B  
                                 sprintf@flag 0036                     __size_of_i2c1_driver_open 000C  
                                 sprintf@prec 0033              _EUSART_RxDefaultInterruptHandler 00DE  
                             ??_sendOKMessage 0079                           __end_of_EUSART_Read 1503  
                                    ?_ReadI2C 0070                                     __pnvBANK1 00D8  
                                   _editClock 09A0                                     _main$3496 00B7  
                            ___lwdiv@dividend 0074                        _PIN_MANAGER_Initialize 0851  
               ??_INT_DefaultInterruptHandler 0070                          EUSART_Read@readValue 0073  
            __end_of_TMR1_SetInterruptHandler 1224               ADCC_GetSingleConversion@channel 0075  
                          cmd_tri@maxReadings 0038                                     _dimingLed 00CC  
                                    ?___lwdiv 0072                                      ?___lwmod 0020  
                 _i2c1_driver_busCollisionISR 00D0                                  _eusartRxHead 006A  
                                _eusartTxHead 006C                                  _eusartRxTail 0069  
                                _eusartTxTail 006B                          ??_PWM6_LoadDutyValue 0074  
                                    ?_cmd_dac 0027                                      ?_editLum 0070  
                                    ?_cmd_dtl 0027                                      ?_cmd_mta 0027  
                                    ?_cmd_mmp 0027                                  cmd_aa@buffer 0029  
                ??_INTERRUPT_InterruptManager 0072                                      ?_cmd_trc 0027  
                                    ?_cmd_rtl 0027                                      ?_cmd_tri 0027  
                               ??_sendMessage 0078                                   ??_TMR2_Stop 0072  
                                sendMessage@n 0020                       _eusartTxBufferRemaining 00E2  
                                _INT_CallBack 1281                                      _BAUD1CON 011F  
                                    ?_isdigit 0070                               ?_TMR2_StopTimer 0070  
                    __size_of_PWM6_Initialize 000D                              ___lwdiv@quotient 0077  
                                ??_checkFlags 0053                                __size_of_getch 0004  
                                    ?_sprintf 0026                                      _T2CLKCON 0290  
                    __size_of_DATAEE_ReadByte 000C                          cmd_tri@startingIndex 003F  
                              __size_of_putch 0006                                     cmd_aa@num 0027  
                              __size_of_tsttc 010D                                _eusartRxBuffer 0220  
                              _eusartTxBuffer 01A0                                ___wmul@product 0076  
                                   cmd_ir@num 0027                                     cmd_ra@num 0027  
                                    _LATAbits 0016                                     cmd_rc@num 0027  
                                   cmd_sc@num 0027                                     clear_ram0 122A  
                                   cmd_rp@num 0027                                      _PIE0bits 0716  
                                    _PIE3bits 0719                                      _PIE4bits 071A  
                    __size_of_TMR2_StartTimer 0004                                    ?_editClock 0070  
                                   _tempAlarm 00C9                                      _S1_Value 00D7  
                    __size_of_TMR1_WriteTimer 0011           __size_of_INTERRUPT_InterruptManager 004E  
                                    _PIR0bits 070C                                      _PIR3bits 070F  
                                    _PIR4bits 0710                                   ??_Clock_ISR 0070  
                        __end_of_toggleAlarms 15D0                              ?_wirteEEPROMinit 0070  
                                    _SSP1CON1 0190                                      _SSP1CON2 0191  
                                    _TMR1_ISR 12F3                                      _S1button 08DF  
                                    _SSP1STAT 018F                                     _updateLCD 00EA  
                          __end_of_checkFlags 09A0                             ??_TMR1_Initialize 0074  
                                  _ADCON0bits 0093                                    _ADCON1bits 0094  
                              sendMessage@num 0075                                    _ADCON2bits 0095  
                                  _ADCON3bits 0096                                  cmd_ir@buffer 0029  
                           ___wmul@multiplier 0072                                  cmd_ra@buffer 0029  
                __end_of_PWM_Output_D4_Enable 11F1                                  cmd_rc@buffer 0029  
        __size_of_INT_DefaultInterruptHandler 0001                                  cmd_sc@buffer 0029  
                            __size_of_LCDchar 0009                         DATAEE_WriteByte@bData 0022  
                            __size_of_LCDinit 0072                              __size_of_LCDsend 0043  
                            __size_of_INT_ISR 0006                           __end_of_sendMessage 14BD  
                                 _EUSART_Read 14E0                             ?_DATAEE_WriteByte 0020  
                           ??_TMR2_Initialize 0072                                  cmd_rp@buffer 0029  
                          ??_DATAEE_WriteByte 0078                              __size_of_ReadI2C 001A  
                                  _ADSTATbits 0097                       ??_OSCILLATOR_Initialize 0072  
                            __size_of___lwdiv 003C                              __size_of___lwmod 0035  
                                    _WriteI2C 0894                      _TMR1_SetInterruptHandler 121E  
                            __size_of_cmd_dac 003F                              __size_of_editLum 0032  
                            __size_of_cmd_dtl 0035                       __size_of_update_menuLCD 020A  
                            __size_of_cmd_mta 001A                              __size_of_cmd_mmp 0017  
                            __size_of_cmd_trc 00EE                              __size_of_cmd_rtl 0021  
                            __size_of_cmd_tri 00E6                                  cmd_tri@index 003C  
                       _TMR1_InterruptHandler 00DA                                    sprintf@val 0034  
                                    _clkAlarm 0055                      __size_of_ADCC_Initialize 0017  
                            __size_of_isdigit 0012                                      _editTemp 1602  
                             ___lwdiv@divisor 0072                               ___lwdiv@counter 0079  
                                    __ptext10 0AE4                                      __ptext11 037A  
                                    __ptext20 12DD                                      __ptext12 0584  
                                    __ptext21 1387                                      __ptext13 12CB  
                                  _T1GCONbits 020F                                      __ptext30 11F1  
                                    __ptext22 1260                                      __ptext14 169D  
                                    __ptext31 08DF                                      __ptext23 123E  
                                    __ptext15 1746                                      __ptext40 1321  
                                    __ptext32 11EE                                      __ptext24 0E73  
                                    __ptext16 1634                                      __ptext41 1479  
                                    __ptext33 0C78                                      __ptext25 0D66  
                                    __ptext17 11FE                                      __ptext50 149A  
                                    __ptext42 1458                                      __ptext34 154D  
                                    __ptext26 1352                                      __ptext18 11F7  
                                    __ptext51 1224                                      __ptext43 1782  
                                    __ptext35 16D2                                      __ptext27 14BD  
                                    __ptext19 11F4                                      __ptext60 1257  
                                    __ptext52 1576                                      __ptext44 1528  
                                    __ptext36 1668                                      __ptext28 12B9  
                                    __ptext61 128E                                      __ptext53 13A2  
                                    __ptext45 0B92                                      __ptext37 17C1  
                                    __ptext29 11FA                                      __ptext70 0894  
                                    __ptext62 1218                                      __ptext54 0800  
                                    __ptext46 1418                                      __ptext38 170A  
                                    __ptext71 11EB                                      __ptext63 07D5  
                                    __ptext55 13BE                                      __ptext47 1269  
                                    __ptext39 1338                                      __ptext80 124E  
                                    __ptext64 1212                                      __ptext56 121E  
                                    __ptext48 136C                                      __ptext81 1503  
                                    __ptext73 12F3                                      __ptext65 120C  
                                    __ptext57 129B                                      __ptext49 13DC  
                                    __ptext82 1437                                      __ptext74 12A8  
                                    __ptext66 130A                                      __ptext58 1236  
                                    __ptext75 0A04                                      __ptext67 0A72  
                                    __ptext59 0851                                      __ptext76 11E9  
                                    __ptext68 0722                                      __ptext77 1206  
                                    __ptext69 080E                                      __ptext78 1281  
                                    __ptext79 11E8                                  _SSP1CON1bits 0190  
                                _SSP1CON2bits 0191                                      _commands 1800  
                            __size_of_sprintf 019E                   DATAEE_WriteByte@GIEBitValue 0078  
                            _i2c1_driver_open 1275                                      _modeFlag 005C  
                           ??_PWM6_Initialize 0072                   __size_of_EUSART_is_rx_ready 0003  
                               __size_of_main 02E1                                      cmd_dac@h 002B  
                                    cmd_dac@m 002C                                      _lumAlarm 00C6  
                                    cmd_dac@s 002D                             ?_sendERRORMessage 0070  
                           ??_DATAEE_ReadByte 007A                                      _lumLevel 0065  
                       _PWM_Output_D4_Disable 11F4                                   ??_editClock 0054  
                                    cmd_trc@i 0038                                      cmd_trc@j 0041  
                                    cmd_trc@n 003F                                      cmd_tri@i 003A  
                                    cmd_tri@j 003E                                      cmd_tri@n 003D  
                            _editingTempAlarm 0064                                    _RC1STAbits 011D  
                          ??_sendERRORMessage 0079                   __end_of_monitoring_TEMP_LUM 1000  
                                    _prevTemp 00E8                                    tsttc@value 0075  
                  ??_ADCC_GetSingleConversion 0075                                      int$flags 007E  
                           ??_TMR2_StartTimer 0072            __end_of_INTERRUPT_InterruptManager 0052  
                  _INTERRUPT_InterruptManager 0004                                      main@buff 00A3  
                                _SSP1STATbits 018F                             ??_TMR1_WriteTimer 0072  
                                 _sendMessage 149A                          update_menuLCD@F12902 00C3  
                                  _INTCONbits 000B                                   _NVMCON1bits 081E  
                                _prevLumLevel 00E6                          _INT_InterruptHandler 00D8  
                                    isdigit@c 0073                                      memset@p1 0078  
                                  _LCDsend2x4 0722                            _EXT_INT_Initialize 128E  
                                 cmd_rtl@buff 002B                                      intlevel1 0000  
                                   sprintf@ap 0032                                     sprintf@sp 003A  
                            ___lwmod@dividend 0022                       ?_PIN_MANAGER_Initialize 0070  
                        sendERRORMessage@bufw 0023                         __size_of_toggleAlarms 002E  
                         ?_EXT_INT_Initialize 0070                               _editingLumAlarm 0063  
        __end_of_EUSART_SetRxInterruptHandler 1212         __size_of_EUSART_SetRxInterruptHandler 0006  
                _EUSART_SetRxInterruptHandler 120C                          _PWM_Output_D4_Enable 11EE  
         __end_of_differenceBetweenTimePeriod 1668                   _differenceBetweenTimePeriod 1634  
                          _EUSART_Receive_ISR 1437                      ?_INT_SetInterruptHandler 0072  
                            ??_TMR2_StopTimer 0072                                 __pstringtext1 1800  
                               __pstringtext2 1836                                 __pstringtext3 1827  
                               __pstringtext4 1840                                 __pstringtext5 1847  
                               __pstringtext6 184C                                 __pstringtext7 0000  
                        ??_EXT_INT_Initialize 0074                 ??_differenceBetweenTimePeriod 0079  
                                    sprintf@c 0039                                      sprintf@f 0026  
                         ?_EUSART_Receive_ISR 0070                                    _SSP1DATPPS 0EC6  
                                  _SSP1CLKPPS 0EC5                               ___lwmod@divisor 0020  
                         sendERRORMessage@cmd 0022                               ___lwmod@counter 0025  
                 PWM6_LoadDutyValue@dutyValue 0072                                    _TX1STAbits 011E  
                                _toggleAlarms 15A2                                    _TMR2_Start 11F1  
                          EUSART_Write@txData 0073                  __size_of_EUSART_Transmit_ISR 0025  
              __end_of_PIN_MANAGER_Initialize 0894                             ??_ADCC_Initialize 0072  
                      ?_PWM_Output_D4_Disable 0070                          ??_EUSART_Receive_ISR 0070  
                       ?_PWM_Output_D4_Enable 0070                               _TMR1_Initialize 13BE  
                       __end_of_sendOKMessage 1387  
