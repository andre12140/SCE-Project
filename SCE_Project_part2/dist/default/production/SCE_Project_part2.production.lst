

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Wed Dec 16 15:36:58 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F18875
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    24                           	psect	inittext,global,class=CODE,delta=2
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    43                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	intentry,global,class=CODE,delta=2
   102                           	psect	text73,local,class=CODE,merge=1,delta=2
   103                           	psect	text74,local,class=CODE,merge=1,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	text79,local,class=CODE,merge=1,delta=2
   109                           	psect	text80,local,class=CODE,merge=1,delta=2
   110                           	psect	text81,local,class=CODE,merge=1,delta=2
   111                           	psect	text82,local,class=CODE,merge=1,delta=2
   112                           	psect	text83,local,class=CODE,merge=1,delta=2
   113                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   114                           	dabs	1,0x7E,2
   115  0000                     
   116                           ; Version 2.30
   117                           ; Generated 15/09/2020 GMT
   118                           ; 
   119                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution. Publication is not required when
   133                           ;        this file is used in an embedded application.
   134                           ; 
   135                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   136                           ;        software without specific prior written permission.
   137                           ; 
   138                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   139                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   140                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   141                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   142                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   143                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   144                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   145                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   146                           ; 
   147                           ; 
   148                           ; Code-generator required, PIC16F18875 Definitions
   149                           ; 
   150                           ; SFR Addresses
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0008                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001C                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  008C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0110                     	;# 
   211  0110                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0112                     	;# 
   215  0113                     	;# 
   216  0114                     	;# 
   217  0114                     	;# 
   218  0115                     	;# 
   219  0116                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  0119                     	;# 
   223  0119                     	;# 
   224  0119                     	;# 
   225  011A                     	;# 
   226  011A                     	;# 
   227  011A                     	;# 
   228  011B                     	;# 
   229  011B                     	;# 
   230  011B                     	;# 
   231  011B                     	;# 
   232  011B                     	;# 
   233  011C                     	;# 
   234  011C                     	;# 
   235  011C                     	;# 
   236  011D                     	;# 
   237  011D                     	;# 
   238  011D                     	;# 
   239  011E                     	;# 
   240  011E                     	;# 
   241  011E                     	;# 
   242  011F                     	;# 
   243  011F                     	;# 
   244  011F                     	;# 
   245  011F                     	;# 
   246  011F                     	;# 
   247  018C                     	;# 
   248  018D                     	;# 
   249  018E                     	;# 
   250  018F                     	;# 
   251  0190                     	;# 
   252  0191                     	;# 
   253  0192                     	;# 
   254  0196                     	;# 
   255  0197                     	;# 
   256  0198                     	;# 
   257  0199                     	;# 
   258  019A                     	;# 
   259  019B                     	;# 
   260  019C                     	;# 
   261  020C                     	;# 
   262  020C                     	;# 
   263  020D                     	;# 
   264  020E                     	;# 
   265  020F                     	;# 
   266  020F                     	;# 
   267  0210                     	;# 
   268  0210                     	;# 
   269  0211                     	;# 
   270  0211                     	;# 
   271  0212                     	;# 
   272  0212                     	;# 
   273  0213                     	;# 
   274  0214                     	;# 
   275  0215                     	;# 
   276  0215                     	;# 
   277  0216                     	;# 
   278  0216                     	;# 
   279  0217                     	;# 
   280  0217                     	;# 
   281  0218                     	;# 
   282  0218                     	;# 
   283  0219                     	;# 
   284  021A                     	;# 
   285  021B                     	;# 
   286  021B                     	;# 
   287  021C                     	;# 
   288  021C                     	;# 
   289  021D                     	;# 
   290  021D                     	;# 
   291  021E                     	;# 
   292  021F                     	;# 
   293  028C                     	;# 
   294  028C                     	;# 
   295  028D                     	;# 
   296  028D                     	;# 
   297  028E                     	;# 
   298  028F                     	;# 
   299  0290                     	;# 
   300  0290                     	;# 
   301  0291                     	;# 
   302  0292                     	;# 
   303  0292                     	;# 
   304  0293                     	;# 
   305  0293                     	;# 
   306  0294                     	;# 
   307  0295                     	;# 
   308  0296                     	;# 
   309  0296                     	;# 
   310  0297                     	;# 
   311  0298                     	;# 
   312  0298                     	;# 
   313  0299                     	;# 
   314  0299                     	;# 
   315  029A                     	;# 
   316  029B                     	;# 
   317  029C                     	;# 
   318  029C                     	;# 
   319  029D                     	;# 
   320  030C                     	;# 
   321  030C                     	;# 
   322  030D                     	;# 
   323  030E                     	;# 
   324  030F                     	;# 
   325  0310                     	;# 
   326  0310                     	;# 
   327  0311                     	;# 
   328  0312                     	;# 
   329  0313                     	;# 
   330  0314                     	;# 
   331  0314                     	;# 
   332  0315                     	;# 
   333  0316                     	;# 
   334  0317                     	;# 
   335  0318                     	;# 
   336  0318                     	;# 
   337  0319                     	;# 
   338  031A                     	;# 
   339  031B                     	;# 
   340  031C                     	;# 
   341  031C                     	;# 
   342  031D                     	;# 
   343  031E                     	;# 
   344  031F                     	;# 
   345  038C                     	;# 
   346  038C                     	;# 
   347  038D                     	;# 
   348  038E                     	;# 
   349  0390                     	;# 
   350  0390                     	;# 
   351  0391                     	;# 
   352  0392                     	;# 
   353  040C                     	;# 
   354  040D                     	;# 
   355  040E                     	;# 
   356  040F                     	;# 
   357  0410                     	;# 
   358  0411                     	;# 
   359  0416                     	;# 
   360  0416                     	;# 
   361  0417                     	;# 
   362  0418                     	;# 
   363  0418                     	;# 
   364  0419                     	;# 
   365  041A                     	;# 
   366  041A                     	;# 
   367  041B                     	;# 
   368  041C                     	;# 
   369  041C                     	;# 
   370  041D                     	;# 
   371  041E                     	;# 
   372  041F                     	;# 
   373  048C                     	;# 
   374  048C                     	;# 
   375  048D                     	;# 
   376  048E                     	;# 
   377  048F                     	;# 
   378  048F                     	;# 
   379  0490                     	;# 
   380  0491                     	;# 
   381  0492                     	;# 
   382  0492                     	;# 
   383  0493                     	;# 
   384  0494                     	;# 
   385  0495                     	;# 
   386  0495                     	;# 
   387  0496                     	;# 
   388  0497                     	;# 
   389  0498                     	;# 
   390  0499                     	;# 
   391  049A                     	;# 
   392  049B                     	;# 
   393  049C                     	;# 
   394  049D                     	;# 
   395  050C                     	;# 
   396  050C                     	;# 
   397  050D                     	;# 
   398  050E                     	;# 
   399  050F                     	;# 
   400  050F                     	;# 
   401  0510                     	;# 
   402  0511                     	;# 
   403  0512                     	;# 
   404  0512                     	;# 
   405  0513                     	;# 
   406  0514                     	;# 
   407  0515                     	;# 
   408  0515                     	;# 
   409  0516                     	;# 
   410  0517                     	;# 
   411  0518                     	;# 
   412  0519                     	;# 
   413  051A                     	;# 
   414  051B                     	;# 
   415  051C                     	;# 
   416  051D                     	;# 
   417  058C                     	;# 
   418  058C                     	;# 
   419  058D                     	;# 
   420  058E                     	;# 
   421  058F                     	;# 
   422  058F                     	;# 
   423  0590                     	;# 
   424  0591                     	;# 
   425  0592                     	;# 
   426  0593                     	;# 
   427  060C                     	;# 
   428  060D                     	;# 
   429  060E                     	;# 
   430  060F                     	;# 
   431  0610                     	;# 
   432  0611                     	;# 
   433  0612                     	;# 
   434  0613                     	;# 
   435  0614                     	;# 
   436  0616                     	;# 
   437  0617                     	;# 
   438  0618                     	;# 
   439  0619                     	;# 
   440  061A                     	;# 
   441  061B                     	;# 
   442  061C                     	;# 
   443  061D                     	;# 
   444  061E                     	;# 
   445  068C                     	;# 
   446  068D                     	;# 
   447  068E                     	;# 
   448  068F                     	;# 
   449  0690                     	;# 
   450  0691                     	;# 
   451  0692                     	;# 
   452  0693                     	;# 
   453  0694                     	;# 
   454  070C                     	;# 
   455  070D                     	;# 
   456  070E                     	;# 
   457  070F                     	;# 
   458  0710                     	;# 
   459  0711                     	;# 
   460  0712                     	;# 
   461  0713                     	;# 
   462  0714                     	;# 
   463  0716                     	;# 
   464  0717                     	;# 
   465  0718                     	;# 
   466  0719                     	;# 
   467  071A                     	;# 
   468  071B                     	;# 
   469  071C                     	;# 
   470  071D                     	;# 
   471  071E                     	;# 
   472  0796                     	;# 
   473  0797                     	;# 
   474  0798                     	;# 
   475  0799                     	;# 
   476  079A                     	;# 
   477  079B                     	;# 
   478  080C                     	;# 
   479  080D                     	;# 
   480  080E                     	;# 
   481  080F                     	;# 
   482  0810                     	;# 
   483  0811                     	;# 
   484  0812                     	;# 
   485  0813                     	;# 
   486  0814                     	;# 
   487  081A                     	;# 
   488  081B                     	;# 
   489  081C                     	;# 
   490  081D                     	;# 
   491  081E                     	;# 
   492  081F                     	;# 
   493  088C                     	;# 
   494  088D                     	;# 
   495  088E                     	;# 
   496  088F                     	;# 
   497  0890                     	;# 
   498  0891                     	;# 
   499  0892                     	;# 
   500  0893                     	;# 
   501  0895                     	;# 
   502  0896                     	;# 
   503  0897                     	;# 
   504  0898                     	;# 
   505  0899                     	;# 
   506  089A                     	;# 
   507  089B                     	;# 
   508  090C                     	;# 
   509  090E                     	;# 
   510  090F                     	;# 
   511  091F                     	;# 
   512  091F                     	;# 
   513  098F                     	;# 
   514  098F                     	;# 
   515  0990                     	;# 
   516  0991                     	;# 
   517  0992                     	;# 
   518  0993                     	;# 
   519  0994                     	;# 
   520  0995                     	;# 
   521  0996                     	;# 
   522  0997                     	;# 
   523  0E0F                     	;# 
   524  0E10                     	;# 
   525  0E11                     	;# 
   526  0E12                     	;# 
   527  0E13                     	;# 
   528  0E14                     	;# 
   529  0E15                     	;# 
   530  0E16                     	;# 
   531  0E17                     	;# 
   532  0E18                     	;# 
   533  0E19                     	;# 
   534  0E1A                     	;# 
   535  0E1B                     	;# 
   536  0E1C                     	;# 
   537  0E1D                     	;# 
   538  0E1E                     	;# 
   539  0E1F                     	;# 
   540  0E20                     	;# 
   541  0E21                     	;# 
   542  0E22                     	;# 
   543  0E23                     	;# 
   544  0E24                     	;# 
   545  0E25                     	;# 
   546  0E26                     	;# 
   547  0E27                     	;# 
   548  0E28                     	;# 
   549  0E29                     	;# 
   550  0E2A                     	;# 
   551  0E2B                     	;# 
   552  0E2C                     	;# 
   553  0E2D                     	;# 
   554  0E2E                     	;# 
   555  0E2F                     	;# 
   556  0E30                     	;# 
   557  0E31                     	;# 
   558  0E32                     	;# 
   559  0E33                     	;# 
   560  0E34                     	;# 
   561  0E35                     	;# 
   562  0E36                     	;# 
   563  0E37                     	;# 
   564  0E8F                     	;# 
   565  0E90                     	;# 
   566  0E91                     	;# 
   567  0E92                     	;# 
   568  0E93                     	;# 
   569  0E94                     	;# 
   570  0E95                     	;# 
   571  0E96                     	;# 
   572  0E97                     	;# 
   573  0E9C                     	;# 
   574  0E9D                     	;# 
   575  0E9E                     	;# 
   576  0EA1                     	;# 
   577  0EA2                     	;# 
   578  0EA3                     	;# 
   579  0EA4                     	;# 
   580  0EA5                     	;# 
   581  0EA9                     	;# 
   582  0EAA                     	;# 
   583  0EAB                     	;# 
   584  0EAC                     	;# 
   585  0EB1                     	;# 
   586  0EB2                     	;# 
   587  0EB3                     	;# 
   588  0EB8                     	;# 
   589  0EB9                     	;# 
   590  0EBA                     	;# 
   591  0EBB                     	;# 
   592  0EBC                     	;# 
   593  0EBD                     	;# 
   594  0EBE                     	;# 
   595  0EC3                     	;# 
   596  0EC5                     	;# 
   597  0EC6                     	;# 
   598  0EC7                     	;# 
   599  0EC8                     	;# 
   600  0EC9                     	;# 
   601  0ECA                     	;# 
   602  0ECB                     	;# 
   603  0ECC                     	;# 
   604  0F10                     	;# 
   605  0F11                     	;# 
   606  0F12                     	;# 
   607  0F13                     	;# 
   608  0F14                     	;# 
   609  0F15                     	;# 
   610  0F16                     	;# 
   611  0F17                     	;# 
   612  0F18                     	;# 
   613  0F19                     	;# 
   614  0F1A                     	;# 
   615  0F1B                     	;# 
   616  0F1C                     	;# 
   617  0F1D                     	;# 
   618  0F1E                     	;# 
   619  0F1F                     	;# 
   620  0F20                     	;# 
   621  0F21                     	;# 
   622  0F22                     	;# 
   623  0F23                     	;# 
   624  0F24                     	;# 
   625  0F25                     	;# 
   626  0F26                     	;# 
   627  0F27                     	;# 
   628  0F28                     	;# 
   629  0F29                     	;# 
   630  0F2A                     	;# 
   631  0F2B                     	;# 
   632  0F2C                     	;# 
   633  0F2D                     	;# 
   634  0F2E                     	;# 
   635  0F2F                     	;# 
   636  0F30                     	;# 
   637  0F31                     	;# 
   638  0F32                     	;# 
   639  0F38                     	;# 
   640  0F39                     	;# 
   641  0F3A                     	;# 
   642  0F3B                     	;# 
   643  0F3C                     	;# 
   644  0F3D                     	;# 
   645  0F3E                     	;# 
   646  0F3F                     	;# 
   647  0F40                     	;# 
   648  0F41                     	;# 
   649  0F43                     	;# 
   650  0F44                     	;# 
   651  0F45                     	;# 
   652  0F46                     	;# 
   653  0F47                     	;# 
   654  0F48                     	;# 
   655  0F49                     	;# 
   656  0F4A                     	;# 
   657  0F4B                     	;# 
   658  0F4C                     	;# 
   659  0F4E                     	;# 
   660  0F4F                     	;# 
   661  0F50                     	;# 
   662  0F51                     	;# 
   663  0F52                     	;# 
   664  0F53                     	;# 
   665  0F54                     	;# 
   666  0F55                     	;# 
   667  0F56                     	;# 
   668  0F57                     	;# 
   669  0F59                     	;# 
   670  0F5A                     	;# 
   671  0F5B                     	;# 
   672  0F5C                     	;# 
   673  0F5D                     	;# 
   674  0F61                     	;# 
   675  0F62                     	;# 
   676  0F64                     	;# 
   677  0F65                     	;# 
   678  0F66                     	;# 
   679  0F67                     	;# 
   680  0F68                     	;# 
   681  0F69                     	;# 
   682  0F6A                     	;# 
   683  0F6B                     	;# 
   684  0F6C                     	;# 
   685  0F6D                     	;# 
   686  0FE4                     	;# 
   687  0FE5                     	;# 
   688  0FE6                     	;# 
   689  0FE7                     	;# 
   690  0FE8                     	;# 
   691  0FE9                     	;# 
   692  0FEA                     	;# 
   693  0FEB                     	;# 
   694  0FED                     	;# 
   695  0FEE                     	;# 
   696  0FEF                     	;# 
   697  0000                     	;# 
   698  0001                     	;# 
   699  0002                     	;# 
   700  0003                     	;# 
   701  0004                     	;# 
   702  0005                     	;# 
   703  0006                     	;# 
   704  0007                     	;# 
   705  0008                     	;# 
   706  0009                     	;# 
   707  000A                     	;# 
   708  000B                     	;# 
   709  000C                     	;# 
   710  000D                     	;# 
   711  000E                     	;# 
   712  000F                     	;# 
   713  0010                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0013                     	;# 
   717  0014                     	;# 
   718  0015                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001C                     	;# 
   725  001C                     	;# 
   726  001D                     	;# 
   727  001D                     	;# 
   728  001E                     	;# 
   729  001F                     	;# 
   730  008C                     	;# 
   731  008C                     	;# 
   732  008D                     	;# 
   733  008E                     	;# 
   734  008E                     	;# 
   735  008F                     	;# 
   736  0090                     	;# 
   737  0090                     	;# 
   738  0091                     	;# 
   739  0093                     	;# 
   740  0094                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0097                     	;# 
   744  0098                     	;# 
   745  0099                     	;# 
   746  009A                     	;# 
   747  009B                     	;# 
   748  009C                     	;# 
   749  009D                     	;# 
   750  009E                     	;# 
   751  010C                     	;# 
   752  010D                     	;# 
   753  010E                     	;# 
   754  010E                     	;# 
   755  010F                     	;# 
   756  0110                     	;# 
   757  0110                     	;# 
   758  0111                     	;# 
   759  0112                     	;# 
   760  0112                     	;# 
   761  0113                     	;# 
   762  0114                     	;# 
   763  0114                     	;# 
   764  0115                     	;# 
   765  0116                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  0119                     	;# 
   769  0119                     	;# 
   770  0119                     	;# 
   771  011A                     	;# 
   772  011A                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011B                     	;# 
   776  011B                     	;# 
   777  011B                     	;# 
   778  011B                     	;# 
   779  011C                     	;# 
   780  011C                     	;# 
   781  011C                     	;# 
   782  011D                     	;# 
   783  011D                     	;# 
   784  011D                     	;# 
   785  011E                     	;# 
   786  011E                     	;# 
   787  011E                     	;# 
   788  011F                     	;# 
   789  011F                     	;# 
   790  011F                     	;# 
   791  011F                     	;# 
   792  011F                     	;# 
   793  018C                     	;# 
   794  018D                     	;# 
   795  018E                     	;# 
   796  018F                     	;# 
   797  0190                     	;# 
   798  0191                     	;# 
   799  0192                     	;# 
   800  0196                     	;# 
   801  0197                     	;# 
   802  0198                     	;# 
   803  0199                     	;# 
   804  019A                     	;# 
   805  019B                     	;# 
   806  019C                     	;# 
   807  020C                     	;# 
   808  020C                     	;# 
   809  020D                     	;# 
   810  020E                     	;# 
   811  020F                     	;# 
   812  020F                     	;# 
   813  0210                     	;# 
   814  0210                     	;# 
   815  0211                     	;# 
   816  0211                     	;# 
   817  0212                     	;# 
   818  0212                     	;# 
   819  0213                     	;# 
   820  0214                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0218                     	;# 
   828  0218                     	;# 
   829  0219                     	;# 
   830  021A                     	;# 
   831  021B                     	;# 
   832  021B                     	;# 
   833  021C                     	;# 
   834  021C                     	;# 
   835  021D                     	;# 
   836  021D                     	;# 
   837  021E                     	;# 
   838  021F                     	;# 
   839  028C                     	;# 
   840  028C                     	;# 
   841  028D                     	;# 
   842  028D                     	;# 
   843  028E                     	;# 
   844  028F                     	;# 
   845  0290                     	;# 
   846  0290                     	;# 
   847  0291                     	;# 
   848  0292                     	;# 
   849  0292                     	;# 
   850  0293                     	;# 
   851  0293                     	;# 
   852  0294                     	;# 
   853  0295                     	;# 
   854  0296                     	;# 
   855  0296                     	;# 
   856  0297                     	;# 
   857  0298                     	;# 
   858  0298                     	;# 
   859  0299                     	;# 
   860  0299                     	;# 
   861  029A                     	;# 
   862  029B                     	;# 
   863  029C                     	;# 
   864  029C                     	;# 
   865  029D                     	;# 
   866  030C                     	;# 
   867  030C                     	;# 
   868  030D                     	;# 
   869  030E                     	;# 
   870  030F                     	;# 
   871  0310                     	;# 
   872  0310                     	;# 
   873  0311                     	;# 
   874  0312                     	;# 
   875  0313                     	;# 
   876  0314                     	;# 
   877  0314                     	;# 
   878  0315                     	;# 
   879  0316                     	;# 
   880  0317                     	;# 
   881  0318                     	;# 
   882  0318                     	;# 
   883  0319                     	;# 
   884  031A                     	;# 
   885  031B                     	;# 
   886  031C                     	;# 
   887  031C                     	;# 
   888  031D                     	;# 
   889  031E                     	;# 
   890  031F                     	;# 
   891  038C                     	;# 
   892  038C                     	;# 
   893  038D                     	;# 
   894  038E                     	;# 
   895  0390                     	;# 
   896  0390                     	;# 
   897  0391                     	;# 
   898  0392                     	;# 
   899  040C                     	;# 
   900  040D                     	;# 
   901  040E                     	;# 
   902  040F                     	;# 
   903  0410                     	;# 
   904  0411                     	;# 
   905  0416                     	;# 
   906  0416                     	;# 
   907  0417                     	;# 
   908  0418                     	;# 
   909  0418                     	;# 
   910  0419                     	;# 
   911  041A                     	;# 
   912  041A                     	;# 
   913  041B                     	;# 
   914  041C                     	;# 
   915  041C                     	;# 
   916  041D                     	;# 
   917  041E                     	;# 
   918  041F                     	;# 
   919  048C                     	;# 
   920  048C                     	;# 
   921  048D                     	;# 
   922  048E                     	;# 
   923  048F                     	;# 
   924  048F                     	;# 
   925  0490                     	;# 
   926  0491                     	;# 
   927  0492                     	;# 
   928  0492                     	;# 
   929  0493                     	;# 
   930  0494                     	;# 
   931  0495                     	;# 
   932  0495                     	;# 
   933  0496                     	;# 
   934  0497                     	;# 
   935  0498                     	;# 
   936  0499                     	;# 
   937  049A                     	;# 
   938  049B                     	;# 
   939  049C                     	;# 
   940  049D                     	;# 
   941  050C                     	;# 
   942  050C                     	;# 
   943  050D                     	;# 
   944  050E                     	;# 
   945  050F                     	;# 
   946  050F                     	;# 
   947  0510                     	;# 
   948  0511                     	;# 
   949  0512                     	;# 
   950  0512                     	;# 
   951  0513                     	;# 
   952  0514                     	;# 
   953  0515                     	;# 
   954  0515                     	;# 
   955  0516                     	;# 
   956  0517                     	;# 
   957  0518                     	;# 
   958  0519                     	;# 
   959  051A                     	;# 
   960  051B                     	;# 
   961  051C                     	;# 
   962  051D                     	;# 
   963  058C                     	;# 
   964  058C                     	;# 
   965  058D                     	;# 
   966  058E                     	;# 
   967  058F                     	;# 
   968  058F                     	;# 
   969  0590                     	;# 
   970  0591                     	;# 
   971  0592                     	;# 
   972  0593                     	;# 
   973  060C                     	;# 
   974  060D                     	;# 
   975  060E                     	;# 
   976  060F                     	;# 
   977  0610                     	;# 
   978  0611                     	;# 
   979  0612                     	;# 
   980  0613                     	;# 
   981  0614                     	;# 
   982  0616                     	;# 
   983  0617                     	;# 
   984  0618                     	;# 
   985  0619                     	;# 
   986  061A                     	;# 
   987  061B                     	;# 
   988  061C                     	;# 
   989  061D                     	;# 
   990  061E                     	;# 
   991  068C                     	;# 
   992  068D                     	;# 
   993  068E                     	;# 
   994  068F                     	;# 
   995  0690                     	;# 
   996  0691                     	;# 
   997  0692                     	;# 
   998  0693                     	;# 
   999  0694                     	;# 
  1000  070C                     	;# 
  1001  070D                     	;# 
  1002  070E                     	;# 
  1003  070F                     	;# 
  1004  0710                     	;# 
  1005  0711                     	;# 
  1006  0712                     	;# 
  1007  0713                     	;# 
  1008  0714                     	;# 
  1009  0716                     	;# 
  1010  0717                     	;# 
  1011  0718                     	;# 
  1012  0719                     	;# 
  1013  071A                     	;# 
  1014  071B                     	;# 
  1015  071C                     	;# 
  1016  071D                     	;# 
  1017  071E                     	;# 
  1018  0796                     	;# 
  1019  0797                     	;# 
  1020  0798                     	;# 
  1021  0799                     	;# 
  1022  079A                     	;# 
  1023  079B                     	;# 
  1024  080C                     	;# 
  1025  080D                     	;# 
  1026  080E                     	;# 
  1027  080F                     	;# 
  1028  0810                     	;# 
  1029  0811                     	;# 
  1030  0812                     	;# 
  1031  0813                     	;# 
  1032  0814                     	;# 
  1033  081A                     	;# 
  1034  081B                     	;# 
  1035  081C                     	;# 
  1036  081D                     	;# 
  1037  081E                     	;# 
  1038  081F                     	;# 
  1039  088C                     	;# 
  1040  088D                     	;# 
  1041  088E                     	;# 
  1042  088F                     	;# 
  1043  0890                     	;# 
  1044  0891                     	;# 
  1045  0892                     	;# 
  1046  0893                     	;# 
  1047  0895                     	;# 
  1048  0896                     	;# 
  1049  0897                     	;# 
  1050  0898                     	;# 
  1051  0899                     	;# 
  1052  089A                     	;# 
  1053  089B                     	;# 
  1054  090C                     	;# 
  1055  090E                     	;# 
  1056  090F                     	;# 
  1057  091F                     	;# 
  1058  091F                     	;# 
  1059  098F                     	;# 
  1060  098F                     	;# 
  1061  0990                     	;# 
  1062  0991                     	;# 
  1063  0992                     	;# 
  1064  0993                     	;# 
  1065  0994                     	;# 
  1066  0995                     	;# 
  1067  0996                     	;# 
  1068  0997                     	;# 
  1069  0E0F                     	;# 
  1070  0E10                     	;# 
  1071  0E11                     	;# 
  1072  0E12                     	;# 
  1073  0E13                     	;# 
  1074  0E14                     	;# 
  1075  0E15                     	;# 
  1076  0E16                     	;# 
  1077  0E17                     	;# 
  1078  0E18                     	;# 
  1079  0E19                     	;# 
  1080  0E1A                     	;# 
  1081  0E1B                     	;# 
  1082  0E1C                     	;# 
  1083  0E1D                     	;# 
  1084  0E1E                     	;# 
  1085  0E1F                     	;# 
  1086  0E20                     	;# 
  1087  0E21                     	;# 
  1088  0E22                     	;# 
  1089  0E23                     	;# 
  1090  0E24                     	;# 
  1091  0E25                     	;# 
  1092  0E26                     	;# 
  1093  0E27                     	;# 
  1094  0E28                     	;# 
  1095  0E29                     	;# 
  1096  0E2A                     	;# 
  1097  0E2B                     	;# 
  1098  0E2C                     	;# 
  1099  0E2D                     	;# 
  1100  0E2E                     	;# 
  1101  0E2F                     	;# 
  1102  0E30                     	;# 
  1103  0E31                     	;# 
  1104  0E32                     	;# 
  1105  0E33                     	;# 
  1106  0E34                     	;# 
  1107  0E35                     	;# 
  1108  0E36                     	;# 
  1109  0E37                     	;# 
  1110  0E8F                     	;# 
  1111  0E90                     	;# 
  1112  0E91                     	;# 
  1113  0E92                     	;# 
  1114  0E93                     	;# 
  1115  0E94                     	;# 
  1116  0E95                     	;# 
  1117  0E96                     	;# 
  1118  0E97                     	;# 
  1119  0E9C                     	;# 
  1120  0E9D                     	;# 
  1121  0E9E                     	;# 
  1122  0EA1                     	;# 
  1123  0EA2                     	;# 
  1124  0EA3                     	;# 
  1125  0EA4                     	;# 
  1126  0EA5                     	;# 
  1127  0EA9                     	;# 
  1128  0EAA                     	;# 
  1129  0EAB                     	;# 
  1130  0EAC                     	;# 
  1131  0EB1                     	;# 
  1132  0EB2                     	;# 
  1133  0EB3                     	;# 
  1134  0EB8                     	;# 
  1135  0EB9                     	;# 
  1136  0EBA                     	;# 
  1137  0EBB                     	;# 
  1138  0EBC                     	;# 
  1139  0EBD                     	;# 
  1140  0EBE                     	;# 
  1141  0EC3                     	;# 
  1142  0EC5                     	;# 
  1143  0EC6                     	;# 
  1144  0EC7                     	;# 
  1145  0EC8                     	;# 
  1146  0EC9                     	;# 
  1147  0ECA                     	;# 
  1148  0ECB                     	;# 
  1149  0ECC                     	;# 
  1150  0F10                     	;# 
  1151  0F11                     	;# 
  1152  0F12                     	;# 
  1153  0F13                     	;# 
  1154  0F14                     	;# 
  1155  0F15                     	;# 
  1156  0F16                     	;# 
  1157  0F17                     	;# 
  1158  0F18                     	;# 
  1159  0F19                     	;# 
  1160  0F1A                     	;# 
  1161  0F1B                     	;# 
  1162  0F1C                     	;# 
  1163  0F1D                     	;# 
  1164  0F1E                     	;# 
  1165  0F1F                     	;# 
  1166  0F20                     	;# 
  1167  0F21                     	;# 
  1168  0F22                     	;# 
  1169  0F23                     	;# 
  1170  0F24                     	;# 
  1171  0F25                     	;# 
  1172  0F26                     	;# 
  1173  0F27                     	;# 
  1174  0F28                     	;# 
  1175  0F29                     	;# 
  1176  0F2A                     	;# 
  1177  0F2B                     	;# 
  1178  0F2C                     	;# 
  1179  0F2D                     	;# 
  1180  0F2E                     	;# 
  1181  0F2F                     	;# 
  1182  0F30                     	;# 
  1183  0F31                     	;# 
  1184  0F32                     	;# 
  1185  0F38                     	;# 
  1186  0F39                     	;# 
  1187  0F3A                     	;# 
  1188  0F3B                     	;# 
  1189  0F3C                     	;# 
  1190  0F3D                     	;# 
  1191  0F3E                     	;# 
  1192  0F3F                     	;# 
  1193  0F40                     	;# 
  1194  0F41                     	;# 
  1195  0F43                     	;# 
  1196  0F44                     	;# 
  1197  0F45                     	;# 
  1198  0F46                     	;# 
  1199  0F47                     	;# 
  1200  0F48                     	;# 
  1201  0F49                     	;# 
  1202  0F4A                     	;# 
  1203  0F4B                     	;# 
  1204  0F4C                     	;# 
  1205  0F4E                     	;# 
  1206  0F4F                     	;# 
  1207  0F50                     	;# 
  1208  0F51                     	;# 
  1209  0F52                     	;# 
  1210  0F53                     	;# 
  1211  0F54                     	;# 
  1212  0F55                     	;# 
  1213  0F56                     	;# 
  1214  0F57                     	;# 
  1215  0F59                     	;# 
  1216  0F5A                     	;# 
  1217  0F5B                     	;# 
  1218  0F5C                     	;# 
  1219  0F5D                     	;# 
  1220  0F61                     	;# 
  1221  0F62                     	;# 
  1222  0F64                     	;# 
  1223  0F65                     	;# 
  1224  0F66                     	;# 
  1225  0F67                     	;# 
  1226  0F68                     	;# 
  1227  0F69                     	;# 
  1228  0F6A                     	;# 
  1229  0F6B                     	;# 
  1230  0F6C                     	;# 
  1231  0F6D                     	;# 
  1232  0FE4                     	;# 
  1233  0FE5                     	;# 
  1234  0FE6                     	;# 
  1235  0FE7                     	;# 
  1236  0FE8                     	;# 
  1237  0FE9                     	;# 
  1238  0FEA                     	;# 
  1239  0FEB                     	;# 
  1240  0FED                     	;# 
  1241  0FEE                     	;# 
  1242  0FEF                     	;# 
  1243  0000                     	;# 
  1244  0001                     	;# 
  1245  0002                     	;# 
  1246  0003                     	;# 
  1247  0004                     	;# 
  1248  0005                     	;# 
  1249  0006                     	;# 
  1250  0007                     	;# 
  1251  0008                     	;# 
  1252  0009                     	;# 
  1253  000A                     	;# 
  1254  000B                     	;# 
  1255  000C                     	;# 
  1256  000D                     	;# 
  1257  000E                     	;# 
  1258  000F                     	;# 
  1259  0010                     	;# 
  1260  0011                     	;# 
  1261  0012                     	;# 
  1262  0013                     	;# 
  1263  0014                     	;# 
  1264  0015                     	;# 
  1265  0016                     	;# 
  1266  0017                     	;# 
  1267  0018                     	;# 
  1268  0019                     	;# 
  1269  001A                     	;# 
  1270  001C                     	;# 
  1271  001C                     	;# 
  1272  001D                     	;# 
  1273  001D                     	;# 
  1274  001E                     	;# 
  1275  001F                     	;# 
  1276  008C                     	;# 
  1277  008C                     	;# 
  1278  008D                     	;# 
  1279  008E                     	;# 
  1280  008E                     	;# 
  1281  008F                     	;# 
  1282  0090                     	;# 
  1283  0090                     	;# 
  1284  0091                     	;# 
  1285  0093                     	;# 
  1286  0094                     	;# 
  1287  0095                     	;# 
  1288  0096                     	;# 
  1289  0097                     	;# 
  1290  0098                     	;# 
  1291  0099                     	;# 
  1292  009A                     	;# 
  1293  009B                     	;# 
  1294  009C                     	;# 
  1295  009D                     	;# 
  1296  009E                     	;# 
  1297  010C                     	;# 
  1298  010D                     	;# 
  1299  010E                     	;# 
  1300  010E                     	;# 
  1301  010F                     	;# 
  1302  0110                     	;# 
  1303  0110                     	;# 
  1304  0111                     	;# 
  1305  0112                     	;# 
  1306  0112                     	;# 
  1307  0113                     	;# 
  1308  0114                     	;# 
  1309  0114                     	;# 
  1310  0115                     	;# 
  1311  0116                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  0119                     	;# 
  1315  0119                     	;# 
  1316  0119                     	;# 
  1317  011A                     	;# 
  1318  011A                     	;# 
  1319  011A                     	;# 
  1320  011B                     	;# 
  1321  011B                     	;# 
  1322  011B                     	;# 
  1323  011B                     	;# 
  1324  011B                     	;# 
  1325  011C                     	;# 
  1326  011C                     	;# 
  1327  011C                     	;# 
  1328  011D                     	;# 
  1329  011D                     	;# 
  1330  011D                     	;# 
  1331  011E                     	;# 
  1332  011E                     	;# 
  1333  011E                     	;# 
  1334  011F                     	;# 
  1335  011F                     	;# 
  1336  011F                     	;# 
  1337  011F                     	;# 
  1338  011F                     	;# 
  1339  018C                     	;# 
  1340  018D                     	;# 
  1341  018E                     	;# 
  1342  018F                     	;# 
  1343  0190                     	;# 
  1344  0191                     	;# 
  1345  0192                     	;# 
  1346  0196                     	;# 
  1347  0197                     	;# 
  1348  0198                     	;# 
  1349  0199                     	;# 
  1350  019A                     	;# 
  1351  019B                     	;# 
  1352  019C                     	;# 
  1353  020C                     	;# 
  1354  020C                     	;# 
  1355  020D                     	;# 
  1356  020E                     	;# 
  1357  020F                     	;# 
  1358  020F                     	;# 
  1359  0210                     	;# 
  1360  0210                     	;# 
  1361  0211                     	;# 
  1362  0211                     	;# 
  1363  0212                     	;# 
  1364  0212                     	;# 
  1365  0213                     	;# 
  1366  0214                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0216                     	;# 
  1370  0216                     	;# 
  1371  0217                     	;# 
  1372  0217                     	;# 
  1373  0218                     	;# 
  1374  0218                     	;# 
  1375  0219                     	;# 
  1376  021A                     	;# 
  1377  021B                     	;# 
  1378  021B                     	;# 
  1379  021C                     	;# 
  1380  021C                     	;# 
  1381  021D                     	;# 
  1382  021D                     	;# 
  1383  021E                     	;# 
  1384  021F                     	;# 
  1385  028C                     	;# 
  1386  028C                     	;# 
  1387  028D                     	;# 
  1388  028D                     	;# 
  1389  028E                     	;# 
  1390  028F                     	;# 
  1391  0290                     	;# 
  1392  0290                     	;# 
  1393  0291                     	;# 
  1394  0292                     	;# 
  1395  0292                     	;# 
  1396  0293                     	;# 
  1397  0293                     	;# 
  1398  0294                     	;# 
  1399  0295                     	;# 
  1400  0296                     	;# 
  1401  0296                     	;# 
  1402  0297                     	;# 
  1403  0298                     	;# 
  1404  0298                     	;# 
  1405  0299                     	;# 
  1406  0299                     	;# 
  1407  029A                     	;# 
  1408  029B                     	;# 
  1409  029C                     	;# 
  1410  029C                     	;# 
  1411  029D                     	;# 
  1412  030C                     	;# 
  1413  030C                     	;# 
  1414  030D                     	;# 
  1415  030E                     	;# 
  1416  030F                     	;# 
  1417  0310                     	;# 
  1418  0310                     	;# 
  1419  0311                     	;# 
  1420  0312                     	;# 
  1421  0313                     	;# 
  1422  0314                     	;# 
  1423  0314                     	;# 
  1424  0315                     	;# 
  1425  0316                     	;# 
  1426  0317                     	;# 
  1427  0318                     	;# 
  1428  0318                     	;# 
  1429  0319                     	;# 
  1430  031A                     	;# 
  1431  031B                     	;# 
  1432  031C                     	;# 
  1433  031C                     	;# 
  1434  031D                     	;# 
  1435  031E                     	;# 
  1436  031F                     	;# 
  1437  038C                     	;# 
  1438  038C                     	;# 
  1439  038D                     	;# 
  1440  038E                     	;# 
  1441  0390                     	;# 
  1442  0390                     	;# 
  1443  0391                     	;# 
  1444  0392                     	;# 
  1445  040C                     	;# 
  1446  040D                     	;# 
  1447  040E                     	;# 
  1448  040F                     	;# 
  1449  0410                     	;# 
  1450  0411                     	;# 
  1451  0416                     	;# 
  1452  0416                     	;# 
  1453  0417                     	;# 
  1454  0418                     	;# 
  1455  0418                     	;# 
  1456  0419                     	;# 
  1457  041A                     	;# 
  1458  041A                     	;# 
  1459  041B                     	;# 
  1460  041C                     	;# 
  1461  041C                     	;# 
  1462  041D                     	;# 
  1463  041E                     	;# 
  1464  041F                     	;# 
  1465  048C                     	;# 
  1466  048C                     	;# 
  1467  048D                     	;# 
  1468  048E                     	;# 
  1469  048F                     	;# 
  1470  048F                     	;# 
  1471  0490                     	;# 
  1472  0491                     	;# 
  1473  0492                     	;# 
  1474  0492                     	;# 
  1475  0493                     	;# 
  1476  0494                     	;# 
  1477  0495                     	;# 
  1478  0495                     	;# 
  1479  0496                     	;# 
  1480  0497                     	;# 
  1481  0498                     	;# 
  1482  0499                     	;# 
  1483  049A                     	;# 
  1484  049B                     	;# 
  1485  049C                     	;# 
  1486  049D                     	;# 
  1487  050C                     	;# 
  1488  050C                     	;# 
  1489  050D                     	;# 
  1490  050E                     	;# 
  1491  050F                     	;# 
  1492  050F                     	;# 
  1493  0510                     	;# 
  1494  0511                     	;# 
  1495  0512                     	;# 
  1496  0512                     	;# 
  1497  0513                     	;# 
  1498  0514                     	;# 
  1499  0515                     	;# 
  1500  0515                     	;# 
  1501  0516                     	;# 
  1502  0517                     	;# 
  1503  0518                     	;# 
  1504  0519                     	;# 
  1505  051A                     	;# 
  1506  051B                     	;# 
  1507  051C                     	;# 
  1508  051D                     	;# 
  1509  058C                     	;# 
  1510  058C                     	;# 
  1511  058D                     	;# 
  1512  058E                     	;# 
  1513  058F                     	;# 
  1514  058F                     	;# 
  1515  0590                     	;# 
  1516  0591                     	;# 
  1517  0592                     	;# 
  1518  0593                     	;# 
  1519  060C                     	;# 
  1520  060D                     	;# 
  1521  060E                     	;# 
  1522  060F                     	;# 
  1523  0610                     	;# 
  1524  0611                     	;# 
  1525  0612                     	;# 
  1526  0613                     	;# 
  1527  0614                     	;# 
  1528  0616                     	;# 
  1529  0617                     	;# 
  1530  0618                     	;# 
  1531  0619                     	;# 
  1532  061A                     	;# 
  1533  061B                     	;# 
  1534  061C                     	;# 
  1535  061D                     	;# 
  1536  061E                     	;# 
  1537  068C                     	;# 
  1538  068D                     	;# 
  1539  068E                     	;# 
  1540  068F                     	;# 
  1541  0690                     	;# 
  1542  0691                     	;# 
  1543  0692                     	;# 
  1544  0693                     	;# 
  1545  0694                     	;# 
  1546  070C                     	;# 
  1547  070D                     	;# 
  1548  070E                     	;# 
  1549  070F                     	;# 
  1550  0710                     	;# 
  1551  0711                     	;# 
  1552  0712                     	;# 
  1553  0713                     	;# 
  1554  0714                     	;# 
  1555  0716                     	;# 
  1556  0717                     	;# 
  1557  0718                     	;# 
  1558  0719                     	;# 
  1559  071A                     	;# 
  1560  071B                     	;# 
  1561  071C                     	;# 
  1562  071D                     	;# 
  1563  071E                     	;# 
  1564  0796                     	;# 
  1565  0797                     	;# 
  1566  0798                     	;# 
  1567  0799                     	;# 
  1568  079A                     	;# 
  1569  079B                     	;# 
  1570  080C                     	;# 
  1571  080D                     	;# 
  1572  080E                     	;# 
  1573  080F                     	;# 
  1574  0810                     	;# 
  1575  0811                     	;# 
  1576  0812                     	;# 
  1577  0813                     	;# 
  1578  0814                     	;# 
  1579  081A                     	;# 
  1580  081B                     	;# 
  1581  081C                     	;# 
  1582  081D                     	;# 
  1583  081E                     	;# 
  1584  081F                     	;# 
  1585  088C                     	;# 
  1586  088D                     	;# 
  1587  088E                     	;# 
  1588  088F                     	;# 
  1589  0890                     	;# 
  1590  0891                     	;# 
  1591  0892                     	;# 
  1592  0893                     	;# 
  1593  0895                     	;# 
  1594  0896                     	;# 
  1595  0897                     	;# 
  1596  0898                     	;# 
  1597  0899                     	;# 
  1598  089A                     	;# 
  1599  089B                     	;# 
  1600  090C                     	;# 
  1601  090E                     	;# 
  1602  090F                     	;# 
  1603  091F                     	;# 
  1604  091F                     	;# 
  1605  098F                     	;# 
  1606  098F                     	;# 
  1607  0990                     	;# 
  1608  0991                     	;# 
  1609  0992                     	;# 
  1610  0993                     	;# 
  1611  0994                     	;# 
  1612  0995                     	;# 
  1613  0996                     	;# 
  1614  0997                     	;# 
  1615  0E0F                     	;# 
  1616  0E10                     	;# 
  1617  0E11                     	;# 
  1618  0E12                     	;# 
  1619  0E13                     	;# 
  1620  0E14                     	;# 
  1621  0E15                     	;# 
  1622  0E16                     	;# 
  1623  0E17                     	;# 
  1624  0E18                     	;# 
  1625  0E19                     	;# 
  1626  0E1A                     	;# 
  1627  0E1B                     	;# 
  1628  0E1C                     	;# 
  1629  0E1D                     	;# 
  1630  0E1E                     	;# 
  1631  0E1F                     	;# 
  1632  0E20                     	;# 
  1633  0E21                     	;# 
  1634  0E22                     	;# 
  1635  0E23                     	;# 
  1636  0E24                     	;# 
  1637  0E25                     	;# 
  1638  0E26                     	;# 
  1639  0E27                     	;# 
  1640  0E28                     	;# 
  1641  0E29                     	;# 
  1642  0E2A                     	;# 
  1643  0E2B                     	;# 
  1644  0E2C                     	;# 
  1645  0E2D                     	;# 
  1646  0E2E                     	;# 
  1647  0E2F                     	;# 
  1648  0E30                     	;# 
  1649  0E31                     	;# 
  1650  0E32                     	;# 
  1651  0E33                     	;# 
  1652  0E34                     	;# 
  1653  0E35                     	;# 
  1654  0E36                     	;# 
  1655  0E37                     	;# 
  1656  0E8F                     	;# 
  1657  0E90                     	;# 
  1658  0E91                     	;# 
  1659  0E92                     	;# 
  1660  0E93                     	;# 
  1661  0E94                     	;# 
  1662  0E95                     	;# 
  1663  0E96                     	;# 
  1664  0E97                     	;# 
  1665  0E9C                     	;# 
  1666  0E9D                     	;# 
  1667  0E9E                     	;# 
  1668  0EA1                     	;# 
  1669  0EA2                     	;# 
  1670  0EA3                     	;# 
  1671  0EA4                     	;# 
  1672  0EA5                     	;# 
  1673  0EA9                     	;# 
  1674  0EAA                     	;# 
  1675  0EAB                     	;# 
  1676  0EAC                     	;# 
  1677  0EB1                     	;# 
  1678  0EB2                     	;# 
  1679  0EB3                     	;# 
  1680  0EB8                     	;# 
  1681  0EB9                     	;# 
  1682  0EBA                     	;# 
  1683  0EBB                     	;# 
  1684  0EBC                     	;# 
  1685  0EBD                     	;# 
  1686  0EBE                     	;# 
  1687  0EC3                     	;# 
  1688  0EC5                     	;# 
  1689  0EC6                     	;# 
  1690  0EC7                     	;# 
  1691  0EC8                     	;# 
  1692  0EC9                     	;# 
  1693  0ECA                     	;# 
  1694  0ECB                     	;# 
  1695  0ECC                     	;# 
  1696  0F10                     	;# 
  1697  0F11                     	;# 
  1698  0F12                     	;# 
  1699  0F13                     	;# 
  1700  0F14                     	;# 
  1701  0F15                     	;# 
  1702  0F16                     	;# 
  1703  0F17                     	;# 
  1704  0F18                     	;# 
  1705  0F19                     	;# 
  1706  0F1A                     	;# 
  1707  0F1B                     	;# 
  1708  0F1C                     	;# 
  1709  0F1D                     	;# 
  1710  0F1E                     	;# 
  1711  0F1F                     	;# 
  1712  0F20                     	;# 
  1713  0F21                     	;# 
  1714  0F22                     	;# 
  1715  0F23                     	;# 
  1716  0F24                     	;# 
  1717  0F25                     	;# 
  1718  0F26                     	;# 
  1719  0F27                     	;# 
  1720  0F28                     	;# 
  1721  0F29                     	;# 
  1722  0F2A                     	;# 
  1723  0F2B                     	;# 
  1724  0F2C                     	;# 
  1725  0F2D                     	;# 
  1726  0F2E                     	;# 
  1727  0F2F                     	;# 
  1728  0F30                     	;# 
  1729  0F31                     	;# 
  1730  0F32                     	;# 
  1731  0F38                     	;# 
  1732  0F39                     	;# 
  1733  0F3A                     	;# 
  1734  0F3B                     	;# 
  1735  0F3C                     	;# 
  1736  0F3D                     	;# 
  1737  0F3E                     	;# 
  1738  0F3F                     	;# 
  1739  0F40                     	;# 
  1740  0F41                     	;# 
  1741  0F43                     	;# 
  1742  0F44                     	;# 
  1743  0F45                     	;# 
  1744  0F46                     	;# 
  1745  0F47                     	;# 
  1746  0F48                     	;# 
  1747  0F49                     	;# 
  1748  0F4A                     	;# 
  1749  0F4B                     	;# 
  1750  0F4C                     	;# 
  1751  0F4E                     	;# 
  1752  0F4F                     	;# 
  1753  0F50                     	;# 
  1754  0F51                     	;# 
  1755  0F52                     	;# 
  1756  0F53                     	;# 
  1757  0F54                     	;# 
  1758  0F55                     	;# 
  1759  0F56                     	;# 
  1760  0F57                     	;# 
  1761  0F59                     	;# 
  1762  0F5A                     	;# 
  1763  0F5B                     	;# 
  1764  0F5C                     	;# 
  1765  0F5D                     	;# 
  1766  0F61                     	;# 
  1767  0F62                     	;# 
  1768  0F64                     	;# 
  1769  0F65                     	;# 
  1770  0F66                     	;# 
  1771  0F67                     	;# 
  1772  0F68                     	;# 
  1773  0F69                     	;# 
  1774  0F6A                     	;# 
  1775  0F6B                     	;# 
  1776  0F6C                     	;# 
  1777  0F6D                     	;# 
  1778  0FE4                     	;# 
  1779  0FE5                     	;# 
  1780  0FE6                     	;# 
  1781  0FE7                     	;# 
  1782  0FE8                     	;# 
  1783  0FE9                     	;# 
  1784  0FEA                     	;# 
  1785  0FEB                     	;# 
  1786  0FED                     	;# 
  1787  0FEE                     	;# 
  1788  0FEF                     	;# 
  1789  0000                     	;# 
  1790  0001                     	;# 
  1791  0002                     	;# 
  1792  0003                     	;# 
  1793  0004                     	;# 
  1794  0005                     	;# 
  1795  0006                     	;# 
  1796  0007                     	;# 
  1797  0008                     	;# 
  1798  0009                     	;# 
  1799  000A                     	;# 
  1800  000B                     	;# 
  1801  000C                     	;# 
  1802  000D                     	;# 
  1803  000E                     	;# 
  1804  000F                     	;# 
  1805  0010                     	;# 
  1806  0011                     	;# 
  1807  0012                     	;# 
  1808  0013                     	;# 
  1809  0014                     	;# 
  1810  0015                     	;# 
  1811  0016                     	;# 
  1812  0017                     	;# 
  1813  0018                     	;# 
  1814  0019                     	;# 
  1815  001A                     	;# 
  1816  001C                     	;# 
  1817  001C                     	;# 
  1818  001D                     	;# 
  1819  001D                     	;# 
  1820  001E                     	;# 
  1821  001F                     	;# 
  1822  008C                     	;# 
  1823  008C                     	;# 
  1824  008D                     	;# 
  1825  008E                     	;# 
  1826  008E                     	;# 
  1827  008F                     	;# 
  1828  0090                     	;# 
  1829  0090                     	;# 
  1830  0091                     	;# 
  1831  0093                     	;# 
  1832  0094                     	;# 
  1833  0095                     	;# 
  1834  0096                     	;# 
  1835  0097                     	;# 
  1836  0098                     	;# 
  1837  0099                     	;# 
  1838  009A                     	;# 
  1839  009B                     	;# 
  1840  009C                     	;# 
  1841  009D                     	;# 
  1842  009E                     	;# 
  1843  010C                     	;# 
  1844  010D                     	;# 
  1845  010E                     	;# 
  1846  010E                     	;# 
  1847  010F                     	;# 
  1848  0110                     	;# 
  1849  0110                     	;# 
  1850  0111                     	;# 
  1851  0112                     	;# 
  1852  0112                     	;# 
  1853  0113                     	;# 
  1854  0114                     	;# 
  1855  0114                     	;# 
  1856  0115                     	;# 
  1857  0116                     	;# 
  1858  0116                     	;# 
  1859  0117                     	;# 
  1860  0119                     	;# 
  1861  0119                     	;# 
  1862  0119                     	;# 
  1863  011A                     	;# 
  1864  011A                     	;# 
  1865  011A                     	;# 
  1866  011B                     	;# 
  1867  011B                     	;# 
  1868  011B                     	;# 
  1869  011B                     	;# 
  1870  011B                     	;# 
  1871  011C                     	;# 
  1872  011C                     	;# 
  1873  011C                     	;# 
  1874  011D                     	;# 
  1875  011D                     	;# 
  1876  011D                     	;# 
  1877  011E                     	;# 
  1878  011E                     	;# 
  1879  011E                     	;# 
  1880  011F                     	;# 
  1881  011F                     	;# 
  1882  011F                     	;# 
  1883  011F                     	;# 
  1884  011F                     	;# 
  1885  018C                     	;# 
  1886  018D                     	;# 
  1887  018E                     	;# 
  1888  018F                     	;# 
  1889  0190                     	;# 
  1890  0191                     	;# 
  1891  0192                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0198                     	;# 
  1895  0199                     	;# 
  1896  019A                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  020C                     	;# 
  1900  020C                     	;# 
  1901  020D                     	;# 
  1902  020E                     	;# 
  1903  020F                     	;# 
  1904  020F                     	;# 
  1905  0210                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0218                     	;# 
  1920  0218                     	;# 
  1921  0219                     	;# 
  1922  021A                     	;# 
  1923  021B                     	;# 
  1924  021B                     	;# 
  1925  021C                     	;# 
  1926  021C                     	;# 
  1927  021D                     	;# 
  1928  021D                     	;# 
  1929  021E                     	;# 
  1930  021F                     	;# 
  1931  028C                     	;# 
  1932  028C                     	;# 
  1933  028D                     	;# 
  1934  028D                     	;# 
  1935  028E                     	;# 
  1936  028F                     	;# 
  1937  0290                     	;# 
  1938  0290                     	;# 
  1939  0291                     	;# 
  1940  0292                     	;# 
  1941  0292                     	;# 
  1942  0293                     	;# 
  1943  0293                     	;# 
  1944  0294                     	;# 
  1945  0295                     	;# 
  1946  0296                     	;# 
  1947  0296                     	;# 
  1948  0297                     	;# 
  1949  0298                     	;# 
  1950  0298                     	;# 
  1951  0299                     	;# 
  1952  0299                     	;# 
  1953  029A                     	;# 
  1954  029B                     	;# 
  1955  029C                     	;# 
  1956  029C                     	;# 
  1957  029D                     	;# 
  1958  030C                     	;# 
  1959  030C                     	;# 
  1960  030D                     	;# 
  1961  030E                     	;# 
  1962  030F                     	;# 
  1963  0310                     	;# 
  1964  0310                     	;# 
  1965  0311                     	;# 
  1966  0312                     	;# 
  1967  0313                     	;# 
  1968  0314                     	;# 
  1969  0314                     	;# 
  1970  0315                     	;# 
  1971  0316                     	;# 
  1972  0317                     	;# 
  1973  0318                     	;# 
  1974  0318                     	;# 
  1975  0319                     	;# 
  1976  031A                     	;# 
  1977  031B                     	;# 
  1978  031C                     	;# 
  1979  031C                     	;# 
  1980  031D                     	;# 
  1981  031E                     	;# 
  1982  031F                     	;# 
  1983  038C                     	;# 
  1984  038C                     	;# 
  1985  038D                     	;# 
  1986  038E                     	;# 
  1987  0390                     	;# 
  1988  0390                     	;# 
  1989  0391                     	;# 
  1990  0392                     	;# 
  1991  040C                     	;# 
  1992  040D                     	;# 
  1993  040E                     	;# 
  1994  040F                     	;# 
  1995  0410                     	;# 
  1996  0411                     	;# 
  1997  0416                     	;# 
  1998  0416                     	;# 
  1999  0417                     	;# 
  2000  0418                     	;# 
  2001  0418                     	;# 
  2002  0419                     	;# 
  2003  041A                     	;# 
  2004  041A                     	;# 
  2005  041B                     	;# 
  2006  041C                     	;# 
  2007  041C                     	;# 
  2008  041D                     	;# 
  2009  041E                     	;# 
  2010  041F                     	;# 
  2011  048C                     	;# 
  2012  048C                     	;# 
  2013  048D                     	;# 
  2014  048E                     	;# 
  2015  048F                     	;# 
  2016  048F                     	;# 
  2017  0490                     	;# 
  2018  0491                     	;# 
  2019  0492                     	;# 
  2020  0492                     	;# 
  2021  0493                     	;# 
  2022  0494                     	;# 
  2023  0495                     	;# 
  2024  0495                     	;# 
  2025  0496                     	;# 
  2026  0497                     	;# 
  2027  0498                     	;# 
  2028  0499                     	;# 
  2029  049A                     	;# 
  2030  049B                     	;# 
  2031  049C                     	;# 
  2032  049D                     	;# 
  2033  050C                     	;# 
  2034  050C                     	;# 
  2035  050D                     	;# 
  2036  050E                     	;# 
  2037  050F                     	;# 
  2038  050F                     	;# 
  2039  0510                     	;# 
  2040  0511                     	;# 
  2041  0512                     	;# 
  2042  0512                     	;# 
  2043  0513                     	;# 
  2044  0514                     	;# 
  2045  0515                     	;# 
  2046  0515                     	;# 
  2047  0516                     	;# 
  2048  0517                     	;# 
  2049  0518                     	;# 
  2050  0519                     	;# 
  2051  051A                     	;# 
  2052  051B                     	;# 
  2053  051C                     	;# 
  2054  051D                     	;# 
  2055  058C                     	;# 
  2056  058C                     	;# 
  2057  058D                     	;# 
  2058  058E                     	;# 
  2059  058F                     	;# 
  2060  058F                     	;# 
  2061  0590                     	;# 
  2062  0591                     	;# 
  2063  0592                     	;# 
  2064  0593                     	;# 
  2065  060C                     	;# 
  2066  060D                     	;# 
  2067  060E                     	;# 
  2068  060F                     	;# 
  2069  0610                     	;# 
  2070  0611                     	;# 
  2071  0612                     	;# 
  2072  0613                     	;# 
  2073  0614                     	;# 
  2074  0616                     	;# 
  2075  0617                     	;# 
  2076  0618                     	;# 
  2077  0619                     	;# 
  2078  061A                     	;# 
  2079  061B                     	;# 
  2080  061C                     	;# 
  2081  061D                     	;# 
  2082  061E                     	;# 
  2083  068C                     	;# 
  2084  068D                     	;# 
  2085  068E                     	;# 
  2086  068F                     	;# 
  2087  0690                     	;# 
  2088  0691                     	;# 
  2089  0692                     	;# 
  2090  0693                     	;# 
  2091  0694                     	;# 
  2092  070C                     	;# 
  2093  070D                     	;# 
  2094  070E                     	;# 
  2095  070F                     	;# 
  2096  0710                     	;# 
  2097  0711                     	;# 
  2098  0712                     	;# 
  2099  0713                     	;# 
  2100  0714                     	;# 
  2101  0716                     	;# 
  2102  0717                     	;# 
  2103  0718                     	;# 
  2104  0719                     	;# 
  2105  071A                     	;# 
  2106  071B                     	;# 
  2107  071C                     	;# 
  2108  071D                     	;# 
  2109  071E                     	;# 
  2110  0796                     	;# 
  2111  0797                     	;# 
  2112  0798                     	;# 
  2113  0799                     	;# 
  2114  079A                     	;# 
  2115  079B                     	;# 
  2116  080C                     	;# 
  2117  080D                     	;# 
  2118  080E                     	;# 
  2119  080F                     	;# 
  2120  0810                     	;# 
  2121  0811                     	;# 
  2122  0812                     	;# 
  2123  0813                     	;# 
  2124  0814                     	;# 
  2125  081A                     	;# 
  2126  081B                     	;# 
  2127  081C                     	;# 
  2128  081D                     	;# 
  2129  081E                     	;# 
  2130  081F                     	;# 
  2131  088C                     	;# 
  2132  088D                     	;# 
  2133  088E                     	;# 
  2134  088F                     	;# 
  2135  0890                     	;# 
  2136  0891                     	;# 
  2137  0892                     	;# 
  2138  0893                     	;# 
  2139  0895                     	;# 
  2140  0896                     	;# 
  2141  0897                     	;# 
  2142  0898                     	;# 
  2143  0899                     	;# 
  2144  089A                     	;# 
  2145  089B                     	;# 
  2146  090C                     	;# 
  2147  090E                     	;# 
  2148  090F                     	;# 
  2149  091F                     	;# 
  2150  091F                     	;# 
  2151  098F                     	;# 
  2152  098F                     	;# 
  2153  0990                     	;# 
  2154  0991                     	;# 
  2155  0992                     	;# 
  2156  0993                     	;# 
  2157  0994                     	;# 
  2158  0995                     	;# 
  2159  0996                     	;# 
  2160  0997                     	;# 
  2161  0E0F                     	;# 
  2162  0E10                     	;# 
  2163  0E11                     	;# 
  2164  0E12                     	;# 
  2165  0E13                     	;# 
  2166  0E14                     	;# 
  2167  0E15                     	;# 
  2168  0E16                     	;# 
  2169  0E17                     	;# 
  2170  0E18                     	;# 
  2171  0E19                     	;# 
  2172  0E1A                     	;# 
  2173  0E1B                     	;# 
  2174  0E1C                     	;# 
  2175  0E1D                     	;# 
  2176  0E1E                     	;# 
  2177  0E1F                     	;# 
  2178  0E20                     	;# 
  2179  0E21                     	;# 
  2180  0E22                     	;# 
  2181  0E23                     	;# 
  2182  0E24                     	;# 
  2183  0E25                     	;# 
  2184  0E26                     	;# 
  2185  0E27                     	;# 
  2186  0E28                     	;# 
  2187  0E29                     	;# 
  2188  0E2A                     	;# 
  2189  0E2B                     	;# 
  2190  0E2C                     	;# 
  2191  0E2D                     	;# 
  2192  0E2E                     	;# 
  2193  0E2F                     	;# 
  2194  0E30                     	;# 
  2195  0E31                     	;# 
  2196  0E32                     	;# 
  2197  0E33                     	;# 
  2198  0E34                     	;# 
  2199  0E35                     	;# 
  2200  0E36                     	;# 
  2201  0E37                     	;# 
  2202  0E8F                     	;# 
  2203  0E90                     	;# 
  2204  0E91                     	;# 
  2205  0E92                     	;# 
  2206  0E93                     	;# 
  2207  0E94                     	;# 
  2208  0E95                     	;# 
  2209  0E96                     	;# 
  2210  0E97                     	;# 
  2211  0E9C                     	;# 
  2212  0E9D                     	;# 
  2213  0E9E                     	;# 
  2214  0EA1                     	;# 
  2215  0EA2                     	;# 
  2216  0EA3                     	;# 
  2217  0EA4                     	;# 
  2218  0EA5                     	;# 
  2219  0EA9                     	;# 
  2220  0EAA                     	;# 
  2221  0EAB                     	;# 
  2222  0EAC                     	;# 
  2223  0EB1                     	;# 
  2224  0EB2                     	;# 
  2225  0EB3                     	;# 
  2226  0EB8                     	;# 
  2227  0EB9                     	;# 
  2228  0EBA                     	;# 
  2229  0EBB                     	;# 
  2230  0EBC                     	;# 
  2231  0EBD                     	;# 
  2232  0EBE                     	;# 
  2233  0EC3                     	;# 
  2234  0EC5                     	;# 
  2235  0EC6                     	;# 
  2236  0EC7                     	;# 
  2237  0EC8                     	;# 
  2238  0EC9                     	;# 
  2239  0ECA                     	;# 
  2240  0ECB                     	;# 
  2241  0ECC                     	;# 
  2242  0F10                     	;# 
  2243  0F11                     	;# 
  2244  0F12                     	;# 
  2245  0F13                     	;# 
  2246  0F14                     	;# 
  2247  0F15                     	;# 
  2248  0F16                     	;# 
  2249  0F17                     	;# 
  2250  0F18                     	;# 
  2251  0F19                     	;# 
  2252  0F1A                     	;# 
  2253  0F1B                     	;# 
  2254  0F1C                     	;# 
  2255  0F1D                     	;# 
  2256  0F1E                     	;# 
  2257  0F1F                     	;# 
  2258  0F20                     	;# 
  2259  0F21                     	;# 
  2260  0F22                     	;# 
  2261  0F23                     	;# 
  2262  0F24                     	;# 
  2263  0F25                     	;# 
  2264  0F26                     	;# 
  2265  0F27                     	;# 
  2266  0F28                     	;# 
  2267  0F29                     	;# 
  2268  0F2A                     	;# 
  2269  0F2B                     	;# 
  2270  0F2C                     	;# 
  2271  0F2D                     	;# 
  2272  0F2E                     	;# 
  2273  0F2F                     	;# 
  2274  0F30                     	;# 
  2275  0F31                     	;# 
  2276  0F32                     	;# 
  2277  0F38                     	;# 
  2278  0F39                     	;# 
  2279  0F3A                     	;# 
  2280  0F3B                     	;# 
  2281  0F3C                     	;# 
  2282  0F3D                     	;# 
  2283  0F3E                     	;# 
  2284  0F3F                     	;# 
  2285  0F40                     	;# 
  2286  0F41                     	;# 
  2287  0F43                     	;# 
  2288  0F44                     	;# 
  2289  0F45                     	;# 
  2290  0F46                     	;# 
  2291  0F47                     	;# 
  2292  0F48                     	;# 
  2293  0F49                     	;# 
  2294  0F4A                     	;# 
  2295  0F4B                     	;# 
  2296  0F4C                     	;# 
  2297  0F4E                     	;# 
  2298  0F4F                     	;# 
  2299  0F50                     	;# 
  2300  0F51                     	;# 
  2301  0F52                     	;# 
  2302  0F53                     	;# 
  2303  0F54                     	;# 
  2304  0F55                     	;# 
  2305  0F56                     	;# 
  2306  0F57                     	;# 
  2307  0F59                     	;# 
  2308  0F5A                     	;# 
  2309  0F5B                     	;# 
  2310  0F5C                     	;# 
  2311  0F5D                     	;# 
  2312  0F61                     	;# 
  2313  0F62                     	;# 
  2314  0F64                     	;# 
  2315  0F65                     	;# 
  2316  0F66                     	;# 
  2317  0F67                     	;# 
  2318  0F68                     	;# 
  2319  0F69                     	;# 
  2320  0F6A                     	;# 
  2321  0F6B                     	;# 
  2322  0F6C                     	;# 
  2323  0F6D                     	;# 
  2324  0FE4                     	;# 
  2325  0FE5                     	;# 
  2326  0FE6                     	;# 
  2327  0FE7                     	;# 
  2328  0FE8                     	;# 
  2329  0FE9                     	;# 
  2330  0FEA                     	;# 
  2331  0FEB                     	;# 
  2332  0FED                     	;# 
  2333  0FEE                     	;# 
  2334  0FEF                     	;# 
  2335  0000                     	;# 
  2336  0001                     	;# 
  2337  0002                     	;# 
  2338  0003                     	;# 
  2339  0004                     	;# 
  2340  0005                     	;# 
  2341  0006                     	;# 
  2342  0007                     	;# 
  2343  0008                     	;# 
  2344  0009                     	;# 
  2345  000A                     	;# 
  2346  000B                     	;# 
  2347  000C                     	;# 
  2348  000D                     	;# 
  2349  000E                     	;# 
  2350  000F                     	;# 
  2351  0010                     	;# 
  2352  0011                     	;# 
  2353  0012                     	;# 
  2354  0013                     	;# 
  2355  0014                     	;# 
  2356  0015                     	;# 
  2357  0016                     	;# 
  2358  0017                     	;# 
  2359  0018                     	;# 
  2360  0019                     	;# 
  2361  001A                     	;# 
  2362  001C                     	;# 
  2363  001C                     	;# 
  2364  001D                     	;# 
  2365  001D                     	;# 
  2366  001E                     	;# 
  2367  001F                     	;# 
  2368  008C                     	;# 
  2369  008C                     	;# 
  2370  008D                     	;# 
  2371  008E                     	;# 
  2372  008E                     	;# 
  2373  008F                     	;# 
  2374  0090                     	;# 
  2375  0090                     	;# 
  2376  0091                     	;# 
  2377  0093                     	;# 
  2378  0094                     	;# 
  2379  0095                     	;# 
  2380  0096                     	;# 
  2381  0097                     	;# 
  2382  0098                     	;# 
  2383  0099                     	;# 
  2384  009A                     	;# 
  2385  009B                     	;# 
  2386  009C                     	;# 
  2387  009D                     	;# 
  2388  009E                     	;# 
  2389  010C                     	;# 
  2390  010D                     	;# 
  2391  010E                     	;# 
  2392  010E                     	;# 
  2393  010F                     	;# 
  2394  0110                     	;# 
  2395  0110                     	;# 
  2396  0111                     	;# 
  2397  0112                     	;# 
  2398  0112                     	;# 
  2399  0113                     	;# 
  2400  0114                     	;# 
  2401  0114                     	;# 
  2402  0115                     	;# 
  2403  0116                     	;# 
  2404  0116                     	;# 
  2405  0117                     	;# 
  2406  0119                     	;# 
  2407  0119                     	;# 
  2408  0119                     	;# 
  2409  011A                     	;# 
  2410  011A                     	;# 
  2411  011A                     	;# 
  2412  011B                     	;# 
  2413  011B                     	;# 
  2414  011B                     	;# 
  2415  011B                     	;# 
  2416  011B                     	;# 
  2417  011C                     	;# 
  2418  011C                     	;# 
  2419  011C                     	;# 
  2420  011D                     	;# 
  2421  011D                     	;# 
  2422  011D                     	;# 
  2423  011E                     	;# 
  2424  011E                     	;# 
  2425  011E                     	;# 
  2426  011F                     	;# 
  2427  011F                     	;# 
  2428  011F                     	;# 
  2429  011F                     	;# 
  2430  011F                     	;# 
  2431  018C                     	;# 
  2432  018D                     	;# 
  2433  018E                     	;# 
  2434  018F                     	;# 
  2435  0190                     	;# 
  2436  0191                     	;# 
  2437  0192                     	;# 
  2438  0196                     	;# 
  2439  0197                     	;# 
  2440  0198                     	;# 
  2441  0199                     	;# 
  2442  019A                     	;# 
  2443  019B                     	;# 
  2444  019C                     	;# 
  2445  020C                     	;# 
  2446  020C                     	;# 
  2447  020D                     	;# 
  2448  020E                     	;# 
  2449  020F                     	;# 
  2450  020F                     	;# 
  2451  0210                     	;# 
  2452  0210                     	;# 
  2453  0211                     	;# 
  2454  0211                     	;# 
  2455  0212                     	;# 
  2456  0212                     	;# 
  2457  0213                     	;# 
  2458  0214                     	;# 
  2459  0215                     	;# 
  2460  0215                     	;# 
  2461  0216                     	;# 
  2462  0216                     	;# 
  2463  0217                     	;# 
  2464  0217                     	;# 
  2465  0218                     	;# 
  2466  0218                     	;# 
  2467  0219                     	;# 
  2468  021A                     	;# 
  2469  021B                     	;# 
  2470  021B                     	;# 
  2471  021C                     	;# 
  2472  021C                     	;# 
  2473  021D                     	;# 
  2474  021D                     	;# 
  2475  021E                     	;# 
  2476  021F                     	;# 
  2477  028C                     	;# 
  2478  028C                     	;# 
  2479  028D                     	;# 
  2480  028D                     	;# 
  2481  028E                     	;# 
  2482  028F                     	;# 
  2483  0290                     	;# 
  2484  0290                     	;# 
  2485  0291                     	;# 
  2486  0292                     	;# 
  2487  0292                     	;# 
  2488  0293                     	;# 
  2489  0293                     	;# 
  2490  0294                     	;# 
  2491  0295                     	;# 
  2492  0296                     	;# 
  2493  0296                     	;# 
  2494  0297                     	;# 
  2495  0298                     	;# 
  2496  0298                     	;# 
  2497  0299                     	;# 
  2498  0299                     	;# 
  2499  029A                     	;# 
  2500  029B                     	;# 
  2501  029C                     	;# 
  2502  029C                     	;# 
  2503  029D                     	;# 
  2504  030C                     	;# 
  2505  030C                     	;# 
  2506  030D                     	;# 
  2507  030E                     	;# 
  2508  030F                     	;# 
  2509  0310                     	;# 
  2510  0310                     	;# 
  2511  0311                     	;# 
  2512  0312                     	;# 
  2513  0313                     	;# 
  2514  0314                     	;# 
  2515  0314                     	;# 
  2516  0315                     	;# 
  2517  0316                     	;# 
  2518  0317                     	;# 
  2519  0318                     	;# 
  2520  0318                     	;# 
  2521  0319                     	;# 
  2522  031A                     	;# 
  2523  031B                     	;# 
  2524  031C                     	;# 
  2525  031C                     	;# 
  2526  031D                     	;# 
  2527  031E                     	;# 
  2528  031F                     	;# 
  2529  038C                     	;# 
  2530  038C                     	;# 
  2531  038D                     	;# 
  2532  038E                     	;# 
  2533  0390                     	;# 
  2534  0390                     	;# 
  2535  0391                     	;# 
  2536  0392                     	;# 
  2537  040C                     	;# 
  2538  040D                     	;# 
  2539  040E                     	;# 
  2540  040F                     	;# 
  2541  0410                     	;# 
  2542  0411                     	;# 
  2543  0416                     	;# 
  2544  0416                     	;# 
  2545  0417                     	;# 
  2546  0418                     	;# 
  2547  0418                     	;# 
  2548  0419                     	;# 
  2549  041A                     	;# 
  2550  041A                     	;# 
  2551  041B                     	;# 
  2552  041C                     	;# 
  2553  041C                     	;# 
  2554  041D                     	;# 
  2555  041E                     	;# 
  2556  041F                     	;# 
  2557  048C                     	;# 
  2558  048C                     	;# 
  2559  048D                     	;# 
  2560  048E                     	;# 
  2561  048F                     	;# 
  2562  048F                     	;# 
  2563  0490                     	;# 
  2564  0491                     	;# 
  2565  0492                     	;# 
  2566  0492                     	;# 
  2567  0493                     	;# 
  2568  0494                     	;# 
  2569  0495                     	;# 
  2570  0495                     	;# 
  2571  0496                     	;# 
  2572  0497                     	;# 
  2573  0498                     	;# 
  2574  0499                     	;# 
  2575  049A                     	;# 
  2576  049B                     	;# 
  2577  049C                     	;# 
  2578  049D                     	;# 
  2579  050C                     	;# 
  2580  050C                     	;# 
  2581  050D                     	;# 
  2582  050E                     	;# 
  2583  050F                     	;# 
  2584  050F                     	;# 
  2585  0510                     	;# 
  2586  0511                     	;# 
  2587  0512                     	;# 
  2588  0512                     	;# 
  2589  0513                     	;# 
  2590  0514                     	;# 
  2591  0515                     	;# 
  2592  0515                     	;# 
  2593  0516                     	;# 
  2594  0517                     	;# 
  2595  0518                     	;# 
  2596  0519                     	;# 
  2597  051A                     	;# 
  2598  051B                     	;# 
  2599  051C                     	;# 
  2600  051D                     	;# 
  2601  058C                     	;# 
  2602  058C                     	;# 
  2603  058D                     	;# 
  2604  058E                     	;# 
  2605  058F                     	;# 
  2606  058F                     	;# 
  2607  0590                     	;# 
  2608  0591                     	;# 
  2609  0592                     	;# 
  2610  0593                     	;# 
  2611  060C                     	;# 
  2612  060D                     	;# 
  2613  060E                     	;# 
  2614  060F                     	;# 
  2615  0610                     	;# 
  2616  0611                     	;# 
  2617  0612                     	;# 
  2618  0613                     	;# 
  2619  0614                     	;# 
  2620  0616                     	;# 
  2621  0617                     	;# 
  2622  0618                     	;# 
  2623  0619                     	;# 
  2624  061A                     	;# 
  2625  061B                     	;# 
  2626  061C                     	;# 
  2627  061D                     	;# 
  2628  061E                     	;# 
  2629  068C                     	;# 
  2630  068D                     	;# 
  2631  068E                     	;# 
  2632  068F                     	;# 
  2633  0690                     	;# 
  2634  0691                     	;# 
  2635  0692                     	;# 
  2636  0693                     	;# 
  2637  0694                     	;# 
  2638  070C                     	;# 
  2639  070D                     	;# 
  2640  070E                     	;# 
  2641  070F                     	;# 
  2642  0710                     	;# 
  2643  0711                     	;# 
  2644  0712                     	;# 
  2645  0713                     	;# 
  2646  0714                     	;# 
  2647  0716                     	;# 
  2648  0717                     	;# 
  2649  0718                     	;# 
  2650  0719                     	;# 
  2651  071A                     	;# 
  2652  071B                     	;# 
  2653  071C                     	;# 
  2654  071D                     	;# 
  2655  071E                     	;# 
  2656  0796                     	;# 
  2657  0797                     	;# 
  2658  0798                     	;# 
  2659  0799                     	;# 
  2660  079A                     	;# 
  2661  079B                     	;# 
  2662  080C                     	;# 
  2663  080D                     	;# 
  2664  080E                     	;# 
  2665  080F                     	;# 
  2666  0810                     	;# 
  2667  0811                     	;# 
  2668  0812                     	;# 
  2669  0813                     	;# 
  2670  0814                     	;# 
  2671  081A                     	;# 
  2672  081B                     	;# 
  2673  081C                     	;# 
  2674  081D                     	;# 
  2675  081E                     	;# 
  2676  081F                     	;# 
  2677  088C                     	;# 
  2678  088D                     	;# 
  2679  088E                     	;# 
  2680  088F                     	;# 
  2681  0890                     	;# 
  2682  0891                     	;# 
  2683  0892                     	;# 
  2684  0893                     	;# 
  2685  0895                     	;# 
  2686  0896                     	;# 
  2687  0897                     	;# 
  2688  0898                     	;# 
  2689  0899                     	;# 
  2690  089A                     	;# 
  2691  089B                     	;# 
  2692  090C                     	;# 
  2693  090E                     	;# 
  2694  090F                     	;# 
  2695  091F                     	;# 
  2696  091F                     	;# 
  2697  098F                     	;# 
  2698  098F                     	;# 
  2699  0990                     	;# 
  2700  0991                     	;# 
  2701  0992                     	;# 
  2702  0993                     	;# 
  2703  0994                     	;# 
  2704  0995                     	;# 
  2705  0996                     	;# 
  2706  0997                     	;# 
  2707  0E0F                     	;# 
  2708  0E10                     	;# 
  2709  0E11                     	;# 
  2710  0E12                     	;# 
  2711  0E13                     	;# 
  2712  0E14                     	;# 
  2713  0E15                     	;# 
  2714  0E16                     	;# 
  2715  0E17                     	;# 
  2716  0E18                     	;# 
  2717  0E19                     	;# 
  2718  0E1A                     	;# 
  2719  0E1B                     	;# 
  2720  0E1C                     	;# 
  2721  0E1D                     	;# 
  2722  0E1E                     	;# 
  2723  0E1F                     	;# 
  2724  0E20                     	;# 
  2725  0E21                     	;# 
  2726  0E22                     	;# 
  2727  0E23                     	;# 
  2728  0E24                     	;# 
  2729  0E25                     	;# 
  2730  0E26                     	;# 
  2731  0E27                     	;# 
  2732  0E28                     	;# 
  2733  0E29                     	;# 
  2734  0E2A                     	;# 
  2735  0E2B                     	;# 
  2736  0E2C                     	;# 
  2737  0E2D                     	;# 
  2738  0E2E                     	;# 
  2739  0E2F                     	;# 
  2740  0E30                     	;# 
  2741  0E31                     	;# 
  2742  0E32                     	;# 
  2743  0E33                     	;# 
  2744  0E34                     	;# 
  2745  0E35                     	;# 
  2746  0E36                     	;# 
  2747  0E37                     	;# 
  2748  0E8F                     	;# 
  2749  0E90                     	;# 
  2750  0E91                     	;# 
  2751  0E92                     	;# 
  2752  0E93                     	;# 
  2753  0E94                     	;# 
  2754  0E95                     	;# 
  2755  0E96                     	;# 
  2756  0E97                     	;# 
  2757  0E9C                     	;# 
  2758  0E9D                     	;# 
  2759  0E9E                     	;# 
  2760  0EA1                     	;# 
  2761  0EA2                     	;# 
  2762  0EA3                     	;# 
  2763  0EA4                     	;# 
  2764  0EA5                     	;# 
  2765  0EA9                     	;# 
  2766  0EAA                     	;# 
  2767  0EAB                     	;# 
  2768  0EAC                     	;# 
  2769  0EB1                     	;# 
  2770  0EB2                     	;# 
  2771  0EB3                     	;# 
  2772  0EB8                     	;# 
  2773  0EB9                     	;# 
  2774  0EBA                     	;# 
  2775  0EBB                     	;# 
  2776  0EBC                     	;# 
  2777  0EBD                     	;# 
  2778  0EBE                     	;# 
  2779  0EC3                     	;# 
  2780  0EC5                     	;# 
  2781  0EC6                     	;# 
  2782  0EC7                     	;# 
  2783  0EC8                     	;# 
  2784  0EC9                     	;# 
  2785  0ECA                     	;# 
  2786  0ECB                     	;# 
  2787  0ECC                     	;# 
  2788  0F10                     	;# 
  2789  0F11                     	;# 
  2790  0F12                     	;# 
  2791  0F13                     	;# 
  2792  0F14                     	;# 
  2793  0F15                     	;# 
  2794  0F16                     	;# 
  2795  0F17                     	;# 
  2796  0F18                     	;# 
  2797  0F19                     	;# 
  2798  0F1A                     	;# 
  2799  0F1B                     	;# 
  2800  0F1C                     	;# 
  2801  0F1D                     	;# 
  2802  0F1E                     	;# 
  2803  0F1F                     	;# 
  2804  0F20                     	;# 
  2805  0F21                     	;# 
  2806  0F22                     	;# 
  2807  0F23                     	;# 
  2808  0F24                     	;# 
  2809  0F25                     	;# 
  2810  0F26                     	;# 
  2811  0F27                     	;# 
  2812  0F28                     	;# 
  2813  0F29                     	;# 
  2814  0F2A                     	;# 
  2815  0F2B                     	;# 
  2816  0F2C                     	;# 
  2817  0F2D                     	;# 
  2818  0F2E                     	;# 
  2819  0F2F                     	;# 
  2820  0F30                     	;# 
  2821  0F31                     	;# 
  2822  0F32                     	;# 
  2823  0F38                     	;# 
  2824  0F39                     	;# 
  2825  0F3A                     	;# 
  2826  0F3B                     	;# 
  2827  0F3C                     	;# 
  2828  0F3D                     	;# 
  2829  0F3E                     	;# 
  2830  0F3F                     	;# 
  2831  0F40                     	;# 
  2832  0F41                     	;# 
  2833  0F43                     	;# 
  2834  0F44                     	;# 
  2835  0F45                     	;# 
  2836  0F46                     	;# 
  2837  0F47                     	;# 
  2838  0F48                     	;# 
  2839  0F49                     	;# 
  2840  0F4A                     	;# 
  2841  0F4B                     	;# 
  2842  0F4C                     	;# 
  2843  0F4E                     	;# 
  2844  0F4F                     	;# 
  2845  0F50                     	;# 
  2846  0F51                     	;# 
  2847  0F52                     	;# 
  2848  0F53                     	;# 
  2849  0F54                     	;# 
  2850  0F55                     	;# 
  2851  0F56                     	;# 
  2852  0F57                     	;# 
  2853  0F59                     	;# 
  2854  0F5A                     	;# 
  2855  0F5B                     	;# 
  2856  0F5C                     	;# 
  2857  0F5D                     	;# 
  2858  0F61                     	;# 
  2859  0F62                     	;# 
  2860  0F64                     	;# 
  2861  0F65                     	;# 
  2862  0F66                     	;# 
  2863  0F67                     	;# 
  2864  0F68                     	;# 
  2865  0F69                     	;# 
  2866  0F6A                     	;# 
  2867  0F6B                     	;# 
  2868  0F6C                     	;# 
  2869  0F6D                     	;# 
  2870  0FE4                     	;# 
  2871  0FE5                     	;# 
  2872  0FE6                     	;# 
  2873  0FE7                     	;# 
  2874  0FE8                     	;# 
  2875  0FE9                     	;# 
  2876  0FEA                     	;# 
  2877  0FEB                     	;# 
  2878  0FED                     	;# 
  2879  0FEE                     	;# 
  2880  0FEF                     	;# 
  2881  0000                     	;# 
  2882  0001                     	;# 
  2883  0002                     	;# 
  2884  0003                     	;# 
  2885  0004                     	;# 
  2886  0005                     	;# 
  2887  0006                     	;# 
  2888  0007                     	;# 
  2889  0008                     	;# 
  2890  0009                     	;# 
  2891  000A                     	;# 
  2892  000B                     	;# 
  2893  000C                     	;# 
  2894  000D                     	;# 
  2895  000E                     	;# 
  2896  000F                     	;# 
  2897  0010                     	;# 
  2898  0011                     	;# 
  2899  0012                     	;# 
  2900  0013                     	;# 
  2901  0014                     	;# 
  2902  0015                     	;# 
  2903  0016                     	;# 
  2904  0017                     	;# 
  2905  0018                     	;# 
  2906  0019                     	;# 
  2907  001A                     	;# 
  2908  001C                     	;# 
  2909  001C                     	;# 
  2910  001D                     	;# 
  2911  001D                     	;# 
  2912  001E                     	;# 
  2913  001F                     	;# 
  2914  008C                     	;# 
  2915  008C                     	;# 
  2916  008D                     	;# 
  2917  008E                     	;# 
  2918  008E                     	;# 
  2919  008F                     	;# 
  2920  0090                     	;# 
  2921  0090                     	;# 
  2922  0091                     	;# 
  2923  0093                     	;# 
  2924  0094                     	;# 
  2925  0095                     	;# 
  2926  0096                     	;# 
  2927  0097                     	;# 
  2928  0098                     	;# 
  2929  0099                     	;# 
  2930  009A                     	;# 
  2931  009B                     	;# 
  2932  009C                     	;# 
  2933  009D                     	;# 
  2934  009E                     	;# 
  2935  010C                     	;# 
  2936  010D                     	;# 
  2937  010E                     	;# 
  2938  010E                     	;# 
  2939  010F                     	;# 
  2940  0110                     	;# 
  2941  0110                     	;# 
  2942  0111                     	;# 
  2943  0112                     	;# 
  2944  0112                     	;# 
  2945  0113                     	;# 
  2946  0114                     	;# 
  2947  0114                     	;# 
  2948  0115                     	;# 
  2949  0116                     	;# 
  2950  0116                     	;# 
  2951  0117                     	;# 
  2952  0119                     	;# 
  2953  0119                     	;# 
  2954  0119                     	;# 
  2955  011A                     	;# 
  2956  011A                     	;# 
  2957  011A                     	;# 
  2958  011B                     	;# 
  2959  011B                     	;# 
  2960  011B                     	;# 
  2961  011B                     	;# 
  2962  011B                     	;# 
  2963  011C                     	;# 
  2964  011C                     	;# 
  2965  011C                     	;# 
  2966  011D                     	;# 
  2967  011D                     	;# 
  2968  011D                     	;# 
  2969  011E                     	;# 
  2970  011E                     	;# 
  2971  011E                     	;# 
  2972  011F                     	;# 
  2973  011F                     	;# 
  2974  011F                     	;# 
  2975  011F                     	;# 
  2976  011F                     	;# 
  2977  018C                     	;# 
  2978  018D                     	;# 
  2979  018E                     	;# 
  2980  018F                     	;# 
  2981  0190                     	;# 
  2982  0191                     	;# 
  2983  0192                     	;# 
  2984  0196                     	;# 
  2985  0197                     	;# 
  2986  0198                     	;# 
  2987  0199                     	;# 
  2988  019A                     	;# 
  2989  019B                     	;# 
  2990  019C                     	;# 
  2991  020C                     	;# 
  2992  020C                     	;# 
  2993  020D                     	;# 
  2994  020E                     	;# 
  2995  020F                     	;# 
  2996  020F                     	;# 
  2997  0210                     	;# 
  2998  0210                     	;# 
  2999  0211                     	;# 
  3000  0211                     	;# 
  3001  0212                     	;# 
  3002  0212                     	;# 
  3003  0213                     	;# 
  3004  0214                     	;# 
  3005  0215                     	;# 
  3006  0215                     	;# 
  3007  0216                     	;# 
  3008  0216                     	;# 
  3009  0217                     	;# 
  3010  0217                     	;# 
  3011  0218                     	;# 
  3012  0218                     	;# 
  3013  0219                     	;# 
  3014  021A                     	;# 
  3015  021B                     	;# 
  3016  021B                     	;# 
  3017  021C                     	;# 
  3018  021C                     	;# 
  3019  021D                     	;# 
  3020  021D                     	;# 
  3021  021E                     	;# 
  3022  021F                     	;# 
  3023  028C                     	;# 
  3024  028C                     	;# 
  3025  028D                     	;# 
  3026  028D                     	;# 
  3027  028E                     	;# 
  3028  028F                     	;# 
  3029  0290                     	;# 
  3030  0290                     	;# 
  3031  0291                     	;# 
  3032  0292                     	;# 
  3033  0292                     	;# 
  3034  0293                     	;# 
  3035  0293                     	;# 
  3036  0294                     	;# 
  3037  0295                     	;# 
  3038  0296                     	;# 
  3039  0296                     	;# 
  3040  0297                     	;# 
  3041  0298                     	;# 
  3042  0298                     	;# 
  3043  0299                     	;# 
  3044  0299                     	;# 
  3045  029A                     	;# 
  3046  029B                     	;# 
  3047  029C                     	;# 
  3048  029C                     	;# 
  3049  029D                     	;# 
  3050  030C                     	;# 
  3051  030C                     	;# 
  3052  030D                     	;# 
  3053  030E                     	;# 
  3054  030F                     	;# 
  3055  0310                     	;# 
  3056  0310                     	;# 
  3057  0311                     	;# 
  3058  0312                     	;# 
  3059  0313                     	;# 
  3060  0314                     	;# 
  3061  0314                     	;# 
  3062  0315                     	;# 
  3063  0316                     	;# 
  3064  0317                     	;# 
  3065  0318                     	;# 
  3066  0318                     	;# 
  3067  0319                     	;# 
  3068  031A                     	;# 
  3069  031B                     	;# 
  3070  031C                     	;# 
  3071  031C                     	;# 
  3072  031D                     	;# 
  3073  031E                     	;# 
  3074  031F                     	;# 
  3075  038C                     	;# 
  3076  038C                     	;# 
  3077  038D                     	;# 
  3078  038E                     	;# 
  3079  0390                     	;# 
  3080  0390                     	;# 
  3081  0391                     	;# 
  3082  0392                     	;# 
  3083  040C                     	;# 
  3084  040D                     	;# 
  3085  040E                     	;# 
  3086  040F                     	;# 
  3087  0410                     	;# 
  3088  0411                     	;# 
  3089  0416                     	;# 
  3090  0416                     	;# 
  3091  0417                     	;# 
  3092  0418                     	;# 
  3093  0418                     	;# 
  3094  0419                     	;# 
  3095  041A                     	;# 
  3096  041A                     	;# 
  3097  041B                     	;# 
  3098  041C                     	;# 
  3099  041C                     	;# 
  3100  041D                     	;# 
  3101  041E                     	;# 
  3102  041F                     	;# 
  3103  048C                     	;# 
  3104  048C                     	;# 
  3105  048D                     	;# 
  3106  048E                     	;# 
  3107  048F                     	;# 
  3108  048F                     	;# 
  3109  0490                     	;# 
  3110  0491                     	;# 
  3111  0492                     	;# 
  3112  0492                     	;# 
  3113  0493                     	;# 
  3114  0494                     	;# 
  3115  0495                     	;# 
  3116  0495                     	;# 
  3117  0496                     	;# 
  3118  0497                     	;# 
  3119  0498                     	;# 
  3120  0499                     	;# 
  3121  049A                     	;# 
  3122  049B                     	;# 
  3123  049C                     	;# 
  3124  049D                     	;# 
  3125  050C                     	;# 
  3126  050C                     	;# 
  3127  050D                     	;# 
  3128  050E                     	;# 
  3129  050F                     	;# 
  3130  050F                     	;# 
  3131  0510                     	;# 
  3132  0511                     	;# 
  3133  0512                     	;# 
  3134  0512                     	;# 
  3135  0513                     	;# 
  3136  0514                     	;# 
  3137  0515                     	;# 
  3138  0515                     	;# 
  3139  0516                     	;# 
  3140  0517                     	;# 
  3141  0518                     	;# 
  3142  0519                     	;# 
  3143  051A                     	;# 
  3144  051B                     	;# 
  3145  051C                     	;# 
  3146  051D                     	;# 
  3147  058C                     	;# 
  3148  058C                     	;# 
  3149  058D                     	;# 
  3150  058E                     	;# 
  3151  058F                     	;# 
  3152  058F                     	;# 
  3153  0590                     	;# 
  3154  0591                     	;# 
  3155  0592                     	;# 
  3156  0593                     	;# 
  3157  060C                     	;# 
  3158  060D                     	;# 
  3159  060E                     	;# 
  3160  060F                     	;# 
  3161  0610                     	;# 
  3162  0611                     	;# 
  3163  0612                     	;# 
  3164  0613                     	;# 
  3165  0614                     	;# 
  3166  0616                     	;# 
  3167  0617                     	;# 
  3168  0618                     	;# 
  3169  0619                     	;# 
  3170  061A                     	;# 
  3171  061B                     	;# 
  3172  061C                     	;# 
  3173  061D                     	;# 
  3174  061E                     	;# 
  3175  068C                     	;# 
  3176  068D                     	;# 
  3177  068E                     	;# 
  3178  068F                     	;# 
  3179  0690                     	;# 
  3180  0691                     	;# 
  3181  0692                     	;# 
  3182  0693                     	;# 
  3183  0694                     	;# 
  3184  070C                     	;# 
  3185  070D                     	;# 
  3186  070E                     	;# 
  3187  070F                     	;# 
  3188  0710                     	;# 
  3189  0711                     	;# 
  3190  0712                     	;# 
  3191  0713                     	;# 
  3192  0714                     	;# 
  3193  0716                     	;# 
  3194  0717                     	;# 
  3195  0718                     	;# 
  3196  0719                     	;# 
  3197  071A                     	;# 
  3198  071B                     	;# 
  3199  071C                     	;# 
  3200  071D                     	;# 
  3201  071E                     	;# 
  3202  0796                     	;# 
  3203  0797                     	;# 
  3204  0798                     	;# 
  3205  0799                     	;# 
  3206  079A                     	;# 
  3207  079B                     	;# 
  3208  080C                     	;# 
  3209  080D                     	;# 
  3210  080E                     	;# 
  3211  080F                     	;# 
  3212  0810                     	;# 
  3213  0811                     	;# 
  3214  0812                     	;# 
  3215  0813                     	;# 
  3216  0814                     	;# 
  3217  081A                     	;# 
  3218  081B                     	;# 
  3219  081C                     	;# 
  3220  081D                     	;# 
  3221  081E                     	;# 
  3222  081F                     	;# 
  3223  088C                     	;# 
  3224  088D                     	;# 
  3225  088E                     	;# 
  3226  088F                     	;# 
  3227  0890                     	;# 
  3228  0891                     	;# 
  3229  0892                     	;# 
  3230  0893                     	;# 
  3231  0895                     	;# 
  3232  0896                     	;# 
  3233  0897                     	;# 
  3234  0898                     	;# 
  3235  0899                     	;# 
  3236  089A                     	;# 
  3237  089B                     	;# 
  3238  090C                     	;# 
  3239  090E                     	;# 
  3240  090F                     	;# 
  3241  091F                     	;# 
  3242  091F                     	;# 
  3243  098F                     	;# 
  3244  098F                     	;# 
  3245  0990                     	;# 
  3246  0991                     	;# 
  3247  0992                     	;# 
  3248  0993                     	;# 
  3249  0994                     	;# 
  3250  0995                     	;# 
  3251  0996                     	;# 
  3252  0997                     	;# 
  3253  0E0F                     	;# 
  3254  0E10                     	;# 
  3255  0E11                     	;# 
  3256  0E12                     	;# 
  3257  0E13                     	;# 
  3258  0E14                     	;# 
  3259  0E15                     	;# 
  3260  0E16                     	;# 
  3261  0E17                     	;# 
  3262  0E18                     	;# 
  3263  0E19                     	;# 
  3264  0E1A                     	;# 
  3265  0E1B                     	;# 
  3266  0E1C                     	;# 
  3267  0E1D                     	;# 
  3268  0E1E                     	;# 
  3269  0E1F                     	;# 
  3270  0E20                     	;# 
  3271  0E21                     	;# 
  3272  0E22                     	;# 
  3273  0E23                     	;# 
  3274  0E24                     	;# 
  3275  0E25                     	;# 
  3276  0E26                     	;# 
  3277  0E27                     	;# 
  3278  0E28                     	;# 
  3279  0E29                     	;# 
  3280  0E2A                     	;# 
  3281  0E2B                     	;# 
  3282  0E2C                     	;# 
  3283  0E2D                     	;# 
  3284  0E2E                     	;# 
  3285  0E2F                     	;# 
  3286  0E30                     	;# 
  3287  0E31                     	;# 
  3288  0E32                     	;# 
  3289  0E33                     	;# 
  3290  0E34                     	;# 
  3291  0E35                     	;# 
  3292  0E36                     	;# 
  3293  0E37                     	;# 
  3294  0E8F                     	;# 
  3295  0E90                     	;# 
  3296  0E91                     	;# 
  3297  0E92                     	;# 
  3298  0E93                     	;# 
  3299  0E94                     	;# 
  3300  0E95                     	;# 
  3301  0E96                     	;# 
  3302  0E97                     	;# 
  3303  0E9C                     	;# 
  3304  0E9D                     	;# 
  3305  0E9E                     	;# 
  3306  0EA1                     	;# 
  3307  0EA2                     	;# 
  3308  0EA3                     	;# 
  3309  0EA4                     	;# 
  3310  0EA5                     	;# 
  3311  0EA9                     	;# 
  3312  0EAA                     	;# 
  3313  0EAB                     	;# 
  3314  0EAC                     	;# 
  3315  0EB1                     	;# 
  3316  0EB2                     	;# 
  3317  0EB3                     	;# 
  3318  0EB8                     	;# 
  3319  0EB9                     	;# 
  3320  0EBA                     	;# 
  3321  0EBB                     	;# 
  3322  0EBC                     	;# 
  3323  0EBD                     	;# 
  3324  0EBE                     	;# 
  3325  0EC3                     	;# 
  3326  0EC5                     	;# 
  3327  0EC6                     	;# 
  3328  0EC7                     	;# 
  3329  0EC8                     	;# 
  3330  0EC9                     	;# 
  3331  0ECA                     	;# 
  3332  0ECB                     	;# 
  3333  0ECC                     	;# 
  3334  0F10                     	;# 
  3335  0F11                     	;# 
  3336  0F12                     	;# 
  3337  0F13                     	;# 
  3338  0F14                     	;# 
  3339  0F15                     	;# 
  3340  0F16                     	;# 
  3341  0F17                     	;# 
  3342  0F18                     	;# 
  3343  0F19                     	;# 
  3344  0F1A                     	;# 
  3345  0F1B                     	;# 
  3346  0F1C                     	;# 
  3347  0F1D                     	;# 
  3348  0F1E                     	;# 
  3349  0F1F                     	;# 
  3350  0F20                     	;# 
  3351  0F21                     	;# 
  3352  0F22                     	;# 
  3353  0F23                     	;# 
  3354  0F24                     	;# 
  3355  0F25                     	;# 
  3356  0F26                     	;# 
  3357  0F27                     	;# 
  3358  0F28                     	;# 
  3359  0F29                     	;# 
  3360  0F2A                     	;# 
  3361  0F2B                     	;# 
  3362  0F2C                     	;# 
  3363  0F2D                     	;# 
  3364  0F2E                     	;# 
  3365  0F2F                     	;# 
  3366  0F30                     	;# 
  3367  0F31                     	;# 
  3368  0F32                     	;# 
  3369  0F38                     	;# 
  3370  0F39                     	;# 
  3371  0F3A                     	;# 
  3372  0F3B                     	;# 
  3373  0F3C                     	;# 
  3374  0F3D                     	;# 
  3375  0F3E                     	;# 
  3376  0F3F                     	;# 
  3377  0F40                     	;# 
  3378  0F41                     	;# 
  3379  0F43                     	;# 
  3380  0F44                     	;# 
  3381  0F45                     	;# 
  3382  0F46                     	;# 
  3383  0F47                     	;# 
  3384  0F48                     	;# 
  3385  0F49                     	;# 
  3386  0F4A                     	;# 
  3387  0F4B                     	;# 
  3388  0F4C                     	;# 
  3389  0F4E                     	;# 
  3390  0F4F                     	;# 
  3391  0F50                     	;# 
  3392  0F51                     	;# 
  3393  0F52                     	;# 
  3394  0F53                     	;# 
  3395  0F54                     	;# 
  3396  0F55                     	;# 
  3397  0F56                     	;# 
  3398  0F57                     	;# 
  3399  0F59                     	;# 
  3400  0F5A                     	;# 
  3401  0F5B                     	;# 
  3402  0F5C                     	;# 
  3403  0F5D                     	;# 
  3404  0F61                     	;# 
  3405  0F62                     	;# 
  3406  0F64                     	;# 
  3407  0F65                     	;# 
  3408  0F66                     	;# 
  3409  0F67                     	;# 
  3410  0F68                     	;# 
  3411  0F69                     	;# 
  3412  0F6A                     	;# 
  3413  0F6B                     	;# 
  3414  0F6C                     	;# 
  3415  0F6D                     	;# 
  3416  0FE4                     	;# 
  3417  0FE5                     	;# 
  3418  0FE6                     	;# 
  3419  0FE7                     	;# 
  3420  0FE8                     	;# 
  3421  0FE9                     	;# 
  3422  0FEA                     	;# 
  3423  0FEB                     	;# 
  3424  0FED                     	;# 
  3425  0FEE                     	;# 
  3426  0FEF                     	;# 
  3427  0000                     	;# 
  3428  0001                     	;# 
  3429  0002                     	;# 
  3430  0003                     	;# 
  3431  0004                     	;# 
  3432  0005                     	;# 
  3433  0006                     	;# 
  3434  0007                     	;# 
  3435  0008                     	;# 
  3436  0009                     	;# 
  3437  000A                     	;# 
  3438  000B                     	;# 
  3439  000C                     	;# 
  3440  000D                     	;# 
  3441  000E                     	;# 
  3442  000F                     	;# 
  3443  0010                     	;# 
  3444  0011                     	;# 
  3445  0012                     	;# 
  3446  0013                     	;# 
  3447  0014                     	;# 
  3448  0015                     	;# 
  3449  0016                     	;# 
  3450  0017                     	;# 
  3451  0018                     	;# 
  3452  0019                     	;# 
  3453  001A                     	;# 
  3454  001C                     	;# 
  3455  001C                     	;# 
  3456  001D                     	;# 
  3457  001D                     	;# 
  3458  001E                     	;# 
  3459  001F                     	;# 
  3460  008C                     	;# 
  3461  008C                     	;# 
  3462  008D                     	;# 
  3463  008E                     	;# 
  3464  008E                     	;# 
  3465  008F                     	;# 
  3466  0090                     	;# 
  3467  0090                     	;# 
  3468  0091                     	;# 
  3469  0093                     	;# 
  3470  0094                     	;# 
  3471  0095                     	;# 
  3472  0096                     	;# 
  3473  0097                     	;# 
  3474  0098                     	;# 
  3475  0099                     	;# 
  3476  009A                     	;# 
  3477  009B                     	;# 
  3478  009C                     	;# 
  3479  009D                     	;# 
  3480  009E                     	;# 
  3481  010C                     	;# 
  3482  010D                     	;# 
  3483  010E                     	;# 
  3484  010E                     	;# 
  3485  010F                     	;# 
  3486  0110                     	;# 
  3487  0110                     	;# 
  3488  0111                     	;# 
  3489  0112                     	;# 
  3490  0112                     	;# 
  3491  0113                     	;# 
  3492  0114                     	;# 
  3493  0114                     	;# 
  3494  0115                     	;# 
  3495  0116                     	;# 
  3496  0116                     	;# 
  3497  0117                     	;# 
  3498  0119                     	;# 
  3499  0119                     	;# 
  3500  0119                     	;# 
  3501  011A                     	;# 
  3502  011A                     	;# 
  3503  011A                     	;# 
  3504  011B                     	;# 
  3505  011B                     	;# 
  3506  011B                     	;# 
  3507  011B                     	;# 
  3508  011B                     	;# 
  3509  011C                     	;# 
  3510  011C                     	;# 
  3511  011C                     	;# 
  3512  011D                     	;# 
  3513  011D                     	;# 
  3514  011D                     	;# 
  3515  011E                     	;# 
  3516  011E                     	;# 
  3517  011E                     	;# 
  3518  011F                     	;# 
  3519  011F                     	;# 
  3520  011F                     	;# 
  3521  011F                     	;# 
  3522  011F                     	;# 
  3523  018C                     	;# 
  3524  018D                     	;# 
  3525  018E                     	;# 
  3526  018F                     	;# 
  3527  0190                     	;# 
  3528  0191                     	;# 
  3529  0192                     	;# 
  3530  0196                     	;# 
  3531  0197                     	;# 
  3532  0198                     	;# 
  3533  0199                     	;# 
  3534  019A                     	;# 
  3535  019B                     	;# 
  3536  019C                     	;# 
  3537  020C                     	;# 
  3538  020C                     	;# 
  3539  020D                     	;# 
  3540  020E                     	;# 
  3541  020F                     	;# 
  3542  020F                     	;# 
  3543  0210                     	;# 
  3544  0210                     	;# 
  3545  0211                     	;# 
  3546  0211                     	;# 
  3547  0212                     	;# 
  3548  0212                     	;# 
  3549  0213                     	;# 
  3550  0214                     	;# 
  3551  0215                     	;# 
  3552  0215                     	;# 
  3553  0216                     	;# 
  3554  0216                     	;# 
  3555  0217                     	;# 
  3556  0217                     	;# 
  3557  0218                     	;# 
  3558  0218                     	;# 
  3559  0219                     	;# 
  3560  021A                     	;# 
  3561  021B                     	;# 
  3562  021B                     	;# 
  3563  021C                     	;# 
  3564  021C                     	;# 
  3565  021D                     	;# 
  3566  021D                     	;# 
  3567  021E                     	;# 
  3568  021F                     	;# 
  3569  028C                     	;# 
  3570  028C                     	;# 
  3571  028D                     	;# 
  3572  028D                     	;# 
  3573  028E                     	;# 
  3574  028F                     	;# 
  3575  0290                     	;# 
  3576  0290                     	;# 
  3577  0291                     	;# 
  3578  0292                     	;# 
  3579  0292                     	;# 
  3580  0293                     	;# 
  3581  0293                     	;# 
  3582  0294                     	;# 
  3583  0295                     	;# 
  3584  0296                     	;# 
  3585  0296                     	;# 
  3586  0297                     	;# 
  3587  0298                     	;# 
  3588  0298                     	;# 
  3589  0299                     	;# 
  3590  0299                     	;# 
  3591  029A                     	;# 
  3592  029B                     	;# 
  3593  029C                     	;# 
  3594  029C                     	;# 
  3595  029D                     	;# 
  3596  030C                     	;# 
  3597  030C                     	;# 
  3598  030D                     	;# 
  3599  030E                     	;# 
  3600  030F                     	;# 
  3601  0310                     	;# 
  3602  0310                     	;# 
  3603  0311                     	;# 
  3604  0312                     	;# 
  3605  0313                     	;# 
  3606  0314                     	;# 
  3607  0314                     	;# 
  3608  0315                     	;# 
  3609  0316                     	;# 
  3610  0317                     	;# 
  3611  0318                     	;# 
  3612  0318                     	;# 
  3613  0319                     	;# 
  3614  031A                     	;# 
  3615  031B                     	;# 
  3616  031C                     	;# 
  3617  031C                     	;# 
  3618  031D                     	;# 
  3619  031E                     	;# 
  3620  031F                     	;# 
  3621  038C                     	;# 
  3622  038C                     	;# 
  3623  038D                     	;# 
  3624  038E                     	;# 
  3625  0390                     	;# 
  3626  0390                     	;# 
  3627  0391                     	;# 
  3628  0392                     	;# 
  3629  040C                     	;# 
  3630  040D                     	;# 
  3631  040E                     	;# 
  3632  040F                     	;# 
  3633  0410                     	;# 
  3634  0411                     	;# 
  3635  0416                     	;# 
  3636  0416                     	;# 
  3637  0417                     	;# 
  3638  0418                     	;# 
  3639  0418                     	;# 
  3640  0419                     	;# 
  3641  041A                     	;# 
  3642  041A                     	;# 
  3643  041B                     	;# 
  3644  041C                     	;# 
  3645  041C                     	;# 
  3646  041D                     	;# 
  3647  041E                     	;# 
  3648  041F                     	;# 
  3649  048C                     	;# 
  3650  048C                     	;# 
  3651  048D                     	;# 
  3652  048E                     	;# 
  3653  048F                     	;# 
  3654  048F                     	;# 
  3655  0490                     	;# 
  3656  0491                     	;# 
  3657  0492                     	;# 
  3658  0492                     	;# 
  3659  0493                     	;# 
  3660  0494                     	;# 
  3661  0495                     	;# 
  3662  0495                     	;# 
  3663  0496                     	;# 
  3664  0497                     	;# 
  3665  0498                     	;# 
  3666  0499                     	;# 
  3667  049A                     	;# 
  3668  049B                     	;# 
  3669  049C                     	;# 
  3670  049D                     	;# 
  3671  050C                     	;# 
  3672  050C                     	;# 
  3673  050D                     	;# 
  3674  050E                     	;# 
  3675  050F                     	;# 
  3676  050F                     	;# 
  3677  0510                     	;# 
  3678  0511                     	;# 
  3679  0512                     	;# 
  3680  0512                     	;# 
  3681  0513                     	;# 
  3682  0514                     	;# 
  3683  0515                     	;# 
  3684  0515                     	;# 
  3685  0516                     	;# 
  3686  0517                     	;# 
  3687  0518                     	;# 
  3688  0519                     	;# 
  3689  051A                     	;# 
  3690  051B                     	;# 
  3691  051C                     	;# 
  3692  051D                     	;# 
  3693  058C                     	;# 
  3694  058C                     	;# 
  3695  058D                     	;# 
  3696  058E                     	;# 
  3697  058F                     	;# 
  3698  058F                     	;# 
  3699  0590                     	;# 
  3700  0591                     	;# 
  3701  0592                     	;# 
  3702  0593                     	;# 
  3703  060C                     	;# 
  3704  060D                     	;# 
  3705  060E                     	;# 
  3706  060F                     	;# 
  3707  0610                     	;# 
  3708  0611                     	;# 
  3709  0612                     	;# 
  3710  0613                     	;# 
  3711  0614                     	;# 
  3712  0616                     	;# 
  3713  0617                     	;# 
  3714  0618                     	;# 
  3715  0619                     	;# 
  3716  061A                     	;# 
  3717  061B                     	;# 
  3718  061C                     	;# 
  3719  061D                     	;# 
  3720  061E                     	;# 
  3721  068C                     	;# 
  3722  068D                     	;# 
  3723  068E                     	;# 
  3724  068F                     	;# 
  3725  0690                     	;# 
  3726  0691                     	;# 
  3727  0692                     	;# 
  3728  0693                     	;# 
  3729  0694                     	;# 
  3730  070C                     	;# 
  3731  070D                     	;# 
  3732  070E                     	;# 
  3733  070F                     	;# 
  3734  0710                     	;# 
  3735  0711                     	;# 
  3736  0712                     	;# 
  3737  0713                     	;# 
  3738  0714                     	;# 
  3739  0716                     	;# 
  3740  0717                     	;# 
  3741  0718                     	;# 
  3742  0719                     	;# 
  3743  071A                     	;# 
  3744  071B                     	;# 
  3745  071C                     	;# 
  3746  071D                     	;# 
  3747  071E                     	;# 
  3748  0796                     	;# 
  3749  0797                     	;# 
  3750  0798                     	;# 
  3751  0799                     	;# 
  3752  079A                     	;# 
  3753  079B                     	;# 
  3754  080C                     	;# 
  3755  080D                     	;# 
  3756  080E                     	;# 
  3757  080F                     	;# 
  3758  0810                     	;# 
  3759  0811                     	;# 
  3760  0812                     	;# 
  3761  0813                     	;# 
  3762  0814                     	;# 
  3763  081A                     	;# 
  3764  081B                     	;# 
  3765  081C                     	;# 
  3766  081D                     	;# 
  3767  081E                     	;# 
  3768  081F                     	;# 
  3769  088C                     	;# 
  3770  088D                     	;# 
  3771  088E                     	;# 
  3772  088F                     	;# 
  3773  0890                     	;# 
  3774  0891                     	;# 
  3775  0892                     	;# 
  3776  0893                     	;# 
  3777  0895                     	;# 
  3778  0896                     	;# 
  3779  0897                     	;# 
  3780  0898                     	;# 
  3781  0899                     	;# 
  3782  089A                     	;# 
  3783  089B                     	;# 
  3784  090C                     	;# 
  3785  090E                     	;# 
  3786  090F                     	;# 
  3787  091F                     	;# 
  3788  091F                     	;# 
  3789  098F                     	;# 
  3790  098F                     	;# 
  3791  0990                     	;# 
  3792  0991                     	;# 
  3793  0992                     	;# 
  3794  0993                     	;# 
  3795  0994                     	;# 
  3796  0995                     	;# 
  3797  0996                     	;# 
  3798  0997                     	;# 
  3799  0E0F                     	;# 
  3800  0E10                     	;# 
  3801  0E11                     	;# 
  3802  0E12                     	;# 
  3803  0E13                     	;# 
  3804  0E14                     	;# 
  3805  0E15                     	;# 
  3806  0E16                     	;# 
  3807  0E17                     	;# 
  3808  0E18                     	;# 
  3809  0E19                     	;# 
  3810  0E1A                     	;# 
  3811  0E1B                     	;# 
  3812  0E1C                     	;# 
  3813  0E1D                     	;# 
  3814  0E1E                     	;# 
  3815  0E1F                     	;# 
  3816  0E20                     	;# 
  3817  0E21                     	;# 
  3818  0E22                     	;# 
  3819  0E23                     	;# 
  3820  0E24                     	;# 
  3821  0E25                     	;# 
  3822  0E26                     	;# 
  3823  0E27                     	;# 
  3824  0E28                     	;# 
  3825  0E29                     	;# 
  3826  0E2A                     	;# 
  3827  0E2B                     	;# 
  3828  0E2C                     	;# 
  3829  0E2D                     	;# 
  3830  0E2E                     	;# 
  3831  0E2F                     	;# 
  3832  0E30                     	;# 
  3833  0E31                     	;# 
  3834  0E32                     	;# 
  3835  0E33                     	;# 
  3836  0E34                     	;# 
  3837  0E35                     	;# 
  3838  0E36                     	;# 
  3839  0E37                     	;# 
  3840  0E8F                     	;# 
  3841  0E90                     	;# 
  3842  0E91                     	;# 
  3843  0E92                     	;# 
  3844  0E93                     	;# 
  3845  0E94                     	;# 
  3846  0E95                     	;# 
  3847  0E96                     	;# 
  3848  0E97                     	;# 
  3849  0E9C                     	;# 
  3850  0E9D                     	;# 
  3851  0E9E                     	;# 
  3852  0EA1                     	;# 
  3853  0EA2                     	;# 
  3854  0EA3                     	;# 
  3855  0EA4                     	;# 
  3856  0EA5                     	;# 
  3857  0EA9                     	;# 
  3858  0EAA                     	;# 
  3859  0EAB                     	;# 
  3860  0EAC                     	;# 
  3861  0EB1                     	;# 
  3862  0EB2                     	;# 
  3863  0EB3                     	;# 
  3864  0EB8                     	;# 
  3865  0EB9                     	;# 
  3866  0EBA                     	;# 
  3867  0EBB                     	;# 
  3868  0EBC                     	;# 
  3869  0EBD                     	;# 
  3870  0EBE                     	;# 
  3871  0EC3                     	;# 
  3872  0EC5                     	;# 
  3873  0EC6                     	;# 
  3874  0EC7                     	;# 
  3875  0EC8                     	;# 
  3876  0EC9                     	;# 
  3877  0ECA                     	;# 
  3878  0ECB                     	;# 
  3879  0ECC                     	;# 
  3880  0F10                     	;# 
  3881  0F11                     	;# 
  3882  0F12                     	;# 
  3883  0F13                     	;# 
  3884  0F14                     	;# 
  3885  0F15                     	;# 
  3886  0F16                     	;# 
  3887  0F17                     	;# 
  3888  0F18                     	;# 
  3889  0F19                     	;# 
  3890  0F1A                     	;# 
  3891  0F1B                     	;# 
  3892  0F1C                     	;# 
  3893  0F1D                     	;# 
  3894  0F1E                     	;# 
  3895  0F1F                     	;# 
  3896  0F20                     	;# 
  3897  0F21                     	;# 
  3898  0F22                     	;# 
  3899  0F23                     	;# 
  3900  0F24                     	;# 
  3901  0F25                     	;# 
  3902  0F26                     	;# 
  3903  0F27                     	;# 
  3904  0F28                     	;# 
  3905  0F29                     	;# 
  3906  0F2A                     	;# 
  3907  0F2B                     	;# 
  3908  0F2C                     	;# 
  3909  0F2D                     	;# 
  3910  0F2E                     	;# 
  3911  0F2F                     	;# 
  3912  0F30                     	;# 
  3913  0F31                     	;# 
  3914  0F32                     	;# 
  3915  0F38                     	;# 
  3916  0F39                     	;# 
  3917  0F3A                     	;# 
  3918  0F3B                     	;# 
  3919  0F3C                     	;# 
  3920  0F3D                     	;# 
  3921  0F3E                     	;# 
  3922  0F3F                     	;# 
  3923  0F40                     	;# 
  3924  0F41                     	;# 
  3925  0F43                     	;# 
  3926  0F44                     	;# 
  3927  0F45                     	;# 
  3928  0F46                     	;# 
  3929  0F47                     	;# 
  3930  0F48                     	;# 
  3931  0F49                     	;# 
  3932  0F4A                     	;# 
  3933  0F4B                     	;# 
  3934  0F4C                     	;# 
  3935  0F4E                     	;# 
  3936  0F4F                     	;# 
  3937  0F50                     	;# 
  3938  0F51                     	;# 
  3939  0F52                     	;# 
  3940  0F53                     	;# 
  3941  0F54                     	;# 
  3942  0F55                     	;# 
  3943  0F56                     	;# 
  3944  0F57                     	;# 
  3945  0F59                     	;# 
  3946  0F5A                     	;# 
  3947  0F5B                     	;# 
  3948  0F5C                     	;# 
  3949  0F5D                     	;# 
  3950  0F61                     	;# 
  3951  0F62                     	;# 
  3952  0F64                     	;# 
  3953  0F65                     	;# 
  3954  0F66                     	;# 
  3955  0F67                     	;# 
  3956  0F68                     	;# 
  3957  0F69                     	;# 
  3958  0F6A                     	;# 
  3959  0F6B                     	;# 
  3960  0F6C                     	;# 
  3961  0F6D                     	;# 
  3962  0FE4                     	;# 
  3963  0FE5                     	;# 
  3964  0FE6                     	;# 
  3965  0FE7                     	;# 
  3966  0FE8                     	;# 
  3967  0FE9                     	;# 
  3968  0FEA                     	;# 
  3969  0FEB                     	;# 
  3970  0FED                     	;# 
  3971  0FEE                     	;# 
  3972  0FEF                     	;# 
  3973  0000                     	;# 
  3974  0001                     	;# 
  3975  0002                     	;# 
  3976  0003                     	;# 
  3977  0004                     	;# 
  3978  0005                     	;# 
  3979  0006                     	;# 
  3980  0007                     	;# 
  3981  0008                     	;# 
  3982  0009                     	;# 
  3983  000A                     	;# 
  3984  000B                     	;# 
  3985  000C                     	;# 
  3986  000D                     	;# 
  3987  000E                     	;# 
  3988  000F                     	;# 
  3989  0010                     	;# 
  3990  0011                     	;# 
  3991  0012                     	;# 
  3992  0013                     	;# 
  3993  0014                     	;# 
  3994  0015                     	;# 
  3995  0016                     	;# 
  3996  0017                     	;# 
  3997  0018                     	;# 
  3998  0019                     	;# 
  3999  001A                     	;# 
  4000  001C                     	;# 
  4001  001C                     	;# 
  4002  001D                     	;# 
  4003  001D                     	;# 
  4004  001E                     	;# 
  4005  001F                     	;# 
  4006  008C                     	;# 
  4007  008C                     	;# 
  4008  008D                     	;# 
  4009  008E                     	;# 
  4010  008E                     	;# 
  4011  008F                     	;# 
  4012  0090                     	;# 
  4013  0090                     	;# 
  4014  0091                     	;# 
  4015  0093                     	;# 
  4016  0094                     	;# 
  4017  0095                     	;# 
  4018  0096                     	;# 
  4019  0097                     	;# 
  4020  0098                     	;# 
  4021  0099                     	;# 
  4022  009A                     	;# 
  4023  009B                     	;# 
  4024  009C                     	;# 
  4025  009D                     	;# 
  4026  009E                     	;# 
  4027  010C                     	;# 
  4028  010D                     	;# 
  4029  010E                     	;# 
  4030  010E                     	;# 
  4031  010F                     	;# 
  4032  0110                     	;# 
  4033  0110                     	;# 
  4034  0111                     	;# 
  4035  0112                     	;# 
  4036  0112                     	;# 
  4037  0113                     	;# 
  4038  0114                     	;# 
  4039  0114                     	;# 
  4040  0115                     	;# 
  4041  0116                     	;# 
  4042  0116                     	;# 
  4043  0117                     	;# 
  4044  0119                     	;# 
  4045  0119                     	;# 
  4046  0119                     	;# 
  4047  011A                     	;# 
  4048  011A                     	;# 
  4049  011A                     	;# 
  4050  011B                     	;# 
  4051  011B                     	;# 
  4052  011B                     	;# 
  4053  011B                     	;# 
  4054  011B                     	;# 
  4055  011C                     	;# 
  4056  011C                     	;# 
  4057  011C                     	;# 
  4058  011D                     	;# 
  4059  011D                     	;# 
  4060  011D                     	;# 
  4061  011E                     	;# 
  4062  011E                     	;# 
  4063  011E                     	;# 
  4064  011F                     	;# 
  4065  011F                     	;# 
  4066  011F                     	;# 
  4067  011F                     	;# 
  4068  011F                     	;# 
  4069  018C                     	;# 
  4070  018D                     	;# 
  4071  018E                     	;# 
  4072  018F                     	;# 
  4073  0190                     	;# 
  4074  0191                     	;# 
  4075  0192                     	;# 
  4076  0196                     	;# 
  4077  0197                     	;# 
  4078  0198                     	;# 
  4079  0199                     	;# 
  4080  019A                     	;# 
  4081  019B                     	;# 
  4082  019C                     	;# 
  4083  020C                     	;# 
  4084  020C                     	;# 
  4085  020D                     	;# 
  4086  020E                     	;# 
  4087  020F                     	;# 
  4088  020F                     	;# 
  4089  0210                     	;# 
  4090  0210                     	;# 
  4091  0211                     	;# 
  4092  0211                     	;# 
  4093  0212                     	;# 
  4094  0212                     	;# 
  4095  0213                     	;# 
  4096  0214                     	;# 
  4097  0215                     	;# 
  4098  0215                     	;# 
  4099  0216                     	;# 
  4100  0216                     	;# 
  4101  0217                     	;# 
  4102  0217                     	;# 
  4103  0218                     	;# 
  4104  0218                     	;# 
  4105  0219                     	;# 
  4106  021A                     	;# 
  4107  021B                     	;# 
  4108  021B                     	;# 
  4109  021C                     	;# 
  4110  021C                     	;# 
  4111  021D                     	;# 
  4112  021D                     	;# 
  4113  021E                     	;# 
  4114  021F                     	;# 
  4115  028C                     	;# 
  4116  028C                     	;# 
  4117  028D                     	;# 
  4118  028D                     	;# 
  4119  028E                     	;# 
  4120  028F                     	;# 
  4121  0290                     	;# 
  4122  0290                     	;# 
  4123  0291                     	;# 
  4124  0292                     	;# 
  4125  0292                     	;# 
  4126  0293                     	;# 
  4127  0293                     	;# 
  4128  0294                     	;# 
  4129  0295                     	;# 
  4130  0296                     	;# 
  4131  0296                     	;# 
  4132  0297                     	;# 
  4133  0298                     	;# 
  4134  0298                     	;# 
  4135  0299                     	;# 
  4136  0299                     	;# 
  4137  029A                     	;# 
  4138  029B                     	;# 
  4139  029C                     	;# 
  4140  029C                     	;# 
  4141  029D                     	;# 
  4142  030C                     	;# 
  4143  030C                     	;# 
  4144  030D                     	;# 
  4145  030E                     	;# 
  4146  030F                     	;# 
  4147  0310                     	;# 
  4148  0310                     	;# 
  4149  0311                     	;# 
  4150  0312                     	;# 
  4151  0313                     	;# 
  4152  0314                     	;# 
  4153  0314                     	;# 
  4154  0315                     	;# 
  4155  0316                     	;# 
  4156  0317                     	;# 
  4157  0318                     	;# 
  4158  0318                     	;# 
  4159  0319                     	;# 
  4160  031A                     	;# 
  4161  031B                     	;# 
  4162  031C                     	;# 
  4163  031C                     	;# 
  4164  031D                     	;# 
  4165  031E                     	;# 
  4166  031F                     	;# 
  4167  038C                     	;# 
  4168  038C                     	;# 
  4169  038D                     	;# 
  4170  038E                     	;# 
  4171  0390                     	;# 
  4172  0390                     	;# 
  4173  0391                     	;# 
  4174  0392                     	;# 
  4175  040C                     	;# 
  4176  040D                     	;# 
  4177  040E                     	;# 
  4178  040F                     	;# 
  4179  0410                     	;# 
  4180  0411                     	;# 
  4181  0416                     	;# 
  4182  0416                     	;# 
  4183  0417                     	;# 
  4184  0418                     	;# 
  4185  0418                     	;# 
  4186  0419                     	;# 
  4187  041A                     	;# 
  4188  041A                     	;# 
  4189  041B                     	;# 
  4190  041C                     	;# 
  4191  041C                     	;# 
  4192  041D                     	;# 
  4193  041E                     	;# 
  4194  041F                     	;# 
  4195  048C                     	;# 
  4196  048C                     	;# 
  4197  048D                     	;# 
  4198  048E                     	;# 
  4199  048F                     	;# 
  4200  048F                     	;# 
  4201  0490                     	;# 
  4202  0491                     	;# 
  4203  0492                     	;# 
  4204  0492                     	;# 
  4205  0493                     	;# 
  4206  0494                     	;# 
  4207  0495                     	;# 
  4208  0495                     	;# 
  4209  0496                     	;# 
  4210  0497                     	;# 
  4211  0498                     	;# 
  4212  0499                     	;# 
  4213  049A                     	;# 
  4214  049B                     	;# 
  4215  049C                     	;# 
  4216  049D                     	;# 
  4217  050C                     	;# 
  4218  050C                     	;# 
  4219  050D                     	;# 
  4220  050E                     	;# 
  4221  050F                     	;# 
  4222  050F                     	;# 
  4223  0510                     	;# 
  4224  0511                     	;# 
  4225  0512                     	;# 
  4226  0512                     	;# 
  4227  0513                     	;# 
  4228  0514                     	;# 
  4229  0515                     	;# 
  4230  0515                     	;# 
  4231  0516                     	;# 
  4232  0517                     	;# 
  4233  0518                     	;# 
  4234  0519                     	;# 
  4235  051A                     	;# 
  4236  051B                     	;# 
  4237  051C                     	;# 
  4238  051D                     	;# 
  4239  058C                     	;# 
  4240  058C                     	;# 
  4241  058D                     	;# 
  4242  058E                     	;# 
  4243  058F                     	;# 
  4244  058F                     	;# 
  4245  0590                     	;# 
  4246  0591                     	;# 
  4247  0592                     	;# 
  4248  0593                     	;# 
  4249  060C                     	;# 
  4250  060D                     	;# 
  4251  060E                     	;# 
  4252  060F                     	;# 
  4253  0610                     	;# 
  4254  0611                     	;# 
  4255  0612                     	;# 
  4256  0613                     	;# 
  4257  0614                     	;# 
  4258  0616                     	;# 
  4259  0617                     	;# 
  4260  0618                     	;# 
  4261  0619                     	;# 
  4262  061A                     	;# 
  4263  061B                     	;# 
  4264  061C                     	;# 
  4265  061D                     	;# 
  4266  061E                     	;# 
  4267  068C                     	;# 
  4268  068D                     	;# 
  4269  068E                     	;# 
  4270  068F                     	;# 
  4271  0690                     	;# 
  4272  0691                     	;# 
  4273  0692                     	;# 
  4274  0693                     	;# 
  4275  0694                     	;# 
  4276  070C                     	;# 
  4277  070D                     	;# 
  4278  070E                     	;# 
  4279  070F                     	;# 
  4280  0710                     	;# 
  4281  0711                     	;# 
  4282  0712                     	;# 
  4283  0713                     	;# 
  4284  0714                     	;# 
  4285  0716                     	;# 
  4286  0717                     	;# 
  4287  0718                     	;# 
  4288  0719                     	;# 
  4289  071A                     	;# 
  4290  071B                     	;# 
  4291  071C                     	;# 
  4292  071D                     	;# 
  4293  071E                     	;# 
  4294  0796                     	;# 
  4295  0797                     	;# 
  4296  0798                     	;# 
  4297  0799                     	;# 
  4298  079A                     	;# 
  4299  079B                     	;# 
  4300  080C                     	;# 
  4301  080D                     	;# 
  4302  080E                     	;# 
  4303  080F                     	;# 
  4304  0810                     	;# 
  4305  0811                     	;# 
  4306  0812                     	;# 
  4307  0813                     	;# 
  4308  0814                     	;# 
  4309  081A                     	;# 
  4310  081B                     	;# 
  4311  081C                     	;# 
  4312  081D                     	;# 
  4313  081E                     	;# 
  4314  081F                     	;# 
  4315  088C                     	;# 
  4316  088D                     	;# 
  4317  088E                     	;# 
  4318  088F                     	;# 
  4319  0890                     	;# 
  4320  0891                     	;# 
  4321  0892                     	;# 
  4322  0893                     	;# 
  4323  0895                     	;# 
  4324  0896                     	;# 
  4325  0897                     	;# 
  4326  0898                     	;# 
  4327  0899                     	;# 
  4328  089A                     	;# 
  4329  089B                     	;# 
  4330  090C                     	;# 
  4331  090E                     	;# 
  4332  090F                     	;# 
  4333  091F                     	;# 
  4334  091F                     	;# 
  4335  098F                     	;# 
  4336  098F                     	;# 
  4337  0990                     	;# 
  4338  0991                     	;# 
  4339  0992                     	;# 
  4340  0993                     	;# 
  4341  0994                     	;# 
  4342  0995                     	;# 
  4343  0996                     	;# 
  4344  0997                     	;# 
  4345  0E0F                     	;# 
  4346  0E10                     	;# 
  4347  0E11                     	;# 
  4348  0E12                     	;# 
  4349  0E13                     	;# 
  4350  0E14                     	;# 
  4351  0E15                     	;# 
  4352  0E16                     	;# 
  4353  0E17                     	;# 
  4354  0E18                     	;# 
  4355  0E19                     	;# 
  4356  0E1A                     	;# 
  4357  0E1B                     	;# 
  4358  0E1C                     	;# 
  4359  0E1D                     	;# 
  4360  0E1E                     	;# 
  4361  0E1F                     	;# 
  4362  0E20                     	;# 
  4363  0E21                     	;# 
  4364  0E22                     	;# 
  4365  0E23                     	;# 
  4366  0E24                     	;# 
  4367  0E25                     	;# 
  4368  0E26                     	;# 
  4369  0E27                     	;# 
  4370  0E28                     	;# 
  4371  0E29                     	;# 
  4372  0E2A                     	;# 
  4373  0E2B                     	;# 
  4374  0E2C                     	;# 
  4375  0E2D                     	;# 
  4376  0E2E                     	;# 
  4377  0E2F                     	;# 
  4378  0E30                     	;# 
  4379  0E31                     	;# 
  4380  0E32                     	;# 
  4381  0E33                     	;# 
  4382  0E34                     	;# 
  4383  0E35                     	;# 
  4384  0E36                     	;# 
  4385  0E37                     	;# 
  4386  0E8F                     	;# 
  4387  0E90                     	;# 
  4388  0E91                     	;# 
  4389  0E92                     	;# 
  4390  0E93                     	;# 
  4391  0E94                     	;# 
  4392  0E95                     	;# 
  4393  0E96                     	;# 
  4394  0E97                     	;# 
  4395  0E9C                     	;# 
  4396  0E9D                     	;# 
  4397  0E9E                     	;# 
  4398  0EA1                     	;# 
  4399  0EA2                     	;# 
  4400  0EA3                     	;# 
  4401  0EA4                     	;# 
  4402  0EA5                     	;# 
  4403  0EA9                     	;# 
  4404  0EAA                     	;# 
  4405  0EAB                     	;# 
  4406  0EAC                     	;# 
  4407  0EB1                     	;# 
  4408  0EB2                     	;# 
  4409  0EB3                     	;# 
  4410  0EB8                     	;# 
  4411  0EB9                     	;# 
  4412  0EBA                     	;# 
  4413  0EBB                     	;# 
  4414  0EBC                     	;# 
  4415  0EBD                     	;# 
  4416  0EBE                     	;# 
  4417  0EC3                     	;# 
  4418  0EC5                     	;# 
  4419  0EC6                     	;# 
  4420  0EC7                     	;# 
  4421  0EC8                     	;# 
  4422  0EC9                     	;# 
  4423  0ECA                     	;# 
  4424  0ECB                     	;# 
  4425  0ECC                     	;# 
  4426  0F10                     	;# 
  4427  0F11                     	;# 
  4428  0F12                     	;# 
  4429  0F13                     	;# 
  4430  0F14                     	;# 
  4431  0F15                     	;# 
  4432  0F16                     	;# 
  4433  0F17                     	;# 
  4434  0F18                     	;# 
  4435  0F19                     	;# 
  4436  0F1A                     	;# 
  4437  0F1B                     	;# 
  4438  0F1C                     	;# 
  4439  0F1D                     	;# 
  4440  0F1E                     	;# 
  4441  0F1F                     	;# 
  4442  0F20                     	;# 
  4443  0F21                     	;# 
  4444  0F22                     	;# 
  4445  0F23                     	;# 
  4446  0F24                     	;# 
  4447  0F25                     	;# 
  4448  0F26                     	;# 
  4449  0F27                     	;# 
  4450  0F28                     	;# 
  4451  0F29                     	;# 
  4452  0F2A                     	;# 
  4453  0F2B                     	;# 
  4454  0F2C                     	;# 
  4455  0F2D                     	;# 
  4456  0F2E                     	;# 
  4457  0F2F                     	;# 
  4458  0F30                     	;# 
  4459  0F31                     	;# 
  4460  0F32                     	;# 
  4461  0F38                     	;# 
  4462  0F39                     	;# 
  4463  0F3A                     	;# 
  4464  0F3B                     	;# 
  4465  0F3C                     	;# 
  4466  0F3D                     	;# 
  4467  0F3E                     	;# 
  4468  0F3F                     	;# 
  4469  0F40                     	;# 
  4470  0F41                     	;# 
  4471  0F43                     	;# 
  4472  0F44                     	;# 
  4473  0F45                     	;# 
  4474  0F46                     	;# 
  4475  0F47                     	;# 
  4476  0F48                     	;# 
  4477  0F49                     	;# 
  4478  0F4A                     	;# 
  4479  0F4B                     	;# 
  4480  0F4C                     	;# 
  4481  0F4E                     	;# 
  4482  0F4F                     	;# 
  4483  0F50                     	;# 
  4484  0F51                     	;# 
  4485  0F52                     	;# 
  4486  0F53                     	;# 
  4487  0F54                     	;# 
  4488  0F55                     	;# 
  4489  0F56                     	;# 
  4490  0F57                     	;# 
  4491  0F59                     	;# 
  4492  0F5A                     	;# 
  4493  0F5B                     	;# 
  4494  0F5C                     	;# 
  4495  0F5D                     	;# 
  4496  0F61                     	;# 
  4497  0F62                     	;# 
  4498  0F64                     	;# 
  4499  0F65                     	;# 
  4500  0F66                     	;# 
  4501  0F67                     	;# 
  4502  0F68                     	;# 
  4503  0F69                     	;# 
  4504  0F6A                     	;# 
  4505  0F6B                     	;# 
  4506  0F6C                     	;# 
  4507  0F6D                     	;# 
  4508  0FE4                     	;# 
  4509  0FE5                     	;# 
  4510  0FE6                     	;# 
  4511  0FE7                     	;# 
  4512  0FE8                     	;# 
  4513  0FE9                     	;# 
  4514  0FEA                     	;# 
  4515  0FEB                     	;# 
  4516  0FED                     	;# 
  4517  0FEE                     	;# 
  4518  0FEF                     	;# 
  4519  0000                     	;# 
  4520  0001                     	;# 
  4521  0002                     	;# 
  4522  0003                     	;# 
  4523  0004                     	;# 
  4524  0005                     	;# 
  4525  0006                     	;# 
  4526  0007                     	;# 
  4527  0008                     	;# 
  4528  0009                     	;# 
  4529  000A                     	;# 
  4530  000B                     	;# 
  4531  000C                     	;# 
  4532  000D                     	;# 
  4533  000E                     	;# 
  4534  000F                     	;# 
  4535  0010                     	;# 
  4536  0011                     	;# 
  4537  0012                     	;# 
  4538  0013                     	;# 
  4539  0014                     	;# 
  4540  0015                     	;# 
  4541  0016                     	;# 
  4542  0017                     	;# 
  4543  0018                     	;# 
  4544  0019                     	;# 
  4545  001A                     	;# 
  4546  001C                     	;# 
  4547  001C                     	;# 
  4548  001D                     	;# 
  4549  001D                     	;# 
  4550  001E                     	;# 
  4551  001F                     	;# 
  4552  008C                     	;# 
  4553  008C                     	;# 
  4554  008D                     	;# 
  4555  008E                     	;# 
  4556  008E                     	;# 
  4557  008F                     	;# 
  4558  0090                     	;# 
  4559  0090                     	;# 
  4560  0091                     	;# 
  4561  0093                     	;# 
  4562  0094                     	;# 
  4563  0095                     	;# 
  4564  0096                     	;# 
  4565  0097                     	;# 
  4566  0098                     	;# 
  4567  0099                     	;# 
  4568  009A                     	;# 
  4569  009B                     	;# 
  4570  009C                     	;# 
  4571  009D                     	;# 
  4572  009E                     	;# 
  4573  010C                     	;# 
  4574  010D                     	;# 
  4575  010E                     	;# 
  4576  010E                     	;# 
  4577  010F                     	;# 
  4578  0110                     	;# 
  4579  0110                     	;# 
  4580  0111                     	;# 
  4581  0112                     	;# 
  4582  0112                     	;# 
  4583  0113                     	;# 
  4584  0114                     	;# 
  4585  0114                     	;# 
  4586  0115                     	;# 
  4587  0116                     	;# 
  4588  0116                     	;# 
  4589  0117                     	;# 
  4590  0119                     	;# 
  4591  0119                     	;# 
  4592  0119                     	;# 
  4593  011A                     	;# 
  4594  011A                     	;# 
  4595  011A                     	;# 
  4596  011B                     	;# 
  4597  011B                     	;# 
  4598  011B                     	;# 
  4599  011B                     	;# 
  4600  011B                     	;# 
  4601  011C                     	;# 
  4602  011C                     	;# 
  4603  011C                     	;# 
  4604  011D                     	;# 
  4605  011D                     	;# 
  4606  011D                     	;# 
  4607  011E                     	;# 
  4608  011E                     	;# 
  4609  011E                     	;# 
  4610  011F                     	;# 
  4611  011F                     	;# 
  4612  011F                     	;# 
  4613  011F                     	;# 
  4614  011F                     	;# 
  4615  018C                     	;# 
  4616  018D                     	;# 
  4617  018E                     	;# 
  4618  018F                     	;# 
  4619  0190                     	;# 
  4620  0191                     	;# 
  4621  0192                     	;# 
  4622  0196                     	;# 
  4623  0197                     	;# 
  4624  0198                     	;# 
  4625  0199                     	;# 
  4626  019A                     	;# 
  4627  019B                     	;# 
  4628  019C                     	;# 
  4629  020C                     	;# 
  4630  020C                     	;# 
  4631  020D                     	;# 
  4632  020E                     	;# 
  4633  020F                     	;# 
  4634  020F                     	;# 
  4635  0210                     	;# 
  4636  0210                     	;# 
  4637  0211                     	;# 
  4638  0211                     	;# 
  4639  0212                     	;# 
  4640  0212                     	;# 
  4641  0213                     	;# 
  4642  0214                     	;# 
  4643  0215                     	;# 
  4644  0215                     	;# 
  4645  0216                     	;# 
  4646  0216                     	;# 
  4647  0217                     	;# 
  4648  0217                     	;# 
  4649  0218                     	;# 
  4650  0218                     	;# 
  4651  0219                     	;# 
  4652  021A                     	;# 
  4653  021B                     	;# 
  4654  021B                     	;# 
  4655  021C                     	;# 
  4656  021C                     	;# 
  4657  021D                     	;# 
  4658  021D                     	;# 
  4659  021E                     	;# 
  4660  021F                     	;# 
  4661  028C                     	;# 
  4662  028C                     	;# 
  4663  028D                     	;# 
  4664  028D                     	;# 
  4665  028E                     	;# 
  4666  028F                     	;# 
  4667  0290                     	;# 
  4668  0290                     	;# 
  4669  0291                     	;# 
  4670  0292                     	;# 
  4671  0292                     	;# 
  4672  0293                     	;# 
  4673  0293                     	;# 
  4674  0294                     	;# 
  4675  0295                     	;# 
  4676  0296                     	;# 
  4677  0296                     	;# 
  4678  0297                     	;# 
  4679  0298                     	;# 
  4680  0298                     	;# 
  4681  0299                     	;# 
  4682  0299                     	;# 
  4683  029A                     	;# 
  4684  029B                     	;# 
  4685  029C                     	;# 
  4686  029C                     	;# 
  4687  029D                     	;# 
  4688  030C                     	;# 
  4689  030C                     	;# 
  4690  030D                     	;# 
  4691  030E                     	;# 
  4692  030F                     	;# 
  4693  0310                     	;# 
  4694  0310                     	;# 
  4695  0311                     	;# 
  4696  0312                     	;# 
  4697  0313                     	;# 
  4698  0314                     	;# 
  4699  0314                     	;# 
  4700  0315                     	;# 
  4701  0316                     	;# 
  4702  0317                     	;# 
  4703  0318                     	;# 
  4704  0318                     	;# 
  4705  0319                     	;# 
  4706  031A                     	;# 
  4707  031B                     	;# 
  4708  031C                     	;# 
  4709  031C                     	;# 
  4710  031D                     	;# 
  4711  031E                     	;# 
  4712  031F                     	;# 
  4713  038C                     	;# 
  4714  038C                     	;# 
  4715  038D                     	;# 
  4716  038E                     	;# 
  4717  0390                     	;# 
  4718  0390                     	;# 
  4719  0391                     	;# 
  4720  0392                     	;# 
  4721  040C                     	;# 
  4722  040D                     	;# 
  4723  040E                     	;# 
  4724  040F                     	;# 
  4725  0410                     	;# 
  4726  0411                     	;# 
  4727  0416                     	;# 
  4728  0416                     	;# 
  4729  0417                     	;# 
  4730  0418                     	;# 
  4731  0418                     	;# 
  4732  0419                     	;# 
  4733  041A                     	;# 
  4734  041A                     	;# 
  4735  041B                     	;# 
  4736  041C                     	;# 
  4737  041C                     	;# 
  4738  041D                     	;# 
  4739  041E                     	;# 
  4740  041F                     	;# 
  4741  048C                     	;# 
  4742  048C                     	;# 
  4743  048D                     	;# 
  4744  048E                     	;# 
  4745  048F                     	;# 
  4746  048F                     	;# 
  4747  0490                     	;# 
  4748  0491                     	;# 
  4749  0492                     	;# 
  4750  0492                     	;# 
  4751  0493                     	;# 
  4752  0494                     	;# 
  4753  0495                     	;# 
  4754  0495                     	;# 
  4755  0496                     	;# 
  4756  0497                     	;# 
  4757  0498                     	;# 
  4758  0499                     	;# 
  4759  049A                     	;# 
  4760  049B                     	;# 
  4761  049C                     	;# 
  4762  049D                     	;# 
  4763  050C                     	;# 
  4764  050C                     	;# 
  4765  050D                     	;# 
  4766  050E                     	;# 
  4767  050F                     	;# 
  4768  050F                     	;# 
  4769  0510                     	;# 
  4770  0511                     	;# 
  4771  0512                     	;# 
  4772  0512                     	;# 
  4773  0513                     	;# 
  4774  0514                     	;# 
  4775  0515                     	;# 
  4776  0515                     	;# 
  4777  0516                     	;# 
  4778  0517                     	;# 
  4779  0518                     	;# 
  4780  0519                     	;# 
  4781  051A                     	;# 
  4782  051B                     	;# 
  4783  051C                     	;# 
  4784  051D                     	;# 
  4785  058C                     	;# 
  4786  058C                     	;# 
  4787  058D                     	;# 
  4788  058E                     	;# 
  4789  058F                     	;# 
  4790  058F                     	;# 
  4791  0590                     	;# 
  4792  0591                     	;# 
  4793  0592                     	;# 
  4794  0593                     	;# 
  4795  060C                     	;# 
  4796  060D                     	;# 
  4797  060E                     	;# 
  4798  060F                     	;# 
  4799  0610                     	;# 
  4800  0611                     	;# 
  4801  0612                     	;# 
  4802  0613                     	;# 
  4803  0614                     	;# 
  4804  0616                     	;# 
  4805  0617                     	;# 
  4806  0618                     	;# 
  4807  0619                     	;# 
  4808  061A                     	;# 
  4809  061B                     	;# 
  4810  061C                     	;# 
  4811  061D                     	;# 
  4812  061E                     	;# 
  4813  068C                     	;# 
  4814  068D                     	;# 
  4815  068E                     	;# 
  4816  068F                     	;# 
  4817  0690                     	;# 
  4818  0691                     	;# 
  4819  0692                     	;# 
  4820  0693                     	;# 
  4821  0694                     	;# 
  4822  070C                     	;# 
  4823  070D                     	;# 
  4824  070E                     	;# 
  4825  070F                     	;# 
  4826  0710                     	;# 
  4827  0711                     	;# 
  4828  0712                     	;# 
  4829  0713                     	;# 
  4830  0714                     	;# 
  4831  0716                     	;# 
  4832  0717                     	;# 
  4833  0718                     	;# 
  4834  0719                     	;# 
  4835  071A                     	;# 
  4836  071B                     	;# 
  4837  071C                     	;# 
  4838  071D                     	;# 
  4839  071E                     	;# 
  4840  0796                     	;# 
  4841  0797                     	;# 
  4842  0798                     	;# 
  4843  0799                     	;# 
  4844  079A                     	;# 
  4845  079B                     	;# 
  4846  080C                     	;# 
  4847  080D                     	;# 
  4848  080E                     	;# 
  4849  080F                     	;# 
  4850  0810                     	;# 
  4851  0811                     	;# 
  4852  0812                     	;# 
  4853  0813                     	;# 
  4854  0814                     	;# 
  4855  081A                     	;# 
  4856  081B                     	;# 
  4857  081C                     	;# 
  4858  081D                     	;# 
  4859  081E                     	;# 
  4860  081F                     	;# 
  4861  088C                     	;# 
  4862  088D                     	;# 
  4863  088E                     	;# 
  4864  088F                     	;# 
  4865  0890                     	;# 
  4866  0891                     	;# 
  4867  0892                     	;# 
  4868  0893                     	;# 
  4869  0895                     	;# 
  4870  0896                     	;# 
  4871  0897                     	;# 
  4872  0898                     	;# 
  4873  0899                     	;# 
  4874  089A                     	;# 
  4875  089B                     	;# 
  4876  090C                     	;# 
  4877  090E                     	;# 
  4878  090F                     	;# 
  4879  091F                     	;# 
  4880  091F                     	;# 
  4881  098F                     	;# 
  4882  098F                     	;# 
  4883  0990                     	;# 
  4884  0991                     	;# 
  4885  0992                     	;# 
  4886  0993                     	;# 
  4887  0994                     	;# 
  4888  0995                     	;# 
  4889  0996                     	;# 
  4890  0997                     	;# 
  4891  0E0F                     	;# 
  4892  0E10                     	;# 
  4893  0E11                     	;# 
  4894  0E12                     	;# 
  4895  0E13                     	;# 
  4896  0E14                     	;# 
  4897  0E15                     	;# 
  4898  0E16                     	;# 
  4899  0E17                     	;# 
  4900  0E18                     	;# 
  4901  0E19                     	;# 
  4902  0E1A                     	;# 
  4903  0E1B                     	;# 
  4904  0E1C                     	;# 
  4905  0E1D                     	;# 
  4906  0E1E                     	;# 
  4907  0E1F                     	;# 
  4908  0E20                     	;# 
  4909  0E21                     	;# 
  4910  0E22                     	;# 
  4911  0E23                     	;# 
  4912  0E24                     	;# 
  4913  0E25                     	;# 
  4914  0E26                     	;# 
  4915  0E27                     	;# 
  4916  0E28                     	;# 
  4917  0E29                     	;# 
  4918  0E2A                     	;# 
  4919  0E2B                     	;# 
  4920  0E2C                     	;# 
  4921  0E2D                     	;# 
  4922  0E2E                     	;# 
  4923  0E2F                     	;# 
  4924  0E30                     	;# 
  4925  0E31                     	;# 
  4926  0E32                     	;# 
  4927  0E33                     	;# 
  4928  0E34                     	;# 
  4929  0E35                     	;# 
  4930  0E36                     	;# 
  4931  0E37                     	;# 
  4932  0E8F                     	;# 
  4933  0E90                     	;# 
  4934  0E91                     	;# 
  4935  0E92                     	;# 
  4936  0E93                     	;# 
  4937  0E94                     	;# 
  4938  0E95                     	;# 
  4939  0E96                     	;# 
  4940  0E97                     	;# 
  4941  0E9C                     	;# 
  4942  0E9D                     	;# 
  4943  0E9E                     	;# 
  4944  0EA1                     	;# 
  4945  0EA2                     	;# 
  4946  0EA3                     	;# 
  4947  0EA4                     	;# 
  4948  0EA5                     	;# 
  4949  0EA9                     	;# 
  4950  0EAA                     	;# 
  4951  0EAB                     	;# 
  4952  0EAC                     	;# 
  4953  0EB1                     	;# 
  4954  0EB2                     	;# 
  4955  0EB3                     	;# 
  4956  0EB8                     	;# 
  4957  0EB9                     	;# 
  4958  0EBA                     	;# 
  4959  0EBB                     	;# 
  4960  0EBC                     	;# 
  4961  0EBD                     	;# 
  4962  0EBE                     	;# 
  4963  0EC3                     	;# 
  4964  0EC5                     	;# 
  4965  0EC6                     	;# 
  4966  0EC7                     	;# 
  4967  0EC8                     	;# 
  4968  0EC9                     	;# 
  4969  0ECA                     	;# 
  4970  0ECB                     	;# 
  4971  0ECC                     	;# 
  4972  0F10                     	;# 
  4973  0F11                     	;# 
  4974  0F12                     	;# 
  4975  0F13                     	;# 
  4976  0F14                     	;# 
  4977  0F15                     	;# 
  4978  0F16                     	;# 
  4979  0F17                     	;# 
  4980  0F18                     	;# 
  4981  0F19                     	;# 
  4982  0F1A                     	;# 
  4983  0F1B                     	;# 
  4984  0F1C                     	;# 
  4985  0F1D                     	;# 
  4986  0F1E                     	;# 
  4987  0F1F                     	;# 
  4988  0F20                     	;# 
  4989  0F21                     	;# 
  4990  0F22                     	;# 
  4991  0F23                     	;# 
  4992  0F24                     	;# 
  4993  0F25                     	;# 
  4994  0F26                     	;# 
  4995  0F27                     	;# 
  4996  0F28                     	;# 
  4997  0F29                     	;# 
  4998  0F2A                     	;# 
  4999  0F2B                     	;# 
  5000  0F2C                     	;# 
  5001  0F2D                     	;# 
  5002  0F2E                     	;# 
  5003  0F2F                     	;# 
  5004  0F30                     	;# 
  5005  0F31                     	;# 
  5006  0F32                     	;# 
  5007  0F38                     	;# 
  5008  0F39                     	;# 
  5009  0F3A                     	;# 
  5010  0F3B                     	;# 
  5011  0F3C                     	;# 
  5012  0F3D                     	;# 
  5013  0F3E                     	;# 
  5014  0F3F                     	;# 
  5015  0F40                     	;# 
  5016  0F41                     	;# 
  5017  0F43                     	;# 
  5018  0F44                     	;# 
  5019  0F45                     	;# 
  5020  0F46                     	;# 
  5021  0F47                     	;# 
  5022  0F48                     	;# 
  5023  0F49                     	;# 
  5024  0F4A                     	;# 
  5025  0F4B                     	;# 
  5026  0F4C                     	;# 
  5027  0F4E                     	;# 
  5028  0F4F                     	;# 
  5029  0F50                     	;# 
  5030  0F51                     	;# 
  5031  0F52                     	;# 
  5032  0F53                     	;# 
  5033  0F54                     	;# 
  5034  0F55                     	;# 
  5035  0F56                     	;# 
  5036  0F57                     	;# 
  5037  0F59                     	;# 
  5038  0F5A                     	;# 
  5039  0F5B                     	;# 
  5040  0F5C                     	;# 
  5041  0F5D                     	;# 
  5042  0F61                     	;# 
  5043  0F62                     	;# 
  5044  0F64                     	;# 
  5045  0F65                     	;# 
  5046  0F66                     	;# 
  5047  0F67                     	;# 
  5048  0F68                     	;# 
  5049  0F69                     	;# 
  5050  0F6A                     	;# 
  5051  0F6B                     	;# 
  5052  0F6C                     	;# 
  5053  0F6D                     	;# 
  5054  0FE4                     	;# 
  5055  0FE5                     	;# 
  5056  0FE6                     	;# 
  5057  0FE7                     	;# 
  5058  0FE8                     	;# 
  5059  0FE9                     	;# 
  5060  0FEA                     	;# 
  5061  0FEB                     	;# 
  5062  0FED                     	;# 
  5063  0FEE                     	;# 
  5064  0FEF                     	;# 
  5065  0000                     	;# 
  5066  0001                     	;# 
  5067  0002                     	;# 
  5068  0003                     	;# 
  5069  0004                     	;# 
  5070  0005                     	;# 
  5071  0006                     	;# 
  5072  0007                     	;# 
  5073  0008                     	;# 
  5074  0009                     	;# 
  5075  000A                     	;# 
  5076  000B                     	;# 
  5077  000C                     	;# 
  5078  000D                     	;# 
  5079  000E                     	;# 
  5080  000F                     	;# 
  5081  0010                     	;# 
  5082  0011                     	;# 
  5083  0012                     	;# 
  5084  0013                     	;# 
  5085  0014                     	;# 
  5086  0015                     	;# 
  5087  0016                     	;# 
  5088  0017                     	;# 
  5089  0018                     	;# 
  5090  0019                     	;# 
  5091  001A                     	;# 
  5092  001C                     	;# 
  5093  001C                     	;# 
  5094  001D                     	;# 
  5095  001D                     	;# 
  5096  001E                     	;# 
  5097  001F                     	;# 
  5098  008C                     	;# 
  5099  008C                     	;# 
  5100  008D                     	;# 
  5101  008E                     	;# 
  5102  008E                     	;# 
  5103  008F                     	;# 
  5104  0090                     	;# 
  5105  0090                     	;# 
  5106  0091                     	;# 
  5107  0093                     	;# 
  5108  0094                     	;# 
  5109  0095                     	;# 
  5110  0096                     	;# 
  5111  0097                     	;# 
  5112  0098                     	;# 
  5113  0099                     	;# 
  5114  009A                     	;# 
  5115  009B                     	;# 
  5116  009C                     	;# 
  5117  009D                     	;# 
  5118  009E                     	;# 
  5119  010C                     	;# 
  5120  010D                     	;# 
  5121  010E                     	;# 
  5122  010E                     	;# 
  5123  010F                     	;# 
  5124  0110                     	;# 
  5125  0110                     	;# 
  5126  0111                     	;# 
  5127  0112                     	;# 
  5128  0112                     	;# 
  5129  0113                     	;# 
  5130  0114                     	;# 
  5131  0114                     	;# 
  5132  0115                     	;# 
  5133  0116                     	;# 
  5134  0116                     	;# 
  5135  0117                     	;# 
  5136  0119                     	;# 
  5137  0119                     	;# 
  5138  0119                     	;# 
  5139  011A                     	;# 
  5140  011A                     	;# 
  5141  011A                     	;# 
  5142  011B                     	;# 
  5143  011B                     	;# 
  5144  011B                     	;# 
  5145  011B                     	;# 
  5146  011B                     	;# 
  5147  011C                     	;# 
  5148  011C                     	;# 
  5149  011C                     	;# 
  5150  011D                     	;# 
  5151  011D                     	;# 
  5152  011D                     	;# 
  5153  011E                     	;# 
  5154  011E                     	;# 
  5155  011E                     	;# 
  5156  011F                     	;# 
  5157  011F                     	;# 
  5158  011F                     	;# 
  5159  011F                     	;# 
  5160  011F                     	;# 
  5161  018C                     	;# 
  5162  018D                     	;# 
  5163  018E                     	;# 
  5164  018F                     	;# 
  5165  0190                     	;# 
  5166  0191                     	;# 
  5167  0192                     	;# 
  5168  0196                     	;# 
  5169  0197                     	;# 
  5170  0198                     	;# 
  5171  0199                     	;# 
  5172  019A                     	;# 
  5173  019B                     	;# 
  5174  019C                     	;# 
  5175  020C                     	;# 
  5176  020C                     	;# 
  5177  020D                     	;# 
  5178  020E                     	;# 
  5179  020F                     	;# 
  5180  020F                     	;# 
  5181  0210                     	;# 
  5182  0210                     	;# 
  5183  0211                     	;# 
  5184  0211                     	;# 
  5185  0212                     	;# 
  5186  0212                     	;# 
  5187  0213                     	;# 
  5188  0214                     	;# 
  5189  0215                     	;# 
  5190  0215                     	;# 
  5191  0216                     	;# 
  5192  0216                     	;# 
  5193  0217                     	;# 
  5194  0217                     	;# 
  5195  0218                     	;# 
  5196  0218                     	;# 
  5197  0219                     	;# 
  5198  021A                     	;# 
  5199  021B                     	;# 
  5200  021B                     	;# 
  5201  021C                     	;# 
  5202  021C                     	;# 
  5203  021D                     	;# 
  5204  021D                     	;# 
  5205  021E                     	;# 
  5206  021F                     	;# 
  5207  028C                     	;# 
  5208  028C                     	;# 
  5209  028D                     	;# 
  5210  028D                     	;# 
  5211  028E                     	;# 
  5212  028F                     	;# 
  5213  0290                     	;# 
  5214  0290                     	;# 
  5215  0291                     	;# 
  5216  0292                     	;# 
  5217  0292                     	;# 
  5218  0293                     	;# 
  5219  0293                     	;# 
  5220  0294                     	;# 
  5221  0295                     	;# 
  5222  0296                     	;# 
  5223  0296                     	;# 
  5224  0297                     	;# 
  5225  0298                     	;# 
  5226  0298                     	;# 
  5227  0299                     	;# 
  5228  0299                     	;# 
  5229  029A                     	;# 
  5230  029B                     	;# 
  5231  029C                     	;# 
  5232  029C                     	;# 
  5233  029D                     	;# 
  5234  030C                     	;# 
  5235  030C                     	;# 
  5236  030D                     	;# 
  5237  030E                     	;# 
  5238  030F                     	;# 
  5239  0310                     	;# 
  5240  0310                     	;# 
  5241  0311                     	;# 
  5242  0312                     	;# 
  5243  0313                     	;# 
  5244  0314                     	;# 
  5245  0314                     	;# 
  5246  0315                     	;# 
  5247  0316                     	;# 
  5248  0317                     	;# 
  5249  0318                     	;# 
  5250  0318                     	;# 
  5251  0319                     	;# 
  5252  031A                     	;# 
  5253  031B                     	;# 
  5254  031C                     	;# 
  5255  031C                     	;# 
  5256  031D                     	;# 
  5257  031E                     	;# 
  5258  031F                     	;# 
  5259  038C                     	;# 
  5260  038C                     	;# 
  5261  038D                     	;# 
  5262  038E                     	;# 
  5263  0390                     	;# 
  5264  0390                     	;# 
  5265  0391                     	;# 
  5266  0392                     	;# 
  5267  040C                     	;# 
  5268  040D                     	;# 
  5269  040E                     	;# 
  5270  040F                     	;# 
  5271  0410                     	;# 
  5272  0411                     	;# 
  5273  0416                     	;# 
  5274  0416                     	;# 
  5275  0417                     	;# 
  5276  0418                     	;# 
  5277  0418                     	;# 
  5278  0419                     	;# 
  5279  041A                     	;# 
  5280  041A                     	;# 
  5281  041B                     	;# 
  5282  041C                     	;# 
  5283  041C                     	;# 
  5284  041D                     	;# 
  5285  041E                     	;# 
  5286  041F                     	;# 
  5287  048C                     	;# 
  5288  048C                     	;# 
  5289  048D                     	;# 
  5290  048E                     	;# 
  5291  048F                     	;# 
  5292  048F                     	;# 
  5293  0490                     	;# 
  5294  0491                     	;# 
  5295  0492                     	;# 
  5296  0492                     	;# 
  5297  0493                     	;# 
  5298  0494                     	;# 
  5299  0495                     	;# 
  5300  0495                     	;# 
  5301  0496                     	;# 
  5302  0497                     	;# 
  5303  0498                     	;# 
  5304  0499                     	;# 
  5305  049A                     	;# 
  5306  049B                     	;# 
  5307  049C                     	;# 
  5308  049D                     	;# 
  5309  050C                     	;# 
  5310  050C                     	;# 
  5311  050D                     	;# 
  5312  050E                     	;# 
  5313  050F                     	;# 
  5314  050F                     	;# 
  5315  0510                     	;# 
  5316  0511                     	;# 
  5317  0512                     	;# 
  5318  0512                     	;# 
  5319  0513                     	;# 
  5320  0514                     	;# 
  5321  0515                     	;# 
  5322  0515                     	;# 
  5323  0516                     	;# 
  5324  0517                     	;# 
  5325  0518                     	;# 
  5326  0519                     	;# 
  5327  051A                     	;# 
  5328  051B                     	;# 
  5329  051C                     	;# 
  5330  051D                     	;# 
  5331  058C                     	;# 
  5332  058C                     	;# 
  5333  058D                     	;# 
  5334  058E                     	;# 
  5335  058F                     	;# 
  5336  058F                     	;# 
  5337  0590                     	;# 
  5338  0591                     	;# 
  5339  0592                     	;# 
  5340  0593                     	;# 
  5341  060C                     	;# 
  5342  060D                     	;# 
  5343  060E                     	;# 
  5344  060F                     	;# 
  5345  0610                     	;# 
  5346  0611                     	;# 
  5347  0612                     	;# 
  5348  0613                     	;# 
  5349  0614                     	;# 
  5350  0616                     	;# 
  5351  0617                     	;# 
  5352  0618                     	;# 
  5353  0619                     	;# 
  5354  061A                     	;# 
  5355  061B                     	;# 
  5356  061C                     	;# 
  5357  061D                     	;# 
  5358  061E                     	;# 
  5359  068C                     	;# 
  5360  068D                     	;# 
  5361  068E                     	;# 
  5362  068F                     	;# 
  5363  0690                     	;# 
  5364  0691                     	;# 
  5365  0692                     	;# 
  5366  0693                     	;# 
  5367  0694                     	;# 
  5368  070C                     	;# 
  5369  070D                     	;# 
  5370  070E                     	;# 
  5371  070F                     	;# 
  5372  0710                     	;# 
  5373  0711                     	;# 
  5374  0712                     	;# 
  5375  0713                     	;# 
  5376  0714                     	;# 
  5377  0716                     	;# 
  5378  0717                     	;# 
  5379  0718                     	;# 
  5380  0719                     	;# 
  5381  071A                     	;# 
  5382  071B                     	;# 
  5383  071C                     	;# 
  5384  071D                     	;# 
  5385  071E                     	;# 
  5386  0796                     	;# 
  5387  0797                     	;# 
  5388  0798                     	;# 
  5389  0799                     	;# 
  5390  079A                     	;# 
  5391  079B                     	;# 
  5392  080C                     	;# 
  5393  080D                     	;# 
  5394  080E                     	;# 
  5395  080F                     	;# 
  5396  0810                     	;# 
  5397  0811                     	;# 
  5398  0812                     	;# 
  5399  0813                     	;# 
  5400  0814                     	;# 
  5401  081A                     	;# 
  5402  081B                     	;# 
  5403  081C                     	;# 
  5404  081D                     	;# 
  5405  081E                     	;# 
  5406  081F                     	;# 
  5407  088C                     	;# 
  5408  088D                     	;# 
  5409  088E                     	;# 
  5410  088F                     	;# 
  5411  0890                     	;# 
  5412  0891                     	;# 
  5413  0892                     	;# 
  5414  0893                     	;# 
  5415  0895                     	;# 
  5416  0896                     	;# 
  5417  0897                     	;# 
  5418  0898                     	;# 
  5419  0899                     	;# 
  5420  089A                     	;# 
  5421  089B                     	;# 
  5422  090C                     	;# 
  5423  090E                     	;# 
  5424  090F                     	;# 
  5425  091F                     	;# 
  5426  091F                     	;# 
  5427  098F                     	;# 
  5428  098F                     	;# 
  5429  0990                     	;# 
  5430  0991                     	;# 
  5431  0992                     	;# 
  5432  0993                     	;# 
  5433  0994                     	;# 
  5434  0995                     	;# 
  5435  0996                     	;# 
  5436  0997                     	;# 
  5437  0E0F                     	;# 
  5438  0E10                     	;# 
  5439  0E11                     	;# 
  5440  0E12                     	;# 
  5441  0E13                     	;# 
  5442  0E14                     	;# 
  5443  0E15                     	;# 
  5444  0E16                     	;# 
  5445  0E17                     	;# 
  5446  0E18                     	;# 
  5447  0E19                     	;# 
  5448  0E1A                     	;# 
  5449  0E1B                     	;# 
  5450  0E1C                     	;# 
  5451  0E1D                     	;# 
  5452  0E1E                     	;# 
  5453  0E1F                     	;# 
  5454  0E20                     	;# 
  5455  0E21                     	;# 
  5456  0E22                     	;# 
  5457  0E23                     	;# 
  5458  0E24                     	;# 
  5459  0E25                     	;# 
  5460  0E26                     	;# 
  5461  0E27                     	;# 
  5462  0E28                     	;# 
  5463  0E29                     	;# 
  5464  0E2A                     	;# 
  5465  0E2B                     	;# 
  5466  0E2C                     	;# 
  5467  0E2D                     	;# 
  5468  0E2E                     	;# 
  5469  0E2F                     	;# 
  5470  0E30                     	;# 
  5471  0E31                     	;# 
  5472  0E32                     	;# 
  5473  0E33                     	;# 
  5474  0E34                     	;# 
  5475  0E35                     	;# 
  5476  0E36                     	;# 
  5477  0E37                     	;# 
  5478  0E8F                     	;# 
  5479  0E90                     	;# 
  5480  0E91                     	;# 
  5481  0E92                     	;# 
  5482  0E93                     	;# 
  5483  0E94                     	;# 
  5484  0E95                     	;# 
  5485  0E96                     	;# 
  5486  0E97                     	;# 
  5487  0E9C                     	;# 
  5488  0E9D                     	;# 
  5489  0E9E                     	;# 
  5490  0EA1                     	;# 
  5491  0EA2                     	;# 
  5492  0EA3                     	;# 
  5493  0EA4                     	;# 
  5494  0EA5                     	;# 
  5495  0EA9                     	;# 
  5496  0EAA                     	;# 
  5497  0EAB                     	;# 
  5498  0EAC                     	;# 
  5499  0EB1                     	;# 
  5500  0EB2                     	;# 
  5501  0EB3                     	;# 
  5502  0EB8                     	;# 
  5503  0EB9                     	;# 
  5504  0EBA                     	;# 
  5505  0EBB                     	;# 
  5506  0EBC                     	;# 
  5507  0EBD                     	;# 
  5508  0EBE                     	;# 
  5509  0EC3                     	;# 
  5510  0EC5                     	;# 
  5511  0EC6                     	;# 
  5512  0EC7                     	;# 
  5513  0EC8                     	;# 
  5514  0EC9                     	;# 
  5515  0ECA                     	;# 
  5516  0ECB                     	;# 
  5517  0ECC                     	;# 
  5518  0F10                     	;# 
  5519  0F11                     	;# 
  5520  0F12                     	;# 
  5521  0F13                     	;# 
  5522  0F14                     	;# 
  5523  0F15                     	;# 
  5524  0F16                     	;# 
  5525  0F17                     	;# 
  5526  0F18                     	;# 
  5527  0F19                     	;# 
  5528  0F1A                     	;# 
  5529  0F1B                     	;# 
  5530  0F1C                     	;# 
  5531  0F1D                     	;# 
  5532  0F1E                     	;# 
  5533  0F1F                     	;# 
  5534  0F20                     	;# 
  5535  0F21                     	;# 
  5536  0F22                     	;# 
  5537  0F23                     	;# 
  5538  0F24                     	;# 
  5539  0F25                     	;# 
  5540  0F26                     	;# 
  5541  0F27                     	;# 
  5542  0F28                     	;# 
  5543  0F29                     	;# 
  5544  0F2A                     	;# 
  5545  0F2B                     	;# 
  5546  0F2C                     	;# 
  5547  0F2D                     	;# 
  5548  0F2E                     	;# 
  5549  0F2F                     	;# 
  5550  0F30                     	;# 
  5551  0F31                     	;# 
  5552  0F32                     	;# 
  5553  0F38                     	;# 
  5554  0F39                     	;# 
  5555  0F3A                     	;# 
  5556  0F3B                     	;# 
  5557  0F3C                     	;# 
  5558  0F3D                     	;# 
  5559  0F3E                     	;# 
  5560  0F3F                     	;# 
  5561  0F40                     	;# 
  5562  0F41                     	;# 
  5563  0F43                     	;# 
  5564  0F44                     	;# 
  5565  0F45                     	;# 
  5566  0F46                     	;# 
  5567  0F47                     	;# 
  5568  0F48                     	;# 
  5569  0F49                     	;# 
  5570  0F4A                     	;# 
  5571  0F4B                     	;# 
  5572  0F4C                     	;# 
  5573  0F4E                     	;# 
  5574  0F4F                     	;# 
  5575  0F50                     	;# 
  5576  0F51                     	;# 
  5577  0F52                     	;# 
  5578  0F53                     	;# 
  5579  0F54                     	;# 
  5580  0F55                     	;# 
  5581  0F56                     	;# 
  5582  0F57                     	;# 
  5583  0F59                     	;# 
  5584  0F5A                     	;# 
  5585  0F5B                     	;# 
  5586  0F5C                     	;# 
  5587  0F5D                     	;# 
  5588  0F61                     	;# 
  5589  0F62                     	;# 
  5590  0F64                     	;# 
  5591  0F65                     	;# 
  5592  0F66                     	;# 
  5593  0F67                     	;# 
  5594  0F68                     	;# 
  5595  0F69                     	;# 
  5596  0F6A                     	;# 
  5597  0F6B                     	;# 
  5598  0F6C                     	;# 
  5599  0F6D                     	;# 
  5600  0FE4                     	;# 
  5601  0FE5                     	;# 
  5602  0FE6                     	;# 
  5603  0FE7                     	;# 
  5604  0FE8                     	;# 
  5605  0FE9                     	;# 
  5606  0FEA                     	;# 
  5607  0FEB                     	;# 
  5608  0FED                     	;# 
  5609  0FEE                     	;# 
  5610  0FEF                     	;# 
  5611  0000                     	;# 
  5612  0001                     	;# 
  5613  0002                     	;# 
  5614  0003                     	;# 
  5615  0004                     	;# 
  5616  0005                     	;# 
  5617  0006                     	;# 
  5618  0007                     	;# 
  5619  0008                     	;# 
  5620  0009                     	;# 
  5621  000A                     	;# 
  5622  000B                     	;# 
  5623  000C                     	;# 
  5624  000D                     	;# 
  5625  000E                     	;# 
  5626  000F                     	;# 
  5627  0010                     	;# 
  5628  0011                     	;# 
  5629  0012                     	;# 
  5630  0013                     	;# 
  5631  0014                     	;# 
  5632  0015                     	;# 
  5633  0016                     	;# 
  5634  0017                     	;# 
  5635  0018                     	;# 
  5636  0019                     	;# 
  5637  001A                     	;# 
  5638  001C                     	;# 
  5639  001C                     	;# 
  5640  001D                     	;# 
  5641  001D                     	;# 
  5642  001E                     	;# 
  5643  001F                     	;# 
  5644  008C                     	;# 
  5645  008C                     	;# 
  5646  008D                     	;# 
  5647  008E                     	;# 
  5648  008E                     	;# 
  5649  008F                     	;# 
  5650  0090                     	;# 
  5651  0090                     	;# 
  5652  0091                     	;# 
  5653  0093                     	;# 
  5654  0094                     	;# 
  5655  0095                     	;# 
  5656  0096                     	;# 
  5657  0097                     	;# 
  5658  0098                     	;# 
  5659  0099                     	;# 
  5660  009A                     	;# 
  5661  009B                     	;# 
  5662  009C                     	;# 
  5663  009D                     	;# 
  5664  009E                     	;# 
  5665  010C                     	;# 
  5666  010D                     	;# 
  5667  010E                     	;# 
  5668  010E                     	;# 
  5669  010F                     	;# 
  5670  0110                     	;# 
  5671  0110                     	;# 
  5672  0111                     	;# 
  5673  0112                     	;# 
  5674  0112                     	;# 
  5675  0113                     	;# 
  5676  0114                     	;# 
  5677  0114                     	;# 
  5678  0115                     	;# 
  5679  0116                     	;# 
  5680  0116                     	;# 
  5681  0117                     	;# 
  5682  0119                     	;# 
  5683  0119                     	;# 
  5684  0119                     	;# 
  5685  011A                     	;# 
  5686  011A                     	;# 
  5687  011A                     	;# 
  5688  011B                     	;# 
  5689  011B                     	;# 
  5690  011B                     	;# 
  5691  011B                     	;# 
  5692  011B                     	;# 
  5693  011C                     	;# 
  5694  011C                     	;# 
  5695  011C                     	;# 
  5696  011D                     	;# 
  5697  011D                     	;# 
  5698  011D                     	;# 
  5699  011E                     	;# 
  5700  011E                     	;# 
  5701  011E                     	;# 
  5702  011F                     	;# 
  5703  011F                     	;# 
  5704  011F                     	;# 
  5705  011F                     	;# 
  5706  011F                     	;# 
  5707  018C                     	;# 
  5708  018D                     	;# 
  5709  018E                     	;# 
  5710  018F                     	;# 
  5711  0190                     	;# 
  5712  0191                     	;# 
  5713  0192                     	;# 
  5714  0196                     	;# 
  5715  0197                     	;# 
  5716  0198                     	;# 
  5717  0199                     	;# 
  5718  019A                     	;# 
  5719  019B                     	;# 
  5720  019C                     	;# 
  5721  020C                     	;# 
  5722  020C                     	;# 
  5723  020D                     	;# 
  5724  020E                     	;# 
  5725  020F                     	;# 
  5726  020F                     	;# 
  5727  0210                     	;# 
  5728  0210                     	;# 
  5729  0211                     	;# 
  5730  0211                     	;# 
  5731  0212                     	;# 
  5732  0212                     	;# 
  5733  0213                     	;# 
  5734  0214                     	;# 
  5735  0215                     	;# 
  5736  0215                     	;# 
  5737  0216                     	;# 
  5738  0216                     	;# 
  5739  0217                     	;# 
  5740  0217                     	;# 
  5741  0218                     	;# 
  5742  0218                     	;# 
  5743  0219                     	;# 
  5744  021A                     	;# 
  5745  021B                     	;# 
  5746  021B                     	;# 
  5747  021C                     	;# 
  5748  021C                     	;# 
  5749  021D                     	;# 
  5750  021D                     	;# 
  5751  021E                     	;# 
  5752  021F                     	;# 
  5753  028C                     	;# 
  5754  028C                     	;# 
  5755  028D                     	;# 
  5756  028D                     	;# 
  5757  028E                     	;# 
  5758  028F                     	;# 
  5759  0290                     	;# 
  5760  0290                     	;# 
  5761  0291                     	;# 
  5762  0292                     	;# 
  5763  0292                     	;# 
  5764  0293                     	;# 
  5765  0293                     	;# 
  5766  0294                     	;# 
  5767  0295                     	;# 
  5768  0296                     	;# 
  5769  0296                     	;# 
  5770  0297                     	;# 
  5771  0298                     	;# 
  5772  0298                     	;# 
  5773  0299                     	;# 
  5774  0299                     	;# 
  5775  029A                     	;# 
  5776  029B                     	;# 
  5777  029C                     	;# 
  5778  029C                     	;# 
  5779  029D                     	;# 
  5780  030C                     	;# 
  5781  030C                     	;# 
  5782  030D                     	;# 
  5783  030E                     	;# 
  5784  030F                     	;# 
  5785  0310                     	;# 
  5786  0310                     	;# 
  5787  0311                     	;# 
  5788  0312                     	;# 
  5789  0313                     	;# 
  5790  0314                     	;# 
  5791  0314                     	;# 
  5792  0315                     	;# 
  5793  0316                     	;# 
  5794  0317                     	;# 
  5795  0318                     	;# 
  5796  0318                     	;# 
  5797  0319                     	;# 
  5798  031A                     	;# 
  5799  031B                     	;# 
  5800  031C                     	;# 
  5801  031C                     	;# 
  5802  031D                     	;# 
  5803  031E                     	;# 
  5804  031F                     	;# 
  5805  038C                     	;# 
  5806  038C                     	;# 
  5807  038D                     	;# 
  5808  038E                     	;# 
  5809  0390                     	;# 
  5810  0390                     	;# 
  5811  0391                     	;# 
  5812  0392                     	;# 
  5813  040C                     	;# 
  5814  040D                     	;# 
  5815  040E                     	;# 
  5816  040F                     	;# 
  5817  0410                     	;# 
  5818  0411                     	;# 
  5819  0416                     	;# 
  5820  0416                     	;# 
  5821  0417                     	;# 
  5822  0418                     	;# 
  5823  0418                     	;# 
  5824  0419                     	;# 
  5825  041A                     	;# 
  5826  041A                     	;# 
  5827  041B                     	;# 
  5828  041C                     	;# 
  5829  041C                     	;# 
  5830  041D                     	;# 
  5831  041E                     	;# 
  5832  041F                     	;# 
  5833  048C                     	;# 
  5834  048C                     	;# 
  5835  048D                     	;# 
  5836  048E                     	;# 
  5837  048F                     	;# 
  5838  048F                     	;# 
  5839  0490                     	;# 
  5840  0491                     	;# 
  5841  0492                     	;# 
  5842  0492                     	;# 
  5843  0493                     	;# 
  5844  0494                     	;# 
  5845  0495                     	;# 
  5846  0495                     	;# 
  5847  0496                     	;# 
  5848  0497                     	;# 
  5849  0498                     	;# 
  5850  0499                     	;# 
  5851  049A                     	;# 
  5852  049B                     	;# 
  5853  049C                     	;# 
  5854  049D                     	;# 
  5855  050C                     	;# 
  5856  050C                     	;# 
  5857  050D                     	;# 
  5858  050E                     	;# 
  5859  050F                     	;# 
  5860  050F                     	;# 
  5861  0510                     	;# 
  5862  0511                     	;# 
  5863  0512                     	;# 
  5864  0512                     	;# 
  5865  0513                     	;# 
  5866  0514                     	;# 
  5867  0515                     	;# 
  5868  0515                     	;# 
  5869  0516                     	;# 
  5870  0517                     	;# 
  5871  0518                     	;# 
  5872  0519                     	;# 
  5873  051A                     	;# 
  5874  051B                     	;# 
  5875  051C                     	;# 
  5876  051D                     	;# 
  5877  058C                     	;# 
  5878  058C                     	;# 
  5879  058D                     	;# 
  5880  058E                     	;# 
  5881  058F                     	;# 
  5882  058F                     	;# 
  5883  0590                     	;# 
  5884  0591                     	;# 
  5885  0592                     	;# 
  5886  0593                     	;# 
  5887  060C                     	;# 
  5888  060D                     	;# 
  5889  060E                     	;# 
  5890  060F                     	;# 
  5891  0610                     	;# 
  5892  0611                     	;# 
  5893  0612                     	;# 
  5894  0613                     	;# 
  5895  0614                     	;# 
  5896  0616                     	;# 
  5897  0617                     	;# 
  5898  0618                     	;# 
  5899  0619                     	;# 
  5900  061A                     	;# 
  5901  061B                     	;# 
  5902  061C                     	;# 
  5903  061D                     	;# 
  5904  061E                     	;# 
  5905  068C                     	;# 
  5906  068D                     	;# 
  5907  068E                     	;# 
  5908  068F                     	;# 
  5909  0690                     	;# 
  5910  0691                     	;# 
  5911  0692                     	;# 
  5912  0693                     	;# 
  5913  0694                     	;# 
  5914  070C                     	;# 
  5915  070D                     	;# 
  5916  070E                     	;# 
  5917  070F                     	;# 
  5918  0710                     	;# 
  5919  0711                     	;# 
  5920  0712                     	;# 
  5921  0713                     	;# 
  5922  0714                     	;# 
  5923  0716                     	;# 
  5924  0717                     	;# 
  5925  0718                     	;# 
  5926  0719                     	;# 
  5927  071A                     	;# 
  5928  071B                     	;# 
  5929  071C                     	;# 
  5930  071D                     	;# 
  5931  071E                     	;# 
  5932  0796                     	;# 
  5933  0797                     	;# 
  5934  0798                     	;# 
  5935  0799                     	;# 
  5936  079A                     	;# 
  5937  079B                     	;# 
  5938  080C                     	;# 
  5939  080D                     	;# 
  5940  080E                     	;# 
  5941  080F                     	;# 
  5942  0810                     	;# 
  5943  0811                     	;# 
  5944  0812                     	;# 
  5945  0813                     	;# 
  5946  0814                     	;# 
  5947  081A                     	;# 
  5948  081B                     	;# 
  5949  081C                     	;# 
  5950  081D                     	;# 
  5951  081E                     	;# 
  5952  081F                     	;# 
  5953  088C                     	;# 
  5954  088D                     	;# 
  5955  088E                     	;# 
  5956  088F                     	;# 
  5957  0890                     	;# 
  5958  0891                     	;# 
  5959  0892                     	;# 
  5960  0893                     	;# 
  5961  0895                     	;# 
  5962  0896                     	;# 
  5963  0897                     	;# 
  5964  0898                     	;# 
  5965  0899                     	;# 
  5966  089A                     	;# 
  5967  089B                     	;# 
  5968  090C                     	;# 
  5969  090E                     	;# 
  5970  090F                     	;# 
  5971  091F                     	;# 
  5972  091F                     	;# 
  5973  098F                     	;# 
  5974  098F                     	;# 
  5975  0990                     	;# 
  5976  0991                     	;# 
  5977  0992                     	;# 
  5978  0993                     	;# 
  5979  0994                     	;# 
  5980  0995                     	;# 
  5981  0996                     	;# 
  5982  0997                     	;# 
  5983  0E0F                     	;# 
  5984  0E10                     	;# 
  5985  0E11                     	;# 
  5986  0E12                     	;# 
  5987  0E13                     	;# 
  5988  0E14                     	;# 
  5989  0E15                     	;# 
  5990  0E16                     	;# 
  5991  0E17                     	;# 
  5992  0E18                     	;# 
  5993  0E19                     	;# 
  5994  0E1A                     	;# 
  5995  0E1B                     	;# 
  5996  0E1C                     	;# 
  5997  0E1D                     	;# 
  5998  0E1E                     	;# 
  5999  0E1F                     	;# 
  6000  0E20                     	;# 
  6001  0E21                     	;# 
  6002  0E22                     	;# 
  6003  0E23                     	;# 
  6004  0E24                     	;# 
  6005  0E25                     	;# 
  6006  0E26                     	;# 
  6007  0E27                     	;# 
  6008  0E28                     	;# 
  6009  0E29                     	;# 
  6010  0E2A                     	;# 
  6011  0E2B                     	;# 
  6012  0E2C                     	;# 
  6013  0E2D                     	;# 
  6014  0E2E                     	;# 
  6015  0E2F                     	;# 
  6016  0E30                     	;# 
  6017  0E31                     	;# 
  6018  0E32                     	;# 
  6019  0E33                     	;# 
  6020  0E34                     	;# 
  6021  0E35                     	;# 
  6022  0E36                     	;# 
  6023  0E37                     	;# 
  6024  0E8F                     	;# 
  6025  0E90                     	;# 
  6026  0E91                     	;# 
  6027  0E92                     	;# 
  6028  0E93                     	;# 
  6029  0E94                     	;# 
  6030  0E95                     	;# 
  6031  0E96                     	;# 
  6032  0E97                     	;# 
  6033  0E9C                     	;# 
  6034  0E9D                     	;# 
  6035  0E9E                     	;# 
  6036  0EA1                     	;# 
  6037  0EA2                     	;# 
  6038  0EA3                     	;# 
  6039  0EA4                     	;# 
  6040  0EA5                     	;# 
  6041  0EA9                     	;# 
  6042  0EAA                     	;# 
  6043  0EAB                     	;# 
  6044  0EAC                     	;# 
  6045  0EB1                     	;# 
  6046  0EB2                     	;# 
  6047  0EB3                     	;# 
  6048  0EB8                     	;# 
  6049  0EB9                     	;# 
  6050  0EBA                     	;# 
  6051  0EBB                     	;# 
  6052  0EBC                     	;# 
  6053  0EBD                     	;# 
  6054  0EBE                     	;# 
  6055  0EC3                     	;# 
  6056  0EC5                     	;# 
  6057  0EC6                     	;# 
  6058  0EC7                     	;# 
  6059  0EC8                     	;# 
  6060  0EC9                     	;# 
  6061  0ECA                     	;# 
  6062  0ECB                     	;# 
  6063  0ECC                     	;# 
  6064  0F10                     	;# 
  6065  0F11                     	;# 
  6066  0F12                     	;# 
  6067  0F13                     	;# 
  6068  0F14                     	;# 
  6069  0F15                     	;# 
  6070  0F16                     	;# 
  6071  0F17                     	;# 
  6072  0F18                     	;# 
  6073  0F19                     	;# 
  6074  0F1A                     	;# 
  6075  0F1B                     	;# 
  6076  0F1C                     	;# 
  6077  0F1D                     	;# 
  6078  0F1E                     	;# 
  6079  0F1F                     	;# 
  6080  0F20                     	;# 
  6081  0F21                     	;# 
  6082  0F22                     	;# 
  6083  0F23                     	;# 
  6084  0F24                     	;# 
  6085  0F25                     	;# 
  6086  0F26                     	;# 
  6087  0F27                     	;# 
  6088  0F28                     	;# 
  6089  0F29                     	;# 
  6090  0F2A                     	;# 
  6091  0F2B                     	;# 
  6092  0F2C                     	;# 
  6093  0F2D                     	;# 
  6094  0F2E                     	;# 
  6095  0F2F                     	;# 
  6096  0F30                     	;# 
  6097  0F31                     	;# 
  6098  0F32                     	;# 
  6099  0F38                     	;# 
  6100  0F39                     	;# 
  6101  0F3A                     	;# 
  6102  0F3B                     	;# 
  6103  0F3C                     	;# 
  6104  0F3D                     	;# 
  6105  0F3E                     	;# 
  6106  0F3F                     	;# 
  6107  0F40                     	;# 
  6108  0F41                     	;# 
  6109  0F43                     	;# 
  6110  0F44                     	;# 
  6111  0F45                     	;# 
  6112  0F46                     	;# 
  6113  0F47                     	;# 
  6114  0F48                     	;# 
  6115  0F49                     	;# 
  6116  0F4A                     	;# 
  6117  0F4B                     	;# 
  6118  0F4C                     	;# 
  6119  0F4E                     	;# 
  6120  0F4F                     	;# 
  6121  0F50                     	;# 
  6122  0F51                     	;# 
  6123  0F52                     	;# 
  6124  0F53                     	;# 
  6125  0F54                     	;# 
  6126  0F55                     	;# 
  6127  0F56                     	;# 
  6128  0F57                     	;# 
  6129  0F59                     	;# 
  6130  0F5A                     	;# 
  6131  0F5B                     	;# 
  6132  0F5C                     	;# 
  6133  0F5D                     	;# 
  6134  0F61                     	;# 
  6135  0F62                     	;# 
  6136  0F64                     	;# 
  6137  0F65                     	;# 
  6138  0F66                     	;# 
  6139  0F67                     	;# 
  6140  0F68                     	;# 
  6141  0F69                     	;# 
  6142  0F6A                     	;# 
  6143  0F6B                     	;# 
  6144  0F6C                     	;# 
  6145  0F6D                     	;# 
  6146  0FE4                     	;# 
  6147  0FE5                     	;# 
  6148  0FE6                     	;# 
  6149  0FE7                     	;# 
  6150  0FE8                     	;# 
  6151  0FE9                     	;# 
  6152  0FEA                     	;# 
  6153  0FEB                     	;# 
  6154  0FED                     	;# 
  6155  0FEE                     	;# 
  6156  0FEF                     	;# 
  6157  0000                     	;# 
  6158  0001                     	;# 
  6159  0002                     	;# 
  6160  0003                     	;# 
  6161  0004                     	;# 
  6162  0005                     	;# 
  6163  0006                     	;# 
  6164  0007                     	;# 
  6165  0008                     	;# 
  6166  0009                     	;# 
  6167  000A                     	;# 
  6168  000B                     	;# 
  6169  000C                     	;# 
  6170  000D                     	;# 
  6171  000E                     	;# 
  6172  000F                     	;# 
  6173  0010                     	;# 
  6174  0011                     	;# 
  6175  0012                     	;# 
  6176  0013                     	;# 
  6177  0014                     	;# 
  6178  0015                     	;# 
  6179  0016                     	;# 
  6180  0017                     	;# 
  6181  0018                     	;# 
  6182  0019                     	;# 
  6183  001A                     	;# 
  6184  001C                     	;# 
  6185  001C                     	;# 
  6186  001D                     	;# 
  6187  001D                     	;# 
  6188  001E                     	;# 
  6189  001F                     	;# 
  6190  008C                     	;# 
  6191  008C                     	;# 
  6192  008D                     	;# 
  6193  008E                     	;# 
  6194  008E                     	;# 
  6195  008F                     	;# 
  6196  0090                     	;# 
  6197  0090                     	;# 
  6198  0091                     	;# 
  6199  0093                     	;# 
  6200  0094                     	;# 
  6201  0095                     	;# 
  6202  0096                     	;# 
  6203  0097                     	;# 
  6204  0098                     	;# 
  6205  0099                     	;# 
  6206  009A                     	;# 
  6207  009B                     	;# 
  6208  009C                     	;# 
  6209  009D                     	;# 
  6210  009E                     	;# 
  6211  010C                     	;# 
  6212  010D                     	;# 
  6213  010E                     	;# 
  6214  010E                     	;# 
  6215  010F                     	;# 
  6216  0110                     	;# 
  6217  0110                     	;# 
  6218  0111                     	;# 
  6219  0112                     	;# 
  6220  0112                     	;# 
  6221  0113                     	;# 
  6222  0114                     	;# 
  6223  0114                     	;# 
  6224  0115                     	;# 
  6225  0116                     	;# 
  6226  0116                     	;# 
  6227  0117                     	;# 
  6228  0119                     	;# 
  6229  0119                     	;# 
  6230  0119                     	;# 
  6231  011A                     	;# 
  6232  011A                     	;# 
  6233  011A                     	;# 
  6234  011B                     	;# 
  6235  011B                     	;# 
  6236  011B                     	;# 
  6237  011B                     	;# 
  6238  011B                     	;# 
  6239  011C                     	;# 
  6240  011C                     	;# 
  6241  011C                     	;# 
  6242  011D                     	;# 
  6243  011D                     	;# 
  6244  011D                     	;# 
  6245  011E                     	;# 
  6246  011E                     	;# 
  6247  011E                     	;# 
  6248  011F                     	;# 
  6249  011F                     	;# 
  6250  011F                     	;# 
  6251  011F                     	;# 
  6252  011F                     	;# 
  6253  018C                     	;# 
  6254  018D                     	;# 
  6255  018E                     	;# 
  6256  018F                     	;# 
  6257  0190                     	;# 
  6258  0191                     	;# 
  6259  0192                     	;# 
  6260  0196                     	;# 
  6261  0197                     	;# 
  6262  0198                     	;# 
  6263  0199                     	;# 
  6264  019A                     	;# 
  6265  019B                     	;# 
  6266  019C                     	;# 
  6267  020C                     	;# 
  6268  020C                     	;# 
  6269  020D                     	;# 
  6270  020E                     	;# 
  6271  020F                     	;# 
  6272  020F                     	;# 
  6273  0210                     	;# 
  6274  0210                     	;# 
  6275  0211                     	;# 
  6276  0211                     	;# 
  6277  0212                     	;# 
  6278  0212                     	;# 
  6279  0213                     	;# 
  6280  0214                     	;# 
  6281  0215                     	;# 
  6282  0215                     	;# 
  6283  0216                     	;# 
  6284  0216                     	;# 
  6285  0217                     	;# 
  6286  0217                     	;# 
  6287  0218                     	;# 
  6288  0218                     	;# 
  6289  0219                     	;# 
  6290  021A                     	;# 
  6291  021B                     	;# 
  6292  021B                     	;# 
  6293  021C                     	;# 
  6294  021C                     	;# 
  6295  021D                     	;# 
  6296  021D                     	;# 
  6297  021E                     	;# 
  6298  021F                     	;# 
  6299  028C                     	;# 
  6300  028C                     	;# 
  6301  028D                     	;# 
  6302  028D                     	;# 
  6303  028E                     	;# 
  6304  028F                     	;# 
  6305  0290                     	;# 
  6306  0290                     	;# 
  6307  0291                     	;# 
  6308  0292                     	;# 
  6309  0292                     	;# 
  6310  0293                     	;# 
  6311  0293                     	;# 
  6312  0294                     	;# 
  6313  0295                     	;# 
  6314  0296                     	;# 
  6315  0296                     	;# 
  6316  0297                     	;# 
  6317  0298                     	;# 
  6318  0298                     	;# 
  6319  0299                     	;# 
  6320  0299                     	;# 
  6321  029A                     	;# 
  6322  029B                     	;# 
  6323  029C                     	;# 
  6324  029C                     	;# 
  6325  029D                     	;# 
  6326  030C                     	;# 
  6327  030C                     	;# 
  6328  030D                     	;# 
  6329  030E                     	;# 
  6330  030F                     	;# 
  6331  0310                     	;# 
  6332  0310                     	;# 
  6333  0311                     	;# 
  6334  0312                     	;# 
  6335  0313                     	;# 
  6336  0314                     	;# 
  6337  0314                     	;# 
  6338  0315                     	;# 
  6339  0316                     	;# 
  6340  0317                     	;# 
  6341  0318                     	;# 
  6342  0318                     	;# 
  6343  0319                     	;# 
  6344  031A                     	;# 
  6345  031B                     	;# 
  6346  031C                     	;# 
  6347  031C                     	;# 
  6348  031D                     	;# 
  6349  031E                     	;# 
  6350  031F                     	;# 
  6351  038C                     	;# 
  6352  038C                     	;# 
  6353  038D                     	;# 
  6354  038E                     	;# 
  6355  0390                     	;# 
  6356  0390                     	;# 
  6357  0391                     	;# 
  6358  0392                     	;# 
  6359  040C                     	;# 
  6360  040D                     	;# 
  6361  040E                     	;# 
  6362  040F                     	;# 
  6363  0410                     	;# 
  6364  0411                     	;# 
  6365  0416                     	;# 
  6366  0416                     	;# 
  6367  0417                     	;# 
  6368  0418                     	;# 
  6369  0418                     	;# 
  6370  0419                     	;# 
  6371  041A                     	;# 
  6372  041A                     	;# 
  6373  041B                     	;# 
  6374  041C                     	;# 
  6375  041C                     	;# 
  6376  041D                     	;# 
  6377  041E                     	;# 
  6378  041F                     	;# 
  6379  048C                     	;# 
  6380  048C                     	;# 
  6381  048D                     	;# 
  6382  048E                     	;# 
  6383  048F                     	;# 
  6384  048F                     	;# 
  6385  0490                     	;# 
  6386  0491                     	;# 
  6387  0492                     	;# 
  6388  0492                     	;# 
  6389  0493                     	;# 
  6390  0494                     	;# 
  6391  0495                     	;# 
  6392  0495                     	;# 
  6393  0496                     	;# 
  6394  0497                     	;# 
  6395  0498                     	;# 
  6396  0499                     	;# 
  6397  049A                     	;# 
  6398  049B                     	;# 
  6399  049C                     	;# 
  6400  049D                     	;# 
  6401  050C                     	;# 
  6402  050C                     	;# 
  6403  050D                     	;# 
  6404  050E                     	;# 
  6405  050F                     	;# 
  6406  050F                     	;# 
  6407  0510                     	;# 
  6408  0511                     	;# 
  6409  0512                     	;# 
  6410  0512                     	;# 
  6411  0513                     	;# 
  6412  0514                     	;# 
  6413  0515                     	;# 
  6414  0515                     	;# 
  6415  0516                     	;# 
  6416  0517                     	;# 
  6417  0518                     	;# 
  6418  0519                     	;# 
  6419  051A                     	;# 
  6420  051B                     	;# 
  6421  051C                     	;# 
  6422  051D                     	;# 
  6423  058C                     	;# 
  6424  058C                     	;# 
  6425  058D                     	;# 
  6426  058E                     	;# 
  6427  058F                     	;# 
  6428  058F                     	;# 
  6429  0590                     	;# 
  6430  0591                     	;# 
  6431  0592                     	;# 
  6432  0593                     	;# 
  6433  060C                     	;# 
  6434  060D                     	;# 
  6435  060E                     	;# 
  6436  060F                     	;# 
  6437  0610                     	;# 
  6438  0611                     	;# 
  6439  0612                     	;# 
  6440  0613                     	;# 
  6441  0614                     	;# 
  6442  0616                     	;# 
  6443  0617                     	;# 
  6444  0618                     	;# 
  6445  0619                     	;# 
  6446  061A                     	;# 
  6447  061B                     	;# 
  6448  061C                     	;# 
  6449  061D                     	;# 
  6450  061E                     	;# 
  6451  068C                     	;# 
  6452  068D                     	;# 
  6453  068E                     	;# 
  6454  068F                     	;# 
  6455  0690                     	;# 
  6456  0691                     	;# 
  6457  0692                     	;# 
  6458  0693                     	;# 
  6459  0694                     	;# 
  6460  070C                     	;# 
  6461  070D                     	;# 
  6462  070E                     	;# 
  6463  070F                     	;# 
  6464  0710                     	;# 
  6465  0711                     	;# 
  6466  0712                     	;# 
  6467  0713                     	;# 
  6468  0714                     	;# 
  6469  0716                     	;# 
  6470  0717                     	;# 
  6471  0718                     	;# 
  6472  0719                     	;# 
  6473  071A                     	;# 
  6474  071B                     	;# 
  6475  071C                     	;# 
  6476  071D                     	;# 
  6477  071E                     	;# 
  6478  0796                     	;# 
  6479  0797                     	;# 
  6480  0798                     	;# 
  6481  0799                     	;# 
  6482  079A                     	;# 
  6483  079B                     	;# 
  6484  080C                     	;# 
  6485  080D                     	;# 
  6486  080E                     	;# 
  6487  080F                     	;# 
  6488  0810                     	;# 
  6489  0811                     	;# 
  6490  0812                     	;# 
  6491  0813                     	;# 
  6492  0814                     	;# 
  6493  081A                     	;# 
  6494  081B                     	;# 
  6495  081C                     	;# 
  6496  081D                     	;# 
  6497  081E                     	;# 
  6498  081F                     	;# 
  6499  088C                     	;# 
  6500  088D                     	;# 
  6501  088E                     	;# 
  6502  088F                     	;# 
  6503  0890                     	;# 
  6504  0891                     	;# 
  6505  0892                     	;# 
  6506  0893                     	;# 
  6507  0895                     	;# 
  6508  0896                     	;# 
  6509  0897                     	;# 
  6510  0898                     	;# 
  6511  0899                     	;# 
  6512  089A                     	;# 
  6513  089B                     	;# 
  6514  090C                     	;# 
  6515  090E                     	;# 
  6516  090F                     	;# 
  6517  091F                     	;# 
  6518  091F                     	;# 
  6519  098F                     	;# 
  6520  098F                     	;# 
  6521  0990                     	;# 
  6522  0991                     	;# 
  6523  0992                     	;# 
  6524  0993                     	;# 
  6525  0994                     	;# 
  6526  0995                     	;# 
  6527  0996                     	;# 
  6528  0997                     	;# 
  6529  0E0F                     	;# 
  6530  0E10                     	;# 
  6531  0E11                     	;# 
  6532  0E12                     	;# 
  6533  0E13                     	;# 
  6534  0E14                     	;# 
  6535  0E15                     	;# 
  6536  0E16                     	;# 
  6537  0E17                     	;# 
  6538  0E18                     	;# 
  6539  0E19                     	;# 
  6540  0E1A                     	;# 
  6541  0E1B                     	;# 
  6542  0E1C                     	;# 
  6543  0E1D                     	;# 
  6544  0E1E                     	;# 
  6545  0E1F                     	;# 
  6546  0E20                     	;# 
  6547  0E21                     	;# 
  6548  0E22                     	;# 
  6549  0E23                     	;# 
  6550  0E24                     	;# 
  6551  0E25                     	;# 
  6552  0E26                     	;# 
  6553  0E27                     	;# 
  6554  0E28                     	;# 
  6555  0E29                     	;# 
  6556  0E2A                     	;# 
  6557  0E2B                     	;# 
  6558  0E2C                     	;# 
  6559  0E2D                     	;# 
  6560  0E2E                     	;# 
  6561  0E2F                     	;# 
  6562  0E30                     	;# 
  6563  0E31                     	;# 
  6564  0E32                     	;# 
  6565  0E33                     	;# 
  6566  0E34                     	;# 
  6567  0E35                     	;# 
  6568  0E36                     	;# 
  6569  0E37                     	;# 
  6570  0E8F                     	;# 
  6571  0E90                     	;# 
  6572  0E91                     	;# 
  6573  0E92                     	;# 
  6574  0E93                     	;# 
  6575  0E94                     	;# 
  6576  0E95                     	;# 
  6577  0E96                     	;# 
  6578  0E97                     	;# 
  6579  0E9C                     	;# 
  6580  0E9D                     	;# 
  6581  0E9E                     	;# 
  6582  0EA1                     	;# 
  6583  0EA2                     	;# 
  6584  0EA3                     	;# 
  6585  0EA4                     	;# 
  6586  0EA5                     	;# 
  6587  0EA9                     	;# 
  6588  0EAA                     	;# 
  6589  0EAB                     	;# 
  6590  0EAC                     	;# 
  6591  0EB1                     	;# 
  6592  0EB2                     	;# 
  6593  0EB3                     	;# 
  6594  0EB8                     	;# 
  6595  0EB9                     	;# 
  6596  0EBA                     	;# 
  6597  0EBB                     	;# 
  6598  0EBC                     	;# 
  6599  0EBD                     	;# 
  6600  0EBE                     	;# 
  6601  0EC3                     	;# 
  6602  0EC5                     	;# 
  6603  0EC6                     	;# 
  6604  0EC7                     	;# 
  6605  0EC8                     	;# 
  6606  0EC9                     	;# 
  6607  0ECA                     	;# 
  6608  0ECB                     	;# 
  6609  0ECC                     	;# 
  6610  0F10                     	;# 
  6611  0F11                     	;# 
  6612  0F12                     	;# 
  6613  0F13                     	;# 
  6614  0F14                     	;# 
  6615  0F15                     	;# 
  6616  0F16                     	;# 
  6617  0F17                     	;# 
  6618  0F18                     	;# 
  6619  0F19                     	;# 
  6620  0F1A                     	;# 
  6621  0F1B                     	;# 
  6622  0F1C                     	;# 
  6623  0F1D                     	;# 
  6624  0F1E                     	;# 
  6625  0F1F                     	;# 
  6626  0F20                     	;# 
  6627  0F21                     	;# 
  6628  0F22                     	;# 
  6629  0F23                     	;# 
  6630  0F24                     	;# 
  6631  0F25                     	;# 
  6632  0F26                     	;# 
  6633  0F27                     	;# 
  6634  0F28                     	;# 
  6635  0F29                     	;# 
  6636  0F2A                     	;# 
  6637  0F2B                     	;# 
  6638  0F2C                     	;# 
  6639  0F2D                     	;# 
  6640  0F2E                     	;# 
  6641  0F2F                     	;# 
  6642  0F30                     	;# 
  6643  0F31                     	;# 
  6644  0F32                     	;# 
  6645  0F38                     	;# 
  6646  0F39                     	;# 
  6647  0F3A                     	;# 
  6648  0F3B                     	;# 
  6649  0F3C                     	;# 
  6650  0F3D                     	;# 
  6651  0F3E                     	;# 
  6652  0F3F                     	;# 
  6653  0F40                     	;# 
  6654  0F41                     	;# 
  6655  0F43                     	;# 
  6656  0F44                     	;# 
  6657  0F45                     	;# 
  6658  0F46                     	;# 
  6659  0F47                     	;# 
  6660  0F48                     	;# 
  6661  0F49                     	;# 
  6662  0F4A                     	;# 
  6663  0F4B                     	;# 
  6664  0F4C                     	;# 
  6665  0F4E                     	;# 
  6666  0F4F                     	;# 
  6667  0F50                     	;# 
  6668  0F51                     	;# 
  6669  0F52                     	;# 
  6670  0F53                     	;# 
  6671  0F54                     	;# 
  6672  0F55                     	;# 
  6673  0F56                     	;# 
  6674  0F57                     	;# 
  6675  0F59                     	;# 
  6676  0F5A                     	;# 
  6677  0F5B                     	;# 
  6678  0F5C                     	;# 
  6679  0F5D                     	;# 
  6680  0F61                     	;# 
  6681  0F62                     	;# 
  6682  0F64                     	;# 
  6683  0F65                     	;# 
  6684  0F66                     	;# 
  6685  0F67                     	;# 
  6686  0F68                     	;# 
  6687  0F69                     	;# 
  6688  0F6A                     	;# 
  6689  0F6B                     	;# 
  6690  0F6C                     	;# 
  6691  0F6D                     	;# 
  6692  0FE4                     	;# 
  6693  0FE5                     	;# 
  6694  0FE6                     	;# 
  6695  0FE7                     	;# 
  6696  0FE8                     	;# 
  6697  0FE9                     	;# 
  6698  0FEA                     	;# 
  6699  0FEB                     	;# 
  6700  0FED                     	;# 
  6701  0FEE                     	;# 
  6702  0FEF                     	;# 
  6703  0000                     	;# 
  6704  0001                     	;# 
  6705  0002                     	;# 
  6706  0003                     	;# 
  6707  0004                     	;# 
  6708  0005                     	;# 
  6709  0006                     	;# 
  6710  0007                     	;# 
  6711  0008                     	;# 
  6712  0009                     	;# 
  6713  000A                     	;# 
  6714  000B                     	;# 
  6715  000C                     	;# 
  6716  000D                     	;# 
  6717  000E                     	;# 
  6718  000F                     	;# 
  6719  0010                     	;# 
  6720  0011                     	;# 
  6721  0012                     	;# 
  6722  0013                     	;# 
  6723  0014                     	;# 
  6724  0015                     	;# 
  6725  0016                     	;# 
  6726  0017                     	;# 
  6727  0018                     	;# 
  6728  0019                     	;# 
  6729  001A                     	;# 
  6730  001C                     	;# 
  6731  001C                     	;# 
  6732  001D                     	;# 
  6733  001D                     	;# 
  6734  001E                     	;# 
  6735  001F                     	;# 
  6736  008C                     	;# 
  6737  008C                     	;# 
  6738  008D                     	;# 
  6739  008E                     	;# 
  6740  008E                     	;# 
  6741  008F                     	;# 
  6742  0090                     	;# 
  6743  0090                     	;# 
  6744  0091                     	;# 
  6745  0093                     	;# 
  6746  0094                     	;# 
  6747  0095                     	;# 
  6748  0096                     	;# 
  6749  0097                     	;# 
  6750  0098                     	;# 
  6751  0099                     	;# 
  6752  009A                     	;# 
  6753  009B                     	;# 
  6754  009C                     	;# 
  6755  009D                     	;# 
  6756  009E                     	;# 
  6757  010C                     	;# 
  6758  010D                     	;# 
  6759  010E                     	;# 
  6760  010E                     	;# 
  6761  010F                     	;# 
  6762  0110                     	;# 
  6763  0110                     	;# 
  6764  0111                     	;# 
  6765  0112                     	;# 
  6766  0112                     	;# 
  6767  0113                     	;# 
  6768  0114                     	;# 
  6769  0114                     	;# 
  6770  0115                     	;# 
  6771  0116                     	;# 
  6772  0116                     	;# 
  6773  0117                     	;# 
  6774  0119                     	;# 
  6775  0119                     	;# 
  6776  0119                     	;# 
  6777  011A                     	;# 
  6778  011A                     	;# 
  6779  011A                     	;# 
  6780  011B                     	;# 
  6781  011B                     	;# 
  6782  011B                     	;# 
  6783  011B                     	;# 
  6784  011B                     	;# 
  6785  011C                     	;# 
  6786  011C                     	;# 
  6787  011C                     	;# 
  6788  011D                     	;# 
  6789  011D                     	;# 
  6790  011D                     	;# 
  6791  011E                     	;# 
  6792  011E                     	;# 
  6793  011E                     	;# 
  6794  011F                     	;# 
  6795  011F                     	;# 
  6796  011F                     	;# 
  6797  011F                     	;# 
  6798  011F                     	;# 
  6799  018C                     	;# 
  6800  018D                     	;# 
  6801  018E                     	;# 
  6802  018F                     	;# 
  6803  0190                     	;# 
  6804  0191                     	;# 
  6805  0192                     	;# 
  6806  0196                     	;# 
  6807  0197                     	;# 
  6808  0198                     	;# 
  6809  0199                     	;# 
  6810  019A                     	;# 
  6811  019B                     	;# 
  6812  019C                     	;# 
  6813  020C                     	;# 
  6814  020C                     	;# 
  6815  020D                     	;# 
  6816  020E                     	;# 
  6817  020F                     	;# 
  6818  020F                     	;# 
  6819  0210                     	;# 
  6820  0210                     	;# 
  6821  0211                     	;# 
  6822  0211                     	;# 
  6823  0212                     	;# 
  6824  0212                     	;# 
  6825  0213                     	;# 
  6826  0214                     	;# 
  6827  0215                     	;# 
  6828  0215                     	;# 
  6829  0216                     	;# 
  6830  0216                     	;# 
  6831  0217                     	;# 
  6832  0217                     	;# 
  6833  0218                     	;# 
  6834  0218                     	;# 
  6835  0219                     	;# 
  6836  021A                     	;# 
  6837  021B                     	;# 
  6838  021B                     	;# 
  6839  021C                     	;# 
  6840  021C                     	;# 
  6841  021D                     	;# 
  6842  021D                     	;# 
  6843  021E                     	;# 
  6844  021F                     	;# 
  6845  028C                     	;# 
  6846  028C                     	;# 
  6847  028D                     	;# 
  6848  028D                     	;# 
  6849  028E                     	;# 
  6850  028F                     	;# 
  6851  0290                     	;# 
  6852  0290                     	;# 
  6853  0291                     	;# 
  6854  0292                     	;# 
  6855  0292                     	;# 
  6856  0293                     	;# 
  6857  0293                     	;# 
  6858  0294                     	;# 
  6859  0295                     	;# 
  6860  0296                     	;# 
  6861  0296                     	;# 
  6862  0297                     	;# 
  6863  0298                     	;# 
  6864  0298                     	;# 
  6865  0299                     	;# 
  6866  0299                     	;# 
  6867  029A                     	;# 
  6868  029B                     	;# 
  6869  029C                     	;# 
  6870  029C                     	;# 
  6871  029D                     	;# 
  6872  030C                     	;# 
  6873  030C                     	;# 
  6874  030D                     	;# 
  6875  030E                     	;# 
  6876  030F                     	;# 
  6877  0310                     	;# 
  6878  0310                     	;# 
  6879  0311                     	;# 
  6880  0312                     	;# 
  6881  0313                     	;# 
  6882  0314                     	;# 
  6883  0314                     	;# 
  6884  0315                     	;# 
  6885  0316                     	;# 
  6886  0317                     	;# 
  6887  0318                     	;# 
  6888  0318                     	;# 
  6889  0319                     	;# 
  6890  031A                     	;# 
  6891  031B                     	;# 
  6892  031C                     	;# 
  6893  031C                     	;# 
  6894  031D                     	;# 
  6895  031E                     	;# 
  6896  031F                     	;# 
  6897  038C                     	;# 
  6898  038C                     	;# 
  6899  038D                     	;# 
  6900  038E                     	;# 
  6901  0390                     	;# 
  6902  0390                     	;# 
  6903  0391                     	;# 
  6904  0392                     	;# 
  6905  040C                     	;# 
  6906  040D                     	;# 
  6907  040E                     	;# 
  6908  040F                     	;# 
  6909  0410                     	;# 
  6910  0411                     	;# 
  6911  0416                     	;# 
  6912  0416                     	;# 
  6913  0417                     	;# 
  6914  0418                     	;# 
  6915  0418                     	;# 
  6916  0419                     	;# 
  6917  041A                     	;# 
  6918  041A                     	;# 
  6919  041B                     	;# 
  6920  041C                     	;# 
  6921  041C                     	;# 
  6922  041D                     	;# 
  6923  041E                     	;# 
  6924  041F                     	;# 
  6925  048C                     	;# 
  6926  048C                     	;# 
  6927  048D                     	;# 
  6928  048E                     	;# 
  6929  048F                     	;# 
  6930  048F                     	;# 
  6931  0490                     	;# 
  6932  0491                     	;# 
  6933  0492                     	;# 
  6934  0492                     	;# 
  6935  0493                     	;# 
  6936  0494                     	;# 
  6937  0495                     	;# 
  6938  0495                     	;# 
  6939  0496                     	;# 
  6940  0497                     	;# 
  6941  0498                     	;# 
  6942  0499                     	;# 
  6943  049A                     	;# 
  6944  049B                     	;# 
  6945  049C                     	;# 
  6946  049D                     	;# 
  6947  050C                     	;# 
  6948  050C                     	;# 
  6949  050D                     	;# 
  6950  050E                     	;# 
  6951  050F                     	;# 
  6952  050F                     	;# 
  6953  0510                     	;# 
  6954  0511                     	;# 
  6955  0512                     	;# 
  6956  0512                     	;# 
  6957  0513                     	;# 
  6958  0514                     	;# 
  6959  0515                     	;# 
  6960  0515                     	;# 
  6961  0516                     	;# 
  6962  0517                     	;# 
  6963  0518                     	;# 
  6964  0519                     	;# 
  6965  051A                     	;# 
  6966  051B                     	;# 
  6967  051C                     	;# 
  6968  051D                     	;# 
  6969  058C                     	;# 
  6970  058C                     	;# 
  6971  058D                     	;# 
  6972  058E                     	;# 
  6973  058F                     	;# 
  6974  058F                     	;# 
  6975  0590                     	;# 
  6976  0591                     	;# 
  6977  0592                     	;# 
  6978  0593                     	;# 
  6979  060C                     	;# 
  6980  060D                     	;# 
  6981  060E                     	;# 
  6982  060F                     	;# 
  6983  0610                     	;# 
  6984  0611                     	;# 
  6985  0612                     	;# 
  6986  0613                     	;# 
  6987  0614                     	;# 
  6988  0616                     	;# 
  6989  0617                     	;# 
  6990  0618                     	;# 
  6991  0619                     	;# 
  6992  061A                     	;# 
  6993  061B                     	;# 
  6994  061C                     	;# 
  6995  061D                     	;# 
  6996  061E                     	;# 
  6997  068C                     	;# 
  6998  068D                     	;# 
  6999  068E                     	;# 
  7000  068F                     	;# 
  7001  0690                     	;# 
  7002  0691                     	;# 
  7003  0692                     	;# 
  7004  0693                     	;# 
  7005  0694                     	;# 
  7006  070C                     	;# 
  7007  070D                     	;# 
  7008  070E                     	;# 
  7009  070F                     	;# 
  7010  0710                     	;# 
  7011  0711                     	;# 
  7012  0712                     	;# 
  7013  0713                     	;# 
  7014  0714                     	;# 
  7015  0716                     	;# 
  7016  0717                     	;# 
  7017  0718                     	;# 
  7018  0719                     	;# 
  7019  071A                     	;# 
  7020  071B                     	;# 
  7021  071C                     	;# 
  7022  071D                     	;# 
  7023  071E                     	;# 
  7024  0796                     	;# 
  7025  0797                     	;# 
  7026  0798                     	;# 
  7027  0799                     	;# 
  7028  079A                     	;# 
  7029  079B                     	;# 
  7030  080C                     	;# 
  7031  080D                     	;# 
  7032  080E                     	;# 
  7033  080F                     	;# 
  7034  0810                     	;# 
  7035  0811                     	;# 
  7036  0812                     	;# 
  7037  0813                     	;# 
  7038  0814                     	;# 
  7039  081A                     	;# 
  7040  081B                     	;# 
  7041  081C                     	;# 
  7042  081D                     	;# 
  7043  081E                     	;# 
  7044  081F                     	;# 
  7045  088C                     	;# 
  7046  088D                     	;# 
  7047  088E                     	;# 
  7048  088F                     	;# 
  7049  0890                     	;# 
  7050  0891                     	;# 
  7051  0892                     	;# 
  7052  0893                     	;# 
  7053  0895                     	;# 
  7054  0896                     	;# 
  7055  0897                     	;# 
  7056  0898                     	;# 
  7057  0899                     	;# 
  7058  089A                     	;# 
  7059  089B                     	;# 
  7060  090C                     	;# 
  7061  090E                     	;# 
  7062  090F                     	;# 
  7063  091F                     	;# 
  7064  091F                     	;# 
  7065  098F                     	;# 
  7066  098F                     	;# 
  7067  0990                     	;# 
  7068  0991                     	;# 
  7069  0992                     	;# 
  7070  0993                     	;# 
  7071  0994                     	;# 
  7072  0995                     	;# 
  7073  0996                     	;# 
  7074  0997                     	;# 
  7075  0E0F                     	;# 
  7076  0E10                     	;# 
  7077  0E11                     	;# 
  7078  0E12                     	;# 
  7079  0E13                     	;# 
  7080  0E14                     	;# 
  7081  0E15                     	;# 
  7082  0E16                     	;# 
  7083  0E17                     	;# 
  7084  0E18                     	;# 
  7085  0E19                     	;# 
  7086  0E1A                     	;# 
  7087  0E1B                     	;# 
  7088  0E1C                     	;# 
  7089  0E1D                     	;# 
  7090  0E1E                     	;# 
  7091  0E1F                     	;# 
  7092  0E20                     	;# 
  7093  0E21                     	;# 
  7094  0E22                     	;# 
  7095  0E23                     	;# 
  7096  0E24                     	;# 
  7097  0E25                     	;# 
  7098  0E26                     	;# 
  7099  0E27                     	;# 
  7100  0E28                     	;# 
  7101  0E29                     	;# 
  7102  0E2A                     	;# 
  7103  0E2B                     	;# 
  7104  0E2C                     	;# 
  7105  0E2D                     	;# 
  7106  0E2E                     	;# 
  7107  0E2F                     	;# 
  7108  0E30                     	;# 
  7109  0E31                     	;# 
  7110  0E32                     	;# 
  7111  0E33                     	;# 
  7112  0E34                     	;# 
  7113  0E35                     	;# 
  7114  0E36                     	;# 
  7115  0E37                     	;# 
  7116  0E8F                     	;# 
  7117  0E90                     	;# 
  7118  0E91                     	;# 
  7119  0E92                     	;# 
  7120  0E93                     	;# 
  7121  0E94                     	;# 
  7122  0E95                     	;# 
  7123  0E96                     	;# 
  7124  0E97                     	;# 
  7125  0E9C                     	;# 
  7126  0E9D                     	;# 
  7127  0E9E                     	;# 
  7128  0EA1                     	;# 
  7129  0EA2                     	;# 
  7130  0EA3                     	;# 
  7131  0EA4                     	;# 
  7132  0EA5                     	;# 
  7133  0EA9                     	;# 
  7134  0EAA                     	;# 
  7135  0EAB                     	;# 
  7136  0EAC                     	;# 
  7137  0EB1                     	;# 
  7138  0EB2                     	;# 
  7139  0EB3                     	;# 
  7140  0EB8                     	;# 
  7141  0EB9                     	;# 
  7142  0EBA                     	;# 
  7143  0EBB                     	;# 
  7144  0EBC                     	;# 
  7145  0EBD                     	;# 
  7146  0EBE                     	;# 
  7147  0EC3                     	;# 
  7148  0EC5                     	;# 
  7149  0EC6                     	;# 
  7150  0EC7                     	;# 
  7151  0EC8                     	;# 
  7152  0EC9                     	;# 
  7153  0ECA                     	;# 
  7154  0ECB                     	;# 
  7155  0ECC                     	;# 
  7156  0F10                     	;# 
  7157  0F11                     	;# 
  7158  0F12                     	;# 
  7159  0F13                     	;# 
  7160  0F14                     	;# 
  7161  0F15                     	;# 
  7162  0F16                     	;# 
  7163  0F17                     	;# 
  7164  0F18                     	;# 
  7165  0F19                     	;# 
  7166  0F1A                     	;# 
  7167  0F1B                     	;# 
  7168  0F1C                     	;# 
  7169  0F1D                     	;# 
  7170  0F1E                     	;# 
  7171  0F1F                     	;# 
  7172  0F20                     	;# 
  7173  0F21                     	;# 
  7174  0F22                     	;# 
  7175  0F23                     	;# 
  7176  0F24                     	;# 
  7177  0F25                     	;# 
  7178  0F26                     	;# 
  7179  0F27                     	;# 
  7180  0F28                     	;# 
  7181  0F29                     	;# 
  7182  0F2A                     	;# 
  7183  0F2B                     	;# 
  7184  0F2C                     	;# 
  7185  0F2D                     	;# 
  7186  0F2E                     	;# 
  7187  0F2F                     	;# 
  7188  0F30                     	;# 
  7189  0F31                     	;# 
  7190  0F32                     	;# 
  7191  0F38                     	;# 
  7192  0F39                     	;# 
  7193  0F3A                     	;# 
  7194  0F3B                     	;# 
  7195  0F3C                     	;# 
  7196  0F3D                     	;# 
  7197  0F3E                     	;# 
  7198  0F3F                     	;# 
  7199  0F40                     	;# 
  7200  0F41                     	;# 
  7201  0F43                     	;# 
  7202  0F44                     	;# 
  7203  0F45                     	;# 
  7204  0F46                     	;# 
  7205  0F47                     	;# 
  7206  0F48                     	;# 
  7207  0F49                     	;# 
  7208  0F4A                     	;# 
  7209  0F4B                     	;# 
  7210  0F4C                     	;# 
  7211  0F4E                     	;# 
  7212  0F4F                     	;# 
  7213  0F50                     	;# 
  7214  0F51                     	;# 
  7215  0F52                     	;# 
  7216  0F53                     	;# 
  7217  0F54                     	;# 
  7218  0F55                     	;# 
  7219  0F56                     	;# 
  7220  0F57                     	;# 
  7221  0F59                     	;# 
  7222  0F5A                     	;# 
  7223  0F5B                     	;# 
  7224  0F5C                     	;# 
  7225  0F5D                     	;# 
  7226  0F61                     	;# 
  7227  0F62                     	;# 
  7228  0F64                     	;# 
  7229  0F65                     	;# 
  7230  0F66                     	;# 
  7231  0F67                     	;# 
  7232  0F68                     	;# 
  7233  0F69                     	;# 
  7234  0F6A                     	;# 
  7235  0F6B                     	;# 
  7236  0F6C                     	;# 
  7237  0F6D                     	;# 
  7238  0FE4                     	;# 
  7239  0FE5                     	;# 
  7240  0FE6                     	;# 
  7241  0FE7                     	;# 
  7242  0FE8                     	;# 
  7243  0FE9                     	;# 
  7244  0FEA                     	;# 
  7245  0FEB                     	;# 
  7246  0FED                     	;# 
  7247  0FEE                     	;# 
  7248  0FEF                     	;# 
  7249  0000                     	;# 
  7250  0001                     	;# 
  7251  0002                     	;# 
  7252  0003                     	;# 
  7253  0004                     	;# 
  7254  0005                     	;# 
  7255  0006                     	;# 
  7256  0007                     	;# 
  7257  0008                     	;# 
  7258  0009                     	;# 
  7259  000A                     	;# 
  7260  000B                     	;# 
  7261  000C                     	;# 
  7262  000D                     	;# 
  7263  000E                     	;# 
  7264  000F                     	;# 
  7265  0010                     	;# 
  7266  0011                     	;# 
  7267  0012                     	;# 
  7268  0013                     	;# 
  7269  0014                     	;# 
  7270  0015                     	;# 
  7271  0016                     	;# 
  7272  0017                     	;# 
  7273  0018                     	;# 
  7274  0019                     	;# 
  7275  001A                     	;# 
  7276  001C                     	;# 
  7277  001C                     	;# 
  7278  001D                     	;# 
  7279  001D                     	;# 
  7280  001E                     	;# 
  7281  001F                     	;# 
  7282  008C                     	;# 
  7283  008C                     	;# 
  7284  008D                     	;# 
  7285  008E                     	;# 
  7286  008E                     	;# 
  7287  008F                     	;# 
  7288  0090                     	;# 
  7289  0090                     	;# 
  7290  0091                     	;# 
  7291  0093                     	;# 
  7292  0094                     	;# 
  7293  0095                     	;# 
  7294  0096                     	;# 
  7295  0097                     	;# 
  7296  0098                     	;# 
  7297  0099                     	;# 
  7298  009A                     	;# 
  7299  009B                     	;# 
  7300  009C                     	;# 
  7301  009D                     	;# 
  7302  009E                     	;# 
  7303  010C                     	;# 
  7304  010D                     	;# 
  7305  010E                     	;# 
  7306  010E                     	;# 
  7307  010F                     	;# 
  7308  0110                     	;# 
  7309  0110                     	;# 
  7310  0111                     	;# 
  7311  0112                     	;# 
  7312  0112                     	;# 
  7313  0113                     	;# 
  7314  0114                     	;# 
  7315  0114                     	;# 
  7316  0115                     	;# 
  7317  0116                     	;# 
  7318  0116                     	;# 
  7319  0117                     	;# 
  7320  0119                     	;# 
  7321  0119                     	;# 
  7322  0119                     	;# 
  7323  011A                     	;# 
  7324  011A                     	;# 
  7325  011A                     	;# 
  7326  011B                     	;# 
  7327  011B                     	;# 
  7328  011B                     	;# 
  7329  011B                     	;# 
  7330  011B                     	;# 
  7331  011C                     	;# 
  7332  011C                     	;# 
  7333  011C                     	;# 
  7334  011D                     	;# 
  7335  011D                     	;# 
  7336  011D                     	;# 
  7337  011E                     	;# 
  7338  011E                     	;# 
  7339  011E                     	;# 
  7340  011F                     	;# 
  7341  011F                     	;# 
  7342  011F                     	;# 
  7343  011F                     	;# 
  7344  011F                     	;# 
  7345  018C                     	;# 
  7346  018D                     	;# 
  7347  018E                     	;# 
  7348  018F                     	;# 
  7349  0190                     	;# 
  7350  0191                     	;# 
  7351  0192                     	;# 
  7352  0196                     	;# 
  7353  0197                     	;# 
  7354  0198                     	;# 
  7355  0199                     	;# 
  7356  019A                     	;# 
  7357  019B                     	;# 
  7358  019C                     	;# 
  7359  020C                     	;# 
  7360  020C                     	;# 
  7361  020D                     	;# 
  7362  020E                     	;# 
  7363  020F                     	;# 
  7364  020F                     	;# 
  7365  0210                     	;# 
  7366  0210                     	;# 
  7367  0211                     	;# 
  7368  0211                     	;# 
  7369  0212                     	;# 
  7370  0212                     	;# 
  7371  0213                     	;# 
  7372  0214                     	;# 
  7373  0215                     	;# 
  7374  0215                     	;# 
  7375  0216                     	;# 
  7376  0216                     	;# 
  7377  0217                     	;# 
  7378  0217                     	;# 
  7379  0218                     	;# 
  7380  0218                     	;# 
  7381  0219                     	;# 
  7382  021A                     	;# 
  7383  021B                     	;# 
  7384  021B                     	;# 
  7385  021C                     	;# 
  7386  021C                     	;# 
  7387  021D                     	;# 
  7388  021D                     	;# 
  7389  021E                     	;# 
  7390  021F                     	;# 
  7391  028C                     	;# 
  7392  028C                     	;# 
  7393  028D                     	;# 
  7394  028D                     	;# 
  7395  028E                     	;# 
  7396  028F                     	;# 
  7397  0290                     	;# 
  7398  0290                     	;# 
  7399  0291                     	;# 
  7400  0292                     	;# 
  7401  0292                     	;# 
  7402  0293                     	;# 
  7403  0293                     	;# 
  7404  0294                     	;# 
  7405  0295                     	;# 
  7406  0296                     	;# 
  7407  0296                     	;# 
  7408  0297                     	;# 
  7409  0298                     	;# 
  7410  0298                     	;# 
  7411  0299                     	;# 
  7412  0299                     	;# 
  7413  029A                     	;# 
  7414  029B                     	;# 
  7415  029C                     	;# 
  7416  029C                     	;# 
  7417  029D                     	;# 
  7418  030C                     	;# 
  7419  030C                     	;# 
  7420  030D                     	;# 
  7421  030E                     	;# 
  7422  030F                     	;# 
  7423  0310                     	;# 
  7424  0310                     	;# 
  7425  0311                     	;# 
  7426  0312                     	;# 
  7427  0313                     	;# 
  7428  0314                     	;# 
  7429  0314                     	;# 
  7430  0315                     	;# 
  7431  0316                     	;# 
  7432  0317                     	;# 
  7433  0318                     	;# 
  7434  0318                     	;# 
  7435  0319                     	;# 
  7436  031A                     	;# 
  7437  031B                     	;# 
  7438  031C                     	;# 
  7439  031C                     	;# 
  7440  031D                     	;# 
  7441  031E                     	;# 
  7442  031F                     	;# 
  7443  038C                     	;# 
  7444  038C                     	;# 
  7445  038D                     	;# 
  7446  038E                     	;# 
  7447  0390                     	;# 
  7448  0390                     	;# 
  7449  0391                     	;# 
  7450  0392                     	;# 
  7451  040C                     	;# 
  7452  040D                     	;# 
  7453  040E                     	;# 
  7454  040F                     	;# 
  7455  0410                     	;# 
  7456  0411                     	;# 
  7457  0416                     	;# 
  7458  0416                     	;# 
  7459  0417                     	;# 
  7460  0418                     	;# 
  7461  0418                     	;# 
  7462  0419                     	;# 
  7463  041A                     	;# 
  7464  041A                     	;# 
  7465  041B                     	;# 
  7466  041C                     	;# 
  7467  041C                     	;# 
  7468  041D                     	;# 
  7469  041E                     	;# 
  7470  041F                     	;# 
  7471  048C                     	;# 
  7472  048C                     	;# 
  7473  048D                     	;# 
  7474  048E                     	;# 
  7475  048F                     	;# 
  7476  048F                     	;# 
  7477  0490                     	;# 
  7478  0491                     	;# 
  7479  0492                     	;# 
  7480  0492                     	;# 
  7481  0493                     	;# 
  7482  0494                     	;# 
  7483  0495                     	;# 
  7484  0495                     	;# 
  7485  0496                     	;# 
  7486  0497                     	;# 
  7487  0498                     	;# 
  7488  0499                     	;# 
  7489  049A                     	;# 
  7490  049B                     	;# 
  7491  049C                     	;# 
  7492  049D                     	;# 
  7493  050C                     	;# 
  7494  050C                     	;# 
  7495  050D                     	;# 
  7496  050E                     	;# 
  7497  050F                     	;# 
  7498  050F                     	;# 
  7499  0510                     	;# 
  7500  0511                     	;# 
  7501  0512                     	;# 
  7502  0512                     	;# 
  7503  0513                     	;# 
  7504  0514                     	;# 
  7505  0515                     	;# 
  7506  0515                     	;# 
  7507  0516                     	;# 
  7508  0517                     	;# 
  7509  0518                     	;# 
  7510  0519                     	;# 
  7511  051A                     	;# 
  7512  051B                     	;# 
  7513  051C                     	;# 
  7514  051D                     	;# 
  7515  058C                     	;# 
  7516  058C                     	;# 
  7517  058D                     	;# 
  7518  058E                     	;# 
  7519  058F                     	;# 
  7520  058F                     	;# 
  7521  0590                     	;# 
  7522  0591                     	;# 
  7523  0592                     	;# 
  7524  0593                     	;# 
  7525  060C                     	;# 
  7526  060D                     	;# 
  7527  060E                     	;# 
  7528  060F                     	;# 
  7529  0610                     	;# 
  7530  0611                     	;# 
  7531  0612                     	;# 
  7532  0613                     	;# 
  7533  0614                     	;# 
  7534  0616                     	;# 
  7535  0617                     	;# 
  7536  0618                     	;# 
  7537  0619                     	;# 
  7538  061A                     	;# 
  7539  061B                     	;# 
  7540  061C                     	;# 
  7541  061D                     	;# 
  7542  061E                     	;# 
  7543  068C                     	;# 
  7544  068D                     	;# 
  7545  068E                     	;# 
  7546  068F                     	;# 
  7547  0690                     	;# 
  7548  0691                     	;# 
  7549  0692                     	;# 
  7550  0693                     	;# 
  7551  0694                     	;# 
  7552  070C                     	;# 
  7553  070D                     	;# 
  7554  070E                     	;# 
  7555  070F                     	;# 
  7556  0710                     	;# 
  7557  0711                     	;# 
  7558  0712                     	;# 
  7559  0713                     	;# 
  7560  0714                     	;# 
  7561  0716                     	;# 
  7562  0717                     	;# 
  7563  0718                     	;# 
  7564  0719                     	;# 
  7565  071A                     	;# 
  7566  071B                     	;# 
  7567  071C                     	;# 
  7568  071D                     	;# 
  7569  071E                     	;# 
  7570  0796                     	;# 
  7571  0797                     	;# 
  7572  0798                     	;# 
  7573  0799                     	;# 
  7574  079A                     	;# 
  7575  079B                     	;# 
  7576  080C                     	;# 
  7577  080D                     	;# 
  7578  080E                     	;# 
  7579  080F                     	;# 
  7580  0810                     	;# 
  7581  0811                     	;# 
  7582  0812                     	;# 
  7583  0813                     	;# 
  7584  0814                     	;# 
  7585  081A                     	;# 
  7586  081B                     	;# 
  7587  081C                     	;# 
  7588  081D                     	;# 
  7589  081E                     	;# 
  7590  081F                     	;# 
  7591  088C                     	;# 
  7592  088D                     	;# 
  7593  088E                     	;# 
  7594  088F                     	;# 
  7595  0890                     	;# 
  7596  0891                     	;# 
  7597  0892                     	;# 
  7598  0893                     	;# 
  7599  0895                     	;# 
  7600  0896                     	;# 
  7601  0897                     	;# 
  7602  0898                     	;# 
  7603  0899                     	;# 
  7604  089A                     	;# 
  7605  089B                     	;# 
  7606  090C                     	;# 
  7607  090E                     	;# 
  7608  090F                     	;# 
  7609  091F                     	;# 
  7610  091F                     	;# 
  7611  098F                     	;# 
  7612  098F                     	;# 
  7613  0990                     	;# 
  7614  0991                     	;# 
  7615  0992                     	;# 
  7616  0993                     	;# 
  7617  0994                     	;# 
  7618  0995                     	;# 
  7619  0996                     	;# 
  7620  0997                     	;# 
  7621  0E0F                     	;# 
  7622  0E10                     	;# 
  7623  0E11                     	;# 
  7624  0E12                     	;# 
  7625  0E13                     	;# 
  7626  0E14                     	;# 
  7627  0E15                     	;# 
  7628  0E16                     	;# 
  7629  0E17                     	;# 
  7630  0E18                     	;# 
  7631  0E19                     	;# 
  7632  0E1A                     	;# 
  7633  0E1B                     	;# 
  7634  0E1C                     	;# 
  7635  0E1D                     	;# 
  7636  0E1E                     	;# 
  7637  0E1F                     	;# 
  7638  0E20                     	;# 
  7639  0E21                     	;# 
  7640  0E22                     	;# 
  7641  0E23                     	;# 
  7642  0E24                     	;# 
  7643  0E25                     	;# 
  7644  0E26                     	;# 
  7645  0E27                     	;# 
  7646  0E28                     	;# 
  7647  0E29                     	;# 
  7648  0E2A                     	;# 
  7649  0E2B                     	;# 
  7650  0E2C                     	;# 
  7651  0E2D                     	;# 
  7652  0E2E                     	;# 
  7653  0E2F                     	;# 
  7654  0E30                     	;# 
  7655  0E31                     	;# 
  7656  0E32                     	;# 
  7657  0E33                     	;# 
  7658  0E34                     	;# 
  7659  0E35                     	;# 
  7660  0E36                     	;# 
  7661  0E37                     	;# 
  7662  0E8F                     	;# 
  7663  0E90                     	;# 
  7664  0E91                     	;# 
  7665  0E92                     	;# 
  7666  0E93                     	;# 
  7667  0E94                     	;# 
  7668  0E95                     	;# 
  7669  0E96                     	;# 
  7670  0E97                     	;# 
  7671  0E9C                     	;# 
  7672  0E9D                     	;# 
  7673  0E9E                     	;# 
  7674  0EA1                     	;# 
  7675  0EA2                     	;# 
  7676  0EA3                     	;# 
  7677  0EA4                     	;# 
  7678  0EA5                     	;# 
  7679  0EA9                     	;# 
  7680  0EAA                     	;# 
  7681  0EAB                     	;# 
  7682  0EAC                     	;# 
  7683  0EB1                     	;# 
  7684  0EB2                     	;# 
  7685  0EB3                     	;# 
  7686  0EB8                     	;# 
  7687  0EB9                     	;# 
  7688  0EBA                     	;# 
  7689  0EBB                     	;# 
  7690  0EBC                     	;# 
  7691  0EBD                     	;# 
  7692  0EBE                     	;# 
  7693  0EC3                     	;# 
  7694  0EC5                     	;# 
  7695  0EC6                     	;# 
  7696  0EC7                     	;# 
  7697  0EC8                     	;# 
  7698  0EC9                     	;# 
  7699  0ECA                     	;# 
  7700  0ECB                     	;# 
  7701  0ECC                     	;# 
  7702  0F10                     	;# 
  7703  0F11                     	;# 
  7704  0F12                     	;# 
  7705  0F13                     	;# 
  7706  0F14                     	;# 
  7707  0F15                     	;# 
  7708  0F16                     	;# 
  7709  0F17                     	;# 
  7710  0F18                     	;# 
  7711  0F19                     	;# 
  7712  0F1A                     	;# 
  7713  0F1B                     	;# 
  7714  0F1C                     	;# 
  7715  0F1D                     	;# 
  7716  0F1E                     	;# 
  7717  0F1F                     	;# 
  7718  0F20                     	;# 
  7719  0F21                     	;# 
  7720  0F22                     	;# 
  7721  0F23                     	;# 
  7722  0F24                     	;# 
  7723  0F25                     	;# 
  7724  0F26                     	;# 
  7725  0F27                     	;# 
  7726  0F28                     	;# 
  7727  0F29                     	;# 
  7728  0F2A                     	;# 
  7729  0F2B                     	;# 
  7730  0F2C                     	;# 
  7731  0F2D                     	;# 
  7732  0F2E                     	;# 
  7733  0F2F                     	;# 
  7734  0F30                     	;# 
  7735  0F31                     	;# 
  7736  0F32                     	;# 
  7737  0F38                     	;# 
  7738  0F39                     	;# 
  7739  0F3A                     	;# 
  7740  0F3B                     	;# 
  7741  0F3C                     	;# 
  7742  0F3D                     	;# 
  7743  0F3E                     	;# 
  7744  0F3F                     	;# 
  7745  0F40                     	;# 
  7746  0F41                     	;# 
  7747  0F43                     	;# 
  7748  0F44                     	;# 
  7749  0F45                     	;# 
  7750  0F46                     	;# 
  7751  0F47                     	;# 
  7752  0F48                     	;# 
  7753  0F49                     	;# 
  7754  0F4A                     	;# 
  7755  0F4B                     	;# 
  7756  0F4C                     	;# 
  7757  0F4E                     	;# 
  7758  0F4F                     	;# 
  7759  0F50                     	;# 
  7760  0F51                     	;# 
  7761  0F52                     	;# 
  7762  0F53                     	;# 
  7763  0F54                     	;# 
  7764  0F55                     	;# 
  7765  0F56                     	;# 
  7766  0F57                     	;# 
  7767  0F59                     	;# 
  7768  0F5A                     	;# 
  7769  0F5B                     	;# 
  7770  0F5C                     	;# 
  7771  0F5D                     	;# 
  7772  0F61                     	;# 
  7773  0F62                     	;# 
  7774  0F64                     	;# 
  7775  0F65                     	;# 
  7776  0F66                     	;# 
  7777  0F67                     	;# 
  7778  0F68                     	;# 
  7779  0F69                     	;# 
  7780  0F6A                     	;# 
  7781  0F6B                     	;# 
  7782  0F6C                     	;# 
  7783  0F6D                     	;# 
  7784  0FE4                     	;# 
  7785  0FE5                     	;# 
  7786  0FE6                     	;# 
  7787  0FE7                     	;# 
  7788  0FE8                     	;# 
  7789  0FE9                     	;# 
  7790  0FEA                     	;# 
  7791  0FEB                     	;# 
  7792  0FED                     	;# 
  7793  0FEE                     	;# 
  7794  0FEF                     	;# 
  7795                           
  7796                           	psect	idataCOMMON
  7797  07FF                     __pidataCOMMON:
  7798                           
  7799                           ;initializer for _NREG
  7800  07FF  3419               	retlw	25
  7801                           
  7802                           	psect	idataBANK1
  7803  1FD0                     __pidataBANK1:
  7804                           
  7805                           ;initializer for _alarmPWMStart
  7806  1FD0  34FF               	retlw	255
  7807  1FD1  34FF               	retlw	255
  7808  1FD2  34FF               	retlw	255
  7809                           
  7810                           ;initializer for _prevLumLevel
  7811  1FD3  34FF               	retlw	255
  7812  1FD4  34FF               	retlw	255
  7813                           
  7814                           ;initializer for _prevTemp
  7815  1FD5  34FF               	retlw	255
  7816  1FD6  34FF               	retlw	255
  7817                           
  7818                           ;initializer for _updateLCD
  7819  1FD7  3401               	retlw	1
  7820                           
  7821                           ;initializer for _TALA
  7822  1FD8  3405               	retlw	5
  7823                           
  7824                           ;initializer for _PMON
  7825  1FD9  3403               	retlw	3
  7826                           
  7827                           	psect	stringtext1
  7828  1800                     __pstringtext1:
  7829  1800                     _commands:
  7830  1800  346D               	retlw	low _cmd_rc
  7831  1801  3412               	retlw	high _cmd_rc
  7832  1802  34C0               	retlw	192
  7833  1803  348B               	retlw	low _cmd_sc
  7834  1804  3417               	retlw	high _cmd_sc
  7835  1805  34C1               	retlw	193
  7836  1806  34E2               	retlw	low _cmd_rtl
  7837  1807  3411               	retlw	high _cmd_rtl
  7838  1808  34C2               	retlw	194
  7839  1809  3492               	retlw	low _cmd_rp
  7840  180A  3412               	retlw	high _cmd_rp
  7841  180B  34C3               	retlw	195
  7842  180C  3488               	retlw	low _cmd_mmp
  7843  180D  3410               	retlw	high _cmd_mmp
  7844  180E  34C4               	retlw	196
  7845  180F  34D4               	retlw	low _cmd_mta
  7846  1810  3410               	retlw	high _cmd_mta
  7847  1811  34C5               	retlw	197
  7848  1812  34DA               	retlw	low _cmd_ra
  7849  1813  3414               	retlw	high _cmd_ra
  7850  1814  34C6               	retlw	198
  7851  1815  348A               	retlw	low _cmd_dac
  7852  1816  3408               	retlw	high _cmd_dac
  7853  1817  34C7               	retlw	199
  7854  1818  34B2               	retlw	low _cmd_dtl
  7855  1819  3415               	retlw	high _cmd_dtl
  7856  181A  34C8               	retlw	200
  7857  181B  3465               	retlw	low _cmd_aa
  7858  181C  3414               	retlw	high _cmd_aa
  7859  181D  34C9               	retlw	201
  7860  181E  34DD               	retlw	low _cmd_ir
  7861  181F  3412               	retlw	high _cmd_ir
  7862  1820  34CA               	retlw	202
  7863  1821  340B               	retlw	low _cmd_trc
  7864  1822  340B               	retlw	high _cmd_trc
  7865  1823  34CB               	retlw	203
  7866  1824  34F7               	retlw	low _cmd_tri
  7867  1825  340B               	retlw	high _cmd_tri
  7868  1826  34CC               	retlw	204
  7869  1827                     __end_of_commands:
  7870                           
  7871                           	psect	stringtext2
  7872  1836                     __pstringtext2:
  7873  1836                     _dpowers:
  7874  1836  3401               	retlw	1
  7875  1837  3400               	retlw	0
  7876  1838  340A               	retlw	10
  7877  1839  3400               	retlw	0
  7878  183A  3464               	retlw	100
  7879  183B  3400               	retlw	0
  7880  183C  34E8               	retlw	232
  7881  183D  3403               	retlw	3
  7882  183E  3410               	retlw	16
  7883  183F  3427               	retlw	39
  7884  1840                     __end_of_dpowers:
  7885                           
  7886                           	psect	nvBANK1
  7887  00EB                     __pnvBANK1:
  7888  00EB                     _TMR1_InterruptHandler:
  7889  00EB                     	ds	2
  7890  00ED                     _timer1ReloadVal:
  7891  00ED                     	ds	2
  7892  00EF                     _eusartTxBufferRemaining:
  7893  00EF                     	ds	1
  7894                           
  7895                           	psect	nvBANK2
  7896  0137                     __pnvBANK2:
  7897  0137                     _INT_InterruptHandler:
  7898  0137                     	ds	2
  7899  0139                     _EUSART_RxDefaultInterruptHandler:
  7900  0139                     	ds	2
  7901  013B                     _EUSART_TxDefaultInterruptHandler:
  7902  013B                     	ds	2
  7903  0013                     _TRISCbits	set	19
  7904  000E                     _PORTCbits	set	14
  7905  0016                     _LATAbits	set	22
  7906  000B                     _INTCONbits	set	11
  7907  0014                     _TRISD	set	20
  7908  0013                     _TRISC	set	19
  7909  0012                     _TRISB	set	18
  7910  0011                     _TRISA	set	17
  7911  0015                     _TRISE	set	21
  7912  0018                     _LATC	set	24
  7913  0017                     _LATB	set	23
  7914  0016                     _LATA	set	22
  7915  0019                     _LATD	set	25
  7916  001A                     _LATE	set	26
  7917  0094                     _ADCON1bits	set	148
  7918  008E                     _ADPREVL	set	142
  7919  008F                     _ADPREVH	set	143
  7920  0097                     _ADSTATbits	set	151
  7921  0090                     _ADACCL	set	144
  7922  0091                     _ADACCH	set	145
  7923  0095                     _ADCON2bits	set	149
  7924  009C                     _ADPRE	set	156
  7925  0096                     _ADCON3bits	set	150
  7926  008C                     _ADRESL	set	140
  7927  008D                     _ADRESH	set	141
  7928  0093                     _ADCON0bits	set	147
  7929  009D                     _ADACQ	set	157
  7930  0093                     _ADCON0	set	147
  7931  0098                     _ADCLK	set	152
  7932  0099                     _ADACT	set	153
  7933  009A                     _ADREF	set	154
  7934  0097                     _ADSTAT	set	151
  7935  0096                     _ADCON3	set	150
  7936  0095                     _ADCON2	set	149
  7937  0094                     _ADCON1	set	148
  7938  009B                     _ADCAP	set	155
  7939  009E                     _ADPCH	set	158
  7940  0119                     _RC1REG	set	281
  7941  011D                     _RC1STAbits	set	285
  7942  011A                     _TX1REG	set	282
  7943  011E                     _TX1STAbits	set	286
  7944  011C                     _SP1BRGH	set	284
  7945  011B                     _SP1BRGL	set	283
  7946  011E                     _TX1STA	set	286
  7947  011D                     _RC1STA	set	285
  7948  011F                     _BAUD1CON	set	287
  7949  0116                     _ADERRL	set	278
  7950  0117                     _ADERRH	set	279
  7951  0114                     _ADFLTRL	set	276
  7952  0115                     _ADFLTRH	set	277
  7953  010C                     _ADCNT	set	268
  7954  010D                     _ADRPT	set	269
  7955  0113                     _ADSTPTH	set	275
  7956  0112                     _ADSTPTL	set	274
  7957  0111                     _ADUTHH	set	273
  7958  0110                     _ADUTHL	set	272
  7959  010F                     _ADLTHH	set	271
  7960  010E                     _ADLTHL	set	270
  7961  018E                     _SSP1MSK	set	398
  7962  018D                     _SSP1ADD	set	397
  7963  018F                     _SSP1STAT	set	399
  7964  0191                     _SSP1CON2	set	401
  7965  0190                     _SSP1CON1bits	set	400
  7966  018C                     _SSP1BUF	set	396
  7967  018F                     _SSP1STATbits	set	399
  7968  0191                     _SSP1CON2bits	set	401
  7969  0190                     _SSP1CON1	set	400
  7970  021F                     _CCPTMRS1bits	set	543
  7971  020F                     _T1GCONbits	set	527
  7972  020E                     _T1CONbits	set	526
  7973  020E                     _T1CON	set	526
  7974  020C                     _TMR1L	set	524
  7975  020D                     _TMR1H	set	525
  7976  0211                     _T1CLK	set	529
  7977  0210                     _T1GATE	set	528
  7978  020F                     _T1GCON	set	527
  7979  028D                     _PR2	set	653
  7980  028C                     _TMR2	set	652
  7981  028E                     _T2CONbits	set	654
  7982  0291                     _T2RSTbits	set	657
  7983  028F                     _T2HLTbits	set	655
  7984  028E                     _T2CON	set	654
  7985  028C                     _T2TMR	set	652
  7986  028D                     _T2PR	set	653
  7987  0291                     _T2RST	set	657
  7988  028F                     _T2HLT	set	655
  7989  0290                     _T2CLKCON	set	656
  7990  038C                     _PWM6DCL	set	908
  7991  038D                     _PWM6DCH	set	909
  7992  038E                     _PWM6CON	set	910
  7993  1C77                     _PWM6EN	set	7287
  7994  0710                     _PIR4bits	set	1808
  7995  071A                     _PIE4bits	set	1818
  7996  070C                     _PIR0bits	set	1804
  7997  0716                     _PIE0bits	set	1814
  7998  0719                     _PIE3bits	set	1817
  7999  070F                     _PIR3bits	set	1807
  8000  079B                     _PMD5	set	1947
  8001  079A                     _PMD4	set	1946
  8002  0799                     _PMD3	set	1945
  8003  0798                     _PMD2	set	1944
  8004  0797                     _PMD1	set	1943
  8005  0796                     _PMD0	set	1942
  8006  081F                     _NVMCON2	set	2079
  8007  081C                     _NVMDATL	set	2076
  8008  081D                     _NVMDATH	set	2077
  8009  081E                     _NVMCON1bits	set	2078
  8010  081B                     _NVMADRH	set	2075
  8011  081A                     _NVMADRL	set	2074
  8012  0892                     _OSCTUNE	set	2194
  8013  0893                     _OSCFRQ	set	2195
  8014  0891                     _OSCEN	set	2193
  8015  088F                     _OSCCON3	set	2191
  8016  088D                     _OSCCON1	set	2189
  8017  0EC6                     _SSP1DATPPS	set	3782
  8018  0EC5                     _SSP1CLKPPS	set	3781
  8019  0ECB                     _RXPPS	set	3787
  8020  0E90                     _INTPPS	set	3728
  8021  0F26                     _RC6PPS	set	3878
  8022  0F16                     _RA6PPS	set	3862
  8023  0F24                     _RC4PPS	set	3876
  8024  0F23                     _RC3PPS	set	3875
  8025  0F67                     _SLRCONE	set	3943
  8026  0F5C                     _SLRCOND	set	3932
  8027  0F51                     _SLRCONC	set	3921
  8028  0F46                     _SLRCONB	set	3910
  8029  0F3B                     _SLRCONA	set	3899
  8030  0F5B                     _ODCOND	set	3931
  8031  0F50                     _ODCONC	set	3920
  8032  0F45                     _ODCONB	set	3909
  8033  0F3A                     _ODCONA	set	3898
  8034  0F66                     _ODCONE	set	3942
  8035  0F4F                     _WPUC	set	3919
  8036  0F39                     _WPUA	set	3897
  8037  0F44                     _WPUB	set	3908
  8038  0F65                     _WPUE	set	3941
  8039  0F5A                     _WPUD	set	3930
  8040  0F38                     _ANSELA	set	3896
  8041  0F64                     _ANSELE	set	3940
  8042  0F43                     _ANSELB	set	3907
  8043  0F4E                     _ANSELC	set	3918
  8044  0F59                     _ANSELD	set	3929
  8045  7A7C                     _WPUC4	set	31356
  8046  7A7B                     _WPUC3	set	31355
  8047                           
  8048                           	psect	stringtext3
  8049  1827                     __pstringtext3:
  8050  1827                     STR_1:
  8051  1827  3425               	retlw	37	;'%'
  8052  1828  3430               	retlw	48	;'0'
  8053  1829  3432               	retlw	50	;'2'
  8054  182A  3464               	retlw	100	;'d'
  8055  182B  343A               	retlw	58	;':'
  8056  182C  3425               	retlw	37	;'%'
  8057  182D  3430               	retlw	48	;'0'
  8058  182E  3432               	retlw	50	;'2'
  8059  182F  3464               	retlw	100	;'d'
  8060  1830  343A               	retlw	58	;':'
  8061  1831  3425               	retlw	37	;'%'
  8062  1832  3430               	retlw	48	;'0'
  8063  1833  3432               	retlw	50	;'2'
  8064  1834  3464               	retlw	100	;'d'
  8065  1835  3400               	retlw	0
  8066                           
  8067                           	psect	stringtext4
  8068  1840                     __pstringtext4:
  8069  1840                     STR_3:
  8070  1840  3425               	retlw	37	;'%'
  8071  1841  3430               	retlw	48	;'0'
  8072  1842  3432               	retlw	50	;'2'
  8073  1843  3464               	retlw	100	;'d'
  8074  1844  3420               	retlw	32	;' '
  8075  1845  3443               	retlw	67	;'C'
  8076  1846  3400               	retlw	0
  8077                           
  8078                           	psect	stringtext5
  8079  1847                     __pstringtext5:
  8080  1847                     STR_5:
  8081  1847  344C               	retlw	76	;'L'
  8082  1848  3420               	retlw	32	;' '
  8083  1849  3425               	retlw	37	;'%'
  8084  184A  3464               	retlw	100	;'d'
  8085  184B  3400               	retlw	0
  8086                           
  8087                           	psect	stringtext6
  8088  184C                     __pstringtext6:
  8089  184C                     STR_7:
  8090  184C  3443               	retlw	67	;'C'
  8091  184D  3454               	retlw	84	;'T'
  8092  184E  344C               	retlw	76	;'L'
  8093  184F  3400               	retlw	0
  8094                           
  8095                           	psect	stringtext7
  8096  0000                     __pstringtext7:
  8097  1840                     
  8098                           	psect	cinit
  8099  0054                     start_initialization:	
  8100                           ; #config settings
  8101                           
  8102  0054                     __initialization:
  8103                           
  8104                           ; Initialize objects allocated to COMMON
  8105  0054  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  8106  0057  00FD               	movwf	__pdataCOMMON& (0+127)
  8107                           
  8108                           ; Initialize objects allocated to BANK1
  8109  0058  30D0               	movlw	low __pidataBANK1
  8110  0059  0084               	movwf	4
  8111  005A  309F               	movlw	(high __pidataBANK1)| (0+128)
  8112  005B  0085               	movwf	5
  8113  005C  30E1               	movlw	low __pdataBANK1
  8114  005D  0086               	movwf	6
  8115  005E  3000               	movlw	high __pdataBANK1
  8116  005F  0087               	movwf	7
  8117  0060  300A               	movlw	10
  8118  0061  319F  277C  3180   	fcall	init_ram
  8119                           
  8120                           ; Clear objects allocated to COMMON
  8121  0064  01FB               	clrf	__pbssCOMMON& (0+127)
  8122  0065  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
  8123                           
  8124                           ; Clear objects allocated to BANK0
  8125  0066  3065               	movlw	low __pbssBANK0
  8126  0067  0084               	movwf	4
  8127  0068  3000               	movlw	high __pbssBANK0
  8128  0069  0085               	movwf	5
  8129  006A  300B               	movlw	11
  8130  006B  319F  2776  3180   	fcall	clear_ram0
  8131                           
  8132                           ; Clear objects allocated to BANK1
  8133  006E  30A0               	movlw	low __pbssBANK1
  8134  006F  0084               	movwf	4
  8135  0070  3000               	movlw	high __pbssBANK1
  8136  0071  0085               	movwf	5
  8137  0072  3021               	movlw	33
  8138  0073  319F  2776  3180   	fcall	clear_ram0
  8139                           
  8140                           ; Clear objects allocated to BANK2
  8141  0076  3020               	movlw	low __pbssBANK2
  8142  0077  0084               	movwf	4
  8143  0078  3001               	movlw	high __pbssBANK2
  8144  0079  0085               	movwf	5
  8145  007A  3017               	movlw	23
  8146  007B  319F  2776  3180   	fcall	clear_ram0
  8147                           
  8148                           ; Clear objects allocated to BANK3
  8149  007E  30A0               	movlw	low __pbssBANK3
  8150  007F  0084               	movwf	4
  8151  0080  3001               	movlw	high __pbssBANK3
  8152  0081  0085               	movwf	5
  8153  0082  3040               	movlw	64
  8154  0083  319F  2776  3180   	fcall	clear_ram0
  8155                           
  8156                           ; Clear objects allocated to BANK4
  8157  0086  3020               	movlw	low __pbssBANK4
  8158  0087  0084               	movwf	4
  8159  0088  3002               	movlw	high __pbssBANK4
  8160  0089  0085               	movwf	5
  8161  008A  3040               	movlw	64
  8162  008B  319F  2776  3180   	fcall	clear_ram0
  8163  008E                     end_of_initialization:	
  8164                           ;End of C runtime variable initialization code
  8165                           
  8166  008E                     __end_of__initialization:
  8167  008E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8168  008F  0020               	movlb	0
  8169  0090  3180  2892         	ljmp	_main	;jump to C main() function
  8170                           
  8171                           	psect	bssCOMMON
  8172  007B                     __pbssCOMMON:
  8173  007B                     _editingClockAlarm:
  8174  007B                     	ds	2
  8175                           
  8176                           	psect	dataCOMMON
  8177  007D                     __pdataCOMMON:
  8178  007D                     _NREG:
  8179  007D                     	ds	1
  8180                           
  8181                           	psect	bssBANK0
  8182  0065                     __pbssBANK0:
  8183  0065                     _t:
  8184  0065                     	ds	3
  8185  0068                     _modeFlag:
  8186  0068                     	ds	2
  8187  006A                     _nr:
  8188  006A                     	ds	1
  8189  006B                     _iwrite:
  8190  006B                     	ds	1
  8191  006C                     _iread:
  8192  006C                     	ds	1
  8193  006D                     _lumLevel:
  8194  006D                     	ds	1
  8195  006E                     _temp:
  8196  006E                     	ds	1
  8197  006F                     _ALAF:
  8198  006F                     	ds	1
  8199                           
  8200                           	psect	bssBANK1
  8201  00A0                     __pbssBANK1:
  8202  00A0                     _clkAlarm:
  8203  00A0                     	ds	4
  8204  00A4                     _lumAlarm:
  8205  00A4                     	ds	3
  8206  00A7                     _tempAlarm:
  8207  00A7                     	ds	3
  8208  00AA                     _dimingLed:
  8209  00AA                     	ds	2
  8210  00AC                     _i2c1_driver_i2cISR:
  8211  00AC                     	ds	2
  8212  00AE                     _i2c1_driver_busCollisionISR:
  8213  00AE                     	ds	2
  8214  00B0                     _sentMessageBufHalfFull:
  8215  00B0                     	ds	1
  8216  00B1                     _bufHalfFull:
  8217  00B1                     	ds	1
  8218  00B2                     _maxReadings:
  8219  00B2                     	ds	1
  8220  00B3                     _flagNr:
  8221  00B3                     	ds	1
  8222  00B4                     _writeEEPROM_flag:
  8223  00B4                     	ds	1
  8224  00B5                     _counterMonitorAux:
  8225  00B5                     	ds	1
  8226  00B6                     _monitor_TEMP_LUM:
  8227  00B6                     	ds	1
  8228  00B7                     _flagS1pushed:
  8229  00B7                     	ds	1
  8230  00B8                     _editingLumAlarm:
  8231  00B8                     	ds	1
  8232  00B9                     _editingTempAlarm:
  8233  00B9                     	ds	1
  8234  00BA                     _PWM_on:
  8235  00BA                     	ds	1
  8236  00BB                     _S1_Value:
  8237  00BB                     	ds	1
  8238  00BC                     _eusartRxCount:
  8239  00BC                     	ds	1
  8240  00BD                     _eusartRxTail:
  8241  00BD                     	ds	1
  8242  00BE                     _eusartRxHead:
  8243  00BE                     	ds	1
  8244  00BF                     _eusartTxTail:
  8245  00BF                     	ds	1
  8246  00C0                     _eusartTxHead:
  8247  00C0                     	ds	1
  8248                           
  8249                           	psect	dataBANK1
  8250  00E1                     __pdataBANK1:
  8251  00E1                     _alarmPWMStart:
  8252  00E1                     	ds	3
  8253  00E4                     _prevLumLevel:
  8254  00E4                     	ds	2
  8255  00E6                     _prevTemp:
  8256  00E6                     	ds	2
  8257  00E8                     _updateLCD:
  8258  00E8                     	ds	1
  8259  00E9                     _TALA:
  8260  00E9                     	ds	1
  8261  00EA                     _PMON:
  8262  00EA                     	ds	1
  8263                           
  8264                           	psect	bssBANK2
  8265  0120                     __pbssBANK2:
  8266  0120                     main@F13047:
  8267  0120                     	ds	20
  8268  0134                     update_menuLCD@F12899:
  8269  0134                     	ds	3
  8270                           
  8271                           	psect	bssBANK3
  8272  01A0                     __pbssBANK3:
  8273  01A0                     _eusartTxBuffer:
  8274  01A0                     	ds	64
  8275                           
  8276                           	psect	bssBANK4
  8277  0220                     __pbssBANK4:
  8278  0220                     _eusartRxBuffer:
  8279  0220                     	ds	64
  8280                           
  8281                           	psect	inittext
  8282  1F7C                     init_ram:
  8283  1F7C  00FE               	movwf	btemp
  8284  1F7D                     initloop:
  8285  1F7D  0012               	moviw fsr0++
  8286  1F7E  001E               	movwi fsr1++
  8287  1F7F  0BFE               	decfsz	btemp,f
  8288  1F80  2F7D               	goto	initloop
  8289  1F81  3400               	retlw	0
  8290                           
  8291                           	psect	clrtext
  8292  1F76                     clear_ram0:	
  8293                           ;	Called with FSR0 containing the base address, and
  8294                           ;	WREG with the size to clear
  8295                           
  8296  1F76  0064               	clrwdt	;clear the watchdog before getting into this loop
  8297  1F77                     clrloop0:
  8298  1F77  0180               	clrf	0	;clear RAM location pointed to by FSR
  8299  1F78  3101               	addfsr 0,1
  8300  1F79  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8301  1F7A  2F77               	goto	clrloop0	;have we reached the end yet?
  8302  1F7B  3400               	retlw	0	;all done for this memory range, return
  8303                           
  8304                           	psect	cstackBANK1
  8305  00C1                     __pcstackBANK1:
  8306  00C1                     main@buff:
  8307                           
  8308                           ; 20 bytes @ 0x0
  8309  00C1                     	ds	20
  8310  00D5                     _main$3491:
  8311                           
  8312                           ; 2 bytes @ 0x14
  8313  00D5                     	ds	2
  8314  00D7                     main@checkSumAux:
  8315                           
  8316                           ; 1 bytes @ 0x16
  8317  00D7                     	ds	1
  8318  00D8                     main@notInit:
  8319                           
  8320                           ; 1 bytes @ 0x17
  8321  00D8                     	ds	1
  8322  00D9                     main@corrupted:
  8323                           
  8324                           ; 1 bytes @ 0x18
  8325  00D9                     	ds	1
  8326  00DA                     main@i:
  8327                           
  8328                           ; 2 bytes @ 0x19
  8329  00DA                     	ds	2
  8330  00DC                     main@i_2530:
  8331                           
  8332                           ; 2 bytes @ 0x1B
  8333  00DC                     	ds	2
  8334  00DE                     main@c:
  8335                           
  8336                           ; 1 bytes @ 0x1D
  8337  00DE                     	ds	1
  8338  00DF                     main@n:
  8339                           
  8340                           ; 2 bytes @ 0x1E
  8341  00DF                     	ds	2
  8342                           
  8343                           	psect	cstackCOMMON
  8344  0070                     __pcstackCOMMON:
  8345  0070                     ?_isdigit:
  8346  0070                     ?_i2c1_driver_open:	
  8347                           ; 1 bit 
  8348                           
  8349  0070                     ?_PMD_Initialize:	
  8350                           ; 1 bit 
  8351                           
  8352  0070                     ?_OSCILLATOR_Initialize:	
  8353                           ; 1 bytes @ 0x0
  8354                           
  8355  0070                     ?_PWM6_Initialize:	
  8356                           ; 1 bytes @ 0x0
  8357                           
  8358  0070                     ?_ADCC_Initialize:	
  8359                           ; 1 bytes @ 0x0
  8360                           
  8361  0070                     ?_TMR2_Initialize:	
  8362                           ; 1 bytes @ 0x0
  8363                           
  8364  0070                     ?_TMR1_Initialize:	
  8365                           ; 1 bytes @ 0x0
  8366                           
  8367  0070                     ?_EXT_INT_Initialize:	
  8368                           ; 1 bytes @ 0x0
  8369                           
  8370  0070                     ?_EUSART_Initialize:	
  8371                           ; 1 bytes @ 0x0
  8372                           
  8373  0070                     ?_INT_ISR:	
  8374                           ; 1 bytes @ 0x0
  8375                           
  8376  0070                     ??_INT_ISR:	
  8377                           ; 1 bytes @ 0x0
  8378                           
  8379  0070                     ?_TMR1_ISR:	
  8380                           ; 1 bytes @ 0x0
  8381                           
  8382  0070                     ?_TMR1_DefaultInterruptHandler:	
  8383                           ; 1 bytes @ 0x0
  8384                           
  8385  0070                     ??_TMR1_DefaultInterruptHandler:	
  8386                           ; 1 bytes @ 0x0
  8387                           
  8388  0070                     ?_INT_CallBack:	
  8389                           ; 1 bytes @ 0x0
  8390                           
  8391  0070                     ??_INT_CallBack:	
  8392                           ; 1 bytes @ 0x0
  8393                           
  8394  0070                     ?_EUSART_Receive_ISR:	
  8395                           ; 1 bytes @ 0x0
  8396                           
  8397  0070                     ??_EUSART_Receive_ISR:	
  8398                           ; 1 bytes @ 0x0
  8399                           
  8400  0070                     ?_EUSART_Transmit_ISR:	
  8401                           ; 1 bytes @ 0x0
  8402                           
  8403  0070                     ??_EUSART_Transmit_ISR:	
  8404                           ; 1 bytes @ 0x0
  8405                           
  8406  0070                     ?_ReadI2C:	
  8407                           ; 1 bytes @ 0x0
  8408                           
  8409  0070                     ?_WriteI2C:	
  8410                           ; 1 bytes @ 0x0
  8411                           
  8412  0070                     ?_PIN_MANAGER_Initialize:	
  8413                           ; 1 bytes @ 0x0
  8414                           
  8415  0070                     ?_SYSTEM_Initialize:	
  8416                           ; 1 bytes @ 0x0
  8417                           
  8418  0070                     ?_INTERRUPT_InterruptManager:	
  8419                           ; 1 bytes @ 0x0
  8420                           
  8421  0070                     ?_TMR1_WriteTimer:	
  8422                           ; 1 bytes @ 0x0
  8423                           
  8424  0070                     ?_TMR2_Start:	
  8425                           ; 1 bytes @ 0x0
  8426                           
  8427  0070                     ?_TMR2_StartTimer:	
  8428                           ; 1 bytes @ 0x0
  8429                           
  8430  0070                     ?_TMR2_Stop:	
  8431                           ; 1 bytes @ 0x0
  8432                           
  8433  0070                     ?_TMR2_StopTimer:	
  8434                           ; 1 bytes @ 0x0
  8435                           
  8436  0070                     ?_INT_DefaultInterruptHandler:	
  8437                           ; 1 bytes @ 0x0
  8438                           
  8439  0070                     ??_INT_DefaultInterruptHandler:	
  8440                           ; 1 bytes @ 0x0
  8441                           
  8442  0070                     ?_EUSART_is_rx_ready:	
  8443                           ; 1 bytes @ 0x0
  8444                           
  8445  0070                     ?_EUSART_Read:	
  8446                           ; 1 bytes @ 0x0
  8447                           
  8448  0070                     ?_EUSART_Write:	
  8449                           ; 1 bytes @ 0x0
  8450                           
  8451  0070                     ?_getch:	
  8452                           ; 1 bytes @ 0x0
  8453                           
  8454  0070                     ?_putch:	
  8455                           ; 1 bytes @ 0x0
  8456                           
  8457  0070                     ?_tsttc:	
  8458                           ; 1 bytes @ 0x0
  8459                           
  8460  0070                     ?_LCDsend:	
  8461                           ; 1 bytes @ 0x0
  8462                           
  8463  0070                     ?_LCDinit:	
  8464                           ; 1 bytes @ 0x0
  8465                           
  8466  0070                     ?_LCDcmd:	
  8467                           ; 1 bytes @ 0x0
  8468                           
  8469  0070                     ?_LCDchar:	
  8470                           ; 1 bytes @ 0x0
  8471                           
  8472  0070                     ?_PWM_Output_D4_Enable:	
  8473                           ; 1 bytes @ 0x0
  8474                           
  8475  0070                     ?_PWM_Output_D4_Disable:	
  8476                           ; 1 bytes @ 0x0
  8477                           
  8478  0070                     ?_Clock_ISR:	
  8479                           ; 1 bytes @ 0x0
  8480                           
  8481  0070                     ?_wirteEEPROMinit:	
  8482                           ; 1 bytes @ 0x0
  8483                           
  8484  0070                     ?_update_menuLCD:	
  8485                           ; 1 bytes @ 0x0
  8486                           
  8487  0070                     ?_monitoring_TEMP_LUM:	
  8488                           ; 1 bytes @ 0x0
  8489                           
  8490  0070                     ?_S1button:	
  8491                           ; 1 bytes @ 0x0
  8492                           
  8493  0070                     ?_checkFlags:	
  8494                           ; 1 bytes @ 0x0
  8495                           
  8496  0070                     ?_editClock:	
  8497                           ; 1 bytes @ 0x0
  8498                           
  8499  0070                     ?_editTemp:	
  8500                           ; 1 bytes @ 0x0
  8501                           
  8502  0070                     ?_editLum:	
  8503                           ; 1 bytes @ 0x0
  8504                           
  8505  0070                     ?_toggleAlarms:	
  8506                           ; 1 bytes @ 0x0
  8507                           
  8508  0070                     ?_S1_ISR:	
  8509                           ; 1 bytes @ 0x0
  8510                           
  8511  0070                     ??_S1_ISR:	
  8512                           ; 1 bytes @ 0x0
  8513                           
  8514  0070                     ?_sendOKMessage:	
  8515                           ; 1 bytes @ 0x0
  8516                           
  8517  0070                     ?_sendERRORMessage:	
  8518                           ; 1 bytes @ 0x0
  8519                           
  8520  0070                     ?_main:	
  8521                           ; 1 bytes @ 0x0
  8522                           
  8523  0070                     ?___awdiv:	
  8524                           ; 1 bytes @ 0x0
  8525                           
  8526  0070                     TMR1_WriteTimer@timerVal:	
  8527                           ; 2 bytes @ 0x0
  8528                           
  8529  0070                     ___awdiv@divisor:	
  8530                           ; 2 bytes @ 0x0
  8531                           
  8532                           
  8533                           ; 2 bytes @ 0x0
  8534  0070                     	ds	2
  8535  0072                     ??_TMR1_WriteTimer:
  8536  0072                     ___awdiv@dividend:	
  8537                           ; 1 bytes @ 0x2
  8538                           
  8539                           
  8540                           ; 2 bytes @ 0x2
  8541  0072                     	ds	2
  8542  0074                     ??___awdiv:
  8543                           
  8544                           ; 1 bytes @ 0x4
  8545  0074                     	ds	1
  8546  0075                     ___awdiv@counter:
  8547                           
  8548                           ; 1 bytes @ 0x5
  8549  0075                     	ds	1
  8550  0076                     ___awdiv@sign:
  8551                           
  8552                           ; 1 bytes @ 0x6
  8553  0076                     	ds	1
  8554  0077                     ___awdiv@quotient:
  8555                           
  8556                           ; 2 bytes @ 0x7
  8557  0077                     	ds	2
  8558  0079                     ??_Clock_ISR:
  8559                           
  8560                           ; 1 bytes @ 0x9
  8561  0079                     	ds	2
  8562  007B                     ??_TMR1_ISR:
  8563  007B                     ??_INTERRUPT_InterruptManager:	
  8564                           ; 1 bytes @ 0xB
  8565                           
  8566                           
  8567                           	psect	cstackBANK0
  8568  0020                     __pcstackBANK0:	
  8569                           ; 1 bytes @ 0xB
  8570                           
  8571  0020                     ??_PMD_Initialize:
  8572  0020                     ??_OSCILLATOR_Initialize:	
  8573                           ; 1 bytes @ 0x0
  8574                           
  8575  0020                     ??_PWM6_Initialize:	
  8576                           ; 1 bytes @ 0x0
  8577                           
  8578  0020                     ??_ADCC_Initialize:	
  8579                           ; 1 bytes @ 0x0
  8580                           
  8581  0020                     ??_TMR2_Initialize:	
  8582                           ; 1 bytes @ 0x0
  8583                           
  8584  0020                     ?_TMR1_SetInterruptHandler:	
  8585                           ; 1 bytes @ 0x0
  8586                           
  8587  0020                     ?_EUSART_SetRxInterruptHandler:	
  8588                           ; 1 bytes @ 0x0
  8589                           
  8590  0020                     ?_EUSART_SetTxInterruptHandler:	
  8591                           ; 1 bytes @ 0x0
  8592                           
  8593  0020                     ?_memset:	
  8594                           ; 1 bytes @ 0x0
  8595                           
  8596  0020                     ??_isdigit:	
  8597                           ; 1 bytes @ 0x0
  8598                           
  8599  0020                     ??_ReadI2C:	
  8600                           ; 1 bytes @ 0x0
  8601                           
  8602  0020                     ??_WriteI2C:	
  8603                           ; 1 bytes @ 0x0
  8604                           
  8605  0020                     ??_PIN_MANAGER_Initialize:	
  8606                           ; 1 bytes @ 0x0
  8607                           
  8608  0020                     ??_i2c1_driver_open:	
  8609                           ; 1 bytes @ 0x0
  8610                           
  8611  0020                     ?_PWM6_LoadDutyValue:	
  8612                           ; 1 bytes @ 0x0
  8613                           
  8614  0020                     ??_TMR2_Start:	
  8615                           ; 1 bytes @ 0x0
  8616                           
  8617  0020                     ??_TMR2_StartTimer:	
  8618                           ; 1 bytes @ 0x0
  8619                           
  8620  0020                     ??_TMR2_Stop:	
  8621                           ; 1 bytes @ 0x0
  8622                           
  8623  0020                     ??_TMR2_StopTimer:	
  8624                           ; 1 bytes @ 0x0
  8625                           
  8626  0020                     ?_INT_SetInterruptHandler:	
  8627                           ; 1 bytes @ 0x0
  8628                           
  8629  0020                     ??_EUSART_is_rx_ready:	
  8630                           ; 1 bytes @ 0x0
  8631                           
  8632  0020                     ??_EUSART_Read:	
  8633                           ; 1 bytes @ 0x0
  8634                           
  8635  0020                     ??_EUSART_Write:	
  8636                           ; 1 bytes @ 0x0
  8637                           
  8638  0020                     ?_differenceBetweenTimePeriod:	
  8639                           ; 1 bytes @ 0x0
  8640                           
  8641  0020                     ??_PWM_Output_D4_Enable:	
  8642                           ; 1 bytes @ 0x0
  8643                           
  8644  0020                     ??_PWM_Output_D4_Disable:	
  8645                           ; 1 bytes @ 0x0
  8646                           
  8647  0020                     ??_S1button:	
  8648                           ; 1 bytes @ 0x0
  8649                           
  8650  0020                     ?_ADCC_GetSingleConversion:	
  8651                           ; 1 bytes @ 0x0
  8652                           
  8653  0020                     ?___wmul:	
  8654                           ; 2 bytes @ 0x0
  8655                           
  8656  0020                     ?___lwdiv:	
  8657                           ; 2 bytes @ 0x0
  8658                           
  8659  0020                     _isdigit$2988:	
  8660                           ; 2 bytes @ 0x0
  8661                           
  8662  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  8663                           ; 1 bytes @ 0x0
  8664                           
  8665  0020                     PWM6_LoadDutyValue@dutyValue:	
  8666                           ; 2 bytes @ 0x0
  8667                           
  8668  0020                     INT_SetInterruptHandler@InterruptHandler:	
  8669                           ; 2 bytes @ 0x0
  8670                           
  8671  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  8672                           ; 2 bytes @ 0x0
  8673                           
  8674  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  8675                           ; 2 bytes @ 0x0
  8676                           
  8677  0020                     ___wmul@multiplier:	
  8678                           ; 2 bytes @ 0x0
  8679                           
  8680  0020                     ___lwdiv@divisor:	
  8681                           ; 2 bytes @ 0x0
  8682                           
  8683  0020                     memset@c:	
  8684                           ; 2 bytes @ 0x0
  8685                           
  8686  0020                     differenceBetweenTimePeriod@start:	
  8687                           ; 2 bytes @ 0x0
  8688                           
  8689                           
  8690                           ; 3 bytes @ 0x0
  8691  0020                     	ds	1
  8692  0021                     WriteI2C@data_out:
  8693  0021                     EUSART_Read@readValue:	
  8694                           ; 1 bytes @ 0x1
  8695                           
  8696  0021                     EUSART_Write@txData:	
  8697                           ; 1 bytes @ 0x1
  8698                           
  8699  0021                     isdigit@c:	
  8700                           ; 1 bytes @ 0x1
  8701                           
  8702                           
  8703                           ; 1 bytes @ 0x1
  8704  0021                     	ds	1
  8705  0022                     ??_TMR1_Initialize:
  8706  0022                     ??_EXT_INT_Initialize:	
  8707                           ; 1 bytes @ 0x2
  8708                           
  8709  0022                     ??_EUSART_Initialize:	
  8710                           ; 1 bytes @ 0x2
  8711                           
  8712  0022                     ??_TMR1_SetInterruptHandler:	
  8713                           ; 1 bytes @ 0x2
  8714                           
  8715  0022                     ??_EUSART_SetRxInterruptHandler:	
  8716                           ; 1 bytes @ 0x2
  8717                           
  8718  0022                     ??_EUSART_SetTxInterruptHandler:	
  8719                           ; 1 bytes @ 0x2
  8720                           
  8721  0022                     ??_PWM6_LoadDutyValue:	
  8722                           ; 1 bytes @ 0x2
  8723                           
  8724  0022                     ??_INT_SetInterruptHandler:	
  8725                           ; 1 bytes @ 0x2
  8726                           
  8727  0022                     ??_getch:	
  8728                           ; 1 bytes @ 0x2
  8729                           
  8730  0022                     ??_putch:	
  8731                           ; 1 bytes @ 0x2
  8732                           
  8733  0022                     ??_tsttc:	
  8734                           ; 1 bytes @ 0x2
  8735                           
  8736  0022                     ??_LCDsend:	
  8737                           ; 1 bytes @ 0x2
  8738                           
  8739  0022                     ?_LCDsend2x4:	
  8740                           ; 1 bytes @ 0x2
  8741                           
  8742  0022                     putch@txData:	
  8743                           ; 1 bytes @ 0x2
  8744                           
  8745  0022                     LCDsend2x4@mode:	
  8746                           ; 1 bytes @ 0x2
  8747                           
  8748  0022                     ___wmul@multiplicand:	
  8749                           ; 1 bytes @ 0x2
  8750                           
  8751  0022                     ___lwdiv@dividend:	
  8752                           ; 2 bytes @ 0x2
  8753                           
  8754  0022                     memset@n:	
  8755                           ; 2 bytes @ 0x2
  8756                           
  8757                           
  8758                           ; 2 bytes @ 0x2
  8759  0022                     	ds	1
  8760  0023                     ??_SYSTEM_Initialize:
  8761  0023                     ??_ADCC_GetSingleConversion:	
  8762                           ; 1 bytes @ 0x3
  8763                           
  8764  0023                     ??_LCDsend2x4:	
  8765                           ; 1 bytes @ 0x3
  8766                           
  8767  0023                     ?_sendMessage:	
  8768                           ; 1 bytes @ 0x3
  8769                           
  8770  0023                     ADCC_GetSingleConversion@channel:	
  8771                           ; 1 bytes @ 0x3
  8772                           
  8773  0023                     tsttc@value:	
  8774                           ; 1 bytes @ 0x3
  8775                           
  8776  0023                     LCDsend@c:	
  8777                           ; 1 bytes @ 0x3
  8778                           
  8779  0023                     sendMessage@num:	
  8780                           ; 1 bytes @ 0x3
  8781                           
  8782  0023                     differenceBetweenTimePeriod@stop:	
  8783                           ; 2 bytes @ 0x3
  8784                           
  8785                           
  8786                           ; 3 bytes @ 0x3
  8787  0023                     	ds	1
  8788  0024                     ??_memset:
  8789  0024                     ??___wmul:	
  8790                           ; 1 bytes @ 0x4
  8791                           
  8792  0024                     ??___lwdiv:	
  8793                           ; 1 bytes @ 0x4
  8794                           
  8795  0024                     ___wmul@product:	
  8796                           ; 1 bytes @ 0x4
  8797                           
  8798                           
  8799                           ; 2 bytes @ 0x4
  8800  0024                     	ds	1
  8801  0025                     LCDsend2x4@c:
  8802  0025                     sendMessage@buffer:	
  8803                           ; 1 bytes @ 0x5
  8804                           
  8805  0025                     memset@p:	
  8806                           ; 1 bytes @ 0x5
  8807                           
  8808  0025                     ___lwdiv@quotient:	
  8809                           ; 1 bytes @ 0x5
  8810                           
  8811                           
  8812                           ; 2 bytes @ 0x5
  8813  0025                     	ds	1
  8814  0026                     ?_DATAEE_WriteByte:
  8815  0026                     ?_DATAEE_ReadByte:	
  8816                           ; 1 bytes @ 0x6
  8817                           
  8818  0026                     ??_sendMessage:	
  8819                           ; 1 bytes @ 0x6
  8820                           
  8821  0026                     LCDsend2x4@hc:	
  8822                           ; 1 bytes @ 0x6
  8823                           
  8824  0026                     differenceBetweenTimePeriod@diff:	
  8825                           ; 1 bytes @ 0x6
  8826                           
  8827  0026                     memset@p1:	
  8828                           ; 1 bytes @ 0x6
  8829                           
  8830  0026                     DATAEE_WriteByte@bAdd:	
  8831                           ; 1 bytes @ 0x6
  8832                           
  8833  0026                     DATAEE_ReadByte@bAdd:	
  8834                           ; 2 bytes @ 0x6
  8835                           
  8836                           
  8837                           ; 2 bytes @ 0x6
  8838  0026                     	ds	1
  8839  0027                     ??_differenceBetweenTimePeriod:
  8840  0027                     LCDsend2x4@lc:	
  8841                           ; 1 bytes @ 0x7
  8842                           
  8843  0027                     ___lwdiv@counter:	
  8844                           ; 1 bytes @ 0x7
  8845                           
  8846  0027                     sendMessage@n:	
  8847                           ; 1 bytes @ 0x7
  8848                           
  8849                           
  8850                           ; 2 bytes @ 0x7
  8851  0027                     	ds	1
  8852  0028                     ??_DATAEE_ReadByte:
  8853  0028                     ??_LCDinit:	
  8854                           ; 1 bytes @ 0x8
  8855                           
  8856  0028                     ??_LCDcmd:	
  8857                           ; 1 bytes @ 0x8
  8858                           
  8859  0028                     ??_LCDchar:	
  8860                           ; 1 bytes @ 0x8
  8861                           
  8862  0028                     ?___lwmod:	
  8863                           ; 1 bytes @ 0x8
  8864                           
  8865  0028                     DATAEE_WriteByte@bData:	
  8866                           ; 2 bytes @ 0x8
  8867                           
  8868  0028                     LCDcmd@c:	
  8869                           ; 1 bytes @ 0x8
  8870                           
  8871  0028                     LCDchar@c:	
  8872                           ; 1 bytes @ 0x8
  8873                           
  8874  0028                     ___lwmod@divisor:	
  8875                           ; 1 bytes @ 0x8
  8876                           
  8877                           
  8878                           ; 2 bytes @ 0x8
  8879  0028                     	ds	1
  8880  0029                     ??_DATAEE_WriteByte:
  8881  0029                     ?_LCDstr:	
  8882                           ; 1 bytes @ 0x9
  8883                           
  8884  0029                     ??_sendOKMessage:	
  8885                           ; 1 bytes @ 0x9
  8886                           
  8887  0029                     ??_sendERRORMessage:	
  8888                           ; 1 bytes @ 0x9
  8889                           
  8890  0029                     DATAEE_WriteByte@GIEBitValue:	
  8891                           ; 1 bytes @ 0x9
  8892                           
  8893  0029                     LCDstr@p:	
  8894                           ; 1 bytes @ 0x9
  8895                           
  8896                           
  8897                           ; 2 bytes @ 0x9
  8898  0029                     	ds	1
  8899  002A                     ??_wirteEEPROMinit:
  8900  002A                     ??_monitoring_TEMP_LUM:	
  8901                           ; 1 bytes @ 0xA
  8902                           
  8903  002A                     sendOKMessage@cmd:	
  8904                           ; 1 bytes @ 0xA
  8905                           
  8906  002A                     sendERRORMessage@cmd:	
  8907                           ; 1 bytes @ 0xA
  8908                           
  8909  002A                     ___lwmod@dividend:	
  8910                           ; 1 bytes @ 0xA
  8911                           
  8912                           
  8913                           ; 2 bytes @ 0xA
  8914  002A                     	ds	1
  8915  002B                     ??_LCDstr:
  8916  002B                     sendOKMessage@bufw:	
  8917                           ; 1 bytes @ 0xB
  8918                           
  8919  002B                     sendERRORMessage@bufw:	
  8920                           ; 4 bytes @ 0xB
  8921                           
  8922                           
  8923                           ; 4 bytes @ 0xB
  8924  002B                     	ds	1
  8925  002C                     ??___lwmod:
  8926                           
  8927                           ; 1 bytes @ 0xC
  8928  002C                     	ds	1
  8929  002D                     ___lwmod@counter:
  8930                           
  8931                           ; 1 bytes @ 0xD
  8932  002D                     	ds	1
  8933  002E                     ?_sprintf:
  8934  002E                     LCDstr@c:	
  8935                           ; 2 bytes @ 0xE
  8936                           
  8937  002E                     sprintf@f:	
  8938                           ; 1 bytes @ 0xE
  8939                           
  8940                           
  8941                           ; 2 bytes @ 0xE
  8942  002E                     	ds	1
  8943  002F                     ?_cmd_rc:
  8944  002F                     ?_cmd_sc:	
  8945                           ; 1 bytes @ 0xF
  8946                           
  8947  002F                     ?_cmd_rtl:	
  8948                           ; 1 bytes @ 0xF
  8949                           
  8950  002F                     ?_cmd_rp:	
  8951                           ; 1 bytes @ 0xF
  8952                           
  8953  002F                     ?_cmd_mmp:	
  8954                           ; 1 bytes @ 0xF
  8955                           
  8956  002F                     ?_cmd_mta:	
  8957                           ; 1 bytes @ 0xF
  8958                           
  8959  002F                     ?_cmd_ra:	
  8960                           ; 1 bytes @ 0xF
  8961                           
  8962  002F                     ?_cmd_dac:	
  8963                           ; 1 bytes @ 0xF
  8964                           
  8965  002F                     ?_cmd_dtl:	
  8966                           ; 1 bytes @ 0xF
  8967                           
  8968  002F                     ?_cmd_aa:	
  8969                           ; 1 bytes @ 0xF
  8970                           
  8971  002F                     ?_cmd_ir:	
  8972                           ; 1 bytes @ 0xF
  8973                           
  8974  002F                     ?_cmd_trc:	
  8975                           ; 1 bytes @ 0xF
  8976                           
  8977  002F                     ?_cmd_tri:	
  8978                           ; 1 bytes @ 0xF
  8979                           
  8980  002F                     cmd_rc@num:	
  8981                           ; 1 bytes @ 0xF
  8982                           
  8983  002F                     cmd_sc@num:	
  8984                           ; 2 bytes @ 0xF
  8985                           
  8986  002F                     cmd_rtl@num:	
  8987                           ; 2 bytes @ 0xF
  8988                           
  8989  002F                     cmd_rp@num:	
  8990                           ; 2 bytes @ 0xF
  8991                           
  8992  002F                     cmd_mmp@num:	
  8993                           ; 2 bytes @ 0xF
  8994                           
  8995  002F                     cmd_mta@num:	
  8996                           ; 2 bytes @ 0xF
  8997                           
  8998  002F                     cmd_ra@num:	
  8999                           ; 2 bytes @ 0xF
  9000                           
  9001  002F                     cmd_dac@num:	
  9002                           ; 2 bytes @ 0xF
  9003                           
  9004  002F                     cmd_dtl@num:	
  9005                           ; 2 bytes @ 0xF
  9006                           
  9007  002F                     cmd_aa@num:	
  9008                           ; 2 bytes @ 0xF
  9009                           
  9010  002F                     cmd_ir@num:	
  9011                           ; 2 bytes @ 0xF
  9012                           
  9013  002F                     cmd_trc@num:	
  9014                           ; 2 bytes @ 0xF
  9015                           
  9016  002F                     cmd_tri@num:	
  9017                           ; 2 bytes @ 0xF
  9018                           
  9019                           
  9020                           ; 2 bytes @ 0xF
  9021  002F                     	ds	2
  9022  0031                     cmd_rc@buffer:
  9023  0031                     cmd_sc@buffer:	
  9024                           ; 1 bytes @ 0x11
  9025                           
  9026  0031                     cmd_rtl@buffer:	
  9027                           ; 1 bytes @ 0x11
  9028                           
  9029  0031                     cmd_rp@buffer:	
  9030                           ; 1 bytes @ 0x11
  9031                           
  9032  0031                     cmd_mmp@buffer:	
  9033                           ; 1 bytes @ 0x11
  9034                           
  9035  0031                     cmd_mta@buffer:	
  9036                           ; 1 bytes @ 0x11
  9037                           
  9038  0031                     cmd_ra@buffer:	
  9039                           ; 1 bytes @ 0x11
  9040                           
  9041  0031                     cmd_dac@buffer:	
  9042                           ; 1 bytes @ 0x11
  9043                           
  9044  0031                     cmd_dtl@buffer:	
  9045                           ; 1 bytes @ 0x11
  9046                           
  9047  0031                     cmd_aa@buffer:	
  9048                           ; 1 bytes @ 0x11
  9049                           
  9050  0031                     cmd_ir@buffer:	
  9051                           ; 1 bytes @ 0x11
  9052                           
  9053  0031                     cmd_trc@buffer:	
  9054                           ; 1 bytes @ 0x11
  9055                           
  9056  0031                     cmd_tri@buffer:	
  9057                           ; 1 bytes @ 0x11
  9058                           
  9059                           
  9060                           ; 1 bytes @ 0x11
  9061  0031                     	ds	1
  9062  0032                     ??_cmd_rc:
  9063  0032                     ??_cmd_sc:	
  9064                           ; 1 bytes @ 0x12
  9065                           
  9066  0032                     ??_cmd_rtl:	
  9067                           ; 1 bytes @ 0x12
  9068                           
  9069  0032                     ??_cmd_rp:	
  9070                           ; 1 bytes @ 0x12
  9071                           
  9072  0032                     ??_cmd_mmp:	
  9073                           ; 1 bytes @ 0x12
  9074                           
  9075  0032                     ??_cmd_mta:	
  9076                           ; 1 bytes @ 0x12
  9077                           
  9078  0032                     ??_cmd_ra:	
  9079                           ; 1 bytes @ 0x12
  9080                           
  9081  0032                     ??_cmd_dac:	
  9082                           ; 1 bytes @ 0x12
  9083                           
  9084  0032                     ??_cmd_dtl:	
  9085                           ; 1 bytes @ 0x12
  9086                           
  9087  0032                     ??_cmd_aa:	
  9088                           ; 1 bytes @ 0x12
  9089                           
  9090  0032                     ??_cmd_ir:	
  9091                           ; 1 bytes @ 0x12
  9092                           
  9093  0032                     ??_cmd_trc:	
  9094                           ; 1 bytes @ 0x12
  9095                           
  9096  0032                     ??_cmd_tri:	
  9097                           ; 1 bytes @ 0x12
  9098                           
  9099                           
  9100                           ; 1 bytes @ 0x12
  9101  0032                     	ds	1
  9102  0033                     cmd_rtl@buff:
  9103  0033                     cmd_rp@buff:	
  9104                           ; 5 bytes @ 0x13
  9105                           
  9106  0033                     cmd_rc@buff:	
  9107                           ; 5 bytes @ 0x13
  9108                           
  9109  0033                     cmd_ir@buff:	
  9110                           ; 6 bytes @ 0x13
  9111                           
  9112  0033                     cmd_ra@buff:	
  9113                           ; 7 bytes @ 0x13
  9114                           
  9115                           
  9116                           ; 9 bytes @ 0x13
  9117  0033                     	ds	1
  9118  0034                     cmd_sc@h:
  9119  0034                     cmd_dac@h:	
  9120                           ; 2 bytes @ 0x14
  9121                           
  9122  0034                     cmd_dtl@tempAux:	
  9123                           ; 2 bytes @ 0x14
  9124                           
  9125                           
  9126                           ; 2 bytes @ 0x14
  9127  0034                     	ds	2
  9128  0036                     ??_sprintf:
  9129  0036                     cmd_sc@m:	
  9130                           ; 1 bytes @ 0x16
  9131                           
  9132  0036                     cmd_dac@m:	
  9133                           ; 2 bytes @ 0x16
  9134                           
  9135  0036                     cmd_dtl@lumAux:	
  9136                           ; 2 bytes @ 0x16
  9137                           
  9138                           
  9139                           ; 2 bytes @ 0x16
  9140  0036                     	ds	1
  9141  0037                     cmd_tri@buffData:
  9142                           
  9143                           ; 5 bytes @ 0x17
  9144  0037                     	ds	1
  9145  0038                     cmd_sc@s:
  9146  0038                     cmd_dac@s:	
  9147                           ; 2 bytes @ 0x18
  9148                           
  9149  0038                     cmd_trc@buffData:	
  9150                           ; 2 bytes @ 0x18
  9151                           
  9152                           
  9153                           ; 5 bytes @ 0x18
  9154  0038                     	ds	2
  9155  003A                     sprintf@ap:
  9156                           
  9157                           ; 1 bytes @ 0x1A
  9158  003A                     	ds	1
  9159  003B                     sprintf@prec:
  9160                           
  9161                           ; 1 bytes @ 0x1B
  9162  003B                     	ds	1
  9163  003C                     sprintf@val:
  9164  003C                     cmd_tri@buffInit:	
  9165                           ; 2 bytes @ 0x1C
  9166                           
  9167                           
  9168                           ; 4 bytes @ 0x1C
  9169  003C                     	ds	1
  9170  003D                     cmd_trc@buffInit:
  9171                           
  9172                           ; 3 bytes @ 0x1D
  9173  003D                     	ds	1
  9174  003E                     sprintf@flag:
  9175                           
  9176                           ; 1 bytes @ 0x1E
  9177  003E                     	ds	1
  9178  003F                     sprintf@width:
  9179                           
  9180                           ; 2 bytes @ 0x1F
  9181  003F                     	ds	1
  9182  0040                     cmd_tri@buffEOM:
  9183  0040                     cmd_trc@i:	
  9184                           ; 1 bytes @ 0x20
  9185                           
  9186                           
  9187                           ; 2 bytes @ 0x20
  9188  0040                     	ds	1
  9189  0041                     sprintf@c:
  9190  0041                     cmd_tri@maxReadingsAux:	
  9191                           ; 1 bytes @ 0x21
  9192                           
  9193                           
  9194                           ; 2 bytes @ 0x21
  9195  0041                     	ds	1
  9196  0042                     sprintf@sp:
  9197  0042                     cmd_trc@address:	
  9198                           ; 1 bytes @ 0x22
  9199                           
  9200                           
  9201                           ; 2 bytes @ 0x22
  9202  0042                     	ds	1
  9203  0043                     ??_update_menuLCD:
  9204  0043                     cmd_tri@i:	
  9205                           ; 1 bytes @ 0x23
  9206                           
  9207                           
  9208                           ; 2 bytes @ 0x23
  9209  0043                     	ds	1
  9210  0044                     cmd_trc@buffEOM:
  9211                           
  9212                           ; 1 bytes @ 0x24
  9213  0044                     	ds	1
  9214  0045                     cmd_tri@index:
  9215  0045                     cmd_trc@n:	
  9216                           ; 1 bytes @ 0x25
  9217                           
  9218                           
  9219                           ; 2 bytes @ 0x25
  9220  0045                     	ds	1
  9221  0046                     cmd_tri@startingIndex:
  9222                           
  9223                           ; 2 bytes @ 0x26
  9224  0046                     	ds	1
  9225  0047                     cmd_trc@nRegs:
  9226                           
  9227                           ; 2 bytes @ 0x27
  9228  0047                     	ds	1
  9229  0048                     cmd_tri@j:
  9230                           
  9231                           ; 1 bytes @ 0x28
  9232  0048                     	ds	1
  9233  0049                     cmd_trc@j:
  9234  0049                     cmd_tri@n:	
  9235                           ; 1 bytes @ 0x29
  9236                           
  9237  0049                     update_menuLCD@str:	
  9238                           ; 1 bytes @ 0x29
  9239                           
  9240                           
  9241                           ; 8 bytes @ 0x29
  9242  0049                     	ds	8
  9243  0051                     update_menuLCD@tt:
  9244                           
  9245                           ; 4 bytes @ 0x31
  9246  0051                     	ds	4
  9247  0055                     update_menuLCD@l:
  9248                           
  9249                           ; 3 bytes @ 0x35
  9250  0055                     	ds	3
  9251  0058                     update_menuLCD@diff:
  9252                           
  9253                           ; 3 bytes @ 0x38
  9254  0058                     	ds	3
  9255  005B                     ??_checkFlags:
  9256                           
  9257                           ; 1 bytes @ 0x3B
  9258  005B                     	ds	1
  9259  005C                     checkFlags@buff:
  9260                           
  9261                           ; 7 bytes @ 0x3C
  9262  005C                     	ds	7
  9263  0063                     ??_editClock:
  9264  0063                     ??_editTemp:	
  9265                           ; 1 bytes @ 0x43
  9266                           
  9267  0063                     ??_editLum:	
  9268                           ; 1 bytes @ 0x43
  9269                           
  9270  0063                     ??_toggleAlarms:	
  9271                           ; 1 bytes @ 0x43
  9272                           
  9273                           
  9274                           ; 1 bytes @ 0x43
  9275  0063                     	ds	1
  9276  0064                     ??_main:
  9277                           
  9278                           ; 1 bytes @ 0x44
  9279  0064                     	ds	1
  9280                           
  9281                           	psect	maintext
  9282  0092                     __pmaintext:	
  9283 ;;
  9284 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  9285 ;;
  9286 ;; *************** function _main *****************
  9287 ;; Defined at:
  9288 ;;		line 1064 in file "main.c"
  9289 ;; Parameters:    Size  Location     Type
  9290 ;;		None
  9291 ;; Auto vars:     Size  Location     Type
  9292 ;;  i               2   25[BANK1 ] int 
  9293 ;;  buff           20    0[BANK1 ] unsigned char [20]
  9294 ;;  n               2   30[BANK1 ] int 
  9295 ;;  i               2   27[BANK1 ] int 
  9296 ;;  c               1   29[BANK1 ] unsigned char 
  9297 ;;  corrupted       1   24[BANK1 ] unsigned char 
  9298 ;;  notInit         1   23[BANK1 ] unsigned char 
  9299 ;;  checkSumAux     1   22[BANK1 ] unsigned char 
  9300 ;; Return value:  Size  Location     Type
  9301 ;;                  1    wreg      void 
  9302 ;; Registers used:
  9303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : B1F/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Locals:         0       0      32       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Totals:         0       1      32       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;Total ram usage:       33 bytes
  9314 ;; Hardware stack levels required when called:   11
  9315 ;; This function calls:
  9316 ;;		_DATAEE_ReadByte
  9317 ;;		_DATAEE_WriteByte
  9318 ;;		_EUSART_is_rx_ready
  9319 ;;		_INT_SetInterruptHandler
  9320 ;;		_LCDinit
  9321 ;;		_PWM6_LoadDutyValue
  9322 ;;		_PWM_Output_D4_Disable
  9323 ;;		_SYSTEM_Initialize
  9324 ;;		_TMR1_SetInterruptHandler
  9325 ;;		_TMR2_StopTimer
  9326 ;;		___wmul
  9327 ;;		_checkFlags
  9328 ;;		_cmd_aa
  9329 ;;		_cmd_dac
  9330 ;;		_cmd_dtl
  9331 ;;		_cmd_ir
  9332 ;;		_cmd_mmp
  9333 ;;		_cmd_mta
  9334 ;;		_cmd_ra
  9335 ;;		_cmd_rc
  9336 ;;		_cmd_rp
  9337 ;;		_cmd_rtl
  9338 ;;		_cmd_sc
  9339 ;;		_cmd_trc
  9340 ;;		_cmd_tri
  9341 ;;		_editClock
  9342 ;;		_editLum
  9343 ;;		_editTemp
  9344 ;;		_getch
  9345 ;;		_i2c1_driver_open
  9346 ;;		_memset
  9347 ;;		_toggleAlarms
  9348 ;; This function is called by:
  9349 ;;		Startup code after reset
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _main
  9355  0092                     _main:
  9356  0092                     l5990:	
  9357                           ;incstack = 0
  9358                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9359                           
  9360                           
  9361                           ;main.c: 1067: SYSTEM_Initialize();
  9362  0092  3191  210A  3180   	fcall	_SYSTEM_Initialize
  9363                           
  9364                           ;main.c: 1069: PWM6_LoadDutyValue(0);
  9365  0095  3000               	movlw	0
  9366  0096  0020               	movlb	0	; select bank0
  9367  0097  00A0               	movwf	PWM6_LoadDutyValue@dutyValue
  9368  0098  00A1               	movwf	PWM6_LoadDutyValue@dutyValue+1
  9369  0099  3190  20A0  3180   	fcall	_PWM6_LoadDutyValue
  9370  009C                     l5992:
  9371                           
  9372                           ;main.c: 1070: TMR2_StopTimer();
  9373  009C  319F  276C  3180   	fcall	_TMR2_StopTimer
  9374  009F                     l5994:
  9375                           
  9376                           ;main.c: 1071: PWM_Output_D4_Disable();
  9377  009F  319F  2762  3180   	fcall	_PWM_Output_D4_Disable
  9378                           
  9379                           ;main.c: 1073: TMR1_SetInterruptHandler(Clock_ISR);
  9380  00A2  3004               	movlw	low _Clock_ISR
  9381  00A3  0020               	movlb	0	; select bank0
  9382  00A4  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9383  00A5  3009               	movlw	high _Clock_ISR
  9384  00A6  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9385  00A7  319F  27BE  3180   	fcall	_TMR1_SetInterruptHandler
  9386                           
  9387                           ;main.c: 1075: INT_SetInterruptHandler(S1_ISR);
  9388  00AA  3091               	movlw	low _S1_ISR
  9389  00AB  0020               	movlb	0	; select bank0
  9390  00AC  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler
  9391  00AD  301F               	movlw	high _S1_ISR
  9392  00AE  00A1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  9393  00AF  319F  27AC  3180   	fcall	_INT_SetInterruptHandler
  9394  00B2                     l5996:
  9395                           
  9396                           ;main.c: 1077: uint8_t checkSumAux = 0;
  9397  00B2  0021               	movlb	1	; select bank1
  9398  00B3  01D7               	clrf	main@checkSumAux^(0+128)
  9399  00B4                     l5998:
  9400                           
  9401                           ;main.c: 1078: bool notInit = 1;
  9402  00B4  01D8               	clrf	main@notInit^(0+128)
  9403  00B5  0AD8               	incf	main@notInit^(0+128),f
  9404  00B6                     l6000:
  9405                           
  9406                           ;main.c: 1079: bool corrupted = 0;
  9407  00B6  01D9               	clrf	main@corrupted^(0+128)
  9408  00B7                     l6002:
  9409                           
  9410                           ;main.c: 1080: if(DATAEE_ReadByte(0x7000) == 'S'){
  9411  00B7  3000               	movlw	0
  9412  00B8  0020               	movlb	0	; select bank0
  9413  00B9  00A6               	movwf	DATAEE_ReadByte@bAdd
  9414  00BA  3070               	movlw	112
  9415  00BB  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9416  00BC  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9417  00BF  3A53               	xorlw	83
  9418  00C0  1D03               	skipz
  9419  00C1  28C3               	goto	u6321
  9420  00C2  28C4               	goto	u6320
  9421  00C3                     u6321:
  9422  00C3  28FF               	goto	l6022
  9423  00C4                     u6320:
  9424  00C4                     l6004:
  9425                           
  9426                           ;main.c: 1081: notInit = 0;
  9427  00C4  0021               	movlb	1	; select bank1
  9428  00C5  01D8               	clrf	main@notInit^(0+128)
  9429  00C6                     l6006:
  9430                           
  9431                           ;main.c: 1082: for(int i = 1; i < 13; i++){
  9432  00C6  3001               	movlw	1
  9433  00C7  00DA               	movwf	main@i^(0+128)
  9434  00C8  3000               	movlw	0
  9435  00C9  00DB               	movwf	(main@i^(0+128)+1)
  9436  00CA                     l6012:
  9437                           
  9438                           ;main.c: 1083: checkSumAux += DATAEE_ReadByte(0x7000 + (i));
  9439  00CA  0021               	movlb	1	; select bank1
  9440  00CB  085A               	movf	main@i^(0+128),w
  9441  00CC  3E00               	addlw	0
  9442  00CD  0020               	movlb	0	; select bank0
  9443  00CE  00A6               	movwf	DATAEE_ReadByte@bAdd
  9444  00CF  3070               	movlw	112
  9445  00D0  0021               	movlb	1	; select bank1
  9446  00D1  3D5B               	addwfc	(main@i+1)^(0+128),w
  9447  00D2  0020               	movlb	0	; select bank0
  9448  00D3  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9449  00D4  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9450  00D7  0020               	movlb	0	; select bank0
  9451  00D8  00E4               	movwf	??_main
  9452  00D9  0864               	movf	??_main,w
  9453  00DA  0021               	movlb	1	; select bank1
  9454  00DB  07D7               	addwf	main@checkSumAux^(0+128),f
  9455  00DC                     l6014:
  9456  00DC  3001               	movlw	1
  9457  00DD  07DA               	addwf	main@i^(0+128),f
  9458  00DE  3000               	movlw	0
  9459  00DF  3DDB               	addwfc	(main@i+1)^(0+128),f
  9460  00E0                     l6016:
  9461  00E0  085B               	movf	(main@i+1)^(0+128),w
  9462  00E1  3A80               	xorlw	128
  9463  00E2  0020               	movlb	0	; select bank0
  9464  00E3  00E4               	movwf	??_main
  9465  00E4  3080               	movlw	128
  9466  00E5  0264               	subwf	??_main,w
  9467  00E6  1D03               	skipz
  9468  00E7  28EB               	goto	u6335
  9469  00E8  300D               	movlw	13
  9470  00E9  0021               	movlb	1	; select bank1
  9471  00EA  025A               	subwf	main@i^(0+128),w
  9472  00EB                     u6335:
  9473  00EB  1C03               	skipc
  9474  00EC  28EE               	goto	u6331
  9475  00ED  28EF               	goto	u6330
  9476  00EE                     u6331:
  9477  00EE  28CA               	goto	l6012
  9478  00EF                     u6330:
  9479  00EF                     l6018:
  9480                           
  9481                           ;main.c: 1084: };main.c: 1085: if(checkSumAux != DATAEE_ReadByte(0x7000 + (13))){
  9482  00EF  300D               	movlw	13
  9483  00F0  0020               	movlb	0	; select bank0
  9484  00F1  00A6               	movwf	DATAEE_ReadByte@bAdd
  9485  00F2  3070               	movlw	112
  9486  00F3  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9487  00F4  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9488  00F7  0021               	movlb	1	; select bank1
  9489  00F8  0657               	xorwf	main@checkSumAux^(0+128),w
  9490  00F9  1903               	skipnz
  9491  00FA  28FC               	goto	u6341
  9492  00FB  28FD               	goto	u6340
  9493  00FC                     u6341:
  9494  00FC  28FF               	goto	l6022
  9495  00FD                     u6340:
  9496  00FD                     l6020:
  9497                           
  9498                           ;main.c: 1086: corrupted = 1;
  9499  00FD  01D9               	clrf	main@corrupted^(0+128)
  9500  00FE  0AD9               	incf	main@corrupted^(0+128),f
  9501  00FF                     l6022:
  9502                           
  9503                           ;main.c: 1087: };main.c: 1088: };main.c: 1090: if(notInit || corrupted){
  9504  00FF  0021               	movlb	1	; select bank1
  9505  0100  0858               	movf	main@notInit^(0+128),w
  9506  0101  1D03               	btfss	3,2
  9507  0102  2904               	goto	u6351
  9508  0103  2905               	goto	u6350
  9509  0104                     u6351:
  9510  0104  290A               	goto	l6026
  9511  0105                     u6350:
  9512  0105                     l6024:
  9513  0105  0859               	movf	main@corrupted^(0+128),w
  9514  0106  1903               	btfsc	3,2
  9515  0107  2909               	goto	u6361
  9516  0108  290A               	goto	u6360
  9517  0109                     u6361:
  9518  0109  29A3               	goto	l6028
  9519  010A                     u6360:
  9520  010A                     l6026:
  9521                           
  9522                           ;main.c: 1091: DATAEE_WriteByte( 0x7000 + (0), 'S');
  9523  010A  3000               	movlw	0
  9524  010B  0020               	movlb	0	; select bank0
  9525  010C  00A6               	movwf	DATAEE_WriteByte@bAdd
  9526  010D  3070               	movlw	112
  9527  010E  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9528  010F  3053               	movlw	83
  9529  0110  00E4               	movwf	??_main
  9530  0111  0864               	movf	??_main,w
  9531  0112  00A8               	movwf	DATAEE_WriteByte@bData
  9532  0113  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9533                           
  9534                           ;main.c: 1092: DATAEE_WriteByte( 0x7000 + (1), 25);
  9535  0116  3001               	movlw	1
  9536  0117  0020               	movlb	0	; select bank0
  9537  0118  00A6               	movwf	DATAEE_WriteByte@bAdd
  9538  0119  3070               	movlw	112
  9539  011A  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9540  011B  3019               	movlw	25
  9541  011C  00E4               	movwf	??_main
  9542  011D  0864               	movf	??_main,w
  9543  011E  00A8               	movwf	DATAEE_WriteByte@bData
  9544  011F  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9545                           
  9546                           ;main.c: 1093: DATAEE_WriteByte( 0x7000 + (2), 3);
  9547  0122  3002               	movlw	2
  9548  0123  0020               	movlb	0	; select bank0
  9549  0124  00A6               	movwf	DATAEE_WriteByte@bAdd
  9550  0125  3070               	movlw	112
  9551  0126  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9552  0127  3003               	movlw	3
  9553  0128  00E4               	movwf	??_main
  9554  0129  0864               	movf	??_main,w
  9555  012A  00A8               	movwf	DATAEE_WriteByte@bData
  9556  012B  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9557                           
  9558                           ;main.c: 1094: DATAEE_WriteByte( 0x7000 + (3), 5);
  9559  012E  3003               	movlw	3
  9560  012F  0020               	movlb	0	; select bank0
  9561  0130  00A6               	movwf	DATAEE_WriteByte@bAdd
  9562  0131  3070               	movlw	112
  9563  0132  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9564  0133  3005               	movlw	5
  9565  0134  00E4               	movwf	??_main
  9566  0135  0864               	movf	??_main,w
  9567  0136  00A8               	movwf	DATAEE_WriteByte@bData
  9568  0137  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9569                           
  9570                           ;main.c: 1095: DATAEE_WriteByte( 0x7000 + (4), 12);
  9571  013A  3004               	movlw	4
  9572  013B  0020               	movlb	0	; select bank0
  9573  013C  00A6               	movwf	DATAEE_WriteByte@bAdd
  9574  013D  3070               	movlw	112
  9575  013E  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9576  013F  300C               	movlw	12
  9577  0140  00E4               	movwf	??_main
  9578  0141  0864               	movf	??_main,w
  9579  0142  00A8               	movwf	DATAEE_WriteByte@bData
  9580  0143  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9581                           
  9582                           ;main.c: 1096: DATAEE_WriteByte( 0x7000 + (5), 0);
  9583  0146  3005               	movlw	5
  9584  0147  0020               	movlb	0	; select bank0
  9585  0148  00A6               	movwf	DATAEE_WriteByte@bAdd
  9586  0149  3070               	movlw	112
  9587  014A  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9588  014B  01A8               	clrf	DATAEE_WriteByte@bData
  9589  014C  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9590                           
  9591                           ;main.c: 1097: DATAEE_WriteByte( 0x7000 + (6), 0);
  9592  014F  3006               	movlw	6
  9593  0150  0020               	movlb	0	; select bank0
  9594  0151  00A6               	movwf	DATAEE_WriteByte@bAdd
  9595  0152  3070               	movlw	112
  9596  0153  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9597  0154  01A8               	clrf	DATAEE_WriteByte@bData
  9598  0155  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9599                           
  9600                           ;main.c: 1098: DATAEE_WriteByte( 0x7000 + (7), 28);
  9601  0158  3007               	movlw	7
  9602  0159  0020               	movlb	0	; select bank0
  9603  015A  00A6               	movwf	DATAEE_WriteByte@bAdd
  9604  015B  3070               	movlw	112
  9605  015C  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9606  015D  301C               	movlw	28
  9607  015E  00E4               	movwf	??_main
  9608  015F  0864               	movf	??_main,w
  9609  0160  00A8               	movwf	DATAEE_WriteByte@bData
  9610  0161  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9611                           
  9612                           ;main.c: 1099: DATAEE_WriteByte( 0x7000 + (8), 4);
  9613  0164  3008               	movlw	8
  9614  0165  0020               	movlb	0	; select bank0
  9615  0166  00A6               	movwf	DATAEE_WriteByte@bAdd
  9616  0167  3070               	movlw	112
  9617  0168  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9618  0169  3004               	movlw	4
  9619  016A  00E4               	movwf	??_main
  9620  016B  0864               	movf	??_main,w
  9621  016C  00A8               	movwf	DATAEE_WriteByte@bData
  9622  016D  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9623                           
  9624                           ;main.c: 1100: DATAEE_WriteByte( 0x7000 + (9), 'a');
  9625  0170  3009               	movlw	9
  9626  0171  0020               	movlb	0	; select bank0
  9627  0172  00A6               	movwf	DATAEE_WriteByte@bAdd
  9628  0173  3070               	movlw	112
  9629  0174  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9630  0175  3061               	movlw	97
  9631  0176  00E4               	movwf	??_main
  9632  0177  0864               	movf	??_main,w
  9633  0178  00A8               	movwf	DATAEE_WriteByte@bData
  9634  0179  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9635                           
  9636                           ;main.c: 1101: DATAEE_WriteByte( 0x7000 + (10), 0);
  9637  017C  300A               	movlw	10
  9638  017D  0020               	movlb	0	; select bank0
  9639  017E  00A6               	movwf	DATAEE_WriteByte@bAdd
  9640  017F  3070               	movlw	112
  9641  0180  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9642  0181  01A8               	clrf	DATAEE_WriteByte@bData
  9643  0182  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9644                           
  9645                           ;main.c: 1102: DATAEE_WriteByte( 0x7000 + (11), 0);
  9646  0185  300B               	movlw	11
  9647  0186  0020               	movlb	0	; select bank0
  9648  0187  00A6               	movwf	DATAEE_WriteByte@bAdd
  9649  0188  3070               	movlw	112
  9650  0189  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9651  018A  01A8               	clrf	DATAEE_WriteByte@bData
  9652  018B  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9653                           
  9654                           ;main.c: 1103: DATAEE_WriteByte( 0x7000 + (12), 0);
  9655  018E  300C               	movlw	12
  9656  018F  0020               	movlb	0	; select bank0
  9657  0190  00A6               	movwf	DATAEE_WriteByte@bAdd
  9658  0191  3070               	movlw	112
  9659  0192  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9660  0193  01A8               	clrf	DATAEE_WriteByte@bData
  9661  0194  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9662                           
  9663                           ;main.c: 1104: DATAEE_WriteByte( 0x7000 + (13), 174);
  9664  0197  300D               	movlw	13
  9665  0198  0020               	movlb	0	; select bank0
  9666  0199  00A6               	movwf	DATAEE_WriteByte@bAdd
  9667  019A  3070               	movlw	112
  9668  019B  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9669  019C  30AE               	movlw	174
  9670  019D  00E4               	movwf	??_main
  9671  019E  0864               	movf	??_main,w
  9672  019F  00A8               	movwf	DATAEE_WriteByte@bData
  9673  01A0  3192  2249  3180   	fcall	_DATAEE_WriteByte
  9674  01A3                     l6028:
  9675                           
  9676                           ;main.c: 1105: };main.c: 1107: NREG = DATAEE_ReadByte(0x7000 + (1));
  9677  01A3  3001               	movlw	1
  9678  01A4  0020               	movlb	0	; select bank0
  9679  01A5  00A6               	movwf	DATAEE_ReadByte@bAdd
  9680  01A6  3070               	movlw	112
  9681  01A7  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9682  01A8  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9683  01AB  0020               	movlb	0	; select bank0
  9684  01AC  00E4               	movwf	??_main
  9685  01AD  0864               	movf	??_main,w
  9686  01AE  00FD               	movwf	_NREG
  9687  01AF                     l6030:
  9688                           
  9689                           ;main.c: 1108: PMON = DATAEE_ReadByte(0x7000 + (2));
  9690  01AF  3002               	movlw	2
  9691  01B0  00A6               	movwf	DATAEE_ReadByte@bAdd
  9692  01B1  3070               	movlw	112
  9693  01B2  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9694  01B3  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9695  01B6  0020               	movlb	0	; select bank0
  9696  01B7  00E4               	movwf	??_main
  9697  01B8  0864               	movf	??_main,w
  9698  01B9  0021               	movlb	1	; select bank1
  9699  01BA  00EA               	movwf	_PMON^(0+128)
  9700  01BB                     l6032:
  9701                           
  9702                           ;main.c: 1109: TALA = DATAEE_ReadByte(0x7000 + (3));
  9703  01BB  3003               	movlw	3
  9704  01BC  0020               	movlb	0	; select bank0
  9705  01BD  00A6               	movwf	DATAEE_ReadByte@bAdd
  9706  01BE  3070               	movlw	112
  9707  01BF  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9708  01C0  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9709  01C3  0020               	movlb	0	; select bank0
  9710  01C4  00E4               	movwf	??_main
  9711  01C5  0864               	movf	??_main,w
  9712  01C6  0021               	movlb	1	; select bank1
  9713  01C7  00E9               	movwf	_TALA^(0+128)
  9714  01C8                     l6034:
  9715                           
  9716                           ;main.c: 1110: clkAlarm.alarmVal.h = DATAEE_ReadByte(0x7000 + (4));
  9717  01C8  3004               	movlw	4
  9718  01C9  0020               	movlb	0	; select bank0
  9719  01CA  00A6               	movwf	DATAEE_ReadByte@bAdd
  9720  01CB  3070               	movlw	112
  9721  01CC  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9722  01CD  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9723  01D0  0020               	movlb	0	; select bank0
  9724  01D1  00E4               	movwf	??_main
  9725  01D2  0864               	movf	??_main,w
  9726  01D3  0021               	movlb	1	; select bank1
  9727  01D4  00A0               	movwf	_clkAlarm^(0+128)
  9728  01D5                     l6036:
  9729                           
  9730                           ;main.c: 1111: clkAlarm.alarmVal.m = DATAEE_ReadByte(0x7000 + (5));
  9731  01D5  3005               	movlw	5
  9732  01D6  0020               	movlb	0	; select bank0
  9733  01D7  00A6               	movwf	DATAEE_ReadByte@bAdd
  9734  01D8  3070               	movlw	112
  9735  01D9  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9736  01DA  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9737  01DD  0020               	movlb	0	; select bank0
  9738  01DE  00E4               	movwf	??_main
  9739  01DF  0864               	movf	??_main,w
  9740  01E0  0021               	movlb	1	; select bank1
  9741  01E1  00A1               	movwf	(_clkAlarm^(0+128)+1)
  9742  01E2                     l6038:
  9743                           
  9744                           ;main.c: 1112: clkAlarm.alarmVal.s = DATAEE_ReadByte(0x7000 + (6));
  9745  01E2  3006               	movlw	6
  9746  01E3  0020               	movlb	0	; select bank0
  9747  01E4  00A6               	movwf	DATAEE_ReadByte@bAdd
  9748  01E5  3070               	movlw	112
  9749  01E6  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9750  01E7  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9751  01EA  0020               	movlb	0	; select bank0
  9752  01EB  00E4               	movwf	??_main
  9753  01EC  0864               	movf	??_main,w
  9754  01ED  0021               	movlb	1	; select bank1
  9755  01EE  00A2               	movwf	(_clkAlarm^(0+128)+2)
  9756  01EF                     l6040:
  9757                           
  9758                           ;main.c: 1113: tempAlarm.alarmTemp = DATAEE_ReadByte(0x7000 + (7));
  9759  01EF  3007               	movlw	7
  9760  01F0  0020               	movlb	0	; select bank0
  9761  01F1  00A6               	movwf	DATAEE_ReadByte@bAdd
  9762  01F2  3070               	movlw	112
  9763  01F3  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9764  01F4  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9765  01F7  0020               	movlb	0	; select bank0
  9766  01F8  00E4               	movwf	??_main
  9767  01F9  0864               	movf	??_main,w
  9768  01FA  0021               	movlb	1	; select bank1
  9769  01FB  00A7               	movwf	_tempAlarm^(0+128)
  9770  01FC                     l6042:
  9771                           
  9772                           ;main.c: 1114: lumAlarm.alarmLum = DATAEE_ReadByte(0x7000 + (8));
  9773  01FC  3008               	movlw	8
  9774  01FD  0020               	movlb	0	; select bank0
  9775  01FE  00A6               	movwf	DATAEE_ReadByte@bAdd
  9776  01FF  3070               	movlw	112
  9777  0200  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9778  0201  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9779  0204  0020               	movlb	0	; select bank0
  9780  0205  00E4               	movwf	??_main
  9781  0206  0864               	movf	??_main,w
  9782  0207  0021               	movlb	1	; select bank1
  9783  0208  00A4               	movwf	_lumAlarm^(0+128)
  9784  0209                     l6044:
  9785                           
  9786                           ;main.c: 1115: ALAF = DATAEE_ReadByte(0x7000 + (9));
  9787  0209  3009               	movlw	9
  9788  020A  0020               	movlb	0	; select bank0
  9789  020B  00A6               	movwf	DATAEE_ReadByte@bAdd
  9790  020C  3070               	movlw	112
  9791  020D  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9792  020E  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9793  0211  0020               	movlb	0	; select bank0
  9794  0212  00E4               	movwf	??_main
  9795  0213  0864               	movf	??_main,w
  9796  0214  00EF               	movwf	_ALAF
  9797  0215                     l6046:
  9798                           
  9799                           ;main.c: 1116: t.h = DATAEE_ReadByte(0x7000 + (10));
  9800  0215  300A               	movlw	10
  9801  0216  00A6               	movwf	DATAEE_ReadByte@bAdd
  9802  0217  3070               	movlw	112
  9803  0218  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9804  0219  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9805  021C  0020               	movlb	0	; select bank0
  9806  021D  00E4               	movwf	??_main
  9807  021E  0864               	movf	??_main,w
  9808  021F  00E5               	movwf	_t
  9809  0220                     l6048:
  9810                           
  9811                           ;main.c: 1117: t.m = DATAEE_ReadByte(0x7000 + (11));
  9812  0220  300B               	movlw	11
  9813  0221  00A6               	movwf	DATAEE_ReadByte@bAdd
  9814  0222  3070               	movlw	112
  9815  0223  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9816  0224  3190  2024  3180   	fcall	_DATAEE_ReadByte
  9817  0227  0020               	movlb	0	; select bank0
  9818  0228  00E4               	movwf	??_main
  9819  0229  0864               	movf	??_main,w
  9820  022A  00E6               	movwf	_t+1
  9821  022B                     l6050:
  9822                           
  9823                           ;main.c: 1118: iwrite = 0;
  9824  022B  01EB               	clrf	_iwrite
  9825  022C                     l6052:
  9826                           
  9827                           ;main.c: 1122: tempAlarm.trigger = 0;
  9828  022C  0021               	movlb	1	; select bank1
  9829  022D  01A8               	clrf	(_tempAlarm^(0+128)+1)
  9830  022E                     l6054:
  9831                           
  9832                           ;main.c: 1123: tempAlarm.triggered = 0;
  9833  022E  01A9               	clrf	(_tempAlarm^(0+128)+2)
  9834  022F                     l6056:
  9835                           
  9836                           ;main.c: 1125: lumAlarm.trigger = 0;
  9837  022F  01A5               	clrf	(_lumAlarm^(0+128)+1)
  9838  0230                     l6058:
  9839                           
  9840                           ;main.c: 1126: lumAlarm.triggered = 0;
  9841  0230  01A6               	clrf	(_lumAlarm^(0+128)+2)
  9842  0231                     l6060:
  9843                           
  9844                           ;main.c: 1128: clkAlarm.trigger = 0;
  9845  0231  01A3               	clrf	(_clkAlarm^(0+128)+3)
  9846  0232                     l6062:
  9847                           
  9848                           ;main.c: 1131: i2c1_driver_open();
  9849  0232  319F  27DA  3180   	fcall	_i2c1_driver_open
  9850  0235                     l6064:
  9851                           
  9852                           ;main.c: 1132: TRISCbits.TRISC3 = 1;
  9853  0235  0020               	movlb	0	; select bank0
  9854  0236  1593               	bsf	19,3	;volatile
  9855  0237                     l6066:
  9856                           
  9857                           ;main.c: 1133: TRISCbits.TRISC4 = 1;
  9858  0237  1613               	bsf	19,4	;volatile
  9859  0238                     l6068:
  9860                           
  9861                           ;main.c: 1134: WPUC3 = 1;
  9862  0238  003E               	movlb	30	; select bank30
  9863  0239  15CF               	bsf	79,3	;volatile
  9864  023A                     l6070:
  9865                           
  9866                           ;main.c: 1135: WPUC4 = 1;
  9867  023A  164F               	bsf	79,4	;volatile
  9868  023B                     l6072:
  9869                           
  9870                           ;main.c: 1136: LCDinit();
  9871  023B  3188  2014  3180   	fcall	_LCDinit
  9872  023E                     l6074:
  9873                           
  9874                           ;main.c: 1139: (INTCONbits.GIE = 1);
  9875  023E  178B               	bsf	11,7	;volatile
  9876  023F                     l6076:
  9877                           
  9878                           ;main.c: 1142: (INTCONbits.PEIE = 1);
  9879  023F  170B               	bsf	11,6	;volatile
  9880  0240                     l6078:
  9881                           
  9882                           ;main.c: 1146: uint8_t c;;main.c: 1147: char buff[20] = "";
  9883  0240  30C1               	movlw	low main@buff
  9884  0241  0086               	movwf	6
  9885  0242  3000               	movlw	high main@buff
  9886  0243  0087               	movwf	7
  9887  0244  3014               	movlw	20
  9888  0245  0020               	movlb	0	; select bank0
  9889  0246  00E4               	movwf	??_main
  9890  0247  3000               	movlw	0
  9891  0248                     u6370:
  9892  0248  001E               	movwi fsr1++
  9893  0249  0BE4               	decfsz	??_main,f
  9894  024A  2A48               	goto	u6370
  9895  024B                     l6080:
  9896                           
  9897                           ;main.c: 1148: int n=0;
  9898  024B  0021               	movlb	1	; select bank1
  9899  024C  01DF               	clrf	main@n^(0+128)
  9900  024D  01E0               	clrf	(main@n+1)^(0+128)
  9901  024E                     l6082:
  9902  024E  2AA5               	goto	l6110
  9903  024F                     l6084:
  9904                           
  9905                           ;main.c: 1155: c = getch();
  9906  024F  3187  27FB  3180   	fcall	_getch
  9907  0252  0020               	movlb	0	; select bank0
  9908  0253  00E4               	movwf	??_main
  9909  0254  0864               	movf	??_main,w
  9910  0255  0021               	movlb	1	; select bank1
  9911  0256  00DE               	movwf	main@c^(0+128)
  9912  0257                     l6086:
  9913                           
  9914                           ;main.c: 1157: if((c == (uint8_t)0xFD || buff[0] == (uint8_t)0xFD)){
  9915  0257  30FD               	movlw	253
  9916  0258  065E               	xorwf	main@c^(0+128),w
  9917  0259  1903               	btfsc	3,2
  9918  025A  2A5C               	goto	u6381
  9919  025B  2A5D               	goto	u6380
  9920  025C                     u6381:
  9921  025C  2A63               	goto	l6090
  9922  025D                     u6380:
  9923  025D                     l6088:
  9924  025D  30FD               	movlw	253
  9925  025E  0641               	xorwf	main@buff^(0+128),w
  9926  025F  1D03               	btfss	3,2
  9927  0260  2A62               	goto	u6391
  9928  0261  2A63               	goto	u6390
  9929  0262                     u6391:
  9930  0262  2A9E               	goto	l6106
  9931  0263                     u6390:
  9932  0263                     l6090:
  9933                           
  9934                           ;main.c: 1158: if(c == (uint8_t)0xFD){
  9935  0263  30FD               	movlw	253
  9936  0264  065E               	xorwf	main@c^(0+128),w
  9937  0265  1D03               	btfss	3,2
  9938  0266  2A68               	goto	u6401
  9939  0267  2A69               	goto	u6400
  9940  0268                     u6401:
  9941  0268  2A78               	goto	l6096
  9942  0269                     u6400:
  9943  0269                     l6092:
  9944                           
  9945                           ;main.c: 1159: memset(buff, 0, sizeof buff);
  9946  0269  3000               	movlw	0
  9947  026A  0020               	movlb	0	; select bank0
  9948  026B  00A0               	movwf	memset@c
  9949  026C  00A1               	movwf	memset@c+1
  9950  026D  3014               	movlw	20
  9951  026E  00A2               	movwf	memset@n
  9952  026F  3000               	movlw	0
  9953  0270  00A3               	movwf	memset@n+1
  9954  0271  30C1               	movlw	(low (main@buff| 0))& (0+255)
  9955  0272  3191  2182  3180   	fcall	_memset
  9956  0275                     l6094:
  9957                           
  9958                           ;main.c: 1160: n=0;
  9959  0275  0021               	movlb	1	; select bank1
  9960  0276  01DF               	clrf	main@n^(0+128)
  9961  0277  01E0               	clrf	(main@n+1)^(0+128)
  9962  0278                     l6096:
  9963                           
  9964                           ;main.c: 1161: };main.c: 1162: buff[n] = c;
  9965  0278  085E               	movf	main@c^(0+128),w
  9966  0279  0020               	movlb	0	; select bank0
  9967  027A  00E4               	movwf	??_main
  9968  027B  0021               	movlb	1	; select bank1
  9969  027C  085F               	movf	main@n^(0+128),w
  9970  027D  3EC1               	addlw	(low (main@buff| 0))& (0+255)
  9971  027E  0086               	movwf	6
  9972  027F  0187               	clrf	7
  9973  0280  0020               	movlb	0	; select bank0
  9974  0281  0864               	movf	??_main,w
  9975  0282  0081               	movwf	1
  9976  0283                     l6098:
  9977                           
  9978                           ;main.c: 1163: n++;
  9979  0283  3001               	movlw	1
  9980  0284  0021               	movlb	1	; select bank1
  9981  0285  07DF               	addwf	main@n^(0+128),f
  9982  0286  3000               	movlw	0
  9983  0287  3DE0               	addwfc	(main@n+1)^(0+128),f
  9984  0288                     l6100:
  9985                           
  9986                           ;main.c: 1164: if(n == 20){
  9987  0288  3014               	movlw	20
  9988  0289  065F               	xorwf	main@n^(0+128),w
  9989  028A  0460               	iorwf	(main@n+1)^(0+128),w
  9990  028B  1D03               	btfss	3,2
  9991  028C  2A8E               	goto	u6411
  9992  028D  2A8F               	goto	u6410
  9993  028E                     u6411:
  9994  028E  2A9E               	goto	l6106
  9995  028F                     u6410:
  9996  028F                     l6102:
  9997                           
  9998                           ;main.c: 1165: memset(buff, 0, sizeof buff);
  9999  028F  3000               	movlw	0
 10000  0290  0020               	movlb	0	; select bank0
 10001  0291  00A0               	movwf	memset@c
 10002  0292  00A1               	movwf	memset@c+1
 10003  0293  3014               	movlw	20
 10004  0294  00A2               	movwf	memset@n
 10005  0295  3000               	movlw	0
 10006  0296  00A3               	movwf	memset@n+1
 10007  0297  30C1               	movlw	(low (main@buff| 0))& (0+255)
 10008  0298  3191  2182  3180   	fcall	_memset
 10009  029B                     l6104:
 10010                           
 10011                           ;main.c: 1166: n=0;
 10012  029B  0021               	movlb	1	; select bank1
 10013  029C  01DF               	clrf	main@n^(0+128)
 10014  029D  01E0               	clrf	(main@n+1)^(0+128)
 10015  029E                     l6106:
 10016                           
 10017                           ;main.c: 1167: };main.c: 1168: };main.c: 1169: if(c == (uint8_t)0xFE){
 10018  029E  30FE               	movlw	254
 10019  029F  065E               	xorwf	main@c^(0+128),w
 10020  02A0  1D03               	btfss	3,2
 10021  02A1  2AA3               	goto	u6421
 10022  02A2  2AA4               	goto	u6420
 10023  02A3                     u6421:
 10024  02A3  2AA5               	goto	l6110
 10025  02A4                     u6420:
 10026  02A4  2AAD               	goto	l6112
 10027  02A5                     l1548:
 10028  02A5                     l6110:
 10029  02A5  319F  2759  3180   	fcall	_EUSART_is_rx_ready
 10030  02A8  3A00               	xorlw	0
 10031  02A9  1D03               	skipz
 10032  02AA  2AAC               	goto	u6431
 10033  02AB  2AAD               	goto	u6430
 10034  02AC                     u6431:
 10035  02AC  2A4F               	goto	l6084
 10036  02AD                     u6430:
 10037  02AD                     l6112:
 10038                           
 10039                           ;main.c: 1171: };main.c: 1172: };main.c: 1174: if(buff[n-1] == (uint8_t)0xFE){
 10040  02AD  0021               	movlb	1	; select bank1
 10041  02AE  085F               	movf	main@n^(0+128),w
 10042  02AF  3EFF               	addlw	255
 10043  02B0  3EC1               	addlw	(low (main@buff| 0))& (0+255)
 10044  02B1  0086               	movwf	6
 10045  02B2  0187               	clrf	7
 10046  02B3  30FE               	movlw	254
 10047  02B4  0601               	xorwf	1,w
 10048  02B5  1D03               	btfss	3,2
 10049  02B6  2AB8               	goto	u6441
 10050  02B7  2AB9               	goto	u6440
 10051  02B8                     u6441:
 10052  02B8  2B23               	goto	l6134
 10053  02B9                     u6440:
 10054  02B9                     l6114:
 10055                           
 10056                           ;main.c: 1175: for (i = 0; i < (sizeof(commands) / sizeof(struct command_d)); i++){
 10057  02B9  01DC               	clrf	main@i_2530^(0+128)
 10058  02BA  01DD               	clrf	(main@i_2530+1)^(0+128)
 10059  02BB                     l6120:
 10060                           
 10061                           ;main.c: 1176: if (buff[1] == commands[i].cmd_name){
 10062  02BB  085D               	movf	(main@i_2530+1)^(0+128),w
 10063  02BC  0020               	movlb	0	; select bank0
 10064  02BD  00A1               	movwf	___wmul@multiplier+1
 10065  02BE  0021               	movlb	1	; select bank1
 10066  02BF  085C               	movf	main@i_2530^(0+128),w
 10067  02C0  0020               	movlb	0	; select bank0
 10068  02C1  00A0               	movwf	___wmul@multiplier
 10069  02C2  3003               	movlw	3
 10070  02C3  00A2               	movwf	___wmul@multiplicand
 10071  02C4  3000               	movlw	0
 10072  02C5  00A3               	movwf	___wmul@multiplicand+1
 10073  02C6  3191  21A1  3180   	fcall	___wmul
 10074  02C9  0020               	movlb	0	; select bank0
 10075  02CA  0821               	movf	?___wmul+1,w
 10076  02CB  0085               	movwf	5
 10077  02CC  0820               	movf	?___wmul,w
 10078  02CD  0084               	movwf	4
 10079  02CE  3002               	movlw	low ((_commands+2)| (0+32768))
 10080  02CF  0784               	addwf	4,f
 10081  02D0  3098               	movlw	high ((_commands+2)| (0+32768))
 10082  02D1  3D85               	addwfc	5,f
 10083  02D2  0800               	movf	0,w	;code access
 10084  02D3  0021               	movlb	1	; select bank1
 10085  02D4  0642               	xorwf	(main@buff^(0+128)+1),w
 10086  02D5  1D03               	skipz
 10087  02D6  2AD8               	goto	u6451
 10088  02D7  2AD9               	goto	u6450
 10089  02D8                     u6451:
 10090  02D8  2B07               	goto	l6126
 10091  02D9                     u6450:
 10092  02D9                     l6122:
 10093                           
 10094                           ;main.c: 1177: commands[i].cmd_fnct(n, buff);
 10095  02D9  085D               	movf	(main@i_2530+1)^(0+128),w
 10096  02DA  0020               	movlb	0	; select bank0
 10097  02DB  00A1               	movwf	___wmul@multiplier+1
 10098  02DC  0021               	movlb	1	; select bank1
 10099  02DD  085C               	movf	main@i_2530^(0+128),w
 10100  02DE  0020               	movlb	0	; select bank0
 10101  02DF  00A0               	movwf	___wmul@multiplier
 10102  02E0  3003               	movlw	3
 10103  02E1  00A2               	movwf	___wmul@multiplicand
 10104  02E2  3000               	movlw	0
 10105  02E3  00A3               	movwf	___wmul@multiplicand+1
 10106  02E4  3191  21A1  3180   	fcall	___wmul
 10107  02E7  0020               	movlb	0	; select bank0
 10108  02E8  0821               	movf	?___wmul+1,w
 10109  02E9  0085               	movwf	5
 10110  02EA  0820               	movf	?___wmul,w
 10111  02EB  0084               	movwf	4
 10112  02EC  3000               	movlw	low (_commands| (0+32768))
 10113  02ED  0784               	addwf	4,f
 10114  02EE  3098               	movlw	high (_commands| (0+32768))
 10115  02EF  3D85               	addwfc	5,f
 10116  02F0  3F00               	moviw [0]fsr0
 10117  02F1  0021               	movlb	1	; select bank1
 10118  02F2  00D5               	movwf	_main$3491^(0+128)
 10119  02F3  3F01               	moviw [1]fsr0
 10120  02F4  00D6               	movwf	(_main$3491+1)^(0+128)
 10121  02F5                     l6124:
 10122                           
 10123                           ;main.c: 1177: commands[i].cmd_fnct(n, buff);
 10124  02F5  0860               	movf	(main@n+1)^(0+128),w
 10125  02F6  0020               	movlb	0	; select bank0
 10126  02F7  00B0               	movwf	cmd_tri@num+1
 10127  02F8  0021               	movlb	1	; select bank1
 10128  02F9  085F               	movf	main@n^(0+128),w
 10129  02FA  0020               	movlb	0	; select bank0
 10130  02FB  00AF               	movwf	cmd_tri@num
 10131  02FC  30C1               	movlw	(low (main@buff| 0))& (0+255)
 10132  02FD  00E4               	movwf	??_main
 10133  02FE  0864               	movf	??_main,w
 10134  02FF  00B1               	movwf	cmd_tri@buffer
 10135  0300  0021               	movlb	1	; select bank1
 10136  0301  0856               	movf	(_main$3491+1)^(0+128),w
 10137  0302  008A               	movwf	10
 10138  0303  0855               	movf	_main$3491^(0+128),w
 10139  0304  000A               	callw
 10140  0305  3180               	pagesel	$
 10141                           
 10142                           ;main.c: 1178: break;
 10143  0306  2B14               	goto	l6128
 10144  0307                     l6126:
 10145  0307  3001               	movlw	1
 10146  0308  07DC               	addwf	main@i_2530^(0+128),f
 10147  0309  3000               	movlw	0
 10148  030A  3DDD               	addwfc	(main@i_2530+1)^(0+128),f
 10149  030B  3000               	movlw	0
 10150  030C  025D               	subwf	(main@i_2530+1)^(0+128),w
 10151  030D  300D               	movlw	13
 10152  030E  1903               	skipnz
 10153  030F  025C               	subwf	main@i_2530^(0+128),w
 10154  0310  1C03               	skipc
 10155  0311  2B13               	goto	u6461
 10156  0312  2B14               	goto	u6460
 10157  0313                     u6461:
 10158  0313  2ABB               	goto	l6120
 10159  0314                     u6460:
 10160  0314                     l6128:
 10161                           
 10162                           ;main.c: 1179: };main.c: 1180: };main.c: 1181: memset(buff, 0, sizeof buff);
 10163  0314  3000               	movlw	0
 10164  0315  0020               	movlb	0	; select bank0
 10165  0316  00A0               	movwf	memset@c
 10166  0317  00A1               	movwf	memset@c+1
 10167  0318  3014               	movlw	20
 10168  0319  00A2               	movwf	memset@n
 10169  031A  3000               	movlw	0
 10170  031B  00A3               	movwf	memset@n+1
 10171  031C  30C1               	movlw	(low (main@buff| 0))& (0+255)
 10172  031D  3191  2182  3180   	fcall	_memset
 10173  0320                     l6130:
 10174  0320                     l6132:
 10175                           
 10176                           ;main.c: 1183: n=0;
 10177  0320  0021               	movlb	1	; select bank1
 10178  0321  01DF               	clrf	main@n^(0+128)
 10179  0322  01E0               	clrf	(main@n+1)^(0+128)
 10180  0323                     l6134:
 10181                           
 10182                           ;main.c: 1184: };main.c: 1186: if(modeFlag == 0){
 10183  0323  0020               	movlb	0	; select bank0
 10184  0324  0868               	movf	_modeFlag,w
 10185  0325  0469               	iorwf	_modeFlag+1,w
 10186  0326  1D03               	btfss	3,2
 10187  0327  2B29               	goto	u6471
 10188  0328  2B2A               	goto	u6470
 10189  0329                     u6471:
 10190  0329  2B2E               	goto	l6138
 10191  032A                     u6470:
 10192  032A                     l6136:
 10193                           
 10194                           ;main.c: 1187: checkFlags();
 10195  032A  3189  2196  3180   	fcall	_checkFlags
 10196                           
 10197                           ;main.c: 1188: } else if(modeFlag == 1){
 10198  032D  2AA5               	goto	l6110
 10199  032E                     l6138:
 10200  032E  0368               	decf	_modeFlag,w
 10201  032F  0469               	iorwf	_modeFlag+1,w
 10202  0330  1D03               	btfss	3,2
 10203  0331  2B33               	goto	u6481
 10204  0332  2B34               	goto	u6480
 10205  0333                     u6481:
 10206  0333  2B38               	goto	l6142
 10207  0334                     u6480:
 10208  0334                     l6140:
 10209                           
 10210                           ;main.c: 1189: editClock();
 10211  0334  3197  271E  3180   	fcall	_editClock
 10212                           
 10213                           ;main.c: 1190: } else if(modeFlag == 2){
 10214  0337  2AA5               	goto	l6110
 10215  0338                     l6142:
 10216  0338  3002               	movlw	2
 10217  0339  0668               	xorwf	_modeFlag,w
 10218  033A  0469               	iorwf	_modeFlag+1,w
 10219  033B  1D03               	btfss	3,2
 10220  033C  2B3E               	goto	u6491
 10221  033D  2B3F               	goto	u6490
 10222  033E                     u6491:
 10223  033E  2B43               	goto	l6146
 10224  033F                     u6490:
 10225  033F                     l6144:
 10226                           
 10227                           ;main.c: 1191: editTemp();
 10228  033F  3194  2430  3180   	fcall	_editTemp
 10229                           
 10230                           ;main.c: 1192: } else if(modeFlag == 3){
 10231  0342  2AA5               	goto	l6110
 10232  0343                     l6146:
 10233  0343  3003               	movlw	3
 10234  0344  0668               	xorwf	_modeFlag,w
 10235  0345  0469               	iorwf	_modeFlag+1,w
 10236  0346  1D03               	btfss	3,2
 10237  0347  2B49               	goto	u6501
 10238  0348  2B4A               	goto	u6500
 10239  0349                     u6501:
 10240  0349  2B4E               	goto	l6150
 10241  034A                     u6500:
 10242  034A                     l6148:
 10243                           
 10244                           ;main.c: 1193: editLum();
 10245  034A  3193  23FB  3180   	fcall	_editLum
 10246                           
 10247                           ;main.c: 1194: } else if(modeFlag == 4){
 10248  034D  2AA5               	goto	l6110
 10249  034E                     l6150:
 10250  034E  3004               	movlw	4
 10251  034F  0668               	xorwf	_modeFlag,w
 10252  0350  0469               	iorwf	_modeFlag+1,w
 10253  0351  1D03               	btfss	3,2
 10254  0352  2B54               	goto	u6511
 10255  0353  2B55               	goto	u6510
 10256  0354                     u6511:
 10257  0354  2B59               	goto	l6154
 10258  0355                     u6510:
 10259  0355                     l6152:
 10260                           
 10261                           ;main.c: 1195: toggleAlarms();
 10262  0355  3193  2333  3180   	fcall	_toggleAlarms
 10263                           
 10264                           ;main.c: 1196: } else if(modeFlag > 4){
 10265  0358  2AA5               	goto	l6110
 10266  0359                     l6154:
 10267  0359  0869               	movf	_modeFlag+1,w
 10268  035A  3A80               	xorlw	128
 10269  035B  00E4               	movwf	??_main
 10270  035C  3080               	movlw	128
 10271  035D  0264               	subwf	??_main,w
 10272  035E  1D03               	skipz
 10273  035F  2B62               	goto	u6525
 10274  0360  3005               	movlw	5
 10275  0361  0268               	subwf	_modeFlag,w
 10276  0362                     u6525:
 10277  0362  1C03               	skipc
 10278  0363  2B65               	goto	u6521
 10279  0364  2B66               	goto	u6520
 10280  0365                     u6521:
 10281  0365  2AA5               	goto	l1548
 10282  0366                     u6520:
 10283  0366                     l6156:
 10284                           
 10285                           ;main.c: 1197: modeFlag = 0;
 10286  0366  0020               	movlb	0	; select bank0
 10287  0367  01E8               	clrf	_modeFlag
 10288  0368  01E9               	clrf	_modeFlag+1
 10289  0369  2AA5               	goto	l6110
 10290  036A  3180  2852         	ljmp	start
 10291  036C                     __end_of_main:
 10292                           
 10293                           	psect	text1
 10294  1333                     __ptext1:	
 10295 ;; *************** function _toggleAlarms *****************
 10296 ;; Defined at:
 10297 ;;		line 777 in file "main.c"
 10298 ;; Parameters:    Size  Location     Type
 10299 ;;		None
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;		None
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  1    wreg      void 
 10304 ;; Registers used:
 10305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;Total ram usage:        1 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:   10
 10318 ;; This function calls:
 10319 ;;		_checkFlags
 10320 ;;		_update_menuLCD
 10321 ;; This function is called by:
 10322 ;;		_main
 10323 ;; This function uses a non-reentrant model
 10324 ;;
 10325                           
 10326                           
 10327                           ;psect for function _toggleAlarms
 10328  1333                     _toggleAlarms:
 10329  1333                     l1437:	
 10330                           ;incstack = 0
 10331                           ; Regs used in _toggleAlarms: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10332                           ;main.c: 779: while(1){
 10333                           
 10334                           
 10335                           ;main.c: 780: if(PORTCbits.RC5 == 0){
 10336  1333  0020               	movlb	0	; select bank0
 10337  1334  1A8E               	btfsc	14,5	;volatile
 10338  1335  2B37               	goto	u5701
 10339  1336  2B38               	goto	u5700
 10340  1337                     u5701:
 10341  1337  2B53               	goto	l5698
 10342  1338                     u5700:
 10343  1338                     l5690:
 10344                           
 10345                           ;main.c: 781: if(ALAF == 'A'){
 10346  1338  3041               	movlw	65
 10347  1339  066F               	xorwf	_ALAF,w
 10348  133A  1D03               	btfss	3,2
 10349  133B  2B3D               	goto	u5711
 10350  133C  2B3E               	goto	u5710
 10351  133D                     u5711:
 10352  133D  2B43               	goto	l5694
 10353  133E                     u5710:
 10354  133E                     l5692:
 10355                           
 10356                           ;main.c: 782: ALAF = 'a';
 10357  133E  3061               	movlw	97
 10358  133F  00E3               	movwf	??_toggleAlarms
 10359  1340  0863               	movf	??_toggleAlarms,w
 10360  1341  00EF               	movwf	_ALAF
 10361                           
 10362                           ;main.c: 783: } else {
 10363  1342  2B47               	goto	l1440
 10364  1343                     l5694:
 10365                           
 10366                           ;main.c: 784: ALAF = 'A';
 10367  1343  3041               	movlw	65
 10368  1344  00E3               	movwf	??_toggleAlarms
 10369  1345  0863               	movf	??_toggleAlarms,w
 10370  1346  00EF               	movwf	_ALAF
 10371  1347                     l1440:
 10372                           
 10373                           ;main.c: 785: };main.c: 786: _delay((unsigned long)((100)*(1000000/4000.0)));
 10374  1347  3021               	movlw	33
 10375  1348  0020               	movlb	0	; select bank0
 10376  1349  00E3               	movwf	??_toggleAlarms
 10377  134A  3076               	movlw	118
 10378  134B                     u6537:
 10379  134B  0B89               	decfsz	9,f
 10380  134C  2B4B               	goto	u6537
 10381  134D  0BE3               	decfsz	??_toggleAlarms,f
 10382  134E  2B4B               	goto	u6537
 10383  134F  0000               	nop
 10384  1350                     l5696:
 10385                           
 10386                           ;main.c: 787: update_menuLCD();
 10387  1350  3183  236C  3193   	fcall	_update_menuLCD
 10388  1353                     l5698:
 10389                           
 10390                           ;main.c: 788: };main.c: 789: checkFlags();
 10391  1353  3189  2196  3193   	fcall	_checkFlags
 10392  1356                     l5700:
 10393                           
 10394                           ;main.c: 790: if(modeFlag != 4){
 10395  1356  3004               	movlw	4
 10396  1357  0020               	movlb	0	; select bank0
 10397  1358  0668               	xorwf	_modeFlag,w
 10398  1359  0469               	iorwf	_modeFlag+1,w
 10399  135A  1903               	btfsc	3,2
 10400  135B  2B5D               	goto	u5721
 10401  135C  2B5E               	goto	u5720
 10402  135D                     u5721:
 10403  135D  2B33               	goto	l1437
 10404  135E                     u5720:
 10405  135E                     l5702:
 10406                           
 10407                           ;main.c: 791: modeFlag = 0;
 10408  135E  01E8               	clrf	_modeFlag
 10409  135F  01E9               	clrf	_modeFlag+1
 10410  1360                     l1444:	
 10411                           ;main.c: 792: break;
 10412                           
 10413  1360  0008               	return
 10414  1361                     __end_of_toggleAlarms:
 10415                           
 10416                           	psect	text2
 10417  1182                     __ptext2:	
 10418 ;; *************** function _memset *****************
 10419 ;; Defined at:
 10420 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 10421 ;; Parameters:    Size  Location     Type
 10422 ;;  p1              1    wreg     PTR void 
 10423 ;;		 -> main@buff(20), 
 10424 ;;  c               2    0[BANK0 ] int 
 10425 ;;  n               2    2[BANK0 ] unsigned int 
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  p1              1    6[BANK0 ] PTR void 
 10428 ;;		 -> main@buff(20), 
 10429 ;;  p               1    5[BANK0 ] PTR unsigned char 
 10430 ;;		 -> main@buff(20), 
 10431 ;; Return value:  Size  Location     Type
 10432 ;;                  1    wreg      PTR void 
 10433 ;; Registers used:
 10434 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10435 ;; Tracked objects:
 10436 ;;		On entry : 0/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10440 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;Total ram usage:        7 bytes
 10445 ;; Hardware stack levels used:    1
 10446 ;; Hardware stack levels required when called:    4
 10447 ;; This function calls:
 10448 ;;		Nothing
 10449 ;; This function is called by:
 10450 ;;		_main
 10451 ;; This function uses a non-reentrant model
 10452 ;;
 10453                           
 10454                           
 10455                           ;psect for function _memset
 10456  1182                     _memset:
 10457                           
 10458                           ;incstack = 0
 10459                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10460                           ;memset@p1 stored from wreg
 10461  1182  0020               	movlb	0	; select bank0
 10462  1183  00A6               	movwf	memset@p1
 10463  1184                     l5944:
 10464  1184  0826               	movf	memset@p1,w
 10465  1185  00A4               	movwf	??_memset
 10466  1186  0824               	movf	??_memset,w
 10467  1187  00A5               	movwf	memset@p
 10468  1188  2994               	goto	l5950
 10469  1189                     l5946:
 10470  1189  0820               	movf	memset@c,w
 10471  118A  00A4               	movwf	??_memset
 10472  118B  0825               	movf	memset@p,w
 10473  118C  0086               	movwf	6
 10474  118D  0187               	clrf	7
 10475  118E  0824               	movf	??_memset,w
 10476  118F  0081               	movwf	1
 10477  1190                     l5948:
 10478  1190  3001               	movlw	1
 10479  1191  00A4               	movwf	??_memset
 10480  1192  0824               	movf	??_memset,w
 10481  1193  07A5               	addwf	memset@p,f
 10482  1194                     l5950:
 10483  1194  3001               	movlw	1
 10484  1195  02A2               	subwf	memset@n,f
 10485  1196  3000               	movlw	0
 10486  1197  3BA3               	subwfb	memset@n+1,f
 10487  1198  0A22               	incf	memset@n,w
 10488  1199  1D03               	skipz
 10489  119A  299F               	goto	u6191
 10490  119B  0A23               	incf	memset@n+1,w
 10491  119C  1D03               	btfss	3,2
 10492  119D  299F               	goto	u6191
 10493  119E  29A0               	goto	u6190
 10494  119F                     u6191:
 10495  119F  2989               	goto	l5946
 10496  11A0                     u6190:
 10497  11A0                     l2236:
 10498  11A0  0008               	return
 10499  11A1                     __end_of_memset:
 10500                           
 10501                           	psect	text3
 10502  1FDA                     __ptext3:	
 10503 ;; *************** function _i2c1_driver_open *****************
 10504 ;; Defined at:
 10505 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;		None
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;		None
 10510 ;; Return value:  Size  Location     Type
 10511 ;;		None               void
 10512 ;; Registers used:
 10513 ;;		wreg, status,2
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/0
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;Total ram usage:        0 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    4
 10526 ;; This function calls:
 10527 ;;		Nothing
 10528 ;; This function is called by:
 10529 ;;		_main
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           
 10534                           ;psect for function _i2c1_driver_open
 10535  1FDA                     _i2c1_driver_open:
 10536  1FDA                     l5454:	
 10537                           ;incstack = 0
 10538                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
 10539                           
 10540                           
 10541                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
 10542  1FDA  0023               	movlb	3	; select bank3
 10543  1FDB  1A90               	btfsc	16,5	;volatile
 10544  1FDC  2FDE               	goto	u5201
 10545  1FDD  2FDF               	goto	u5200
 10546  1FDE                     u5201:
 10547  1FDE  2FE5               	goto	l253
 10548  1FDF                     u5200:
 10549  1FDF                     l5456:
 10550                           
 10551                           ;i2c1_driver.c: 86: {;i2c1_driver.c: 87: SSP1STAT = 0x00;
 10552  1FDF  018F               	clrf	15	;volatile
 10553  1FE0                     l5458:
 10554                           
 10555                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
 10556  1FE0  3028               	movlw	40
 10557  1FE1  0090               	movwf	16	;volatile
 10558  1FE2                     l5460:
 10559                           
 10560                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
 10561  1FE2  0191               	clrf	17	;volatile
 10562                           
 10563                           ;i2c1_driver.c: 90: SSP1ADD = 0x3;
 10564  1FE3  3003               	movlw	3
 10565  1FE4  008D               	movwf	13	;volatile
 10566  1FE5                     l253:
 10567  1FE5  0008               	return
 10568  1FE6                     __end_of_i2c1_driver_open:
 10569                           
 10570                           	psect	text4
 10571  07FB                     __ptext4:	
 10572 ;; *************** function _getch *****************
 10573 ;; Defined at:
 10574 ;;		line 171 in file "mcc_generated_files/eusart.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;		None
 10577 ;; Auto vars:     Size  Location     Type
 10578 ;;		None
 10579 ;; Return value:  Size  Location     Type
 10580 ;;                  1    wreg      unsigned char 
 10581 ;; Registers used:
 10582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10583 ;; Tracked objects:
 10584 ;;		On entry : 0/0
 10585 ;;		On exit  : 0/0
 10586 ;;		Unchanged: 0/0
 10587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;Total ram usage:        0 bytes
 10593 ;; Hardware stack levels used:    1
 10594 ;; Hardware stack levels required when called:    5
 10595 ;; This function calls:
 10596 ;;		_EUSART_Read
 10597 ;; This function is called by:
 10598 ;;		_main
 10599 ;; This function uses a non-reentrant model
 10600 ;;
 10601                           
 10602                           
 10603                           ;psect for function _getch
 10604  07FB                     _getch:
 10605  07FB                     l5482:	
 10606                           ;incstack = 0
 10607                           ; Regs used in _getch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10608                           
 10609                           
 10610                           ;eusart.c: 173: return EUSART_Read();
 10611  07FB  3192  22B7  3187   	fcall	_EUSART_Read
 10612  07FE                     l839:
 10613  07FE  0008               	return
 10614  07FF                     __end_of_getch:
 10615                           
 10616                           	psect	text5
 10617  12B7                     __ptext5:	
 10618 ;; *************** function _EUSART_Read *****************
 10619 ;; Defined at:
 10620 ;;		line 128 in file "mcc_generated_files/eusart.c"
 10621 ;; Parameters:    Size  Location     Type
 10622 ;;		None
 10623 ;; Auto vars:     Size  Location     Type
 10624 ;;  readValue       1    1[BANK0 ] unsigned char 
 10625 ;; Return value:  Size  Location     Type
 10626 ;;                  1    wreg      unsigned char 
 10627 ;; Registers used:
 10628 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10629 ;; Tracked objects:
 10630 ;;		On entry : 0/0
 10631 ;;		On exit  : 0/0
 10632 ;;		Unchanged: 0/0
 10633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;Total ram usage:        2 bytes
 10639 ;; Hardware stack levels used:    1
 10640 ;; Hardware stack levels required when called:    4
 10641 ;; This function calls:
 10642 ;;		Nothing
 10643 ;; This function is called by:
 10644 ;;		_getch
 10645 ;; This function uses a non-reentrant model
 10646 ;;
 10647                           
 10648                           
 10649                           ;psect for function _EUSART_Read
 10650  12B7                     _EUSART_Read:
 10651  12B7                     l5282:	
 10652                           ;incstack = 0
 10653                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 10654                           
 10655  12B7                     l5284:	
 10656                           ;eusart.c: 132: while(0 == eusartRxCount)
 10657                           
 10658  12B7  0021               	movlb	1	; select bank1
 10659  12B8  083C               	movf	_eusartRxCount^(0+128),w	;volatile
 10660  12B9  1903               	btfsc	3,2
 10661  12BA  2ABC               	goto	u4901
 10662  12BB  2ABD               	goto	u4900
 10663  12BC                     u4901:
 10664  12BC  2AB7               	goto	l5284
 10665  12BD                     u4900:
 10666  12BD                     l5286:
 10667                           
 10668                           ;eusart.c: 134: };eusart.c: 136: readValue = eusartRxBuffer[eusartRxTail++];
 10669  12BD  083D               	movf	_eusartRxTail^(0+128),w
 10670  12BE  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 10671  12BF  0086               	movwf	6
 10672  12C0  3002               	movlw	2	; select bank4/5
 10673  12C1  0087               	movwf	7
 10674  12C2  0801               	movf	1,w
 10675  12C3  0020               	movlb	0	; select bank0
 10676  12C4  00A0               	movwf	??_EUSART_Read
 10677  12C5  0820               	movf	??_EUSART_Read,w
 10678  12C6  00A1               	movwf	EUSART_Read@readValue
 10679  12C7                     l5288:
 10680  12C7  3001               	movlw	1
 10681  12C8  00A0               	movwf	??_EUSART_Read
 10682  12C9  0820               	movf	??_EUSART_Read,w
 10683  12CA  0021               	movlb	1	; select bank1
 10684  12CB  07BD               	addwf	_eusartRxTail^(0+128),f	;volatile
 10685  12CC                     l5290:
 10686                           
 10687                           ;eusart.c: 137: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 10688  12CC  3040               	movlw	64
 10689  12CD  023D               	subwf	_eusartRxTail^(0+128),w	;volatile
 10690  12CE  1C03               	skipc
 10691  12CF  2AD1               	goto	u4911
 10692  12D0  2AD2               	goto	u4910
 10693  12D1                     u4911:
 10694  12D1  2AD3               	goto	l5294
 10695  12D2                     u4910:
 10696  12D2                     l5292:
 10697                           
 10698                           ;eusart.c: 138: {;eusart.c: 139: eusartRxTail = 0;
 10699  12D2  01BD               	clrf	_eusartRxTail^(0+128)	;volatile
 10700  12D3                     l5294:
 10701                           
 10702                           ;eusart.c: 140: };eusart.c: 141: PIE3bits.RCIE = 0;
 10703  12D3  002E               	movlb	14	; select bank14
 10704  12D4  1299               	bcf	25,5	;volatile
 10705  12D5                     l5296:
 10706                           
 10707                           ;eusart.c: 142: eusartRxCount--;
 10708  12D5  3001               	movlw	1
 10709  12D6  0021               	movlb	1	; select bank1
 10710  12D7  02BC               	subwf	_eusartRxCount^(0+128),f	;volatile
 10711  12D8                     l5298:
 10712                           
 10713                           ;eusart.c: 143: PIE3bits.RCIE = 1;
 10714  12D8  002E               	movlb	14	; select bank14
 10715  12D9  1699               	bsf	25,5	;volatile
 10716  12DA                     l5300:
 10717                           
 10718                           ;eusart.c: 145: return readValue;
 10719  12DA  0020               	movlb	0	; select bank0
 10720  12DB  0821               	movf	EUSART_Read@readValue,w
 10721  12DC                     l827:
 10722  12DC  0008               	return
 10723  12DD                     __end_of_EUSART_Read:
 10724                           
 10725                           	psect	text6
 10726  1430                     __ptext6:	
 10727 ;; *************** function _editTemp *****************
 10728 ;; Defined at:
 10729 ;;		line 733 in file "main.c"
 10730 ;; Parameters:    Size  Location     Type
 10731 ;;		None
 10732 ;; Auto vars:     Size  Location     Type
 10733 ;;		None
 10734 ;; Return value:  Size  Location     Type
 10735 ;;                  1    wreg      void 
 10736 ;; Registers used:
 10737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10738 ;; Tracked objects:
 10739 ;;		On entry : 0/0
 10740 ;;		On exit  : 0/0
 10741 ;;		Unchanged: 0/0
 10742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;Total ram usage:        1 bytes
 10748 ;; Hardware stack levels used:    1
 10749 ;; Hardware stack levels required when called:   10
 10750 ;; This function calls:
 10751 ;;		_checkFlags
 10752 ;;		_update_menuLCD
 10753 ;; This function is called by:
 10754 ;;		_main
 10755 ;; This function uses a non-reentrant model
 10756 ;;
 10757                           
 10758                           
 10759                           ;psect for function _editTemp
 10760  1430                     _editTemp:
 10761  1430                     l1415:	
 10762                           ;incstack = 0
 10763                           ; Regs used in _editTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10764                           ;main.c: 734: while(1){
 10765                           
 10766                           
 10767                           ;main.c: 735: if(PORTCbits.RC5 == 0){
 10768  1430  0020               	movlb	0	; select bank0
 10769  1431  1A8E               	btfsc	14,5	;volatile
 10770  1432  2C34               	goto	u5621
 10771  1433  2C35               	goto	u5620
 10772  1434                     u5621:
 10773  1434  2C57               	goto	l5664
 10774  1435                     u5620:
 10775  1435                     l5650:
 10776                           
 10777                           ;main.c: 736: if(editingTempAlarm == 0){
 10778  1435  0021               	movlb	1	; select bank1
 10779  1436  0839               	movf	_editingTempAlarm^(0+128),w
 10780  1437  1D03               	btfss	3,2
 10781  1438  2C3A               	goto	u5631
 10782  1439  2C3B               	goto	u5630
 10783  143A                     u5631:
 10784  143A  2C3E               	goto	l5654
 10785  143B                     u5630:
 10786  143B                     l5652:
 10787                           
 10788                           ;main.c: 737: editingTempAlarm = 1;
 10789  143B  01B9               	clrf	_editingTempAlarm^(0+128)
 10790  143C  0AB9               	incf	_editingTempAlarm^(0+128),f
 10791                           
 10792                           ;main.c: 738: } else {
 10793  143D  2C4B               	goto	l5660
 10794  143E                     l5654:
 10795                           
 10796                           ;main.c: 739: tempAlarm.alarmTemp++;
 10797  143E  3001               	movlw	1
 10798  143F  0020               	movlb	0	; select bank0
 10799  1440  00E3               	movwf	??_editTemp
 10800  1441  0863               	movf	??_editTemp,w
 10801  1442  0021               	movlb	1	; select bank1
 10802  1443  07A7               	addwf	_tempAlarm^(0+128),f
 10803  1444                     l5656:
 10804                           
 10805                           ;main.c: 740: if(tempAlarm.alarmTemp > 50){
 10806  1444  3033               	movlw	51
 10807  1445  0227               	subwf	_tempAlarm^(0+128),w
 10808  1446  1C03               	skipc
 10809  1447  2C49               	goto	u5641
 10810  1448  2C4A               	goto	u5640
 10811  1449                     u5641:
 10812  1449  2C4B               	goto	l5660
 10813  144A                     u5640:
 10814  144A                     l5658:
 10815                           
 10816                           ;main.c: 741: tempAlarm.alarmTemp = 0;
 10817  144A  01A7               	clrf	_tempAlarm^(0+128)
 10818  144B                     l5660:
 10819                           
 10820                           ;main.c: 742: };main.c: 743: };main.c: 744: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10821  144B  3021               	movlw	33
 10822  144C  0020               	movlb	0	; select bank0
 10823  144D  00E3               	movwf	??_editTemp
 10824  144E  3076               	movlw	118
 10825  144F                     u6547:
 10826  144F  0B89               	decfsz	9,f
 10827  1450  2C4F               	goto	u6547
 10828  1451  0BE3               	decfsz	??_editTemp,f
 10829  1452  2C4F               	goto	u6547
 10830  1453  0000               	nop
 10831  1454                     l5662:
 10832                           
 10833                           ;main.c: 745: update_menuLCD();
 10834  1454  3183  236C  3194   	fcall	_update_menuLCD
 10835  1457                     l5664:
 10836                           
 10837                           ;main.c: 746: };main.c: 747: checkFlags();
 10838  1457  3189  2196  3194   	fcall	_checkFlags
 10839  145A                     l5666:
 10840                           
 10841                           ;main.c: 748: if(modeFlag != 2){
 10842  145A  3002               	movlw	2
 10843  145B  0020               	movlb	0	; select bank0
 10844  145C  0668               	xorwf	_modeFlag,w
 10845  145D  0469               	iorwf	_modeFlag+1,w
 10846  145E  1903               	btfsc	3,2
 10847  145F  2C61               	goto	u5651
 10848  1460  2C62               	goto	u5650
 10849  1461                     u5651:
 10850  1461  2C30               	goto	l1415
 10851  1462                     u5650:
 10852  1462                     l5668:
 10853                           
 10854                           ;main.c: 749: editingTempAlarm = 0;
 10855  1462  0021               	movlb	1	; select bank1
 10856  1463  01B9               	clrf	_editingTempAlarm^(0+128)
 10857  1464                     l1423:	
 10858                           ;main.c: 750: break;
 10859                           
 10860  1464  0008               	return
 10861  1465                     __end_of_editTemp:
 10862                           
 10863                           	psect	text7
 10864  13FB                     __ptext7:	
 10865 ;; *************** function _editLum *****************
 10866 ;; Defined at:
 10867 ;;		line 755 in file "main.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;		None
 10870 ;; Auto vars:     Size  Location     Type
 10871 ;;		None
 10872 ;; Return value:  Size  Location     Type
 10873 ;;                  1    wreg      void 
 10874 ;; Registers used:
 10875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10876 ;; Tracked objects:
 10877 ;;		On entry : 0/0
 10878 ;;		On exit  : 0/0
 10879 ;;		Unchanged: 0/0
 10880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;Total ram usage:        1 bytes
 10886 ;; Hardware stack levels used:    1
 10887 ;; Hardware stack levels required when called:   10
 10888 ;; This function calls:
 10889 ;;		_checkFlags
 10890 ;;		_update_menuLCD
 10891 ;; This function is called by:
 10892 ;;		_main
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           
 10897                           ;psect for function _editLum
 10898  13FB                     _editLum:
 10899  13FB                     l1426:	
 10900                           ;incstack = 0
 10901                           ; Regs used in _editLum: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10902                           ;main.c: 756: while(1){
 10903                           
 10904                           
 10905                           ;main.c: 757: if(PORTCbits.RC5 == 0){
 10906  13FB  0020               	movlb	0	; select bank0
 10907  13FC  1A8E               	btfsc	14,5	;volatile
 10908  13FD  2BFF               	goto	u5661
 10909  13FE  2C00               	goto	u5660
 10910  13FF                     u5661:
 10911  13FF  2C22               	goto	l5684
 10912  1400                     u5660:
 10913  1400                     l5670:
 10914                           
 10915                           ;main.c: 758: if(editingLumAlarm == 0){
 10916  1400  0021               	movlb	1	; select bank1
 10917  1401  0838               	movf	_editingLumAlarm^(0+128),w
 10918  1402  1D03               	btfss	3,2
 10919  1403  2C05               	goto	u5671
 10920  1404  2C06               	goto	u5670
 10921  1405                     u5671:
 10922  1405  2C09               	goto	l5674
 10923  1406                     u5670:
 10924  1406                     l5672:
 10925                           
 10926                           ;main.c: 759: editingLumAlarm = 1;
 10927  1406  01B8               	clrf	_editingLumAlarm^(0+128)
 10928  1407  0AB8               	incf	_editingLumAlarm^(0+128),f
 10929                           
 10930                           ;main.c: 760: } else {
 10931  1408  2C16               	goto	l5680
 10932  1409                     l5674:
 10933                           
 10934                           ;main.c: 761: lumAlarm.alarmLum++;
 10935  1409  3001               	movlw	1
 10936  140A  0020               	movlb	0	; select bank0
 10937  140B  00E3               	movwf	??_editLum
 10938  140C  0863               	movf	??_editLum,w
 10939  140D  0021               	movlb	1	; select bank1
 10940  140E  07A4               	addwf	_lumAlarm^(0+128),f
 10941  140F                     l5676:
 10942                           
 10943                           ;main.c: 762: if(lumAlarm.alarmLum > 7){
 10944  140F  3008               	movlw	8
 10945  1410  0224               	subwf	_lumAlarm^(0+128),w
 10946  1411  1C03               	skipc
 10947  1412  2C14               	goto	u5681
 10948  1413  2C15               	goto	u5680
 10949  1414                     u5681:
 10950  1414  2C16               	goto	l5680
 10951  1415                     u5680:
 10952  1415                     l5678:
 10953                           
 10954                           ;main.c: 763: lumAlarm.alarmLum = 0;
 10955  1415  01A4               	clrf	_lumAlarm^(0+128)
 10956  1416                     l5680:
 10957                           
 10958                           ;main.c: 764: };main.c: 765: };main.c: 766: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10959  1416  3021               	movlw	33
 10960  1417  0020               	movlb	0	; select bank0
 10961  1418  00E3               	movwf	??_editLum
 10962  1419  3076               	movlw	118
 10963  141A                     u6557:
 10964  141A  0B89               	decfsz	9,f
 10965  141B  2C1A               	goto	u6557
 10966  141C  0BE3               	decfsz	??_editLum,f
 10967  141D  2C1A               	goto	u6557
 10968  141E  0000               	nop
 10969  141F                     l5682:
 10970                           
 10971                           ;main.c: 767: update_menuLCD();
 10972  141F  3183  236C  3193   	fcall	_update_menuLCD
 10973  1422                     l5684:
 10974                           
 10975                           ;main.c: 768: };main.c: 769: checkFlags();
 10976  1422  3189  2196  3193   	fcall	_checkFlags
 10977  1425                     l5686:
 10978                           
 10979                           ;main.c: 770: if(modeFlag != 3){
 10980  1425  3003               	movlw	3
 10981  1426  0020               	movlb	0	; select bank0
 10982  1427  0668               	xorwf	_modeFlag,w
 10983  1428  0469               	iorwf	_modeFlag+1,w
 10984  1429  1903               	btfsc	3,2
 10985  142A  2C2C               	goto	u5691
 10986  142B  2C2D               	goto	u5690
 10987  142C                     u5691:
 10988  142C  2BFB               	goto	l1426
 10989  142D                     u5690:
 10990  142D                     l5688:
 10991                           
 10992                           ;main.c: 771: editingLumAlarm = 0;
 10993  142D  0021               	movlb	1	; select bank1
 10994  142E  01B8               	clrf	_editingLumAlarm^(0+128)
 10995  142F                     l1434:	
 10996                           ;main.c: 772: break;
 10997                           
 10998  142F  0008               	return
 10999  1430                     __end_of_editLum:
 11000                           
 11001                           	psect	text8
 11002  171E                     __ptext8:	
 11003 ;; *************** function _editClock *****************
 11004 ;; Defined at:
 11005 ;;		line 695 in file "main.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;		None
 11008 ;; Auto vars:     Size  Location     Type
 11009 ;;		None
 11010 ;; Return value:  Size  Location     Type
 11011 ;;                  1    wreg      void 
 11012 ;; Registers used:
 11013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11014 ;; Tracked objects:
 11015 ;;		On entry : 0/0
 11016 ;;		On exit  : 0/0
 11017 ;;		Unchanged: 0/0
 11018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11023 ;;Total ram usage:        1 bytes
 11024 ;; Hardware stack levels used:    1
 11025 ;; Hardware stack levels required when called:   10
 11026 ;; This function calls:
 11027 ;;		_checkFlags
 11028 ;;		_update_menuLCD
 11029 ;; This function is called by:
 11030 ;;		_main
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           
 11035                           ;psect for function _editClock
 11036  171E                     _editClock:
 11037  171E                     l1394:	
 11038                           ;incstack = 0
 11039                           ; Regs used in _editClock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11040                           ;main.c: 697: while(1){
 11041                           
 11042                           
 11043                           ;main.c: 698: if(PORTCbits.RC5 == 0){
 11044  171E  0020               	movlb	0	; select bank0
 11045  171F  1A8E               	btfsc	14,5	;volatile
 11046  1720  2F22               	goto	u5531
 11047  1721  2F23               	goto	u5530
 11048  1722                     u5531:
 11049  1722  2F7E               	goto	l5644
 11050  1723                     u5530:
 11051  1723                     l5612:
 11052                           
 11053                           ;main.c: 699: if(editingClockAlarm == 0){
 11054  1723  087B               	movf	_editingClockAlarm,w
 11055  1724  047C               	iorwf	_editingClockAlarm+1,w
 11056  1725  1D03               	btfss	3,2
 11057  1726  2F28               	goto	u5541
 11058  1727  2F29               	goto	u5540
 11059  1728                     u5541:
 11060  1728  2F2E               	goto	l5616
 11061  1729                     u5540:
 11062  1729                     l5614:
 11063                           
 11064                           ;main.c: 700: editingClockAlarm = 1;
 11065  1729  3001               	movlw	1
 11066  172A  00FB               	movwf	_editingClockAlarm
 11067  172B  3000               	movlw	0
 11068  172C  00FC               	movwf	_editingClockAlarm+1
 11069                           
 11070                           ;main.c: 702: } else if(editingClockAlarm == 1){
 11071  172D  2F72               	goto	l5640
 11072  172E                     l5616:
 11073  172E  037B               	decf	_editingClockAlarm,w
 11074  172F  047C               	iorwf	_editingClockAlarm+1,w
 11075  1730  1D03               	btfss	3,2
 11076  1731  2F33               	goto	u5551
 11077  1732  2F34               	goto	u5550
 11078  1733                     u5551:
 11079  1733  2F44               	goto	l5624
 11080  1734                     u5550:
 11081  1734                     l5618:
 11082                           
 11083                           ;main.c: 703: if(clkAlarm.alarmVal.h >= 23){
 11084  1734  3017               	movlw	23
 11085  1735  0021               	movlb	1	; select bank1
 11086  1736  0220               	subwf	_clkAlarm^(0+128),w
 11087  1737  1C03               	skipc
 11088  1738  2F3A               	goto	u5561
 11089  1739  2F3B               	goto	u5560
 11090  173A                     u5561:
 11091  173A  2F3D               	goto	l5622
 11092  173B                     u5560:
 11093  173B                     l5620:
 11094                           
 11095                           ;main.c: 704: clkAlarm.alarmVal.h = 0;
 11096  173B  01A0               	clrf	_clkAlarm^(0+128)
 11097                           
 11098                           ;main.c: 705: } else{
 11099  173C  2F72               	goto	l5640
 11100  173D                     l5622:
 11101                           
 11102                           ;main.c: 706: clkAlarm.alarmVal.h++;
 11103  173D  3001               	movlw	1
 11104  173E  0020               	movlb	0	; select bank0
 11105  173F  00E3               	movwf	??_editClock
 11106  1740  0863               	movf	??_editClock,w
 11107  1741  0021               	movlb	1	; select bank1
 11108  1742  07A0               	addwf	_clkAlarm^(0+128),f
 11109  1743  2F72               	goto	l5640
 11110  1744                     l5624:
 11111  1744  3002               	movlw	2
 11112  1745  067B               	xorwf	_editingClockAlarm,w
 11113  1746  047C               	iorwf	_editingClockAlarm+1,w
 11114  1747  1D03               	btfss	3,2
 11115  1748  2F4A               	goto	u5571
 11116  1749  2F4B               	goto	u5570
 11117  174A                     u5571:
 11118  174A  2F5B               	goto	l5632
 11119  174B                     u5570:
 11120  174B                     l5626:
 11121                           
 11122                           ;main.c: 709: if(clkAlarm.alarmVal.m == 59){
 11123  174B  303B               	movlw	59
 11124  174C  0021               	movlb	1	; select bank1
 11125  174D  0621               	xorwf	(_clkAlarm^(0+128)+1),w
 11126  174E  1D03               	btfss	3,2
 11127  174F  2F51               	goto	u5581
 11128  1750  2F52               	goto	u5580
 11129  1751                     u5581:
 11130  1751  2F54               	goto	l5630
 11131  1752                     u5580:
 11132  1752                     l5628:
 11133                           
 11134                           ;main.c: 710: clkAlarm.alarmVal.m = 0;
 11135  1752  01A1               	clrf	(_clkAlarm^(0+128)+1)
 11136                           
 11137                           ;main.c: 711: } else{
 11138  1753  2F72               	goto	l5640
 11139  1754                     l5630:
 11140                           
 11141                           ;main.c: 712: clkAlarm.alarmVal.m++;
 11142  1754  3001               	movlw	1
 11143  1755  0020               	movlb	0	; select bank0
 11144  1756  00E3               	movwf	??_editClock
 11145  1757  0863               	movf	??_editClock,w
 11146  1758  0021               	movlb	1	; select bank1
 11147  1759  07A1               	addwf	(_clkAlarm^(0+128)+1),f
 11148  175A  2F72               	goto	l5640
 11149  175B                     l5632:
 11150  175B  3003               	movlw	3
 11151  175C  067B               	xorwf	_editingClockAlarm,w
 11152  175D  047C               	iorwf	_editingClockAlarm+1,w
 11153  175E  1D03               	btfss	3,2
 11154  175F  2F61               	goto	u5591
 11155  1760  2F62               	goto	u5590
 11156  1761                     u5591:
 11157  1761  2F72               	goto	l1401
 11158  1762                     u5590:
 11159  1762                     l5634:
 11160                           
 11161                           ;main.c: 715: if(clkAlarm.alarmVal.s == 59){
 11162  1762  303B               	movlw	59
 11163  1763  0021               	movlb	1	; select bank1
 11164  1764  0622               	xorwf	(_clkAlarm^(0+128)+2),w
 11165  1765  1D03               	btfss	3,2
 11166  1766  2F68               	goto	u5601
 11167  1767  2F69               	goto	u5600
 11168  1768                     u5601:
 11169  1768  2F6B               	goto	l5638
 11170  1769                     u5600:
 11171  1769                     l5636:
 11172                           
 11173                           ;main.c: 716: clkAlarm.alarmVal.s = 0;
 11174  1769  01A2               	clrf	(_clkAlarm^(0+128)+2)
 11175                           
 11176                           ;main.c: 717: } else{
 11177  176A  2F72               	goto	l5640
 11178  176B                     l5638:
 11179                           
 11180                           ;main.c: 718: clkAlarm.alarmVal.s++;
 11181  176B  3001               	movlw	1
 11182  176C  0020               	movlb	0	; select bank0
 11183  176D  00E3               	movwf	??_editClock
 11184  176E  0863               	movf	??_editClock,w
 11185  176F  0021               	movlb	1	; select bank1
 11186  1770  07A2               	addwf	(_clkAlarm^(0+128)+2),f
 11187  1771  2F72               	goto	l5640
 11188  1772                     l1401:
 11189  1772                     l5640:
 11190                           
 11191                           ;main.c: 719: };main.c: 720: };main.c: 721: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 11192  1772  3021               	movlw	33
 11193  1773  0020               	movlb	0	; select bank0
 11194  1774  00E3               	movwf	??_editClock
 11195  1775  3076               	movlw	118
 11196  1776                     u6567:
 11197  1776  0B89               	decfsz	9,f
 11198  1777  2F76               	goto	u6567
 11199  1778  0BE3               	decfsz	??_editClock,f
 11200  1779  2F76               	goto	u6567
 11201  177A  0000               	nop
 11202  177B                     l5642:
 11203                           
 11204                           ;main.c: 722: update_menuLCD();
 11205  177B  3183  236C  3197   	fcall	_update_menuLCD
 11206  177E                     l5644:
 11207                           
 11208                           ;main.c: 723: };main.c: 724: checkFlags();
 11209  177E  3189  2196  3197   	fcall	_checkFlags
 11210  1781                     l5646:
 11211                           
 11212                           ;main.c: 725: if(modeFlag != 1){
 11213  1781  0020               	movlb	0	; select bank0
 11214  1782  0368               	decf	_modeFlag,w
 11215  1783  0469               	iorwf	_modeFlag+1,w
 11216  1784  1903               	btfsc	3,2
 11217  1785  2F87               	goto	u5611
 11218  1786  2F88               	goto	u5610
 11219  1787                     u5611:
 11220  1787  2F1E               	goto	l1394
 11221  1788                     u5610:
 11222  1788                     l5648:
 11223                           
 11224                           ;main.c: 726: editingClockAlarm = 0;
 11225  1788  01FB               	clrf	_editingClockAlarm
 11226  1789  01FC               	clrf	_editingClockAlarm+1
 11227  178A                     l1412:	
 11228                           ;main.c: 727: break;
 11229                           
 11230  178A  0008               	return
 11231  178B                     __end_of_editClock:
 11232                           
 11233                           	psect	text9
 11234  0996                     __ptext9:	
 11235 ;; *************** function _checkFlags *****************
 11236 ;; Defined at:
 11237 ;;		line 644 in file "main.c"
 11238 ;; Parameters:    Size  Location     Type
 11239 ;;		None
 11240 ;; Auto vars:     Size  Location     Type
 11241 ;;  buff            7   60[BANK0 ] unsigned char [7]
 11242 ;; Return value:  Size  Location     Type
 11243 ;;                  1    wreg      void 
 11244 ;; Registers used:
 11245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11246 ;; Tracked objects:
 11247 ;;		On entry : 0/0
 11248 ;;		On exit  : 0/0
 11249 ;;		Unchanged: 0/0
 11250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11254 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11255 ;;Total ram usage:        8 bytes
 11256 ;; Hardware stack levels used:    1
 11257 ;; Hardware stack levels required when called:    9
 11258 ;; This function calls:
 11259 ;;		_PWM6_LoadDutyValue
 11260 ;;		_PWM_Output_D4_Enable
 11261 ;;		_S1button
 11262 ;;		_TMR2_StartTimer
 11263 ;;		_monitoring_TEMP_LUM
 11264 ;;		_sendMessage
 11265 ;;		_update_menuLCD
 11266 ;;		_wirteEEPROMinit
 11267 ;; This function is called by:
 11268 ;;		_editClock
 11269 ;;		_editTemp
 11270 ;;		_editLum
 11271 ;;		_toggleAlarms
 11272 ;;		_main
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           
 11277                           ;psect for function _checkFlags
 11278  0996                     _checkFlags:
 11279  0996                     l5366:	
 11280                           ;incstack = 0
 11281                           ; Regs used in _checkFlags: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11282                           
 11283                           
 11284                           ;main.c: 645: if(writeEEPROM_flag){
 11285  0996  0021               	movlb	1	; select bank1
 11286  0997  0834               	movf	_writeEEPROM_flag^(0+128),w
 11287  0998  1903               	btfsc	3,2
 11288  0999  299B               	goto	u5101
 11289  099A  299C               	goto	u5100
 11290  099B                     u5101:
 11291  099B  29A1               	goto	l5372
 11292  099C                     u5100:
 11293  099C                     l5368:
 11294                           
 11295                           ;main.c: 646: wirteEEPROMinit();
 11296  099C  3187  273F  3189   	fcall	_wirteEEPROMinit
 11297  099F                     l5370:
 11298                           
 11299                           ;main.c: 647: writeEEPROM_flag = 0;
 11300  099F  0021               	movlb	1	; select bank1
 11301  09A0  01B4               	clrf	_writeEEPROM_flag^(0+128)
 11302  09A1                     l5372:
 11303                           
 11304                           ;main.c: 648: };main.c: 649: if(flagS1pushed){
 11305  09A1  0837               	movf	_flagS1pushed^(0+128),w
 11306  09A2  1903               	btfsc	3,2
 11307  09A3  29A5               	goto	u5111
 11308  09A4  29A6               	goto	u5110
 11309  09A5                     u5111:
 11310  09A5  29B0               	goto	l5382
 11311  09A6                     u5110:
 11312  09A6                     l5374:
 11313                           
 11314                           ;main.c: 650: S1button();
 11315  09A6  3196  2665  3189   	fcall	_S1button
 11316  09A9                     l5376:
 11317                           
 11318                           ;main.c: 651: flagS1pushed=0;
 11319  09A9  0021               	movlb	1	; select bank1
 11320  09AA  01B7               	clrf	_flagS1pushed^(0+128)
 11321  09AB                     l5378:
 11322                           
 11323                           ;main.c: 652: update_menuLCD();
 11324  09AB  3183  236C  3189   	fcall	_update_menuLCD
 11325  09AE                     l5380:
 11326                           
 11327                           ;main.c: 653: updateLCD=0;
 11328  09AE  0021               	movlb	1	; select bank1
 11329  09AF  01E8               	clrf	_updateLCD^(0+128)
 11330  09B0                     l5382:
 11331                           
 11332                           ;main.c: 654: };main.c: 655: if(monitor_TEMP_LUM){
 11333  09B0  0836               	movf	_monitor_TEMP_LUM^(0+128),w
 11334  09B1  1903               	btfsc	3,2
 11335  09B2  29B4               	goto	u5121
 11336  09B3  29B5               	goto	u5120
 11337  09B4                     u5121:
 11338  09B4  29BA               	goto	l5388
 11339  09B5                     u5120:
 11340  09B5                     l5384:
 11341                           
 11342                           ;main.c: 656: monitoring_TEMP_LUM();
 11343  09B5  318E  267A  3189   	fcall	_monitoring_TEMP_LUM
 11344  09B8                     l5386:
 11345                           
 11346                           ;main.c: 657: monitor_TEMP_LUM = 0;
 11347  09B8  0021               	movlb	1	; select bank1
 11348  09B9  01B6               	clrf	_monitor_TEMP_LUM^(0+128)
 11349  09BA                     l5388:
 11350                           
 11351                           ;main.c: 658: };main.c: 659: if(updateLCD){
 11352  09BA  0868               	movf	_updateLCD^(0+128),w
 11353  09BB  1903               	btfsc	3,2
 11354  09BC  29BE               	goto	u5131
 11355  09BD  29BF               	goto	u5130
 11356  09BE                     u5131:
 11357  09BE  29C4               	goto	l5394
 11358  09BF                     u5130:
 11359  09BF                     l5390:
 11360                           
 11361                           ;main.c: 660: update_menuLCD();
 11362  09BF  3183  236C  3189   	fcall	_update_menuLCD
 11363  09C2                     l5392:
 11364                           
 11365                           ;main.c: 661: updateLCD=0;
 11366  09C2  0021               	movlb	1	; select bank1
 11367  09C3  01E8               	clrf	_updateLCD^(0+128)
 11368  09C4                     l5394:
 11369                           
 11370                           ;main.c: 662: };main.c: 663: if(bufHalfFull && !sentMessageBufHalfFull){
 11371  09C4  0831               	movf	_bufHalfFull^(0+128),w
 11372  09C5  1903               	btfsc	3,2
 11373  09C6  29C8               	goto	u5141
 11374  09C7  29C9               	goto	u5140
 11375  09C8                     u5141:
 11376  09C8  29F9               	goto	l5404
 11377  09C9                     u5140:
 11378  09C9                     l5396:
 11379  09C9  0830               	movf	_sentMessageBufHalfFull^(0+128),w
 11380  09CA  1D03               	btfss	3,2
 11381  09CB  29CD               	goto	u5151
 11382  09CC  29CE               	goto	u5150
 11383  09CD                     u5151:
 11384  09CD  29F9               	goto	l5404
 11385  09CE                     u5150:
 11386  09CE                     l5398:
 11387                           
 11388                           ;main.c: 665: uint8_t buff[7];;main.c: 666: buff[0] = (uint8_t)0xFD;
 11389  09CE  30FD               	movlw	253
 11390  09CF  0020               	movlb	0	; select bank0
 11391  09D0  00DB               	movwf	??_checkFlags
 11392  09D1  085B               	movf	??_checkFlags,w
 11393  09D2  00DC               	movwf	checkFlags@buff
 11394                           
 11395                           ;main.c: 667: buff[1] = (uint8_t)0XCD;
 11396  09D3  30CD               	movlw	205
 11397  09D4  00DB               	movwf	??_checkFlags
 11398  09D5  085B               	movf	??_checkFlags,w
 11399  09D6  00DD               	movwf	checkFlags@buff+1
 11400                           
 11401                           ;main.c: 668: buff[2] = NREG;
 11402  09D7  087D               	movf	_NREG,w
 11403  09D8  00DB               	movwf	??_checkFlags
 11404  09D9  085B               	movf	??_checkFlags,w
 11405  09DA  00DE               	movwf	checkFlags@buff+2
 11406                           
 11407                           ;main.c: 669: buff[3] = nr;
 11408  09DB  086A               	movf	_nr,w
 11409  09DC  00DB               	movwf	??_checkFlags
 11410  09DD  085B               	movf	??_checkFlags,w
 11411  09DE  00DF               	movwf	checkFlags@buff+3
 11412                           
 11413                           ;main.c: 670: buff[4] = iread;
 11414  09DF  086C               	movf	_iread,w
 11415  09E0  00DB               	movwf	??_checkFlags
 11416  09E1  085B               	movf	??_checkFlags,w
 11417  09E2  00E0               	movwf	checkFlags@buff+4
 11418                           
 11419                           ;main.c: 671: buff[5] = iwrite;
 11420  09E3  086B               	movf	_iwrite,w
 11421  09E4  00DB               	movwf	??_checkFlags
 11422  09E5  085B               	movf	??_checkFlags,w
 11423  09E6  00E1               	movwf	checkFlags@buff+5
 11424                           
 11425                           ;main.c: 672: buff[6] = (uint8_t)0xFE;
 11426  09E7  30FE               	movlw	254
 11427  09E8  00DB               	movwf	??_checkFlags
 11428  09E9  085B               	movf	??_checkFlags,w
 11429  09EA  00E2               	movwf	checkFlags@buff+6
 11430  09EB                     l5400:
 11431                           
 11432                           ;main.c: 673: sendMessage(7,buff);
 11433  09EB  3007               	movlw	7
 11434  09EC  00A3               	movwf	sendMessage@num
 11435  09ED  3000               	movlw	0
 11436  09EE  00A4               	movwf	sendMessage@num+1
 11437  09EF  305C               	movlw	(low (checkFlags@buff| 0))& (0+255)
 11438  09F0  00DB               	movwf	??_checkFlags
 11439  09F1  085B               	movf	??_checkFlags,w
 11440  09F2  00A5               	movwf	sendMessage@buffer
 11441  09F3  3192  2226  3189   	fcall	_sendMessage
 11442  09F6                     l5402:
 11443                           
 11444                           ;main.c: 675: sentMessageBufHalfFull = 1;
 11445  09F6  0021               	movlb	1	; select bank1
 11446  09F7  01B0               	clrf	_sentMessageBufHalfFull^(0+128)
 11447  09F8  0AB0               	incf	_sentMessageBufHalfFull^(0+128),f
 11448  09F9                     l5404:
 11449                           
 11450                           ;main.c: 676: };main.c: 677: if(!bufHalfFull){
 11451  09F9  0831               	movf	_bufHalfFull^(0+128),w
 11452  09FA  1D03               	btfss	3,2
 11453  09FB  29FD               	goto	u5161
 11454  09FC  29FE               	goto	u5160
 11455  09FD                     u5161:
 11456  09FD  29FF               	goto	l5408
 11457  09FE                     u5160:
 11458  09FE                     l5406:
 11459                           
 11460                           ;main.c: 678: sentMessageBufHalfFull = 0;
 11461  09FE  01B0               	clrf	_sentMessageBufHalfFull^(0+128)
 11462  09FF                     l5408:
 11463                           
 11464                           ;main.c: 679: };main.c: 680: if(PWM_on){
 11465  09FF  083A               	movf	_PWM_on^(0+128),w
 11466  0A00  1903               	btfsc	3,2
 11467  0A01  2A03               	goto	u5171
 11468  0A02  2A04               	goto	u5170
 11469  0A03                     u5171:
 11470  0A03  2A36               	goto	l1391
 11471  0A04                     u5170:
 11472  0A04                     l5410:
 11473                           
 11474                           ;main.c: 681: if(PWM6EN==0){
 11475  0A04  0027               	movlb	7	; select bank7
 11476  0A05  1B8E               	btfsc	14,7	;volatile
 11477  0A06  2A08               	goto	u5181
 11478  0A07  2A09               	goto	u5180
 11479  0A08                     u5181:
 11480  0A08  2A0F               	goto	l5414
 11481  0A09                     u5180:
 11482  0A09                     l5412:
 11483                           
 11484                           ;main.c: 682: TMR2_StartTimer();
 11485  0A09  319F  2768  3189   	fcall	_TMR2_StartTimer
 11486                           
 11487                           ;main.c: 683: PWM_Output_D4_Enable();
 11488  0A0C  319F  275C  3189   	fcall	_PWM_Output_D4_Enable
 11489  0A0F                     l5414:
 11490                           
 11491                           ;main.c: 684: };main.c: 685: if(dimingLed <= 1023){
 11492  0A0F  0021               	movlb	1	; select bank1
 11493  0A10  082B               	movf	(_dimingLed+1)^(0+128),w
 11494  0A11  3A80               	xorlw	128
 11495  0A12  0020               	movlb	0	; select bank0
 11496  0A13  00DB               	movwf	??_checkFlags
 11497  0A14  3084               	movlw	132
 11498  0A15  025B               	subwf	??_checkFlags,w
 11499  0A16  1D03               	skipz
 11500  0A17  2A1B               	goto	u5195
 11501  0A18  3000               	movlw	0
 11502  0A19  0021               	movlb	1	; select bank1
 11503  0A1A  022A               	subwf	_dimingLed^(0+128),w
 11504  0A1B                     u5195:
 11505  0A1B  1803               	skipnc
 11506  0A1C  2A1E               	goto	u5191
 11507  0A1D  2A1F               	goto	u5190
 11508  0A1E                     u5191:
 11509  0A1E  2A25               	goto	l5418
 11510  0A1F                     u5190:
 11511  0A1F                     l5416:
 11512                           
 11513                           ;main.c: 686: dimingLed += 1;
 11514  0A1F  3001               	movlw	1
 11515  0A20  0021               	movlb	1	; select bank1
 11516  0A21  07AA               	addwf	_dimingLed^(0+128),f
 11517  0A22  3000               	movlw	0
 11518  0A23  3DAB               	addwfc	(_dimingLed+1)^(0+128),f
 11519                           
 11520                           ;main.c: 687: } else{
 11521  0A24  2A28               	goto	l5420
 11522  0A25                     l5418:
 11523                           
 11524                           ;main.c: 688: dimingLed = 0;
 11525  0A25  0021               	movlb	1	; select bank1
 11526  0A26  01AA               	clrf	_dimingLed^(0+128)
 11527  0A27  01AB               	clrf	(_dimingLed+1)^(0+128)
 11528  0A28                     l5420:
 11529                           
 11530                           ;main.c: 689: };main.c: 690: PWM6_LoadDutyValue(dimingLed);
 11531  0A28  082B               	movf	(_dimingLed+1)^(0+128),w
 11532  0A29  0020               	movlb	0	; select bank0
 11533  0A2A  00A1               	movwf	PWM6_LoadDutyValue@dutyValue+1
 11534  0A2B  0021               	movlb	1	; select bank1
 11535  0A2C  082A               	movf	_dimingLed^(0+128),w
 11536  0A2D  0020               	movlb	0	; select bank0
 11537  0A2E  00A0               	movwf	PWM6_LoadDutyValue@dutyValue
 11538  0A2F  3190  20A0  3189   	fcall	_PWM6_LoadDutyValue
 11539  0A32                     l5422:
 11540                           
 11541                           ;main.c: 691: _delay((unsigned long)((1)*(1000000/4000.0)));
 11542  0A32  3053               	movlw	83
 11543  0A33                     u6577:
 11544  0A33  0B89               	decfsz	9,f
 11545  0A34  2A33               	goto	u6577
 11546  0A35  0000               	nop
 11547  0A36                     l1391:
 11548  0A36  0008               	return
 11549  0A37                     __end_of_checkFlags:
 11550                           
 11551                           	psect	text10
 11552  073F                     __ptext10:	
 11553 ;; *************** function _wirteEEPROMinit *****************
 11554 ;; Defined at:
 11555 ;;		line 389 in file "main.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;		None
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;		None
 11560 ;; Return value:  Size  Location     Type
 11561 ;;                  1    wreg      void 
 11562 ;; Registers used:
 11563 ;;		wreg, status,2, status,0, pclath, cstack
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;Total ram usage:        1 bytes
 11574 ;; Hardware stack levels used:    1
 11575 ;; Hardware stack levels required when called:    5
 11576 ;; This function calls:
 11577 ;;		_DATAEE_WriteByte
 11578 ;; This function is called by:
 11579 ;;		_checkFlags
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           
 11584                           ;psect for function _wirteEEPROMinit
 11585  073F                     _wirteEEPROMinit:
 11586  073F                     l4824:	
 11587                           ;incstack = 0
 11588                           ; Regs used in _wirteEEPROMinit: [wreg+status,2+status,0+pclath+cstack]
 11589                           
 11590                           
 11591                           ;main.c: 391: DATAEE_WriteByte( 0x7000 + (1), NREG);
 11592  073F  3001               	movlw	1
 11593  0740  0020               	movlb	0	; select bank0
 11594  0741  00A6               	movwf	DATAEE_WriteByte@bAdd
 11595  0742  3070               	movlw	112
 11596  0743  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11597  0744  087D               	movf	_NREG,w
 11598  0745  00AA               	movwf	??_wirteEEPROMinit
 11599  0746  082A               	movf	??_wirteEEPROMinit,w
 11600  0747  00A8               	movwf	DATAEE_WriteByte@bData
 11601  0748  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11602                           
 11603                           ;main.c: 392: DATAEE_WriteByte( 0x7000 + (2), PMON);
 11604  074B  3002               	movlw	2
 11605  074C  0020               	movlb	0	; select bank0
 11606  074D  00A6               	movwf	DATAEE_WriteByte@bAdd
 11607  074E  3070               	movlw	112
 11608  074F  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11609  0750  0021               	movlb	1	; select bank1
 11610  0751  086A               	movf	_PMON^(0+128),w
 11611  0752  0020               	movlb	0	; select bank0
 11612  0753  00AA               	movwf	??_wirteEEPROMinit
 11613  0754  082A               	movf	??_wirteEEPROMinit,w
 11614  0755  00A8               	movwf	DATAEE_WriteByte@bData
 11615  0756  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11616                           
 11617                           ;main.c: 393: DATAEE_WriteByte( 0x7000 + (3), TALA);
 11618  0759  3003               	movlw	3
 11619  075A  0020               	movlb	0	; select bank0
 11620  075B  00A6               	movwf	DATAEE_WriteByte@bAdd
 11621  075C  3070               	movlw	112
 11622  075D  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11623  075E  0021               	movlb	1	; select bank1
 11624  075F  0869               	movf	_TALA^(0+128),w
 11625  0760  0020               	movlb	0	; select bank0
 11626  0761  00AA               	movwf	??_wirteEEPROMinit
 11627  0762  082A               	movf	??_wirteEEPROMinit,w
 11628  0763  00A8               	movwf	DATAEE_WriteByte@bData
 11629  0764  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11630                           
 11631                           ;main.c: 394: DATAEE_WriteByte( 0x7000 + (4), clkAlarm.alarmVal.h);
 11632  0767  3004               	movlw	4
 11633  0768  0020               	movlb	0	; select bank0
 11634  0769  00A6               	movwf	DATAEE_WriteByte@bAdd
 11635  076A  3070               	movlw	112
 11636  076B  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11637  076C  0021               	movlb	1	; select bank1
 11638  076D  0820               	movf	_clkAlarm^(0+128),w
 11639  076E  0020               	movlb	0	; select bank0
 11640  076F  00AA               	movwf	??_wirteEEPROMinit
 11641  0770  082A               	movf	??_wirteEEPROMinit,w
 11642  0771  00A8               	movwf	DATAEE_WriteByte@bData
 11643  0772  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11644                           
 11645                           ;main.c: 395: DATAEE_WriteByte( 0x7000 + (5), clkAlarm.alarmVal.m);
 11646  0775  3005               	movlw	5
 11647  0776  0020               	movlb	0	; select bank0
 11648  0777  00A6               	movwf	DATAEE_WriteByte@bAdd
 11649  0778  3070               	movlw	112
 11650  0779  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11651  077A  0021               	movlb	1	; select bank1
 11652  077B  0821               	movf	(_clkAlarm^(0+128)+1),w
 11653  077C  0020               	movlb	0	; select bank0
 11654  077D  00AA               	movwf	??_wirteEEPROMinit
 11655  077E  082A               	movf	??_wirteEEPROMinit,w
 11656  077F  00A8               	movwf	DATAEE_WriteByte@bData
 11657  0780  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11658                           
 11659                           ;main.c: 396: DATAEE_WriteByte( 0x7000 + (6), clkAlarm.alarmVal.s);
 11660  0783  3006               	movlw	6
 11661  0784  0020               	movlb	0	; select bank0
 11662  0785  00A6               	movwf	DATAEE_WriteByte@bAdd
 11663  0786  3070               	movlw	112
 11664  0787  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11665  0788  0021               	movlb	1	; select bank1
 11666  0789  0822               	movf	(_clkAlarm^(0+128)+2),w
 11667  078A  0020               	movlb	0	; select bank0
 11668  078B  00AA               	movwf	??_wirteEEPROMinit
 11669  078C  082A               	movf	??_wirteEEPROMinit,w
 11670  078D  00A8               	movwf	DATAEE_WriteByte@bData
 11671  078E  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11672                           
 11673                           ;main.c: 397: DATAEE_WriteByte( 0x7000 + (7), tempAlarm.alarmTemp);
 11674  0791  3007               	movlw	7
 11675  0792  0020               	movlb	0	; select bank0
 11676  0793  00A6               	movwf	DATAEE_WriteByte@bAdd
 11677  0794  3070               	movlw	112
 11678  0795  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11679  0796  0021               	movlb	1	; select bank1
 11680  0797  0827               	movf	_tempAlarm^(0+128),w
 11681  0798  0020               	movlb	0	; select bank0
 11682  0799  00AA               	movwf	??_wirteEEPROMinit
 11683  079A  082A               	movf	??_wirteEEPROMinit,w
 11684  079B  00A8               	movwf	DATAEE_WriteByte@bData
 11685  079C  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11686                           
 11687                           ;main.c: 398: DATAEE_WriteByte( 0x7000 + (8), lumAlarm.alarmLum);
 11688  079F  3008               	movlw	8
 11689  07A0  0020               	movlb	0	; select bank0
 11690  07A1  00A6               	movwf	DATAEE_WriteByte@bAdd
 11691  07A2  3070               	movlw	112
 11692  07A3  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11693  07A4  0021               	movlb	1	; select bank1
 11694  07A5  0824               	movf	_lumAlarm^(0+128),w
 11695  07A6  0020               	movlb	0	; select bank0
 11696  07A7  00AA               	movwf	??_wirteEEPROMinit
 11697  07A8  082A               	movf	??_wirteEEPROMinit,w
 11698  07A9  00A8               	movwf	DATAEE_WriteByte@bData
 11699  07AA  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11700                           
 11701                           ;main.c: 399: DATAEE_WriteByte( 0x7000 + (9), ALAF);
 11702  07AD  3009               	movlw	9
 11703  07AE  0020               	movlb	0	; select bank0
 11704  07AF  00A6               	movwf	DATAEE_WriteByte@bAdd
 11705  07B0  3070               	movlw	112
 11706  07B1  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11707  07B2  086F               	movf	_ALAF,w
 11708  07B3  00AA               	movwf	??_wirteEEPROMinit
 11709  07B4  082A               	movf	??_wirteEEPROMinit,w
 11710  07B5  00A8               	movwf	DATAEE_WriteByte@bData
 11711  07B6  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11712                           
 11713                           ;main.c: 400: DATAEE_WriteByte( 0x7000 + (10), t.h);
 11714  07B9  300A               	movlw	10
 11715  07BA  0020               	movlb	0	; select bank0
 11716  07BB  00A6               	movwf	DATAEE_WriteByte@bAdd
 11717  07BC  3070               	movlw	112
 11718  07BD  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11719  07BE  0865               	movf	_t,w
 11720  07BF  00AA               	movwf	??_wirteEEPROMinit
 11721  07C0  082A               	movf	??_wirteEEPROMinit,w
 11722  07C1  00A8               	movwf	DATAEE_WriteByte@bData
 11723  07C2  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11724                           
 11725                           ;main.c: 401: DATAEE_WriteByte( 0x7000 + (11), t.m);
 11726  07C5  300B               	movlw	11
 11727  07C6  0020               	movlb	0	; select bank0
 11728  07C7  00A6               	movwf	DATAEE_WriteByte@bAdd
 11729  07C8  3070               	movlw	112
 11730  07C9  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11731  07CA  0866               	movf	_t+1,w
 11732  07CB  00AA               	movwf	??_wirteEEPROMinit
 11733  07CC  082A               	movf	??_wirteEEPROMinit,w
 11734  07CD  00A8               	movwf	DATAEE_WriteByte@bData
 11735  07CE  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11736                           
 11737                           ;main.c: 402: DATAEE_WriteByte( 0x7000 + (12), iwrite);
 11738  07D1  300C               	movlw	12
 11739  07D2  0020               	movlb	0	; select bank0
 11740  07D3  00A6               	movwf	DATAEE_WriteByte@bAdd
 11741  07D4  3070               	movlw	112
 11742  07D5  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11743  07D6  086B               	movf	_iwrite,w
 11744  07D7  00AA               	movwf	??_wirteEEPROMinit
 11745  07D8  082A               	movf	??_wirteEEPROMinit,w
 11746  07D9  00A8               	movwf	DATAEE_WriteByte@bData
 11747  07DA  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11748                           
 11749                           ;main.c: 403: DATAEE_WriteByte( 0x7000 + (13), NREG + PMON + TALA + clkAlarm.alarmVal.h 
      +                          + clkAlarm.alarmVal.m + clkAlarm.alarmVal.s + tempAlarm.alarmTemp + lumAlarm.alarmLum + 
      +                          ALAF + t.h + t.m + iwrite);
 11750  07DD  300D               	movlw	13
 11751  07DE  0020               	movlb	0	; select bank0
 11752  07DF  00A6               	movwf	DATAEE_WriteByte@bAdd
 11753  07E0  3070               	movlw	112
 11754  07E1  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11755  07E2  0021               	movlb	1	; select bank1
 11756  07E3  0821               	movf	(_clkAlarm^(0+128)+1),w
 11757  07E4  0722               	addwf	(_clkAlarm^(0+128)+2),w
 11758  07E5  0020               	movlb	0	; select bank0
 11759  07E6  0766               	addwf	_t+1,w
 11760  07E7  0021               	movlb	1	; select bank1
 11761  07E8  0720               	addwf	_clkAlarm^(0+128),w
 11762  07E9  0727               	addwf	_tempAlarm^(0+128),w
 11763  07EA  0724               	addwf	_lumAlarm^(0+128),w
 11764  07EB  0020               	movlb	0	; select bank0
 11765  07EC  0765               	addwf	_t,w
 11766  07ED  077D               	addwf	_NREG,w
 11767  07EE  0021               	movlb	1	; select bank1
 11768  07EF  076A               	addwf	_PMON^(0+128),w
 11769  07F0  0769               	addwf	_TALA^(0+128),w
 11770  07F1  0020               	movlb	0	; select bank0
 11771  07F2  076F               	addwf	_ALAF,w
 11772  07F3  076B               	addwf	_iwrite,w
 11773  07F4  00AA               	movwf	??_wirteEEPROMinit
 11774  07F5  082A               	movf	??_wirteEEPROMinit,w
 11775  07F6  00A8               	movwf	DATAEE_WriteByte@bData
 11776  07F7  3192  2249  3187   	fcall	_DATAEE_WriteByte
 11777  07FA                     l1281:
 11778  07FA  0008               	return
 11779  07FB                     __end_of_wirteEEPROMinit:
 11780                           
 11781                           	psect	text11
 11782  036C                     __ptext11:	
 11783 ;; *************** function _update_menuLCD *****************
 11784 ;; Defined at:
 11785 ;;		line 407 in file "main.c"
 11786 ;; Parameters:    Size  Location     Type
 11787 ;;		None
 11788 ;; Auto vars:     Size  Location     Type
 11789 ;;  diff            3   56[BANK0 ] struct Time
 11790 ;;  str             8   41[BANK0 ] unsigned char [8]
 11791 ;;  tt              4   49[BANK0 ] unsigned char [4]
 11792 ;;  l               3   53[BANK0 ] unsigned char [3]
 11793 ;; Return value:  Size  Location     Type
 11794 ;;                  1    wreg      void 
 11795 ;; Registers used:
 11796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11797 ;; Tracked objects:
 11798 ;;		On entry : 0/0
 11799 ;;		On exit  : 0/0
 11800 ;;		Unchanged: 0/0
 11801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;Total ram usage:       24 bytes
 11807 ;; Hardware stack levels used:    1
 11808 ;; Hardware stack levels required when called:    8
 11809 ;; This function calls:
 11810 ;;		_LCDchar
 11811 ;;		_LCDcmd
 11812 ;;		_LCDstr
 11813 ;;		_PWM6_LoadDutyValue
 11814 ;;		_PWM_Output_D4_Disable
 11815 ;;		_TMR2_StopTimer
 11816 ;;		_differenceBetweenTimePeriod
 11817 ;;		_sprintf
 11818 ;; This function is called by:
 11819 ;;		_checkFlags
 11820 ;;		_editClock
 11821 ;;		_editTemp
 11822 ;;		_editLum
 11823 ;;		_toggleAlarms
 11824 ;; This function uses a non-reentrant model
 11825 ;;
 11826                           
 11827                           
 11828                           ;psect for function _update_menuLCD
 11829  036C                     _update_menuLCD:
 11830  036C                     l4826:	
 11831                           ;incstack = 0
 11832                           ; Regs used in _update_menuLCD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11833                           
 11834                           
 11835                           ;main.c: 409: if(bufHalfFull){
 11836  036C  0021               	movlb	1	; select bank1
 11837  036D  0831               	movf	_bufHalfFull^(0+128),w
 11838  036E  1903               	btfsc	3,2
 11839  036F  2B71               	goto	u4261
 11840  0370  2B72               	goto	u4260
 11841  0371                     u4261:
 11842  0371  2B7B               	goto	l4830
 11843  0372                     u4260:
 11844  0372                     l4828:
 11845                           
 11846                           ;main.c: 410: LCDcmd(0xc8);
 11847  0372  30C8               	movlw	200
 11848  0373  3190  2000  3183   	fcall	_LCDcmd
 11849                           
 11850                           ;main.c: 411: LCDchar('M');
 11851  0376  304D               	movlw	77
 11852  0377  319F  27C7  3183   	fcall	_LCDchar
 11853                           
 11854                           ;main.c: 412: } else{
 11855  037A  2B83               	goto	l4832
 11856  037B                     l4830:
 11857                           
 11858                           ;main.c: 413: LCDcmd(0xc8);
 11859  037B  30C8               	movlw	200
 11860  037C  3190  2000  3183   	fcall	_LCDcmd
 11861                           
 11862                           ;main.c: 414: LCDchar(' ');
 11863  037F  3020               	movlw	32
 11864  0380  319F  27C7  3183   	fcall	_LCDchar
 11865  0383                     l4832:
 11866                           
 11867                           ;main.c: 415: };main.c: 417: char str[8];;main.c: 418: if(editingClockAlarm){
 11868  0383  087B               	movf	_editingClockAlarm,w
 11869  0384  047C               	iorwf	_editingClockAlarm+1,w
 11870  0385  1903               	btfsc	3,2
 11871  0386  2B88               	goto	u4271
 11872  0387  2B89               	goto	u4270
 11873  0388                     u4271:
 11874  0388  2BAE               	goto	l4836
 11875  0389                     u4270:
 11876  0389                     l4834:
 11877                           
 11878                           ;main.c: 419: sprintf(str, "%02d:%02d:%02d", clkAlarm.alarmVal.h,clkAlarm.alarmVal.m,clk
      +                          Alarm.alarmVal.s);
 11879  0389  3027               	movlw	low (STR_1| (0+32768))
 11880  038A  0020               	movlb	0	; select bank0
 11881  038B  00AE               	movwf	sprintf@f
 11882  038C  3098               	movlw	high (STR_1| (0+32768))
 11883  038D  00AF               	movwf	sprintf@f+1
 11884  038E  0021               	movlb	1	; select bank1
 11885  038F  0820               	movf	_clkAlarm^(0+128),w
 11886  0390  0020               	movlb	0	; select bank0
 11887  0391  00C3               	movwf	??_update_menuLCD
 11888  0392  01C4               	clrf	??_update_menuLCD+1
 11889  0393  0843               	movf	??_update_menuLCD,w
 11890  0394  00B0               	movwf	?_sprintf+2
 11891  0395  0844               	movf	??_update_menuLCD+1,w
 11892  0396  00B1               	movwf	?_sprintf+3
 11893  0397  0021               	movlb	1	; select bank1
 11894  0398  0821               	movf	(_clkAlarm^(0+128)+1),w
 11895  0399  0020               	movlb	0	; select bank0
 11896  039A  00C5               	movwf	??_update_menuLCD+2
 11897  039B  01C6               	clrf	??_update_menuLCD+3
 11898  039C  0845               	movf	??_update_menuLCD+2,w
 11899  039D  00B2               	movwf	?_sprintf+4
 11900  039E  0846               	movf	??_update_menuLCD+3,w
 11901  039F  00B3               	movwf	?_sprintf+5
 11902  03A0  0021               	movlb	1	; select bank1
 11903  03A1  0822               	movf	(_clkAlarm^(0+128)+2),w
 11904  03A2  0020               	movlb	0	; select bank0
 11905  03A3  00C7               	movwf	??_update_menuLCD+4
 11906  03A4  01C8               	clrf	??_update_menuLCD+5
 11907  03A5  0847               	movf	??_update_menuLCD+4,w
 11908  03A6  00B4               	movwf	?_sprintf+6
 11909  03A7  0848               	movf	??_update_menuLCD+5,w
 11910  03A8  00B5               	movwf	?_sprintf+7
 11911  03A9  3049               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11912  03AA  3185  25A1  3183   	fcall	_sprintf
 11913                           
 11914                           ;main.c: 420: } else {
 11915  03AD  2BCC               	goto	l4838
 11916  03AE                     l4836:
 11917                           
 11918                           ;main.c: 421: sprintf(str, "%02d:%02d:%02d", t.h,t.m,t.s);
 11919  03AE  3027               	movlw	low (STR_1| (0+32768))
 11920  03AF  0020               	movlb	0	; select bank0
 11921  03B0  00AE               	movwf	sprintf@f
 11922  03B1  3098               	movlw	high (STR_1| (0+32768))
 11923  03B2  00AF               	movwf	sprintf@f+1
 11924  03B3  0865               	movf	_t,w
 11925  03B4  00C3               	movwf	??_update_menuLCD
 11926  03B5  01C4               	clrf	??_update_menuLCD+1
 11927  03B6  0843               	movf	??_update_menuLCD,w
 11928  03B7  00B0               	movwf	?_sprintf+2
 11929  03B8  0844               	movf	??_update_menuLCD+1,w
 11930  03B9  00B1               	movwf	?_sprintf+3
 11931  03BA  0866               	movf	_t+1,w
 11932  03BB  00C5               	movwf	??_update_menuLCD+2
 11933  03BC  01C6               	clrf	??_update_menuLCD+3
 11934  03BD  0845               	movf	??_update_menuLCD+2,w
 11935  03BE  00B2               	movwf	?_sprintf+4
 11936  03BF  0846               	movf	??_update_menuLCD+3,w
 11937  03C0  00B3               	movwf	?_sprintf+5
 11938  03C1  0867               	movf	_t+2,w
 11939  03C2  00C7               	movwf	??_update_menuLCD+4
 11940  03C3  01C8               	clrf	??_update_menuLCD+5
 11941  03C4  0847               	movf	??_update_menuLCD+4,w
 11942  03C5  00B4               	movwf	?_sprintf+6
 11943  03C6  0848               	movf	??_update_menuLCD+5,w
 11944  03C7  00B5               	movwf	?_sprintf+7
 11945  03C8  3049               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11946  03C9  3185  25A1  3183   	fcall	_sprintf
 11947  03CC                     l4838:
 11948                           
 11949                           ;main.c: 422: };main.c: 423: LCDcmd(0x80);
 11950  03CC  3080               	movlw	128
 11951  03CD  3190  2000  3183   	fcall	_LCDcmd
 11952  03D0                     l4840:
 11953                           
 11954                           ;main.c: 424: LCDstr(str);
 11955  03D0  3049               	movlw	low update_menuLCD@str
 11956  03D1  0020               	movlb	0	; select bank0
 11957  03D2  00A9               	movwf	LCDstr@p
 11958  03D3  3000               	movlw	high update_menuLCD@str
 11959  03D4  00AA               	movwf	LCDstr@p+1
 11960  03D5  3190  20EF  3183   	fcall	_LCDstr
 11961  03D8                     l4842:
 11962                           
 11963                           ;main.c: 427: if(clkAlarm.trigger == 1){
 11964  03D8  0021               	movlb	1	; select bank1
 11965  03D9  0323               	decf	(_clkAlarm^(0+128)+3),w
 11966  03DA  1D03               	btfss	3,2
 11967  03DB  2BDD               	goto	u4281
 11968  03DC  2BDE               	goto	u4280
 11969  03DD                     u4281:
 11970  03DD  2BE7               	goto	l4846
 11971  03DE                     u4280:
 11972  03DE                     l4844:
 11973                           
 11974                           ;main.c: 428: LCDcmd(0x8B);
 11975  03DE  308B               	movlw	139
 11976  03DF  3190  2000  3183   	fcall	_LCDcmd
 11977                           
 11978                           ;main.c: 429: LCDchar('C');
 11979  03E2  3043               	movlw	67
 11980  03E3  319F  27C7  3183   	fcall	_LCDchar
 11981                           
 11982                           ;main.c: 430: } else if(modeFlag == 0){
 11983  03E6  2BF6               	goto	l4850
 11984  03E7                     l4846:
 11985  03E7  0020               	movlb	0	; select bank0
 11986  03E8  0868               	movf	_modeFlag,w
 11987  03E9  0469               	iorwf	_modeFlag+1,w
 11988  03EA  1D03               	btfss	3,2
 11989  03EB  2BED               	goto	u4291
 11990  03EC  2BEE               	goto	u4290
 11991  03ED                     u4291:
 11992  03ED  2BF6               	goto	l4850
 11993  03EE                     u4290:
 11994  03EE                     l4848:
 11995                           
 11996                           ;main.c: 431: LCDcmd(0x8B);
 11997  03EE  308B               	movlw	139
 11998  03EF  3190  2000  3183   	fcall	_LCDcmd
 11999                           
 12000                           ;main.c: 432: LCDchar(' ');
 12001  03F2  3020               	movlw	32
 12002  03F3  319F  27C7  3183   	fcall	_LCDchar
 12003  03F6                     l4850:
 12004                           
 12005                           ;main.c: 433: };main.c: 436: if(tempAlarm.trigger == 1){
 12006  03F6  0021               	movlb	1	; select bank1
 12007  03F7  0328               	decf	(_tempAlarm^(0+128)+1),w
 12008  03F8  1D03               	btfss	3,2
 12009  03F9  2BFB               	goto	u4301
 12010  03FA  2BFC               	goto	u4300
 12011  03FB                     u4301:
 12012  03FB  2C05               	goto	l4854
 12013  03FC                     u4300:
 12014  03FC                     l4852:
 12015                           
 12016                           ;main.c: 437: LCDcmd(0x8C);
 12017  03FC  308C               	movlw	140
 12018  03FD  3190  2000  3183   	fcall	_LCDcmd
 12019                           
 12020                           ;main.c: 438: LCDchar('T');
 12021  0400  3054               	movlw	84
 12022  0401  319F  27C7  3183   	fcall	_LCDchar
 12023                           
 12024                           ;main.c: 439: } else if(modeFlag == 0){
 12025  0404  2C14               	goto	l4858
 12026  0405                     l4854:
 12027  0405  0020               	movlb	0	; select bank0
 12028  0406  0868               	movf	_modeFlag,w
 12029  0407  0469               	iorwf	_modeFlag+1,w
 12030  0408  1D03               	btfss	3,2
 12031  0409  2C0B               	goto	u4311
 12032  040A  2C0C               	goto	u4310
 12033  040B                     u4311:
 12034  040B  2C14               	goto	l4858
 12035  040C                     u4310:
 12036  040C                     l4856:
 12037                           
 12038                           ;main.c: 440: LCDcmd(0x8C);
 12039  040C  308C               	movlw	140
 12040  040D  3190  2000  3183   	fcall	_LCDcmd
 12041                           
 12042                           ;main.c: 441: LCDchar(' ');
 12043  0410  3020               	movlw	32
 12044  0411  319F  27C7  3183   	fcall	_LCDchar
 12045  0414                     l4858:
 12046                           
 12047                           ;main.c: 442: };main.c: 445: if(lumAlarm.trigger == 1){
 12048  0414  0021               	movlb	1	; select bank1
 12049  0415  0325               	decf	(_lumAlarm^(0+128)+1),w
 12050  0416  1D03               	btfss	3,2
 12051  0417  2C19               	goto	u4321
 12052  0418  2C1A               	goto	u4320
 12053  0419                     u4321:
 12054  0419  2C23               	goto	l4862
 12055  041A                     u4320:
 12056  041A                     l4860:
 12057                           
 12058                           ;main.c: 446: LCDcmd(0x8D);
 12059  041A  308D               	movlw	141
 12060  041B  3190  2000  3183   	fcall	_LCDcmd
 12061                           
 12062                           ;main.c: 447: LCDchar('L');
 12063  041E  304C               	movlw	76
 12064  041F  319F  27C7  3183   	fcall	_LCDchar
 12065                           
 12066                           ;main.c: 448: } else if(modeFlag == 0){
 12067  0422  2C32               	goto	l1295
 12068  0423                     l4862:
 12069  0423  0020               	movlb	0	; select bank0
 12070  0424  0868               	movf	_modeFlag,w
 12071  0425  0469               	iorwf	_modeFlag+1,w
 12072  0426  1D03               	btfss	3,2
 12073  0427  2C29               	goto	u4331
 12074  0428  2C2A               	goto	u4330
 12075  0429                     u4331:
 12076  0429  2C32               	goto	l1295
 12077  042A                     u4330:
 12078  042A                     l4864:
 12079                           
 12080                           ;main.c: 449: LCDcmd(0x8D);
 12081  042A  308D               	movlw	141
 12082  042B  3190  2000  3183   	fcall	_LCDcmd
 12083                           
 12084                           ;main.c: 450: LCDchar(' ');
 12085  042E  3020               	movlw	32
 12086  042F  319F  27C7  3183   	fcall	_LCDchar
 12087  0432                     l1295:
 12088                           
 12089                           ;main.c: 451: };main.c: 453: LCDcmd(0x8F);
 12090  0432  308F               	movlw	143
 12091  0433  3190  2000  3183   	fcall	_LCDcmd
 12092                           
 12093                           ;main.c: 454: LCDchar(ALAF);
 12094  0436  0020               	movlb	0	; select bank0
 12095  0437  086F               	movf	_ALAF,w
 12096  0438  319F  27C7  3183   	fcall	_LCDchar
 12097  043B                     l4866:
 12098                           
 12099                           ;main.c: 457: if(ALAF == 'A'){
 12100  043B  3041               	movlw	65
 12101  043C  0020               	movlb	0	; select bank0
 12102  043D  066F               	xorwf	_ALAF,w
 12103  043E  1D03               	btfss	3,2
 12104  043F  2C41               	goto	u4341
 12105  0440  2C42               	goto	u4340
 12106  0441                     u4341:
 12107  0441  2CB4               	goto	l4900
 12108  0442                     u4340:
 12109  0442                     l4868:
 12110                           
 12111                           ;main.c: 458: if(clkAlarm.trigger || tempAlarm.trigger || lumAlarm.trigger){
 12112  0442  0021               	movlb	1	; select bank1
 12113  0443  0823               	movf	(_clkAlarm^(0+128)+3),w
 12114  0444  1D03               	btfss	3,2
 12115  0445  2C47               	goto	u4351
 12116  0446  2C48               	goto	u4350
 12117  0447                     u4351:
 12118  0447  2C52               	goto	l4874
 12119  0448                     u4350:
 12120  0448                     l4870:
 12121  0448  0828               	movf	(_tempAlarm^(0+128)+1),w
 12122  0449  1D03               	btfss	3,2
 12123  044A  2C4C               	goto	u4361
 12124  044B  2C4D               	goto	u4360
 12125  044C                     u4361:
 12126  044C  2C52               	goto	l4874
 12127  044D                     u4360:
 12128  044D                     l4872:
 12129  044D  0825               	movf	(_lumAlarm^(0+128)+1),w
 12130  044E  1903               	btfsc	3,2
 12131  044F  2C51               	goto	u4371
 12132  0450  2C52               	goto	u4370
 12133  0451                     u4371:
 12134  0451  2CAE               	goto	l1298
 12135  0452                     u4370:
 12136  0452                     l4874:
 12137                           
 12138                           ;main.c: 459: if(alarmPWMStart.h == 0xff){
 12139  0452  0A61               	incf	_alarmPWMStart^(0+128),w
 12140  0453  1D03               	btfss	3,2
 12141  0454  2C56               	goto	u4381
 12142  0455  2C57               	goto	u4380
 12143  0456                     u4381:
 12144  0456  2C69               	goto	l1301
 12145  0457                     u4380:
 12146  0457                     l4876:
 12147                           
 12148                           ;main.c: 460: alarmPWMStart.h = t.h;
 12149  0457  0020               	movlb	0	; select bank0
 12150  0458  0865               	movf	_t,w
 12151  0459  00C3               	movwf	??_update_menuLCD
 12152  045A  0843               	movf	??_update_menuLCD,w
 12153  045B  0021               	movlb	1	; select bank1
 12154  045C  00E1               	movwf	_alarmPWMStart^(0+128)
 12155                           
 12156                           ;main.c: 461: alarmPWMStart.m = t.m;
 12157  045D  0020               	movlb	0	; select bank0
 12158  045E  0866               	movf	_t+1,w
 12159  045F  00C3               	movwf	??_update_menuLCD
 12160  0460  0843               	movf	??_update_menuLCD,w
 12161  0461  0021               	movlb	1	; select bank1
 12162  0462  00E2               	movwf	(_alarmPWMStart^(0+128)+1)
 12163                           
 12164                           ;main.c: 462: alarmPWMStart.s = t.s;
 12165  0463  0020               	movlb	0	; select bank0
 12166  0464  0867               	movf	_t+2,w
 12167  0465  00C3               	movwf	??_update_menuLCD
 12168  0466  0843               	movf	??_update_menuLCD,w
 12169  0467  0021               	movlb	1	; select bank1
 12170  0468  00E3               	movwf	(_alarmPWMStart^(0+128)+2)
 12171  0469                     l1301:
 12172                           
 12173                           ;main.c: 463: };main.c: 464: struct Time diff = {0,0,0};
 12174  0469  0022               	movlb	2	; select bank2
 12175  046A  0834               	movf	update_menuLCD@F12899^(0+256),w
 12176  046B  0020               	movlb	0	; select bank0
 12177  046C  00D8               	movwf	update_menuLCD@diff
 12178  046D  0022               	movlb	2	; select bank2
 12179  046E  0835               	movf	(update_menuLCD@F12899+1)^(0+256),w
 12180  046F  0020               	movlb	0	; select bank0
 12181  0470  00D9               	movwf	update_menuLCD@diff+1
 12182  0471  0022               	movlb	2	; select bank2
 12183  0472  0836               	movf	(update_menuLCD@F12899+2)^(0+256),w
 12184  0473  0020               	movlb	0	; select bank0
 12185  0474  00DA               	movwf	update_menuLCD@diff+2
 12186  0475                     l4878:
 12187                           
 12188                           ;main.c: 465: differenceBetweenTimePeriod( t, alarmPWMStart, &diff);
 12189  0475  0865               	movf	_t,w
 12190  0476  00A0               	movwf	differenceBetweenTimePeriod@start
 12191  0477  0866               	movf	_t+1,w
 12192  0478  00A1               	movwf	differenceBetweenTimePeriod@start+1
 12193  0479  0867               	movf	_t+2,w
 12194  047A  00A2               	movwf	differenceBetweenTimePeriod@start+2
 12195  047B  0021               	movlb	1	; select bank1
 12196  047C  0861               	movf	_alarmPWMStart^(0+128),w
 12197  047D  0020               	movlb	0	; select bank0
 12198  047E  00A3               	movwf	differenceBetweenTimePeriod@stop
 12199  047F  0021               	movlb	1	; select bank1
 12200  0480  0862               	movf	(_alarmPWMStart+1)^(0+128),w
 12201  0481  0020               	movlb	0	; select bank0
 12202  0482  00A4               	movwf	differenceBetweenTimePeriod@stop+1
 12203  0483  0021               	movlb	1	; select bank1
 12204  0484  0863               	movf	(_alarmPWMStart+2)^(0+128),w
 12205  0485  0020               	movlb	0	; select bank0
 12206  0486  00A5               	movwf	differenceBetweenTimePeriod@stop+2
 12207  0487  3058               	movlw	(low (update_menuLCD@diff| 0))& (0+255)
 12208  0488  00C3               	movwf	??_update_menuLCD
 12209  0489  0843               	movf	??_update_menuLCD,w
 12210  048A  00A6               	movwf	differenceBetweenTimePeriod@diff
 12211  048B  3193  2391  3183   	fcall	_differenceBetweenTimePeriod
 12212  048E                     l4880:
 12213                           
 12214                           ;main.c: 467: if(diff.s <= TALA){
 12215  048E  0020               	movlb	0	; select bank0
 12216  048F  085A               	movf	update_menuLCD@diff+2,w
 12217  0490  0021               	movlb	1	; select bank1
 12218  0491  0269               	subwf	_TALA^(0+128),w
 12219  0492  1C03               	skipc
 12220  0493  2C95               	goto	u4391
 12221  0494  2C96               	goto	u4390
 12222  0495                     u4391:
 12223  0495  2C99               	goto	l1304
 12224  0496                     u4390:
 12225  0496                     l4882:
 12226                           
 12227                           ;main.c: 468: PWM_on = 1;
 12228  0496  01BA               	clrf	_PWM_on^(0+128)
 12229  0497  0ABA               	incf	_PWM_on^(0+128),f
 12230                           
 12231                           ;main.c: 469: } else if(PWM6EN==1){
 12232  0498  2CB4               	goto	l4900
 12233  0499                     l1304:
 12234  0499  0027               	movlb	7	; select bank7
 12235  049A  1F8E               	btfss	14,7	;volatile
 12236  049B  2C9D               	goto	u4401
 12237  049C  2C9E               	goto	u4400
 12238  049D                     u4401:
 12239  049D  2CB4               	goto	l1307
 12240  049E                     u4400:
 12241  049E                     l4884:
 12242                           
 12243                           ;main.c: 470: PWM_on = 0;
 12244  049E  0021               	movlb	1	; select bank1
 12245  049F  01BA               	clrf	_PWM_on^(0+128)
 12246  04A0                     l4886:
 12247                           
 12248                           ;main.c: 471: PWM6_LoadDutyValue(0);
 12249  04A0  3000               	movlw	0
 12250  04A1  0020               	movlb	0	; select bank0
 12251  04A2  00A0               	movwf	PWM6_LoadDutyValue@dutyValue
 12252  04A3  00A1               	movwf	PWM6_LoadDutyValue@dutyValue+1
 12253  04A4  3190  20A0  3183   	fcall	_PWM6_LoadDutyValue
 12254  04A7                     l4888:
 12255                           
 12256                           ;main.c: 472: TMR2_StopTimer();
 12257  04A7  319F  276C  3183   	fcall	_TMR2_StopTimer
 12258  04AA                     l4890:
 12259                           
 12260                           ;main.c: 473: PWM_Output_D4_Disable();
 12261  04AA  319F  2762  3183   	fcall	_PWM_Output_D4_Disable
 12262  04AD  2CB4               	goto	l4900
 12263  04AE                     l1298:
 12264  04AE  0027               	movlb	7	; select bank7
 12265  04AF  1F8E               	btfss	14,7	;volatile
 12266  04B0  2CB2               	goto	u4411
 12267  04B1  2CB3               	goto	u4410
 12268  04B2                     u4411:
 12269  04B2  2CB4               	goto	l4900
 12270  04B3                     u4410:
 12271  04B3  2C9E               	goto	l4884
 12272  04B4                     l1307:
 12273  04B4                     l4900:
 12274                           
 12275                           ;main.c: 480: };main.c: 481: };main.c: 483: LCDcmd(0xc0);
 12276  04B4  30C0               	movlw	192
 12277  04B5  3190  2000  3183   	fcall	_LCDcmd
 12278  04B8                     l4902:
 12279                           
 12280                           ;main.c: 484: char tt[4];;main.c: 485: if(editingTempAlarm){
 12281  04B8  0021               	movlb	1	; select bank1
 12282  04B9  0839               	movf	_editingTempAlarm^(0+128),w
 12283  04BA  1903               	btfsc	3,2
 12284  04BB  2CBD               	goto	u4421
 12285  04BC  2CBE               	goto	u4420
 12286  04BD                     u4421:
 12287  04BD  2CD1               	goto	l4906
 12288  04BE                     u4420:
 12289  04BE                     l4904:
 12290                           
 12291                           ;main.c: 486: sprintf(tt, "%02d C", tempAlarm.alarmTemp);
 12292  04BE  3040               	movlw	low (STR_3| (0+32768))
 12293  04BF  0020               	movlb	0	; select bank0
 12294  04C0  00AE               	movwf	sprintf@f
 12295  04C1  3098               	movlw	high (STR_3| (0+32768))
 12296  04C2  00AF               	movwf	sprintf@f+1
 12297  04C3  0021               	movlb	1	; select bank1
 12298  04C4  0827               	movf	_tempAlarm^(0+128),w
 12299  04C5  0020               	movlb	0	; select bank0
 12300  04C6  00C3               	movwf	??_update_menuLCD
 12301  04C7  01C4               	clrf	??_update_menuLCD+1
 12302  04C8  0843               	movf	??_update_menuLCD,w
 12303  04C9  00B0               	movwf	?_sprintf+2
 12304  04CA  0844               	movf	??_update_menuLCD+1,w
 12305  04CB  00B1               	movwf	?_sprintf+3
 12306  04CC  3051               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12307  04CD  3185  25A1  3183   	fcall	_sprintf
 12308                           
 12309                           ;main.c: 487: } else{
 12310  04D0  2CE1               	goto	l4908
 12311  04D1                     l4906:
 12312                           
 12313                           ;main.c: 488: sprintf(tt, "%02d C", temp);
 12314  04D1  3040               	movlw	low (STR_3| (0+32768))
 12315  04D2  0020               	movlb	0	; select bank0
 12316  04D3  00AE               	movwf	sprintf@f
 12317  04D4  3098               	movlw	high (STR_3| (0+32768))
 12318  04D5  00AF               	movwf	sprintf@f+1
 12319  04D6  086E               	movf	_temp,w
 12320  04D7  00C3               	movwf	??_update_menuLCD
 12321  04D8  01C4               	clrf	??_update_menuLCD+1
 12322  04D9  0843               	movf	??_update_menuLCD,w
 12323  04DA  00B0               	movwf	?_sprintf+2
 12324  04DB  0844               	movf	??_update_menuLCD+1,w
 12325  04DC  00B1               	movwf	?_sprintf+3
 12326  04DD  3051               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12327  04DE  3185  25A1  3183   	fcall	_sprintf
 12328  04E1                     l4908:
 12329                           
 12330                           ;main.c: 489: };main.c: 490: LCDstr(tt);
 12331  04E1  3051               	movlw	low update_menuLCD@tt
 12332  04E2  0020               	movlb	0	; select bank0
 12333  04E3  00A9               	movwf	LCDstr@p
 12334  04E4  3000               	movlw	high update_menuLCD@tt
 12335  04E5  00AA               	movwf	LCDstr@p+1
 12336  04E6  3190  20EF  3183   	fcall	_LCDstr
 12337  04E9                     l4910:
 12338                           
 12339                           ;main.c: 492: LCDcmd(0xcd);
 12340  04E9  30CD               	movlw	205
 12341  04EA  3190  2000  3183   	fcall	_LCDcmd
 12342  04ED                     l4912:
 12343                           
 12344                           ;main.c: 493: char l[3];;main.c: 495: if(editingLumAlarm){
 12345  04ED  0021               	movlb	1	; select bank1
 12346  04EE  0838               	movf	_editingLumAlarm^(0+128),w
 12347  04EF  1903               	btfsc	3,2
 12348  04F0  2CF2               	goto	u4431
 12349  04F1  2CF3               	goto	u4430
 12350  04F2                     u4431:
 12351  04F2  2D06               	goto	l4916
 12352  04F3                     u4430:
 12353  04F3                     l4914:
 12354                           
 12355                           ;main.c: 496: sprintf(l, "L %d", lumAlarm.alarmLum);
 12356  04F3  3047               	movlw	low (STR_5| (0+32768))
 12357  04F4  0020               	movlb	0	; select bank0
 12358  04F5  00AE               	movwf	sprintf@f
 12359  04F6  3098               	movlw	high (STR_5| (0+32768))
 12360  04F7  00AF               	movwf	sprintf@f+1
 12361  04F8  0021               	movlb	1	; select bank1
 12362  04F9  0824               	movf	_lumAlarm^(0+128),w
 12363  04FA  0020               	movlb	0	; select bank0
 12364  04FB  00C3               	movwf	??_update_menuLCD
 12365  04FC  01C4               	clrf	??_update_menuLCD+1
 12366  04FD  0843               	movf	??_update_menuLCD,w
 12367  04FE  00B0               	movwf	?_sprintf+2
 12368  04FF  0844               	movf	??_update_menuLCD+1,w
 12369  0500  00B1               	movwf	?_sprintf+3
 12370  0501  3055               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12371  0502  3185  25A1  3183   	fcall	_sprintf
 12372                           
 12373                           ;main.c: 497: } else{
 12374  0505  2D16               	goto	l4918
 12375  0506                     l4916:
 12376                           
 12377                           ;main.c: 498: sprintf(l, "L %d", lumLevel);
 12378  0506  3047               	movlw	low (STR_5| (0+32768))
 12379  0507  0020               	movlb	0	; select bank0
 12380  0508  00AE               	movwf	sprintf@f
 12381  0509  3098               	movlw	high (STR_5| (0+32768))
 12382  050A  00AF               	movwf	sprintf@f+1
 12383  050B  086D               	movf	_lumLevel,w
 12384  050C  00C3               	movwf	??_update_menuLCD
 12385  050D  01C4               	clrf	??_update_menuLCD+1
 12386  050E  0843               	movf	??_update_menuLCD,w
 12387  050F  00B0               	movwf	?_sprintf+2
 12388  0510  0844               	movf	??_update_menuLCD+1,w
 12389  0511  00B1               	movwf	?_sprintf+3
 12390  0512  3055               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12391  0513  3185  25A1  3183   	fcall	_sprintf
 12392  0516                     l4918:
 12393                           
 12394                           ;main.c: 499: };main.c: 500: LCDstr(l);
 12395  0516  3055               	movlw	low update_menuLCD@l
 12396  0517  0020               	movlb	0	; select bank0
 12397  0518  00A9               	movwf	LCDstr@p
 12398  0519  3000               	movlw	high update_menuLCD@l
 12399  051A  00AA               	movwf	LCDstr@p+1
 12400  051B  3190  20EF  3183   	fcall	_LCDstr
 12401  051E                     l4920:
 12402                           
 12403                           ;main.c: 502: if(modeFlag != 0){
 12404  051E  0020               	movlb	0	; select bank0
 12405  051F  0868               	movf	_modeFlag,w
 12406  0520  0469               	iorwf	_modeFlag+1,w
 12407  0521  1903               	btfsc	3,2
 12408  0522  2D24               	goto	u4441
 12409  0523  2D25               	goto	u4440
 12410  0524                     u4441:
 12411  0524  2D31               	goto	l4926
 12412  0525                     u4440:
 12413  0525                     l4922:
 12414                           
 12415                           ;main.c: 503: LCDcmd(0x8B);
 12416  0525  308B               	movlw	139
 12417  0526  3190  2000  3183   	fcall	_LCDcmd
 12418  0529                     l4924:
 12419                           
 12420                           ;main.c: 504: LCDstr((unsigned char *)"CTL");
 12421  0529  304C               	movlw	low (STR_7| (0+32768))
 12422  052A  0020               	movlb	0	; select bank0
 12423  052B  00A9               	movwf	LCDstr@p
 12424  052C  3098               	movlw	high (STR_7| (0+32768))
 12425  052D  00AA               	movwf	LCDstr@p+1
 12426  052E  3190  20EF  3183   	fcall	_LCDstr
 12427  0531                     l4926:
 12428                           
 12429                           ;main.c: 505: };main.c: 507: if(modeFlag == 1){
 12430  0531  0020               	movlb	0	; select bank0
 12431  0532  0368               	decf	_modeFlag,w
 12432  0533  0469               	iorwf	_modeFlag+1,w
 12433  0534  1D03               	btfss	3,2
 12434  0535  2D37               	goto	u4451
 12435  0536  2D38               	goto	u4450
 12436  0537                     u4451:
 12437  0537  2D67               	goto	l4944
 12438  0538                     u4450:
 12439  0538                     l4928:
 12440                           
 12441                           ;main.c: 508: if(editingClockAlarm == 0){
 12442  0538  087B               	movf	_editingClockAlarm,w
 12443  0539  047C               	iorwf	_editingClockAlarm+1,w
 12444  053A  1D03               	btfss	3,2
 12445  053B  2D3D               	goto	u4461
 12446  053C  2D3E               	goto	u4460
 12447  053D                     u4461:
 12448  053D  2D43               	goto	l4932
 12449  053E                     u4460:
 12450  053E                     l4930:
 12451                           
 12452                           ;main.c: 509: LCDcmd(0x8B);
 12453  053E  308B               	movlw	139
 12454  053F  3190  2000  3183   	fcall	_LCDcmd
 12455                           
 12456                           ;main.c: 510: } else{
 12457  0542  2DA0               	goto	l1332
 12458  0543                     l4932:
 12459                           
 12460                           ;main.c: 511: if(editingClockAlarm == 1){
 12461  0543  037B               	decf	_editingClockAlarm,w
 12462  0544  047C               	iorwf	_editingClockAlarm+1,w
 12463  0545  1D03               	btfss	3,2
 12464  0546  2D48               	goto	u4471
 12465  0547  2D49               	goto	u4470
 12466  0548                     u4471:
 12467  0548  2D4E               	goto	l4936
 12468  0549                     u4470:
 12469  0549                     l4934:
 12470                           
 12471                           ;main.c: 512: LCDcmd(0x81);
 12472  0549  3081               	movlw	129
 12473  054A  3190  2000  3183   	fcall	_LCDcmd
 12474                           
 12475                           ;main.c: 513: } else if(editingClockAlarm == 2){
 12476  054D  2DA0               	goto	l1332
 12477  054E                     l4936:
 12478  054E  3002               	movlw	2
 12479  054F  067B               	xorwf	_editingClockAlarm,w
 12480  0550  047C               	iorwf	_editingClockAlarm+1,w
 12481  0551  1D03               	btfss	3,2
 12482  0552  2D54               	goto	u4481
 12483  0553  2D55               	goto	u4480
 12484  0554                     u4481:
 12485  0554  2D5A               	goto	l4940
 12486  0555                     u4480:
 12487  0555                     l4938:
 12488                           
 12489                           ;main.c: 514: LCDcmd(0x84);
 12490  0555  3084               	movlw	132
 12491  0556  3190  2000  3183   	fcall	_LCDcmd
 12492                           
 12493                           ;main.c: 515: } else if(editingClockAlarm == 3){
 12494  0559  2DA0               	goto	l1332
 12495  055A                     l4940:
 12496  055A  3003               	movlw	3
 12497  055B  067B               	xorwf	_editingClockAlarm,w
 12498  055C  047C               	iorwf	_editingClockAlarm+1,w
 12499  055D  1D03               	btfss	3,2
 12500  055E  2D60               	goto	u4491
 12501  055F  2D61               	goto	u4490
 12502  0560                     u4491:
 12503  0560  2D66               	goto	l1316
 12504  0561                     u4490:
 12505  0561                     l4942:
 12506                           
 12507                           ;main.c: 516: LCDcmd(0x87);
 12508  0561  3087               	movlw	135
 12509  0562  3190  2000  3183   	fcall	_LCDcmd
 12510  0565  2DA0               	goto	l1332
 12511  0566                     l1316:
 12512                           
 12513                           ;main.c: 517: };main.c: 518: };main.c: 519: } else if(modeFlag == 2){
 12514  0566  2DA0               	goto	l1332
 12515  0567                     l4944:
 12516  0567  3002               	movlw	2
 12517  0568  0668               	xorwf	_modeFlag,w
 12518  0569  0469               	iorwf	_modeFlag+1,w
 12519  056A  1D03               	btfss	3,2
 12520  056B  2D6D               	goto	u4501
 12521  056C  2D6E               	goto	u4500
 12522  056D                     u4501:
 12523  056D  2D7E               	goto	l4952
 12524  056E                     u4500:
 12525  056E                     l4946:
 12526                           
 12527                           ;main.c: 521: if(editingTempAlarm == 0){
 12528  056E  0021               	movlb	1	; select bank1
 12529  056F  0839               	movf	_editingTempAlarm^(0+128),w
 12530  0570  1D03               	btfss	3,2
 12531  0571  2D73               	goto	u4511
 12532  0572  2D74               	goto	u4510
 12533  0573                     u4511:
 12534  0573  2D79               	goto	l4950
 12535  0574                     u4510:
 12536  0574                     l4948:
 12537                           
 12538                           ;main.c: 522: LCDcmd(0x8c);
 12539  0574  308C               	movlw	140
 12540  0575  3190  2000  3183   	fcall	_LCDcmd
 12541                           
 12542                           ;main.c: 523: }else {
 12543  0578  2DA0               	goto	l1332
 12544  0579                     l4950:
 12545                           
 12546                           ;main.c: 524: LCDcmd(0xc1);
 12547  0579  30C1               	movlw	193
 12548  057A  3190  2000  3183   	fcall	_LCDcmd
 12549  057D  2DA0               	goto	l1332
 12550  057E                     l4952:
 12551  057E  3003               	movlw	3
 12552  057F  0668               	xorwf	_modeFlag,w
 12553  0580  0469               	iorwf	_modeFlag+1,w
 12554  0581  1D03               	btfss	3,2
 12555  0582  2D84               	goto	u4521
 12556  0583  2D85               	goto	u4520
 12557  0584                     u4521:
 12558  0584  2D95               	goto	l4960
 12559  0585                     u4520:
 12560  0585                     l4954:
 12561                           
 12562                           ;main.c: 529: if(editingLumAlarm == 0){
 12563  0585  0021               	movlb	1	; select bank1
 12564  0586  0838               	movf	_editingLumAlarm^(0+128),w
 12565  0587  1D03               	btfss	3,2
 12566  0588  2D8A               	goto	u4531
 12567  0589  2D8B               	goto	u4530
 12568  058A                     u4531:
 12569  058A  2D90               	goto	l4958
 12570  058B                     u4530:
 12571  058B                     l4956:
 12572                           
 12573                           ;main.c: 530: LCDcmd(0x8d);
 12574  058B  308D               	movlw	141
 12575  058C  3190  2000  3183   	fcall	_LCDcmd
 12576                           
 12577                           ;main.c: 531: }else {
 12578  058F  2DA0               	goto	l1332
 12579  0590                     l4958:
 12580                           
 12581                           ;main.c: 532: LCDcmd(0xcf);
 12582  0590  30CF               	movlw	207
 12583  0591  3190  2000  3183   	fcall	_LCDcmd
 12584  0594  2DA0               	goto	l1332
 12585  0595                     l4960:
 12586  0595  3004               	movlw	4
 12587  0596  0668               	xorwf	_modeFlag,w
 12588  0597  0469               	iorwf	_modeFlag+1,w
 12589  0598  1D03               	btfss	3,2
 12590  0599  2D9B               	goto	u4541
 12591  059A  2D9C               	goto	u4540
 12592  059B                     u4541:
 12593  059B  2DA0               	goto	l1332
 12594  059C                     u4540:
 12595  059C                     l4962:
 12596                           
 12597                           ;main.c: 536: LCDcmd(0x8f);
 12598  059C  308F               	movlw	143
 12599  059D  3190  2000  3183   	fcall	_LCDcmd
 12600  05A0                     l1332:
 12601  05A0  0008               	return
 12602  05A1                     __end_of_update_menuLCD:
 12603                           
 12604                           	psect	text12
 12605  05A1                     __ptext12:	
 12606 ;; *************** function _sprintf *****************
 12607 ;; Defined at:
 12608 ;;		line 505 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c"
 12609 ;; Parameters:    Size  Location     Type
 12610 ;;  sp              1    wreg     PTR unsigned char 
 12611 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12612 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12613 ;;		 -> STR_6(5), STR_5(5), STR_4(7), STR_3(7), 
 12614 ;;		 -> STR_2(15), STR_1(15), 
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  sp              1   34[BANK0 ] PTR unsigned char 
 12617 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12618 ;;  tmpval          4    0        struct .
 12619 ;;  width           2   31[BANK0 ] int 
 12620 ;;  val             2   28[BANK0 ] unsigned int 
 12621 ;;  cp              2    0        PTR const unsigned char 
 12622 ;;  len             2    0        unsigned int 
 12623 ;;  c               1   33[BANK0 ] unsigned char 
 12624 ;;  flag            1   30[BANK0 ] unsigned char 
 12625 ;;  prec            1   27[BANK0 ] char 
 12626 ;;  ap              1   26[BANK0 ] PTR void [1]
 12627 ;;		 -> ?_sprintf(2), 
 12628 ;; Return value:  Size  Location     Type
 12629 ;;                  2   14[BANK0 ] int 
 12630 ;; Registers used:
 12631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12632 ;; Tracked objects:
 12633 ;;		On entry : 0/0
 12634 ;;		On exit  : 0/0
 12635 ;;		Unchanged: 0/0
 12636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12637 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;Total ram usage:       21 bytes
 12642 ;; Hardware stack levels used:    1
 12643 ;; Hardware stack levels required when called:    5
 12644 ;; This function calls:
 12645 ;;		___lwdiv
 12646 ;;		___lwmod
 12647 ;;		___wmul
 12648 ;;		_isdigit
 12649 ;; This function is called by:
 12650 ;;		_update_menuLCD
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           
 12655                           ;psect for function _sprintf
 12656  05A1                     _sprintf:
 12657                           
 12658                           ;incstack = 0
 12659                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12660                           ;sprintf@sp stored from wreg
 12661  05A1  0020               	movlb	0	; select bank0
 12662  05A2  00C2               	movwf	sprintf@sp
 12663  05A3                     l4702:
 12664                           
 12665                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
 12666  05A3  3030               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 12667  05A4  00B6               	movwf	??_sprintf
 12668  05A5  0836               	movf	??_sprintf,w
 12669  05A6  00BA               	movwf	sprintf@ap
 12670                           
 12671                           ;doprnt.c: 553: while((c = *f++)) {
 12672  05A7  2F26               	goto	l4806
 12673  05A8                     l4704:
 12674                           
 12675                           ;doprnt.c: 555: if(c != '%')
 12676  05A8  3025               	movlw	37
 12677  05A9  0641               	xorwf	sprintf@c,w
 12678  05AA  1903               	btfsc	3,2
 12679  05AB  2DAD               	goto	u4081
 12680  05AC  2DAE               	goto	u4080
 12681  05AD                     u4081:
 12682  05AD  2DBA               	goto	l4710
 12683  05AE                     u4080:
 12684  05AE                     l4706:
 12685                           
 12686                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
 12687  05AE  0841               	movf	sprintf@c,w
 12688  05AF  00B6               	movwf	??_sprintf
 12689  05B0  0842               	movf	sprintf@sp,w
 12690  05B1  0086               	movwf	6
 12691  05B2  0187               	clrf	7
 12692  05B3  0836               	movf	??_sprintf,w
 12693  05B4  0081               	movwf	1
 12694  05B5                     l4708:
 12695  05B5  3001               	movlw	1
 12696  05B6  00B6               	movwf	??_sprintf
 12697  05B7  0836               	movf	??_sprintf,w
 12698  05B8  07C2               	addwf	sprintf@sp,f
 12699                           
 12700                           ;doprnt.c: 559: continue;
 12701  05B9  2F26               	goto	l4806
 12702  05BA                     l4710:
 12703                           
 12704                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
 12705  05BA  01BF               	clrf	sprintf@width
 12706  05BB  01C0               	clrf	sprintf@width+1
 12707                           
 12708                           ;doprnt.c: 565: flag = 0;
 12709  05BC  01BE               	clrf	sprintf@flag
 12710  05BD  2DC3               	goto	l4716
 12711  05BE                     l1738:	
 12712                           ;doprnt.c: 596: case '0':
 12713                           
 12714                           
 12715                           ;doprnt.c: 597: flag |= 0x04;
 12716  05BE  153E               	bsf	sprintf@flag,2
 12717  05BF                     l4712:
 12718                           
 12719                           ;doprnt.c: 598: f++;
 12720  05BF  3001               	movlw	1
 12721  05C0  07AE               	addwf	sprintf@f,f
 12722  05C1  3000               	movlw	0
 12723  05C2  3DAF               	addwfc	sprintf@f+1,f
 12724  05C3                     l4716:	
 12725                           ;doprnt.c: 599: continue;
 12726                           
 12727  05C3  082E               	movf	sprintf@f,w
 12728  05C4  0084               	movwf	4
 12729  05C5  082F               	movf	sprintf@f+1,w
 12730  05C6  0085               	movwf	5
 12731  05C7  0800               	movf	0,w	;code access
 12732                           
 12733                           ; Switch size 1, requested type "simple"
 12734                           ; Number of cases is 1, Range of values is 48 to 48
 12735                           ; switch strategies available:
 12736                           ; Name         Instructions Cycles
 12737                           ; simple_byte            4     3 (average)
 12738                           ; direct_byte           11     9 (fixed)
 12739                           ; jumptable            263     9 (fixed)
 12740                           ;	Chosen strategy is simple_byte
 12741  05C8  3A30               	xorlw	48	; case 48
 12742  05C9  1903               	skipnz
 12743  05CA  2DBE               	goto	l1738
 12744  05CB  2DCC               	goto	l4718
 12745  05CC                     l4718:
 12746                           
 12747                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
 12748  05CC  082E               	movf	sprintf@f,w
 12749  05CD  0084               	movwf	4
 12750  05CE  082F               	movf	sprintf@f+1,w
 12751  05CF  0085               	movwf	5
 12752  05D0  0800               	movf	0,w	;code access
 12753  05D1  3188  2001  3185   	fcall	_isdigit
 12754  05D4  1C03               	btfss	3,0
 12755  05D5  2DD7               	goto	u4091
 12756  05D6  2DD8               	goto	u4090
 12757  05D7                     u4091:
 12758  05D7  2E0B               	goto	l4732
 12759  05D8                     u4090:
 12760  05D8                     l4720:
 12761                           
 12762                           ;doprnt.c: 615: width = 0;
 12763  05D8  0020               	movlb	0	; select bank0
 12764  05D9  01BF               	clrf	sprintf@width
 12765  05DA  01C0               	clrf	sprintf@width+1
 12766  05DB                     l4722:
 12767                           
 12768                           ;doprnt.c: 617: width *= 10;
 12769  05DB  300A               	movlw	10
 12770  05DC  0020               	movlb	0	; select bank0
 12771  05DD  00A0               	movwf	___wmul@multiplier
 12772  05DE  3000               	movlw	0
 12773  05DF  00A1               	movwf	___wmul@multiplier+1
 12774  05E0  0840               	movf	sprintf@width+1,w
 12775  05E1  00A3               	movwf	___wmul@multiplicand+1
 12776  05E2  083F               	movf	sprintf@width,w
 12777  05E3  00A2               	movwf	___wmul@multiplicand
 12778  05E4  3191  21A1  3185   	fcall	___wmul
 12779  05E7  0020               	movlb	0	; select bank0
 12780  05E8  0821               	movf	?___wmul+1,w
 12781  05E9  00C0               	movwf	sprintf@width+1
 12782  05EA  0820               	movf	?___wmul,w
 12783  05EB  00BF               	movwf	sprintf@width
 12784  05EC                     l4724:
 12785                           
 12786                           ;doprnt.c: 618: width += *f++ - '0';
 12787  05EC  082E               	movf	sprintf@f,w
 12788  05ED  0084               	movwf	4
 12789  05EE  082F               	movf	sprintf@f+1,w
 12790  05EF  0085               	movwf	5
 12791  05F0  0800               	movf	0,w	;code access
 12792  05F1  3ED0               	addlw	208
 12793  05F2  00B6               	movwf	??_sprintf
 12794  05F3  30FF               	movlw	255
 12795  05F4  1803               	skipnc
 12796  05F5  3000               	movlw	0
 12797  05F6  00B7               	movwf	??_sprintf+1
 12798  05F7  0836               	movf	??_sprintf,w
 12799  05F8  07BF               	addwf	sprintf@width,f
 12800  05F9  0837               	movf	??_sprintf+1,w
 12801  05FA  3DC0               	addwfc	sprintf@width+1,f
 12802  05FB                     l4726:
 12803  05FB  3001               	movlw	1
 12804  05FC  07AE               	addwf	sprintf@f,f
 12805  05FD  3000               	movlw	0
 12806  05FE  3DAF               	addwfc	sprintf@f+1,f
 12807  05FF                     l4728:
 12808                           
 12809                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
 12810  05FF  082E               	movf	sprintf@f,w
 12811  0600  0084               	movwf	4
 12812  0601  082F               	movf	sprintf@f+1,w
 12813  0602  0085               	movwf	5
 12814  0603  0800               	movf	0,w	;code access
 12815  0604  3188  2001  3185   	fcall	_isdigit
 12816  0607  1803               	btfsc	3,0
 12817  0608  2E0A               	goto	u4101
 12818  0609  2E0B               	goto	u4100
 12819  060A                     u4101:
 12820  060A  2DDB               	goto	l4722
 12821  060B                     u4100:
 12822  060B                     l4732:
 12823  060B  0020               	movlb	0	; select bank0
 12824  060C  082F               	movf	sprintf@f+1,w
 12825  060D  00B7               	movwf	??_sprintf+1
 12826  060E  082E               	movf	sprintf@f,w
 12827  060F  00B6               	movwf	??_sprintf
 12828  0610  0AAE               	incf	sprintf@f,f
 12829  0611  1903               	skipnz
 12830  0612  0AAF               	incf	sprintf@f+1,f
 12831  0613  0836               	movf	??_sprintf,w
 12832  0614  0084               	movwf	4
 12833  0615  0837               	movf	??_sprintf+1,w
 12834  0616  0085               	movwf	5
 12835  0617  0800               	movf	0,w	;code access
 12836  0618  00C1               	movwf	sprintf@c
 12837                           
 12838                           ; Switch size 1, requested type "simple"
 12839                           ; Number of cases is 3, Range of values is 0 to 105
 12840                           ; switch strategies available:
 12841                           ; Name         Instructions Cycles
 12842                           ; simple_byte           10     6 (average)
 12843                           ; direct_byte          218     6 (fixed)
 12844                           ; jumptable            260     6 (fixed)
 12845                           ;	Chosen strategy is simple_byte
 12846  0619  3A00               	xorlw	0	; case 0
 12847  061A  1903               	skipnz
 12848  061B  2F3A               	goto	l4808
 12849  061C  3A64               	xorlw	100	; case 100
 12850  061D  1903               	skipnz
 12851  061E  2E23               	goto	l4734
 12852  061F  3A0D               	xorlw	13	; case 105
 12853  0620  1903               	skipnz
 12854  0621  2E23               	goto	l4734
 12855  0622  2F26               	goto	l4806
 12856  0623                     l4734:
 12857                           
 12858                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
 12859  0623  083A               	movf	sprintf@ap,w
 12860  0624  0086               	movwf	6
 12861  0625  0187               	clrf	7
 12862  0626  3F40               	moviw [0]fsr1
 12863  0627  00BC               	movwf	sprintf@val
 12864  0628  3F41               	moviw [1]fsr1
 12865  0629  00BD               	movwf	sprintf@val+1
 12866  062A                     l4736:
 12867  062A  3002               	movlw	2
 12868  062B  00B6               	movwf	??_sprintf
 12869  062C  0836               	movf	??_sprintf,w
 12870  062D  07BA               	addwf	sprintf@ap,f
 12871  062E                     l4738:
 12872                           
 12873                           ;doprnt.c: 1287: if((int)val < 0) {
 12874  062E  1FBD               	btfss	sprintf@val+1,7
 12875  062F  2E31               	goto	u4111
 12876  0630  2E32               	goto	u4110
 12877  0631                     u4111:
 12878  0631  2E3B               	goto	l4744
 12879  0632                     u4110:
 12880  0632                     l4740:
 12881                           
 12882                           ;doprnt.c: 1288: flag |= 0x03;
 12883  0632  3003               	movlw	3
 12884  0633  00B6               	movwf	??_sprintf
 12885  0634  0836               	movf	??_sprintf,w
 12886  0635  04BE               	iorwf	sprintf@flag,f
 12887  0636                     l4742:
 12888                           
 12889                           ;doprnt.c: 1289: val = -val;
 12890  0636  09BC               	comf	sprintf@val,f
 12891  0637  09BD               	comf	sprintf@val+1,f
 12892  0638  0ABC               	incf	sprintf@val,f
 12893  0639  1903               	skipnz
 12894  063A  0ABD               	incf	sprintf@val+1,f
 12895  063B                     l4744:
 12896                           
 12897                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
 12898  063B  01C1               	clrf	sprintf@c
 12899  063C  0AC1               	incf	sprintf@c,f
 12900  063D                     l4750:
 12901                           
 12902                           ;doprnt.c: 1332: if(val < dpowers[c])
 12903  063D  0841               	movf	sprintf@c,w
 12904  063E  00B6               	movwf	??_sprintf
 12905  063F  01B7               	clrf	??_sprintf+1
 12906  0640  35B6               	lslf	??_sprintf,f
 12907  0641  0DB7               	rlf	??_sprintf+1,f
 12908  0642  3036               	movlw	low (_dpowers| (0+32768))
 12909  0643  0736               	addwf	??_sprintf,w
 12910  0644  0084               	movwf	4
 12911  0645  3098               	movlw	high (_dpowers| (0+32768))
 12912  0646  3D37               	addwfc	??_sprintf+1,w
 12913  0647  0085               	movwf	5
 12914  0648  3F00               	moviw [0]fsr0
 12915  0649  00B8               	movwf	??_sprintf+2
 12916  064A  3F01               	moviw [1]fsr0
 12917  064B  00B9               	movwf	??_sprintf+3
 12918  064C  0839               	movf	??_sprintf+3,w
 12919  064D  023D               	subwf	sprintf@val+1,w
 12920  064E  1D03               	skipz
 12921  064F  2E52               	goto	u4125
 12922  0650  0838               	movf	??_sprintf+2,w
 12923  0651  023C               	subwf	sprintf@val,w
 12924  0652                     u4125:
 12925  0652  1803               	skipnc
 12926  0653  2E55               	goto	u4121
 12927  0654  2E56               	goto	u4120
 12928  0655                     u4121:
 12929  0655  2E57               	goto	l4754
 12930  0656                     u4120:
 12931  0656  2E61               	goto	l4756
 12932  0657                     l4754:
 12933  0657  3001               	movlw	1
 12934  0658  00B6               	movwf	??_sprintf
 12935  0659  0836               	movf	??_sprintf,w
 12936  065A  07C1               	addwf	sprintf@c,f
 12937  065B  3005               	movlw	5
 12938  065C  0641               	xorwf	sprintf@c,w
 12939  065D  1D03               	btfss	3,2
 12940  065E  2E60               	goto	u4131
 12941  065F  2E61               	goto	u4130
 12942  0660                     u4131:
 12943  0660  2E3D               	goto	l4750
 12944  0661                     u4130:
 12945  0661                     l4756:
 12946                           
 12947                           ;doprnt.c: 1371: if(width && flag & 0x03)
 12948  0661  083F               	movf	sprintf@width,w
 12949  0662  0440               	iorwf	sprintf@width+1,w
 12950  0663  1903               	btfsc	3,2
 12951  0664  2E66               	goto	u4141
 12952  0665  2E67               	goto	u4140
 12953  0666                     u4141:
 12954  0666  2E71               	goto	l1756
 12955  0667                     u4140:
 12956  0667                     l4758:
 12957  0667  083E               	movf	sprintf@flag,w
 12958  0668  3903               	andlw	3
 12959  0669  1903               	btfsc	3,2
 12960  066A  2E6C               	goto	u4151
 12961  066B  2E6D               	goto	u4150
 12962  066C                     u4151:
 12963  066C  2E71               	goto	l1756
 12964  066D                     u4150:
 12965  066D                     l4760:
 12966                           
 12967                           ;doprnt.c: 1372: width--;
 12968  066D  30FF               	movlw	255
 12969  066E  07BF               	addwf	sprintf@width,f
 12970  066F  30FF               	movlw	255
 12971  0670  3DC0               	addwfc	sprintf@width+1,f
 12972  0671                     l1756:
 12973                           
 12974                           ;doprnt.c: 1407: if(width > c)
 12975  0671  0840               	movf	sprintf@width+1,w
 12976  0672  3A80               	xorlw	128
 12977  0673  3C80               	sublw	128
 12978  0674  1D03               	skipz
 12979  0675  2E78               	goto	u4165
 12980  0676  083F               	movf	sprintf@width,w
 12981  0677  0241               	subwf	sprintf@c,w
 12982  0678                     u4165:
 12983  0678  1803               	skipnc
 12984  0679  2E7B               	goto	u4161
 12985  067A  2E7C               	goto	u4160
 12986  067B                     u4161:
 12987  067B  2E85               	goto	l4764
 12988  067C                     u4160:
 12989  067C                     l4762:
 12990                           
 12991                           ;doprnt.c: 1408: width -= c;
 12992  067C  0020               	movlb	0	; select bank0
 12993  067D  0841               	movf	sprintf@c,w
 12994  067E  00B6               	movwf	??_sprintf
 12995  067F  01B7               	clrf	??_sprintf+1
 12996  0680  0836               	movf	??_sprintf,w
 12997  0681  02BF               	subwf	sprintf@width,f
 12998  0682  0837               	movf	??_sprintf+1,w
 12999  0683  3BC0               	subwfb	sprintf@width+1,f
 13000  0684  2E88               	goto	l4766
 13001  0685                     l4764:
 13002                           
 13003                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
 13004  0685  0020               	movlb	0	; select bank0
 13005  0686  01BF               	clrf	sprintf@width
 13006  0687  01C0               	clrf	sprintf@width+1
 13007  0688                     l4766:
 13008                           
 13009                           ;doprnt.c: 1413: if(flag & 0x04) {
 13010  0688  1D3E               	btfss	sprintf@flag,2
 13011  0689  2E8B               	goto	u4171
 13012  068A  2E8C               	goto	u4170
 13013  068B                     u4171:
 13014  068B  2EB9               	goto	l4782
 13015  068C                     u4170:
 13016  068C                     l4768:
 13017                           
 13018                           ;doprnt.c: 1418: if(flag & 0x03)
 13019  068C  083E               	movf	sprintf@flag,w
 13020  068D  3903               	andlw	3
 13021  068E  1903               	btfsc	3,2
 13022  068F  2E91               	goto	u4181
 13023  0690  2E92               	goto	u4180
 13024  0691                     u4181:
 13025  0691  2E9D               	goto	l4774
 13026  0692                     u4180:
 13027  0692                     l4770:
 13028                           
 13029                           ;doprnt.c: 1419: ((*sp++ = ('-')));
 13030  0692  302D               	movlw	45
 13031  0693  00B6               	movwf	??_sprintf
 13032  0694  0842               	movf	sprintf@sp,w
 13033  0695  0086               	movwf	6
 13034  0696  0187               	clrf	7
 13035  0697  0836               	movf	??_sprintf,w
 13036  0698  0081               	movwf	1
 13037  0699                     l4772:
 13038  0699  3001               	movlw	1
 13039  069A  00B6               	movwf	??_sprintf
 13040  069B  0836               	movf	??_sprintf,w
 13041  069C  07C2               	addwf	sprintf@sp,f
 13042  069D                     l4774:
 13043                           
 13044                           ;doprnt.c: 1441: if(width)
 13045  069D  083F               	movf	sprintf@width,w
 13046  069E  0440               	iorwf	sprintf@width+1,w
 13047  069F  1903               	btfsc	3,2
 13048  06A0  2EA2               	goto	u4191
 13049  06A1  2EA3               	goto	u4190
 13050  06A2                     u4191:
 13051  06A2  2EE5               	goto	l4796
 13052  06A3                     u4190:
 13053  06A3                     l4776:
 13054                           
 13055                           ;doprnt.c: 1443: ((*sp++ = ('0')));
 13056  06A3  3030               	movlw	48
 13057  06A4  00B6               	movwf	??_sprintf
 13058  06A5  0842               	movf	sprintf@sp,w
 13059  06A6  0086               	movwf	6
 13060  06A7  0187               	clrf	7
 13061  06A8  0836               	movf	??_sprintf,w
 13062  06A9  0081               	movwf	1
 13063  06AA                     l4778:
 13064  06AA  3001               	movlw	1
 13065  06AB  00B6               	movwf	??_sprintf
 13066  06AC  0836               	movf	??_sprintf,w
 13067  06AD  07C2               	addwf	sprintf@sp,f
 13068  06AE                     l4780:
 13069                           
 13070                           ;doprnt.c: 1444: while(--width);
 13071  06AE  30FF               	movlw	255
 13072  06AF  07BF               	addwf	sprintf@width,f
 13073  06B0  30FF               	movlw	255
 13074  06B1  3DC0               	addwfc	sprintf@width+1,f
 13075  06B2  083F               	movf	sprintf@width,w
 13076  06B3  0440               	iorwf	sprintf@width+1,w
 13077  06B4  1D03               	btfss	3,2
 13078  06B5  2EB7               	goto	u4201
 13079  06B6  2EB8               	goto	u4200
 13080  06B7                     u4201:
 13081  06B7  2EA3               	goto	l4776
 13082  06B8                     u4200:
 13083  06B8  2EE5               	goto	l4796
 13084  06B9                     l4782:
 13085                           
 13086                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
 13087  06B9  083F               	movf	sprintf@width,w
 13088  06BA  0440               	iorwf	sprintf@width+1,w
 13089  06BB  1903               	btfsc	3,2
 13090  06BC  2EBE               	goto	u4211
 13091  06BD  2EBF               	goto	u4210
 13092  06BE                     u4211:
 13093  06BE  2ED4               	goto	l4790
 13094  06BF                     u4210:
 13095  06BF                     l4784:
 13096                           
 13097                           ;doprnt.c: 1456: ((*sp++ = (' ')));
 13098  06BF  3020               	movlw	32
 13099  06C0  00B6               	movwf	??_sprintf
 13100  06C1  0842               	movf	sprintf@sp,w
 13101  06C2  0086               	movwf	6
 13102  06C3  0187               	clrf	7
 13103  06C4  0836               	movf	??_sprintf,w
 13104  06C5  0081               	movwf	1
 13105  06C6                     l4786:
 13106  06C6  3001               	movlw	1
 13107  06C7  00B6               	movwf	??_sprintf
 13108  06C8  0836               	movf	??_sprintf,w
 13109  06C9  07C2               	addwf	sprintf@sp,f
 13110  06CA                     l4788:
 13111                           
 13112                           ;doprnt.c: 1457: while(--width);
 13113  06CA  30FF               	movlw	255
 13114  06CB  07BF               	addwf	sprintf@width,f
 13115  06CC  30FF               	movlw	255
 13116  06CD  3DC0               	addwfc	sprintf@width+1,f
 13117  06CE  083F               	movf	sprintf@width,w
 13118  06CF  0440               	iorwf	sprintf@width+1,w
 13119  06D0  1D03               	btfss	3,2
 13120  06D1  2ED3               	goto	u4221
 13121  06D2  2ED4               	goto	u4220
 13122  06D3                     u4221:
 13123  06D3  2EBF               	goto	l4784
 13124  06D4                     u4220:
 13125  06D4                     l4790:
 13126                           
 13127                           ;doprnt.c: 1464: if(flag & 0x03)
 13128  06D4  083E               	movf	sprintf@flag,w
 13129  06D5  3903               	andlw	3
 13130  06D6  1903               	btfsc	3,2
 13131  06D7  2ED9               	goto	u4231
 13132  06D8  2EDA               	goto	u4230
 13133  06D9                     u4231:
 13134  06D9  2EE5               	goto	l4796
 13135  06DA                     u4230:
 13136  06DA                     l4792:
 13137                           
 13138                           ;doprnt.c: 1465: ((*sp++ = ('-')));
 13139  06DA  302D               	movlw	45
 13140  06DB  00B6               	movwf	??_sprintf
 13141  06DC  0842               	movf	sprintf@sp,w
 13142  06DD  0086               	movwf	6
 13143  06DE  0187               	clrf	7
 13144  06DF  0836               	movf	??_sprintf,w
 13145  06E0  0081               	movwf	1
 13146  06E1                     l4794:
 13147  06E1  3001               	movlw	1
 13148  06E2  00B6               	movwf	??_sprintf
 13149  06E3  0836               	movf	??_sprintf,w
 13150  06E4  07C2               	addwf	sprintf@sp,f
 13151  06E5                     l4796:
 13152                           
 13153                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
 13154  06E5  0841               	movf	sprintf@c,w
 13155  06E6  00B6               	movwf	??_sprintf
 13156  06E7  0836               	movf	??_sprintf,w
 13157  06E8  00BB               	movwf	sprintf@prec
 13158                           
 13159                           ;doprnt.c: 1500: while(prec--) {
 13160  06E9  2F1D               	goto	l4804
 13161  06EA                     l4798:
 13162                           
 13163                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
 13164  06EA  300A               	movlw	10
 13165  06EB  00A8               	movwf	___lwmod@divisor
 13166  06EC  3000               	movlw	0
 13167  06ED  00A9               	movwf	___lwmod@divisor+1
 13168  06EE  083B               	movf	sprintf@prec,w
 13169  06EF  00B6               	movwf	??_sprintf
 13170  06F0  01B7               	clrf	??_sprintf+1
 13171  06F1  35B6               	lslf	??_sprintf,f
 13172  06F2  0DB7               	rlf	??_sprintf+1,f
 13173  06F3  3036               	movlw	low (_dpowers| (0+32768))
 13174  06F4  0736               	addwf	??_sprintf,w
 13175  06F5  0084               	movwf	4
 13176  06F6  3098               	movlw	high (_dpowers| (0+32768))
 13177  06F7  3D37               	addwfc	??_sprintf+1,w
 13178  06F8  0085               	movwf	5
 13179  06F9  3F00               	moviw [0]fsr0
 13180  06FA  00A0               	movwf	___lwdiv@divisor
 13181  06FB  3F01               	moviw [1]fsr0
 13182  06FC  00A1               	movwf	___lwdiv@divisor+1
 13183  06FD  083D               	movf	sprintf@val+1,w
 13184  06FE  00A3               	movwf	___lwdiv@dividend+1
 13185  06FF  083C               	movf	sprintf@val,w
 13186  0700  00A2               	movwf	___lwdiv@dividend
 13187  0701  3194  249D  3185   	fcall	___lwdiv
 13188  0704  0020               	movlb	0	; select bank0
 13189  0705  0821               	movf	?___lwdiv+1,w
 13190  0706  00AB               	movwf	___lwmod@dividend+1
 13191  0707  0820               	movf	?___lwdiv,w
 13192  0708  00AA               	movwf	___lwmod@dividend
 13193  0709  3193  23C6  3185   	fcall	___lwmod
 13194  070C  0020               	movlb	0	; select bank0
 13195  070D  0828               	movf	?___lwmod,w
 13196  070E  3E30               	addlw	48
 13197  070F  00B8               	movwf	??_sprintf+2
 13198  0710  0838               	movf	??_sprintf+2,w
 13199  0711  00C1               	movwf	sprintf@c
 13200  0712                     l4800:
 13201                           
 13202                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
 13203  0712  0841               	movf	sprintf@c,w
 13204  0713  00B6               	movwf	??_sprintf
 13205  0714  0842               	movf	sprintf@sp,w
 13206  0715  0086               	movwf	6
 13207  0716  0187               	clrf	7
 13208  0717  0836               	movf	??_sprintf,w
 13209  0718  0081               	movwf	1
 13210  0719                     l4802:
 13211  0719  3001               	movlw	1
 13212  071A  00B6               	movwf	??_sprintf
 13213  071B  0836               	movf	??_sprintf,w
 13214  071C  07C2               	addwf	sprintf@sp,f
 13215  071D                     l4804:
 13216  071D  30FF               	movlw	255
 13217  071E  00B6               	movwf	??_sprintf
 13218  071F  0836               	movf	??_sprintf,w
 13219  0720  07BB               	addwf	sprintf@prec,f
 13220  0721  0A3B               	incf	sprintf@prec,w
 13221  0722  1D03               	btfss	3,2
 13222  0723  2F25               	goto	u4241
 13223  0724  2F26               	goto	u4240
 13224  0725                     u4241:
 13225  0725  2EEA               	goto	l4798
 13226  0726                     u4240:
 13227  0726                     l4806:
 13228  0726  082F               	movf	sprintf@f+1,w
 13229  0727  00B7               	movwf	??_sprintf+1
 13230  0728  082E               	movf	sprintf@f,w
 13231  0729  00B6               	movwf	??_sprintf
 13232  072A  0AAE               	incf	sprintf@f,f
 13233  072B  1903               	skipnz
 13234  072C  0AAF               	incf	sprintf@f+1,f
 13235  072D  0836               	movf	??_sprintf,w
 13236  072E  0084               	movwf	4
 13237  072F  0837               	movf	??_sprintf+1,w
 13238  0730  0085               	movwf	5
 13239  0731  0800               	movf	0,w	;code access
 13240  0732  00B8               	movwf	??_sprintf+2
 13241  0733  0838               	movf	??_sprintf+2,w
 13242  0734  00C1               	movwf	sprintf@c
 13243  0735  0841               	movf	sprintf@c,w
 13244  0736  1D03               	btfss	3,2
 13245  0737  2F39               	goto	u4251
 13246  0738  2F3A               	goto	u4250
 13247  0739                     u4251:
 13248  0739  2DA8               	goto	l4704
 13249  073A                     u4250:
 13250  073A                     l4808:
 13251                           
 13252                           ;doprnt.c: 1564: *sp = 0;
 13253  073A  0842               	movf	sprintf@sp,w
 13254  073B  0086               	movwf	6
 13255  073C  0187               	clrf	7
 13256  073D  0181               	clrf	1
 13257  073E                     l1773:
 13258  073E  0008               	return
 13259  073F                     __end_of_sprintf:
 13260                           
 13261                           	psect	text13
 13262  0801                     __ptext13:	
 13263 ;; *************** function _isdigit *****************
 13264 ;; Defined at:
 13265 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
 13266 ;; Parameters:    Size  Location     Type
 13267 ;;  c               1    wreg     unsigned char 
 13268 ;; Auto vars:     Size  Location     Type
 13269 ;;  c               1    1[BANK0 ] unsigned char 
 13270 ;; Return value:  Size  Location     Type
 13271 ;;		None               void
 13272 ;; Registers used:
 13273 ;;		wreg, status,2, status,0
 13274 ;; Tracked objects:
 13275 ;;		On entry : 0/0
 13276 ;;		On exit  : 0/0
 13277 ;;		Unchanged: 0/0
 13278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13282 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13283 ;;Total ram usage:        2 bytes
 13284 ;; Hardware stack levels used:    1
 13285 ;; Hardware stack levels required when called:    4
 13286 ;; This function calls:
 13287 ;;		Nothing
 13288 ;; This function is called by:
 13289 ;;		_sprintf
 13290 ;; This function uses a non-reentrant model
 13291 ;;
 13292                           
 13293                           
 13294                           ;psect for function _isdigit
 13295  0801                     _isdigit:
 13296                           
 13297                           ;incstack = 0
 13298                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 13299                           ;isdigit@c stored from wreg
 13300  0801  0020               	movlb	0	; select bank0
 13301  0802  00A1               	movwf	isdigit@c
 13302  0803                     l4510:
 13303  0803  01A0               	clrf	_isdigit$2988
 13304  0804                     l4512:
 13305  0804  303A               	movlw	58
 13306  0805  0221               	subwf	isdigit@c,w
 13307  0806  1803               	skipnc
 13308  0807  2809               	goto	u3581
 13309  0808  280A               	goto	u3580
 13310  0809                     u3581:
 13311  0809  2812               	goto	l4518
 13312  080A                     u3580:
 13313  080A                     l4514:
 13314  080A  3030               	movlw	48
 13315  080B  0221               	subwf	isdigit@c,w
 13316  080C  1C03               	skipc
 13317  080D  280F               	goto	u3591
 13318  080E  2810               	goto	u3590
 13319  080F                     u3591:
 13320  080F  2812               	goto	l4518
 13321  0810                     u3590:
 13322  0810                     l4516:
 13323  0810  01A0               	clrf	_isdigit$2988
 13324  0811  0AA0               	incf	_isdigit$2988,f
 13325  0812                     l4518:
 13326  0812  0C20               	rrf	_isdigit$2988,w
 13327  0813                     l2230:
 13328  0813  0008               	return
 13329  0814                     __end_of_isdigit:
 13330                           
 13331                           	psect	text14
 13332  13C6                     __ptext14:	
 13333 ;; *************** function ___lwmod *****************
 13334 ;; Defined at:
 13335 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
 13336 ;; Parameters:    Size  Location     Type
 13337 ;;  divisor         2    8[BANK0 ] unsigned int 
 13338 ;;  dividend        2   10[BANK0 ] unsigned int 
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;  counter         1   13[BANK0 ] unsigned char 
 13341 ;; Return value:  Size  Location     Type
 13342 ;;                  2    8[BANK0 ] unsigned int 
 13343 ;; Registers used:
 13344 ;;		wreg, status,2, status,0
 13345 ;; Tracked objects:
 13346 ;;		On entry : 0/0
 13347 ;;		On exit  : 0/0
 13348 ;;		Unchanged: 0/0
 13349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13350 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13352 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13353 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13354 ;;Total ram usage:        6 bytes
 13355 ;; Hardware stack levels used:    1
 13356 ;; Hardware stack levels required when called:    4
 13357 ;; This function calls:
 13358 ;;		Nothing
 13359 ;; This function is called by:
 13360 ;;		_sprintf
 13361 ;; This function uses a non-reentrant model
 13362 ;;
 13363                           
 13364                           
 13365                           ;psect for function ___lwmod
 13366  13C6                     ___lwmod:
 13367  13C6                     l4562:	
 13368                           ;incstack = 0
 13369                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13370                           
 13371  13C6  0020               	movlb	0	; select bank0
 13372  13C7  0828               	movf	___lwmod@divisor,w
 13373  13C8  0429               	iorwf	___lwmod@divisor+1,w
 13374  13C9  1903               	btfsc	3,2
 13375  13CA  2BCC               	goto	u3711
 13376  13CB  2BCD               	goto	u3710
 13377  13CC                     u3711:
 13378  13CC  2BF6               	goto	l4580
 13379  13CD                     u3710:
 13380  13CD                     l4564:
 13381  13CD  01AD               	clrf	___lwmod@counter
 13382  13CE  0AAD               	incf	___lwmod@counter,f
 13383  13CF  2BD9               	goto	l4570
 13384  13D0                     l4566:
 13385  13D0  3001               	movlw	1
 13386  13D1                     u3725:
 13387  13D1  35A8               	lslf	___lwmod@divisor,f
 13388  13D2  0DA9               	rlf	___lwmod@divisor+1,f
 13389  13D3  0B89               	decfsz	9,f
 13390  13D4  2BD1               	goto	u3725
 13391  13D5                     l4568:
 13392  13D5  3001               	movlw	1
 13393  13D6  00AC               	movwf	??___lwmod
 13394  13D7  082C               	movf	??___lwmod,w
 13395  13D8  07AD               	addwf	___lwmod@counter,f
 13396  13D9                     l4570:
 13397  13D9  1FA9               	btfss	___lwmod@divisor+1,7
 13398  13DA  2BDC               	goto	u3731
 13399  13DB  2BDD               	goto	u3730
 13400  13DC                     u3731:
 13401  13DC  2BD0               	goto	l4566
 13402  13DD                     u3730:
 13403  13DD                     l4572:
 13404  13DD  0829               	movf	___lwmod@divisor+1,w
 13405  13DE  022B               	subwf	___lwmod@dividend+1,w
 13406  13DF  1D03               	skipz
 13407  13E0  2BE3               	goto	u3745
 13408  13E1  0828               	movf	___lwmod@divisor,w
 13409  13E2  022A               	subwf	___lwmod@dividend,w
 13410  13E3                     u3745:
 13411  13E3  1C03               	skipc
 13412  13E4  2BE6               	goto	u3741
 13413  13E5  2BE7               	goto	u3740
 13414  13E6                     u3741:
 13415  13E6  2BEB               	goto	l4576
 13416  13E7                     u3740:
 13417  13E7                     l4574:
 13418  13E7  0828               	movf	___lwmod@divisor,w
 13419  13E8  02AA               	subwf	___lwmod@dividend,f
 13420  13E9  0829               	movf	___lwmod@divisor+1,w
 13421  13EA  3BAB               	subwfb	___lwmod@dividend+1,f
 13422  13EB                     l4576:
 13423  13EB  3001               	movlw	1
 13424  13EC                     u3755:
 13425  13EC  36A9               	lsrf	___lwmod@divisor+1,f
 13426  13ED  0CA8               	rrf	___lwmod@divisor,f
 13427  13EE  0B89               	decfsz	9,f
 13428  13EF  2BEC               	goto	u3755
 13429  13F0                     l4578:
 13430  13F0  3001               	movlw	1
 13431  13F1  02AD               	subwf	___lwmod@counter,f
 13432  13F2  1D03               	btfss	3,2
 13433  13F3  2BF5               	goto	u3761
 13434  13F4  2BF6               	goto	u3760
 13435  13F5                     u3761:
 13436  13F5  2BDD               	goto	l4572
 13437  13F6                     u3760:
 13438  13F6                     l4580:
 13439  13F6  082B               	movf	___lwmod@dividend+1,w
 13440  13F7  00A9               	movwf	?___lwmod+1
 13441  13F8  082A               	movf	___lwmod@dividend,w
 13442  13F9  00A8               	movwf	?___lwmod
 13443  13FA                     l2059:
 13444  13FA  0008               	return
 13445  13FB                     __end_of___lwmod:
 13446                           
 13447                           	psect	text15
 13448  149D                     __ptext15:	
 13449 ;; *************** function ___lwdiv *****************
 13450 ;; Defined at:
 13451 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;  divisor         2    0[BANK0 ] unsigned int 
 13454 ;;  dividend        2    2[BANK0 ] unsigned int 
 13455 ;; Auto vars:     Size  Location     Type
 13456 ;;  quotient        2    5[BANK0 ] unsigned int 
 13457 ;;  counter         1    7[BANK0 ] unsigned char 
 13458 ;; Return value:  Size  Location     Type
 13459 ;;                  2    0[BANK0 ] unsigned int 
 13460 ;; Registers used:
 13461 ;;		wreg, status,2, status,0
 13462 ;; Tracked objects:
 13463 ;;		On entry : 0/0
 13464 ;;		On exit  : 0/0
 13465 ;;		Unchanged: 0/0
 13466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13467 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13468 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;Total ram usage:        8 bytes
 13472 ;; Hardware stack levels used:    1
 13473 ;; Hardware stack levels required when called:    4
 13474 ;; This function calls:
 13475 ;;		Nothing
 13476 ;; This function is called by:
 13477 ;;		_sprintf
 13478 ;; This function uses a non-reentrant model
 13479 ;;
 13480                           
 13481                           
 13482                           ;psect for function ___lwdiv
 13483  149D                     ___lwdiv:
 13484  149D                     l4536:	
 13485                           ;incstack = 0
 13486                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13487                           
 13488  149D  0020               	movlb	0	; select bank0
 13489  149E  01A5               	clrf	___lwdiv@quotient
 13490  149F  01A6               	clrf	___lwdiv@quotient+1
 13491  14A0                     l4538:
 13492  14A0  0820               	movf	___lwdiv@divisor,w
 13493  14A1  0421               	iorwf	___lwdiv@divisor+1,w
 13494  14A2  1903               	btfsc	3,2
 13495  14A3  2CA5               	goto	u3641
 13496  14A4  2CA6               	goto	u3640
 13497  14A5                     u3641:
 13498  14A5  2CD5               	goto	l4558
 13499  14A6                     u3640:
 13500  14A6                     l4540:
 13501  14A6  01A7               	clrf	___lwdiv@counter
 13502  14A7  0AA7               	incf	___lwdiv@counter,f
 13503  14A8  2CB2               	goto	l4546
 13504  14A9                     l4542:
 13505  14A9  3001               	movlw	1
 13506  14AA                     u3655:
 13507  14AA  35A0               	lslf	___lwdiv@divisor,f
 13508  14AB  0DA1               	rlf	___lwdiv@divisor+1,f
 13509  14AC  0B89               	decfsz	9,f
 13510  14AD  2CAA               	goto	u3655
 13511  14AE                     l4544:
 13512  14AE  3001               	movlw	1
 13513  14AF  00A4               	movwf	??___lwdiv
 13514  14B0  0824               	movf	??___lwdiv,w
 13515  14B1  07A7               	addwf	___lwdiv@counter,f
 13516  14B2                     l4546:
 13517  14B2  1FA1               	btfss	___lwdiv@divisor+1,7
 13518  14B3  2CB5               	goto	u3661
 13519  14B4  2CB6               	goto	u3660
 13520  14B5                     u3661:
 13521  14B5  2CA9               	goto	l4542
 13522  14B6                     u3660:
 13523  14B6                     l4548:
 13524  14B6  3001               	movlw	1
 13525  14B7                     u3675:
 13526  14B7  35A5               	lslf	___lwdiv@quotient,f
 13527  14B8  0DA6               	rlf	___lwdiv@quotient+1,f
 13528  14B9  0B89               	decfsz	9,f
 13529  14BA  2CB7               	goto	u3675
 13530  14BB  0821               	movf	___lwdiv@divisor+1,w
 13531  14BC  0223               	subwf	___lwdiv@dividend+1,w
 13532  14BD  1D03               	skipz
 13533  14BE  2CC1               	goto	u3685
 13534  14BF  0820               	movf	___lwdiv@divisor,w
 13535  14C0  0222               	subwf	___lwdiv@dividend,w
 13536  14C1                     u3685:
 13537  14C1  1C03               	skipc
 13538  14C2  2CC4               	goto	u3681
 13539  14C3  2CC5               	goto	u3680
 13540  14C4                     u3681:
 13541  14C4  2CCA               	goto	l4554
 13542  14C5                     u3680:
 13543  14C5                     l4550:
 13544  14C5  0820               	movf	___lwdiv@divisor,w
 13545  14C6  02A2               	subwf	___lwdiv@dividend,f
 13546  14C7  0821               	movf	___lwdiv@divisor+1,w
 13547  14C8  3BA3               	subwfb	___lwdiv@dividend+1,f
 13548  14C9                     l4552:
 13549  14C9  1425               	bsf	___lwdiv@quotient,0
 13550  14CA                     l4554:
 13551  14CA  3001               	movlw	1
 13552  14CB                     u3695:
 13553  14CB  36A1               	lsrf	___lwdiv@divisor+1,f
 13554  14CC  0CA0               	rrf	___lwdiv@divisor,f
 13555  14CD  0B89               	decfsz	9,f
 13556  14CE  2CCB               	goto	u3695
 13557  14CF                     l4556:
 13558  14CF  3001               	movlw	1
 13559  14D0  02A7               	subwf	___lwdiv@counter,f
 13560  14D1  1D03               	btfss	3,2
 13561  14D2  2CD4               	goto	u3701
 13562  14D3  2CD5               	goto	u3700
 13563  14D4                     u3701:
 13564  14D4  2CB6               	goto	l4548
 13565  14D5                     u3700:
 13566  14D5                     l4558:
 13567  14D5  0826               	movf	___lwdiv@quotient+1,w
 13568  14D6  00A1               	movwf	?___lwdiv+1
 13569  14D7  0825               	movf	___lwdiv@quotient,w
 13570  14D8  00A0               	movwf	?___lwdiv
 13571  14D9                     l2049:
 13572  14D9  0008               	return
 13573  14DA                     __end_of___lwdiv:
 13574                           
 13575                           	psect	text16
 13576  1391                     __ptext16:	
 13577 ;; *************** function _differenceBetweenTimePeriod *****************
 13578 ;; Defined at:
 13579 ;;		line 325 in file "main.c"
 13580 ;; Parameters:    Size  Location     Type
 13581 ;;  start           3    0[BANK0 ] struct Time
 13582 ;;  stop            3    3[BANK0 ] struct Time
 13583 ;;  diff            1    6[BANK0 ] PTR struct Time
 13584 ;;		 -> update_menuLCD@diff(3), 
 13585 ;; Auto vars:     Size  Location     Type
 13586 ;;		None
 13587 ;; Return value:  Size  Location     Type
 13588 ;;                  1    wreg      void 
 13589 ;; Registers used:
 13590 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13591 ;; Tracked objects:
 13592 ;;		On entry : 0/0
 13593 ;;		On exit  : 0/0
 13594 ;;		Unchanged: 0/0
 13595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13596 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;Total ram usage:        8 bytes
 13601 ;; Hardware stack levels used:    1
 13602 ;; Hardware stack levels required when called:    4
 13603 ;; This function calls:
 13604 ;;		Nothing
 13605 ;; This function is called by:
 13606 ;;		_update_menuLCD
 13607 ;; This function uses a non-reentrant model
 13608 ;;
 13609                           
 13610                           
 13611                           ;psect for function _differenceBetweenTimePeriod
 13612  1391                     _differenceBetweenTimePeriod:
 13613  1391                     l4686:	
 13614                           ;incstack = 0
 13615                           ; Regs used in _differenceBetweenTimePeriod: [wreg+fsr1l+fsr1h+status,2+status,0]
 13616                           
 13617                           
 13618                           ;main.c: 328: while (stop.s > start.s) {
 13619  1391  2B98               	goto	l4690
 13620  1392                     l4688:
 13621                           
 13622                           ;main.c: 329: --start.m;
 13623  1392  3001               	movlw	1
 13624  1393  02A1               	subwf	differenceBetweenTimePeriod@start+1,f
 13625                           
 13626                           ;main.c: 330: start.s += 60;
 13627  1394  303C               	movlw	60
 13628  1395  00A7               	movwf	??_differenceBetweenTimePeriod
 13629  1396  0827               	movf	??_differenceBetweenTimePeriod,w
 13630  1397  07A2               	addwf	differenceBetweenTimePeriod@start+2,f
 13631  1398                     l4690:
 13632  1398  0020               	movlb	0	; select bank0
 13633  1399  0825               	movf	differenceBetweenTimePeriod@stop+2,w
 13634  139A  0222               	subwf	differenceBetweenTimePeriod@start+2,w
 13635  139B  1C03               	skipc
 13636  139C  2B9E               	goto	u4061
 13637  139D  2B9F               	goto	u4060
 13638  139E                     u4061:
 13639  139E  2B92               	goto	l4688
 13640  139F                     u4060:
 13641  139F                     l4692:
 13642                           
 13643                           ;main.c: 331: };main.c: 332: diff->s = start.s - stop.s;
 13644  139F  0825               	movf	differenceBetweenTimePeriod@stop+2,w
 13645  13A0  0222               	subwf	differenceBetweenTimePeriod@start+2,w
 13646  13A1  00A7               	movwf	??_differenceBetweenTimePeriod
 13647  13A2  0826               	movf	differenceBetweenTimePeriod@diff,w
 13648  13A3  3E02               	addlw	2
 13649  13A4  0086               	movwf	6
 13650  13A5  0187               	clrf	7
 13651  13A6  0827               	movf	??_differenceBetweenTimePeriod,w
 13652  13A7  0081               	movwf	1
 13653                           
 13654                           ;main.c: 333: while (stop.m > start.m) {
 13655  13A8  2BAF               	goto	l4696
 13656  13A9                     l4694:
 13657                           
 13658                           ;main.c: 334: --start.h;
 13659  13A9  3001               	movlw	1
 13660  13AA  02A0               	subwf	differenceBetweenTimePeriod@start,f
 13661                           
 13662                           ;main.c: 335: start.m += 60;
 13663  13AB  303C               	movlw	60
 13664  13AC  00A7               	movwf	??_differenceBetweenTimePeriod
 13665  13AD  0827               	movf	??_differenceBetweenTimePeriod,w
 13666  13AE  07A1               	addwf	differenceBetweenTimePeriod@start+1,f
 13667  13AF                     l4696:
 13668  13AF  0824               	movf	differenceBetweenTimePeriod@stop+1,w
 13669  13B0  0221               	subwf	differenceBetweenTimePeriod@start+1,w
 13670  13B1  1C03               	skipc
 13671  13B2  2BB4               	goto	u4071
 13672  13B3  2BB5               	goto	u4070
 13673  13B4                     u4071:
 13674  13B4  2BA9               	goto	l4694
 13675  13B5                     u4070:
 13676  13B5                     l4698:
 13677                           
 13678                           ;main.c: 336: };main.c: 337: diff->m = start.m - stop.m;
 13679  13B5  0824               	movf	differenceBetweenTimePeriod@stop+1,w
 13680  13B6  0221               	subwf	differenceBetweenTimePeriod@start+1,w
 13681  13B7  00A7               	movwf	??_differenceBetweenTimePeriod
 13682  13B8  0A26               	incf	differenceBetweenTimePeriod@diff,w
 13683  13B9  0086               	movwf	6
 13684  13BA  0187               	clrf	7
 13685  13BB  0827               	movf	??_differenceBetweenTimePeriod,w
 13686  13BC  0081               	movwf	1
 13687                           
 13688                           ;main.c: 338: diff->h = start.h - stop.h;
 13689  13BD  0823               	movf	differenceBetweenTimePeriod@stop,w
 13690  13BE  0220               	subwf	differenceBetweenTimePeriod@start,w
 13691  13BF  00A7               	movwf	??_differenceBetweenTimePeriod
 13692  13C0  0826               	movf	differenceBetweenTimePeriod@diff,w
 13693  13C1  0086               	movwf	6
 13694  13C2  0187               	clrf	7
 13695  13C3  0827               	movf	??_differenceBetweenTimePeriod,w
 13696  13C4  0081               	movwf	1
 13697  13C5                     l1260:
 13698  13C5  0008               	return
 13699  13C6                     __end_of_differenceBetweenTimePeriod:
 13700                           
 13701                           	psect	text17
 13702  1F6C                     __ptext17:	
 13703 ;; *************** function _TMR2_StopTimer *****************
 13704 ;; Defined at:
 13705 ;;		line 117 in file "mcc_generated_files/tmr2.c"
 13706 ;; Parameters:    Size  Location     Type
 13707 ;;		None
 13708 ;; Auto vars:     Size  Location     Type
 13709 ;;		None
 13710 ;; Return value:  Size  Location     Type
 13711 ;;                  1    wreg      void 
 13712 ;; Registers used:
 13713 ;;		status,2, status,0, pclath, cstack
 13714 ;; Tracked objects:
 13715 ;;		On entry : 0/0
 13716 ;;		On exit  : 0/0
 13717 ;;		Unchanged: 0/0
 13718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;Total ram usage:        0 bytes
 13724 ;; Hardware stack levels used:    1
 13725 ;; Hardware stack levels required when called:    5
 13726 ;; This function calls:
 13727 ;;		_TMR2_Stop
 13728 ;; This function is called by:
 13729 ;;		_update_menuLCD
 13730 ;;		_main
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           
 13735                           ;psect for function _TMR2_StopTimer
 13736  1F6C                     _TMR2_StopTimer:
 13737  1F6C                     l4602:	
 13738                           ;incstack = 0
 13739                           ; Regs used in _TMR2_StopTimer: [status,2+status,0+pclath+cstack]
 13740                           
 13741                           
 13742                           ;tmr2.c: 119: TMR2_Stop();
 13743  1F6C  319F  2765  319F   	fcall	_TMR2_Stop
 13744  1F6F                     l665:
 13745  1F6F  0008               	return
 13746  1F70                     __end_of_TMR2_StopTimer:
 13747                           
 13748                           	psect	text18
 13749  1F65                     __ptext18:	
 13750 ;; *************** function _TMR2_Stop *****************
 13751 ;; Defined at:
 13752 ;;		line 111 in file "mcc_generated_files/tmr2.c"
 13753 ;; Parameters:    Size  Location     Type
 13754 ;;		None
 13755 ;; Auto vars:     Size  Location     Type
 13756 ;;		None
 13757 ;; Return value:  Size  Location     Type
 13758 ;;                  1    wreg      void 
 13759 ;; Registers used:
 13760 ;;		None
 13761 ;; Tracked objects:
 13762 ;;		On entry : 0/0
 13763 ;;		On exit  : 0/0
 13764 ;;		Unchanged: 0/0
 13765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13770 ;;Total ram usage:        0 bytes
 13771 ;; Hardware stack levels used:    1
 13772 ;; Hardware stack levels required when called:    4
 13773 ;; This function calls:
 13774 ;;		Nothing
 13775 ;; This function is called by:
 13776 ;;		_TMR2_StopTimer
 13777 ;; This function uses a non-reentrant model
 13778 ;;
 13779                           
 13780                           
 13781                           ;psect for function _TMR2_Stop
 13782  1F65                     _TMR2_Stop:
 13783  1F65                     l4488:	
 13784                           ;incstack = 0
 13785                           ; Regs used in _TMR2_Stop: []
 13786                           
 13787                           
 13788                           ;tmr2.c: 114: T2CONbits.TMR2ON = 0;
 13789  1F65  0025               	movlb	5	; select bank5
 13790  1F66  138E               	bcf	14,7	;volatile
 13791  1F67                     l662:
 13792  1F67  0008               	return
 13793  1F68                     __end_of_TMR2_Stop:
 13794                           
 13795                           	psect	text19
 13796  1F62                     __ptext19:	
 13797 ;; *************** function _PWM_Output_D4_Disable *****************
 13798 ;; Defined at:
 13799 ;;		line 345 in file "main.c"
 13800 ;; Parameters:    Size  Location     Type
 13801 ;;		None
 13802 ;; Auto vars:     Size  Location     Type
 13803 ;;		None
 13804 ;; Return value:  Size  Location     Type
 13805 ;;                  1    wreg      void 
 13806 ;; Registers used:
 13807 ;;		None
 13808 ;; Tracked objects:
 13809 ;;		On entry : 0/0
 13810 ;;		On exit  : 0/0
 13811 ;;		Unchanged: 0/0
 13812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;Total ram usage:        0 bytes
 13818 ;; Hardware stack levels used:    1
 13819 ;; Hardware stack levels required when called:    4
 13820 ;; This function calls:
 13821 ;;		Nothing
 13822 ;; This function is called by:
 13823 ;;		_update_menuLCD
 13824 ;;		_main
 13825 ;; This function uses a non-reentrant model
 13826 ;;
 13827                           
 13828                           
 13829                           ;psect for function _PWM_Output_D4_Disable
 13830  1F62                     _PWM_Output_D4_Disable:
 13831  1F62                     l4700:	
 13832                           ;incstack = 0
 13833                           ; Regs used in _PWM_Output_D4_Disable: []
 13834                           
 13835                           
 13836                           ;main.c: 346: PWM6EN = 0;
 13837  1F62  0027               	movlb	7	; select bank7
 13838  1F63  138E               	bcf	14,7	;volatile
 13839  1F64                     l1266:
 13840  1F64  0008               	return
 13841  1F65                     __end_of_PWM_Output_D4_Disable:
 13842                           
 13843                           	psect	text20
 13844  10A0                     __ptext20:	
 13845 ;; *************** function _PWM6_LoadDutyValue *****************
 13846 ;; Defined at:
 13847 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 13848 ;; Parameters:    Size  Location     Type
 13849 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 13850 ;; Auto vars:     Size  Location     Type
 13851 ;;		None
 13852 ;; Return value:  Size  Location     Type
 13853 ;;                  1    wreg      void 
 13854 ;; Registers used:
 13855 ;;		wreg, status,2, status,0
 13856 ;; Tracked objects:
 13857 ;;		On entry : 0/0
 13858 ;;		On exit  : 0/0
 13859 ;;		Unchanged: 0/0
 13860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13861 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13865 ;;Total ram usage:        4 bytes
 13866 ;; Hardware stack levels used:    1
 13867 ;; Hardware stack levels required when called:    4
 13868 ;; This function calls:
 13869 ;;		Nothing
 13870 ;; This function is called by:
 13871 ;;		_update_menuLCD
 13872 ;;		_checkFlags
 13873 ;;		_main
 13874 ;; This function uses a non-reentrant model
 13875 ;;
 13876                           
 13877                           
 13878                           ;psect for function _PWM6_LoadDutyValue
 13879  10A0                     _PWM6_LoadDutyValue:
 13880  10A0                     l4598:	
 13881                           ;incstack = 0
 13882                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13883                           
 13884                           
 13885                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 13886  10A0  0020               	movlb	0	; select bank0
 13887  10A1  0821               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 13888  10A2  00A3               	movwf	??_PWM6_LoadDutyValue+1
 13889  10A3  0820               	movf	PWM6_LoadDutyValue@dutyValue,w
 13890  10A4  00A2               	movwf	??_PWM6_LoadDutyValue
 13891  10A5  36A3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13892  10A6  0CA2               	rrf	??_PWM6_LoadDutyValue,f
 13893  10A7  36A3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13894  10A8  0CA2               	rrf	??_PWM6_LoadDutyValue,f
 13895  10A9  0822               	movf	??_PWM6_LoadDutyValue,w
 13896  10AA  0027               	movlb	7	; select bank7
 13897  10AB  008D               	movwf	13	;volatile
 13898                           
 13899                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 13900  10AC  0020               	movlb	0	; select bank0
 13901  10AD  0820               	movf	PWM6_LoadDutyValue@dutyValue,w
 13902  10AE  3903               	andlw	3
 13903  10AF  00A2               	movwf	??_PWM6_LoadDutyValue
 13904  10B0  3005               	movlw	5
 13905  10B1                     u3785:
 13906  10B1  35A2               	lslf	??_PWM6_LoadDutyValue,f
 13907  10B2  3EFF               	addlw	-1
 13908  10B3  1D03               	skipz
 13909  10B4  28B1               	goto	u3785
 13910  10B5  3522               	lslf	??_PWM6_LoadDutyValue,w
 13911  10B6  0027               	movlb	7	; select bank7
 13912  10B7  008C               	movwf	12	;volatile
 13913  10B8                     l620:
 13914  10B8  0008               	return
 13915  10B9                     __end_of_PWM6_LoadDutyValue:
 13916                           
 13917                           	psect	text21
 13918  10EF                     __ptext21:	
 13919 ;; *************** function _LCDstr *****************
 13920 ;; Defined at:
 13921 ;;		line 311 in file "main.c"
 13922 ;; Parameters:    Size  Location     Type
 13923 ;;  p               2    9[BANK0 ] PTR unsigned char 
 13924 ;;		 -> STR_7(4), update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 13925 ;; Auto vars:     Size  Location     Type
 13926 ;;  c               1   14[BANK0 ] unsigned char 
 13927 ;; Return value:  Size  Location     Type
 13928 ;;                  1    wreg      void 
 13929 ;; Registers used:
 13930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13931 ;; Tracked objects:
 13932 ;;		On entry : 0/0
 13933 ;;		On exit  : 0/0
 13934 ;;		Unchanged: 0/0
 13935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13936 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;Total ram usage:        6 bytes
 13941 ;; Hardware stack levels used:    1
 13942 ;; Hardware stack levels required when called:    7
 13943 ;; This function calls:
 13944 ;;		_LCDchar
 13945 ;; This function is called by:
 13946 ;;		_update_menuLCD
 13947 ;; This function uses a non-reentrant model
 13948 ;;
 13949                           
 13950                           
 13951                           ;psect for function _LCDstr
 13952  10EF                     _LCDstr:
 13953  10EF                     l4680:	
 13954                           ;incstack = 0
 13955                           ; Regs used in _LCDstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13956                           
 13957                           
 13958                           ;main.c: 313: unsigned char c;;main.c: 315: while((c = *p++)) LCDchar(c);
 13959  10EF  28F4               	goto	l4684
 13960  10F0                     l4682:
 13961  10F0  082E               	movf	LCDstr@c,w
 13962  10F1  319F  27C7  3190   	fcall	_LCDchar
 13963  10F4                     l4684:
 13964  10F4  0020               	movlb	0	; select bank0
 13965  10F5  082A               	movf	LCDstr@p+1,w
 13966  10F6  00AC               	movwf	??_LCDstr+1
 13967  10F7  0829               	movf	LCDstr@p,w
 13968  10F8  00AB               	movwf	??_LCDstr
 13969  10F9  0AA9               	incf	LCDstr@p,f
 13970  10FA  1903               	skipnz
 13971  10FB  0AAA               	incf	LCDstr@p+1,f
 13972  10FC  082B               	movf	??_LCDstr,w
 13973  10FD  0084               	movwf	4
 13974  10FE  082C               	movf	??_LCDstr+1,w
 13975  10FF  0085               	movwf	5
 13976  1100  0800               	movf	0,w	;code access
 13977  1101  00AD               	movwf	??_LCDstr+2
 13978  1102  082D               	movf	??_LCDstr+2,w
 13979  1103  00AE               	movwf	LCDstr@c
 13980  1104  082E               	movf	LCDstr@c,w
 13981  1105  1D03               	btfss	3,2
 13982  1106  2908               	goto	u4051
 13983  1107  2909               	goto	u4050
 13984  1108                     u4051:
 13985  1108  28F0               	goto	l4682
 13986  1109                     u4050:
 13987  1109                     l1247:
 13988  1109  0008               	return
 13989  110A                     __end_of_LCDstr:
 13990                           
 13991                           	psect	text22
 13992  1FC7                     __ptext22:	
 13993 ;; *************** function _LCDchar *****************
 13994 ;; Defined at:
 13995 ;;		line 306 in file "main.c"
 13996 ;; Parameters:    Size  Location     Type
 13997 ;;  c               1    wreg     unsigned char 
 13998 ;; Auto vars:     Size  Location     Type
 13999 ;;  c               1    8[BANK0 ] unsigned char 
 14000 ;; Return value:  Size  Location     Type
 14001 ;;                  1    wreg      void 
 14002 ;; Registers used:
 14003 ;;		wreg, status,2, status,0, pclath, cstack
 14004 ;; Tracked objects:
 14005 ;;		On entry : 0/0
 14006 ;;		On exit  : 0/0
 14007 ;;		Unchanged: 0/0
 14008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14012 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;Total ram usage:        1 bytes
 14014 ;; Hardware stack levels used:    1
 14015 ;; Hardware stack levels required when called:    6
 14016 ;; This function calls:
 14017 ;;		_LCDsend2x4
 14018 ;; This function is called by:
 14019 ;;		_LCDstr
 14020 ;;		_update_menuLCD
 14021 ;; This function uses a non-reentrant model
 14022 ;;
 14023                           
 14024                           
 14025                           ;psect for function _LCDchar
 14026  1FC7                     _LCDchar:
 14027                           
 14028                           ;incstack = 0
 14029                           ; Regs used in _LCDchar: [wreg+status,2+status,0+pclath+cstack]
 14030                           ;LCDchar@c stored from wreg
 14031  1FC7  0020               	movlb	0	; select bank0
 14032  1FC8  00A8               	movwf	LCDchar@c
 14033  1FC9                     l4508:
 14034                           
 14035                           ;main.c: 308: LCDsend2x4(c, 0x01);
 14036  1FC9  01A2               	clrf	LCDsend2x4@mode
 14037  1FCA  0AA2               	incf	LCDsend2x4@mode,f
 14038  1FCB  0828               	movf	LCDchar@c,w
 14039  1FCC  318A  2237  319F   	fcall	_LCDsend2x4
 14040  1FCF                     l1241:
 14041  1FCF  0008               	return
 14042  1FD0                     __end_of_LCDchar:
 14043                           
 14044                           	psect	text23
 14045  1000                     __ptext23:	
 14046 ;; *************** function _LCDcmd *****************
 14047 ;; Defined at:
 14048 ;;		line 301 in file "main.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;  c               1    wreg     unsigned char 
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;  c               1    8[BANK0 ] unsigned char 
 14053 ;; Return value:  Size  Location     Type
 14054 ;;                  1    wreg      void 
 14055 ;; Registers used:
 14056 ;;		wreg, status,2, status,0, pclath, cstack
 14057 ;; Tracked objects:
 14058 ;;		On entry : 0/0
 14059 ;;		On exit  : 0/0
 14060 ;;		Unchanged: 0/0
 14061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14063 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;Total ram usage:        1 bytes
 14067 ;; Hardware stack levels used:    1
 14068 ;; Hardware stack levels required when called:    6
 14069 ;; This function calls:
 14070 ;;		_LCDsend2x4
 14071 ;; This function is called by:
 14072 ;;		_update_menuLCD
 14073 ;; This function uses a non-reentrant model
 14074 ;;
 14075                           
 14076                           
 14077                           ;psect for function _LCDcmd
 14078  1000                     _LCDcmd:
 14079                           
 14080                           ;incstack = 0
 14081                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
 14082                           ;LCDcmd@c stored from wreg
 14083  1000  0020               	movlb	0	; select bank0
 14084  1001  00A8               	movwf	LCDcmd@c
 14085  1002                     l4678:
 14086                           
 14087                           ;main.c: 303: LCDsend2x4(c, 0);
 14088  1002  01A2               	clrf	LCDsend2x4@mode
 14089  1003  0828               	movf	LCDcmd@c,w
 14090  1004  318A  2237  3190   	fcall	_LCDsend2x4
 14091  1007                     l1238:
 14092  1007  0008               	return
 14093  1008                     __end_of_LCDcmd:
 14094                           
 14095                           	psect	text24
 14096  0E7A                     __ptext24:	
 14097 ;; *************** function _monitoring_TEMP_LUM *****************
 14098 ;; Defined at:
 14099 ;;		line 540 in file "main.c"
 14100 ;; Parameters:    Size  Location     Type
 14101 ;;		None
 14102 ;; Auto vars:     Size  Location     Type
 14103 ;;		None
 14104 ;; Return value:  Size  Location     Type
 14105 ;;                  1    wreg      void 
 14106 ;; Registers used:
 14107 ;;		wreg, status,2, status,0, pclath, cstack
 14108 ;; Tracked objects:
 14109 ;;		On entry : 0/0
 14110 ;;		On exit  : 0/0
 14111 ;;		Unchanged: 0/0
 14112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14117 ;;Total ram usage:        3 bytes
 14118 ;; Hardware stack levels used:    1
 14119 ;; Hardware stack levels required when called:    6
 14120 ;; This function calls:
 14121 ;;		_ADCC_GetSingleConversion
 14122 ;;		_DATAEE_WriteByte
 14123 ;;		___wmul
 14124 ;;		_tsttc
 14125 ;; This function is called by:
 14126 ;;		_checkFlags
 14127 ;; This function uses a non-reentrant model
 14128 ;;
 14129                           
 14130                           
 14131                           ;psect for function _monitoring_TEMP_LUM
 14132  0E7A                     _monitoring_TEMP_LUM:
 14133  0E7A                     l4964:	
 14134                           ;incstack = 0
 14135                           ; Regs used in _monitoring_TEMP_LUM: [wreg+status,2+status,0+pclath+cstack]
 14136                           
 14137                           
 14138                           ;main.c: 541: temp = (uint8_t)tsttc();
 14139  0E7A  318D  252A  318E   	fcall	_tsttc
 14140  0E7D  0020               	movlb	0	; select bank0
 14141  0E7E  00AA               	movwf	??_monitoring_TEMP_LUM
 14142  0E7F  082A               	movf	??_monitoring_TEMP_LUM,w
 14143  0E80  00EE               	movwf	_temp
 14144                           
 14145                           ;main.c: 543: lumLevel = ADCC_GetSingleConversion(channel_ANA0) >> 13;
 14146  0E81  3000               	movlw	0
 14147  0E82  3190  2044  318E   	fcall	_ADCC_GetSingleConversion
 14148  0E85  0020               	movlb	0	; select bank0
 14149  0E86  0820               	movf	?_ADCC_GetSingleConversion,w
 14150  0E87  00AA               	movwf	??_monitoring_TEMP_LUM
 14151  0E88  0821               	movf	?_ADCC_GetSingleConversion+1,w
 14152  0E89  00AB               	movwf	??_monitoring_TEMP_LUM+1
 14153  0E8A  300D               	movlw	13
 14154  0E8B                     u4555:
 14155  0E8B  36AB               	lsrf	??_monitoring_TEMP_LUM+1,f
 14156  0E8C  0CAA               	rrf	??_monitoring_TEMP_LUM,f
 14157  0E8D  0B89               	decfsz	9,f
 14158  0E8E  2E8B               	goto	u4555
 14159  0E8F  082A               	movf	??_monitoring_TEMP_LUM,w
 14160  0E90  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14161  0E91  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14162  0E92  00ED               	movwf	_lumLevel
 14163  0E93                     l4966:
 14164                           
 14165                           ;main.c: 545: if(prevTemp != temp || prevLumLevel != lumLevel){
 14166  0E93  086E               	movf	_temp,w
 14167  0E94  00AA               	movwf	??_monitoring_TEMP_LUM
 14168  0E95  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14169  0E96  0021               	movlb	1	; select bank1
 14170  0E97  0867               	movf	(_prevTemp+1)^(0+128),w
 14171  0E98  0020               	movlb	0	; select bank0
 14172  0E99  062B               	xorwf	??_monitoring_TEMP_LUM+1,w
 14173  0E9A  1D03               	skipz
 14174  0E9B  2EA0               	goto	u4565
 14175  0E9C  0021               	movlb	1	; select bank1
 14176  0E9D  0866               	movf	_prevTemp^(0+128),w
 14177  0E9E  0020               	movlb	0	; select bank0
 14178  0E9F  062A               	xorwf	??_monitoring_TEMP_LUM,w
 14179  0EA0                     u4565:
 14180  0EA0  1D03               	skipz
 14181  0EA1  2EA3               	goto	u4561
 14182  0EA2  2EA4               	goto	u4560
 14183  0EA3                     u4561:
 14184  0EA3  2EB5               	goto	l4970
 14185  0EA4                     u4560:
 14186  0EA4                     l4968:
 14187  0EA4  086D               	movf	_lumLevel,w
 14188  0EA5  00AA               	movwf	??_monitoring_TEMP_LUM
 14189  0EA6  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14190  0EA7  0021               	movlb	1	; select bank1
 14191  0EA8  0865               	movf	(_prevLumLevel+1)^(0+128),w
 14192  0EA9  0020               	movlb	0	; select bank0
 14193  0EAA  062B               	xorwf	??_monitoring_TEMP_LUM+1,w
 14194  0EAB  1D03               	skipz
 14195  0EAC  2EB1               	goto	u4575
 14196  0EAD  0021               	movlb	1	; select bank1
 14197  0EAE  0864               	movf	_prevLumLevel^(0+128),w
 14198  0EAF  0020               	movlb	0	; select bank0
 14199  0EB0  062A               	xorwf	??_monitoring_TEMP_LUM,w
 14200  0EB1                     u4575:
 14201  0EB1  1903               	skipnz
 14202  0EB2  2EB4               	goto	u4571
 14203  0EB3  2EB5               	goto	u4570
 14204  0EB4                     u4571:
 14205  0EB4  2FB3               	goto	l4998
 14206  0EB5                     u4570:
 14207  0EB5                     l4970:
 14208                           
 14209                           ;main.c: 547: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x0 , t.h);
 14210  0EB5  086B               	movf	_iwrite,w
 14211  0EB6  00AA               	movwf	??_monitoring_TEMP_LUM
 14212  0EB7  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14213  0EB8  082A               	movf	??_monitoring_TEMP_LUM,w
 14214  0EB9  00A0               	movwf	___wmul@multiplier
 14215  0EBA  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14216  0EBB  00A1               	movwf	___wmul@multiplier+1
 14217  0EBC  3005               	movlw	5
 14218  0EBD  00A2               	movwf	___wmul@multiplicand
 14219  0EBE  3000               	movlw	0
 14220  0EBF  00A3               	movwf	___wmul@multiplicand+1
 14221  0EC0  3191  21A1  318E   	fcall	___wmul
 14222  0EC3  0020               	movlb	0	; select bank0
 14223  0EC4  0820               	movf	?___wmul,w
 14224  0EC5  3E12               	addlw	18
 14225  0EC6  00A6               	movwf	DATAEE_WriteByte@bAdd
 14226  0EC7  3070               	movlw	112
 14227  0EC8  3D21               	addwfc	?___wmul+1,w
 14228  0EC9  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 14229  0ECA  0865               	movf	_t,w
 14230  0ECB  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14231  0ECC  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14232  0ECD  00A8               	movwf	DATAEE_WriteByte@bData
 14233  0ECE  3192  2249  318E   	fcall	_DATAEE_WriteByte
 14234                           
 14235                           ;main.c: 548: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x1 , t.m);
 14236  0ED1  0020               	movlb	0	; select bank0
 14237  0ED2  086B               	movf	_iwrite,w
 14238  0ED3  00AA               	movwf	??_monitoring_TEMP_LUM
 14239  0ED4  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14240  0ED5  082A               	movf	??_monitoring_TEMP_LUM,w
 14241  0ED6  00A0               	movwf	___wmul@multiplier
 14242  0ED7  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14243  0ED8  00A1               	movwf	___wmul@multiplier+1
 14244  0ED9  3005               	movlw	5
 14245  0EDA  00A2               	movwf	___wmul@multiplicand
 14246  0EDB  3000               	movlw	0
 14247  0EDC  00A3               	movwf	___wmul@multiplicand+1
 14248  0EDD  3191  21A1  318E   	fcall	___wmul
 14249  0EE0  0020               	movlb	0	; select bank0
 14250  0EE1  0820               	movf	?___wmul,w
 14251  0EE2  3E13               	addlw	19
 14252  0EE3  00A6               	movwf	DATAEE_WriteByte@bAdd
 14253  0EE4  3070               	movlw	112
 14254  0EE5  3D21               	addwfc	?___wmul+1,w
 14255  0EE6  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 14256  0EE7  0866               	movf	_t+1,w
 14257  0EE8  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14258  0EE9  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14259  0EEA  00A8               	movwf	DATAEE_WriteByte@bData
 14260  0EEB  3192  2249  318E   	fcall	_DATAEE_WriteByte
 14261                           
 14262                           ;main.c: 549: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x2 , t.s);
 14263  0EEE  0020               	movlb	0	; select bank0
 14264  0EEF  086B               	movf	_iwrite,w
 14265  0EF0  00AA               	movwf	??_monitoring_TEMP_LUM
 14266  0EF1  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14267  0EF2  082A               	movf	??_monitoring_TEMP_LUM,w
 14268  0EF3  00A0               	movwf	___wmul@multiplier
 14269  0EF4  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14270  0EF5  00A1               	movwf	___wmul@multiplier+1
 14271  0EF6  3005               	movlw	5
 14272  0EF7  00A2               	movwf	___wmul@multiplicand
 14273  0EF8  3000               	movlw	0
 14274  0EF9  00A3               	movwf	___wmul@multiplicand+1
 14275  0EFA  3191  21A1  318E   	fcall	___wmul
 14276  0EFD  0020               	movlb	0	; select bank0
 14277  0EFE  0820               	movf	?___wmul,w
 14278  0EFF  3E14               	addlw	20
 14279  0F00  00A6               	movwf	DATAEE_WriteByte@bAdd
 14280  0F01  3070               	movlw	112
 14281  0F02  3D21               	addwfc	?___wmul+1,w
 14282  0F03  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 14283  0F04  0867               	movf	_t+2,w
 14284  0F05  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14285  0F06  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14286  0F07  00A8               	movwf	DATAEE_WriteByte@bData
 14287  0F08  3192  2249  318E   	fcall	_DATAEE_WriteByte
 14288                           
 14289                           ;main.c: 550: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x3 , temp);
 14290  0F0B  0020               	movlb	0	; select bank0
 14291  0F0C  086B               	movf	_iwrite,w
 14292  0F0D  00AA               	movwf	??_monitoring_TEMP_LUM
 14293  0F0E  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14294  0F0F  082A               	movf	??_monitoring_TEMP_LUM,w
 14295  0F10  00A0               	movwf	___wmul@multiplier
 14296  0F11  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14297  0F12  00A1               	movwf	___wmul@multiplier+1
 14298  0F13  3005               	movlw	5
 14299  0F14  00A2               	movwf	___wmul@multiplicand
 14300  0F15  3000               	movlw	0
 14301  0F16  00A3               	movwf	___wmul@multiplicand+1
 14302  0F17  3191  21A1  318E   	fcall	___wmul
 14303  0F1A  0020               	movlb	0	; select bank0
 14304  0F1B  0820               	movf	?___wmul,w
 14305  0F1C  3E15               	addlw	21
 14306  0F1D  00A6               	movwf	DATAEE_WriteByte@bAdd
 14307  0F1E  3070               	movlw	112
 14308  0F1F  3D21               	addwfc	?___wmul+1,w
 14309  0F20  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 14310  0F21  086E               	movf	_temp,w
 14311  0F22  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14312  0F23  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14313  0F24  00A8               	movwf	DATAEE_WriteByte@bData
 14314  0F25  3192  2249  318E   	fcall	_DATAEE_WriteByte
 14315                           
 14316                           ;main.c: 551: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x4 , lumLevel);
 14317  0F28  0020               	movlb	0	; select bank0
 14318  0F29  086B               	movf	_iwrite,w
 14319  0F2A  00AA               	movwf	??_monitoring_TEMP_LUM
 14320  0F2B  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14321  0F2C  082A               	movf	??_monitoring_TEMP_LUM,w
 14322  0F2D  00A0               	movwf	___wmul@multiplier
 14323  0F2E  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14324  0F2F  00A1               	movwf	___wmul@multiplier+1
 14325  0F30  3005               	movlw	5
 14326  0F31  00A2               	movwf	___wmul@multiplicand
 14327  0F32  3000               	movlw	0
 14328  0F33  00A3               	movwf	___wmul@multiplicand+1
 14329  0F34  3191  21A1  318E   	fcall	___wmul
 14330  0F37  0020               	movlb	0	; select bank0
 14331  0F38  0820               	movf	?___wmul,w
 14332  0F39  3E16               	addlw	22
 14333  0F3A  00A6               	movwf	DATAEE_WriteByte@bAdd
 14334  0F3B  3070               	movlw	112
 14335  0F3C  3D21               	addwfc	?___wmul+1,w
 14336  0F3D  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 14337  0F3E  086D               	movf	_lumLevel,w
 14338  0F3F  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14339  0F40  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14340  0F41  00A8               	movwf	DATAEE_WriteByte@bData
 14341  0F42  3192  2249  318E   	fcall	_DATAEE_WriteByte
 14342  0F45                     l4972:
 14343                           
 14344                           ;main.c: 553: if(maxReadings == NREG){
 14345  0F45  0021               	movlb	1	; select bank1
 14346  0F46  0832               	movf	_maxReadings^(0+128),w
 14347  0F47  067D               	xorwf	_NREG,w
 14348  0F48  1D03               	skipz
 14349  0F49  2F4B               	goto	u4581
 14350  0F4A  2F4C               	goto	u4580
 14351  0F4B                     u4581:
 14352  0F4B  2F52               	goto	l4976
 14353  0F4C                     u4580:
 14354  0F4C                     l4974:
 14355                           
 14356                           ;main.c: 554: iread++;
 14357  0F4C  3001               	movlw	1
 14358  0F4D  0020               	movlb	0	; select bank0
 14359  0F4E  00AA               	movwf	??_monitoring_TEMP_LUM
 14360  0F4F  082A               	movf	??_monitoring_TEMP_LUM,w
 14361  0F50  07EC               	addwf	_iread,f
 14362                           
 14363                           ;main.c: 555: } else {
 14364  0F51  2F58               	goto	l1339
 14365  0F52                     l4976:
 14366                           
 14367                           ;main.c: 556: maxReadings++;
 14368  0F52  3001               	movlw	1
 14369  0F53  0020               	movlb	0	; select bank0
 14370  0F54  00AA               	movwf	??_monitoring_TEMP_LUM
 14371  0F55  082A               	movf	??_monitoring_TEMP_LUM,w
 14372  0F56  0021               	movlb	1	; select bank1
 14373  0F57  07B2               	addwf	_maxReadings^(0+128),f
 14374  0F58                     l1339:
 14375                           
 14376                           ;main.c: 557: };main.c: 559: iwrite++;
 14377  0F58  3001               	movlw	1
 14378  0F59  0020               	movlb	0	; select bank0
 14379  0F5A  00AA               	movwf	??_monitoring_TEMP_LUM
 14380  0F5B  082A               	movf	??_monitoring_TEMP_LUM,w
 14381  0F5C  07EB               	addwf	_iwrite,f
 14382  0F5D                     l4978:
 14383                           
 14384                           ;main.c: 560: if(iwrite > NREG - 1){
 14385  0F5D  087D               	movf	_NREG,w
 14386  0F5E  3EFF               	addlw	255
 14387  0F5F  00AA               	movwf	??_monitoring_TEMP_LUM
 14388  0F60  30FF               	movlw	255
 14389  0F61  1803               	skipnc
 14390  0F62  3000               	movlw	0
 14391  0F63  00AB               	movwf	??_monitoring_TEMP_LUM+1
 14392  0F64  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14393  0F65  3A80               	xorlw	128
 14394  0F66  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14395  0F67  3080               	movlw	128
 14396  0F68  022C               	subwf	??_monitoring_TEMP_LUM+2,w
 14397  0F69  1D03               	skipz
 14398  0F6A  2F6D               	goto	u4595
 14399  0F6B  086B               	movf	_iwrite,w
 14400  0F6C  022A               	subwf	??_monitoring_TEMP_LUM,w
 14401  0F6D                     u4595:
 14402  0F6D  1803               	skipnc
 14403  0F6E  2F70               	goto	u4591
 14404  0F6F  2F71               	goto	u4590
 14405  0F70                     u4591:
 14406  0F70  2F76               	goto	l4984
 14407  0F71                     u4590:
 14408  0F71                     l4980:
 14409                           
 14410                           ;main.c: 561: flagNr = 1;
 14411  0F71  0021               	movlb	1	; select bank1
 14412  0F72  01B3               	clrf	_flagNr^(0+128)
 14413  0F73  0AB3               	incf	_flagNr^(0+128),f
 14414  0F74                     l4982:
 14415                           
 14416                           ;main.c: 562: iwrite = 0;
 14417  0F74  0020               	movlb	0	; select bank0
 14418  0F75  01EB               	clrf	_iwrite
 14419  0F76                     l4984:
 14420                           
 14421                           ;main.c: 563: };main.c: 564: if(flagNr){
 14422  0F76  0021               	movlb	1	; select bank1
 14423  0F77  0833               	movf	_flagNr^(0+128),w
 14424  0F78  1903               	btfsc	3,2
 14425  0F79  2F7B               	goto	u4601
 14426  0F7A  2F7C               	goto	u4600
 14427  0F7B                     u4601:
 14428  0F7B  2F82               	goto	l4988
 14429  0F7C                     u4600:
 14430  0F7C                     l4986:
 14431                           
 14432                           ;main.c: 565: nr = NREG;
 14433  0F7C  087D               	movf	_NREG,w
 14434  0F7D  0020               	movlb	0	; select bank0
 14435  0F7E  00AA               	movwf	??_monitoring_TEMP_LUM
 14436  0F7F  082A               	movf	??_monitoring_TEMP_LUM,w
 14437  0F80  00EA               	movwf	_nr
 14438                           
 14439                           ;main.c: 566: } else{
 14440  0F81  2F87               	goto	l4990
 14441  0F82                     l4988:
 14442                           
 14443                           ;main.c: 567: nr++;
 14444  0F82  3001               	movlw	1
 14445  0F83  0020               	movlb	0	; select bank0
 14446  0F84  00AA               	movwf	??_monitoring_TEMP_LUM
 14447  0F85  082A               	movf	??_monitoring_TEMP_LUM,w
 14448  0F86  07EA               	addwf	_nr,f
 14449  0F87                     l4990:
 14450                           
 14451                           ;main.c: 568: };main.c: 570: if(iread > NREG-1){
 14452  0F87  087D               	movf	_NREG,w
 14453  0F88  3EFF               	addlw	255
 14454  0F89  00AA               	movwf	??_monitoring_TEMP_LUM
 14455  0F8A  30FF               	movlw	255
 14456  0F8B  1803               	skipnc
 14457  0F8C  3000               	movlw	0
 14458  0F8D  00AB               	movwf	??_monitoring_TEMP_LUM+1
 14459  0F8E  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14460  0F8F  3A80               	xorlw	128
 14461  0F90  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14462  0F91  3080               	movlw	128
 14463  0F92  022C               	subwf	??_monitoring_TEMP_LUM+2,w
 14464  0F93  1D03               	skipz
 14465  0F94  2F97               	goto	u4615
 14466  0F95  086C               	movf	_iread,w
 14467  0F96  022A               	subwf	??_monitoring_TEMP_LUM,w
 14468  0F97                     u4615:
 14469  0F97  1803               	skipnc
 14470  0F98  2F9A               	goto	u4611
 14471  0F99  2F9B               	goto	u4610
 14472  0F9A                     u4611:
 14473  0F9A  2F9D               	goto	l4994
 14474  0F9B                     u4610:
 14475  0F9B                     l4992:
 14476                           
 14477                           ;main.c: 571: iread = 0;
 14478  0F9B  0020               	movlb	0	; select bank0
 14479  0F9C  01EC               	clrf	_iread
 14480  0F9D                     l4994:
 14481                           
 14482                           ;main.c: 572: };main.c: 574: prevTemp = temp;
 14483  0F9D  0020               	movlb	0	; select bank0
 14484  0F9E  086E               	movf	_temp,w
 14485  0F9F  00AA               	movwf	??_monitoring_TEMP_LUM
 14486  0FA0  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14487  0FA1  082A               	movf	??_monitoring_TEMP_LUM,w
 14488  0FA2  0021               	movlb	1	; select bank1
 14489  0FA3  00E6               	movwf	_prevTemp^(0+128)
 14490  0FA4  0020               	movlb	0	; select bank0
 14491  0FA5  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14492  0FA6  0021               	movlb	1	; select bank1
 14493  0FA7  00E7               	movwf	(_prevTemp+1)^(0+128)
 14494  0FA8                     l4996:
 14495                           
 14496                           ;main.c: 575: prevLumLevel = lumLevel;
 14497  0FA8  0020               	movlb	0	; select bank0
 14498  0FA9  086D               	movf	_lumLevel,w
 14499  0FAA  00AA               	movwf	??_monitoring_TEMP_LUM
 14500  0FAB  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14501  0FAC  082A               	movf	??_monitoring_TEMP_LUM,w
 14502  0FAD  0021               	movlb	1	; select bank1
 14503  0FAE  00E4               	movwf	_prevLumLevel^(0+128)
 14504  0FAF  0020               	movlb	0	; select bank0
 14505  0FB0  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14506  0FB1  0021               	movlb	1	; select bank1
 14507  0FB2  00E5               	movwf	(_prevLumLevel+1)^(0+128)
 14508  0FB3                     l4998:
 14509                           
 14510                           ;main.c: 576: };main.c: 579: if(ALAF == 'A'){
 14511  0FB3  3041               	movlw	65
 14512  0FB4  0020               	movlb	0	; select bank0
 14513  0FB5  066F               	xorwf	_ALAF,w
 14514  0FB6  1D03               	btfss	3,2
 14515  0FB7  2FB9               	goto	u4621
 14516  0FB8  2FBA               	goto	u4620
 14517  0FB9                     u4621:
 14518  0FB9  2FFF               	goto	l1359
 14519  0FBA                     u4620:
 14520  0FBA                     l5000:
 14521                           
 14522                           ;main.c: 581: if((lumAlarm.alarmLum > lumLevel) && (editingLumAlarm == 0)){
 14523  0FBA  0021               	movlb	1	; select bank1
 14524  0FBB  0824               	movf	_lumAlarm^(0+128),w
 14525  0FBC  0020               	movlb	0	; select bank0
 14526  0FBD  026D               	subwf	_lumLevel,w
 14527  0FBE  1803               	skipnc
 14528  0FBF  2FC1               	goto	u4631
 14529  0FC0  2FC2               	goto	u4630
 14530  0FC1                     u4631:
 14531  0FC1  2FDA               	goto	l5014
 14532  0FC2                     u4630:
 14533  0FC2                     l5002:
 14534  0FC2  0021               	movlb	1	; select bank1
 14535  0FC3  0838               	movf	_editingLumAlarm^(0+128),w
 14536  0FC4  1D03               	btfss	3,2
 14537  0FC5  2FC7               	goto	u4641
 14538  0FC6  2FC8               	goto	u4640
 14539  0FC7                     u4641:
 14540  0FC7  2FDA               	goto	l5014
 14541  0FC8                     u4640:
 14542  0FC8                     l5004:
 14543                           
 14544                           ;main.c: 582: if(!lumAlarm.triggered){
 14545  0FC8  0826               	movf	(_lumAlarm^(0+128)+2),w
 14546  0FC9  1D03               	btfss	3,2
 14547  0FCA  2FCC               	goto	u4651
 14548  0FCB  2FCD               	goto	u4650
 14549  0FCC                     u4651:
 14550  0FCC  2FD3               	goto	l5008
 14551  0FCD                     u4650:
 14552  0FCD                     l5006:
 14553                           
 14554                           ;main.c: 583: alarmPWMStart.h = 0xff;
 14555  0FCD  30FF               	movlw	255
 14556  0FCE  0020               	movlb	0	; select bank0
 14557  0FCF  00AA               	movwf	??_monitoring_TEMP_LUM
 14558  0FD0  082A               	movf	??_monitoring_TEMP_LUM,w
 14559  0FD1  0021               	movlb	1	; select bank1
 14560  0FD2  00E1               	movwf	_alarmPWMStart^(0+128)
 14561  0FD3                     l5008:
 14562                           
 14563                           ;main.c: 584: };main.c: 585: lumAlarm.triggered = 1;
 14564  0FD3  01A6               	clrf	(_lumAlarm^(0+128)+2)
 14565  0FD4  0AA6               	incf	(_lumAlarm^(0+128)+2),f
 14566  0FD5                     l5010:
 14567                           
 14568                           ;main.c: 587: lumAlarm.trigger = 1;
 14569  0FD5  01A5               	clrf	(_lumAlarm^(0+128)+1)
 14570  0FD6  0AA5               	incf	(_lumAlarm^(0+128)+1),f
 14571  0FD7                     l5012:
 14572  0FD7  0020               	movlb	0	; select bank0
 14573  0FD8  1616               	bsf	22,4	;volatile
 14574  0FD9  2FDE               	goto	l5018
 14575  0FDA                     l5014:
 14576                           
 14577                           ;main.c: 590: lumAlarm.triggered = 0;
 14578  0FDA  0021               	movlb	1	; select bank1
 14579  0FDB  01A6               	clrf	(_lumAlarm^(0+128)+2)
 14580  0FDC                     l5016:
 14581  0FDC  0020               	movlb	0	; select bank0
 14582  0FDD  1216               	bcf	22,4	;volatile
 14583  0FDE                     l5018:
 14584                           
 14585                           ;main.c: 592: };main.c: 595: if((tempAlarm.alarmTemp < temp) && (editingTempAlarm == 0))
      +                          {
 14586  0FDE  086E               	movf	_temp,w
 14587  0FDF  0021               	movlb	1	; select bank1
 14588  0FE0  0227               	subwf	_tempAlarm^(0+128),w
 14589  0FE1  1803               	skipnc
 14590  0FE2  2FE4               	goto	u4661
 14591  0FE3  2FE5               	goto	u4660
 14592  0FE4                     u4661:
 14593  0FE4  2FFC               	goto	l5032
 14594  0FE5                     u4660:
 14595  0FE5                     l5020:
 14596  0FE5  0839               	movf	_editingTempAlarm^(0+128),w
 14597  0FE6  1D03               	btfss	3,2
 14598  0FE7  2FE9               	goto	u4671
 14599  0FE8  2FEA               	goto	u4670
 14600  0FE9                     u4671:
 14601  0FE9  2FFC               	goto	l5032
 14602  0FEA                     u4670:
 14603  0FEA                     l5022:
 14604                           
 14605                           ;main.c: 596: if(!tempAlarm.triggered){
 14606  0FEA  0829               	movf	(_tempAlarm^(0+128)+2),w
 14607  0FEB  1D03               	btfss	3,2
 14608  0FEC  2FEE               	goto	u4681
 14609  0FED  2FEF               	goto	u4680
 14610  0FEE                     u4681:
 14611  0FEE  2FF5               	goto	l5026
 14612  0FEF                     u4680:
 14613  0FEF                     l5024:
 14614                           
 14615                           ;main.c: 597: alarmPWMStart.h = 0xff;
 14616  0FEF  30FF               	movlw	255
 14617  0FF0  0020               	movlb	0	; select bank0
 14618  0FF1  00AA               	movwf	??_monitoring_TEMP_LUM
 14619  0FF2  082A               	movf	??_monitoring_TEMP_LUM,w
 14620  0FF3  0021               	movlb	1	; select bank1
 14621  0FF4  00E1               	movwf	_alarmPWMStart^(0+128)
 14622  0FF5                     l5026:
 14623                           
 14624                           ;main.c: 598: };main.c: 600: tempAlarm.triggered = 1;
 14625  0FF5  01A9               	clrf	(_tempAlarm^(0+128)+2)
 14626  0FF6  0AA9               	incf	(_tempAlarm^(0+128)+2),f
 14627  0FF7                     l5028:
 14628                           
 14629                           ;main.c: 602: tempAlarm.trigger = 1;
 14630  0FF7  01A8               	clrf	(_tempAlarm^(0+128)+1)
 14631  0FF8  0AA8               	incf	(_tempAlarm^(0+128)+1),f
 14632  0FF9                     l5030:
 14633  0FF9  0020               	movlb	0	; select bank0
 14634  0FFA  1696               	bsf	22,5	;volatile
 14635  0FFB  2FFF               	goto	l1359
 14636  0FFC                     l5032:
 14637                           
 14638                           ;main.c: 606: tempAlarm.triggered = 0;
 14639  0FFC  01A9               	clrf	(_tempAlarm^(0+128)+2)
 14640  0FFD                     l5034:
 14641  0FFD  0020               	movlb	0	; select bank0
 14642  0FFE  1296               	bcf	22,5	;volatile
 14643  0FFF                     l1359:
 14644  0FFF  0008               	return
 14645  1000                     __end_of_monitoring_TEMP_LUM:
 14646                           
 14647                           	psect	text25
 14648  0D2A                     __ptext25:	
 14649 ;; *************** function _tsttc *****************
 14650 ;; Defined at:
 14651 ;;		line 187 in file "main.c"
 14652 ;; Parameters:    Size  Location     Type
 14653 ;;		None
 14654 ;; Auto vars:     Size  Location     Type
 14655 ;;  value           1    3[BANK0 ] unsigned char 
 14656 ;; Return value:  Size  Location     Type
 14657 ;;                  1    wreg      unsigned char 
 14658 ;; Registers used:
 14659 ;;		wreg, status,2, status,0, pclath, cstack
 14660 ;; Tracked objects:
 14661 ;;		On entry : 0/0
 14662 ;;		On exit  : 0/0
 14663 ;;		Unchanged: 0/0
 14664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;Total ram usage:        2 bytes
 14670 ;; Hardware stack levels used:    1
 14671 ;; Hardware stack levels required when called:    5
 14672 ;; This function calls:
 14673 ;;		_ReadI2C
 14674 ;;		_WriteI2C
 14675 ;; This function is called by:
 14676 ;;		_monitoring_TEMP_LUM
 14677 ;; This function uses a non-reentrant model
 14678 ;;
 14679                           
 14680                           
 14681                           ;psect for function _tsttc
 14682  0D2A                     _tsttc:
 14683  0D2A                     l1020:	
 14684                           ;incstack = 0
 14685                           ; Regs used in _tsttc: [wreg+status,2+status,0+pclath+cstack]
 14686                           ;main.c: 189: unsigned char value;;main.c: 190: do{
 14687                           
 14688  0D2A                     l4626:	
 14689                           ;main.c: 191: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14690                           
 14691  0D2A  0023               	movlb	3	; select bank3
 14692  0D2B  0C0F               	rrf	15,w	;volatile
 14693  0D2C  0C89               	rrf	9,f
 14694  0D2D  3901               	andlw	1
 14695  0D2E  0020               	movlb	0	; select bank0
 14696  0D2F  00A2               	movwf	??_tsttc
 14697  0D30  0023               	movlb	3	; select bank3
 14698  0D31  0811               	movf	17,w	;volatile
 14699  0D32  391F               	andlw	31
 14700  0D33  0020               	movlb	0	; select bank0
 14701  0D34  0422               	iorwf	??_tsttc,w
 14702  0D35  1D03               	btfss	3,2
 14703  0D36  2D38               	goto	u3801
 14704  0D37  2D39               	goto	u3800
 14705  0D38                     u3801:
 14706  0D38  2D2A               	goto	l4626
 14707  0D39                     u3800:
 14708  0D39                     l1023:
 14709                           
 14710                           ;main.c: 192: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14711  0D39  0023               	movlb	3	; select bank3
 14712  0D3A  1411               	bsf	17,0	;volatile
 14713  0D3B                     l1024:
 14714  0D3B  1811               	btfsc	17,0	;volatile
 14715  0D3C  2D3E               	goto	u3811
 14716  0D3D  2D3F               	goto	u3810
 14717  0D3E                     u3811:
 14718  0D3E  2D3B               	goto	l1024
 14719  0D3F                     u3810:
 14720  0D3F                     l4628:
 14721  0D3F  0023               	movlb	3	; select bank3
 14722  0D40  0C0F               	rrf	15,w	;volatile
 14723  0D41  0C89               	rrf	9,f
 14724  0D42  3901               	andlw	1
 14725  0D43  0020               	movlb	0	; select bank0
 14726  0D44  00A2               	movwf	??_tsttc
 14727  0D45  0023               	movlb	3	; select bank3
 14728  0D46  0811               	movf	17,w	;volatile
 14729  0D47  391F               	andlw	31
 14730  0D48  0020               	movlb	0	; select bank0
 14731  0D49  0422               	iorwf	??_tsttc,w
 14732  0D4A  1D03               	btfss	3,2
 14733  0D4B  2D4D               	goto	u3821
 14734  0D4C  2D4E               	goto	u3820
 14735  0D4D                     u3821:
 14736  0D4D  2D3F               	goto	l4628
 14737  0D4E                     u3820:
 14738  0D4E                     l4630:
 14739                           
 14740                           ;main.c: 194: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14741  0D4E  309A               	movlw	154
 14742  0D4F  3196  260B  318D   	fcall	_WriteI2C
 14743  0D52                     l4632:
 14744  0D52  0023               	movlb	3	; select bank3
 14745  0D53  0C0F               	rrf	15,w	;volatile
 14746  0D54  0C89               	rrf	9,f
 14747  0D55  3901               	andlw	1
 14748  0D56  0020               	movlb	0	; select bank0
 14749  0D57  00A2               	movwf	??_tsttc
 14750  0D58  0023               	movlb	3	; select bank3
 14751  0D59  0811               	movf	17,w	;volatile
 14752  0D5A  391F               	andlw	31
 14753  0D5B  0020               	movlb	0	; select bank0
 14754  0D5C  0422               	iorwf	??_tsttc,w
 14755  0D5D  1D03               	btfss	3,2
 14756  0D5E  2D60               	goto	u3831
 14757  0D5F  2D61               	goto	u3830
 14758  0D60                     u3831:
 14759  0D60  2D52               	goto	l4632
 14760  0D61                     u3830:
 14761  0D61                     l4634:
 14762                           
 14763                           ;main.c: 195: WriteI2C(0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14764  0D61  3001               	movlw	1
 14765  0D62  3196  260B  318D   	fcall	_WriteI2C
 14766  0D65                     l4636:
 14767  0D65  0023               	movlb	3	; select bank3
 14768  0D66  0C0F               	rrf	15,w	;volatile
 14769  0D67  0C89               	rrf	9,f
 14770  0D68  3901               	andlw	1
 14771  0D69  0020               	movlb	0	; select bank0
 14772  0D6A  00A2               	movwf	??_tsttc
 14773  0D6B  0023               	movlb	3	; select bank3
 14774  0D6C  0811               	movf	17,w	;volatile
 14775  0D6D  391F               	andlw	31
 14776  0D6E  0020               	movlb	0	; select bank0
 14777  0D6F  0422               	iorwf	??_tsttc,w
 14778  0D70  1D03               	btfss	3,2
 14779  0D71  2D73               	goto	u3841
 14780  0D72  2D74               	goto	u3840
 14781  0D73                     u3841:
 14782  0D73  2D65               	goto	l4636
 14783  0D74                     u3840:
 14784  0D74                     l1035:
 14785                           
 14786                           ;main.c: 196: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 14787  0D74  0023               	movlb	3	; select bank3
 14788  0D75  1491               	bsf	17,1	;volatile
 14789  0D76                     l1036:
 14790  0D76  1891               	btfsc	17,1	;volatile
 14791  0D77  2D79               	goto	u3851
 14792  0D78  2D7A               	goto	u3850
 14793  0D79                     u3851:
 14794  0D79  2D76               	goto	l1036
 14795  0D7A                     u3850:
 14796  0D7A                     l4638:
 14797  0D7A  0023               	movlb	3	; select bank3
 14798  0D7B  0C0F               	rrf	15,w	;volatile
 14799  0D7C  0C89               	rrf	9,f
 14800  0D7D  3901               	andlw	1
 14801  0D7E  0020               	movlb	0	; select bank0
 14802  0D7F  00A2               	movwf	??_tsttc
 14803  0D80  0023               	movlb	3	; select bank3
 14804  0D81  0811               	movf	17,w	;volatile
 14805  0D82  391F               	andlw	31
 14806  0D83  0020               	movlb	0	; select bank0
 14807  0D84  0422               	iorwf	??_tsttc,w
 14808  0D85  1D03               	btfss	3,2
 14809  0D86  2D88               	goto	u3861
 14810  0D87  2D89               	goto	u3860
 14811  0D88                     u3861:
 14812  0D88  2D7A               	goto	l4638
 14813  0D89                     u3860:
 14814  0D89                     l4640:
 14815                           
 14816                           ;main.c: 197: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14817  0D89  309B               	movlw	155
 14818  0D8A  3196  260B  318D   	fcall	_WriteI2C
 14819  0D8D                     l4642:
 14820  0D8D  0023               	movlb	3	; select bank3
 14821  0D8E  0C0F               	rrf	15,w	;volatile
 14822  0D8F  0C89               	rrf	9,f
 14823  0D90  3901               	andlw	1
 14824  0D91  0020               	movlb	0	; select bank0
 14825  0D92  00A2               	movwf	??_tsttc
 14826  0D93  0023               	movlb	3	; select bank3
 14827  0D94  0811               	movf	17,w	;volatile
 14828  0D95  391F               	andlw	31
 14829  0D96  0020               	movlb	0	; select bank0
 14830  0D97  0422               	iorwf	??_tsttc,w
 14831  0D98  1D03               	btfss	3,2
 14832  0D99  2D9B               	goto	u3871
 14833  0D9A  2D9C               	goto	u3870
 14834  0D9B                     u3871:
 14835  0D9B  2D8D               	goto	l4642
 14836  0D9C                     u3870:
 14837  0D9C                     l4644:
 14838                           
 14839                           ;main.c: 198: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14840  0D9C  3191  2163  318D   	fcall	_ReadI2C
 14841  0D9F  0020               	movlb	0	; select bank0
 14842  0DA0  00A2               	movwf	??_tsttc
 14843  0DA1  0822               	movf	??_tsttc,w
 14844  0DA2  00A3               	movwf	tsttc@value
 14845  0DA3                     l4646:
 14846  0DA3  0023               	movlb	3	; select bank3
 14847  0DA4  0C0F               	rrf	15,w	;volatile
 14848  0DA5  0C89               	rrf	9,f
 14849  0DA6  3901               	andlw	1
 14850  0DA7  0020               	movlb	0	; select bank0
 14851  0DA8  00A2               	movwf	??_tsttc
 14852  0DA9  0023               	movlb	3	; select bank3
 14853  0DAA  0811               	movf	17,w	;volatile
 14854  0DAB  391F               	andlw	31
 14855  0DAC  0020               	movlb	0	; select bank0
 14856  0DAD  0422               	iorwf	??_tsttc,w
 14857  0DAE  1D03               	btfss	3,2
 14858  0DAF  2DB1               	goto	u3881
 14859  0DB0  2DB2               	goto	u3880
 14860  0DB1                     u3881:
 14861  0DB1  2DA3               	goto	l4646
 14862  0DB2                     u3880:
 14863  0DB2                     l1047:
 14864                           
 14865                           ;main.c: 199: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14866  0DB2  0023               	movlb	3	; select bank3
 14867  0DB3  1691               	bsf	17,5	;volatile
 14868  0DB4  1611               	bsf	17,4	;volatile
 14869  0DB5                     l1048:
 14870  0DB5  1A11               	btfsc	17,4	;volatile
 14871  0DB6  2DB8               	goto	u3891
 14872  0DB7  2DB9               	goto	u3890
 14873  0DB8                     u3891:
 14874  0DB8  2DB5               	goto	l1048
 14875  0DB9                     u3890:
 14876  0DB9                     l4648:
 14877  0DB9  0023               	movlb	3	; select bank3
 14878  0DBA  0C0F               	rrf	15,w	;volatile
 14879  0DBB  0C89               	rrf	9,f
 14880  0DBC  3901               	andlw	1
 14881  0DBD  0020               	movlb	0	; select bank0
 14882  0DBE  00A2               	movwf	??_tsttc
 14883  0DBF  0023               	movlb	3	; select bank3
 14884  0DC0  0811               	movf	17,w	;volatile
 14885  0DC1  391F               	andlw	31
 14886  0DC2  0020               	movlb	0	; select bank0
 14887  0DC3  0422               	iorwf	??_tsttc,w
 14888  0DC4  1D03               	btfss	3,2
 14889  0DC5  2DC7               	goto	u3901
 14890  0DC6  2DC8               	goto	u3900
 14891  0DC7                     u3901:
 14892  0DC7  2DB9               	goto	l4648
 14893  0DC8                     u3900:
 14894  0DC8                     l1053:
 14895                           
 14896                           ;main.c: 200: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 14897  0DC8  0023               	movlb	3	; select bank3
 14898  0DC9  1511               	bsf	17,2	;volatile
 14899  0DCA                     l1054:
 14900  0DCA  1911               	btfsc	17,2	;volatile
 14901  0DCB  2DCD               	goto	u3911
 14902  0DCC  2DCE               	goto	u3910
 14903  0DCD                     u3911:
 14904  0DCD  2DCA               	goto	l1054
 14905  0DCE                     u3910:
 14906  0DCE                     l1056:
 14907                           
 14908                           ;main.c: 201: } while (!(value & 0x40));
 14909  0DCE  0020               	movlb	0	; select bank0
 14910  0DCF  1F23               	btfss	tsttc@value,6
 14911  0DD0  2DD2               	goto	u3921
 14912  0DD1  2DD3               	goto	u3920
 14913  0DD2                     u3921:
 14914  0DD2  2D2A               	goto	l1020
 14915  0DD3                     u3920:
 14916  0DD3                     l4650:
 14917  0DD3  0023               	movlb	3	; select bank3
 14918  0DD4  0C0F               	rrf	15,w	;volatile
 14919  0DD5  0C89               	rrf	9,f
 14920  0DD6  3901               	andlw	1
 14921  0DD7  0020               	movlb	0	; select bank0
 14922  0DD8  00A2               	movwf	??_tsttc
 14923  0DD9  0023               	movlb	3	; select bank3
 14924  0DDA  0811               	movf	17,w	;volatile
 14925  0DDB  391F               	andlw	31
 14926  0DDC  0020               	movlb	0	; select bank0
 14927  0DDD  0422               	iorwf	??_tsttc,w
 14928  0DDE  1D03               	btfss	3,2
 14929  0DDF  2DE1               	goto	u3931
 14930  0DE0  2DE2               	goto	u3930
 14931  0DE1                     u3931:
 14932  0DE1  2DD3               	goto	l4650
 14933  0DE2                     u3930:
 14934  0DE2                     l1060:
 14935                           
 14936                           ;main.c: 204: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14937  0DE2  0023               	movlb	3	; select bank3
 14938  0DE3  1411               	bsf	17,0	;volatile
 14939  0DE4                     l1061:
 14940  0DE4  1811               	btfsc	17,0	;volatile
 14941  0DE5  2DE7               	goto	u3941
 14942  0DE6  2DE8               	goto	u3940
 14943  0DE7                     u3941:
 14944  0DE7  2DE4               	goto	l1061
 14945  0DE8                     u3940:
 14946  0DE8                     l4652:
 14947  0DE8  0023               	movlb	3	; select bank3
 14948  0DE9  0C0F               	rrf	15,w	;volatile
 14949  0DEA  0C89               	rrf	9,f
 14950  0DEB  3901               	andlw	1
 14951  0DEC  0020               	movlb	0	; select bank0
 14952  0DED  00A2               	movwf	??_tsttc
 14953  0DEE  0023               	movlb	3	; select bank3
 14954  0DEF  0811               	movf	17,w	;volatile
 14955  0DF0  391F               	andlw	31
 14956  0DF1  0020               	movlb	0	; select bank0
 14957  0DF2  0422               	iorwf	??_tsttc,w
 14958  0DF3  1D03               	btfss	3,2
 14959  0DF4  2DF6               	goto	u3951
 14960  0DF5  2DF7               	goto	u3950
 14961  0DF6                     u3951:
 14962  0DF6  2DE8               	goto	l4652
 14963  0DF7                     u3950:
 14964  0DF7                     l4654:
 14965                           
 14966                           ;main.c: 205: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14967  0DF7  309A               	movlw	154
 14968  0DF8  3196  260B  318D   	fcall	_WriteI2C
 14969  0DFB                     l4656:
 14970  0DFB  0023               	movlb	3	; select bank3
 14971  0DFC  0C0F               	rrf	15,w	;volatile
 14972  0DFD  0C89               	rrf	9,f
 14973  0DFE  3901               	andlw	1
 14974  0DFF  0020               	movlb	0	; select bank0
 14975  0E00  00A2               	movwf	??_tsttc
 14976  0E01  0023               	movlb	3	; select bank3
 14977  0E02  0811               	movf	17,w	;volatile
 14978  0E03  391F               	andlw	31
 14979  0E04  0020               	movlb	0	; select bank0
 14980  0E05  0422               	iorwf	??_tsttc,w
 14981  0E06  1D03               	btfss	3,2
 14982  0E07  2E09               	goto	u3961
 14983  0E08  2E0A               	goto	u3960
 14984  0E09                     u3961:
 14985  0E09  2DFB               	goto	l4656
 14986  0E0A                     u3960:
 14987  0E0A                     l4658:
 14988                           
 14989                           ;main.c: 206: WriteI2C(0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14990  0E0A  3000               	movlw	0
 14991  0E0B  3196  260B  318D   	fcall	_WriteI2C
 14992  0E0E                     l4660:
 14993  0E0E  0023               	movlb	3	; select bank3
 14994  0E0F  0C0F               	rrf	15,w	;volatile
 14995  0E10  0C89               	rrf	9,f
 14996  0E11  3901               	andlw	1
 14997  0E12  0020               	movlb	0	; select bank0
 14998  0E13  00A2               	movwf	??_tsttc
 14999  0E14  0023               	movlb	3	; select bank3
 15000  0E15  0811               	movf	17,w	;volatile
 15001  0E16  391F               	andlw	31
 15002  0E17  0020               	movlb	0	; select bank0
 15003  0E18  0422               	iorwf	??_tsttc,w
 15004  0E19  1D03               	btfss	3,2
 15005  0E1A  2E1C               	goto	u3971
 15006  0E1B  2E1D               	goto	u3970
 15007  0E1C                     u3971:
 15008  0E1C  2E0E               	goto	l4660
 15009  0E1D                     u3970:
 15010  0E1D                     l1072:
 15011                           
 15012                           ;main.c: 207: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 15013  0E1D  0023               	movlb	3	; select bank3
 15014  0E1E  1491               	bsf	17,1	;volatile
 15015  0E1F                     l1073:
 15016  0E1F  1891               	btfsc	17,1	;volatile
 15017  0E20  2E22               	goto	u3981
 15018  0E21  2E23               	goto	u3980
 15019  0E22                     u3981:
 15020  0E22  2E1F               	goto	l1073
 15021  0E23                     u3980:
 15022  0E23                     l4662:
 15023  0E23  0023               	movlb	3	; select bank3
 15024  0E24  0C0F               	rrf	15,w	;volatile
 15025  0E25  0C89               	rrf	9,f
 15026  0E26  3901               	andlw	1
 15027  0E27  0020               	movlb	0	; select bank0
 15028  0E28  00A2               	movwf	??_tsttc
 15029  0E29  0023               	movlb	3	; select bank3
 15030  0E2A  0811               	movf	17,w	;volatile
 15031  0E2B  391F               	andlw	31
 15032  0E2C  0020               	movlb	0	; select bank0
 15033  0E2D  0422               	iorwf	??_tsttc,w
 15034  0E2E  1D03               	btfss	3,2
 15035  0E2F  2E31               	goto	u3991
 15036  0E30  2E32               	goto	u3990
 15037  0E31                     u3991:
 15038  0E31  2E23               	goto	l4662
 15039  0E32                     u3990:
 15040  0E32                     l4664:
 15041                           
 15042                           ;main.c: 208: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15043  0E32  309B               	movlw	155
 15044  0E33  3196  260B  318D   	fcall	_WriteI2C
 15045  0E36                     l4666:
 15046  0E36  0023               	movlb	3	; select bank3
 15047  0E37  0C0F               	rrf	15,w	;volatile
 15048  0E38  0C89               	rrf	9,f
 15049  0E39  3901               	andlw	1
 15050  0E3A  0020               	movlb	0	; select bank0
 15051  0E3B  00A2               	movwf	??_tsttc
 15052  0E3C  0023               	movlb	3	; select bank3
 15053  0E3D  0811               	movf	17,w	;volatile
 15054  0E3E  391F               	andlw	31
 15055  0E3F  0020               	movlb	0	; select bank0
 15056  0E40  0422               	iorwf	??_tsttc,w
 15057  0E41  1D03               	btfss	3,2
 15058  0E42  2E44               	goto	u4001
 15059  0E43  2E45               	goto	u4000
 15060  0E44                     u4001:
 15061  0E44  2E36               	goto	l4666
 15062  0E45                     u4000:
 15063  0E45                     l4668:
 15064                           
 15065                           ;main.c: 209: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15066  0E45  3191  2163  318D   	fcall	_ReadI2C
 15067  0E48  0020               	movlb	0	; select bank0
 15068  0E49  00A2               	movwf	??_tsttc
 15069  0E4A  0822               	movf	??_tsttc,w
 15070  0E4B  00A3               	movwf	tsttc@value
 15071  0E4C                     l4670:
 15072  0E4C  0023               	movlb	3	; select bank3
 15073  0E4D  0C0F               	rrf	15,w	;volatile
 15074  0E4E  0C89               	rrf	9,f
 15075  0E4F  3901               	andlw	1
 15076  0E50  0020               	movlb	0	; select bank0
 15077  0E51  00A2               	movwf	??_tsttc
 15078  0E52  0023               	movlb	3	; select bank3
 15079  0E53  0811               	movf	17,w	;volatile
 15080  0E54  391F               	andlw	31
 15081  0E55  0020               	movlb	0	; select bank0
 15082  0E56  0422               	iorwf	??_tsttc,w
 15083  0E57  1D03               	btfss	3,2
 15084  0E58  2E5A               	goto	u4011
 15085  0E59  2E5B               	goto	u4010
 15086  0E5A                     u4011:
 15087  0E5A  2E4C               	goto	l4670
 15088  0E5B                     u4010:
 15089  0E5B                     l1084:
 15090                           
 15091                           ;main.c: 210: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15092  0E5B  0023               	movlb	3	; select bank3
 15093  0E5C  1691               	bsf	17,5	;volatile
 15094  0E5D  1611               	bsf	17,4	;volatile
 15095  0E5E                     l1085:
 15096  0E5E  1A11               	btfsc	17,4	;volatile
 15097  0E5F  2E61               	goto	u4021
 15098  0E60  2E62               	goto	u4020
 15099  0E61                     u4021:
 15100  0E61  2E5E               	goto	l1085
 15101  0E62                     u4020:
 15102  0E62                     l4672:
 15103  0E62  0023               	movlb	3	; select bank3
 15104  0E63  0C0F               	rrf	15,w	;volatile
 15105  0E64  0C89               	rrf	9,f
 15106  0E65  3901               	andlw	1
 15107  0E66  0020               	movlb	0	; select bank0
 15108  0E67  00A2               	movwf	??_tsttc
 15109  0E68  0023               	movlb	3	; select bank3
 15110  0E69  0811               	movf	17,w	;volatile
 15111  0E6A  391F               	andlw	31
 15112  0E6B  0020               	movlb	0	; select bank0
 15113  0E6C  0422               	iorwf	??_tsttc,w
 15114  0E6D  1D03               	btfss	3,2
 15115  0E6E  2E70               	goto	u4031
 15116  0E6F  2E71               	goto	u4030
 15117  0E70                     u4031:
 15118  0E70  2E62               	goto	l4672
 15119  0E71                     u4030:
 15120  0E71                     l1090:
 15121                           
 15122                           ;main.c: 211: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 15123  0E71  0023               	movlb	3	; select bank3
 15124  0E72  1511               	bsf	17,2	;volatile
 15125  0E73                     l1091:
 15126  0E73  1911               	btfsc	17,2	;volatile
 15127  0E74  2E76               	goto	u4041
 15128  0E75  2E77               	goto	u4040
 15129  0E76                     u4041:
 15130  0E76  2E73               	goto	l1091
 15131  0E77                     u4040:
 15132  0E77                     l4674:
 15133                           
 15134                           ;main.c: 213: return value;
 15135  0E77  0020               	movlb	0	; select bank0
 15136  0E78  0823               	movf	tsttc@value,w
 15137  0E79                     l1094:
 15138  0E79  0008               	return
 15139  0E7A                     __end_of_tsttc:
 15140                           
 15141                           	psect	text26
 15142  1163                     __ptext26:	
 15143 ;; *************** function _ReadI2C *****************
 15144 ;; Defined at:
 15145 ;;		line 32 in file "I2C/i2c.c"
 15146 ;; Parameters:    Size  Location     Type
 15147 ;;		None
 15148 ;; Auto vars:     Size  Location     Type
 15149 ;;		None
 15150 ;; Return value:  Size  Location     Type
 15151 ;;                  1    wreg      unsigned char 
 15152 ;; Registers used:
 15153 ;;		wreg, status,2, status,0
 15154 ;; Tracked objects:
 15155 ;;		On entry : 0/0
 15156 ;;		On exit  : 0/0
 15157 ;;		Unchanged: 0/0
 15158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15163 ;;Total ram usage:        1 bytes
 15164 ;; Hardware stack levels used:    1
 15165 ;; Hardware stack levels required when called:    4
 15166 ;; This function calls:
 15167 ;;		Nothing
 15168 ;; This function is called by:
 15169 ;;		_tsttc
 15170 ;;		_LCDrecv
 15171 ;; This function uses a non-reentrant model
 15172 ;;
 15173                           
 15174                           
 15175                           ;psect for function _ReadI2C
 15176  1163                     _ReadI2C:
 15177  1163                     l4480:	
 15178                           ;incstack = 0
 15179                           ; Regs used in _ReadI2C: [wreg+status,2+status,0]
 15180                           
 15181                           
 15182                           ;i2c.c: 34: if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 15183  1163  300F               	movlw	15
 15184  1164  0023               	movlb	3	; select bank3
 15185  1165  0510               	andwf	16,w	;volatile
 15186  1166  0020               	movlb	0	; select bank0
 15187  1167  00A0               	movwf	??_ReadI2C
 15188  1168  3008               	movlw	8
 15189  1169  0620               	xorwf	??_ReadI2C,w
 15190  116A  1903               	btfsc	3,2
 15191  116B  296D               	goto	u3521
 15192  116C  296E               	goto	u3520
 15193  116D                     u3521:
 15194  116D  2979               	goto	l22
 15195  116E                     u3520:
 15196  116E                     l4482:
 15197  116E  300F               	movlw	15
 15198  116F  0023               	movlb	3	; select bank3
 15199  1170  0510               	andwf	16,w	;volatile
 15200  1171  0020               	movlb	0	; select bank0
 15201  1172  00A0               	movwf	??_ReadI2C
 15202  1173  300B               	movlw	11
 15203  1174  0620               	xorwf	??_ReadI2C,w
 15204  1175  1D03               	btfss	3,2
 15205  1176  2978               	goto	u3531
 15206  1177  2979               	goto	u3530
 15207  1178                     u3531:
 15208  1178  297B               	goto	l23
 15209  1179                     u3530:
 15210  1179                     l22:
 15211                           
 15212                           ;i2c.c: 35: SSP1CON2bits.RCEN = 1;
 15213  1179  0023               	movlb	3	; select bank3
 15214  117A  1591               	bsf	17,3	;volatile
 15215  117B                     l23:
 15216  117B  0023               	movlb	3	; select bank3
 15217  117C  1C0F               	btfss	15,0	;volatile
 15218  117D  297F               	goto	u3541
 15219  117E  2980               	goto	u3540
 15220  117F                     u3541:
 15221  117F  297B               	goto	l23
 15222  1180                     u3540:
 15223  1180                     l4484:
 15224                           
 15225                           ;i2c.c: 37: return ( SSP1BUF );
 15226  1180  080C               	movf	12,w	;volatile
 15227  1181                     l26:
 15228  1181  0008               	return
 15229  1182                     __end_of_ReadI2C:
 15230                           
 15231                           	psect	text27
 15232  1249                     __ptext27:	
 15233 ;; *************** function _DATAEE_WriteByte *****************
 15234 ;; Defined at:
 15235 ;;		line 180 in file "mcc_generated_files/memory.c"
 15236 ;; Parameters:    Size  Location     Type
 15237 ;;  bAdd            2    6[BANK0 ] unsigned int 
 15238 ;;  bData           1    8[BANK0 ] unsigned char 
 15239 ;; Auto vars:     Size  Location     Type
 15240 ;;  GIEBitValue     1    9[BANK0 ] unsigned char 
 15241 ;; Return value:  Size  Location     Type
 15242 ;;                  1    wreg      void 
 15243 ;; Registers used:
 15244 ;;		wreg, status,2, status,0
 15245 ;; Tracked objects:
 15246 ;;		On entry : 0/0
 15247 ;;		On exit  : 0/0
 15248 ;;		Unchanged: 0/0
 15249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15250 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15254 ;;Total ram usage:        4 bytes
 15255 ;; Hardware stack levels used:    1
 15256 ;; Hardware stack levels required when called:    4
 15257 ;; This function calls:
 15258 ;;		Nothing
 15259 ;; This function is called by:
 15260 ;;		_wirteEEPROMinit
 15261 ;;		_monitoring_TEMP_LUM
 15262 ;;		_main
 15263 ;; This function uses a non-reentrant model
 15264 ;;
 15265                           
 15266                           
 15267                           ;psect for function _DATAEE_WriteByte
 15268  1249                     _DATAEE_WriteByte:
 15269  1249                     l4604:	
 15270                           ;incstack = 0
 15271                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 15272                           
 15273                           
 15274                           ;memory.c: 182: uint8_t GIEBitValue = INTCONbits.GIE;
 15275  1249  3000               	movlw	0
 15276  124A  1B8B               	btfsc	11,7	;volatile
 15277  124B  3001               	movlw	1
 15278  124C  0020               	movlb	0	; select bank0
 15279  124D  00A9               	movwf	DATAEE_WriteByte@GIEBitValue
 15280                           
 15281                           ;memory.c: 184: NVMADRH = ((bAdd >> 8) & 0xFF);
 15282  124E  0827               	movf	DATAEE_WriteByte@bAdd+1,w
 15283  124F  0030               	movlb	16	; select bank16
 15284  1250  009B               	movwf	27	;volatile
 15285  1251                     l4606:
 15286                           
 15287                           ;memory.c: 185: NVMADRL = (bAdd & 0xFF);
 15288  1251  0020               	movlb	0	; select bank0
 15289  1252  0826               	movf	DATAEE_WriteByte@bAdd,w
 15290  1253  0030               	movlb	16	; select bank16
 15291  1254  009A               	movwf	26	;volatile
 15292  1255                     l4608:
 15293                           
 15294                           ;memory.c: 186: NVMDATL = bData;
 15295  1255  0020               	movlb	0	; select bank0
 15296  1256  0828               	movf	DATAEE_WriteByte@bData,w
 15297  1257  0030               	movlb	16	; select bank16
 15298  1258  009C               	movwf	28	;volatile
 15299  1259                     l4610:
 15300                           
 15301                           ;memory.c: 187: NVMCON1bits.NVMREGS = 1;
 15302  1259  171E               	bsf	30,6	;volsfr
 15303  125A                     l4612:
 15304                           
 15305                           ;memory.c: 188: NVMCON1bits.WREN = 1;
 15306  125A  151E               	bsf	30,2	;volsfr
 15307  125B                     l4614:
 15308                           
 15309                           ;memory.c: 189: INTCONbits.GIE = 0;
 15310  125B  138B               	bcf	11,7	;volatile
 15311  125C                     l4616:
 15312                           
 15313                           ;memory.c: 190: NVMCON2 = 0x55;
 15314  125C  3055               	movlw	85
 15315  125D  009F               	movwf	31	;volsfr
 15316  125E                     l4618:
 15317                           
 15318                           ;memory.c: 191: NVMCON2 = 0xAA;
 15319  125E  30AA               	movlw	170
 15320  125F  009F               	movwf	31	;volsfr
 15321  1260                     l4620:
 15322                           
 15323                           ;memory.c: 192: NVMCON1bits.WR = 1;
 15324  1260  149E               	bsf	30,1	;volsfr
 15325  1261                     l728:	
 15326                           ;memory.c: 195: {
 15327                           
 15328  1261  189E               	btfsc	30,1	;volsfr
 15329  1262  2A64               	goto	u3791
 15330  1263  2A65               	goto	u3790
 15331  1264                     u3791:
 15332  1264  2A61               	goto	l728
 15333  1265                     u3790:
 15334  1265                     l730:
 15335                           
 15336                           ;memory.c: 196: };memory.c: 198: NVMCON1bits.WREN = 0;
 15337  1265  111E               	bcf	30,2	;volsfr
 15338  1266                     l4622:
 15339                           
 15340                           ;memory.c: 199: INTCONbits.GIE = GIEBitValue;
 15341  1266  0020               	movlb	0	; select bank0
 15342  1267  0C29               	rrf	DATAEE_WriteByte@GIEBitValue,w
 15343  1268  1C03               	skipc
 15344  1269  138B               	bcf	11,7	;volatile
 15345  126A  1803               	skipnc
 15346  126B  178B               	bsf	11,7	;volatile
 15347  126C                     l731:
 15348  126C  0008               	return
 15349  126D                     __end_of_DATAEE_WriteByte:
 15350                           
 15351                           	psect	text28
 15352  1044                     __ptext28:	
 15353 ;; *************** function _ADCC_GetSingleConversion *****************
 15354 ;; Defined at:
 15355 ;;		line 130 in file "mcc_generated_files/adcc.c"
 15356 ;; Parameters:    Size  Location     Type
 15357 ;;  channel         1    wreg     enum E12086
 15358 ;; Auto vars:     Size  Location     Type
 15359 ;;  channel         1    3[BANK0 ] enum E12086
 15360 ;; Return value:  Size  Location     Type
 15361 ;;                  2    0[BANK0 ] unsigned int 
 15362 ;; Registers used:
 15363 ;;		wreg
 15364 ;; Tracked objects:
 15365 ;;		On entry : 0/0
 15366 ;;		On exit  : 0/0
 15367 ;;		Unchanged: 0/0
 15368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15369 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;Total ram usage:        4 bytes
 15374 ;; Hardware stack levels used:    1
 15375 ;; Hardware stack levels required when called:    4
 15376 ;; This function calls:
 15377 ;;		Nothing
 15378 ;; This function is called by:
 15379 ;;		_monitoring_TEMP_LUM
 15380 ;; This function uses a non-reentrant model
 15381 ;;
 15382                           
 15383                           
 15384                           ;psect for function _ADCC_GetSingleConversion
 15385  1044                     _ADCC_GetSingleConversion:
 15386                           
 15387                           ;incstack = 0
 15388                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 15389                           ;ADCC_GetSingleConversion@channel stored from wreg
 15390  1044  0020               	movlb	0	; select bank0
 15391  1045  00A3               	movwf	ADCC_GetSingleConversion@channel
 15392  1046                     l4584:
 15393                           
 15394                           ;adcc.c: 133: ADPCH = channel;
 15395  1046  0823               	movf	ADCC_GetSingleConversion@channel,w
 15396  1047  0021               	movlb	1	; select bank1
 15397  1048  009E               	movwf	30	;volatile
 15398  1049                     l4586:
 15399                           
 15400                           ;adcc.c: 136: ADCON0bits.ADON = 1;
 15401  1049  1793               	bsf	19,7	;volatile
 15402  104A                     l4588:
 15403                           
 15404                           ;adcc.c: 139: ADCON0bits.ADCONT = 0;
 15405  104A  1313               	bcf	19,6	;volatile
 15406  104B                     l4590:
 15407                           
 15408                           ;adcc.c: 142: ADCON0bits.ADGO = 1;
 15409  104B  1413               	bsf	19,0	;volatile
 15410  104C                     l4592:
 15411                           
 15412                           ;adcc.c: 145: __nop();
 15413  104C  0000               	nop
 15414  104D                     l537:	
 15415                           ;adcc.c: 149: {
 15416                           
 15417  104D  0021               	movlb	1	; select bank1
 15418  104E  1813               	btfsc	19,0	;volatile
 15419  104F  2851               	goto	u3771
 15420  1050  2852               	goto	u3770
 15421  1051                     u3771:
 15422  1051  284D               	goto	l537
 15423  1052                     u3770:
 15424  1052                     l4594:
 15425                           
 15426                           ;adcc.c: 150: };adcc.c: 154: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 15427  1052  080D               	movf	13,w	;volatile
 15428  1053  0020               	movlb	0	; select bank0
 15429  1054  00A1               	movwf	?_ADCC_GetSingleConversion+1
 15430  1055  0021               	movlb	1	; select bank1
 15431  1056  080C               	movf	12,w	;volatile
 15432  1057  0020               	movlb	0	; select bank0
 15433  1058  00A0               	movwf	?_ADCC_GetSingleConversion
 15434  1059                     l540:
 15435  1059  0008               	return
 15436  105A                     __end_of_ADCC_GetSingleConversion:
 15437                           
 15438                           	psect	text29
 15439  1F68                     __ptext29:	
 15440 ;; *************** function _TMR2_StartTimer *****************
 15441 ;; Defined at:
 15442 ;;		line 106 in file "mcc_generated_files/tmr2.c"
 15443 ;; Parameters:    Size  Location     Type
 15444 ;;		None
 15445 ;; Auto vars:     Size  Location     Type
 15446 ;;		None
 15447 ;; Return value:  Size  Location     Type
 15448 ;;                  1    wreg      void 
 15449 ;; Registers used:
 15450 ;;		status,2, status,0, pclath, cstack
 15451 ;; Tracked objects:
 15452 ;;		On entry : 0/0
 15453 ;;		On exit  : 0/0
 15454 ;;		Unchanged: 0/0
 15455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15460 ;;Total ram usage:        0 bytes
 15461 ;; Hardware stack levels used:    1
 15462 ;; Hardware stack levels required when called:    5
 15463 ;; This function calls:
 15464 ;;		_TMR2_Start
 15465 ;; This function is called by:
 15466 ;;		_checkFlags
 15467 ;; This function uses a non-reentrant model
 15468 ;;
 15469                           
 15470                           
 15471                           ;psect for function _TMR2_StartTimer
 15472  1F68                     _TMR2_StartTimer:
 15473  1F68                     l4814:	
 15474                           ;incstack = 0
 15475                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
 15476                           
 15477                           
 15478                           ;tmr2.c: 108: TMR2_Start();
 15479  1F68  319F  275F  319F   	fcall	_TMR2_Start
 15480  1F6B                     l659:
 15481  1F6B  0008               	return
 15482  1F6C                     __end_of_TMR2_StartTimer:
 15483                           
 15484                           	psect	text30
 15485  1F5F                     __ptext30:	
 15486 ;; *************** function _TMR2_Start *****************
 15487 ;; Defined at:
 15488 ;;		line 100 in file "mcc_generated_files/tmr2.c"
 15489 ;; Parameters:    Size  Location     Type
 15490 ;;		None
 15491 ;; Auto vars:     Size  Location     Type
 15492 ;;		None
 15493 ;; Return value:  Size  Location     Type
 15494 ;;                  1    wreg      void 
 15495 ;; Registers used:
 15496 ;;		None
 15497 ;; Tracked objects:
 15498 ;;		On entry : 0/0
 15499 ;;		On exit  : 0/0
 15500 ;;		Unchanged: 0/0
 15501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;Total ram usage:        0 bytes
 15507 ;; Hardware stack levels used:    1
 15508 ;; Hardware stack levels required when called:    4
 15509 ;; This function calls:
 15510 ;;		Nothing
 15511 ;; This function is called by:
 15512 ;;		_TMR2_StartTimer
 15513 ;; This function uses a non-reentrant model
 15514 ;;
 15515                           
 15516                           
 15517                           ;psect for function _TMR2_Start
 15518  1F5F                     _TMR2_Start:
 15519  1F5F                     l4600:	
 15520                           ;incstack = 0
 15521                           ; Regs used in _TMR2_Start: []
 15522                           
 15523                           
 15524                           ;tmr2.c: 103: T2CONbits.TMR2ON = 1;
 15525  1F5F  0025               	movlb	5	; select bank5
 15526  1F60  178E               	bsf	14,7	;volatile
 15527  1F61                     l656:
 15528  1F61  0008               	return
 15529  1F62                     __end_of_TMR2_Start:
 15530                           
 15531                           	psect	text31
 15532  1665                     __ptext31:	
 15533 ;; *************** function _S1button *****************
 15534 ;; Defined at:
 15535 ;;		line 612 in file "main.c"
 15536 ;; Parameters:    Size  Location     Type
 15537 ;;		None
 15538 ;; Auto vars:     Size  Location     Type
 15539 ;;		None
 15540 ;; Return value:  Size  Location     Type
 15541 ;;                  1    wreg      void 
 15542 ;; Registers used:
 15543 ;;		wreg, status,2, status,0
 15544 ;; Tracked objects:
 15545 ;;		On entry : 0/0
 15546 ;;		On exit  : 0/0
 15547 ;;		Unchanged: 0/0
 15548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15552 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15553 ;;Total ram usage:        1 bytes
 15554 ;; Hardware stack levels used:    1
 15555 ;; Hardware stack levels required when called:    4
 15556 ;; This function calls:
 15557 ;;		Nothing
 15558 ;; This function is called by:
 15559 ;;		_checkFlags
 15560 ;; This function uses a non-reentrant model
 15561 ;;
 15562                           
 15563                           
 15564                           ;psect for function _S1button
 15565  1665                     _S1button:
 15566  1665                     l5036:	
 15567                           ;incstack = 0
 15568                           ; Regs used in _S1button: [wreg+status,2+status,0]
 15569                           
 15570                           
 15571                           ;main.c: 614: if(modeFlag == 0 && (clkAlarm.trigger || tempAlarm.trigger || lumAlarm.tri
      +                          gger)){
 15572  1665  0020               	movlb	0	; select bank0
 15573  1666  0868               	movf	_modeFlag,w
 15574  1667  0469               	iorwf	_modeFlag+1,w
 15575  1668  1D03               	btfss	3,2
 15576  1669  2E6B               	goto	u4691
 15577  166A  2E6C               	goto	u4690
 15578  166B                     u4691:
 15579  166B  2E82               	goto	l5048
 15580  166C                     u4690:
 15581  166C                     l5038:
 15582  166C  0021               	movlb	1	; select bank1
 15583  166D  0823               	movf	(_clkAlarm^(0+128)+3),w
 15584  166E  1D03               	btfss	3,2
 15585  166F  2E71               	goto	u4701
 15586  1670  2E72               	goto	u4700
 15587  1671                     u4701:
 15588  1671  2E7C               	goto	l5044
 15589  1672                     u4700:
 15590  1672                     l5040:
 15591  1672  0828               	movf	(_tempAlarm^(0+128)+1),w
 15592  1673  1D03               	btfss	3,2
 15593  1674  2E76               	goto	u4711
 15594  1675  2E77               	goto	u4710
 15595  1676                     u4711:
 15596  1676  2E7C               	goto	l5044
 15597  1677                     u4710:
 15598  1677                     l5042:
 15599  1677  0825               	movf	(_lumAlarm^(0+128)+1),w
 15600  1678  1903               	btfsc	3,2
 15601  1679  2E7B               	goto	u4721
 15602  167A  2E7C               	goto	u4720
 15603  167B                     u4721:
 15604  167B  2E82               	goto	l5048
 15605  167C                     u4720:
 15606  167C                     l5044:
 15607                           
 15608                           ;main.c: 615: clkAlarm.trigger = 0;
 15609  167C  01A3               	clrf	(_clkAlarm^(0+128)+3)
 15610                           
 15611                           ;main.c: 616: tempAlarm.trigger = 0;
 15612  167D  01A8               	clrf	(_tempAlarm^(0+128)+1)
 15613                           
 15614                           ;main.c: 617: lumAlarm.trigger = 0;
 15615  167E  01A5               	clrf	(_lumAlarm^(0+128)+1)
 15616  167F                     l5046:
 15617                           
 15618                           ;main.c: 618: updateLCD = 1;
 15619  167F  01E8               	clrf	_updateLCD^(0+128)
 15620  1680  0AE8               	incf	_updateLCD^(0+128),f
 15621                           
 15622                           ;main.c: 619: } else{
 15623  1681  2EB5               	goto	l1365
 15624  1682                     l5048:
 15625                           
 15626                           ;main.c: 620: if(modeFlag == 1){
 15627  1682  0020               	movlb	0	; select bank0
 15628  1683  0368               	decf	_modeFlag,w
 15629  1684  0469               	iorwf	_modeFlag+1,w
 15630  1685  1D03               	btfss	3,2
 15631  1686  2E88               	goto	u4731
 15632  1687  2E89               	goto	u4730
 15633  1688                     u4731:
 15634  1688  2EAA               	goto	l5056
 15635  1689                     u4730:
 15636  1689                     l5050:
 15637                           
 15638                           ;main.c: 621: if(editingClockAlarm >= 1){
 15639  1689  087C               	movf	_editingClockAlarm+1,w
 15640  168A  3A80               	xorlw	128
 15641  168B  00A0               	movwf	??_S1button
 15642  168C  3080               	movlw	128
 15643  168D  0220               	subwf	??_S1button,w
 15644  168E  1D03               	skipz
 15645  168F  2E92               	goto	u4745
 15646  1690  3001               	movlw	1
 15647  1691  027B               	subwf	_editingClockAlarm,w
 15648  1692                     u4745:
 15649  1692  1C03               	skipc
 15650  1693  2E95               	goto	u4741
 15651  1694  2E96               	goto	u4740
 15652  1695                     u4741:
 15653  1695  2E9A               	goto	l1367
 15654  1696                     u4740:
 15655  1696                     l5052:
 15656                           
 15657                           ;main.c: 622: editingClockAlarm++;
 15658  1696  3001               	movlw	1
 15659  1697  07FB               	addwf	_editingClockAlarm,f
 15660  1698  3000               	movlw	0
 15661  1699  3DFC               	addwfc	_editingClockAlarm+1,f
 15662  169A                     l1367:
 15663                           
 15664                           ;main.c: 623: };main.c: 624: if(editingClockAlarm > 3){
 15665  169A  087C               	movf	_editingClockAlarm+1,w
 15666  169B  3A80               	xorlw	128
 15667  169C  0020               	movlb	0	; select bank0
 15668  169D  00A0               	movwf	??_S1button
 15669  169E  3080               	movlw	128
 15670  169F  0220               	subwf	??_S1button,w
 15671  16A0  1D03               	skipz
 15672  16A1  2EA4               	goto	u4755
 15673  16A2  3004               	movlw	4
 15674  16A3  027B               	subwf	_editingClockAlarm,w
 15675  16A4                     u4755:
 15676  16A4  1C03               	skipc
 15677  16A5  2EA7               	goto	u4751
 15678  16A6  2EA8               	goto	u4750
 15679  16A7                     u4751:
 15680  16A7  2EAA               	goto	l5056
 15681  16A8                     u4750:
 15682  16A8                     l5054:
 15683                           
 15684                           ;main.c: 625: editingClockAlarm = 0;
 15685  16A8  01FB               	clrf	_editingClockAlarm
 15686  16A9  01FC               	clrf	_editingClockAlarm+1
 15687  16AA                     l5056:
 15688                           
 15689                           ;main.c: 626: };main.c: 627: };main.c: 628: if(editingClockAlarm == 0){
 15690  16AA  087B               	movf	_editingClockAlarm,w
 15691  16AB  047C               	iorwf	_editingClockAlarm+1,w
 15692  16AC  1D03               	btfss	3,2
 15693  16AD  2EAF               	goto	u4761
 15694  16AE  2EB0               	goto	u4760
 15695  16AF                     u4761:
 15696  16AF  2EB5               	goto	l1365
 15697  16B0                     u4760:
 15698  16B0                     l5058:
 15699                           
 15700                           ;main.c: 629: modeFlag++;
 15701  16B0  3001               	movlw	1
 15702  16B1  0020               	movlb	0	; select bank0
 15703  16B2  07E8               	addwf	_modeFlag,f
 15704  16B3  3000               	movlw	0
 15705  16B4  3DE9               	addwfc	_modeFlag+1,f
 15706  16B5                     l1365:
 15707                           
 15708                           ;main.c: 630: };main.c: 631: };main.c: 632: _delay((unsigned long)((50)*(1000000/4000.0)
      +                          ));
 15709  16B5  3011               	movlw	17
 15710  16B6  0020               	movlb	0	; select bank0
 15711  16B7  00A0               	movwf	??_S1button
 15712  16B8  303A               	movlw	58
 15713  16B9                     u6587:
 15714  16B9  0B89               	decfsz	9,f
 15715  16BA  2EB9               	goto	u6587
 15716  16BB  0BA0               	decfsz	??_S1button,f
 15717  16BC  2EB9               	goto	u6587
 15718  16BD  0000               	nop
 15719  16BE                     l1370:
 15720  16BE  0008               	return
 15721  16BF                     __end_of_S1button:
 15722                           
 15723                           	psect	text32
 15724  1F5C                     __ptext32:	
 15725 ;; *************** function _PWM_Output_D4_Enable *****************
 15726 ;; Defined at:
 15727 ;;		line 341 in file "main.c"
 15728 ;; Parameters:    Size  Location     Type
 15729 ;;		None
 15730 ;; Auto vars:     Size  Location     Type
 15731 ;;		None
 15732 ;; Return value:  Size  Location     Type
 15733 ;;                  1    wreg      void 
 15734 ;; Registers used:
 15735 ;;		None
 15736 ;; Tracked objects:
 15737 ;;		On entry : 0/0
 15738 ;;		On exit  : 0/0
 15739 ;;		Unchanged: 0/0
 15740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15745 ;;Total ram usage:        0 bytes
 15746 ;; Hardware stack levels used:    1
 15747 ;; Hardware stack levels required when called:    4
 15748 ;; This function calls:
 15749 ;;		Nothing
 15750 ;; This function is called by:
 15751 ;;		_checkFlags
 15752 ;; This function uses a non-reentrant model
 15753 ;;
 15754                           
 15755                           
 15756                           ;psect for function _PWM_Output_D4_Enable
 15757  1F5C                     _PWM_Output_D4_Enable:
 15758  1F5C                     l4822:	
 15759                           ;incstack = 0
 15760                           ; Regs used in _PWM_Output_D4_Enable: []
 15761                           
 15762                           
 15763                           ;main.c: 342: PWM6EN = 1;
 15764  1F5C  0027               	movlb	7	; select bank7
 15765  1F5D  178E               	bsf	14,7	;volatile
 15766  1F5E                     l1263:
 15767  1F5E  0008               	return
 15768  1F5F                     __end_of_PWM_Output_D4_Enable:
 15769                           
 15770                           	psect	text33
 15771  0B0B                     __ptext33:	
 15772 ;; *************** function _cmd_trc *****************
 15773 ;; Defined at:
 15774 ;;		line 961 in file "main.c"
 15775 ;; Parameters:    Size  Location     Type
 15776 ;;  num             2   15[BANK0 ] int 
 15777 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 15778 ;;		 -> main@buff(20), 
 15779 ;; Auto vars:     Size  Location     Type
 15780 ;;  buffData        5   24[BANK0 ] unsigned char [5]
 15781 ;;  buffInit        3   29[BANK0 ] unsigned char [3]
 15782 ;;  nRegs           2   39[BANK0 ] int 
 15783 ;;  n               2   37[BANK0 ] int 
 15784 ;;  address         2   34[BANK0 ] unsigned int 
 15785 ;;  i               2   32[BANK0 ] int 
 15786 ;;  j               1   41[BANK0 ] unsigned char 
 15787 ;;  buffEOM         1   36[BANK0 ] unsigned char [1]
 15788 ;; Return value:  Size  Location     Type
 15789 ;;                  1    wreg      void 
 15790 ;; Registers used:
 15791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15792 ;; Tracked objects:
 15793 ;;		On entry : 0/0
 15794 ;;		On exit  : 0/0
 15795 ;;		Unchanged: 0/0
 15796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15797 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15798 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;Total ram usage:       27 bytes
 15802 ;; Hardware stack levels used:    1
 15803 ;; Hardware stack levels required when called:    8
 15804 ;; This function calls:
 15805 ;;		_DATAEE_ReadByte
 15806 ;;		___wmul
 15807 ;;		_sendERRORMessage
 15808 ;;		_sendMessage
 15809 ;; This function is called by:
 15810 ;;		_main
 15811 ;; This function uses a non-reentrant model
 15812 ;;
 15813                           
 15814                           
 15815                           ;psect for function _cmd_trc
 15816  0B0B                     _cmd_trc:
 15817  0B0B                     l5824:	
 15818                           ;incstack = 0
 15819                           ; Regs used in _cmd_trc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15820                           
 15821                           
 15822                           ;main.c: 962: if(num == 4){
 15823  0B0B  3004               	movlw	4
 15824  0B0C  0020               	movlb	0	; select bank0
 15825  0B0D  062F               	xorwf	cmd_trc@num,w
 15826  0B0E  0430               	iorwf	cmd_trc@num+1,w
 15827  0B0F  1D03               	btfss	3,2
 15828  0B10  2B12               	goto	u6001
 15829  0B11  2B13               	goto	u6000
 15830  0B12                     u6001:
 15831  0B12  2BF2               	goto	l5874
 15832  0B13                     u6000:
 15833  0B13                     l5826:
 15834                           
 15835                           ;main.c: 963: int n = buffer[2];
 15836  0B13  0831               	movf	cmd_trc@buffer,w
 15837  0B14  3E02               	addlw	2
 15838  0B15  0086               	movwf	6
 15839  0B16  0187               	clrf	7
 15840  0B17  0801               	movf	1,w
 15841  0B18  00B2               	movwf	??_cmd_trc
 15842  0B19  01B3               	clrf	??_cmd_trc+1
 15843  0B1A  0832               	movf	??_cmd_trc,w
 15844  0B1B  00C5               	movwf	cmd_trc@n
 15845  0B1C  0833               	movf	??_cmd_trc+1,w
 15846  0B1D  00C6               	movwf	cmd_trc@n+1
 15847  0B1E                     l5828:
 15848                           
 15849                           ;main.c: 964: int nRegs = n;
 15850  0B1E  0846               	movf	cmd_trc@n+1,w
 15851  0B1F  00C8               	movwf	cmd_trc@nRegs+1
 15852  0B20  0845               	movf	cmd_trc@n,w
 15853  0B21  00C7               	movwf	cmd_trc@nRegs
 15854  0B22                     l5830:
 15855                           
 15856                           ;main.c: 965: if(n > maxReadings){
 15857  0B22  0846               	movf	cmd_trc@n+1,w
 15858  0B23  3A80               	xorlw	128
 15859  0B24  3C80               	sublw	128
 15860  0B25  1D03               	skipz
 15861  0B26  2B2A               	goto	u6015
 15862  0B27  0845               	movf	cmd_trc@n,w
 15863  0B28  0021               	movlb	1	; select bank1
 15864  0B29  0232               	subwf	_maxReadings^(0+128),w
 15865  0B2A                     u6015:
 15866  0B2A  1803               	skipnc
 15867  0B2B  2B2D               	goto	u6011
 15868  0B2C  2B2E               	goto	u6010
 15869  0B2D                     u6011:
 15870  0B2D  2B37               	goto	l1504
 15871  0B2E                     u6010:
 15872  0B2E                     l5832:
 15873                           
 15874                           ;main.c: 966: nRegs = maxReadings;
 15875  0B2E  0021               	movlb	1	; select bank1
 15876  0B2F  0832               	movf	_maxReadings^(0+128),w
 15877  0B30  0020               	movlb	0	; select bank0
 15878  0B31  00B2               	movwf	??_cmd_trc
 15879  0B32  01B3               	clrf	??_cmd_trc+1
 15880  0B33  0832               	movf	??_cmd_trc,w
 15881  0B34  00C7               	movwf	cmd_trc@nRegs
 15882  0B35  0833               	movf	??_cmd_trc+1,w
 15883  0B36  00C8               	movwf	cmd_trc@nRegs+1
 15884  0B37                     l1504:
 15885                           
 15886                           ;main.c: 967: };main.c: 968: if(nRegs > 10){
 15887  0B37  0020               	movlb	0	; select bank0
 15888  0B38  0848               	movf	cmd_trc@nRegs+1,w
 15889  0B39  3A80               	xorlw	128
 15890  0B3A  00B2               	movwf	??_cmd_trc
 15891  0B3B  3080               	movlw	128
 15892  0B3C  0232               	subwf	??_cmd_trc,w
 15893  0B3D  1D03               	skipz
 15894  0B3E  2B41               	goto	u6025
 15895  0B3F  300B               	movlw	11
 15896  0B40  0247               	subwf	cmd_trc@nRegs,w
 15897  0B41                     u6025:
 15898  0B41  1C03               	skipc
 15899  0B42  2B44               	goto	u6021
 15900  0B43  2B45               	goto	u6020
 15901  0B44                     u6021:
 15902  0B44  2B4A               	goto	l1505
 15903  0B45                     u6020:
 15904  0B45                     l5834:
 15905                           
 15906                           ;main.c: 969: nRegs = 10;
 15907  0B45  300A               	movlw	10
 15908  0B46  0020               	movlb	0	; select bank0
 15909  0B47  00C7               	movwf	cmd_trc@nRegs
 15910  0B48  3000               	movlw	0
 15911  0B49  00C8               	movwf	cmd_trc@nRegs+1
 15912  0B4A                     l1505:
 15913                           
 15914                           ;main.c: 970: };main.c: 971: uint8_t buffInit[3];;main.c: 972: buffInit[0] = (uint8_t)0x
      +                          FD;
 15915  0B4A  30FD               	movlw	253
 15916  0B4B  0020               	movlb	0	; select bank0
 15917  0B4C  00B2               	movwf	??_cmd_trc
 15918  0B4D  0832               	movf	??_cmd_trc,w
 15919  0B4E  00BD               	movwf	cmd_trc@buffInit
 15920                           
 15921                           ;main.c: 973: buffInit[1] = (uint8_t)0XCB;
 15922  0B4F  30CB               	movlw	203
 15923  0B50  00B2               	movwf	??_cmd_trc
 15924  0B51  0832               	movf	??_cmd_trc,w
 15925  0B52  00BE               	movwf	cmd_trc@buffInit+1
 15926                           
 15927                           ;main.c: 974: buffInit[2] = (uint8_t)nRegs;
 15928  0B53  0847               	movf	cmd_trc@nRegs,w
 15929  0B54  00B2               	movwf	??_cmd_trc
 15930  0B55  0832               	movf	??_cmd_trc,w
 15931  0B56  00BF               	movwf	cmd_trc@buffInit+2
 15932  0B57                     l5836:
 15933                           
 15934                           ;main.c: 975: sendMessage(3,buffInit);
 15935  0B57  3003               	movlw	3
 15936  0B58  00A3               	movwf	sendMessage@num
 15937  0B59  3000               	movlw	0
 15938  0B5A  00A4               	movwf	sendMessage@num+1
 15939  0B5B  303D               	movlw	(low (cmd_trc@buffInit| 0))& (0+255)
 15940  0B5C  00B2               	movwf	??_cmd_trc
 15941  0B5D  0832               	movf	??_cmd_trc,w
 15942  0B5E  00A5               	movwf	sendMessage@buffer
 15943  0B5F  3192  2226  318B   	fcall	_sendMessage
 15944  0B62                     l5838:
 15945  0B62                     l5840:
 15946                           
 15947                           ;main.c: 980: for(i = 0; i < nRegs; i++){
 15948  0B62  0020               	movlb	0	; select bank0
 15949  0B63  01C0               	clrf	cmd_trc@i
 15950  0B64  01C1               	clrf	cmd_trc@i+1
 15951  0B65  2BCA               	goto	l5866
 15952  0B66                     l5842:
 15953                           
 15954                           ;main.c: 981: for(j = 0; j < 5; j++){
 15955  0B66  0020               	movlb	0	; select bank0
 15956  0B67  01C9               	clrf	cmd_trc@j
 15957  0B68                     l5848:
 15958                           
 15959                           ;main.c: 982: address = (iread * 0x5) + 0x7012 + j;
 15960  0B68  0849               	movf	cmd_trc@j,w
 15961  0B69  00B2               	movwf	??_cmd_trc
 15962  0B6A  01B3               	clrf	??_cmd_trc+1
 15963  0B6B  086C               	movf	_iread,w
 15964  0B6C  00B4               	movwf	??_cmd_trc+2
 15965  0B6D  01B5               	clrf	??_cmd_trc+3
 15966  0B6E  0834               	movf	??_cmd_trc+2,w
 15967  0B6F  00A0               	movwf	___wmul@multiplier
 15968  0B70  0835               	movf	??_cmd_trc+3,w
 15969  0B71  00A1               	movwf	___wmul@multiplier+1
 15970  0B72  3005               	movlw	5
 15971  0B73  00A2               	movwf	___wmul@multiplicand
 15972  0B74  3000               	movlw	0
 15973  0B75  00A3               	movwf	___wmul@multiplicand+1
 15974  0B76  3191  21A1  318B   	fcall	___wmul
 15975  0B79  0020               	movlb	0	; select bank0
 15976  0B7A  0832               	movf	??_cmd_trc,w
 15977  0B7B  0720               	addwf	?___wmul,w
 15978  0B7C  00B6               	movwf	??_cmd_trc+4
 15979  0B7D  0833               	movf	??_cmd_trc+1,w
 15980  0B7E  3D21               	addwfc	?___wmul+1,w
 15981  0B7F  00B7               	movwf	??_cmd_trc+5
 15982  0B80  0836               	movf	??_cmd_trc+4,w
 15983  0B81  3E12               	addlw	18
 15984  0B82  00C2               	movwf	cmd_trc@address
 15985  0B83  3070               	movlw	112
 15986  0B84  3D37               	addwfc	??_cmd_trc+5,w
 15987  0B85  00C3               	movwf	cmd_trc@address+1
 15988  0B86                     l5850:
 15989                           
 15990                           ;main.c: 983: buffData[j] = DATAEE_ReadByte(address);
 15991  0B86  0843               	movf	cmd_trc@address+1,w
 15992  0B87  00A7               	movwf	DATAEE_ReadByte@bAdd+1
 15993  0B88  0842               	movf	cmd_trc@address,w
 15994  0B89  00A6               	movwf	DATAEE_ReadByte@bAdd
 15995  0B8A  3190  2024  318B   	fcall	_DATAEE_ReadByte
 15996  0B8D  0020               	movlb	0	; select bank0
 15997  0B8E  00B2               	movwf	??_cmd_trc
 15998  0B8F  0849               	movf	cmd_trc@j,w
 15999  0B90  3E38               	addlw	(low (cmd_trc@buffData| 0))& (0+255)
 16000  0B91  0086               	movwf	6
 16001  0B92  0187               	clrf	7
 16002  0B93  0832               	movf	??_cmd_trc,w
 16003  0B94  0081               	movwf	1
 16004  0B95                     l5852:
 16005  0B95  3001               	movlw	1
 16006  0B96  00B2               	movwf	??_cmd_trc
 16007  0B97  0832               	movf	??_cmd_trc,w
 16008  0B98  07C9               	addwf	cmd_trc@j,f
 16009  0B99                     l5854:
 16010  0B99  3005               	movlw	5
 16011  0B9A  0249               	subwf	cmd_trc@j,w
 16012  0B9B  1C03               	skipc
 16013  0B9C  2B9E               	goto	u6031
 16014  0B9D  2B9F               	goto	u6030
 16015  0B9E                     u6031:
 16016  0B9E  2B68               	goto	l5848
 16017  0B9F                     u6030:
 16018  0B9F                     l5856:
 16019                           
 16020                           ;main.c: 984: };main.c: 985: sendMessage(5,buffData);
 16021  0B9F  3005               	movlw	5
 16022  0BA0  00A3               	movwf	sendMessage@num
 16023  0BA1  3000               	movlw	0
 16024  0BA2  00A4               	movwf	sendMessage@num+1
 16025  0BA3  3038               	movlw	(low (cmd_trc@buffData| 0))& (0+255)
 16026  0BA4  00B2               	movwf	??_cmd_trc
 16027  0BA5  0832               	movf	??_cmd_trc,w
 16028  0BA6  00A5               	movwf	sendMessage@buffer
 16029  0BA7  3192  2226  318B   	fcall	_sendMessage
 16030  0BAA                     l5858:
 16031                           
 16032                           ;main.c: 986: iread++;
 16033  0BAA  3001               	movlw	1
 16034  0BAB  0020               	movlb	0	; select bank0
 16035  0BAC  00B2               	movwf	??_cmd_trc
 16036  0BAD  0832               	movf	??_cmd_trc,w
 16037  0BAE  07EC               	addwf	_iread,f
 16038  0BAF                     l5860:
 16039                           
 16040                           ;main.c: 987: if(iread>NREG-1){
 16041  0BAF  087D               	movf	_NREG,w
 16042  0BB0  3EFF               	addlw	255
 16043  0BB1  00B2               	movwf	??_cmd_trc
 16044  0BB2  30FF               	movlw	255
 16045  0BB3  1803               	skipnc
 16046  0BB4  3000               	movlw	0
 16047  0BB5  00B3               	movwf	??_cmd_trc+1
 16048  0BB6  0833               	movf	??_cmd_trc+1,w
 16049  0BB7  3A80               	xorlw	128
 16050  0BB8  00B4               	movwf	??_cmd_trc+2
 16051  0BB9  3080               	movlw	128
 16052  0BBA  0234               	subwf	??_cmd_trc+2,w
 16053  0BBB  1D03               	skipz
 16054  0BBC  2BBF               	goto	u6045
 16055  0BBD  086C               	movf	_iread,w
 16056  0BBE  0232               	subwf	??_cmd_trc,w
 16057  0BBF                     u6045:
 16058  0BBF  1803               	skipnc
 16059  0BC0  2BC2               	goto	u6041
 16060  0BC1  2BC3               	goto	u6040
 16061  0BC2                     u6041:
 16062  0BC2  2BC5               	goto	l5864
 16063  0BC3                     u6040:
 16064  0BC3                     l5862:
 16065                           
 16066                           ;main.c: 988: iread=0;
 16067  0BC3  0020               	movlb	0	; select bank0
 16068  0BC4  01EC               	clrf	_iread
 16069  0BC5                     l5864:
 16070  0BC5  3001               	movlw	1
 16071  0BC6  0020               	movlb	0	; select bank0
 16072  0BC7  07C0               	addwf	cmd_trc@i,f
 16073  0BC8  3000               	movlw	0
 16074  0BC9  3DC1               	addwfc	cmd_trc@i+1,f
 16075  0BCA                     l5866:
 16076  0BCA  0841               	movf	cmd_trc@i+1,w
 16077  0BCB  3A80               	xorlw	128
 16078  0BCC  00B2               	movwf	??_cmd_trc
 16079  0BCD  0848               	movf	cmd_trc@nRegs+1,w
 16080  0BCE  3A80               	xorlw	128
 16081  0BCF  0232               	subwf	??_cmd_trc,w
 16082  0BD0  1D03               	skipz
 16083  0BD1  2BD4               	goto	u6055
 16084  0BD2  0847               	movf	cmd_trc@nRegs,w
 16085  0BD3  0240               	subwf	cmd_trc@i,w
 16086  0BD4                     u6055:
 16087  0BD4  1C03               	skipc
 16088  0BD5  2BD7               	goto	u6051
 16089  0BD6  2BD8               	goto	u6050
 16090  0BD7                     u6051:
 16091  0BD7  2B66               	goto	l5842
 16092  0BD8                     u6050:
 16093  0BD8                     l5868:
 16094                           
 16095                           ;main.c: 989: };main.c: 990: };main.c: 991: maxReadings = maxReadings - nRegs;
 16096  0BD8  0020               	movlb	0	; select bank0
 16097  0BD9  0847               	movf	cmd_trc@nRegs,w
 16098  0BDA  0021               	movlb	1	; select bank1
 16099  0BDB  0232               	subwf	_maxReadings^(0+128),w
 16100  0BDC  0020               	movlb	0	; select bank0
 16101  0BDD  00B2               	movwf	??_cmd_trc
 16102  0BDE  0832               	movf	??_cmd_trc,w
 16103  0BDF  0021               	movlb	1	; select bank1
 16104  0BE0  00B2               	movwf	_maxReadings^(0+128)
 16105  0BE1                     l5870:
 16106                           
 16107                           ;main.c: 992: uint8_t buffEOM[1];;main.c: 993: buffEOM[0] = (uint8_t)0xFE;
 16108  0BE1  30FE               	movlw	254
 16109  0BE2  0020               	movlb	0	; select bank0
 16110  0BE3  00B2               	movwf	??_cmd_trc
 16111  0BE4  0832               	movf	??_cmd_trc,w
 16112  0BE5  00C4               	movwf	cmd_trc@buffEOM
 16113  0BE6                     l5872:
 16114                           
 16115                           ;main.c: 994: sendMessage(1,buffEOM);
 16116  0BE6  3001               	movlw	1
 16117  0BE7  00A3               	movwf	sendMessage@num
 16118  0BE8  3000               	movlw	0
 16119  0BE9  00A4               	movwf	sendMessage@num+1
 16120  0BEA  3044               	movlw	(low (cmd_trc@buffEOM| 0))& (0+255)
 16121  0BEB  00B2               	movwf	??_cmd_trc
 16122  0BEC  0832               	movf	??_cmd_trc,w
 16123  0BED  00A5               	movwf	sendMessage@buffer
 16124  0BEE  3192  2226  318B   	fcall	_sendMessage
 16125                           
 16126                           ;main.c: 995: } else{
 16127  0BF1  2BF6               	goto	l1513
 16128  0BF2                     l5874:
 16129                           
 16130                           ;main.c: 996: sendERRORMessage((uint8_t)0XCB);
 16131  0BF2  30CB               	movlw	203
 16132  0BF3  3191  2126  318B   	fcall	_sendERRORMessage
 16133  0BF6                     l1513:
 16134  0BF6  0008               	return
 16135  0BF7                     __end_of_cmd_trc:
 16136                           
 16137                           	psect	text34
 16138  12DD                     __ptext34:	
 16139 ;; *************** function _cmd_ir *****************
 16140 ;; Defined at:
 16141 ;;		line 948 in file "main.c"
 16142 ;; Parameters:    Size  Location     Type
 16143 ;;  num             2   15[BANK0 ] int 
 16144 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16145 ;;		 -> main@buff(20), 
 16146 ;; Auto vars:     Size  Location     Type
 16147 ;;  buff            7   19[BANK0 ] unsigned char [7]
 16148 ;; Return value:  Size  Location     Type
 16149 ;;                  1    wreg      void 
 16150 ;; Registers used:
 16151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16152 ;; Tracked objects:
 16153 ;;		On entry : 0/0
 16154 ;;		On exit  : 0/0
 16155 ;;		Unchanged: 0/0
 16156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16157 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16158 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16161 ;;Total ram usage:       11 bytes
 16162 ;; Hardware stack levels used:    1
 16163 ;; Hardware stack levels required when called:    7
 16164 ;; This function calls:
 16165 ;;		_sendMessage
 16166 ;; This function is called by:
 16167 ;;		_main
 16168 ;; This function uses a non-reentrant model
 16169 ;;
 16170                           
 16171                           
 16172                           ;psect for function _cmd_ir
 16173  12DD                     _cmd_ir:
 16174  12DD                     l5820:	
 16175                           ;incstack = 0
 16176                           ; Regs used in _cmd_ir: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16177                           
 16178                           
 16179                           ;main.c: 949: uint8_t buff[7];;main.c: 950: buff[0] = (uint8_t)0xFD;
 16180  12DD  30FD               	movlw	253
 16181  12DE  0020               	movlb	0	; select bank0
 16182  12DF  00B2               	movwf	??_cmd_ir
 16183  12E0  0832               	movf	??_cmd_ir,w
 16184  12E1  00B3               	movwf	cmd_ir@buff
 16185                           
 16186                           ;main.c: 951: buff[1] = (uint8_t)0XCA;
 16187  12E2  30CA               	movlw	202
 16188  12E3  00B2               	movwf	??_cmd_ir
 16189  12E4  0832               	movf	??_cmd_ir,w
 16190  12E5  00B4               	movwf	cmd_ir@buff+1
 16191                           
 16192                           ;main.c: 952: buff[2] = NREG;
 16193  12E6  087D               	movf	_NREG,w
 16194  12E7  00B2               	movwf	??_cmd_ir
 16195  12E8  0832               	movf	??_cmd_ir,w
 16196  12E9  00B5               	movwf	cmd_ir@buff+2
 16197                           
 16198                           ;main.c: 953: buff[3] = nr;
 16199  12EA  086A               	movf	_nr,w
 16200  12EB  00B2               	movwf	??_cmd_ir
 16201  12EC  0832               	movf	??_cmd_ir,w
 16202  12ED  00B6               	movwf	cmd_ir@buff+3
 16203                           
 16204                           ;main.c: 954: buff[4] = iread;
 16205  12EE  086C               	movf	_iread,w
 16206  12EF  00B2               	movwf	??_cmd_ir
 16207  12F0  0832               	movf	??_cmd_ir,w
 16208  12F1  00B7               	movwf	cmd_ir@buff+4
 16209                           
 16210                           ;main.c: 955: buff[5] = iwrite;
 16211  12F2  086B               	movf	_iwrite,w
 16212  12F3  00B2               	movwf	??_cmd_ir
 16213  12F4  0832               	movf	??_cmd_ir,w
 16214  12F5  00B8               	movwf	cmd_ir@buff+5
 16215                           
 16216                           ;main.c: 956: buff[6] = (uint8_t)0xFE;
 16217  12F6  30FE               	movlw	254
 16218  12F7  00B2               	movwf	??_cmd_ir
 16219  12F8  0832               	movf	??_cmd_ir,w
 16220  12F9  00B9               	movwf	cmd_ir@buff+6
 16221  12FA                     l5822:
 16222                           
 16223                           ;main.c: 958: sendMessage(7,buff);
 16224  12FA  3007               	movlw	7
 16225  12FB  00A3               	movwf	sendMessage@num
 16226  12FC  3000               	movlw	0
 16227  12FD  00A4               	movwf	sendMessage@num+1
 16228  12FE  3033               	movlw	(low (cmd_ir@buff| 0))& (0+255)
 16229  12FF  00B2               	movwf	??_cmd_ir
 16230  1300  0832               	movf	??_cmd_ir,w
 16231  1301  00A5               	movwf	sendMessage@buffer
 16232  1302  3192  2226  3192   	fcall	_sendMessage
 16233  1305                     l1500:
 16234  1305  0008               	return
 16235  1306                     __end_of_cmd_ir:
 16236                           
 16237                           	psect	text35
 16238  1465                     __ptext35:	
 16239 ;; *************** function _cmd_aa *****************
 16240 ;; Defined at:
 16241 ;;		line 936 in file "main.c"
 16242 ;; Parameters:    Size  Location     Type
 16243 ;;  num             2   15[BANK0 ] int 
 16244 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16245 ;;		 -> main@buff(20), 
 16246 ;; Auto vars:     Size  Location     Type
 16247 ;;		None
 16248 ;; Return value:  Size  Location     Type
 16249 ;;                  1    wreg      void 
 16250 ;; Registers used:
 16251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16252 ;; Tracked objects:
 16253 ;;		On entry : 0/0
 16254 ;;		On exit  : 0/0
 16255 ;;		Unchanged: 0/0
 16256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16257 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16260 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16261 ;;Total ram usage:        4 bytes
 16262 ;; Hardware stack levels used:    1
 16263 ;; Hardware stack levels required when called:    8
 16264 ;; This function calls:
 16265 ;;		_sendERRORMessage
 16266 ;;		_sendOKMessage
 16267 ;; This function is called by:
 16268 ;;		_main
 16269 ;; This function uses a non-reentrant model
 16270 ;;
 16271                           
 16272                           
 16273                           ;psect for function _cmd_aa
 16274  1465                     _cmd_aa:
 16275  1465                     l5802:	
 16276                           ;incstack = 0
 16277                           ; Regs used in _cmd_aa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16278                           
 16279                           
 16280                           ;main.c: 937: if(buffer[2] == 0 && num == 4){
 16281  1465  0020               	movlb	0	; select bank0
 16282  1466  0831               	movf	cmd_aa@buffer,w
 16283  1467  3E02               	addlw	2
 16284  1468  0086               	movwf	6
 16285  1469  0187               	clrf	7
 16286  146A  0801               	movf	1,w
 16287  146B  1D03               	btfss	3,2
 16288  146C  2C6E               	goto	u5961
 16289  146D  2C6F               	goto	u5960
 16290  146E                     u5961:
 16291  146E  2C7F               	goto	l5810
 16292  146F                     u5960:
 16293  146F                     l5804:
 16294  146F  3004               	movlw	4
 16295  1470  062F               	xorwf	cmd_aa@num,w
 16296  1471  0430               	iorwf	cmd_aa@num+1,w
 16297  1472  1D03               	btfss	3,2
 16298  1473  2C75               	goto	u5971
 16299  1474  2C76               	goto	u5970
 16300  1475                     u5971:
 16301  1475  2C7F               	goto	l5810
 16302  1476                     u5970:
 16303  1476                     l5806:
 16304                           
 16305                           ;main.c: 938: ALAF = 'a';
 16306  1476  3061               	movlw	97
 16307  1477  00B2               	movwf	??_cmd_aa
 16308  1478  0832               	movf	??_cmd_aa,w
 16309  1479  00EF               	movwf	_ALAF
 16310  147A                     l5808:
 16311                           
 16312                           ;main.c: 939: sendOKMessage((uint8_t)0XC9);
 16313  147A  30C9               	movlw	201
 16314  147B  3190  20B9  3194   	fcall	_sendOKMessage
 16315                           
 16316                           ;main.c: 940: } else if(buffer[2] == 1 && num == 4){
 16317  147E  2C9C               	goto	l1497
 16318  147F                     l5810:
 16319  147F  0831               	movf	cmd_aa@buffer,w
 16320  1480  3E02               	addlw	2
 16321  1481  0086               	movwf	6
 16322  1482  0187               	clrf	7
 16323  1483  0301               	decf	1,w
 16324  1484  1D03               	btfss	3,2
 16325  1485  2C87               	goto	u5981
 16326  1486  2C88               	goto	u5980
 16327  1487                     u5981:
 16328  1487  2C98               	goto	l5818
 16329  1488                     u5980:
 16330  1488                     l5812:
 16331  1488  3004               	movlw	4
 16332  1489  062F               	xorwf	cmd_aa@num,w
 16333  148A  0430               	iorwf	cmd_aa@num+1,w
 16334  148B  1D03               	btfss	3,2
 16335  148C  2C8E               	goto	u5991
 16336  148D  2C8F               	goto	u5990
 16337  148E                     u5991:
 16338  148E  2C98               	goto	l5818
 16339  148F                     u5990:
 16340  148F                     l5814:
 16341                           
 16342                           ;main.c: 941: ALAF = 'A';
 16343  148F  3041               	movlw	65
 16344  1490  00B2               	movwf	??_cmd_aa
 16345  1491  0832               	movf	??_cmd_aa,w
 16346  1492  00EF               	movwf	_ALAF
 16347  1493                     l5816:
 16348                           
 16349                           ;main.c: 942: sendOKMessage((uint8_t)0XC9);
 16350  1493  30C9               	movlw	201
 16351  1494  3190  20B9  3194   	fcall	_sendOKMessage
 16352                           
 16353                           ;main.c: 943: } else {
 16354  1497  2C9C               	goto	l1497
 16355  1498                     l5818:
 16356                           
 16357                           ;main.c: 944: sendERRORMessage((uint8_t)0XC9);
 16358  1498  30C9               	movlw	201
 16359  1499  3191  2126  3194   	fcall	_sendERRORMessage
 16360  149C                     l1497:
 16361  149C  0008               	return
 16362  149D                     __end_of_cmd_aa:
 16363                           
 16364                           	psect	text36
 16365  15B2                     __ptext36:	
 16366 ;; *************** function _cmd_dtl *****************
 16367 ;; Defined at:
 16368 ;;		line 924 in file "main.c"
 16369 ;; Parameters:    Size  Location     Type
 16370 ;;  num             2   15[BANK0 ] int 
 16371 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16372 ;;		 -> main@buff(20), 
 16373 ;; Auto vars:     Size  Location     Type
 16374 ;;  lumAux          2   22[BANK0 ] int 
 16375 ;;  tempAux         2   20[BANK0 ] int 
 16376 ;; Return value:  Size  Location     Type
 16377 ;;                  1    wreg      void 
 16378 ;; Registers used:
 16379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16380 ;; Tracked objects:
 16381 ;;		On entry : 0/0
 16382 ;;		On exit  : 0/0
 16383 ;;		Unchanged: 0/0
 16384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16385 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16388 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16389 ;;Total ram usage:        9 bytes
 16390 ;; Hardware stack levels used:    1
 16391 ;; Hardware stack levels required when called:    8
 16392 ;; This function calls:
 16393 ;;		_sendERRORMessage
 16394 ;;		_sendOKMessage
 16395 ;; This function is called by:
 16396 ;;		_main
 16397 ;; This function uses a non-reentrant model
 16398 ;;
 16399                           
 16400                           
 16401                           ;psect for function _cmd_dtl
 16402  15B2                     _cmd_dtl:
 16403  15B2                     l5784:	
 16404                           ;incstack = 0
 16405                           ; Regs used in _cmd_dtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16406                           
 16407                           
 16408                           ;main.c: 925: int tempAux = buffer[2];
 16409  15B2  0020               	movlb	0	; select bank0
 16410  15B3  0831               	movf	cmd_dtl@buffer,w
 16411  15B4  3E02               	addlw	2
 16412  15B5  0086               	movwf	6
 16413  15B6  0187               	clrf	7
 16414  15B7  0801               	movf	1,w
 16415  15B8  00B2               	movwf	??_cmd_dtl
 16416  15B9  01B3               	clrf	??_cmd_dtl+1
 16417  15BA  0832               	movf	??_cmd_dtl,w
 16418  15BB  00B4               	movwf	cmd_dtl@tempAux
 16419  15BC  0833               	movf	??_cmd_dtl+1,w
 16420  15BD  00B5               	movwf	cmd_dtl@tempAux+1
 16421                           
 16422                           ;main.c: 926: int lumAux = buffer[3];
 16423  15BE  0831               	movf	cmd_dtl@buffer,w
 16424  15BF  3E03               	addlw	3
 16425  15C0  0086               	movwf	6
 16426  15C1  0187               	clrf	7
 16427  15C2  0801               	movf	1,w
 16428  15C3  00B2               	movwf	??_cmd_dtl
 16429  15C4  01B3               	clrf	??_cmd_dtl+1
 16430  15C5  0832               	movf	??_cmd_dtl,w
 16431  15C6  00B6               	movwf	cmd_dtl@lumAux
 16432  15C7  0833               	movf	??_cmd_dtl+1,w
 16433  15C8  00B7               	movwf	cmd_dtl@lumAux+1
 16434  15C9                     l5786:
 16435                           
 16436                           ;main.c: 927: if((tempAux >= 0 && tempAux < 50) && (lumAux >= 0 && lumAux < 8) && num ==
      +                           5){
 16437  15C9  1BB5               	btfsc	cmd_dtl@tempAux+1,7
 16438  15CA  2DCC               	goto	u5911
 16439  15CB  2DCD               	goto	u5910
 16440  15CC                     u5911:
 16441  15CC  2E06               	goto	l5800
 16442  15CD                     u5910:
 16443  15CD                     l5788:
 16444  15CD  0835               	movf	cmd_dtl@tempAux+1,w
 16445  15CE  3A80               	xorlw	128
 16446  15CF  00B2               	movwf	??_cmd_dtl
 16447  15D0  3080               	movlw	128
 16448  15D1  0232               	subwf	??_cmd_dtl,w
 16449  15D2  1D03               	skipz
 16450  15D3  2DD6               	goto	u5925
 16451  15D4  3032               	movlw	50
 16452  15D5  0234               	subwf	cmd_dtl@tempAux,w
 16453  15D6                     u5925:
 16454  15D6  1803               	skipnc
 16455  15D7  2DD9               	goto	u5921
 16456  15D8  2DDA               	goto	u5920
 16457  15D9                     u5921:
 16458  15D9  2E06               	goto	l5800
 16459  15DA                     u5920:
 16460  15DA                     l5790:
 16461  15DA  0020               	movlb	0	; select bank0
 16462  15DB  1BB7               	btfsc	cmd_dtl@lumAux+1,7
 16463  15DC  2DDE               	goto	u5931
 16464  15DD  2DDF               	goto	u5930
 16465  15DE                     u5931:
 16466  15DE  2E06               	goto	l5800
 16467  15DF                     u5930:
 16468  15DF                     l5792:
 16469  15DF  0837               	movf	cmd_dtl@lumAux+1,w
 16470  15E0  3A80               	xorlw	128
 16471  15E1  00B2               	movwf	??_cmd_dtl
 16472  15E2  3080               	movlw	128
 16473  15E3  0232               	subwf	??_cmd_dtl,w
 16474  15E4  1D03               	skipz
 16475  15E5  2DE8               	goto	u5945
 16476  15E6  3008               	movlw	8
 16477  15E7  0236               	subwf	cmd_dtl@lumAux,w
 16478  15E8                     u5945:
 16479  15E8  1803               	skipnc
 16480  15E9  2DEB               	goto	u5941
 16481  15EA  2DEC               	goto	u5940
 16482  15EB                     u5941:
 16483  15EB  2E06               	goto	l5800
 16484  15EC                     u5940:
 16485  15EC                     l5794:
 16486  15EC  3005               	movlw	5
 16487  15ED  0020               	movlb	0	; select bank0
 16488  15EE  062F               	xorwf	cmd_dtl@num,w
 16489  15EF  0430               	iorwf	cmd_dtl@num+1,w
 16490  15F0  1D03               	btfss	3,2
 16491  15F1  2DF3               	goto	u5951
 16492  15F2  2DF4               	goto	u5950
 16493  15F3                     u5951:
 16494  15F3  2E06               	goto	l5800
 16495  15F4                     u5950:
 16496  15F4                     l5796:
 16497                           
 16498                           ;main.c: 928: tempAlarm.alarmTemp = buffer[2];
 16499  15F4  0831               	movf	cmd_dtl@buffer,w
 16500  15F5  0086               	movwf	6
 16501  15F6  0187               	clrf	7
 16502  15F7  3F42               	moviw [2]fsr1
 16503  15F8  0021               	movlb	1	; select bank1
 16504  15F9  00A7               	movwf	_tempAlarm^(0+128)
 16505                           
 16506                           ;main.c: 929: lumAlarm.alarmLum = buffer[3];
 16507  15FA  0020               	movlb	0	; select bank0
 16508  15FB  0831               	movf	cmd_dtl@buffer,w
 16509  15FC  0086               	movwf	6
 16510  15FD  0187               	clrf	7
 16511  15FE  3F43               	moviw [3]fsr1
 16512  15FF  0021               	movlb	1	; select bank1
 16513  1600  00A4               	movwf	_lumAlarm^(0+128)
 16514  1601                     l5798:
 16515                           
 16516                           ;main.c: 930: sendOKMessage((uint8_t)0XC8);
 16517  1601  30C8               	movlw	200
 16518  1602  3190  20B9  3195   	fcall	_sendOKMessage
 16519                           
 16520                           ;main.c: 931: } else {
 16521  1605  2E0A               	goto	l1490
 16522  1606                     l5800:
 16523                           
 16524                           ;main.c: 932: sendERRORMessage((uint8_t)0XC8);
 16525  1606  30C8               	movlw	200
 16526  1607  3191  2126  3195   	fcall	_sendERRORMessage
 16527  160A                     l1490:
 16528  160A  0008               	return
 16529  160B                     __end_of_cmd_dtl:
 16530                           
 16531                           	psect	text37
 16532  088A                     __ptext37:	
 16533 ;; *************** function _cmd_dac *****************
 16534 ;; Defined at:
 16535 ;;		line 910 in file "main.c"
 16536 ;; Parameters:    Size  Location     Type
 16537 ;;  num             2   15[BANK0 ] int 
 16538 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16539 ;;		 -> main@buff(20), 
 16540 ;; Auto vars:     Size  Location     Type
 16541 ;;  s               2   24[BANK0 ] int 
 16542 ;;  m               2   22[BANK0 ] int 
 16543 ;;  h               2   20[BANK0 ] int 
 16544 ;; Return value:  Size  Location     Type
 16545 ;;                  1    wreg      void 
 16546 ;; Registers used:
 16547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16548 ;; Tracked objects:
 16549 ;;		On entry : 0/0
 16550 ;;		On exit  : 0/0
 16551 ;;		Unchanged: 0/0
 16552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16553 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16556 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16557 ;;Total ram usage:       11 bytes
 16558 ;; Hardware stack levels used:    1
 16559 ;; Hardware stack levels required when called:    8
 16560 ;; This function calls:
 16561 ;;		_sendERRORMessage
 16562 ;;		_sendOKMessage
 16563 ;; This function is called by:
 16564 ;;		_main
 16565 ;; This function uses a non-reentrant model
 16566 ;;
 16567                           
 16568                           
 16569                           ;psect for function _cmd_dac
 16570  088A                     _cmd_dac:
 16571  088A                     l5762:	
 16572                           ;incstack = 0
 16573                           ; Regs used in _cmd_dac: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16574                           
 16575                           
 16576                           ;main.c: 911: int h = buffer[2];
 16577  088A  0020               	movlb	0	; select bank0
 16578  088B  0831               	movf	cmd_dac@buffer,w
 16579  088C  3E02               	addlw	2
 16580  088D  0086               	movwf	6
 16581  088E  0187               	clrf	7
 16582  088F  0801               	movf	1,w
 16583  0890  00B2               	movwf	??_cmd_dac
 16584  0891  01B3               	clrf	??_cmd_dac+1
 16585  0892  0832               	movf	??_cmd_dac,w
 16586  0893  00B4               	movwf	cmd_dac@h
 16587  0894  0833               	movf	??_cmd_dac+1,w
 16588  0895  00B5               	movwf	cmd_dac@h+1
 16589                           
 16590                           ;main.c: 912: int m = buffer[3];
 16591  0896  0831               	movf	cmd_dac@buffer,w
 16592  0897  3E03               	addlw	3
 16593  0898  0086               	movwf	6
 16594  0899  0187               	clrf	7
 16595  089A  0801               	movf	1,w
 16596  089B  00B2               	movwf	??_cmd_dac
 16597  089C  01B3               	clrf	??_cmd_dac+1
 16598  089D  0832               	movf	??_cmd_dac,w
 16599  089E  00B6               	movwf	cmd_dac@m
 16600  089F  0833               	movf	??_cmd_dac+1,w
 16601  08A0  00B7               	movwf	cmd_dac@m+1
 16602                           
 16603                           ;main.c: 913: int s = buffer[4];
 16604  08A1  0831               	movf	cmd_dac@buffer,w
 16605  08A2  3E04               	addlw	4
 16606  08A3  0086               	movwf	6
 16607  08A4  0187               	clrf	7
 16608  08A5  0801               	movf	1,w
 16609  08A6  00B2               	movwf	??_cmd_dac
 16610  08A7  01B3               	clrf	??_cmd_dac+1
 16611  08A8  0832               	movf	??_cmd_dac,w
 16612  08A9  00B8               	movwf	cmd_dac@s
 16613  08AA  0833               	movf	??_cmd_dac+1,w
 16614  08AB  00B9               	movwf	cmd_dac@s+1
 16615  08AC                     l5764:
 16616                           
 16617                           ;main.c: 914: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 16618  08AC  1BB5               	btfsc	cmd_dac@h+1,7
 16619  08AD  28AF               	goto	u5841
 16620  08AE  28B0               	goto	u5840
 16621  08AF                     u5841:
 16622  08AF  28FF               	goto	l5782
 16623  08B0                     u5840:
 16624  08B0                     l5766:
 16625  08B0  0835               	movf	cmd_dac@h+1,w
 16626  08B1  3A80               	xorlw	128
 16627  08B2  00B2               	movwf	??_cmd_dac
 16628  08B3  3080               	movlw	128
 16629  08B4  0232               	subwf	??_cmd_dac,w
 16630  08B5  1D03               	skipz
 16631  08B6  28B9               	goto	u5855
 16632  08B7  3018               	movlw	24
 16633  08B8  0234               	subwf	cmd_dac@h,w
 16634  08B9                     u5855:
 16635  08B9  1803               	skipnc
 16636  08BA  28BC               	goto	u5851
 16637  08BB  28BD               	goto	u5850
 16638  08BC                     u5851:
 16639  08BC  28FF               	goto	l5782
 16640  08BD                     u5850:
 16641  08BD                     l5768:
 16642  08BD  0020               	movlb	0	; select bank0
 16643  08BE  1BB7               	btfsc	cmd_dac@m+1,7
 16644  08BF  28C1               	goto	u5861
 16645  08C0  28C2               	goto	u5860
 16646  08C1                     u5861:
 16647  08C1  28FF               	goto	l5782
 16648  08C2                     u5860:
 16649  08C2                     l5770:
 16650  08C2  0837               	movf	cmd_dac@m+1,w
 16651  08C3  3A80               	xorlw	128
 16652  08C4  00B2               	movwf	??_cmd_dac
 16653  08C5  3080               	movlw	128
 16654  08C6  0232               	subwf	??_cmd_dac,w
 16655  08C7  1D03               	skipz
 16656  08C8  28CB               	goto	u5875
 16657  08C9  303C               	movlw	60
 16658  08CA  0236               	subwf	cmd_dac@m,w
 16659  08CB                     u5875:
 16660  08CB  1803               	skipnc
 16661  08CC  28CE               	goto	u5871
 16662  08CD  28CF               	goto	u5870
 16663  08CE                     u5871:
 16664  08CE  28FF               	goto	l5782
 16665  08CF                     u5870:
 16666  08CF                     l5772:
 16667  08CF  0020               	movlb	0	; select bank0
 16668  08D0  1BB9               	btfsc	cmd_dac@s+1,7
 16669  08D1  28D3               	goto	u5881
 16670  08D2  28D4               	goto	u5880
 16671  08D3                     u5881:
 16672  08D3  28FF               	goto	l5782
 16673  08D4                     u5880:
 16674  08D4                     l5774:
 16675  08D4  0839               	movf	cmd_dac@s+1,w
 16676  08D5  3A80               	xorlw	128
 16677  08D6  00B2               	movwf	??_cmd_dac
 16678  08D7  3080               	movlw	128
 16679  08D8  0232               	subwf	??_cmd_dac,w
 16680  08D9  1D03               	skipz
 16681  08DA  28DD               	goto	u5895
 16682  08DB  303C               	movlw	60
 16683  08DC  0238               	subwf	cmd_dac@s,w
 16684  08DD                     u5895:
 16685  08DD  1803               	skipnc
 16686  08DE  28E0               	goto	u5891
 16687  08DF  28E1               	goto	u5890
 16688  08E0                     u5891:
 16689  08E0  28FF               	goto	l5782
 16690  08E1                     u5890:
 16691  08E1                     l5776:
 16692  08E1  3006               	movlw	6
 16693  08E2  0020               	movlb	0	; select bank0
 16694  08E3  062F               	xorwf	cmd_dac@num,w
 16695  08E4  0430               	iorwf	cmd_dac@num+1,w
 16696  08E5  1D03               	btfss	3,2
 16697  08E6  28E8               	goto	u5901
 16698  08E7  28E9               	goto	u5900
 16699  08E8                     u5901:
 16700  08E8  28FF               	goto	l5782
 16701  08E9                     u5900:
 16702  08E9                     l5778:
 16703                           
 16704                           ;main.c: 915: clkAlarm.alarmVal.h = h;
 16705  08E9  0834               	movf	cmd_dac@h,w
 16706  08EA  00B2               	movwf	??_cmd_dac
 16707  08EB  0832               	movf	??_cmd_dac,w
 16708  08EC  0021               	movlb	1	; select bank1
 16709  08ED  00A0               	movwf	_clkAlarm^(0+128)
 16710                           
 16711                           ;main.c: 916: clkAlarm.alarmVal.m = m;
 16712  08EE  0020               	movlb	0	; select bank0
 16713  08EF  0836               	movf	cmd_dac@m,w
 16714  08F0  00B2               	movwf	??_cmd_dac
 16715  08F1  0832               	movf	??_cmd_dac,w
 16716  08F2  0021               	movlb	1	; select bank1
 16717  08F3  00A1               	movwf	(_clkAlarm^(0+128)+1)
 16718                           
 16719                           ;main.c: 917: clkAlarm.alarmVal.s = s;
 16720  08F4  0020               	movlb	0	; select bank0
 16721  08F5  0838               	movf	cmd_dac@s,w
 16722  08F6  00B2               	movwf	??_cmd_dac
 16723  08F7  0832               	movf	??_cmd_dac,w
 16724  08F8  0021               	movlb	1	; select bank1
 16725  08F9  00A2               	movwf	(_clkAlarm^(0+128)+2)
 16726  08FA                     l5780:
 16727                           
 16728                           ;main.c: 918: sendOKMessage((uint8_t)0XC7);
 16729  08FA  30C7               	movlw	199
 16730  08FB  3190  20B9  3188   	fcall	_sendOKMessage
 16731                           
 16732                           ;main.c: 919: } else {
 16733  08FE  2903               	goto	l1485
 16734  08FF                     l5782:
 16735                           
 16736                           ;main.c: 920: sendERRORMessage((uint8_t)0XC7);
 16737  08FF  30C7               	movlw	199
 16738  0900  3191  2126  3188   	fcall	_sendERRORMessage
 16739  0903                     l1485:
 16740  0903  0008               	return
 16741  0904                     __end_of_cmd_dac:
 16742                           
 16743                           	psect	text38
 16744  14DA                     __ptext38:	
 16745 ;; *************** function _cmd_ra *****************
 16746 ;; Defined at:
 16747 ;;		line 895 in file "main.c"
 16748 ;; Parameters:    Size  Location     Type
 16749 ;;  num             2   15[BANK0 ] int 
 16750 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16751 ;;		 -> main@buff(20), 
 16752 ;; Auto vars:     Size  Location     Type
 16753 ;;  buff            9   19[BANK0 ] unsigned char [9]
 16754 ;; Return value:  Size  Location     Type
 16755 ;;                  1    wreg      void 
 16756 ;; Registers used:
 16757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16763 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;Total ram usage:       13 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:    7
 16770 ;; This function calls:
 16771 ;;		_sendMessage
 16772 ;; This function is called by:
 16773 ;;		_main
 16774 ;; This function uses a non-reentrant model
 16775 ;;
 16776                           
 16777                           
 16778                           ;psect for function _cmd_ra
 16779  14DA                     _cmd_ra:
 16780  14DA                     l5754:	
 16781                           ;incstack = 0
 16782                           ; Regs used in _cmd_ra: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16783                           
 16784                           
 16785                           ;main.c: 896: uint8_t buff[9];;main.c: 897: buff[0] = (uint8_t)0xFD;
 16786  14DA  30FD               	movlw	253
 16787  14DB  0020               	movlb	0	; select bank0
 16788  14DC  00B2               	movwf	??_cmd_ra
 16789  14DD  0832               	movf	??_cmd_ra,w
 16790  14DE  00B3               	movwf	cmd_ra@buff
 16791                           
 16792                           ;main.c: 898: buff[1] = (uint8_t)0XC6;
 16793  14DF  30C6               	movlw	198
 16794  14E0  00B2               	movwf	??_cmd_ra
 16795  14E1  0832               	movf	??_cmd_ra,w
 16796  14E2  00B4               	movwf	cmd_ra@buff+1
 16797                           
 16798                           ;main.c: 899: buff[2] = clkAlarm.alarmVal.h;
 16799  14E3  0021               	movlb	1	; select bank1
 16800  14E4  0820               	movf	_clkAlarm^(0+128),w
 16801  14E5  0020               	movlb	0	; select bank0
 16802  14E6  00B2               	movwf	??_cmd_ra
 16803  14E7  0832               	movf	??_cmd_ra,w
 16804  14E8  00B5               	movwf	cmd_ra@buff+2
 16805                           
 16806                           ;main.c: 900: buff[3] = clkAlarm.alarmVal.m;
 16807  14E9  0021               	movlb	1	; select bank1
 16808  14EA  0821               	movf	(_clkAlarm^(0+128)+1),w
 16809  14EB  0020               	movlb	0	; select bank0
 16810  14EC  00B2               	movwf	??_cmd_ra
 16811  14ED  0832               	movf	??_cmd_ra,w
 16812  14EE  00B6               	movwf	cmd_ra@buff+3
 16813                           
 16814                           ;main.c: 901: buff[4] = clkAlarm.alarmVal.s;
 16815  14EF  0021               	movlb	1	; select bank1
 16816  14F0  0822               	movf	(_clkAlarm^(0+128)+2),w
 16817  14F1  0020               	movlb	0	; select bank0
 16818  14F2  00B2               	movwf	??_cmd_ra
 16819  14F3  0832               	movf	??_cmd_ra,w
 16820  14F4  00B7               	movwf	cmd_ra@buff+4
 16821                           
 16822                           ;main.c: 902: buff[5] = tempAlarm.alarmTemp;
 16823  14F5  0021               	movlb	1	; select bank1
 16824  14F6  0827               	movf	_tempAlarm^(0+128),w
 16825  14F7  0020               	movlb	0	; select bank0
 16826  14F8  00B2               	movwf	??_cmd_ra
 16827  14F9  0832               	movf	??_cmd_ra,w
 16828  14FA  00B8               	movwf	cmd_ra@buff+5
 16829                           
 16830                           ;main.c: 903: buff[6] = lumAlarm.alarmLum;
 16831  14FB  0021               	movlb	1	; select bank1
 16832  14FC  0824               	movf	_lumAlarm^(0+128),w
 16833  14FD  0020               	movlb	0	; select bank0
 16834  14FE  00B2               	movwf	??_cmd_ra
 16835  14FF  0832               	movf	??_cmd_ra,w
 16836  1500  00B9               	movwf	cmd_ra@buff+6
 16837  1501                     l5756:
 16838                           
 16839                           ;main.c: 904: buff[7] = ALAF == 'A' ? 1 : 0;
 16840  1501  3041               	movlw	65
 16841  1502  066F               	xorwf	_ALAF,w
 16842  1503  1903               	btfsc	3,2
 16843  1504  2D06               	goto	u5821
 16844  1505  2D08               	goto	u5820
 16845  1506                     u5821:
 16846  1506  3001               	movlw	1
 16847  1507  2D09               	goto	u5830
 16848  1508                     u5820:
 16849  1508  3000               	movlw	0
 16850  1509                     u5830:
 16851  1509  00B2               	movwf	??_cmd_ra
 16852  150A  0832               	movf	??_cmd_ra,w
 16853  150B  00BA               	movwf	cmd_ra@buff+7
 16854  150C                     l5758:
 16855                           
 16856                           ;main.c: 905: buff[8] = (uint8_t)0xFE;
 16857  150C  30FE               	movlw	254
 16858  150D  00B2               	movwf	??_cmd_ra
 16859  150E  0832               	movf	??_cmd_ra,w
 16860  150F  00BB               	movwf	cmd_ra@buff+8
 16861  1510                     l5760:
 16862                           
 16863                           ;main.c: 907: sendMessage(9,buff);
 16864  1510  3009               	movlw	9
 16865  1511  00A3               	movwf	sendMessage@num
 16866  1512  3000               	movlw	0
 16867  1513  00A4               	movwf	sendMessage@num+1
 16868  1514  3033               	movlw	(low (cmd_ra@buff| 0))& (0+255)
 16869  1515  00B2               	movwf	??_cmd_ra
 16870  1516  0832               	movf	??_cmd_ra,w
 16871  1517  00A5               	movwf	sendMessage@buffer
 16872  1518  3192  2226  3194   	fcall	_sendMessage
 16873  151B                     l1480:
 16874  151B  0008               	return
 16875  151C                     __end_of_cmd_ra:
 16876                           
 16877                           	psect	text39
 16878  10D4                     __ptext39:	
 16879 ;; *************** function _cmd_mta *****************
 16880 ;; Defined at:
 16881 ;;		line 886 in file "main.c"
 16882 ;; Parameters:    Size  Location     Type
 16883 ;;  num             2   15[BANK0 ] int 
 16884 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16885 ;;		 -> main@buff(20), 
 16886 ;; Auto vars:     Size  Location     Type
 16887 ;;		None
 16888 ;; Return value:  Size  Location     Type
 16889 ;;                  1    wreg      void 
 16890 ;; Registers used:
 16891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16892 ;; Tracked objects:
 16893 ;;		On entry : 0/0
 16894 ;;		On exit  : 0/0
 16895 ;;		Unchanged: 0/0
 16896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16897 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16900 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16901 ;;Total ram usage:        3 bytes
 16902 ;; Hardware stack levels used:    1
 16903 ;; Hardware stack levels required when called:    8
 16904 ;; This function calls:
 16905 ;;		_sendERRORMessage
 16906 ;;		_sendOKMessage
 16907 ;; This function is called by:
 16908 ;;		_main
 16909 ;; This function uses a non-reentrant model
 16910 ;;
 16911                           
 16912                           
 16913                           ;psect for function _cmd_mta
 16914  10D4                     _cmd_mta:
 16915  10D4                     l5746:	
 16916                           ;incstack = 0
 16917                           ; Regs used in _cmd_mta: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16918                           
 16919                           
 16920                           ;main.c: 887: if(buffer[2] < 0x3c){
 16921  10D4  0020               	movlb	0	; select bank0
 16922  10D5  0831               	movf	cmd_mta@buffer,w
 16923  10D6  3E02               	addlw	2
 16924  10D7  0086               	movwf	6
 16925  10D8  0187               	clrf	7
 16926  10D9  303C               	movlw	60
 16927  10DA  0201               	subwf	1,w
 16928  10DB  1803               	skipnc
 16929  10DC  28DE               	goto	u5811
 16930  10DD  28DF               	goto	u5810
 16931  10DE                     u5811:
 16932  10DE  28EA               	goto	l5752
 16933  10DF                     u5810:
 16934  10DF                     l5748:
 16935                           
 16936                           ;main.c: 888: TALA = buffer[2];
 16937  10DF  0831               	movf	cmd_mta@buffer,w
 16938  10E0  0086               	movwf	6
 16939  10E1  0187               	clrf	7
 16940  10E2  3F42               	moviw [2]fsr1
 16941  10E3  0021               	movlb	1	; select bank1
 16942  10E4  00E9               	movwf	_TALA^(0+128)
 16943  10E5                     l5750:
 16944                           
 16945                           ;main.c: 889: sendOKMessage((uint8_t)0XC5);
 16946  10E5  30C5               	movlw	197
 16947  10E6  3190  20B9  3190   	fcall	_sendOKMessage
 16948                           
 16949                           ;main.c: 890: } else {
 16950  10E9  28EE               	goto	l1477
 16951  10EA                     l5752:
 16952                           
 16953                           ;main.c: 891: sendERRORMessage((uint8_t)0XC5);
 16954  10EA  30C5               	movlw	197
 16955  10EB  3191  2126  3190   	fcall	_sendERRORMessage
 16956  10EE                     l1477:
 16957  10EE  0008               	return
 16958  10EF                     __end_of_cmd_mta:
 16959                           
 16960                           	psect	text40
 16961  1088                     __ptext40:	
 16962 ;; *************** function _cmd_mmp *****************
 16963 ;; Defined at:
 16964 ;;		line 877 in file "main.c"
 16965 ;; Parameters:    Size  Location     Type
 16966 ;;  num             2   15[BANK0 ] int 
 16967 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16968 ;;		 -> main@buff(20), 
 16969 ;; Auto vars:     Size  Location     Type
 16970 ;;		None
 16971 ;; Return value:  Size  Location     Type
 16972 ;;                  1    wreg      void 
 16973 ;; Registers used:
 16974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16975 ;; Tracked objects:
 16976 ;;		On entry : 0/0
 16977 ;;		On exit  : 0/0
 16978 ;;		Unchanged: 0/0
 16979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16980 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16983 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16984 ;;Total ram usage:        3 bytes
 16985 ;; Hardware stack levels used:    1
 16986 ;; Hardware stack levels required when called:    8
 16987 ;; This function calls:
 16988 ;;		_sendERRORMessage
 16989 ;;		_sendOKMessage
 16990 ;; This function is called by:
 16991 ;;		_main
 16992 ;; This function uses a non-reentrant model
 16993 ;;
 16994                           
 16995                           
 16996                           ;psect for function _cmd_mmp
 16997  1088                     _cmd_mmp:
 16998  1088                     l5738:	
 16999                           ;incstack = 0
 17000                           ; Regs used in _cmd_mmp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17001                           
 17002                           
 17003                           ;main.c: 878: if(num == 4){
 17004  1088  3004               	movlw	4
 17005  1089  0020               	movlb	0	; select bank0
 17006  108A  062F               	xorwf	cmd_mmp@num,w
 17007  108B  0430               	iorwf	cmd_mmp@num+1,w
 17008  108C  1D03               	btfss	3,2
 17009  108D  288F               	goto	u5801
 17010  108E  2890               	goto	u5800
 17011  108F                     u5801:
 17012  108F  289B               	goto	l5744
 17013  1090                     u5800:
 17014  1090                     l5740:
 17015                           
 17016                           ;main.c: 879: PMON = buffer[2];
 17017  1090  0831               	movf	cmd_mmp@buffer,w
 17018  1091  0086               	movwf	6
 17019  1092  0187               	clrf	7
 17020  1093  3F42               	moviw [2]fsr1
 17021  1094  0021               	movlb	1	; select bank1
 17022  1095  00EA               	movwf	_PMON^(0+128)
 17023  1096                     l5742:
 17024                           
 17025                           ;main.c: 880: sendOKMessage((uint8_t)0XC4);
 17026  1096  30C4               	movlw	196
 17027  1097  3190  20B9  3190   	fcall	_sendOKMessage
 17028                           
 17029                           ;main.c: 881: } else{
 17030  109A  289F               	goto	l1472
 17031  109B                     l5744:
 17032                           
 17033                           ;main.c: 882: sendERRORMessage((uint8_t)0XC4);
 17034  109B  30C4               	movlw	196
 17035  109C  3191  2126  3190   	fcall	_sendERRORMessage
 17036  109F                     l1472:
 17037  109F  0008               	return
 17038  10A0                     __end_of_cmd_mmp:
 17039                           
 17040                           	psect	text41
 17041  1292                     __ptext41:	
 17042 ;; *************** function _cmd_rp *****************
 17043 ;; Defined at:
 17044 ;;		line 866 in file "main.c"
 17045 ;; Parameters:    Size  Location     Type
 17046 ;;  num             2   15[BANK0 ] int 
 17047 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 17048 ;;		 -> main@buff(20), 
 17049 ;; Auto vars:     Size  Location     Type
 17050 ;;  buff            5   19[BANK0 ] unsigned char [5]
 17051 ;; Return value:  Size  Location     Type
 17052 ;;                  1    wreg      void 
 17053 ;; Registers used:
 17054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17055 ;; Tracked objects:
 17056 ;;		On entry : 0/0
 17057 ;;		On exit  : 0/0
 17058 ;;		Unchanged: 0/0
 17059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17060 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17061 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17062 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17063 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17064 ;;Total ram usage:        9 bytes
 17065 ;; Hardware stack levels used:    1
 17066 ;; Hardware stack levels required when called:    7
 17067 ;; This function calls:
 17068 ;;		_sendMessage
 17069 ;; This function is called by:
 17070 ;;		_main
 17071 ;; This function uses a non-reentrant model
 17072 ;;
 17073                           
 17074                           
 17075                           ;psect for function _cmd_rp
 17076  1292                     _cmd_rp:
 17077  1292                     l5734:	
 17078                           ;incstack = 0
 17079                           ; Regs used in _cmd_rp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17080                           
 17081                           
 17082                           ;main.c: 867: uint8_t buff[5];;main.c: 868: buff[0] = (uint8_t)0xFD;
 17083  1292  30FD               	movlw	253
 17084  1293  0020               	movlb	0	; select bank0
 17085  1294  00B2               	movwf	??_cmd_rp
 17086  1295  0832               	movf	??_cmd_rp,w
 17087  1296  00B3               	movwf	cmd_rp@buff
 17088                           
 17089                           ;main.c: 869: buff[1] = (uint8_t)0XC3;
 17090  1297  30C3               	movlw	195
 17091  1298  00B2               	movwf	??_cmd_rp
 17092  1299  0832               	movf	??_cmd_rp,w
 17093  129A  00B4               	movwf	cmd_rp@buff+1
 17094                           
 17095                           ;main.c: 870: buff[2] = PMON;
 17096  129B  0021               	movlb	1	; select bank1
 17097  129C  086A               	movf	_PMON^(0+128),w
 17098  129D  0020               	movlb	0	; select bank0
 17099  129E  00B2               	movwf	??_cmd_rp
 17100  129F  0832               	movf	??_cmd_rp,w
 17101  12A0  00B5               	movwf	cmd_rp@buff+2
 17102                           
 17103                           ;main.c: 871: buff[3] = TALA;
 17104  12A1  0021               	movlb	1	; select bank1
 17105  12A2  0869               	movf	_TALA^(0+128),w
 17106  12A3  0020               	movlb	0	; select bank0
 17107  12A4  00B2               	movwf	??_cmd_rp
 17108  12A5  0832               	movf	??_cmd_rp,w
 17109  12A6  00B6               	movwf	cmd_rp@buff+3
 17110                           
 17111                           ;main.c: 872: buff[4] = (uint8_t)0xFE;
 17112  12A7  30FE               	movlw	254
 17113  12A8  00B2               	movwf	??_cmd_rp
 17114  12A9  0832               	movf	??_cmd_rp,w
 17115  12AA  00B7               	movwf	cmd_rp@buff+4
 17116  12AB                     l5736:
 17117                           
 17118                           ;main.c: 874: sendMessage(5,buff);
 17119  12AB  3005               	movlw	5
 17120  12AC  00A3               	movwf	sendMessage@num
 17121  12AD  3000               	movlw	0
 17122  12AE  00A4               	movwf	sendMessage@num+1
 17123  12AF  3033               	movlw	(low (cmd_rp@buff| 0))& (0+255)
 17124  12B0  00B2               	movwf	??_cmd_rp
 17125  12B1  0832               	movf	??_cmd_rp,w
 17126  12B2  00A5               	movwf	sendMessage@buffer
 17127  12B3  3192  2226  3192   	fcall	_sendMessage
 17128  12B6                     l1467:
 17129  12B6  0008               	return
 17130  12B7                     __end_of_cmd_rp:
 17131                           
 17132                           	psect	text42
 17133  11E2                     __ptext42:	
 17134 ;; *************** function _cmd_rtl *****************
 17135 ;; Defined at:
 17136 ;;		line 855 in file "main.c"
 17137 ;; Parameters:    Size  Location     Type
 17138 ;;  num             2   15[BANK0 ] int 
 17139 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 17140 ;;		 -> main@buff(20), 
 17141 ;; Auto vars:     Size  Location     Type
 17142 ;;  buff            5   19[BANK0 ] unsigned char [5]
 17143 ;; Return value:  Size  Location     Type
 17144 ;;                  1    wreg      void 
 17145 ;; Registers used:
 17146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17147 ;; Tracked objects:
 17148 ;;		On entry : 0/0
 17149 ;;		On exit  : 0/0
 17150 ;;		Unchanged: 0/0
 17151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17152 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17153 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17155 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17156 ;;Total ram usage:        9 bytes
 17157 ;; Hardware stack levels used:    1
 17158 ;; Hardware stack levels required when called:    7
 17159 ;; This function calls:
 17160 ;;		_sendMessage
 17161 ;; This function is called by:
 17162 ;;		_main
 17163 ;; This function uses a non-reentrant model
 17164 ;;
 17165                           
 17166                           
 17167                           ;psect for function _cmd_rtl
 17168  11E2                     _cmd_rtl:
 17169  11E2                     l5730:	
 17170                           ;incstack = 0
 17171                           ; Regs used in _cmd_rtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17172                           
 17173                           
 17174                           ;main.c: 856: uint8_t buff[5];;main.c: 857: buff[0] = (uint8_t)0xFD;
 17175  11E2  30FD               	movlw	253
 17176  11E3  0020               	movlb	0	; select bank0
 17177  11E4  00B2               	movwf	??_cmd_rtl
 17178  11E5  0832               	movf	??_cmd_rtl,w
 17179  11E6  00B3               	movwf	cmd_rtl@buff
 17180                           
 17181                           ;main.c: 858: buff[1] = (uint8_t)0XC2;
 17182  11E7  30C2               	movlw	194
 17183  11E8  00B2               	movwf	??_cmd_rtl
 17184  11E9  0832               	movf	??_cmd_rtl,w
 17185  11EA  00B4               	movwf	cmd_rtl@buff+1
 17186                           
 17187                           ;main.c: 859: buff[2] = temp;
 17188  11EB  086E               	movf	_temp,w
 17189  11EC  00B2               	movwf	??_cmd_rtl
 17190  11ED  0832               	movf	??_cmd_rtl,w
 17191  11EE  00B5               	movwf	cmd_rtl@buff+2
 17192                           
 17193                           ;main.c: 860: buff[3] = lumLevel;
 17194  11EF  086D               	movf	_lumLevel,w
 17195  11F0  00B2               	movwf	??_cmd_rtl
 17196  11F1  0832               	movf	??_cmd_rtl,w
 17197  11F2  00B6               	movwf	cmd_rtl@buff+3
 17198                           
 17199                           ;main.c: 861: buff[4] = (uint8_t)0xFE;
 17200  11F3  30FE               	movlw	254
 17201  11F4  00B2               	movwf	??_cmd_rtl
 17202  11F5  0832               	movf	??_cmd_rtl,w
 17203  11F6  00B7               	movwf	cmd_rtl@buff+4
 17204  11F7                     l5732:
 17205                           
 17206                           ;main.c: 863: sendMessage(5,buff);
 17207  11F7  3005               	movlw	5
 17208  11F8  00A3               	movwf	sendMessage@num
 17209  11F9  3000               	movlw	0
 17210  11FA  00A4               	movwf	sendMessage@num+1
 17211  11FB  3033               	movlw	(low (cmd_rtl@buff| 0))& (0+255)
 17212  11FC  00B2               	movwf	??_cmd_rtl
 17213  11FD  0832               	movf	??_cmd_rtl,w
 17214  11FE  00A5               	movwf	sendMessage@buffer
 17215  11FF  3192  2226  3191   	fcall	_sendMessage
 17216  1202                     l1464:
 17217  1202  0008               	return
 17218  1203                     __end_of_cmd_rtl:
 17219                           
 17220                           	psect	text43
 17221  178B                     __ptext43:	
 17222 ;; *************** function _cmd_sc *****************
 17223 ;; Defined at:
 17224 ;;		line 840 in file "main.c"
 17225 ;; Parameters:    Size  Location     Type
 17226 ;;  num             2   15[BANK0 ] int 
 17227 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 17228 ;;		 -> main@buff(20), 
 17229 ;; Auto vars:     Size  Location     Type
 17230 ;;  s               2   24[BANK0 ] int 
 17231 ;;  m               2   22[BANK0 ] int 
 17232 ;;  h               2   20[BANK0 ] int 
 17233 ;; Return value:  Size  Location     Type
 17234 ;;                  1    wreg      void 
 17235 ;; Registers used:
 17236 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17237 ;; Tracked objects:
 17238 ;;		On entry : 0/0
 17239 ;;		On exit  : 0/0
 17240 ;;		Unchanged: 0/0
 17241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17242 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17243 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17245 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;Total ram usage:       11 bytes
 17247 ;; Hardware stack levels used:    1
 17248 ;; Hardware stack levels required when called:    8
 17249 ;; This function calls:
 17250 ;;		_sendERRORMessage
 17251 ;;		_sendOKMessage
 17252 ;; This function is called by:
 17253 ;;		_main
 17254 ;; This function uses a non-reentrant model
 17255 ;;
 17256                           
 17257                           
 17258                           ;psect for function _cmd_sc
 17259  178B                     _cmd_sc:
 17260  178B                     l5708:	
 17261                           ;incstack = 0
 17262                           ; Regs used in _cmd_sc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17263                           
 17264                           
 17265                           ;main.c: 841: int h = buffer[2];
 17266  178B  0020               	movlb	0	; select bank0
 17267  178C  0831               	movf	cmd_sc@buffer,w
 17268  178D  3E02               	addlw	2
 17269  178E  0086               	movwf	6
 17270  178F  0187               	clrf	7
 17271  1790  0801               	movf	1,w
 17272  1791  00B2               	movwf	??_cmd_sc
 17273  1792  01B3               	clrf	??_cmd_sc+1
 17274  1793  0832               	movf	??_cmd_sc,w
 17275  1794  00B4               	movwf	cmd_sc@h
 17276  1795  0833               	movf	??_cmd_sc+1,w
 17277  1796  00B5               	movwf	cmd_sc@h+1
 17278                           
 17279                           ;main.c: 842: int m = buffer[3];
 17280  1797  0831               	movf	cmd_sc@buffer,w
 17281  1798  3E03               	addlw	3
 17282  1799  0086               	movwf	6
 17283  179A  0187               	clrf	7
 17284  179B  0801               	movf	1,w
 17285  179C  00B2               	movwf	??_cmd_sc
 17286  179D  01B3               	clrf	??_cmd_sc+1
 17287  179E  0832               	movf	??_cmd_sc,w
 17288  179F  00B6               	movwf	cmd_sc@m
 17289  17A0  0833               	movf	??_cmd_sc+1,w
 17290  17A1  00B7               	movwf	cmd_sc@m+1
 17291                           
 17292                           ;main.c: 843: int s = buffer[4];
 17293  17A2  0831               	movf	cmd_sc@buffer,w
 17294  17A3  3E04               	addlw	4
 17295  17A4  0086               	movwf	6
 17296  17A5  0187               	clrf	7
 17297  17A6  0801               	movf	1,w
 17298  17A7  00B2               	movwf	??_cmd_sc
 17299  17A8  01B3               	clrf	??_cmd_sc+1
 17300  17A9  0832               	movf	??_cmd_sc,w
 17301  17AA  00B8               	movwf	cmd_sc@s
 17302  17AB  0833               	movf	??_cmd_sc+1,w
 17303  17AC  00B9               	movwf	cmd_sc@s+1
 17304  17AD                     l5710:
 17305                           
 17306                           ;main.c: 844: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 17307  17AD  1BB5               	btfsc	cmd_sc@h+1,7
 17308  17AE  2FB0               	goto	u5731
 17309  17AF  2FB1               	goto	u5730
 17310  17B0                     u5731:
 17311  17B0  2FFB               	goto	l5728
 17312  17B1                     u5730:
 17313  17B1                     l5712:
 17314  17B1  0835               	movf	cmd_sc@h+1,w
 17315  17B2  3A80               	xorlw	128
 17316  17B3  00B2               	movwf	??_cmd_sc
 17317  17B4  3080               	movlw	128
 17318  17B5  0232               	subwf	??_cmd_sc,w
 17319  17B6  1D03               	skipz
 17320  17B7  2FBA               	goto	u5745
 17321  17B8  3018               	movlw	24
 17322  17B9  0234               	subwf	cmd_sc@h,w
 17323  17BA                     u5745:
 17324  17BA  1803               	skipnc
 17325  17BB  2FBD               	goto	u5741
 17326  17BC  2FBE               	goto	u5740
 17327  17BD                     u5741:
 17328  17BD  2FFB               	goto	l5728
 17329  17BE                     u5740:
 17330  17BE                     l5714:
 17331  17BE  0020               	movlb	0	; select bank0
 17332  17BF  1BB7               	btfsc	cmd_sc@m+1,7
 17333  17C0  2FC2               	goto	u5751
 17334  17C1  2FC3               	goto	u5750
 17335  17C2                     u5751:
 17336  17C2  2FFB               	goto	l5728
 17337  17C3                     u5750:
 17338  17C3                     l5716:
 17339  17C3  0837               	movf	cmd_sc@m+1,w
 17340  17C4  3A80               	xorlw	128
 17341  17C5  00B2               	movwf	??_cmd_sc
 17342  17C6  3080               	movlw	128
 17343  17C7  0232               	subwf	??_cmd_sc,w
 17344  17C8  1D03               	skipz
 17345  17C9  2FCC               	goto	u5765
 17346  17CA  303C               	movlw	60
 17347  17CB  0236               	subwf	cmd_sc@m,w
 17348  17CC                     u5765:
 17349  17CC  1803               	skipnc
 17350  17CD  2FCF               	goto	u5761
 17351  17CE  2FD0               	goto	u5760
 17352  17CF                     u5761:
 17353  17CF  2FFB               	goto	l5728
 17354  17D0                     u5760:
 17355  17D0                     l5718:
 17356  17D0  0020               	movlb	0	; select bank0
 17357  17D1  1BB9               	btfsc	cmd_sc@s+1,7
 17358  17D2  2FD4               	goto	u5771
 17359  17D3  2FD5               	goto	u5770
 17360  17D4                     u5771:
 17361  17D4  2FFB               	goto	l5728
 17362  17D5                     u5770:
 17363  17D5                     l5720:
 17364  17D5  0839               	movf	cmd_sc@s+1,w
 17365  17D6  3A80               	xorlw	128
 17366  17D7  00B2               	movwf	??_cmd_sc
 17367  17D8  3080               	movlw	128
 17368  17D9  0232               	subwf	??_cmd_sc,w
 17369  17DA  1D03               	skipz
 17370  17DB  2FDE               	goto	u5785
 17371  17DC  303C               	movlw	60
 17372  17DD  0238               	subwf	cmd_sc@s,w
 17373  17DE                     u5785:
 17374  17DE  1803               	skipnc
 17375  17DF  2FE1               	goto	u5781
 17376  17E0  2FE2               	goto	u5780
 17377  17E1                     u5781:
 17378  17E1  2FFB               	goto	l5728
 17379  17E2                     u5780:
 17380  17E2                     l5722:
 17381  17E2  3006               	movlw	6
 17382  17E3  0020               	movlb	0	; select bank0
 17383  17E4  062F               	xorwf	cmd_sc@num,w
 17384  17E5  0430               	iorwf	cmd_sc@num+1,w
 17385  17E6  1D03               	btfss	3,2
 17386  17E7  2FE9               	goto	u5791
 17387  17E8  2FEA               	goto	u5790
 17388  17E9                     u5791:
 17389  17E9  2FFB               	goto	l5728
 17390  17EA                     u5790:
 17391  17EA                     l5724:
 17392                           
 17393                           ;main.c: 845: t.h = h;
 17394  17EA  0834               	movf	cmd_sc@h,w
 17395  17EB  00B2               	movwf	??_cmd_sc
 17396  17EC  0832               	movf	??_cmd_sc,w
 17397  17ED  00E5               	movwf	_t
 17398                           
 17399                           ;main.c: 846: t.m = m;
 17400  17EE  0836               	movf	cmd_sc@m,w
 17401  17EF  00B2               	movwf	??_cmd_sc
 17402  17F0  0832               	movf	??_cmd_sc,w
 17403  17F1  00E6               	movwf	_t+1
 17404                           
 17405                           ;main.c: 847: t.s = s;
 17406  17F2  0838               	movf	cmd_sc@s,w
 17407  17F3  00B2               	movwf	??_cmd_sc
 17408  17F4  0832               	movf	??_cmd_sc,w
 17409  17F5  00E7               	movwf	_t+2
 17410  17F6                     l5726:
 17411                           
 17412                           ;main.c: 848: sendOKMessage((uint8_t)0XC1);
 17413  17F6  30C1               	movlw	193
 17414  17F7  3190  20B9  3197   	fcall	_sendOKMessage
 17415                           
 17416                           ;main.c: 849: } else {
 17417  17FA  2FFF               	goto	l1461
 17418  17FB                     l5728:
 17419                           
 17420                           ;main.c: 850: sendERRORMessage((uint8_t)0XC1);
 17421  17FB  30C1               	movlw	193
 17422  17FC  3191  2126  3197   	fcall	_sendERRORMessage
 17423  17FF                     l1461:
 17424  17FF  0008               	return
 17425  1800                     __end_of_cmd_sc:
 17426                           
 17427                           	psect	text44
 17428  126D                     __ptext44:	
 17429 ;; *************** function _cmd_rc *****************
 17430 ;; Defined at:
 17431 ;;		line 828 in file "main.c"
 17432 ;; Parameters:    Size  Location     Type
 17433 ;;  num             2   15[BANK0 ] int 
 17434 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 17435 ;;		 -> main@buff(20), 
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;  buff            6   19[BANK0 ] unsigned char [6]
 17438 ;; Return value:  Size  Location     Type
 17439 ;;                  1    wreg      void 
 17440 ;; Registers used:
 17441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17442 ;; Tracked objects:
 17443 ;;		On entry : 0/0
 17444 ;;		On exit  : 0/0
 17445 ;;		Unchanged: 0/0
 17446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17447 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;Total ram usage:       10 bytes
 17452 ;; Hardware stack levels used:    1
 17453 ;; Hardware stack levels required when called:    7
 17454 ;; This function calls:
 17455 ;;		_sendMessage
 17456 ;; This function is called by:
 17457 ;;		_main
 17458 ;; This function uses a non-reentrant model
 17459 ;;
 17460                           
 17461                           
 17462                           ;psect for function _cmd_rc
 17463  126D                     _cmd_rc:
 17464  126D                     l5704:	
 17465                           ;incstack = 0
 17466                           ; Regs used in _cmd_rc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17467                           
 17468                           
 17469                           ;main.c: 829: uint8_t buff[6];;main.c: 830: buff[0] = (uint8_t)0xFD;
 17470  126D  30FD               	movlw	253
 17471  126E  0020               	movlb	0	; select bank0
 17472  126F  00B2               	movwf	??_cmd_rc
 17473  1270  0832               	movf	??_cmd_rc,w
 17474  1271  00B3               	movwf	cmd_rc@buff
 17475                           
 17476                           ;main.c: 831: buff[1] = (uint8_t)0xC0;
 17477  1272  30C0               	movlw	192
 17478  1273  00B2               	movwf	??_cmd_rc
 17479  1274  0832               	movf	??_cmd_rc,w
 17480  1275  00B4               	movwf	cmd_rc@buff+1
 17481                           
 17482                           ;main.c: 832: buff[2] = t.h;
 17483  1276  0865               	movf	_t,w
 17484  1277  00B2               	movwf	??_cmd_rc
 17485  1278  0832               	movf	??_cmd_rc,w
 17486  1279  00B5               	movwf	cmd_rc@buff+2
 17487                           
 17488                           ;main.c: 833: buff[3] = t.m;
 17489  127A  0866               	movf	_t+1,w
 17490  127B  00B2               	movwf	??_cmd_rc
 17491  127C  0832               	movf	??_cmd_rc,w
 17492  127D  00B6               	movwf	cmd_rc@buff+3
 17493                           
 17494                           ;main.c: 834: buff[4] = t.s;
 17495  127E  0867               	movf	_t+2,w
 17496  127F  00B2               	movwf	??_cmd_rc
 17497  1280  0832               	movf	??_cmd_rc,w
 17498  1281  00B7               	movwf	cmd_rc@buff+4
 17499                           
 17500                           ;main.c: 835: buff[5] = (uint8_t)0xFE;
 17501  1282  30FE               	movlw	254
 17502  1283  00B2               	movwf	??_cmd_rc
 17503  1284  0832               	movf	??_cmd_rc,w
 17504  1285  00B8               	movwf	cmd_rc@buff+5
 17505  1286                     l5706:
 17506                           
 17507                           ;main.c: 837: sendMessage(6,buff);
 17508  1286  3006               	movlw	6
 17509  1287  00A3               	movwf	sendMessage@num
 17510  1288  3000               	movlw	0
 17511  1289  00A4               	movwf	sendMessage@num+1
 17512  128A  3033               	movlw	(low (cmd_rc@buff| 0))& (0+255)
 17513  128B  00B2               	movwf	??_cmd_rc
 17514  128C  0832               	movf	??_cmd_rc,w
 17515  128D  00A5               	movwf	sendMessage@buffer
 17516  128E  3192  2226  3192   	fcall	_sendMessage
 17517  1291                     l1456:
 17518  1291  0008               	return
 17519  1292                     __end_of_cmd_rc:
 17520                           
 17521                           	psect	text45
 17522  0BF7                     __ptext45:	
 17523 ;; *************** function _cmd_tri *****************
 17524 ;; Defined at:
 17525 ;;		line 1000 in file "main.c"
 17526 ;; Parameters:    Size  Location     Type
 17527 ;;  num             2   15[BANK0 ] int 
 17528 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 17529 ;;		 -> main@buff(20), 
 17530 ;; Auto vars:     Size  Location     Type
 17531 ;;  buffData        5   23[BANK0 ] unsigned char [5]
 17532 ;;  buffInit        4   28[BANK0 ] unsigned char [4]
 17533 ;;  startingInde    2   38[BANK0 ] int 
 17534 ;;  i               2   35[BANK0 ] int 
 17535 ;;  maxReadingsA    2   33[BANK0 ] int 
 17536 ;;  n               1   41[BANK0 ] unsigned char 
 17537 ;;  j               1   40[BANK0 ] unsigned char 
 17538 ;;  index           1   37[BANK0 ] unsigned char 
 17539 ;;  buffEOM         1   32[BANK0 ] unsigned char [1]
 17540 ;; Return value:  Size  Location     Type
 17541 ;;                  1    wreg      void 
 17542 ;; Registers used:
 17543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17544 ;; Tracked objects:
 17545 ;;		On entry : 0/0
 17546 ;;		On exit  : 0/0
 17547 ;;		Unchanged: 0/0
 17548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17549 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17550 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17551 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17552 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17553 ;;Total ram usage:       27 bytes
 17554 ;; Hardware stack levels used:    1
 17555 ;; Hardware stack levels required when called:    8
 17556 ;; This function calls:
 17557 ;;		_DATAEE_ReadByte
 17558 ;;		___wmul
 17559 ;;		_sendERRORMessage
 17560 ;;		_sendMessage
 17561 ;; This function is called by:
 17562 ;;		_main
 17563 ;; This function uses a non-reentrant model
 17564 ;;
 17565                           
 17566                           
 17567                           ;psect for function _cmd_tri
 17568  0BF7                     _cmd_tri:
 17569  0BF7                     l5876:	
 17570                           ;incstack = 0
 17571                           ; Regs used in _cmd_tri: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17572                           
 17573                           
 17574                           ;main.c: 1001: if(num == 5){
 17575  0BF7  3005               	movlw	5
 17576  0BF8  0020               	movlb	0	; select bank0
 17577  0BF9  062F               	xorwf	cmd_tri@num,w
 17578  0BFA  0430               	iorwf	cmd_tri@num+1,w
 17579  0BFB  1D03               	btfss	3,2
 17580  0BFC  2BFE               	goto	u6061
 17581  0BFD  2BFF               	goto	u6060
 17582  0BFE                     u6061:
 17583  0BFE  2D25               	goto	l5942
 17584  0BFF                     u6060:
 17585  0BFF                     l5878:
 17586                           
 17587                           ;main.c: 1002: uint8_t n = buffer[2];
 17588  0BFF  0831               	movf	cmd_tri@buffer,w
 17589  0C00  0086               	movwf	6
 17590  0C01  0187               	clrf	7
 17591  0C02  3F42               	moviw [2]fsr1
 17592  0C03  00C9               	movwf	cmd_tri@n
 17593                           
 17594                           ;main.c: 1003: uint8_t index = buffer[3];
 17595  0C04  0831               	movf	cmd_tri@buffer,w
 17596  0C05  0086               	movwf	6
 17597  0C06  0187               	clrf	7
 17598  0C07  3F43               	moviw [3]fsr1
 17599  0C08  00C5               	movwf	cmd_tri@index
 17600  0C09                     l5880:
 17601                           
 17602                           ;main.c: 1005: int startingIndex = iwrite + index;
 17603  0C09  086B               	movf	_iwrite,w
 17604  0C0A  0745               	addwf	cmd_tri@index,w
 17605  0C0B  00C6               	movwf	cmd_tri@startingIndex
 17606  0C0C  01C7               	clrf	cmd_tri@startingIndex+1
 17607  0C0D  0DC7               	rlf	cmd_tri@startingIndex+1,f
 17608  0C0E                     l5882:
 17609                           
 17610                           ;main.c: 1006: if(startingIndex >= NREG){
 17611  0C0E  0847               	movf	cmd_tri@startingIndex+1,w
 17612  0C0F  3A80               	xorlw	128
 17613  0C10  00B2               	movwf	??_cmd_tri
 17614  0C11  3080               	movlw	128
 17615  0C12  0232               	subwf	??_cmd_tri,w
 17616  0C13  1D03               	skipz
 17617  0C14  2C17               	goto	u6075
 17618  0C15  087D               	movf	_NREG,w
 17619  0C16  0246               	subwf	cmd_tri@startingIndex,w
 17620  0C17                     u6075:
 17621  0C17  1C03               	skipc
 17622  0C18  2C1A               	goto	u6071
 17623  0C19  2C1B               	goto	u6070
 17624  0C1A                     u6071:
 17625  0C1A  2C2A               	goto	l5886
 17626  0C1B                     u6070:
 17627  0C1B                     l5884:
 17628                           
 17629                           ;main.c: 1007: startingIndex = index - (NREG - iwrite);
 17630  0C1B  087D               	movf	_NREG,w
 17631  0C1C  0020               	movlb	0	; select bank0
 17632  0C1D  00B2               	movwf	??_cmd_tri
 17633  0C1E  01B3               	clrf	??_cmd_tri+1
 17634  0C1F  0845               	movf	cmd_tri@index,w
 17635  0C20  076B               	addwf	_iwrite,w
 17636  0C21  00B4               	movwf	??_cmd_tri+2
 17637  0C22  01B5               	clrf	??_cmd_tri+3
 17638  0C23  0DB5               	rlf	??_cmd_tri+3,f
 17639  0C24  0832               	movf	??_cmd_tri,w
 17640  0C25  0234               	subwf	??_cmd_tri+2,w
 17641  0C26  00C6               	movwf	cmd_tri@startingIndex
 17642  0C27  0833               	movf	??_cmd_tri+1,w
 17643  0C28  3B35               	subwfb	??_cmd_tri+3,w
 17644  0C29  00C7               	movwf	cmd_tri@startingIndex+1
 17645  0C2A                     l5886:
 17646                           
 17647                           ;main.c: 1008: };main.c: 1009: if(nr != NREG){
 17648  0C2A  0020               	movlb	0	; select bank0
 17649  0C2B  086A               	movf	_nr,w
 17650  0C2C  067D               	xorwf	_NREG,w
 17651  0C2D  1903               	skipnz
 17652  0C2E  2C30               	goto	u6081
 17653  0C2F  2C31               	goto	u6080
 17654  0C30                     u6081:
 17655  0C30  2C38               	goto	l1518
 17656  0C31                     u6080:
 17657  0C31                     l5888:
 17658                           
 17659                           ;main.c: 1010: startingIndex = index;
 17660  0C31  0845               	movf	cmd_tri@index,w
 17661  0C32  00B2               	movwf	??_cmd_tri
 17662  0C33  01B3               	clrf	??_cmd_tri+1
 17663  0C34  0832               	movf	??_cmd_tri,w
 17664  0C35  00C6               	movwf	cmd_tri@startingIndex
 17665  0C36  0833               	movf	??_cmd_tri+1,w
 17666  0C37  00C7               	movwf	cmd_tri@startingIndex+1
 17667  0C38                     l1518:
 17668                           
 17669                           ;main.c: 1011: };main.c: 1012: int maxReadingsAux = iwrite - startingIndex;
 17670  0C38  086B               	movf	_iwrite,w
 17671  0C39  00B2               	movwf	??_cmd_tri
 17672  0C3A  0846               	movf	cmd_tri@startingIndex,w
 17673  0C3B  0232               	subwf	??_cmd_tri,w
 17674  0C3C  00C1               	movwf	cmd_tri@maxReadingsAux
 17675  0C3D  0947               	comf	cmd_tri@startingIndex+1,w
 17676  0C3E  1803               	skipnc
 17677  0C3F  0A89               	incf	9,f
 17678  0C40  00C2               	movwf	cmd_tri@maxReadingsAux+1
 17679  0C41                     l5890:
 17680                           
 17681                           ;main.c: 1013: if(maxReadingsAux < 0){
 17682  0C41  1FC2               	btfss	cmd_tri@maxReadingsAux+1,7
 17683  0C42  2C44               	goto	u6091
 17684  0C43  2C45               	goto	u6090
 17685  0C44                     u6091:
 17686  0C44  2C50               	goto	l1519
 17687  0C45                     u6090:
 17688  0C45                     l5892:
 17689                           
 17690                           ;main.c: 1014: maxReadingsAux = iwrite + (NREG - startingIndex);
 17691  0C45  086B               	movf	_iwrite,w
 17692  0C46  077D               	addwf	_NREG,w
 17693  0C47  00B2               	movwf	??_cmd_tri
 17694  0C48  01B3               	clrf	??_cmd_tri+1
 17695  0C49  0DB3               	rlf	??_cmd_tri+1,f
 17696  0C4A  0846               	movf	cmd_tri@startingIndex,w
 17697  0C4B  0232               	subwf	??_cmd_tri,w
 17698  0C4C  00C1               	movwf	cmd_tri@maxReadingsAux
 17699  0C4D  0847               	movf	cmd_tri@startingIndex+1,w
 17700  0C4E  3B33               	subwfb	??_cmd_tri+1,w
 17701  0C4F  00C2               	movwf	cmd_tri@maxReadingsAux+1
 17702  0C50                     l1519:
 17703                           
 17704                           ;main.c: 1015: };main.c: 1016: if(maxReadingsAux == 0 && nr == NREG){
 17705  0C50  0841               	movf	cmd_tri@maxReadingsAux,w
 17706  0C51  0442               	iorwf	cmd_tri@maxReadingsAux+1,w
 17707  0C52  1D03               	btfss	3,2
 17708  0C53  2C55               	goto	u6101
 17709  0C54  2C56               	goto	u6100
 17710  0C55                     u6101:
 17711  0C55  2C63               	goto	l1520
 17712  0C56                     u6100:
 17713  0C56                     l5894:
 17714  0C56  086A               	movf	_nr,w
 17715  0C57  067D               	xorwf	_NREG,w
 17716  0C58  1D03               	skipz
 17717  0C59  2C5B               	goto	u6111
 17718  0C5A  2C5C               	goto	u6110
 17719  0C5B                     u6111:
 17720  0C5B  2C63               	goto	l1520
 17721  0C5C                     u6110:
 17722  0C5C                     l5896:
 17723                           
 17724                           ;main.c: 1017: maxReadingsAux = nr;
 17725  0C5C  086A               	movf	_nr,w
 17726  0C5D  00B2               	movwf	??_cmd_tri
 17727  0C5E  01B3               	clrf	??_cmd_tri+1
 17728  0C5F  0832               	movf	??_cmd_tri,w
 17729  0C60  00C1               	movwf	cmd_tri@maxReadingsAux
 17730  0C61  0833               	movf	??_cmd_tri+1,w
 17731  0C62  00C2               	movwf	cmd_tri@maxReadingsAux+1
 17732  0C63                     l1520:
 17733                           
 17734                           ;main.c: 1018: };main.c: 1020: if((n > nr) || (maxReadingsAux < n)){
 17735  0C63  0849               	movf	cmd_tri@n,w
 17736  0C64  026A               	subwf	_nr,w
 17737  0C65  1C03               	skipc
 17738  0C66  2C68               	goto	u6121
 17739  0C67  2C69               	goto	u6120
 17740  0C68                     u6121:
 17741  0C68  2C76               	goto	l5900
 17742  0C69                     u6120:
 17743  0C69                     l5898:
 17744  0C69  0842               	movf	cmd_tri@maxReadingsAux+1,w
 17745  0C6A  3A80               	xorlw	128
 17746  0C6B  00B2               	movwf	??_cmd_tri
 17747  0C6C  3080               	movlw	128
 17748  0C6D  0232               	subwf	??_cmd_tri,w
 17749  0C6E  1D03               	skipz
 17750  0C6F  2C72               	goto	u6135
 17751  0C70  0849               	movf	cmd_tri@n,w
 17752  0C71  0241               	subwf	cmd_tri@maxReadingsAux,w
 17753  0C72                     u6135:
 17754  0C72  1803               	skipnc
 17755  0C73  2C75               	goto	u6131
 17756  0C74  2C76               	goto	u6130
 17757  0C75                     u6131:
 17758  0C75  2C7B               	goto	l5904
 17759  0C76                     u6130:
 17760  0C76                     l5900:
 17761                           
 17762                           ;main.c: 1021: sendERRORMessage((uint8_t)0XCC);
 17763  0C76  30CC               	movlw	204
 17764  0C77  3191  2126  318B   	fcall	_sendERRORMessage
 17765  0C7A  2D29               	goto	l1524
 17766  0C7B                     l5904:
 17767                           
 17768                           ;main.c: 1023: };main.c: 1024: if(n > 10){
 17769  0C7B  300B               	movlw	11
 17770  0C7C  0020               	movlb	0	; select bank0
 17771  0C7D  0249               	subwf	cmd_tri@n,w
 17772  0C7E  1C03               	skipc
 17773  0C7F  2C81               	goto	u6141
 17774  0C80  2C82               	goto	u6140
 17775  0C81                     u6141:
 17776  0C81  2C86               	goto	l1525
 17777  0C82                     u6140:
 17778  0C82                     l5906:
 17779                           
 17780                           ;main.c: 1025: n = 10;
 17781  0C82  300A               	movlw	10
 17782  0C83  00B2               	movwf	??_cmd_tri
 17783  0C84  0832               	movf	??_cmd_tri,w
 17784  0C85  00C9               	movwf	cmd_tri@n
 17785  0C86                     l1525:
 17786                           
 17787                           ;main.c: 1026: };main.c: 1028: uint8_t buffInit[4];;main.c: 1029: buffInit[0] = (uint8_t
      +                          )0xFD;
 17788  0C86  30FD               	movlw	253
 17789  0C87  00B2               	movwf	??_cmd_tri
 17790  0C88  0832               	movf	??_cmd_tri,w
 17791  0C89  00BC               	movwf	cmd_tri@buffInit
 17792                           
 17793                           ;main.c: 1030: buffInit[1] = (uint8_t)0XCC;
 17794  0C8A  30CC               	movlw	204
 17795  0C8B  00B2               	movwf	??_cmd_tri
 17796  0C8C  0832               	movf	??_cmd_tri,w
 17797  0C8D  00BD               	movwf	cmd_tri@buffInit+1
 17798                           
 17799                           ;main.c: 1031: buffInit[2] = (uint8_t)n;
 17800  0C8E  0849               	movf	cmd_tri@n,w
 17801  0C8F  00B2               	movwf	??_cmd_tri
 17802  0C90  0832               	movf	??_cmd_tri,w
 17803  0C91  00BE               	movwf	cmd_tri@buffInit+2
 17804                           
 17805                           ;main.c: 1032: buffInit[3] = (uint8_t)index;
 17806  0C92  0845               	movf	cmd_tri@index,w
 17807  0C93  00B2               	movwf	??_cmd_tri
 17808  0C94  0832               	movf	??_cmd_tri,w
 17809  0C95  00BF               	movwf	cmd_tri@buffInit+3
 17810  0C96                     l5908:
 17811                           
 17812                           ;main.c: 1033: sendMessage(4,buffInit);
 17813  0C96  3004               	movlw	4
 17814  0C97  00A3               	movwf	sendMessage@num
 17815  0C98  3000               	movlw	0
 17816  0C99  00A4               	movwf	sendMessage@num+1
 17817  0C9A  303C               	movlw	(low (cmd_tri@buffInit| 0))& (0+255)
 17818  0C9B  00B2               	movwf	??_cmd_tri
 17819  0C9C  0832               	movf	??_cmd_tri,w
 17820  0C9D  00A5               	movwf	sendMessage@buffer
 17821  0C9E  3192  2226  318B   	fcall	_sendMessage
 17822  0CA1                     l5910:
 17823                           
 17824                           ;main.c: 1035: int i = startingIndex;
 17825  0CA1  0020               	movlb	0	; select bank0
 17826  0CA2  0847               	movf	cmd_tri@startingIndex+1,w
 17827  0CA3  00C4               	movwf	cmd_tri@i+1
 17828  0CA4  0846               	movf	cmd_tri@startingIndex,w
 17829  0CA5  00C3               	movwf	cmd_tri@i
 17830                           
 17831                           ;main.c: 1037: uint8_t j;;main.c: 1038: uint8_t buffData[5];;main.c: 1039: while(n){
 17832  0CA6  2D0F               	goto	l5936
 17833  0CA7                     l5912:
 17834                           
 17835                           ;main.c: 1040: for(j = 0; j < 5; j++){
 17836  0CA7  01C8               	clrf	cmd_tri@j
 17837  0CA8                     l5918:
 17838                           
 17839                           ;main.c: 1041: buffData[j] = DATAEE_ReadByte( (i * 0x5) + 0x7012 + j);
 17840  0CA8  0848               	movf	cmd_tri@j,w
 17841  0CA9  00B2               	movwf	??_cmd_tri
 17842  0CAA  01B3               	clrf	??_cmd_tri+1
 17843  0CAB  0844               	movf	cmd_tri@i+1,w
 17844  0CAC  00A1               	movwf	___wmul@multiplier+1
 17845  0CAD  0843               	movf	cmd_tri@i,w
 17846  0CAE  00A0               	movwf	___wmul@multiplier
 17847  0CAF  3005               	movlw	5
 17848  0CB0  00A2               	movwf	___wmul@multiplicand
 17849  0CB1  3000               	movlw	0
 17850  0CB2  00A3               	movwf	___wmul@multiplicand+1
 17851  0CB3  3191  21A1  318B   	fcall	___wmul
 17852  0CB6  0020               	movlb	0	; select bank0
 17853  0CB7  0832               	movf	??_cmd_tri,w
 17854  0CB8  0720               	addwf	?___wmul,w
 17855  0CB9  00B4               	movwf	??_cmd_tri+2
 17856  0CBA  0833               	movf	??_cmd_tri+1,w
 17857  0CBB  3D21               	addwfc	?___wmul+1,w
 17858  0CBC  00B5               	movwf	??_cmd_tri+3
 17859  0CBD  0834               	movf	??_cmd_tri+2,w
 17860  0CBE  3E12               	addlw	18
 17861  0CBF  00A6               	movwf	DATAEE_ReadByte@bAdd
 17862  0CC0  3070               	movlw	112
 17863  0CC1  3D35               	addwfc	??_cmd_tri+3,w
 17864  0CC2  00A7               	movwf	DATAEE_ReadByte@bAdd+1
 17865  0CC3  3190  2024  318B   	fcall	_DATAEE_ReadByte
 17866  0CC6  0020               	movlb	0	; select bank0
 17867  0CC7  00B6               	movwf	??_cmd_tri+4
 17868  0CC8  0848               	movf	cmd_tri@j,w
 17869  0CC9  3E37               	addlw	(low (cmd_tri@buffData| 0))& (0+255)
 17870  0CCA  0086               	movwf	6
 17871  0CCB  0187               	clrf	7
 17872  0CCC  0836               	movf	??_cmd_tri+4,w
 17873  0CCD  0081               	movwf	1
 17874  0CCE                     l5920:
 17875  0CCE  3001               	movlw	1
 17876  0CCF  00B2               	movwf	??_cmd_tri
 17877  0CD0  0832               	movf	??_cmd_tri,w
 17878  0CD1  07C8               	addwf	cmd_tri@j,f
 17879  0CD2                     l5922:
 17880  0CD2  3005               	movlw	5
 17881  0CD3  0248               	subwf	cmd_tri@j,w
 17882  0CD4  1C03               	skipc
 17883  0CD5  2CD7               	goto	u6151
 17884  0CD6  2CD8               	goto	u6150
 17885  0CD7                     u6151:
 17886  0CD7  2CA8               	goto	l5918
 17887  0CD8                     u6150:
 17888  0CD8                     l5924:
 17889                           
 17890                           ;main.c: 1042: };main.c: 1043: sendMessage(5,buffData);
 17891  0CD8  3005               	movlw	5
 17892  0CD9  00A3               	movwf	sendMessage@num
 17893  0CDA  3000               	movlw	0
 17894  0CDB  00A4               	movwf	sendMessage@num+1
 17895  0CDC  3037               	movlw	(low (cmd_tri@buffData| 0))& (0+255)
 17896  0CDD  00B2               	movwf	??_cmd_tri
 17897  0CDE  0832               	movf	??_cmd_tri,w
 17898  0CDF  00A5               	movwf	sendMessage@buffer
 17899  0CE0  3192  2226  318B   	fcall	_sendMessage
 17900  0CE3                     l5926:
 17901                           
 17902                           ;main.c: 1044: if(iread == i){
 17903  0CE3  0020               	movlb	0	; select bank0
 17904  0CE4  086C               	movf	_iread,w
 17905  0CE5  00B2               	movwf	??_cmd_tri
 17906  0CE6  01B3               	clrf	??_cmd_tri+1
 17907  0CE7  0844               	movf	cmd_tri@i+1,w
 17908  0CE8  0633               	xorwf	??_cmd_tri+1,w
 17909  0CE9  1D03               	skipz
 17910  0CEA  2CED               	goto	u6165
 17911  0CEB  0843               	movf	cmd_tri@i,w
 17912  0CEC  0632               	xorwf	??_cmd_tri,w
 17913  0CED                     u6165:
 17914  0CED  1D03               	skipz
 17915  0CEE  2CF0               	goto	u6161
 17916  0CEF  2CF1               	goto	u6160
 17917  0CF0                     u6161:
 17918  0CF0  2CF9               	goto	l5930
 17919  0CF1                     u6160:
 17920  0CF1                     l5928:
 17921                           
 17922                           ;main.c: 1045: maxReadings--;
 17923  0CF1  3001               	movlw	1
 17924  0CF2  0021               	movlb	1	; select bank1
 17925  0CF3  02B2               	subwf	_maxReadings^(0+128),f
 17926                           
 17927                           ;main.c: 1046: iread++;
 17928  0CF4  3001               	movlw	1
 17929  0CF5  0020               	movlb	0	; select bank0
 17930  0CF6  00B2               	movwf	??_cmd_tri
 17931  0CF7  0832               	movf	??_cmd_tri,w
 17932  0CF8  07EC               	addwf	_iread,f
 17933  0CF9                     l5930:
 17934                           
 17935                           ;main.c: 1047: };main.c: 1048: i++;
 17936  0CF9  3001               	movlw	1
 17937  0CFA  07C3               	addwf	cmd_tri@i,f
 17938  0CFB  3000               	movlw	0
 17939  0CFC  3DC4               	addwfc	cmd_tri@i+1,f
 17940  0CFD                     l5932:
 17941                           
 17942                           ;main.c: 1049: n--;
 17943  0CFD  3001               	movlw	1
 17944  0CFE  02C9               	subwf	cmd_tri@n,f
 17945                           
 17946                           ;main.c: 1050: if(i >= NREG){
 17947  0CFF  0844               	movf	cmd_tri@i+1,w
 17948  0D00  3A80               	xorlw	128
 17949  0D01  00B2               	movwf	??_cmd_tri
 17950  0D02  3080               	movlw	128
 17951  0D03  0232               	subwf	??_cmd_tri,w
 17952  0D04  1D03               	skipz
 17953  0D05  2D08               	goto	u6175
 17954  0D06  087D               	movf	_NREG,w
 17955  0D07  0243               	subwf	cmd_tri@i,w
 17956  0D08                     u6175:
 17957  0D08  1C03               	skipc
 17958  0D09  2D0B               	goto	u6171
 17959  0D0A  2D0C               	goto	u6170
 17960  0D0B                     u6171:
 17961  0D0B  2D0F               	goto	l5936
 17962  0D0C                     u6170:
 17963  0D0C                     l5934:
 17964                           
 17965                           ;main.c: 1051: i=0;
 17966  0D0C  0020               	movlb	0	; select bank0
 17967  0D0D  01C3               	clrf	cmd_tri@i
 17968  0D0E  01C4               	clrf	cmd_tri@i+1
 17969  0D0F                     l5936:
 17970  0D0F  0020               	movlb	0	; select bank0
 17971  0D10  0849               	movf	cmd_tri@n,w
 17972  0D11  1D03               	btfss	3,2
 17973  0D12  2D14               	goto	u6181
 17974  0D13  2D15               	goto	u6180
 17975  0D14                     u6181:
 17976  0D14  2CA7               	goto	l5912
 17977  0D15                     u6180:
 17978  0D15                     l5938:
 17979                           
 17980                           ;main.c: 1052: };main.c: 1053: };main.c: 1056: uint8_t buffEOM[1];;main.c: 1057: buffEOM
      +                          [0] = (uint8_t)0xFE;
 17981  0D15  30FE               	movlw	254
 17982  0D16  00B2               	movwf	??_cmd_tri
 17983  0D17  0832               	movf	??_cmd_tri,w
 17984  0D18  00C0               	movwf	cmd_tri@buffEOM
 17985  0D19                     l5940:
 17986                           
 17987                           ;main.c: 1058: sendMessage(1,buffEOM);
 17988  0D19  3001               	movlw	1
 17989  0D1A  00A3               	movwf	sendMessage@num
 17990  0D1B  3000               	movlw	0
 17991  0D1C  00A4               	movwf	sendMessage@num+1
 17992  0D1D  3040               	movlw	(low (cmd_tri@buffEOM| 0))& (0+255)
 17993  0D1E  00B2               	movwf	??_cmd_tri
 17994  0D1F  0832               	movf	??_cmd_tri,w
 17995  0D20  00A5               	movwf	sendMessage@buffer
 17996  0D21  3192  2226  318B   	fcall	_sendMessage
 17997                           
 17998                           ;main.c: 1059: } else{
 17999  0D24  2D29               	goto	l1524
 18000  0D25                     l5942:
 18001                           
 18002                           ;main.c: 1060: sendERRORMessage((uint8_t)0XCC);
 18003  0D25  30CC               	movlw	204
 18004  0D26  3191  2126  318B   	fcall	_sendERRORMessage
 18005  0D29                     l1524:
 18006  0D29  0008               	return
 18007  0D2A                     __end_of_cmd_tri:
 18008                           
 18009                           	psect	text46
 18010  11A1                     __ptext46:	
 18011 ;; *************** function ___wmul *****************
 18012 ;; Defined at:
 18013 ;;		line 15 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 18014 ;; Parameters:    Size  Location     Type
 18015 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18016 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18017 ;; Auto vars:     Size  Location     Type
 18018 ;;  product         2    4[BANK0 ] unsigned int 
 18019 ;; Return value:  Size  Location     Type
 18020 ;;                  2    0[BANK0 ] unsigned int 
 18021 ;; Registers used:
 18022 ;;		wreg, status,2, status,0
 18023 ;; Tracked objects:
 18024 ;;		On entry : 0/0
 18025 ;;		On exit  : 0/0
 18026 ;;		Unchanged: 0/0
 18027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18028 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18029 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18031 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18032 ;;Total ram usage:        6 bytes
 18033 ;; Hardware stack levels used:    1
 18034 ;; Hardware stack levels required when called:    4
 18035 ;; This function calls:
 18036 ;;		Nothing
 18037 ;; This function is called by:
 18038 ;;		_monitoring_TEMP_LUM
 18039 ;;		_cmd_trc
 18040 ;;		_cmd_tri
 18041 ;;		_main
 18042 ;;		_sprintf
 18043 ;; This function uses a non-reentrant model
 18044 ;;
 18045                           
 18046                           
 18047                           ;psect for function ___wmul
 18048  11A1                     ___wmul:
 18049  11A1                     l4522:	
 18050                           ;incstack = 0
 18051                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18052                           
 18053  11A1  0020               	movlb	0	; select bank0
 18054  11A2  01A4               	clrf	___wmul@product
 18055  11A3  01A5               	clrf	___wmul@product+1
 18056  11A4                     l4524:
 18057  11A4  1C20               	btfss	___wmul@multiplier,0
 18058  11A5  29A7               	goto	u3601
 18059  11A6  29A8               	goto	u3600
 18060  11A7                     u3601:
 18061  11A7  29AC               	goto	l1777
 18062  11A8                     u3600:
 18063  11A8                     l4526:
 18064  11A8  0822               	movf	___wmul@multiplicand,w
 18065  11A9  07A4               	addwf	___wmul@product,f
 18066  11AA  0823               	movf	___wmul@multiplicand+1,w
 18067  11AB  3DA5               	addwfc	___wmul@product+1,f
 18068  11AC                     l1777:
 18069  11AC  3001               	movlw	1
 18070  11AD                     u3615:
 18071  11AD  35A2               	lslf	___wmul@multiplicand,f
 18072  11AE  0DA3               	rlf	___wmul@multiplicand+1,f
 18073  11AF  0B89               	decfsz	9,f
 18074  11B0  29AD               	goto	u3615
 18075  11B1                     l4528:
 18076  11B1  3001               	movlw	1
 18077  11B2                     u3625:
 18078  11B2  36A1               	lsrf	___wmul@multiplier+1,f
 18079  11B3  0CA0               	rrf	___wmul@multiplier,f
 18080  11B4  0B89               	decfsz	9,f
 18081  11B5  29B2               	goto	u3625
 18082  11B6                     l4530:
 18083  11B6  0820               	movf	___wmul@multiplier,w
 18084  11B7  0421               	iorwf	___wmul@multiplier+1,w
 18085  11B8  1D03               	btfss	3,2
 18086  11B9  29BB               	goto	u3631
 18087  11BA  29BC               	goto	u3630
 18088  11BB                     u3631:
 18089  11BB  29A4               	goto	l4524
 18090  11BC                     u3630:
 18091  11BC                     l4532:
 18092  11BC  0825               	movf	___wmul@product+1,w
 18093  11BD  00A1               	movwf	?___wmul+1
 18094  11BE  0824               	movf	___wmul@product,w
 18095  11BF  00A0               	movwf	?___wmul
 18096  11C0                     l1779:
 18097  11C0  0008               	return
 18098  11C1                     __end_of___wmul:
 18099                           
 18100                           	psect	text47
 18101  1024                     __ptext47:	
 18102 ;; *************** function _DATAEE_ReadByte *****************
 18103 ;; Defined at:
 18104 ;;		line 202 in file "mcc_generated_files/memory.c"
 18105 ;; Parameters:    Size  Location     Type
 18106 ;;  bAdd            2    6[BANK0 ] unsigned int 
 18107 ;; Auto vars:     Size  Location     Type
 18108 ;;		None
 18109 ;; Return value:  Size  Location     Type
 18110 ;;                  1    wreg      unsigned char 
 18111 ;; Registers used:
 18112 ;;		wreg, status,2
 18113 ;; Tracked objects:
 18114 ;;		On entry : 0/0
 18115 ;;		On exit  : 0/0
 18116 ;;		Unchanged: 0/0
 18117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18118 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18121 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18122 ;;Total ram usage:        2 bytes
 18123 ;; Hardware stack levels used:    1
 18124 ;; Hardware stack levels required when called:    4
 18125 ;; This function calls:
 18126 ;;		Nothing
 18127 ;; This function is called by:
 18128 ;;		_cmd_trc
 18129 ;;		_cmd_tri
 18130 ;;		_main
 18131 ;; This function uses a non-reentrant model
 18132 ;;
 18133                           
 18134                           
 18135                           ;psect for function _DATAEE_ReadByte
 18136  1024                     _DATAEE_ReadByte:
 18137  1024                     l5262:	
 18138                           ;incstack = 0
 18139                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 18140                           
 18141                           
 18142                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 18143  1024  0020               	movlb	0	; select bank0
 18144  1025  0827               	movf	DATAEE_ReadByte@bAdd+1,w
 18145  1026  0030               	movlb	16	; select bank16
 18146  1027  009B               	movwf	27	;volatile
 18147  1028                     l5264:
 18148                           
 18149                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 18150  1028  0020               	movlb	0	; select bank0
 18151  1029  0826               	movf	DATAEE_ReadByte@bAdd,w
 18152  102A  0030               	movlb	16	; select bank16
 18153  102B  009A               	movwf	26	;volatile
 18154  102C                     l5266:
 18155                           
 18156                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 18157  102C  171E               	bsf	30,6	;volsfr
 18158  102D                     l5268:
 18159                           
 18160                           ;memory.c: 207: NVMCON1bits.RD = 1;
 18161  102D  141E               	bsf	30,0	;volsfr
 18162  102E                     l5270:
 18163                           
 18164                           ;memory.c: 208: __nop();
 18165  102E  0000               	nop
 18166  102F                     l5272:
 18167                           
 18168                           ;memory.c: 209: __nop();
 18169  102F  0000               	nop
 18170  1030                     l5274:
 18171                           
 18172                           ;memory.c: 211: return (NVMDATL);
 18173  1030  0030               	movlb	16	; select bank16
 18174  1031  081C               	movf	28,w	;volatile
 18175  1032                     l734:
 18176  1032  0008               	return
 18177  1033                     __end_of_DATAEE_ReadByte:
 18178                           
 18179                           	psect	text48
 18180  10B9                     __ptext48:	
 18181 ;; *************** function _sendOKMessage *****************
 18182 ;; Defined at:
 18183 ;;		line 808 in file "main.c"
 18184 ;; Parameters:    Size  Location     Type
 18185 ;;  cmd             1    wreg     unsigned char 
 18186 ;; Auto vars:     Size  Location     Type
 18187 ;;  cmd             1   10[BANK0 ] unsigned char 
 18188 ;;  bufw            4   11[BANK0 ] unsigned char [4]
 18189 ;; Return value:  Size  Location     Type
 18190 ;;                  1    wreg      void 
 18191 ;; Registers used:
 18192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18193 ;; Tracked objects:
 18194 ;;		On entry : 0/0
 18195 ;;		On exit  : 0/0
 18196 ;;		Unchanged: 0/0
 18197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18199 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18200 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18201 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18202 ;;Total ram usage:        6 bytes
 18203 ;; Hardware stack levels used:    1
 18204 ;; Hardware stack levels required when called:    7
 18205 ;; This function calls:
 18206 ;;		_sendMessage
 18207 ;; This function is called by:
 18208 ;;		_cmd_sc
 18209 ;;		_cmd_mmp
 18210 ;;		_cmd_mta
 18211 ;;		_cmd_dac
 18212 ;;		_cmd_dtl
 18213 ;;		_cmd_aa
 18214 ;; This function uses a non-reentrant model
 18215 ;;
 18216                           
 18217                           
 18218                           ;psect for function _sendOKMessage
 18219  10B9                     _sendOKMessage:
 18220                           
 18221                           ;incstack = 0
 18222                           ; Regs used in _sendOKMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18223                           ;sendOKMessage@cmd stored from wreg
 18224  10B9  0020               	movlb	0	; select bank0
 18225  10BA  00AA               	movwf	sendOKMessage@cmd
 18226  10BB                     l5424:
 18227                           
 18228                           ;main.c: 809: uint8_t bufw[4];;main.c: 810: bufw[0] = (uint8_t)0xFD;
 18229  10BB  30FD               	movlw	253
 18230  10BC  00A9               	movwf	??_sendOKMessage
 18231  10BD  0829               	movf	??_sendOKMessage,w
 18232  10BE  00AB               	movwf	sendOKMessage@bufw
 18233                           
 18234                           ;main.c: 811: bufw[1] = (uint8_t)cmd;
 18235  10BF  082A               	movf	sendOKMessage@cmd,w
 18236  10C0  00A9               	movwf	??_sendOKMessage
 18237  10C1  0829               	movf	??_sendOKMessage,w
 18238  10C2  00AC               	movwf	sendOKMessage@bufw+1
 18239  10C3                     l5426:
 18240                           
 18241                           ;main.c: 812: bufw[2] = (uint8_t)0;
 18242  10C3  01AD               	clrf	sendOKMessage@bufw+2
 18243  10C4                     l5428:
 18244                           
 18245                           ;main.c: 813: bufw[3] = (uint8_t)0xFE;
 18246  10C4  30FE               	movlw	254
 18247  10C5  00A9               	movwf	??_sendOKMessage
 18248  10C6  0829               	movf	??_sendOKMessage,w
 18249  10C7  00AE               	movwf	sendOKMessage@bufw+3
 18250  10C8                     l5430:
 18251                           
 18252                           ;main.c: 815: sendMessage(4,bufw);
 18253  10C8  3004               	movlw	4
 18254  10C9  00A3               	movwf	sendMessage@num
 18255  10CA  3000               	movlw	0
 18256  10CB  00A4               	movwf	sendMessage@num+1
 18257  10CC  302B               	movlw	(low (sendOKMessage@bufw| 0))& (0+255)
 18258  10CD  00A9               	movwf	??_sendOKMessage
 18259  10CE  0829               	movf	??_sendOKMessage,w
 18260  10CF  00A5               	movwf	sendMessage@buffer
 18261  10D0  3192  2226  3190   	fcall	_sendMessage
 18262  10D3                     l1450:
 18263  10D3  0008               	return
 18264  10D4                     __end_of_sendOKMessage:
 18265                           
 18266                           	psect	text49
 18267  1126                     __ptext49:	
 18268 ;; *************** function _sendERRORMessage *****************
 18269 ;; Defined at:
 18270 ;;		line 818 in file "main.c"
 18271 ;; Parameters:    Size  Location     Type
 18272 ;;  cmd             1    wreg     unsigned char 
 18273 ;; Auto vars:     Size  Location     Type
 18274 ;;  cmd             1   10[BANK0 ] unsigned char 
 18275 ;;  bufw            4   11[BANK0 ] unsigned char [4]
 18276 ;; Return value:  Size  Location     Type
 18277 ;;                  1    wreg      void 
 18278 ;; Registers used:
 18279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18280 ;; Tracked objects:
 18281 ;;		On entry : 0/0
 18282 ;;		On exit  : 0/0
 18283 ;;		Unchanged: 0/0
 18284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18286 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18287 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18288 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18289 ;;Total ram usage:        6 bytes
 18290 ;; Hardware stack levels used:    1
 18291 ;; Hardware stack levels required when called:    7
 18292 ;; This function calls:
 18293 ;;		_sendMessage
 18294 ;; This function is called by:
 18295 ;;		_cmd_sc
 18296 ;;		_cmd_mmp
 18297 ;;		_cmd_mta
 18298 ;;		_cmd_dac
 18299 ;;		_cmd_dtl
 18300 ;;		_cmd_aa
 18301 ;;		_cmd_trc
 18302 ;;		_cmd_tri
 18303 ;; This function uses a non-reentrant model
 18304 ;;
 18305                           
 18306                           
 18307                           ;psect for function _sendERRORMessage
 18308  1126                     _sendERRORMessage:
 18309                           
 18310                           ;incstack = 0
 18311                           ; Regs used in _sendERRORMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18312                           ;sendERRORMessage@cmd stored from wreg
 18313  1126  0020               	movlb	0	; select bank0
 18314  1127  00AA               	movwf	sendERRORMessage@cmd
 18315  1128                     l5432:
 18316                           
 18317                           ;main.c: 819: uint8_t bufw[4];;main.c: 820: bufw[0] = (uint8_t)0xFD;
 18318  1128  30FD               	movlw	253
 18319  1129  00A9               	movwf	??_sendERRORMessage
 18320  112A  0829               	movf	??_sendERRORMessage,w
 18321  112B  00AB               	movwf	sendERRORMessage@bufw
 18322                           
 18323                           ;main.c: 821: bufw[1] = (uint8_t)cmd;
 18324  112C  082A               	movf	sendERRORMessage@cmd,w
 18325  112D  00A9               	movwf	??_sendERRORMessage
 18326  112E  0829               	movf	??_sendERRORMessage,w
 18327  112F  00AC               	movwf	sendERRORMessage@bufw+1
 18328                           
 18329                           ;main.c: 822: bufw[2] = (uint8_t)0xFF;
 18330  1130  30FF               	movlw	255
 18331  1131  00A9               	movwf	??_sendERRORMessage
 18332  1132  0829               	movf	??_sendERRORMessage,w
 18333  1133  00AD               	movwf	sendERRORMessage@bufw+2
 18334                           
 18335                           ;main.c: 823: bufw[3] = (uint8_t)0xFE;
 18336  1134  30FE               	movlw	254
 18337  1135  00A9               	movwf	??_sendERRORMessage
 18338  1136  0829               	movf	??_sendERRORMessage,w
 18339  1137  00AE               	movwf	sendERRORMessage@bufw+3
 18340  1138                     l5434:
 18341                           
 18342                           ;main.c: 825: sendMessage(4,bufw);
 18343  1138  3004               	movlw	4
 18344  1139  00A3               	movwf	sendMessage@num
 18345  113A  3000               	movlw	0
 18346  113B  00A4               	movwf	sendMessage@num+1
 18347  113C  302B               	movlw	(low (sendERRORMessage@bufw| 0))& (0+255)
 18348  113D  00A9               	movwf	??_sendERRORMessage
 18349  113E  0829               	movf	??_sendERRORMessage,w
 18350  113F  00A5               	movwf	sendMessage@buffer
 18351  1140  3192  2226  3191   	fcall	_sendMessage
 18352  1143                     l1453:
 18353  1143  0008               	return
 18354  1144                     __end_of_sendERRORMessage:
 18355                           
 18356                           	psect	text50
 18357  1226                     __ptext50:	
 18358 ;; *************** function _sendMessage *****************
 18359 ;; Defined at:
 18360 ;;		line 635 in file "main.c"
 18361 ;; Parameters:    Size  Location     Type
 18362 ;;  num             2    3[BANK0 ] int 
 18363 ;;  buffer          1    5[BANK0 ] PTR unsigned char 
 18364 ;;		 -> cmd_tri@buffEOM(1), cmd_tri@buffData(5), cmd_tri@buffInit(4), cmd_trc@buffEOM(1), 
 18365 ;;		 -> cmd_trc@buffData(5), cmd_trc@buffInit(3), cmd_ir@buff(7), cmd_ra@buff(9), 
 18366 ;;		 -> cmd_rp@buff(5), cmd_rtl@buff(5), cmd_rc@buff(6), sendERRORMessage@bufw(4), 
 18367 ;;		 -> sendOKMessage@bufw(4), checkFlags@buff(7), 
 18368 ;; Auto vars:     Size  Location     Type
 18369 ;;  n               2    7[BANK0 ] int 
 18370 ;; Return value:  Size  Location     Type
 18371 ;;                  1    wreg      void 
 18372 ;; Registers used:
 18373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18374 ;; Tracked objects:
 18375 ;;		On entry : 0/0
 18376 ;;		On exit  : 0/0
 18377 ;;		Unchanged: 0/0
 18378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18379 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18382 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18383 ;;Total ram usage:        6 bytes
 18384 ;; Hardware stack levels used:    1
 18385 ;; Hardware stack levels required when called:    6
 18386 ;; This function calls:
 18387 ;;		_putch
 18388 ;; This function is called by:
 18389 ;;		_checkFlags
 18390 ;;		_sendOKMessage
 18391 ;;		_sendERRORMessage
 18392 ;;		_cmd_rc
 18393 ;;		_cmd_rtl
 18394 ;;		_cmd_rp
 18395 ;;		_cmd_ra
 18396 ;;		_cmd_ir
 18397 ;;		_cmd_trc
 18398 ;;		_cmd_tri
 18399 ;; This function uses a non-reentrant model
 18400 ;;
 18401                           
 18402                           
 18403                           ;psect for function _sendMessage
 18404  1226                     _sendMessage:
 18405  1226                     l5060:	
 18406                           ;incstack = 0
 18407                           ; Regs used in _sendMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18408                           
 18409                           
 18410                           ;main.c: 636: int n = 0;
 18411  1226  0020               	movlb	0	; select bank0
 18412  1227  01A7               	clrf	sendMessage@n
 18413  1228  01A8               	clrf	sendMessage@n+1
 18414                           
 18415                           ;main.c: 637: while(n<num){
 18416  1229  2A3A               	goto	l5066
 18417  122A                     l5062:
 18418                           
 18419                           ;main.c: 638: putch(buffer[n]);
 18420  122A  0020               	movlb	0	; select bank0
 18421  122B  0827               	movf	sendMessage@n,w
 18422  122C  0725               	addwf	sendMessage@buffer,w
 18423  122D  00A6               	movwf	??_sendMessage
 18424  122E  0826               	movf	??_sendMessage,w
 18425  122F  0086               	movwf	6
 18426  1230  0187               	clrf	7
 18427  1231  0801               	movf	1,w
 18428  1232  319F  2782  3192   	fcall	_putch
 18429  1235                     l5064:
 18430                           
 18431                           ;main.c: 639: n++;
 18432  1235  3001               	movlw	1
 18433  1236  0020               	movlb	0	; select bank0
 18434  1237  07A7               	addwf	sendMessage@n,f
 18435  1238  3000               	movlw	0
 18436  1239  3DA8               	addwfc	sendMessage@n+1,f
 18437  123A                     l5066:
 18438  123A  0828               	movf	sendMessage@n+1,w
 18439  123B  3A80               	xorlw	128
 18440  123C  00A6               	movwf	??_sendMessage
 18441  123D  0824               	movf	sendMessage@num+1,w
 18442  123E  3A80               	xorlw	128
 18443  123F  0226               	subwf	??_sendMessage,w
 18444  1240  1D03               	skipz
 18445  1241  2A44               	goto	u4775
 18446  1242  0823               	movf	sendMessage@num,w
 18447  1243  0227               	subwf	sendMessage@n,w
 18448  1244                     u4775:
 18449  1244  1C03               	skipc
 18450  1245  2A47               	goto	u4771
 18451  1246  2A48               	goto	u4770
 18452  1247                     u4771:
 18453  1247  2A2A               	goto	l5062
 18454  1248                     u4770:
 18455  1248                     l1376:
 18456  1248  0008               	return
 18457  1249                     __end_of_sendMessage:
 18458                           
 18459                           	psect	text51
 18460  1F82                     __ptext51:	
 18461 ;; *************** function _putch *****************
 18462 ;; Defined at:
 18463 ;;		line 176 in file "mcc_generated_files/eusart.c"
 18464 ;; Parameters:    Size  Location     Type
 18465 ;;  txData          1    wreg     unsigned char 
 18466 ;; Auto vars:     Size  Location     Type
 18467 ;;  txData          1    2[BANK0 ] unsigned char 
 18468 ;; Return value:  Size  Location     Type
 18469 ;;                  1    wreg      void 
 18470 ;; Registers used:
 18471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18472 ;; Tracked objects:
 18473 ;;		On entry : 0/0
 18474 ;;		On exit  : 0/0
 18475 ;;		Unchanged: 0/0
 18476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18480 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18481 ;;Total ram usage:        1 bytes
 18482 ;; Hardware stack levels used:    1
 18483 ;; Hardware stack levels required when called:    5
 18484 ;; This function calls:
 18485 ;;		_EUSART_Write
 18486 ;; This function is called by:
 18487 ;;		_sendMessage
 18488 ;; This function uses a non-reentrant model
 18489 ;;
 18490                           
 18491                           
 18492                           ;psect for function _putch
 18493  1F82                     _putch:
 18494                           
 18495                           ;incstack = 0
 18496                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18497                           ;putch@txData stored from wreg
 18498  1F82  0020               	movlb	0	; select bank0
 18499  1F83  00A2               	movwf	putch@txData
 18500  1F84                     l4624:
 18501                           
 18502                           ;eusart.c: 178: EUSART_Write(txData);
 18503  1F84  0822               	movf	putch@txData,w
 18504  1F85  3193  2361  319F   	fcall	_EUSART_Write
 18505  1F88                     l842:
 18506  1F88  0008               	return
 18507  1F89                     __end_of_putch:
 18508                           
 18509                           	psect	text52
 18510  1361                     __ptext52:	
 18511 ;; *************** function _EUSART_Write *****************
 18512 ;; Defined at:
 18513 ;;		line 148 in file "mcc_generated_files/eusart.c"
 18514 ;; Parameters:    Size  Location     Type
 18515 ;;  txData          1    wreg     unsigned char 
 18516 ;; Auto vars:     Size  Location     Type
 18517 ;;  txData          1    1[BANK0 ] unsigned char 
 18518 ;; Return value:  Size  Location     Type
 18519 ;;                  1    wreg      void 
 18520 ;; Registers used:
 18521 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18522 ;; Tracked objects:
 18523 ;;		On entry : 0/0
 18524 ;;		On exit  : 0/0
 18525 ;;		Unchanged: 0/0
 18526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18530 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18531 ;;Total ram usage:        2 bytes
 18532 ;; Hardware stack levels used:    1
 18533 ;; Hardware stack levels required when called:    4
 18534 ;; This function calls:
 18535 ;;		Nothing
 18536 ;; This function is called by:
 18537 ;;		_putch
 18538 ;; This function uses a non-reentrant model
 18539 ;;
 18540                           
 18541                           
 18542                           ;psect for function _EUSART_Write
 18543  1361                     _EUSART_Write:
 18544                           
 18545                           ;incstack = 0
 18546                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 18547                           ;EUSART_Write@txData stored from wreg
 18548  1361  0020               	movlb	0	; select bank0
 18549  1362  00A1               	movwf	EUSART_Write@txData
 18550  1363                     l4490:
 18551  1363                     l4492:	
 18552                           ;eusart.c: 150: while(0 == eusartTxBufferRemaining)
 18553                           
 18554  1363  0021               	movlb	1	; select bank1
 18555  1364  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 18556  1365  1903               	btfsc	3,2
 18557  1366  2B68               	goto	u3551
 18558  1367  2B69               	goto	u3550
 18559  1368                     u3551:
 18560  1368  2B63               	goto	l4492
 18561  1369                     u3550:
 18562  1369                     l832:
 18563                           
 18564                           ;eusart.c: 152: };eusart.c: 154: if(0 == PIE3bits.TXIE)
 18565  1369  002E               	movlb	14	; select bank14
 18566  136A  1A19               	btfsc	25,4	;volatile
 18567  136B  2B6D               	goto	u3561
 18568  136C  2B6E               	goto	u3560
 18569  136D                     u3561:
 18570  136D  2B73               	goto	l833
 18571  136E                     u3560:
 18572  136E                     l4494:
 18573                           
 18574                           ;eusart.c: 155: {;eusart.c: 156: TX1REG = txData;
 18575  136E  0020               	movlb	0	; select bank0
 18576  136F  0821               	movf	EUSART_Write@txData,w
 18577  1370  0022               	movlb	2	; select bank2
 18578  1371  009A               	movwf	26	;volatile
 18579                           
 18580                           ;eusart.c: 157: }
 18581  1372  2B8E               	goto	l4506
 18582  1373                     l833:
 18583                           
 18584                           ;eusart.c: 158: else;eusart.c: 159: {;eusart.c: 160: PIE3bits.TXIE = 0;
 18585  1373  1219               	bcf	25,4	;volatile
 18586  1374                     l4496:
 18587                           
 18588                           ;eusart.c: 161: eusartTxBuffer[eusartTxHead++] = txData;
 18589  1374  0020               	movlb	0	; select bank0
 18590  1375  0821               	movf	EUSART_Write@txData,w
 18591  1376  00A0               	movwf	??_EUSART_Write
 18592  1377  0021               	movlb	1	; select bank1
 18593  1378  0840               	movf	_eusartTxHead^(0+128),w
 18594  1379  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 18595  137A  0086               	movwf	6
 18596  137B  3001               	movlw	1	; select bank3/4
 18597  137C  0087               	movwf	7
 18598  137D  0020               	movlb	0	; select bank0
 18599  137E  0820               	movf	??_EUSART_Write,w
 18600  137F  0081               	movwf	1
 18601  1380                     l4498:
 18602  1380  3001               	movlw	1
 18603  1381  00A0               	movwf	??_EUSART_Write
 18604  1382  0820               	movf	??_EUSART_Write,w
 18605  1383  0021               	movlb	1	; select bank1
 18606  1384  07C0               	addwf	_eusartTxHead^(0+128),f	;volatile
 18607  1385                     l4500:
 18608                           
 18609                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 18610  1385  3040               	movlw	64
 18611  1386  0240               	subwf	_eusartTxHead^(0+128),w	;volatile
 18612  1387  1C03               	skipc
 18613  1388  2B8A               	goto	u3571
 18614  1389  2B8B               	goto	u3570
 18615  138A                     u3571:
 18616  138A  2B8C               	goto	l4504
 18617  138B                     u3570:
 18618  138B                     l4502:
 18619                           
 18620                           ;eusart.c: 163: {;eusart.c: 164: eusartTxHead = 0;
 18621  138B  01C0               	clrf	_eusartTxHead^(0+128)	;volatile
 18622  138C                     l4504:
 18623                           
 18624                           ;eusart.c: 165: };eusart.c: 166: eusartTxBufferRemaining--;
 18625  138C  3001               	movlw	1
 18626  138D  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 18627  138E                     l4506:
 18628                           
 18629                           ;eusart.c: 167: };eusart.c: 168: PIE3bits.TXIE = 1;
 18630  138E  002E               	movlb	14	; select bank14
 18631  138F  1619               	bsf	25,4	;volatile
 18632  1390                     l836:
 18633  1390  0008               	return
 18634  1391                     __end_of_EUSART_Write:
 18635                           
 18636                           	psect	text53
 18637  110A                     __ptext53:	
 18638 ;; *************** function _SYSTEM_Initialize *****************
 18639 ;; Defined at:
 18640 ;;		line 50 in file "mcc_generated_files/mcc.c"
 18641 ;; Parameters:    Size  Location     Type
 18642 ;;		None
 18643 ;; Auto vars:     Size  Location     Type
 18644 ;;		None
 18645 ;; Return value:  Size  Location     Type
 18646 ;;                  1    wreg      void 
 18647 ;; Registers used:
 18648 ;;		wreg, status,2, status,0, pclath, cstack
 18649 ;; Tracked objects:
 18650 ;;		On entry : 0/0
 18651 ;;		On exit  : 0/0
 18652 ;;		Unchanged: 0/0
 18653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18658 ;;Total ram usage:        0 bytes
 18659 ;; Hardware stack levels used:    1
 18660 ;; Hardware stack levels required when called:    6
 18661 ;; This function calls:
 18662 ;;		_ADCC_Initialize
 18663 ;;		_EUSART_Initialize
 18664 ;;		_EXT_INT_Initialize
 18665 ;;		_OSCILLATOR_Initialize
 18666 ;;		_PIN_MANAGER_Initialize
 18667 ;;		_PMD_Initialize
 18668 ;;		_PWM6_Initialize
 18669 ;;		_TMR1_Initialize
 18670 ;;		_TMR2_Initialize
 18671 ;; This function is called by:
 18672 ;;		_main
 18673 ;; This function uses a non-reentrant model
 18674 ;;
 18675                           
 18676                           
 18677                           ;psect for function _SYSTEM_Initialize
 18678  110A                     _SYSTEM_Initialize:
 18679  110A                     l5436:	
 18680                           ;incstack = 0
 18681                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18682                           
 18683                           
 18684                           ;mcc.c: 52: PMD_Initialize();
 18685  110A  319F  2789  3191   	fcall	_PMD_Initialize
 18686  110D                     l5438:
 18687                           
 18688                           ;mcc.c: 53: PIN_MANAGER_Initialize();
 18689  110D  3195  251C  3191   	fcall	_PIN_MANAGER_Initialize
 18690  1110                     l5440:
 18691                           
 18692                           ;mcc.c: 54: OSCILLATOR_Initialize();
 18693  1110  319F  27B5  3191   	fcall	_OSCILLATOR_Initialize
 18694  1113                     l5442:
 18695                           
 18696                           ;mcc.c: 55: PWM6_Initialize();
 18697  1113  319F  27F3  3191   	fcall	_PWM6_Initialize
 18698  1116                     l5444:
 18699                           
 18700                           ;mcc.c: 56: ADCC_Initialize();
 18701  1116  3190  2071  3191   	fcall	_ADCC_Initialize
 18702  1119                     l5446:
 18703                           
 18704                           ;mcc.c: 57: TMR2_Initialize();
 18705  1119  3190  2016  3191   	fcall	_TMR2_Initialize
 18706  111C                     l5448:
 18707                           
 18708                           ;mcc.c: 58: TMR1_Initialize();
 18709  111C  3191  2144  3191   	fcall	_TMR1_Initialize
 18710  111F                     l5450:
 18711                           
 18712                           ;mcc.c: 59: EXT_INT_Initialize();
 18713  111F  3190  2008  3191   	fcall	_EXT_INT_Initialize
 18714  1122                     l5452:
 18715                           
 18716                           ;mcc.c: 60: EUSART_Initialize();
 18717  1122  3193  2306  3191   	fcall	_EUSART_Initialize
 18718  1125                     l182:
 18719  1125  0008               	return
 18720  1126                     __end_of_SYSTEM_Initialize:
 18721                           
 18722                           	psect	text54
 18723  1016                     __ptext54:	
 18724 ;; *************** function _TMR2_Initialize *****************
 18725 ;; Defined at:
 18726 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 18727 ;; Parameters:    Size  Location     Type
 18728 ;;		None
 18729 ;; Auto vars:     Size  Location     Type
 18730 ;;		None
 18731 ;; Return value:  Size  Location     Type
 18732 ;;                  1    wreg      void 
 18733 ;; Registers used:
 18734 ;;		wreg, status,2
 18735 ;; Tracked objects:
 18736 ;;		On entry : 0/0
 18737 ;;		On exit  : 0/0
 18738 ;;		Unchanged: 0/0
 18739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18744 ;;Total ram usage:        0 bytes
 18745 ;; Hardware stack levels used:    1
 18746 ;; Hardware stack levels required when called:    4
 18747 ;; This function calls:
 18748 ;;		Nothing
 18749 ;; This function is called by:
 18750 ;;		_SYSTEM_Initialize
 18751 ;; This function uses a non-reentrant model
 18752 ;;
 18753                           
 18754                           
 18755                           ;psect for function _TMR2_Initialize
 18756  1016                     _TMR2_Initialize:
 18757  1016                     l5182:	
 18758                           ;incstack = 0
 18759                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 18760                           
 18761                           
 18762                           ;tmr2.c: 67: T2CLKCON = 0x01;
 18763  1016  3001               	movlw	1
 18764  1017  0025               	movlb	5	; select bank5
 18765  1018  0090               	movwf	16	;volatile
 18766  1019                     l5184:
 18767                           
 18768                           ;tmr2.c: 70: T2HLT = 0x00;
 18769  1019  018F               	clrf	15	;volatile
 18770  101A                     l5186:
 18771                           
 18772                           ;tmr2.c: 73: T2RST = 0x00;
 18773  101A  0191               	clrf	17	;volatile
 18774                           
 18775                           ;tmr2.c: 76: T2PR = 0xFF;
 18776  101B  30FF               	movlw	255
 18777  101C  008D               	movwf	13	;volatile
 18778  101D                     l5188:
 18779                           
 18780                           ;tmr2.c: 79: T2TMR = 0x00;
 18781  101D  018C               	clrf	12	;volatile
 18782  101E                     l5190:
 18783                           
 18784                           ;tmr2.c: 82: PIR4bits.TMR2IF = 0;
 18785  101E  002E               	movlb	14	; select bank14
 18786  101F  1090               	bcf	16,1	;volatile
 18787  1020                     l5192:
 18788                           
 18789                           ;tmr2.c: 85: T2CON = 0x80;
 18790  1020  3080               	movlw	128
 18791  1021  0025               	movlb	5	; select bank5
 18792  1022  008E               	movwf	14	;volatile
 18793  1023                     l647:
 18794  1023  0008               	return
 18795  1024                     __end_of_TMR2_Initialize:
 18796                           
 18797                           	psect	text55
 18798  1144                     __ptext55:	
 18799 ;; *************** function _TMR1_Initialize *****************
 18800 ;; Defined at:
 18801 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 18802 ;; Parameters:    Size  Location     Type
 18803 ;;		None
 18804 ;; Auto vars:     Size  Location     Type
 18805 ;;		None
 18806 ;; Return value:  Size  Location     Type
 18807 ;;                  1    wreg      void 
 18808 ;; Registers used:
 18809 ;;		wreg, status,2, status,0, pclath, cstack
 18810 ;; Tracked objects:
 18811 ;;		On entry : 0/0
 18812 ;;		On exit  : 0/0
 18813 ;;		Unchanged: 0/0
 18814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18819 ;;Total ram usage:        0 bytes
 18820 ;; Hardware stack levels used:    1
 18821 ;; Hardware stack levels required when called:    5
 18822 ;; This function calls:
 18823 ;;		_TMR1_SetInterruptHandler
 18824 ;; This function is called by:
 18825 ;;		_SYSTEM_Initialize
 18826 ;; This function uses a non-reentrant model
 18827 ;;
 18828                           
 18829                           
 18830                           ;psect for function _TMR1_Initialize
 18831  1144                     _TMR1_Initialize:
 18832  1144                     l5194:	
 18833                           ;incstack = 0
 18834                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18835                           
 18836                           
 18837                           ;tmr1.c: 69: T1GCON = 0x00;
 18838  1144  0024               	movlb	4	; select bank4
 18839  1145  018F               	clrf	15	;volatile
 18840                           
 18841                           ;tmr1.c: 72: T1GATE = 0x00;
 18842  1146  0190               	clrf	16	;volatile
 18843  1147                     l5196:
 18844                           
 18845                           ;tmr1.c: 75: T1CLK = 0x04;
 18846  1147  3004               	movlw	4
 18847  1148  0091               	movwf	17	;volatile
 18848  1149                     l5198:
 18849                           
 18850                           ;tmr1.c: 78: TMR1H = 0x86;
 18851  1149  3086               	movlw	134
 18852  114A  008D               	movwf	13	;volatile
 18853  114B                     l5200:
 18854                           
 18855                           ;tmr1.c: 81: TMR1L = 0xE8;
 18856  114B  30E8               	movlw	232
 18857  114C  008C               	movwf	12	;volatile
 18858  114D                     l5202:
 18859                           
 18860                           ;tmr1.c: 84: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 18861  114D  080D               	movf	13,w	;volatile
 18862  114E  0021               	movlb	1	; select bank1
 18863  114F  00EE               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
 18864  1150  0024               	movlb	4	; select bank4
 18865  1151  080C               	movf	12,w	;volatile
 18866  1152  0021               	movlb	1	; select bank1
 18867  1153  00ED               	movwf	_timer1ReloadVal^(0+128)	;volatile
 18868  1154                     l5204:
 18869                           
 18870                           ;tmr1.c: 87: PIR4bits.TMR1IF = 0;
 18871  1154  002E               	movlb	14	; select bank14
 18872  1155  1010               	bcf	16,0	;volatile
 18873  1156                     l5206:
 18874                           
 18875                           ;tmr1.c: 90: PIE4bits.TMR1IE = 1;
 18876  1156  141A               	bsf	26,0	;volatile
 18877  1157                     l5208:
 18878                           
 18879                           ;tmr1.c: 93: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 18880  1157  3003               	movlw	low _TMR1_DefaultInterruptHandler
 18881  1158  0020               	movlb	0	; select bank0
 18882  1159  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 18883  115A  3000               	movlw	high _TMR1_DefaultInterruptHandler
 18884  115B  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 18885  115C  319F  27BE  3191   	fcall	_TMR1_SetInterruptHandler
 18886  115F                     l5210:
 18887                           
 18888                           ;tmr1.c: 96: T1CON = 0x05;
 18889  115F  3005               	movlw	5
 18890  1160  0024               	movlb	4	; select bank4
 18891  1161  008E               	movwf	14	;volatile
 18892  1162                     l409:
 18893  1162  0008               	return
 18894  1163                     __end_of_TMR1_Initialize:
 18895                           
 18896                           	psect	text56
 18897  1FBE                     __ptext56:	
 18898 ;; *************** function _TMR1_SetInterruptHandler *****************
 18899 ;; Defined at:
 18900 ;;		line 178 in file "mcc_generated_files/tmr1.c"
 18901 ;; Parameters:    Size  Location     Type
 18902 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 18903 ;;		 -> Clock_ISR(1), TMR1_DefaultInterruptHandler(1), 
 18904 ;; Auto vars:     Size  Location     Type
 18905 ;;		None
 18906 ;; Return value:  Size  Location     Type
 18907 ;;                  1    wreg      void 
 18908 ;; Registers used:
 18909 ;;		wreg
 18910 ;; Tracked objects:
 18911 ;;		On entry : 0/0
 18912 ;;		On exit  : 0/0
 18913 ;;		Unchanged: 0/0
 18914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18915 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18918 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18919 ;;Total ram usage:        2 bytes
 18920 ;; Hardware stack levels used:    1
 18921 ;; Hardware stack levels required when called:    4
 18922 ;; This function calls:
 18923 ;;		Nothing
 18924 ;; This function is called by:
 18925 ;;		_TMR1_Initialize
 18926 ;;		_main
 18927 ;; This function uses a non-reentrant model
 18928 ;;
 18929                           
 18930                           
 18931                           ;psect for function _TMR1_SetInterruptHandler
 18932  1FBE                     _TMR1_SetInterruptHandler:
 18933  1FBE                     l4812:	
 18934                           ;incstack = 0
 18935                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 18936                           
 18937                           
 18938                           ;tmr1.c: 179: TMR1_InterruptHandler = InterruptHandler;
 18939  1FBE  0020               	movlb	0	; select bank0
 18940  1FBF  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 18941  1FC0  0021               	movlb	1	; select bank1
 18942  1FC1  00EC               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
 18943  1FC2  0020               	movlb	0	; select bank0
 18944  1FC3  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 18945  1FC4  0021               	movlb	1	; select bank1
 18946  1FC5  00EB               	movwf	_TMR1_InterruptHandler^(0+128)
 18947  1FC6                     l439:
 18948  1FC6  0008               	return
 18949  1FC7                     __end_of_TMR1_SetInterruptHandler:
 18950                           
 18951                           	psect	text57
 18952  1FF3                     __ptext57:	
 18953 ;; *************** function _PWM6_Initialize *****************
 18954 ;; Defined at:
 18955 ;;		line 58 in file "mcc_generated_files/pwm6.c"
 18956 ;; Parameters:    Size  Location     Type
 18957 ;;		None
 18958 ;; Auto vars:     Size  Location     Type
 18959 ;;		None
 18960 ;; Return value:  Size  Location     Type
 18961 ;;                  1    wreg      void 
 18962 ;; Registers used:
 18963 ;;		wreg, status,2, status,0
 18964 ;; Tracked objects:
 18965 ;;		On entry : 0/0
 18966 ;;		On exit  : 0/0
 18967 ;;		Unchanged: 0/0
 18968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18973 ;;Total ram usage:        0 bytes
 18974 ;; Hardware stack levels used:    1
 18975 ;; Hardware stack levels required when called:    4
 18976 ;; This function calls:
 18977 ;;		Nothing
 18978 ;; This function is called by:
 18979 ;;		_SYSTEM_Initialize
 18980 ;; This function uses a non-reentrant model
 18981 ;;
 18982                           
 18983                           
 18984                           ;psect for function _PWM6_Initialize
 18985  1FF3                     _PWM6_Initialize:
 18986  1FF3                     l5172:	
 18987                           ;incstack = 0
 18988                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 18989                           
 18990                           
 18991                           ;pwm6.c: 62: PWM6CON = 0x80;
 18992  1FF3  3080               	movlw	128
 18993  1FF4  0027               	movlb	7	; select bank7
 18994  1FF5  008E               	movwf	14	;volatile
 18995                           
 18996                           ;pwm6.c: 65: PWM6DCH = 0xFF;
 18997  1FF6  30FF               	movlw	255
 18998  1FF7  008D               	movwf	13	;volatile
 18999                           
 19000                           ;pwm6.c: 68: PWM6DCL = 0xC0;
 19001  1FF8  30C0               	movlw	192
 19002  1FF9  008C               	movwf	12	;volatile
 19003  1FFA                     l5174:
 19004                           
 19005                           ;pwm6.c: 71: CCPTMRS1bits.P6TSEL = 1;
 19006  1FFA  0024               	movlb	4	; select bank4
 19007  1FFB  081F               	movf	31,w	;volatile
 19008  1FFC  39F3               	andlw	-13
 19009  1FFD  3804               	iorlw	4
 19010  1FFE  009F               	movwf	31	;volatile
 19011  1FFF                     l617:
 19012  1FFF  0008               	return
 19013  2000                     __end_of_PWM6_Initialize:
 19014                           
 19015                           	psect	text58
 19016  1F89                     __ptext58:	
 19017 ;; *************** function _PMD_Initialize *****************
 19018 ;; Defined at:
 19019 ;;		line 77 in file "mcc_generated_files/mcc.c"
 19020 ;; Parameters:    Size  Location     Type
 19021 ;;		None
 19022 ;; Auto vars:     Size  Location     Type
 19023 ;;		None
 19024 ;; Return value:  Size  Location     Type
 19025 ;;                  1    wreg      void 
 19026 ;; Registers used:
 19027 ;;		status,2
 19028 ;; Tracked objects:
 19029 ;;		On entry : 0/0
 19030 ;;		On exit  : 0/0
 19031 ;;		Unchanged: 0/0
 19032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19037 ;;Total ram usage:        0 bytes
 19038 ;; Hardware stack levels used:    1
 19039 ;; Hardware stack levels required when called:    4
 19040 ;; This function calls:
 19041 ;;		Nothing
 19042 ;; This function is called by:
 19043 ;;		_SYSTEM_Initialize
 19044 ;; This function uses a non-reentrant model
 19045 ;;
 19046                           
 19047                           
 19048                           ;psect for function _PMD_Initialize
 19049  1F89                     _PMD_Initialize:
 19050  1F89                     l5162:	
 19051                           ;incstack = 0
 19052                           ; Regs used in _PMD_Initialize: [status,2]
 19053                           
 19054                           
 19055                           ;mcc.c: 80: PMD0 = 0x00;
 19056  1F89  002F               	movlb	15	; select bank15
 19057  1F8A  0196               	clrf	22	;volatile
 19058                           
 19059                           ;mcc.c: 82: PMD1 = 0x00;
 19060  1F8B  0197               	clrf	23	;volatile
 19061                           
 19062                           ;mcc.c: 84: PMD2 = 0x00;
 19063  1F8C  0198               	clrf	24	;volatile
 19064                           
 19065                           ;mcc.c: 86: PMD3 = 0x00;
 19066  1F8D  0199               	clrf	25	;volatile
 19067                           
 19068                           ;mcc.c: 88: PMD4 = 0x00;
 19069  1F8E  019A               	clrf	26	;volatile
 19070                           
 19071                           ;mcc.c: 90: PMD5 = 0x00;
 19072  1F8F  019B               	clrf	27	;volatile
 19073  1F90                     l188:
 19074  1F90  0008               	return
 19075  1F91                     __end_of_PMD_Initialize:
 19076                           
 19077                           	psect	text59
 19078  151C                     __ptext59:	
 19079 ;; *************** function _PIN_MANAGER_Initialize *****************
 19080 ;; Defined at:
 19081 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 19082 ;; Parameters:    Size  Location     Type
 19083 ;;		None
 19084 ;; Auto vars:     Size  Location     Type
 19085 ;;		None
 19086 ;; Return value:  Size  Location     Type
 19087 ;;                  1    wreg      void 
 19088 ;; Registers used:
 19089 ;;		wreg, status,2
 19090 ;; Tracked objects:
 19091 ;;		On entry : 0/0
 19092 ;;		On exit  : 0/0
 19093 ;;		Unchanged: 0/0
 19094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19099 ;;Total ram usage:        0 bytes
 19100 ;; Hardware stack levels used:    1
 19101 ;; Hardware stack levels required when called:    4
 19102 ;; This function calls:
 19103 ;;		Nothing
 19104 ;; This function is called by:
 19105 ;;		_SYSTEM_Initialize
 19106 ;; This function uses a non-reentrant model
 19107 ;;
 19108                           
 19109                           
 19110                           ;psect for function _PIN_MANAGER_Initialize
 19111  151C                     _PIN_MANAGER_Initialize:
 19112  151C                     l5114:	
 19113                           ;incstack = 0
 19114                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 19115                           
 19116                           
 19117                           ;pin_manager.c: 62: LATE = 0x00;
 19118  151C  0020               	movlb	0	; select bank0
 19119  151D  019A               	clrf	26	;volatile
 19120                           
 19121                           ;pin_manager.c: 63: LATD = 0x00;
 19122  151E  0199               	clrf	25	;volatile
 19123                           
 19124                           ;pin_manager.c: 64: LATA = 0x00;
 19125  151F  0196               	clrf	22	;volatile
 19126                           
 19127                           ;pin_manager.c: 65: LATB = 0x00;
 19128  1520  0197               	clrf	23	;volatile
 19129                           
 19130                           ;pin_manager.c: 66: LATC = 0x00;
 19131  1521  0198               	clrf	24	;volatile
 19132  1522                     l5116:
 19133                           
 19134                           ;pin_manager.c: 71: TRISE = 0x07;
 19135  1522  3007               	movlw	7
 19136  1523  0095               	movwf	21	;volatile
 19137  1524                     l5118:
 19138                           
 19139                           ;pin_manager.c: 72: TRISA = 0x0F;
 19140  1524  300F               	movlw	15
 19141  1525  0091               	movwf	17	;volatile
 19142  1526                     l5120:
 19143                           
 19144                           ;pin_manager.c: 73: TRISB = 0xFF;
 19145  1526  30FF               	movlw	255
 19146  1527  0092               	movwf	18	;volatile
 19147  1528                     l5122:
 19148                           
 19149                           ;pin_manager.c: 74: TRISC = 0xBF;
 19150  1528  30BF               	movlw	191
 19151  1529  0093               	movwf	19	;volatile
 19152  152A                     l5124:
 19153                           
 19154                           ;pin_manager.c: 75: TRISD = 0xFF;
 19155  152A  30FF               	movlw	255
 19156  152B  0094               	movwf	20	;volatile
 19157  152C                     l5126:
 19158                           
 19159                           ;pin_manager.c: 80: ANSELD = 0xFF;
 19160  152C  30FF               	movlw	255
 19161  152D  003E               	movlb	30	; select bank30
 19162  152E  00D9               	movwf	89	;volatile
 19163  152F                     l5128:
 19164                           
 19165                           ;pin_manager.c: 81: ANSELC = 0x47;
 19166  152F  3047               	movlw	71
 19167  1530  00CE               	movwf	78	;volatile
 19168  1531                     l5130:
 19169                           
 19170                           ;pin_manager.c: 82: ANSELB = 0xEF;
 19171  1531  30EF               	movlw	239
 19172  1532  00C3               	movwf	67	;volatile
 19173  1533                     l5132:
 19174                           
 19175                           ;pin_manager.c: 83: ANSELE = 0x07;
 19176  1533  3007               	movlw	7
 19177  1534  00E4               	movwf	100	;volatile
 19178  1535                     l5134:
 19179                           
 19180                           ;pin_manager.c: 84: ANSELA = 0x4F;
 19181  1535  304F               	movlw	79
 19182  1536  00B8               	movwf	56	;volatile
 19183                           
 19184                           ;pin_manager.c: 89: WPUD = 0x00;
 19185  1537  01DA               	clrf	90	;volatile
 19186                           
 19187                           ;pin_manager.c: 90: WPUE = 0x00;
 19188  1538  01E5               	clrf	101	;volatile
 19189                           
 19190                           ;pin_manager.c: 91: WPUB = 0x00;
 19191  1539  01C4               	clrf	68	;volatile
 19192                           
 19193                           ;pin_manager.c: 92: WPUA = 0x00;
 19194  153A  01B9               	clrf	57	;volatile
 19195                           
 19196                           ;pin_manager.c: 93: WPUC = 0x00;
 19197  153B  01CF               	clrf	79	;volatile
 19198                           
 19199                           ;pin_manager.c: 98: ODCONE = 0x00;
 19200  153C  01E6               	clrf	102	;volatile
 19201                           
 19202                           ;pin_manager.c: 99: ODCONA = 0x00;
 19203  153D  01BA               	clrf	58	;volatile
 19204                           
 19205                           ;pin_manager.c: 100: ODCONB = 0x00;
 19206  153E  01C5               	clrf	69	;volatile
 19207                           
 19208                           ;pin_manager.c: 101: ODCONC = 0x00;
 19209  153F  01D0               	clrf	80	;volatile
 19210                           
 19211                           ;pin_manager.c: 102: ODCOND = 0x00;
 19212  1540  01DB               	clrf	91	;volatile
 19213  1541                     l5136:
 19214                           
 19215                           ;pin_manager.c: 107: SLRCONA = 0xFF;
 19216  1541  30FF               	movlw	255
 19217  1542  00BB               	movwf	59	;volatile
 19218  1543                     l5138:
 19219                           
 19220                           ;pin_manager.c: 108: SLRCONB = 0xFF;
 19221  1543  30FF               	movlw	255
 19222  1544  00C6               	movwf	70	;volatile
 19223  1545                     l5140:
 19224                           
 19225                           ;pin_manager.c: 109: SLRCONC = 0xFF;
 19226  1545  30FF               	movlw	255
 19227  1546  00D1               	movwf	81	;volatile
 19228  1547                     l5142:
 19229                           
 19230                           ;pin_manager.c: 110: SLRCOND = 0xFF;
 19231  1547  30FF               	movlw	255
 19232  1548  00DC               	movwf	92	;volatile
 19233  1549                     l5144:
 19234                           
 19235                           ;pin_manager.c: 111: SLRCONE = 0x07;
 19236  1549  3007               	movlw	7
 19237  154A  00E7               	movwf	103	;volatile
 19238  154B                     l5146:
 19239                           
 19240                           ;pin_manager.c: 120: INTPPS = 0x0C;
 19241  154B  300C               	movlw	12
 19242  154C  003D               	movlb	29	; select bank29
 19243  154D  0090               	movwf	16	;volatile
 19244  154E                     l5148:
 19245                           
 19246                           ;pin_manager.c: 121: RXPPS = 0x17;
 19247  154E  3017               	movlw	23
 19248  154F  00CB               	movwf	75	;volatile
 19249  1550                     l5150:
 19250                           
 19251                           ;pin_manager.c: 122: SSP1CLKPPS = 0x13;
 19252  1550  3013               	movlw	19
 19253  1551  00C5               	movwf	69	;volatile
 19254  1552                     l5152:
 19255                           
 19256                           ;pin_manager.c: 123: RC3PPS = 0x14;
 19257  1552  3014               	movlw	20
 19258  1553  003E               	movlb	30	; select bank30
 19259  1554  00A3               	movwf	35	;volatile
 19260  1555                     l5154:
 19261                           
 19262                           ;pin_manager.c: 124: RC4PPS = 0x15;
 19263  1555  3015               	movlw	21
 19264  1556  00A4               	movwf	36	;volatile
 19265  1557                     l5156:
 19266                           
 19267                           ;pin_manager.c: 125: RA6PPS = 0x0E;
 19268  1557  300E               	movlw	14
 19269  1558  0096               	movwf	22	;volatile
 19270  1559                     l5158:
 19271                           
 19272                           ;pin_manager.c: 126: RC6PPS = 0x10;
 19273  1559  3010               	movlw	16
 19274  155A  00A6               	movwf	38	;volatile
 19275  155B                     l5160:
 19276                           
 19277                           ;pin_manager.c: 127: SSP1DATPPS = 0x14;
 19278  155B  3014               	movlw	20
 19279  155C  003D               	movlb	29	; select bank29
 19280  155D  00C6               	movwf	70	;volatile
 19281  155E                     l128:
 19282  155E  0008               	return
 19283  155F                     __end_of_PIN_MANAGER_Initialize:
 19284                           
 19285                           	psect	text60
 19286  1FB5                     __ptext60:	
 19287 ;; *************** function _OSCILLATOR_Initialize *****************
 19288 ;; Defined at:
 19289 ;;		line 63 in file "mcc_generated_files/mcc.c"
 19290 ;; Parameters:    Size  Location     Type
 19291 ;;		None
 19292 ;; Auto vars:     Size  Location     Type
 19293 ;;		None
 19294 ;; Return value:  Size  Location     Type
 19295 ;;                  1    wreg      void 
 19296 ;; Registers used:
 19297 ;;		wreg, status,2
 19298 ;; Tracked objects:
 19299 ;;		On entry : 0/0
 19300 ;;		On exit  : 0/0
 19301 ;;		Unchanged: 0/0
 19302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19307 ;;Total ram usage:        0 bytes
 19308 ;; Hardware stack levels used:    1
 19309 ;; Hardware stack levels required when called:    4
 19310 ;; This function calls:
 19311 ;;		Nothing
 19312 ;; This function is called by:
 19313 ;;		_SYSTEM_Initialize
 19314 ;; This function uses a non-reentrant model
 19315 ;;
 19316                           
 19317                           
 19318                           ;psect for function _OSCILLATOR_Initialize
 19319  1FB5                     _OSCILLATOR_Initialize:
 19320  1FB5                     l5164:	
 19321                           ;incstack = 0
 19322                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 19323                           
 19324                           
 19325                           ;mcc.c: 66: OSCCON1 = 0x62;
 19326  1FB5  3062               	movlw	98
 19327  1FB6  0031               	movlb	17	; select bank17
 19328  1FB7  008D               	movwf	13	;volatile
 19329  1FB8                     l5166:
 19330                           
 19331                           ;mcc.c: 68: OSCCON3 = 0x00;
 19332  1FB8  018F               	clrf	15	;volatile
 19333  1FB9                     l5168:
 19334                           
 19335                           ;mcc.c: 70: OSCEN = 0x00;
 19336  1FB9  0191               	clrf	17	;volatile
 19337                           
 19338                           ;mcc.c: 72: OSCFRQ = 0x02;
 19339  1FBA  3002               	movlw	2
 19340  1FBB  0093               	movwf	19	;volatile
 19341  1FBC                     l5170:
 19342                           
 19343                           ;mcc.c: 74: OSCTUNE = 0x00;
 19344  1FBC  0192               	clrf	18	;volatile
 19345  1FBD                     l185:
 19346  1FBD  0008               	return
 19347  1FBE                     __end_of_OSCILLATOR_Initialize:
 19348                           
 19349                           	psect	text61
 19350  1008                     __ptext61:	
 19351 ;; *************** function _EXT_INT_Initialize *****************
 19352 ;; Defined at:
 19353 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 19354 ;; Parameters:    Size  Location     Type
 19355 ;;		None
 19356 ;; Auto vars:     Size  Location     Type
 19357 ;;		None
 19358 ;; Return value:  Size  Location     Type
 19359 ;;                  1    wreg      void 
 19360 ;; Registers used:
 19361 ;;		wreg, status,2, status,0, pclath, cstack
 19362 ;; Tracked objects:
 19363 ;;		On entry : 0/0
 19364 ;;		On exit  : 0/0
 19365 ;;		Unchanged: 0/0
 19366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19371 ;;Total ram usage:        0 bytes
 19372 ;; Hardware stack levels used:    1
 19373 ;; Hardware stack levels required when called:    5
 19374 ;; This function calls:
 19375 ;;		_INT_SetInterruptHandler
 19376 ;; This function is called by:
 19377 ;;		_SYSTEM_Initialize
 19378 ;; This function uses a non-reentrant model
 19379 ;;
 19380                           
 19381                           
 19382                           ;psect for function _EXT_INT_Initialize
 19383  1008                     _EXT_INT_Initialize:
 19384  1008                     l5212:	
 19385                           ;incstack = 0
 19386                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 19387                           
 19388                           
 19389                           ;ext_int.c: 64: (PIR0bits.INTF = 0);
 19390  1008  002E               	movlb	14	; select bank14
 19391  1009  100C               	bcf	12,0	;volatile
 19392                           
 19393                           ;ext_int.c: 66: (INTCONbits.INTEDG = 1);
 19394  100A  140B               	bsf	11,0	;volatile
 19395  100B                     l5214:
 19396                           
 19397                           ;ext_int.c: 68: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
 19398  100B  3002               	movlw	low _INT_DefaultInterruptHandler
 19399  100C  0020               	movlb	0	; select bank0
 19400  100D  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler
 19401  100E  3000               	movlw	high _INT_DefaultInterruptHandler
 19402  100F  00A1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 19403  1010  319F  27AC  3190   	fcall	_INT_SetInterruptHandler
 19404  1013                     l5216:
 19405                           
 19406                           ;ext_int.c: 69: (PIE0bits.INTE = 1);
 19407  1013  002E               	movlb	14	; select bank14
 19408  1014  1416               	bsf	22,0	;volatile
 19409  1015                     l760:
 19410  1015  0008               	return
 19411  1016                     __end_of_EXT_INT_Initialize:
 19412                           
 19413                           	psect	text62
 19414  1FAC                     __ptext62:	
 19415 ;; *************** function _INT_SetInterruptHandler *****************
 19416 ;; Defined at:
 19417 ;;		line 50 in file "mcc_generated_files/ext_int.c"
 19418 ;; Parameters:    Size  Location     Type
 19419 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 19420 ;;		 -> S1_ISR(1), INT_DefaultInterruptHandler(1), 
 19421 ;; Auto vars:     Size  Location     Type
 19422 ;;		None
 19423 ;; Return value:  Size  Location     Type
 19424 ;;                  1    wreg      void 
 19425 ;; Registers used:
 19426 ;;		wreg
 19427 ;; Tracked objects:
 19428 ;;		On entry : 0/0
 19429 ;;		On exit  : 0/0
 19430 ;;		Unchanged: 0/0
 19431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19432 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19436 ;;Total ram usage:        2 bytes
 19437 ;; Hardware stack levels used:    1
 19438 ;; Hardware stack levels required when called:    4
 19439 ;; This function calls:
 19440 ;;		Nothing
 19441 ;; This function is called by:
 19442 ;;		_EXT_INT_Initialize
 19443 ;;		_main
 19444 ;; This function uses a non-reentrant model
 19445 ;;
 19446                           
 19447                           
 19448                           ;psect for function _INT_SetInterruptHandler
 19449  1FAC                     _INT_SetInterruptHandler:
 19450  1FAC                     l4816:	
 19451                           ;incstack = 0
 19452                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 19453                           
 19454                           
 19455                           ;ext_int.c: 51: INT_InterruptHandler = InterruptHandler;
 19456  1FAC  0020               	movlb	0	; select bank0
 19457  1FAD  0821               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 19458  1FAE  0022               	movlb	2	; select bank2
 19459  1FAF  00B8               	movwf	(_INT_InterruptHandler+1)^(0+256)
 19460  1FB0  0020               	movlb	0	; select bank0
 19461  1FB1  0820               	movf	INT_SetInterruptHandler@InterruptHandler,w
 19462  1FB2  0022               	movlb	2	; select bank2
 19463  1FB3  00B7               	movwf	_INT_InterruptHandler^(0+256)
 19464  1FB4                     l754:
 19465  1FB4  0008               	return
 19466  1FB5                     __end_of_INT_SetInterruptHandler:
 19467                           
 19468                           	psect	text63
 19469  1306                     __ptext63:	
 19470 ;; *************** function _EUSART_Initialize *****************
 19471 ;; Defined at:
 19472 ;;		line 75 in file "mcc_generated_files/eusart.c"
 19473 ;; Parameters:    Size  Location     Type
 19474 ;;		None
 19475 ;; Auto vars:     Size  Location     Type
 19476 ;;		None
 19477 ;; Return value:  Size  Location     Type
 19478 ;;                  1    wreg      void 
 19479 ;; Registers used:
 19480 ;;		wreg, status,2, status,0, pclath, cstack
 19481 ;; Tracked objects:
 19482 ;;		On entry : 0/0
 19483 ;;		On exit  : 0/0
 19484 ;;		Unchanged: 0/0
 19485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19489 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19490 ;;Total ram usage:        1 bytes
 19491 ;; Hardware stack levels used:    1
 19492 ;; Hardware stack levels required when called:    5
 19493 ;; This function calls:
 19494 ;;		_EUSART_SetRxInterruptHandler
 19495 ;;		_EUSART_SetTxInterruptHandler
 19496 ;; This function is called by:
 19497 ;;		_SYSTEM_Initialize
 19498 ;; This function uses a non-reentrant model
 19499 ;;
 19500                           
 19501                           
 19502                           ;psect for function _EUSART_Initialize
 19503  1306                     _EUSART_Initialize:
 19504  1306                     l5218:	
 19505                           ;incstack = 0
 19506                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 19507                           
 19508                           
 19509                           ;eusart.c: 78: PIE3bits.RCIE = 0;
 19510  1306  002E               	movlb	14	; select bank14
 19511  1307  1299               	bcf	25,5	;volatile
 19512  1308                     l5220:
 19513                           
 19514                           ;eusart.c: 79: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 19515  1308  30C1               	movlw	low _EUSART_Receive_ISR
 19516  1309  0020               	movlb	0	; select bank0
 19517  130A  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 19518  130B  3011               	movlw	high _EUSART_Receive_ISR
 19519  130C  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 19520  130D  319F  279A  3193   	fcall	_EUSART_SetRxInterruptHandler
 19521  1310                     l5222:
 19522                           
 19523                           ;eusart.c: 80: PIE3bits.TXIE = 0;
 19524  1310  002E               	movlb	14	; select bank14
 19525  1311  1219               	bcf	25,4	;volatile
 19526                           
 19527                           ;eusart.c: 81: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
 19528  1312  3003               	movlw	low _EUSART_Transmit_ISR
 19529  1313  0020               	movlb	0	; select bank0
 19530  1314  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 19531  1315  3012               	movlw	high _EUSART_Transmit_ISR
 19532  1316  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 19533  1317  319F  27A3  3193   	fcall	_EUSART_SetTxInterruptHandler
 19534  131A                     l5224:
 19535                           
 19536                           ;eusart.c: 85: BAUD1CON = 0x08;
 19537  131A  3008               	movlw	8
 19538  131B  0022               	movlb	2	; select bank2
 19539  131C  009F               	movwf	31	;volatile
 19540  131D                     l5226:
 19541                           
 19542                           ;eusart.c: 88: RC1STA = 0x90;
 19543  131D  3090               	movlw	144
 19544  131E  009D               	movwf	29	;volatile
 19545  131F                     l5228:
 19546                           
 19547                           ;eusart.c: 91: TX1STA = 0x24;
 19548  131F  3024               	movlw	36
 19549  1320  009E               	movwf	30	;volatile
 19550  1321                     l5230:
 19551                           
 19552                           ;eusart.c: 94: SP1BRGL = 0x19;
 19553  1321  3019               	movlw	25
 19554  1322  009B               	movwf	27	;volatile
 19555  1323                     l5232:
 19556                           
 19557                           ;eusart.c: 97: SP1BRGH = 0x00;
 19558  1323  019C               	clrf	28	;volatile
 19559  1324                     l5234:
 19560                           
 19561                           ;eusart.c: 101: eusartTxHead = 0;
 19562  1324  0021               	movlb	1	; select bank1
 19563  1325  01C0               	clrf	_eusartTxHead^(0+128)	;volatile
 19564  1326                     l5236:
 19565                           
 19566                           ;eusart.c: 102: eusartTxTail = 0;
 19567  1326  01BF               	clrf	_eusartTxTail^(0+128)	;volatile
 19568  1327                     l5238:
 19569                           
 19570                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 19571  1327  3040               	movlw	64
 19572  1328  0020               	movlb	0	; select bank0
 19573  1329  00A2               	movwf	??_EUSART_Initialize
 19574  132A  0822               	movf	??_EUSART_Initialize,w
 19575  132B  0021               	movlb	1	; select bank1
 19576  132C  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
 19577  132D                     l5240:
 19578                           
 19579                           ;eusart.c: 105: eusartRxHead = 0;
 19580  132D  01BE               	clrf	_eusartRxHead^(0+128)	;volatile
 19581  132E                     l5242:
 19582                           
 19583                           ;eusart.c: 106: eusartRxTail = 0;
 19584  132E  01BD               	clrf	_eusartRxTail^(0+128)	;volatile
 19585  132F                     l5244:
 19586                           
 19587                           ;eusart.c: 107: eusartRxCount = 0;
 19588  132F  01BC               	clrf	_eusartRxCount^(0+128)	;volatile
 19589  1330                     l5246:
 19590                           
 19591                           ;eusart.c: 110: PIE3bits.RCIE = 1;
 19592  1330  002E               	movlb	14	; select bank14
 19593  1331  1699               	bsf	25,5	;volatile
 19594  1332                     l811:
 19595  1332  0008               	return
 19596  1333                     __end_of_EUSART_Initialize:
 19597                           
 19598                           	psect	text64
 19599  1FA3                     __ptext64:	
 19600 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 19601 ;; Defined at:
 19602 ;;		line 220 in file "mcc_generated_files/eusart.c"
 19603 ;; Parameters:    Size  Location     Type
 19604 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 19605 ;;		 -> EUSART_Transmit_ISR(1), 
 19606 ;; Auto vars:     Size  Location     Type
 19607 ;;		None
 19608 ;; Return value:  Size  Location     Type
 19609 ;;                  1    wreg      void 
 19610 ;; Registers used:
 19611 ;;		wreg
 19612 ;; Tracked objects:
 19613 ;;		On entry : 0/0
 19614 ;;		On exit  : 0/0
 19615 ;;		Unchanged: 0/0
 19616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19617 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19620 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19621 ;;Total ram usage:        2 bytes
 19622 ;; Hardware stack levels used:    1
 19623 ;; Hardware stack levels required when called:    4
 19624 ;; This function calls:
 19625 ;;		Nothing
 19626 ;; This function is called by:
 19627 ;;		_EUSART_Initialize
 19628 ;; This function uses a non-reentrant model
 19629 ;;
 19630                           
 19631                           
 19632                           ;psect for function _EUSART_SetTxInterruptHandler
 19633  1FA3                     _EUSART_SetTxInterruptHandler:
 19634  1FA3                     l4820:	
 19635                           ;incstack = 0
 19636                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 19637                           
 19638                           
 19639                           ;eusart.c: 221: EUSART_TxDefaultInterruptHandler = interruptHandler;
 19640  1FA3  0020               	movlb	0	; select bank0
 19641  1FA4  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 19642  1FA5  0022               	movlb	2	; select bank2
 19643  1FA6  00BC               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
 19644  1FA7  0020               	movlb	0	; select bank0
 19645  1FA8  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 19646  1FA9  0022               	movlb	2	; select bank2
 19647  1FAA  00BB               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
 19648  1FAB                     l856:
 19649  1FAB  0008               	return
 19650  1FAC                     __end_of_EUSART_SetTxInterruptHandler:
 19651                           
 19652                           	psect	text65
 19653  1F9A                     __ptext65:	
 19654 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 19655 ;; Defined at:
 19656 ;;		line 224 in file "mcc_generated_files/eusart.c"
 19657 ;; Parameters:    Size  Location     Type
 19658 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 19659 ;;		 -> EUSART_Receive_ISR(1), 
 19660 ;; Auto vars:     Size  Location     Type
 19661 ;;		None
 19662 ;; Return value:  Size  Location     Type
 19663 ;;                  1    wreg      void 
 19664 ;; Registers used:
 19665 ;;		wreg
 19666 ;; Tracked objects:
 19667 ;;		On entry : 0/0
 19668 ;;		On exit  : 0/0
 19669 ;;		Unchanged: 0/0
 19670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19671 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19675 ;;Total ram usage:        2 bytes
 19676 ;; Hardware stack levels used:    1
 19677 ;; Hardware stack levels required when called:    4
 19678 ;; This function calls:
 19679 ;;		Nothing
 19680 ;; This function is called by:
 19681 ;;		_EUSART_Initialize
 19682 ;; This function uses a non-reentrant model
 19683 ;;
 19684                           
 19685                           
 19686                           ;psect for function _EUSART_SetRxInterruptHandler
 19687  1F9A                     _EUSART_SetRxInterruptHandler:
 19688  1F9A                     l4818:	
 19689                           ;incstack = 0
 19690                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 19691                           
 19692                           
 19693                           ;eusart.c: 225: EUSART_RxDefaultInterruptHandler = interruptHandler;
 19694  1F9A  0020               	movlb	0	; select bank0
 19695  1F9B  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 19696  1F9C  0022               	movlb	2	; select bank2
 19697  1F9D  00BA               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
 19698  1F9E  0020               	movlb	0	; select bank0
 19699  1F9F  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 19700  1FA0  0022               	movlb	2	; select bank2
 19701  1FA1  00B9               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
 19702  1FA2                     l859:
 19703  1FA2  0008               	return
 19704  1FA3                     __end_of_EUSART_SetRxInterruptHandler:
 19705                           
 19706                           	psect	text66
 19707  1071                     __ptext66:	
 19708 ;; *************** function _ADCC_Initialize *****************
 19709 ;; Defined at:
 19710 ;;		line 63 in file "mcc_generated_files/adcc.c"
 19711 ;; Parameters:    Size  Location     Type
 19712 ;;		None
 19713 ;; Auto vars:     Size  Location     Type
 19714 ;;		None
 19715 ;; Return value:  Size  Location     Type
 19716 ;;                  1    wreg      void 
 19717 ;; Registers used:
 19718 ;;		wreg, status,2
 19719 ;; Tracked objects:
 19720 ;;		On entry : 0/0
 19721 ;;		On exit  : 0/0
 19722 ;;		Unchanged: 0/0
 19723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19728 ;;Total ram usage:        0 bytes
 19729 ;; Hardware stack levels used:    1
 19730 ;; Hardware stack levels required when called:    4
 19731 ;; This function calls:
 19732 ;;		Nothing
 19733 ;; This function is called by:
 19734 ;;		_SYSTEM_Initialize
 19735 ;; This function uses a non-reentrant model
 19736 ;;
 19737                           
 19738                           
 19739                           ;psect for function _ADCC_Initialize
 19740  1071                     _ADCC_Initialize:
 19741  1071                     l5176:	
 19742                           ;incstack = 0
 19743                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 19744                           
 19745                           
 19746                           ;adcc.c: 67: ADLTHL = 0x00;
 19747  1071  0022               	movlb	2	; select bank2
 19748  1072  018E               	clrf	14	;volatile
 19749                           
 19750                           ;adcc.c: 69: ADLTHH = 0x00;
 19751  1073  018F               	clrf	15	;volatile
 19752                           
 19753                           ;adcc.c: 71: ADUTHL = 0x00;
 19754  1074  0190               	clrf	16	;volatile
 19755                           
 19756                           ;adcc.c: 73: ADUTHH = 0x00;
 19757  1075  0191               	clrf	17	;volatile
 19758                           
 19759                           ;adcc.c: 75: ADSTPTL = 0x00;
 19760  1076  0192               	clrf	18	;volatile
 19761                           
 19762                           ;adcc.c: 77: ADSTPTH = 0x00;
 19763  1077  0193               	clrf	19	;volatile
 19764                           
 19765                           ;adcc.c: 79: ADRPT = 0x00;
 19766  1078  018D               	clrf	13	;volatile
 19767                           
 19768                           ;adcc.c: 81: ADPCH = 0x00;
 19769  1079  0021               	movlb	1	; select bank1
 19770  107A  019E               	clrf	30	;volatile
 19771                           
 19772                           ;adcc.c: 83: ADCAP = 0x00;
 19773  107B  019B               	clrf	27	;volatile
 19774                           
 19775                           ;adcc.c: 85: ADCON1 = 0x00;
 19776  107C  0194               	clrf	20	;volatile
 19777                           
 19778                           ;adcc.c: 87: ADCON2 = 0x00;
 19779  107D  0195               	clrf	21	;volatile
 19780                           
 19781                           ;adcc.c: 89: ADCON3 = 0x00;
 19782  107E  0196               	clrf	22	;volatile
 19783                           
 19784                           ;adcc.c: 91: ADSTAT = 0x00;
 19785  107F  0197               	clrf	23	;volatile
 19786                           
 19787                           ;adcc.c: 93: ADREF = 0x00;
 19788  1080  019A               	clrf	26	;volatile
 19789                           
 19790                           ;adcc.c: 95: ADACT = 0x00;
 19791  1081  0199               	clrf	25	;volatile
 19792                           
 19793                           ;adcc.c: 97: ADCLK = 0x00;
 19794  1082  0198               	clrf	24	;volatile
 19795  1083                     l5178:
 19796                           
 19797                           ;adcc.c: 99: ADCON0 = 0x80;
 19798  1083  3080               	movlw	128
 19799  1084  0093               	movwf	19	;volatile
 19800  1085                     l5180:
 19801                           
 19802                           ;adcc.c: 101: ADACQ = 0xFF;
 19803  1085  30FF               	movlw	255
 19804  1086  009D               	movwf	29	;volatile
 19805  1087                     l525:
 19806  1087  0008               	return
 19807  1088                     __end_of_ADCC_Initialize:
 19808                           
 19809                           	psect	text67
 19810  0814                     __ptext67:	
 19811 ;; *************** function _LCDinit *****************
 19812 ;; Defined at:
 19813 ;;		line 278 in file "main.c"
 19814 ;; Parameters:    Size  Location     Type
 19815 ;;		None
 19816 ;; Auto vars:     Size  Location     Type
 19817 ;;		None
 19818 ;; Return value:  Size  Location     Type
 19819 ;;                  1    wreg      void 
 19820 ;; Registers used:
 19821 ;;		wreg, status,2, status,0, pclath, cstack
 19822 ;; Tracked objects:
 19823 ;;		On entry : 0/0
 19824 ;;		On exit  : 0/0
 19825 ;;		Unchanged: 0/0
 19826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19830 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19831 ;;Total ram usage:        1 bytes
 19832 ;; Hardware stack levels used:    1
 19833 ;; Hardware stack levels required when called:    6
 19834 ;; This function calls:
 19835 ;;		_LCDsend
 19836 ;;		_LCDsend2x4
 19837 ;; This function is called by:
 19838 ;;		_main
 19839 ;; This function uses a non-reentrant model
 19840 ;;
 19841                           
 19842                           
 19843                           ;psect for function _LCDinit
 19844  0814                     _LCDinit:
 19845  0814                     l5578:	
 19846                           ;incstack = 0
 19847                           ; Regs used in _LCDinit: [wreg+status,2+status,0+pclath+cstack]
 19848                           
 19849                           
 19850                           ;main.c: 280: _delay((unsigned long)((50)*(1000000/4000.0)));
 19851  0814  3011               	movlw	17
 19852  0815  0020               	movlb	0	; select bank0
 19853  0816  00A8               	movwf	??_LCDinit
 19854  0817  303A               	movlw	58
 19855  0818                     u6597:
 19856  0818  0B89               	decfsz	9,f
 19857  0819  2818               	goto	u6597
 19858  081A  0BA8               	decfsz	??_LCDinit,f
 19859  081B  2818               	goto	u6597
 19860  081C  0000               	nop
 19861  081D                     l5580:
 19862                           
 19863                           ;main.c: 281: LCDsend(0x30);
 19864  081D  3030               	movlw	48
 19865  081E  3195  255F  3188   	fcall	_LCDsend
 19866  0821                     l5582:
 19867                           
 19868                           ;main.c: 282: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19869  0821  3034               	movlw	52
 19870  0822  3195  255F  3188   	fcall	_LCDsend
 19871  0825  3029               	movlw	41
 19872  0826                     u6607:
 19873  0826  0B89               	decfsz	9,f
 19874  0827  2826               	goto	u6607
 19875  0828  3200               	nop2
 19876  0829                     l5584:
 19877  0829  3030               	movlw	48
 19878  082A  3195  255F  3188   	fcall	_LCDsend
 19879  082D                     l5586:
 19880                           
 19881                           ;main.c: 283: _delay((unsigned long)((5)*(1000000/4000.0)));
 19882  082D  30FA               	movlw	250
 19883  082E                     u6617:
 19884  082E  3200               	nop2
 19885  082F  0B89               	decfsz	9,f
 19886  0830  282E               	goto	u6617
 19887                           
 19888                           ;main.c: 284: LCDsend(0x30);
 19889  0831  3030               	movlw	48
 19890  0832  3195  255F  3188   	fcall	_LCDsend
 19891                           
 19892                           ;main.c: 285: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19893  0835  3034               	movlw	52
 19894  0836  3195  255F  3188   	fcall	_LCDsend
 19895  0839                     l5588:
 19896  0839  3029               	movlw	41
 19897  083A                     u6627:
 19898  083A  0B89               	decfsz	9,f
 19899  083B  283A               	goto	u6627
 19900  083C  3200               	nop2
 19901  083D                     l5590:
 19902  083D  3030               	movlw	48
 19903  083E  3195  255F  3188   	fcall	_LCDsend
 19904                           
 19905                           ;main.c: 286: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19906  0841  3008               	movlw	8
 19907  0842                     u6637:
 19908  0842  0B89               	decfsz	9,f
 19909  0843  2842               	goto	u6637
 19910  0844  0000               	nop
 19911  0845                     l5592:
 19912                           
 19913                           ;main.c: 287: LCDsend(0x30);
 19914  0845  3030               	movlw	48
 19915  0846  3195  255F  3188   	fcall	_LCDsend
 19916  0849                     l5594:
 19917                           
 19918                           ;main.c: 288: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19919  0849  3034               	movlw	52
 19920  084A  3195  255F  3188   	fcall	_LCDsend
 19921  084D  3029               	movlw	41
 19922  084E                     u6647:
 19923  084E  0B89               	decfsz	9,f
 19924  084F  284E               	goto	u6647
 19925  0850  3200               	nop2
 19926  0851                     l5596:
 19927  0851  3030               	movlw	48
 19928  0852  3195  255F  3188   	fcall	_LCDsend
 19929  0855                     l5598:
 19930                           
 19931                           ;main.c: 289: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19932  0855  3008               	movlw	8
 19933  0856                     u6657:
 19934  0856  0B89               	decfsz	9,f
 19935  0857  2856               	goto	u6657
 19936  0858  0000               	nop
 19937                           
 19938                           ;main.c: 290: LCDsend(0x20);
 19939  0859  3020               	movlw	32
 19940  085A  3195  255F  3188   	fcall	_LCDsend
 19941                           
 19942                           ;main.c: 291: LCDsend(0x24); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x20);
 19943  085D  3024               	movlw	36
 19944  085E  3195  255F  3188   	fcall	_LCDsend
 19945  0861                     l5600:
 19946  0861  3029               	movlw	41
 19947  0862                     u6667:
 19948  0862  0B89               	decfsz	9,f
 19949  0863  2862               	goto	u6667
 19950  0864  3200               	nop2
 19951  0865                     l5602:
 19952  0865  3020               	movlw	32
 19953  0866  3195  255F  3188   	fcall	_LCDsend
 19954                           
 19955                           ;main.c: 292: _delay((unsigned long)((5)*(1000000/4000.0)));
 19956  0869  30FA               	movlw	250
 19957  086A                     u6677:
 19958  086A  3200               	nop2
 19959  086B  0B89               	decfsz	9,f
 19960  086C  286A               	goto	u6677
 19961  086D                     l5604:
 19962                           
 19963                           ;main.c: 294: LCDsend2x4(0x28, 0);
 19964  086D  0020               	movlb	0	; select bank0
 19965  086E  01A2               	clrf	LCDsend2x4@mode
 19966  086F  3028               	movlw	40
 19967  0870  318A  2237  3188   	fcall	_LCDsend2x4
 19968  0873                     l5606:
 19969                           
 19970                           ;main.c: 295: LCDsend2x4(0x06, 0);
 19971  0873  0020               	movlb	0	; select bank0
 19972  0874  01A2               	clrf	LCDsend2x4@mode
 19973  0875  3006               	movlw	6
 19974  0876  318A  2237  3188   	fcall	_LCDsend2x4
 19975  0879                     l5608:
 19976                           
 19977                           ;main.c: 296: LCDsend2x4(0x0f, 0);
 19978  0879  0020               	movlb	0	; select bank0
 19979  087A  01A2               	clrf	LCDsend2x4@mode
 19980  087B  300F               	movlw	15
 19981  087C  318A  2237  3188   	fcall	_LCDsend2x4
 19982  087F                     l5610:
 19983                           
 19984                           ;main.c: 297: LCDsend2x4(0x01, 0);
 19985  087F  0020               	movlb	0	; select bank0
 19986  0880  01A2               	clrf	LCDsend2x4@mode
 19987  0881  3001               	movlw	1
 19988  0882  318A  2237  3188   	fcall	_LCDsend2x4
 19989                           
 19990                           ;main.c: 298: _delay((unsigned long)((2)*(1000000/4000.0)));
 19991  0885  30A6               	movlw	166
 19992  0886                     u6687:
 19993  0886  0B89               	decfsz	9,f
 19994  0887  2886               	goto	u6687
 19995  0888  3200               	nop2
 19996  0889                     l1235:
 19997  0889  0008               	return
 19998  088A                     __end_of_LCDinit:
 19999                           
 20000                           	psect	text68
 20001  0A37                     __ptext68:	
 20002 ;; *************** function _LCDsend2x4 *****************
 20003 ;; Defined at:
 20004 ;;		line 255 in file "main.c"
 20005 ;; Parameters:    Size  Location     Type
 20006 ;;  c               1    wreg     unsigned char 
 20007 ;;  mode            1    2[BANK0 ] unsigned char 
 20008 ;; Auto vars:     Size  Location     Type
 20009 ;;  c               1    5[BANK0 ] unsigned char 
 20010 ;;  lc              1    7[BANK0 ] unsigned char 
 20011 ;;  hc              1    6[BANK0 ] unsigned char 
 20012 ;; Return value:  Size  Location     Type
 20013 ;;                  1    wreg      void 
 20014 ;; Registers used:
 20015 ;;		wreg, status,2, status,0, pclath, cstack
 20016 ;; Tracked objects:
 20017 ;;		On entry : 0/0
 20018 ;;		On exit  : 0/0
 20019 ;;		Unchanged: 0/0
 20020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20021 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20022 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20023 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20024 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20025 ;;Total ram usage:        6 bytes
 20026 ;; Hardware stack levels used:    1
 20027 ;; Hardware stack levels required when called:    5
 20028 ;; This function calls:
 20029 ;;		_WriteI2C
 20030 ;; This function is called by:
 20031 ;;		_LCDinit
 20032 ;;		_LCDcmd
 20033 ;;		_LCDchar
 20034 ;; This function uses a non-reentrant model
 20035 ;;
 20036                           
 20037                           
 20038                           ;psect for function _LCDsend2x4
 20039  0A37                     _LCDsend2x4:
 20040                           
 20041                           ;incstack = 0
 20042                           ; Regs used in _LCDsend2x4: [wreg+status,2+status,0+pclath+cstack]
 20043                           ;LCDsend2x4@c stored from wreg
 20044  0A37  0020               	movlb	0	; select bank0
 20045  0A38  00A5               	movwf	LCDsend2x4@c
 20046  0A39                     l4442:
 20047                           
 20048                           ;main.c: 257: unsigned char hc;;main.c: 258: unsigned char lc;;main.c: 260: hc = c & 0xf
      +                          0;
 20049  0A39  0825               	movf	LCDsend2x4@c,w
 20050  0A3A  39F0               	andlw	240
 20051  0A3B  00A3               	movwf	??_LCDsend2x4
 20052  0A3C  0823               	movf	??_LCDsend2x4,w
 20053  0A3D  00A6               	movwf	LCDsend2x4@hc
 20054  0A3E                     l4444:
 20055                           
 20056                           ;main.c: 261: lc = (c << 4) & 0xf0;
 20057  0A3E  0825               	movf	LCDsend2x4@c,w
 20058  0A3F  00A3               	movwf	??_LCDsend2x4
 20059  0A40  3003               	movlw	3
 20060  0A41                     u3405:
 20061  0A41  35A3               	lslf	??_LCDsend2x4,f
 20062  0A42  3EFF               	addlw	-1
 20063  0A43  1D03               	skipz
 20064  0A44  2A41               	goto	u3405
 20065  0A45  3523               	lslf	??_LCDsend2x4,w
 20066  0A46  39F0               	andlw	240
 20067  0A47  00A4               	movwf	??_LCDsend2x4+1
 20068  0A48  0824               	movf	??_LCDsend2x4+1,w
 20069  0A49  00A7               	movwf	LCDsend2x4@lc
 20070  0A4A                     l4446:	
 20071                           ;main.c: 263: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20072                           
 20073  0A4A  0023               	movlb	3	; select bank3
 20074  0A4B  0C0F               	rrf	15,w	;volatile
 20075  0A4C  0C89               	rrf	9,f
 20076  0A4D  3901               	andlw	1
 20077  0A4E  0020               	movlb	0	; select bank0
 20078  0A4F  00A3               	movwf	??_LCDsend2x4
 20079  0A50  0023               	movlb	3	; select bank3
 20080  0A51  0811               	movf	17,w	;volatile
 20081  0A52  391F               	andlw	31
 20082  0A53  0020               	movlb	0	; select bank0
 20083  0A54  0423               	iorwf	??_LCDsend2x4,w
 20084  0A55  1D03               	btfss	3,2
 20085  0A56  2A58               	goto	u3411
 20086  0A57  2A59               	goto	u3410
 20087  0A58                     u3411:
 20088  0A58  2A4A               	goto	l4446
 20089  0A59                     u3410:
 20090  0A59                     l1201:
 20091                           
 20092                           ;main.c: 264: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 20093  0A59  0023               	movlb	3	; select bank3
 20094  0A5A  1411               	bsf	17,0	;volatile
 20095  0A5B                     l1202:
 20096  0A5B  1811               	btfsc	17,0	;volatile
 20097  0A5C  2A5E               	goto	u3421
 20098  0A5D  2A5F               	goto	u3420
 20099  0A5E                     u3421:
 20100  0A5E  2A5B               	goto	l1202
 20101  0A5F                     u3420:
 20102  0A5F                     l4448:
 20103  0A5F  0023               	movlb	3	; select bank3
 20104  0A60  0C0F               	rrf	15,w	;volatile
 20105  0A61  0C89               	rrf	9,f
 20106  0A62  3901               	andlw	1
 20107  0A63  0020               	movlb	0	; select bank0
 20108  0A64  00A3               	movwf	??_LCDsend2x4
 20109  0A65  0023               	movlb	3	; select bank3
 20110  0A66  0811               	movf	17,w	;volatile
 20111  0A67  391F               	andlw	31
 20112  0A68  0020               	movlb	0	; select bank0
 20113  0A69  0423               	iorwf	??_LCDsend2x4,w
 20114  0A6A  1D03               	btfss	3,2
 20115  0A6B  2A6D               	goto	u3431
 20116  0A6C  2A6E               	goto	u3430
 20117  0A6D                     u3431:
 20118  0A6D  2A5F               	goto	l4448
 20119  0A6E                     u3430:
 20120  0A6E                     l4450:
 20121                           
 20122                           ;main.c: 265: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20123  0A6E  304E               	movlw	78
 20124  0A6F  3196  260B  318A   	fcall	_WriteI2C
 20125  0A72                     l4452:
 20126  0A72  0023               	movlb	3	; select bank3
 20127  0A73  0C0F               	rrf	15,w	;volatile
 20128  0A74  0C89               	rrf	9,f
 20129  0A75  3901               	andlw	1
 20130  0A76  0020               	movlb	0	; select bank0
 20131  0A77  00A3               	movwf	??_LCDsend2x4
 20132  0A78  0023               	movlb	3	; select bank3
 20133  0A79  0811               	movf	17,w	;volatile
 20134  0A7A  391F               	andlw	31
 20135  0A7B  0020               	movlb	0	; select bank0
 20136  0A7C  0423               	iorwf	??_LCDsend2x4,w
 20137  0A7D  1D03               	btfss	3,2
 20138  0A7E  2A80               	goto	u3441
 20139  0A7F  2A81               	goto	u3440
 20140  0A80                     u3441:
 20141  0A80  2A72               	goto	l4452
 20142  0A81                     u3440:
 20143  0A81                     l4454:
 20144                           
 20145                           ;main.c: 266: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20146  0A81  0826               	movf	LCDsend2x4@hc,w
 20147  0A82  0422               	iorwf	LCDsend2x4@mode,w
 20148  0A83  3808               	iorlw	8
 20149  0A84  3196  260B  318A   	fcall	_WriteI2C
 20150  0A87                     l4456:
 20151  0A87  0023               	movlb	3	; select bank3
 20152  0A88  0C0F               	rrf	15,w	;volatile
 20153  0A89  0C89               	rrf	9,f
 20154  0A8A  3901               	andlw	1
 20155  0A8B  0020               	movlb	0	; select bank0
 20156  0A8C  00A3               	movwf	??_LCDsend2x4
 20157  0A8D  0023               	movlb	3	; select bank3
 20158  0A8E  0811               	movf	17,w	;volatile
 20159  0A8F  391F               	andlw	31
 20160  0A90  0020               	movlb	0	; select bank0
 20161  0A91  0423               	iorwf	??_LCDsend2x4,w
 20162  0A92  1D03               	btfss	3,2
 20163  0A93  2A95               	goto	u3451
 20164  0A94  2A96               	goto	u3450
 20165  0A95                     u3451:
 20166  0A95  2A87               	goto	l4456
 20167  0A96                     u3450:
 20168  0A96                     l4458:
 20169                           
 20170                           ;main.c: 267: WriteI2C(hc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 20171  0A96  0826               	movf	LCDsend2x4@hc,w
 20172  0A97  0422               	iorwf	LCDsend2x4@mode,w
 20173  0A98  380C               	iorlw	12
 20174  0A99  3196  260B  318A   	fcall	_WriteI2C
 20175  0A9C                     l4460:
 20176  0A9C  0023               	movlb	3	; select bank3
 20177  0A9D  0C0F               	rrf	15,w	;volatile
 20178  0A9E  0C89               	rrf	9,f
 20179  0A9F  3901               	andlw	1
 20180  0AA0  0020               	movlb	0	; select bank0
 20181  0AA1  00A3               	movwf	??_LCDsend2x4
 20182  0AA2  0023               	movlb	3	; select bank3
 20183  0AA3  0811               	movf	17,w	;volatile
 20184  0AA4  391F               	andlw	31
 20185  0AA5  0020               	movlb	0	; select bank0
 20186  0AA6  0423               	iorwf	??_LCDsend2x4,w
 20187  0AA7  1D03               	btfss	3,2
 20188  0AA8  2AAA               	goto	u3461
 20189  0AA9  2AAB               	goto	u3460
 20190  0AAA                     u3461:
 20191  0AAA  2A9C               	goto	l4460
 20192  0AAB                     u3460:
 20193  0AAB                     l1216:
 20194  0AAB                     l4462:	
 20195                           ;main.c: 268: _delay((unsigned long)((1)*(1000000/4000000.0)));
 20196                           
 20197                           
 20198                           ;main.c: 269: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20199  0AAB  0020               	movlb	0	; select bank0
 20200  0AAC  0826               	movf	LCDsend2x4@hc,w
 20201  0AAD  0422               	iorwf	LCDsend2x4@mode,w
 20202  0AAE  3808               	iorlw	8
 20203  0AAF  3196  260B  318A   	fcall	_WriteI2C
 20204  0AB2                     l4464:
 20205  0AB2  0023               	movlb	3	; select bank3
 20206  0AB3  0C0F               	rrf	15,w	;volatile
 20207  0AB4  0C89               	rrf	9,f
 20208  0AB5  3901               	andlw	1
 20209  0AB6  0020               	movlb	0	; select bank0
 20210  0AB7  00A3               	movwf	??_LCDsend2x4
 20211  0AB8  0023               	movlb	3	; select bank3
 20212  0AB9  0811               	movf	17,w	;volatile
 20213  0ABA  391F               	andlw	31
 20214  0ABB  0020               	movlb	0	; select bank0
 20215  0ABC  0423               	iorwf	??_LCDsend2x4,w
 20216  0ABD  1D03               	btfss	3,2
 20217  0ABE  2AC0               	goto	u3471
 20218  0ABF  2AC1               	goto	u3470
 20219  0AC0                     u3471:
 20220  0AC0  2AB2               	goto	l4464
 20221  0AC1                     u3470:
 20222  0AC1                     l4466:
 20223                           
 20224                           ;main.c: 270: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20225  0AC1  0827               	movf	LCDsend2x4@lc,w
 20226  0AC2  0422               	iorwf	LCDsend2x4@mode,w
 20227  0AC3  3808               	iorlw	8
 20228  0AC4  3196  260B  318A   	fcall	_WriteI2C
 20229  0AC7                     l4468:
 20230  0AC7  0023               	movlb	3	; select bank3
 20231  0AC8  0C0F               	rrf	15,w	;volatile
 20232  0AC9  0C89               	rrf	9,f
 20233  0ACA  3901               	andlw	1
 20234  0ACB  0020               	movlb	0	; select bank0
 20235  0ACC  00A3               	movwf	??_LCDsend2x4
 20236  0ACD  0023               	movlb	3	; select bank3
 20237  0ACE  0811               	movf	17,w	;volatile
 20238  0ACF  391F               	andlw	31
 20239  0AD0  0020               	movlb	0	; select bank0
 20240  0AD1  0423               	iorwf	??_LCDsend2x4,w
 20241  0AD2  1D03               	btfss	3,2
 20242  0AD3  2AD5               	goto	u3481
 20243  0AD4  2AD6               	goto	u3480
 20244  0AD5                     u3481:
 20245  0AD5  2AC7               	goto	l4468
 20246  0AD6                     u3480:
 20247  0AD6                     l4470:
 20248                           
 20249                           ;main.c: 271: WriteI2C(lc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 20250  0AD6  0827               	movf	LCDsend2x4@lc,w
 20251  0AD7  0422               	iorwf	LCDsend2x4@mode,w
 20252  0AD8  380C               	iorlw	12
 20253  0AD9  3196  260B  318A   	fcall	_WriteI2C
 20254  0ADC                     l4472:
 20255  0ADC  0023               	movlb	3	; select bank3
 20256  0ADD  0C0F               	rrf	15,w	;volatile
 20257  0ADE  0C89               	rrf	9,f
 20258  0ADF  3901               	andlw	1
 20259  0AE0  0020               	movlb	0	; select bank0
 20260  0AE1  00A3               	movwf	??_LCDsend2x4
 20261  0AE2  0023               	movlb	3	; select bank3
 20262  0AE3  0811               	movf	17,w	;volatile
 20263  0AE4  391F               	andlw	31
 20264  0AE5  0020               	movlb	0	; select bank0
 20265  0AE6  0423               	iorwf	??_LCDsend2x4,w
 20266  0AE7  1D03               	btfss	3,2
 20267  0AE8  2AEA               	goto	u3491
 20268  0AE9  2AEB               	goto	u3490
 20269  0AEA                     u3491:
 20270  0AEA  2ADC               	goto	l4472
 20271  0AEB                     u3490:
 20272  0AEB                     l1225:
 20273  0AEB                     l4474:	
 20274                           ;main.c: 272: _delay((unsigned long)((1)*(1000000/4000000.0)));
 20275                           
 20276                           
 20277                           ;main.c: 273: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20278  0AEB  0020               	movlb	0	; select bank0
 20279  0AEC  0827               	movf	LCDsend2x4@lc,w
 20280  0AED  0422               	iorwf	LCDsend2x4@mode,w
 20281  0AEE  3808               	iorlw	8
 20282  0AEF  3196  260B  318A   	fcall	_WriteI2C
 20283  0AF2                     l4476:
 20284  0AF2  0023               	movlb	3	; select bank3
 20285  0AF3  0C0F               	rrf	15,w	;volatile
 20286  0AF4  0C89               	rrf	9,f
 20287  0AF5  3901               	andlw	1
 20288  0AF6  0020               	movlb	0	; select bank0
 20289  0AF7  00A3               	movwf	??_LCDsend2x4
 20290  0AF8  0023               	movlb	3	; select bank3
 20291  0AF9  0811               	movf	17,w	;volatile
 20292  0AFA  391F               	andlw	31
 20293  0AFB  0020               	movlb	0	; select bank0
 20294  0AFC  0423               	iorwf	??_LCDsend2x4,w
 20295  0AFD  1D03               	btfss	3,2
 20296  0AFE  2B00               	goto	u3501
 20297  0AFF  2B01               	goto	u3500
 20298  0B00                     u3501:
 20299  0B00  2AF2               	goto	l4476
 20300  0B01                     u3500:
 20301  0B01                     l1228:
 20302                           
 20303                           ;main.c: 274: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 20304  0B01  0023               	movlb	3	; select bank3
 20305  0B02  1511               	bsf	17,2	;volatile
 20306  0B03                     l1229:
 20307  0B03  1911               	btfsc	17,2	;volatile
 20308  0B04  2B06               	goto	u3511
 20309  0B05  2B07               	goto	u3510
 20310  0B06                     u3511:
 20311  0B06  2B03               	goto	l1229
 20312  0B07                     u3510:
 20313  0B07                     l4478:
 20314                           
 20315                           ;main.c: 275: _delay((unsigned long)((50)*(1000000/4000000.0)));
 20316  0B07  3004               	movlw	4
 20317  0B08                     u6697:
 20318  0B08  0B89               	decfsz	9,f
 20319  0B09  2B08               	goto	u6697
 20320  0B0A                     l1232:
 20321  0B0A  0008               	return
 20322  0B0B                     __end_of_LCDsend2x4:
 20323                           
 20324                           	psect	text69
 20325  155F                     __ptext69:	
 20326 ;; *************** function _LCDsend *****************
 20327 ;; Defined at:
 20328 ;;		line 216 in file "main.c"
 20329 ;; Parameters:    Size  Location     Type
 20330 ;;  c               1    wreg     unsigned char 
 20331 ;; Auto vars:     Size  Location     Type
 20332 ;;  c               1    3[BANK0 ] unsigned char 
 20333 ;; Return value:  Size  Location     Type
 20334 ;;                  1    wreg      void 
 20335 ;; Registers used:
 20336 ;;		wreg, status,2, status,0, pclath, cstack
 20337 ;; Tracked objects:
 20338 ;;		On entry : 0/0
 20339 ;;		On exit  : 0/0
 20340 ;;		Unchanged: 0/0
 20341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20345 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20346 ;;Total ram usage:        2 bytes
 20347 ;; Hardware stack levels used:    1
 20348 ;; Hardware stack levels required when called:    5
 20349 ;; This function calls:
 20350 ;;		_WriteI2C
 20351 ;; This function is called by:
 20352 ;;		_LCDinit
 20353 ;; This function uses a non-reentrant model
 20354 ;;
 20355                           
 20356                           
 20357                           ;psect for function _LCDsend
 20358  155F                     _LCDsend:
 20359                           
 20360                           ;incstack = 0
 20361                           ; Regs used in _LCDsend: [wreg+status,2+status,0+pclath+cstack]
 20362                           ;LCDsend@c stored from wreg
 20363  155F  0020               	movlb	0	; select bank0
 20364  1560  00A3               	movwf	LCDsend@c
 20365  1561                     l5304:
 20366  1561                     l5306:	
 20367                           ;main.c: 218: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20368                           
 20369  1561  0023               	movlb	3	; select bank3
 20370  1562  0C0F               	rrf	15,w	;volatile
 20371  1563  0C89               	rrf	9,f
 20372  1564  3901               	andlw	1
 20373  1565  0020               	movlb	0	; select bank0
 20374  1566  00A2               	movwf	??_LCDsend
 20375  1567  0023               	movlb	3	; select bank3
 20376  1568  0811               	movf	17,w	;volatile
 20377  1569  391F               	andlw	31
 20378  156A  0020               	movlb	0	; select bank0
 20379  156B  0422               	iorwf	??_LCDsend,w
 20380  156C  1D03               	btfss	3,2
 20381  156D  2D6F               	goto	u4921
 20382  156E  2D70               	goto	u4920
 20383  156F                     u4921:
 20384  156F  2D61               	goto	l5306
 20385  1570                     u4920:
 20386  1570                     l1099:
 20387                           
 20388                           ;main.c: 219: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 20389  1570  0023               	movlb	3	; select bank3
 20390  1571  1411               	bsf	17,0	;volatile
 20391  1572                     l1100:
 20392  1572  1811               	btfsc	17,0	;volatile
 20393  1573  2D75               	goto	u4931
 20394  1574  2D76               	goto	u4930
 20395  1575                     u4931:
 20396  1575  2D72               	goto	l1100
 20397  1576                     u4930:
 20398  1576                     l5308:
 20399  1576  0023               	movlb	3	; select bank3
 20400  1577  0C0F               	rrf	15,w	;volatile
 20401  1578  0C89               	rrf	9,f
 20402  1579  3901               	andlw	1
 20403  157A  0020               	movlb	0	; select bank0
 20404  157B  00A2               	movwf	??_LCDsend
 20405  157C  0023               	movlb	3	; select bank3
 20406  157D  0811               	movf	17,w	;volatile
 20407  157E  391F               	andlw	31
 20408  157F  0020               	movlb	0	; select bank0
 20409  1580  0422               	iorwf	??_LCDsend,w
 20410  1581  1D03               	btfss	3,2
 20411  1582  2D84               	goto	u4941
 20412  1583  2D85               	goto	u4940
 20413  1584                     u4941:
 20414  1584  2D76               	goto	l5308
 20415  1585                     u4940:
 20416  1585                     l5310:
 20417                           
 20418                           ;main.c: 220: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20419  1585  304E               	movlw	78
 20420  1586  3196  260B  3195   	fcall	_WriteI2C
 20421  1589                     l5312:
 20422  1589  0023               	movlb	3	; select bank3
 20423  158A  0C0F               	rrf	15,w	;volatile
 20424  158B  0C89               	rrf	9,f
 20425  158C  3901               	andlw	1
 20426  158D  0020               	movlb	0	; select bank0
 20427  158E  00A2               	movwf	??_LCDsend
 20428  158F  0023               	movlb	3	; select bank3
 20429  1590  0811               	movf	17,w	;volatile
 20430  1591  391F               	andlw	31
 20431  1592  0020               	movlb	0	; select bank0
 20432  1593  0422               	iorwf	??_LCDsend,w
 20433  1594  1D03               	btfss	3,2
 20434  1595  2D97               	goto	u4951
 20435  1596  2D98               	goto	u4950
 20436  1597                     u4951:
 20437  1597  2D89               	goto	l5312
 20438  1598                     u4950:
 20439  1598                     l5314:
 20440                           
 20441                           ;main.c: 221: WriteI2C(c); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20442  1598  0823               	movf	LCDsend@c,w
 20443  1599  3196  260B  3195   	fcall	_WriteI2C
 20444  159C                     l5316:
 20445  159C  0023               	movlb	3	; select bank3
 20446  159D  0C0F               	rrf	15,w	;volatile
 20447  159E  0C89               	rrf	9,f
 20448  159F  3901               	andlw	1
 20449  15A0  0020               	movlb	0	; select bank0
 20450  15A1  00A2               	movwf	??_LCDsend
 20451  15A2  0023               	movlb	3	; select bank3
 20452  15A3  0811               	movf	17,w	;volatile
 20453  15A4  391F               	andlw	31
 20454  15A5  0020               	movlb	0	; select bank0
 20455  15A6  0422               	iorwf	??_LCDsend,w
 20456  15A7  1D03               	btfss	3,2
 20457  15A8  2DAA               	goto	u4961
 20458  15A9  2DAB               	goto	u4960
 20459  15AA                     u4961:
 20460  15AA  2D9C               	goto	l5316
 20461  15AB                     u4960:
 20462  15AB                     l1111:
 20463                           
 20464                           ;main.c: 222: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 20465  15AB  0023               	movlb	3	; select bank3
 20466  15AC  1511               	bsf	17,2	;volatile
 20467  15AD                     l1112:
 20468  15AD  1911               	btfsc	17,2	;volatile
 20469  15AE  2DB0               	goto	u4971
 20470  15AF  2DB1               	goto	u4970
 20471  15B0                     u4971:
 20472  15B0  2DAD               	goto	l1112
 20473  15B1                     u4970:
 20474  15B1                     l1115:
 20475  15B1  0008               	return
 20476  15B2                     __end_of_LCDsend:
 20477                           
 20478                           	psect	text70
 20479  160B                     __ptext70:	
 20480 ;; *************** function _WriteI2C *****************
 20481 ;; Defined at:
 20482 ;;		line 47 in file "I2C/i2c.c"
 20483 ;; Parameters:    Size  Location     Type
 20484 ;;  data_out        1    wreg     unsigned char 
 20485 ;; Auto vars:     Size  Location     Type
 20486 ;;  data_out        1    1[BANK0 ] unsigned char 
 20487 ;; Return value:  Size  Location     Type
 20488 ;;                  1    wreg      char 
 20489 ;; Registers used:
 20490 ;;		wreg, status,2, status,0
 20491 ;; Tracked objects:
 20492 ;;		On entry : 0/0
 20493 ;;		On exit  : 0/0
 20494 ;;		Unchanged: 0/0
 20495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20500 ;;Total ram usage:        2 bytes
 20501 ;; Hardware stack levels used:    1
 20502 ;; Hardware stack levels required when called:    4
 20503 ;; This function calls:
 20504 ;;		Nothing
 20505 ;; This function is called by:
 20506 ;;		_tsttc
 20507 ;;		_LCDsend
 20508 ;;		_LCDsend2x4
 20509 ;;		_LCDrecv
 20510 ;; This function uses a non-reentrant model
 20511 ;;
 20512                           
 20513                           
 20514                           ;psect for function _WriteI2C
 20515  160B                     _WriteI2C:
 20516                           
 20517                           ;incstack = 0
 20518                           ; Regs used in _WriteI2C: [wreg+status,2+status,0]
 20519                           ;WriteI2C@data_out stored from wreg
 20520  160B  0020               	movlb	0	; select bank0
 20521  160C  00A1               	movwf	WriteI2C@data_out
 20522  160D                     l4412:
 20523                           
 20524                           ;i2c.c: 49: SSP1BUF = data_out;
 20525  160D  0821               	movf	WriteI2C@data_out,w
 20526  160E  0023               	movlb	3	; select bank3
 20527  160F  008C               	movwf	12	;volatile
 20528  1610                     l4414:
 20529                           
 20530                           ;i2c.c: 50: if ( SSP1CON1bits.WCOL )
 20531  1610  1F90               	btfss	16,7	;volatile
 20532  1611  2E13               	goto	u3311
 20533  1612  2E14               	goto	u3310
 20534  1613                     u3311:
 20535  1613  2E15               	goto	l4420
 20536  1614                     u3310:
 20537  1614  2E64               	goto	l30
 20538  1615                     l4420:
 20539                           
 20540                           ;i2c.c: 52: else;i2c.c: 53: {;i2c.c: 54: if( ((SSP1CON1&0x0F)!=0x08) && ((SSP1CON1&0x0F)
      +                          !=0x0B) )
 20541  1615  300F               	movlw	15
 20542  1616  0510               	andwf	16,w	;volatile
 20543  1617  0020               	movlb	0	; select bank0
 20544  1618  00A0               	movwf	??_WriteI2C
 20545  1619  3008               	movlw	8
 20546  161A  0620               	xorwf	??_WriteI2C,w
 20547  161B  1903               	btfsc	3,2
 20548  161C  2E1E               	goto	u3321
 20549  161D  2E1F               	goto	u3320
 20550  161E                     u3321:
 20551  161E  2E38               	goto	l4432
 20552  161F                     u3320:
 20553  161F                     l4422:
 20554  161F  300F               	movlw	15
 20555  1620  0023               	movlb	3	; select bank3
 20556  1621  0510               	andwf	16,w	;volatile
 20557  1622  0020               	movlb	0	; select bank0
 20558  1623  00A0               	movwf	??_WriteI2C
 20559  1624  300B               	movlw	11
 20560  1625  0620               	xorwf	??_WriteI2C,w
 20561  1626  1903               	btfsc	3,2
 20562  1627  2E29               	goto	u3331
 20563  1628  2E2A               	goto	u3330
 20564  1629                     u3331:
 20565  1629  2E38               	goto	l4432
 20566  162A                     u3330:
 20567  162A                     l4424:
 20568                           
 20569                           ;i2c.c: 55: {;i2c.c: 56: SSP1CON1bits.CKP = 1;
 20570  162A  0023               	movlb	3	; select bank3
 20571  162B  1610               	bsf	16,4	;volatile
 20572  162C                     l33:	
 20573                           ;i2c.c: 57: while ( !PIR3bits.SSP1IF );
 20574                           
 20575  162C  002E               	movlb	14	; select bank14
 20576  162D  1C0F               	btfss	15,0	;volatile
 20577  162E  2E30               	goto	u3341
 20578  162F  2E31               	goto	u3340
 20579  1630                     u3341:
 20580  1630  2E2C               	goto	l33
 20581  1631                     u3340:
 20582  1631                     l35:
 20583                           
 20584                           ;i2c.c: 59: if ( ( !SSP1STATbits.R_W ) && ( !SSP1STATbits.BF ) )
 20585  1631  0023               	movlb	3	; select bank3
 20586  1632  190F               	btfsc	15,2	;volatile
 20587  1633  2E35               	goto	u3351
 20588  1634  2E36               	goto	u3350
 20589  1635                     u3351:
 20590  1635  2E64               	goto	l30
 20591  1636                     u3350:
 20592  1636                     l4426:
 20593  1636  080F               	movf	15,w	;volatile
 20594  1637  2E64               	goto	l30
 20595  1638                     l4432:
 20596                           
 20597                           ;i2c.c: 68: else if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 20598  1638  300F               	movlw	15
 20599  1639  0023               	movlb	3	; select bank3
 20600  163A  0510               	andwf	16,w	;volatile
 20601  163B  0020               	movlb	0	; select bank0
 20602  163C  00A0               	movwf	??_WriteI2C
 20603  163D  3008               	movlw	8
 20604  163E  0620               	xorwf	??_WriteI2C,w
 20605  163F  1903               	btfsc	3,2
 20606  1640  2E42               	goto	u3361
 20607  1641  2E43               	goto	u3360
 20608  1642                     u3361:
 20609  1642  2E4E               	goto	l42
 20610  1643                     u3360:
 20611  1643                     l4434:
 20612  1643  300F               	movlw	15
 20613  1644  0023               	movlb	3	; select bank3
 20614  1645  0510               	andwf	16,w	;volatile
 20615  1646  0020               	movlb	0	; select bank0
 20616  1647  00A0               	movwf	??_WriteI2C
 20617  1648  300B               	movlw	11
 20618  1649  0620               	xorwf	??_WriteI2C,w
 20619  164A  1D03               	btfss	3,2
 20620  164B  2E4D               	goto	u3371
 20621  164C  2E4E               	goto	u3370
 20622  164D                     u3371:
 20623  164D  2E64               	goto	l30
 20624  164E                     u3370:
 20625  164E                     l42:
 20626  164E  0023               	movlb	3	; select bank3
 20627  164F  180F               	btfsc	15,0	;volatile
 20628  1650  2E52               	goto	u3381
 20629  1651  2E53               	goto	u3380
 20630  1652                     u3381:
 20631  1652  2E4E               	goto	l42
 20632  1653                     u3380:
 20633  1653                     l4436:
 20634  1653  0023               	movlb	3	; select bank3
 20635  1654  0C0F               	rrf	15,w	;volatile
 20636  1655  0C89               	rrf	9,f
 20637  1656  3901               	andlw	1
 20638  1657  0020               	movlb	0	; select bank0
 20639  1658  00A0               	movwf	??_WriteI2C
 20640  1659  0023               	movlb	3	; select bank3
 20641  165A  0811               	movf	17,w	;volatile
 20642  165B  391F               	andlw	31
 20643  165C  0020               	movlb	0	; select bank0
 20644  165D  0420               	iorwf	??_WriteI2C,w
 20645  165E  1D03               	btfss	3,2
 20646  165F  2E61               	goto	u3391
 20647  1660  2E62               	goto	u3390
 20648  1661                     u3391:
 20649  1661  2E53               	goto	l4436
 20650  1662                     u3390:
 20651  1662                     l47:
 20652                           
 20653                           ;i2c.c: 72: if ( SSP1CON2bits.ACKSTAT )
 20654  1662  0023               	movlb	3	; select bank3
 20655  1663  0811               	movf	17,w	;volatile
 20656  1664                     l30:
 20657  1664  0008               	return
 20658  1665                     __end_of_WriteI2C:
 20659                           
 20660                           	psect	text71
 20661  1F59                     __ptext71:	
 20662 ;; *************** function _EUSART_is_rx_ready *****************
 20663 ;; Defined at:
 20664 ;;		line 118 in file "mcc_generated_files/eusart.c"
 20665 ;; Parameters:    Size  Location     Type
 20666 ;;		None
 20667 ;; Auto vars:     Size  Location     Type
 20668 ;;		None
 20669 ;; Return value:  Size  Location     Type
 20670 ;;                  1    wreg      unsigned char 
 20671 ;; Registers used:
 20672 ;;		wreg
 20673 ;; Tracked objects:
 20674 ;;		On entry : 0/0
 20675 ;;		On exit  : 0/0
 20676 ;;		Unchanged: 0/0
 20677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20682 ;;Total ram usage:        0 bytes
 20683 ;; Hardware stack levels used:    1
 20684 ;; Hardware stack levels required when called:    4
 20685 ;; This function calls:
 20686 ;;		Nothing
 20687 ;; This function is called by:
 20688 ;;		_main
 20689 ;; This function uses a non-reentrant model
 20690 ;;
 20691                           
 20692                           
 20693                           ;psect for function _EUSART_is_rx_ready
 20694  1F59                     _EUSART_is_rx_ready:
 20695  1F59                     l5478:	
 20696                           ;incstack = 0
 20697                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 20698                           
 20699                           
 20700                           ;eusart.c: 120: return eusartRxCount;
 20701  1F59  0021               	movlb	1	; select bank1
 20702  1F5A  083C               	movf	_eusartRxCount^(0+128),w	;volatile
 20703  1F5B                     l817:
 20704  1F5B  0008               	return
 20705  1F5C                     __end_of_EUSART_is_rx_ready:
 20706                           
 20707                           	psect	intentry
 20708  0004                     __pintentry:	
 20709 ;; *************** function _INTERRUPT_InterruptManager *****************
 20710 ;; Defined at:
 20711 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 20712 ;; Parameters:    Size  Location     Type
 20713 ;;		None
 20714 ;; Auto vars:     Size  Location     Type
 20715 ;;		None
 20716 ;; Return value:  Size  Location     Type
 20717 ;;                  1    wreg      void 
 20718 ;; Registers used:
 20719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20720 ;; Tracked objects:
 20721 ;;		On entry : 0/0
 20722 ;;		On exit  : 0/0
 20723 ;;		Unchanged: 0/0
 20724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20729 ;;Total ram usage:        0 bytes
 20730 ;; Hardware stack levels used:    1
 20731 ;; Hardware stack levels required when called:    3
 20732 ;; This function calls:
 20733 ;;		Absolute function
 20734 ;;		_EUSART_Receive_ISR
 20735 ;;		_EUSART_Transmit_ISR
 20736 ;;		_INT_ISR
 20737 ;;		_TMR1_ISR
 20738 ;; This function is called by:
 20739 ;;		Interrupt level 1
 20740 ;; This function uses a non-reentrant model
 20741 ;;
 20742                           
 20743  0004                     _INTERRUPT_InterruptManager:
 20744                           
 20745                           ;incstack = 0
 20746  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 20747                           
 20748                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 20749  0005  3180               	pagesel	$
 20750  0006                     i1l5956:
 20751                           
 20752                           ;interrupt_manager.c: 55: if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
 20753  0006  002E               	movlb	14	; select bank14
 20754  0007  1C16               	btfss	22,0	;volatile
 20755  0008  280A               	goto	u620_21
 20756  0009  280B               	goto	u620_20
 20757  000A                     u620_21:
 20758  000A  2813               	goto	i1l364
 20759  000B                     u620_20:
 20760  000B                     i1l5958:
 20761  000B  1C0C               	btfss	12,0	;volatile
 20762  000C  280E               	goto	u621_21
 20763  000D  280F               	goto	u621_20
 20764  000E                     u621_21:
 20765  000E  2813               	goto	i1l364
 20766  000F                     u621_20:
 20767  000F                     i1l5960:
 20768                           
 20769                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: INT_ISR();
 20770  000F  319F  2770  3180   	fcall	_INT_ISR
 20771                           
 20772                           ;interrupt_manager.c: 58: }
 20773  0012  2850               	goto	i1l378
 20774  0013                     i1l364:
 20775                           
 20776                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
 20777  0013  1F0B               	btfss	11,6	;volatile
 20778  0014  2816               	goto	u622_21
 20779  0015  2817               	goto	u622_20
 20780  0016                     u622_21:
 20781  0016  2850               	goto	i1l378
 20782  0017                     u622_20:
 20783  0017                     i1l5962:
 20784                           
 20785                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: if(PIE3bits.TXIE == 1 && PIR3bits.T
      +                          XIF == 1)
 20786  0017  1E19               	btfss	25,4	;volatile
 20787  0018  281A               	goto	u623_21
 20788  0019  281B               	goto	u623_20
 20789  001A                     u623_21:
 20790  001A  2826               	goto	i1l367
 20791  001B                     u623_20:
 20792  001B                     i1l5964:
 20793  001B  1E0F               	btfss	15,4	;volatile
 20794  001C  281E               	goto	u624_21
 20795  001D  281F               	goto	u624_20
 20796  001E                     u624_21:
 20797  001E  2826               	goto	i1l367
 20798  001F                     u624_20:
 20799  001F                     i1l5966:
 20800                           
 20801                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 63: EUSART_TxDefaultInterruptHandler();
 20802  001F  0022               	movlb	2	; select bank2
 20803  0020  083C               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
 20804  0021  008A               	movwf	10
 20805  0022  083B               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
 20806  0023  000A               	callw
 20807  0024  3180               	pagesel	$
 20808                           
 20809                           ;interrupt_manager.c: 64: }
 20810  0025  2850               	goto	i1l378
 20811  0026                     i1l367:
 20812                           
 20813                           ;interrupt_manager.c: 65: else if(PIE3bits.RCIE == 1 && PIR3bits.RCIF == 1)
 20814  0026  1E99               	btfss	25,5	;volatile
 20815  0027  2829               	goto	u625_21
 20816  0028  282A               	goto	u625_20
 20817  0029                     u625_21:
 20818  0029  2835               	goto	i1l369
 20819  002A                     u625_20:
 20820  002A                     i1l5968:
 20821  002A  1E8F               	btfss	15,5	;volatile
 20822  002B  282D               	goto	u626_21
 20823  002C  282E               	goto	u626_20
 20824  002D                     u626_21:
 20825  002D  2835               	goto	i1l369
 20826  002E                     u626_20:
 20827  002E                     i1l5970:
 20828                           
 20829                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
 20830  002E  0022               	movlb	2	; select bank2
 20831  002F  083A               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 20832  0030  008A               	movwf	10
 20833  0031  0839               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 20834  0032  000A               	callw
 20835  0033  3180               	pagesel	$
 20836                           
 20837                           ;interrupt_manager.c: 68: }
 20838  0034  2850               	goto	i1l378
 20839  0035                     i1l369:
 20840                           
 20841                           ;interrupt_manager.c: 69: else if(PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1)
 20842  0035  1C1A               	btfss	26,0	;volatile
 20843  0036  2838               	goto	u627_21
 20844  0037  2839               	goto	u627_20
 20845  0038                     u627_21:
 20846  0038  2841               	goto	i1l371
 20847  0039                     u627_20:
 20848  0039                     i1l5972:
 20849  0039  1C10               	btfss	16,0	;volatile
 20850  003A  283C               	goto	u628_21
 20851  003B  283D               	goto	u628_20
 20852  003C                     u628_21:
 20853  003C  2841               	goto	i1l371
 20854  003D                     u628_20:
 20855  003D                     i1l5974:
 20856                           
 20857                           ;interrupt_manager.c: 70: {;interrupt_manager.c: 71: TMR1_ISR();
 20858  003D  3190  205A  3180   	fcall	_TMR1_ISR
 20859                           
 20860                           ;interrupt_manager.c: 72: }
 20861  0040  2850               	goto	i1l378
 20862  0041                     i1l371:
 20863                           
 20864                           ;interrupt_manager.c: 73: else if(PIE3bits.BCL1IE == 1 && PIR3bits.BCL1IF == 1)
 20865  0041  1C99               	btfss	25,1	;volatile
 20866  0042  2844               	goto	u629_21
 20867  0043  2845               	goto	u629_20
 20868  0044                     u629_21:
 20869  0044  284A               	goto	i1l373
 20870  0045                     u629_20:
 20871  0045                     i1l5976:
 20872                           
 20873                           ;interrupt_manager.c: 74: {;interrupt_manager.c: 75: i2c1_driver_busCollisionISR();
 20874  0045  1C8F               	btfss	15,1	;volatile
 20875  0046  2848               	goto	u630_21
 20876  0047  2849               	goto	u630_20
 20877  0048                     u630_21:
 20878  0048  284A               	goto	i1l373
 20879  0049                     u630_20:
 20880  0049  2850               	goto	i1l378
 20881  004A                     i1l373:
 20882                           
 20883                           ;interrupt_manager.c: 77: else if(PIE3bits.SSP1IE == 1 && PIR3bits.SSP1IF == 1)
 20884  004A  1C19               	btfss	25,0	;volatile
 20885  004B  284D               	goto	u631_21
 20886  004C  284E               	goto	u631_20
 20887  004D                     u631_21:
 20888  004D  2850               	goto	i1l372
 20889  004E                     u631_20:
 20890  004E                     i1l5980:
 20891                           
 20892                           ;interrupt_manager.c: 78: {;interrupt_manager.c: 79: i2c1_driver_i2cISR();
 20893  004E  080F               	movf	15,w	;volatile
 20894  004F  2850               	goto	i1l378
 20895  0050                     i1l372:
 20896  0050                     i1l378:
 20897  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 20898  0051  0009               	retfie
 20899  0052                     __end_of_INTERRUPT_InterruptManager:
 20900                           
 20901                           	psect	text73
 20902  105A                     __ptext73:	
 20903 ;; *************** function _TMR1_ISR *****************
 20904 ;; Defined at:
 20905 ;;		line 164 in file "mcc_generated_files/tmr1.c"
 20906 ;; Parameters:    Size  Location     Type
 20907 ;;		None
 20908 ;; Auto vars:     Size  Location     Type
 20909 ;;		None
 20910 ;; Return value:  Size  Location     Type
 20911 ;;                  1    wreg      void 
 20912 ;; Registers used:
 20913 ;;		wreg, status,2, status,0, pclath, cstack
 20914 ;; Tracked objects:
 20915 ;;		On entry : 0/0
 20916 ;;		On exit  : 0/0
 20917 ;;		Unchanged: 0/0
 20918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20923 ;;Total ram usage:        0 bytes
 20924 ;; Hardware stack levels used:    1
 20925 ;; Hardware stack levels required when called:    2
 20926 ;; This function calls:
 20927 ;;		Absolute function
 20928 ;;		_Clock_ISR
 20929 ;;		_TMR1_DefaultInterruptHandler
 20930 ;;		_TMR1_WriteTimer
 20931 ;; This function is called by:
 20932 ;;		_INTERRUPT_InterruptManager
 20933 ;; This function uses a non-reentrant model
 20934 ;;
 20935                           
 20936                           
 20937                           ;psect for function _TMR1_ISR
 20938  105A                     _TMR1_ISR:
 20939  105A                     i1l5470:	
 20940                           ;incstack = 0
 20941                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 20942                           
 20943                           
 20944                           ;tmr1.c: 168: PIR4bits.TMR1IF = 0;
 20945  105A  002E               	movlb	14	; select bank14
 20946  105B  1010               	bcf	16,0	;volatile
 20947  105C                     i1l5472:
 20948                           
 20949                           ;tmr1.c: 169: TMR1_WriteTimer(timer1ReloadVal);
 20950  105C  0021               	movlb	1	; select bank1
 20951  105D  086E               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 20952  105E  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 20953  105F  086D               	movf	_timer1ReloadVal^(0+128),w	;volatile
 20954  1060  00F0               	movwf	TMR1_WriteTimer@timerVal
 20955  1061  3190  2033  3190   	fcall	_TMR1_WriteTimer
 20956  1064                     i1l5474:
 20957                           
 20958                           ;tmr1.c: 171: if(TMR1_InterruptHandler)
 20959  1064  0021               	movlb	1	; select bank1
 20960  1065  086B               	movf	_TMR1_InterruptHandler^(0+128),w
 20961  1066  046C               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 20962  1067  1903               	btfsc	3,2
 20963  1068  286A               	goto	u521_21
 20964  1069  286B               	goto	u521_20
 20965  106A                     u521_21:
 20966  106A  2870               	goto	i1l436
 20967  106B                     u521_20:
 20968  106B                     i1l5476:
 20969                           
 20970                           ;tmr1.c: 172: {;tmr1.c: 173: TMR1_InterruptHandler();
 20971  106B  086C               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 20972  106C  008A               	movwf	10
 20973  106D  086B               	movf	_TMR1_InterruptHandler^(0+128),w
 20974  106E  000A               	callw
 20975  106F  3190               	pagesel	$
 20976  1070                     i1l436:
 20977  1070  0008               	return
 20978  1071                     __end_of_TMR1_ISR:
 20979                           
 20980                           	psect	text74
 20981  1033                     __ptext74:	
 20982 ;; *************** function _TMR1_WriteTimer *****************
 20983 ;; Defined at:
 20984 ;;		line 127 in file "mcc_generated_files/tmr1.c"
 20985 ;; Parameters:    Size  Location     Type
 20986 ;;  timerVal        2    0[COMMON] unsigned int 
 20987 ;; Auto vars:     Size  Location     Type
 20988 ;;		None
 20989 ;; Return value:  Size  Location     Type
 20990 ;;                  1    wreg      void 
 20991 ;; Registers used:
 20992 ;;		wreg, status,2
 20993 ;; Tracked objects:
 20994 ;;		On entry : 0/0
 20995 ;;		On exit  : 0/0
 20996 ;;		Unchanged: 0/0
 20997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21002 ;;Total ram usage:        2 bytes
 21003 ;; Hardware stack levels used:    1
 21004 ;; This function calls:
 21005 ;;		Nothing
 21006 ;; This function is called by:
 21007 ;;		_TMR1_ISR
 21008 ;;		_TMR1_Reload
 21009 ;; This function uses a non-reentrant model
 21010 ;;
 21011                           
 21012                           
 21013                           ;psect for function _TMR1_WriteTimer
 21014  1033                     _TMR1_WriteTimer:
 21015  1033                     i1l5248:	
 21016                           ;incstack = 0
 21017                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 21018                           
 21019                           
 21020                           ;tmr1.c: 129: if (T1CONbits.nT1SYNC == 1)
 21021  1033  0024               	movlb	4	; select bank4
 21022  1034  1D0E               	btfss	14,2	;volatile
 21023  1035  2837               	goto	u488_21
 21024  1036  2838               	goto	u488_20
 21025  1037                     u488_21:
 21026  1037  283F               	goto	i1l5258
 21027  1038                     u488_20:
 21028  1038                     i1l5250:
 21029                           
 21030                           ;tmr1.c: 130: {;tmr1.c: 132: T1CONbits.TMR1ON = 0;
 21031  1038  100E               	bcf	14,0	;volatile
 21032  1039                     i1l5252:
 21033                           
 21034                           ;tmr1.c: 135: TMR1H = (timerVal >> 8);
 21035  1039  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 21036  103A  008D               	movwf	13	;volatile
 21037  103B                     i1l5254:
 21038                           
 21039                           ;tmr1.c: 136: TMR1L = timerVal;
 21040  103B  0870               	movf	TMR1_WriteTimer@timerVal,w
 21041  103C  008C               	movwf	12	;volatile
 21042  103D                     i1l5256:
 21043                           
 21044                           ;tmr1.c: 139: T1CONbits.TMR1ON =1;
 21045  103D  140E               	bsf	14,0	;volatile
 21046                           
 21047                           ;tmr1.c: 140: }
 21048  103E  2843               	goto	i1l423
 21049  103F                     i1l5258:
 21050                           
 21051                           ;tmr1.c: 141: else;tmr1.c: 142: {;tmr1.c: 144: TMR1H = (timerVal >> 8);
 21052  103F  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 21053  1040  008D               	movwf	13	;volatile
 21054  1041                     i1l5260:
 21055                           
 21056                           ;tmr1.c: 145: TMR1L = timerVal;
 21057  1041  0870               	movf	TMR1_WriteTimer@timerVal,w
 21058  1042  008C               	movwf	12	;volatile
 21059  1043                     i1l423:
 21060  1043  0008               	return
 21061  1044                     __end_of_TMR1_WriteTimer:
 21062                           
 21063                           	psect	text75
 21064  0904                     __ptext75:	
 21065 ;; *************** function _Clock_ISR *****************
 21066 ;; Defined at:
 21067 ;;		line 349 in file "main.c"
 21068 ;; Parameters:    Size  Location     Type
 21069 ;;		None
 21070 ;; Auto vars:     Size  Location     Type
 21071 ;;		None
 21072 ;; Return value:  Size  Location     Type
 21073 ;;                  1    wreg      void 
 21074 ;; Registers used:
 21075 ;;		wreg, status,2, status,0, pclath, cstack
 21076 ;; Tracked objects:
 21077 ;;		On entry : 0/0
 21078 ;;		On exit  : 0/0
 21079 ;;		Unchanged: 0/0
 21080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21083 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21084 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21085 ;;Total ram usage:        2 bytes
 21086 ;; Hardware stack levels used:    1
 21087 ;; Hardware stack levels required when called:    1
 21088 ;; This function calls:
 21089 ;;		___awdiv
 21090 ;; This function is called by:
 21091 ;;		_main
 21092 ;;		_TMR1_ISR
 21093 ;; This function uses a non-reentrant model
 21094 ;;
 21095                           
 21096                           
 21097                           ;psect for function _Clock_ISR
 21098  0904                     _Clock_ISR:
 21099  0904                     i1l5318:	
 21100                           ;incstack = 0
 21101                           ; Regs used in _Clock_ISR: [wreg+status,2+status,0+pclath+cstack]
 21102                           
 21103                           
 21104                           ;main.c: 351: t.s++;
 21105  0904  3001               	movlw	1
 21106  0905  00F9               	movwf	??_Clock_ISR
 21107  0906  0879               	movf	??_Clock_ISR,w
 21108  0907  0020               	movlb	0	; select bank0
 21109  0908  07E7               	addwf	_t+2,f
 21110                           
 21111                           ;main.c: 353: if(t.s==60){
 21112  0909  303C               	movlw	60
 21113  090A  0667               	xorwf	_t+2,w
 21114  090B  1D03               	btfss	3,2
 21115  090C  290E               	goto	u498_21
 21116  090D  290F               	goto	u498_20
 21117  090E                     u498_21:
 21118  090E  2917               	goto	i1l5326
 21119  090F                     u498_20:
 21120  090F                     i1l5320:
 21121                           
 21122                           ;main.c: 354: t.m++;
 21123  090F  3001               	movlw	1
 21124  0910  00F9               	movwf	??_Clock_ISR
 21125  0911  0879               	movf	??_Clock_ISR,w
 21126  0912  07E6               	addwf	_t+1,f
 21127  0913                     i1l5322:
 21128                           
 21129                           ;main.c: 355: t.s=0;
 21130  0913  01E7               	clrf	_t+2
 21131  0914                     i1l5324:
 21132                           
 21133                           ;main.c: 356: writeEEPROM_flag = 1;
 21134  0914  0021               	movlb	1	; select bank1
 21135  0915  01B4               	clrf	_writeEEPROM_flag^(0+128)
 21136  0916  0AB4               	incf	_writeEEPROM_flag^(0+128),f
 21137  0917                     i1l5326:
 21138                           
 21139                           ;main.c: 357: };main.c: 358: if(t.m==60){
 21140  0917  303C               	movlw	60
 21141  0918  0020               	movlb	0	; select bank0
 21142  0919  0666               	xorwf	_t+1,w
 21143  091A  1D03               	btfss	3,2
 21144  091B  291D               	goto	u499_21
 21145  091C  291E               	goto	u499_20
 21146  091D                     u499_21:
 21147  091D  2923               	goto	i1l5332
 21148  091E                     u499_20:
 21149  091E                     i1l5328:
 21150                           
 21151                           ;main.c: 359: t.h++;
 21152  091E  3001               	movlw	1
 21153  091F  00F9               	movwf	??_Clock_ISR
 21154  0920  0879               	movf	??_Clock_ISR,w
 21155  0921  07E5               	addwf	_t,f
 21156  0922                     i1l5330:
 21157                           
 21158                           ;main.c: 360: t.m=0;
 21159  0922  01E6               	clrf	_t+1
 21160  0923                     i1l5332:
 21161                           
 21162                           ;main.c: 361: };main.c: 362: if(t.h==24){
 21163  0923  3018               	movlw	24
 21164  0924  0665               	xorwf	_t,w
 21165  0925  1D03               	btfss	3,2
 21166  0926  2928               	goto	u500_21
 21167  0927  2929               	goto	u500_20
 21168  0928                     u500_21:
 21169  0928  292A               	goto	i1l5336
 21170  0929                     u500_20:
 21171  0929                     i1l5334:
 21172                           
 21173                           ;main.c: 363: t.h=0;
 21174  0929  01E5               	clrf	_t
 21175  092A                     i1l5336:
 21176                           
 21177                           ;main.c: 364: };main.c: 367: if((ALAF == 'A') && t.s >= clkAlarm.alarmVal.s && t.m >= cl
      +                          kAlarm.alarmVal.m && t.h >= clkAlarm.alarmVal.h && editingClockAlarm == 0){
 21178  092A  3041               	movlw	65
 21179  092B  066F               	xorwf	_ALAF,w
 21180  092C  1D03               	btfss	3,2
 21181  092D  292F               	goto	u501_21
 21182  092E  2930               	goto	u501_20
 21183  092F                     u501_21:
 21184  092F  2959               	goto	i1l5350
 21185  0930                     u501_20:
 21186  0930                     i1l5338:
 21187  0930  0021               	movlb	1	; select bank1
 21188  0931  0822               	movf	(_clkAlarm^(0+128)+2),w
 21189  0932  0020               	movlb	0	; select bank0
 21190  0933  0267               	subwf	_t+2,w
 21191  0934  1C03               	skipc
 21192  0935  2937               	goto	u502_21
 21193  0936  2938               	goto	u502_20
 21194  0937                     u502_21:
 21195  0937  2959               	goto	i1l5350
 21196  0938                     u502_20:
 21197  0938                     i1l5340:
 21198  0938  0021               	movlb	1	; select bank1
 21199  0939  0821               	movf	(_clkAlarm^(0+128)+1),w
 21200  093A  0020               	movlb	0	; select bank0
 21201  093B  0266               	subwf	_t+1,w
 21202  093C  1C03               	skipc
 21203  093D  293F               	goto	u503_21
 21204  093E  2940               	goto	u503_20
 21205  093F                     u503_21:
 21206  093F  2959               	goto	i1l5350
 21207  0940                     u503_20:
 21208  0940                     i1l5342:
 21209  0940  0021               	movlb	1	; select bank1
 21210  0941  0820               	movf	_clkAlarm^(0+128),w
 21211  0942  0020               	movlb	0	; select bank0
 21212  0943  0265               	subwf	_t,w
 21213  0944  1C03               	skipc
 21214  0945  2947               	goto	u504_21
 21215  0946  2948               	goto	u504_20
 21216  0947                     u504_21:
 21217  0947  2959               	goto	i1l5350
 21218  0948                     u504_20:
 21219  0948                     i1l5344:
 21220  0948  087B               	movf	_editingClockAlarm,w
 21221  0949  047C               	iorwf	_editingClockAlarm+1,w
 21222  094A  1D03               	btfss	3,2
 21223  094B  294D               	goto	u505_21
 21224  094C  294E               	goto	u505_20
 21225  094D                     u505_21:
 21226  094D  2959               	goto	i1l5350
 21227  094E                     u505_20:
 21228  094E                     i1l5346:
 21229                           
 21230                           ;main.c: 368: alarmPWMStart.h = 0xff;
 21231  094E  30FF               	movlw	255
 21232  094F  00F9               	movwf	??_Clock_ISR
 21233  0950  0879               	movf	??_Clock_ISR,w
 21234  0951  0021               	movlb	1	; select bank1
 21235  0952  00E1               	movwf	_alarmPWMStart^(0+128)
 21236  0953                     i1l5348:
 21237                           
 21238                           ;main.c: 369: clkAlarm.trigger = 1;
 21239  0953  01A3               	clrf	(_clkAlarm^(0+128)+3)
 21240  0954  0AA3               	incf	(_clkAlarm^(0+128)+3),f
 21241                           
 21242                           ;main.c: 370: clkAlarm.alarmVal.h = 25;
 21243  0955  3019               	movlw	25
 21244  0956  00F9               	movwf	??_Clock_ISR
 21245  0957  0879               	movf	??_Clock_ISR,w
 21246  0958  00A0               	movwf	_clkAlarm^(0+128)
 21247  0959                     i1l5350:
 21248                           
 21249                           ;main.c: 371: };main.c: 373: if(maxReadings >= NREG/2){
 21250  0959  3002               	movlw	2
 21251  095A  00F0               	movwf	___awdiv@divisor
 21252  095B  3000               	movlw	0
 21253  095C  00F1               	movwf	___awdiv@divisor+1
 21254  095D  087D               	movf	_NREG,w
 21255  095E  00F9               	movwf	??_Clock_ISR
 21256  095F  01FA               	clrf	??_Clock_ISR+1
 21257  0960  0879               	movf	??_Clock_ISR,w
 21258  0961  00F2               	movwf	___awdiv@dividend
 21259  0962  087A               	movf	??_Clock_ISR+1,w
 21260  0963  00F3               	movwf	___awdiv@dividend+1
 21261  0964  3196  26BF  3189   	fcall	___awdiv
 21262  0967  0871               	movf	?___awdiv+1,w
 21263  0968  3A80               	xorlw	128
 21264  0969  3C80               	sublw	128
 21265  096A  1D03               	skipz
 21266  096B  296F               	goto	u506_25
 21267  096C  0870               	movf	?___awdiv,w
 21268  096D  0021               	movlb	1	; select bank1
 21269  096E  0232               	subwf	_maxReadings^(0+128),w
 21270  096F                     u506_25:
 21271  096F  1C03               	skipc
 21272  0970  2972               	goto	u506_21
 21273  0971  2973               	goto	u506_20
 21274  0972                     u506_21:
 21275  0972  2977               	goto	i1l5354
 21276  0973                     u506_20:
 21277  0973                     i1l5352:
 21278                           
 21279                           ;main.c: 374: bufHalfFull = 1;
 21280  0973  0021               	movlb	1	; select bank1
 21281  0974  01B1               	clrf	_bufHalfFull^(0+128)
 21282  0975  0AB1               	incf	_bufHalfFull^(0+128),f
 21283                           
 21284                           ;main.c: 375: } else {
 21285  0976  2979               	goto	i1l5356
 21286  0977                     i1l5354:
 21287                           
 21288                           ;main.c: 376: bufHalfFull = 0;
 21289  0977  0021               	movlb	1	; select bank1
 21290  0978  01B1               	clrf	_bufHalfFull^(0+128)
 21291  0979                     i1l5356:
 21292  0979  1003               	clrc
 21293  097A  0020               	movlb	0	; select bank0
 21294  097B  1F96               	btfss	22,7	;volatile
 21295  097C  1403               	setc
 21296  097D  1803               	btfsc	3,0
 21297  097E  2980               	goto	u507_21
 21298  097F  2983               	goto	u507_20
 21299  0980                     u507_21:
 21300  0980  0020               	movlb	0	; select bank0
 21301  0981  1796               	bsf	22,7	;volatile
 21302  0982  2985               	goto	u508_24
 21303  0983                     u507_20:
 21304  0983  0020               	movlb	0	; select bank0
 21305  0984  1396               	bcf	22,7	;volatile
 21306  0985                     u508_24:
 21307  0985                     i1l5358:
 21308                           
 21309                           ;main.c: 380: updateLCD = 1;
 21310  0985  0021               	movlb	1	; select bank1
 21311  0986  01E8               	clrf	_updateLCD^(0+128)
 21312  0987  0AE8               	incf	_updateLCD^(0+128),f
 21313  0988                     i1l5360:
 21314                           
 21315                           ;main.c: 382: counterMonitorAux++;
 21316  0988  3001               	movlw	1
 21317  0989  00F9               	movwf	??_Clock_ISR
 21318  098A  0879               	movf	??_Clock_ISR,w
 21319  098B  07B5               	addwf	_counterMonitorAux^(0+128),f
 21320                           
 21321                           ;main.c: 383: if(counterMonitorAux >= PMON){
 21322  098C  086A               	movf	_PMON^(0+128),w
 21323  098D  0235               	subwf	_counterMonitorAux^(0+128),w
 21324  098E  1C03               	skipc
 21325  098F  2991               	goto	u509_21
 21326  0990  2992               	goto	u509_20
 21327  0991                     u509_21:
 21328  0991  2995               	goto	i1l1278
 21329  0992                     u509_20:
 21330  0992                     i1l5362:
 21331                           
 21332                           ;main.c: 384: counterMonitorAux = 0;
 21333  0992  01B5               	clrf	_counterMonitorAux^(0+128)
 21334  0993                     i1l5364:
 21335                           
 21336                           ;main.c: 385: monitor_TEMP_LUM = 1;
 21337  0993  01B6               	clrf	_monitor_TEMP_LUM^(0+128)
 21338  0994  0AB6               	incf	_monitor_TEMP_LUM^(0+128),f
 21339  0995                     i1l1278:
 21340  0995  0008               	return
 21341  0996                     __end_of_Clock_ISR:
 21342                           
 21343                           	psect	text76
 21344  0003                     __ptext76:	
 21345 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 21346 ;; Defined at:
 21347 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 21348 ;; Parameters:    Size  Location     Type
 21349 ;;		None
 21350 ;; Auto vars:     Size  Location     Type
 21351 ;;		None
 21352 ;; Return value:  Size  Location     Type
 21353 ;;                  1    wreg      void 
 21354 ;; Registers used:
 21355 ;;		None
 21356 ;; Tracked objects:
 21357 ;;		On entry : 0/0
 21358 ;;		On exit  : 0/0
 21359 ;;		Unchanged: 0/0
 21360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21365 ;;Total ram usage:        0 bytes
 21366 ;; Hardware stack levels used:    1
 21367 ;; This function calls:
 21368 ;;		Nothing
 21369 ;; This function is called by:
 21370 ;;		_TMR1_Initialize
 21371 ;;		_TMR1_ISR
 21372 ;; This function uses a non-reentrant model
 21373 ;;
 21374                           
 21375                           
 21376                           ;psect for function _TMR1_DefaultInterruptHandler
 21377  0003                     _TMR1_DefaultInterruptHandler:
 21378  0003                     i1l442:	
 21379                           ;incstack = 0
 21380                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 21381                           
 21382  0003  0008               	return
 21383  0004                     __end_of_TMR1_DefaultInterruptHandler:
 21384                           
 21385                           	psect	text77
 21386  16BF                     __ptext77:	
 21387 ;; *************** function ___awdiv *****************
 21388 ;; Defined at:
 21389 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\awdiv.c"
 21390 ;; Parameters:    Size  Location     Type
 21391 ;;  divisor         2    0[COMMON] int 
 21392 ;;  dividend        2    2[COMMON] int 
 21393 ;; Auto vars:     Size  Location     Type
 21394 ;;  quotient        2    7[COMMON] int 
 21395 ;;  sign            1    6[COMMON] unsigned char 
 21396 ;;  counter         1    5[COMMON] unsigned char 
 21397 ;; Return value:  Size  Location     Type
 21398 ;;                  2    0[COMMON] int 
 21399 ;; Registers used:
 21400 ;;		wreg, status,2, status,0
 21401 ;; Tracked objects:
 21402 ;;		On entry : 0/0
 21403 ;;		On exit  : 0/0
 21404 ;;		Unchanged: 0/0
 21405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21406 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21407 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21408 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21409 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21410 ;;Total ram usage:        9 bytes
 21411 ;; Hardware stack levels used:    1
 21412 ;; This function calls:
 21413 ;;		Nothing
 21414 ;; This function is called by:
 21415 ;;		_Clock_ISR
 21416 ;; This function uses a non-reentrant model
 21417 ;;
 21418                           
 21419                           
 21420                           ;psect for function ___awdiv
 21421  16BF                     ___awdiv:
 21422  16BF                     i1l5070:	
 21423                           ;incstack = 0
 21424                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 21425                           
 21426  16BF  01F6               	clrf	___awdiv@sign
 21427  16C0                     i1l5072:
 21428  16C0  1FF1               	btfss	___awdiv@divisor+1,7
 21429  16C1  2EC3               	goto	u478_21
 21430  16C2  2EC4               	goto	u478_20
 21431  16C3                     u478_21:
 21432  16C3  2ECB               	goto	i1l5078
 21433  16C4                     u478_20:
 21434  16C4                     i1l5074:
 21435  16C4  09F0               	comf	___awdiv@divisor,f
 21436  16C5  09F1               	comf	___awdiv@divisor+1,f
 21437  16C6  0AF0               	incf	___awdiv@divisor,f
 21438  16C7  1903               	skipnz
 21439  16C8  0AF1               	incf	___awdiv@divisor+1,f
 21440  16C9                     i1l5076:
 21441  16C9  01F6               	clrf	___awdiv@sign
 21442  16CA  0AF6               	incf	___awdiv@sign,f
 21443  16CB                     i1l5078:
 21444  16CB  1FF3               	btfss	___awdiv@dividend+1,7
 21445  16CC  2ECE               	goto	u479_21
 21446  16CD  2ECF               	goto	u479_20
 21447  16CE                     u479_21:
 21448  16CE  2ED8               	goto	i1l5084
 21449  16CF                     u479_20:
 21450  16CF                     i1l5080:
 21451  16CF  09F2               	comf	___awdiv@dividend,f
 21452  16D0  09F3               	comf	___awdiv@dividend+1,f
 21453  16D1  0AF2               	incf	___awdiv@dividend,f
 21454  16D2  1903               	skipnz
 21455  16D3  0AF3               	incf	___awdiv@dividend+1,f
 21456  16D4                     i1l5082:
 21457  16D4  3001               	movlw	1
 21458  16D5  00F4               	movwf	??___awdiv
 21459  16D6  0874               	movf	??___awdiv,w
 21460  16D7  06F6               	xorwf	___awdiv@sign,f
 21461  16D8                     i1l5084:
 21462  16D8  01F7               	clrf	___awdiv@quotient
 21463  16D9  01F8               	clrf	___awdiv@quotient+1
 21464  16DA                     i1l5086:
 21465  16DA  0870               	movf	___awdiv@divisor,w
 21466  16DB  0471               	iorwf	___awdiv@divisor+1,w
 21467  16DC  1903               	btfsc	3,2
 21468  16DD  2EDF               	goto	u480_21
 21469  16DE  2EE0               	goto	u480_20
 21470  16DF                     u480_21:
 21471  16DF  2F0F               	goto	i1l5106
 21472  16E0                     u480_20:
 21473  16E0                     i1l5088:
 21474  16E0  01F5               	clrf	___awdiv@counter
 21475  16E1  0AF5               	incf	___awdiv@counter,f
 21476  16E2  2EEC               	goto	i1l5094
 21477  16E3                     i1l5090:
 21478  16E3  3001               	movlw	1
 21479  16E4                     u481_25:
 21480  16E4  35F0               	lslf	___awdiv@divisor,f
 21481  16E5  0DF1               	rlf	___awdiv@divisor+1,f
 21482  16E6  0B89               	decfsz	9,f
 21483  16E7  2EE4               	goto	u481_25
 21484  16E8                     i1l5092:
 21485  16E8  3001               	movlw	1
 21486  16E9  00F4               	movwf	??___awdiv
 21487  16EA  0874               	movf	??___awdiv,w
 21488  16EB  07F5               	addwf	___awdiv@counter,f
 21489  16EC                     i1l5094:
 21490  16EC  1FF1               	btfss	___awdiv@divisor+1,7
 21491  16ED  2EEF               	goto	u482_21
 21492  16EE  2EF0               	goto	u482_20
 21493  16EF                     u482_21:
 21494  16EF  2EE3               	goto	i1l5090
 21495  16F0                     u482_20:
 21496  16F0                     i1l5096:
 21497  16F0  3001               	movlw	1
 21498  16F1                     u483_25:
 21499  16F1  35F7               	lslf	___awdiv@quotient,f
 21500  16F2  0DF8               	rlf	___awdiv@quotient+1,f
 21501  16F3  0B89               	decfsz	9,f
 21502  16F4  2EF1               	goto	u483_25
 21503  16F5  0871               	movf	___awdiv@divisor+1,w
 21504  16F6  0273               	subwf	___awdiv@dividend+1,w
 21505  16F7  1D03               	skipz
 21506  16F8  2EFB               	goto	u484_25
 21507  16F9  0870               	movf	___awdiv@divisor,w
 21508  16FA  0272               	subwf	___awdiv@dividend,w
 21509  16FB                     u484_25:
 21510  16FB  1C03               	skipc
 21511  16FC  2EFE               	goto	u484_21
 21512  16FD  2EFF               	goto	u484_20
 21513  16FE                     u484_21:
 21514  16FE  2F04               	goto	i1l5102
 21515  16FF                     u484_20:
 21516  16FF                     i1l5098:
 21517  16FF  0870               	movf	___awdiv@divisor,w
 21518  1700  02F2               	subwf	___awdiv@dividend,f
 21519  1701  0871               	movf	___awdiv@divisor+1,w
 21520  1702  3BF3               	subwfb	___awdiv@dividend+1,f
 21521  1703                     i1l5100:
 21522  1703  1477               	bsf	___awdiv@quotient,0
 21523  1704                     i1l5102:
 21524  1704  3001               	movlw	1
 21525  1705                     u485_25:
 21526  1705  36F1               	lsrf	___awdiv@divisor+1,f
 21527  1706  0CF0               	rrf	___awdiv@divisor,f
 21528  1707  0B89               	decfsz	9,f
 21529  1708  2F05               	goto	u485_25
 21530  1709                     i1l5104:
 21531  1709  3001               	movlw	1
 21532  170A  02F5               	subwf	___awdiv@counter,f
 21533  170B  1D03               	btfss	3,2
 21534  170C  2F0E               	goto	u486_21
 21535  170D  2F0F               	goto	u486_20
 21536  170E                     u486_21:
 21537  170E  2EF0               	goto	i1l5096
 21538  170F                     u486_20:
 21539  170F                     i1l5106:
 21540  170F  0876               	movf	___awdiv@sign,w
 21541  1710  1903               	btfsc	3,2
 21542  1711  2F13               	goto	u487_21
 21543  1712  2F14               	goto	u487_20
 21544  1713                     u487_21:
 21545  1713  2F19               	goto	i1l5110
 21546  1714                     u487_20:
 21547  1714                     i1l5108:
 21548  1714  09F7               	comf	___awdiv@quotient,f
 21549  1715  09F8               	comf	___awdiv@quotient+1,f
 21550  1716  0AF7               	incf	___awdiv@quotient,f
 21551  1717  1903               	skipnz
 21552  1718  0AF8               	incf	___awdiv@quotient+1,f
 21553  1719                     i1l5110:
 21554  1719  0878               	movf	___awdiv@quotient+1,w
 21555  171A  00F1               	movwf	?___awdiv+1
 21556  171B  0877               	movf	___awdiv@quotient,w
 21557  171C  00F0               	movwf	?___awdiv
 21558  171D                     i1l1930:
 21559  171D  0008               	return
 21560  171E                     __end_of___awdiv:
 21561                           
 21562                           	psect	text78
 21563  1F70                     __ptext78:	
 21564 ;; *************** function _INT_ISR *****************
 21565 ;; Defined at:
 21566 ;;		line 32 in file "mcc_generated_files/ext_int.c"
 21567 ;; Parameters:    Size  Location     Type
 21568 ;;		None
 21569 ;; Auto vars:     Size  Location     Type
 21570 ;;		None
 21571 ;; Return value:  Size  Location     Type
 21572 ;;                  1    wreg      void 
 21573 ;; Registers used:
 21574 ;;		wreg, status,2, status,0, pclath, cstack
 21575 ;; Tracked objects:
 21576 ;;		On entry : 0/0
 21577 ;;		On exit  : 0/0
 21578 ;;		Unchanged: 0/0
 21579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21584 ;;Total ram usage:        0 bytes
 21585 ;; Hardware stack levels used:    1
 21586 ;; Hardware stack levels required when called:    2
 21587 ;; This function calls:
 21588 ;;		_INT_CallBack
 21589 ;; This function is called by:
 21590 ;;		_INTERRUPT_InterruptManager
 21591 ;; This function uses a non-reentrant model
 21592 ;;
 21593                           
 21594                           
 21595                           ;psect for function _INT_ISR
 21596  1F70                     _INT_ISR:
 21597  1F70                     i1l5466:	
 21598                           ;incstack = 0
 21599                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 21600                           
 21601                           
 21602                           ;ext_int.c: 34: (PIR0bits.INTF = 0);
 21603  1F70  002E               	movlb	14	; select bank14
 21604  1F71  100C               	bcf	12,0	;volatile
 21605  1F72                     i1l5468:
 21606                           
 21607                           ;ext_int.c: 37: INT_CallBack();
 21608  1F72  319F  27E6  319F   	fcall	_INT_CallBack
 21609  1F75                     i1l747:
 21610  1F75  0008               	return
 21611  1F76                     __end_of_INT_ISR:
 21612                           
 21613                           	psect	text79
 21614  1FE6                     __ptext79:	
 21615 ;; *************** function _INT_CallBack *****************
 21616 ;; Defined at:
 21617 ;;		line 41 in file "mcc_generated_files/ext_int.c"
 21618 ;; Parameters:    Size  Location     Type
 21619 ;;		None
 21620 ;; Auto vars:     Size  Location     Type
 21621 ;;		None
 21622 ;; Return value:  Size  Location     Type
 21623 ;;                  1    wreg      void 
 21624 ;; Registers used:
 21625 ;;		wreg, status,2, status,0, pclath, cstack
 21626 ;; Tracked objects:
 21627 ;;		On entry : 0/0
 21628 ;;		On exit  : 0/0
 21629 ;;		Unchanged: 0/0
 21630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21635 ;;Total ram usage:        0 bytes
 21636 ;; Hardware stack levels used:    1
 21637 ;; Hardware stack levels required when called:    1
 21638 ;; This function calls:
 21639 ;;		Absolute function
 21640 ;;		_INT_DefaultInterruptHandler
 21641 ;;		_S1_ISR
 21642 ;; This function is called by:
 21643 ;;		_INT_ISR
 21644 ;; This function uses a non-reentrant model
 21645 ;;
 21646                           
 21647                           
 21648                           ;psect for function _INT_CallBack
 21649  1FE6                     _INT_CallBack:
 21650  1FE6                     i1l5278:	
 21651                           ;incstack = 0
 21652                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 21653                           
 21654                           
 21655                           ;ext_int.c: 44: if(INT_InterruptHandler)
 21656  1FE6  0022               	movlb	2	; select bank2
 21657  1FE7  0837               	movf	_INT_InterruptHandler^(0+256),w
 21658  1FE8  0438               	iorwf	(_INT_InterruptHandler+1)^(0+256),w
 21659  1FE9  1903               	btfsc	3,2
 21660  1FEA  2FEC               	goto	u489_21
 21661  1FEB  2FED               	goto	u489_20
 21662  1FEC                     u489_21:
 21663  1FEC  2FF2               	goto	i1l751
 21664  1FED                     u489_20:
 21665  1FED                     i1l5280:
 21666                           
 21667                           ;ext_int.c: 45: {;ext_int.c: 46: INT_InterruptHandler();
 21668  1FED  0838               	movf	(_INT_InterruptHandler+1)^(0+256),w
 21669  1FEE  008A               	movwf	10
 21670  1FEF  0837               	movf	_INT_InterruptHandler^(0+256),w
 21671  1FF0  000A               	callw
 21672  1FF1  319F               	pagesel	$
 21673  1FF2                     i1l751:
 21674  1FF2  0008               	return
 21675  1FF3                     __end_of_INT_CallBack:
 21676                           
 21677                           	psect	text80
 21678  0002                     __ptext80:	
 21679 ;; *************** function _INT_DefaultInterruptHandler *****************
 21680 ;; Defined at:
 21681 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 21682 ;; Parameters:    Size  Location     Type
 21683 ;;		None
 21684 ;; Auto vars:     Size  Location     Type
 21685 ;;		None
 21686 ;; Return value:  Size  Location     Type
 21687 ;;                  1    wreg      void 
 21688 ;; Registers used:
 21689 ;;		None
 21690 ;; Tracked objects:
 21691 ;;		On entry : 0/0
 21692 ;;		On exit  : 0/0
 21693 ;;		Unchanged: 0/0
 21694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21699 ;;Total ram usage:        0 bytes
 21700 ;; Hardware stack levels used:    1
 21701 ;; This function calls:
 21702 ;;		Nothing
 21703 ;; This function is called by:
 21704 ;;		_EXT_INT_Initialize
 21705 ;;		_INT_CallBack
 21706 ;; This function uses a non-reentrant model
 21707 ;;
 21708                           
 21709                           
 21710                           ;psect for function _INT_DefaultInterruptHandler
 21711  0002                     _INT_DefaultInterruptHandler:
 21712  0002                     i1l757:	
 21713                           ;incstack = 0
 21714                           ; Regs used in _INT_DefaultInterruptHandler: []
 21715                           
 21716  0002  0008               	return
 21717  0003                     __end_of_INT_DefaultInterruptHandler:
 21718                           
 21719                           	psect	text81
 21720  1F91                     __ptext81:	
 21721 ;; *************** function _S1_ISR *****************
 21722 ;; Defined at:
 21723 ;;		line 797 in file "main.c"
 21724 ;; Parameters:    Size  Location     Type
 21725 ;;		None
 21726 ;; Auto vars:     Size  Location     Type
 21727 ;;		None
 21728 ;; Return value:  Size  Location     Type
 21729 ;;                  1    wreg      void 
 21730 ;; Registers used:
 21731 ;;		None
 21732 ;; Tracked objects:
 21733 ;;		On entry : 0/0
 21734 ;;		On exit  : 0/0
 21735 ;;		Unchanged: 0/0
 21736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21741 ;;Total ram usage:        0 bytes
 21742 ;; Hardware stack levels used:    1
 21743 ;; This function calls:
 21744 ;;		Nothing
 21745 ;; This function is called by:
 21746 ;;		_main
 21747 ;;		_INT_CallBack
 21748 ;; This function uses a non-reentrant model
 21749 ;;
 21750                           
 21751                           
 21752                           ;psect for function _S1_ISR
 21753  1F91                     _S1_ISR:
 21754  1F91                     i1l5068:	
 21755                           ;incstack = 0
 21756                           ; Regs used in _S1_ISR: []
 21757                           
 21758                           
 21759                           ;main.c: 798: PIE0bits.INTE = 0;
 21760  1F91  002E               	movlb	14	; select bank14
 21761  1F92  1016               	bcf	22,0	;volatile
 21762                           
 21763                           ;main.c: 799: flagS1pushed = 1;
 21764  1F93  0021               	movlb	1	; select bank1
 21765  1F94  01B7               	clrf	_flagS1pushed^(0+128)
 21766  1F95  0AB7               	incf	_flagS1pushed^(0+128),f
 21767                           
 21768                           ;main.c: 800: (PIR0bits.INTF = 0);
 21769  1F96  002E               	movlb	14	; select bank14
 21770  1F97  100C               	bcf	12,0	;volatile
 21771                           
 21772                           ;main.c: 801: PIE0bits.INTE = 1;
 21773  1F98  1416               	bsf	22,0	;volatile
 21774  1F99                     i1l1447:
 21775  1F99  0008               	return
 21776  1F9A                     __end_of_S1_ISR:
 21777                           
 21778                           	psect	text82
 21779  1203                     __ptext82:	
 21780 ;; *************** function _EUSART_Transmit_ISR *****************
 21781 ;; Defined at:
 21782 ;;		line 181 in file "mcc_generated_files/eusart.c"
 21783 ;; Parameters:    Size  Location     Type
 21784 ;;		None
 21785 ;; Auto vars:     Size  Location     Type
 21786 ;;		None
 21787 ;; Return value:  Size  Location     Type
 21788 ;;                  1    wreg      void 
 21789 ;; Registers used:
 21790 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21791 ;; Tracked objects:
 21792 ;;		On entry : 0/0
 21793 ;;		On exit  : 0/0
 21794 ;;		Unchanged: 0/0
 21795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21800 ;;Total ram usage:        1 bytes
 21801 ;; Hardware stack levels used:    1
 21802 ;; This function calls:
 21803 ;;		Nothing
 21804 ;; This function is called by:
 21805 ;;		_EUSART_Initialize
 21806 ;;		_INTERRUPT_InterruptManager
 21807 ;; This function uses a non-reentrant model
 21808 ;;
 21809                           
 21810                           
 21811                           ;psect for function _EUSART_Transmit_ISR
 21812  1203                     _EUSART_Transmit_ISR:
 21813  1203                     i1l5486:	
 21814                           ;incstack = 0
 21815                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 21816                           
 21817                           
 21818                           ;eusart.c: 185: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 21819  1203  3040               	movlw	64
 21820  1204  0021               	movlb	1	; select bank1
 21821  1205  026F               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 21822  1206  1803               	skipnc
 21823  1207  2A09               	goto	u522_21
 21824  1208  2A0A               	goto	u522_20
 21825  1209                     u522_21:
 21826  1209  2A23               	goto	i1l845
 21827  120A                     u522_20:
 21828  120A                     i1l5488:
 21829                           
 21830                           ;eusart.c: 186: {;eusart.c: 187: TX1REG = eusartTxBuffer[eusartTxTail++];
 21831  120A  083F               	movf	_eusartTxTail^(0+128),w
 21832  120B  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 21833  120C  0086               	movwf	6
 21834  120D  3001               	movlw	1	; select bank3/4
 21835  120E  0087               	movwf	7
 21836  120F  0801               	movf	1,w
 21837  1210  0022               	movlb	2	; select bank2
 21838  1211  009A               	movwf	26	;volatile
 21839  1212                     i1l5490:
 21840  1212  3001               	movlw	1
 21841  1213  00F0               	movwf	??_EUSART_Transmit_ISR
 21842  1214  0870               	movf	??_EUSART_Transmit_ISR,w
 21843  1215  0021               	movlb	1	; select bank1
 21844  1216  07BF               	addwf	_eusartTxTail^(0+128),f	;volatile
 21845  1217                     i1l5492:
 21846                           
 21847                           ;eusart.c: 188: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 21848  1217  3040               	movlw	64
 21849  1218  023F               	subwf	_eusartTxTail^(0+128),w	;volatile
 21850  1219  1C03               	skipc
 21851  121A  2A1C               	goto	u523_21
 21852  121B  2A1D               	goto	u523_20
 21853  121C                     u523_21:
 21854  121C  2A1E               	goto	i1l5496
 21855  121D                     u523_20:
 21856  121D                     i1l5494:
 21857                           
 21858                           ;eusart.c: 189: {;eusart.c: 190: eusartTxTail = 0;
 21859  121D  01BF               	clrf	_eusartTxTail^(0+128)	;volatile
 21860  121E                     i1l5496:
 21861                           
 21862                           ;eusart.c: 191: };eusart.c: 192: eusartTxBufferRemaining++;
 21863  121E  3001               	movlw	1
 21864  121F  00F0               	movwf	??_EUSART_Transmit_ISR
 21865  1220  0870               	movf	??_EUSART_Transmit_ISR,w
 21866  1221  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 21867                           
 21868                           ;eusart.c: 193: }
 21869  1222  2A25               	goto	i1l848
 21870  1223                     i1l845:
 21871                           
 21872                           ;eusart.c: 194: else;eusart.c: 195: {;eusart.c: 196: PIE3bits.TXIE = 0;
 21873  1223  002E               	movlb	14	; select bank14
 21874  1224  1219               	bcf	25,4	;volatile
 21875  1225                     i1l848:
 21876  1225  0008               	return
 21877  1226                     __end_of_EUSART_Transmit_ISR:
 21878                           
 21879                           	psect	text83
 21880  11C1                     __ptext83:	
 21881 ;; *************** function _EUSART_Receive_ISR *****************
 21882 ;; Defined at:
 21883 ;;		line 200 in file "mcc_generated_files/eusart.c"
 21884 ;; Parameters:    Size  Location     Type
 21885 ;;		None
 21886 ;; Auto vars:     Size  Location     Type
 21887 ;;		None
 21888 ;; Return value:  Size  Location     Type
 21889 ;;                  1    wreg      void 
 21890 ;; Registers used:
 21891 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21892 ;; Tracked objects:
 21893 ;;		On entry : 0/0
 21894 ;;		On exit  : 0/0
 21895 ;;		Unchanged: 0/0
 21896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21899 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21900 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21901 ;;Total ram usage:        1 bytes
 21902 ;; Hardware stack levels used:    1
 21903 ;; This function calls:
 21904 ;;		Nothing
 21905 ;; This function is called by:
 21906 ;;		_EUSART_Initialize
 21907 ;;		_INTERRUPT_InterruptManager
 21908 ;; This function uses a non-reentrant model
 21909 ;;
 21910                           
 21911                           
 21912                           ;psect for function _EUSART_Receive_ISR
 21913  11C1                     _EUSART_Receive_ISR:
 21914  11C1                     i1l5498:	
 21915                           ;incstack = 0
 21916                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 21917                           
 21918                           
 21919                           ;eusart.c: 203: if(1 == RC1STAbits.OERR)
 21920  11C1  0022               	movlb	2	; select bank2
 21921  11C2  1C9D               	btfss	29,1	;volatile
 21922  11C3  29C5               	goto	u524_21
 21923  11C4  29C6               	goto	u524_20
 21924  11C5                     u524_21:
 21925  11C5  29C8               	goto	i1l5502
 21926  11C6                     u524_20:
 21927  11C6                     i1l5500:
 21928                           
 21929                           ;eusart.c: 204: {;eusart.c: 207: RC1STAbits.CREN = 0;
 21930  11C6  121D               	bcf	29,4	;volatile
 21931                           
 21932                           ;eusart.c: 208: RC1STAbits.CREN = 1;
 21933  11C7  161D               	bsf	29,4	;volatile
 21934  11C8                     i1l5502:
 21935                           
 21936                           ;eusart.c: 209: };eusart.c: 212: eusartRxBuffer[eusartRxHead++] = RC1REG;
 21937  11C8  0819               	movf	25,w	;volatile
 21938  11C9  00F0               	movwf	??_EUSART_Receive_ISR
 21939  11CA  0021               	movlb	1	; select bank1
 21940  11CB  083E               	movf	_eusartRxHead^(0+128),w
 21941  11CC  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 21942  11CD  0086               	movwf	6
 21943  11CE  3002               	movlw	2	; select bank4/5
 21944  11CF  0087               	movwf	7
 21945  11D0  0870               	movf	??_EUSART_Receive_ISR,w
 21946  11D1  0081               	movwf	1
 21947  11D2                     i1l5504:
 21948  11D2  3001               	movlw	1
 21949  11D3  00F0               	movwf	??_EUSART_Receive_ISR
 21950  11D4  0870               	movf	??_EUSART_Receive_ISR,w
 21951  11D5  07BE               	addwf	_eusartRxHead^(0+128),f	;volatile
 21952  11D6                     i1l5506:
 21953                           
 21954                           ;eusart.c: 213: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 21955  11D6  3040               	movlw	64
 21956  11D7  023E               	subwf	_eusartRxHead^(0+128),w	;volatile
 21957  11D8  1C03               	skipc
 21958  11D9  29DB               	goto	u525_21
 21959  11DA  29DC               	goto	u525_20
 21960  11DB                     u525_21:
 21961  11DB  29DD               	goto	i1l5510
 21962  11DC                     u525_20:
 21963  11DC                     i1l5508:
 21964                           
 21965                           ;eusart.c: 214: {;eusart.c: 215: eusartRxHead = 0;
 21966  11DC  01BE               	clrf	_eusartRxHead^(0+128)	;volatile
 21967  11DD                     i1l5510:
 21968                           
 21969                           ;eusart.c: 216: };eusart.c: 217: eusartRxCount++;
 21970  11DD  3001               	movlw	1
 21971  11DE  00F0               	movwf	??_EUSART_Receive_ISR
 21972  11DF  0870               	movf	??_EUSART_Receive_ISR,w
 21973  11E0  07BC               	addwf	_eusartRxCount^(0+128),f	;volatile
 21974  11E1                     i1l853:
 21975  11E1  0008               	return
 21976  11E2                     __end_of_EUSART_Receive_ISR:
 21977  007E                     btemp	set	126	;btemp
 21978  007E                     int$flags	set	126
 21979  007E                     wtemp0	set	126
 21980                           
 21981                           	psect	config
 21982                           
 21983                           ;Config register CONFIG1 @ 0x8007
 21984                           ;	External Oscillator mode selection bits
 21985                           ;	FEXTOSC = OFF, Oscillator not enabled
 21986                           ;	Power-up default value for COSC bits
 21987                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
 21988                           ;	Clock Out Enable bit
 21989                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
 21990                           ;	Clock Switch Enable bit
 21991                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 21992                           ;	Fail-Safe Clock Monitor Enable bit
 21993                           ;	FCMEN = ON, FSCM timer enabled
 21994  8007                     	org	32775
 21995  8007  3FEC               	dw	16364
 21996                           
 21997                           ;Config register CONFIG2 @ 0x8008
 21998                           ;	Master Clear Enable bit
 21999                           ;	MCLRE = ON, MCLR pin is Master Clear function
 22000                           ;	Power-up Timer Enable bit
 22001                           ;	PWRTE = OFF, PWRT disabled
 22002                           ;	Low-Power BOR enable bit
 22003                           ;	LPBOREN = OFF, ULPBOR disabled
 22004                           ;	Brown-out reset enable bits
 22005                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
 22006                           ;	Brown-out Reset Voltage Selection
 22007                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
 22008                           ;	Zero-cross detect disable
 22009                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
 22010                           ;	Peripheral Pin Select one-way control
 22011                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
 22012                           ;	Stack Overflow/Underflow Reset Enable bit
 22013                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
 22014                           ;	Background Debugger
 22015                           ;	DEBUG = OFF, Background Debugger disabled
 22016  8008                     	org	32776
 22017  8008  3FFF               	dw	16383
 22018                           
 22019                           ;Config register CONFIG3 @ 0x8009
 22020                           ;	WDT Period Select bits
 22021                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 22022                           ;	WDT operating mode
 22023                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
 22024                           ;	WDT Window Select bits
 22025                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 22026                           ;	WDT input clock selector
 22027                           ;	WDTCCS = SC, Software Control
 22028  8009                     	org	32777
 22029  8009  3F9F               	dw	16287
 22030                           
 22031                           ;Config register CONFIG4 @ 0x800A
 22032                           ;	UserNVM self-write protection bits
 22033                           ;	WRT = OFF, Write protection off
 22034                           ;	Scanner Enable bit
 22035                           ;	SCANE = available, Scanner module is available for use
 22036                           ;	Low Voltage Programming Enable bit
 22037                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
 22038  800A                     	org	32778
 22039  800A  3FFF               	dw	16383
 22040                           
 22041                           ;Config register CONFIG5 @ 0x800B
 22042                           ;	UserNVM Program memory code protection bit
 22043                           ;	CP = OFF, Program Memory code protection disabled
 22044                           ;	DataNVM code protection bit
 22045                           ;	CPD = OFF, Data EEPROM code protection disabled
 22046  800B                     	org	32779
 22047  800B  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    49
    Data        11
    BSS         197
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     69      80
    BANK1            80     32      80
    BANK2            80      0      29
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    main$3491$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    main$3491	const PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    cmd_rc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_rtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_rp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_ra@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_ir@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    S1885$0$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    memset@p1	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    memset@p	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[7]), STR_3(CODE[7]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> update_menuLCD@l(BANK0[3]), update_menuLCD@tt(BANK0[4]), update_menuLCD@str(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_tri@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_trc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_aa@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_dtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_dac@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_mta@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_mmp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_sc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    sendMessage@buffer	PTR unsigned char  size(1) Largest target is 9
		 -> cmd_tri@buffEOM(BANK0[1]), cmd_tri@buffData(BANK0[5]), cmd_tri@buffInit(BANK0[4]), cmd_trc@buffEOM(BANK0[1]), 
		 -> cmd_trc@buffData(BANK0[5]), cmd_trc@buffInit(BANK0[3]), cmd_ir@buff(BANK0[7]), cmd_ra@buff(BANK0[9]), 
		 -> cmd_rp@buff(BANK0[5]), cmd_rtl@buff(BANK0[5]), cmd_rc@buff(BANK0[6]), sendERRORMessage@bufw(BANK0[4]), 
		 -> sendOKMessage@bufw(BANK0[4]), checkFlags@buff(BANK0[7]), 

    differenceBetweenTimePeriod@diff	PTR struct Time size(1) Largest target is 3
		 -> update_menuLCD@diff(BANK0[3]), 

    LCDstr@p	PTR unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[4]), update_menuLCD@l(BANK0[3]), update_menuLCD@tt(BANK0[4]), update_menuLCD@str(BANK0[8]), 

    S1885command_d$cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    commands.cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_Clock_ISR
    _Clock_ISR->___awdiv

Critical Paths under _main in BANK0

    _main->_editClock
    _main->_editLum
    _main->_editTemp
    _main->_toggleAlarms
    _toggleAlarms->_checkFlags
    _getch->_EUSART_Read
    _editTemp->_checkFlags
    _editLum->_checkFlags
    _editClock->_checkFlags
    _checkFlags->_update_menuLCD
    _wirteEEPROMinit->_DATAEE_WriteByte
    _update_menuLCD->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDstr->_LCDchar
    _LCDchar->_LCDsend2x4
    _LCDcmd->_LCDsend2x4
    _monitoring_TEMP_LUM->_DATAEE_WriteByte
    _tsttc->_WriteI2C
    _DATAEE_WriteByte->___wmul
    _cmd_tri->_sendERRORMessage
    _cmd_trc->_sendERRORMessage
    _DATAEE_ReadByte->___wmul
    _cmd_sc->_sendERRORMessage
    _cmd_sc->_sendOKMessage
    _cmd_mta->_sendERRORMessage
    _cmd_mta->_sendOKMessage
    _cmd_mmp->_sendERRORMessage
    _cmd_mmp->_sendOKMessage
    _cmd_dtl->_sendERRORMessage
    _cmd_dtl->_sendOKMessage
    _cmd_dac->_sendERRORMessage
    _cmd_dac->_sendOKMessage
    _cmd_aa->_sendERRORMessage
    _cmd_aa->_sendOKMessage
    _sendOKMessage->_sendMessage
    _sendERRORMessage->_sendMessage
    _sendMessage->_putch
    _putch->_EUSART_Write
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _LCDinit->_LCDsend2x4
    _LCDsend2x4->_WriteI2C
    _LCDsend->_WriteI2C

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0  212609
                                             68 BANK0      1     1      0
                                              0 BANK1     32    32      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                 _EUSART_is_rx_ready
            _INT_SetInterruptHandler
                            _LCDinit
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                  _SYSTEM_Initialize
           _TMR1_SetInterruptHandler
                     _TMR2_StopTimer
                             ___wmul
                         _checkFlags
                             _cmd_aa *
                            _cmd_dac *
                            _cmd_dtl *
                             _cmd_ir *
                            _cmd_mmp *
                            _cmd_mta *
                             _cmd_ra *
                             _cmd_rc *
                             _cmd_rp *
                            _cmd_rtl *
                             _cmd_sc *
                            _cmd_trc *
                            _cmd_tri *
                          _editClock
                            _editLum
                           _editTemp
                              _getch
                   _i2c1_driver_open
                             _memset
                       _toggleAlarms
 ---------------------------------------------------------------------------------
 (1) _toggleAlarms                                         1     1      0   30176
                                             67 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     651
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getch                                                0     0      0      24
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _editTemp                                             1     1      0   30176
                                             67 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editLum                                              1     1      0   30176
                                             67 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editClock                                            1     1      0   30176
                                             67 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (2) _checkFlags                                           8     8      0   22292
                                             59 BANK0      8     8      0
                 _PWM6_LoadDutyValue
               _PWM_Output_D4_Enable
                           _S1button
                    _TMR2_StartTimer
                _monitoring_TEMP_LUM
                        _sendMessage
                     _update_menuLCD
                    _wirteEEPROMinit
 ---------------------------------------------------------------------------------
 (3) _wirteEEPROMinit                                      1     1      0    4953
                                             10 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _update_menuLCD                                      24    24      0    7884
                                             35 BANK0     24    24      0
                            _LCDchar
                             _LCDcmd
                             _LCDstr
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                     _TMR2_StopTimer
        _differenceBetweenTimePeriod
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             29    21      8    3867
                                             14 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _differenceBetweenTimePeriod                          8     1      7     595
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (3) _TMR2_StopTimer                                       0     0      0       0
                          _TMR2_Stop
 ---------------------------------------------------------------------------------
 (4) _TMR2_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Disable                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_LoadDutyValue                                   4     2      2     348
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _LCDstr                                               6     4      2    1159
                                              9 BANK0      6     4      2
                            _LCDchar
 ---------------------------------------------------------------------------------
 (4) _LCDchar                                              1     1      0     810
                                              8 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               1     1      0     810
                                              8 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _monitoring_TEMP_LUM                                  3     3      0    6655
                                             10 BANK0      3     3      0
           _ADCC_GetSingleConversion
                   _DATAEE_WriteByte
                             ___wmul
                              _tsttc
 ---------------------------------------------------------------------------------
 (4) _tsttc                                                2     2      0      68
                                              2 BANK0      2     2      0
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (5) _ReadI2C                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DATAEE_WriteByte                                     4     1      3    4953
                                              6 BANK0      4     1      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADCC_GetSingleConversion                             4     1      3      22
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (4) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _S1button                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Enable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cmd_tri                                             27    24      3    8418
                                             15 BANK0     27    24      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_trc                                             27    24      3    8019
                                             15 BANK0     27    24      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1612
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2    1260
                                              6 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _cmd_sc                                              11     8      3    5093
                                             15 BANK0     11     8      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rtl                                              9     6      3    2404
                                             15 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rp                                               9     6      3    2404
                                             15 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rc                                              10     7      3    2428
                                             15 BANK0     10     7      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ra                                              13    10      3    2500
                                             15 BANK0     13    10      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mta                                              3     0      3    4848
                                             15 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mmp                                              3     0      3    4848
                                             15 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ir                                              11     8      3    2452
                                             15 BANK0     11     8      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dtl                                              9     6      3    5004
                                             15 BANK0      9     6      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dac                                             11     8      3    5093
                                             15 BANK0     11     8      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_aa                                               4     1      3    4892
                                             15 BANK0      4     1      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (2) _sendOKMessage                                        6     6      0    2402
                                              9 BANK0      6     6      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (2) _sendERRORMessage                                     6     6      0    2402
                                              9 BANK0      6     6      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (3) _sendMessage                                          6     3      3    2284
                                              3 BANK0      6     3      3
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     544
                    _ADCC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM6_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     174
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     196
                                              2 BANK0      1     1      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0     832
                                              8 BANK0      1     1      0
                            _LCDsend
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (5) _LCDsend2x4                                           6     5      1     788
                                              2 BANK0      6     5      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _LCDsend                                              2     2      0      44
                                              2 BANK0      2     2      0
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (6) _WriteI2C                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     692
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                            _INT_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     692
                   Absolute function *
                          _Clock_ISR *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Clock_ISR                                           2     2      0     452
                                              9 COMMON     2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (11) ___awdiv                                             9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (9) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (10) _INT_CallBack                                        0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
                             _S1_ISR *
 ---------------------------------------------------------------------------------
 (11) _S1_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
     ___wmul (ARG)
   _DATAEE_WriteByte
     ___wmul (ARG)
   _EUSART_is_rx_ready
   _INT_SetInterruptHandler
   _LCDinit
     _LCDsend
       _WriteI2C
     _LCDsend2x4
       _WriteI2C
   _PWM6_LoadDutyValue
   _PWM_Output_D4_Disable
   _SYSTEM_Initialize
     _ADCC_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM6_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
   _TMR1_SetInterruptHandler
   _TMR2_StopTimer
     _TMR2_Stop
   ___wmul
   _checkFlags
     _PWM6_LoadDutyValue
     _PWM_Output_D4_Enable
     _S1button
     _TMR2_StartTimer
       _TMR2_Start
     _monitoring_TEMP_LUM
       _ADCC_GetSingleConversion
       _DATAEE_WriteByte
         ___wmul (ARG)
       ___wmul
       _tsttc
         _ReadI2C
         _WriteI2C
     _sendMessage
       _putch
         _EUSART_Write
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _wirteEEPROMinit
       _DATAEE_WriteByte
         ___wmul (ARG)
   _cmd_aa *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dac *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dtl *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ir *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_mmp *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_mta *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ra *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rc *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rp *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rtl *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_sc *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_trc *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _cmd_tri *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _editClock *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editLum *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editTemp *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _getch *
     _EUSART_Read
   _i2c1_driver_open *
   _memset *
   _toggleAlarms *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
       _S1_ISR *
   _TMR1_ISR *
     Absolute function(Fake) *
     _Clock_ISR *
       ___awdiv
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     45      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     20      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1D       9       36.2%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Wed Dec 16 15:36:58 2020

               ?_EUSART_SetRxInterruptHandler 0020                                             _t 0065  
                                          l30 1664                                            l22 1179  
                                          l23 117B                                            l33 162C  
                                          l42 164E                                            l26 1181  
                                          l35 1631                                            l47 1662  
                                ___awdiv@sign 0076                                            _nr 006A  
                         ___wmul@multiplicand 0022                   __size_of_PWM6_LoadDutyValue 0019  
                           sendMessage@buffer 0025                                _update_menuLCD 036C  
                                         l128 155E                                           l253 1FE5  
                                         l182 1125                                           l185 1FBD  
                                         l409 1162                                           l188 1F90  
                                         l540 1059                                           l620 10B8  
                                         l525 1087                                           l439 1FC6  
                                         l617 1FFF                                           l537 104D  
                                         l730 1265                                           l811 1332  
                                         l731 126C                                           l734 1032  
                                         l662 1F67                                           l647 1023  
                                         l760 1015                                           l832 1369  
                                         l656 1F61                                           l728 1261  
                                         l817 1F5B                                           l833 1373  
                                         l665 1F6F                                           l754 1FB4  
                                         l842 1F88                                           l659 1F6B  
                                         l827 12DC                                           l836 1390  
                                         l839 07FE                                           l856 1FAB  
                                         l859 1FA2                                           _PR2 028D  
                             _timer1ReloadVal 00ED                       __size_of_PMD_Initialize 0008  
                             _TMR2_Initialize 1016                                           wreg 0009  
                                ?_EUSART_Read 0070                                   ?_LCDsend2x4 0022  
                             __end_of_LCDchar 1FD0                                          l1100 1572  
                                        l1020 0D2A                                          l1111 15AB  
                                        l1023 0D39                                          l1112 15AD  
                                        l1024 0D3B                                          l1201 0A59  
                                        l1202 0A5B                                          l1115 15B1  
                                        l1035 0D74                                          l1060 0DE2  
                                        l1036 0D76                                          l1061 0DE4  
                                        l1053 0DC8                                          l1301 0469  
                                        l1054 0DCA                                          l1047 0DB2  
                                        l1232 0B0A                                          l1216 0AAB  
                                        l1072 0E1D                                          l1056 0DCE  
                                        l1048 0DB5                                          l1304 0499  
                                        l1225 0AEB                                          l1073 0E1F  
                                        l1241 1FCF                                          l1401 1772  
                                        l1090 0E71                                          l1235 0889  
                                        l1091 0E73                                          l1307 04B4  
                                        l1228 0B01                                          l1500 1305  
                                        l1084 0E5B                                          l1260 13C5  
                                        l1316 0566                                          l1332 05A0  
                                        l1412 178A                                          l1229 0B03  
                                        l1085 0E5E                                          l1094 0E79  
                                        l1238 1007                                          l2230 0813  
                                        l1263 1F5E                                          l1247 1109  
                                        l1423 1464                                          l1415 1430  
                                        l1520 0C63                                          l1504 0B37  
                                        l1440 1347                                          l1513 0BF6  
                                        l1505 0B4A                                          l2049 14D9  
                                        l1281 07FA                                          l1450 10D3  
                                        l1370 16BE                                          l1266 1F64  
                                        l1434 142F                                          l1426 13FB  
                                        l1099 1570                                          l1339 0F58  
                                        l2059 13FA                                          l1524 0D29  
                                        l2236 11A0                                          l1444 1360  
                                        l1453 1143                                          l1525 0C86  
                                        l1461 17FF                                          l1365 16B5  
                                        l1437 1333                                          l1518 0C38  
                                        l1519 0C50                                          l1367 169A  
                                        l1359 0FFF                                          l1295 0432  
                                        l1391 0A36                                          l1376 1248  
                                        l1456 1291                                          l1464 1202  
                                        l1472 109F                                          l1480 151B  
                                        l5000 0FBA                                          l1490 160A  
                                        l5010 0FD5                                          l5002 0FC2  
                                        l1298 04AE                                          l1394 171E  
                                        l1467 12B6                                          l5020 0FE5  
                                        l5012 0FD7                                          l5004 0FC8  
                                        l1548 02A5                                          l1477 10EE  
                                        l1485 0903                                          l5030 0FF9  
                                        l5022 0FEA                                          l5006 0FCD  
                                        l5014 0FDA                                          l5120 1526  
                                        l5200 114B                                          l5040 1672  
                                        l5024 0FEF                                          l5032 0FFC  
                                        l5016 0FDC                                          l5008 0FD3  
                                        l6000 00B6                                          l1497 149C  
                                        l5130 1531                                          l5122 1528  
                                        l5114 151C                                          l5210 115F  
                                        l5202 114D                                          l5050 1689  
                                        l5042 1677                                          l5034 0FFD  
                                        l5026 0FF5                                          l5018 0FDE  
                                        l1738 05BE                                          l6002 00B7  
                                        l4420 1615                                          l4412 160D  
                                        l5220 1308                                          l5212 1008  
                                        l5140 1545                                          l5132 1533  
                                        l5124 152A                                          l5116 1522  
                                        l5204 1154                                          l4500 1385  
                                        l5060 1226                                          l5052 1696  
                                        l5044 167C                                          l5036 1665  
                                        l5028 0FF7                                          l1756 0671  
                                        l5300 12DA                                          l6100 0288  
                                        l6020 00FD                                          l6012 00CA  
                                        l6004 00C4                                          l1773 073E  
                                        l4422 161F                                          l4414 1610  
                                        l5310 1585                                          l5230 1321  
                                        l5222 1310                                          l5214 100B  
                                        l5150 1550                                          l5142 1547  
                                        l5134 1535                                          l5126 152C  
                                        l5118 1524                                          l5206 1156  
                                        l4502 138B                                          l5062 122A  
                                        l5054 16A8                                          l5046 167F  
                                        l5038 166C                                          l4510 0803  
                                        l6102 028F                                          l6110 02A5  
                                        l6030 01AF                                          l6014 00DC  
                                        l6006 00C6                                          l6022 00FF  
                                        l4424 162A                                          l4432 1638  
                                        l5312 1589                                          l5304 1561  
                                        l5240 132D                                          l5232 1323  
                                        l5224 131A                                          l5216 1013  
                                        l5160 155B                                          l5152 1552  
                                        l5144 1549                                          l5136 1541  
                                        l5128 152F                                          l5208 1157  
                                        l4504 138C                                          l5064 1235  
                                        l5056 16AA                                          l5048 1682  
                                        l4600 1F5F                                          l4512 0804  
                                        l5400 09EB                                          l6120 02BB  
                                        l6112 02AD                                          l6104 029B  
                                        l6040 01EF                                          l6032 01BB  
                                        l6024 0105                                          l6016 00E0  
                                        l1777 11AC                                          l4434 1643  
                                        l4426 1636                                          l5314 1598  
                                        l5306 1561                                          l4450 0A6E  
                                        l4442 0A39                                          l5242 132E  
                                        l5234 1324                                          l5226 131D  
                                        l5218 1306                                          l5170 1FBC  
                                        l5154 1555                                          l5146 154B  
                                        l5138 1543                                          l5162 1F89  
                                        l4506 138E                                          l5066 123A  
                                        l4530 11B6                                          l4522 11A1  
                                        l5058 16B0                                          l4610 1259  
                                        l4602 1F6C                                          l4514 080A  
                                        l5410 0A04                                          l5402 09F6  
                                        l6130 0320                                          l6122 02D9  
                                        l6114 02B9                                          l6106 029E  
                                        l6050 022B                                          l6042 01FC  
                                        l6034 01C8                                          l6026 010A  
                                        l6018 00EF                                          l1779 11C0  
                                        l4436 1653                                          l5316 159C  
                                        l5308 1576                                          l4460 0A9C  
                                        l4452 0A72                                          l4444 0A3E  
                                        l5180 1085                                          l5244 132F  
                                        l5236 1326                                          l5228 131F  
                                        l5164 1FB5                                          l5156 1557  
                                        l5148 154E                                          l5172 1FF3  
                                        l4532 11BC                                          l4524 11A4  
                                        l4620 1260                                          l4612 125A  
                                        l4604 1249                                          l4508 1FC9  
                                        l4700 1F62                                          l4540 14A6  
                                        l4516 0810                                          l5420 0A28  
                                        l5412 0A09                                          l5404 09F9  
                                        l6140 0334                                          l6132 0320  
                                        l6124 02F5                                          l6060 0231  
                                        l6052 022C                                          l6044 0209  
                                        l6036 01D5                                          l6028 01A3  
                                        l4470 0AD6                                          l4462 0AAB  
                                        l4454 0A81                                          l4446 0A4A  
                                        l5246 1330                                          l5238 1327  
                                        l5166 1FB8                                          l5158 1559  
                                        l5174 1FFA                                          l5190 101E  
                                        l5182 1016                                          l5430 10C8  
                                        l5270 102E                                          l5262 1024  
                                        l4526 11A8                                          l4622 1266  
                                        l4614 125B                                          l4606 1251  
                                        l4630 0D4E                                          l4550 14C5  
                                        l4542 14A9                                          l4518 0812  
                                        l4710 05BA                                          l4702 05A3  
                                        l5422 0A32                                          l5414 0A0F  
                                        l5406 09FE                                          l6150 034E  
                                        l6142 0338                                          l6126 0307  
                                        l6134 0323                                          l6070 023A  
                                        l6062 0232                                          l6054 022E  
                                        l6046 0215                                          l6038 01E2  
                                        l4472 0ADC                                          l4464 0AB2  
                                        l4456 0A87                                          l4448 0A5F  
                                        l5600 0861                                          l5176 1071  
                                        l5168 1FB9                                          l5192 1020  
                                        l5184 1019                                          l5440 1110  
                                        l4624 1F84                                          l5432 1128  
                                        l5424 10BB                                          l5272 102F  
                                        l5264 1028                                          l4528 11B1  
                                        l4616 125C                                          l4608 1255  
                                        l4480 1163                                          l4640 0D89  
                                        l4632 0D52                                          l4552 14C9  
                                        l4544 14AE                                          l4536 149D  
                                        l4800 0712                                          l4720 05D8  
                                        l4712 05BF                                          l4704 05A8  
                                        l5416 0A1F                                          l5408 09FF  
                                        l6152 0355                                          l6144 033F  
                                        l6136 032A                                          l6128 0314  
                                        l6080 024B                                          l6072 023B  
                                        l6064 0235                                          l6056 022F  
                                        l6048 0220                               __end_of_LCDinit 088A  
                                        l4474 0AEB                                          l4466 0AC1  
                                        l4458 0A96                                          l5610 087F  
                                        l5602 0865                                          l5178 1083  
                                        l5194 1144                                          l5186 101A  
                                        l5450 111F                                          l5442 1113  
                                        l4490 1363                                          l5434 1138  
                                        l5426 10C3                                          l5274 1030  
                                        l5266 102C                                          l4618 125E  
                                        l4482 116E                                          l4650 0DD3  
                                        l4642 0D8D                                          l4634 0D61  
                                        l4626 0D2A                                          l4554 14CA  
                                        l4546 14B2                                          l4538 14A0  
                                        l4570 13D9                                          l4562 13C6  
                                        l4802 0719                                          l4722 05DB  
                                        l4706 05AE                                          l5418 0A25  
                                        l5370 099F                                          l5290 12CC  
                                        l5282 12B7                                          l6154 0359  
                                        l6146 0343                                          l6138 032E  
                                        l6090 0263                                          l6082 024E  
                                        l6074 023E                                          l6066 0237  
                                        l6058 0230                                          l4476 0AF2  
                                        l4468 0AC7                                          l5604 086D  
                                        l4820 1FA3                                          l4812 1FBE  
                                        l5196 1147                                          l5188 101D  
                                        l5452 1122                                          l5444 1116  
                                        l5436 110A                                          l4492 1363  
                                        l5428 10C4                                          l5268 102D  
                                        l4484 1180                                          l4660 0E0E  
                                        l4652 0DE8                                          l4644 0D9C  
                                        l4636 0D65                                          l4628 0D3F  
                                        l4556 14CF                                          l4548 14B6  
                                        l4572 13DD                                          l4564 13CD  
                                        l4580 13F6                                          l4804 071D  
                                        l4740 0632                                          l4724 05EC  
                                        l4732 060B                                          l4716 05C3  
                                        l4708 05B5                                          l4900 04B4  
                                        l5380 09AE                                          l5372 09A1  
                                        l5620 173B                                          l5612 1723  
                                        l5292 12D2                                          l5284 12B7  
                                        l5460 1FE2                                          l5700 1356  
                                        l6156 0366                                          l6148 034A  
                                        l6092 0269                                          l6084 024F  
                                        l6076 023F                                          l6068 0238  
                                        l4478 0B07                                          l5606 0873  
                                        l5198 1149                                          l5446 1119  
                                        l5438 110D                                          l4494 136E  
                                        l5710 17AD                                          l4822 1F5C  
                                        l4814 1F68                                          l4590 104B  
                                        l4670 0E4C                                          l4662 0E23  
                                        l4654 0DF7                                          l4646 0DA3  
                                        l4638 0D7A                                          l4558 14D5  
                                        l4574 13E7                                          l4566 13D0  
                                        l4750 063D                                          l4742 0636  
                                        l4734 0623                                          l4726 05FB  
                                        l4718 05CC                                          l4806 0726  
                                        l4910 04E9                                          l4902 04B8  
                                        l4830 037B                                          l5390 09BF  
                                        l5374 09A6                                          l5382 09B0  
                                        l5366 0996                                          l5630 1754  
                                        l5622 173D                                          l5614 1729  
                                        l5294 12D3                                          l5286 12BD  
                                        l5454 1FDA                                          l5702 135E  
                                        l6094 0275                                          l6086 0257  
                                        l6078 0240                                          l5608 0879  
                                        l4816 1FAC                                          l5448 111C  
                                        l4496 1374                                          l5704 126D  
                                        l5720 17D5                                          l5712 17B1  
                                        l5800 1606                                          l4592 104C  
                                        l4584 1046                                          l4672 0E62  
                                        l4664 0E32                                          l4656 0DFB  
                                        l4648 0DB9                                          l4680 10EF  
                                        l4488 1F65                                          l4576 13EB  
                                        l4568 13D5                                          l4760 066D  
                                        l4744 063B                                          l4736 062A  
                                        l4808 073A                                          l4728 05FF  
                                        l4920 051E                                          l4912 04ED  
                                        l4904 04BE                                          l4840 03D0  
                                        l4832 0383                                          l4824 073F  
                                        l5392 09C2                                          l5384 09B5  
                                        l5376 09A9                                          l5368 099C  
                                        l5632 175B                                          l5624 1744  
                                        l5640 1772                                          l5616 172E  
                                        l5296 12D5                                          l5288 12C7  
                                        l5456 1FDF                                          l6096 0278  
                                        l6088 025D                                          l4818 1F9A  
                                        l4498 1380                                          l5706 1286  
                                        l5722 17E2                                          l5714 17BE  
                                        l5730 11E2                                          l5810 147F  
                                        l5802 1465                                          l4594 1052  
                                        l4586 1049                                          l4674 0E77  
                                        l4666 0E36                                          l4658 0E0A  
                                        l4682 10F0                                          l4690 1398  
                                        l4578 13F0                                          l4770 0692  
                                        l4762 067C                                          l4754 0657  
                                        l4738 062E                                          l4930 053E  
                                        l4922 0525                                          l4914 04F3  
                                        l4906 04D1                                          l4850 03F6  
                                        l4842 03D8                                          l4834 0389  
                                        l4826 036C                                          l5394 09C4  
                                        l5386 09B8                                          l5378 09AB  
                                        l5642 177B                                          l5634 1762  
                                        l5626 174B                                          l5618 1734  
                                        l5650 1435                                          l5298 12D8  
                                        l5482 07FB                                          l5458 1FE0  
                                        l6098 0283                                          l5580 081D  
                                        l5900 0C76                                          l5724 17EA  
                                        l5716 17C3                                          l5708 178B  
                                        l5732 11F7                                          l5740 1090  
                                        l5812 1488                                          l5804 146F  
                                        l5820 12DD                                          l4588 104A  
                                        l4668 0E45                                          l4684 10F4  
                                        l4692 139F                                          l4780 06AE  
                                        l4772 0699                                          l4764 0685  
                                        l4756 0661                                          l4940 055A  
                                        l4932 0543                                          l4924 0529  
                                        l4916 0506                                          l4908 04E1  
                                        l4860 041A                                          l4852 03FC  
                                        l4844 03DE                                          l4836 03AE  
                                        l4828 0372                                          l5396 09C9  
                                        l5388 09BA                                          l5636 1769  
                                        l5628 1752                                          l5644 177E  
                                        l5660 144B                                          l5652 143B  
                                        l5478 1F59                                          l5590 083D  
                                        l5582 0821                                          l5910 0CA1  
                                        l5726 17F6                                          l5718 17D0  
                                        l5734 1292                                          l5742 1096  
                                        l5750 10E5                                          l5814 148F  
                                        l5806 1476                                          l5822 12FA  
                                        l5830 0B22                                          l4678 1002  
                                        l4598 10A0                                          l4694 13A9  
                                        l4686 1391                                          l4790 06D4  
                                        l4774 069D                                          l4782 06B9  
                                        l4766 0688                                          l4758 0667  
                                        l4950 0579                                          l4942 0561  
                                        l4934 0549                                          l4926 0531  
                                        l4918 0516                                          l4870 0448  
                                        l4862 0423                                          l4854 0405  
                                        l4846 03E7                                          l4838 03CC  
                                        l5398 09CE                                          l5646 1781  
                                        l5638 176B                                          l5670 1400  
                                        l5662 1454                                          l5654 143E  
                                        l5592 0845                                          l5584 0829  
                                        l5920 0CCE                                          l5912 0CA7  
                                        l5904 0C7B                                          l5728 17FB  
                                        l5736 12AB                                          l5744 109B  
                                        l5752 10EA                                          l5760 1510  
                                        l5816 1493                                          l5808 147A  
                                        l5840 0B62                                          l5832 0B2E  
                                        l5824 0B0B                                          l4696 13AF  
                                        l4688 1392                                          l4792 06DA  
                                        l4784 06BF                                          l4776 06A3  
                                        l4768 068C                                          l4960 0595  
                                        l4952 057E                                          l4936 054E  
                                        l4928 0538                                          l4944 0567  
                                        l4880 048E                                          l4872 044D  
                                        l4864 042A                                          l4856 040C  
                                        l4848 03EE                                          l5648 1788  
                                        l5680 1416                                          l5672 1406  
                                        l5656 1444                                          l5664 1457  
                                        l5594 0849                                          l5586 082D  
                                        l5578 0814                                          l5930 0CF9  
                                        l5922 0CD2                                          l5906 0C82  
                                        l5738 1088                                          l5746 10D4  
                                        l5754 14DA                                          l5770 08C2  
                                        l5762 088A                                          l5818 1498  
                                        l5850 0B86                                          l5842 0B66  
                                        l5834 0B45                                          l5826 0B13  
                                        l4970 0EB5                                          l4698 13B5  
                                        l4794 06E1                                          l4786 06C6  
                                        l4778 06AA                                          l4962 059C  
                                        l4954 0585                                          l4946 056E  
                                        l4938 0555                                          l4890 04AA  
                                        l4882 0496                                          l4874 0452  
                                        l4866 043B                                          l4858 0414  
                                        l5682 141F                                          l5674 1409  
                                        l5666 145A                                          l5658 144A  
                                        l5690 1338                                          l5596 0851  
                                        l5588 0839                                          l5940 0D19  
                                        l5932 0CFD                                          l5924 0CD8  
                                        l5908 0C96                                          l5748 10DF  
                                        l5756 1501                                          l5780 08FA  
                                        l5772 08CF                                          l5764 08AC  
                                        l5860 0BAF                                          l5852 0B95  
                                        l5836 0B57                                          l5828 0B1E  
                                        l4980 0F71                                          l4972 0F45  
                                        l4964 0E7A                                          l4788 06CA  
                                        l4796 06E5                                          l4956 058B  
                                        l4948 0574                                          l4884 049E  
                                        l4876 0457                                          l4868 0442  
                                        l5676 140F                                          l5684 1422  
                                        l5668 1462                                          l5692 133E  
                                        l5598 0855                                          l5934 0D0C  
                                        l5926 0CE3                                          l5918 0CA8  
                                        l5942 0D25                                          l5758 150C  
                                        l5774 08D4                                          l5766 08B0  
                                        l5782 08FF                                          l5790 15DA  
                                        l5870 0BE1                                          l5862 0BC3  
                                        l5854 0B99                                          l5838 0B62  
                                        l4990 0F87                                          l4982 0F74  
                                        l4974 0F4C                                          l4966 0E93  
                                        l4798 06EA                                          l4958 0590  
                                        l4886 04A0                                          l4878 0475  
                                        l5686 1425                                          l5678 1415  
                                        l5950 1194                                          l5694 1343  
                                        l5928 0CF1                                          l5936 0D0F  
                                        l5880 0C09                                          l5776 08E1  
                                        l5768 08BD                                          l5792 15DF  
                                        l5784 15B2                                          l5872 0BE6  
                                        l5864 0BC5                                          l5856 0B9F  
                                        l5848 0B68                                          l4992 0F9B  
                                        l4984 0F76                                          l4976 0F52  
                                        l4968 0EA4                                          l4888 04A7  
                                        l5688 142D                                          l5944 1184  
                                        l5696 1350                                          l5938 0D15  
                                        l5890 0C41                                          l5882 0C0E  
                                        l5778 08E9                                          l5794 15EC  
                                        l5786 15C9                                          l5858 0BAA  
                                        l5866 0BCA                                          l5874 0BF2  
                                        l4994 0F9D                                          l4986 0F7C  
                                        l4978 0F5D                                          l5946 1189  
                                        l5698 1353                                          l5892 0C45  
                                        l5884 0C1B                                          l5876 0BF7  
                                        l5796 15F4                                          l5788 15CD  
                                        l5868 0BD8                                          l4996 0FA8  
                                        l4988 0F82                                          l5948 1190  
                                        l5894 0C56                                          l5886 0C2A  
                                        l5878 0BFF                                          l5798 1601  
                                        l4998 0FB3                                          l5990 0092  
                                        l5896 0C5C                                          l5888 0C31  
                                        l5992 009C                                          _ALAF 006F  
                                        l5898 0C69                                          l5994 009F  
                                        l5996 00B2                                          l5998 00B4  
                             __end_of_LCDsend 15B2                                          STR_1 1827  
                                        STR_2 1827                                          STR_3 1840  
                                        STR_4 1840                                          STR_5 1847  
                                        STR_6 1847                                          STR_7 184C  
                                        _LATA 0016                                          _LATB 0017  
                             __end_of_INT_ISR 1F76                                          _LATC 0018  
                                        u4000 0E45                                          _LATD 0019  
                                        u4001 0E44                                          _LATE 001A  
                                        u4010 0E5B                                          u4011 0E5A  
                                        u4020 0E62                                          u4100 060B  
                                        u4021 0E61                                          u4101 060A  
                                        u3310 1614                                          u4030 0E71  
                                        u4110 0632                                          u3311 1613  
                                        u4031 0E70                                          u4111 0631  
                                        u3320 161F                                          u4040 0E77  
                                        u4200 06B8                                          u4120 0656  
                                        u3321 161E                                          u4041 0E76  
                                        u4201 06B7                                          u4121 0655  
                                        u3330 162A                                          u3410 0A59  
                                        u4050 1109                                          u4210 06BF  
                                        u4130 0661                                          _T2PR 028D  
                                        u3331 1629                                          u3411 0A58  
                                        u4051 1108                                          u4211 06BE  
                                        u4131 0660                                          u3340 1631  
                                        u3500 0B01                                          u3420 0A5F  
                                        u4060 139F                                          u4220 06D4  
                                        u4140 0667                                          u4300 03FC  
                                        u5100 099C                                          u3341 1630  
                                        u3501 0B00                                          u3421 0A5E  
                                        u3405 0A41                                          u4061 139E  
                                        u4221 06D3                                          u4141 0666  
                                        u4125 0652                                          u4301 03FB  
                                        u5101 099B                                          u3350 1636  
                                        u3510 0B07                                          u3430 0A6E  
                                        u4070 13B5                                          u4230 06DA  
                                        u4150 066D                                          u4310 040C  
                                        u5110 09A6                                          u3351 1635  
                                        u3511 0B06                                          u3431 0A6D  
                                        u4071 13B4                                          u4231 06D9  
                                        u4151 066C                                          u4311 040B  
                                        u5111 09A5                                          u3360 1643  
                                        u3440 0A81                                          u3600 11A8  
                                        u6000 0B13                                          u3520 116E  
                                        u4240 0726                                          u4160 067C  
                                        u4080 05AE                                          u4400 049E  
                                        u4320 041A                                          u5120 09B5  
                                        u5200 1FDF                                          u3361 1642  
                                        u3441 0A80                                          u3601 11A7  
                                        u6001 0B12                                          u3521 116D  
                                        u4241 0725                                          u4161 067B  
                                        u4081 05AD                                          u4401 049D  
                                        u4321 0419                                          u5121 09B4  
                                        u5201 1FDE                                          u3370 164E  
                                        u3450 0A96                                          u6010 0B2E  
                                        u3530 1179                                          u4250 073A  
                                        u4170 068C                                          u4090 05D8  
                                        u4410 04B3                                          u4330 042A  
                                        u5130 09BF                                          u3371 164D  
                                        u3451 0A95                                          u6011 0B2D  
                                        u3531 1178                                          u4251 0739  
                                        u4171 068B                                          u4091 05D7  
                                        u4411 04B2                                          u4331 0429  
                                        u5131 09BE                                          u3380 1653  
                                        u3460 0AAB                                          u6100 0C56  
                                        u6020 0B45                                          u3540 1180  
                                        u3700 14D5                                          u4180 0692  
                                        u4500 056E                                          u4420 04BE  
                                        u4340 0442                                          u4260 0372  
                                        u5140 09C9                                          u3381 1652  
                                        u3461 0AAA                                          u6101 0C55  
                                        u6021 0B44                                          u3541 117F  
                                        u3701 14D4                                          u4181 0691  
                                        u4165 0678                                          u4501 056D  
                                        u4421 04BD                                          u4341 0441  
                                        u4261 0371                                          u5141 09C8  
                                        u3390 1662                                          u3470 0AC1  
                                        u3550 1369                                          u3630 11BC  
                                        u6110 0C5C                                          u6030 0B9F  
                                        u3710 13CD                                          u4190 06A3  
                                        u4510 0574                                          u4430 04F3  
                                        u4350 0448                                          u4270 0389  
                                        u5150 09CE                                          u3391 1661  
                                        u3471 0AC0                                          u3551 1368  
                                        u3631 11BB                                          u3615 11AD  
                                        u6111 0C5B                                          u6031 0B9E  
                                        u6015 0B2A                                          u3711 13CC  
                                        u4191 06A2                                          u4511 0573  
                                        u4431 04F2                                          u4351 0447  
                                        u4271 0388                                          u5151 09CD  
                                        u3480 0AD6                                          u3560 136E  
                                        u6120 0C69                                          u6040 0BC3  
                                        u3800 0D39                                          u4600 0F7C  
                                        u3640 14A6                                          u4520 0585  
                                        u4440 0525                                          u4360 044D  
                                        u4280 03DE                                          u5160 09FE  
                                        u3481 0AD5                                          u3561 136D  
                                        u3625 11B2                                          u6121 0C68  
                                        u6041 0BC2                                          u6025 0B41  
                                        u3801 0D38                                          u4601 0F7B  
                                        u3641 14A5                                          u4521 0584  
                                        u4441 0524                                          u4361 044C  
                                        u4281 03DD                                          u5161 09FD  
                                        u3490 0AEB                                          u3570 138B  
                                        u6130 0C76                                          u6050 0BD8  
                                        u3810 0D3F                                          u4610 0F9B  
                                        u3730 13DD                                          u4530 058B  
                                        u4450 0538                                          u4370 0452  
                                        u4290 03EE                                          u5170 0A04  
                                        u3491 0AEA                                          u3571 138A  
                                        u6131 0C75                                          u6051 0BD7  
                                        u3811 0D3E                                          u4611 0F9A  
                                        u3731 13DC                                          u4531 058A  
                                        u4451 0537                                          u4371 0451  
                                        u4291 03ED                                          u5171 0A03  
                                        u6140 0C82                                          u6060 0BFF  
                                        u4700 1672                                          u3900 0DC8  
                                        u3820 0D4E                                          u4620 0FBA  
                                        u3660 14B6                                          u3740 13E7  
                                        u3580 080A                                          u4540 059C  
                                        u4460 053E                                          u4380 0457  
                                        u5180 0A09                                          _PMD0 0796  
                                        u6141 0C81                                          u6061 0BFE  
                                        u6045 0BBF                                          u4701 1671  
                                        u3901 0DC7                                          u3821 0D4D  
                                        u4621 0FB9                                          u3661 14B5  
                                        u3741 13E6                                          u3725 13D1  
                                        u3581 0809                                          u4541 059B  
                                        u4461 053D                                          u4381 0456  
                                        u5181 0A08                                          _PMD1 0797  
                                        u6150 0CD8                                          u6070 0C1B  
                                        u4710 1677                                          u3910 0DCE  
                                        u3830 0D61                                          u4630 0FC2  
                                        u3590 0810                                          u4470 0549  
                                        u4390 0496                                          u5190 0A1F  
                                        _PMD2 0798                                          u6151 0CD7  
                                        u6135 0C72                                          u6071 0C1A  
                                        u6055 0BD4                                          u4711 1676  
                                        u3911 0DCD                                          u3831 0D60  
                                        u4631 0FC1                                          u4615 0F97  
                                        u3655 14AA                                          u3591 080F  
                                        u4471 0548                                          u4391 0495  
                                        u5191 0A1E                                          _PMD3 0799  
                                        u6160 0CF1                                          u6080 0C31  
                                        u4720 167C                                          u3920 0DD3  
                                        u3840 0D74                                          u4640 0FC8  
                                        u4560 0EA4                                          u3680 14C5  
                                        u3760 13F6                                          u4480 0555  
                                        u5600 1769                                          u6400 0269  
                                        u6320 00C4                                          _PMD4 079A  
                                        u6161 0CF0                                          u6081 0C30  
                                        u4721 167B                                          u3921 0DD2  
                                        u3841 0D73                                          u4641 0FC7  
                                        u4561 0EA3                                          u3681 14C4  
                                        u3761 13F5                                          u3745 13E3  
                                        u4481 0554                                          u5601 1768  
                                        u6401 0268                                          u6321 00C3  
                                        _PMD5 079B                                          u6170 0D0C  
                                        u6090 0C45                                          u4730 1689  
                                        u3770 1052                                          u3930 0DE2  
                                        u3850 0D7A                                          u4650 0FCD  
                                        u4570 0EB5                                          u4490 0561  
                                        u5610 1788                                          u5530 1723  
                                        u6410 028F                                          u6330 00EF  
                                        u6171 0D0B                                          u6091 0C44  
                                        u6075 0C17                                          u4731 1688  
                                        u3771 1051                                          u3931 0DE1  
                                        u3851 0D79                                          u4651 0FCC  
                                        u4571 0EB4                                          u4555 0E8B  
                                        u3675 14B7                                          u3755 13EC  
                                        u4491 0560                                          u5195 0A1B  
                                        u5611 1787                                          u5531 1722  
                                        u6411 028E                                          u6331 00EE  
                                        u6180 0D15                                          u4740 1696  
                                        u3940 0DE8                                          u3860 0D89  
                                        u4660 0FE5                                          u4580 0F4C  
                                        u5540 1729                                          u5620 1435  
                                        u4900 12BD                                          u5700 1338  
                                        u6500 034A                                          u6420 02A4  
                                        u6340 00FD                                          u6181 0D14  
                                        u6165 0CED                                          u4741 1695  
                                        u3941 0DE7                                          u3861 0D88  
                                        u4661 0FE4                                          u4581 0F4B  
                                        u4565 0EA0                                          u3685 14C1  
                                        u5541 1728                                          u5621 1434  
                                        u4901 12BC                                          u5701 1337  
                                        u6501 0349                                          u6421 02A3  
                                        u6341 00FC                                          u4750 16A8  
                                        u3790 1265                                          u3950 0DF7  
                                        u3870 0D9C                                          u4670 0FEA  
                                        u4590 0F71                                          u5550 1734  
                                        u5630 143B                                          u4910 12D2  
                                        u6190 11A0                                          u5710 133E  
                                        u6510 0355                                          u6430 02AD  
                                        u6350 0105                                          u6175 0D08  
                                        u4751 16A7                                          u3791 1264  
                                        u3951 0DF6                                          u3871 0D9B  
                                        u4671 0FE9                                          u4591 0F70  
                                        u4575 0EB1                                          u3695 14CB  
                                        u5551 1733                                          u5631 143A  
                                        u4911 12D1                                          u6191 119F  
                                        u5711 133D                                          u6511 0354  
                                        u6431 02AC                                          u6351 0104  
                                        u6335 00EB                                          u4920 1570  
                                        u5800 1090                                          u4760 16B0  
                                        u3960 0E0A                                          u3880 0DB2  
                                        u4680 0FEF                                          u5560 173B  
                                        u5640 144A                                          u5720 135E  
                                        u6520 0366                                          u6440 02B9  
                                        u6360 010A                                          u4921 156F  
                                        u5801 108F                                          u4761 16AF  
                                        u4745 1692                                          u3961 0E09  
                                        u3881 0DB1                                          u4681 0FEE  
                                        u3785 10B1                                          u5561 173A  
                                        u5641 1449                                          u5721 135D  
                                        u6521 0365                                          u6441 02B8  
                                        u6361 0109                                          u4930 1576  
                                        u4770 1248                                          u5730 17B1  
                                        u5810 10DF                                          u4690 166C  
                                        u3970 0E1D                                          u3890 0DB9  
                                        u5570 174B                                          u5650 1462  
                                        u6450 02D9                                          u6370 0248  
                                        u4931 1575                                          u4771 1247  
                                        u5731 17B0                                          u5811 10DE  
                                        u4755 16A4                                          u4691 166B  
                                        u3971 0E1C                                          u3891 0DB8  
                                        u4595 0F6D                                          u5571 174A  
                                        u5651 1461                                          u6451 02D8  
                                        u4940 1585                                          u5740 17BE  
                                        u5820 1508                                          u5900 08E9  
                                        u3980 0E23                                          u5580 1752  
                                        u5660 1400                                          u6460 0314  
                                        u6380 025D                                          u4941 1584  
                                        u5741 17BD                                          u5821 1506  
                                        u5901 08E8                                          u3981 0E22  
                                        u5581 1751                                          u5661 13FF  
                                        u6525 0362                                          u6461 0313  
                                        u6381 025C                                          _TALA 00E9  
                                        u4950 1598                                          u5750 17C3  
                                        u5830 1509                                          u5910 15CD  
                                        u3990 0E32                                          u5590 1762  
                                        u5670 1406                                          u6470 032A  
                                        u6390 0263                                          u4951 1597  
                                        u6607 0826                                          u4775 1244  
                                        u5751 17C2                                          u5911 15CC  
                                        u3991 0E31                                          u5591 1761  
                                        u5671 1405                                          u6471 0329  
                                        u6391 0262                                          u4960 15AB  
                                        u5760 17D0                                          u5840 08B0  
                                        u5920 15DA                                          u5680 1415  
                                        u6480 0334                                          u4961 15AA  
                                        u6617 082E                                          u5761 17CF  
                                        u5745 17BA                                          u5841 08AF  
                                        u5921 15D9                                          u5681 1414  
                                        u6537 134B                                          u6481 0333  
                                        u4970 15B1                                          u5770 17D5  
                                        u5850 08BD                                          u5930 15DF  
                                        u5690 142D                                          u6490 033F  
                                        u4971 15B0                                          u6627 083A  
                                        u5771 17D4                                          u5851 08BC  
                                        u5931 15DE                                          u5691 142C  
                                        u6547 144F                                          u6491 033E  
                                        u5780 17E2                                          u5860 08C2  
                                        u5940 15EC                                          u6637 0842  
                                        u5781 17E1                                          u5765 17CC  
                                        u5861 08C1                                          u5941 15EB  
                                        u5925 15D6                                          u6557 141A  
                                        u5790 17EA                                          u5870 08CF  
                                        u5950 15F4                                          u6647 084E  
                                        u5791 17E9                                          u5871 08CE  
                                        u5855 08B9                                          u5951 15F3  
                                        u6567 1776                                          u5880 08D4  
                                        u5960 146F                                          u6657 0856  
                                        u5785 17DE                                          u5881 08D3  
                                        u5945 15E8                                          u5961 146E  
                                        u6577 0A33                                          _NREG 007D  
                                        u5890 08E1                                          u5970 1476  
                                        u6667 0862                                          u5891 08E0  
                                        u5875 08CB                                          u5971 1475  
                                        u6587 16B9                                          u5980 1488  
                                        u6677 086A                                          u6597 0818  
                                        u5981 1487                                          u5990 148F  
                                        u6687 0886                                          u5895 08DD  
                                        u5991 148E                                          u6697 0B08  
                                        _PMON 00EA                                          _TMR2 028C  
                                        _WPUA 0F39                                          _WPUB 0F44  
                                        _WPUC 0F4F                                          _WPUD 0F5A  
                                        _WPUE 0F65                                   main@notInit 00D8  
                                        _main 0092                                          _temp 006E  
                                        fsr0h 0005                                          fsr1h 0007  
                                        indf0 0000                                          fsr0l 0004  
                                        indf1 0001                                          fsr1l 0006  
                                        btemp 007E           __end_of_INT_DefaultInterruptHandler 0003  
                 _INT_DefaultInterruptHandler 0002                                          start 0052  
                              cmd_dtl@tempAux 0034               __end_of_INT_SetInterruptHandler 1FB5  
                  ??_TMR1_SetInterruptHandler 0022                               __end_of_ReadI2C 1182  
                   __size_of_DATAEE_WriteByte 0024                        __end_of_update_menuLCD 05A1  
                               ?_EUSART_Write 0070                __size_of_OSCILLATOR_Initialize 0009  
               __end_of_OSCILLATOR_Initialize 1FBE                                         _ADACQ 009D  
                                       _ADCAP 009B                                         _ADACT 0099  
                    __end_of_i2c1_driver_open 1FE6                                         ?_main 0070  
                                       _ADCLK 0098                                         _ADCNT 010C  
                                       _ADPCH 009E                                         _ADREF 009A  
                             __end_of___awdiv 171E                                         _ADPRE 009C  
                                       _ADRPT 010D                                         _T1CLK 0211  
                             ___awdiv@divisor 0070                                         _T1CON 020E  
                                       _T2CON 028E                                         _T2HLT 028F  
                             __end_of___lwdiv 14DA                                         _T2TMR 028C  
                                       _T2RST 0291                                         i1l423 1043  
                             __end_of___lwmod 13FB                                         i1l442 0003  
                                       i1l371 0041                                         i1l436 1070  
                                       i1l372 0050                                         i1l364 0013  
                                       i1l373 004A                                         i1l367 0026  
                                       i1l369 0035                                         i1l378 0050  
                                       i1l751 1FF2                                         i1l747 1F75  
                                       i1l853 11E1                                         i1l845 1223  
                                       i1l757 0002                                         i1l848 1225  
                             ___awdiv@counter 0075                                         _OSCEN 0891  
                                       _TMR1H 020D                      __size_of_wirteEEPROMinit 00BC  
                                       _TMR1L 020C                                         _TRISA 0011  
                                       _TRISB 0012                                         _TRISC 0013  
                                       _TRISD 0014                                         _TRISE 0015  
                                       _WPUC3 7A7B                                         _WPUC4 7A7C  
                                       _RXPPS 0ECB                               __end_of_cmd_dac 0904  
                             __end_of_editLum 1430                               __end_of_cmd_dtl 160B  
                             _PWM6_Initialize 1FF3                               __end_of_cmd_mta 10EF  
                             __end_of_cmd_mmp 10A0                               __end_of_cmd_trc 0BF7  
                             __end_of_cmd_rtl 1203                               __end_of_cmd_tri 0D2A  
                            __end_of_TMR1_ISR 1071                              __end_of_S1button 16BF  
                             _DATAEE_ReadByte 1024                                         _getch 07FB  
                             __end_of_dpowers 1840                            __size_of_TMR2_Stop 0003  
                                 ?_TMR2_Start 0070                                         _iread 006C  
                             __end_of_isdigit 0814                                         _putch 1F82  
                                       main@c 00DE                                         main@i 00DA  
                                       main@n 00DF                                         _tsttc 0D2A  
                     __end_of_TMR1_Initialize 1163                                         pclath 000A  
                                       status 0003                                         wtemp0 007E  
                             __end_of_sprintf 073F                        ??_PWM_Output_D4_Enable 0020  
                             _TMR2_StartTimer 1F68                               _TMR1_WriteTimer 1033  
                             __initialization 0054                                  __end_of_main 036C  
                         __size_of_LCDsend2x4 00D4                                ??_EUSART_Write 0020  
                             ?_update_menuLCD 0070                       __end_of_TMR2_Initialize 1024  
                 ?_INTERRUPT_InterruptManager 0070                ??_EUSART_SetRxInterruptHandler 0022  
                                      ??_main 0064                               update_menuLCD@l 0055  
                                ?_sendMessage 0023                     __size_of_sendERRORMessage 001E  
                          __size_of_Clock_ISR 0092              differenceBetweenTimePeriod@start 0020  
                                   ??_LCDchar 0028                                     ??_LCDinit 0028  
                                   ??_LCDsend 0022                                     ??_INT_ISR 0070  
                                      _ADACCH 0091                                        _ADACCL 0090  
                                      ?_getch 0070                                        _ADCON0 0093  
                                      _ADCON1 0094                                        _ADCON2 0095  
                                      _ADCON3 0096                                        _ADERRH 0117  
                                      _ADERRL 0116                                        _ADLTHH 010F  
                                      _ADLTHL 010E                                        _ADRESH 008D  
                                      _ADRESL 008C                                        _ADSTAT 0097  
                                      _ADUTHH 0111                              ___awdiv@dividend 0072  
                                      _ADUTHL 0110                              __end_of_WriteI2C 1665  
                                      _ANSELA 0F38                                        ?_putch 0070  
                                      _ANSELB 0F43                                        _ANSELC 0F4E  
                                      _ANSELD 0F59                                        _ANSELE 0F64  
                  __end_of_EUSART_is_rx_ready 1F5C                                        _T1GATE 0210  
                                      _T1GCON 020F                                        ?_tsttc 0070  
                                      _RC1REG 0119                                        _RC1STA 011D  
                                      _RA6PPS 0F16                                        _RC3PPS 0F23  
                     TMR1_WriteTimer@timerVal 0070                                        _RC4PPS 0F24  
                                      _ODCONA 0F3A                                        _ODCONB 0F45  
                                      _ODCONC 0F50                                        _RC6PPS 0F26  
                                      _ODCOND 0F5B                                        _ODCONE 0F66  
                                      i1l1278 0995                                        i1l1447 1F99  
                                      i1l5100 1703                                        i1l5110 1719  
                                      i1l5102 1704                                        i1l5104 1709  
                                      i1l1930 171D                                        i1l5106 170F  
                                      i1l5108 1714                                        i1l5070 16BF  
                                      i1l5080 16CF                                        i1l5072 16C0  
                                      i1l5320 090F                                        i1l5090 16E3  
                                      i1l5082 16D4                                        i1l5074 16C4  
                                      i1l5330 0922                                        i1l5322 0913  
                                      i1l5250 1038                                        i1l5500 11C6  
                                      i1l5068 1F91                                        i1l5092 16E8  
                                      i1l5084 16D8                                        i1l5076 16C9  
                                      i1l5340 0938                                        i1l5332 0923  
                                      i1l5324 0914                                        i1l5260 1041  
                                      i1l5252 1039                                        i1l5510 11DD  
                                      i1l5502 11C8                                        i1l5094 16EC  
                                      i1l5086 16DA                                        i1l5078 16CB  
                                      i1l5342 0940                                        i1l5350 0959  
                                      i1l5334 0929                                        i1l5326 0917  
                                      i1l5318 0904                                        i1l5254 103B  
                                      i1l5504 11D2                                        i1l5280 1FED  
                                      i1l5096 16F0                                        i1l5088 16E0  
                                      i1l5360 0988                                        i1l5352 0973  
                                      i1l5344 0948                                        i1l5336 092A  
                                      i1l5328 091E                                        i1l5256 103D  
                                      i1l5248 1033                                        i1l5506 11D6  
                                      i1l5098 16FF                                        i1l5362 0992  
                                      i1l5354 0977                                        i1l5346 094E  
                                      i1l5338 0930                                        i1l5258 103F  
                                      i1l5508 11DC                                        i1l5364 0993  
                                      i1l5356 0979                                        i1l5348 0953  
                                      i1l5278 1FE6                                        i1l5358 0985  
                                      i1l5470 105A                                        i1l5472 105C  
                                      i1l5490 1212                                        i1l5466 1F70  
                                      i1l5474 1064                                        i1l5492 1217  
                                      i1l5468 1F72                                        i1l5476 106B  
                                      i1l5494 121D                                        i1l5486 1203  
                                      i1l5496 121E                                        i1l5488 120A  
                                      i1l5498 11C1                                        _S1_ISR 1F91  
                                      i1l5960 000F                                        i1l5970 002E  
                                      i1l5962 0017                                        i1l5980 004E  
                                      i1l5972 0039                                        i1l5964 001B  
                                      i1l5956 0006                                        i1l5974 003D  
                                      i1l5966 001F                                        i1l5958 000B  
                                      i1l5976 0045                                        i1l5968 002A  
                                      _LCDcmd 1000                                        u500_20 0929  
                                      u500_21 0928                                        u501_20 0930  
                                      u501_21 092F                                        u502_20 0938  
                                      u502_21 0937                                        u503_20 0940  
                                      u503_21 093F                                        u504_20 0948  
                                      u504_21 0947                                        _INTPPS 0E90  
                                      u505_20 094E                                        u521_20 106B  
                                      u505_21 094D                                        u521_21 106A  
                                      u522_20 120A                                        u506_20 0973  
                                      u522_21 1209                                        u506_21 0972  
                               main@corrupted 00D9                                        u506_25 096F  
                                      u523_20 121D                                        u507_20 0983  
                                      u523_21 121C                                        u507_21 0980  
                                      u524_20 11C6                                        u620_20 000B  
                                      u524_21 11C5                                        u620_21 000A  
                                      u508_24 0985                                        _LCDstr 10EF  
                                      u525_20 11DC                                        u509_20 0992  
                                      u621_20 000F                                        u525_21 11DB  
                                      u509_21 0991                                        u621_21 000E  
                                      u630_20 0049                                        u622_20 0017  
                                      u630_21 0048                                        u622_21 0016  
                                      u631_20 004E                                        u623_20 001B  
                                      u631_21 004D                                        u623_21 001A  
                                      u480_20 16E0                                        u624_20 001F  
                                      u480_21 16DF                                        u624_21 001E  
                                      u625_20 002A                                        u625_21 0029  
                                      u481_25 16E4                                        u482_20 16F0  
                                      u626_20 002E                                        u482_21 16EF  
                                      u626_21 002D                                        u627_20 0039  
                                      u627_21 0038                                        u483_25 16F1  
                                      u484_20 16FF                                        u628_20 003D  
                                      u484_21 16FE                                        u628_21 003C  
                                      u484_25 16FB                                        _OSCFRQ 0893  
                                      u629_20 0045                                        u629_21 0044  
                                      u485_25 1705                                        u486_20 170F  
                                      u478_20 16C4                                        u486_21 170E  
                                      u478_21 16C3                                        u487_20 1714  
                                      u479_20 16CF                                        u487_21 1713  
                                      u479_21 16CE                                        u488_20 1038  
                                      u488_21 1037                                        u489_20 1FED  
                                      u489_21 1FEC                                        u498_20 090F  
                                      u498_21 090E                                        u499_20 091E  
                                      u499_21 091D                                        _PWM6EN 1C77  
                                      _TX1REG 011A                                        _TX1STA 011E  
                                   ??_ReadI2C 0020                              _writeEEPROM_flag 00B4  
                                      _PWM_on 00BA                                   LCDsend2x4@c 0025  
                            __end_of_editTemp 1465          __end_of_TMR1_DefaultInterruptHandler 0004  
       __size_of_TMR1_DefaultInterruptHandler 0001                  _TMR1_DefaultInterruptHandler 0003  
                                _CCPTMRS1bits 021F                              __end_of_commands 1827  
                                      ___wmul 11A1                                     ??___awdiv 0074  
                           __end_of_TMR2_Stop 1F68                                        _cmd_aa 1465  
                                      _cmd_ir 12DD                                        _cmd_ra 14DA  
                                      _cmd_rc 126D                                        _cmd_sc 178B  
                                      _cmd_rp 1292                                        _flagNr 00B3  
                                   ??___lwdiv 0024                                     ??___lwmod 002C  
                         __size_of_TMR2_Start 0003                           _EUSART_Transmit_ISR 1203  
                                      _memset 1182                       __end_of_PWM6_Initialize 2000  
                            ___awdiv@quotient 0077                                     ??_cmd_dac 0032  
                                   ??_editLum 0063                                     ??_cmd_dtl 0032  
                                   ??_cmd_mta 0032                                     ??_cmd_mmp 0032  
                                      _iwrite 006B                                     ??_cmd_trc 0032  
                                   ??_cmd_rtl 0032                                     ??_cmd_tri 0032  
                __size_of_monitoring_TEMP_LUM 0186                                 ?_INT_CallBack 0070  
                     __end_of_DATAEE_ReadByte 1033                               _ADCC_Initialize 1071  
                              _PMD_Initialize 1F89                                  __pdataCOMMON 007D  
                                   ??_isdigit 0020                             sendOKMessage@bufw 002B  
                          update_menuLCD@diff 0058             __size_of_ADCC_GetSingleConversion 0016  
            __size_of_INT_SetInterruptHandler 0009                     ?_ADCC_GetSingleConversion 0020  
                     __end_of_TMR2_StartTimer 1F6C       INT_SetInterruptHandler@InterruptHandler 0020  
    TMR1_SetInterruptHandler@InterruptHandler 0020                                     ??_sprintf 0036  
                     __end_of_TMR1_WriteTimer 1044                             ??_wirteEEPROMinit 002A  
                     ??_PWM_Output_D4_Disable 0020                          ?_EUSART_Transmit_ISR 0070  
                            ?_TMR1_Initialize 0070                          __size_of_EUSART_Read 0026  
                           _SYSTEM_Initialize 110A                       __end_of__initialization 008E  
                              cmd_trc@address 0042                            ?_SYSTEM_Initialize 0070  
                           __end_of_Clock_ISR 0996                                cmd_trc@buffEOM 0044  
        __end_of_EUSART_SetTxInterruptHandler 1FAC         __size_of_EUSART_SetTxInterruptHandler 0009  
                _EUSART_SetTxInterruptHandler 1FA3                                __pcstackCOMMON 0070  
                                __pidataBANK1 1FD0                           ??_SYSTEM_Initialize 0023  
                                   ?_TMR1_ISR 0070                 ?_TMR1_DefaultInterruptHandler 0070  
                               __end_of_getch 07FF                                     ?_S1button 0070  
                            _DATAEE_WriteByte 1249                                 __end_of_putch 1F89  
                          __size_of_editClock 006D               differenceBetweenTimePeriod@diff 0026  
                               __end_of_tsttc 0E7A                              ?_TMR2_Initialize 0070  
                              ??_INT_CallBack 0070               differenceBetweenTimePeriod@stop 0023  
                      __end_of_PMD_Initialize 1F91                                cmd_tri@buffEOM 0040  
                 __size_of_EXT_INT_Initialize 000E                                  ??_LCDsend2x4 0023  
                                     ??_getch 0022                     __end_of_SYSTEM_Initialize 1126  
                                  _checkFlags 0996                         ??_EUSART_Transmit_ISR 0070  
                                sprintf@width 003F                              update_menuLCD@tt 0051  
                                     ??_putch 0022                                       ??_tsttc 0022  
                                  __pbssBANK0 0065                                    __pbssBANK1 00A0  
                                  __pbssBANK2 0120                                    __pbssBANK3 01A0  
                                  __pbssBANK4 0220                                       ?_S1_ISR 0070  
                                     ?_LCDcmd 0070                          __end_of_EUSART_Write 1391  
                                     ?_LCDstr 0029                                  _flagS1pushed 00B7  
                                     LCDcmd@c 0028                   __size_of_EUSART_Receive_ISR 0021  
                                     LCDstr@c 002E                                       LCDstr@p 0029  
                                  __pmaintext 0092                 ?_EUSART_SetTxInterruptHandler 0020  
            _EUSART_TxDefaultInterruptHandler 013B                                       ?___wmul 0020  
                                  ??_TMR1_ISR 007B                                       ?_cmd_aa 002F  
                     __end_of_ADCC_Initialize 1088                    __end_of_PWM6_LoadDutyValue 10B9  
                                     ?_cmd_ir 002F                                       ?_cmd_ra 002F  
                                     ?_cmd_rc 002F                                       ?_cmd_sc 002F  
                                     ?_cmd_rp 002F                                    ??_S1button 0020  
                                  __pintentry 0004                                       _ADFLTRH 0115  
                                     _ADFLTRL 0114                                       ?_memset 0020  
                          __end_of_LCDsend2x4 0B0B                                       _ADPREVH 008F  
                                     _ADPREVL 008E                                     ?_WriteI2C 0070  
                            ?_PWM6_Initialize 0070                                       _ADSTPTH 0113  
                                     _ADSTPTL 0112                               ?_PMD_Initialize 0070  
                            _sendERRORMessage 1126                              ?_DATAEE_ReadByte 0026  
                           ?_i2c1_driver_open 0070                                 _eusartRxCount 00BC  
                                     _LCDchar 1FC7                                       _LCDinit 0814  
                                     _SP1BRGH 011C                                       _SP1BRGL 011B  
                                     _LCDsend 155F                          __size_of_sendMessage 0023  
                          ??_i2c1_driver_open 0020                                       _INT_ISR 1F70  
                                     _OSCCON1 088D                                       _OSCCON3 088F  
                                   ?_editTemp 0070                        __size_of_sendOKMessage 001B  
                              checkFlags@buff 005C                                       _NVMADRH 081B  
                                     _NVMADRL 081A                                       _NVMDATH 081D  
                                     _OSCTUNE 0892                                       _NVMDATL 081C  
                                     _NVMCON2 081F                                       _PWM6DCH 038D  
                                     _PWM6DCL 038C                                       _PWM6CON 038E  
                                     _SSP1ADD 018D                                       _SLRCONA 0F3B  
                                     _SLRCONB 0F46                                       _SLRCONC 0F51  
                                     _SLRCOND 0F5C                                       _SLRCONE 0F67  
                                     _SSP1BUF 018C                                       _SSP1MSK 018E  
                                ??_TMR2_Start 0020                       __size_of_TMR2_StopTimer 0004  
                            ?_TMR2_StartTimer 0070                              ?_TMR1_WriteTimer 0070  
                                LCDsend2x4@hc 0026                                  LCDsend2x4@lc 0027  
                           __end_of_editClock 178B                               __size_of_S1_ISR 0009  
                             __size_of_LCDcmd 0008                          DATAEE_WriteByte@bAdd 0026  
                          _i2c1_driver_i2cISR 00AC                               __size_of_LCDstr 001B  
                                     _ReadI2C 1163                         cmd_tri@maxReadingsAux 0041  
                            ??_update_menuLCD 0043                                       ___awdiv 16BF  
                             __size_of___wmul 0020                                       ___lwdiv 149D  
                             __size_of_cmd_aa 0038                                       ___lwmod 13C6  
                             __size_of_cmd_ir 0029                               __size_of_cmd_ra 0042  
                             __size_of_cmd_rc 0025                               __size_of_cmd_sc 0075  
                             __size_of_cmd_rp 0025                            __end_of_TMR2_Start 1F62  
                                  ??_WriteI2C 0020                                       _cmd_dac 088A  
                             __size_of_memset 001F                                       _editLum 13FB  
                                     _cmd_dtl 15B2                                       _cmd_mta 10D4  
                                     _cmd_mmp 1088                                       _cmd_trc 0B0B  
                                     _cmd_rtl 11E2                                       _cmd_tri 0BF7  
                                     __ptext1 1333                                       __ptext2 1182  
                                     __ptext3 1FDA                                       __ptext4 07FB  
                                     __ptext5 12B7                                       __ptext6 1430  
                                     __ptext7 13FB                                       __ptext8 171E  
                                     __ptext9 0996                ??_TMR1_DefaultInterruptHandler 0070  
                                   _T1CONbits 020E                                 cmd_dac@buffer 0031  
                                     _dpowers 1836                         _OSCILLATOR_Initialize 1FB5  
                                   _T2CONbits 028E                                       _isdigit 0801  
                                  cmd_dac@num 002F             __size_of_TMR1_SetInterruptHandler 0009  
                                     cmd_sc@h 0034                                       cmd_sc@m 0036  
                                     cmd_sc@s 0038                      ??_PIN_MANAGER_Initialize 0020  
                   ?_TMR1_SetInterruptHandler 0020                                     _T2HLTbits 028F  
                     _INT_SetInterruptHandler 1FAC                                    ??_editTemp 0063  
                                  cmd_ir@buff 0033                                    cmd_ra@buff 0033  
                                  cmd_rc@buff 0033                    __size_of_SYSTEM_Initialize 001C  
                                 ?_checkFlags 0070                                       _sprintf 05A1  
                                     clrloop0 1F77                                    cmd_dtl@num 002F  
                        end_of_initialization 008E                                     _T2RSTbits 0291  
                                  cmd_rp@buff 0033                                    cmd_mta@num 002F  
                                  cmd_mmp@num 002F                                       init_ram 1F7C  
                                     memset@c 0020                                       memset@n 0022  
                                     memset@p 0025                           _monitoring_TEMP_LUM 0E7A  
                                     initloop 1F7D                          __end_of_INT_CallBack 1FF3  
                                  cmd_trc@num 002F                                    cmd_rtl@num 002F  
                                  cmd_tri@num 002F                             _EUSART_Initialize 1306  
               __size_of_PWM_Output_D4_Enable 0003                                 _sendOKMessage 10B9  
                          ?_EUSART_Initialize 0070                            _EUSART_is_rx_ready 1F59  
                ?_differenceBetweenTimePeriod 0020                                    main@F13047 0120  
                            ?_ADCC_Initialize 0070              __end_of_ADCC_GetSingleConversion 105A  
                         ??_EUSART_Initialize 0022                ??_EUSART_SetTxInterruptHandler 0022  
                        ?_monitoring_TEMP_LUM 0070                           ?_EUSART_is_rx_ready 0070  
                                   _PORTCbits 000E                                     _TMR2_Stop 1F65  
                             _wirteEEPROMinit 073F                                     _TRISCbits 0013  
                       __size_of_EUSART_Write 0030                                 ?_toggleAlarms 0070  
                                  main@i_2530 00DC                      __end_of_DATAEE_WriteByte 126D  
                               _alarmPWMStart 00E1                __size_of_PWM_Output_D4_Disable 0003  
                   __end_of_EUSART_Initialize 1333                          ??_EUSART_is_rx_ready 0020  
               __end_of_PWM_Output_D4_Disable 1F65                                __end_of_S1_ISR 1F9A  
                              __end_of_LCDcmd 1008                                __end_of_LCDstr 110A  
                             cmd_trc@buffData 0038                                 cmd_dtl@buffer 0031  
                              LCDsend2x4@mode 0022                               cmd_trc@buffInit 003D  
                               cmd_dtl@lumAux 0036                                ?_sendOKMessage 0070  
                      _sentMessageBufHalfFull 00B0                                     _Clock_ISR 0904  
                            _monitor_TEMP_LUM 00B6                           __size_of_checkFlags 00A1  
                              __end_of___wmul 11C1                                __end_of_cmd_aa 149D  
                              __end_of_cmd_ir 1306                                __end_of_cmd_ra 151C  
                              __end_of_cmd_rc 1292                                __end_of_cmd_sc 1800  
                              __end_of_cmd_rp 12B7                                 __pidataCOMMON 07FF  
                       ??_monitoring_TEMP_LUM 002A                                  _EUSART_Write 1361  
                           __size_of_TMR1_ISR 0017                             __size_of_S1button 005A  
                                  ?_TMR2_Stop 0070                        ?_OSCILLATOR_Initialize 0070  
                              __end_of_memset 11A1                     ??_INT_SetInterruptHandler 0022  
                             main@checkSumAux 00D7                           start_initialization 0054  
                              ??_toggleAlarms 0063               __size_of_PIN_MANAGER_Initialize 0043  
                              _TMR2_StopTimer 1F6C                                 ??_EUSART_Read 0020  
EUSART_SetRxInterruptHandler@interruptHandler 0020  EUSART_SetTxInterruptHandler@interruptHandler 0020  
                             cmd_tri@buffData 0037                              WriteI2C@data_out 0021  
                             cmd_tri@buffInit 003C                                   putch@txData 0022  
                               cmd_mta@buffer 0031                                 cmd_mmp@buffer 0031  
                                    ??_S1_ISR 0070                                      ??_LCDcmd 0028  
                                    ??_LCDstr 002B                      __end_of_sendERRORMessage 1144  
                           _counterMonitorAux 00B5                           DATAEE_ReadByte@bAdd 0026  
                ?_INT_DefaultInterruptHandler 0070                      __size_of_TMR1_Initialize 001F  
                            ??_PMD_Initialize 0020                                    ?_Clock_ISR 0070  
                     __end_of_wirteEEPROMinit 07FB                                      ??___wmul 0024  
                                    ??_cmd_aa 0032                                      ??_cmd_ir 0032  
                                    ??_cmd_ra 0032                                      ??_cmd_rc 0032  
                                    ??_cmd_sc 0032                                      ??_cmd_rp 0032  
                                 __pdataBANK1 00E1                                      ??_memset 0024  
                            sendOKMessage@cmd 002A                    __end_of_EXT_INT_Initialize 1016  
                           _editingClockAlarm 007B                             update_menuLCD@str 0049  
                           __size_of_WriteI2C 005A                      _ADCC_GetSingleConversion 1044  
                 __end_of_EUSART_Transmit_ISR 1226                        __end_of_TMR2_StopTimer 1F70  
                                    ?_LCDchar 0070                                   __pbssCOMMON 007B  
                                    ?_LCDinit 0070                                      ?_LCDsend 0070  
                                   ___latbits 0002                                      ?_INT_ISR 0070  
                               __pcstackBANK0 0020                                 cmd_trc@buffer 0031  
                               __pcstackBANK1 00C1                            _PWM6_LoadDutyValue 10A0  
                    __size_of_TMR2_Initialize 000E                                  _isdigit$2988 0020  
                       __size_of_INT_CallBack 000D          __size_of_differenceBetweenTimePeriod 0035  
                                    LCDchar@c 0028                             __size_of_editTemp 0035  
                               cmd_rtl@buffer 0031                                 cmd_tri@buffer 0031  
                  __end_of_EUSART_Receive_ISR 11E2                                      LCDsend@c 0023  
                         ?_PWM6_LoadDutyValue 0020                    __size_of_EUSART_Initialize 002D  
                                 sprintf@flag 003E                     __size_of_i2c1_driver_open 000C  
                                 sprintf@prec 003B              _EUSART_RxDefaultInterruptHandler 0139  
                             ??_sendOKMessage 0029                           __end_of_EUSART_Read 12DD  
                                    ?_ReadI2C 0070                                     __pnvBANK1 00EB  
                                   __pnvBANK2 0137                                   _bufHalfFull 00B1  
                                   _editClock 171E                                     _main$3491 00D5  
                            ___lwdiv@dividend 0022                        _PIN_MANAGER_Initialize 151C  
               ??_INT_DefaultInterruptHandler 0070                          EUSART_Read@readValue 0021  
            __end_of_TMR1_SetInterruptHandler 1FC7               ADCC_GetSingleConversion@channel 0023  
                                    ?___awdiv 0070                                     _dimingLed 00AA  
                                    ?___lwdiv 0020                                      ?___lwmod 0028  
                 _i2c1_driver_busCollisionISR 00AE                                  _eusartRxHead 00BE  
                                _eusartTxHead 00C0                                  _eusartRxTail 00BD  
                                _eusartTxTail 00BF                          ??_PWM6_LoadDutyValue 0022  
                                    ?_cmd_dac 002F                                      ?_editLum 0070  
                                    ?_cmd_dtl 002F                                      ?_cmd_mta 002F  
                                    ?_cmd_mmp 002F                                  cmd_aa@buffer 0031  
                ??_INTERRUPT_InterruptManager 007B                                      ?_cmd_trc 002F  
                                    ?_cmd_rtl 002F                                      ?_cmd_tri 002F  
                               ??_sendMessage 0026                                   ??_TMR2_Stop 0020  
                                sendMessage@n 0027                       _eusartTxBufferRemaining 00EF  
                                _INT_CallBack 1FE6                                      _BAUD1CON 011F  
                                    ?_isdigit 0070                               ?_TMR2_StopTimer 0070  
                    __size_of_PWM6_Initialize 000D                              ___lwdiv@quotient 0025  
                                ??_checkFlags 005B                                __size_of_getch 0004  
                                    ?_sprintf 002E                                      _T2CLKCON 0290  
                    __size_of_DATAEE_ReadByte 000F                          cmd_tri@startingIndex 0046  
                              __size_of_putch 0007                                     cmd_aa@num 002F  
                              __size_of_tsttc 0150                                _eusartRxBuffer 0220  
                              _eusartTxBuffer 01A0                                ___wmul@product 0024  
                                   cmd_ir@num 002F                                     cmd_ra@num 002F  
                                    _LATAbits 0016                                     cmd_rc@num 002F  
                                   cmd_sc@num 002F                                     clear_ram0 1F76  
                                   cmd_rp@num 002F                                      _PIE0bits 0716  
                                    _PIE3bits 0719                                      _PIE4bits 071A  
                    __size_of_TMR2_StartTimer 0004                                    ?_editClock 0070  
                                   _tempAlarm 00A7                                      _S1_Value 00BB  
                    __size_of_TMR1_WriteTimer 0011           __size_of_INTERRUPT_InterruptManager 004E  
                                    _PIR0bits 070C                                      _PIR3bits 070F  
                                    _PIR4bits 0710                                   ??_Clock_ISR 0079  
                        __end_of_toggleAlarms 1361                              ?_wirteEEPROMinit 0070  
                                    _SSP1CON1 0190                                      _SSP1CON2 0191  
                                    _TMR1_ISR 105A                                      _S1button 1665  
                                    _SSP1STAT 018F                                     _updateLCD 00E8  
                          __end_of_checkFlags 0A37                             ??_TMR1_Initialize 0022  
                                  _ADCON0bits 0093                                    _ADCON1bits 0094  
                              sendMessage@num 0023                                    _ADCON2bits 0095  
                                  _ADCON3bits 0096                                  cmd_ir@buffer 0031  
                           ___wmul@multiplier 0020                                  cmd_ra@buffer 0031  
                __end_of_PWM_Output_D4_Enable 1F5F                                  cmd_rc@buffer 0031  
        __size_of_INT_DefaultInterruptHandler 0001                                  cmd_sc@buffer 0031  
                            __size_of_LCDchar 0009                         DATAEE_WriteByte@bData 0028  
                            __size_of_LCDinit 0076                              __size_of_LCDsend 0053  
                            __size_of_INT_ISR 0006                           __end_of_sendMessage 1249  
                                 _EUSART_Read 12B7                                   _maxReadings 00B2  
                           ?_DATAEE_WriteByte 0026                             ??_TMR2_Initialize 0020  
                                cmd_rp@buffer 0031                            ??_DATAEE_WriteByte 0029  
                            __size_of_ReadI2C 001F                                    _ADSTATbits 0097  
                     ??_OSCILLATOR_Initialize 0020                              __size_of___awdiv 005F  
                            __size_of___lwdiv 003D                                  cmd_trc@nRegs 0047  
                            __size_of___lwmod 0035                                      _WriteI2C 160B  
                    _TMR1_SetInterruptHandler 1FBE                              __size_of_cmd_dac 007A  
                            __size_of_editLum 0035                              __size_of_cmd_dtl 0059  
                     __size_of_update_menuLCD 0235                              __size_of_cmd_mta 001B  
                            __size_of_cmd_mmp 0018                              __size_of_cmd_trc 00EC  
                            __size_of_cmd_rtl 0021                              __size_of_cmd_tri 0133  
                                cmd_tri@index 0045                         _TMR1_InterruptHandler 00EB  
                                  sprintf@val 003C                                      _clkAlarm 00A0  
                    __size_of_ADCC_Initialize 0017                              __size_of_isdigit 0013  
                                    _editTemp 1430                               ___lwdiv@divisor 0020  
                             ___lwdiv@counter 0027                                      __ptext10 073F  
                                    __ptext11 036C                                      __ptext20 10A0  
                                    __ptext12 05A1                                      __ptext21 10EF  
                                    __ptext13 0801                                    _T1GCONbits 020F  
                                    __ptext30 1F5F                                      __ptext22 1FC7  
                                    __ptext14 13C6                                      __ptext31 1665  
                                    __ptext23 1000                                      __ptext15 149D  
                                    __ptext40 1088                                      __ptext32 1F5C  
                                    __ptext24 0E7A                                      __ptext16 1391  
                                    __ptext41 1292                                      __ptext33 0B0B  
                                    __ptext25 0D2A                                      __ptext17 1F6C  
                                    __ptext50 1226                                      __ptext42 11E2  
                                    __ptext34 12DD                                      __ptext26 1163  
                                    __ptext18 1F65                                      __ptext51 1F82  
                                    __ptext43 178B                                      __ptext35 1465  
                                    __ptext27 1249                                      __ptext19 1F62  
                                    __ptext60 1FB5                                      __ptext52 1361  
                                    __ptext44 126D                                      __ptext36 15B2  
                                    __ptext28 1044                                      __ptext61 1008  
                                    __ptext53 110A                                      __ptext45 0BF7  
                                    __ptext37 088A                                      __ptext29 1F68  
                                    __ptext70 160B                                      __ptext62 1FAC  
                                    __ptext54 1016                                      __ptext46 11A1  
                                    __ptext38 14DA                                      __ptext71 1F59  
                                    __ptext63 1306                                      __ptext55 1144  
                                    __ptext47 1024                                      __ptext39 10D4  
                                    __ptext80 0002                                      __ptext64 1FA3  
                                    __ptext56 1FBE                                      __ptext48 10B9  
                                    __ptext81 1F91                                      __ptext73 105A  
                                    __ptext65 1F9A                                      __ptext57 1FF3  
                                    __ptext49 1126                                      __ptext82 1203  
                                    __ptext74 1033                                      __ptext66 1071  
                                    __ptext58 1F89                                      __ptext83 11C1  
                                    __ptext75 0904                                      __ptext67 0814  
                                    __ptext59 151C                                      __ptext76 0003  
                                    __ptext68 0A37                                      __ptext77 16BF  
                                    __ptext69 155F                                      __ptext78 1F70  
                                    __ptext79 1FE6                                  _SSP1CON1bits 0190  
                                _SSP1CON2bits 0191                                      _commands 1800  
                            __size_of_sprintf 019E                   DATAEE_WriteByte@GIEBitValue 0029  
                            _i2c1_driver_open 1FDA                                      _modeFlag 0068  
                           ??_PWM6_Initialize 0020                   __size_of_EUSART_is_rx_ready 0003  
                               __size_of_main 02DA                                      cmd_dac@h 0034  
                                    cmd_dac@m 0036                                      _lumAlarm 00A4  
                                    cmd_dac@s 0038                             ?_sendERRORMessage 0070  
                           ??_DATAEE_ReadByte 0028                                      _lumLevel 006D  
                       _PWM_Output_D4_Disable 1F62                                   ??_editClock 0063  
                                    cmd_trc@i 0040                                      cmd_trc@j 0049  
                                    cmd_trc@n 0045                                      cmd_tri@i 0043  
                                    cmd_tri@j 0048                                      cmd_tri@n 0049  
                            _editingTempAlarm 00B9                                    _RC1STAbits 011D  
                          ??_sendERRORMessage 0029                   __end_of_monitoring_TEMP_LUM 1000  
                                    _prevTemp 00E6                                    tsttc@value 0023  
                  ??_ADCC_GetSingleConversion 0023                                      int$flags 007E  
                           ??_TMR2_StartTimer 0020            __end_of_INTERRUPT_InterruptManager 0052  
                  _INTERRUPT_InterruptManager 0004                                      main@buff 00C1  
                                _SSP1STATbits 018F                             ??_TMR1_WriteTimer 0072  
                                 _sendMessage 1226                          update_menuLCD@F12899 0134  
                                  _INTCONbits 000B                                   _NVMCON1bits 081E  
                                _prevLumLevel 00E4                          _INT_InterruptHandler 0137  
                                    isdigit@c 0021                                      memset@p1 0026  
                                  _LCDsend2x4 0A37                            _EXT_INT_Initialize 1008  
                                 cmd_rtl@buff 0033                                      intlevel1 0000  
                                   sprintf@ap 003A                                     sprintf@sp 0042  
                            ___lwmod@dividend 002A                       ?_PIN_MANAGER_Initialize 0070  
                        sendERRORMessage@bufw 002B                         __size_of_toggleAlarms 002E  
                         ?_EXT_INT_Initialize 0070                               _editingLumAlarm 00B8  
        __end_of_EUSART_SetRxInterruptHandler 1FA3         __size_of_EUSART_SetRxInterruptHandler 0009  
                _EUSART_SetRxInterruptHandler 1F9A                          _PWM_Output_D4_Enable 1F5C  
         __end_of_differenceBetweenTimePeriod 13C6                   _differenceBetweenTimePeriod 1391  
                          _EUSART_Receive_ISR 11C1                      ?_INT_SetInterruptHandler 0020  
                            ??_TMR2_StopTimer 0020                                 __pstringtext1 1800  
                               __pstringtext2 1836                                 __pstringtext3 1827  
                               __pstringtext4 1840                                 __pstringtext5 1847  
                               __pstringtext6 184C                                 __pstringtext7 0000  
                        ??_EXT_INT_Initialize 0022                 ??_differenceBetweenTimePeriod 0027  
                                    sprintf@c 0041                                      sprintf@f 002E  
                         ?_EUSART_Receive_ISR 0070                                    _SSP1DATPPS 0EC6  
                                  _SSP1CLKPPS 0EC5                               ___lwmod@divisor 0028  
                         sendERRORMessage@cmd 002A                               ___lwmod@counter 002D  
                 PWM6_LoadDutyValue@dutyValue 0020                                    _TX1STAbits 011E  
                                _toggleAlarms 1333                                    _TMR2_Start 1F5F  
                          EUSART_Write@txData 0021                  __size_of_EUSART_Transmit_ISR 0023  
              __end_of_PIN_MANAGER_Initialize 155F                             ??_ADCC_Initialize 0020  
                      ?_PWM_Output_D4_Disable 0070                          ??_EUSART_Receive_ISR 0070  
                       ?_PWM_Output_D4_Enable 0070                               _TMR1_Initialize 1144  
                       __end_of_sendOKMessage 10D4  
