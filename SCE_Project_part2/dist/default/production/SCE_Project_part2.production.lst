

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Dec 15 15:26:20 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F18875
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    24                           	psect	inittext,global,class=CODE,delta=2
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    43                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	intentry,global,class=CODE,delta=2
   102                           	psect	text73,local,class=CODE,merge=1,delta=2
   103                           	psect	text74,local,class=CODE,merge=1,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	text79,local,class=CODE,merge=1,delta=2
   109                           	psect	text80,local,class=CODE,merge=1,delta=2
   110                           	psect	text81,local,class=CODE,merge=1,delta=2
   111                           	psect	text82,local,class=CODE,merge=1,delta=2
   112                           	psect	text83,local,class=CODE,merge=1,delta=2
   113                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   114                           	dabs	1,0x7E,2
   115  0000                     
   116                           ; Version 2.30
   117                           ; Generated 15/09/2020 GMT
   118                           ; 
   119                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution. Publication is not required when
   133                           ;        this file is used in an embedded application.
   134                           ; 
   135                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   136                           ;        software without specific prior written permission.
   137                           ; 
   138                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   139                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   140                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   141                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   142                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   143                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   144                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   145                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   146                           ; 
   147                           ; 
   148                           ; Code-generator required, PIC16F18875 Definitions
   149                           ; 
   150                           ; SFR Addresses
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0008                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001C                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  008C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0110                     	;# 
   211  0110                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0112                     	;# 
   215  0113                     	;# 
   216  0114                     	;# 
   217  0114                     	;# 
   218  0115                     	;# 
   219  0116                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  0119                     	;# 
   223  0119                     	;# 
   224  0119                     	;# 
   225  011A                     	;# 
   226  011A                     	;# 
   227  011A                     	;# 
   228  011B                     	;# 
   229  011B                     	;# 
   230  011B                     	;# 
   231  011B                     	;# 
   232  011B                     	;# 
   233  011C                     	;# 
   234  011C                     	;# 
   235  011C                     	;# 
   236  011D                     	;# 
   237  011D                     	;# 
   238  011D                     	;# 
   239  011E                     	;# 
   240  011E                     	;# 
   241  011E                     	;# 
   242  011F                     	;# 
   243  011F                     	;# 
   244  011F                     	;# 
   245  011F                     	;# 
   246  011F                     	;# 
   247  018C                     	;# 
   248  018D                     	;# 
   249  018E                     	;# 
   250  018F                     	;# 
   251  0190                     	;# 
   252  0191                     	;# 
   253  0192                     	;# 
   254  0196                     	;# 
   255  0197                     	;# 
   256  0198                     	;# 
   257  0199                     	;# 
   258  019A                     	;# 
   259  019B                     	;# 
   260  019C                     	;# 
   261  020C                     	;# 
   262  020C                     	;# 
   263  020D                     	;# 
   264  020E                     	;# 
   265  020F                     	;# 
   266  020F                     	;# 
   267  0210                     	;# 
   268  0210                     	;# 
   269  0211                     	;# 
   270  0211                     	;# 
   271  0212                     	;# 
   272  0212                     	;# 
   273  0213                     	;# 
   274  0214                     	;# 
   275  0215                     	;# 
   276  0215                     	;# 
   277  0216                     	;# 
   278  0216                     	;# 
   279  0217                     	;# 
   280  0217                     	;# 
   281  0218                     	;# 
   282  0218                     	;# 
   283  0219                     	;# 
   284  021A                     	;# 
   285  021B                     	;# 
   286  021B                     	;# 
   287  021C                     	;# 
   288  021C                     	;# 
   289  021D                     	;# 
   290  021D                     	;# 
   291  021E                     	;# 
   292  021F                     	;# 
   293  028C                     	;# 
   294  028C                     	;# 
   295  028D                     	;# 
   296  028D                     	;# 
   297  028E                     	;# 
   298  028F                     	;# 
   299  0290                     	;# 
   300  0290                     	;# 
   301  0291                     	;# 
   302  0292                     	;# 
   303  0292                     	;# 
   304  0293                     	;# 
   305  0293                     	;# 
   306  0294                     	;# 
   307  0295                     	;# 
   308  0296                     	;# 
   309  0296                     	;# 
   310  0297                     	;# 
   311  0298                     	;# 
   312  0298                     	;# 
   313  0299                     	;# 
   314  0299                     	;# 
   315  029A                     	;# 
   316  029B                     	;# 
   317  029C                     	;# 
   318  029C                     	;# 
   319  029D                     	;# 
   320  030C                     	;# 
   321  030C                     	;# 
   322  030D                     	;# 
   323  030E                     	;# 
   324  030F                     	;# 
   325  0310                     	;# 
   326  0310                     	;# 
   327  0311                     	;# 
   328  0312                     	;# 
   329  0313                     	;# 
   330  0314                     	;# 
   331  0314                     	;# 
   332  0315                     	;# 
   333  0316                     	;# 
   334  0317                     	;# 
   335  0318                     	;# 
   336  0318                     	;# 
   337  0319                     	;# 
   338  031A                     	;# 
   339  031B                     	;# 
   340  031C                     	;# 
   341  031C                     	;# 
   342  031D                     	;# 
   343  031E                     	;# 
   344  031F                     	;# 
   345  038C                     	;# 
   346  038C                     	;# 
   347  038D                     	;# 
   348  038E                     	;# 
   349  0390                     	;# 
   350  0390                     	;# 
   351  0391                     	;# 
   352  0392                     	;# 
   353  040C                     	;# 
   354  040D                     	;# 
   355  040E                     	;# 
   356  040F                     	;# 
   357  0410                     	;# 
   358  0411                     	;# 
   359  0416                     	;# 
   360  0416                     	;# 
   361  0417                     	;# 
   362  0418                     	;# 
   363  0418                     	;# 
   364  0419                     	;# 
   365  041A                     	;# 
   366  041A                     	;# 
   367  041B                     	;# 
   368  041C                     	;# 
   369  041C                     	;# 
   370  041D                     	;# 
   371  041E                     	;# 
   372  041F                     	;# 
   373  048C                     	;# 
   374  048C                     	;# 
   375  048D                     	;# 
   376  048E                     	;# 
   377  048F                     	;# 
   378  048F                     	;# 
   379  0490                     	;# 
   380  0491                     	;# 
   381  0492                     	;# 
   382  0492                     	;# 
   383  0493                     	;# 
   384  0494                     	;# 
   385  0495                     	;# 
   386  0495                     	;# 
   387  0496                     	;# 
   388  0497                     	;# 
   389  0498                     	;# 
   390  0499                     	;# 
   391  049A                     	;# 
   392  049B                     	;# 
   393  049C                     	;# 
   394  049D                     	;# 
   395  050C                     	;# 
   396  050C                     	;# 
   397  050D                     	;# 
   398  050E                     	;# 
   399  050F                     	;# 
   400  050F                     	;# 
   401  0510                     	;# 
   402  0511                     	;# 
   403  0512                     	;# 
   404  0512                     	;# 
   405  0513                     	;# 
   406  0514                     	;# 
   407  0515                     	;# 
   408  0515                     	;# 
   409  0516                     	;# 
   410  0517                     	;# 
   411  0518                     	;# 
   412  0519                     	;# 
   413  051A                     	;# 
   414  051B                     	;# 
   415  051C                     	;# 
   416  051D                     	;# 
   417  058C                     	;# 
   418  058C                     	;# 
   419  058D                     	;# 
   420  058E                     	;# 
   421  058F                     	;# 
   422  058F                     	;# 
   423  0590                     	;# 
   424  0591                     	;# 
   425  0592                     	;# 
   426  0593                     	;# 
   427  060C                     	;# 
   428  060D                     	;# 
   429  060E                     	;# 
   430  060F                     	;# 
   431  0610                     	;# 
   432  0611                     	;# 
   433  0612                     	;# 
   434  0613                     	;# 
   435  0614                     	;# 
   436  0616                     	;# 
   437  0617                     	;# 
   438  0618                     	;# 
   439  0619                     	;# 
   440  061A                     	;# 
   441  061B                     	;# 
   442  061C                     	;# 
   443  061D                     	;# 
   444  061E                     	;# 
   445  068C                     	;# 
   446  068D                     	;# 
   447  068E                     	;# 
   448  068F                     	;# 
   449  0690                     	;# 
   450  0691                     	;# 
   451  0692                     	;# 
   452  0693                     	;# 
   453  0694                     	;# 
   454  070C                     	;# 
   455  070D                     	;# 
   456  070E                     	;# 
   457  070F                     	;# 
   458  0710                     	;# 
   459  0711                     	;# 
   460  0712                     	;# 
   461  0713                     	;# 
   462  0714                     	;# 
   463  0716                     	;# 
   464  0717                     	;# 
   465  0718                     	;# 
   466  0719                     	;# 
   467  071A                     	;# 
   468  071B                     	;# 
   469  071C                     	;# 
   470  071D                     	;# 
   471  071E                     	;# 
   472  0796                     	;# 
   473  0797                     	;# 
   474  0798                     	;# 
   475  0799                     	;# 
   476  079A                     	;# 
   477  079B                     	;# 
   478  080C                     	;# 
   479  080D                     	;# 
   480  080E                     	;# 
   481  080F                     	;# 
   482  0810                     	;# 
   483  0811                     	;# 
   484  0812                     	;# 
   485  0813                     	;# 
   486  0814                     	;# 
   487  081A                     	;# 
   488  081B                     	;# 
   489  081C                     	;# 
   490  081D                     	;# 
   491  081E                     	;# 
   492  081F                     	;# 
   493  088C                     	;# 
   494  088D                     	;# 
   495  088E                     	;# 
   496  088F                     	;# 
   497  0890                     	;# 
   498  0891                     	;# 
   499  0892                     	;# 
   500  0893                     	;# 
   501  0895                     	;# 
   502  0896                     	;# 
   503  0897                     	;# 
   504  0898                     	;# 
   505  0899                     	;# 
   506  089A                     	;# 
   507  089B                     	;# 
   508  090C                     	;# 
   509  090E                     	;# 
   510  090F                     	;# 
   511  091F                     	;# 
   512  091F                     	;# 
   513  098F                     	;# 
   514  098F                     	;# 
   515  0990                     	;# 
   516  0991                     	;# 
   517  0992                     	;# 
   518  0993                     	;# 
   519  0994                     	;# 
   520  0995                     	;# 
   521  0996                     	;# 
   522  0997                     	;# 
   523  0E0F                     	;# 
   524  0E10                     	;# 
   525  0E11                     	;# 
   526  0E12                     	;# 
   527  0E13                     	;# 
   528  0E14                     	;# 
   529  0E15                     	;# 
   530  0E16                     	;# 
   531  0E17                     	;# 
   532  0E18                     	;# 
   533  0E19                     	;# 
   534  0E1A                     	;# 
   535  0E1B                     	;# 
   536  0E1C                     	;# 
   537  0E1D                     	;# 
   538  0E1E                     	;# 
   539  0E1F                     	;# 
   540  0E20                     	;# 
   541  0E21                     	;# 
   542  0E22                     	;# 
   543  0E23                     	;# 
   544  0E24                     	;# 
   545  0E25                     	;# 
   546  0E26                     	;# 
   547  0E27                     	;# 
   548  0E28                     	;# 
   549  0E29                     	;# 
   550  0E2A                     	;# 
   551  0E2B                     	;# 
   552  0E2C                     	;# 
   553  0E2D                     	;# 
   554  0E2E                     	;# 
   555  0E2F                     	;# 
   556  0E30                     	;# 
   557  0E31                     	;# 
   558  0E32                     	;# 
   559  0E33                     	;# 
   560  0E34                     	;# 
   561  0E35                     	;# 
   562  0E36                     	;# 
   563  0E37                     	;# 
   564  0E8F                     	;# 
   565  0E90                     	;# 
   566  0E91                     	;# 
   567  0E92                     	;# 
   568  0E93                     	;# 
   569  0E94                     	;# 
   570  0E95                     	;# 
   571  0E96                     	;# 
   572  0E97                     	;# 
   573  0E9C                     	;# 
   574  0E9D                     	;# 
   575  0E9E                     	;# 
   576  0EA1                     	;# 
   577  0EA2                     	;# 
   578  0EA3                     	;# 
   579  0EA4                     	;# 
   580  0EA5                     	;# 
   581  0EA9                     	;# 
   582  0EAA                     	;# 
   583  0EAB                     	;# 
   584  0EAC                     	;# 
   585  0EB1                     	;# 
   586  0EB2                     	;# 
   587  0EB3                     	;# 
   588  0EB8                     	;# 
   589  0EB9                     	;# 
   590  0EBA                     	;# 
   591  0EBB                     	;# 
   592  0EBC                     	;# 
   593  0EBD                     	;# 
   594  0EBE                     	;# 
   595  0EC3                     	;# 
   596  0EC5                     	;# 
   597  0EC6                     	;# 
   598  0EC7                     	;# 
   599  0EC8                     	;# 
   600  0EC9                     	;# 
   601  0ECA                     	;# 
   602  0ECB                     	;# 
   603  0ECC                     	;# 
   604  0F10                     	;# 
   605  0F11                     	;# 
   606  0F12                     	;# 
   607  0F13                     	;# 
   608  0F14                     	;# 
   609  0F15                     	;# 
   610  0F16                     	;# 
   611  0F17                     	;# 
   612  0F18                     	;# 
   613  0F19                     	;# 
   614  0F1A                     	;# 
   615  0F1B                     	;# 
   616  0F1C                     	;# 
   617  0F1D                     	;# 
   618  0F1E                     	;# 
   619  0F1F                     	;# 
   620  0F20                     	;# 
   621  0F21                     	;# 
   622  0F22                     	;# 
   623  0F23                     	;# 
   624  0F24                     	;# 
   625  0F25                     	;# 
   626  0F26                     	;# 
   627  0F27                     	;# 
   628  0F28                     	;# 
   629  0F29                     	;# 
   630  0F2A                     	;# 
   631  0F2B                     	;# 
   632  0F2C                     	;# 
   633  0F2D                     	;# 
   634  0F2E                     	;# 
   635  0F2F                     	;# 
   636  0F30                     	;# 
   637  0F31                     	;# 
   638  0F32                     	;# 
   639  0F38                     	;# 
   640  0F39                     	;# 
   641  0F3A                     	;# 
   642  0F3B                     	;# 
   643  0F3C                     	;# 
   644  0F3D                     	;# 
   645  0F3E                     	;# 
   646  0F3F                     	;# 
   647  0F40                     	;# 
   648  0F41                     	;# 
   649  0F43                     	;# 
   650  0F44                     	;# 
   651  0F45                     	;# 
   652  0F46                     	;# 
   653  0F47                     	;# 
   654  0F48                     	;# 
   655  0F49                     	;# 
   656  0F4A                     	;# 
   657  0F4B                     	;# 
   658  0F4C                     	;# 
   659  0F4E                     	;# 
   660  0F4F                     	;# 
   661  0F50                     	;# 
   662  0F51                     	;# 
   663  0F52                     	;# 
   664  0F53                     	;# 
   665  0F54                     	;# 
   666  0F55                     	;# 
   667  0F56                     	;# 
   668  0F57                     	;# 
   669  0F59                     	;# 
   670  0F5A                     	;# 
   671  0F5B                     	;# 
   672  0F5C                     	;# 
   673  0F5D                     	;# 
   674  0F61                     	;# 
   675  0F62                     	;# 
   676  0F64                     	;# 
   677  0F65                     	;# 
   678  0F66                     	;# 
   679  0F67                     	;# 
   680  0F68                     	;# 
   681  0F69                     	;# 
   682  0F6A                     	;# 
   683  0F6B                     	;# 
   684  0F6C                     	;# 
   685  0F6D                     	;# 
   686  0FE4                     	;# 
   687  0FE5                     	;# 
   688  0FE6                     	;# 
   689  0FE7                     	;# 
   690  0FE8                     	;# 
   691  0FE9                     	;# 
   692  0FEA                     	;# 
   693  0FEB                     	;# 
   694  0FED                     	;# 
   695  0FEE                     	;# 
   696  0FEF                     	;# 
   697  0000                     	;# 
   698  0001                     	;# 
   699  0002                     	;# 
   700  0003                     	;# 
   701  0004                     	;# 
   702  0005                     	;# 
   703  0006                     	;# 
   704  0007                     	;# 
   705  0008                     	;# 
   706  0009                     	;# 
   707  000A                     	;# 
   708  000B                     	;# 
   709  000C                     	;# 
   710  000D                     	;# 
   711  000E                     	;# 
   712  000F                     	;# 
   713  0010                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0013                     	;# 
   717  0014                     	;# 
   718  0015                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001C                     	;# 
   725  001C                     	;# 
   726  001D                     	;# 
   727  001D                     	;# 
   728  001E                     	;# 
   729  001F                     	;# 
   730  008C                     	;# 
   731  008C                     	;# 
   732  008D                     	;# 
   733  008E                     	;# 
   734  008E                     	;# 
   735  008F                     	;# 
   736  0090                     	;# 
   737  0090                     	;# 
   738  0091                     	;# 
   739  0093                     	;# 
   740  0094                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0097                     	;# 
   744  0098                     	;# 
   745  0099                     	;# 
   746  009A                     	;# 
   747  009B                     	;# 
   748  009C                     	;# 
   749  009D                     	;# 
   750  009E                     	;# 
   751  010C                     	;# 
   752  010D                     	;# 
   753  010E                     	;# 
   754  010E                     	;# 
   755  010F                     	;# 
   756  0110                     	;# 
   757  0110                     	;# 
   758  0111                     	;# 
   759  0112                     	;# 
   760  0112                     	;# 
   761  0113                     	;# 
   762  0114                     	;# 
   763  0114                     	;# 
   764  0115                     	;# 
   765  0116                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  0119                     	;# 
   769  0119                     	;# 
   770  0119                     	;# 
   771  011A                     	;# 
   772  011A                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011B                     	;# 
   776  011B                     	;# 
   777  011B                     	;# 
   778  011B                     	;# 
   779  011C                     	;# 
   780  011C                     	;# 
   781  011C                     	;# 
   782  011D                     	;# 
   783  011D                     	;# 
   784  011D                     	;# 
   785  011E                     	;# 
   786  011E                     	;# 
   787  011E                     	;# 
   788  011F                     	;# 
   789  011F                     	;# 
   790  011F                     	;# 
   791  011F                     	;# 
   792  011F                     	;# 
   793  018C                     	;# 
   794  018D                     	;# 
   795  018E                     	;# 
   796  018F                     	;# 
   797  0190                     	;# 
   798  0191                     	;# 
   799  0192                     	;# 
   800  0196                     	;# 
   801  0197                     	;# 
   802  0198                     	;# 
   803  0199                     	;# 
   804  019A                     	;# 
   805  019B                     	;# 
   806  019C                     	;# 
   807  020C                     	;# 
   808  020C                     	;# 
   809  020D                     	;# 
   810  020E                     	;# 
   811  020F                     	;# 
   812  020F                     	;# 
   813  0210                     	;# 
   814  0210                     	;# 
   815  0211                     	;# 
   816  0211                     	;# 
   817  0212                     	;# 
   818  0212                     	;# 
   819  0213                     	;# 
   820  0214                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0218                     	;# 
   828  0218                     	;# 
   829  0219                     	;# 
   830  021A                     	;# 
   831  021B                     	;# 
   832  021B                     	;# 
   833  021C                     	;# 
   834  021C                     	;# 
   835  021D                     	;# 
   836  021D                     	;# 
   837  021E                     	;# 
   838  021F                     	;# 
   839  028C                     	;# 
   840  028C                     	;# 
   841  028D                     	;# 
   842  028D                     	;# 
   843  028E                     	;# 
   844  028F                     	;# 
   845  0290                     	;# 
   846  0290                     	;# 
   847  0291                     	;# 
   848  0292                     	;# 
   849  0292                     	;# 
   850  0293                     	;# 
   851  0293                     	;# 
   852  0294                     	;# 
   853  0295                     	;# 
   854  0296                     	;# 
   855  0296                     	;# 
   856  0297                     	;# 
   857  0298                     	;# 
   858  0298                     	;# 
   859  0299                     	;# 
   860  0299                     	;# 
   861  029A                     	;# 
   862  029B                     	;# 
   863  029C                     	;# 
   864  029C                     	;# 
   865  029D                     	;# 
   866  030C                     	;# 
   867  030C                     	;# 
   868  030D                     	;# 
   869  030E                     	;# 
   870  030F                     	;# 
   871  0310                     	;# 
   872  0310                     	;# 
   873  0311                     	;# 
   874  0312                     	;# 
   875  0313                     	;# 
   876  0314                     	;# 
   877  0314                     	;# 
   878  0315                     	;# 
   879  0316                     	;# 
   880  0317                     	;# 
   881  0318                     	;# 
   882  0318                     	;# 
   883  0319                     	;# 
   884  031A                     	;# 
   885  031B                     	;# 
   886  031C                     	;# 
   887  031C                     	;# 
   888  031D                     	;# 
   889  031E                     	;# 
   890  031F                     	;# 
   891  038C                     	;# 
   892  038C                     	;# 
   893  038D                     	;# 
   894  038E                     	;# 
   895  0390                     	;# 
   896  0390                     	;# 
   897  0391                     	;# 
   898  0392                     	;# 
   899  040C                     	;# 
   900  040D                     	;# 
   901  040E                     	;# 
   902  040F                     	;# 
   903  0410                     	;# 
   904  0411                     	;# 
   905  0416                     	;# 
   906  0416                     	;# 
   907  0417                     	;# 
   908  0418                     	;# 
   909  0418                     	;# 
   910  0419                     	;# 
   911  041A                     	;# 
   912  041A                     	;# 
   913  041B                     	;# 
   914  041C                     	;# 
   915  041C                     	;# 
   916  041D                     	;# 
   917  041E                     	;# 
   918  041F                     	;# 
   919  048C                     	;# 
   920  048C                     	;# 
   921  048D                     	;# 
   922  048E                     	;# 
   923  048F                     	;# 
   924  048F                     	;# 
   925  0490                     	;# 
   926  0491                     	;# 
   927  0492                     	;# 
   928  0492                     	;# 
   929  0493                     	;# 
   930  0494                     	;# 
   931  0495                     	;# 
   932  0495                     	;# 
   933  0496                     	;# 
   934  0497                     	;# 
   935  0498                     	;# 
   936  0499                     	;# 
   937  049A                     	;# 
   938  049B                     	;# 
   939  049C                     	;# 
   940  049D                     	;# 
   941  050C                     	;# 
   942  050C                     	;# 
   943  050D                     	;# 
   944  050E                     	;# 
   945  050F                     	;# 
   946  050F                     	;# 
   947  0510                     	;# 
   948  0511                     	;# 
   949  0512                     	;# 
   950  0512                     	;# 
   951  0513                     	;# 
   952  0514                     	;# 
   953  0515                     	;# 
   954  0515                     	;# 
   955  0516                     	;# 
   956  0517                     	;# 
   957  0518                     	;# 
   958  0519                     	;# 
   959  051A                     	;# 
   960  051B                     	;# 
   961  051C                     	;# 
   962  051D                     	;# 
   963  058C                     	;# 
   964  058C                     	;# 
   965  058D                     	;# 
   966  058E                     	;# 
   967  058F                     	;# 
   968  058F                     	;# 
   969  0590                     	;# 
   970  0591                     	;# 
   971  0592                     	;# 
   972  0593                     	;# 
   973  060C                     	;# 
   974  060D                     	;# 
   975  060E                     	;# 
   976  060F                     	;# 
   977  0610                     	;# 
   978  0611                     	;# 
   979  0612                     	;# 
   980  0613                     	;# 
   981  0614                     	;# 
   982  0616                     	;# 
   983  0617                     	;# 
   984  0618                     	;# 
   985  0619                     	;# 
   986  061A                     	;# 
   987  061B                     	;# 
   988  061C                     	;# 
   989  061D                     	;# 
   990  061E                     	;# 
   991  068C                     	;# 
   992  068D                     	;# 
   993  068E                     	;# 
   994  068F                     	;# 
   995  0690                     	;# 
   996  0691                     	;# 
   997  0692                     	;# 
   998  0693                     	;# 
   999  0694                     	;# 
  1000  070C                     	;# 
  1001  070D                     	;# 
  1002  070E                     	;# 
  1003  070F                     	;# 
  1004  0710                     	;# 
  1005  0711                     	;# 
  1006  0712                     	;# 
  1007  0713                     	;# 
  1008  0714                     	;# 
  1009  0716                     	;# 
  1010  0717                     	;# 
  1011  0718                     	;# 
  1012  0719                     	;# 
  1013  071A                     	;# 
  1014  071B                     	;# 
  1015  071C                     	;# 
  1016  071D                     	;# 
  1017  071E                     	;# 
  1018  0796                     	;# 
  1019  0797                     	;# 
  1020  0798                     	;# 
  1021  0799                     	;# 
  1022  079A                     	;# 
  1023  079B                     	;# 
  1024  080C                     	;# 
  1025  080D                     	;# 
  1026  080E                     	;# 
  1027  080F                     	;# 
  1028  0810                     	;# 
  1029  0811                     	;# 
  1030  0812                     	;# 
  1031  0813                     	;# 
  1032  0814                     	;# 
  1033  081A                     	;# 
  1034  081B                     	;# 
  1035  081C                     	;# 
  1036  081D                     	;# 
  1037  081E                     	;# 
  1038  081F                     	;# 
  1039  088C                     	;# 
  1040  088D                     	;# 
  1041  088E                     	;# 
  1042  088F                     	;# 
  1043  0890                     	;# 
  1044  0891                     	;# 
  1045  0892                     	;# 
  1046  0893                     	;# 
  1047  0895                     	;# 
  1048  0896                     	;# 
  1049  0897                     	;# 
  1050  0898                     	;# 
  1051  0899                     	;# 
  1052  089A                     	;# 
  1053  089B                     	;# 
  1054  090C                     	;# 
  1055  090E                     	;# 
  1056  090F                     	;# 
  1057  091F                     	;# 
  1058  091F                     	;# 
  1059  098F                     	;# 
  1060  098F                     	;# 
  1061  0990                     	;# 
  1062  0991                     	;# 
  1063  0992                     	;# 
  1064  0993                     	;# 
  1065  0994                     	;# 
  1066  0995                     	;# 
  1067  0996                     	;# 
  1068  0997                     	;# 
  1069  0E0F                     	;# 
  1070  0E10                     	;# 
  1071  0E11                     	;# 
  1072  0E12                     	;# 
  1073  0E13                     	;# 
  1074  0E14                     	;# 
  1075  0E15                     	;# 
  1076  0E16                     	;# 
  1077  0E17                     	;# 
  1078  0E18                     	;# 
  1079  0E19                     	;# 
  1080  0E1A                     	;# 
  1081  0E1B                     	;# 
  1082  0E1C                     	;# 
  1083  0E1D                     	;# 
  1084  0E1E                     	;# 
  1085  0E1F                     	;# 
  1086  0E20                     	;# 
  1087  0E21                     	;# 
  1088  0E22                     	;# 
  1089  0E23                     	;# 
  1090  0E24                     	;# 
  1091  0E25                     	;# 
  1092  0E26                     	;# 
  1093  0E27                     	;# 
  1094  0E28                     	;# 
  1095  0E29                     	;# 
  1096  0E2A                     	;# 
  1097  0E2B                     	;# 
  1098  0E2C                     	;# 
  1099  0E2D                     	;# 
  1100  0E2E                     	;# 
  1101  0E2F                     	;# 
  1102  0E30                     	;# 
  1103  0E31                     	;# 
  1104  0E32                     	;# 
  1105  0E33                     	;# 
  1106  0E34                     	;# 
  1107  0E35                     	;# 
  1108  0E36                     	;# 
  1109  0E37                     	;# 
  1110  0E8F                     	;# 
  1111  0E90                     	;# 
  1112  0E91                     	;# 
  1113  0E92                     	;# 
  1114  0E93                     	;# 
  1115  0E94                     	;# 
  1116  0E95                     	;# 
  1117  0E96                     	;# 
  1118  0E97                     	;# 
  1119  0E9C                     	;# 
  1120  0E9D                     	;# 
  1121  0E9E                     	;# 
  1122  0EA1                     	;# 
  1123  0EA2                     	;# 
  1124  0EA3                     	;# 
  1125  0EA4                     	;# 
  1126  0EA5                     	;# 
  1127  0EA9                     	;# 
  1128  0EAA                     	;# 
  1129  0EAB                     	;# 
  1130  0EAC                     	;# 
  1131  0EB1                     	;# 
  1132  0EB2                     	;# 
  1133  0EB3                     	;# 
  1134  0EB8                     	;# 
  1135  0EB9                     	;# 
  1136  0EBA                     	;# 
  1137  0EBB                     	;# 
  1138  0EBC                     	;# 
  1139  0EBD                     	;# 
  1140  0EBE                     	;# 
  1141  0EC3                     	;# 
  1142  0EC5                     	;# 
  1143  0EC6                     	;# 
  1144  0EC7                     	;# 
  1145  0EC8                     	;# 
  1146  0EC9                     	;# 
  1147  0ECA                     	;# 
  1148  0ECB                     	;# 
  1149  0ECC                     	;# 
  1150  0F10                     	;# 
  1151  0F11                     	;# 
  1152  0F12                     	;# 
  1153  0F13                     	;# 
  1154  0F14                     	;# 
  1155  0F15                     	;# 
  1156  0F16                     	;# 
  1157  0F17                     	;# 
  1158  0F18                     	;# 
  1159  0F19                     	;# 
  1160  0F1A                     	;# 
  1161  0F1B                     	;# 
  1162  0F1C                     	;# 
  1163  0F1D                     	;# 
  1164  0F1E                     	;# 
  1165  0F1F                     	;# 
  1166  0F20                     	;# 
  1167  0F21                     	;# 
  1168  0F22                     	;# 
  1169  0F23                     	;# 
  1170  0F24                     	;# 
  1171  0F25                     	;# 
  1172  0F26                     	;# 
  1173  0F27                     	;# 
  1174  0F28                     	;# 
  1175  0F29                     	;# 
  1176  0F2A                     	;# 
  1177  0F2B                     	;# 
  1178  0F2C                     	;# 
  1179  0F2D                     	;# 
  1180  0F2E                     	;# 
  1181  0F2F                     	;# 
  1182  0F30                     	;# 
  1183  0F31                     	;# 
  1184  0F32                     	;# 
  1185  0F38                     	;# 
  1186  0F39                     	;# 
  1187  0F3A                     	;# 
  1188  0F3B                     	;# 
  1189  0F3C                     	;# 
  1190  0F3D                     	;# 
  1191  0F3E                     	;# 
  1192  0F3F                     	;# 
  1193  0F40                     	;# 
  1194  0F41                     	;# 
  1195  0F43                     	;# 
  1196  0F44                     	;# 
  1197  0F45                     	;# 
  1198  0F46                     	;# 
  1199  0F47                     	;# 
  1200  0F48                     	;# 
  1201  0F49                     	;# 
  1202  0F4A                     	;# 
  1203  0F4B                     	;# 
  1204  0F4C                     	;# 
  1205  0F4E                     	;# 
  1206  0F4F                     	;# 
  1207  0F50                     	;# 
  1208  0F51                     	;# 
  1209  0F52                     	;# 
  1210  0F53                     	;# 
  1211  0F54                     	;# 
  1212  0F55                     	;# 
  1213  0F56                     	;# 
  1214  0F57                     	;# 
  1215  0F59                     	;# 
  1216  0F5A                     	;# 
  1217  0F5B                     	;# 
  1218  0F5C                     	;# 
  1219  0F5D                     	;# 
  1220  0F61                     	;# 
  1221  0F62                     	;# 
  1222  0F64                     	;# 
  1223  0F65                     	;# 
  1224  0F66                     	;# 
  1225  0F67                     	;# 
  1226  0F68                     	;# 
  1227  0F69                     	;# 
  1228  0F6A                     	;# 
  1229  0F6B                     	;# 
  1230  0F6C                     	;# 
  1231  0F6D                     	;# 
  1232  0FE4                     	;# 
  1233  0FE5                     	;# 
  1234  0FE6                     	;# 
  1235  0FE7                     	;# 
  1236  0FE8                     	;# 
  1237  0FE9                     	;# 
  1238  0FEA                     	;# 
  1239  0FEB                     	;# 
  1240  0FED                     	;# 
  1241  0FEE                     	;# 
  1242  0FEF                     	;# 
  1243  0000                     	;# 
  1244  0001                     	;# 
  1245  0002                     	;# 
  1246  0003                     	;# 
  1247  0004                     	;# 
  1248  0005                     	;# 
  1249  0006                     	;# 
  1250  0007                     	;# 
  1251  0008                     	;# 
  1252  0009                     	;# 
  1253  000A                     	;# 
  1254  000B                     	;# 
  1255  000C                     	;# 
  1256  000D                     	;# 
  1257  000E                     	;# 
  1258  000F                     	;# 
  1259  0010                     	;# 
  1260  0011                     	;# 
  1261  0012                     	;# 
  1262  0013                     	;# 
  1263  0014                     	;# 
  1264  0015                     	;# 
  1265  0016                     	;# 
  1266  0017                     	;# 
  1267  0018                     	;# 
  1268  0019                     	;# 
  1269  001A                     	;# 
  1270  001C                     	;# 
  1271  001C                     	;# 
  1272  001D                     	;# 
  1273  001D                     	;# 
  1274  001E                     	;# 
  1275  001F                     	;# 
  1276  008C                     	;# 
  1277  008C                     	;# 
  1278  008D                     	;# 
  1279  008E                     	;# 
  1280  008E                     	;# 
  1281  008F                     	;# 
  1282  0090                     	;# 
  1283  0090                     	;# 
  1284  0091                     	;# 
  1285  0093                     	;# 
  1286  0094                     	;# 
  1287  0095                     	;# 
  1288  0096                     	;# 
  1289  0097                     	;# 
  1290  0098                     	;# 
  1291  0099                     	;# 
  1292  009A                     	;# 
  1293  009B                     	;# 
  1294  009C                     	;# 
  1295  009D                     	;# 
  1296  009E                     	;# 
  1297  010C                     	;# 
  1298  010D                     	;# 
  1299  010E                     	;# 
  1300  010E                     	;# 
  1301  010F                     	;# 
  1302  0110                     	;# 
  1303  0110                     	;# 
  1304  0111                     	;# 
  1305  0112                     	;# 
  1306  0112                     	;# 
  1307  0113                     	;# 
  1308  0114                     	;# 
  1309  0114                     	;# 
  1310  0115                     	;# 
  1311  0116                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  0119                     	;# 
  1315  0119                     	;# 
  1316  0119                     	;# 
  1317  011A                     	;# 
  1318  011A                     	;# 
  1319  011A                     	;# 
  1320  011B                     	;# 
  1321  011B                     	;# 
  1322  011B                     	;# 
  1323  011B                     	;# 
  1324  011B                     	;# 
  1325  011C                     	;# 
  1326  011C                     	;# 
  1327  011C                     	;# 
  1328  011D                     	;# 
  1329  011D                     	;# 
  1330  011D                     	;# 
  1331  011E                     	;# 
  1332  011E                     	;# 
  1333  011E                     	;# 
  1334  011F                     	;# 
  1335  011F                     	;# 
  1336  011F                     	;# 
  1337  011F                     	;# 
  1338  011F                     	;# 
  1339  018C                     	;# 
  1340  018D                     	;# 
  1341  018E                     	;# 
  1342  018F                     	;# 
  1343  0190                     	;# 
  1344  0191                     	;# 
  1345  0192                     	;# 
  1346  0196                     	;# 
  1347  0197                     	;# 
  1348  0198                     	;# 
  1349  0199                     	;# 
  1350  019A                     	;# 
  1351  019B                     	;# 
  1352  019C                     	;# 
  1353  020C                     	;# 
  1354  020C                     	;# 
  1355  020D                     	;# 
  1356  020E                     	;# 
  1357  020F                     	;# 
  1358  020F                     	;# 
  1359  0210                     	;# 
  1360  0210                     	;# 
  1361  0211                     	;# 
  1362  0211                     	;# 
  1363  0212                     	;# 
  1364  0212                     	;# 
  1365  0213                     	;# 
  1366  0214                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0216                     	;# 
  1370  0216                     	;# 
  1371  0217                     	;# 
  1372  0217                     	;# 
  1373  0218                     	;# 
  1374  0218                     	;# 
  1375  0219                     	;# 
  1376  021A                     	;# 
  1377  021B                     	;# 
  1378  021B                     	;# 
  1379  021C                     	;# 
  1380  021C                     	;# 
  1381  021D                     	;# 
  1382  021D                     	;# 
  1383  021E                     	;# 
  1384  021F                     	;# 
  1385  028C                     	;# 
  1386  028C                     	;# 
  1387  028D                     	;# 
  1388  028D                     	;# 
  1389  028E                     	;# 
  1390  028F                     	;# 
  1391  0290                     	;# 
  1392  0290                     	;# 
  1393  0291                     	;# 
  1394  0292                     	;# 
  1395  0292                     	;# 
  1396  0293                     	;# 
  1397  0293                     	;# 
  1398  0294                     	;# 
  1399  0295                     	;# 
  1400  0296                     	;# 
  1401  0296                     	;# 
  1402  0297                     	;# 
  1403  0298                     	;# 
  1404  0298                     	;# 
  1405  0299                     	;# 
  1406  0299                     	;# 
  1407  029A                     	;# 
  1408  029B                     	;# 
  1409  029C                     	;# 
  1410  029C                     	;# 
  1411  029D                     	;# 
  1412  030C                     	;# 
  1413  030C                     	;# 
  1414  030D                     	;# 
  1415  030E                     	;# 
  1416  030F                     	;# 
  1417  0310                     	;# 
  1418  0310                     	;# 
  1419  0311                     	;# 
  1420  0312                     	;# 
  1421  0313                     	;# 
  1422  0314                     	;# 
  1423  0314                     	;# 
  1424  0315                     	;# 
  1425  0316                     	;# 
  1426  0317                     	;# 
  1427  0318                     	;# 
  1428  0318                     	;# 
  1429  0319                     	;# 
  1430  031A                     	;# 
  1431  031B                     	;# 
  1432  031C                     	;# 
  1433  031C                     	;# 
  1434  031D                     	;# 
  1435  031E                     	;# 
  1436  031F                     	;# 
  1437  038C                     	;# 
  1438  038C                     	;# 
  1439  038D                     	;# 
  1440  038E                     	;# 
  1441  0390                     	;# 
  1442  0390                     	;# 
  1443  0391                     	;# 
  1444  0392                     	;# 
  1445  040C                     	;# 
  1446  040D                     	;# 
  1447  040E                     	;# 
  1448  040F                     	;# 
  1449  0410                     	;# 
  1450  0411                     	;# 
  1451  0416                     	;# 
  1452  0416                     	;# 
  1453  0417                     	;# 
  1454  0418                     	;# 
  1455  0418                     	;# 
  1456  0419                     	;# 
  1457  041A                     	;# 
  1458  041A                     	;# 
  1459  041B                     	;# 
  1460  041C                     	;# 
  1461  041C                     	;# 
  1462  041D                     	;# 
  1463  041E                     	;# 
  1464  041F                     	;# 
  1465  048C                     	;# 
  1466  048C                     	;# 
  1467  048D                     	;# 
  1468  048E                     	;# 
  1469  048F                     	;# 
  1470  048F                     	;# 
  1471  0490                     	;# 
  1472  0491                     	;# 
  1473  0492                     	;# 
  1474  0492                     	;# 
  1475  0493                     	;# 
  1476  0494                     	;# 
  1477  0495                     	;# 
  1478  0495                     	;# 
  1479  0496                     	;# 
  1480  0497                     	;# 
  1481  0498                     	;# 
  1482  0499                     	;# 
  1483  049A                     	;# 
  1484  049B                     	;# 
  1485  049C                     	;# 
  1486  049D                     	;# 
  1487  050C                     	;# 
  1488  050C                     	;# 
  1489  050D                     	;# 
  1490  050E                     	;# 
  1491  050F                     	;# 
  1492  050F                     	;# 
  1493  0510                     	;# 
  1494  0511                     	;# 
  1495  0512                     	;# 
  1496  0512                     	;# 
  1497  0513                     	;# 
  1498  0514                     	;# 
  1499  0515                     	;# 
  1500  0515                     	;# 
  1501  0516                     	;# 
  1502  0517                     	;# 
  1503  0518                     	;# 
  1504  0519                     	;# 
  1505  051A                     	;# 
  1506  051B                     	;# 
  1507  051C                     	;# 
  1508  051D                     	;# 
  1509  058C                     	;# 
  1510  058C                     	;# 
  1511  058D                     	;# 
  1512  058E                     	;# 
  1513  058F                     	;# 
  1514  058F                     	;# 
  1515  0590                     	;# 
  1516  0591                     	;# 
  1517  0592                     	;# 
  1518  0593                     	;# 
  1519  060C                     	;# 
  1520  060D                     	;# 
  1521  060E                     	;# 
  1522  060F                     	;# 
  1523  0610                     	;# 
  1524  0611                     	;# 
  1525  0612                     	;# 
  1526  0613                     	;# 
  1527  0614                     	;# 
  1528  0616                     	;# 
  1529  0617                     	;# 
  1530  0618                     	;# 
  1531  0619                     	;# 
  1532  061A                     	;# 
  1533  061B                     	;# 
  1534  061C                     	;# 
  1535  061D                     	;# 
  1536  061E                     	;# 
  1537  068C                     	;# 
  1538  068D                     	;# 
  1539  068E                     	;# 
  1540  068F                     	;# 
  1541  0690                     	;# 
  1542  0691                     	;# 
  1543  0692                     	;# 
  1544  0693                     	;# 
  1545  0694                     	;# 
  1546  070C                     	;# 
  1547  070D                     	;# 
  1548  070E                     	;# 
  1549  070F                     	;# 
  1550  0710                     	;# 
  1551  0711                     	;# 
  1552  0712                     	;# 
  1553  0713                     	;# 
  1554  0714                     	;# 
  1555  0716                     	;# 
  1556  0717                     	;# 
  1557  0718                     	;# 
  1558  0719                     	;# 
  1559  071A                     	;# 
  1560  071B                     	;# 
  1561  071C                     	;# 
  1562  071D                     	;# 
  1563  071E                     	;# 
  1564  0796                     	;# 
  1565  0797                     	;# 
  1566  0798                     	;# 
  1567  0799                     	;# 
  1568  079A                     	;# 
  1569  079B                     	;# 
  1570  080C                     	;# 
  1571  080D                     	;# 
  1572  080E                     	;# 
  1573  080F                     	;# 
  1574  0810                     	;# 
  1575  0811                     	;# 
  1576  0812                     	;# 
  1577  0813                     	;# 
  1578  0814                     	;# 
  1579  081A                     	;# 
  1580  081B                     	;# 
  1581  081C                     	;# 
  1582  081D                     	;# 
  1583  081E                     	;# 
  1584  081F                     	;# 
  1585  088C                     	;# 
  1586  088D                     	;# 
  1587  088E                     	;# 
  1588  088F                     	;# 
  1589  0890                     	;# 
  1590  0891                     	;# 
  1591  0892                     	;# 
  1592  0893                     	;# 
  1593  0895                     	;# 
  1594  0896                     	;# 
  1595  0897                     	;# 
  1596  0898                     	;# 
  1597  0899                     	;# 
  1598  089A                     	;# 
  1599  089B                     	;# 
  1600  090C                     	;# 
  1601  090E                     	;# 
  1602  090F                     	;# 
  1603  091F                     	;# 
  1604  091F                     	;# 
  1605  098F                     	;# 
  1606  098F                     	;# 
  1607  0990                     	;# 
  1608  0991                     	;# 
  1609  0992                     	;# 
  1610  0993                     	;# 
  1611  0994                     	;# 
  1612  0995                     	;# 
  1613  0996                     	;# 
  1614  0997                     	;# 
  1615  0E0F                     	;# 
  1616  0E10                     	;# 
  1617  0E11                     	;# 
  1618  0E12                     	;# 
  1619  0E13                     	;# 
  1620  0E14                     	;# 
  1621  0E15                     	;# 
  1622  0E16                     	;# 
  1623  0E17                     	;# 
  1624  0E18                     	;# 
  1625  0E19                     	;# 
  1626  0E1A                     	;# 
  1627  0E1B                     	;# 
  1628  0E1C                     	;# 
  1629  0E1D                     	;# 
  1630  0E1E                     	;# 
  1631  0E1F                     	;# 
  1632  0E20                     	;# 
  1633  0E21                     	;# 
  1634  0E22                     	;# 
  1635  0E23                     	;# 
  1636  0E24                     	;# 
  1637  0E25                     	;# 
  1638  0E26                     	;# 
  1639  0E27                     	;# 
  1640  0E28                     	;# 
  1641  0E29                     	;# 
  1642  0E2A                     	;# 
  1643  0E2B                     	;# 
  1644  0E2C                     	;# 
  1645  0E2D                     	;# 
  1646  0E2E                     	;# 
  1647  0E2F                     	;# 
  1648  0E30                     	;# 
  1649  0E31                     	;# 
  1650  0E32                     	;# 
  1651  0E33                     	;# 
  1652  0E34                     	;# 
  1653  0E35                     	;# 
  1654  0E36                     	;# 
  1655  0E37                     	;# 
  1656  0E8F                     	;# 
  1657  0E90                     	;# 
  1658  0E91                     	;# 
  1659  0E92                     	;# 
  1660  0E93                     	;# 
  1661  0E94                     	;# 
  1662  0E95                     	;# 
  1663  0E96                     	;# 
  1664  0E97                     	;# 
  1665  0E9C                     	;# 
  1666  0E9D                     	;# 
  1667  0E9E                     	;# 
  1668  0EA1                     	;# 
  1669  0EA2                     	;# 
  1670  0EA3                     	;# 
  1671  0EA4                     	;# 
  1672  0EA5                     	;# 
  1673  0EA9                     	;# 
  1674  0EAA                     	;# 
  1675  0EAB                     	;# 
  1676  0EAC                     	;# 
  1677  0EB1                     	;# 
  1678  0EB2                     	;# 
  1679  0EB3                     	;# 
  1680  0EB8                     	;# 
  1681  0EB9                     	;# 
  1682  0EBA                     	;# 
  1683  0EBB                     	;# 
  1684  0EBC                     	;# 
  1685  0EBD                     	;# 
  1686  0EBE                     	;# 
  1687  0EC3                     	;# 
  1688  0EC5                     	;# 
  1689  0EC6                     	;# 
  1690  0EC7                     	;# 
  1691  0EC8                     	;# 
  1692  0EC9                     	;# 
  1693  0ECA                     	;# 
  1694  0ECB                     	;# 
  1695  0ECC                     	;# 
  1696  0F10                     	;# 
  1697  0F11                     	;# 
  1698  0F12                     	;# 
  1699  0F13                     	;# 
  1700  0F14                     	;# 
  1701  0F15                     	;# 
  1702  0F16                     	;# 
  1703  0F17                     	;# 
  1704  0F18                     	;# 
  1705  0F19                     	;# 
  1706  0F1A                     	;# 
  1707  0F1B                     	;# 
  1708  0F1C                     	;# 
  1709  0F1D                     	;# 
  1710  0F1E                     	;# 
  1711  0F1F                     	;# 
  1712  0F20                     	;# 
  1713  0F21                     	;# 
  1714  0F22                     	;# 
  1715  0F23                     	;# 
  1716  0F24                     	;# 
  1717  0F25                     	;# 
  1718  0F26                     	;# 
  1719  0F27                     	;# 
  1720  0F28                     	;# 
  1721  0F29                     	;# 
  1722  0F2A                     	;# 
  1723  0F2B                     	;# 
  1724  0F2C                     	;# 
  1725  0F2D                     	;# 
  1726  0F2E                     	;# 
  1727  0F2F                     	;# 
  1728  0F30                     	;# 
  1729  0F31                     	;# 
  1730  0F32                     	;# 
  1731  0F38                     	;# 
  1732  0F39                     	;# 
  1733  0F3A                     	;# 
  1734  0F3B                     	;# 
  1735  0F3C                     	;# 
  1736  0F3D                     	;# 
  1737  0F3E                     	;# 
  1738  0F3F                     	;# 
  1739  0F40                     	;# 
  1740  0F41                     	;# 
  1741  0F43                     	;# 
  1742  0F44                     	;# 
  1743  0F45                     	;# 
  1744  0F46                     	;# 
  1745  0F47                     	;# 
  1746  0F48                     	;# 
  1747  0F49                     	;# 
  1748  0F4A                     	;# 
  1749  0F4B                     	;# 
  1750  0F4C                     	;# 
  1751  0F4E                     	;# 
  1752  0F4F                     	;# 
  1753  0F50                     	;# 
  1754  0F51                     	;# 
  1755  0F52                     	;# 
  1756  0F53                     	;# 
  1757  0F54                     	;# 
  1758  0F55                     	;# 
  1759  0F56                     	;# 
  1760  0F57                     	;# 
  1761  0F59                     	;# 
  1762  0F5A                     	;# 
  1763  0F5B                     	;# 
  1764  0F5C                     	;# 
  1765  0F5D                     	;# 
  1766  0F61                     	;# 
  1767  0F62                     	;# 
  1768  0F64                     	;# 
  1769  0F65                     	;# 
  1770  0F66                     	;# 
  1771  0F67                     	;# 
  1772  0F68                     	;# 
  1773  0F69                     	;# 
  1774  0F6A                     	;# 
  1775  0F6B                     	;# 
  1776  0F6C                     	;# 
  1777  0F6D                     	;# 
  1778  0FE4                     	;# 
  1779  0FE5                     	;# 
  1780  0FE6                     	;# 
  1781  0FE7                     	;# 
  1782  0FE8                     	;# 
  1783  0FE9                     	;# 
  1784  0FEA                     	;# 
  1785  0FEB                     	;# 
  1786  0FED                     	;# 
  1787  0FEE                     	;# 
  1788  0FEF                     	;# 
  1789  0000                     	;# 
  1790  0001                     	;# 
  1791  0002                     	;# 
  1792  0003                     	;# 
  1793  0004                     	;# 
  1794  0005                     	;# 
  1795  0006                     	;# 
  1796  0007                     	;# 
  1797  0008                     	;# 
  1798  0009                     	;# 
  1799  000A                     	;# 
  1800  000B                     	;# 
  1801  000C                     	;# 
  1802  000D                     	;# 
  1803  000E                     	;# 
  1804  000F                     	;# 
  1805  0010                     	;# 
  1806  0011                     	;# 
  1807  0012                     	;# 
  1808  0013                     	;# 
  1809  0014                     	;# 
  1810  0015                     	;# 
  1811  0016                     	;# 
  1812  0017                     	;# 
  1813  0018                     	;# 
  1814  0019                     	;# 
  1815  001A                     	;# 
  1816  001C                     	;# 
  1817  001C                     	;# 
  1818  001D                     	;# 
  1819  001D                     	;# 
  1820  001E                     	;# 
  1821  001F                     	;# 
  1822  008C                     	;# 
  1823  008C                     	;# 
  1824  008D                     	;# 
  1825  008E                     	;# 
  1826  008E                     	;# 
  1827  008F                     	;# 
  1828  0090                     	;# 
  1829  0090                     	;# 
  1830  0091                     	;# 
  1831  0093                     	;# 
  1832  0094                     	;# 
  1833  0095                     	;# 
  1834  0096                     	;# 
  1835  0097                     	;# 
  1836  0098                     	;# 
  1837  0099                     	;# 
  1838  009A                     	;# 
  1839  009B                     	;# 
  1840  009C                     	;# 
  1841  009D                     	;# 
  1842  009E                     	;# 
  1843  010C                     	;# 
  1844  010D                     	;# 
  1845  010E                     	;# 
  1846  010E                     	;# 
  1847  010F                     	;# 
  1848  0110                     	;# 
  1849  0110                     	;# 
  1850  0111                     	;# 
  1851  0112                     	;# 
  1852  0112                     	;# 
  1853  0113                     	;# 
  1854  0114                     	;# 
  1855  0114                     	;# 
  1856  0115                     	;# 
  1857  0116                     	;# 
  1858  0116                     	;# 
  1859  0117                     	;# 
  1860  0119                     	;# 
  1861  0119                     	;# 
  1862  0119                     	;# 
  1863  011A                     	;# 
  1864  011A                     	;# 
  1865  011A                     	;# 
  1866  011B                     	;# 
  1867  011B                     	;# 
  1868  011B                     	;# 
  1869  011B                     	;# 
  1870  011B                     	;# 
  1871  011C                     	;# 
  1872  011C                     	;# 
  1873  011C                     	;# 
  1874  011D                     	;# 
  1875  011D                     	;# 
  1876  011D                     	;# 
  1877  011E                     	;# 
  1878  011E                     	;# 
  1879  011E                     	;# 
  1880  011F                     	;# 
  1881  011F                     	;# 
  1882  011F                     	;# 
  1883  011F                     	;# 
  1884  011F                     	;# 
  1885  018C                     	;# 
  1886  018D                     	;# 
  1887  018E                     	;# 
  1888  018F                     	;# 
  1889  0190                     	;# 
  1890  0191                     	;# 
  1891  0192                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0198                     	;# 
  1895  0199                     	;# 
  1896  019A                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  020C                     	;# 
  1900  020C                     	;# 
  1901  020D                     	;# 
  1902  020E                     	;# 
  1903  020F                     	;# 
  1904  020F                     	;# 
  1905  0210                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0218                     	;# 
  1920  0218                     	;# 
  1921  0219                     	;# 
  1922  021A                     	;# 
  1923  021B                     	;# 
  1924  021B                     	;# 
  1925  021C                     	;# 
  1926  021C                     	;# 
  1927  021D                     	;# 
  1928  021D                     	;# 
  1929  021E                     	;# 
  1930  021F                     	;# 
  1931  028C                     	;# 
  1932  028C                     	;# 
  1933  028D                     	;# 
  1934  028D                     	;# 
  1935  028E                     	;# 
  1936  028F                     	;# 
  1937  0290                     	;# 
  1938  0290                     	;# 
  1939  0291                     	;# 
  1940  0292                     	;# 
  1941  0292                     	;# 
  1942  0293                     	;# 
  1943  0293                     	;# 
  1944  0294                     	;# 
  1945  0295                     	;# 
  1946  0296                     	;# 
  1947  0296                     	;# 
  1948  0297                     	;# 
  1949  0298                     	;# 
  1950  0298                     	;# 
  1951  0299                     	;# 
  1952  0299                     	;# 
  1953  029A                     	;# 
  1954  029B                     	;# 
  1955  029C                     	;# 
  1956  029C                     	;# 
  1957  029D                     	;# 
  1958  030C                     	;# 
  1959  030C                     	;# 
  1960  030D                     	;# 
  1961  030E                     	;# 
  1962  030F                     	;# 
  1963  0310                     	;# 
  1964  0310                     	;# 
  1965  0311                     	;# 
  1966  0312                     	;# 
  1967  0313                     	;# 
  1968  0314                     	;# 
  1969  0314                     	;# 
  1970  0315                     	;# 
  1971  0316                     	;# 
  1972  0317                     	;# 
  1973  0318                     	;# 
  1974  0318                     	;# 
  1975  0319                     	;# 
  1976  031A                     	;# 
  1977  031B                     	;# 
  1978  031C                     	;# 
  1979  031C                     	;# 
  1980  031D                     	;# 
  1981  031E                     	;# 
  1982  031F                     	;# 
  1983  038C                     	;# 
  1984  038C                     	;# 
  1985  038D                     	;# 
  1986  038E                     	;# 
  1987  0390                     	;# 
  1988  0390                     	;# 
  1989  0391                     	;# 
  1990  0392                     	;# 
  1991  040C                     	;# 
  1992  040D                     	;# 
  1993  040E                     	;# 
  1994  040F                     	;# 
  1995  0410                     	;# 
  1996  0411                     	;# 
  1997  0416                     	;# 
  1998  0416                     	;# 
  1999  0417                     	;# 
  2000  0418                     	;# 
  2001  0418                     	;# 
  2002  0419                     	;# 
  2003  041A                     	;# 
  2004  041A                     	;# 
  2005  041B                     	;# 
  2006  041C                     	;# 
  2007  041C                     	;# 
  2008  041D                     	;# 
  2009  041E                     	;# 
  2010  041F                     	;# 
  2011  048C                     	;# 
  2012  048C                     	;# 
  2013  048D                     	;# 
  2014  048E                     	;# 
  2015  048F                     	;# 
  2016  048F                     	;# 
  2017  0490                     	;# 
  2018  0491                     	;# 
  2019  0492                     	;# 
  2020  0492                     	;# 
  2021  0493                     	;# 
  2022  0494                     	;# 
  2023  0495                     	;# 
  2024  0495                     	;# 
  2025  0496                     	;# 
  2026  0497                     	;# 
  2027  0498                     	;# 
  2028  0499                     	;# 
  2029  049A                     	;# 
  2030  049B                     	;# 
  2031  049C                     	;# 
  2032  049D                     	;# 
  2033  050C                     	;# 
  2034  050C                     	;# 
  2035  050D                     	;# 
  2036  050E                     	;# 
  2037  050F                     	;# 
  2038  050F                     	;# 
  2039  0510                     	;# 
  2040  0511                     	;# 
  2041  0512                     	;# 
  2042  0512                     	;# 
  2043  0513                     	;# 
  2044  0514                     	;# 
  2045  0515                     	;# 
  2046  0515                     	;# 
  2047  0516                     	;# 
  2048  0517                     	;# 
  2049  0518                     	;# 
  2050  0519                     	;# 
  2051  051A                     	;# 
  2052  051B                     	;# 
  2053  051C                     	;# 
  2054  051D                     	;# 
  2055  058C                     	;# 
  2056  058C                     	;# 
  2057  058D                     	;# 
  2058  058E                     	;# 
  2059  058F                     	;# 
  2060  058F                     	;# 
  2061  0590                     	;# 
  2062  0591                     	;# 
  2063  0592                     	;# 
  2064  0593                     	;# 
  2065  060C                     	;# 
  2066  060D                     	;# 
  2067  060E                     	;# 
  2068  060F                     	;# 
  2069  0610                     	;# 
  2070  0611                     	;# 
  2071  0612                     	;# 
  2072  0613                     	;# 
  2073  0614                     	;# 
  2074  0616                     	;# 
  2075  0617                     	;# 
  2076  0618                     	;# 
  2077  0619                     	;# 
  2078  061A                     	;# 
  2079  061B                     	;# 
  2080  061C                     	;# 
  2081  061D                     	;# 
  2082  061E                     	;# 
  2083  068C                     	;# 
  2084  068D                     	;# 
  2085  068E                     	;# 
  2086  068F                     	;# 
  2087  0690                     	;# 
  2088  0691                     	;# 
  2089  0692                     	;# 
  2090  0693                     	;# 
  2091  0694                     	;# 
  2092  070C                     	;# 
  2093  070D                     	;# 
  2094  070E                     	;# 
  2095  070F                     	;# 
  2096  0710                     	;# 
  2097  0711                     	;# 
  2098  0712                     	;# 
  2099  0713                     	;# 
  2100  0714                     	;# 
  2101  0716                     	;# 
  2102  0717                     	;# 
  2103  0718                     	;# 
  2104  0719                     	;# 
  2105  071A                     	;# 
  2106  071B                     	;# 
  2107  071C                     	;# 
  2108  071D                     	;# 
  2109  071E                     	;# 
  2110  0796                     	;# 
  2111  0797                     	;# 
  2112  0798                     	;# 
  2113  0799                     	;# 
  2114  079A                     	;# 
  2115  079B                     	;# 
  2116  080C                     	;# 
  2117  080D                     	;# 
  2118  080E                     	;# 
  2119  080F                     	;# 
  2120  0810                     	;# 
  2121  0811                     	;# 
  2122  0812                     	;# 
  2123  0813                     	;# 
  2124  0814                     	;# 
  2125  081A                     	;# 
  2126  081B                     	;# 
  2127  081C                     	;# 
  2128  081D                     	;# 
  2129  081E                     	;# 
  2130  081F                     	;# 
  2131  088C                     	;# 
  2132  088D                     	;# 
  2133  088E                     	;# 
  2134  088F                     	;# 
  2135  0890                     	;# 
  2136  0891                     	;# 
  2137  0892                     	;# 
  2138  0893                     	;# 
  2139  0895                     	;# 
  2140  0896                     	;# 
  2141  0897                     	;# 
  2142  0898                     	;# 
  2143  0899                     	;# 
  2144  089A                     	;# 
  2145  089B                     	;# 
  2146  090C                     	;# 
  2147  090E                     	;# 
  2148  090F                     	;# 
  2149  091F                     	;# 
  2150  091F                     	;# 
  2151  098F                     	;# 
  2152  098F                     	;# 
  2153  0990                     	;# 
  2154  0991                     	;# 
  2155  0992                     	;# 
  2156  0993                     	;# 
  2157  0994                     	;# 
  2158  0995                     	;# 
  2159  0996                     	;# 
  2160  0997                     	;# 
  2161  0E0F                     	;# 
  2162  0E10                     	;# 
  2163  0E11                     	;# 
  2164  0E12                     	;# 
  2165  0E13                     	;# 
  2166  0E14                     	;# 
  2167  0E15                     	;# 
  2168  0E16                     	;# 
  2169  0E17                     	;# 
  2170  0E18                     	;# 
  2171  0E19                     	;# 
  2172  0E1A                     	;# 
  2173  0E1B                     	;# 
  2174  0E1C                     	;# 
  2175  0E1D                     	;# 
  2176  0E1E                     	;# 
  2177  0E1F                     	;# 
  2178  0E20                     	;# 
  2179  0E21                     	;# 
  2180  0E22                     	;# 
  2181  0E23                     	;# 
  2182  0E24                     	;# 
  2183  0E25                     	;# 
  2184  0E26                     	;# 
  2185  0E27                     	;# 
  2186  0E28                     	;# 
  2187  0E29                     	;# 
  2188  0E2A                     	;# 
  2189  0E2B                     	;# 
  2190  0E2C                     	;# 
  2191  0E2D                     	;# 
  2192  0E2E                     	;# 
  2193  0E2F                     	;# 
  2194  0E30                     	;# 
  2195  0E31                     	;# 
  2196  0E32                     	;# 
  2197  0E33                     	;# 
  2198  0E34                     	;# 
  2199  0E35                     	;# 
  2200  0E36                     	;# 
  2201  0E37                     	;# 
  2202  0E8F                     	;# 
  2203  0E90                     	;# 
  2204  0E91                     	;# 
  2205  0E92                     	;# 
  2206  0E93                     	;# 
  2207  0E94                     	;# 
  2208  0E95                     	;# 
  2209  0E96                     	;# 
  2210  0E97                     	;# 
  2211  0E9C                     	;# 
  2212  0E9D                     	;# 
  2213  0E9E                     	;# 
  2214  0EA1                     	;# 
  2215  0EA2                     	;# 
  2216  0EA3                     	;# 
  2217  0EA4                     	;# 
  2218  0EA5                     	;# 
  2219  0EA9                     	;# 
  2220  0EAA                     	;# 
  2221  0EAB                     	;# 
  2222  0EAC                     	;# 
  2223  0EB1                     	;# 
  2224  0EB2                     	;# 
  2225  0EB3                     	;# 
  2226  0EB8                     	;# 
  2227  0EB9                     	;# 
  2228  0EBA                     	;# 
  2229  0EBB                     	;# 
  2230  0EBC                     	;# 
  2231  0EBD                     	;# 
  2232  0EBE                     	;# 
  2233  0EC3                     	;# 
  2234  0EC5                     	;# 
  2235  0EC6                     	;# 
  2236  0EC7                     	;# 
  2237  0EC8                     	;# 
  2238  0EC9                     	;# 
  2239  0ECA                     	;# 
  2240  0ECB                     	;# 
  2241  0ECC                     	;# 
  2242  0F10                     	;# 
  2243  0F11                     	;# 
  2244  0F12                     	;# 
  2245  0F13                     	;# 
  2246  0F14                     	;# 
  2247  0F15                     	;# 
  2248  0F16                     	;# 
  2249  0F17                     	;# 
  2250  0F18                     	;# 
  2251  0F19                     	;# 
  2252  0F1A                     	;# 
  2253  0F1B                     	;# 
  2254  0F1C                     	;# 
  2255  0F1D                     	;# 
  2256  0F1E                     	;# 
  2257  0F1F                     	;# 
  2258  0F20                     	;# 
  2259  0F21                     	;# 
  2260  0F22                     	;# 
  2261  0F23                     	;# 
  2262  0F24                     	;# 
  2263  0F25                     	;# 
  2264  0F26                     	;# 
  2265  0F27                     	;# 
  2266  0F28                     	;# 
  2267  0F29                     	;# 
  2268  0F2A                     	;# 
  2269  0F2B                     	;# 
  2270  0F2C                     	;# 
  2271  0F2D                     	;# 
  2272  0F2E                     	;# 
  2273  0F2F                     	;# 
  2274  0F30                     	;# 
  2275  0F31                     	;# 
  2276  0F32                     	;# 
  2277  0F38                     	;# 
  2278  0F39                     	;# 
  2279  0F3A                     	;# 
  2280  0F3B                     	;# 
  2281  0F3C                     	;# 
  2282  0F3D                     	;# 
  2283  0F3E                     	;# 
  2284  0F3F                     	;# 
  2285  0F40                     	;# 
  2286  0F41                     	;# 
  2287  0F43                     	;# 
  2288  0F44                     	;# 
  2289  0F45                     	;# 
  2290  0F46                     	;# 
  2291  0F47                     	;# 
  2292  0F48                     	;# 
  2293  0F49                     	;# 
  2294  0F4A                     	;# 
  2295  0F4B                     	;# 
  2296  0F4C                     	;# 
  2297  0F4E                     	;# 
  2298  0F4F                     	;# 
  2299  0F50                     	;# 
  2300  0F51                     	;# 
  2301  0F52                     	;# 
  2302  0F53                     	;# 
  2303  0F54                     	;# 
  2304  0F55                     	;# 
  2305  0F56                     	;# 
  2306  0F57                     	;# 
  2307  0F59                     	;# 
  2308  0F5A                     	;# 
  2309  0F5B                     	;# 
  2310  0F5C                     	;# 
  2311  0F5D                     	;# 
  2312  0F61                     	;# 
  2313  0F62                     	;# 
  2314  0F64                     	;# 
  2315  0F65                     	;# 
  2316  0F66                     	;# 
  2317  0F67                     	;# 
  2318  0F68                     	;# 
  2319  0F69                     	;# 
  2320  0F6A                     	;# 
  2321  0F6B                     	;# 
  2322  0F6C                     	;# 
  2323  0F6D                     	;# 
  2324  0FE4                     	;# 
  2325  0FE5                     	;# 
  2326  0FE6                     	;# 
  2327  0FE7                     	;# 
  2328  0FE8                     	;# 
  2329  0FE9                     	;# 
  2330  0FEA                     	;# 
  2331  0FEB                     	;# 
  2332  0FED                     	;# 
  2333  0FEE                     	;# 
  2334  0FEF                     	;# 
  2335  0000                     	;# 
  2336  0001                     	;# 
  2337  0002                     	;# 
  2338  0003                     	;# 
  2339  0004                     	;# 
  2340  0005                     	;# 
  2341  0006                     	;# 
  2342  0007                     	;# 
  2343  0008                     	;# 
  2344  0009                     	;# 
  2345  000A                     	;# 
  2346  000B                     	;# 
  2347  000C                     	;# 
  2348  000D                     	;# 
  2349  000E                     	;# 
  2350  000F                     	;# 
  2351  0010                     	;# 
  2352  0011                     	;# 
  2353  0012                     	;# 
  2354  0013                     	;# 
  2355  0014                     	;# 
  2356  0015                     	;# 
  2357  0016                     	;# 
  2358  0017                     	;# 
  2359  0018                     	;# 
  2360  0019                     	;# 
  2361  001A                     	;# 
  2362  001C                     	;# 
  2363  001C                     	;# 
  2364  001D                     	;# 
  2365  001D                     	;# 
  2366  001E                     	;# 
  2367  001F                     	;# 
  2368  008C                     	;# 
  2369  008C                     	;# 
  2370  008D                     	;# 
  2371  008E                     	;# 
  2372  008E                     	;# 
  2373  008F                     	;# 
  2374  0090                     	;# 
  2375  0090                     	;# 
  2376  0091                     	;# 
  2377  0093                     	;# 
  2378  0094                     	;# 
  2379  0095                     	;# 
  2380  0096                     	;# 
  2381  0097                     	;# 
  2382  0098                     	;# 
  2383  0099                     	;# 
  2384  009A                     	;# 
  2385  009B                     	;# 
  2386  009C                     	;# 
  2387  009D                     	;# 
  2388  009E                     	;# 
  2389  010C                     	;# 
  2390  010D                     	;# 
  2391  010E                     	;# 
  2392  010E                     	;# 
  2393  010F                     	;# 
  2394  0110                     	;# 
  2395  0110                     	;# 
  2396  0111                     	;# 
  2397  0112                     	;# 
  2398  0112                     	;# 
  2399  0113                     	;# 
  2400  0114                     	;# 
  2401  0114                     	;# 
  2402  0115                     	;# 
  2403  0116                     	;# 
  2404  0116                     	;# 
  2405  0117                     	;# 
  2406  0119                     	;# 
  2407  0119                     	;# 
  2408  0119                     	;# 
  2409  011A                     	;# 
  2410  011A                     	;# 
  2411  011A                     	;# 
  2412  011B                     	;# 
  2413  011B                     	;# 
  2414  011B                     	;# 
  2415  011B                     	;# 
  2416  011B                     	;# 
  2417  011C                     	;# 
  2418  011C                     	;# 
  2419  011C                     	;# 
  2420  011D                     	;# 
  2421  011D                     	;# 
  2422  011D                     	;# 
  2423  011E                     	;# 
  2424  011E                     	;# 
  2425  011E                     	;# 
  2426  011F                     	;# 
  2427  011F                     	;# 
  2428  011F                     	;# 
  2429  011F                     	;# 
  2430  011F                     	;# 
  2431  018C                     	;# 
  2432  018D                     	;# 
  2433  018E                     	;# 
  2434  018F                     	;# 
  2435  0190                     	;# 
  2436  0191                     	;# 
  2437  0192                     	;# 
  2438  0196                     	;# 
  2439  0197                     	;# 
  2440  0198                     	;# 
  2441  0199                     	;# 
  2442  019A                     	;# 
  2443  019B                     	;# 
  2444  019C                     	;# 
  2445  020C                     	;# 
  2446  020C                     	;# 
  2447  020D                     	;# 
  2448  020E                     	;# 
  2449  020F                     	;# 
  2450  020F                     	;# 
  2451  0210                     	;# 
  2452  0210                     	;# 
  2453  0211                     	;# 
  2454  0211                     	;# 
  2455  0212                     	;# 
  2456  0212                     	;# 
  2457  0213                     	;# 
  2458  0214                     	;# 
  2459  0215                     	;# 
  2460  0215                     	;# 
  2461  0216                     	;# 
  2462  0216                     	;# 
  2463  0217                     	;# 
  2464  0217                     	;# 
  2465  0218                     	;# 
  2466  0218                     	;# 
  2467  0219                     	;# 
  2468  021A                     	;# 
  2469  021B                     	;# 
  2470  021B                     	;# 
  2471  021C                     	;# 
  2472  021C                     	;# 
  2473  021D                     	;# 
  2474  021D                     	;# 
  2475  021E                     	;# 
  2476  021F                     	;# 
  2477  028C                     	;# 
  2478  028C                     	;# 
  2479  028D                     	;# 
  2480  028D                     	;# 
  2481  028E                     	;# 
  2482  028F                     	;# 
  2483  0290                     	;# 
  2484  0290                     	;# 
  2485  0291                     	;# 
  2486  0292                     	;# 
  2487  0292                     	;# 
  2488  0293                     	;# 
  2489  0293                     	;# 
  2490  0294                     	;# 
  2491  0295                     	;# 
  2492  0296                     	;# 
  2493  0296                     	;# 
  2494  0297                     	;# 
  2495  0298                     	;# 
  2496  0298                     	;# 
  2497  0299                     	;# 
  2498  0299                     	;# 
  2499  029A                     	;# 
  2500  029B                     	;# 
  2501  029C                     	;# 
  2502  029C                     	;# 
  2503  029D                     	;# 
  2504  030C                     	;# 
  2505  030C                     	;# 
  2506  030D                     	;# 
  2507  030E                     	;# 
  2508  030F                     	;# 
  2509  0310                     	;# 
  2510  0310                     	;# 
  2511  0311                     	;# 
  2512  0312                     	;# 
  2513  0313                     	;# 
  2514  0314                     	;# 
  2515  0314                     	;# 
  2516  0315                     	;# 
  2517  0316                     	;# 
  2518  0317                     	;# 
  2519  0318                     	;# 
  2520  0318                     	;# 
  2521  0319                     	;# 
  2522  031A                     	;# 
  2523  031B                     	;# 
  2524  031C                     	;# 
  2525  031C                     	;# 
  2526  031D                     	;# 
  2527  031E                     	;# 
  2528  031F                     	;# 
  2529  038C                     	;# 
  2530  038C                     	;# 
  2531  038D                     	;# 
  2532  038E                     	;# 
  2533  0390                     	;# 
  2534  0390                     	;# 
  2535  0391                     	;# 
  2536  0392                     	;# 
  2537  040C                     	;# 
  2538  040D                     	;# 
  2539  040E                     	;# 
  2540  040F                     	;# 
  2541  0410                     	;# 
  2542  0411                     	;# 
  2543  0416                     	;# 
  2544  0416                     	;# 
  2545  0417                     	;# 
  2546  0418                     	;# 
  2547  0418                     	;# 
  2548  0419                     	;# 
  2549  041A                     	;# 
  2550  041A                     	;# 
  2551  041B                     	;# 
  2552  041C                     	;# 
  2553  041C                     	;# 
  2554  041D                     	;# 
  2555  041E                     	;# 
  2556  041F                     	;# 
  2557  048C                     	;# 
  2558  048C                     	;# 
  2559  048D                     	;# 
  2560  048E                     	;# 
  2561  048F                     	;# 
  2562  048F                     	;# 
  2563  0490                     	;# 
  2564  0491                     	;# 
  2565  0492                     	;# 
  2566  0492                     	;# 
  2567  0493                     	;# 
  2568  0494                     	;# 
  2569  0495                     	;# 
  2570  0495                     	;# 
  2571  0496                     	;# 
  2572  0497                     	;# 
  2573  0498                     	;# 
  2574  0499                     	;# 
  2575  049A                     	;# 
  2576  049B                     	;# 
  2577  049C                     	;# 
  2578  049D                     	;# 
  2579  050C                     	;# 
  2580  050C                     	;# 
  2581  050D                     	;# 
  2582  050E                     	;# 
  2583  050F                     	;# 
  2584  050F                     	;# 
  2585  0510                     	;# 
  2586  0511                     	;# 
  2587  0512                     	;# 
  2588  0512                     	;# 
  2589  0513                     	;# 
  2590  0514                     	;# 
  2591  0515                     	;# 
  2592  0515                     	;# 
  2593  0516                     	;# 
  2594  0517                     	;# 
  2595  0518                     	;# 
  2596  0519                     	;# 
  2597  051A                     	;# 
  2598  051B                     	;# 
  2599  051C                     	;# 
  2600  051D                     	;# 
  2601  058C                     	;# 
  2602  058C                     	;# 
  2603  058D                     	;# 
  2604  058E                     	;# 
  2605  058F                     	;# 
  2606  058F                     	;# 
  2607  0590                     	;# 
  2608  0591                     	;# 
  2609  0592                     	;# 
  2610  0593                     	;# 
  2611  060C                     	;# 
  2612  060D                     	;# 
  2613  060E                     	;# 
  2614  060F                     	;# 
  2615  0610                     	;# 
  2616  0611                     	;# 
  2617  0612                     	;# 
  2618  0613                     	;# 
  2619  0614                     	;# 
  2620  0616                     	;# 
  2621  0617                     	;# 
  2622  0618                     	;# 
  2623  0619                     	;# 
  2624  061A                     	;# 
  2625  061B                     	;# 
  2626  061C                     	;# 
  2627  061D                     	;# 
  2628  061E                     	;# 
  2629  068C                     	;# 
  2630  068D                     	;# 
  2631  068E                     	;# 
  2632  068F                     	;# 
  2633  0690                     	;# 
  2634  0691                     	;# 
  2635  0692                     	;# 
  2636  0693                     	;# 
  2637  0694                     	;# 
  2638  070C                     	;# 
  2639  070D                     	;# 
  2640  070E                     	;# 
  2641  070F                     	;# 
  2642  0710                     	;# 
  2643  0711                     	;# 
  2644  0712                     	;# 
  2645  0713                     	;# 
  2646  0714                     	;# 
  2647  0716                     	;# 
  2648  0717                     	;# 
  2649  0718                     	;# 
  2650  0719                     	;# 
  2651  071A                     	;# 
  2652  071B                     	;# 
  2653  071C                     	;# 
  2654  071D                     	;# 
  2655  071E                     	;# 
  2656  0796                     	;# 
  2657  0797                     	;# 
  2658  0798                     	;# 
  2659  0799                     	;# 
  2660  079A                     	;# 
  2661  079B                     	;# 
  2662  080C                     	;# 
  2663  080D                     	;# 
  2664  080E                     	;# 
  2665  080F                     	;# 
  2666  0810                     	;# 
  2667  0811                     	;# 
  2668  0812                     	;# 
  2669  0813                     	;# 
  2670  0814                     	;# 
  2671  081A                     	;# 
  2672  081B                     	;# 
  2673  081C                     	;# 
  2674  081D                     	;# 
  2675  081E                     	;# 
  2676  081F                     	;# 
  2677  088C                     	;# 
  2678  088D                     	;# 
  2679  088E                     	;# 
  2680  088F                     	;# 
  2681  0890                     	;# 
  2682  0891                     	;# 
  2683  0892                     	;# 
  2684  0893                     	;# 
  2685  0895                     	;# 
  2686  0896                     	;# 
  2687  0897                     	;# 
  2688  0898                     	;# 
  2689  0899                     	;# 
  2690  089A                     	;# 
  2691  089B                     	;# 
  2692  090C                     	;# 
  2693  090E                     	;# 
  2694  090F                     	;# 
  2695  091F                     	;# 
  2696  091F                     	;# 
  2697  098F                     	;# 
  2698  098F                     	;# 
  2699  0990                     	;# 
  2700  0991                     	;# 
  2701  0992                     	;# 
  2702  0993                     	;# 
  2703  0994                     	;# 
  2704  0995                     	;# 
  2705  0996                     	;# 
  2706  0997                     	;# 
  2707  0E0F                     	;# 
  2708  0E10                     	;# 
  2709  0E11                     	;# 
  2710  0E12                     	;# 
  2711  0E13                     	;# 
  2712  0E14                     	;# 
  2713  0E15                     	;# 
  2714  0E16                     	;# 
  2715  0E17                     	;# 
  2716  0E18                     	;# 
  2717  0E19                     	;# 
  2718  0E1A                     	;# 
  2719  0E1B                     	;# 
  2720  0E1C                     	;# 
  2721  0E1D                     	;# 
  2722  0E1E                     	;# 
  2723  0E1F                     	;# 
  2724  0E20                     	;# 
  2725  0E21                     	;# 
  2726  0E22                     	;# 
  2727  0E23                     	;# 
  2728  0E24                     	;# 
  2729  0E25                     	;# 
  2730  0E26                     	;# 
  2731  0E27                     	;# 
  2732  0E28                     	;# 
  2733  0E29                     	;# 
  2734  0E2A                     	;# 
  2735  0E2B                     	;# 
  2736  0E2C                     	;# 
  2737  0E2D                     	;# 
  2738  0E2E                     	;# 
  2739  0E2F                     	;# 
  2740  0E30                     	;# 
  2741  0E31                     	;# 
  2742  0E32                     	;# 
  2743  0E33                     	;# 
  2744  0E34                     	;# 
  2745  0E35                     	;# 
  2746  0E36                     	;# 
  2747  0E37                     	;# 
  2748  0E8F                     	;# 
  2749  0E90                     	;# 
  2750  0E91                     	;# 
  2751  0E92                     	;# 
  2752  0E93                     	;# 
  2753  0E94                     	;# 
  2754  0E95                     	;# 
  2755  0E96                     	;# 
  2756  0E97                     	;# 
  2757  0E9C                     	;# 
  2758  0E9D                     	;# 
  2759  0E9E                     	;# 
  2760  0EA1                     	;# 
  2761  0EA2                     	;# 
  2762  0EA3                     	;# 
  2763  0EA4                     	;# 
  2764  0EA5                     	;# 
  2765  0EA9                     	;# 
  2766  0EAA                     	;# 
  2767  0EAB                     	;# 
  2768  0EAC                     	;# 
  2769  0EB1                     	;# 
  2770  0EB2                     	;# 
  2771  0EB3                     	;# 
  2772  0EB8                     	;# 
  2773  0EB9                     	;# 
  2774  0EBA                     	;# 
  2775  0EBB                     	;# 
  2776  0EBC                     	;# 
  2777  0EBD                     	;# 
  2778  0EBE                     	;# 
  2779  0EC3                     	;# 
  2780  0EC5                     	;# 
  2781  0EC6                     	;# 
  2782  0EC7                     	;# 
  2783  0EC8                     	;# 
  2784  0EC9                     	;# 
  2785  0ECA                     	;# 
  2786  0ECB                     	;# 
  2787  0ECC                     	;# 
  2788  0F10                     	;# 
  2789  0F11                     	;# 
  2790  0F12                     	;# 
  2791  0F13                     	;# 
  2792  0F14                     	;# 
  2793  0F15                     	;# 
  2794  0F16                     	;# 
  2795  0F17                     	;# 
  2796  0F18                     	;# 
  2797  0F19                     	;# 
  2798  0F1A                     	;# 
  2799  0F1B                     	;# 
  2800  0F1C                     	;# 
  2801  0F1D                     	;# 
  2802  0F1E                     	;# 
  2803  0F1F                     	;# 
  2804  0F20                     	;# 
  2805  0F21                     	;# 
  2806  0F22                     	;# 
  2807  0F23                     	;# 
  2808  0F24                     	;# 
  2809  0F25                     	;# 
  2810  0F26                     	;# 
  2811  0F27                     	;# 
  2812  0F28                     	;# 
  2813  0F29                     	;# 
  2814  0F2A                     	;# 
  2815  0F2B                     	;# 
  2816  0F2C                     	;# 
  2817  0F2D                     	;# 
  2818  0F2E                     	;# 
  2819  0F2F                     	;# 
  2820  0F30                     	;# 
  2821  0F31                     	;# 
  2822  0F32                     	;# 
  2823  0F38                     	;# 
  2824  0F39                     	;# 
  2825  0F3A                     	;# 
  2826  0F3B                     	;# 
  2827  0F3C                     	;# 
  2828  0F3D                     	;# 
  2829  0F3E                     	;# 
  2830  0F3F                     	;# 
  2831  0F40                     	;# 
  2832  0F41                     	;# 
  2833  0F43                     	;# 
  2834  0F44                     	;# 
  2835  0F45                     	;# 
  2836  0F46                     	;# 
  2837  0F47                     	;# 
  2838  0F48                     	;# 
  2839  0F49                     	;# 
  2840  0F4A                     	;# 
  2841  0F4B                     	;# 
  2842  0F4C                     	;# 
  2843  0F4E                     	;# 
  2844  0F4F                     	;# 
  2845  0F50                     	;# 
  2846  0F51                     	;# 
  2847  0F52                     	;# 
  2848  0F53                     	;# 
  2849  0F54                     	;# 
  2850  0F55                     	;# 
  2851  0F56                     	;# 
  2852  0F57                     	;# 
  2853  0F59                     	;# 
  2854  0F5A                     	;# 
  2855  0F5B                     	;# 
  2856  0F5C                     	;# 
  2857  0F5D                     	;# 
  2858  0F61                     	;# 
  2859  0F62                     	;# 
  2860  0F64                     	;# 
  2861  0F65                     	;# 
  2862  0F66                     	;# 
  2863  0F67                     	;# 
  2864  0F68                     	;# 
  2865  0F69                     	;# 
  2866  0F6A                     	;# 
  2867  0F6B                     	;# 
  2868  0F6C                     	;# 
  2869  0F6D                     	;# 
  2870  0FE4                     	;# 
  2871  0FE5                     	;# 
  2872  0FE6                     	;# 
  2873  0FE7                     	;# 
  2874  0FE8                     	;# 
  2875  0FE9                     	;# 
  2876  0FEA                     	;# 
  2877  0FEB                     	;# 
  2878  0FED                     	;# 
  2879  0FEE                     	;# 
  2880  0FEF                     	;# 
  2881  0000                     	;# 
  2882  0001                     	;# 
  2883  0002                     	;# 
  2884  0003                     	;# 
  2885  0004                     	;# 
  2886  0005                     	;# 
  2887  0006                     	;# 
  2888  0007                     	;# 
  2889  0008                     	;# 
  2890  0009                     	;# 
  2891  000A                     	;# 
  2892  000B                     	;# 
  2893  000C                     	;# 
  2894  000D                     	;# 
  2895  000E                     	;# 
  2896  000F                     	;# 
  2897  0010                     	;# 
  2898  0011                     	;# 
  2899  0012                     	;# 
  2900  0013                     	;# 
  2901  0014                     	;# 
  2902  0015                     	;# 
  2903  0016                     	;# 
  2904  0017                     	;# 
  2905  0018                     	;# 
  2906  0019                     	;# 
  2907  001A                     	;# 
  2908  001C                     	;# 
  2909  001C                     	;# 
  2910  001D                     	;# 
  2911  001D                     	;# 
  2912  001E                     	;# 
  2913  001F                     	;# 
  2914  008C                     	;# 
  2915  008C                     	;# 
  2916  008D                     	;# 
  2917  008E                     	;# 
  2918  008E                     	;# 
  2919  008F                     	;# 
  2920  0090                     	;# 
  2921  0090                     	;# 
  2922  0091                     	;# 
  2923  0093                     	;# 
  2924  0094                     	;# 
  2925  0095                     	;# 
  2926  0096                     	;# 
  2927  0097                     	;# 
  2928  0098                     	;# 
  2929  0099                     	;# 
  2930  009A                     	;# 
  2931  009B                     	;# 
  2932  009C                     	;# 
  2933  009D                     	;# 
  2934  009E                     	;# 
  2935  010C                     	;# 
  2936  010D                     	;# 
  2937  010E                     	;# 
  2938  010E                     	;# 
  2939  010F                     	;# 
  2940  0110                     	;# 
  2941  0110                     	;# 
  2942  0111                     	;# 
  2943  0112                     	;# 
  2944  0112                     	;# 
  2945  0113                     	;# 
  2946  0114                     	;# 
  2947  0114                     	;# 
  2948  0115                     	;# 
  2949  0116                     	;# 
  2950  0116                     	;# 
  2951  0117                     	;# 
  2952  0119                     	;# 
  2953  0119                     	;# 
  2954  0119                     	;# 
  2955  011A                     	;# 
  2956  011A                     	;# 
  2957  011A                     	;# 
  2958  011B                     	;# 
  2959  011B                     	;# 
  2960  011B                     	;# 
  2961  011B                     	;# 
  2962  011B                     	;# 
  2963  011C                     	;# 
  2964  011C                     	;# 
  2965  011C                     	;# 
  2966  011D                     	;# 
  2967  011D                     	;# 
  2968  011D                     	;# 
  2969  011E                     	;# 
  2970  011E                     	;# 
  2971  011E                     	;# 
  2972  011F                     	;# 
  2973  011F                     	;# 
  2974  011F                     	;# 
  2975  011F                     	;# 
  2976  011F                     	;# 
  2977  018C                     	;# 
  2978  018D                     	;# 
  2979  018E                     	;# 
  2980  018F                     	;# 
  2981  0190                     	;# 
  2982  0191                     	;# 
  2983  0192                     	;# 
  2984  0196                     	;# 
  2985  0197                     	;# 
  2986  0198                     	;# 
  2987  0199                     	;# 
  2988  019A                     	;# 
  2989  019B                     	;# 
  2990  019C                     	;# 
  2991  020C                     	;# 
  2992  020C                     	;# 
  2993  020D                     	;# 
  2994  020E                     	;# 
  2995  020F                     	;# 
  2996  020F                     	;# 
  2997  0210                     	;# 
  2998  0210                     	;# 
  2999  0211                     	;# 
  3000  0211                     	;# 
  3001  0212                     	;# 
  3002  0212                     	;# 
  3003  0213                     	;# 
  3004  0214                     	;# 
  3005  0215                     	;# 
  3006  0215                     	;# 
  3007  0216                     	;# 
  3008  0216                     	;# 
  3009  0217                     	;# 
  3010  0217                     	;# 
  3011  0218                     	;# 
  3012  0218                     	;# 
  3013  0219                     	;# 
  3014  021A                     	;# 
  3015  021B                     	;# 
  3016  021B                     	;# 
  3017  021C                     	;# 
  3018  021C                     	;# 
  3019  021D                     	;# 
  3020  021D                     	;# 
  3021  021E                     	;# 
  3022  021F                     	;# 
  3023  028C                     	;# 
  3024  028C                     	;# 
  3025  028D                     	;# 
  3026  028D                     	;# 
  3027  028E                     	;# 
  3028  028F                     	;# 
  3029  0290                     	;# 
  3030  0290                     	;# 
  3031  0291                     	;# 
  3032  0292                     	;# 
  3033  0292                     	;# 
  3034  0293                     	;# 
  3035  0293                     	;# 
  3036  0294                     	;# 
  3037  0295                     	;# 
  3038  0296                     	;# 
  3039  0296                     	;# 
  3040  0297                     	;# 
  3041  0298                     	;# 
  3042  0298                     	;# 
  3043  0299                     	;# 
  3044  0299                     	;# 
  3045  029A                     	;# 
  3046  029B                     	;# 
  3047  029C                     	;# 
  3048  029C                     	;# 
  3049  029D                     	;# 
  3050  030C                     	;# 
  3051  030C                     	;# 
  3052  030D                     	;# 
  3053  030E                     	;# 
  3054  030F                     	;# 
  3055  0310                     	;# 
  3056  0310                     	;# 
  3057  0311                     	;# 
  3058  0312                     	;# 
  3059  0313                     	;# 
  3060  0314                     	;# 
  3061  0314                     	;# 
  3062  0315                     	;# 
  3063  0316                     	;# 
  3064  0317                     	;# 
  3065  0318                     	;# 
  3066  0318                     	;# 
  3067  0319                     	;# 
  3068  031A                     	;# 
  3069  031B                     	;# 
  3070  031C                     	;# 
  3071  031C                     	;# 
  3072  031D                     	;# 
  3073  031E                     	;# 
  3074  031F                     	;# 
  3075  038C                     	;# 
  3076  038C                     	;# 
  3077  038D                     	;# 
  3078  038E                     	;# 
  3079  0390                     	;# 
  3080  0390                     	;# 
  3081  0391                     	;# 
  3082  0392                     	;# 
  3083  040C                     	;# 
  3084  040D                     	;# 
  3085  040E                     	;# 
  3086  040F                     	;# 
  3087  0410                     	;# 
  3088  0411                     	;# 
  3089  0416                     	;# 
  3090  0416                     	;# 
  3091  0417                     	;# 
  3092  0418                     	;# 
  3093  0418                     	;# 
  3094  0419                     	;# 
  3095  041A                     	;# 
  3096  041A                     	;# 
  3097  041B                     	;# 
  3098  041C                     	;# 
  3099  041C                     	;# 
  3100  041D                     	;# 
  3101  041E                     	;# 
  3102  041F                     	;# 
  3103  048C                     	;# 
  3104  048C                     	;# 
  3105  048D                     	;# 
  3106  048E                     	;# 
  3107  048F                     	;# 
  3108  048F                     	;# 
  3109  0490                     	;# 
  3110  0491                     	;# 
  3111  0492                     	;# 
  3112  0492                     	;# 
  3113  0493                     	;# 
  3114  0494                     	;# 
  3115  0495                     	;# 
  3116  0495                     	;# 
  3117  0496                     	;# 
  3118  0497                     	;# 
  3119  0498                     	;# 
  3120  0499                     	;# 
  3121  049A                     	;# 
  3122  049B                     	;# 
  3123  049C                     	;# 
  3124  049D                     	;# 
  3125  050C                     	;# 
  3126  050C                     	;# 
  3127  050D                     	;# 
  3128  050E                     	;# 
  3129  050F                     	;# 
  3130  050F                     	;# 
  3131  0510                     	;# 
  3132  0511                     	;# 
  3133  0512                     	;# 
  3134  0512                     	;# 
  3135  0513                     	;# 
  3136  0514                     	;# 
  3137  0515                     	;# 
  3138  0515                     	;# 
  3139  0516                     	;# 
  3140  0517                     	;# 
  3141  0518                     	;# 
  3142  0519                     	;# 
  3143  051A                     	;# 
  3144  051B                     	;# 
  3145  051C                     	;# 
  3146  051D                     	;# 
  3147  058C                     	;# 
  3148  058C                     	;# 
  3149  058D                     	;# 
  3150  058E                     	;# 
  3151  058F                     	;# 
  3152  058F                     	;# 
  3153  0590                     	;# 
  3154  0591                     	;# 
  3155  0592                     	;# 
  3156  0593                     	;# 
  3157  060C                     	;# 
  3158  060D                     	;# 
  3159  060E                     	;# 
  3160  060F                     	;# 
  3161  0610                     	;# 
  3162  0611                     	;# 
  3163  0612                     	;# 
  3164  0613                     	;# 
  3165  0614                     	;# 
  3166  0616                     	;# 
  3167  0617                     	;# 
  3168  0618                     	;# 
  3169  0619                     	;# 
  3170  061A                     	;# 
  3171  061B                     	;# 
  3172  061C                     	;# 
  3173  061D                     	;# 
  3174  061E                     	;# 
  3175  068C                     	;# 
  3176  068D                     	;# 
  3177  068E                     	;# 
  3178  068F                     	;# 
  3179  0690                     	;# 
  3180  0691                     	;# 
  3181  0692                     	;# 
  3182  0693                     	;# 
  3183  0694                     	;# 
  3184  070C                     	;# 
  3185  070D                     	;# 
  3186  070E                     	;# 
  3187  070F                     	;# 
  3188  0710                     	;# 
  3189  0711                     	;# 
  3190  0712                     	;# 
  3191  0713                     	;# 
  3192  0714                     	;# 
  3193  0716                     	;# 
  3194  0717                     	;# 
  3195  0718                     	;# 
  3196  0719                     	;# 
  3197  071A                     	;# 
  3198  071B                     	;# 
  3199  071C                     	;# 
  3200  071D                     	;# 
  3201  071E                     	;# 
  3202  0796                     	;# 
  3203  0797                     	;# 
  3204  0798                     	;# 
  3205  0799                     	;# 
  3206  079A                     	;# 
  3207  079B                     	;# 
  3208  080C                     	;# 
  3209  080D                     	;# 
  3210  080E                     	;# 
  3211  080F                     	;# 
  3212  0810                     	;# 
  3213  0811                     	;# 
  3214  0812                     	;# 
  3215  0813                     	;# 
  3216  0814                     	;# 
  3217  081A                     	;# 
  3218  081B                     	;# 
  3219  081C                     	;# 
  3220  081D                     	;# 
  3221  081E                     	;# 
  3222  081F                     	;# 
  3223  088C                     	;# 
  3224  088D                     	;# 
  3225  088E                     	;# 
  3226  088F                     	;# 
  3227  0890                     	;# 
  3228  0891                     	;# 
  3229  0892                     	;# 
  3230  0893                     	;# 
  3231  0895                     	;# 
  3232  0896                     	;# 
  3233  0897                     	;# 
  3234  0898                     	;# 
  3235  0899                     	;# 
  3236  089A                     	;# 
  3237  089B                     	;# 
  3238  090C                     	;# 
  3239  090E                     	;# 
  3240  090F                     	;# 
  3241  091F                     	;# 
  3242  091F                     	;# 
  3243  098F                     	;# 
  3244  098F                     	;# 
  3245  0990                     	;# 
  3246  0991                     	;# 
  3247  0992                     	;# 
  3248  0993                     	;# 
  3249  0994                     	;# 
  3250  0995                     	;# 
  3251  0996                     	;# 
  3252  0997                     	;# 
  3253  0E0F                     	;# 
  3254  0E10                     	;# 
  3255  0E11                     	;# 
  3256  0E12                     	;# 
  3257  0E13                     	;# 
  3258  0E14                     	;# 
  3259  0E15                     	;# 
  3260  0E16                     	;# 
  3261  0E17                     	;# 
  3262  0E18                     	;# 
  3263  0E19                     	;# 
  3264  0E1A                     	;# 
  3265  0E1B                     	;# 
  3266  0E1C                     	;# 
  3267  0E1D                     	;# 
  3268  0E1E                     	;# 
  3269  0E1F                     	;# 
  3270  0E20                     	;# 
  3271  0E21                     	;# 
  3272  0E22                     	;# 
  3273  0E23                     	;# 
  3274  0E24                     	;# 
  3275  0E25                     	;# 
  3276  0E26                     	;# 
  3277  0E27                     	;# 
  3278  0E28                     	;# 
  3279  0E29                     	;# 
  3280  0E2A                     	;# 
  3281  0E2B                     	;# 
  3282  0E2C                     	;# 
  3283  0E2D                     	;# 
  3284  0E2E                     	;# 
  3285  0E2F                     	;# 
  3286  0E30                     	;# 
  3287  0E31                     	;# 
  3288  0E32                     	;# 
  3289  0E33                     	;# 
  3290  0E34                     	;# 
  3291  0E35                     	;# 
  3292  0E36                     	;# 
  3293  0E37                     	;# 
  3294  0E8F                     	;# 
  3295  0E90                     	;# 
  3296  0E91                     	;# 
  3297  0E92                     	;# 
  3298  0E93                     	;# 
  3299  0E94                     	;# 
  3300  0E95                     	;# 
  3301  0E96                     	;# 
  3302  0E97                     	;# 
  3303  0E9C                     	;# 
  3304  0E9D                     	;# 
  3305  0E9E                     	;# 
  3306  0EA1                     	;# 
  3307  0EA2                     	;# 
  3308  0EA3                     	;# 
  3309  0EA4                     	;# 
  3310  0EA5                     	;# 
  3311  0EA9                     	;# 
  3312  0EAA                     	;# 
  3313  0EAB                     	;# 
  3314  0EAC                     	;# 
  3315  0EB1                     	;# 
  3316  0EB2                     	;# 
  3317  0EB3                     	;# 
  3318  0EB8                     	;# 
  3319  0EB9                     	;# 
  3320  0EBA                     	;# 
  3321  0EBB                     	;# 
  3322  0EBC                     	;# 
  3323  0EBD                     	;# 
  3324  0EBE                     	;# 
  3325  0EC3                     	;# 
  3326  0EC5                     	;# 
  3327  0EC6                     	;# 
  3328  0EC7                     	;# 
  3329  0EC8                     	;# 
  3330  0EC9                     	;# 
  3331  0ECA                     	;# 
  3332  0ECB                     	;# 
  3333  0ECC                     	;# 
  3334  0F10                     	;# 
  3335  0F11                     	;# 
  3336  0F12                     	;# 
  3337  0F13                     	;# 
  3338  0F14                     	;# 
  3339  0F15                     	;# 
  3340  0F16                     	;# 
  3341  0F17                     	;# 
  3342  0F18                     	;# 
  3343  0F19                     	;# 
  3344  0F1A                     	;# 
  3345  0F1B                     	;# 
  3346  0F1C                     	;# 
  3347  0F1D                     	;# 
  3348  0F1E                     	;# 
  3349  0F1F                     	;# 
  3350  0F20                     	;# 
  3351  0F21                     	;# 
  3352  0F22                     	;# 
  3353  0F23                     	;# 
  3354  0F24                     	;# 
  3355  0F25                     	;# 
  3356  0F26                     	;# 
  3357  0F27                     	;# 
  3358  0F28                     	;# 
  3359  0F29                     	;# 
  3360  0F2A                     	;# 
  3361  0F2B                     	;# 
  3362  0F2C                     	;# 
  3363  0F2D                     	;# 
  3364  0F2E                     	;# 
  3365  0F2F                     	;# 
  3366  0F30                     	;# 
  3367  0F31                     	;# 
  3368  0F32                     	;# 
  3369  0F38                     	;# 
  3370  0F39                     	;# 
  3371  0F3A                     	;# 
  3372  0F3B                     	;# 
  3373  0F3C                     	;# 
  3374  0F3D                     	;# 
  3375  0F3E                     	;# 
  3376  0F3F                     	;# 
  3377  0F40                     	;# 
  3378  0F41                     	;# 
  3379  0F43                     	;# 
  3380  0F44                     	;# 
  3381  0F45                     	;# 
  3382  0F46                     	;# 
  3383  0F47                     	;# 
  3384  0F48                     	;# 
  3385  0F49                     	;# 
  3386  0F4A                     	;# 
  3387  0F4B                     	;# 
  3388  0F4C                     	;# 
  3389  0F4E                     	;# 
  3390  0F4F                     	;# 
  3391  0F50                     	;# 
  3392  0F51                     	;# 
  3393  0F52                     	;# 
  3394  0F53                     	;# 
  3395  0F54                     	;# 
  3396  0F55                     	;# 
  3397  0F56                     	;# 
  3398  0F57                     	;# 
  3399  0F59                     	;# 
  3400  0F5A                     	;# 
  3401  0F5B                     	;# 
  3402  0F5C                     	;# 
  3403  0F5D                     	;# 
  3404  0F61                     	;# 
  3405  0F62                     	;# 
  3406  0F64                     	;# 
  3407  0F65                     	;# 
  3408  0F66                     	;# 
  3409  0F67                     	;# 
  3410  0F68                     	;# 
  3411  0F69                     	;# 
  3412  0F6A                     	;# 
  3413  0F6B                     	;# 
  3414  0F6C                     	;# 
  3415  0F6D                     	;# 
  3416  0FE4                     	;# 
  3417  0FE5                     	;# 
  3418  0FE6                     	;# 
  3419  0FE7                     	;# 
  3420  0FE8                     	;# 
  3421  0FE9                     	;# 
  3422  0FEA                     	;# 
  3423  0FEB                     	;# 
  3424  0FED                     	;# 
  3425  0FEE                     	;# 
  3426  0FEF                     	;# 
  3427  0000                     	;# 
  3428  0001                     	;# 
  3429  0002                     	;# 
  3430  0003                     	;# 
  3431  0004                     	;# 
  3432  0005                     	;# 
  3433  0006                     	;# 
  3434  0007                     	;# 
  3435  0008                     	;# 
  3436  0009                     	;# 
  3437  000A                     	;# 
  3438  000B                     	;# 
  3439  000C                     	;# 
  3440  000D                     	;# 
  3441  000E                     	;# 
  3442  000F                     	;# 
  3443  0010                     	;# 
  3444  0011                     	;# 
  3445  0012                     	;# 
  3446  0013                     	;# 
  3447  0014                     	;# 
  3448  0015                     	;# 
  3449  0016                     	;# 
  3450  0017                     	;# 
  3451  0018                     	;# 
  3452  0019                     	;# 
  3453  001A                     	;# 
  3454  001C                     	;# 
  3455  001C                     	;# 
  3456  001D                     	;# 
  3457  001D                     	;# 
  3458  001E                     	;# 
  3459  001F                     	;# 
  3460  008C                     	;# 
  3461  008C                     	;# 
  3462  008D                     	;# 
  3463  008E                     	;# 
  3464  008E                     	;# 
  3465  008F                     	;# 
  3466  0090                     	;# 
  3467  0090                     	;# 
  3468  0091                     	;# 
  3469  0093                     	;# 
  3470  0094                     	;# 
  3471  0095                     	;# 
  3472  0096                     	;# 
  3473  0097                     	;# 
  3474  0098                     	;# 
  3475  0099                     	;# 
  3476  009A                     	;# 
  3477  009B                     	;# 
  3478  009C                     	;# 
  3479  009D                     	;# 
  3480  009E                     	;# 
  3481  010C                     	;# 
  3482  010D                     	;# 
  3483  010E                     	;# 
  3484  010E                     	;# 
  3485  010F                     	;# 
  3486  0110                     	;# 
  3487  0110                     	;# 
  3488  0111                     	;# 
  3489  0112                     	;# 
  3490  0112                     	;# 
  3491  0113                     	;# 
  3492  0114                     	;# 
  3493  0114                     	;# 
  3494  0115                     	;# 
  3495  0116                     	;# 
  3496  0116                     	;# 
  3497  0117                     	;# 
  3498  0119                     	;# 
  3499  0119                     	;# 
  3500  0119                     	;# 
  3501  011A                     	;# 
  3502  011A                     	;# 
  3503  011A                     	;# 
  3504  011B                     	;# 
  3505  011B                     	;# 
  3506  011B                     	;# 
  3507  011B                     	;# 
  3508  011B                     	;# 
  3509  011C                     	;# 
  3510  011C                     	;# 
  3511  011C                     	;# 
  3512  011D                     	;# 
  3513  011D                     	;# 
  3514  011D                     	;# 
  3515  011E                     	;# 
  3516  011E                     	;# 
  3517  011E                     	;# 
  3518  011F                     	;# 
  3519  011F                     	;# 
  3520  011F                     	;# 
  3521  011F                     	;# 
  3522  011F                     	;# 
  3523  018C                     	;# 
  3524  018D                     	;# 
  3525  018E                     	;# 
  3526  018F                     	;# 
  3527  0190                     	;# 
  3528  0191                     	;# 
  3529  0192                     	;# 
  3530  0196                     	;# 
  3531  0197                     	;# 
  3532  0198                     	;# 
  3533  0199                     	;# 
  3534  019A                     	;# 
  3535  019B                     	;# 
  3536  019C                     	;# 
  3537  020C                     	;# 
  3538  020C                     	;# 
  3539  020D                     	;# 
  3540  020E                     	;# 
  3541  020F                     	;# 
  3542  020F                     	;# 
  3543  0210                     	;# 
  3544  0210                     	;# 
  3545  0211                     	;# 
  3546  0211                     	;# 
  3547  0212                     	;# 
  3548  0212                     	;# 
  3549  0213                     	;# 
  3550  0214                     	;# 
  3551  0215                     	;# 
  3552  0215                     	;# 
  3553  0216                     	;# 
  3554  0216                     	;# 
  3555  0217                     	;# 
  3556  0217                     	;# 
  3557  0218                     	;# 
  3558  0218                     	;# 
  3559  0219                     	;# 
  3560  021A                     	;# 
  3561  021B                     	;# 
  3562  021B                     	;# 
  3563  021C                     	;# 
  3564  021C                     	;# 
  3565  021D                     	;# 
  3566  021D                     	;# 
  3567  021E                     	;# 
  3568  021F                     	;# 
  3569  028C                     	;# 
  3570  028C                     	;# 
  3571  028D                     	;# 
  3572  028D                     	;# 
  3573  028E                     	;# 
  3574  028F                     	;# 
  3575  0290                     	;# 
  3576  0290                     	;# 
  3577  0291                     	;# 
  3578  0292                     	;# 
  3579  0292                     	;# 
  3580  0293                     	;# 
  3581  0293                     	;# 
  3582  0294                     	;# 
  3583  0295                     	;# 
  3584  0296                     	;# 
  3585  0296                     	;# 
  3586  0297                     	;# 
  3587  0298                     	;# 
  3588  0298                     	;# 
  3589  0299                     	;# 
  3590  0299                     	;# 
  3591  029A                     	;# 
  3592  029B                     	;# 
  3593  029C                     	;# 
  3594  029C                     	;# 
  3595  029D                     	;# 
  3596  030C                     	;# 
  3597  030C                     	;# 
  3598  030D                     	;# 
  3599  030E                     	;# 
  3600  030F                     	;# 
  3601  0310                     	;# 
  3602  0310                     	;# 
  3603  0311                     	;# 
  3604  0312                     	;# 
  3605  0313                     	;# 
  3606  0314                     	;# 
  3607  0314                     	;# 
  3608  0315                     	;# 
  3609  0316                     	;# 
  3610  0317                     	;# 
  3611  0318                     	;# 
  3612  0318                     	;# 
  3613  0319                     	;# 
  3614  031A                     	;# 
  3615  031B                     	;# 
  3616  031C                     	;# 
  3617  031C                     	;# 
  3618  031D                     	;# 
  3619  031E                     	;# 
  3620  031F                     	;# 
  3621  038C                     	;# 
  3622  038C                     	;# 
  3623  038D                     	;# 
  3624  038E                     	;# 
  3625  0390                     	;# 
  3626  0390                     	;# 
  3627  0391                     	;# 
  3628  0392                     	;# 
  3629  040C                     	;# 
  3630  040D                     	;# 
  3631  040E                     	;# 
  3632  040F                     	;# 
  3633  0410                     	;# 
  3634  0411                     	;# 
  3635  0416                     	;# 
  3636  0416                     	;# 
  3637  0417                     	;# 
  3638  0418                     	;# 
  3639  0418                     	;# 
  3640  0419                     	;# 
  3641  041A                     	;# 
  3642  041A                     	;# 
  3643  041B                     	;# 
  3644  041C                     	;# 
  3645  041C                     	;# 
  3646  041D                     	;# 
  3647  041E                     	;# 
  3648  041F                     	;# 
  3649  048C                     	;# 
  3650  048C                     	;# 
  3651  048D                     	;# 
  3652  048E                     	;# 
  3653  048F                     	;# 
  3654  048F                     	;# 
  3655  0490                     	;# 
  3656  0491                     	;# 
  3657  0492                     	;# 
  3658  0492                     	;# 
  3659  0493                     	;# 
  3660  0494                     	;# 
  3661  0495                     	;# 
  3662  0495                     	;# 
  3663  0496                     	;# 
  3664  0497                     	;# 
  3665  0498                     	;# 
  3666  0499                     	;# 
  3667  049A                     	;# 
  3668  049B                     	;# 
  3669  049C                     	;# 
  3670  049D                     	;# 
  3671  050C                     	;# 
  3672  050C                     	;# 
  3673  050D                     	;# 
  3674  050E                     	;# 
  3675  050F                     	;# 
  3676  050F                     	;# 
  3677  0510                     	;# 
  3678  0511                     	;# 
  3679  0512                     	;# 
  3680  0512                     	;# 
  3681  0513                     	;# 
  3682  0514                     	;# 
  3683  0515                     	;# 
  3684  0515                     	;# 
  3685  0516                     	;# 
  3686  0517                     	;# 
  3687  0518                     	;# 
  3688  0519                     	;# 
  3689  051A                     	;# 
  3690  051B                     	;# 
  3691  051C                     	;# 
  3692  051D                     	;# 
  3693  058C                     	;# 
  3694  058C                     	;# 
  3695  058D                     	;# 
  3696  058E                     	;# 
  3697  058F                     	;# 
  3698  058F                     	;# 
  3699  0590                     	;# 
  3700  0591                     	;# 
  3701  0592                     	;# 
  3702  0593                     	;# 
  3703  060C                     	;# 
  3704  060D                     	;# 
  3705  060E                     	;# 
  3706  060F                     	;# 
  3707  0610                     	;# 
  3708  0611                     	;# 
  3709  0612                     	;# 
  3710  0613                     	;# 
  3711  0614                     	;# 
  3712  0616                     	;# 
  3713  0617                     	;# 
  3714  0618                     	;# 
  3715  0619                     	;# 
  3716  061A                     	;# 
  3717  061B                     	;# 
  3718  061C                     	;# 
  3719  061D                     	;# 
  3720  061E                     	;# 
  3721  068C                     	;# 
  3722  068D                     	;# 
  3723  068E                     	;# 
  3724  068F                     	;# 
  3725  0690                     	;# 
  3726  0691                     	;# 
  3727  0692                     	;# 
  3728  0693                     	;# 
  3729  0694                     	;# 
  3730  070C                     	;# 
  3731  070D                     	;# 
  3732  070E                     	;# 
  3733  070F                     	;# 
  3734  0710                     	;# 
  3735  0711                     	;# 
  3736  0712                     	;# 
  3737  0713                     	;# 
  3738  0714                     	;# 
  3739  0716                     	;# 
  3740  0717                     	;# 
  3741  0718                     	;# 
  3742  0719                     	;# 
  3743  071A                     	;# 
  3744  071B                     	;# 
  3745  071C                     	;# 
  3746  071D                     	;# 
  3747  071E                     	;# 
  3748  0796                     	;# 
  3749  0797                     	;# 
  3750  0798                     	;# 
  3751  0799                     	;# 
  3752  079A                     	;# 
  3753  079B                     	;# 
  3754  080C                     	;# 
  3755  080D                     	;# 
  3756  080E                     	;# 
  3757  080F                     	;# 
  3758  0810                     	;# 
  3759  0811                     	;# 
  3760  0812                     	;# 
  3761  0813                     	;# 
  3762  0814                     	;# 
  3763  081A                     	;# 
  3764  081B                     	;# 
  3765  081C                     	;# 
  3766  081D                     	;# 
  3767  081E                     	;# 
  3768  081F                     	;# 
  3769  088C                     	;# 
  3770  088D                     	;# 
  3771  088E                     	;# 
  3772  088F                     	;# 
  3773  0890                     	;# 
  3774  0891                     	;# 
  3775  0892                     	;# 
  3776  0893                     	;# 
  3777  0895                     	;# 
  3778  0896                     	;# 
  3779  0897                     	;# 
  3780  0898                     	;# 
  3781  0899                     	;# 
  3782  089A                     	;# 
  3783  089B                     	;# 
  3784  090C                     	;# 
  3785  090E                     	;# 
  3786  090F                     	;# 
  3787  091F                     	;# 
  3788  091F                     	;# 
  3789  098F                     	;# 
  3790  098F                     	;# 
  3791  0990                     	;# 
  3792  0991                     	;# 
  3793  0992                     	;# 
  3794  0993                     	;# 
  3795  0994                     	;# 
  3796  0995                     	;# 
  3797  0996                     	;# 
  3798  0997                     	;# 
  3799  0E0F                     	;# 
  3800  0E10                     	;# 
  3801  0E11                     	;# 
  3802  0E12                     	;# 
  3803  0E13                     	;# 
  3804  0E14                     	;# 
  3805  0E15                     	;# 
  3806  0E16                     	;# 
  3807  0E17                     	;# 
  3808  0E18                     	;# 
  3809  0E19                     	;# 
  3810  0E1A                     	;# 
  3811  0E1B                     	;# 
  3812  0E1C                     	;# 
  3813  0E1D                     	;# 
  3814  0E1E                     	;# 
  3815  0E1F                     	;# 
  3816  0E20                     	;# 
  3817  0E21                     	;# 
  3818  0E22                     	;# 
  3819  0E23                     	;# 
  3820  0E24                     	;# 
  3821  0E25                     	;# 
  3822  0E26                     	;# 
  3823  0E27                     	;# 
  3824  0E28                     	;# 
  3825  0E29                     	;# 
  3826  0E2A                     	;# 
  3827  0E2B                     	;# 
  3828  0E2C                     	;# 
  3829  0E2D                     	;# 
  3830  0E2E                     	;# 
  3831  0E2F                     	;# 
  3832  0E30                     	;# 
  3833  0E31                     	;# 
  3834  0E32                     	;# 
  3835  0E33                     	;# 
  3836  0E34                     	;# 
  3837  0E35                     	;# 
  3838  0E36                     	;# 
  3839  0E37                     	;# 
  3840  0E8F                     	;# 
  3841  0E90                     	;# 
  3842  0E91                     	;# 
  3843  0E92                     	;# 
  3844  0E93                     	;# 
  3845  0E94                     	;# 
  3846  0E95                     	;# 
  3847  0E96                     	;# 
  3848  0E97                     	;# 
  3849  0E9C                     	;# 
  3850  0E9D                     	;# 
  3851  0E9E                     	;# 
  3852  0EA1                     	;# 
  3853  0EA2                     	;# 
  3854  0EA3                     	;# 
  3855  0EA4                     	;# 
  3856  0EA5                     	;# 
  3857  0EA9                     	;# 
  3858  0EAA                     	;# 
  3859  0EAB                     	;# 
  3860  0EAC                     	;# 
  3861  0EB1                     	;# 
  3862  0EB2                     	;# 
  3863  0EB3                     	;# 
  3864  0EB8                     	;# 
  3865  0EB9                     	;# 
  3866  0EBA                     	;# 
  3867  0EBB                     	;# 
  3868  0EBC                     	;# 
  3869  0EBD                     	;# 
  3870  0EBE                     	;# 
  3871  0EC3                     	;# 
  3872  0EC5                     	;# 
  3873  0EC6                     	;# 
  3874  0EC7                     	;# 
  3875  0EC8                     	;# 
  3876  0EC9                     	;# 
  3877  0ECA                     	;# 
  3878  0ECB                     	;# 
  3879  0ECC                     	;# 
  3880  0F10                     	;# 
  3881  0F11                     	;# 
  3882  0F12                     	;# 
  3883  0F13                     	;# 
  3884  0F14                     	;# 
  3885  0F15                     	;# 
  3886  0F16                     	;# 
  3887  0F17                     	;# 
  3888  0F18                     	;# 
  3889  0F19                     	;# 
  3890  0F1A                     	;# 
  3891  0F1B                     	;# 
  3892  0F1C                     	;# 
  3893  0F1D                     	;# 
  3894  0F1E                     	;# 
  3895  0F1F                     	;# 
  3896  0F20                     	;# 
  3897  0F21                     	;# 
  3898  0F22                     	;# 
  3899  0F23                     	;# 
  3900  0F24                     	;# 
  3901  0F25                     	;# 
  3902  0F26                     	;# 
  3903  0F27                     	;# 
  3904  0F28                     	;# 
  3905  0F29                     	;# 
  3906  0F2A                     	;# 
  3907  0F2B                     	;# 
  3908  0F2C                     	;# 
  3909  0F2D                     	;# 
  3910  0F2E                     	;# 
  3911  0F2F                     	;# 
  3912  0F30                     	;# 
  3913  0F31                     	;# 
  3914  0F32                     	;# 
  3915  0F38                     	;# 
  3916  0F39                     	;# 
  3917  0F3A                     	;# 
  3918  0F3B                     	;# 
  3919  0F3C                     	;# 
  3920  0F3D                     	;# 
  3921  0F3E                     	;# 
  3922  0F3F                     	;# 
  3923  0F40                     	;# 
  3924  0F41                     	;# 
  3925  0F43                     	;# 
  3926  0F44                     	;# 
  3927  0F45                     	;# 
  3928  0F46                     	;# 
  3929  0F47                     	;# 
  3930  0F48                     	;# 
  3931  0F49                     	;# 
  3932  0F4A                     	;# 
  3933  0F4B                     	;# 
  3934  0F4C                     	;# 
  3935  0F4E                     	;# 
  3936  0F4F                     	;# 
  3937  0F50                     	;# 
  3938  0F51                     	;# 
  3939  0F52                     	;# 
  3940  0F53                     	;# 
  3941  0F54                     	;# 
  3942  0F55                     	;# 
  3943  0F56                     	;# 
  3944  0F57                     	;# 
  3945  0F59                     	;# 
  3946  0F5A                     	;# 
  3947  0F5B                     	;# 
  3948  0F5C                     	;# 
  3949  0F5D                     	;# 
  3950  0F61                     	;# 
  3951  0F62                     	;# 
  3952  0F64                     	;# 
  3953  0F65                     	;# 
  3954  0F66                     	;# 
  3955  0F67                     	;# 
  3956  0F68                     	;# 
  3957  0F69                     	;# 
  3958  0F6A                     	;# 
  3959  0F6B                     	;# 
  3960  0F6C                     	;# 
  3961  0F6D                     	;# 
  3962  0FE4                     	;# 
  3963  0FE5                     	;# 
  3964  0FE6                     	;# 
  3965  0FE7                     	;# 
  3966  0FE8                     	;# 
  3967  0FE9                     	;# 
  3968  0FEA                     	;# 
  3969  0FEB                     	;# 
  3970  0FED                     	;# 
  3971  0FEE                     	;# 
  3972  0FEF                     	;# 
  3973  0000                     	;# 
  3974  0001                     	;# 
  3975  0002                     	;# 
  3976  0003                     	;# 
  3977  0004                     	;# 
  3978  0005                     	;# 
  3979  0006                     	;# 
  3980  0007                     	;# 
  3981  0008                     	;# 
  3982  0009                     	;# 
  3983  000A                     	;# 
  3984  000B                     	;# 
  3985  000C                     	;# 
  3986  000D                     	;# 
  3987  000E                     	;# 
  3988  000F                     	;# 
  3989  0010                     	;# 
  3990  0011                     	;# 
  3991  0012                     	;# 
  3992  0013                     	;# 
  3993  0014                     	;# 
  3994  0015                     	;# 
  3995  0016                     	;# 
  3996  0017                     	;# 
  3997  0018                     	;# 
  3998  0019                     	;# 
  3999  001A                     	;# 
  4000  001C                     	;# 
  4001  001C                     	;# 
  4002  001D                     	;# 
  4003  001D                     	;# 
  4004  001E                     	;# 
  4005  001F                     	;# 
  4006  008C                     	;# 
  4007  008C                     	;# 
  4008  008D                     	;# 
  4009  008E                     	;# 
  4010  008E                     	;# 
  4011  008F                     	;# 
  4012  0090                     	;# 
  4013  0090                     	;# 
  4014  0091                     	;# 
  4015  0093                     	;# 
  4016  0094                     	;# 
  4017  0095                     	;# 
  4018  0096                     	;# 
  4019  0097                     	;# 
  4020  0098                     	;# 
  4021  0099                     	;# 
  4022  009A                     	;# 
  4023  009B                     	;# 
  4024  009C                     	;# 
  4025  009D                     	;# 
  4026  009E                     	;# 
  4027  010C                     	;# 
  4028  010D                     	;# 
  4029  010E                     	;# 
  4030  010E                     	;# 
  4031  010F                     	;# 
  4032  0110                     	;# 
  4033  0110                     	;# 
  4034  0111                     	;# 
  4035  0112                     	;# 
  4036  0112                     	;# 
  4037  0113                     	;# 
  4038  0114                     	;# 
  4039  0114                     	;# 
  4040  0115                     	;# 
  4041  0116                     	;# 
  4042  0116                     	;# 
  4043  0117                     	;# 
  4044  0119                     	;# 
  4045  0119                     	;# 
  4046  0119                     	;# 
  4047  011A                     	;# 
  4048  011A                     	;# 
  4049  011A                     	;# 
  4050  011B                     	;# 
  4051  011B                     	;# 
  4052  011B                     	;# 
  4053  011B                     	;# 
  4054  011B                     	;# 
  4055  011C                     	;# 
  4056  011C                     	;# 
  4057  011C                     	;# 
  4058  011D                     	;# 
  4059  011D                     	;# 
  4060  011D                     	;# 
  4061  011E                     	;# 
  4062  011E                     	;# 
  4063  011E                     	;# 
  4064  011F                     	;# 
  4065  011F                     	;# 
  4066  011F                     	;# 
  4067  011F                     	;# 
  4068  011F                     	;# 
  4069  018C                     	;# 
  4070  018D                     	;# 
  4071  018E                     	;# 
  4072  018F                     	;# 
  4073  0190                     	;# 
  4074  0191                     	;# 
  4075  0192                     	;# 
  4076  0196                     	;# 
  4077  0197                     	;# 
  4078  0198                     	;# 
  4079  0199                     	;# 
  4080  019A                     	;# 
  4081  019B                     	;# 
  4082  019C                     	;# 
  4083  020C                     	;# 
  4084  020C                     	;# 
  4085  020D                     	;# 
  4086  020E                     	;# 
  4087  020F                     	;# 
  4088  020F                     	;# 
  4089  0210                     	;# 
  4090  0210                     	;# 
  4091  0211                     	;# 
  4092  0211                     	;# 
  4093  0212                     	;# 
  4094  0212                     	;# 
  4095  0213                     	;# 
  4096  0214                     	;# 
  4097  0215                     	;# 
  4098  0215                     	;# 
  4099  0216                     	;# 
  4100  0216                     	;# 
  4101  0217                     	;# 
  4102  0217                     	;# 
  4103  0218                     	;# 
  4104  0218                     	;# 
  4105  0219                     	;# 
  4106  021A                     	;# 
  4107  021B                     	;# 
  4108  021B                     	;# 
  4109  021C                     	;# 
  4110  021C                     	;# 
  4111  021D                     	;# 
  4112  021D                     	;# 
  4113  021E                     	;# 
  4114  021F                     	;# 
  4115  028C                     	;# 
  4116  028C                     	;# 
  4117  028D                     	;# 
  4118  028D                     	;# 
  4119  028E                     	;# 
  4120  028F                     	;# 
  4121  0290                     	;# 
  4122  0290                     	;# 
  4123  0291                     	;# 
  4124  0292                     	;# 
  4125  0292                     	;# 
  4126  0293                     	;# 
  4127  0293                     	;# 
  4128  0294                     	;# 
  4129  0295                     	;# 
  4130  0296                     	;# 
  4131  0296                     	;# 
  4132  0297                     	;# 
  4133  0298                     	;# 
  4134  0298                     	;# 
  4135  0299                     	;# 
  4136  0299                     	;# 
  4137  029A                     	;# 
  4138  029B                     	;# 
  4139  029C                     	;# 
  4140  029C                     	;# 
  4141  029D                     	;# 
  4142  030C                     	;# 
  4143  030C                     	;# 
  4144  030D                     	;# 
  4145  030E                     	;# 
  4146  030F                     	;# 
  4147  0310                     	;# 
  4148  0310                     	;# 
  4149  0311                     	;# 
  4150  0312                     	;# 
  4151  0313                     	;# 
  4152  0314                     	;# 
  4153  0314                     	;# 
  4154  0315                     	;# 
  4155  0316                     	;# 
  4156  0317                     	;# 
  4157  0318                     	;# 
  4158  0318                     	;# 
  4159  0319                     	;# 
  4160  031A                     	;# 
  4161  031B                     	;# 
  4162  031C                     	;# 
  4163  031C                     	;# 
  4164  031D                     	;# 
  4165  031E                     	;# 
  4166  031F                     	;# 
  4167  038C                     	;# 
  4168  038C                     	;# 
  4169  038D                     	;# 
  4170  038E                     	;# 
  4171  0390                     	;# 
  4172  0390                     	;# 
  4173  0391                     	;# 
  4174  0392                     	;# 
  4175  040C                     	;# 
  4176  040D                     	;# 
  4177  040E                     	;# 
  4178  040F                     	;# 
  4179  0410                     	;# 
  4180  0411                     	;# 
  4181  0416                     	;# 
  4182  0416                     	;# 
  4183  0417                     	;# 
  4184  0418                     	;# 
  4185  0418                     	;# 
  4186  0419                     	;# 
  4187  041A                     	;# 
  4188  041A                     	;# 
  4189  041B                     	;# 
  4190  041C                     	;# 
  4191  041C                     	;# 
  4192  041D                     	;# 
  4193  041E                     	;# 
  4194  041F                     	;# 
  4195  048C                     	;# 
  4196  048C                     	;# 
  4197  048D                     	;# 
  4198  048E                     	;# 
  4199  048F                     	;# 
  4200  048F                     	;# 
  4201  0490                     	;# 
  4202  0491                     	;# 
  4203  0492                     	;# 
  4204  0492                     	;# 
  4205  0493                     	;# 
  4206  0494                     	;# 
  4207  0495                     	;# 
  4208  0495                     	;# 
  4209  0496                     	;# 
  4210  0497                     	;# 
  4211  0498                     	;# 
  4212  0499                     	;# 
  4213  049A                     	;# 
  4214  049B                     	;# 
  4215  049C                     	;# 
  4216  049D                     	;# 
  4217  050C                     	;# 
  4218  050C                     	;# 
  4219  050D                     	;# 
  4220  050E                     	;# 
  4221  050F                     	;# 
  4222  050F                     	;# 
  4223  0510                     	;# 
  4224  0511                     	;# 
  4225  0512                     	;# 
  4226  0512                     	;# 
  4227  0513                     	;# 
  4228  0514                     	;# 
  4229  0515                     	;# 
  4230  0515                     	;# 
  4231  0516                     	;# 
  4232  0517                     	;# 
  4233  0518                     	;# 
  4234  0519                     	;# 
  4235  051A                     	;# 
  4236  051B                     	;# 
  4237  051C                     	;# 
  4238  051D                     	;# 
  4239  058C                     	;# 
  4240  058C                     	;# 
  4241  058D                     	;# 
  4242  058E                     	;# 
  4243  058F                     	;# 
  4244  058F                     	;# 
  4245  0590                     	;# 
  4246  0591                     	;# 
  4247  0592                     	;# 
  4248  0593                     	;# 
  4249  060C                     	;# 
  4250  060D                     	;# 
  4251  060E                     	;# 
  4252  060F                     	;# 
  4253  0610                     	;# 
  4254  0611                     	;# 
  4255  0612                     	;# 
  4256  0613                     	;# 
  4257  0614                     	;# 
  4258  0616                     	;# 
  4259  0617                     	;# 
  4260  0618                     	;# 
  4261  0619                     	;# 
  4262  061A                     	;# 
  4263  061B                     	;# 
  4264  061C                     	;# 
  4265  061D                     	;# 
  4266  061E                     	;# 
  4267  068C                     	;# 
  4268  068D                     	;# 
  4269  068E                     	;# 
  4270  068F                     	;# 
  4271  0690                     	;# 
  4272  0691                     	;# 
  4273  0692                     	;# 
  4274  0693                     	;# 
  4275  0694                     	;# 
  4276  070C                     	;# 
  4277  070D                     	;# 
  4278  070E                     	;# 
  4279  070F                     	;# 
  4280  0710                     	;# 
  4281  0711                     	;# 
  4282  0712                     	;# 
  4283  0713                     	;# 
  4284  0714                     	;# 
  4285  0716                     	;# 
  4286  0717                     	;# 
  4287  0718                     	;# 
  4288  0719                     	;# 
  4289  071A                     	;# 
  4290  071B                     	;# 
  4291  071C                     	;# 
  4292  071D                     	;# 
  4293  071E                     	;# 
  4294  0796                     	;# 
  4295  0797                     	;# 
  4296  0798                     	;# 
  4297  0799                     	;# 
  4298  079A                     	;# 
  4299  079B                     	;# 
  4300  080C                     	;# 
  4301  080D                     	;# 
  4302  080E                     	;# 
  4303  080F                     	;# 
  4304  0810                     	;# 
  4305  0811                     	;# 
  4306  0812                     	;# 
  4307  0813                     	;# 
  4308  0814                     	;# 
  4309  081A                     	;# 
  4310  081B                     	;# 
  4311  081C                     	;# 
  4312  081D                     	;# 
  4313  081E                     	;# 
  4314  081F                     	;# 
  4315  088C                     	;# 
  4316  088D                     	;# 
  4317  088E                     	;# 
  4318  088F                     	;# 
  4319  0890                     	;# 
  4320  0891                     	;# 
  4321  0892                     	;# 
  4322  0893                     	;# 
  4323  0895                     	;# 
  4324  0896                     	;# 
  4325  0897                     	;# 
  4326  0898                     	;# 
  4327  0899                     	;# 
  4328  089A                     	;# 
  4329  089B                     	;# 
  4330  090C                     	;# 
  4331  090E                     	;# 
  4332  090F                     	;# 
  4333  091F                     	;# 
  4334  091F                     	;# 
  4335  098F                     	;# 
  4336  098F                     	;# 
  4337  0990                     	;# 
  4338  0991                     	;# 
  4339  0992                     	;# 
  4340  0993                     	;# 
  4341  0994                     	;# 
  4342  0995                     	;# 
  4343  0996                     	;# 
  4344  0997                     	;# 
  4345  0E0F                     	;# 
  4346  0E10                     	;# 
  4347  0E11                     	;# 
  4348  0E12                     	;# 
  4349  0E13                     	;# 
  4350  0E14                     	;# 
  4351  0E15                     	;# 
  4352  0E16                     	;# 
  4353  0E17                     	;# 
  4354  0E18                     	;# 
  4355  0E19                     	;# 
  4356  0E1A                     	;# 
  4357  0E1B                     	;# 
  4358  0E1C                     	;# 
  4359  0E1D                     	;# 
  4360  0E1E                     	;# 
  4361  0E1F                     	;# 
  4362  0E20                     	;# 
  4363  0E21                     	;# 
  4364  0E22                     	;# 
  4365  0E23                     	;# 
  4366  0E24                     	;# 
  4367  0E25                     	;# 
  4368  0E26                     	;# 
  4369  0E27                     	;# 
  4370  0E28                     	;# 
  4371  0E29                     	;# 
  4372  0E2A                     	;# 
  4373  0E2B                     	;# 
  4374  0E2C                     	;# 
  4375  0E2D                     	;# 
  4376  0E2E                     	;# 
  4377  0E2F                     	;# 
  4378  0E30                     	;# 
  4379  0E31                     	;# 
  4380  0E32                     	;# 
  4381  0E33                     	;# 
  4382  0E34                     	;# 
  4383  0E35                     	;# 
  4384  0E36                     	;# 
  4385  0E37                     	;# 
  4386  0E8F                     	;# 
  4387  0E90                     	;# 
  4388  0E91                     	;# 
  4389  0E92                     	;# 
  4390  0E93                     	;# 
  4391  0E94                     	;# 
  4392  0E95                     	;# 
  4393  0E96                     	;# 
  4394  0E97                     	;# 
  4395  0E9C                     	;# 
  4396  0E9D                     	;# 
  4397  0E9E                     	;# 
  4398  0EA1                     	;# 
  4399  0EA2                     	;# 
  4400  0EA3                     	;# 
  4401  0EA4                     	;# 
  4402  0EA5                     	;# 
  4403  0EA9                     	;# 
  4404  0EAA                     	;# 
  4405  0EAB                     	;# 
  4406  0EAC                     	;# 
  4407  0EB1                     	;# 
  4408  0EB2                     	;# 
  4409  0EB3                     	;# 
  4410  0EB8                     	;# 
  4411  0EB9                     	;# 
  4412  0EBA                     	;# 
  4413  0EBB                     	;# 
  4414  0EBC                     	;# 
  4415  0EBD                     	;# 
  4416  0EBE                     	;# 
  4417  0EC3                     	;# 
  4418  0EC5                     	;# 
  4419  0EC6                     	;# 
  4420  0EC7                     	;# 
  4421  0EC8                     	;# 
  4422  0EC9                     	;# 
  4423  0ECA                     	;# 
  4424  0ECB                     	;# 
  4425  0ECC                     	;# 
  4426  0F10                     	;# 
  4427  0F11                     	;# 
  4428  0F12                     	;# 
  4429  0F13                     	;# 
  4430  0F14                     	;# 
  4431  0F15                     	;# 
  4432  0F16                     	;# 
  4433  0F17                     	;# 
  4434  0F18                     	;# 
  4435  0F19                     	;# 
  4436  0F1A                     	;# 
  4437  0F1B                     	;# 
  4438  0F1C                     	;# 
  4439  0F1D                     	;# 
  4440  0F1E                     	;# 
  4441  0F1F                     	;# 
  4442  0F20                     	;# 
  4443  0F21                     	;# 
  4444  0F22                     	;# 
  4445  0F23                     	;# 
  4446  0F24                     	;# 
  4447  0F25                     	;# 
  4448  0F26                     	;# 
  4449  0F27                     	;# 
  4450  0F28                     	;# 
  4451  0F29                     	;# 
  4452  0F2A                     	;# 
  4453  0F2B                     	;# 
  4454  0F2C                     	;# 
  4455  0F2D                     	;# 
  4456  0F2E                     	;# 
  4457  0F2F                     	;# 
  4458  0F30                     	;# 
  4459  0F31                     	;# 
  4460  0F32                     	;# 
  4461  0F38                     	;# 
  4462  0F39                     	;# 
  4463  0F3A                     	;# 
  4464  0F3B                     	;# 
  4465  0F3C                     	;# 
  4466  0F3D                     	;# 
  4467  0F3E                     	;# 
  4468  0F3F                     	;# 
  4469  0F40                     	;# 
  4470  0F41                     	;# 
  4471  0F43                     	;# 
  4472  0F44                     	;# 
  4473  0F45                     	;# 
  4474  0F46                     	;# 
  4475  0F47                     	;# 
  4476  0F48                     	;# 
  4477  0F49                     	;# 
  4478  0F4A                     	;# 
  4479  0F4B                     	;# 
  4480  0F4C                     	;# 
  4481  0F4E                     	;# 
  4482  0F4F                     	;# 
  4483  0F50                     	;# 
  4484  0F51                     	;# 
  4485  0F52                     	;# 
  4486  0F53                     	;# 
  4487  0F54                     	;# 
  4488  0F55                     	;# 
  4489  0F56                     	;# 
  4490  0F57                     	;# 
  4491  0F59                     	;# 
  4492  0F5A                     	;# 
  4493  0F5B                     	;# 
  4494  0F5C                     	;# 
  4495  0F5D                     	;# 
  4496  0F61                     	;# 
  4497  0F62                     	;# 
  4498  0F64                     	;# 
  4499  0F65                     	;# 
  4500  0F66                     	;# 
  4501  0F67                     	;# 
  4502  0F68                     	;# 
  4503  0F69                     	;# 
  4504  0F6A                     	;# 
  4505  0F6B                     	;# 
  4506  0F6C                     	;# 
  4507  0F6D                     	;# 
  4508  0FE4                     	;# 
  4509  0FE5                     	;# 
  4510  0FE6                     	;# 
  4511  0FE7                     	;# 
  4512  0FE8                     	;# 
  4513  0FE9                     	;# 
  4514  0FEA                     	;# 
  4515  0FEB                     	;# 
  4516  0FED                     	;# 
  4517  0FEE                     	;# 
  4518  0FEF                     	;# 
  4519  0000                     	;# 
  4520  0001                     	;# 
  4521  0002                     	;# 
  4522  0003                     	;# 
  4523  0004                     	;# 
  4524  0005                     	;# 
  4525  0006                     	;# 
  4526  0007                     	;# 
  4527  0008                     	;# 
  4528  0009                     	;# 
  4529  000A                     	;# 
  4530  000B                     	;# 
  4531  000C                     	;# 
  4532  000D                     	;# 
  4533  000E                     	;# 
  4534  000F                     	;# 
  4535  0010                     	;# 
  4536  0011                     	;# 
  4537  0012                     	;# 
  4538  0013                     	;# 
  4539  0014                     	;# 
  4540  0015                     	;# 
  4541  0016                     	;# 
  4542  0017                     	;# 
  4543  0018                     	;# 
  4544  0019                     	;# 
  4545  001A                     	;# 
  4546  001C                     	;# 
  4547  001C                     	;# 
  4548  001D                     	;# 
  4549  001D                     	;# 
  4550  001E                     	;# 
  4551  001F                     	;# 
  4552  008C                     	;# 
  4553  008C                     	;# 
  4554  008D                     	;# 
  4555  008E                     	;# 
  4556  008E                     	;# 
  4557  008F                     	;# 
  4558  0090                     	;# 
  4559  0090                     	;# 
  4560  0091                     	;# 
  4561  0093                     	;# 
  4562  0094                     	;# 
  4563  0095                     	;# 
  4564  0096                     	;# 
  4565  0097                     	;# 
  4566  0098                     	;# 
  4567  0099                     	;# 
  4568  009A                     	;# 
  4569  009B                     	;# 
  4570  009C                     	;# 
  4571  009D                     	;# 
  4572  009E                     	;# 
  4573  010C                     	;# 
  4574  010D                     	;# 
  4575  010E                     	;# 
  4576  010E                     	;# 
  4577  010F                     	;# 
  4578  0110                     	;# 
  4579  0110                     	;# 
  4580  0111                     	;# 
  4581  0112                     	;# 
  4582  0112                     	;# 
  4583  0113                     	;# 
  4584  0114                     	;# 
  4585  0114                     	;# 
  4586  0115                     	;# 
  4587  0116                     	;# 
  4588  0116                     	;# 
  4589  0117                     	;# 
  4590  0119                     	;# 
  4591  0119                     	;# 
  4592  0119                     	;# 
  4593  011A                     	;# 
  4594  011A                     	;# 
  4595  011A                     	;# 
  4596  011B                     	;# 
  4597  011B                     	;# 
  4598  011B                     	;# 
  4599  011B                     	;# 
  4600  011B                     	;# 
  4601  011C                     	;# 
  4602  011C                     	;# 
  4603  011C                     	;# 
  4604  011D                     	;# 
  4605  011D                     	;# 
  4606  011D                     	;# 
  4607  011E                     	;# 
  4608  011E                     	;# 
  4609  011E                     	;# 
  4610  011F                     	;# 
  4611  011F                     	;# 
  4612  011F                     	;# 
  4613  011F                     	;# 
  4614  011F                     	;# 
  4615  018C                     	;# 
  4616  018D                     	;# 
  4617  018E                     	;# 
  4618  018F                     	;# 
  4619  0190                     	;# 
  4620  0191                     	;# 
  4621  0192                     	;# 
  4622  0196                     	;# 
  4623  0197                     	;# 
  4624  0198                     	;# 
  4625  0199                     	;# 
  4626  019A                     	;# 
  4627  019B                     	;# 
  4628  019C                     	;# 
  4629  020C                     	;# 
  4630  020C                     	;# 
  4631  020D                     	;# 
  4632  020E                     	;# 
  4633  020F                     	;# 
  4634  020F                     	;# 
  4635  0210                     	;# 
  4636  0210                     	;# 
  4637  0211                     	;# 
  4638  0211                     	;# 
  4639  0212                     	;# 
  4640  0212                     	;# 
  4641  0213                     	;# 
  4642  0214                     	;# 
  4643  0215                     	;# 
  4644  0215                     	;# 
  4645  0216                     	;# 
  4646  0216                     	;# 
  4647  0217                     	;# 
  4648  0217                     	;# 
  4649  0218                     	;# 
  4650  0218                     	;# 
  4651  0219                     	;# 
  4652  021A                     	;# 
  4653  021B                     	;# 
  4654  021B                     	;# 
  4655  021C                     	;# 
  4656  021C                     	;# 
  4657  021D                     	;# 
  4658  021D                     	;# 
  4659  021E                     	;# 
  4660  021F                     	;# 
  4661  028C                     	;# 
  4662  028C                     	;# 
  4663  028D                     	;# 
  4664  028D                     	;# 
  4665  028E                     	;# 
  4666  028F                     	;# 
  4667  0290                     	;# 
  4668  0290                     	;# 
  4669  0291                     	;# 
  4670  0292                     	;# 
  4671  0292                     	;# 
  4672  0293                     	;# 
  4673  0293                     	;# 
  4674  0294                     	;# 
  4675  0295                     	;# 
  4676  0296                     	;# 
  4677  0296                     	;# 
  4678  0297                     	;# 
  4679  0298                     	;# 
  4680  0298                     	;# 
  4681  0299                     	;# 
  4682  0299                     	;# 
  4683  029A                     	;# 
  4684  029B                     	;# 
  4685  029C                     	;# 
  4686  029C                     	;# 
  4687  029D                     	;# 
  4688  030C                     	;# 
  4689  030C                     	;# 
  4690  030D                     	;# 
  4691  030E                     	;# 
  4692  030F                     	;# 
  4693  0310                     	;# 
  4694  0310                     	;# 
  4695  0311                     	;# 
  4696  0312                     	;# 
  4697  0313                     	;# 
  4698  0314                     	;# 
  4699  0314                     	;# 
  4700  0315                     	;# 
  4701  0316                     	;# 
  4702  0317                     	;# 
  4703  0318                     	;# 
  4704  0318                     	;# 
  4705  0319                     	;# 
  4706  031A                     	;# 
  4707  031B                     	;# 
  4708  031C                     	;# 
  4709  031C                     	;# 
  4710  031D                     	;# 
  4711  031E                     	;# 
  4712  031F                     	;# 
  4713  038C                     	;# 
  4714  038C                     	;# 
  4715  038D                     	;# 
  4716  038E                     	;# 
  4717  0390                     	;# 
  4718  0390                     	;# 
  4719  0391                     	;# 
  4720  0392                     	;# 
  4721  040C                     	;# 
  4722  040D                     	;# 
  4723  040E                     	;# 
  4724  040F                     	;# 
  4725  0410                     	;# 
  4726  0411                     	;# 
  4727  0416                     	;# 
  4728  0416                     	;# 
  4729  0417                     	;# 
  4730  0418                     	;# 
  4731  0418                     	;# 
  4732  0419                     	;# 
  4733  041A                     	;# 
  4734  041A                     	;# 
  4735  041B                     	;# 
  4736  041C                     	;# 
  4737  041C                     	;# 
  4738  041D                     	;# 
  4739  041E                     	;# 
  4740  041F                     	;# 
  4741  048C                     	;# 
  4742  048C                     	;# 
  4743  048D                     	;# 
  4744  048E                     	;# 
  4745  048F                     	;# 
  4746  048F                     	;# 
  4747  0490                     	;# 
  4748  0491                     	;# 
  4749  0492                     	;# 
  4750  0492                     	;# 
  4751  0493                     	;# 
  4752  0494                     	;# 
  4753  0495                     	;# 
  4754  0495                     	;# 
  4755  0496                     	;# 
  4756  0497                     	;# 
  4757  0498                     	;# 
  4758  0499                     	;# 
  4759  049A                     	;# 
  4760  049B                     	;# 
  4761  049C                     	;# 
  4762  049D                     	;# 
  4763  050C                     	;# 
  4764  050C                     	;# 
  4765  050D                     	;# 
  4766  050E                     	;# 
  4767  050F                     	;# 
  4768  050F                     	;# 
  4769  0510                     	;# 
  4770  0511                     	;# 
  4771  0512                     	;# 
  4772  0512                     	;# 
  4773  0513                     	;# 
  4774  0514                     	;# 
  4775  0515                     	;# 
  4776  0515                     	;# 
  4777  0516                     	;# 
  4778  0517                     	;# 
  4779  0518                     	;# 
  4780  0519                     	;# 
  4781  051A                     	;# 
  4782  051B                     	;# 
  4783  051C                     	;# 
  4784  051D                     	;# 
  4785  058C                     	;# 
  4786  058C                     	;# 
  4787  058D                     	;# 
  4788  058E                     	;# 
  4789  058F                     	;# 
  4790  058F                     	;# 
  4791  0590                     	;# 
  4792  0591                     	;# 
  4793  0592                     	;# 
  4794  0593                     	;# 
  4795  060C                     	;# 
  4796  060D                     	;# 
  4797  060E                     	;# 
  4798  060F                     	;# 
  4799  0610                     	;# 
  4800  0611                     	;# 
  4801  0612                     	;# 
  4802  0613                     	;# 
  4803  0614                     	;# 
  4804  0616                     	;# 
  4805  0617                     	;# 
  4806  0618                     	;# 
  4807  0619                     	;# 
  4808  061A                     	;# 
  4809  061B                     	;# 
  4810  061C                     	;# 
  4811  061D                     	;# 
  4812  061E                     	;# 
  4813  068C                     	;# 
  4814  068D                     	;# 
  4815  068E                     	;# 
  4816  068F                     	;# 
  4817  0690                     	;# 
  4818  0691                     	;# 
  4819  0692                     	;# 
  4820  0693                     	;# 
  4821  0694                     	;# 
  4822  070C                     	;# 
  4823  070D                     	;# 
  4824  070E                     	;# 
  4825  070F                     	;# 
  4826  0710                     	;# 
  4827  0711                     	;# 
  4828  0712                     	;# 
  4829  0713                     	;# 
  4830  0714                     	;# 
  4831  0716                     	;# 
  4832  0717                     	;# 
  4833  0718                     	;# 
  4834  0719                     	;# 
  4835  071A                     	;# 
  4836  071B                     	;# 
  4837  071C                     	;# 
  4838  071D                     	;# 
  4839  071E                     	;# 
  4840  0796                     	;# 
  4841  0797                     	;# 
  4842  0798                     	;# 
  4843  0799                     	;# 
  4844  079A                     	;# 
  4845  079B                     	;# 
  4846  080C                     	;# 
  4847  080D                     	;# 
  4848  080E                     	;# 
  4849  080F                     	;# 
  4850  0810                     	;# 
  4851  0811                     	;# 
  4852  0812                     	;# 
  4853  0813                     	;# 
  4854  0814                     	;# 
  4855  081A                     	;# 
  4856  081B                     	;# 
  4857  081C                     	;# 
  4858  081D                     	;# 
  4859  081E                     	;# 
  4860  081F                     	;# 
  4861  088C                     	;# 
  4862  088D                     	;# 
  4863  088E                     	;# 
  4864  088F                     	;# 
  4865  0890                     	;# 
  4866  0891                     	;# 
  4867  0892                     	;# 
  4868  0893                     	;# 
  4869  0895                     	;# 
  4870  0896                     	;# 
  4871  0897                     	;# 
  4872  0898                     	;# 
  4873  0899                     	;# 
  4874  089A                     	;# 
  4875  089B                     	;# 
  4876  090C                     	;# 
  4877  090E                     	;# 
  4878  090F                     	;# 
  4879  091F                     	;# 
  4880  091F                     	;# 
  4881  098F                     	;# 
  4882  098F                     	;# 
  4883  0990                     	;# 
  4884  0991                     	;# 
  4885  0992                     	;# 
  4886  0993                     	;# 
  4887  0994                     	;# 
  4888  0995                     	;# 
  4889  0996                     	;# 
  4890  0997                     	;# 
  4891  0E0F                     	;# 
  4892  0E10                     	;# 
  4893  0E11                     	;# 
  4894  0E12                     	;# 
  4895  0E13                     	;# 
  4896  0E14                     	;# 
  4897  0E15                     	;# 
  4898  0E16                     	;# 
  4899  0E17                     	;# 
  4900  0E18                     	;# 
  4901  0E19                     	;# 
  4902  0E1A                     	;# 
  4903  0E1B                     	;# 
  4904  0E1C                     	;# 
  4905  0E1D                     	;# 
  4906  0E1E                     	;# 
  4907  0E1F                     	;# 
  4908  0E20                     	;# 
  4909  0E21                     	;# 
  4910  0E22                     	;# 
  4911  0E23                     	;# 
  4912  0E24                     	;# 
  4913  0E25                     	;# 
  4914  0E26                     	;# 
  4915  0E27                     	;# 
  4916  0E28                     	;# 
  4917  0E29                     	;# 
  4918  0E2A                     	;# 
  4919  0E2B                     	;# 
  4920  0E2C                     	;# 
  4921  0E2D                     	;# 
  4922  0E2E                     	;# 
  4923  0E2F                     	;# 
  4924  0E30                     	;# 
  4925  0E31                     	;# 
  4926  0E32                     	;# 
  4927  0E33                     	;# 
  4928  0E34                     	;# 
  4929  0E35                     	;# 
  4930  0E36                     	;# 
  4931  0E37                     	;# 
  4932  0E8F                     	;# 
  4933  0E90                     	;# 
  4934  0E91                     	;# 
  4935  0E92                     	;# 
  4936  0E93                     	;# 
  4937  0E94                     	;# 
  4938  0E95                     	;# 
  4939  0E96                     	;# 
  4940  0E97                     	;# 
  4941  0E9C                     	;# 
  4942  0E9D                     	;# 
  4943  0E9E                     	;# 
  4944  0EA1                     	;# 
  4945  0EA2                     	;# 
  4946  0EA3                     	;# 
  4947  0EA4                     	;# 
  4948  0EA5                     	;# 
  4949  0EA9                     	;# 
  4950  0EAA                     	;# 
  4951  0EAB                     	;# 
  4952  0EAC                     	;# 
  4953  0EB1                     	;# 
  4954  0EB2                     	;# 
  4955  0EB3                     	;# 
  4956  0EB8                     	;# 
  4957  0EB9                     	;# 
  4958  0EBA                     	;# 
  4959  0EBB                     	;# 
  4960  0EBC                     	;# 
  4961  0EBD                     	;# 
  4962  0EBE                     	;# 
  4963  0EC3                     	;# 
  4964  0EC5                     	;# 
  4965  0EC6                     	;# 
  4966  0EC7                     	;# 
  4967  0EC8                     	;# 
  4968  0EC9                     	;# 
  4969  0ECA                     	;# 
  4970  0ECB                     	;# 
  4971  0ECC                     	;# 
  4972  0F10                     	;# 
  4973  0F11                     	;# 
  4974  0F12                     	;# 
  4975  0F13                     	;# 
  4976  0F14                     	;# 
  4977  0F15                     	;# 
  4978  0F16                     	;# 
  4979  0F17                     	;# 
  4980  0F18                     	;# 
  4981  0F19                     	;# 
  4982  0F1A                     	;# 
  4983  0F1B                     	;# 
  4984  0F1C                     	;# 
  4985  0F1D                     	;# 
  4986  0F1E                     	;# 
  4987  0F1F                     	;# 
  4988  0F20                     	;# 
  4989  0F21                     	;# 
  4990  0F22                     	;# 
  4991  0F23                     	;# 
  4992  0F24                     	;# 
  4993  0F25                     	;# 
  4994  0F26                     	;# 
  4995  0F27                     	;# 
  4996  0F28                     	;# 
  4997  0F29                     	;# 
  4998  0F2A                     	;# 
  4999  0F2B                     	;# 
  5000  0F2C                     	;# 
  5001  0F2D                     	;# 
  5002  0F2E                     	;# 
  5003  0F2F                     	;# 
  5004  0F30                     	;# 
  5005  0F31                     	;# 
  5006  0F32                     	;# 
  5007  0F38                     	;# 
  5008  0F39                     	;# 
  5009  0F3A                     	;# 
  5010  0F3B                     	;# 
  5011  0F3C                     	;# 
  5012  0F3D                     	;# 
  5013  0F3E                     	;# 
  5014  0F3F                     	;# 
  5015  0F40                     	;# 
  5016  0F41                     	;# 
  5017  0F43                     	;# 
  5018  0F44                     	;# 
  5019  0F45                     	;# 
  5020  0F46                     	;# 
  5021  0F47                     	;# 
  5022  0F48                     	;# 
  5023  0F49                     	;# 
  5024  0F4A                     	;# 
  5025  0F4B                     	;# 
  5026  0F4C                     	;# 
  5027  0F4E                     	;# 
  5028  0F4F                     	;# 
  5029  0F50                     	;# 
  5030  0F51                     	;# 
  5031  0F52                     	;# 
  5032  0F53                     	;# 
  5033  0F54                     	;# 
  5034  0F55                     	;# 
  5035  0F56                     	;# 
  5036  0F57                     	;# 
  5037  0F59                     	;# 
  5038  0F5A                     	;# 
  5039  0F5B                     	;# 
  5040  0F5C                     	;# 
  5041  0F5D                     	;# 
  5042  0F61                     	;# 
  5043  0F62                     	;# 
  5044  0F64                     	;# 
  5045  0F65                     	;# 
  5046  0F66                     	;# 
  5047  0F67                     	;# 
  5048  0F68                     	;# 
  5049  0F69                     	;# 
  5050  0F6A                     	;# 
  5051  0F6B                     	;# 
  5052  0F6C                     	;# 
  5053  0F6D                     	;# 
  5054  0FE4                     	;# 
  5055  0FE5                     	;# 
  5056  0FE6                     	;# 
  5057  0FE7                     	;# 
  5058  0FE8                     	;# 
  5059  0FE9                     	;# 
  5060  0FEA                     	;# 
  5061  0FEB                     	;# 
  5062  0FED                     	;# 
  5063  0FEE                     	;# 
  5064  0FEF                     	;# 
  5065  0000                     	;# 
  5066  0001                     	;# 
  5067  0002                     	;# 
  5068  0003                     	;# 
  5069  0004                     	;# 
  5070  0005                     	;# 
  5071  0006                     	;# 
  5072  0007                     	;# 
  5073  0008                     	;# 
  5074  0009                     	;# 
  5075  000A                     	;# 
  5076  000B                     	;# 
  5077  000C                     	;# 
  5078  000D                     	;# 
  5079  000E                     	;# 
  5080  000F                     	;# 
  5081  0010                     	;# 
  5082  0011                     	;# 
  5083  0012                     	;# 
  5084  0013                     	;# 
  5085  0014                     	;# 
  5086  0015                     	;# 
  5087  0016                     	;# 
  5088  0017                     	;# 
  5089  0018                     	;# 
  5090  0019                     	;# 
  5091  001A                     	;# 
  5092  001C                     	;# 
  5093  001C                     	;# 
  5094  001D                     	;# 
  5095  001D                     	;# 
  5096  001E                     	;# 
  5097  001F                     	;# 
  5098  008C                     	;# 
  5099  008C                     	;# 
  5100  008D                     	;# 
  5101  008E                     	;# 
  5102  008E                     	;# 
  5103  008F                     	;# 
  5104  0090                     	;# 
  5105  0090                     	;# 
  5106  0091                     	;# 
  5107  0093                     	;# 
  5108  0094                     	;# 
  5109  0095                     	;# 
  5110  0096                     	;# 
  5111  0097                     	;# 
  5112  0098                     	;# 
  5113  0099                     	;# 
  5114  009A                     	;# 
  5115  009B                     	;# 
  5116  009C                     	;# 
  5117  009D                     	;# 
  5118  009E                     	;# 
  5119  010C                     	;# 
  5120  010D                     	;# 
  5121  010E                     	;# 
  5122  010E                     	;# 
  5123  010F                     	;# 
  5124  0110                     	;# 
  5125  0110                     	;# 
  5126  0111                     	;# 
  5127  0112                     	;# 
  5128  0112                     	;# 
  5129  0113                     	;# 
  5130  0114                     	;# 
  5131  0114                     	;# 
  5132  0115                     	;# 
  5133  0116                     	;# 
  5134  0116                     	;# 
  5135  0117                     	;# 
  5136  0119                     	;# 
  5137  0119                     	;# 
  5138  0119                     	;# 
  5139  011A                     	;# 
  5140  011A                     	;# 
  5141  011A                     	;# 
  5142  011B                     	;# 
  5143  011B                     	;# 
  5144  011B                     	;# 
  5145  011B                     	;# 
  5146  011B                     	;# 
  5147  011C                     	;# 
  5148  011C                     	;# 
  5149  011C                     	;# 
  5150  011D                     	;# 
  5151  011D                     	;# 
  5152  011D                     	;# 
  5153  011E                     	;# 
  5154  011E                     	;# 
  5155  011E                     	;# 
  5156  011F                     	;# 
  5157  011F                     	;# 
  5158  011F                     	;# 
  5159  011F                     	;# 
  5160  011F                     	;# 
  5161  018C                     	;# 
  5162  018D                     	;# 
  5163  018E                     	;# 
  5164  018F                     	;# 
  5165  0190                     	;# 
  5166  0191                     	;# 
  5167  0192                     	;# 
  5168  0196                     	;# 
  5169  0197                     	;# 
  5170  0198                     	;# 
  5171  0199                     	;# 
  5172  019A                     	;# 
  5173  019B                     	;# 
  5174  019C                     	;# 
  5175  020C                     	;# 
  5176  020C                     	;# 
  5177  020D                     	;# 
  5178  020E                     	;# 
  5179  020F                     	;# 
  5180  020F                     	;# 
  5181  0210                     	;# 
  5182  0210                     	;# 
  5183  0211                     	;# 
  5184  0211                     	;# 
  5185  0212                     	;# 
  5186  0212                     	;# 
  5187  0213                     	;# 
  5188  0214                     	;# 
  5189  0215                     	;# 
  5190  0215                     	;# 
  5191  0216                     	;# 
  5192  0216                     	;# 
  5193  0217                     	;# 
  5194  0217                     	;# 
  5195  0218                     	;# 
  5196  0218                     	;# 
  5197  0219                     	;# 
  5198  021A                     	;# 
  5199  021B                     	;# 
  5200  021B                     	;# 
  5201  021C                     	;# 
  5202  021C                     	;# 
  5203  021D                     	;# 
  5204  021D                     	;# 
  5205  021E                     	;# 
  5206  021F                     	;# 
  5207  028C                     	;# 
  5208  028C                     	;# 
  5209  028D                     	;# 
  5210  028D                     	;# 
  5211  028E                     	;# 
  5212  028F                     	;# 
  5213  0290                     	;# 
  5214  0290                     	;# 
  5215  0291                     	;# 
  5216  0292                     	;# 
  5217  0292                     	;# 
  5218  0293                     	;# 
  5219  0293                     	;# 
  5220  0294                     	;# 
  5221  0295                     	;# 
  5222  0296                     	;# 
  5223  0296                     	;# 
  5224  0297                     	;# 
  5225  0298                     	;# 
  5226  0298                     	;# 
  5227  0299                     	;# 
  5228  0299                     	;# 
  5229  029A                     	;# 
  5230  029B                     	;# 
  5231  029C                     	;# 
  5232  029C                     	;# 
  5233  029D                     	;# 
  5234  030C                     	;# 
  5235  030C                     	;# 
  5236  030D                     	;# 
  5237  030E                     	;# 
  5238  030F                     	;# 
  5239  0310                     	;# 
  5240  0310                     	;# 
  5241  0311                     	;# 
  5242  0312                     	;# 
  5243  0313                     	;# 
  5244  0314                     	;# 
  5245  0314                     	;# 
  5246  0315                     	;# 
  5247  0316                     	;# 
  5248  0317                     	;# 
  5249  0318                     	;# 
  5250  0318                     	;# 
  5251  0319                     	;# 
  5252  031A                     	;# 
  5253  031B                     	;# 
  5254  031C                     	;# 
  5255  031C                     	;# 
  5256  031D                     	;# 
  5257  031E                     	;# 
  5258  031F                     	;# 
  5259  038C                     	;# 
  5260  038C                     	;# 
  5261  038D                     	;# 
  5262  038E                     	;# 
  5263  0390                     	;# 
  5264  0390                     	;# 
  5265  0391                     	;# 
  5266  0392                     	;# 
  5267  040C                     	;# 
  5268  040D                     	;# 
  5269  040E                     	;# 
  5270  040F                     	;# 
  5271  0410                     	;# 
  5272  0411                     	;# 
  5273  0416                     	;# 
  5274  0416                     	;# 
  5275  0417                     	;# 
  5276  0418                     	;# 
  5277  0418                     	;# 
  5278  0419                     	;# 
  5279  041A                     	;# 
  5280  041A                     	;# 
  5281  041B                     	;# 
  5282  041C                     	;# 
  5283  041C                     	;# 
  5284  041D                     	;# 
  5285  041E                     	;# 
  5286  041F                     	;# 
  5287  048C                     	;# 
  5288  048C                     	;# 
  5289  048D                     	;# 
  5290  048E                     	;# 
  5291  048F                     	;# 
  5292  048F                     	;# 
  5293  0490                     	;# 
  5294  0491                     	;# 
  5295  0492                     	;# 
  5296  0492                     	;# 
  5297  0493                     	;# 
  5298  0494                     	;# 
  5299  0495                     	;# 
  5300  0495                     	;# 
  5301  0496                     	;# 
  5302  0497                     	;# 
  5303  0498                     	;# 
  5304  0499                     	;# 
  5305  049A                     	;# 
  5306  049B                     	;# 
  5307  049C                     	;# 
  5308  049D                     	;# 
  5309  050C                     	;# 
  5310  050C                     	;# 
  5311  050D                     	;# 
  5312  050E                     	;# 
  5313  050F                     	;# 
  5314  050F                     	;# 
  5315  0510                     	;# 
  5316  0511                     	;# 
  5317  0512                     	;# 
  5318  0512                     	;# 
  5319  0513                     	;# 
  5320  0514                     	;# 
  5321  0515                     	;# 
  5322  0515                     	;# 
  5323  0516                     	;# 
  5324  0517                     	;# 
  5325  0518                     	;# 
  5326  0519                     	;# 
  5327  051A                     	;# 
  5328  051B                     	;# 
  5329  051C                     	;# 
  5330  051D                     	;# 
  5331  058C                     	;# 
  5332  058C                     	;# 
  5333  058D                     	;# 
  5334  058E                     	;# 
  5335  058F                     	;# 
  5336  058F                     	;# 
  5337  0590                     	;# 
  5338  0591                     	;# 
  5339  0592                     	;# 
  5340  0593                     	;# 
  5341  060C                     	;# 
  5342  060D                     	;# 
  5343  060E                     	;# 
  5344  060F                     	;# 
  5345  0610                     	;# 
  5346  0611                     	;# 
  5347  0612                     	;# 
  5348  0613                     	;# 
  5349  0614                     	;# 
  5350  0616                     	;# 
  5351  0617                     	;# 
  5352  0618                     	;# 
  5353  0619                     	;# 
  5354  061A                     	;# 
  5355  061B                     	;# 
  5356  061C                     	;# 
  5357  061D                     	;# 
  5358  061E                     	;# 
  5359  068C                     	;# 
  5360  068D                     	;# 
  5361  068E                     	;# 
  5362  068F                     	;# 
  5363  0690                     	;# 
  5364  0691                     	;# 
  5365  0692                     	;# 
  5366  0693                     	;# 
  5367  0694                     	;# 
  5368  070C                     	;# 
  5369  070D                     	;# 
  5370  070E                     	;# 
  5371  070F                     	;# 
  5372  0710                     	;# 
  5373  0711                     	;# 
  5374  0712                     	;# 
  5375  0713                     	;# 
  5376  0714                     	;# 
  5377  0716                     	;# 
  5378  0717                     	;# 
  5379  0718                     	;# 
  5380  0719                     	;# 
  5381  071A                     	;# 
  5382  071B                     	;# 
  5383  071C                     	;# 
  5384  071D                     	;# 
  5385  071E                     	;# 
  5386  0796                     	;# 
  5387  0797                     	;# 
  5388  0798                     	;# 
  5389  0799                     	;# 
  5390  079A                     	;# 
  5391  079B                     	;# 
  5392  080C                     	;# 
  5393  080D                     	;# 
  5394  080E                     	;# 
  5395  080F                     	;# 
  5396  0810                     	;# 
  5397  0811                     	;# 
  5398  0812                     	;# 
  5399  0813                     	;# 
  5400  0814                     	;# 
  5401  081A                     	;# 
  5402  081B                     	;# 
  5403  081C                     	;# 
  5404  081D                     	;# 
  5405  081E                     	;# 
  5406  081F                     	;# 
  5407  088C                     	;# 
  5408  088D                     	;# 
  5409  088E                     	;# 
  5410  088F                     	;# 
  5411  0890                     	;# 
  5412  0891                     	;# 
  5413  0892                     	;# 
  5414  0893                     	;# 
  5415  0895                     	;# 
  5416  0896                     	;# 
  5417  0897                     	;# 
  5418  0898                     	;# 
  5419  0899                     	;# 
  5420  089A                     	;# 
  5421  089B                     	;# 
  5422  090C                     	;# 
  5423  090E                     	;# 
  5424  090F                     	;# 
  5425  091F                     	;# 
  5426  091F                     	;# 
  5427  098F                     	;# 
  5428  098F                     	;# 
  5429  0990                     	;# 
  5430  0991                     	;# 
  5431  0992                     	;# 
  5432  0993                     	;# 
  5433  0994                     	;# 
  5434  0995                     	;# 
  5435  0996                     	;# 
  5436  0997                     	;# 
  5437  0E0F                     	;# 
  5438  0E10                     	;# 
  5439  0E11                     	;# 
  5440  0E12                     	;# 
  5441  0E13                     	;# 
  5442  0E14                     	;# 
  5443  0E15                     	;# 
  5444  0E16                     	;# 
  5445  0E17                     	;# 
  5446  0E18                     	;# 
  5447  0E19                     	;# 
  5448  0E1A                     	;# 
  5449  0E1B                     	;# 
  5450  0E1C                     	;# 
  5451  0E1D                     	;# 
  5452  0E1E                     	;# 
  5453  0E1F                     	;# 
  5454  0E20                     	;# 
  5455  0E21                     	;# 
  5456  0E22                     	;# 
  5457  0E23                     	;# 
  5458  0E24                     	;# 
  5459  0E25                     	;# 
  5460  0E26                     	;# 
  5461  0E27                     	;# 
  5462  0E28                     	;# 
  5463  0E29                     	;# 
  5464  0E2A                     	;# 
  5465  0E2B                     	;# 
  5466  0E2C                     	;# 
  5467  0E2D                     	;# 
  5468  0E2E                     	;# 
  5469  0E2F                     	;# 
  5470  0E30                     	;# 
  5471  0E31                     	;# 
  5472  0E32                     	;# 
  5473  0E33                     	;# 
  5474  0E34                     	;# 
  5475  0E35                     	;# 
  5476  0E36                     	;# 
  5477  0E37                     	;# 
  5478  0E8F                     	;# 
  5479  0E90                     	;# 
  5480  0E91                     	;# 
  5481  0E92                     	;# 
  5482  0E93                     	;# 
  5483  0E94                     	;# 
  5484  0E95                     	;# 
  5485  0E96                     	;# 
  5486  0E97                     	;# 
  5487  0E9C                     	;# 
  5488  0E9D                     	;# 
  5489  0E9E                     	;# 
  5490  0EA1                     	;# 
  5491  0EA2                     	;# 
  5492  0EA3                     	;# 
  5493  0EA4                     	;# 
  5494  0EA5                     	;# 
  5495  0EA9                     	;# 
  5496  0EAA                     	;# 
  5497  0EAB                     	;# 
  5498  0EAC                     	;# 
  5499  0EB1                     	;# 
  5500  0EB2                     	;# 
  5501  0EB3                     	;# 
  5502  0EB8                     	;# 
  5503  0EB9                     	;# 
  5504  0EBA                     	;# 
  5505  0EBB                     	;# 
  5506  0EBC                     	;# 
  5507  0EBD                     	;# 
  5508  0EBE                     	;# 
  5509  0EC3                     	;# 
  5510  0EC5                     	;# 
  5511  0EC6                     	;# 
  5512  0EC7                     	;# 
  5513  0EC8                     	;# 
  5514  0EC9                     	;# 
  5515  0ECA                     	;# 
  5516  0ECB                     	;# 
  5517  0ECC                     	;# 
  5518  0F10                     	;# 
  5519  0F11                     	;# 
  5520  0F12                     	;# 
  5521  0F13                     	;# 
  5522  0F14                     	;# 
  5523  0F15                     	;# 
  5524  0F16                     	;# 
  5525  0F17                     	;# 
  5526  0F18                     	;# 
  5527  0F19                     	;# 
  5528  0F1A                     	;# 
  5529  0F1B                     	;# 
  5530  0F1C                     	;# 
  5531  0F1D                     	;# 
  5532  0F1E                     	;# 
  5533  0F1F                     	;# 
  5534  0F20                     	;# 
  5535  0F21                     	;# 
  5536  0F22                     	;# 
  5537  0F23                     	;# 
  5538  0F24                     	;# 
  5539  0F25                     	;# 
  5540  0F26                     	;# 
  5541  0F27                     	;# 
  5542  0F28                     	;# 
  5543  0F29                     	;# 
  5544  0F2A                     	;# 
  5545  0F2B                     	;# 
  5546  0F2C                     	;# 
  5547  0F2D                     	;# 
  5548  0F2E                     	;# 
  5549  0F2F                     	;# 
  5550  0F30                     	;# 
  5551  0F31                     	;# 
  5552  0F32                     	;# 
  5553  0F38                     	;# 
  5554  0F39                     	;# 
  5555  0F3A                     	;# 
  5556  0F3B                     	;# 
  5557  0F3C                     	;# 
  5558  0F3D                     	;# 
  5559  0F3E                     	;# 
  5560  0F3F                     	;# 
  5561  0F40                     	;# 
  5562  0F41                     	;# 
  5563  0F43                     	;# 
  5564  0F44                     	;# 
  5565  0F45                     	;# 
  5566  0F46                     	;# 
  5567  0F47                     	;# 
  5568  0F48                     	;# 
  5569  0F49                     	;# 
  5570  0F4A                     	;# 
  5571  0F4B                     	;# 
  5572  0F4C                     	;# 
  5573  0F4E                     	;# 
  5574  0F4F                     	;# 
  5575  0F50                     	;# 
  5576  0F51                     	;# 
  5577  0F52                     	;# 
  5578  0F53                     	;# 
  5579  0F54                     	;# 
  5580  0F55                     	;# 
  5581  0F56                     	;# 
  5582  0F57                     	;# 
  5583  0F59                     	;# 
  5584  0F5A                     	;# 
  5585  0F5B                     	;# 
  5586  0F5C                     	;# 
  5587  0F5D                     	;# 
  5588  0F61                     	;# 
  5589  0F62                     	;# 
  5590  0F64                     	;# 
  5591  0F65                     	;# 
  5592  0F66                     	;# 
  5593  0F67                     	;# 
  5594  0F68                     	;# 
  5595  0F69                     	;# 
  5596  0F6A                     	;# 
  5597  0F6B                     	;# 
  5598  0F6C                     	;# 
  5599  0F6D                     	;# 
  5600  0FE4                     	;# 
  5601  0FE5                     	;# 
  5602  0FE6                     	;# 
  5603  0FE7                     	;# 
  5604  0FE8                     	;# 
  5605  0FE9                     	;# 
  5606  0FEA                     	;# 
  5607  0FEB                     	;# 
  5608  0FED                     	;# 
  5609  0FEE                     	;# 
  5610  0FEF                     	;# 
  5611  0000                     	;# 
  5612  0001                     	;# 
  5613  0002                     	;# 
  5614  0003                     	;# 
  5615  0004                     	;# 
  5616  0005                     	;# 
  5617  0006                     	;# 
  5618  0007                     	;# 
  5619  0008                     	;# 
  5620  0009                     	;# 
  5621  000A                     	;# 
  5622  000B                     	;# 
  5623  000C                     	;# 
  5624  000D                     	;# 
  5625  000E                     	;# 
  5626  000F                     	;# 
  5627  0010                     	;# 
  5628  0011                     	;# 
  5629  0012                     	;# 
  5630  0013                     	;# 
  5631  0014                     	;# 
  5632  0015                     	;# 
  5633  0016                     	;# 
  5634  0017                     	;# 
  5635  0018                     	;# 
  5636  0019                     	;# 
  5637  001A                     	;# 
  5638  001C                     	;# 
  5639  001C                     	;# 
  5640  001D                     	;# 
  5641  001D                     	;# 
  5642  001E                     	;# 
  5643  001F                     	;# 
  5644  008C                     	;# 
  5645  008C                     	;# 
  5646  008D                     	;# 
  5647  008E                     	;# 
  5648  008E                     	;# 
  5649  008F                     	;# 
  5650  0090                     	;# 
  5651  0090                     	;# 
  5652  0091                     	;# 
  5653  0093                     	;# 
  5654  0094                     	;# 
  5655  0095                     	;# 
  5656  0096                     	;# 
  5657  0097                     	;# 
  5658  0098                     	;# 
  5659  0099                     	;# 
  5660  009A                     	;# 
  5661  009B                     	;# 
  5662  009C                     	;# 
  5663  009D                     	;# 
  5664  009E                     	;# 
  5665  010C                     	;# 
  5666  010D                     	;# 
  5667  010E                     	;# 
  5668  010E                     	;# 
  5669  010F                     	;# 
  5670  0110                     	;# 
  5671  0110                     	;# 
  5672  0111                     	;# 
  5673  0112                     	;# 
  5674  0112                     	;# 
  5675  0113                     	;# 
  5676  0114                     	;# 
  5677  0114                     	;# 
  5678  0115                     	;# 
  5679  0116                     	;# 
  5680  0116                     	;# 
  5681  0117                     	;# 
  5682  0119                     	;# 
  5683  0119                     	;# 
  5684  0119                     	;# 
  5685  011A                     	;# 
  5686  011A                     	;# 
  5687  011A                     	;# 
  5688  011B                     	;# 
  5689  011B                     	;# 
  5690  011B                     	;# 
  5691  011B                     	;# 
  5692  011B                     	;# 
  5693  011C                     	;# 
  5694  011C                     	;# 
  5695  011C                     	;# 
  5696  011D                     	;# 
  5697  011D                     	;# 
  5698  011D                     	;# 
  5699  011E                     	;# 
  5700  011E                     	;# 
  5701  011E                     	;# 
  5702  011F                     	;# 
  5703  011F                     	;# 
  5704  011F                     	;# 
  5705  011F                     	;# 
  5706  011F                     	;# 
  5707  018C                     	;# 
  5708  018D                     	;# 
  5709  018E                     	;# 
  5710  018F                     	;# 
  5711  0190                     	;# 
  5712  0191                     	;# 
  5713  0192                     	;# 
  5714  0196                     	;# 
  5715  0197                     	;# 
  5716  0198                     	;# 
  5717  0199                     	;# 
  5718  019A                     	;# 
  5719  019B                     	;# 
  5720  019C                     	;# 
  5721  020C                     	;# 
  5722  020C                     	;# 
  5723  020D                     	;# 
  5724  020E                     	;# 
  5725  020F                     	;# 
  5726  020F                     	;# 
  5727  0210                     	;# 
  5728  0210                     	;# 
  5729  0211                     	;# 
  5730  0211                     	;# 
  5731  0212                     	;# 
  5732  0212                     	;# 
  5733  0213                     	;# 
  5734  0214                     	;# 
  5735  0215                     	;# 
  5736  0215                     	;# 
  5737  0216                     	;# 
  5738  0216                     	;# 
  5739  0217                     	;# 
  5740  0217                     	;# 
  5741  0218                     	;# 
  5742  0218                     	;# 
  5743  0219                     	;# 
  5744  021A                     	;# 
  5745  021B                     	;# 
  5746  021B                     	;# 
  5747  021C                     	;# 
  5748  021C                     	;# 
  5749  021D                     	;# 
  5750  021D                     	;# 
  5751  021E                     	;# 
  5752  021F                     	;# 
  5753  028C                     	;# 
  5754  028C                     	;# 
  5755  028D                     	;# 
  5756  028D                     	;# 
  5757  028E                     	;# 
  5758  028F                     	;# 
  5759  0290                     	;# 
  5760  0290                     	;# 
  5761  0291                     	;# 
  5762  0292                     	;# 
  5763  0292                     	;# 
  5764  0293                     	;# 
  5765  0293                     	;# 
  5766  0294                     	;# 
  5767  0295                     	;# 
  5768  0296                     	;# 
  5769  0296                     	;# 
  5770  0297                     	;# 
  5771  0298                     	;# 
  5772  0298                     	;# 
  5773  0299                     	;# 
  5774  0299                     	;# 
  5775  029A                     	;# 
  5776  029B                     	;# 
  5777  029C                     	;# 
  5778  029C                     	;# 
  5779  029D                     	;# 
  5780  030C                     	;# 
  5781  030C                     	;# 
  5782  030D                     	;# 
  5783  030E                     	;# 
  5784  030F                     	;# 
  5785  0310                     	;# 
  5786  0310                     	;# 
  5787  0311                     	;# 
  5788  0312                     	;# 
  5789  0313                     	;# 
  5790  0314                     	;# 
  5791  0314                     	;# 
  5792  0315                     	;# 
  5793  0316                     	;# 
  5794  0317                     	;# 
  5795  0318                     	;# 
  5796  0318                     	;# 
  5797  0319                     	;# 
  5798  031A                     	;# 
  5799  031B                     	;# 
  5800  031C                     	;# 
  5801  031C                     	;# 
  5802  031D                     	;# 
  5803  031E                     	;# 
  5804  031F                     	;# 
  5805  038C                     	;# 
  5806  038C                     	;# 
  5807  038D                     	;# 
  5808  038E                     	;# 
  5809  0390                     	;# 
  5810  0390                     	;# 
  5811  0391                     	;# 
  5812  0392                     	;# 
  5813  040C                     	;# 
  5814  040D                     	;# 
  5815  040E                     	;# 
  5816  040F                     	;# 
  5817  0410                     	;# 
  5818  0411                     	;# 
  5819  0416                     	;# 
  5820  0416                     	;# 
  5821  0417                     	;# 
  5822  0418                     	;# 
  5823  0418                     	;# 
  5824  0419                     	;# 
  5825  041A                     	;# 
  5826  041A                     	;# 
  5827  041B                     	;# 
  5828  041C                     	;# 
  5829  041C                     	;# 
  5830  041D                     	;# 
  5831  041E                     	;# 
  5832  041F                     	;# 
  5833  048C                     	;# 
  5834  048C                     	;# 
  5835  048D                     	;# 
  5836  048E                     	;# 
  5837  048F                     	;# 
  5838  048F                     	;# 
  5839  0490                     	;# 
  5840  0491                     	;# 
  5841  0492                     	;# 
  5842  0492                     	;# 
  5843  0493                     	;# 
  5844  0494                     	;# 
  5845  0495                     	;# 
  5846  0495                     	;# 
  5847  0496                     	;# 
  5848  0497                     	;# 
  5849  0498                     	;# 
  5850  0499                     	;# 
  5851  049A                     	;# 
  5852  049B                     	;# 
  5853  049C                     	;# 
  5854  049D                     	;# 
  5855  050C                     	;# 
  5856  050C                     	;# 
  5857  050D                     	;# 
  5858  050E                     	;# 
  5859  050F                     	;# 
  5860  050F                     	;# 
  5861  0510                     	;# 
  5862  0511                     	;# 
  5863  0512                     	;# 
  5864  0512                     	;# 
  5865  0513                     	;# 
  5866  0514                     	;# 
  5867  0515                     	;# 
  5868  0515                     	;# 
  5869  0516                     	;# 
  5870  0517                     	;# 
  5871  0518                     	;# 
  5872  0519                     	;# 
  5873  051A                     	;# 
  5874  051B                     	;# 
  5875  051C                     	;# 
  5876  051D                     	;# 
  5877  058C                     	;# 
  5878  058C                     	;# 
  5879  058D                     	;# 
  5880  058E                     	;# 
  5881  058F                     	;# 
  5882  058F                     	;# 
  5883  0590                     	;# 
  5884  0591                     	;# 
  5885  0592                     	;# 
  5886  0593                     	;# 
  5887  060C                     	;# 
  5888  060D                     	;# 
  5889  060E                     	;# 
  5890  060F                     	;# 
  5891  0610                     	;# 
  5892  0611                     	;# 
  5893  0612                     	;# 
  5894  0613                     	;# 
  5895  0614                     	;# 
  5896  0616                     	;# 
  5897  0617                     	;# 
  5898  0618                     	;# 
  5899  0619                     	;# 
  5900  061A                     	;# 
  5901  061B                     	;# 
  5902  061C                     	;# 
  5903  061D                     	;# 
  5904  061E                     	;# 
  5905  068C                     	;# 
  5906  068D                     	;# 
  5907  068E                     	;# 
  5908  068F                     	;# 
  5909  0690                     	;# 
  5910  0691                     	;# 
  5911  0692                     	;# 
  5912  0693                     	;# 
  5913  0694                     	;# 
  5914  070C                     	;# 
  5915  070D                     	;# 
  5916  070E                     	;# 
  5917  070F                     	;# 
  5918  0710                     	;# 
  5919  0711                     	;# 
  5920  0712                     	;# 
  5921  0713                     	;# 
  5922  0714                     	;# 
  5923  0716                     	;# 
  5924  0717                     	;# 
  5925  0718                     	;# 
  5926  0719                     	;# 
  5927  071A                     	;# 
  5928  071B                     	;# 
  5929  071C                     	;# 
  5930  071D                     	;# 
  5931  071E                     	;# 
  5932  0796                     	;# 
  5933  0797                     	;# 
  5934  0798                     	;# 
  5935  0799                     	;# 
  5936  079A                     	;# 
  5937  079B                     	;# 
  5938  080C                     	;# 
  5939  080D                     	;# 
  5940  080E                     	;# 
  5941  080F                     	;# 
  5942  0810                     	;# 
  5943  0811                     	;# 
  5944  0812                     	;# 
  5945  0813                     	;# 
  5946  0814                     	;# 
  5947  081A                     	;# 
  5948  081B                     	;# 
  5949  081C                     	;# 
  5950  081D                     	;# 
  5951  081E                     	;# 
  5952  081F                     	;# 
  5953  088C                     	;# 
  5954  088D                     	;# 
  5955  088E                     	;# 
  5956  088F                     	;# 
  5957  0890                     	;# 
  5958  0891                     	;# 
  5959  0892                     	;# 
  5960  0893                     	;# 
  5961  0895                     	;# 
  5962  0896                     	;# 
  5963  0897                     	;# 
  5964  0898                     	;# 
  5965  0899                     	;# 
  5966  089A                     	;# 
  5967  089B                     	;# 
  5968  090C                     	;# 
  5969  090E                     	;# 
  5970  090F                     	;# 
  5971  091F                     	;# 
  5972  091F                     	;# 
  5973  098F                     	;# 
  5974  098F                     	;# 
  5975  0990                     	;# 
  5976  0991                     	;# 
  5977  0992                     	;# 
  5978  0993                     	;# 
  5979  0994                     	;# 
  5980  0995                     	;# 
  5981  0996                     	;# 
  5982  0997                     	;# 
  5983  0E0F                     	;# 
  5984  0E10                     	;# 
  5985  0E11                     	;# 
  5986  0E12                     	;# 
  5987  0E13                     	;# 
  5988  0E14                     	;# 
  5989  0E15                     	;# 
  5990  0E16                     	;# 
  5991  0E17                     	;# 
  5992  0E18                     	;# 
  5993  0E19                     	;# 
  5994  0E1A                     	;# 
  5995  0E1B                     	;# 
  5996  0E1C                     	;# 
  5997  0E1D                     	;# 
  5998  0E1E                     	;# 
  5999  0E1F                     	;# 
  6000  0E20                     	;# 
  6001  0E21                     	;# 
  6002  0E22                     	;# 
  6003  0E23                     	;# 
  6004  0E24                     	;# 
  6005  0E25                     	;# 
  6006  0E26                     	;# 
  6007  0E27                     	;# 
  6008  0E28                     	;# 
  6009  0E29                     	;# 
  6010  0E2A                     	;# 
  6011  0E2B                     	;# 
  6012  0E2C                     	;# 
  6013  0E2D                     	;# 
  6014  0E2E                     	;# 
  6015  0E2F                     	;# 
  6016  0E30                     	;# 
  6017  0E31                     	;# 
  6018  0E32                     	;# 
  6019  0E33                     	;# 
  6020  0E34                     	;# 
  6021  0E35                     	;# 
  6022  0E36                     	;# 
  6023  0E37                     	;# 
  6024  0E8F                     	;# 
  6025  0E90                     	;# 
  6026  0E91                     	;# 
  6027  0E92                     	;# 
  6028  0E93                     	;# 
  6029  0E94                     	;# 
  6030  0E95                     	;# 
  6031  0E96                     	;# 
  6032  0E97                     	;# 
  6033  0E9C                     	;# 
  6034  0E9D                     	;# 
  6035  0E9E                     	;# 
  6036  0EA1                     	;# 
  6037  0EA2                     	;# 
  6038  0EA3                     	;# 
  6039  0EA4                     	;# 
  6040  0EA5                     	;# 
  6041  0EA9                     	;# 
  6042  0EAA                     	;# 
  6043  0EAB                     	;# 
  6044  0EAC                     	;# 
  6045  0EB1                     	;# 
  6046  0EB2                     	;# 
  6047  0EB3                     	;# 
  6048  0EB8                     	;# 
  6049  0EB9                     	;# 
  6050  0EBA                     	;# 
  6051  0EBB                     	;# 
  6052  0EBC                     	;# 
  6053  0EBD                     	;# 
  6054  0EBE                     	;# 
  6055  0EC3                     	;# 
  6056  0EC5                     	;# 
  6057  0EC6                     	;# 
  6058  0EC7                     	;# 
  6059  0EC8                     	;# 
  6060  0EC9                     	;# 
  6061  0ECA                     	;# 
  6062  0ECB                     	;# 
  6063  0ECC                     	;# 
  6064  0F10                     	;# 
  6065  0F11                     	;# 
  6066  0F12                     	;# 
  6067  0F13                     	;# 
  6068  0F14                     	;# 
  6069  0F15                     	;# 
  6070  0F16                     	;# 
  6071  0F17                     	;# 
  6072  0F18                     	;# 
  6073  0F19                     	;# 
  6074  0F1A                     	;# 
  6075  0F1B                     	;# 
  6076  0F1C                     	;# 
  6077  0F1D                     	;# 
  6078  0F1E                     	;# 
  6079  0F1F                     	;# 
  6080  0F20                     	;# 
  6081  0F21                     	;# 
  6082  0F22                     	;# 
  6083  0F23                     	;# 
  6084  0F24                     	;# 
  6085  0F25                     	;# 
  6086  0F26                     	;# 
  6087  0F27                     	;# 
  6088  0F28                     	;# 
  6089  0F29                     	;# 
  6090  0F2A                     	;# 
  6091  0F2B                     	;# 
  6092  0F2C                     	;# 
  6093  0F2D                     	;# 
  6094  0F2E                     	;# 
  6095  0F2F                     	;# 
  6096  0F30                     	;# 
  6097  0F31                     	;# 
  6098  0F32                     	;# 
  6099  0F38                     	;# 
  6100  0F39                     	;# 
  6101  0F3A                     	;# 
  6102  0F3B                     	;# 
  6103  0F3C                     	;# 
  6104  0F3D                     	;# 
  6105  0F3E                     	;# 
  6106  0F3F                     	;# 
  6107  0F40                     	;# 
  6108  0F41                     	;# 
  6109  0F43                     	;# 
  6110  0F44                     	;# 
  6111  0F45                     	;# 
  6112  0F46                     	;# 
  6113  0F47                     	;# 
  6114  0F48                     	;# 
  6115  0F49                     	;# 
  6116  0F4A                     	;# 
  6117  0F4B                     	;# 
  6118  0F4C                     	;# 
  6119  0F4E                     	;# 
  6120  0F4F                     	;# 
  6121  0F50                     	;# 
  6122  0F51                     	;# 
  6123  0F52                     	;# 
  6124  0F53                     	;# 
  6125  0F54                     	;# 
  6126  0F55                     	;# 
  6127  0F56                     	;# 
  6128  0F57                     	;# 
  6129  0F59                     	;# 
  6130  0F5A                     	;# 
  6131  0F5B                     	;# 
  6132  0F5C                     	;# 
  6133  0F5D                     	;# 
  6134  0F61                     	;# 
  6135  0F62                     	;# 
  6136  0F64                     	;# 
  6137  0F65                     	;# 
  6138  0F66                     	;# 
  6139  0F67                     	;# 
  6140  0F68                     	;# 
  6141  0F69                     	;# 
  6142  0F6A                     	;# 
  6143  0F6B                     	;# 
  6144  0F6C                     	;# 
  6145  0F6D                     	;# 
  6146  0FE4                     	;# 
  6147  0FE5                     	;# 
  6148  0FE6                     	;# 
  6149  0FE7                     	;# 
  6150  0FE8                     	;# 
  6151  0FE9                     	;# 
  6152  0FEA                     	;# 
  6153  0FEB                     	;# 
  6154  0FED                     	;# 
  6155  0FEE                     	;# 
  6156  0FEF                     	;# 
  6157  0000                     	;# 
  6158  0001                     	;# 
  6159  0002                     	;# 
  6160  0003                     	;# 
  6161  0004                     	;# 
  6162  0005                     	;# 
  6163  0006                     	;# 
  6164  0007                     	;# 
  6165  0008                     	;# 
  6166  0009                     	;# 
  6167  000A                     	;# 
  6168  000B                     	;# 
  6169  000C                     	;# 
  6170  000D                     	;# 
  6171  000E                     	;# 
  6172  000F                     	;# 
  6173  0010                     	;# 
  6174  0011                     	;# 
  6175  0012                     	;# 
  6176  0013                     	;# 
  6177  0014                     	;# 
  6178  0015                     	;# 
  6179  0016                     	;# 
  6180  0017                     	;# 
  6181  0018                     	;# 
  6182  0019                     	;# 
  6183  001A                     	;# 
  6184  001C                     	;# 
  6185  001C                     	;# 
  6186  001D                     	;# 
  6187  001D                     	;# 
  6188  001E                     	;# 
  6189  001F                     	;# 
  6190  008C                     	;# 
  6191  008C                     	;# 
  6192  008D                     	;# 
  6193  008E                     	;# 
  6194  008E                     	;# 
  6195  008F                     	;# 
  6196  0090                     	;# 
  6197  0090                     	;# 
  6198  0091                     	;# 
  6199  0093                     	;# 
  6200  0094                     	;# 
  6201  0095                     	;# 
  6202  0096                     	;# 
  6203  0097                     	;# 
  6204  0098                     	;# 
  6205  0099                     	;# 
  6206  009A                     	;# 
  6207  009B                     	;# 
  6208  009C                     	;# 
  6209  009D                     	;# 
  6210  009E                     	;# 
  6211  010C                     	;# 
  6212  010D                     	;# 
  6213  010E                     	;# 
  6214  010E                     	;# 
  6215  010F                     	;# 
  6216  0110                     	;# 
  6217  0110                     	;# 
  6218  0111                     	;# 
  6219  0112                     	;# 
  6220  0112                     	;# 
  6221  0113                     	;# 
  6222  0114                     	;# 
  6223  0114                     	;# 
  6224  0115                     	;# 
  6225  0116                     	;# 
  6226  0116                     	;# 
  6227  0117                     	;# 
  6228  0119                     	;# 
  6229  0119                     	;# 
  6230  0119                     	;# 
  6231  011A                     	;# 
  6232  011A                     	;# 
  6233  011A                     	;# 
  6234  011B                     	;# 
  6235  011B                     	;# 
  6236  011B                     	;# 
  6237  011B                     	;# 
  6238  011B                     	;# 
  6239  011C                     	;# 
  6240  011C                     	;# 
  6241  011C                     	;# 
  6242  011D                     	;# 
  6243  011D                     	;# 
  6244  011D                     	;# 
  6245  011E                     	;# 
  6246  011E                     	;# 
  6247  011E                     	;# 
  6248  011F                     	;# 
  6249  011F                     	;# 
  6250  011F                     	;# 
  6251  011F                     	;# 
  6252  011F                     	;# 
  6253  018C                     	;# 
  6254  018D                     	;# 
  6255  018E                     	;# 
  6256  018F                     	;# 
  6257  0190                     	;# 
  6258  0191                     	;# 
  6259  0192                     	;# 
  6260  0196                     	;# 
  6261  0197                     	;# 
  6262  0198                     	;# 
  6263  0199                     	;# 
  6264  019A                     	;# 
  6265  019B                     	;# 
  6266  019C                     	;# 
  6267  020C                     	;# 
  6268  020C                     	;# 
  6269  020D                     	;# 
  6270  020E                     	;# 
  6271  020F                     	;# 
  6272  020F                     	;# 
  6273  0210                     	;# 
  6274  0210                     	;# 
  6275  0211                     	;# 
  6276  0211                     	;# 
  6277  0212                     	;# 
  6278  0212                     	;# 
  6279  0213                     	;# 
  6280  0214                     	;# 
  6281  0215                     	;# 
  6282  0215                     	;# 
  6283  0216                     	;# 
  6284  0216                     	;# 
  6285  0217                     	;# 
  6286  0217                     	;# 
  6287  0218                     	;# 
  6288  0218                     	;# 
  6289  0219                     	;# 
  6290  021A                     	;# 
  6291  021B                     	;# 
  6292  021B                     	;# 
  6293  021C                     	;# 
  6294  021C                     	;# 
  6295  021D                     	;# 
  6296  021D                     	;# 
  6297  021E                     	;# 
  6298  021F                     	;# 
  6299  028C                     	;# 
  6300  028C                     	;# 
  6301  028D                     	;# 
  6302  028D                     	;# 
  6303  028E                     	;# 
  6304  028F                     	;# 
  6305  0290                     	;# 
  6306  0290                     	;# 
  6307  0291                     	;# 
  6308  0292                     	;# 
  6309  0292                     	;# 
  6310  0293                     	;# 
  6311  0293                     	;# 
  6312  0294                     	;# 
  6313  0295                     	;# 
  6314  0296                     	;# 
  6315  0296                     	;# 
  6316  0297                     	;# 
  6317  0298                     	;# 
  6318  0298                     	;# 
  6319  0299                     	;# 
  6320  0299                     	;# 
  6321  029A                     	;# 
  6322  029B                     	;# 
  6323  029C                     	;# 
  6324  029C                     	;# 
  6325  029D                     	;# 
  6326  030C                     	;# 
  6327  030C                     	;# 
  6328  030D                     	;# 
  6329  030E                     	;# 
  6330  030F                     	;# 
  6331  0310                     	;# 
  6332  0310                     	;# 
  6333  0311                     	;# 
  6334  0312                     	;# 
  6335  0313                     	;# 
  6336  0314                     	;# 
  6337  0314                     	;# 
  6338  0315                     	;# 
  6339  0316                     	;# 
  6340  0317                     	;# 
  6341  0318                     	;# 
  6342  0318                     	;# 
  6343  0319                     	;# 
  6344  031A                     	;# 
  6345  031B                     	;# 
  6346  031C                     	;# 
  6347  031C                     	;# 
  6348  031D                     	;# 
  6349  031E                     	;# 
  6350  031F                     	;# 
  6351  038C                     	;# 
  6352  038C                     	;# 
  6353  038D                     	;# 
  6354  038E                     	;# 
  6355  0390                     	;# 
  6356  0390                     	;# 
  6357  0391                     	;# 
  6358  0392                     	;# 
  6359  040C                     	;# 
  6360  040D                     	;# 
  6361  040E                     	;# 
  6362  040F                     	;# 
  6363  0410                     	;# 
  6364  0411                     	;# 
  6365  0416                     	;# 
  6366  0416                     	;# 
  6367  0417                     	;# 
  6368  0418                     	;# 
  6369  0418                     	;# 
  6370  0419                     	;# 
  6371  041A                     	;# 
  6372  041A                     	;# 
  6373  041B                     	;# 
  6374  041C                     	;# 
  6375  041C                     	;# 
  6376  041D                     	;# 
  6377  041E                     	;# 
  6378  041F                     	;# 
  6379  048C                     	;# 
  6380  048C                     	;# 
  6381  048D                     	;# 
  6382  048E                     	;# 
  6383  048F                     	;# 
  6384  048F                     	;# 
  6385  0490                     	;# 
  6386  0491                     	;# 
  6387  0492                     	;# 
  6388  0492                     	;# 
  6389  0493                     	;# 
  6390  0494                     	;# 
  6391  0495                     	;# 
  6392  0495                     	;# 
  6393  0496                     	;# 
  6394  0497                     	;# 
  6395  0498                     	;# 
  6396  0499                     	;# 
  6397  049A                     	;# 
  6398  049B                     	;# 
  6399  049C                     	;# 
  6400  049D                     	;# 
  6401  050C                     	;# 
  6402  050C                     	;# 
  6403  050D                     	;# 
  6404  050E                     	;# 
  6405  050F                     	;# 
  6406  050F                     	;# 
  6407  0510                     	;# 
  6408  0511                     	;# 
  6409  0512                     	;# 
  6410  0512                     	;# 
  6411  0513                     	;# 
  6412  0514                     	;# 
  6413  0515                     	;# 
  6414  0515                     	;# 
  6415  0516                     	;# 
  6416  0517                     	;# 
  6417  0518                     	;# 
  6418  0519                     	;# 
  6419  051A                     	;# 
  6420  051B                     	;# 
  6421  051C                     	;# 
  6422  051D                     	;# 
  6423  058C                     	;# 
  6424  058C                     	;# 
  6425  058D                     	;# 
  6426  058E                     	;# 
  6427  058F                     	;# 
  6428  058F                     	;# 
  6429  0590                     	;# 
  6430  0591                     	;# 
  6431  0592                     	;# 
  6432  0593                     	;# 
  6433  060C                     	;# 
  6434  060D                     	;# 
  6435  060E                     	;# 
  6436  060F                     	;# 
  6437  0610                     	;# 
  6438  0611                     	;# 
  6439  0612                     	;# 
  6440  0613                     	;# 
  6441  0614                     	;# 
  6442  0616                     	;# 
  6443  0617                     	;# 
  6444  0618                     	;# 
  6445  0619                     	;# 
  6446  061A                     	;# 
  6447  061B                     	;# 
  6448  061C                     	;# 
  6449  061D                     	;# 
  6450  061E                     	;# 
  6451  068C                     	;# 
  6452  068D                     	;# 
  6453  068E                     	;# 
  6454  068F                     	;# 
  6455  0690                     	;# 
  6456  0691                     	;# 
  6457  0692                     	;# 
  6458  0693                     	;# 
  6459  0694                     	;# 
  6460  070C                     	;# 
  6461  070D                     	;# 
  6462  070E                     	;# 
  6463  070F                     	;# 
  6464  0710                     	;# 
  6465  0711                     	;# 
  6466  0712                     	;# 
  6467  0713                     	;# 
  6468  0714                     	;# 
  6469  0716                     	;# 
  6470  0717                     	;# 
  6471  0718                     	;# 
  6472  0719                     	;# 
  6473  071A                     	;# 
  6474  071B                     	;# 
  6475  071C                     	;# 
  6476  071D                     	;# 
  6477  071E                     	;# 
  6478  0796                     	;# 
  6479  0797                     	;# 
  6480  0798                     	;# 
  6481  0799                     	;# 
  6482  079A                     	;# 
  6483  079B                     	;# 
  6484  080C                     	;# 
  6485  080D                     	;# 
  6486  080E                     	;# 
  6487  080F                     	;# 
  6488  0810                     	;# 
  6489  0811                     	;# 
  6490  0812                     	;# 
  6491  0813                     	;# 
  6492  0814                     	;# 
  6493  081A                     	;# 
  6494  081B                     	;# 
  6495  081C                     	;# 
  6496  081D                     	;# 
  6497  081E                     	;# 
  6498  081F                     	;# 
  6499  088C                     	;# 
  6500  088D                     	;# 
  6501  088E                     	;# 
  6502  088F                     	;# 
  6503  0890                     	;# 
  6504  0891                     	;# 
  6505  0892                     	;# 
  6506  0893                     	;# 
  6507  0895                     	;# 
  6508  0896                     	;# 
  6509  0897                     	;# 
  6510  0898                     	;# 
  6511  0899                     	;# 
  6512  089A                     	;# 
  6513  089B                     	;# 
  6514  090C                     	;# 
  6515  090E                     	;# 
  6516  090F                     	;# 
  6517  091F                     	;# 
  6518  091F                     	;# 
  6519  098F                     	;# 
  6520  098F                     	;# 
  6521  0990                     	;# 
  6522  0991                     	;# 
  6523  0992                     	;# 
  6524  0993                     	;# 
  6525  0994                     	;# 
  6526  0995                     	;# 
  6527  0996                     	;# 
  6528  0997                     	;# 
  6529  0E0F                     	;# 
  6530  0E10                     	;# 
  6531  0E11                     	;# 
  6532  0E12                     	;# 
  6533  0E13                     	;# 
  6534  0E14                     	;# 
  6535  0E15                     	;# 
  6536  0E16                     	;# 
  6537  0E17                     	;# 
  6538  0E18                     	;# 
  6539  0E19                     	;# 
  6540  0E1A                     	;# 
  6541  0E1B                     	;# 
  6542  0E1C                     	;# 
  6543  0E1D                     	;# 
  6544  0E1E                     	;# 
  6545  0E1F                     	;# 
  6546  0E20                     	;# 
  6547  0E21                     	;# 
  6548  0E22                     	;# 
  6549  0E23                     	;# 
  6550  0E24                     	;# 
  6551  0E25                     	;# 
  6552  0E26                     	;# 
  6553  0E27                     	;# 
  6554  0E28                     	;# 
  6555  0E29                     	;# 
  6556  0E2A                     	;# 
  6557  0E2B                     	;# 
  6558  0E2C                     	;# 
  6559  0E2D                     	;# 
  6560  0E2E                     	;# 
  6561  0E2F                     	;# 
  6562  0E30                     	;# 
  6563  0E31                     	;# 
  6564  0E32                     	;# 
  6565  0E33                     	;# 
  6566  0E34                     	;# 
  6567  0E35                     	;# 
  6568  0E36                     	;# 
  6569  0E37                     	;# 
  6570  0E8F                     	;# 
  6571  0E90                     	;# 
  6572  0E91                     	;# 
  6573  0E92                     	;# 
  6574  0E93                     	;# 
  6575  0E94                     	;# 
  6576  0E95                     	;# 
  6577  0E96                     	;# 
  6578  0E97                     	;# 
  6579  0E9C                     	;# 
  6580  0E9D                     	;# 
  6581  0E9E                     	;# 
  6582  0EA1                     	;# 
  6583  0EA2                     	;# 
  6584  0EA3                     	;# 
  6585  0EA4                     	;# 
  6586  0EA5                     	;# 
  6587  0EA9                     	;# 
  6588  0EAA                     	;# 
  6589  0EAB                     	;# 
  6590  0EAC                     	;# 
  6591  0EB1                     	;# 
  6592  0EB2                     	;# 
  6593  0EB3                     	;# 
  6594  0EB8                     	;# 
  6595  0EB9                     	;# 
  6596  0EBA                     	;# 
  6597  0EBB                     	;# 
  6598  0EBC                     	;# 
  6599  0EBD                     	;# 
  6600  0EBE                     	;# 
  6601  0EC3                     	;# 
  6602  0EC5                     	;# 
  6603  0EC6                     	;# 
  6604  0EC7                     	;# 
  6605  0EC8                     	;# 
  6606  0EC9                     	;# 
  6607  0ECA                     	;# 
  6608  0ECB                     	;# 
  6609  0ECC                     	;# 
  6610  0F10                     	;# 
  6611  0F11                     	;# 
  6612  0F12                     	;# 
  6613  0F13                     	;# 
  6614  0F14                     	;# 
  6615  0F15                     	;# 
  6616  0F16                     	;# 
  6617  0F17                     	;# 
  6618  0F18                     	;# 
  6619  0F19                     	;# 
  6620  0F1A                     	;# 
  6621  0F1B                     	;# 
  6622  0F1C                     	;# 
  6623  0F1D                     	;# 
  6624  0F1E                     	;# 
  6625  0F1F                     	;# 
  6626  0F20                     	;# 
  6627  0F21                     	;# 
  6628  0F22                     	;# 
  6629  0F23                     	;# 
  6630  0F24                     	;# 
  6631  0F25                     	;# 
  6632  0F26                     	;# 
  6633  0F27                     	;# 
  6634  0F28                     	;# 
  6635  0F29                     	;# 
  6636  0F2A                     	;# 
  6637  0F2B                     	;# 
  6638  0F2C                     	;# 
  6639  0F2D                     	;# 
  6640  0F2E                     	;# 
  6641  0F2F                     	;# 
  6642  0F30                     	;# 
  6643  0F31                     	;# 
  6644  0F32                     	;# 
  6645  0F38                     	;# 
  6646  0F39                     	;# 
  6647  0F3A                     	;# 
  6648  0F3B                     	;# 
  6649  0F3C                     	;# 
  6650  0F3D                     	;# 
  6651  0F3E                     	;# 
  6652  0F3F                     	;# 
  6653  0F40                     	;# 
  6654  0F41                     	;# 
  6655  0F43                     	;# 
  6656  0F44                     	;# 
  6657  0F45                     	;# 
  6658  0F46                     	;# 
  6659  0F47                     	;# 
  6660  0F48                     	;# 
  6661  0F49                     	;# 
  6662  0F4A                     	;# 
  6663  0F4B                     	;# 
  6664  0F4C                     	;# 
  6665  0F4E                     	;# 
  6666  0F4F                     	;# 
  6667  0F50                     	;# 
  6668  0F51                     	;# 
  6669  0F52                     	;# 
  6670  0F53                     	;# 
  6671  0F54                     	;# 
  6672  0F55                     	;# 
  6673  0F56                     	;# 
  6674  0F57                     	;# 
  6675  0F59                     	;# 
  6676  0F5A                     	;# 
  6677  0F5B                     	;# 
  6678  0F5C                     	;# 
  6679  0F5D                     	;# 
  6680  0F61                     	;# 
  6681  0F62                     	;# 
  6682  0F64                     	;# 
  6683  0F65                     	;# 
  6684  0F66                     	;# 
  6685  0F67                     	;# 
  6686  0F68                     	;# 
  6687  0F69                     	;# 
  6688  0F6A                     	;# 
  6689  0F6B                     	;# 
  6690  0F6C                     	;# 
  6691  0F6D                     	;# 
  6692  0FE4                     	;# 
  6693  0FE5                     	;# 
  6694  0FE6                     	;# 
  6695  0FE7                     	;# 
  6696  0FE8                     	;# 
  6697  0FE9                     	;# 
  6698  0FEA                     	;# 
  6699  0FEB                     	;# 
  6700  0FED                     	;# 
  6701  0FEE                     	;# 
  6702  0FEF                     	;# 
  6703  0000                     	;# 
  6704  0001                     	;# 
  6705  0002                     	;# 
  6706  0003                     	;# 
  6707  0004                     	;# 
  6708  0005                     	;# 
  6709  0006                     	;# 
  6710  0007                     	;# 
  6711  0008                     	;# 
  6712  0009                     	;# 
  6713  000A                     	;# 
  6714  000B                     	;# 
  6715  000C                     	;# 
  6716  000D                     	;# 
  6717  000E                     	;# 
  6718  000F                     	;# 
  6719  0010                     	;# 
  6720  0011                     	;# 
  6721  0012                     	;# 
  6722  0013                     	;# 
  6723  0014                     	;# 
  6724  0015                     	;# 
  6725  0016                     	;# 
  6726  0017                     	;# 
  6727  0018                     	;# 
  6728  0019                     	;# 
  6729  001A                     	;# 
  6730  001C                     	;# 
  6731  001C                     	;# 
  6732  001D                     	;# 
  6733  001D                     	;# 
  6734  001E                     	;# 
  6735  001F                     	;# 
  6736  008C                     	;# 
  6737  008C                     	;# 
  6738  008D                     	;# 
  6739  008E                     	;# 
  6740  008E                     	;# 
  6741  008F                     	;# 
  6742  0090                     	;# 
  6743  0090                     	;# 
  6744  0091                     	;# 
  6745  0093                     	;# 
  6746  0094                     	;# 
  6747  0095                     	;# 
  6748  0096                     	;# 
  6749  0097                     	;# 
  6750  0098                     	;# 
  6751  0099                     	;# 
  6752  009A                     	;# 
  6753  009B                     	;# 
  6754  009C                     	;# 
  6755  009D                     	;# 
  6756  009E                     	;# 
  6757  010C                     	;# 
  6758  010D                     	;# 
  6759  010E                     	;# 
  6760  010E                     	;# 
  6761  010F                     	;# 
  6762  0110                     	;# 
  6763  0110                     	;# 
  6764  0111                     	;# 
  6765  0112                     	;# 
  6766  0112                     	;# 
  6767  0113                     	;# 
  6768  0114                     	;# 
  6769  0114                     	;# 
  6770  0115                     	;# 
  6771  0116                     	;# 
  6772  0116                     	;# 
  6773  0117                     	;# 
  6774  0119                     	;# 
  6775  0119                     	;# 
  6776  0119                     	;# 
  6777  011A                     	;# 
  6778  011A                     	;# 
  6779  011A                     	;# 
  6780  011B                     	;# 
  6781  011B                     	;# 
  6782  011B                     	;# 
  6783  011B                     	;# 
  6784  011B                     	;# 
  6785  011C                     	;# 
  6786  011C                     	;# 
  6787  011C                     	;# 
  6788  011D                     	;# 
  6789  011D                     	;# 
  6790  011D                     	;# 
  6791  011E                     	;# 
  6792  011E                     	;# 
  6793  011E                     	;# 
  6794  011F                     	;# 
  6795  011F                     	;# 
  6796  011F                     	;# 
  6797  011F                     	;# 
  6798  011F                     	;# 
  6799  018C                     	;# 
  6800  018D                     	;# 
  6801  018E                     	;# 
  6802  018F                     	;# 
  6803  0190                     	;# 
  6804  0191                     	;# 
  6805  0192                     	;# 
  6806  0196                     	;# 
  6807  0197                     	;# 
  6808  0198                     	;# 
  6809  0199                     	;# 
  6810  019A                     	;# 
  6811  019B                     	;# 
  6812  019C                     	;# 
  6813  020C                     	;# 
  6814  020C                     	;# 
  6815  020D                     	;# 
  6816  020E                     	;# 
  6817  020F                     	;# 
  6818  020F                     	;# 
  6819  0210                     	;# 
  6820  0210                     	;# 
  6821  0211                     	;# 
  6822  0211                     	;# 
  6823  0212                     	;# 
  6824  0212                     	;# 
  6825  0213                     	;# 
  6826  0214                     	;# 
  6827  0215                     	;# 
  6828  0215                     	;# 
  6829  0216                     	;# 
  6830  0216                     	;# 
  6831  0217                     	;# 
  6832  0217                     	;# 
  6833  0218                     	;# 
  6834  0218                     	;# 
  6835  0219                     	;# 
  6836  021A                     	;# 
  6837  021B                     	;# 
  6838  021B                     	;# 
  6839  021C                     	;# 
  6840  021C                     	;# 
  6841  021D                     	;# 
  6842  021D                     	;# 
  6843  021E                     	;# 
  6844  021F                     	;# 
  6845  028C                     	;# 
  6846  028C                     	;# 
  6847  028D                     	;# 
  6848  028D                     	;# 
  6849  028E                     	;# 
  6850  028F                     	;# 
  6851  0290                     	;# 
  6852  0290                     	;# 
  6853  0291                     	;# 
  6854  0292                     	;# 
  6855  0292                     	;# 
  6856  0293                     	;# 
  6857  0293                     	;# 
  6858  0294                     	;# 
  6859  0295                     	;# 
  6860  0296                     	;# 
  6861  0296                     	;# 
  6862  0297                     	;# 
  6863  0298                     	;# 
  6864  0298                     	;# 
  6865  0299                     	;# 
  6866  0299                     	;# 
  6867  029A                     	;# 
  6868  029B                     	;# 
  6869  029C                     	;# 
  6870  029C                     	;# 
  6871  029D                     	;# 
  6872  030C                     	;# 
  6873  030C                     	;# 
  6874  030D                     	;# 
  6875  030E                     	;# 
  6876  030F                     	;# 
  6877  0310                     	;# 
  6878  0310                     	;# 
  6879  0311                     	;# 
  6880  0312                     	;# 
  6881  0313                     	;# 
  6882  0314                     	;# 
  6883  0314                     	;# 
  6884  0315                     	;# 
  6885  0316                     	;# 
  6886  0317                     	;# 
  6887  0318                     	;# 
  6888  0318                     	;# 
  6889  0319                     	;# 
  6890  031A                     	;# 
  6891  031B                     	;# 
  6892  031C                     	;# 
  6893  031C                     	;# 
  6894  031D                     	;# 
  6895  031E                     	;# 
  6896  031F                     	;# 
  6897  038C                     	;# 
  6898  038C                     	;# 
  6899  038D                     	;# 
  6900  038E                     	;# 
  6901  0390                     	;# 
  6902  0390                     	;# 
  6903  0391                     	;# 
  6904  0392                     	;# 
  6905  040C                     	;# 
  6906  040D                     	;# 
  6907  040E                     	;# 
  6908  040F                     	;# 
  6909  0410                     	;# 
  6910  0411                     	;# 
  6911  0416                     	;# 
  6912  0416                     	;# 
  6913  0417                     	;# 
  6914  0418                     	;# 
  6915  0418                     	;# 
  6916  0419                     	;# 
  6917  041A                     	;# 
  6918  041A                     	;# 
  6919  041B                     	;# 
  6920  041C                     	;# 
  6921  041C                     	;# 
  6922  041D                     	;# 
  6923  041E                     	;# 
  6924  041F                     	;# 
  6925  048C                     	;# 
  6926  048C                     	;# 
  6927  048D                     	;# 
  6928  048E                     	;# 
  6929  048F                     	;# 
  6930  048F                     	;# 
  6931  0490                     	;# 
  6932  0491                     	;# 
  6933  0492                     	;# 
  6934  0492                     	;# 
  6935  0493                     	;# 
  6936  0494                     	;# 
  6937  0495                     	;# 
  6938  0495                     	;# 
  6939  0496                     	;# 
  6940  0497                     	;# 
  6941  0498                     	;# 
  6942  0499                     	;# 
  6943  049A                     	;# 
  6944  049B                     	;# 
  6945  049C                     	;# 
  6946  049D                     	;# 
  6947  050C                     	;# 
  6948  050C                     	;# 
  6949  050D                     	;# 
  6950  050E                     	;# 
  6951  050F                     	;# 
  6952  050F                     	;# 
  6953  0510                     	;# 
  6954  0511                     	;# 
  6955  0512                     	;# 
  6956  0512                     	;# 
  6957  0513                     	;# 
  6958  0514                     	;# 
  6959  0515                     	;# 
  6960  0515                     	;# 
  6961  0516                     	;# 
  6962  0517                     	;# 
  6963  0518                     	;# 
  6964  0519                     	;# 
  6965  051A                     	;# 
  6966  051B                     	;# 
  6967  051C                     	;# 
  6968  051D                     	;# 
  6969  058C                     	;# 
  6970  058C                     	;# 
  6971  058D                     	;# 
  6972  058E                     	;# 
  6973  058F                     	;# 
  6974  058F                     	;# 
  6975  0590                     	;# 
  6976  0591                     	;# 
  6977  0592                     	;# 
  6978  0593                     	;# 
  6979  060C                     	;# 
  6980  060D                     	;# 
  6981  060E                     	;# 
  6982  060F                     	;# 
  6983  0610                     	;# 
  6984  0611                     	;# 
  6985  0612                     	;# 
  6986  0613                     	;# 
  6987  0614                     	;# 
  6988  0616                     	;# 
  6989  0617                     	;# 
  6990  0618                     	;# 
  6991  0619                     	;# 
  6992  061A                     	;# 
  6993  061B                     	;# 
  6994  061C                     	;# 
  6995  061D                     	;# 
  6996  061E                     	;# 
  6997  068C                     	;# 
  6998  068D                     	;# 
  6999  068E                     	;# 
  7000  068F                     	;# 
  7001  0690                     	;# 
  7002  0691                     	;# 
  7003  0692                     	;# 
  7004  0693                     	;# 
  7005  0694                     	;# 
  7006  070C                     	;# 
  7007  070D                     	;# 
  7008  070E                     	;# 
  7009  070F                     	;# 
  7010  0710                     	;# 
  7011  0711                     	;# 
  7012  0712                     	;# 
  7013  0713                     	;# 
  7014  0714                     	;# 
  7015  0716                     	;# 
  7016  0717                     	;# 
  7017  0718                     	;# 
  7018  0719                     	;# 
  7019  071A                     	;# 
  7020  071B                     	;# 
  7021  071C                     	;# 
  7022  071D                     	;# 
  7023  071E                     	;# 
  7024  0796                     	;# 
  7025  0797                     	;# 
  7026  0798                     	;# 
  7027  0799                     	;# 
  7028  079A                     	;# 
  7029  079B                     	;# 
  7030  080C                     	;# 
  7031  080D                     	;# 
  7032  080E                     	;# 
  7033  080F                     	;# 
  7034  0810                     	;# 
  7035  0811                     	;# 
  7036  0812                     	;# 
  7037  0813                     	;# 
  7038  0814                     	;# 
  7039  081A                     	;# 
  7040  081B                     	;# 
  7041  081C                     	;# 
  7042  081D                     	;# 
  7043  081E                     	;# 
  7044  081F                     	;# 
  7045  088C                     	;# 
  7046  088D                     	;# 
  7047  088E                     	;# 
  7048  088F                     	;# 
  7049  0890                     	;# 
  7050  0891                     	;# 
  7051  0892                     	;# 
  7052  0893                     	;# 
  7053  0895                     	;# 
  7054  0896                     	;# 
  7055  0897                     	;# 
  7056  0898                     	;# 
  7057  0899                     	;# 
  7058  089A                     	;# 
  7059  089B                     	;# 
  7060  090C                     	;# 
  7061  090E                     	;# 
  7062  090F                     	;# 
  7063  091F                     	;# 
  7064  091F                     	;# 
  7065  098F                     	;# 
  7066  098F                     	;# 
  7067  0990                     	;# 
  7068  0991                     	;# 
  7069  0992                     	;# 
  7070  0993                     	;# 
  7071  0994                     	;# 
  7072  0995                     	;# 
  7073  0996                     	;# 
  7074  0997                     	;# 
  7075  0E0F                     	;# 
  7076  0E10                     	;# 
  7077  0E11                     	;# 
  7078  0E12                     	;# 
  7079  0E13                     	;# 
  7080  0E14                     	;# 
  7081  0E15                     	;# 
  7082  0E16                     	;# 
  7083  0E17                     	;# 
  7084  0E18                     	;# 
  7085  0E19                     	;# 
  7086  0E1A                     	;# 
  7087  0E1B                     	;# 
  7088  0E1C                     	;# 
  7089  0E1D                     	;# 
  7090  0E1E                     	;# 
  7091  0E1F                     	;# 
  7092  0E20                     	;# 
  7093  0E21                     	;# 
  7094  0E22                     	;# 
  7095  0E23                     	;# 
  7096  0E24                     	;# 
  7097  0E25                     	;# 
  7098  0E26                     	;# 
  7099  0E27                     	;# 
  7100  0E28                     	;# 
  7101  0E29                     	;# 
  7102  0E2A                     	;# 
  7103  0E2B                     	;# 
  7104  0E2C                     	;# 
  7105  0E2D                     	;# 
  7106  0E2E                     	;# 
  7107  0E2F                     	;# 
  7108  0E30                     	;# 
  7109  0E31                     	;# 
  7110  0E32                     	;# 
  7111  0E33                     	;# 
  7112  0E34                     	;# 
  7113  0E35                     	;# 
  7114  0E36                     	;# 
  7115  0E37                     	;# 
  7116  0E8F                     	;# 
  7117  0E90                     	;# 
  7118  0E91                     	;# 
  7119  0E92                     	;# 
  7120  0E93                     	;# 
  7121  0E94                     	;# 
  7122  0E95                     	;# 
  7123  0E96                     	;# 
  7124  0E97                     	;# 
  7125  0E9C                     	;# 
  7126  0E9D                     	;# 
  7127  0E9E                     	;# 
  7128  0EA1                     	;# 
  7129  0EA2                     	;# 
  7130  0EA3                     	;# 
  7131  0EA4                     	;# 
  7132  0EA5                     	;# 
  7133  0EA9                     	;# 
  7134  0EAA                     	;# 
  7135  0EAB                     	;# 
  7136  0EAC                     	;# 
  7137  0EB1                     	;# 
  7138  0EB2                     	;# 
  7139  0EB3                     	;# 
  7140  0EB8                     	;# 
  7141  0EB9                     	;# 
  7142  0EBA                     	;# 
  7143  0EBB                     	;# 
  7144  0EBC                     	;# 
  7145  0EBD                     	;# 
  7146  0EBE                     	;# 
  7147  0EC3                     	;# 
  7148  0EC5                     	;# 
  7149  0EC6                     	;# 
  7150  0EC7                     	;# 
  7151  0EC8                     	;# 
  7152  0EC9                     	;# 
  7153  0ECA                     	;# 
  7154  0ECB                     	;# 
  7155  0ECC                     	;# 
  7156  0F10                     	;# 
  7157  0F11                     	;# 
  7158  0F12                     	;# 
  7159  0F13                     	;# 
  7160  0F14                     	;# 
  7161  0F15                     	;# 
  7162  0F16                     	;# 
  7163  0F17                     	;# 
  7164  0F18                     	;# 
  7165  0F19                     	;# 
  7166  0F1A                     	;# 
  7167  0F1B                     	;# 
  7168  0F1C                     	;# 
  7169  0F1D                     	;# 
  7170  0F1E                     	;# 
  7171  0F1F                     	;# 
  7172  0F20                     	;# 
  7173  0F21                     	;# 
  7174  0F22                     	;# 
  7175  0F23                     	;# 
  7176  0F24                     	;# 
  7177  0F25                     	;# 
  7178  0F26                     	;# 
  7179  0F27                     	;# 
  7180  0F28                     	;# 
  7181  0F29                     	;# 
  7182  0F2A                     	;# 
  7183  0F2B                     	;# 
  7184  0F2C                     	;# 
  7185  0F2D                     	;# 
  7186  0F2E                     	;# 
  7187  0F2F                     	;# 
  7188  0F30                     	;# 
  7189  0F31                     	;# 
  7190  0F32                     	;# 
  7191  0F38                     	;# 
  7192  0F39                     	;# 
  7193  0F3A                     	;# 
  7194  0F3B                     	;# 
  7195  0F3C                     	;# 
  7196  0F3D                     	;# 
  7197  0F3E                     	;# 
  7198  0F3F                     	;# 
  7199  0F40                     	;# 
  7200  0F41                     	;# 
  7201  0F43                     	;# 
  7202  0F44                     	;# 
  7203  0F45                     	;# 
  7204  0F46                     	;# 
  7205  0F47                     	;# 
  7206  0F48                     	;# 
  7207  0F49                     	;# 
  7208  0F4A                     	;# 
  7209  0F4B                     	;# 
  7210  0F4C                     	;# 
  7211  0F4E                     	;# 
  7212  0F4F                     	;# 
  7213  0F50                     	;# 
  7214  0F51                     	;# 
  7215  0F52                     	;# 
  7216  0F53                     	;# 
  7217  0F54                     	;# 
  7218  0F55                     	;# 
  7219  0F56                     	;# 
  7220  0F57                     	;# 
  7221  0F59                     	;# 
  7222  0F5A                     	;# 
  7223  0F5B                     	;# 
  7224  0F5C                     	;# 
  7225  0F5D                     	;# 
  7226  0F61                     	;# 
  7227  0F62                     	;# 
  7228  0F64                     	;# 
  7229  0F65                     	;# 
  7230  0F66                     	;# 
  7231  0F67                     	;# 
  7232  0F68                     	;# 
  7233  0F69                     	;# 
  7234  0F6A                     	;# 
  7235  0F6B                     	;# 
  7236  0F6C                     	;# 
  7237  0F6D                     	;# 
  7238  0FE4                     	;# 
  7239  0FE5                     	;# 
  7240  0FE6                     	;# 
  7241  0FE7                     	;# 
  7242  0FE8                     	;# 
  7243  0FE9                     	;# 
  7244  0FEA                     	;# 
  7245  0FEB                     	;# 
  7246  0FED                     	;# 
  7247  0FEE                     	;# 
  7248  0FEF                     	;# 
  7249  0000                     	;# 
  7250  0001                     	;# 
  7251  0002                     	;# 
  7252  0003                     	;# 
  7253  0004                     	;# 
  7254  0005                     	;# 
  7255  0006                     	;# 
  7256  0007                     	;# 
  7257  0008                     	;# 
  7258  0009                     	;# 
  7259  000A                     	;# 
  7260  000B                     	;# 
  7261  000C                     	;# 
  7262  000D                     	;# 
  7263  000E                     	;# 
  7264  000F                     	;# 
  7265  0010                     	;# 
  7266  0011                     	;# 
  7267  0012                     	;# 
  7268  0013                     	;# 
  7269  0014                     	;# 
  7270  0015                     	;# 
  7271  0016                     	;# 
  7272  0017                     	;# 
  7273  0018                     	;# 
  7274  0019                     	;# 
  7275  001A                     	;# 
  7276  001C                     	;# 
  7277  001C                     	;# 
  7278  001D                     	;# 
  7279  001D                     	;# 
  7280  001E                     	;# 
  7281  001F                     	;# 
  7282  008C                     	;# 
  7283  008C                     	;# 
  7284  008D                     	;# 
  7285  008E                     	;# 
  7286  008E                     	;# 
  7287  008F                     	;# 
  7288  0090                     	;# 
  7289  0090                     	;# 
  7290  0091                     	;# 
  7291  0093                     	;# 
  7292  0094                     	;# 
  7293  0095                     	;# 
  7294  0096                     	;# 
  7295  0097                     	;# 
  7296  0098                     	;# 
  7297  0099                     	;# 
  7298  009A                     	;# 
  7299  009B                     	;# 
  7300  009C                     	;# 
  7301  009D                     	;# 
  7302  009E                     	;# 
  7303  010C                     	;# 
  7304  010D                     	;# 
  7305  010E                     	;# 
  7306  010E                     	;# 
  7307  010F                     	;# 
  7308  0110                     	;# 
  7309  0110                     	;# 
  7310  0111                     	;# 
  7311  0112                     	;# 
  7312  0112                     	;# 
  7313  0113                     	;# 
  7314  0114                     	;# 
  7315  0114                     	;# 
  7316  0115                     	;# 
  7317  0116                     	;# 
  7318  0116                     	;# 
  7319  0117                     	;# 
  7320  0119                     	;# 
  7321  0119                     	;# 
  7322  0119                     	;# 
  7323  011A                     	;# 
  7324  011A                     	;# 
  7325  011A                     	;# 
  7326  011B                     	;# 
  7327  011B                     	;# 
  7328  011B                     	;# 
  7329  011B                     	;# 
  7330  011B                     	;# 
  7331  011C                     	;# 
  7332  011C                     	;# 
  7333  011C                     	;# 
  7334  011D                     	;# 
  7335  011D                     	;# 
  7336  011D                     	;# 
  7337  011E                     	;# 
  7338  011E                     	;# 
  7339  011E                     	;# 
  7340  011F                     	;# 
  7341  011F                     	;# 
  7342  011F                     	;# 
  7343  011F                     	;# 
  7344  011F                     	;# 
  7345  018C                     	;# 
  7346  018D                     	;# 
  7347  018E                     	;# 
  7348  018F                     	;# 
  7349  0190                     	;# 
  7350  0191                     	;# 
  7351  0192                     	;# 
  7352  0196                     	;# 
  7353  0197                     	;# 
  7354  0198                     	;# 
  7355  0199                     	;# 
  7356  019A                     	;# 
  7357  019B                     	;# 
  7358  019C                     	;# 
  7359  020C                     	;# 
  7360  020C                     	;# 
  7361  020D                     	;# 
  7362  020E                     	;# 
  7363  020F                     	;# 
  7364  020F                     	;# 
  7365  0210                     	;# 
  7366  0210                     	;# 
  7367  0211                     	;# 
  7368  0211                     	;# 
  7369  0212                     	;# 
  7370  0212                     	;# 
  7371  0213                     	;# 
  7372  0214                     	;# 
  7373  0215                     	;# 
  7374  0215                     	;# 
  7375  0216                     	;# 
  7376  0216                     	;# 
  7377  0217                     	;# 
  7378  0217                     	;# 
  7379  0218                     	;# 
  7380  0218                     	;# 
  7381  0219                     	;# 
  7382  021A                     	;# 
  7383  021B                     	;# 
  7384  021B                     	;# 
  7385  021C                     	;# 
  7386  021C                     	;# 
  7387  021D                     	;# 
  7388  021D                     	;# 
  7389  021E                     	;# 
  7390  021F                     	;# 
  7391  028C                     	;# 
  7392  028C                     	;# 
  7393  028D                     	;# 
  7394  028D                     	;# 
  7395  028E                     	;# 
  7396  028F                     	;# 
  7397  0290                     	;# 
  7398  0290                     	;# 
  7399  0291                     	;# 
  7400  0292                     	;# 
  7401  0292                     	;# 
  7402  0293                     	;# 
  7403  0293                     	;# 
  7404  0294                     	;# 
  7405  0295                     	;# 
  7406  0296                     	;# 
  7407  0296                     	;# 
  7408  0297                     	;# 
  7409  0298                     	;# 
  7410  0298                     	;# 
  7411  0299                     	;# 
  7412  0299                     	;# 
  7413  029A                     	;# 
  7414  029B                     	;# 
  7415  029C                     	;# 
  7416  029C                     	;# 
  7417  029D                     	;# 
  7418  030C                     	;# 
  7419  030C                     	;# 
  7420  030D                     	;# 
  7421  030E                     	;# 
  7422  030F                     	;# 
  7423  0310                     	;# 
  7424  0310                     	;# 
  7425  0311                     	;# 
  7426  0312                     	;# 
  7427  0313                     	;# 
  7428  0314                     	;# 
  7429  0314                     	;# 
  7430  0315                     	;# 
  7431  0316                     	;# 
  7432  0317                     	;# 
  7433  0318                     	;# 
  7434  0318                     	;# 
  7435  0319                     	;# 
  7436  031A                     	;# 
  7437  031B                     	;# 
  7438  031C                     	;# 
  7439  031C                     	;# 
  7440  031D                     	;# 
  7441  031E                     	;# 
  7442  031F                     	;# 
  7443  038C                     	;# 
  7444  038C                     	;# 
  7445  038D                     	;# 
  7446  038E                     	;# 
  7447  0390                     	;# 
  7448  0390                     	;# 
  7449  0391                     	;# 
  7450  0392                     	;# 
  7451  040C                     	;# 
  7452  040D                     	;# 
  7453  040E                     	;# 
  7454  040F                     	;# 
  7455  0410                     	;# 
  7456  0411                     	;# 
  7457  0416                     	;# 
  7458  0416                     	;# 
  7459  0417                     	;# 
  7460  0418                     	;# 
  7461  0418                     	;# 
  7462  0419                     	;# 
  7463  041A                     	;# 
  7464  041A                     	;# 
  7465  041B                     	;# 
  7466  041C                     	;# 
  7467  041C                     	;# 
  7468  041D                     	;# 
  7469  041E                     	;# 
  7470  041F                     	;# 
  7471  048C                     	;# 
  7472  048C                     	;# 
  7473  048D                     	;# 
  7474  048E                     	;# 
  7475  048F                     	;# 
  7476  048F                     	;# 
  7477  0490                     	;# 
  7478  0491                     	;# 
  7479  0492                     	;# 
  7480  0492                     	;# 
  7481  0493                     	;# 
  7482  0494                     	;# 
  7483  0495                     	;# 
  7484  0495                     	;# 
  7485  0496                     	;# 
  7486  0497                     	;# 
  7487  0498                     	;# 
  7488  0499                     	;# 
  7489  049A                     	;# 
  7490  049B                     	;# 
  7491  049C                     	;# 
  7492  049D                     	;# 
  7493  050C                     	;# 
  7494  050C                     	;# 
  7495  050D                     	;# 
  7496  050E                     	;# 
  7497  050F                     	;# 
  7498  050F                     	;# 
  7499  0510                     	;# 
  7500  0511                     	;# 
  7501  0512                     	;# 
  7502  0512                     	;# 
  7503  0513                     	;# 
  7504  0514                     	;# 
  7505  0515                     	;# 
  7506  0515                     	;# 
  7507  0516                     	;# 
  7508  0517                     	;# 
  7509  0518                     	;# 
  7510  0519                     	;# 
  7511  051A                     	;# 
  7512  051B                     	;# 
  7513  051C                     	;# 
  7514  051D                     	;# 
  7515  058C                     	;# 
  7516  058C                     	;# 
  7517  058D                     	;# 
  7518  058E                     	;# 
  7519  058F                     	;# 
  7520  058F                     	;# 
  7521  0590                     	;# 
  7522  0591                     	;# 
  7523  0592                     	;# 
  7524  0593                     	;# 
  7525  060C                     	;# 
  7526  060D                     	;# 
  7527  060E                     	;# 
  7528  060F                     	;# 
  7529  0610                     	;# 
  7530  0611                     	;# 
  7531  0612                     	;# 
  7532  0613                     	;# 
  7533  0614                     	;# 
  7534  0616                     	;# 
  7535  0617                     	;# 
  7536  0618                     	;# 
  7537  0619                     	;# 
  7538  061A                     	;# 
  7539  061B                     	;# 
  7540  061C                     	;# 
  7541  061D                     	;# 
  7542  061E                     	;# 
  7543  068C                     	;# 
  7544  068D                     	;# 
  7545  068E                     	;# 
  7546  068F                     	;# 
  7547  0690                     	;# 
  7548  0691                     	;# 
  7549  0692                     	;# 
  7550  0693                     	;# 
  7551  0694                     	;# 
  7552  070C                     	;# 
  7553  070D                     	;# 
  7554  070E                     	;# 
  7555  070F                     	;# 
  7556  0710                     	;# 
  7557  0711                     	;# 
  7558  0712                     	;# 
  7559  0713                     	;# 
  7560  0714                     	;# 
  7561  0716                     	;# 
  7562  0717                     	;# 
  7563  0718                     	;# 
  7564  0719                     	;# 
  7565  071A                     	;# 
  7566  071B                     	;# 
  7567  071C                     	;# 
  7568  071D                     	;# 
  7569  071E                     	;# 
  7570  0796                     	;# 
  7571  0797                     	;# 
  7572  0798                     	;# 
  7573  0799                     	;# 
  7574  079A                     	;# 
  7575  079B                     	;# 
  7576  080C                     	;# 
  7577  080D                     	;# 
  7578  080E                     	;# 
  7579  080F                     	;# 
  7580  0810                     	;# 
  7581  0811                     	;# 
  7582  0812                     	;# 
  7583  0813                     	;# 
  7584  0814                     	;# 
  7585  081A                     	;# 
  7586  081B                     	;# 
  7587  081C                     	;# 
  7588  081D                     	;# 
  7589  081E                     	;# 
  7590  081F                     	;# 
  7591  088C                     	;# 
  7592  088D                     	;# 
  7593  088E                     	;# 
  7594  088F                     	;# 
  7595  0890                     	;# 
  7596  0891                     	;# 
  7597  0892                     	;# 
  7598  0893                     	;# 
  7599  0895                     	;# 
  7600  0896                     	;# 
  7601  0897                     	;# 
  7602  0898                     	;# 
  7603  0899                     	;# 
  7604  089A                     	;# 
  7605  089B                     	;# 
  7606  090C                     	;# 
  7607  090E                     	;# 
  7608  090F                     	;# 
  7609  091F                     	;# 
  7610  091F                     	;# 
  7611  098F                     	;# 
  7612  098F                     	;# 
  7613  0990                     	;# 
  7614  0991                     	;# 
  7615  0992                     	;# 
  7616  0993                     	;# 
  7617  0994                     	;# 
  7618  0995                     	;# 
  7619  0996                     	;# 
  7620  0997                     	;# 
  7621  0E0F                     	;# 
  7622  0E10                     	;# 
  7623  0E11                     	;# 
  7624  0E12                     	;# 
  7625  0E13                     	;# 
  7626  0E14                     	;# 
  7627  0E15                     	;# 
  7628  0E16                     	;# 
  7629  0E17                     	;# 
  7630  0E18                     	;# 
  7631  0E19                     	;# 
  7632  0E1A                     	;# 
  7633  0E1B                     	;# 
  7634  0E1C                     	;# 
  7635  0E1D                     	;# 
  7636  0E1E                     	;# 
  7637  0E1F                     	;# 
  7638  0E20                     	;# 
  7639  0E21                     	;# 
  7640  0E22                     	;# 
  7641  0E23                     	;# 
  7642  0E24                     	;# 
  7643  0E25                     	;# 
  7644  0E26                     	;# 
  7645  0E27                     	;# 
  7646  0E28                     	;# 
  7647  0E29                     	;# 
  7648  0E2A                     	;# 
  7649  0E2B                     	;# 
  7650  0E2C                     	;# 
  7651  0E2D                     	;# 
  7652  0E2E                     	;# 
  7653  0E2F                     	;# 
  7654  0E30                     	;# 
  7655  0E31                     	;# 
  7656  0E32                     	;# 
  7657  0E33                     	;# 
  7658  0E34                     	;# 
  7659  0E35                     	;# 
  7660  0E36                     	;# 
  7661  0E37                     	;# 
  7662  0E8F                     	;# 
  7663  0E90                     	;# 
  7664  0E91                     	;# 
  7665  0E92                     	;# 
  7666  0E93                     	;# 
  7667  0E94                     	;# 
  7668  0E95                     	;# 
  7669  0E96                     	;# 
  7670  0E97                     	;# 
  7671  0E9C                     	;# 
  7672  0E9D                     	;# 
  7673  0E9E                     	;# 
  7674  0EA1                     	;# 
  7675  0EA2                     	;# 
  7676  0EA3                     	;# 
  7677  0EA4                     	;# 
  7678  0EA5                     	;# 
  7679  0EA9                     	;# 
  7680  0EAA                     	;# 
  7681  0EAB                     	;# 
  7682  0EAC                     	;# 
  7683  0EB1                     	;# 
  7684  0EB2                     	;# 
  7685  0EB3                     	;# 
  7686  0EB8                     	;# 
  7687  0EB9                     	;# 
  7688  0EBA                     	;# 
  7689  0EBB                     	;# 
  7690  0EBC                     	;# 
  7691  0EBD                     	;# 
  7692  0EBE                     	;# 
  7693  0EC3                     	;# 
  7694  0EC5                     	;# 
  7695  0EC6                     	;# 
  7696  0EC7                     	;# 
  7697  0EC8                     	;# 
  7698  0EC9                     	;# 
  7699  0ECA                     	;# 
  7700  0ECB                     	;# 
  7701  0ECC                     	;# 
  7702  0F10                     	;# 
  7703  0F11                     	;# 
  7704  0F12                     	;# 
  7705  0F13                     	;# 
  7706  0F14                     	;# 
  7707  0F15                     	;# 
  7708  0F16                     	;# 
  7709  0F17                     	;# 
  7710  0F18                     	;# 
  7711  0F19                     	;# 
  7712  0F1A                     	;# 
  7713  0F1B                     	;# 
  7714  0F1C                     	;# 
  7715  0F1D                     	;# 
  7716  0F1E                     	;# 
  7717  0F1F                     	;# 
  7718  0F20                     	;# 
  7719  0F21                     	;# 
  7720  0F22                     	;# 
  7721  0F23                     	;# 
  7722  0F24                     	;# 
  7723  0F25                     	;# 
  7724  0F26                     	;# 
  7725  0F27                     	;# 
  7726  0F28                     	;# 
  7727  0F29                     	;# 
  7728  0F2A                     	;# 
  7729  0F2B                     	;# 
  7730  0F2C                     	;# 
  7731  0F2D                     	;# 
  7732  0F2E                     	;# 
  7733  0F2F                     	;# 
  7734  0F30                     	;# 
  7735  0F31                     	;# 
  7736  0F32                     	;# 
  7737  0F38                     	;# 
  7738  0F39                     	;# 
  7739  0F3A                     	;# 
  7740  0F3B                     	;# 
  7741  0F3C                     	;# 
  7742  0F3D                     	;# 
  7743  0F3E                     	;# 
  7744  0F3F                     	;# 
  7745  0F40                     	;# 
  7746  0F41                     	;# 
  7747  0F43                     	;# 
  7748  0F44                     	;# 
  7749  0F45                     	;# 
  7750  0F46                     	;# 
  7751  0F47                     	;# 
  7752  0F48                     	;# 
  7753  0F49                     	;# 
  7754  0F4A                     	;# 
  7755  0F4B                     	;# 
  7756  0F4C                     	;# 
  7757  0F4E                     	;# 
  7758  0F4F                     	;# 
  7759  0F50                     	;# 
  7760  0F51                     	;# 
  7761  0F52                     	;# 
  7762  0F53                     	;# 
  7763  0F54                     	;# 
  7764  0F55                     	;# 
  7765  0F56                     	;# 
  7766  0F57                     	;# 
  7767  0F59                     	;# 
  7768  0F5A                     	;# 
  7769  0F5B                     	;# 
  7770  0F5C                     	;# 
  7771  0F5D                     	;# 
  7772  0F61                     	;# 
  7773  0F62                     	;# 
  7774  0F64                     	;# 
  7775  0F65                     	;# 
  7776  0F66                     	;# 
  7777  0F67                     	;# 
  7778  0F68                     	;# 
  7779  0F69                     	;# 
  7780  0F6A                     	;# 
  7781  0F6B                     	;# 
  7782  0F6C                     	;# 
  7783  0F6D                     	;# 
  7784  0FE4                     	;# 
  7785  0FE5                     	;# 
  7786  0FE6                     	;# 
  7787  0FE7                     	;# 
  7788  0FE8                     	;# 
  7789  0FE9                     	;# 
  7790  0FEA                     	;# 
  7791  0FEB                     	;# 
  7792  0FED                     	;# 
  7793  0FEE                     	;# 
  7794  0FEF                     	;# 
  7795                           
  7796                           	psect	idataCOMMON
  7797  07FF                     __pidataCOMMON:
  7798                           
  7799                           ;initializer for _NREG
  7800  07FF  3419               	retlw	25
  7801                           
  7802                           	psect	idataBANK1
  7803  1001                     __pidataBANK1:
  7804                           
  7805                           ;initializer for _alarmPWMStart
  7806  1001  34FF               	retlw	255
  7807  1002  34FF               	retlw	255
  7808  1003  34FF               	retlw	255
  7809                           
  7810                           ;initializer for _prevLumLevel
  7811  1004  34FF               	retlw	255
  7812  1005  34FF               	retlw	255
  7813                           
  7814                           ;initializer for _prevTemp
  7815  1006  34FF               	retlw	255
  7816  1007  34FF               	retlw	255
  7817                           
  7818                           ;initializer for _updateLCD
  7819  1008  3401               	retlw	1
  7820                           
  7821                           ;initializer for _TALA
  7822  1009  3405               	retlw	5
  7823                           
  7824                           ;initializer for _PMON
  7825  100A  3403               	retlw	3
  7826                           
  7827                           	psect	stringtext1
  7828  1800                     __pstringtext1:
  7829  1800                     _commands:
  7830  1800  349D               	retlw	low _cmd_rc
  7831  1801  3412               	retlw	high _cmd_rc
  7832  1802  34C0               	retlw	192
  7833  1803  348B               	retlw	low _cmd_sc
  7834  1804  3417               	retlw	high _cmd_sc
  7835  1805  34C1               	retlw	193
  7836  1806  3412               	retlw	low _cmd_rtl
  7837  1807  3412               	retlw	high _cmd_rtl
  7838  1808  34C2               	retlw	194
  7839  1809  34C2               	retlw	low _cmd_rp
  7840  180A  3412               	retlw	high _cmd_rp
  7841  180B  34C3               	retlw	195
  7842  180C  34B8               	retlw	low _cmd_mmp
  7843  180D  3410               	retlw	high _cmd_mmp
  7844  180E  34C4               	retlw	196
  7845  180F  3404               	retlw	low _cmd_mta
  7846  1810  3411               	retlw	high _cmd_mta
  7847  1811  34C5               	retlw	197
  7848  1812  34DA               	retlw	low _cmd_ra
  7849  1813  3414               	retlw	high _cmd_ra
  7850  1814  34C6               	retlw	198
  7851  1815  34A7               	retlw	low _cmd_dac
  7852  1816  3408               	retlw	high _cmd_dac
  7853  1817  34C7               	retlw	199
  7854  1818  34B2               	retlw	low _cmd_dtl
  7855  1819  3415               	retlw	high _cmd_dtl
  7856  181A  34C8               	retlw	200
  7857  181B  3465               	retlw	low _cmd_aa
  7858  181C  3414               	retlw	high _cmd_aa
  7859  181D  34C9               	retlw	201
  7860  181E  340D               	retlw	low _cmd_ir
  7861  181F  3413               	retlw	high _cmd_ir
  7862  1820  34CA               	retlw	202
  7863  1821  3428               	retlw	low _cmd_trc
  7864  1822  340B               	retlw	high _cmd_trc
  7865  1823  34CB               	retlw	203
  7866  1824  3401               	retlw	low _cmd_tri
  7867  1825  340C               	retlw	high _cmd_tri
  7868  1826  34CC               	retlw	204
  7869  1827                     __end_of_commands:
  7870                           
  7871                           	psect	stringtext2
  7872  1836                     __pstringtext2:
  7873  1836                     _dpowers:
  7874  1836  3401               	retlw	1
  7875  1837  3400               	retlw	0
  7876  1838  340A               	retlw	10
  7877  1839  3400               	retlw	0
  7878  183A  3464               	retlw	100
  7879  183B  3400               	retlw	0
  7880  183C  34E8               	retlw	232
  7881  183D  3403               	retlw	3
  7882  183E  3410               	retlw	16
  7883  183F  3427               	retlw	39
  7884  1840                     __end_of_dpowers:
  7885                           
  7886                           	psect	nvBANK1
  7887  00EB                     __pnvBANK1:
  7888  00EB                     _TMR1_InterruptHandler:
  7889  00EB                     	ds	2
  7890  00ED                     _timer1ReloadVal:
  7891  00ED                     	ds	2
  7892  00EF                     _eusartTxBufferRemaining:
  7893  00EF                     	ds	1
  7894                           
  7895                           	psect	nvBANK2
  7896  0137                     __pnvBANK2:
  7897  0137                     _INT_InterruptHandler:
  7898  0137                     	ds	2
  7899  0139                     _EUSART_RxDefaultInterruptHandler:
  7900  0139                     	ds	2
  7901  013B                     _EUSART_TxDefaultInterruptHandler:
  7902  013B                     	ds	2
  7903  0013                     _TRISCbits	set	19
  7904  000E                     _PORTCbits	set	14
  7905  0016                     _LATAbits	set	22
  7906  000B                     _INTCONbits	set	11
  7907  0014                     _TRISD	set	20
  7908  0013                     _TRISC	set	19
  7909  0012                     _TRISB	set	18
  7910  0011                     _TRISA	set	17
  7911  0015                     _TRISE	set	21
  7912  0018                     _LATC	set	24
  7913  0017                     _LATB	set	23
  7914  0016                     _LATA	set	22
  7915  0019                     _LATD	set	25
  7916  001A                     _LATE	set	26
  7917  0094                     _ADCON1bits	set	148
  7918  008E                     _ADPREVL	set	142
  7919  008F                     _ADPREVH	set	143
  7920  0097                     _ADSTATbits	set	151
  7921  0090                     _ADACCL	set	144
  7922  0091                     _ADACCH	set	145
  7923  0095                     _ADCON2bits	set	149
  7924  009C                     _ADPRE	set	156
  7925  0096                     _ADCON3bits	set	150
  7926  008C                     _ADRESL	set	140
  7927  008D                     _ADRESH	set	141
  7928  0093                     _ADCON0bits	set	147
  7929  009D                     _ADACQ	set	157
  7930  0093                     _ADCON0	set	147
  7931  0098                     _ADCLK	set	152
  7932  0099                     _ADACT	set	153
  7933  009A                     _ADREF	set	154
  7934  0097                     _ADSTAT	set	151
  7935  0096                     _ADCON3	set	150
  7936  0095                     _ADCON2	set	149
  7937  0094                     _ADCON1	set	148
  7938  009B                     _ADCAP	set	155
  7939  009E                     _ADPCH	set	158
  7940  0119                     _RC1REG	set	281
  7941  011D                     _RC1STAbits	set	285
  7942  011A                     _TX1REG	set	282
  7943  011E                     _TX1STAbits	set	286
  7944  011C                     _SP1BRGH	set	284
  7945  011B                     _SP1BRGL	set	283
  7946  011E                     _TX1STA	set	286
  7947  011D                     _RC1STA	set	285
  7948  011F                     _BAUD1CON	set	287
  7949  0116                     _ADERRL	set	278
  7950  0117                     _ADERRH	set	279
  7951  0114                     _ADFLTRL	set	276
  7952  0115                     _ADFLTRH	set	277
  7953  010C                     _ADCNT	set	268
  7954  010D                     _ADRPT	set	269
  7955  0113                     _ADSTPTH	set	275
  7956  0112                     _ADSTPTL	set	274
  7957  0111                     _ADUTHH	set	273
  7958  0110                     _ADUTHL	set	272
  7959  010F                     _ADLTHH	set	271
  7960  010E                     _ADLTHL	set	270
  7961  018E                     _SSP1MSK	set	398
  7962  018D                     _SSP1ADD	set	397
  7963  018F                     _SSP1STAT	set	399
  7964  0191                     _SSP1CON2	set	401
  7965  0190                     _SSP1CON1bits	set	400
  7966  018C                     _SSP1BUF	set	396
  7967  018F                     _SSP1STATbits	set	399
  7968  0191                     _SSP1CON2bits	set	401
  7969  0190                     _SSP1CON1	set	400
  7970  021F                     _CCPTMRS1bits	set	543
  7971  020F                     _T1GCONbits	set	527
  7972  020E                     _T1CONbits	set	526
  7973  020E                     _T1CON	set	526
  7974  020C                     _TMR1L	set	524
  7975  020D                     _TMR1H	set	525
  7976  0211                     _T1CLK	set	529
  7977  0210                     _T1GATE	set	528
  7978  020F                     _T1GCON	set	527
  7979  028D                     _PR2	set	653
  7980  028C                     _TMR2	set	652
  7981  028E                     _T2CONbits	set	654
  7982  0291                     _T2RSTbits	set	657
  7983  028F                     _T2HLTbits	set	655
  7984  028E                     _T2CON	set	654
  7985  028C                     _T2TMR	set	652
  7986  028D                     _T2PR	set	653
  7987  0291                     _T2RST	set	657
  7988  028F                     _T2HLT	set	655
  7989  0290                     _T2CLKCON	set	656
  7990  038C                     _PWM6DCL	set	908
  7991  038D                     _PWM6DCH	set	909
  7992  038E                     _PWM6CON	set	910
  7993  1C77                     _PWM6EN	set	7287
  7994  0710                     _PIR4bits	set	1808
  7995  071A                     _PIE4bits	set	1818
  7996  070C                     _PIR0bits	set	1804
  7997  0716                     _PIE0bits	set	1814
  7998  0719                     _PIE3bits	set	1817
  7999  070F                     _PIR3bits	set	1807
  8000  079B                     _PMD5	set	1947
  8001  079A                     _PMD4	set	1946
  8002  0799                     _PMD3	set	1945
  8003  0798                     _PMD2	set	1944
  8004  0797                     _PMD1	set	1943
  8005  0796                     _PMD0	set	1942
  8006  081F                     _NVMCON2	set	2079
  8007  081C                     _NVMDATL	set	2076
  8008  081D                     _NVMDATH	set	2077
  8009  081E                     _NVMCON1bits	set	2078
  8010  081B                     _NVMADRH	set	2075
  8011  081A                     _NVMADRL	set	2074
  8012  0892                     _OSCTUNE	set	2194
  8013  0893                     _OSCFRQ	set	2195
  8014  0891                     _OSCEN	set	2193
  8015  088F                     _OSCCON3	set	2191
  8016  088D                     _OSCCON1	set	2189
  8017  0EC6                     _SSP1DATPPS	set	3782
  8018  0EC5                     _SSP1CLKPPS	set	3781
  8019  0ECB                     _RXPPS	set	3787
  8020  0E90                     _INTPPS	set	3728
  8021  0F26                     _RC6PPS	set	3878
  8022  0F16                     _RA6PPS	set	3862
  8023  0F24                     _RC4PPS	set	3876
  8024  0F23                     _RC3PPS	set	3875
  8025  0F67                     _SLRCONE	set	3943
  8026  0F5C                     _SLRCOND	set	3932
  8027  0F51                     _SLRCONC	set	3921
  8028  0F46                     _SLRCONB	set	3910
  8029  0F3B                     _SLRCONA	set	3899
  8030  0F5B                     _ODCOND	set	3931
  8031  0F50                     _ODCONC	set	3920
  8032  0F45                     _ODCONB	set	3909
  8033  0F3A                     _ODCONA	set	3898
  8034  0F66                     _ODCONE	set	3942
  8035  0F4F                     _WPUC	set	3919
  8036  0F39                     _WPUA	set	3897
  8037  0F44                     _WPUB	set	3908
  8038  0F65                     _WPUE	set	3941
  8039  0F5A                     _WPUD	set	3930
  8040  0F38                     _ANSELA	set	3896
  8041  0F64                     _ANSELE	set	3940
  8042  0F43                     _ANSELB	set	3907
  8043  0F4E                     _ANSELC	set	3918
  8044  0F59                     _ANSELD	set	3929
  8045  7A7C                     _WPUC4	set	31356
  8046  7A7B                     _WPUC3	set	31355
  8047                           
  8048                           	psect	stringtext3
  8049  1827                     __pstringtext3:
  8050  1827                     STR_1:
  8051  1827  3425               	retlw	37	;'%'
  8052  1828  3430               	retlw	48	;'0'
  8053  1829  3432               	retlw	50	;'2'
  8054  182A  3464               	retlw	100	;'d'
  8055  182B  343A               	retlw	58	;':'
  8056  182C  3425               	retlw	37	;'%'
  8057  182D  3430               	retlw	48	;'0'
  8058  182E  3432               	retlw	50	;'2'
  8059  182F  3464               	retlw	100	;'d'
  8060  1830  343A               	retlw	58	;':'
  8061  1831  3425               	retlw	37	;'%'
  8062  1832  3430               	retlw	48	;'0'
  8063  1833  3432               	retlw	50	;'2'
  8064  1834  3464               	retlw	100	;'d'
  8065  1835  3400               	retlw	0
  8066                           
  8067                           	psect	stringtext4
  8068  1840                     __pstringtext4:
  8069  1840                     STR_3:
  8070  1840  3425               	retlw	37	;'%'
  8071  1841  3430               	retlw	48	;'0'
  8072  1842  3432               	retlw	50	;'2'
  8073  1843  3464               	retlw	100	;'d'
  8074  1844  3420               	retlw	32	;' '
  8075  1845  3443               	retlw	67	;'C'
  8076  1846  3400               	retlw	0
  8077                           
  8078                           	psect	stringtext5
  8079  1847                     __pstringtext5:
  8080  1847                     STR_5:
  8081  1847  344C               	retlw	76	;'L'
  8082  1848  3420               	retlw	32	;' '
  8083  1849  3425               	retlw	37	;'%'
  8084  184A  3464               	retlw	100	;'d'
  8085  184B  3400               	retlw	0
  8086                           
  8087                           	psect	stringtext6
  8088  184C                     __pstringtext6:
  8089  184C                     STR_7:
  8090  184C  3443               	retlw	67	;'C'
  8091  184D  3454               	retlw	84	;'T'
  8092  184E  344C               	retlw	76	;'L'
  8093  184F  3400               	retlw	0
  8094                           
  8095                           	psect	stringtext7
  8096  0000                     __pstringtext7:
  8097  1840                     
  8098                           	psect	cinit
  8099  0054                     start_initialization:	
  8100                           ; #config settings
  8101                           
  8102  0054                     __initialization:
  8103                           
  8104                           ; Initialize objects allocated to COMMON
  8105  0054  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  8106  0057  00FD               	movwf	__pdataCOMMON& (0+127)
  8107                           
  8108                           ; Initialize objects allocated to BANK1
  8109  0058  3001               	movlw	low __pidataBANK1
  8110  0059  0084               	movwf	4
  8111  005A  3090               	movlw	(high __pidataBANK1)| (0+128)
  8112  005B  0085               	movwf	5
  8113  005C  30E1               	movlw	low __pdataBANK1
  8114  005D  0086               	movwf	6
  8115  005E  3000               	movlw	high __pdataBANK1
  8116  005F  0087               	movwf	7
  8117  0060  300A               	movlw	10
  8118  0061  319F  2798  3180   	fcall	init_ram
  8119                           
  8120                           ; Clear objects allocated to COMMON
  8121  0064  01FB               	clrf	__pbssCOMMON& (0+127)
  8122  0065  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
  8123                           
  8124                           ; Clear objects allocated to BANK0
  8125  0066  3065               	movlw	low __pbssBANK0
  8126  0067  0084               	movwf	4
  8127  0068  3000               	movlw	high __pbssBANK0
  8128  0069  0085               	movwf	5
  8129  006A  300B               	movlw	11
  8130  006B  319F  2792  3180   	fcall	clear_ram0
  8131                           
  8132                           ; Clear objects allocated to BANK1
  8133  006E  30A0               	movlw	low __pbssBANK1
  8134  006F  0084               	movwf	4
  8135  0070  3000               	movlw	high __pbssBANK1
  8136  0071  0085               	movwf	5
  8137  0072  3021               	movlw	33
  8138  0073  319F  2792  3180   	fcall	clear_ram0
  8139                           
  8140                           ; Clear objects allocated to BANK2
  8141  0076  3020               	movlw	low __pbssBANK2
  8142  0077  0084               	movwf	4
  8143  0078  3001               	movlw	high __pbssBANK2
  8144  0079  0085               	movwf	5
  8145  007A  3017               	movlw	23
  8146  007B  319F  2792  3180   	fcall	clear_ram0
  8147                           
  8148                           ; Clear objects allocated to BANK3
  8149  007E  30A0               	movlw	low __pbssBANK3
  8150  007F  0084               	movwf	4
  8151  0080  3001               	movlw	high __pbssBANK3
  8152  0081  0085               	movwf	5
  8153  0082  3040               	movlw	64
  8154  0083  319F  2792  3180   	fcall	clear_ram0
  8155                           
  8156                           ; Clear objects allocated to BANK4
  8157  0086  3020               	movlw	low __pbssBANK4
  8158  0087  0084               	movwf	4
  8159  0088  3002               	movlw	high __pbssBANK4
  8160  0089  0085               	movwf	5
  8161  008A  3040               	movlw	64
  8162  008B  319F  2792  3180   	fcall	clear_ram0
  8163  008E                     end_of_initialization:	
  8164                           ;End of C runtime variable initialization code
  8165                           
  8166  008E                     __end_of__initialization:
  8167  008E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8168  008F  0020               	movlb	0
  8169  0090  3180  2892         	ljmp	_main	;jump to C main() function
  8170                           
  8171                           	psect	bssCOMMON
  8172  007B                     __pbssCOMMON:
  8173  007B                     _editingClockAlarm:
  8174  007B                     	ds	2
  8175                           
  8176                           	psect	dataCOMMON
  8177  007D                     __pdataCOMMON:
  8178  007D                     _NREG:
  8179  007D                     	ds	1
  8180                           
  8181                           	psect	bssBANK0
  8182  0065                     __pbssBANK0:
  8183  0065                     _t:
  8184  0065                     	ds	3
  8185  0068                     _modeFlag:
  8186  0068                     	ds	2
  8187  006A                     _nr:
  8188  006A                     	ds	1
  8189  006B                     _iwrite:
  8190  006B                     	ds	1
  8191  006C                     _iread:
  8192  006C                     	ds	1
  8193  006D                     _lumLevel:
  8194  006D                     	ds	1
  8195  006E                     _temp:
  8196  006E                     	ds	1
  8197  006F                     _ALAF:
  8198  006F                     	ds	1
  8199                           
  8200                           	psect	bssBANK1
  8201  00A0                     __pbssBANK1:
  8202  00A0                     _clkAlarm:
  8203  00A0                     	ds	4
  8204  00A4                     _lumAlarm:
  8205  00A4                     	ds	3
  8206  00A7                     _tempAlarm:
  8207  00A7                     	ds	3
  8208  00AA                     _dimingLed:
  8209  00AA                     	ds	2
  8210  00AC                     _i2c1_driver_i2cISR:
  8211  00AC                     	ds	2
  8212  00AE                     _i2c1_driver_busCollisionISR:
  8213  00AE                     	ds	2
  8214  00B0                     _sentMessageBufHalfFull:
  8215  00B0                     	ds	1
  8216  00B1                     _flagNr:
  8217  00B1                     	ds	1
  8218  00B2                     _bufHalfFull:
  8219  00B2                     	ds	1
  8220  00B3                     _maxReadings:
  8221  00B3                     	ds	1
  8222  00B4                     _writeEEPROM_flag:
  8223  00B4                     	ds	1
  8224  00B5                     _counterMonitorAux:
  8225  00B5                     	ds	1
  8226  00B6                     _monitor_TEMP_LUM:
  8227  00B6                     	ds	1
  8228  00B7                     _flagS1pushed:
  8229  00B7                     	ds	1
  8230  00B8                     _PWM_on:
  8231  00B8                     	ds	1
  8232  00B9                     _editingLumAlarm:
  8233  00B9                     	ds	1
  8234  00BA                     _editingTempAlarm:
  8235  00BA                     	ds	1
  8236  00BB                     _S1_Value:
  8237  00BB                     	ds	1
  8238  00BC                     _eusartRxCount:
  8239  00BC                     	ds	1
  8240  00BD                     _eusartRxTail:
  8241  00BD                     	ds	1
  8242  00BE                     _eusartRxHead:
  8243  00BE                     	ds	1
  8244  00BF                     _eusartTxTail:
  8245  00BF                     	ds	1
  8246  00C0                     _eusartTxHead:
  8247  00C0                     	ds	1
  8248                           
  8249                           	psect	dataBANK1
  8250  00E1                     __pdataBANK1:
  8251  00E1                     _alarmPWMStart:
  8252  00E1                     	ds	3
  8253  00E4                     _prevLumLevel:
  8254  00E4                     	ds	2
  8255  00E6                     _prevTemp:
  8256  00E6                     	ds	2
  8257  00E8                     _updateLCD:
  8258  00E8                     	ds	1
  8259  00E9                     _TALA:
  8260  00E9                     	ds	1
  8261  00EA                     _PMON:
  8262  00EA                     	ds	1
  8263                           
  8264                           	psect	bssBANK2
  8265  0120                     __pbssBANK2:
  8266  0120                     main@F13053:
  8267  0120                     	ds	20
  8268  0134                     update_menuLCD@F12904:
  8269  0134                     	ds	3
  8270                           
  8271                           	psect	bssBANK3
  8272  01A0                     __pbssBANK3:
  8273  01A0                     _eusartTxBuffer:
  8274  01A0                     	ds	64
  8275                           
  8276                           	psect	bssBANK4
  8277  0220                     __pbssBANK4:
  8278  0220                     _eusartRxBuffer:
  8279  0220                     	ds	64
  8280                           
  8281                           	psect	inittext
  8282  1F98                     init_ram:
  8283  1F98  00FE               	movwf	btemp
  8284  1F99                     initloop:
  8285  1F99  0012               	moviw fsr0++
  8286  1F9A  001E               	movwi fsr1++
  8287  1F9B  0BFE               	decfsz	btemp,f
  8288  1F9C  2F99               	goto	initloop
  8289  1F9D  3400               	retlw	0
  8290                           
  8291                           	psect	clrtext
  8292  1F92                     clear_ram0:	
  8293                           ;	Called with FSR0 containing the base address, and
  8294                           ;	WREG with the size to clear
  8295                           
  8296  1F92  0064               	clrwdt	;clear the watchdog before getting into this loop
  8297  1F93                     clrloop0:
  8298  1F93  0180               	clrf	0	;clear RAM location pointed to by FSR
  8299  1F94  3101               	addfsr 0,1
  8300  1F95  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8301  1F96  2F93               	goto	clrloop0	;have we reached the end yet?
  8302  1F97  3400               	retlw	0	;all done for this memory range, return
  8303                           
  8304                           	psect	cstackBANK1
  8305  00C1                     __pcstackBANK1:
  8306  00C1                     main@buff:
  8307                           
  8308                           ; 20 bytes @ 0x0
  8309  00C1                     	ds	20
  8310  00D5                     _main$3500:
  8311                           
  8312                           ; 2 bytes @ 0x14
  8313  00D5                     	ds	2
  8314  00D7                     main@checkSumAux:
  8315                           
  8316                           ; 1 bytes @ 0x16
  8317  00D7                     	ds	1
  8318  00D8                     main@notInit:
  8319                           
  8320                           ; 1 bytes @ 0x17
  8321  00D8                     	ds	1
  8322  00D9                     main@corrupted:
  8323                           
  8324                           ; 1 bytes @ 0x18
  8325  00D9                     	ds	1
  8326  00DA                     main@i:
  8327                           
  8328                           ; 2 bytes @ 0x19
  8329  00DA                     	ds	2
  8330  00DC                     main@i_2536:
  8331                           
  8332                           ; 2 bytes @ 0x1B
  8333  00DC                     	ds	2
  8334  00DE                     main@c:
  8335                           
  8336                           ; 1 bytes @ 0x1D
  8337  00DE                     	ds	1
  8338  00DF                     main@n:
  8339                           
  8340                           ; 2 bytes @ 0x1E
  8341  00DF                     	ds	2
  8342                           
  8343                           	psect	cstackCOMMON
  8344  0070                     __pcstackCOMMON:
  8345  0070                     ?_isdigit:
  8346  0070                     ?_i2c1_driver_open:	
  8347                           ; 1 bit 
  8348                           
  8349  0070                     ?_PMD_Initialize:	
  8350                           ; 1 bit 
  8351                           
  8352  0070                     ?_OSCILLATOR_Initialize:	
  8353                           ; 1 bytes @ 0x0
  8354                           
  8355  0070                     ?_PWM6_Initialize:	
  8356                           ; 1 bytes @ 0x0
  8357                           
  8358  0070                     ?_ADCC_Initialize:	
  8359                           ; 1 bytes @ 0x0
  8360                           
  8361  0070                     ?_TMR2_Initialize:	
  8362                           ; 1 bytes @ 0x0
  8363                           
  8364  0070                     ?_TMR1_Initialize:	
  8365                           ; 1 bytes @ 0x0
  8366                           
  8367  0070                     ?_EXT_INT_Initialize:	
  8368                           ; 1 bytes @ 0x0
  8369                           
  8370  0070                     ?_EUSART_Initialize:	
  8371                           ; 1 bytes @ 0x0
  8372                           
  8373  0070                     ?_INT_ISR:	
  8374                           ; 1 bytes @ 0x0
  8375                           
  8376  0070                     ??_INT_ISR:	
  8377                           ; 1 bytes @ 0x0
  8378                           
  8379  0070                     ?_TMR1_ISR:	
  8380                           ; 1 bytes @ 0x0
  8381                           
  8382  0070                     ?_TMR1_DefaultInterruptHandler:	
  8383                           ; 1 bytes @ 0x0
  8384                           
  8385  0070                     ??_TMR1_DefaultInterruptHandler:	
  8386                           ; 1 bytes @ 0x0
  8387                           
  8388  0070                     ?_INT_CallBack:	
  8389                           ; 1 bytes @ 0x0
  8390                           
  8391  0070                     ??_INT_CallBack:	
  8392                           ; 1 bytes @ 0x0
  8393                           
  8394  0070                     ?_EUSART_Receive_ISR:	
  8395                           ; 1 bytes @ 0x0
  8396                           
  8397  0070                     ??_EUSART_Receive_ISR:	
  8398                           ; 1 bytes @ 0x0
  8399                           
  8400  0070                     ?_EUSART_Transmit_ISR:	
  8401                           ; 1 bytes @ 0x0
  8402                           
  8403  0070                     ??_EUSART_Transmit_ISR:	
  8404                           ; 1 bytes @ 0x0
  8405                           
  8406  0070                     ?_ReadI2C:	
  8407                           ; 1 bytes @ 0x0
  8408                           
  8409  0070                     ?_WriteI2C:	
  8410                           ; 1 bytes @ 0x0
  8411                           
  8412  0070                     ?_PIN_MANAGER_Initialize:	
  8413                           ; 1 bytes @ 0x0
  8414                           
  8415  0070                     ?_SYSTEM_Initialize:	
  8416                           ; 1 bytes @ 0x0
  8417                           
  8418  0070                     ?_INTERRUPT_InterruptManager:	
  8419                           ; 1 bytes @ 0x0
  8420                           
  8421  0070                     ?_TMR1_WriteTimer:	
  8422                           ; 1 bytes @ 0x0
  8423                           
  8424  0070                     ?_TMR2_Start:	
  8425                           ; 1 bytes @ 0x0
  8426                           
  8427  0070                     ?_TMR2_StartTimer:	
  8428                           ; 1 bytes @ 0x0
  8429                           
  8430  0070                     ?_TMR2_Stop:	
  8431                           ; 1 bytes @ 0x0
  8432                           
  8433  0070                     ?_TMR2_StopTimer:	
  8434                           ; 1 bytes @ 0x0
  8435                           
  8436  0070                     ?_INT_DefaultInterruptHandler:	
  8437                           ; 1 bytes @ 0x0
  8438                           
  8439  0070                     ??_INT_DefaultInterruptHandler:	
  8440                           ; 1 bytes @ 0x0
  8441                           
  8442  0070                     ?_EUSART_is_rx_ready:	
  8443                           ; 1 bytes @ 0x0
  8444                           
  8445  0070                     ?_EUSART_Read:	
  8446                           ; 1 bytes @ 0x0
  8447                           
  8448  0070                     ?_EUSART_Write:	
  8449                           ; 1 bytes @ 0x0
  8450                           
  8451  0070                     ?_getch:	
  8452                           ; 1 bytes @ 0x0
  8453                           
  8454  0070                     ?_putch:	
  8455                           ; 1 bytes @ 0x0
  8456                           
  8457  0070                     ?_tsttc:	
  8458                           ; 1 bytes @ 0x0
  8459                           
  8460  0070                     ?_LCDsend:	
  8461                           ; 1 bytes @ 0x0
  8462                           
  8463  0070                     ?_LCDinit:	
  8464                           ; 1 bytes @ 0x0
  8465                           
  8466  0070                     ?_LCDcmd:	
  8467                           ; 1 bytes @ 0x0
  8468                           
  8469  0070                     ?_LCDchar:	
  8470                           ; 1 bytes @ 0x0
  8471                           
  8472  0070                     ?_PWM_Output_D4_Enable:	
  8473                           ; 1 bytes @ 0x0
  8474                           
  8475  0070                     ?_PWM_Output_D4_Disable:	
  8476                           ; 1 bytes @ 0x0
  8477                           
  8478  0070                     ?_Clock_ISR:	
  8479                           ; 1 bytes @ 0x0
  8480                           
  8481  0070                     ?_wirteEEPROMinit:	
  8482                           ; 1 bytes @ 0x0
  8483                           
  8484  0070                     ?_update_menuLCD:	
  8485                           ; 1 bytes @ 0x0
  8486                           
  8487  0070                     ?_monitoring_TEMP_LUM:	
  8488                           ; 1 bytes @ 0x0
  8489                           
  8490  0070                     ?_S1button:	
  8491                           ; 1 bytes @ 0x0
  8492                           
  8493  0070                     ?_checkFlags:	
  8494                           ; 1 bytes @ 0x0
  8495                           
  8496  0070                     ?_editClock:	
  8497                           ; 1 bytes @ 0x0
  8498                           
  8499  0070                     ?_editTemp:	
  8500                           ; 1 bytes @ 0x0
  8501                           
  8502  0070                     ?_editLum:	
  8503                           ; 1 bytes @ 0x0
  8504                           
  8505  0070                     ?_toggleAlarms:	
  8506                           ; 1 bytes @ 0x0
  8507                           
  8508  0070                     ?_S1_ISR:	
  8509                           ; 1 bytes @ 0x0
  8510                           
  8511  0070                     ??_S1_ISR:	
  8512                           ; 1 bytes @ 0x0
  8513                           
  8514  0070                     ?_sendOKMessage:	
  8515                           ; 1 bytes @ 0x0
  8516                           
  8517  0070                     ?_sendERRORMessage:	
  8518                           ; 1 bytes @ 0x0
  8519                           
  8520  0070                     ?_main:	
  8521                           ; 1 bytes @ 0x0
  8522                           
  8523  0070                     ?___awdiv:	
  8524                           ; 1 bytes @ 0x0
  8525                           
  8526  0070                     TMR1_WriteTimer@timerVal:	
  8527                           ; 2 bytes @ 0x0
  8528                           
  8529  0070                     ___awdiv@divisor:	
  8530                           ; 2 bytes @ 0x0
  8531                           
  8532                           
  8533                           ; 2 bytes @ 0x0
  8534  0070                     	ds	2
  8535  0072                     ??_TMR1_WriteTimer:
  8536  0072                     ___awdiv@dividend:	
  8537                           ; 1 bytes @ 0x2
  8538                           
  8539                           
  8540                           ; 2 bytes @ 0x2
  8541  0072                     	ds	2
  8542  0074                     ??___awdiv:
  8543                           
  8544                           ; 1 bytes @ 0x4
  8545  0074                     	ds	1
  8546  0075                     ___awdiv@counter:
  8547                           
  8548                           ; 1 bytes @ 0x5
  8549  0075                     	ds	1
  8550  0076                     ___awdiv@sign:
  8551                           
  8552                           ; 1 bytes @ 0x6
  8553  0076                     	ds	1
  8554  0077                     ___awdiv@quotient:
  8555                           
  8556                           ; 2 bytes @ 0x7
  8557  0077                     	ds	2
  8558  0079                     ??_Clock_ISR:
  8559                           
  8560                           ; 1 bytes @ 0x9
  8561  0079                     	ds	2
  8562  007B                     ??_TMR1_ISR:
  8563  007B                     ??_INTERRUPT_InterruptManager:	
  8564                           ; 1 bytes @ 0xB
  8565                           
  8566                           
  8567                           	psect	cstackBANK0
  8568  0020                     __pcstackBANK0:	
  8569                           ; 1 bytes @ 0xB
  8570                           
  8571  0020                     ??_PMD_Initialize:
  8572  0020                     ??_OSCILLATOR_Initialize:	
  8573                           ; 1 bytes @ 0x0
  8574                           
  8575  0020                     ??_PWM6_Initialize:	
  8576                           ; 1 bytes @ 0x0
  8577                           
  8578  0020                     ??_ADCC_Initialize:	
  8579                           ; 1 bytes @ 0x0
  8580                           
  8581  0020                     ??_TMR2_Initialize:	
  8582                           ; 1 bytes @ 0x0
  8583                           
  8584  0020                     ?_TMR1_SetInterruptHandler:	
  8585                           ; 1 bytes @ 0x0
  8586                           
  8587  0020                     ?_EUSART_SetRxInterruptHandler:	
  8588                           ; 1 bytes @ 0x0
  8589                           
  8590  0020                     ?_EUSART_SetTxInterruptHandler:	
  8591                           ; 1 bytes @ 0x0
  8592                           
  8593  0020                     ?_memset:	
  8594                           ; 1 bytes @ 0x0
  8595                           
  8596  0020                     ??_isdigit:	
  8597                           ; 1 bytes @ 0x0
  8598                           
  8599  0020                     ??_ReadI2C:	
  8600                           ; 1 bytes @ 0x0
  8601                           
  8602  0020                     ??_WriteI2C:	
  8603                           ; 1 bytes @ 0x0
  8604                           
  8605  0020                     ??_PIN_MANAGER_Initialize:	
  8606                           ; 1 bytes @ 0x0
  8607                           
  8608  0020                     ??_i2c1_driver_open:	
  8609                           ; 1 bytes @ 0x0
  8610                           
  8611  0020                     ?_PWM6_LoadDutyValue:	
  8612                           ; 1 bytes @ 0x0
  8613                           
  8614  0020                     ??_TMR2_Start:	
  8615                           ; 1 bytes @ 0x0
  8616                           
  8617  0020                     ??_TMR2_StartTimer:	
  8618                           ; 1 bytes @ 0x0
  8619                           
  8620  0020                     ??_TMR2_Stop:	
  8621                           ; 1 bytes @ 0x0
  8622                           
  8623  0020                     ??_TMR2_StopTimer:	
  8624                           ; 1 bytes @ 0x0
  8625                           
  8626  0020                     ?_INT_SetInterruptHandler:	
  8627                           ; 1 bytes @ 0x0
  8628                           
  8629  0020                     ??_EUSART_is_rx_ready:	
  8630                           ; 1 bytes @ 0x0
  8631                           
  8632  0020                     ??_EUSART_Read:	
  8633                           ; 1 bytes @ 0x0
  8634                           
  8635  0020                     ??_EUSART_Write:	
  8636                           ; 1 bytes @ 0x0
  8637                           
  8638  0020                     ?_differenceBetweenTimePeriod:	
  8639                           ; 1 bytes @ 0x0
  8640                           
  8641  0020                     ??_PWM_Output_D4_Enable:	
  8642                           ; 1 bytes @ 0x0
  8643                           
  8644  0020                     ??_PWM_Output_D4_Disable:	
  8645                           ; 1 bytes @ 0x0
  8646                           
  8647  0020                     ??_S1button:	
  8648                           ; 1 bytes @ 0x0
  8649                           
  8650  0020                     ?_ADCC_GetSingleConversion:	
  8651                           ; 1 bytes @ 0x0
  8652                           
  8653  0020                     ?___wmul:	
  8654                           ; 2 bytes @ 0x0
  8655                           
  8656  0020                     ?___lwdiv:	
  8657                           ; 2 bytes @ 0x0
  8658                           
  8659  0020                     _isdigit$2994:	
  8660                           ; 2 bytes @ 0x0
  8661                           
  8662  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  8663                           ; 1 bytes @ 0x0
  8664                           
  8665  0020                     PWM6_LoadDutyValue@dutyValue:	
  8666                           ; 2 bytes @ 0x0
  8667                           
  8668  0020                     INT_SetInterruptHandler@InterruptHandler:	
  8669                           ; 2 bytes @ 0x0
  8670                           
  8671  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  8672                           ; 2 bytes @ 0x0
  8673                           
  8674  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  8675                           ; 2 bytes @ 0x0
  8676                           
  8677  0020                     ___wmul@multiplier:	
  8678                           ; 2 bytes @ 0x0
  8679                           
  8680  0020                     ___lwdiv@divisor:	
  8681                           ; 2 bytes @ 0x0
  8682                           
  8683  0020                     memset@c:	
  8684                           ; 2 bytes @ 0x0
  8685                           
  8686  0020                     differenceBetweenTimePeriod@start:	
  8687                           ; 2 bytes @ 0x0
  8688                           
  8689                           
  8690                           ; 3 bytes @ 0x0
  8691  0020                     	ds	1
  8692  0021                     WriteI2C@data_out:
  8693  0021                     EUSART_Read@readValue:	
  8694                           ; 1 bytes @ 0x1
  8695                           
  8696  0021                     EUSART_Write@txData:	
  8697                           ; 1 bytes @ 0x1
  8698                           
  8699  0021                     isdigit@c:	
  8700                           ; 1 bytes @ 0x1
  8701                           
  8702                           
  8703                           ; 1 bytes @ 0x1
  8704  0021                     	ds	1
  8705  0022                     ??_TMR1_Initialize:
  8706  0022                     ??_EXT_INT_Initialize:	
  8707                           ; 1 bytes @ 0x2
  8708                           
  8709  0022                     ??_EUSART_Initialize:	
  8710                           ; 1 bytes @ 0x2
  8711                           
  8712  0022                     ??_TMR1_SetInterruptHandler:	
  8713                           ; 1 bytes @ 0x2
  8714                           
  8715  0022                     ??_EUSART_SetRxInterruptHandler:	
  8716                           ; 1 bytes @ 0x2
  8717                           
  8718  0022                     ??_EUSART_SetTxInterruptHandler:	
  8719                           ; 1 bytes @ 0x2
  8720                           
  8721  0022                     ??_PWM6_LoadDutyValue:	
  8722                           ; 1 bytes @ 0x2
  8723                           
  8724  0022                     ??_INT_SetInterruptHandler:	
  8725                           ; 1 bytes @ 0x2
  8726                           
  8727  0022                     ??_getch:	
  8728                           ; 1 bytes @ 0x2
  8729                           
  8730  0022                     ??_putch:	
  8731                           ; 1 bytes @ 0x2
  8732                           
  8733  0022                     ??_tsttc:	
  8734                           ; 1 bytes @ 0x2
  8735                           
  8736  0022                     ??_LCDsend:	
  8737                           ; 1 bytes @ 0x2
  8738                           
  8739  0022                     ?_LCDsend2x4:	
  8740                           ; 1 bytes @ 0x2
  8741                           
  8742  0022                     putch@txData:	
  8743                           ; 1 bytes @ 0x2
  8744                           
  8745  0022                     LCDsend2x4@mode:	
  8746                           ; 1 bytes @ 0x2
  8747                           
  8748  0022                     ___wmul@multiplicand:	
  8749                           ; 1 bytes @ 0x2
  8750                           
  8751  0022                     ___lwdiv@dividend:	
  8752                           ; 2 bytes @ 0x2
  8753                           
  8754  0022                     memset@n:	
  8755                           ; 2 bytes @ 0x2
  8756                           
  8757                           
  8758                           ; 2 bytes @ 0x2
  8759  0022                     	ds	1
  8760  0023                     ??_SYSTEM_Initialize:
  8761  0023                     ??_ADCC_GetSingleConversion:	
  8762                           ; 1 bytes @ 0x3
  8763                           
  8764  0023                     ??_LCDsend2x4:	
  8765                           ; 1 bytes @ 0x3
  8766                           
  8767  0023                     ?_sendMessage:	
  8768                           ; 1 bytes @ 0x3
  8769                           
  8770  0023                     ADCC_GetSingleConversion@channel:	
  8771                           ; 1 bytes @ 0x3
  8772                           
  8773  0023                     tsttc@value:	
  8774                           ; 1 bytes @ 0x3
  8775                           
  8776  0023                     LCDsend@c:	
  8777                           ; 1 bytes @ 0x3
  8778                           
  8779  0023                     sendMessage@num:	
  8780                           ; 1 bytes @ 0x3
  8781                           
  8782  0023                     differenceBetweenTimePeriod@stop:	
  8783                           ; 2 bytes @ 0x3
  8784                           
  8785                           
  8786                           ; 3 bytes @ 0x3
  8787  0023                     	ds	1
  8788  0024                     ??_memset:
  8789  0024                     ??___wmul:	
  8790                           ; 1 bytes @ 0x4
  8791                           
  8792  0024                     ??___lwdiv:	
  8793                           ; 1 bytes @ 0x4
  8794                           
  8795  0024                     ___wmul@product:	
  8796                           ; 1 bytes @ 0x4
  8797                           
  8798                           
  8799                           ; 2 bytes @ 0x4
  8800  0024                     	ds	1
  8801  0025                     LCDsend2x4@c:
  8802  0025                     sendMessage@buffer:	
  8803                           ; 1 bytes @ 0x5
  8804                           
  8805  0025                     memset@p:	
  8806                           ; 1 bytes @ 0x5
  8807                           
  8808  0025                     ___lwdiv@quotient:	
  8809                           ; 1 bytes @ 0x5
  8810                           
  8811                           
  8812                           ; 2 bytes @ 0x5
  8813  0025                     	ds	1
  8814  0026                     ?_DATAEE_WriteByte:
  8815  0026                     ?_DATAEE_ReadByte:	
  8816                           ; 1 bytes @ 0x6
  8817                           
  8818  0026                     ??_sendMessage:	
  8819                           ; 1 bytes @ 0x6
  8820                           
  8821  0026                     LCDsend2x4@hc:	
  8822                           ; 1 bytes @ 0x6
  8823                           
  8824  0026                     differenceBetweenTimePeriod@diff:	
  8825                           ; 1 bytes @ 0x6
  8826                           
  8827  0026                     memset@p1:	
  8828                           ; 1 bytes @ 0x6
  8829                           
  8830  0026                     DATAEE_WriteByte@bAdd:	
  8831                           ; 1 bytes @ 0x6
  8832                           
  8833  0026                     DATAEE_ReadByte@bAdd:	
  8834                           ; 2 bytes @ 0x6
  8835                           
  8836                           
  8837                           ; 2 bytes @ 0x6
  8838  0026                     	ds	1
  8839  0027                     ??_differenceBetweenTimePeriod:
  8840  0027                     LCDsend2x4@lc:	
  8841                           ; 1 bytes @ 0x7
  8842                           
  8843  0027                     ___lwdiv@counter:	
  8844                           ; 1 bytes @ 0x7
  8845                           
  8846  0027                     sendMessage@n:	
  8847                           ; 1 bytes @ 0x7
  8848                           
  8849                           
  8850                           ; 2 bytes @ 0x7
  8851  0027                     	ds	1
  8852  0028                     ??_DATAEE_ReadByte:
  8853  0028                     ??_LCDinit:	
  8854                           ; 1 bytes @ 0x8
  8855                           
  8856  0028                     ??_LCDcmd:	
  8857                           ; 1 bytes @ 0x8
  8858                           
  8859  0028                     ??_LCDchar:	
  8860                           ; 1 bytes @ 0x8
  8861                           
  8862  0028                     ?___lwmod:	
  8863                           ; 1 bytes @ 0x8
  8864                           
  8865  0028                     DATAEE_WriteByte@bData:	
  8866                           ; 2 bytes @ 0x8
  8867                           
  8868  0028                     LCDcmd@c:	
  8869                           ; 1 bytes @ 0x8
  8870                           
  8871  0028                     LCDchar@c:	
  8872                           ; 1 bytes @ 0x8
  8873                           
  8874  0028                     ___lwmod@divisor:	
  8875                           ; 1 bytes @ 0x8
  8876                           
  8877                           
  8878                           ; 2 bytes @ 0x8
  8879  0028                     	ds	1
  8880  0029                     ??_DATAEE_WriteByte:
  8881  0029                     ?_LCDstr:	
  8882                           ; 1 bytes @ 0x9
  8883                           
  8884  0029                     ??_sendOKMessage:	
  8885                           ; 1 bytes @ 0x9
  8886                           
  8887  0029                     ??_sendERRORMessage:	
  8888                           ; 1 bytes @ 0x9
  8889                           
  8890  0029                     DATAEE_WriteByte@GIEBitValue:	
  8891                           ; 1 bytes @ 0x9
  8892                           
  8893  0029                     LCDstr@p:	
  8894                           ; 1 bytes @ 0x9
  8895                           
  8896                           
  8897                           ; 2 bytes @ 0x9
  8898  0029                     	ds	1
  8899  002A                     ??_wirteEEPROMinit:
  8900  002A                     ??_monitoring_TEMP_LUM:	
  8901                           ; 1 bytes @ 0xA
  8902                           
  8903  002A                     sendOKMessage@cmd:	
  8904                           ; 1 bytes @ 0xA
  8905                           
  8906  002A                     sendERRORMessage@cmd:	
  8907                           ; 1 bytes @ 0xA
  8908                           
  8909  002A                     ___lwmod@dividend:	
  8910                           ; 1 bytes @ 0xA
  8911                           
  8912                           
  8913                           ; 2 bytes @ 0xA
  8914  002A                     	ds	1
  8915  002B                     ??_LCDstr:
  8916  002B                     sendOKMessage@bufw:	
  8917                           ; 1 bytes @ 0xB
  8918                           
  8919  002B                     sendERRORMessage@bufw:	
  8920                           ; 4 bytes @ 0xB
  8921                           
  8922                           
  8923                           ; 4 bytes @ 0xB
  8924  002B                     	ds	1
  8925  002C                     ??___lwmod:
  8926                           
  8927                           ; 1 bytes @ 0xC
  8928  002C                     	ds	1
  8929  002D                     ___lwmod@counter:
  8930                           
  8931                           ; 1 bytes @ 0xD
  8932  002D                     	ds	1
  8933  002E                     ?_sprintf:
  8934  002E                     LCDstr@c:	
  8935                           ; 2 bytes @ 0xE
  8936                           
  8937  002E                     sprintf@f:	
  8938                           ; 1 bytes @ 0xE
  8939                           
  8940                           
  8941                           ; 2 bytes @ 0xE
  8942  002E                     	ds	1
  8943  002F                     ?_cmd_rc:
  8944  002F                     ?_cmd_sc:	
  8945                           ; 1 bytes @ 0xF
  8946                           
  8947  002F                     ?_cmd_rtl:	
  8948                           ; 1 bytes @ 0xF
  8949                           
  8950  002F                     ?_cmd_rp:	
  8951                           ; 1 bytes @ 0xF
  8952                           
  8953  002F                     ?_cmd_mmp:	
  8954                           ; 1 bytes @ 0xF
  8955                           
  8956  002F                     ?_cmd_mta:	
  8957                           ; 1 bytes @ 0xF
  8958                           
  8959  002F                     ?_cmd_ra:	
  8960                           ; 1 bytes @ 0xF
  8961                           
  8962  002F                     ?_cmd_dac:	
  8963                           ; 1 bytes @ 0xF
  8964                           
  8965  002F                     ?_cmd_dtl:	
  8966                           ; 1 bytes @ 0xF
  8967                           
  8968  002F                     ?_cmd_aa:	
  8969                           ; 1 bytes @ 0xF
  8970                           
  8971  002F                     ?_cmd_ir:	
  8972                           ; 1 bytes @ 0xF
  8973                           
  8974  002F                     ?_cmd_trc:	
  8975                           ; 1 bytes @ 0xF
  8976                           
  8977  002F                     ?_cmd_tri:	
  8978                           ; 1 bytes @ 0xF
  8979                           
  8980  002F                     cmd_rc@num:	
  8981                           ; 1 bytes @ 0xF
  8982                           
  8983  002F                     cmd_sc@num:	
  8984                           ; 2 bytes @ 0xF
  8985                           
  8986  002F                     cmd_rtl@num:	
  8987                           ; 2 bytes @ 0xF
  8988                           
  8989  002F                     cmd_rp@num:	
  8990                           ; 2 bytes @ 0xF
  8991                           
  8992  002F                     cmd_mmp@num:	
  8993                           ; 2 bytes @ 0xF
  8994                           
  8995  002F                     cmd_mta@num:	
  8996                           ; 2 bytes @ 0xF
  8997                           
  8998  002F                     cmd_ra@num:	
  8999                           ; 2 bytes @ 0xF
  9000                           
  9001  002F                     cmd_dac@num:	
  9002                           ; 2 bytes @ 0xF
  9003                           
  9004  002F                     cmd_dtl@num:	
  9005                           ; 2 bytes @ 0xF
  9006                           
  9007  002F                     cmd_aa@num:	
  9008                           ; 2 bytes @ 0xF
  9009                           
  9010  002F                     cmd_ir@num:	
  9011                           ; 2 bytes @ 0xF
  9012                           
  9013  002F                     cmd_trc@num:	
  9014                           ; 2 bytes @ 0xF
  9015                           
  9016  002F                     cmd_tri@num:	
  9017                           ; 2 bytes @ 0xF
  9018                           
  9019                           
  9020                           ; 2 bytes @ 0xF
  9021  002F                     	ds	2
  9022  0031                     cmd_rc@buffer:
  9023  0031                     cmd_sc@buffer:	
  9024                           ; 1 bytes @ 0x11
  9025                           
  9026  0031                     cmd_rtl@buffer:	
  9027                           ; 1 bytes @ 0x11
  9028                           
  9029  0031                     cmd_rp@buffer:	
  9030                           ; 1 bytes @ 0x11
  9031                           
  9032  0031                     cmd_mmp@buffer:	
  9033                           ; 1 bytes @ 0x11
  9034                           
  9035  0031                     cmd_mta@buffer:	
  9036                           ; 1 bytes @ 0x11
  9037                           
  9038  0031                     cmd_ra@buffer:	
  9039                           ; 1 bytes @ 0x11
  9040                           
  9041  0031                     cmd_dac@buffer:	
  9042                           ; 1 bytes @ 0x11
  9043                           
  9044  0031                     cmd_dtl@buffer:	
  9045                           ; 1 bytes @ 0x11
  9046                           
  9047  0031                     cmd_aa@buffer:	
  9048                           ; 1 bytes @ 0x11
  9049                           
  9050  0031                     cmd_ir@buffer:	
  9051                           ; 1 bytes @ 0x11
  9052                           
  9053  0031                     cmd_trc@buffer:	
  9054                           ; 1 bytes @ 0x11
  9055                           
  9056  0031                     cmd_tri@buffer:	
  9057                           ; 1 bytes @ 0x11
  9058                           
  9059                           
  9060                           ; 1 bytes @ 0x11
  9061  0031                     	ds	1
  9062  0032                     ??_cmd_rc:
  9063  0032                     ??_cmd_sc:	
  9064                           ; 1 bytes @ 0x12
  9065                           
  9066  0032                     ??_cmd_rtl:	
  9067                           ; 1 bytes @ 0x12
  9068                           
  9069  0032                     ??_cmd_rp:	
  9070                           ; 1 bytes @ 0x12
  9071                           
  9072  0032                     ??_cmd_mmp:	
  9073                           ; 1 bytes @ 0x12
  9074                           
  9075  0032                     ??_cmd_mta:	
  9076                           ; 1 bytes @ 0x12
  9077                           
  9078  0032                     ??_cmd_ra:	
  9079                           ; 1 bytes @ 0x12
  9080                           
  9081  0032                     ??_cmd_dac:	
  9082                           ; 1 bytes @ 0x12
  9083                           
  9084  0032                     ??_cmd_dtl:	
  9085                           ; 1 bytes @ 0x12
  9086                           
  9087  0032                     ??_cmd_aa:	
  9088                           ; 1 bytes @ 0x12
  9089                           
  9090  0032                     ??_cmd_ir:	
  9091                           ; 1 bytes @ 0x12
  9092                           
  9093  0032                     ??_cmd_trc:	
  9094                           ; 1 bytes @ 0x12
  9095                           
  9096  0032                     ??_cmd_tri:	
  9097                           ; 1 bytes @ 0x12
  9098                           
  9099                           
  9100                           ; 1 bytes @ 0x12
  9101  0032                     	ds	1
  9102  0033                     cmd_rtl@buff:
  9103  0033                     cmd_rp@buff:	
  9104                           ; 5 bytes @ 0x13
  9105                           
  9106  0033                     cmd_rc@buff:	
  9107                           ; 5 bytes @ 0x13
  9108                           
  9109  0033                     cmd_ir@buff:	
  9110                           ; 6 bytes @ 0x13
  9111                           
  9112  0033                     cmd_ra@buff:	
  9113                           ; 7 bytes @ 0x13
  9114                           
  9115                           
  9116                           ; 9 bytes @ 0x13
  9117  0033                     	ds	1
  9118  0034                     cmd_sc@h:
  9119  0034                     cmd_dac@h:	
  9120                           ; 2 bytes @ 0x14
  9121                           
  9122  0034                     cmd_dtl@tempAux:	
  9123                           ; 2 bytes @ 0x14
  9124                           
  9125                           
  9126                           ; 2 bytes @ 0x14
  9127  0034                     	ds	2
  9128  0036                     ??_sprintf:
  9129  0036                     cmd_sc@m:	
  9130                           ; 1 bytes @ 0x16
  9131                           
  9132  0036                     cmd_dac@m:	
  9133                           ; 2 bytes @ 0x16
  9134                           
  9135  0036                     cmd_dtl@lumAux:	
  9136                           ; 2 bytes @ 0x16
  9137                           
  9138                           
  9139                           ; 2 bytes @ 0x16
  9140  0036                     	ds	1
  9141  0037                     cmd_tri@buffData:
  9142                           
  9143                           ; 5 bytes @ 0x17
  9144  0037                     	ds	1
  9145  0038                     cmd_sc@s:
  9146  0038                     cmd_dac@s:	
  9147                           ; 2 bytes @ 0x18
  9148                           
  9149  0038                     cmd_trc@buffData:	
  9150                           ; 2 bytes @ 0x18
  9151                           
  9152                           
  9153                           ; 5 bytes @ 0x18
  9154  0038                     	ds	2
  9155  003A                     sprintf@ap:
  9156                           
  9157                           ; 1 bytes @ 0x1A
  9158  003A                     	ds	1
  9159  003B                     sprintf@prec:
  9160                           
  9161                           ; 1 bytes @ 0x1B
  9162  003B                     	ds	1
  9163  003C                     sprintf@val:
  9164  003C                     cmd_tri@buffInit:	
  9165                           ; 2 bytes @ 0x1C
  9166                           
  9167                           
  9168                           ; 4 bytes @ 0x1C
  9169  003C                     	ds	1
  9170  003D                     cmd_trc@buffInit:
  9171                           
  9172                           ; 3 bytes @ 0x1D
  9173  003D                     	ds	1
  9174  003E                     sprintf@flag:
  9175                           
  9176                           ; 1 bytes @ 0x1E
  9177  003E                     	ds	1
  9178  003F                     sprintf@width:
  9179                           
  9180                           ; 2 bytes @ 0x1F
  9181  003F                     	ds	1
  9182  0040                     cmd_tri@buffEOM:
  9183  0040                     cmd_trc@i:	
  9184                           ; 1 bytes @ 0x20
  9185                           
  9186                           
  9187                           ; 2 bytes @ 0x20
  9188  0040                     	ds	1
  9189  0041                     sprintf@c:
  9190  0041                     cmd_tri@maxReadingsAux:	
  9191                           ; 1 bytes @ 0x21
  9192                           
  9193                           
  9194                           ; 2 bytes @ 0x21
  9195  0041                     	ds	1
  9196  0042                     sprintf@sp:
  9197  0042                     cmd_trc@address:	
  9198                           ; 1 bytes @ 0x22
  9199                           
  9200                           
  9201                           ; 2 bytes @ 0x22
  9202  0042                     	ds	1
  9203  0043                     ??_update_menuLCD:
  9204  0043                     cmd_tri@i:	
  9205                           ; 1 bytes @ 0x23
  9206                           
  9207                           
  9208                           ; 2 bytes @ 0x23
  9209  0043                     	ds	1
  9210  0044                     cmd_trc@buffEOM:
  9211                           
  9212                           ; 1 bytes @ 0x24
  9213  0044                     	ds	1
  9214  0045                     cmd_tri@index:
  9215  0045                     cmd_trc@n:	
  9216                           ; 1 bytes @ 0x25
  9217                           
  9218                           
  9219                           ; 2 bytes @ 0x25
  9220  0045                     	ds	1
  9221  0046                     cmd_tri@startingIndex:
  9222                           
  9223                           ; 2 bytes @ 0x26
  9224  0046                     	ds	1
  9225  0047                     cmd_trc@nRegs:
  9226                           
  9227                           ; 2 bytes @ 0x27
  9228  0047                     	ds	1
  9229  0048                     cmd_tri@n:
  9230                           
  9231                           ; 1 bytes @ 0x28
  9232  0048                     	ds	1
  9233  0049                     cmd_trc@j:
  9234  0049                     cmd_tri@j:	
  9235                           ; 1 bytes @ 0x29
  9236                           
  9237  0049                     update_menuLCD@str:	
  9238                           ; 1 bytes @ 0x29
  9239                           
  9240                           
  9241                           ; 8 bytes @ 0x29
  9242  0049                     	ds	8
  9243  0051                     update_menuLCD@tt:
  9244                           
  9245                           ; 4 bytes @ 0x31
  9246  0051                     	ds	4
  9247  0055                     update_menuLCD@l:
  9248                           
  9249                           ; 3 bytes @ 0x35
  9250  0055                     	ds	3
  9251  0058                     update_menuLCD@diff:
  9252                           
  9253                           ; 3 bytes @ 0x38
  9254  0058                     	ds	3
  9255  005B                     ??_checkFlags:
  9256                           
  9257                           ; 1 bytes @ 0x3B
  9258  005B                     	ds	1
  9259  005C                     checkFlags@buff:
  9260                           
  9261                           ; 7 bytes @ 0x3C
  9262  005C                     	ds	7
  9263  0063                     ??_editClock:
  9264  0063                     ??_editTemp:	
  9265                           ; 1 bytes @ 0x43
  9266                           
  9267  0063                     ??_editLum:	
  9268                           ; 1 bytes @ 0x43
  9269                           
  9270  0063                     ??_toggleAlarms:	
  9271                           ; 1 bytes @ 0x43
  9272                           
  9273                           
  9274                           ; 1 bytes @ 0x43
  9275  0063                     	ds	1
  9276  0064                     ??_main:
  9277                           
  9278                           ; 1 bytes @ 0x44
  9279  0064                     	ds	1
  9280                           
  9281                           	psect	maintext
  9282  0092                     __pmaintext:	
  9283 ;;
  9284 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  9285 ;;
  9286 ;; *************** function _main *****************
  9287 ;; Defined at:
  9288 ;;		line 1118 in file "main.c"
  9289 ;; Parameters:    Size  Location     Type
  9290 ;;		None
  9291 ;; Auto vars:     Size  Location     Type
  9292 ;;  i               2   25[BANK1 ] int 
  9293 ;;  buff           20    0[BANK1 ] unsigned char [20]
  9294 ;;  n               2   30[BANK1 ] int 
  9295 ;;  i               2   27[BANK1 ] int 
  9296 ;;  c               1   29[BANK1 ] unsigned char 
  9297 ;;  corrupted       1   24[BANK1 ] unsigned char 
  9298 ;;  notInit         1   23[BANK1 ] unsigned char 
  9299 ;;  checkSumAux     1   22[BANK1 ] unsigned char 
  9300 ;; Return value:  Size  Location     Type
  9301 ;;                  1    wreg      void 
  9302 ;; Registers used:
  9303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : B1F/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Locals:         0       0      32       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Totals:         0       1      32       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;Total ram usage:       33 bytes
  9314 ;; Hardware stack levels required when called:   11
  9315 ;; This function calls:
  9316 ;;		_DATAEE_ReadByte
  9317 ;;		_DATAEE_WriteByte
  9318 ;;		_EUSART_is_rx_ready
  9319 ;;		_INT_SetInterruptHandler
  9320 ;;		_LCDinit
  9321 ;;		_PWM6_LoadDutyValue
  9322 ;;		_PWM_Output_D4_Disable
  9323 ;;		_SYSTEM_Initialize
  9324 ;;		_TMR1_SetInterruptHandler
  9325 ;;		_TMR2_StopTimer
  9326 ;;		___wmul
  9327 ;;		_checkFlags
  9328 ;;		_cmd_aa
  9329 ;;		_cmd_dac
  9330 ;;		_cmd_dtl
  9331 ;;		_cmd_ir
  9332 ;;		_cmd_mmp
  9333 ;;		_cmd_mta
  9334 ;;		_cmd_ra
  9335 ;;		_cmd_rc
  9336 ;;		_cmd_rp
  9337 ;;		_cmd_rtl
  9338 ;;		_cmd_sc
  9339 ;;		_cmd_trc
  9340 ;;		_cmd_tri
  9341 ;;		_editClock
  9342 ;;		_editLum
  9343 ;;		_editTemp
  9344 ;;		_getch
  9345 ;;		_i2c1_driver_open
  9346 ;;		_memset
  9347 ;;		_toggleAlarms
  9348 ;; This function is called by:
  9349 ;;		Startup code after reset
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _main
  9355  0092                     _main:
  9356  0092                     l5991:	
  9357                           ;incstack = 0
  9358                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9359                           
  9360                           
  9361                           ;main.c: 1121: SYSTEM_Initialize();
  9362  0092  3191  213A  3180   	fcall	_SYSTEM_Initialize
  9363                           
  9364                           ;main.c: 1123: PWM6_LoadDutyValue(0);
  9365  0095  3000               	movlw	0
  9366  0096  0020               	movlb	0	; select bank0
  9367  0097  00A0               	movwf	PWM6_LoadDutyValue@dutyValue
  9368  0098  00A1               	movwf	PWM6_LoadDutyValue@dutyValue+1
  9369  0099  3190  20D0  3180   	fcall	_PWM6_LoadDutyValue
  9370  009C                     l5993:
  9371                           
  9372                           ;main.c: 1124: TMR2_StopTimer();
  9373  009C  319F  2788  3180   	fcall	_TMR2_StopTimer
  9374  009F                     l5995:
  9375                           
  9376                           ;main.c: 1125: PWM_Output_D4_Disable();
  9377  009F  319F  277E  3180   	fcall	_PWM_Output_D4_Disable
  9378                           
  9379                           ;main.c: 1127: TMR1_SetInterruptHandler(Clock_ISR);
  9380  00A2  3021               	movlw	low _Clock_ISR
  9381  00A3  0020               	movlb	0	; select bank0
  9382  00A4  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9383  00A5  3009               	movlw	high _Clock_ISR
  9384  00A6  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9385  00A7  319F  27E2  3180   	fcall	_TMR1_SetInterruptHandler
  9386                           
  9387                           ;main.c: 1129: INT_SetInterruptHandler(S1_ISR);
  9388  00AA  30B5               	movlw	low _S1_ISR
  9389  00AB  0020               	movlb	0	; select bank0
  9390  00AC  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler
  9391  00AD  301F               	movlw	high _S1_ISR
  9392  00AE  00A1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  9393  00AF  319F  27D0  3180   	fcall	_INT_SetInterruptHandler
  9394  00B2                     l5997:
  9395                           
  9396                           ;main.c: 1131: uint8_t checkSumAux = 0;
  9397  00B2  0021               	movlb	1	; select bank1
  9398  00B3  01D7               	clrf	main@checkSumAux^(0+128)
  9399  00B4                     l5999:
  9400                           
  9401                           ;main.c: 1132: bool notInit = 1;
  9402  00B4  01D8               	clrf	main@notInit^(0+128)
  9403  00B5  0AD8               	incf	main@notInit^(0+128),f
  9404  00B6                     l6001:
  9405                           
  9406                           ;main.c: 1133: bool corrupted = 0;
  9407  00B6  01D9               	clrf	main@corrupted^(0+128)
  9408  00B7                     l6003:
  9409                           
  9410                           ;main.c: 1134: if(DATAEE_ReadByte(0x7000) == 'S'){
  9411  00B7  3000               	movlw	0
  9412  00B8  0020               	movlb	0	; select bank0
  9413  00B9  00A6               	movwf	DATAEE_ReadByte@bAdd
  9414  00BA  3070               	movlw	112
  9415  00BB  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9416  00BC  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9417  00BF  3A53               	xorlw	83
  9418  00C0  1D03               	skipz
  9419  00C1  28C3               	goto	u6281
  9420  00C2  28C4               	goto	u6280
  9421  00C3                     u6281:
  9422  00C3  28FF               	goto	l6023
  9423  00C4                     u6280:
  9424  00C4                     l6005:
  9425                           
  9426                           ;main.c: 1135: notInit = 0;
  9427  00C4  0021               	movlb	1	; select bank1
  9428  00C5  01D8               	clrf	main@notInit^(0+128)
  9429  00C6                     l6007:
  9430                           
  9431                           ;main.c: 1136: for(int i = 1; i < 13; i++){
  9432  00C6  3001               	movlw	1
  9433  00C7  00DA               	movwf	main@i^(0+128)
  9434  00C8  3000               	movlw	0
  9435  00C9  00DB               	movwf	(main@i^(0+128)+1)
  9436  00CA                     l6013:
  9437                           
  9438                           ;main.c: 1137: checkSumAux += DATAEE_ReadByte(0x7000 + (i));
  9439  00CA  0021               	movlb	1	; select bank1
  9440  00CB  085A               	movf	main@i^(0+128),w
  9441  00CC  3E00               	addlw	0
  9442  00CD  0020               	movlb	0	; select bank0
  9443  00CE  00A6               	movwf	DATAEE_ReadByte@bAdd
  9444  00CF  3070               	movlw	112
  9445  00D0  0021               	movlb	1	; select bank1
  9446  00D1  3D5B               	addwfc	(main@i+1)^(0+128),w
  9447  00D2  0020               	movlb	0	; select bank0
  9448  00D3  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9449  00D4  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9450  00D7  0020               	movlb	0	; select bank0
  9451  00D8  00E4               	movwf	??_main
  9452  00D9  0864               	movf	??_main,w
  9453  00DA  0021               	movlb	1	; select bank1
  9454  00DB  07D7               	addwf	main@checkSumAux^(0+128),f
  9455  00DC                     l6015:
  9456  00DC  3001               	movlw	1
  9457  00DD  07DA               	addwf	main@i^(0+128),f
  9458  00DE  3000               	movlw	0
  9459  00DF  3DDB               	addwfc	(main@i+1)^(0+128),f
  9460  00E0                     l6017:
  9461  00E0  085B               	movf	(main@i+1)^(0+128),w
  9462  00E1  3A80               	xorlw	128
  9463  00E2  0020               	movlb	0	; select bank0
  9464  00E3  00E4               	movwf	??_main
  9465  00E4  3080               	movlw	128
  9466  00E5  0264               	subwf	??_main,w
  9467  00E6  1D03               	skipz
  9468  00E7  28EB               	goto	u6295
  9469  00E8  300D               	movlw	13
  9470  00E9  0021               	movlb	1	; select bank1
  9471  00EA  025A               	subwf	main@i^(0+128),w
  9472  00EB                     u6295:
  9473  00EB  1C03               	skipc
  9474  00EC  28EE               	goto	u6291
  9475  00ED  28EF               	goto	u6290
  9476  00EE                     u6291:
  9477  00EE  28CA               	goto	l6013
  9478  00EF                     u6290:
  9479  00EF                     l6019:
  9480                           
  9481                           ;main.c: 1138: };main.c: 1139: if(checkSumAux != DATAEE_ReadByte(0x7000 + (13))){
  9482  00EF  300D               	movlw	13
  9483  00F0  0020               	movlb	0	; select bank0
  9484  00F1  00A6               	movwf	DATAEE_ReadByte@bAdd
  9485  00F2  3070               	movlw	112
  9486  00F3  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9487  00F4  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9488  00F7  0021               	movlb	1	; select bank1
  9489  00F8  0657               	xorwf	main@checkSumAux^(0+128),w
  9490  00F9  1903               	skipnz
  9491  00FA  28FC               	goto	u6301
  9492  00FB  28FD               	goto	u6300
  9493  00FC                     u6301:
  9494  00FC  28FF               	goto	l6023
  9495  00FD                     u6300:
  9496  00FD                     l6021:
  9497                           
  9498                           ;main.c: 1140: corrupted = 1;
  9499  00FD  01D9               	clrf	main@corrupted^(0+128)
  9500  00FE  0AD9               	incf	main@corrupted^(0+128),f
  9501  00FF                     l6023:
  9502                           
  9503                           ;main.c: 1141: };main.c: 1142: };main.c: 1144: if(notInit || corrupted){
  9504  00FF  0021               	movlb	1	; select bank1
  9505  0100  0858               	movf	main@notInit^(0+128),w
  9506  0101  1D03               	btfss	3,2
  9507  0102  2904               	goto	u6311
  9508  0103  2905               	goto	u6310
  9509  0104                     u6311:
  9510  0104  290A               	goto	l6027
  9511  0105                     u6310:
  9512  0105                     l6025:
  9513  0105  0859               	movf	main@corrupted^(0+128),w
  9514  0106  1903               	btfsc	3,2
  9515  0107  2909               	goto	u6321
  9516  0108  290A               	goto	u6320
  9517  0109                     u6321:
  9518  0109  29A3               	goto	l6029
  9519  010A                     u6320:
  9520  010A                     l6027:
  9521                           
  9522                           ;main.c: 1145: DATAEE_WriteByte( 0x7000 + (0), 'S');
  9523  010A  3000               	movlw	0
  9524  010B  0020               	movlb	0	; select bank0
  9525  010C  00A6               	movwf	DATAEE_WriteByte@bAdd
  9526  010D  3070               	movlw	112
  9527  010E  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9528  010F  3053               	movlw	83
  9529  0110  00E4               	movwf	??_main
  9530  0111  0864               	movf	??_main,w
  9531  0112  00A8               	movwf	DATAEE_WriteByte@bData
  9532  0113  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9533                           
  9534                           ;main.c: 1146: DATAEE_WriteByte( 0x7000 + (1), 25);
  9535  0116  3001               	movlw	1
  9536  0117  0020               	movlb	0	; select bank0
  9537  0118  00A6               	movwf	DATAEE_WriteByte@bAdd
  9538  0119  3070               	movlw	112
  9539  011A  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9540  011B  3019               	movlw	25
  9541  011C  00E4               	movwf	??_main
  9542  011D  0864               	movf	??_main,w
  9543  011E  00A8               	movwf	DATAEE_WriteByte@bData
  9544  011F  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9545                           
  9546                           ;main.c: 1147: DATAEE_WriteByte( 0x7000 + (2), 3);
  9547  0122  3002               	movlw	2
  9548  0123  0020               	movlb	0	; select bank0
  9549  0124  00A6               	movwf	DATAEE_WriteByte@bAdd
  9550  0125  3070               	movlw	112
  9551  0126  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9552  0127  3003               	movlw	3
  9553  0128  00E4               	movwf	??_main
  9554  0129  0864               	movf	??_main,w
  9555  012A  00A8               	movwf	DATAEE_WriteByte@bData
  9556  012B  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9557                           
  9558                           ;main.c: 1148: DATAEE_WriteByte( 0x7000 + (3), 5);
  9559  012E  3003               	movlw	3
  9560  012F  0020               	movlb	0	; select bank0
  9561  0130  00A6               	movwf	DATAEE_WriteByte@bAdd
  9562  0131  3070               	movlw	112
  9563  0132  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9564  0133  3005               	movlw	5
  9565  0134  00E4               	movwf	??_main
  9566  0135  0864               	movf	??_main,w
  9567  0136  00A8               	movwf	DATAEE_WriteByte@bData
  9568  0137  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9569                           
  9570                           ;main.c: 1149: DATAEE_WriteByte( 0x7000 + (4), 12);
  9571  013A  3004               	movlw	4
  9572  013B  0020               	movlb	0	; select bank0
  9573  013C  00A6               	movwf	DATAEE_WriteByte@bAdd
  9574  013D  3070               	movlw	112
  9575  013E  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9576  013F  300C               	movlw	12
  9577  0140  00E4               	movwf	??_main
  9578  0141  0864               	movf	??_main,w
  9579  0142  00A8               	movwf	DATAEE_WriteByte@bData
  9580  0143  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9581                           
  9582                           ;main.c: 1150: DATAEE_WriteByte( 0x7000 + (5), 0);
  9583  0146  3005               	movlw	5
  9584  0147  0020               	movlb	0	; select bank0
  9585  0148  00A6               	movwf	DATAEE_WriteByte@bAdd
  9586  0149  3070               	movlw	112
  9587  014A  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9588  014B  01A8               	clrf	DATAEE_WriteByte@bData
  9589  014C  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9590                           
  9591                           ;main.c: 1151: DATAEE_WriteByte( 0x7000 + (6), 0);
  9592  014F  3006               	movlw	6
  9593  0150  0020               	movlb	0	; select bank0
  9594  0151  00A6               	movwf	DATAEE_WriteByte@bAdd
  9595  0152  3070               	movlw	112
  9596  0153  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9597  0154  01A8               	clrf	DATAEE_WriteByte@bData
  9598  0155  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9599                           
  9600                           ;main.c: 1152: DATAEE_WriteByte( 0x7000 + (7), 28);
  9601  0158  3007               	movlw	7
  9602  0159  0020               	movlb	0	; select bank0
  9603  015A  00A6               	movwf	DATAEE_WriteByte@bAdd
  9604  015B  3070               	movlw	112
  9605  015C  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9606  015D  301C               	movlw	28
  9607  015E  00E4               	movwf	??_main
  9608  015F  0864               	movf	??_main,w
  9609  0160  00A8               	movwf	DATAEE_WriteByte@bData
  9610  0161  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9611                           
  9612                           ;main.c: 1153: DATAEE_WriteByte( 0x7000 + (8), 4);
  9613  0164  3008               	movlw	8
  9614  0165  0020               	movlb	0	; select bank0
  9615  0166  00A6               	movwf	DATAEE_WriteByte@bAdd
  9616  0167  3070               	movlw	112
  9617  0168  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9618  0169  3004               	movlw	4
  9619  016A  00E4               	movwf	??_main
  9620  016B  0864               	movf	??_main,w
  9621  016C  00A8               	movwf	DATAEE_WriteByte@bData
  9622  016D  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9623                           
  9624                           ;main.c: 1154: DATAEE_WriteByte( 0x7000 + (9), 'a');
  9625  0170  3009               	movlw	9
  9626  0171  0020               	movlb	0	; select bank0
  9627  0172  00A6               	movwf	DATAEE_WriteByte@bAdd
  9628  0173  3070               	movlw	112
  9629  0174  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9630  0175  3061               	movlw	97
  9631  0176  00E4               	movwf	??_main
  9632  0177  0864               	movf	??_main,w
  9633  0178  00A8               	movwf	DATAEE_WriteByte@bData
  9634  0179  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9635                           
  9636                           ;main.c: 1155: DATAEE_WriteByte( 0x7000 + (10), 0);
  9637  017C  300A               	movlw	10
  9638  017D  0020               	movlb	0	; select bank0
  9639  017E  00A6               	movwf	DATAEE_WriteByte@bAdd
  9640  017F  3070               	movlw	112
  9641  0180  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9642  0181  01A8               	clrf	DATAEE_WriteByte@bData
  9643  0182  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9644                           
  9645                           ;main.c: 1156: DATAEE_WriteByte( 0x7000 + (11), 0);
  9646  0185  300B               	movlw	11
  9647  0186  0020               	movlb	0	; select bank0
  9648  0187  00A6               	movwf	DATAEE_WriteByte@bAdd
  9649  0188  3070               	movlw	112
  9650  0189  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9651  018A  01A8               	clrf	DATAEE_WriteByte@bData
  9652  018B  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9653                           
  9654                           ;main.c: 1157: DATAEE_WriteByte( 0x7000 + (12), 0);
  9655  018E  300C               	movlw	12
  9656  018F  0020               	movlb	0	; select bank0
  9657  0190  00A6               	movwf	DATAEE_WriteByte@bAdd
  9658  0191  3070               	movlw	112
  9659  0192  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9660  0193  01A8               	clrf	DATAEE_WriteByte@bData
  9661  0194  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9662                           
  9663                           ;main.c: 1158: DATAEE_WriteByte( 0x7000 + (13), 174);
  9664  0197  300D               	movlw	13
  9665  0198  0020               	movlb	0	; select bank0
  9666  0199  00A6               	movwf	DATAEE_WriteByte@bAdd
  9667  019A  3070               	movlw	112
  9668  019B  00A7               	movwf	DATAEE_WriteByte@bAdd+1
  9669  019C  30AE               	movlw	174
  9670  019D  00E4               	movwf	??_main
  9671  019E  0864               	movf	??_main,w
  9672  019F  00A8               	movwf	DATAEE_WriteByte@bData
  9673  01A0  3192  2279  3180   	fcall	_DATAEE_WriteByte
  9674  01A3                     l6029:
  9675                           
  9676                           ;main.c: 1159: };main.c: 1161: NREG = DATAEE_ReadByte(0x7000 + (1));
  9677  01A3  3001               	movlw	1
  9678  01A4  0020               	movlb	0	; select bank0
  9679  01A5  00A6               	movwf	DATAEE_ReadByte@bAdd
  9680  01A6  3070               	movlw	112
  9681  01A7  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9682  01A8  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9683  01AB  0020               	movlb	0	; select bank0
  9684  01AC  00E4               	movwf	??_main
  9685  01AD  0864               	movf	??_main,w
  9686  01AE  00FD               	movwf	_NREG
  9687  01AF                     l6031:
  9688                           
  9689                           ;main.c: 1162: PMON = DATAEE_ReadByte(0x7000 + (2));
  9690  01AF  3002               	movlw	2
  9691  01B0  00A6               	movwf	DATAEE_ReadByte@bAdd
  9692  01B1  3070               	movlw	112
  9693  01B2  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9694  01B3  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9695  01B6  0020               	movlb	0	; select bank0
  9696  01B7  00E4               	movwf	??_main
  9697  01B8  0864               	movf	??_main,w
  9698  01B9  0021               	movlb	1	; select bank1
  9699  01BA  00EA               	movwf	_PMON^(0+128)
  9700  01BB                     l6033:
  9701                           
  9702                           ;main.c: 1163: TALA = DATAEE_ReadByte(0x7000 + (3));
  9703  01BB  3003               	movlw	3
  9704  01BC  0020               	movlb	0	; select bank0
  9705  01BD  00A6               	movwf	DATAEE_ReadByte@bAdd
  9706  01BE  3070               	movlw	112
  9707  01BF  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9708  01C0  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9709  01C3  0020               	movlb	0	; select bank0
  9710  01C4  00E4               	movwf	??_main
  9711  01C5  0864               	movf	??_main,w
  9712  01C6  0021               	movlb	1	; select bank1
  9713  01C7  00E9               	movwf	_TALA^(0+128)
  9714  01C8                     l6035:
  9715                           
  9716                           ;main.c: 1164: clkAlarm.alarmVal.h = DATAEE_ReadByte(0x7000 + (4));
  9717  01C8  3004               	movlw	4
  9718  01C9  0020               	movlb	0	; select bank0
  9719  01CA  00A6               	movwf	DATAEE_ReadByte@bAdd
  9720  01CB  3070               	movlw	112
  9721  01CC  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9722  01CD  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9723  01D0  0020               	movlb	0	; select bank0
  9724  01D1  00E4               	movwf	??_main
  9725  01D2  0864               	movf	??_main,w
  9726  01D3  0021               	movlb	1	; select bank1
  9727  01D4  00A0               	movwf	_clkAlarm^(0+128)
  9728  01D5                     l6037:
  9729                           
  9730                           ;main.c: 1165: clkAlarm.alarmVal.m = DATAEE_ReadByte(0x7000 + (5));
  9731  01D5  3005               	movlw	5
  9732  01D6  0020               	movlb	0	; select bank0
  9733  01D7  00A6               	movwf	DATAEE_ReadByte@bAdd
  9734  01D8  3070               	movlw	112
  9735  01D9  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9736  01DA  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9737  01DD  0020               	movlb	0	; select bank0
  9738  01DE  00E4               	movwf	??_main
  9739  01DF  0864               	movf	??_main,w
  9740  01E0  0021               	movlb	1	; select bank1
  9741  01E1  00A1               	movwf	(_clkAlarm^(0+128)+1)
  9742  01E2                     l6039:
  9743                           
  9744                           ;main.c: 1166: clkAlarm.alarmVal.s = DATAEE_ReadByte(0x7000 + (6));
  9745  01E2  3006               	movlw	6
  9746  01E3  0020               	movlb	0	; select bank0
  9747  01E4  00A6               	movwf	DATAEE_ReadByte@bAdd
  9748  01E5  3070               	movlw	112
  9749  01E6  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9750  01E7  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9751  01EA  0020               	movlb	0	; select bank0
  9752  01EB  00E4               	movwf	??_main
  9753  01EC  0864               	movf	??_main,w
  9754  01ED  0021               	movlb	1	; select bank1
  9755  01EE  00A2               	movwf	(_clkAlarm^(0+128)+2)
  9756  01EF                     l6041:
  9757                           
  9758                           ;main.c: 1167: tempAlarm.alarmTemp = DATAEE_ReadByte(0x7000 + (7));
  9759  01EF  3007               	movlw	7
  9760  01F0  0020               	movlb	0	; select bank0
  9761  01F1  00A6               	movwf	DATAEE_ReadByte@bAdd
  9762  01F2  3070               	movlw	112
  9763  01F3  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9764  01F4  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9765  01F7  0020               	movlb	0	; select bank0
  9766  01F8  00E4               	movwf	??_main
  9767  01F9  0864               	movf	??_main,w
  9768  01FA  0021               	movlb	1	; select bank1
  9769  01FB  00A7               	movwf	_tempAlarm^(0+128)
  9770  01FC                     l6043:
  9771                           
  9772                           ;main.c: 1168: lumAlarm.alarmLum = DATAEE_ReadByte(0x7000 + (8));
  9773  01FC  3008               	movlw	8
  9774  01FD  0020               	movlb	0	; select bank0
  9775  01FE  00A6               	movwf	DATAEE_ReadByte@bAdd
  9776  01FF  3070               	movlw	112
  9777  0200  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9778  0201  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9779  0204  0020               	movlb	0	; select bank0
  9780  0205  00E4               	movwf	??_main
  9781  0206  0864               	movf	??_main,w
  9782  0207  0021               	movlb	1	; select bank1
  9783  0208  00A4               	movwf	_lumAlarm^(0+128)
  9784  0209                     l6045:
  9785                           
  9786                           ;main.c: 1169: ALAF = DATAEE_ReadByte(0x7000 + (9));
  9787  0209  3009               	movlw	9
  9788  020A  0020               	movlb	0	; select bank0
  9789  020B  00A6               	movwf	DATAEE_ReadByte@bAdd
  9790  020C  3070               	movlw	112
  9791  020D  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9792  020E  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9793  0211  0020               	movlb	0	; select bank0
  9794  0212  00E4               	movwf	??_main
  9795  0213  0864               	movf	??_main,w
  9796  0214  00EF               	movwf	_ALAF
  9797  0215                     l6047:
  9798                           
  9799                           ;main.c: 1170: t.h = DATAEE_ReadByte(0x7000 + (10));
  9800  0215  300A               	movlw	10
  9801  0216  00A6               	movwf	DATAEE_ReadByte@bAdd
  9802  0217  3070               	movlw	112
  9803  0218  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9804  0219  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9805  021C  0020               	movlb	0	; select bank0
  9806  021D  00E4               	movwf	??_main
  9807  021E  0864               	movf	??_main,w
  9808  021F  00E5               	movwf	_t
  9809  0220                     l6049:
  9810                           
  9811                           ;main.c: 1171: t.m = DATAEE_ReadByte(0x7000 + (11));
  9812  0220  300B               	movlw	11
  9813  0221  00A6               	movwf	DATAEE_ReadByte@bAdd
  9814  0222  3070               	movlw	112
  9815  0223  00A7               	movwf	DATAEE_ReadByte@bAdd+1
  9816  0224  3190  2041  3180   	fcall	_DATAEE_ReadByte
  9817  0227  0020               	movlb	0	; select bank0
  9818  0228  00E4               	movwf	??_main
  9819  0229  0864               	movf	??_main,w
  9820  022A  00E6               	movwf	_t+1
  9821  022B                     l6051:
  9822                           
  9823                           ;main.c: 1172: iwrite = 0;
  9824  022B  01EB               	clrf	_iwrite
  9825  022C                     l6053:
  9826                           
  9827                           ;main.c: 1176: tempAlarm.trigger = 0;
  9828  022C  0021               	movlb	1	; select bank1
  9829  022D  01A8               	clrf	(_tempAlarm^(0+128)+1)
  9830  022E                     l6055:
  9831                           
  9832                           ;main.c: 1177: tempAlarm.triggered = 0;
  9833  022E  01A9               	clrf	(_tempAlarm^(0+128)+2)
  9834  022F                     l6057:
  9835                           
  9836                           ;main.c: 1179: lumAlarm.trigger = 0;
  9837  022F  01A5               	clrf	(_lumAlarm^(0+128)+1)
  9838  0230                     l6059:
  9839                           
  9840                           ;main.c: 1180: lumAlarm.triggered = 0;
  9841  0230  01A6               	clrf	(_lumAlarm^(0+128)+2)
  9842  0231                     l6061:
  9843                           
  9844                           ;main.c: 1182: clkAlarm.trigger = 0;
  9845  0231  01A3               	clrf	(_clkAlarm^(0+128)+3)
  9846  0232                     l6063:
  9847                           
  9848                           ;main.c: 1185: i2c1_driver_open();
  9849  0232  319F  27F4  3180   	fcall	_i2c1_driver_open
  9850  0235                     l6065:
  9851                           
  9852                           ;main.c: 1186: TRISCbits.TRISC3 = 1;
  9853  0235  0020               	movlb	0	; select bank0
  9854  0236  1593               	bsf	19,3	;volatile
  9855  0237                     l6067:
  9856                           
  9857                           ;main.c: 1187: TRISCbits.TRISC4 = 1;
  9858  0237  1613               	bsf	19,4	;volatile
  9859  0238                     l6069:
  9860                           
  9861                           ;main.c: 1188: WPUC3 = 1;
  9862  0238  003E               	movlb	30	; select bank30
  9863  0239  15CF               	bsf	79,3	;volatile
  9864  023A                     l6071:
  9865                           
  9866                           ;main.c: 1189: WPUC4 = 1;
  9867  023A  164F               	bsf	79,4	;volatile
  9868  023B                     l6073:
  9869                           
  9870                           ;main.c: 1190: LCDinit();
  9871  023B  3188  2031  3180   	fcall	_LCDinit
  9872  023E                     l6075:
  9873                           
  9874                           ;main.c: 1193: (INTCONbits.GIE = 1);
  9875  023E  178B               	bsf	11,7	;volatile
  9876  023F                     l6077:
  9877                           
  9878                           ;main.c: 1196: (INTCONbits.PEIE = 1);
  9879  023F  170B               	bsf	11,6	;volatile
  9880  0240                     l6079:
  9881                           
  9882                           ;main.c: 1200: uint8_t c;;main.c: 1201: char buff[20] = "";
  9883  0240  30C1               	movlw	low main@buff
  9884  0241  0086               	movwf	6
  9885  0242  3000               	movlw	high main@buff
  9886  0243  0087               	movwf	7
  9887  0244  3014               	movlw	20
  9888  0245  0020               	movlb	0	; select bank0
  9889  0246  00E4               	movwf	??_main
  9890  0247  3000               	movlw	0
  9891  0248                     u6330:
  9892  0248  001E               	movwi fsr1++
  9893  0249  0BE4               	decfsz	??_main,f
  9894  024A  2A48               	goto	u6330
  9895  024B                     l6081:
  9896                           
  9897                           ;main.c: 1202: int n=0;
  9898  024B  0021               	movlb	1	; select bank1
  9899  024C  01DF               	clrf	main@n^(0+128)
  9900  024D  01E0               	clrf	(main@n+1)^(0+128)
  9901  024E                     l6083:
  9902  024E  2AA5               	goto	l6111
  9903  024F                     l6085:
  9904                           
  9905                           ;main.c: 1208: c = getch();
  9906  024F  3187  27FB  3180   	fcall	_getch
  9907  0252  0020               	movlb	0	; select bank0
  9908  0253  00E4               	movwf	??_main
  9909  0254  0864               	movf	??_main,w
  9910  0255  0021               	movlb	1	; select bank1
  9911  0256  00DE               	movwf	main@c^(0+128)
  9912  0257                     l6087:
  9913                           
  9914                           ;main.c: 1209: if((c == (uint8_t)0xFD || buff[0] == (uint8_t)0xFD)){
  9915  0257  30FD               	movlw	253
  9916  0258  065E               	xorwf	main@c^(0+128),w
  9917  0259  1903               	btfsc	3,2
  9918  025A  2A5C               	goto	u6341
  9919  025B  2A5D               	goto	u6340
  9920  025C                     u6341:
  9921  025C  2A63               	goto	l6091
  9922  025D                     u6340:
  9923  025D                     l6089:
  9924  025D  30FD               	movlw	253
  9925  025E  0641               	xorwf	main@buff^(0+128),w
  9926  025F  1D03               	btfss	3,2
  9927  0260  2A62               	goto	u6351
  9928  0261  2A63               	goto	u6350
  9929  0262                     u6351:
  9930  0262  2A9E               	goto	l6107
  9931  0263                     u6350:
  9932  0263                     l6091:
  9933                           
  9934                           ;main.c: 1210: if(c == (uint8_t)0xFD){
  9935  0263  30FD               	movlw	253
  9936  0264  065E               	xorwf	main@c^(0+128),w
  9937  0265  1D03               	btfss	3,2
  9938  0266  2A68               	goto	u6361
  9939  0267  2A69               	goto	u6360
  9940  0268                     u6361:
  9941  0268  2A78               	goto	l6097
  9942  0269                     u6360:
  9943  0269                     l6093:
  9944                           
  9945                           ;main.c: 1211: memset(buff, 0, sizeof buff);
  9946  0269  3000               	movlw	0
  9947  026A  0020               	movlb	0	; select bank0
  9948  026B  00A0               	movwf	memset@c
  9949  026C  00A1               	movwf	memset@c+1
  9950  026D  3014               	movlw	20
  9951  026E  00A2               	movwf	memset@n
  9952  026F  3000               	movlw	0
  9953  0270  00A3               	movwf	memset@n+1
  9954  0271  30C1               	movlw	(low (main@buff| 0))& (0+255)
  9955  0272  3191  21B2  3180   	fcall	_memset
  9956  0275                     l6095:
  9957                           
  9958                           ;main.c: 1212: n=0;
  9959  0275  0021               	movlb	1	; select bank1
  9960  0276  01DF               	clrf	main@n^(0+128)
  9961  0277  01E0               	clrf	(main@n+1)^(0+128)
  9962  0278                     l6097:
  9963                           
  9964                           ;main.c: 1213: };main.c: 1214: buff[n] = c;
  9965  0278  085E               	movf	main@c^(0+128),w
  9966  0279  0020               	movlb	0	; select bank0
  9967  027A  00E4               	movwf	??_main
  9968  027B  0021               	movlb	1	; select bank1
  9969  027C  085F               	movf	main@n^(0+128),w
  9970  027D  3EC1               	addlw	(low (main@buff| 0))& (0+255)
  9971  027E  0086               	movwf	6
  9972  027F  0187               	clrf	7
  9973  0280  0020               	movlb	0	; select bank0
  9974  0281  0864               	movf	??_main,w
  9975  0282  0081               	movwf	1
  9976  0283                     l6099:
  9977                           
  9978                           ;main.c: 1215: n++;
  9979  0283  3001               	movlw	1
  9980  0284  0021               	movlb	1	; select bank1
  9981  0285  07DF               	addwf	main@n^(0+128),f
  9982  0286  3000               	movlw	0
  9983  0287  3DE0               	addwfc	(main@n+1)^(0+128),f
  9984  0288                     l6101:
  9985                           
  9986                           ;main.c: 1216: if(n == 20){
  9987  0288  3014               	movlw	20
  9988  0289  065F               	xorwf	main@n^(0+128),w
  9989  028A  0460               	iorwf	(main@n+1)^(0+128),w
  9990  028B  1D03               	btfss	3,2
  9991  028C  2A8E               	goto	u6371
  9992  028D  2A8F               	goto	u6370
  9993  028E                     u6371:
  9994  028E  2A9E               	goto	l6107
  9995  028F                     u6370:
  9996  028F                     l6103:
  9997                           
  9998                           ;main.c: 1217: memset(buff, 0, sizeof buff);
  9999  028F  3000               	movlw	0
 10000  0290  0020               	movlb	0	; select bank0
 10001  0291  00A0               	movwf	memset@c
 10002  0292  00A1               	movwf	memset@c+1
 10003  0293  3014               	movlw	20
 10004  0294  00A2               	movwf	memset@n
 10005  0295  3000               	movlw	0
 10006  0296  00A3               	movwf	memset@n+1
 10007  0297  30C1               	movlw	(low (main@buff| 0))& (0+255)
 10008  0298  3191  21B2  3180   	fcall	_memset
 10009  029B                     l6105:
 10010                           
 10011                           ;main.c: 1218: n=0;
 10012  029B  0021               	movlb	1	; select bank1
 10013  029C  01DF               	clrf	main@n^(0+128)
 10014  029D  01E0               	clrf	(main@n+1)^(0+128)
 10015  029E                     l6107:
 10016                           
 10017                           ;main.c: 1219: };main.c: 1220: };main.c: 1221: if(c == (uint8_t)0xFE){
 10018  029E  30FE               	movlw	254
 10019  029F  065E               	xorwf	main@c^(0+128),w
 10020  02A0  1D03               	btfss	3,2
 10021  02A1  2AA3               	goto	u6381
 10022  02A2  2AA4               	goto	u6380
 10023  02A3                     u6381:
 10024  02A3  2AA5               	goto	l6111
 10025  02A4                     u6380:
 10026  02A4  2AAD               	goto	l6113
 10027  02A5                     l1549:
 10028  02A5                     l6111:
 10029  02A5  319F  2775  3180   	fcall	_EUSART_is_rx_ready
 10030  02A8  3A00               	xorlw	0
 10031  02A9  1D03               	skipz
 10032  02AA  2AAC               	goto	u6391
 10033  02AB  2AAD               	goto	u6390
 10034  02AC                     u6391:
 10035  02AC  2A4F               	goto	l6085
 10036  02AD                     u6390:
 10037  02AD                     l6113:
 10038                           
 10039                           ;main.c: 1223: };main.c: 1224: };main.c: 1225: if(buff[n-1] == (uint8_t)0xFE){
 10040  02AD  0021               	movlb	1	; select bank1
 10041  02AE  085F               	movf	main@n^(0+128),w
 10042  02AF  3EFF               	addlw	255
 10043  02B0  3EC1               	addlw	(low (main@buff| 0))& (0+255)
 10044  02B1  0086               	movwf	6
 10045  02B2  0187               	clrf	7
 10046  02B3  30FE               	movlw	254
 10047  02B4  0601               	xorwf	1,w
 10048  02B5  1D03               	btfss	3,2
 10049  02B6  2AB8               	goto	u6401
 10050  02B7  2AB9               	goto	u6400
 10051  02B8                     u6401:
 10052  02B8  2B23               	goto	l6135
 10053  02B9                     u6400:
 10054  02B9                     l6115:
 10055                           
 10056                           ;main.c: 1226: for (i = 0; i < (sizeof(commands) / sizeof(struct command_d)); i++){
 10057  02B9  01DC               	clrf	main@i_2536^(0+128)
 10058  02BA  01DD               	clrf	(main@i_2536+1)^(0+128)
 10059  02BB                     l6121:
 10060                           
 10061                           ;main.c: 1227: if (buff[1] == commands[i].cmd_name){
 10062  02BB  085D               	movf	(main@i_2536+1)^(0+128),w
 10063  02BC  0020               	movlb	0	; select bank0
 10064  02BD  00A1               	movwf	___wmul@multiplier+1
 10065  02BE  0021               	movlb	1	; select bank1
 10066  02BF  085C               	movf	main@i_2536^(0+128),w
 10067  02C0  0020               	movlb	0	; select bank0
 10068  02C1  00A0               	movwf	___wmul@multiplier
 10069  02C2  3003               	movlw	3
 10070  02C3  00A2               	movwf	___wmul@multiplicand
 10071  02C4  3000               	movlw	0
 10072  02C5  00A3               	movwf	___wmul@multiplicand+1
 10073  02C6  3191  21D1  3180   	fcall	___wmul
 10074  02C9  0020               	movlb	0	; select bank0
 10075  02CA  0821               	movf	?___wmul+1,w
 10076  02CB  0085               	movwf	5
 10077  02CC  0820               	movf	?___wmul,w
 10078  02CD  0084               	movwf	4
 10079  02CE  3002               	movlw	low ((_commands+2)| (0+32768))
 10080  02CF  0784               	addwf	4,f
 10081  02D0  3098               	movlw	high ((_commands+2)| (0+32768))
 10082  02D1  3D85               	addwfc	5,f
 10083  02D2  0800               	movf	0,w	;code access
 10084  02D3  0021               	movlb	1	; select bank1
 10085  02D4  0642               	xorwf	(main@buff^(0+128)+1),w
 10086  02D5  1D03               	skipz
 10087  02D6  2AD8               	goto	u6411
 10088  02D7  2AD9               	goto	u6410
 10089  02D8                     u6411:
 10090  02D8  2B07               	goto	l6127
 10091  02D9                     u6410:
 10092  02D9                     l6123:
 10093                           
 10094                           ;main.c: 1228: commands[i].cmd_fnct(n, buff);
 10095  02D9  085D               	movf	(main@i_2536+1)^(0+128),w
 10096  02DA  0020               	movlb	0	; select bank0
 10097  02DB  00A1               	movwf	___wmul@multiplier+1
 10098  02DC  0021               	movlb	1	; select bank1
 10099  02DD  085C               	movf	main@i_2536^(0+128),w
 10100  02DE  0020               	movlb	0	; select bank0
 10101  02DF  00A0               	movwf	___wmul@multiplier
 10102  02E0  3003               	movlw	3
 10103  02E1  00A2               	movwf	___wmul@multiplicand
 10104  02E2  3000               	movlw	0
 10105  02E3  00A3               	movwf	___wmul@multiplicand+1
 10106  02E4  3191  21D1  3180   	fcall	___wmul
 10107  02E7  0020               	movlb	0	; select bank0
 10108  02E8  0821               	movf	?___wmul+1,w
 10109  02E9  0085               	movwf	5
 10110  02EA  0820               	movf	?___wmul,w
 10111  02EB  0084               	movwf	4
 10112  02EC  3000               	movlw	low (_commands| (0+32768))
 10113  02ED  0784               	addwf	4,f
 10114  02EE  3098               	movlw	high (_commands| (0+32768))
 10115  02EF  3D85               	addwfc	5,f
 10116  02F0  3F00               	moviw [0]fsr0
 10117  02F1  0021               	movlb	1	; select bank1
 10118  02F2  00D5               	movwf	_main$3500^(0+128)
 10119  02F3  3F01               	moviw [1]fsr0
 10120  02F4  00D6               	movwf	(_main$3500+1)^(0+128)
 10121  02F5                     l6125:
 10122                           
 10123                           ;main.c: 1228: commands[i].cmd_fnct(n, buff);
 10124  02F5  0860               	movf	(main@n+1)^(0+128),w
 10125  02F6  0020               	movlb	0	; select bank0
 10126  02F7  00B0               	movwf	cmd_tri@num+1
 10127  02F8  0021               	movlb	1	; select bank1
 10128  02F9  085F               	movf	main@n^(0+128),w
 10129  02FA  0020               	movlb	0	; select bank0
 10130  02FB  00AF               	movwf	cmd_tri@num
 10131  02FC  30C1               	movlw	(low (main@buff| 0))& (0+255)
 10132  02FD  00E4               	movwf	??_main
 10133  02FE  0864               	movf	??_main,w
 10134  02FF  00B1               	movwf	cmd_tri@buffer
 10135  0300  0021               	movlb	1	; select bank1
 10136  0301  0856               	movf	(_main$3500+1)^(0+128),w
 10137  0302  008A               	movwf	10
 10138  0303  0855               	movf	_main$3500^(0+128),w
 10139  0304  000A               	callw
 10140  0305  3180               	pagesel	$
 10141                           
 10142                           ;main.c: 1229: break;
 10143  0306  2B14               	goto	l6129
 10144  0307                     l6127:
 10145  0307  3001               	movlw	1
 10146  0308  07DC               	addwf	main@i_2536^(0+128),f
 10147  0309  3000               	movlw	0
 10148  030A  3DDD               	addwfc	(main@i_2536+1)^(0+128),f
 10149  030B  3000               	movlw	0
 10150  030C  025D               	subwf	(main@i_2536+1)^(0+128),w
 10151  030D  300D               	movlw	13
 10152  030E  1903               	skipnz
 10153  030F  025C               	subwf	main@i_2536^(0+128),w
 10154  0310  1C03               	skipc
 10155  0311  2B13               	goto	u6421
 10156  0312  2B14               	goto	u6420
 10157  0313                     u6421:
 10158  0313  2ABB               	goto	l6121
 10159  0314                     u6420:
 10160  0314                     l6129:
 10161                           
 10162                           ;main.c: 1230: };main.c: 1231: };main.c: 1232: memset(buff, 0, sizeof buff);
 10163  0314  3000               	movlw	0
 10164  0315  0020               	movlb	0	; select bank0
 10165  0316  00A0               	movwf	memset@c
 10166  0317  00A1               	movwf	memset@c+1
 10167  0318  3014               	movlw	20
 10168  0319  00A2               	movwf	memset@n
 10169  031A  3000               	movlw	0
 10170  031B  00A3               	movwf	memset@n+1
 10171  031C  30C1               	movlw	(low (main@buff| 0))& (0+255)
 10172  031D  3191  21B2  3180   	fcall	_memset
 10173  0320                     l6131:
 10174  0320                     l6133:
 10175                           
 10176                           ;main.c: 1234: n=0;
 10177  0320  0021               	movlb	1	; select bank1
 10178  0321  01DF               	clrf	main@n^(0+128)
 10179  0322  01E0               	clrf	(main@n+1)^(0+128)
 10180  0323                     l6135:
 10181                           
 10182                           ;main.c: 1235: };main.c: 1237: if(modeFlag == 0){
 10183  0323  0020               	movlb	0	; select bank0
 10184  0324  0868               	movf	_modeFlag,w
 10185  0325  0469               	iorwf	_modeFlag+1,w
 10186  0326  1D03               	btfss	3,2
 10187  0327  2B29               	goto	u6431
 10188  0328  2B2A               	goto	u6430
 10189  0329                     u6431:
 10190  0329  2B2E               	goto	l6139
 10191  032A                     u6430:
 10192  032A                     l6137:
 10193                           
 10194                           ;main.c: 1238: checkFlags();
 10195  032A  3189  21B3  3180   	fcall	_checkFlags
 10196                           
 10197                           ;main.c: 1239: } else if(modeFlag == 1){
 10198  032D  2AA5               	goto	l6111
 10199  032E                     l6139:
 10200  032E  0368               	decf	_modeFlag,w
 10201  032F  0469               	iorwf	_modeFlag+1,w
 10202  0330  1D03               	btfss	3,2
 10203  0331  2B33               	goto	u6441
 10204  0332  2B34               	goto	u6440
 10205  0333                     u6441:
 10206  0333  2B38               	goto	l6143
 10207  0334                     u6440:
 10208  0334                     l6141:
 10209                           
 10210                           ;main.c: 1240: editClock();
 10211  0334  3197  271E  3180   	fcall	_editClock
 10212                           
 10213                           ;main.c: 1241: } else if(modeFlag == 2){
 10214  0337  2AA5               	goto	l6111
 10215  0338                     l6143:
 10216  0338  3002               	movlw	2
 10217  0339  0668               	xorwf	_modeFlag,w
 10218  033A  0469               	iorwf	_modeFlag+1,w
 10219  033B  1D03               	btfss	3,2
 10220  033C  2B3E               	goto	u6451
 10221  033D  2B3F               	goto	u6450
 10222  033E                     u6451:
 10223  033E  2B43               	goto	l6147
 10224  033F                     u6450:
 10225  033F                     l6145:
 10226                           
 10227                           ;main.c: 1242: editTemp();
 10228  033F  3194  2430  3180   	fcall	_editTemp
 10229                           
 10230                           ;main.c: 1243: } else if(modeFlag == 3){
 10231  0342  2AA5               	goto	l6111
 10232  0343                     l6147:
 10233  0343  3003               	movlw	3
 10234  0344  0668               	xorwf	_modeFlag,w
 10235  0345  0469               	iorwf	_modeFlag+1,w
 10236  0346  1D03               	btfss	3,2
 10237  0347  2B49               	goto	u6461
 10238  0348  2B4A               	goto	u6460
 10239  0349                     u6461:
 10240  0349  2B4E               	goto	l6151
 10241  034A                     u6460:
 10242  034A                     l6149:
 10243                           
 10244                           ;main.c: 1244: editLum();
 10245  034A  3193  23FB  3180   	fcall	_editLum
 10246                           
 10247                           ;main.c: 1245: } else if(modeFlag == 4){
 10248  034D  2AA5               	goto	l6111
 10249  034E                     l6151:
 10250  034E  3004               	movlw	4
 10251  034F  0668               	xorwf	_modeFlag,w
 10252  0350  0469               	iorwf	_modeFlag+1,w
 10253  0351  1D03               	btfss	3,2
 10254  0352  2B54               	goto	u6471
 10255  0353  2B55               	goto	u6470
 10256  0354                     u6471:
 10257  0354  2B59               	goto	l6155
 10258  0355                     u6470:
 10259  0355                     l6153:
 10260                           
 10261                           ;main.c: 1246: toggleAlarms();
 10262  0355  3193  2363  3180   	fcall	_toggleAlarms
 10263                           
 10264                           ;main.c: 1247: } else if(modeFlag > 4){
 10265  0358  2AA5               	goto	l6111
 10266  0359                     l6155:
 10267  0359  0869               	movf	_modeFlag+1,w
 10268  035A  3A80               	xorlw	128
 10269  035B  00E4               	movwf	??_main
 10270  035C  3080               	movlw	128
 10271  035D  0264               	subwf	??_main,w
 10272  035E  1D03               	skipz
 10273  035F  2B62               	goto	u6485
 10274  0360  3005               	movlw	5
 10275  0361  0268               	subwf	_modeFlag,w
 10276  0362                     u6485:
 10277  0362  1C03               	skipc
 10278  0363  2B65               	goto	u6481
 10279  0364  2B66               	goto	u6480
 10280  0365                     u6481:
 10281  0365  2AA5               	goto	l1549
 10282  0366                     u6480:
 10283  0366                     l6157:
 10284                           
 10285                           ;main.c: 1248: modeFlag = 0;
 10286  0366  0020               	movlb	0	; select bank0
 10287  0367  01E8               	clrf	_modeFlag
 10288  0368  01E9               	clrf	_modeFlag+1
 10289  0369  2AA5               	goto	l6111
 10290  036A  3180  2852         	ljmp	start
 10291  036C                     __end_of_main:
 10292                           
 10293                           	psect	text1
 10294  1363                     __ptext1:	
 10295 ;; *************** function _toggleAlarms *****************
 10296 ;; Defined at:
 10297 ;;		line 806 in file "main.c"
 10298 ;; Parameters:    Size  Location     Type
 10299 ;;		None
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;		None
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  1    wreg      void 
 10304 ;; Registers used:
 10305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;Total ram usage:        1 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:   10
 10318 ;; This function calls:
 10319 ;;		_checkFlags
 10320 ;;		_update_menuLCD
 10321 ;; This function is called by:
 10322 ;;		_main
 10323 ;; This function uses a non-reentrant model
 10324 ;;
 10325                           
 10326                           
 10327                           ;psect for function _toggleAlarms
 10328  1363                     _toggleAlarms:
 10329  1363                     l1440:	
 10330                           ;incstack = 0
 10331                           ; Regs used in _toggleAlarms: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10332                           ;main.c: 808: while(1){
 10333                           
 10334                           
 10335                           ;main.c: 809: if(PORTCbits.RC5 == 0){
 10336  1363  0020               	movlb	0	; select bank0
 10337  1364  1A8E               	btfsc	14,5	;volatile
 10338  1365  2B67               	goto	u5681
 10339  1366  2B68               	goto	u5680
 10340  1367                     u5681:
 10341  1367  2B83               	goto	l5699
 10342  1368                     u5680:
 10343  1368                     l5691:
 10344                           
 10345                           ;main.c: 810: if(ALAF == 'A'){
 10346  1368  3041               	movlw	65
 10347  1369  066F               	xorwf	_ALAF,w
 10348  136A  1D03               	btfss	3,2
 10349  136B  2B6D               	goto	u5691
 10350  136C  2B6E               	goto	u5690
 10351  136D                     u5691:
 10352  136D  2B73               	goto	l5695
 10353  136E                     u5690:
 10354  136E                     l5693:
 10355                           
 10356                           ;main.c: 811: ALAF = 'a';
 10357  136E  3061               	movlw	97
 10358  136F  00E3               	movwf	??_toggleAlarms
 10359  1370  0863               	movf	??_toggleAlarms,w
 10360  1371  00EF               	movwf	_ALAF
 10361                           
 10362                           ;main.c: 812: } else {
 10363  1372  2B77               	goto	l1443
 10364  1373                     l5695:
 10365                           
 10366                           ;main.c: 813: ALAF = 'A';
 10367  1373  3041               	movlw	65
 10368  1374  00E3               	movwf	??_toggleAlarms
 10369  1375  0863               	movf	??_toggleAlarms,w
 10370  1376  00EF               	movwf	_ALAF
 10371  1377                     l1443:
 10372                           
 10373                           ;main.c: 814: };main.c: 815: _delay((unsigned long)((100)*(1000000/4000.0)));
 10374  1377  3021               	movlw	33
 10375  1378  0020               	movlb	0	; select bank0
 10376  1379  00E3               	movwf	??_toggleAlarms
 10377  137A  3076               	movlw	118
 10378  137B                     u6497:
 10379  137B  0B89               	decfsz	9,f
 10380  137C  2B7B               	goto	u6497
 10381  137D  0BE3               	decfsz	??_toggleAlarms,f
 10382  137E  2B7B               	goto	u6497
 10383  137F  0000               	nop
 10384  1380                     l5697:
 10385                           
 10386                           ;main.c: 816: update_menuLCD();
 10387  1380  3183  236C  3193   	fcall	_update_menuLCD
 10388  1383                     l5699:
 10389                           
 10390                           ;main.c: 817: };main.c: 818: checkFlags();
 10391  1383  3189  21B3  3193   	fcall	_checkFlags
 10392  1386                     l5701:
 10393                           
 10394                           ;main.c: 819: if(modeFlag != 4){
 10395  1386  3004               	movlw	4
 10396  1387  0020               	movlb	0	; select bank0
 10397  1388  0668               	xorwf	_modeFlag,w
 10398  1389  0469               	iorwf	_modeFlag+1,w
 10399  138A  1903               	btfsc	3,2
 10400  138B  2B8D               	goto	u5701
 10401  138C  2B8E               	goto	u5700
 10402  138D                     u5701:
 10403  138D  2B63               	goto	l1440
 10404  138E                     u5700:
 10405  138E                     l5703:
 10406                           
 10407                           ;main.c: 820: modeFlag = 0;
 10408  138E  01E8               	clrf	_modeFlag
 10409  138F  01E9               	clrf	_modeFlag+1
 10410  1390                     l1447:	
 10411                           ;main.c: 821: break;
 10412                           
 10413  1390  0008               	return
 10414  1391                     __end_of_toggleAlarms:
 10415                           
 10416                           	psect	text2
 10417  11B2                     __ptext2:	
 10418 ;; *************** function _memset *****************
 10419 ;; Defined at:
 10420 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 10421 ;; Parameters:    Size  Location     Type
 10422 ;;  p1              1    wreg     PTR void 
 10423 ;;		 -> main@buff(20), 
 10424 ;;  c               2    0[BANK0 ] int 
 10425 ;;  n               2    2[BANK0 ] unsigned int 
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  p1              1    6[BANK0 ] PTR void 
 10428 ;;		 -> main@buff(20), 
 10429 ;;  p               1    5[BANK0 ] PTR unsigned char 
 10430 ;;		 -> main@buff(20), 
 10431 ;; Return value:  Size  Location     Type
 10432 ;;                  1    wreg      PTR void 
 10433 ;; Registers used:
 10434 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10435 ;; Tracked objects:
 10436 ;;		On entry : 0/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10440 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;Total ram usage:        7 bytes
 10445 ;; Hardware stack levels used:    1
 10446 ;; Hardware stack levels required when called:    4
 10447 ;; This function calls:
 10448 ;;		Nothing
 10449 ;; This function is called by:
 10450 ;;		_main
 10451 ;; This function uses a non-reentrant model
 10452 ;;
 10453                           
 10454                           
 10455                           ;psect for function _memset
 10456  11B2                     _memset:
 10457                           
 10458                           ;incstack = 0
 10459                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10460                           ;memset@p1 stored from wreg
 10461  11B2  0020               	movlb	0	; select bank0
 10462  11B3  00A6               	movwf	memset@p1
 10463  11B4                     l5941:
 10464  11B4  0826               	movf	memset@p1,w
 10465  11B5  00A4               	movwf	??_memset
 10466  11B6  0824               	movf	??_memset,w
 10467  11B7  00A5               	movwf	memset@p
 10468  11B8  29C4               	goto	l5947
 10469  11B9                     l5943:
 10470  11B9  0820               	movf	memset@c,w
 10471  11BA  00A4               	movwf	??_memset
 10472  11BB  0825               	movf	memset@p,w
 10473  11BC  0086               	movwf	6
 10474  11BD  0187               	clrf	7
 10475  11BE  0824               	movf	??_memset,w
 10476  11BF  0081               	movwf	1
 10477  11C0                     l5945:
 10478  11C0  3001               	movlw	1
 10479  11C1  00A4               	movwf	??_memset
 10480  11C2  0824               	movf	??_memset,w
 10481  11C3  07A5               	addwf	memset@p,f
 10482  11C4                     l5947:
 10483  11C4  3001               	movlw	1
 10484  11C5  02A2               	subwf	memset@n,f
 10485  11C6  3000               	movlw	0
 10486  11C7  3BA3               	subwfb	memset@n+1,f
 10487  11C8  0A22               	incf	memset@n,w
 10488  11C9  1D03               	skipz
 10489  11CA  29CF               	goto	u6151
 10490  11CB  0A23               	incf	memset@n+1,w
 10491  11CC  1D03               	btfss	3,2
 10492  11CD  29CF               	goto	u6151
 10493  11CE  29D0               	goto	u6150
 10494  11CF                     u6151:
 10495  11CF  29B9               	goto	l5943
 10496  11D0                     u6150:
 10497  11D0                     l2237:
 10498  11D0  0008               	return
 10499  11D1                     __end_of_memset:
 10500                           
 10501                           	psect	text3
 10502  1FF4                     __ptext3:	
 10503 ;; *************** function _i2c1_driver_open *****************
 10504 ;; Defined at:
 10505 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;		None
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;		None
 10510 ;; Return value:  Size  Location     Type
 10511 ;;		None               void
 10512 ;; Registers used:
 10513 ;;		wreg, status,2
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/0
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;Total ram usage:        0 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    4
 10526 ;; This function calls:
 10527 ;;		Nothing
 10528 ;; This function is called by:
 10529 ;;		_main
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           
 10534                           ;psect for function _i2c1_driver_open
 10535  1FF4                     _i2c1_driver_open:
 10536  1FF4                     l5455:	
 10537                           ;incstack = 0
 10538                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
 10539                           
 10540                           
 10541                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
 10542  1FF4  0023               	movlb	3	; select bank3
 10543  1FF5  1A90               	btfsc	16,5	;volatile
 10544  1FF6  2FF8               	goto	u5181
 10545  1FF7  2FF9               	goto	u5180
 10546  1FF8                     u5181:
 10547  1FF8  2FFF               	goto	l253
 10548  1FF9                     u5180:
 10549  1FF9                     l5457:
 10550                           
 10551                           ;i2c1_driver.c: 86: {;i2c1_driver.c: 87: SSP1STAT = 0x00;
 10552  1FF9  018F               	clrf	15	;volatile
 10553  1FFA                     l5459:
 10554                           
 10555                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
 10556  1FFA  3028               	movlw	40
 10557  1FFB  0090               	movwf	16	;volatile
 10558  1FFC                     l5461:
 10559                           
 10560                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
 10561  1FFC  0191               	clrf	17	;volatile
 10562                           
 10563                           ;i2c1_driver.c: 90: SSP1ADD = 0x3;
 10564  1FFD  3003               	movlw	3
 10565  1FFE  008D               	movwf	13	;volatile
 10566  1FFF                     l253:
 10567  1FFF  0008               	return
 10568  2000                     __end_of_i2c1_driver_open:
 10569                           
 10570                           	psect	text4
 10571  07FB                     __ptext4:	
 10572 ;; *************** function _getch *****************
 10573 ;; Defined at:
 10574 ;;		line 171 in file "mcc_generated_files/eusart.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;		None
 10577 ;; Auto vars:     Size  Location     Type
 10578 ;;		None
 10579 ;; Return value:  Size  Location     Type
 10580 ;;                  1    wreg      unsigned char 
 10581 ;; Registers used:
 10582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10583 ;; Tracked objects:
 10584 ;;		On entry : 0/0
 10585 ;;		On exit  : 0/0
 10586 ;;		Unchanged: 0/0
 10587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;Total ram usage:        0 bytes
 10593 ;; Hardware stack levels used:    1
 10594 ;; Hardware stack levels required when called:    5
 10595 ;; This function calls:
 10596 ;;		_EUSART_Read
 10597 ;; This function is called by:
 10598 ;;		_main
 10599 ;; This function uses a non-reentrant model
 10600 ;;
 10601                           
 10602                           
 10603                           ;psect for function _getch
 10604  07FB                     _getch:
 10605  07FB                     l5483:	
 10606                           ;incstack = 0
 10607                           ; Regs used in _getch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10608                           
 10609                           
 10610                           ;eusart.c: 173: return EUSART_Read();
 10611  07FB  3192  22E7  3187   	fcall	_EUSART_Read
 10612  07FE                     l839:
 10613  07FE  0008               	return
 10614  07FF                     __end_of_getch:
 10615                           
 10616                           	psect	text5
 10617  12E7                     __ptext5:	
 10618 ;; *************** function _EUSART_Read *****************
 10619 ;; Defined at:
 10620 ;;		line 128 in file "mcc_generated_files/eusart.c"
 10621 ;; Parameters:    Size  Location     Type
 10622 ;;		None
 10623 ;; Auto vars:     Size  Location     Type
 10624 ;;  readValue       1    1[BANK0 ] unsigned char 
 10625 ;; Return value:  Size  Location     Type
 10626 ;;                  1    wreg      unsigned char 
 10627 ;; Registers used:
 10628 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10629 ;; Tracked objects:
 10630 ;;		On entry : 0/0
 10631 ;;		On exit  : 0/0
 10632 ;;		Unchanged: 0/0
 10633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;Total ram usage:        2 bytes
 10639 ;; Hardware stack levels used:    1
 10640 ;; Hardware stack levels required when called:    4
 10641 ;; This function calls:
 10642 ;;		Nothing
 10643 ;; This function is called by:
 10644 ;;		_getch
 10645 ;; This function uses a non-reentrant model
 10646 ;;
 10647                           
 10648                           
 10649                           ;psect for function _EUSART_Read
 10650  12E7                     _EUSART_Read:
 10651  12E7                     l5283:	
 10652                           ;incstack = 0
 10653                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 10654                           
 10655  12E7                     l5285:	
 10656                           ;eusart.c: 132: while(0 == eusartRxCount)
 10657                           
 10658  12E7  0021               	movlb	1	; select bank1
 10659  12E8  083C               	movf	_eusartRxCount^(0+128),w	;volatile
 10660  12E9  1903               	btfsc	3,2
 10661  12EA  2AEC               	goto	u4881
 10662  12EB  2AED               	goto	u4880
 10663  12EC                     u4881:
 10664  12EC  2AE7               	goto	l5285
 10665  12ED                     u4880:
 10666  12ED                     l5287:
 10667                           
 10668                           ;eusart.c: 134: };eusart.c: 136: readValue = eusartRxBuffer[eusartRxTail++];
 10669  12ED  083D               	movf	_eusartRxTail^(0+128),w
 10670  12EE  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 10671  12EF  0086               	movwf	6
 10672  12F0  3002               	movlw	2	; select bank4/5
 10673  12F1  0087               	movwf	7
 10674  12F2  0801               	movf	1,w
 10675  12F3  0020               	movlb	0	; select bank0
 10676  12F4  00A0               	movwf	??_EUSART_Read
 10677  12F5  0820               	movf	??_EUSART_Read,w
 10678  12F6  00A1               	movwf	EUSART_Read@readValue
 10679  12F7                     l5289:
 10680  12F7  3001               	movlw	1
 10681  12F8  00A0               	movwf	??_EUSART_Read
 10682  12F9  0820               	movf	??_EUSART_Read,w
 10683  12FA  0021               	movlb	1	; select bank1
 10684  12FB  07BD               	addwf	_eusartRxTail^(0+128),f	;volatile
 10685  12FC                     l5291:
 10686                           
 10687                           ;eusart.c: 137: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 10688  12FC  3040               	movlw	64
 10689  12FD  023D               	subwf	_eusartRxTail^(0+128),w	;volatile
 10690  12FE  1C03               	skipc
 10691  12FF  2B01               	goto	u4891
 10692  1300  2B02               	goto	u4890
 10693  1301                     u4891:
 10694  1301  2B03               	goto	l5295
 10695  1302                     u4890:
 10696  1302                     l5293:
 10697                           
 10698                           ;eusart.c: 138: {;eusart.c: 139: eusartRxTail = 0;
 10699  1302  01BD               	clrf	_eusartRxTail^(0+128)	;volatile
 10700  1303                     l5295:
 10701                           
 10702                           ;eusart.c: 140: };eusart.c: 141: PIE3bits.RCIE = 0;
 10703  1303  002E               	movlb	14	; select bank14
 10704  1304  1299               	bcf	25,5	;volatile
 10705  1305                     l5297:
 10706                           
 10707                           ;eusart.c: 142: eusartRxCount--;
 10708  1305  3001               	movlw	1
 10709  1306  0021               	movlb	1	; select bank1
 10710  1307  02BC               	subwf	_eusartRxCount^(0+128),f	;volatile
 10711  1308                     l5299:
 10712                           
 10713                           ;eusart.c: 143: PIE3bits.RCIE = 1;
 10714  1308  002E               	movlb	14	; select bank14
 10715  1309  1699               	bsf	25,5	;volatile
 10716  130A                     l5301:
 10717                           
 10718                           ;eusart.c: 145: return readValue;
 10719  130A  0020               	movlb	0	; select bank0
 10720  130B  0821               	movf	EUSART_Read@readValue,w
 10721  130C                     l827:
 10722  130C  0008               	return
 10723  130D                     __end_of_EUSART_Read:
 10724                           
 10725                           	psect	text6
 10726  1430                     __ptext6:	
 10727 ;; *************** function _editTemp *****************
 10728 ;; Defined at:
 10729 ;;		line 762 in file "main.c"
 10730 ;; Parameters:    Size  Location     Type
 10731 ;;		None
 10732 ;; Auto vars:     Size  Location     Type
 10733 ;;		None
 10734 ;; Return value:  Size  Location     Type
 10735 ;;                  1    wreg      void 
 10736 ;; Registers used:
 10737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10738 ;; Tracked objects:
 10739 ;;		On entry : 0/0
 10740 ;;		On exit  : 0/0
 10741 ;;		Unchanged: 0/0
 10742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;Total ram usage:        1 bytes
 10748 ;; Hardware stack levels used:    1
 10749 ;; Hardware stack levels required when called:   10
 10750 ;; This function calls:
 10751 ;;		_checkFlags
 10752 ;;		_update_menuLCD
 10753 ;; This function is called by:
 10754 ;;		_main
 10755 ;; This function uses a non-reentrant model
 10756 ;;
 10757                           
 10758                           
 10759                           ;psect for function _editTemp
 10760  1430                     _editTemp:
 10761  1430                     l1418:	
 10762                           ;incstack = 0
 10763                           ; Regs used in _editTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10764                           ;main.c: 763: while(1){
 10765                           
 10766                           
 10767                           ;main.c: 764: if(PORTCbits.RC5 == 0){
 10768  1430  0020               	movlb	0	; select bank0
 10769  1431  1A8E               	btfsc	14,5	;volatile
 10770  1432  2C34               	goto	u5601
 10771  1433  2C35               	goto	u5600
 10772  1434                     u5601:
 10773  1434  2C57               	goto	l5665
 10774  1435                     u5600:
 10775  1435                     l5651:
 10776                           
 10777                           ;main.c: 765: if(editingTempAlarm == 0){
 10778  1435  0021               	movlb	1	; select bank1
 10779  1436  083A               	movf	_editingTempAlarm^(0+128),w
 10780  1437  1D03               	btfss	3,2
 10781  1438  2C3A               	goto	u5611
 10782  1439  2C3B               	goto	u5610
 10783  143A                     u5611:
 10784  143A  2C3E               	goto	l5655
 10785  143B                     u5610:
 10786  143B                     l5653:
 10787                           
 10788                           ;main.c: 766: editingTempAlarm = 1;
 10789  143B  01BA               	clrf	_editingTempAlarm^(0+128)
 10790  143C  0ABA               	incf	_editingTempAlarm^(0+128),f
 10791                           
 10792                           ;main.c: 767: } else {
 10793  143D  2C4B               	goto	l5661
 10794  143E                     l5655:
 10795                           
 10796                           ;main.c: 768: tempAlarm.alarmTemp++;
 10797  143E  3001               	movlw	1
 10798  143F  0020               	movlb	0	; select bank0
 10799  1440  00E3               	movwf	??_editTemp
 10800  1441  0863               	movf	??_editTemp,w
 10801  1442  0021               	movlb	1	; select bank1
 10802  1443  07A7               	addwf	_tempAlarm^(0+128),f
 10803  1444                     l5657:
 10804                           
 10805                           ;main.c: 769: if(tempAlarm.alarmTemp > 50){
 10806  1444  3033               	movlw	51
 10807  1445  0227               	subwf	_tempAlarm^(0+128),w
 10808  1446  1C03               	skipc
 10809  1447  2C49               	goto	u5621
 10810  1448  2C4A               	goto	u5620
 10811  1449                     u5621:
 10812  1449  2C4B               	goto	l5661
 10813  144A                     u5620:
 10814  144A                     l5659:
 10815                           
 10816                           ;main.c: 770: tempAlarm.alarmTemp = 0;
 10817  144A  01A7               	clrf	_tempAlarm^(0+128)
 10818  144B                     l5661:
 10819                           
 10820                           ;main.c: 771: };main.c: 772: };main.c: 773: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10821  144B  3021               	movlw	33
 10822  144C  0020               	movlb	0	; select bank0
 10823  144D  00E3               	movwf	??_editTemp
 10824  144E  3076               	movlw	118
 10825  144F                     u6507:
 10826  144F  0B89               	decfsz	9,f
 10827  1450  2C4F               	goto	u6507
 10828  1451  0BE3               	decfsz	??_editTemp,f
 10829  1452  2C4F               	goto	u6507
 10830  1453  0000               	nop
 10831  1454                     l5663:
 10832                           
 10833                           ;main.c: 774: update_menuLCD();
 10834  1454  3183  236C  3194   	fcall	_update_menuLCD
 10835  1457                     l5665:
 10836                           
 10837                           ;main.c: 775: };main.c: 776: checkFlags();
 10838  1457  3189  21B3  3194   	fcall	_checkFlags
 10839  145A                     l5667:
 10840                           
 10841                           ;main.c: 777: if(modeFlag != 2){
 10842  145A  3002               	movlw	2
 10843  145B  0020               	movlb	0	; select bank0
 10844  145C  0668               	xorwf	_modeFlag,w
 10845  145D  0469               	iorwf	_modeFlag+1,w
 10846  145E  1903               	btfsc	3,2
 10847  145F  2C61               	goto	u5631
 10848  1460  2C62               	goto	u5630
 10849  1461                     u5631:
 10850  1461  2C30               	goto	l1418
 10851  1462                     u5630:
 10852  1462                     l5669:
 10853                           
 10854                           ;main.c: 778: editingTempAlarm = 0;
 10855  1462  0021               	movlb	1	; select bank1
 10856  1463  01BA               	clrf	_editingTempAlarm^(0+128)
 10857  1464                     l1426:	
 10858                           ;main.c: 779: break;
 10859                           
 10860  1464  0008               	return
 10861  1465                     __end_of_editTemp:
 10862                           
 10863                           	psect	text7
 10864  13FB                     __ptext7:	
 10865 ;; *************** function _editLum *****************
 10866 ;; Defined at:
 10867 ;;		line 784 in file "main.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;		None
 10870 ;; Auto vars:     Size  Location     Type
 10871 ;;		None
 10872 ;; Return value:  Size  Location     Type
 10873 ;;                  1    wreg      void 
 10874 ;; Registers used:
 10875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10876 ;; Tracked objects:
 10877 ;;		On entry : 0/0
 10878 ;;		On exit  : 0/0
 10879 ;;		Unchanged: 0/0
 10880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;Total ram usage:        1 bytes
 10886 ;; Hardware stack levels used:    1
 10887 ;; Hardware stack levels required when called:   10
 10888 ;; This function calls:
 10889 ;;		_checkFlags
 10890 ;;		_update_menuLCD
 10891 ;; This function is called by:
 10892 ;;		_main
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           
 10897                           ;psect for function _editLum
 10898  13FB                     _editLum:
 10899  13FB                     l1429:	
 10900                           ;incstack = 0
 10901                           ; Regs used in _editLum: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10902                           ;main.c: 785: while(1){
 10903                           
 10904                           
 10905                           ;main.c: 786: if(PORTCbits.RC5 == 0){
 10906  13FB  0020               	movlb	0	; select bank0
 10907  13FC  1A8E               	btfsc	14,5	;volatile
 10908  13FD  2BFF               	goto	u5641
 10909  13FE  2C00               	goto	u5640
 10910  13FF                     u5641:
 10911  13FF  2C22               	goto	l5685
 10912  1400                     u5640:
 10913  1400                     l5671:
 10914                           
 10915                           ;main.c: 787: if(editingLumAlarm == 0){
 10916  1400  0021               	movlb	1	; select bank1
 10917  1401  0839               	movf	_editingLumAlarm^(0+128),w
 10918  1402  1D03               	btfss	3,2
 10919  1403  2C05               	goto	u5651
 10920  1404  2C06               	goto	u5650
 10921  1405                     u5651:
 10922  1405  2C09               	goto	l5675
 10923  1406                     u5650:
 10924  1406                     l5673:
 10925                           
 10926                           ;main.c: 788: editingLumAlarm = 1;
 10927  1406  01B9               	clrf	_editingLumAlarm^(0+128)
 10928  1407  0AB9               	incf	_editingLumAlarm^(0+128),f
 10929                           
 10930                           ;main.c: 789: } else {
 10931  1408  2C16               	goto	l5681
 10932  1409                     l5675:
 10933                           
 10934                           ;main.c: 790: lumAlarm.alarmLum++;
 10935  1409  3001               	movlw	1
 10936  140A  0020               	movlb	0	; select bank0
 10937  140B  00E3               	movwf	??_editLum
 10938  140C  0863               	movf	??_editLum,w
 10939  140D  0021               	movlb	1	; select bank1
 10940  140E  07A4               	addwf	_lumAlarm^(0+128),f
 10941  140F                     l5677:
 10942                           
 10943                           ;main.c: 791: if(lumAlarm.alarmLum > 7){
 10944  140F  3008               	movlw	8
 10945  1410  0224               	subwf	_lumAlarm^(0+128),w
 10946  1411  1C03               	skipc
 10947  1412  2C14               	goto	u5661
 10948  1413  2C15               	goto	u5660
 10949  1414                     u5661:
 10950  1414  2C16               	goto	l5681
 10951  1415                     u5660:
 10952  1415                     l5679:
 10953                           
 10954                           ;main.c: 792: lumAlarm.alarmLum = 0;
 10955  1415  01A4               	clrf	_lumAlarm^(0+128)
 10956  1416                     l5681:
 10957                           
 10958                           ;main.c: 793: };main.c: 794: };main.c: 795: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10959  1416  3021               	movlw	33
 10960  1417  0020               	movlb	0	; select bank0
 10961  1418  00E3               	movwf	??_editLum
 10962  1419  3076               	movlw	118
 10963  141A                     u6517:
 10964  141A  0B89               	decfsz	9,f
 10965  141B  2C1A               	goto	u6517
 10966  141C  0BE3               	decfsz	??_editLum,f
 10967  141D  2C1A               	goto	u6517
 10968  141E  0000               	nop
 10969  141F                     l5683:
 10970                           
 10971                           ;main.c: 796: update_menuLCD();
 10972  141F  3183  236C  3193   	fcall	_update_menuLCD
 10973  1422                     l5685:
 10974                           
 10975                           ;main.c: 797: };main.c: 798: checkFlags();
 10976  1422  3189  21B3  3193   	fcall	_checkFlags
 10977  1425                     l5687:
 10978                           
 10979                           ;main.c: 799: if(modeFlag != 3){
 10980  1425  3003               	movlw	3
 10981  1426  0020               	movlb	0	; select bank0
 10982  1427  0668               	xorwf	_modeFlag,w
 10983  1428  0469               	iorwf	_modeFlag+1,w
 10984  1429  1903               	btfsc	3,2
 10985  142A  2C2C               	goto	u5671
 10986  142B  2C2D               	goto	u5670
 10987  142C                     u5671:
 10988  142C  2BFB               	goto	l1429
 10989  142D                     u5670:
 10990  142D                     l5689:
 10991                           
 10992                           ;main.c: 800: editingLumAlarm = 0;
 10993  142D  0021               	movlb	1	; select bank1
 10994  142E  01B9               	clrf	_editingLumAlarm^(0+128)
 10995  142F                     l1437:	
 10996                           ;main.c: 801: break;
 10997                           
 10998  142F  0008               	return
 10999  1430                     __end_of_editLum:
 11000                           
 11001                           	psect	text8
 11002  171E                     __ptext8:	
 11003 ;; *************** function _editClock *****************
 11004 ;; Defined at:
 11005 ;;		line 724 in file "main.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;		None
 11008 ;; Auto vars:     Size  Location     Type
 11009 ;;		None
 11010 ;; Return value:  Size  Location     Type
 11011 ;;                  1    wreg      void 
 11012 ;; Registers used:
 11013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11014 ;; Tracked objects:
 11015 ;;		On entry : 0/0
 11016 ;;		On exit  : 0/0
 11017 ;;		Unchanged: 0/0
 11018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11023 ;;Total ram usage:        1 bytes
 11024 ;; Hardware stack levels used:    1
 11025 ;; Hardware stack levels required when called:   10
 11026 ;; This function calls:
 11027 ;;		_checkFlags
 11028 ;;		_update_menuLCD
 11029 ;; This function is called by:
 11030 ;;		_main
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           
 11035                           ;psect for function _editClock
 11036  171E                     _editClock:
 11037  171E                     l1397:	
 11038                           ;incstack = 0
 11039                           ; Regs used in _editClock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11040                           ;main.c: 726: while(1){
 11041                           
 11042                           
 11043                           ;main.c: 727: if(PORTCbits.RC5 == 0){
 11044  171E  0020               	movlb	0	; select bank0
 11045  171F  1A8E               	btfsc	14,5	;volatile
 11046  1720  2F22               	goto	u5511
 11047  1721  2F23               	goto	u5510
 11048  1722                     u5511:
 11049  1722  2F7E               	goto	l5645
 11050  1723                     u5510:
 11051  1723                     l5613:
 11052                           
 11053                           ;main.c: 728: if(editingClockAlarm == 0){
 11054  1723  087B               	movf	_editingClockAlarm,w
 11055  1724  047C               	iorwf	_editingClockAlarm+1,w
 11056  1725  1D03               	btfss	3,2
 11057  1726  2F28               	goto	u5521
 11058  1727  2F29               	goto	u5520
 11059  1728                     u5521:
 11060  1728  2F2E               	goto	l5617
 11061  1729                     u5520:
 11062  1729                     l5615:
 11063                           
 11064                           ;main.c: 729: editingClockAlarm = 1;
 11065  1729  3001               	movlw	1
 11066  172A  00FB               	movwf	_editingClockAlarm
 11067  172B  3000               	movlw	0
 11068  172C  00FC               	movwf	_editingClockAlarm+1
 11069                           
 11070                           ;main.c: 731: } else if(editingClockAlarm == 1){
 11071  172D  2F72               	goto	l5641
 11072  172E                     l5617:
 11073  172E  037B               	decf	_editingClockAlarm,w
 11074  172F  047C               	iorwf	_editingClockAlarm+1,w
 11075  1730  1D03               	btfss	3,2
 11076  1731  2F33               	goto	u5531
 11077  1732  2F34               	goto	u5530
 11078  1733                     u5531:
 11079  1733  2F44               	goto	l5625
 11080  1734                     u5530:
 11081  1734                     l5619:
 11082                           
 11083                           ;main.c: 732: if(clkAlarm.alarmVal.h >= 23){
 11084  1734  3017               	movlw	23
 11085  1735  0021               	movlb	1	; select bank1
 11086  1736  0220               	subwf	_clkAlarm^(0+128),w
 11087  1737  1C03               	skipc
 11088  1738  2F3A               	goto	u5541
 11089  1739  2F3B               	goto	u5540
 11090  173A                     u5541:
 11091  173A  2F3D               	goto	l5623
 11092  173B                     u5540:
 11093  173B                     l5621:
 11094                           
 11095                           ;main.c: 733: clkAlarm.alarmVal.h = 0;
 11096  173B  01A0               	clrf	_clkAlarm^(0+128)
 11097                           
 11098                           ;main.c: 734: } else{
 11099  173C  2F72               	goto	l5641
 11100  173D                     l5623:
 11101                           
 11102                           ;main.c: 735: clkAlarm.alarmVal.h++;
 11103  173D  3001               	movlw	1
 11104  173E  0020               	movlb	0	; select bank0
 11105  173F  00E3               	movwf	??_editClock
 11106  1740  0863               	movf	??_editClock,w
 11107  1741  0021               	movlb	1	; select bank1
 11108  1742  07A0               	addwf	_clkAlarm^(0+128),f
 11109  1743  2F72               	goto	l5641
 11110  1744                     l5625:
 11111  1744  3002               	movlw	2
 11112  1745  067B               	xorwf	_editingClockAlarm,w
 11113  1746  047C               	iorwf	_editingClockAlarm+1,w
 11114  1747  1D03               	btfss	3,2
 11115  1748  2F4A               	goto	u5551
 11116  1749  2F4B               	goto	u5550
 11117  174A                     u5551:
 11118  174A  2F5B               	goto	l5633
 11119  174B                     u5550:
 11120  174B                     l5627:
 11121                           
 11122                           ;main.c: 738: if(clkAlarm.alarmVal.m == 59){
 11123  174B  303B               	movlw	59
 11124  174C  0021               	movlb	1	; select bank1
 11125  174D  0621               	xorwf	(_clkAlarm^(0+128)+1),w
 11126  174E  1D03               	btfss	3,2
 11127  174F  2F51               	goto	u5561
 11128  1750  2F52               	goto	u5560
 11129  1751                     u5561:
 11130  1751  2F54               	goto	l5631
 11131  1752                     u5560:
 11132  1752                     l5629:
 11133                           
 11134                           ;main.c: 739: clkAlarm.alarmVal.m = 0;
 11135  1752  01A1               	clrf	(_clkAlarm^(0+128)+1)
 11136                           
 11137                           ;main.c: 740: } else{
 11138  1753  2F72               	goto	l5641
 11139  1754                     l5631:
 11140                           
 11141                           ;main.c: 741: clkAlarm.alarmVal.m++;
 11142  1754  3001               	movlw	1
 11143  1755  0020               	movlb	0	; select bank0
 11144  1756  00E3               	movwf	??_editClock
 11145  1757  0863               	movf	??_editClock,w
 11146  1758  0021               	movlb	1	; select bank1
 11147  1759  07A1               	addwf	(_clkAlarm^(0+128)+1),f
 11148  175A  2F72               	goto	l5641
 11149  175B                     l5633:
 11150  175B  3003               	movlw	3
 11151  175C  067B               	xorwf	_editingClockAlarm,w
 11152  175D  047C               	iorwf	_editingClockAlarm+1,w
 11153  175E  1D03               	btfss	3,2
 11154  175F  2F61               	goto	u5571
 11155  1760  2F62               	goto	u5570
 11156  1761                     u5571:
 11157  1761  2F72               	goto	l1404
 11158  1762                     u5570:
 11159  1762                     l5635:
 11160                           
 11161                           ;main.c: 744: if(clkAlarm.alarmVal.s == 59){
 11162  1762  303B               	movlw	59
 11163  1763  0021               	movlb	1	; select bank1
 11164  1764  0622               	xorwf	(_clkAlarm^(0+128)+2),w
 11165  1765  1D03               	btfss	3,2
 11166  1766  2F68               	goto	u5581
 11167  1767  2F69               	goto	u5580
 11168  1768                     u5581:
 11169  1768  2F6B               	goto	l5639
 11170  1769                     u5580:
 11171  1769                     l5637:
 11172                           
 11173                           ;main.c: 745: clkAlarm.alarmVal.s = 0;
 11174  1769  01A2               	clrf	(_clkAlarm^(0+128)+2)
 11175                           
 11176                           ;main.c: 746: } else{
 11177  176A  2F72               	goto	l5641
 11178  176B                     l5639:
 11179                           
 11180                           ;main.c: 747: clkAlarm.alarmVal.s++;
 11181  176B  3001               	movlw	1
 11182  176C  0020               	movlb	0	; select bank0
 11183  176D  00E3               	movwf	??_editClock
 11184  176E  0863               	movf	??_editClock,w
 11185  176F  0021               	movlb	1	; select bank1
 11186  1770  07A2               	addwf	(_clkAlarm^(0+128)+2),f
 11187  1771  2F72               	goto	l5641
 11188  1772                     l1404:
 11189  1772                     l5641:
 11190                           
 11191                           ;main.c: 748: };main.c: 749: };main.c: 750: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 11192  1772  3021               	movlw	33
 11193  1773  0020               	movlb	0	; select bank0
 11194  1774  00E3               	movwf	??_editClock
 11195  1775  3076               	movlw	118
 11196  1776                     u6527:
 11197  1776  0B89               	decfsz	9,f
 11198  1777  2F76               	goto	u6527
 11199  1778  0BE3               	decfsz	??_editClock,f
 11200  1779  2F76               	goto	u6527
 11201  177A  0000               	nop
 11202  177B                     l5643:
 11203                           
 11204                           ;main.c: 751: update_menuLCD();
 11205  177B  3183  236C  3197   	fcall	_update_menuLCD
 11206  177E                     l5645:
 11207                           
 11208                           ;main.c: 752: };main.c: 753: checkFlags();
 11209  177E  3189  21B3  3197   	fcall	_checkFlags
 11210  1781                     l5647:
 11211                           
 11212                           ;main.c: 754: if(modeFlag != 1){
 11213  1781  0020               	movlb	0	; select bank0
 11214  1782  0368               	decf	_modeFlag,w
 11215  1783  0469               	iorwf	_modeFlag+1,w
 11216  1784  1903               	btfsc	3,2
 11217  1785  2F87               	goto	u5591
 11218  1786  2F88               	goto	u5590
 11219  1787                     u5591:
 11220  1787  2F1E               	goto	l1397
 11221  1788                     u5590:
 11222  1788                     l5649:
 11223                           
 11224                           ;main.c: 755: editingClockAlarm = 0;
 11225  1788  01FB               	clrf	_editingClockAlarm
 11226  1789  01FC               	clrf	_editingClockAlarm+1
 11227  178A                     l1415:	
 11228                           ;main.c: 756: break;
 11229                           
 11230  178A  0008               	return
 11231  178B                     __end_of_editClock:
 11232                           
 11233                           	psect	text9
 11234  09B3                     __ptext9:	
 11235 ;; *************** function _checkFlags *****************
 11236 ;; Defined at:
 11237 ;;		line 673 in file "main.c"
 11238 ;; Parameters:    Size  Location     Type
 11239 ;;		None
 11240 ;; Auto vars:     Size  Location     Type
 11241 ;;  buff            7   60[BANK0 ] unsigned char [7]
 11242 ;; Return value:  Size  Location     Type
 11243 ;;                  1    wreg      void 
 11244 ;; Registers used:
 11245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11246 ;; Tracked objects:
 11247 ;;		On entry : 0/0
 11248 ;;		On exit  : 0/0
 11249 ;;		Unchanged: 0/0
 11250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11254 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11255 ;;Total ram usage:        8 bytes
 11256 ;; Hardware stack levels used:    1
 11257 ;; Hardware stack levels required when called:    9
 11258 ;; This function calls:
 11259 ;;		_PWM6_LoadDutyValue
 11260 ;;		_PWM_Output_D4_Enable
 11261 ;;		_S1button
 11262 ;;		_TMR2_StartTimer
 11263 ;;		_monitoring_TEMP_LUM
 11264 ;;		_sendMessage
 11265 ;;		_update_menuLCD
 11266 ;;		_wirteEEPROMinit
 11267 ;; This function is called by:
 11268 ;;		_editClock
 11269 ;;		_editTemp
 11270 ;;		_editLum
 11271 ;;		_toggleAlarms
 11272 ;;		_main
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           
 11277                           ;psect for function _checkFlags
 11278  09B3                     _checkFlags:
 11279  09B3                     l5367:	
 11280                           ;incstack = 0
 11281                           ; Regs used in _checkFlags: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11282                           
 11283                           
 11284                           ;main.c: 674: if(writeEEPROM_flag){
 11285  09B3  0021               	movlb	1	; select bank1
 11286  09B4  0834               	movf	_writeEEPROM_flag^(0+128),w
 11287  09B5  1903               	btfsc	3,2
 11288  09B6  29B8               	goto	u5081
 11289  09B7  29B9               	goto	u5080
 11290  09B8                     u5081:
 11291  09B8  29BE               	goto	l5373
 11292  09B9                     u5080:
 11293  09B9                     l5369:
 11294                           
 11295                           ;main.c: 675: wirteEEPROMinit();
 11296  09B9  3187  273F  3189   	fcall	_wirteEEPROMinit
 11297  09BC                     l5371:
 11298                           
 11299                           ;main.c: 676: writeEEPROM_flag = 0;
 11300  09BC  0021               	movlb	1	; select bank1
 11301  09BD  01B4               	clrf	_writeEEPROM_flag^(0+128)
 11302  09BE                     l5373:
 11303                           
 11304                           ;main.c: 677: };main.c: 678: if(flagS1pushed){
 11305  09BE  0837               	movf	_flagS1pushed^(0+128),w
 11306  09BF  1903               	btfsc	3,2
 11307  09C0  29C2               	goto	u5091
 11308  09C1  29C3               	goto	u5090
 11309  09C2                     u5091:
 11310  09C2  29CD               	goto	l5383
 11311  09C3                     u5090:
 11312  09C3                     l5375:
 11313                           
 11314                           ;main.c: 679: S1button();
 11315  09C3  3196  2665  3189   	fcall	_S1button
 11316  09C6                     l5377:
 11317                           
 11318                           ;main.c: 680: flagS1pushed=0;
 11319  09C6  0021               	movlb	1	; select bank1
 11320  09C7  01B7               	clrf	_flagS1pushed^(0+128)
 11321  09C8                     l5379:
 11322                           
 11323                           ;main.c: 681: update_menuLCD();
 11324  09C8  3183  236C  3189   	fcall	_update_menuLCD
 11325  09CB                     l5381:
 11326                           
 11327                           ;main.c: 682: updateLCD=0;
 11328  09CB  0021               	movlb	1	; select bank1
 11329  09CC  01E8               	clrf	_updateLCD^(0+128)
 11330  09CD                     l5383:
 11331                           
 11332                           ;main.c: 683: };main.c: 684: if(monitor_TEMP_LUM){
 11333  09CD  0836               	movf	_monitor_TEMP_LUM^(0+128),w
 11334  09CE  1903               	btfsc	3,2
 11335  09CF  29D1               	goto	u5101
 11336  09D0  29D2               	goto	u5100
 11337  09D1                     u5101:
 11338  09D1  29D7               	goto	l5389
 11339  09D2                     u5100:
 11340  09D2                     l5385:
 11341                           
 11342                           ;main.c: 685: monitoring_TEMP_LUM();
 11343  09D2  318E  267A  3189   	fcall	_monitoring_TEMP_LUM
 11344  09D5                     l5387:
 11345                           
 11346                           ;main.c: 686: monitor_TEMP_LUM = 0;
 11347  09D5  0021               	movlb	1	; select bank1
 11348  09D6  01B6               	clrf	_monitor_TEMP_LUM^(0+128)
 11349  09D7                     l5389:
 11350                           
 11351                           ;main.c: 687: };main.c: 688: if(updateLCD){
 11352  09D7  0868               	movf	_updateLCD^(0+128),w
 11353  09D8  1903               	btfsc	3,2
 11354  09D9  29DB               	goto	u5111
 11355  09DA  29DC               	goto	u5110
 11356  09DB                     u5111:
 11357  09DB  29E1               	goto	l5395
 11358  09DC                     u5110:
 11359  09DC                     l5391:
 11360                           
 11361                           ;main.c: 689: update_menuLCD();
 11362  09DC  3183  236C  3189   	fcall	_update_menuLCD
 11363  09DF                     l5393:
 11364                           
 11365                           ;main.c: 690: updateLCD=0;
 11366  09DF  0021               	movlb	1	; select bank1
 11367  09E0  01E8               	clrf	_updateLCD^(0+128)
 11368  09E1                     l5395:
 11369                           
 11370                           ;main.c: 691: };main.c: 692: if(bufHalfFull && !sentMessageBufHalfFull){
 11371  09E1  0832               	movf	_bufHalfFull^(0+128),w
 11372  09E2  1903               	btfsc	3,2
 11373  09E3  29E5               	goto	u5121
 11374  09E4  29E6               	goto	u5120
 11375  09E5                     u5121:
 11376  09E5  2A16               	goto	l5405
 11377  09E6                     u5120:
 11378  09E6                     l5397:
 11379  09E6  0830               	movf	_sentMessageBufHalfFull^(0+128),w
 11380  09E7  1D03               	btfss	3,2
 11381  09E8  29EA               	goto	u5131
 11382  09E9  29EB               	goto	u5130
 11383  09EA                     u5131:
 11384  09EA  2A16               	goto	l5405
 11385  09EB                     u5130:
 11386  09EB                     l5399:
 11387                           
 11388                           ;main.c: 694: uint8_t buff[7];;main.c: 695: buff[0] = (uint8_t)0xFD;
 11389  09EB  30FD               	movlw	253
 11390  09EC  0020               	movlb	0	; select bank0
 11391  09ED  00DB               	movwf	??_checkFlags
 11392  09EE  085B               	movf	??_checkFlags,w
 11393  09EF  00DC               	movwf	checkFlags@buff
 11394                           
 11395                           ;main.c: 696: buff[1] = (uint8_t)0XCD;
 11396  09F0  30CD               	movlw	205
 11397  09F1  00DB               	movwf	??_checkFlags
 11398  09F2  085B               	movf	??_checkFlags,w
 11399  09F3  00DD               	movwf	checkFlags@buff+1
 11400                           
 11401                           ;main.c: 697: buff[2] = NREG;
 11402  09F4  087D               	movf	_NREG,w
 11403  09F5  00DB               	movwf	??_checkFlags
 11404  09F6  085B               	movf	??_checkFlags,w
 11405  09F7  00DE               	movwf	checkFlags@buff+2
 11406                           
 11407                           ;main.c: 698: buff[3] = nr;
 11408  09F8  086A               	movf	_nr,w
 11409  09F9  00DB               	movwf	??_checkFlags
 11410  09FA  085B               	movf	??_checkFlags,w
 11411  09FB  00DF               	movwf	checkFlags@buff+3
 11412                           
 11413                           ;main.c: 699: buff[4] = iread;
 11414  09FC  086C               	movf	_iread,w
 11415  09FD  00DB               	movwf	??_checkFlags
 11416  09FE  085B               	movf	??_checkFlags,w
 11417  09FF  00E0               	movwf	checkFlags@buff+4
 11418                           
 11419                           ;main.c: 700: buff[5] = iwrite;
 11420  0A00  086B               	movf	_iwrite,w
 11421  0A01  00DB               	movwf	??_checkFlags
 11422  0A02  085B               	movf	??_checkFlags,w
 11423  0A03  00E1               	movwf	checkFlags@buff+5
 11424                           
 11425                           ;main.c: 701: buff[6] = (uint8_t)0xFE;
 11426  0A04  30FE               	movlw	254
 11427  0A05  00DB               	movwf	??_checkFlags
 11428  0A06  085B               	movf	??_checkFlags,w
 11429  0A07  00E2               	movwf	checkFlags@buff+6
 11430  0A08                     l5401:
 11431                           
 11432                           ;main.c: 702: sendMessage(7,buff);
 11433  0A08  3007               	movlw	7
 11434  0A09  00A3               	movwf	sendMessage@num
 11435  0A0A  3000               	movlw	0
 11436  0A0B  00A4               	movwf	sendMessage@num+1
 11437  0A0C  305C               	movlw	(low (checkFlags@buff| 0))& (0+255)
 11438  0A0D  00DB               	movwf	??_checkFlags
 11439  0A0E  085B               	movf	??_checkFlags,w
 11440  0A0F  00A5               	movwf	sendMessage@buffer
 11441  0A10  3192  2256  3189   	fcall	_sendMessage
 11442  0A13                     l5403:
 11443                           
 11444                           ;main.c: 704: sentMessageBufHalfFull = 1;
 11445  0A13  0021               	movlb	1	; select bank1
 11446  0A14  01B0               	clrf	_sentMessageBufHalfFull^(0+128)
 11447  0A15  0AB0               	incf	_sentMessageBufHalfFull^(0+128),f
 11448  0A16                     l5405:
 11449                           
 11450                           ;main.c: 705: };main.c: 706: if(!bufHalfFull){
 11451  0A16  0832               	movf	_bufHalfFull^(0+128),w
 11452  0A17  1D03               	btfss	3,2
 11453  0A18  2A1A               	goto	u5141
 11454  0A19  2A1B               	goto	u5140
 11455  0A1A                     u5141:
 11456  0A1A  2A1C               	goto	l5409
 11457  0A1B                     u5140:
 11458  0A1B                     l5407:
 11459                           
 11460                           ;main.c: 707: sentMessageBufHalfFull = 0;
 11461  0A1B  01B0               	clrf	_sentMessageBufHalfFull^(0+128)
 11462  0A1C                     l5409:
 11463                           
 11464                           ;main.c: 708: };main.c: 709: if(PWM_on){
 11465  0A1C  0838               	movf	_PWM_on^(0+128),w
 11466  0A1D  1903               	btfsc	3,2
 11467  0A1E  2A20               	goto	u5151
 11468  0A1F  2A21               	goto	u5150
 11469  0A20                     u5151:
 11470  0A20  2A53               	goto	l1394
 11471  0A21                     u5150:
 11472  0A21                     l5411:
 11473                           
 11474                           ;main.c: 710: if(PWM6EN==0){
 11475  0A21  0027               	movlb	7	; select bank7
 11476  0A22  1B8E               	btfsc	14,7	;volatile
 11477  0A23  2A25               	goto	u5161
 11478  0A24  2A26               	goto	u5160
 11479  0A25                     u5161:
 11480  0A25  2A2C               	goto	l5415
 11481  0A26                     u5160:
 11482  0A26                     l5413:
 11483                           
 11484                           ;main.c: 711: TMR2_StartTimer();
 11485  0A26  319F  2784  3189   	fcall	_TMR2_StartTimer
 11486                           
 11487                           ;main.c: 712: PWM_Output_D4_Enable();
 11488  0A29  319F  2778  3189   	fcall	_PWM_Output_D4_Enable
 11489  0A2C                     l5415:
 11490                           
 11491                           ;main.c: 713: };main.c: 714: if(dimingLed <= 1023){
 11492  0A2C  0021               	movlb	1	; select bank1
 11493  0A2D  082B               	movf	(_dimingLed+1)^(0+128),w
 11494  0A2E  3A80               	xorlw	128
 11495  0A2F  0020               	movlb	0	; select bank0
 11496  0A30  00DB               	movwf	??_checkFlags
 11497  0A31  3084               	movlw	132
 11498  0A32  025B               	subwf	??_checkFlags,w
 11499  0A33  1D03               	skipz
 11500  0A34  2A38               	goto	u5175
 11501  0A35  3000               	movlw	0
 11502  0A36  0021               	movlb	1	; select bank1
 11503  0A37  022A               	subwf	_dimingLed^(0+128),w
 11504  0A38                     u5175:
 11505  0A38  1803               	skipnc
 11506  0A39  2A3B               	goto	u5171
 11507  0A3A  2A3C               	goto	u5170
 11508  0A3B                     u5171:
 11509  0A3B  2A42               	goto	l5419
 11510  0A3C                     u5170:
 11511  0A3C                     l5417:
 11512                           
 11513                           ;main.c: 715: dimingLed += 1;
 11514  0A3C  3001               	movlw	1
 11515  0A3D  0021               	movlb	1	; select bank1
 11516  0A3E  07AA               	addwf	_dimingLed^(0+128),f
 11517  0A3F  3000               	movlw	0
 11518  0A40  3DAB               	addwfc	(_dimingLed+1)^(0+128),f
 11519                           
 11520                           ;main.c: 716: } else{
 11521  0A41  2A45               	goto	l5421
 11522  0A42                     l5419:
 11523                           
 11524                           ;main.c: 717: dimingLed = 0;
 11525  0A42  0021               	movlb	1	; select bank1
 11526  0A43  01AA               	clrf	_dimingLed^(0+128)
 11527  0A44  01AB               	clrf	(_dimingLed+1)^(0+128)
 11528  0A45                     l5421:
 11529                           
 11530                           ;main.c: 718: };main.c: 719: PWM6_LoadDutyValue(dimingLed);
 11531  0A45  082B               	movf	(_dimingLed+1)^(0+128),w
 11532  0A46  0020               	movlb	0	; select bank0
 11533  0A47  00A1               	movwf	PWM6_LoadDutyValue@dutyValue+1
 11534  0A48  0021               	movlb	1	; select bank1
 11535  0A49  082A               	movf	_dimingLed^(0+128),w
 11536  0A4A  0020               	movlb	0	; select bank0
 11537  0A4B  00A0               	movwf	PWM6_LoadDutyValue@dutyValue
 11538  0A4C  3190  20D0  3189   	fcall	_PWM6_LoadDutyValue
 11539  0A4F                     l5423:
 11540                           
 11541                           ;main.c: 720: _delay((unsigned long)((1)*(1000000/4000.0)));
 11542  0A4F  3053               	movlw	83
 11543  0A50                     u6537:
 11544  0A50  0B89               	decfsz	9,f
 11545  0A51  2A50               	goto	u6537
 11546  0A52  0000               	nop
 11547  0A53                     l1394:
 11548  0A53  0008               	return
 11549  0A54                     __end_of_checkFlags:
 11550                           
 11551                           	psect	text10
 11552  073F                     __ptext10:	
 11553 ;; *************** function _wirteEEPROMinit *****************
 11554 ;; Defined at:
 11555 ;;		line 403 in file "main.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;		None
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;		None
 11560 ;; Return value:  Size  Location     Type
 11561 ;;                  1    wreg      void 
 11562 ;; Registers used:
 11563 ;;		wreg, status,2, status,0, pclath, cstack
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;Total ram usage:        1 bytes
 11574 ;; Hardware stack levels used:    1
 11575 ;; Hardware stack levels required when called:    5
 11576 ;; This function calls:
 11577 ;;		_DATAEE_WriteByte
 11578 ;; This function is called by:
 11579 ;;		_checkFlags
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           
 11584                           ;psect for function _wirteEEPROMinit
 11585  073F                     _wirteEEPROMinit:
 11586  073F                     l4825:	
 11587                           ;incstack = 0
 11588                           ; Regs used in _wirteEEPROMinit: [wreg+status,2+status,0+pclath+cstack]
 11589                           
 11590                           
 11591                           ;main.c: 405: DATAEE_WriteByte( 0x7000 + (1), NREG);
 11592  073F  3001               	movlw	1
 11593  0740  0020               	movlb	0	; select bank0
 11594  0741  00A6               	movwf	DATAEE_WriteByte@bAdd
 11595  0742  3070               	movlw	112
 11596  0743  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11597  0744  087D               	movf	_NREG,w
 11598  0745  00AA               	movwf	??_wirteEEPROMinit
 11599  0746  082A               	movf	??_wirteEEPROMinit,w
 11600  0747  00A8               	movwf	DATAEE_WriteByte@bData
 11601  0748  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11602                           
 11603                           ;main.c: 406: DATAEE_WriteByte( 0x7000 + (2), PMON);
 11604  074B  3002               	movlw	2
 11605  074C  0020               	movlb	0	; select bank0
 11606  074D  00A6               	movwf	DATAEE_WriteByte@bAdd
 11607  074E  3070               	movlw	112
 11608  074F  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11609  0750  0021               	movlb	1	; select bank1
 11610  0751  086A               	movf	_PMON^(0+128),w
 11611  0752  0020               	movlb	0	; select bank0
 11612  0753  00AA               	movwf	??_wirteEEPROMinit
 11613  0754  082A               	movf	??_wirteEEPROMinit,w
 11614  0755  00A8               	movwf	DATAEE_WriteByte@bData
 11615  0756  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11616                           
 11617                           ;main.c: 407: DATAEE_WriteByte( 0x7000 + (3), TALA);
 11618  0759  3003               	movlw	3
 11619  075A  0020               	movlb	0	; select bank0
 11620  075B  00A6               	movwf	DATAEE_WriteByte@bAdd
 11621  075C  3070               	movlw	112
 11622  075D  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11623  075E  0021               	movlb	1	; select bank1
 11624  075F  0869               	movf	_TALA^(0+128),w
 11625  0760  0020               	movlb	0	; select bank0
 11626  0761  00AA               	movwf	??_wirteEEPROMinit
 11627  0762  082A               	movf	??_wirteEEPROMinit,w
 11628  0763  00A8               	movwf	DATAEE_WriteByte@bData
 11629  0764  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11630                           
 11631                           ;main.c: 408: DATAEE_WriteByte( 0x7000 + (4), clkAlarm.alarmVal.h);
 11632  0767  3004               	movlw	4
 11633  0768  0020               	movlb	0	; select bank0
 11634  0769  00A6               	movwf	DATAEE_WriteByte@bAdd
 11635  076A  3070               	movlw	112
 11636  076B  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11637  076C  0021               	movlb	1	; select bank1
 11638  076D  0820               	movf	_clkAlarm^(0+128),w
 11639  076E  0020               	movlb	0	; select bank0
 11640  076F  00AA               	movwf	??_wirteEEPROMinit
 11641  0770  082A               	movf	??_wirteEEPROMinit,w
 11642  0771  00A8               	movwf	DATAEE_WriteByte@bData
 11643  0772  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11644                           
 11645                           ;main.c: 409: DATAEE_WriteByte( 0x7000 + (5), clkAlarm.alarmVal.m);
 11646  0775  3005               	movlw	5
 11647  0776  0020               	movlb	0	; select bank0
 11648  0777  00A6               	movwf	DATAEE_WriteByte@bAdd
 11649  0778  3070               	movlw	112
 11650  0779  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11651  077A  0021               	movlb	1	; select bank1
 11652  077B  0821               	movf	(_clkAlarm^(0+128)+1),w
 11653  077C  0020               	movlb	0	; select bank0
 11654  077D  00AA               	movwf	??_wirteEEPROMinit
 11655  077E  082A               	movf	??_wirteEEPROMinit,w
 11656  077F  00A8               	movwf	DATAEE_WriteByte@bData
 11657  0780  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11658                           
 11659                           ;main.c: 410: DATAEE_WriteByte( 0x7000 + (6), clkAlarm.alarmVal.s);
 11660  0783  3006               	movlw	6
 11661  0784  0020               	movlb	0	; select bank0
 11662  0785  00A6               	movwf	DATAEE_WriteByte@bAdd
 11663  0786  3070               	movlw	112
 11664  0787  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11665  0788  0021               	movlb	1	; select bank1
 11666  0789  0822               	movf	(_clkAlarm^(0+128)+2),w
 11667  078A  0020               	movlb	0	; select bank0
 11668  078B  00AA               	movwf	??_wirteEEPROMinit
 11669  078C  082A               	movf	??_wirteEEPROMinit,w
 11670  078D  00A8               	movwf	DATAEE_WriteByte@bData
 11671  078E  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11672                           
 11673                           ;main.c: 411: DATAEE_WriteByte( 0x7000 + (7), tempAlarm.alarmTemp);
 11674  0791  3007               	movlw	7
 11675  0792  0020               	movlb	0	; select bank0
 11676  0793  00A6               	movwf	DATAEE_WriteByte@bAdd
 11677  0794  3070               	movlw	112
 11678  0795  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11679  0796  0021               	movlb	1	; select bank1
 11680  0797  0827               	movf	_tempAlarm^(0+128),w
 11681  0798  0020               	movlb	0	; select bank0
 11682  0799  00AA               	movwf	??_wirteEEPROMinit
 11683  079A  082A               	movf	??_wirteEEPROMinit,w
 11684  079B  00A8               	movwf	DATAEE_WriteByte@bData
 11685  079C  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11686                           
 11687                           ;main.c: 412: DATAEE_WriteByte( 0x7000 + (8), lumAlarm.alarmLum);
 11688  079F  3008               	movlw	8
 11689  07A0  0020               	movlb	0	; select bank0
 11690  07A1  00A6               	movwf	DATAEE_WriteByte@bAdd
 11691  07A2  3070               	movlw	112
 11692  07A3  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11693  07A4  0021               	movlb	1	; select bank1
 11694  07A5  0824               	movf	_lumAlarm^(0+128),w
 11695  07A6  0020               	movlb	0	; select bank0
 11696  07A7  00AA               	movwf	??_wirteEEPROMinit
 11697  07A8  082A               	movf	??_wirteEEPROMinit,w
 11698  07A9  00A8               	movwf	DATAEE_WriteByte@bData
 11699  07AA  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11700                           
 11701                           ;main.c: 413: DATAEE_WriteByte( 0x7000 + (9), ALAF);
 11702  07AD  3009               	movlw	9
 11703  07AE  0020               	movlb	0	; select bank0
 11704  07AF  00A6               	movwf	DATAEE_WriteByte@bAdd
 11705  07B0  3070               	movlw	112
 11706  07B1  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11707  07B2  086F               	movf	_ALAF,w
 11708  07B3  00AA               	movwf	??_wirteEEPROMinit
 11709  07B4  082A               	movf	??_wirteEEPROMinit,w
 11710  07B5  00A8               	movwf	DATAEE_WriteByte@bData
 11711  07B6  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11712                           
 11713                           ;main.c: 414: DATAEE_WriteByte( 0x7000 + (10), t.h);
 11714  07B9  300A               	movlw	10
 11715  07BA  0020               	movlb	0	; select bank0
 11716  07BB  00A6               	movwf	DATAEE_WriteByte@bAdd
 11717  07BC  3070               	movlw	112
 11718  07BD  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11719  07BE  0865               	movf	_t,w
 11720  07BF  00AA               	movwf	??_wirteEEPROMinit
 11721  07C0  082A               	movf	??_wirteEEPROMinit,w
 11722  07C1  00A8               	movwf	DATAEE_WriteByte@bData
 11723  07C2  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11724                           
 11725                           ;main.c: 415: DATAEE_WriteByte( 0x7000 + (11), t.m);
 11726  07C5  300B               	movlw	11
 11727  07C6  0020               	movlb	0	; select bank0
 11728  07C7  00A6               	movwf	DATAEE_WriteByte@bAdd
 11729  07C8  3070               	movlw	112
 11730  07C9  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11731  07CA  0866               	movf	_t+1,w
 11732  07CB  00AA               	movwf	??_wirteEEPROMinit
 11733  07CC  082A               	movf	??_wirteEEPROMinit,w
 11734  07CD  00A8               	movwf	DATAEE_WriteByte@bData
 11735  07CE  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11736                           
 11737                           ;main.c: 416: DATAEE_WriteByte( 0x7000 + (12), iwrite);
 11738  07D1  300C               	movlw	12
 11739  07D2  0020               	movlb	0	; select bank0
 11740  07D3  00A6               	movwf	DATAEE_WriteByte@bAdd
 11741  07D4  3070               	movlw	112
 11742  07D5  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11743  07D6  086B               	movf	_iwrite,w
 11744  07D7  00AA               	movwf	??_wirteEEPROMinit
 11745  07D8  082A               	movf	??_wirteEEPROMinit,w
 11746  07D9  00A8               	movwf	DATAEE_WriteByte@bData
 11747  07DA  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11748                           
 11749                           ;main.c: 417: DATAEE_WriteByte( 0x7000 + (13), NREG + PMON + TALA + clkAlarm.alarmVal.h 
      +                          + clkAlarm.alarmVal.m + clkAlarm.alarmVal.s + tempAlarm.alarmTemp + lumAlarm.alarmLum + 
      +                          ALAF + t.h + t.m + iwrite);
 11750  07DD  300D               	movlw	13
 11751  07DE  0020               	movlb	0	; select bank0
 11752  07DF  00A6               	movwf	DATAEE_WriteByte@bAdd
 11753  07E0  3070               	movlw	112
 11754  07E1  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 11755  07E2  0021               	movlb	1	; select bank1
 11756  07E3  0821               	movf	(_clkAlarm^(0+128)+1),w
 11757  07E4  0722               	addwf	(_clkAlarm^(0+128)+2),w
 11758  07E5  0020               	movlb	0	; select bank0
 11759  07E6  0766               	addwf	_t+1,w
 11760  07E7  0021               	movlb	1	; select bank1
 11761  07E8  0720               	addwf	_clkAlarm^(0+128),w
 11762  07E9  0727               	addwf	_tempAlarm^(0+128),w
 11763  07EA  0724               	addwf	_lumAlarm^(0+128),w
 11764  07EB  0020               	movlb	0	; select bank0
 11765  07EC  0765               	addwf	_t,w
 11766  07ED  077D               	addwf	_NREG,w
 11767  07EE  0021               	movlb	1	; select bank1
 11768  07EF  076A               	addwf	_PMON^(0+128),w
 11769  07F0  0769               	addwf	_TALA^(0+128),w
 11770  07F1  0020               	movlb	0	; select bank0
 11771  07F2  076F               	addwf	_ALAF,w
 11772  07F3  076B               	addwf	_iwrite,w
 11773  07F4  00AA               	movwf	??_wirteEEPROMinit
 11774  07F5  082A               	movf	??_wirteEEPROMinit,w
 11775  07F6  00A8               	movwf	DATAEE_WriteByte@bData
 11776  07F7  3192  2279  3187   	fcall	_DATAEE_WriteByte
 11777  07FA                     l1282:
 11778  07FA  0008               	return
 11779  07FB                     __end_of_wirteEEPROMinit:
 11780                           
 11781                           	psect	text11
 11782  036C                     __ptext11:	
 11783 ;; *************** function _update_menuLCD *****************
 11784 ;; Defined at:
 11785 ;;		line 423 in file "main.c"
 11786 ;; Parameters:    Size  Location     Type
 11787 ;;		None
 11788 ;; Auto vars:     Size  Location     Type
 11789 ;;  diff            3   56[BANK0 ] struct Time
 11790 ;;  str             8   41[BANK0 ] unsigned char [8]
 11791 ;;  tt              4   49[BANK0 ] unsigned char [4]
 11792 ;;  l               3   53[BANK0 ] unsigned char [3]
 11793 ;; Return value:  Size  Location     Type
 11794 ;;                  1    wreg      void 
 11795 ;; Registers used:
 11796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11797 ;; Tracked objects:
 11798 ;;		On entry : 0/0
 11799 ;;		On exit  : 0/0
 11800 ;;		Unchanged: 0/0
 11801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;Total ram usage:       24 bytes
 11807 ;; Hardware stack levels used:    1
 11808 ;; Hardware stack levels required when called:    8
 11809 ;; This function calls:
 11810 ;;		_LCDchar
 11811 ;;		_LCDcmd
 11812 ;;		_LCDstr
 11813 ;;		_PWM6_LoadDutyValue
 11814 ;;		_PWM_Output_D4_Disable
 11815 ;;		_TMR2_StopTimer
 11816 ;;		_differenceBetweenTimePeriod
 11817 ;;		_sprintf
 11818 ;; This function is called by:
 11819 ;;		_checkFlags
 11820 ;;		_editClock
 11821 ;;		_editTemp
 11822 ;;		_editLum
 11823 ;;		_toggleAlarms
 11824 ;; This function uses a non-reentrant model
 11825 ;;
 11826                           
 11827                           
 11828                           ;psect for function _update_menuLCD
 11829  036C                     _update_menuLCD:
 11830  036C                     l4827:	
 11831                           ;incstack = 0
 11832                           ; Regs used in _update_menuLCD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11833                           
 11834                           
 11835                           ;main.c: 425: if(bufHalfFull){
 11836  036C  0021               	movlb	1	; select bank1
 11837  036D  0832               	movf	_bufHalfFull^(0+128),w
 11838  036E  1903               	btfsc	3,2
 11839  036F  2B71               	goto	u4241
 11840  0370  2B72               	goto	u4240
 11841  0371                     u4241:
 11842  0371  2B7B               	goto	l4831
 11843  0372                     u4240:
 11844  0372                     l4829:
 11845                           
 11846                           ;main.c: 426: LCDcmd(0xc8);
 11847  0372  30C8               	movlw	200
 11848  0373  319F  27AD  3183   	fcall	_LCDcmd
 11849                           
 11850                           ;main.c: 427: LCDchar('M');
 11851  0376  304D               	movlw	77
 11852  0377  319F  27EB  3183   	fcall	_LCDchar
 11853                           
 11854                           ;main.c: 428: } else{
 11855  037A  2B83               	goto	l4833
 11856  037B                     l4831:
 11857                           
 11858                           ;main.c: 429: LCDcmd(0xc8);
 11859  037B  30C8               	movlw	200
 11860  037C  319F  27AD  3183   	fcall	_LCDcmd
 11861                           
 11862                           ;main.c: 430: LCDchar(' ');
 11863  037F  3020               	movlw	32
 11864  0380  319F  27EB  3183   	fcall	_LCDchar
 11865  0383                     l4833:
 11866                           
 11867                           ;main.c: 431: };main.c: 433: char str[8];;main.c: 434: if(editingClockAlarm){
 11868  0383  087B               	movf	_editingClockAlarm,w
 11869  0384  047C               	iorwf	_editingClockAlarm+1,w
 11870  0385  1903               	btfsc	3,2
 11871  0386  2B88               	goto	u4251
 11872  0387  2B89               	goto	u4250
 11873  0388                     u4251:
 11874  0388  2BAE               	goto	l4837
 11875  0389                     u4250:
 11876  0389                     l4835:
 11877                           
 11878                           ;main.c: 435: sprintf(str, "%02d:%02d:%02d", clkAlarm.alarmVal.h,clkAlarm.alarmVal.m,clk
      +                          Alarm.alarmVal.s);
 11879  0389  3027               	movlw	low (STR_1| (0+32768))
 11880  038A  0020               	movlb	0	; select bank0
 11881  038B  00AE               	movwf	sprintf@f
 11882  038C  3098               	movlw	high (STR_1| (0+32768))
 11883  038D  00AF               	movwf	sprintf@f+1
 11884  038E  0021               	movlb	1	; select bank1
 11885  038F  0820               	movf	_clkAlarm^(0+128),w
 11886  0390  0020               	movlb	0	; select bank0
 11887  0391  00C3               	movwf	??_update_menuLCD
 11888  0392  01C4               	clrf	??_update_menuLCD+1
 11889  0393  0843               	movf	??_update_menuLCD,w
 11890  0394  00B0               	movwf	?_sprintf+2
 11891  0395  0844               	movf	??_update_menuLCD+1,w
 11892  0396  00B1               	movwf	?_sprintf+3
 11893  0397  0021               	movlb	1	; select bank1
 11894  0398  0821               	movf	(_clkAlarm^(0+128)+1),w
 11895  0399  0020               	movlb	0	; select bank0
 11896  039A  00C5               	movwf	??_update_menuLCD+2
 11897  039B  01C6               	clrf	??_update_menuLCD+3
 11898  039C  0845               	movf	??_update_menuLCD+2,w
 11899  039D  00B2               	movwf	?_sprintf+4
 11900  039E  0846               	movf	??_update_menuLCD+3,w
 11901  039F  00B3               	movwf	?_sprintf+5
 11902  03A0  0021               	movlb	1	; select bank1
 11903  03A1  0822               	movf	(_clkAlarm^(0+128)+2),w
 11904  03A2  0020               	movlb	0	; select bank0
 11905  03A3  00C7               	movwf	??_update_menuLCD+4
 11906  03A4  01C8               	clrf	??_update_menuLCD+5
 11907  03A5  0847               	movf	??_update_menuLCD+4,w
 11908  03A6  00B4               	movwf	?_sprintf+6
 11909  03A7  0848               	movf	??_update_menuLCD+5,w
 11910  03A8  00B5               	movwf	?_sprintf+7
 11911  03A9  3049               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11912  03AA  3185  25A1  3183   	fcall	_sprintf
 11913                           
 11914                           ;main.c: 436: } else {
 11915  03AD  2BCC               	goto	l4839
 11916  03AE                     l4837:
 11917                           
 11918                           ;main.c: 437: sprintf(str, "%02d:%02d:%02d", t.h,t.m,t.s);
 11919  03AE  3027               	movlw	low (STR_1| (0+32768))
 11920  03AF  0020               	movlb	0	; select bank0
 11921  03B0  00AE               	movwf	sprintf@f
 11922  03B1  3098               	movlw	high (STR_1| (0+32768))
 11923  03B2  00AF               	movwf	sprintf@f+1
 11924  03B3  0865               	movf	_t,w
 11925  03B4  00C3               	movwf	??_update_menuLCD
 11926  03B5  01C4               	clrf	??_update_menuLCD+1
 11927  03B6  0843               	movf	??_update_menuLCD,w
 11928  03B7  00B0               	movwf	?_sprintf+2
 11929  03B8  0844               	movf	??_update_menuLCD+1,w
 11930  03B9  00B1               	movwf	?_sprintf+3
 11931  03BA  0866               	movf	_t+1,w
 11932  03BB  00C5               	movwf	??_update_menuLCD+2
 11933  03BC  01C6               	clrf	??_update_menuLCD+3
 11934  03BD  0845               	movf	??_update_menuLCD+2,w
 11935  03BE  00B2               	movwf	?_sprintf+4
 11936  03BF  0846               	movf	??_update_menuLCD+3,w
 11937  03C0  00B3               	movwf	?_sprintf+5
 11938  03C1  0867               	movf	_t+2,w
 11939  03C2  00C7               	movwf	??_update_menuLCD+4
 11940  03C3  01C8               	clrf	??_update_menuLCD+5
 11941  03C4  0847               	movf	??_update_menuLCD+4,w
 11942  03C5  00B4               	movwf	?_sprintf+6
 11943  03C6  0848               	movf	??_update_menuLCD+5,w
 11944  03C7  00B5               	movwf	?_sprintf+7
 11945  03C8  3049               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11946  03C9  3185  25A1  3183   	fcall	_sprintf
 11947  03CC                     l4839:
 11948                           
 11949                           ;main.c: 438: };main.c: 439: LCDcmd(0x80);
 11950  03CC  3080               	movlw	128
 11951  03CD  319F  27AD  3183   	fcall	_LCDcmd
 11952  03D0                     l4841:
 11953                           
 11954                           ;main.c: 440: LCDstr(str);
 11955  03D0  3049               	movlw	low update_menuLCD@str
 11956  03D1  0020               	movlb	0	; select bank0
 11957  03D2  00A9               	movwf	LCDstr@p
 11958  03D3  3000               	movlw	high update_menuLCD@str
 11959  03D4  00AA               	movwf	LCDstr@p+1
 11960  03D5  3191  211F  3183   	fcall	_LCDstr
 11961  03D8                     l4843:
 11962                           
 11963                           ;main.c: 443: if(clkAlarm.trigger == 1){
 11964  03D8  0021               	movlb	1	; select bank1
 11965  03D9  0323               	decf	(_clkAlarm^(0+128)+3),w
 11966  03DA  1D03               	btfss	3,2
 11967  03DB  2BDD               	goto	u4261
 11968  03DC  2BDE               	goto	u4260
 11969  03DD                     u4261:
 11970  03DD  2BE7               	goto	l4847
 11971  03DE                     u4260:
 11972  03DE                     l4845:
 11973                           
 11974                           ;main.c: 444: LCDcmd(0x8B);
 11975  03DE  308B               	movlw	139
 11976  03DF  319F  27AD  3183   	fcall	_LCDcmd
 11977                           
 11978                           ;main.c: 445: LCDchar('C');
 11979  03E2  3043               	movlw	67
 11980  03E3  319F  27EB  3183   	fcall	_LCDchar
 11981                           
 11982                           ;main.c: 446: } else if(modeFlag == 0){
 11983  03E6  2BF6               	goto	l4851
 11984  03E7                     l4847:
 11985  03E7  0020               	movlb	0	; select bank0
 11986  03E8  0868               	movf	_modeFlag,w
 11987  03E9  0469               	iorwf	_modeFlag+1,w
 11988  03EA  1D03               	btfss	3,2
 11989  03EB  2BED               	goto	u4271
 11990  03EC  2BEE               	goto	u4270
 11991  03ED                     u4271:
 11992  03ED  2BF6               	goto	l4851
 11993  03EE                     u4270:
 11994  03EE                     l4849:
 11995                           
 11996                           ;main.c: 447: LCDcmd(0x8B);
 11997  03EE  308B               	movlw	139
 11998  03EF  319F  27AD  3183   	fcall	_LCDcmd
 11999                           
 12000                           ;main.c: 448: LCDchar(' ');
 12001  03F2  3020               	movlw	32
 12002  03F3  319F  27EB  3183   	fcall	_LCDchar
 12003  03F6                     l4851:
 12004                           
 12005                           ;main.c: 449: };main.c: 452: if(tempAlarm.trigger == 1){
 12006  03F6  0021               	movlb	1	; select bank1
 12007  03F7  0328               	decf	(_tempAlarm^(0+128)+1),w
 12008  03F8  1D03               	btfss	3,2
 12009  03F9  2BFB               	goto	u4281
 12010  03FA  2BFC               	goto	u4280
 12011  03FB                     u4281:
 12012  03FB  2C05               	goto	l4855
 12013  03FC                     u4280:
 12014  03FC                     l4853:
 12015                           
 12016                           ;main.c: 453: LCDcmd(0x8C);
 12017  03FC  308C               	movlw	140
 12018  03FD  319F  27AD  3183   	fcall	_LCDcmd
 12019                           
 12020                           ;main.c: 454: LCDchar('T');
 12021  0400  3054               	movlw	84
 12022  0401  319F  27EB  3183   	fcall	_LCDchar
 12023                           
 12024                           ;main.c: 455: } else if(modeFlag == 0){
 12025  0404  2C14               	goto	l4859
 12026  0405                     l4855:
 12027  0405  0020               	movlb	0	; select bank0
 12028  0406  0868               	movf	_modeFlag,w
 12029  0407  0469               	iorwf	_modeFlag+1,w
 12030  0408  1D03               	btfss	3,2
 12031  0409  2C0B               	goto	u4291
 12032  040A  2C0C               	goto	u4290
 12033  040B                     u4291:
 12034  040B  2C14               	goto	l4859
 12035  040C                     u4290:
 12036  040C                     l4857:
 12037                           
 12038                           ;main.c: 456: LCDcmd(0x8C);
 12039  040C  308C               	movlw	140
 12040  040D  319F  27AD  3183   	fcall	_LCDcmd
 12041                           
 12042                           ;main.c: 457: LCDchar(' ');
 12043  0410  3020               	movlw	32
 12044  0411  319F  27EB  3183   	fcall	_LCDchar
 12045  0414                     l4859:
 12046                           
 12047                           ;main.c: 458: };main.c: 461: if(lumAlarm.trigger == 1){
 12048  0414  0021               	movlb	1	; select bank1
 12049  0415  0325               	decf	(_lumAlarm^(0+128)+1),w
 12050  0416  1D03               	btfss	3,2
 12051  0417  2C19               	goto	u4301
 12052  0418  2C1A               	goto	u4300
 12053  0419                     u4301:
 12054  0419  2C23               	goto	l4863
 12055  041A                     u4300:
 12056  041A                     l4861:
 12057                           
 12058                           ;main.c: 462: LCDcmd(0x8D);
 12059  041A  308D               	movlw	141
 12060  041B  319F  27AD  3183   	fcall	_LCDcmd
 12061                           
 12062                           ;main.c: 463: LCDchar('L');
 12063  041E  304C               	movlw	76
 12064  041F  319F  27EB  3183   	fcall	_LCDchar
 12065                           
 12066                           ;main.c: 464: } else if(modeFlag == 0){
 12067  0422  2C32               	goto	l1296
 12068  0423                     l4863:
 12069  0423  0020               	movlb	0	; select bank0
 12070  0424  0868               	movf	_modeFlag,w
 12071  0425  0469               	iorwf	_modeFlag+1,w
 12072  0426  1D03               	btfss	3,2
 12073  0427  2C29               	goto	u4311
 12074  0428  2C2A               	goto	u4310
 12075  0429                     u4311:
 12076  0429  2C32               	goto	l1296
 12077  042A                     u4310:
 12078  042A                     l4865:
 12079                           
 12080                           ;main.c: 465: LCDcmd(0x8D);
 12081  042A  308D               	movlw	141
 12082  042B  319F  27AD  3183   	fcall	_LCDcmd
 12083                           
 12084                           ;main.c: 466: LCDchar(' ');
 12085  042E  3020               	movlw	32
 12086  042F  319F  27EB  3183   	fcall	_LCDchar
 12087  0432                     l1296:
 12088                           
 12089                           ;main.c: 467: };main.c: 469: LCDcmd(0x8F);
 12090  0432  308F               	movlw	143
 12091  0433  319F  27AD  3183   	fcall	_LCDcmd
 12092                           
 12093                           ;main.c: 470: LCDchar(ALAF);
 12094  0436  0020               	movlb	0	; select bank0
 12095  0437  086F               	movf	_ALAF,w
 12096  0438  319F  27EB  3183   	fcall	_LCDchar
 12097  043B                     l4867:
 12098                           
 12099                           ;main.c: 473: if(ALAF == 'A'){
 12100  043B  3041               	movlw	65
 12101  043C  0020               	movlb	0	; select bank0
 12102  043D  066F               	xorwf	_ALAF,w
 12103  043E  1D03               	btfss	3,2
 12104  043F  2C41               	goto	u4321
 12105  0440  2C42               	goto	u4320
 12106  0441                     u4321:
 12107  0441  2CB4               	goto	l4901
 12108  0442                     u4320:
 12109  0442                     l4869:
 12110                           
 12111                           ;main.c: 474: if(clkAlarm.trigger || tempAlarm.trigger || lumAlarm.trigger){
 12112  0442  0021               	movlb	1	; select bank1
 12113  0443  0823               	movf	(_clkAlarm^(0+128)+3),w
 12114  0444  1D03               	btfss	3,2
 12115  0445  2C47               	goto	u4331
 12116  0446  2C48               	goto	u4330
 12117  0447                     u4331:
 12118  0447  2C52               	goto	l4875
 12119  0448                     u4330:
 12120  0448                     l4871:
 12121  0448  0828               	movf	(_tempAlarm^(0+128)+1),w
 12122  0449  1D03               	btfss	3,2
 12123  044A  2C4C               	goto	u4341
 12124  044B  2C4D               	goto	u4340
 12125  044C                     u4341:
 12126  044C  2C52               	goto	l4875
 12127  044D                     u4340:
 12128  044D                     l4873:
 12129  044D  0825               	movf	(_lumAlarm^(0+128)+1),w
 12130  044E  1903               	btfsc	3,2
 12131  044F  2C51               	goto	u4351
 12132  0450  2C52               	goto	u4350
 12133  0451                     u4351:
 12134  0451  2CAE               	goto	l1299
 12135  0452                     u4350:
 12136  0452                     l4875:
 12137                           
 12138                           ;main.c: 475: if(alarmPWMStart.h == 0xff){
 12139  0452  0A61               	incf	_alarmPWMStart^(0+128),w
 12140  0453  1D03               	btfss	3,2
 12141  0454  2C56               	goto	u4361
 12142  0455  2C57               	goto	u4360
 12143  0456                     u4361:
 12144  0456  2C69               	goto	l1302
 12145  0457                     u4360:
 12146  0457                     l4877:
 12147                           
 12148                           ;main.c: 476: alarmPWMStart.h = t.h;
 12149  0457  0020               	movlb	0	; select bank0
 12150  0458  0865               	movf	_t,w
 12151  0459  00C3               	movwf	??_update_menuLCD
 12152  045A  0843               	movf	??_update_menuLCD,w
 12153  045B  0021               	movlb	1	; select bank1
 12154  045C  00E1               	movwf	_alarmPWMStart^(0+128)
 12155                           
 12156                           ;main.c: 477: alarmPWMStart.m = t.m;
 12157  045D  0020               	movlb	0	; select bank0
 12158  045E  0866               	movf	_t+1,w
 12159  045F  00C3               	movwf	??_update_menuLCD
 12160  0460  0843               	movf	??_update_menuLCD,w
 12161  0461  0021               	movlb	1	; select bank1
 12162  0462  00E2               	movwf	(_alarmPWMStart^(0+128)+1)
 12163                           
 12164                           ;main.c: 478: alarmPWMStart.s = t.s;
 12165  0463  0020               	movlb	0	; select bank0
 12166  0464  0867               	movf	_t+2,w
 12167  0465  00C3               	movwf	??_update_menuLCD
 12168  0466  0843               	movf	??_update_menuLCD,w
 12169  0467  0021               	movlb	1	; select bank1
 12170  0468  00E3               	movwf	(_alarmPWMStart^(0+128)+2)
 12171  0469                     l1302:
 12172                           
 12173                           ;main.c: 479: };main.c: 480: struct Time diff = {0,0,0};
 12174  0469  0022               	movlb	2	; select bank2
 12175  046A  0834               	movf	update_menuLCD@F12904^(0+256),w
 12176  046B  0020               	movlb	0	; select bank0
 12177  046C  00D8               	movwf	update_menuLCD@diff
 12178  046D  0022               	movlb	2	; select bank2
 12179  046E  0835               	movf	(update_menuLCD@F12904+1)^(0+256),w
 12180  046F  0020               	movlb	0	; select bank0
 12181  0470  00D9               	movwf	update_menuLCD@diff+1
 12182  0471  0022               	movlb	2	; select bank2
 12183  0472  0836               	movf	(update_menuLCD@F12904+2)^(0+256),w
 12184  0473  0020               	movlb	0	; select bank0
 12185  0474  00DA               	movwf	update_menuLCD@diff+2
 12186  0475                     l4879:
 12187                           
 12188                           ;main.c: 481: differenceBetweenTimePeriod( t, alarmPWMStart, &diff);
 12189  0475  0865               	movf	_t,w
 12190  0476  00A0               	movwf	differenceBetweenTimePeriod@start
 12191  0477  0866               	movf	_t+1,w
 12192  0478  00A1               	movwf	differenceBetweenTimePeriod@start+1
 12193  0479  0867               	movf	_t+2,w
 12194  047A  00A2               	movwf	differenceBetweenTimePeriod@start+2
 12195  047B  0021               	movlb	1	; select bank1
 12196  047C  0861               	movf	_alarmPWMStart^(0+128),w
 12197  047D  0020               	movlb	0	; select bank0
 12198  047E  00A3               	movwf	differenceBetweenTimePeriod@stop
 12199  047F  0021               	movlb	1	; select bank1
 12200  0480  0862               	movf	(_alarmPWMStart+1)^(0+128),w
 12201  0481  0020               	movlb	0	; select bank0
 12202  0482  00A4               	movwf	differenceBetweenTimePeriod@stop+1
 12203  0483  0021               	movlb	1	; select bank1
 12204  0484  0863               	movf	(_alarmPWMStart+2)^(0+128),w
 12205  0485  0020               	movlb	0	; select bank0
 12206  0486  00A5               	movwf	differenceBetweenTimePeriod@stop+2
 12207  0487  3058               	movlw	(low (update_menuLCD@diff| 0))& (0+255)
 12208  0488  00C3               	movwf	??_update_menuLCD
 12209  0489  0843               	movf	??_update_menuLCD,w
 12210  048A  00A6               	movwf	differenceBetweenTimePeriod@diff
 12211  048B  3193  2391  3183   	fcall	_differenceBetweenTimePeriod
 12212  048E                     l4881:
 12213                           
 12214                           ;main.c: 483: if(diff.s <= TALA){
 12215  048E  0020               	movlb	0	; select bank0
 12216  048F  085A               	movf	update_menuLCD@diff+2,w
 12217  0490  0021               	movlb	1	; select bank1
 12218  0491  0269               	subwf	_TALA^(0+128),w
 12219  0492  1C03               	skipc
 12220  0493  2C95               	goto	u4371
 12221  0494  2C96               	goto	u4370
 12222  0495                     u4371:
 12223  0495  2C99               	goto	l1305
 12224  0496                     u4370:
 12225  0496                     l4883:
 12226                           
 12227                           ;main.c: 484: PWM_on = 1;
 12228  0496  01B8               	clrf	_PWM_on^(0+128)
 12229  0497  0AB8               	incf	_PWM_on^(0+128),f
 12230                           
 12231                           ;main.c: 495: } else if(PWM6EN==1){
 12232  0498  2CB4               	goto	l4901
 12233  0499                     l1305:
 12234  0499  0027               	movlb	7	; select bank7
 12235  049A  1F8E               	btfss	14,7	;volatile
 12236  049B  2C9D               	goto	u4381
 12237  049C  2C9E               	goto	u4380
 12238  049D                     u4381:
 12239  049D  2CB4               	goto	l1308
 12240  049E                     u4380:
 12241  049E                     l4885:
 12242                           
 12243                           ;main.c: 496: PWM_on = 0;
 12244  049E  0021               	movlb	1	; select bank1
 12245  049F  01B8               	clrf	_PWM_on^(0+128)
 12246  04A0                     l4887:
 12247                           
 12248                           ;main.c: 497: PWM6_LoadDutyValue(0);
 12249  04A0  3000               	movlw	0
 12250  04A1  0020               	movlb	0	; select bank0
 12251  04A2  00A0               	movwf	PWM6_LoadDutyValue@dutyValue
 12252  04A3  00A1               	movwf	PWM6_LoadDutyValue@dutyValue+1
 12253  04A4  3190  20D0  3183   	fcall	_PWM6_LoadDutyValue
 12254  04A7                     l4889:
 12255                           
 12256                           ;main.c: 498: TMR2_StopTimer();
 12257  04A7  319F  2788  3183   	fcall	_TMR2_StopTimer
 12258  04AA                     l4891:
 12259                           
 12260                           ;main.c: 499: PWM_Output_D4_Disable();
 12261  04AA  319F  277E  3183   	fcall	_PWM_Output_D4_Disable
 12262  04AD  2CB4               	goto	l4901
 12263  04AE                     l1299:
 12264  04AE  0027               	movlb	7	; select bank7
 12265  04AF  1F8E               	btfss	14,7	;volatile
 12266  04B0  2CB2               	goto	u4391
 12267  04B1  2CB3               	goto	u4390
 12268  04B2                     u4391:
 12269  04B2  2CB4               	goto	l4901
 12270  04B3                     u4390:
 12271  04B3  2C9E               	goto	l4885
 12272  04B4                     l1308:
 12273  04B4                     l4901:
 12274                           
 12275                           ;main.c: 506: };main.c: 507: };main.c: 509: LCDcmd(0xc0);
 12276  04B4  30C0               	movlw	192
 12277  04B5  319F  27AD  3183   	fcall	_LCDcmd
 12278  04B8                     l4903:
 12279                           
 12280                           ;main.c: 510: char tt[4];;main.c: 511: if(editingTempAlarm){
 12281  04B8  0021               	movlb	1	; select bank1
 12282  04B9  083A               	movf	_editingTempAlarm^(0+128),w
 12283  04BA  1903               	btfsc	3,2
 12284  04BB  2CBD               	goto	u4401
 12285  04BC  2CBE               	goto	u4400
 12286  04BD                     u4401:
 12287  04BD  2CD1               	goto	l4907
 12288  04BE                     u4400:
 12289  04BE                     l4905:
 12290                           
 12291                           ;main.c: 512: sprintf(tt, "%02d C", tempAlarm.alarmTemp);
 12292  04BE  3040               	movlw	low (STR_3| (0+32768))
 12293  04BF  0020               	movlb	0	; select bank0
 12294  04C0  00AE               	movwf	sprintf@f
 12295  04C1  3098               	movlw	high (STR_3| (0+32768))
 12296  04C2  00AF               	movwf	sprintf@f+1
 12297  04C3  0021               	movlb	1	; select bank1
 12298  04C4  0827               	movf	_tempAlarm^(0+128),w
 12299  04C5  0020               	movlb	0	; select bank0
 12300  04C6  00C3               	movwf	??_update_menuLCD
 12301  04C7  01C4               	clrf	??_update_menuLCD+1
 12302  04C8  0843               	movf	??_update_menuLCD,w
 12303  04C9  00B0               	movwf	?_sprintf+2
 12304  04CA  0844               	movf	??_update_menuLCD+1,w
 12305  04CB  00B1               	movwf	?_sprintf+3
 12306  04CC  3051               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12307  04CD  3185  25A1  3183   	fcall	_sprintf
 12308                           
 12309                           ;main.c: 513: } else{
 12310  04D0  2CE1               	goto	l4909
 12311  04D1                     l4907:
 12312                           
 12313                           ;main.c: 514: sprintf(tt, "%02d C", temp);
 12314  04D1  3040               	movlw	low (STR_3| (0+32768))
 12315  04D2  0020               	movlb	0	; select bank0
 12316  04D3  00AE               	movwf	sprintf@f
 12317  04D4  3098               	movlw	high (STR_3| (0+32768))
 12318  04D5  00AF               	movwf	sprintf@f+1
 12319  04D6  086E               	movf	_temp,w
 12320  04D7  00C3               	movwf	??_update_menuLCD
 12321  04D8  01C4               	clrf	??_update_menuLCD+1
 12322  04D9  0843               	movf	??_update_menuLCD,w
 12323  04DA  00B0               	movwf	?_sprintf+2
 12324  04DB  0844               	movf	??_update_menuLCD+1,w
 12325  04DC  00B1               	movwf	?_sprintf+3
 12326  04DD  3051               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12327  04DE  3185  25A1  3183   	fcall	_sprintf
 12328  04E1                     l4909:
 12329                           
 12330                           ;main.c: 515: };main.c: 516: LCDstr(tt);
 12331  04E1  3051               	movlw	low update_menuLCD@tt
 12332  04E2  0020               	movlb	0	; select bank0
 12333  04E3  00A9               	movwf	LCDstr@p
 12334  04E4  3000               	movlw	high update_menuLCD@tt
 12335  04E5  00AA               	movwf	LCDstr@p+1
 12336  04E6  3191  211F  3183   	fcall	_LCDstr
 12337  04E9                     l4911:
 12338                           
 12339                           ;main.c: 518: LCDcmd(0xcd);
 12340  04E9  30CD               	movlw	205
 12341  04EA  319F  27AD  3183   	fcall	_LCDcmd
 12342  04ED                     l4913:
 12343                           
 12344                           ;main.c: 519: char l[3];;main.c: 521: if(editingLumAlarm){
 12345  04ED  0021               	movlb	1	; select bank1
 12346  04EE  0839               	movf	_editingLumAlarm^(0+128),w
 12347  04EF  1903               	btfsc	3,2
 12348  04F0  2CF2               	goto	u4411
 12349  04F1  2CF3               	goto	u4410
 12350  04F2                     u4411:
 12351  04F2  2D06               	goto	l4917
 12352  04F3                     u4410:
 12353  04F3                     l4915:
 12354                           
 12355                           ;main.c: 522: sprintf(l, "L %d", lumAlarm.alarmLum);
 12356  04F3  3047               	movlw	low (STR_5| (0+32768))
 12357  04F4  0020               	movlb	0	; select bank0
 12358  04F5  00AE               	movwf	sprintf@f
 12359  04F6  3098               	movlw	high (STR_5| (0+32768))
 12360  04F7  00AF               	movwf	sprintf@f+1
 12361  04F8  0021               	movlb	1	; select bank1
 12362  04F9  0824               	movf	_lumAlarm^(0+128),w
 12363  04FA  0020               	movlb	0	; select bank0
 12364  04FB  00C3               	movwf	??_update_menuLCD
 12365  04FC  01C4               	clrf	??_update_menuLCD+1
 12366  04FD  0843               	movf	??_update_menuLCD,w
 12367  04FE  00B0               	movwf	?_sprintf+2
 12368  04FF  0844               	movf	??_update_menuLCD+1,w
 12369  0500  00B1               	movwf	?_sprintf+3
 12370  0501  3055               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12371  0502  3185  25A1  3183   	fcall	_sprintf
 12372                           
 12373                           ;main.c: 523: } else{
 12374  0505  2D16               	goto	l4919
 12375  0506                     l4917:
 12376                           
 12377                           ;main.c: 524: sprintf(l, "L %d", lumLevel);
 12378  0506  3047               	movlw	low (STR_5| (0+32768))
 12379  0507  0020               	movlb	0	; select bank0
 12380  0508  00AE               	movwf	sprintf@f
 12381  0509  3098               	movlw	high (STR_5| (0+32768))
 12382  050A  00AF               	movwf	sprintf@f+1
 12383  050B  086D               	movf	_lumLevel,w
 12384  050C  00C3               	movwf	??_update_menuLCD
 12385  050D  01C4               	clrf	??_update_menuLCD+1
 12386  050E  0843               	movf	??_update_menuLCD,w
 12387  050F  00B0               	movwf	?_sprintf+2
 12388  0510  0844               	movf	??_update_menuLCD+1,w
 12389  0511  00B1               	movwf	?_sprintf+3
 12390  0512  3055               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12391  0513  3185  25A1  3183   	fcall	_sprintf
 12392  0516                     l4919:
 12393                           
 12394                           ;main.c: 525: };main.c: 526: LCDstr(l);
 12395  0516  3055               	movlw	low update_menuLCD@l
 12396  0517  0020               	movlb	0	; select bank0
 12397  0518  00A9               	movwf	LCDstr@p
 12398  0519  3000               	movlw	high update_menuLCD@l
 12399  051A  00AA               	movwf	LCDstr@p+1
 12400  051B  3191  211F  3183   	fcall	_LCDstr
 12401  051E                     l4921:
 12402                           
 12403                           ;main.c: 528: if(modeFlag != 0){
 12404  051E  0020               	movlb	0	; select bank0
 12405  051F  0868               	movf	_modeFlag,w
 12406  0520  0469               	iorwf	_modeFlag+1,w
 12407  0521  1903               	btfsc	3,2
 12408  0522  2D24               	goto	u4421
 12409  0523  2D25               	goto	u4420
 12410  0524                     u4421:
 12411  0524  2D31               	goto	l4927
 12412  0525                     u4420:
 12413  0525                     l4923:
 12414                           
 12415                           ;main.c: 529: LCDcmd(0x8B);
 12416  0525  308B               	movlw	139
 12417  0526  319F  27AD  3183   	fcall	_LCDcmd
 12418  0529                     l4925:
 12419                           
 12420                           ;main.c: 530: LCDstr((unsigned char *)"CTL");
 12421  0529  304C               	movlw	low (STR_7| (0+32768))
 12422  052A  0020               	movlb	0	; select bank0
 12423  052B  00A9               	movwf	LCDstr@p
 12424  052C  3098               	movlw	high (STR_7| (0+32768))
 12425  052D  00AA               	movwf	LCDstr@p+1
 12426  052E  3191  211F  3183   	fcall	_LCDstr
 12427  0531                     l4927:
 12428                           
 12429                           ;main.c: 531: };main.c: 533: if(modeFlag == 1){
 12430  0531  0020               	movlb	0	; select bank0
 12431  0532  0368               	decf	_modeFlag,w
 12432  0533  0469               	iorwf	_modeFlag+1,w
 12433  0534  1D03               	btfss	3,2
 12434  0535  2D37               	goto	u4431
 12435  0536  2D38               	goto	u4430
 12436  0537                     u4431:
 12437  0537  2D67               	goto	l4945
 12438  0538                     u4430:
 12439  0538                     l4929:
 12440                           
 12441                           ;main.c: 534: if(editingClockAlarm == 0){
 12442  0538  087B               	movf	_editingClockAlarm,w
 12443  0539  047C               	iorwf	_editingClockAlarm+1,w
 12444  053A  1D03               	btfss	3,2
 12445  053B  2D3D               	goto	u4441
 12446  053C  2D3E               	goto	u4440
 12447  053D                     u4441:
 12448  053D  2D43               	goto	l4933
 12449  053E                     u4440:
 12450  053E                     l4931:
 12451                           
 12452                           ;main.c: 535: LCDcmd(0x8B);
 12453  053E  308B               	movlw	139
 12454  053F  319F  27AD  3183   	fcall	_LCDcmd
 12455                           
 12456                           ;main.c: 536: } else{
 12457  0542  2DA0               	goto	l1333
 12458  0543                     l4933:
 12459                           
 12460                           ;main.c: 537: if(editingClockAlarm == 1){
 12461  0543  037B               	decf	_editingClockAlarm,w
 12462  0544  047C               	iorwf	_editingClockAlarm+1,w
 12463  0545  1D03               	btfss	3,2
 12464  0546  2D48               	goto	u4451
 12465  0547  2D49               	goto	u4450
 12466  0548                     u4451:
 12467  0548  2D4E               	goto	l4937
 12468  0549                     u4450:
 12469  0549                     l4935:
 12470                           
 12471                           ;main.c: 538: LCDcmd(0x81);
 12472  0549  3081               	movlw	129
 12473  054A  319F  27AD  3183   	fcall	_LCDcmd
 12474                           
 12475                           ;main.c: 539: } else if(editingClockAlarm == 2){
 12476  054D  2DA0               	goto	l1333
 12477  054E                     l4937:
 12478  054E  3002               	movlw	2
 12479  054F  067B               	xorwf	_editingClockAlarm,w
 12480  0550  047C               	iorwf	_editingClockAlarm+1,w
 12481  0551  1D03               	btfss	3,2
 12482  0552  2D54               	goto	u4461
 12483  0553  2D55               	goto	u4460
 12484  0554                     u4461:
 12485  0554  2D5A               	goto	l4941
 12486  0555                     u4460:
 12487  0555                     l4939:
 12488                           
 12489                           ;main.c: 540: LCDcmd(0x84);
 12490  0555  3084               	movlw	132
 12491  0556  319F  27AD  3183   	fcall	_LCDcmd
 12492                           
 12493                           ;main.c: 541: } else if(editingClockAlarm == 3){
 12494  0559  2DA0               	goto	l1333
 12495  055A                     l4941:
 12496  055A  3003               	movlw	3
 12497  055B  067B               	xorwf	_editingClockAlarm,w
 12498  055C  047C               	iorwf	_editingClockAlarm+1,w
 12499  055D  1D03               	btfss	3,2
 12500  055E  2D60               	goto	u4471
 12501  055F  2D61               	goto	u4470
 12502  0560                     u4471:
 12503  0560  2D66               	goto	l1317
 12504  0561                     u4470:
 12505  0561                     l4943:
 12506                           
 12507                           ;main.c: 542: LCDcmd(0x87);
 12508  0561  3087               	movlw	135
 12509  0562  319F  27AD  3183   	fcall	_LCDcmd
 12510  0565  2DA0               	goto	l1333
 12511  0566                     l1317:
 12512                           
 12513                           ;main.c: 543: };main.c: 544: };main.c: 545: } else if(modeFlag == 2){
 12514  0566  2DA0               	goto	l1333
 12515  0567                     l4945:
 12516  0567  3002               	movlw	2
 12517  0568  0668               	xorwf	_modeFlag,w
 12518  0569  0469               	iorwf	_modeFlag+1,w
 12519  056A  1D03               	btfss	3,2
 12520  056B  2D6D               	goto	u4481
 12521  056C  2D6E               	goto	u4480
 12522  056D                     u4481:
 12523  056D  2D7E               	goto	l4953
 12524  056E                     u4480:
 12525  056E                     l4947:
 12526                           
 12527                           ;main.c: 547: if(editingTempAlarm == 0){
 12528  056E  0021               	movlb	1	; select bank1
 12529  056F  083A               	movf	_editingTempAlarm^(0+128),w
 12530  0570  1D03               	btfss	3,2
 12531  0571  2D73               	goto	u4491
 12532  0572  2D74               	goto	u4490
 12533  0573                     u4491:
 12534  0573  2D79               	goto	l4951
 12535  0574                     u4490:
 12536  0574                     l4949:
 12537                           
 12538                           ;main.c: 548: LCDcmd(0x8c);
 12539  0574  308C               	movlw	140
 12540  0575  319F  27AD  3183   	fcall	_LCDcmd
 12541                           
 12542                           ;main.c: 549: }else {
 12543  0578  2DA0               	goto	l1333
 12544  0579                     l4951:
 12545                           
 12546                           ;main.c: 550: LCDcmd(0xc1);
 12547  0579  30C1               	movlw	193
 12548  057A  319F  27AD  3183   	fcall	_LCDcmd
 12549  057D  2DA0               	goto	l1333
 12550  057E                     l4953:
 12551  057E  3003               	movlw	3
 12552  057F  0668               	xorwf	_modeFlag,w
 12553  0580  0469               	iorwf	_modeFlag+1,w
 12554  0581  1D03               	btfss	3,2
 12555  0582  2D84               	goto	u4501
 12556  0583  2D85               	goto	u4500
 12557  0584                     u4501:
 12558  0584  2D95               	goto	l4961
 12559  0585                     u4500:
 12560  0585                     l4955:
 12561                           
 12562                           ;main.c: 555: if(editingLumAlarm == 0){
 12563  0585  0021               	movlb	1	; select bank1
 12564  0586  0839               	movf	_editingLumAlarm^(0+128),w
 12565  0587  1D03               	btfss	3,2
 12566  0588  2D8A               	goto	u4511
 12567  0589  2D8B               	goto	u4510
 12568  058A                     u4511:
 12569  058A  2D90               	goto	l4959
 12570  058B                     u4510:
 12571  058B                     l4957:
 12572                           
 12573                           ;main.c: 556: LCDcmd(0x8d);
 12574  058B  308D               	movlw	141
 12575  058C  319F  27AD  3183   	fcall	_LCDcmd
 12576                           
 12577                           ;main.c: 557: }else {
 12578  058F  2DA0               	goto	l1333
 12579  0590                     l4959:
 12580                           
 12581                           ;main.c: 558: LCDcmd(0xcf);
 12582  0590  30CF               	movlw	207
 12583  0591  319F  27AD  3183   	fcall	_LCDcmd
 12584  0594  2DA0               	goto	l1333
 12585  0595                     l4961:
 12586  0595  3004               	movlw	4
 12587  0596  0668               	xorwf	_modeFlag,w
 12588  0597  0469               	iorwf	_modeFlag+1,w
 12589  0598  1D03               	btfss	3,2
 12590  0599  2D9B               	goto	u4521
 12591  059A  2D9C               	goto	u4520
 12592  059B                     u4521:
 12593  059B  2DA0               	goto	l1333
 12594  059C                     u4520:
 12595  059C                     l4963:
 12596                           
 12597                           ;main.c: 562: LCDcmd(0x8f);
 12598  059C  308F               	movlw	143
 12599  059D  319F  27AD  3183   	fcall	_LCDcmd
 12600  05A0                     l1333:
 12601  05A0  0008               	return
 12602  05A1                     __end_of_update_menuLCD:
 12603                           
 12604                           	psect	text12
 12605  05A1                     __ptext12:	
 12606 ;; *************** function _sprintf *****************
 12607 ;; Defined at:
 12608 ;;		line 505 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c"
 12609 ;; Parameters:    Size  Location     Type
 12610 ;;  sp              1    wreg     PTR unsigned char 
 12611 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12612 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12613 ;;		 -> STR_6(5), STR_5(5), STR_4(7), STR_3(7), 
 12614 ;;		 -> STR_2(15), STR_1(15), 
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  sp              1   34[BANK0 ] PTR unsigned char 
 12617 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12618 ;;  tmpval          4    0        struct .
 12619 ;;  width           2   31[BANK0 ] int 
 12620 ;;  val             2   28[BANK0 ] unsigned int 
 12621 ;;  cp              2    0        PTR const unsigned char 
 12622 ;;  len             2    0        unsigned int 
 12623 ;;  c               1   33[BANK0 ] unsigned char 
 12624 ;;  flag            1   30[BANK0 ] unsigned char 
 12625 ;;  prec            1   27[BANK0 ] char 
 12626 ;;  ap              1   26[BANK0 ] PTR void [1]
 12627 ;;		 -> ?_sprintf(2), 
 12628 ;; Return value:  Size  Location     Type
 12629 ;;                  2   14[BANK0 ] int 
 12630 ;; Registers used:
 12631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12632 ;; Tracked objects:
 12633 ;;		On entry : 0/0
 12634 ;;		On exit  : 0/0
 12635 ;;		Unchanged: 0/0
 12636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12637 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;Total ram usage:       21 bytes
 12642 ;; Hardware stack levels used:    1
 12643 ;; Hardware stack levels required when called:    5
 12644 ;; This function calls:
 12645 ;;		___lwdiv
 12646 ;;		___lwmod
 12647 ;;		___wmul
 12648 ;;		_isdigit
 12649 ;; This function is called by:
 12650 ;;		_update_menuLCD
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           
 12655                           ;psect for function _sprintf
 12656  05A1                     _sprintf:
 12657                           
 12658                           ;incstack = 0
 12659                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12660                           ;sprintf@sp stored from wreg
 12661  05A1  0020               	movlb	0	; select bank0
 12662  05A2  00C2               	movwf	sprintf@sp
 12663  05A3                     l4703:
 12664                           
 12665                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
 12666  05A3  3030               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 12667  05A4  00B6               	movwf	??_sprintf
 12668  05A5  0836               	movf	??_sprintf,w
 12669  05A6  00BA               	movwf	sprintf@ap
 12670                           
 12671                           ;doprnt.c: 553: while((c = *f++)) {
 12672  05A7  2F26               	goto	l4807
 12673  05A8                     l4705:
 12674                           
 12675                           ;doprnt.c: 555: if(c != '%')
 12676  05A8  3025               	movlw	37
 12677  05A9  0641               	xorwf	sprintf@c,w
 12678  05AA  1903               	btfsc	3,2
 12679  05AB  2DAD               	goto	u4061
 12680  05AC  2DAE               	goto	u4060
 12681  05AD                     u4061:
 12682  05AD  2DBA               	goto	l4711
 12683  05AE                     u4060:
 12684  05AE                     l4707:
 12685                           
 12686                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
 12687  05AE  0841               	movf	sprintf@c,w
 12688  05AF  00B6               	movwf	??_sprintf
 12689  05B0  0842               	movf	sprintf@sp,w
 12690  05B1  0086               	movwf	6
 12691  05B2  0187               	clrf	7
 12692  05B3  0836               	movf	??_sprintf,w
 12693  05B4  0081               	movwf	1
 12694  05B5                     l4709:
 12695  05B5  3001               	movlw	1
 12696  05B6  00B6               	movwf	??_sprintf
 12697  05B7  0836               	movf	??_sprintf,w
 12698  05B8  07C2               	addwf	sprintf@sp,f
 12699                           
 12700                           ;doprnt.c: 559: continue;
 12701  05B9  2F26               	goto	l4807
 12702  05BA                     l4711:
 12703                           
 12704                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
 12705  05BA  01BF               	clrf	sprintf@width
 12706  05BB  01C0               	clrf	sprintf@width+1
 12707                           
 12708                           ;doprnt.c: 565: flag = 0;
 12709  05BC  01BE               	clrf	sprintf@flag
 12710  05BD  2DC3               	goto	l4717
 12711  05BE                     l1739:	
 12712                           ;doprnt.c: 596: case '0':
 12713                           
 12714                           
 12715                           ;doprnt.c: 597: flag |= 0x04;
 12716  05BE  153E               	bsf	sprintf@flag,2
 12717  05BF                     l4713:
 12718                           
 12719                           ;doprnt.c: 598: f++;
 12720  05BF  3001               	movlw	1
 12721  05C0  07AE               	addwf	sprintf@f,f
 12722  05C1  3000               	movlw	0
 12723  05C2  3DAF               	addwfc	sprintf@f+1,f
 12724  05C3                     l4717:	
 12725                           ;doprnt.c: 599: continue;
 12726                           
 12727  05C3  082E               	movf	sprintf@f,w
 12728  05C4  0084               	movwf	4
 12729  05C5  082F               	movf	sprintf@f+1,w
 12730  05C6  0085               	movwf	5
 12731  05C7  0800               	movf	0,w	;code access
 12732                           
 12733                           ; Switch size 1, requested type "simple"
 12734                           ; Number of cases is 1, Range of values is 48 to 48
 12735                           ; switch strategies available:
 12736                           ; Name         Instructions Cycles
 12737                           ; simple_byte            4     3 (average)
 12738                           ; direct_byte           11     9 (fixed)
 12739                           ; jumptable            263     9 (fixed)
 12740                           ;	Chosen strategy is simple_byte
 12741  05C8  3A30               	xorlw	48	; case 48
 12742  05C9  1903               	skipnz
 12743  05CA  2DBE               	goto	l1739
 12744  05CB  2DCC               	goto	l4719
 12745  05CC                     l4719:
 12746                           
 12747                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
 12748  05CC  082E               	movf	sprintf@f,w
 12749  05CD  0084               	movwf	4
 12750  05CE  082F               	movf	sprintf@f+1,w
 12751  05CF  0085               	movwf	5
 12752  05D0  0800               	movf	0,w	;code access
 12753  05D1  3190  2061  3185   	fcall	_isdigit
 12754  05D4  1C03               	btfss	3,0
 12755  05D5  2DD7               	goto	u4071
 12756  05D6  2DD8               	goto	u4070
 12757  05D7                     u4071:
 12758  05D7  2E0B               	goto	l4733
 12759  05D8                     u4070:
 12760  05D8                     l4721:
 12761                           
 12762                           ;doprnt.c: 615: width = 0;
 12763  05D8  0020               	movlb	0	; select bank0
 12764  05D9  01BF               	clrf	sprintf@width
 12765  05DA  01C0               	clrf	sprintf@width+1
 12766  05DB                     l4723:
 12767                           
 12768                           ;doprnt.c: 617: width *= 10;
 12769  05DB  300A               	movlw	10
 12770  05DC  0020               	movlb	0	; select bank0
 12771  05DD  00A0               	movwf	___wmul@multiplier
 12772  05DE  3000               	movlw	0
 12773  05DF  00A1               	movwf	___wmul@multiplier+1
 12774  05E0  0840               	movf	sprintf@width+1,w
 12775  05E1  00A3               	movwf	___wmul@multiplicand+1
 12776  05E2  083F               	movf	sprintf@width,w
 12777  05E3  00A2               	movwf	___wmul@multiplicand
 12778  05E4  3191  21D1  3185   	fcall	___wmul
 12779  05E7  0020               	movlb	0	; select bank0
 12780  05E8  0821               	movf	?___wmul+1,w
 12781  05E9  00C0               	movwf	sprintf@width+1
 12782  05EA  0820               	movf	?___wmul,w
 12783  05EB  00BF               	movwf	sprintf@width
 12784  05EC                     l4725:
 12785                           
 12786                           ;doprnt.c: 618: width += *f++ - '0';
 12787  05EC  082E               	movf	sprintf@f,w
 12788  05ED  0084               	movwf	4
 12789  05EE  082F               	movf	sprintf@f+1,w
 12790  05EF  0085               	movwf	5
 12791  05F0  0800               	movf	0,w	;code access
 12792  05F1  3ED0               	addlw	208
 12793  05F2  00B6               	movwf	??_sprintf
 12794  05F3  30FF               	movlw	255
 12795  05F4  1803               	skipnc
 12796  05F5  3000               	movlw	0
 12797  05F6  00B7               	movwf	??_sprintf+1
 12798  05F7  0836               	movf	??_sprintf,w
 12799  05F8  07BF               	addwf	sprintf@width,f
 12800  05F9  0837               	movf	??_sprintf+1,w
 12801  05FA  3DC0               	addwfc	sprintf@width+1,f
 12802  05FB                     l4727:
 12803  05FB  3001               	movlw	1
 12804  05FC  07AE               	addwf	sprintf@f,f
 12805  05FD  3000               	movlw	0
 12806  05FE  3DAF               	addwfc	sprintf@f+1,f
 12807  05FF                     l4729:
 12808                           
 12809                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
 12810  05FF  082E               	movf	sprintf@f,w
 12811  0600  0084               	movwf	4
 12812  0601  082F               	movf	sprintf@f+1,w
 12813  0602  0085               	movwf	5
 12814  0603  0800               	movf	0,w	;code access
 12815  0604  3190  2061  3185   	fcall	_isdigit
 12816  0607  1803               	btfsc	3,0
 12817  0608  2E0A               	goto	u4081
 12818  0609  2E0B               	goto	u4080
 12819  060A                     u4081:
 12820  060A  2DDB               	goto	l4723
 12821  060B                     u4080:
 12822  060B                     l4733:
 12823  060B  0020               	movlb	0	; select bank0
 12824  060C  082F               	movf	sprintf@f+1,w
 12825  060D  00B7               	movwf	??_sprintf+1
 12826  060E  082E               	movf	sprintf@f,w
 12827  060F  00B6               	movwf	??_sprintf
 12828  0610  0AAE               	incf	sprintf@f,f
 12829  0611  1903               	skipnz
 12830  0612  0AAF               	incf	sprintf@f+1,f
 12831  0613  0836               	movf	??_sprintf,w
 12832  0614  0084               	movwf	4
 12833  0615  0837               	movf	??_sprintf+1,w
 12834  0616  0085               	movwf	5
 12835  0617  0800               	movf	0,w	;code access
 12836  0618  00C1               	movwf	sprintf@c
 12837                           
 12838                           ; Switch size 1, requested type "simple"
 12839                           ; Number of cases is 3, Range of values is 0 to 105
 12840                           ; switch strategies available:
 12841                           ; Name         Instructions Cycles
 12842                           ; simple_byte           10     6 (average)
 12843                           ; direct_byte          218     6 (fixed)
 12844                           ; jumptable            260     6 (fixed)
 12845                           ;	Chosen strategy is simple_byte
 12846  0619  3A00               	xorlw	0	; case 0
 12847  061A  1903               	skipnz
 12848  061B  2F3A               	goto	l4809
 12849  061C  3A64               	xorlw	100	; case 100
 12850  061D  1903               	skipnz
 12851  061E  2E23               	goto	l4735
 12852  061F  3A0D               	xorlw	13	; case 105
 12853  0620  1903               	skipnz
 12854  0621  2E23               	goto	l4735
 12855  0622  2F26               	goto	l4807
 12856  0623                     l4735:
 12857                           
 12858                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
 12859  0623  083A               	movf	sprintf@ap,w
 12860  0624  0086               	movwf	6
 12861  0625  0187               	clrf	7
 12862  0626  3F40               	moviw [0]fsr1
 12863  0627  00BC               	movwf	sprintf@val
 12864  0628  3F41               	moviw [1]fsr1
 12865  0629  00BD               	movwf	sprintf@val+1
 12866  062A                     l4737:
 12867  062A  3002               	movlw	2
 12868  062B  00B6               	movwf	??_sprintf
 12869  062C  0836               	movf	??_sprintf,w
 12870  062D  07BA               	addwf	sprintf@ap,f
 12871  062E                     l4739:
 12872                           
 12873                           ;doprnt.c: 1287: if((int)val < 0) {
 12874  062E  1FBD               	btfss	sprintf@val+1,7
 12875  062F  2E31               	goto	u4091
 12876  0630  2E32               	goto	u4090
 12877  0631                     u4091:
 12878  0631  2E3B               	goto	l4745
 12879  0632                     u4090:
 12880  0632                     l4741:
 12881                           
 12882                           ;doprnt.c: 1288: flag |= 0x03;
 12883  0632  3003               	movlw	3
 12884  0633  00B6               	movwf	??_sprintf
 12885  0634  0836               	movf	??_sprintf,w
 12886  0635  04BE               	iorwf	sprintf@flag,f
 12887  0636                     l4743:
 12888                           
 12889                           ;doprnt.c: 1289: val = -val;
 12890  0636  09BC               	comf	sprintf@val,f
 12891  0637  09BD               	comf	sprintf@val+1,f
 12892  0638  0ABC               	incf	sprintf@val,f
 12893  0639  1903               	skipnz
 12894  063A  0ABD               	incf	sprintf@val+1,f
 12895  063B                     l4745:
 12896                           
 12897                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
 12898  063B  01C1               	clrf	sprintf@c
 12899  063C  0AC1               	incf	sprintf@c,f
 12900  063D                     l4751:
 12901                           
 12902                           ;doprnt.c: 1332: if(val < dpowers[c])
 12903  063D  0841               	movf	sprintf@c,w
 12904  063E  00B6               	movwf	??_sprintf
 12905  063F  01B7               	clrf	??_sprintf+1
 12906  0640  35B6               	lslf	??_sprintf,f
 12907  0641  0DB7               	rlf	??_sprintf+1,f
 12908  0642  3036               	movlw	low (_dpowers| (0+32768))
 12909  0643  0736               	addwf	??_sprintf,w
 12910  0644  0084               	movwf	4
 12911  0645  3098               	movlw	high (_dpowers| (0+32768))
 12912  0646  3D37               	addwfc	??_sprintf+1,w
 12913  0647  0085               	movwf	5
 12914  0648  3F00               	moviw [0]fsr0
 12915  0649  00B8               	movwf	??_sprintf+2
 12916  064A  3F01               	moviw [1]fsr0
 12917  064B  00B9               	movwf	??_sprintf+3
 12918  064C  0839               	movf	??_sprintf+3,w
 12919  064D  023D               	subwf	sprintf@val+1,w
 12920  064E  1D03               	skipz
 12921  064F  2E52               	goto	u4105
 12922  0650  0838               	movf	??_sprintf+2,w
 12923  0651  023C               	subwf	sprintf@val,w
 12924  0652                     u4105:
 12925  0652  1803               	skipnc
 12926  0653  2E55               	goto	u4101
 12927  0654  2E56               	goto	u4100
 12928  0655                     u4101:
 12929  0655  2E57               	goto	l4755
 12930  0656                     u4100:
 12931  0656  2E61               	goto	l4757
 12932  0657                     l4755:
 12933  0657  3001               	movlw	1
 12934  0658  00B6               	movwf	??_sprintf
 12935  0659  0836               	movf	??_sprintf,w
 12936  065A  07C1               	addwf	sprintf@c,f
 12937  065B  3005               	movlw	5
 12938  065C  0641               	xorwf	sprintf@c,w
 12939  065D  1D03               	btfss	3,2
 12940  065E  2E60               	goto	u4111
 12941  065F  2E61               	goto	u4110
 12942  0660                     u4111:
 12943  0660  2E3D               	goto	l4751
 12944  0661                     u4110:
 12945  0661                     l4757:
 12946                           
 12947                           ;doprnt.c: 1371: if(width && flag & 0x03)
 12948  0661  083F               	movf	sprintf@width,w
 12949  0662  0440               	iorwf	sprintf@width+1,w
 12950  0663  1903               	btfsc	3,2
 12951  0664  2E66               	goto	u4121
 12952  0665  2E67               	goto	u4120
 12953  0666                     u4121:
 12954  0666  2E71               	goto	l1757
 12955  0667                     u4120:
 12956  0667                     l4759:
 12957  0667  083E               	movf	sprintf@flag,w
 12958  0668  3903               	andlw	3
 12959  0669  1903               	btfsc	3,2
 12960  066A  2E6C               	goto	u4131
 12961  066B  2E6D               	goto	u4130
 12962  066C                     u4131:
 12963  066C  2E71               	goto	l1757
 12964  066D                     u4130:
 12965  066D                     l4761:
 12966                           
 12967                           ;doprnt.c: 1372: width--;
 12968  066D  30FF               	movlw	255
 12969  066E  07BF               	addwf	sprintf@width,f
 12970  066F  30FF               	movlw	255
 12971  0670  3DC0               	addwfc	sprintf@width+1,f
 12972  0671                     l1757:
 12973                           
 12974                           ;doprnt.c: 1407: if(width > c)
 12975  0671  0840               	movf	sprintf@width+1,w
 12976  0672  3A80               	xorlw	128
 12977  0673  3C80               	sublw	128
 12978  0674  1D03               	skipz
 12979  0675  2E78               	goto	u4145
 12980  0676  083F               	movf	sprintf@width,w
 12981  0677  0241               	subwf	sprintf@c,w
 12982  0678                     u4145:
 12983  0678  1803               	skipnc
 12984  0679  2E7B               	goto	u4141
 12985  067A  2E7C               	goto	u4140
 12986  067B                     u4141:
 12987  067B  2E85               	goto	l4765
 12988  067C                     u4140:
 12989  067C                     l4763:
 12990                           
 12991                           ;doprnt.c: 1408: width -= c;
 12992  067C  0020               	movlb	0	; select bank0
 12993  067D  0841               	movf	sprintf@c,w
 12994  067E  00B6               	movwf	??_sprintf
 12995  067F  01B7               	clrf	??_sprintf+1
 12996  0680  0836               	movf	??_sprintf,w
 12997  0681  02BF               	subwf	sprintf@width,f
 12998  0682  0837               	movf	??_sprintf+1,w
 12999  0683  3BC0               	subwfb	sprintf@width+1,f
 13000  0684  2E88               	goto	l4767
 13001  0685                     l4765:
 13002                           
 13003                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
 13004  0685  0020               	movlb	0	; select bank0
 13005  0686  01BF               	clrf	sprintf@width
 13006  0687  01C0               	clrf	sprintf@width+1
 13007  0688                     l4767:
 13008                           
 13009                           ;doprnt.c: 1413: if(flag & 0x04) {
 13010  0688  1D3E               	btfss	sprintf@flag,2
 13011  0689  2E8B               	goto	u4151
 13012  068A  2E8C               	goto	u4150
 13013  068B                     u4151:
 13014  068B  2EB9               	goto	l4783
 13015  068C                     u4150:
 13016  068C                     l4769:
 13017                           
 13018                           ;doprnt.c: 1418: if(flag & 0x03)
 13019  068C  083E               	movf	sprintf@flag,w
 13020  068D  3903               	andlw	3
 13021  068E  1903               	btfsc	3,2
 13022  068F  2E91               	goto	u4161
 13023  0690  2E92               	goto	u4160
 13024  0691                     u4161:
 13025  0691  2E9D               	goto	l4775
 13026  0692                     u4160:
 13027  0692                     l4771:
 13028                           
 13029                           ;doprnt.c: 1419: ((*sp++ = ('-')));
 13030  0692  302D               	movlw	45
 13031  0693  00B6               	movwf	??_sprintf
 13032  0694  0842               	movf	sprintf@sp,w
 13033  0695  0086               	movwf	6
 13034  0696  0187               	clrf	7
 13035  0697  0836               	movf	??_sprintf,w
 13036  0698  0081               	movwf	1
 13037  0699                     l4773:
 13038  0699  3001               	movlw	1
 13039  069A  00B6               	movwf	??_sprintf
 13040  069B  0836               	movf	??_sprintf,w
 13041  069C  07C2               	addwf	sprintf@sp,f
 13042  069D                     l4775:
 13043                           
 13044                           ;doprnt.c: 1441: if(width)
 13045  069D  083F               	movf	sprintf@width,w
 13046  069E  0440               	iorwf	sprintf@width+1,w
 13047  069F  1903               	btfsc	3,2
 13048  06A0  2EA2               	goto	u4171
 13049  06A1  2EA3               	goto	u4170
 13050  06A2                     u4171:
 13051  06A2  2EE5               	goto	l4797
 13052  06A3                     u4170:
 13053  06A3                     l4777:
 13054                           
 13055                           ;doprnt.c: 1443: ((*sp++ = ('0')));
 13056  06A3  3030               	movlw	48
 13057  06A4  00B6               	movwf	??_sprintf
 13058  06A5  0842               	movf	sprintf@sp,w
 13059  06A6  0086               	movwf	6
 13060  06A7  0187               	clrf	7
 13061  06A8  0836               	movf	??_sprintf,w
 13062  06A9  0081               	movwf	1
 13063  06AA                     l4779:
 13064  06AA  3001               	movlw	1
 13065  06AB  00B6               	movwf	??_sprintf
 13066  06AC  0836               	movf	??_sprintf,w
 13067  06AD  07C2               	addwf	sprintf@sp,f
 13068  06AE                     l4781:
 13069                           
 13070                           ;doprnt.c: 1444: while(--width);
 13071  06AE  30FF               	movlw	255
 13072  06AF  07BF               	addwf	sprintf@width,f
 13073  06B0  30FF               	movlw	255
 13074  06B1  3DC0               	addwfc	sprintf@width+1,f
 13075  06B2  083F               	movf	sprintf@width,w
 13076  06B3  0440               	iorwf	sprintf@width+1,w
 13077  06B4  1D03               	btfss	3,2
 13078  06B5  2EB7               	goto	u4181
 13079  06B6  2EB8               	goto	u4180
 13080  06B7                     u4181:
 13081  06B7  2EA3               	goto	l4777
 13082  06B8                     u4180:
 13083  06B8  2EE5               	goto	l4797
 13084  06B9                     l4783:
 13085                           
 13086                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
 13087  06B9  083F               	movf	sprintf@width,w
 13088  06BA  0440               	iorwf	sprintf@width+1,w
 13089  06BB  1903               	btfsc	3,2
 13090  06BC  2EBE               	goto	u4191
 13091  06BD  2EBF               	goto	u4190
 13092  06BE                     u4191:
 13093  06BE  2ED4               	goto	l4791
 13094  06BF                     u4190:
 13095  06BF                     l4785:
 13096                           
 13097                           ;doprnt.c: 1456: ((*sp++ = (' ')));
 13098  06BF  3020               	movlw	32
 13099  06C0  00B6               	movwf	??_sprintf
 13100  06C1  0842               	movf	sprintf@sp,w
 13101  06C2  0086               	movwf	6
 13102  06C3  0187               	clrf	7
 13103  06C4  0836               	movf	??_sprintf,w
 13104  06C5  0081               	movwf	1
 13105  06C6                     l4787:
 13106  06C6  3001               	movlw	1
 13107  06C7  00B6               	movwf	??_sprintf
 13108  06C8  0836               	movf	??_sprintf,w
 13109  06C9  07C2               	addwf	sprintf@sp,f
 13110  06CA                     l4789:
 13111                           
 13112                           ;doprnt.c: 1457: while(--width);
 13113  06CA  30FF               	movlw	255
 13114  06CB  07BF               	addwf	sprintf@width,f
 13115  06CC  30FF               	movlw	255
 13116  06CD  3DC0               	addwfc	sprintf@width+1,f
 13117  06CE  083F               	movf	sprintf@width,w
 13118  06CF  0440               	iorwf	sprintf@width+1,w
 13119  06D0  1D03               	btfss	3,2
 13120  06D1  2ED3               	goto	u4201
 13121  06D2  2ED4               	goto	u4200
 13122  06D3                     u4201:
 13123  06D3  2EBF               	goto	l4785
 13124  06D4                     u4200:
 13125  06D4                     l4791:
 13126                           
 13127                           ;doprnt.c: 1464: if(flag & 0x03)
 13128  06D4  083E               	movf	sprintf@flag,w
 13129  06D5  3903               	andlw	3
 13130  06D6  1903               	btfsc	3,2
 13131  06D7  2ED9               	goto	u4211
 13132  06D8  2EDA               	goto	u4210
 13133  06D9                     u4211:
 13134  06D9  2EE5               	goto	l4797
 13135  06DA                     u4210:
 13136  06DA                     l4793:
 13137                           
 13138                           ;doprnt.c: 1465: ((*sp++ = ('-')));
 13139  06DA  302D               	movlw	45
 13140  06DB  00B6               	movwf	??_sprintf
 13141  06DC  0842               	movf	sprintf@sp,w
 13142  06DD  0086               	movwf	6
 13143  06DE  0187               	clrf	7
 13144  06DF  0836               	movf	??_sprintf,w
 13145  06E0  0081               	movwf	1
 13146  06E1                     l4795:
 13147  06E1  3001               	movlw	1
 13148  06E2  00B6               	movwf	??_sprintf
 13149  06E3  0836               	movf	??_sprintf,w
 13150  06E4  07C2               	addwf	sprintf@sp,f
 13151  06E5                     l4797:
 13152                           
 13153                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
 13154  06E5  0841               	movf	sprintf@c,w
 13155  06E6  00B6               	movwf	??_sprintf
 13156  06E7  0836               	movf	??_sprintf,w
 13157  06E8  00BB               	movwf	sprintf@prec
 13158                           
 13159                           ;doprnt.c: 1500: while(prec--) {
 13160  06E9  2F1D               	goto	l4805
 13161  06EA                     l4799:
 13162                           
 13163                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
 13164  06EA  300A               	movlw	10
 13165  06EB  00A8               	movwf	___lwmod@divisor
 13166  06EC  3000               	movlw	0
 13167  06ED  00A9               	movwf	___lwmod@divisor+1
 13168  06EE  083B               	movf	sprintf@prec,w
 13169  06EF  00B6               	movwf	??_sprintf
 13170  06F0  01B7               	clrf	??_sprintf+1
 13171  06F1  35B6               	lslf	??_sprintf,f
 13172  06F2  0DB7               	rlf	??_sprintf+1,f
 13173  06F3  3036               	movlw	low (_dpowers| (0+32768))
 13174  06F4  0736               	addwf	??_sprintf,w
 13175  06F5  0084               	movwf	4
 13176  06F6  3098               	movlw	high (_dpowers| (0+32768))
 13177  06F7  3D37               	addwfc	??_sprintf+1,w
 13178  06F8  0085               	movwf	5
 13179  06F9  3F00               	moviw [0]fsr0
 13180  06FA  00A0               	movwf	___lwdiv@divisor
 13181  06FB  3F01               	moviw [1]fsr0
 13182  06FC  00A1               	movwf	___lwdiv@divisor+1
 13183  06FD  083D               	movf	sprintf@val+1,w
 13184  06FE  00A3               	movwf	___lwdiv@dividend+1
 13185  06FF  083C               	movf	sprintf@val,w
 13186  0700  00A2               	movwf	___lwdiv@dividend
 13187  0701  3194  249D  3185   	fcall	___lwdiv
 13188  0704  0020               	movlb	0	; select bank0
 13189  0705  0821               	movf	?___lwdiv+1,w
 13190  0706  00AB               	movwf	___lwmod@dividend+1
 13191  0707  0820               	movf	?___lwdiv,w
 13192  0708  00AA               	movwf	___lwmod@dividend
 13193  0709  3193  23C6  3185   	fcall	___lwmod
 13194  070C  0020               	movlb	0	; select bank0
 13195  070D  0828               	movf	?___lwmod,w
 13196  070E  3E30               	addlw	48
 13197  070F  00B8               	movwf	??_sprintf+2
 13198  0710  0838               	movf	??_sprintf+2,w
 13199  0711  00C1               	movwf	sprintf@c
 13200  0712                     l4801:
 13201                           
 13202                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
 13203  0712  0841               	movf	sprintf@c,w
 13204  0713  00B6               	movwf	??_sprintf
 13205  0714  0842               	movf	sprintf@sp,w
 13206  0715  0086               	movwf	6
 13207  0716  0187               	clrf	7
 13208  0717  0836               	movf	??_sprintf,w
 13209  0718  0081               	movwf	1
 13210  0719                     l4803:
 13211  0719  3001               	movlw	1
 13212  071A  00B6               	movwf	??_sprintf
 13213  071B  0836               	movf	??_sprintf,w
 13214  071C  07C2               	addwf	sprintf@sp,f
 13215  071D                     l4805:
 13216  071D  30FF               	movlw	255
 13217  071E  00B6               	movwf	??_sprintf
 13218  071F  0836               	movf	??_sprintf,w
 13219  0720  07BB               	addwf	sprintf@prec,f
 13220  0721  0A3B               	incf	sprintf@prec,w
 13221  0722  1D03               	btfss	3,2
 13222  0723  2F25               	goto	u4221
 13223  0724  2F26               	goto	u4220
 13224  0725                     u4221:
 13225  0725  2EEA               	goto	l4799
 13226  0726                     u4220:
 13227  0726                     l4807:
 13228  0726  082F               	movf	sprintf@f+1,w
 13229  0727  00B7               	movwf	??_sprintf+1
 13230  0728  082E               	movf	sprintf@f,w
 13231  0729  00B6               	movwf	??_sprintf
 13232  072A  0AAE               	incf	sprintf@f,f
 13233  072B  1903               	skipnz
 13234  072C  0AAF               	incf	sprintf@f+1,f
 13235  072D  0836               	movf	??_sprintf,w
 13236  072E  0084               	movwf	4
 13237  072F  0837               	movf	??_sprintf+1,w
 13238  0730  0085               	movwf	5
 13239  0731  0800               	movf	0,w	;code access
 13240  0732  00B8               	movwf	??_sprintf+2
 13241  0733  0838               	movf	??_sprintf+2,w
 13242  0734  00C1               	movwf	sprintf@c
 13243  0735  0841               	movf	sprintf@c,w
 13244  0736  1D03               	btfss	3,2
 13245  0737  2F39               	goto	u4231
 13246  0738  2F3A               	goto	u4230
 13247  0739                     u4231:
 13248  0739  2DA8               	goto	l4705
 13249  073A                     u4230:
 13250  073A                     l4809:
 13251                           
 13252                           ;doprnt.c: 1564: *sp = 0;
 13253  073A  0842               	movf	sprintf@sp,w
 13254  073B  0086               	movwf	6
 13255  073C  0187               	clrf	7
 13256  073D  0181               	clrf	1
 13257  073E                     l1774:
 13258  073E  0008               	return
 13259  073F                     __end_of_sprintf:
 13260                           
 13261                           	psect	text13
 13262  1061                     __ptext13:	
 13263 ;; *************** function _isdigit *****************
 13264 ;; Defined at:
 13265 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
 13266 ;; Parameters:    Size  Location     Type
 13267 ;;  c               1    wreg     unsigned char 
 13268 ;; Auto vars:     Size  Location     Type
 13269 ;;  c               1    1[BANK0 ] unsigned char 
 13270 ;; Return value:  Size  Location     Type
 13271 ;;		None               void
 13272 ;; Registers used:
 13273 ;;		wreg, status,2, status,0
 13274 ;; Tracked objects:
 13275 ;;		On entry : 0/0
 13276 ;;		On exit  : 0/0
 13277 ;;		Unchanged: 0/0
 13278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13282 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13283 ;;Total ram usage:        2 bytes
 13284 ;; Hardware stack levels used:    1
 13285 ;; Hardware stack levels required when called:    4
 13286 ;; This function calls:
 13287 ;;		Nothing
 13288 ;; This function is called by:
 13289 ;;		_sprintf
 13290 ;; This function uses a non-reentrant model
 13291 ;;
 13292                           
 13293                           
 13294                           ;psect for function _isdigit
 13295  1061                     _isdigit:
 13296                           
 13297                           ;incstack = 0
 13298                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 13299                           ;isdigit@c stored from wreg
 13300  1061  0020               	movlb	0	; select bank0
 13301  1062  00A1               	movwf	isdigit@c
 13302  1063                     l4511:
 13303  1063  01A0               	clrf	_isdigit$2994
 13304  1064                     l4513:
 13305  1064  303A               	movlw	58
 13306  1065  0221               	subwf	isdigit@c,w
 13307  1066  1803               	skipnc
 13308  1067  2869               	goto	u3561
 13309  1068  286A               	goto	u3560
 13310  1069                     u3561:
 13311  1069  2872               	goto	l4519
 13312  106A                     u3560:
 13313  106A                     l4515:
 13314  106A  3030               	movlw	48
 13315  106B  0221               	subwf	isdigit@c,w
 13316  106C  1C03               	skipc
 13317  106D  286F               	goto	u3571
 13318  106E  2870               	goto	u3570
 13319  106F                     u3571:
 13320  106F  2872               	goto	l4519
 13321  1070                     u3570:
 13322  1070                     l4517:
 13323  1070  01A0               	clrf	_isdigit$2994
 13324  1071  0AA0               	incf	_isdigit$2994,f
 13325  1072                     l4519:
 13326  1072  0C20               	rrf	_isdigit$2994,w
 13327  1073                     l2231:
 13328  1073  0008               	return
 13329  1074                     __end_of_isdigit:
 13330                           
 13331                           	psect	text14
 13332  13C6                     __ptext14:	
 13333 ;; *************** function ___lwmod *****************
 13334 ;; Defined at:
 13335 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
 13336 ;; Parameters:    Size  Location     Type
 13337 ;;  divisor         2    8[BANK0 ] unsigned int 
 13338 ;;  dividend        2   10[BANK0 ] unsigned int 
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;  counter         1   13[BANK0 ] unsigned char 
 13341 ;; Return value:  Size  Location     Type
 13342 ;;                  2    8[BANK0 ] unsigned int 
 13343 ;; Registers used:
 13344 ;;		wreg, status,2, status,0
 13345 ;; Tracked objects:
 13346 ;;		On entry : 0/0
 13347 ;;		On exit  : 0/0
 13348 ;;		Unchanged: 0/0
 13349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13350 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13352 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13353 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13354 ;;Total ram usage:        6 bytes
 13355 ;; Hardware stack levels used:    1
 13356 ;; Hardware stack levels required when called:    4
 13357 ;; This function calls:
 13358 ;;		Nothing
 13359 ;; This function is called by:
 13360 ;;		_sprintf
 13361 ;; This function uses a non-reentrant model
 13362 ;;
 13363                           
 13364                           
 13365                           ;psect for function ___lwmod
 13366  13C6                     ___lwmod:
 13367  13C6                     l4563:	
 13368                           ;incstack = 0
 13369                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13370                           
 13371  13C6  0020               	movlb	0	; select bank0
 13372  13C7  0828               	movf	___lwmod@divisor,w
 13373  13C8  0429               	iorwf	___lwmod@divisor+1,w
 13374  13C9  1903               	btfsc	3,2
 13375  13CA  2BCC               	goto	u3691
 13376  13CB  2BCD               	goto	u3690
 13377  13CC                     u3691:
 13378  13CC  2BF6               	goto	l4581
 13379  13CD                     u3690:
 13380  13CD                     l4565:
 13381  13CD  01AD               	clrf	___lwmod@counter
 13382  13CE  0AAD               	incf	___lwmod@counter,f
 13383  13CF  2BD9               	goto	l4571
 13384  13D0                     l4567:
 13385  13D0  3001               	movlw	1
 13386  13D1                     u3705:
 13387  13D1  35A8               	lslf	___lwmod@divisor,f
 13388  13D2  0DA9               	rlf	___lwmod@divisor+1,f
 13389  13D3  0B89               	decfsz	9,f
 13390  13D4  2BD1               	goto	u3705
 13391  13D5                     l4569:
 13392  13D5  3001               	movlw	1
 13393  13D6  00AC               	movwf	??___lwmod
 13394  13D7  082C               	movf	??___lwmod,w
 13395  13D8  07AD               	addwf	___lwmod@counter,f
 13396  13D9                     l4571:
 13397  13D9  1FA9               	btfss	___lwmod@divisor+1,7
 13398  13DA  2BDC               	goto	u3711
 13399  13DB  2BDD               	goto	u3710
 13400  13DC                     u3711:
 13401  13DC  2BD0               	goto	l4567
 13402  13DD                     u3710:
 13403  13DD                     l4573:
 13404  13DD  0829               	movf	___lwmod@divisor+1,w
 13405  13DE  022B               	subwf	___lwmod@dividend+1,w
 13406  13DF  1D03               	skipz
 13407  13E0  2BE3               	goto	u3725
 13408  13E1  0828               	movf	___lwmod@divisor,w
 13409  13E2  022A               	subwf	___lwmod@dividend,w
 13410  13E3                     u3725:
 13411  13E3  1C03               	skipc
 13412  13E4  2BE6               	goto	u3721
 13413  13E5  2BE7               	goto	u3720
 13414  13E6                     u3721:
 13415  13E6  2BEB               	goto	l4577
 13416  13E7                     u3720:
 13417  13E7                     l4575:
 13418  13E7  0828               	movf	___lwmod@divisor,w
 13419  13E8  02AA               	subwf	___lwmod@dividend,f
 13420  13E9  0829               	movf	___lwmod@divisor+1,w
 13421  13EA  3BAB               	subwfb	___lwmod@dividend+1,f
 13422  13EB                     l4577:
 13423  13EB  3001               	movlw	1
 13424  13EC                     u3735:
 13425  13EC  36A9               	lsrf	___lwmod@divisor+1,f
 13426  13ED  0CA8               	rrf	___lwmod@divisor,f
 13427  13EE  0B89               	decfsz	9,f
 13428  13EF  2BEC               	goto	u3735
 13429  13F0                     l4579:
 13430  13F0  3001               	movlw	1
 13431  13F1  02AD               	subwf	___lwmod@counter,f
 13432  13F2  1D03               	btfss	3,2
 13433  13F3  2BF5               	goto	u3741
 13434  13F4  2BF6               	goto	u3740
 13435  13F5                     u3741:
 13436  13F5  2BDD               	goto	l4573
 13437  13F6                     u3740:
 13438  13F6                     l4581:
 13439  13F6  082B               	movf	___lwmod@dividend+1,w
 13440  13F7  00A9               	movwf	?___lwmod+1
 13441  13F8  082A               	movf	___lwmod@dividend,w
 13442  13F9  00A8               	movwf	?___lwmod
 13443  13FA                     l2060:
 13444  13FA  0008               	return
 13445  13FB                     __end_of___lwmod:
 13446                           
 13447                           	psect	text15
 13448  149D                     __ptext15:	
 13449 ;; *************** function ___lwdiv *****************
 13450 ;; Defined at:
 13451 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;  divisor         2    0[BANK0 ] unsigned int 
 13454 ;;  dividend        2    2[BANK0 ] unsigned int 
 13455 ;; Auto vars:     Size  Location     Type
 13456 ;;  quotient        2    5[BANK0 ] unsigned int 
 13457 ;;  counter         1    7[BANK0 ] unsigned char 
 13458 ;; Return value:  Size  Location     Type
 13459 ;;                  2    0[BANK0 ] unsigned int 
 13460 ;; Registers used:
 13461 ;;		wreg, status,2, status,0
 13462 ;; Tracked objects:
 13463 ;;		On entry : 0/0
 13464 ;;		On exit  : 0/0
 13465 ;;		Unchanged: 0/0
 13466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13467 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13468 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;Total ram usage:        8 bytes
 13472 ;; Hardware stack levels used:    1
 13473 ;; Hardware stack levels required when called:    4
 13474 ;; This function calls:
 13475 ;;		Nothing
 13476 ;; This function is called by:
 13477 ;;		_sprintf
 13478 ;; This function uses a non-reentrant model
 13479 ;;
 13480                           
 13481                           
 13482                           ;psect for function ___lwdiv
 13483  149D                     ___lwdiv:
 13484  149D                     l4537:	
 13485                           ;incstack = 0
 13486                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13487                           
 13488  149D  0020               	movlb	0	; select bank0
 13489  149E  01A5               	clrf	___lwdiv@quotient
 13490  149F  01A6               	clrf	___lwdiv@quotient+1
 13491  14A0                     l4539:
 13492  14A0  0820               	movf	___lwdiv@divisor,w
 13493  14A1  0421               	iorwf	___lwdiv@divisor+1,w
 13494  14A2  1903               	btfsc	3,2
 13495  14A3  2CA5               	goto	u3621
 13496  14A4  2CA6               	goto	u3620
 13497  14A5                     u3621:
 13498  14A5  2CD5               	goto	l4559
 13499  14A6                     u3620:
 13500  14A6                     l4541:
 13501  14A6  01A7               	clrf	___lwdiv@counter
 13502  14A7  0AA7               	incf	___lwdiv@counter,f
 13503  14A8  2CB2               	goto	l4547
 13504  14A9                     l4543:
 13505  14A9  3001               	movlw	1
 13506  14AA                     u3635:
 13507  14AA  35A0               	lslf	___lwdiv@divisor,f
 13508  14AB  0DA1               	rlf	___lwdiv@divisor+1,f
 13509  14AC  0B89               	decfsz	9,f
 13510  14AD  2CAA               	goto	u3635
 13511  14AE                     l4545:
 13512  14AE  3001               	movlw	1
 13513  14AF  00A4               	movwf	??___lwdiv
 13514  14B0  0824               	movf	??___lwdiv,w
 13515  14B1  07A7               	addwf	___lwdiv@counter,f
 13516  14B2                     l4547:
 13517  14B2  1FA1               	btfss	___lwdiv@divisor+1,7
 13518  14B3  2CB5               	goto	u3641
 13519  14B4  2CB6               	goto	u3640
 13520  14B5                     u3641:
 13521  14B5  2CA9               	goto	l4543
 13522  14B6                     u3640:
 13523  14B6                     l4549:
 13524  14B6  3001               	movlw	1
 13525  14B7                     u3655:
 13526  14B7  35A5               	lslf	___lwdiv@quotient,f
 13527  14B8  0DA6               	rlf	___lwdiv@quotient+1,f
 13528  14B9  0B89               	decfsz	9,f
 13529  14BA  2CB7               	goto	u3655
 13530  14BB  0821               	movf	___lwdiv@divisor+1,w
 13531  14BC  0223               	subwf	___lwdiv@dividend+1,w
 13532  14BD  1D03               	skipz
 13533  14BE  2CC1               	goto	u3665
 13534  14BF  0820               	movf	___lwdiv@divisor,w
 13535  14C0  0222               	subwf	___lwdiv@dividend,w
 13536  14C1                     u3665:
 13537  14C1  1C03               	skipc
 13538  14C2  2CC4               	goto	u3661
 13539  14C3  2CC5               	goto	u3660
 13540  14C4                     u3661:
 13541  14C4  2CCA               	goto	l4555
 13542  14C5                     u3660:
 13543  14C5                     l4551:
 13544  14C5  0820               	movf	___lwdiv@divisor,w
 13545  14C6  02A2               	subwf	___lwdiv@dividend,f
 13546  14C7  0821               	movf	___lwdiv@divisor+1,w
 13547  14C8  3BA3               	subwfb	___lwdiv@dividend+1,f
 13548  14C9                     l4553:
 13549  14C9  1425               	bsf	___lwdiv@quotient,0
 13550  14CA                     l4555:
 13551  14CA  3001               	movlw	1
 13552  14CB                     u3675:
 13553  14CB  36A1               	lsrf	___lwdiv@divisor+1,f
 13554  14CC  0CA0               	rrf	___lwdiv@divisor,f
 13555  14CD  0B89               	decfsz	9,f
 13556  14CE  2CCB               	goto	u3675
 13557  14CF                     l4557:
 13558  14CF  3001               	movlw	1
 13559  14D0  02A7               	subwf	___lwdiv@counter,f
 13560  14D1  1D03               	btfss	3,2
 13561  14D2  2CD4               	goto	u3681
 13562  14D3  2CD5               	goto	u3680
 13563  14D4                     u3681:
 13564  14D4  2CB6               	goto	l4549
 13565  14D5                     u3680:
 13566  14D5                     l4559:
 13567  14D5  0826               	movf	___lwdiv@quotient+1,w
 13568  14D6  00A1               	movwf	?___lwdiv+1
 13569  14D7  0825               	movf	___lwdiv@quotient,w
 13570  14D8  00A0               	movwf	?___lwdiv
 13571  14D9                     l2050:
 13572  14D9  0008               	return
 13573  14DA                     __end_of___lwdiv:
 13574                           
 13575                           	psect	text16
 13576  1391                     __ptext16:	
 13577 ;; *************** function _differenceBetweenTimePeriod *****************
 13578 ;; Defined at:
 13579 ;;		line 334 in file "main.c"
 13580 ;; Parameters:    Size  Location     Type
 13581 ;;  start           3    0[BANK0 ] struct Time
 13582 ;;  stop            3    3[BANK0 ] struct Time
 13583 ;;  diff            1    6[BANK0 ] PTR struct Time
 13584 ;;		 -> update_menuLCD@diff(3), 
 13585 ;; Auto vars:     Size  Location     Type
 13586 ;;		None
 13587 ;; Return value:  Size  Location     Type
 13588 ;;                  1    wreg      void 
 13589 ;; Registers used:
 13590 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13591 ;; Tracked objects:
 13592 ;;		On entry : 0/0
 13593 ;;		On exit  : 0/0
 13594 ;;		Unchanged: 0/0
 13595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13596 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;Total ram usage:        8 bytes
 13601 ;; Hardware stack levels used:    1
 13602 ;; Hardware stack levels required when called:    4
 13603 ;; This function calls:
 13604 ;;		Nothing
 13605 ;; This function is called by:
 13606 ;;		_update_menuLCD
 13607 ;; This function uses a non-reentrant model
 13608 ;;
 13609                           
 13610                           
 13611                           ;psect for function _differenceBetweenTimePeriod
 13612  1391                     _differenceBetweenTimePeriod:
 13613  1391                     l4687:	
 13614                           ;incstack = 0
 13615                           ; Regs used in _differenceBetweenTimePeriod: [wreg+fsr1l+fsr1h+status,2+status,0]
 13616                           
 13617                           
 13618                           ;main.c: 337: while (stop.s > start.s) {
 13619  1391  2B98               	goto	l4691
 13620  1392                     l4689:
 13621                           
 13622                           ;main.c: 338: --start.m;
 13623  1392  3001               	movlw	1
 13624  1393  02A1               	subwf	differenceBetweenTimePeriod@start+1,f
 13625                           
 13626                           ;main.c: 339: start.s += 60;
 13627  1394  303C               	movlw	60
 13628  1395  00A7               	movwf	??_differenceBetweenTimePeriod
 13629  1396  0827               	movf	??_differenceBetweenTimePeriod,w
 13630  1397  07A2               	addwf	differenceBetweenTimePeriod@start+2,f
 13631  1398                     l4691:
 13632  1398  0020               	movlb	0	; select bank0
 13633  1399  0825               	movf	differenceBetweenTimePeriod@stop+2,w
 13634  139A  0222               	subwf	differenceBetweenTimePeriod@start+2,w
 13635  139B  1C03               	skipc
 13636  139C  2B9E               	goto	u4041
 13637  139D  2B9F               	goto	u4040
 13638  139E                     u4041:
 13639  139E  2B92               	goto	l4689
 13640  139F                     u4040:
 13641  139F                     l4693:
 13642                           
 13643                           ;main.c: 340: };main.c: 341: diff->s = start.s - stop.s;
 13644  139F  0825               	movf	differenceBetweenTimePeriod@stop+2,w
 13645  13A0  0222               	subwf	differenceBetweenTimePeriod@start+2,w
 13646  13A1  00A7               	movwf	??_differenceBetweenTimePeriod
 13647  13A2  0826               	movf	differenceBetweenTimePeriod@diff,w
 13648  13A3  3E02               	addlw	2
 13649  13A4  0086               	movwf	6
 13650  13A5  0187               	clrf	7
 13651  13A6  0827               	movf	??_differenceBetweenTimePeriod,w
 13652  13A7  0081               	movwf	1
 13653                           
 13654                           ;main.c: 342: while (stop.m > start.m) {
 13655  13A8  2BAF               	goto	l4697
 13656  13A9                     l4695:
 13657                           
 13658                           ;main.c: 343: --start.h;
 13659  13A9  3001               	movlw	1
 13660  13AA  02A0               	subwf	differenceBetweenTimePeriod@start,f
 13661                           
 13662                           ;main.c: 344: start.m += 60;
 13663  13AB  303C               	movlw	60
 13664  13AC  00A7               	movwf	??_differenceBetweenTimePeriod
 13665  13AD  0827               	movf	??_differenceBetweenTimePeriod,w
 13666  13AE  07A1               	addwf	differenceBetweenTimePeriod@start+1,f
 13667  13AF                     l4697:
 13668  13AF  0824               	movf	differenceBetweenTimePeriod@stop+1,w
 13669  13B0  0221               	subwf	differenceBetweenTimePeriod@start+1,w
 13670  13B1  1C03               	skipc
 13671  13B2  2BB4               	goto	u4051
 13672  13B3  2BB5               	goto	u4050
 13673  13B4                     u4051:
 13674  13B4  2BA9               	goto	l4695
 13675  13B5                     u4050:
 13676  13B5                     l4699:
 13677                           
 13678                           ;main.c: 345: };main.c: 346: diff->m = start.m - stop.m;
 13679  13B5  0824               	movf	differenceBetweenTimePeriod@stop+1,w
 13680  13B6  0221               	subwf	differenceBetweenTimePeriod@start+1,w
 13681  13B7  00A7               	movwf	??_differenceBetweenTimePeriod
 13682  13B8  0A26               	incf	differenceBetweenTimePeriod@diff,w
 13683  13B9  0086               	movwf	6
 13684  13BA  0187               	clrf	7
 13685  13BB  0827               	movf	??_differenceBetweenTimePeriod,w
 13686  13BC  0081               	movwf	1
 13687                           
 13688                           ;main.c: 347: diff->h = start.h - stop.h;
 13689  13BD  0823               	movf	differenceBetweenTimePeriod@stop,w
 13690  13BE  0220               	subwf	differenceBetweenTimePeriod@start,w
 13691  13BF  00A7               	movwf	??_differenceBetweenTimePeriod
 13692  13C0  0826               	movf	differenceBetweenTimePeriod@diff,w
 13693  13C1  0086               	movwf	6
 13694  13C2  0187               	clrf	7
 13695  13C3  0827               	movf	??_differenceBetweenTimePeriod,w
 13696  13C4  0081               	movwf	1
 13697  13C5                     l1258:
 13698  13C5  0008               	return
 13699  13C6                     __end_of_differenceBetweenTimePeriod:
 13700                           
 13701                           	psect	text17
 13702  1F88                     __ptext17:	
 13703 ;; *************** function _TMR2_StopTimer *****************
 13704 ;; Defined at:
 13705 ;;		line 117 in file "mcc_generated_files/tmr2.c"
 13706 ;; Parameters:    Size  Location     Type
 13707 ;;		None
 13708 ;; Auto vars:     Size  Location     Type
 13709 ;;		None
 13710 ;; Return value:  Size  Location     Type
 13711 ;;                  1    wreg      void 
 13712 ;; Registers used:
 13713 ;;		status,2, status,0, pclath, cstack
 13714 ;; Tracked objects:
 13715 ;;		On entry : 0/0
 13716 ;;		On exit  : 0/0
 13717 ;;		Unchanged: 0/0
 13718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;Total ram usage:        0 bytes
 13724 ;; Hardware stack levels used:    1
 13725 ;; Hardware stack levels required when called:    5
 13726 ;; This function calls:
 13727 ;;		_TMR2_Stop
 13728 ;; This function is called by:
 13729 ;;		_update_menuLCD
 13730 ;;		_main
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           
 13735                           ;psect for function _TMR2_StopTimer
 13736  1F88                     _TMR2_StopTimer:
 13737  1F88                     l4603:	
 13738                           ;incstack = 0
 13739                           ; Regs used in _TMR2_StopTimer: [status,2+status,0+pclath+cstack]
 13740                           
 13741                           
 13742                           ;tmr2.c: 119: TMR2_Stop();
 13743  1F88  319F  2781  319F   	fcall	_TMR2_Stop
 13744  1F8B                     l665:
 13745  1F8B  0008               	return
 13746  1F8C                     __end_of_TMR2_StopTimer:
 13747                           
 13748                           	psect	text18
 13749  1F81                     __ptext18:	
 13750 ;; *************** function _TMR2_Stop *****************
 13751 ;; Defined at:
 13752 ;;		line 111 in file "mcc_generated_files/tmr2.c"
 13753 ;; Parameters:    Size  Location     Type
 13754 ;;		None
 13755 ;; Auto vars:     Size  Location     Type
 13756 ;;		None
 13757 ;; Return value:  Size  Location     Type
 13758 ;;                  1    wreg      void 
 13759 ;; Registers used:
 13760 ;;		None
 13761 ;; Tracked objects:
 13762 ;;		On entry : 0/0
 13763 ;;		On exit  : 0/0
 13764 ;;		Unchanged: 0/0
 13765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13770 ;;Total ram usage:        0 bytes
 13771 ;; Hardware stack levels used:    1
 13772 ;; Hardware stack levels required when called:    4
 13773 ;; This function calls:
 13774 ;;		Nothing
 13775 ;; This function is called by:
 13776 ;;		_TMR2_StopTimer
 13777 ;; This function uses a non-reentrant model
 13778 ;;
 13779                           
 13780                           
 13781                           ;psect for function _TMR2_Stop
 13782  1F81                     _TMR2_Stop:
 13783  1F81                     l4489:	
 13784                           ;incstack = 0
 13785                           ; Regs used in _TMR2_Stop: []
 13786                           
 13787                           
 13788                           ;tmr2.c: 114: T2CONbits.TMR2ON = 0;
 13789  1F81  0025               	movlb	5	; select bank5
 13790  1F82  138E               	bcf	14,7	;volatile
 13791  1F83                     l662:
 13792  1F83  0008               	return
 13793  1F84                     __end_of_TMR2_Stop:
 13794                           
 13795                           	psect	text19
 13796  1F7E                     __ptext19:	
 13797 ;; *************** function _PWM_Output_D4_Disable *****************
 13798 ;; Defined at:
 13799 ;;		line 354 in file "main.c"
 13800 ;; Parameters:    Size  Location     Type
 13801 ;;		None
 13802 ;; Auto vars:     Size  Location     Type
 13803 ;;		None
 13804 ;; Return value:  Size  Location     Type
 13805 ;;                  1    wreg      void 
 13806 ;; Registers used:
 13807 ;;		None
 13808 ;; Tracked objects:
 13809 ;;		On entry : 0/0
 13810 ;;		On exit  : 0/0
 13811 ;;		Unchanged: 0/0
 13812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;Total ram usage:        0 bytes
 13818 ;; Hardware stack levels used:    1
 13819 ;; Hardware stack levels required when called:    4
 13820 ;; This function calls:
 13821 ;;		Nothing
 13822 ;; This function is called by:
 13823 ;;		_update_menuLCD
 13824 ;;		_main
 13825 ;; This function uses a non-reentrant model
 13826 ;;
 13827                           
 13828                           
 13829                           ;psect for function _PWM_Output_D4_Disable
 13830  1F7E                     _PWM_Output_D4_Disable:
 13831  1F7E                     l4701:	
 13832                           ;incstack = 0
 13833                           ; Regs used in _PWM_Output_D4_Disable: []
 13834                           
 13835                           
 13836                           ;main.c: 355: PWM6EN = 0;
 13837  1F7E  0027               	movlb	7	; select bank7
 13838  1F7F  138E               	bcf	14,7	;volatile
 13839  1F80                     l1264:
 13840  1F80  0008               	return
 13841  1F81                     __end_of_PWM_Output_D4_Disable:
 13842                           
 13843                           	psect	text20
 13844  10D0                     __ptext20:	
 13845 ;; *************** function _PWM6_LoadDutyValue *****************
 13846 ;; Defined at:
 13847 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 13848 ;; Parameters:    Size  Location     Type
 13849 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 13850 ;; Auto vars:     Size  Location     Type
 13851 ;;		None
 13852 ;; Return value:  Size  Location     Type
 13853 ;;                  1    wreg      void 
 13854 ;; Registers used:
 13855 ;;		wreg, status,2, status,0
 13856 ;; Tracked objects:
 13857 ;;		On entry : 0/0
 13858 ;;		On exit  : 0/0
 13859 ;;		Unchanged: 0/0
 13860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13861 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13865 ;;Total ram usage:        4 bytes
 13866 ;; Hardware stack levels used:    1
 13867 ;; Hardware stack levels required when called:    4
 13868 ;; This function calls:
 13869 ;;		Nothing
 13870 ;; This function is called by:
 13871 ;;		_update_menuLCD
 13872 ;;		_checkFlags
 13873 ;;		_main
 13874 ;; This function uses a non-reentrant model
 13875 ;;
 13876                           
 13877                           
 13878                           ;psect for function _PWM6_LoadDutyValue
 13879  10D0                     _PWM6_LoadDutyValue:
 13880  10D0                     l4599:	
 13881                           ;incstack = 0
 13882                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13883                           
 13884                           
 13885                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 13886  10D0  0020               	movlb	0	; select bank0
 13887  10D1  0821               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 13888  10D2  00A3               	movwf	??_PWM6_LoadDutyValue+1
 13889  10D3  0820               	movf	PWM6_LoadDutyValue@dutyValue,w
 13890  10D4  00A2               	movwf	??_PWM6_LoadDutyValue
 13891  10D5  36A3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13892  10D6  0CA2               	rrf	??_PWM6_LoadDutyValue,f
 13893  10D7  36A3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13894  10D8  0CA2               	rrf	??_PWM6_LoadDutyValue,f
 13895  10D9  0822               	movf	??_PWM6_LoadDutyValue,w
 13896  10DA  0027               	movlb	7	; select bank7
 13897  10DB  008D               	movwf	13	;volatile
 13898                           
 13899                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 13900  10DC  0020               	movlb	0	; select bank0
 13901  10DD  0820               	movf	PWM6_LoadDutyValue@dutyValue,w
 13902  10DE  3903               	andlw	3
 13903  10DF  00A2               	movwf	??_PWM6_LoadDutyValue
 13904  10E0  3005               	movlw	5
 13905  10E1                     u3765:
 13906  10E1  35A2               	lslf	??_PWM6_LoadDutyValue,f
 13907  10E2  3EFF               	addlw	-1
 13908  10E3  1D03               	skipz
 13909  10E4  28E1               	goto	u3765
 13910  10E5  3522               	lslf	??_PWM6_LoadDutyValue,w
 13911  10E6  0027               	movlb	7	; select bank7
 13912  10E7  008C               	movwf	12	;volatile
 13913  10E8                     l620:
 13914  10E8  0008               	return
 13915  10E9                     __end_of_PWM6_LoadDutyValue:
 13916                           
 13917                           	psect	text21
 13918  111F                     __ptext21:	
 13919 ;; *************** function _LCDstr *****************
 13920 ;; Defined at:
 13921 ;;		line 320 in file "main.c"
 13922 ;; Parameters:    Size  Location     Type
 13923 ;;  p               2    9[BANK0 ] PTR unsigned char 
 13924 ;;		 -> STR_7(4), update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 13925 ;; Auto vars:     Size  Location     Type
 13926 ;;  c               1   14[BANK0 ] unsigned char 
 13927 ;; Return value:  Size  Location     Type
 13928 ;;                  1    wreg      void 
 13929 ;; Registers used:
 13930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13931 ;; Tracked objects:
 13932 ;;		On entry : 0/0
 13933 ;;		On exit  : 0/0
 13934 ;;		Unchanged: 0/0
 13935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13936 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;Total ram usage:        6 bytes
 13941 ;; Hardware stack levels used:    1
 13942 ;; Hardware stack levels required when called:    7
 13943 ;; This function calls:
 13944 ;;		_LCDchar
 13945 ;; This function is called by:
 13946 ;;		_update_menuLCD
 13947 ;; This function uses a non-reentrant model
 13948 ;;
 13949                           
 13950                           
 13951                           ;psect for function _LCDstr
 13952  111F                     _LCDstr:
 13953  111F                     l4681:	
 13954                           ;incstack = 0
 13955                           ; Regs used in _LCDstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13956                           
 13957                           
 13958                           ;main.c: 322: unsigned char c;;main.c: 324: while((c = *p++)) LCDchar(c);
 13959  111F  2924               	goto	l4685
 13960  1120                     l4683:
 13961  1120  082E               	movf	LCDstr@c,w
 13962  1121  319F  27EB  3191   	fcall	_LCDchar
 13963  1124                     l4685:
 13964  1124  0020               	movlb	0	; select bank0
 13965  1125  082A               	movf	LCDstr@p+1,w
 13966  1126  00AC               	movwf	??_LCDstr+1
 13967  1127  0829               	movf	LCDstr@p,w
 13968  1128  00AB               	movwf	??_LCDstr
 13969  1129  0AA9               	incf	LCDstr@p,f
 13970  112A  1903               	skipnz
 13971  112B  0AAA               	incf	LCDstr@p+1,f
 13972  112C  082B               	movf	??_LCDstr,w
 13973  112D  0084               	movwf	4
 13974  112E  082C               	movf	??_LCDstr+1,w
 13975  112F  0085               	movwf	5
 13976  1130  0800               	movf	0,w	;code access
 13977  1131  00AD               	movwf	??_LCDstr+2
 13978  1132  082D               	movf	??_LCDstr+2,w
 13979  1133  00AE               	movwf	LCDstr@c
 13980  1134  082E               	movf	LCDstr@c,w
 13981  1135  1D03               	btfss	3,2
 13982  1136  2938               	goto	u4031
 13983  1137  2939               	goto	u4030
 13984  1138                     u4031:
 13985  1138  2920               	goto	l4683
 13986  1139                     u4030:
 13987  1139                     l1245:
 13988  1139  0008               	return
 13989  113A                     __end_of_LCDstr:
 13990                           
 13991                           	psect	text22
 13992  1FEB                     __ptext22:	
 13993 ;; *************** function _LCDchar *****************
 13994 ;; Defined at:
 13995 ;;		line 315 in file "main.c"
 13996 ;; Parameters:    Size  Location     Type
 13997 ;;  c               1    wreg     unsigned char 
 13998 ;; Auto vars:     Size  Location     Type
 13999 ;;  c               1    8[BANK0 ] unsigned char 
 14000 ;; Return value:  Size  Location     Type
 14001 ;;                  1    wreg      void 
 14002 ;; Registers used:
 14003 ;;		wreg, status,2, status,0, pclath, cstack
 14004 ;; Tracked objects:
 14005 ;;		On entry : 0/0
 14006 ;;		On exit  : 0/0
 14007 ;;		Unchanged: 0/0
 14008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14012 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;Total ram usage:        1 bytes
 14014 ;; Hardware stack levels used:    1
 14015 ;; Hardware stack levels required when called:    6
 14016 ;; This function calls:
 14017 ;;		_LCDsend2x4
 14018 ;; This function is called by:
 14019 ;;		_LCDstr
 14020 ;;		_update_menuLCD
 14021 ;; This function uses a non-reentrant model
 14022 ;;
 14023                           
 14024                           
 14025                           ;psect for function _LCDchar
 14026  1FEB                     _LCDchar:
 14027                           
 14028                           ;incstack = 0
 14029                           ; Regs used in _LCDchar: [wreg+status,2+status,0+pclath+cstack]
 14030                           ;LCDchar@c stored from wreg
 14031  1FEB  0020               	movlb	0	; select bank0
 14032  1FEC  00A8               	movwf	LCDchar@c
 14033  1FED                     l4509:
 14034                           
 14035                           ;main.c: 317: LCDsend2x4(c, 0x01);
 14036  1FED  01A2               	clrf	LCDsend2x4@mode
 14037  1FEE  0AA2               	incf	LCDsend2x4@mode,f
 14038  1FEF  0828               	movf	LCDchar@c,w
 14039  1FF0  318A  2254  319F   	fcall	_LCDsend2x4
 14040  1FF3                     l1239:
 14041  1FF3  0008               	return
 14042  1FF4                     __end_of_LCDchar:
 14043                           
 14044                           	psect	text23
 14045  1FAD                     __ptext23:	
 14046 ;; *************** function _LCDcmd *****************
 14047 ;; Defined at:
 14048 ;;		line 310 in file "main.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;  c               1    wreg     unsigned char 
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;  c               1    8[BANK0 ] unsigned char 
 14053 ;; Return value:  Size  Location     Type
 14054 ;;                  1    wreg      void 
 14055 ;; Registers used:
 14056 ;;		wreg, status,2, status,0, pclath, cstack
 14057 ;; Tracked objects:
 14058 ;;		On entry : 0/0
 14059 ;;		On exit  : 0/0
 14060 ;;		Unchanged: 0/0
 14061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14063 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;Total ram usage:        1 bytes
 14067 ;; Hardware stack levels used:    1
 14068 ;; Hardware stack levels required when called:    6
 14069 ;; This function calls:
 14070 ;;		_LCDsend2x4
 14071 ;; This function is called by:
 14072 ;;		_update_menuLCD
 14073 ;; This function uses a non-reentrant model
 14074 ;;
 14075                           
 14076                           
 14077                           ;psect for function _LCDcmd
 14078  1FAD                     _LCDcmd:
 14079                           
 14080                           ;incstack = 0
 14081                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
 14082                           ;LCDcmd@c stored from wreg
 14083  1FAD  0020               	movlb	0	; select bank0
 14084  1FAE  00A8               	movwf	LCDcmd@c
 14085  1FAF                     l4679:
 14086                           
 14087                           ;main.c: 312: LCDsend2x4(c, 0);
 14088  1FAF  01A2               	clrf	LCDsend2x4@mode
 14089  1FB0  0828               	movf	LCDcmd@c,w
 14090  1FB1  318A  2254  319F   	fcall	_LCDsend2x4
 14091  1FB4                     l1236:
 14092  1FB4  0008               	return
 14093  1FB5                     __end_of_LCDcmd:
 14094                           
 14095                           	psect	text24
 14096  0E7A                     __ptext24:	
 14097 ;; *************** function _monitoring_TEMP_LUM *****************
 14098 ;; Defined at:
 14099 ;;		line 568 in file "main.c"
 14100 ;; Parameters:    Size  Location     Type
 14101 ;;		None
 14102 ;; Auto vars:     Size  Location     Type
 14103 ;;		None
 14104 ;; Return value:  Size  Location     Type
 14105 ;;                  1    wreg      void 
 14106 ;; Registers used:
 14107 ;;		wreg, status,2, status,0, pclath, cstack
 14108 ;; Tracked objects:
 14109 ;;		On entry : 0/0
 14110 ;;		On exit  : 0/0
 14111 ;;		Unchanged: 0/0
 14112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14117 ;;Total ram usage:        3 bytes
 14118 ;; Hardware stack levels used:    1
 14119 ;; Hardware stack levels required when called:    6
 14120 ;; This function calls:
 14121 ;;		_ADCC_GetSingleConversion
 14122 ;;		_DATAEE_WriteByte
 14123 ;;		___wmul
 14124 ;;		_tsttc
 14125 ;; This function is called by:
 14126 ;;		_checkFlags
 14127 ;; This function uses a non-reentrant model
 14128 ;;
 14129                           
 14130                           
 14131                           ;psect for function _monitoring_TEMP_LUM
 14132  0E7A                     _monitoring_TEMP_LUM:
 14133  0E7A                     l4965:	
 14134                           ;incstack = 0
 14135                           ; Regs used in _monitoring_TEMP_LUM: [wreg+status,2+status,0+pclath+cstack]
 14136                           
 14137                           
 14138                           ;main.c: 569: temp = (uint8_t)tsttc();
 14139  0E7A  318D  252A  318E   	fcall	_tsttc
 14140  0E7D  0020               	movlb	0	; select bank0
 14141  0E7E  00AA               	movwf	??_monitoring_TEMP_LUM
 14142  0E7F  082A               	movf	??_monitoring_TEMP_LUM,w
 14143  0E80  00EE               	movwf	_temp
 14144                           
 14145                           ;main.c: 571: lumLevel = ADCC_GetSingleConversion(channel_ANA0) >> 13;
 14146  0E81  3000               	movlw	0
 14147  0E82  3190  2074  318E   	fcall	_ADCC_GetSingleConversion
 14148  0E85  0020               	movlb	0	; select bank0
 14149  0E86  0820               	movf	?_ADCC_GetSingleConversion,w
 14150  0E87  00AA               	movwf	??_monitoring_TEMP_LUM
 14151  0E88  0821               	movf	?_ADCC_GetSingleConversion+1,w
 14152  0E89  00AB               	movwf	??_monitoring_TEMP_LUM+1
 14153  0E8A  300D               	movlw	13
 14154  0E8B                     u4535:
 14155  0E8B  36AB               	lsrf	??_monitoring_TEMP_LUM+1,f
 14156  0E8C  0CAA               	rrf	??_monitoring_TEMP_LUM,f
 14157  0E8D  0B89               	decfsz	9,f
 14158  0E8E  2E8B               	goto	u4535
 14159  0E8F  082A               	movf	??_monitoring_TEMP_LUM,w
 14160  0E90  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14161  0E91  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14162  0E92  00ED               	movwf	_lumLevel
 14163  0E93                     l4967:
 14164                           
 14165                           ;main.c: 573: if(prevTemp != temp || prevLumLevel != lumLevel){
 14166  0E93  086E               	movf	_temp,w
 14167  0E94  00AA               	movwf	??_monitoring_TEMP_LUM
 14168  0E95  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14169  0E96  0021               	movlb	1	; select bank1
 14170  0E97  0867               	movf	(_prevTemp+1)^(0+128),w
 14171  0E98  0020               	movlb	0	; select bank0
 14172  0E99  062B               	xorwf	??_monitoring_TEMP_LUM+1,w
 14173  0E9A  1D03               	skipz
 14174  0E9B  2EA0               	goto	u4545
 14175  0E9C  0021               	movlb	1	; select bank1
 14176  0E9D  0866               	movf	_prevTemp^(0+128),w
 14177  0E9E  0020               	movlb	0	; select bank0
 14178  0E9F  062A               	xorwf	??_monitoring_TEMP_LUM,w
 14179  0EA0                     u4545:
 14180  0EA0  1D03               	skipz
 14181  0EA1  2EA3               	goto	u4541
 14182  0EA2  2EA4               	goto	u4540
 14183  0EA3                     u4541:
 14184  0EA3  2EB5               	goto	l4971
 14185  0EA4                     u4540:
 14186  0EA4                     l4969:
 14187  0EA4  086D               	movf	_lumLevel,w
 14188  0EA5  00AA               	movwf	??_monitoring_TEMP_LUM
 14189  0EA6  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14190  0EA7  0021               	movlb	1	; select bank1
 14191  0EA8  0865               	movf	(_prevLumLevel+1)^(0+128),w
 14192  0EA9  0020               	movlb	0	; select bank0
 14193  0EAA  062B               	xorwf	??_monitoring_TEMP_LUM+1,w
 14194  0EAB  1D03               	skipz
 14195  0EAC  2EB1               	goto	u4555
 14196  0EAD  0021               	movlb	1	; select bank1
 14197  0EAE  0864               	movf	_prevLumLevel^(0+128),w
 14198  0EAF  0020               	movlb	0	; select bank0
 14199  0EB0  062A               	xorwf	??_monitoring_TEMP_LUM,w
 14200  0EB1                     u4555:
 14201  0EB1  1903               	skipnz
 14202  0EB2  2EB4               	goto	u4551
 14203  0EB3  2EB5               	goto	u4550
 14204  0EB4                     u4551:
 14205  0EB4  2FB3               	goto	l4999
 14206  0EB5                     u4550:
 14207  0EB5                     l4971:
 14208                           
 14209                           ;main.c: 575: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x0 , t.h);
 14210  0EB5  086B               	movf	_iwrite,w
 14211  0EB6  00AA               	movwf	??_monitoring_TEMP_LUM
 14212  0EB7  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14213  0EB8  082A               	movf	??_monitoring_TEMP_LUM,w
 14214  0EB9  00A0               	movwf	___wmul@multiplier
 14215  0EBA  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14216  0EBB  00A1               	movwf	___wmul@multiplier+1
 14217  0EBC  3005               	movlw	5
 14218  0EBD  00A2               	movwf	___wmul@multiplicand
 14219  0EBE  3000               	movlw	0
 14220  0EBF  00A3               	movwf	___wmul@multiplicand+1
 14221  0EC0  3191  21D1  318E   	fcall	___wmul
 14222  0EC3  0020               	movlb	0	; select bank0
 14223  0EC4  0820               	movf	?___wmul,w
 14224  0EC5  3E12               	addlw	18
 14225  0EC6  00A6               	movwf	DATAEE_WriteByte@bAdd
 14226  0EC7  3070               	movlw	112
 14227  0EC8  3D21               	addwfc	?___wmul+1,w
 14228  0EC9  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 14229  0ECA  0865               	movf	_t,w
 14230  0ECB  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14231  0ECC  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14232  0ECD  00A8               	movwf	DATAEE_WriteByte@bData
 14233  0ECE  3192  2279  318E   	fcall	_DATAEE_WriteByte
 14234                           
 14235                           ;main.c: 576: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x1 , t.m);
 14236  0ED1  0020               	movlb	0	; select bank0
 14237  0ED2  086B               	movf	_iwrite,w
 14238  0ED3  00AA               	movwf	??_monitoring_TEMP_LUM
 14239  0ED4  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14240  0ED5  082A               	movf	??_monitoring_TEMP_LUM,w
 14241  0ED6  00A0               	movwf	___wmul@multiplier
 14242  0ED7  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14243  0ED8  00A1               	movwf	___wmul@multiplier+1
 14244  0ED9  3005               	movlw	5
 14245  0EDA  00A2               	movwf	___wmul@multiplicand
 14246  0EDB  3000               	movlw	0
 14247  0EDC  00A3               	movwf	___wmul@multiplicand+1
 14248  0EDD  3191  21D1  318E   	fcall	___wmul
 14249  0EE0  0020               	movlb	0	; select bank0
 14250  0EE1  0820               	movf	?___wmul,w
 14251  0EE2  3E13               	addlw	19
 14252  0EE3  00A6               	movwf	DATAEE_WriteByte@bAdd
 14253  0EE4  3070               	movlw	112
 14254  0EE5  3D21               	addwfc	?___wmul+1,w
 14255  0EE6  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 14256  0EE7  0866               	movf	_t+1,w
 14257  0EE8  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14258  0EE9  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14259  0EEA  00A8               	movwf	DATAEE_WriteByte@bData
 14260  0EEB  3192  2279  318E   	fcall	_DATAEE_WriteByte
 14261                           
 14262                           ;main.c: 577: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x2 , t.s);
 14263  0EEE  0020               	movlb	0	; select bank0
 14264  0EEF  086B               	movf	_iwrite,w
 14265  0EF0  00AA               	movwf	??_monitoring_TEMP_LUM
 14266  0EF1  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14267  0EF2  082A               	movf	??_monitoring_TEMP_LUM,w
 14268  0EF3  00A0               	movwf	___wmul@multiplier
 14269  0EF4  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14270  0EF5  00A1               	movwf	___wmul@multiplier+1
 14271  0EF6  3005               	movlw	5
 14272  0EF7  00A2               	movwf	___wmul@multiplicand
 14273  0EF8  3000               	movlw	0
 14274  0EF9  00A3               	movwf	___wmul@multiplicand+1
 14275  0EFA  3191  21D1  318E   	fcall	___wmul
 14276  0EFD  0020               	movlb	0	; select bank0
 14277  0EFE  0820               	movf	?___wmul,w
 14278  0EFF  3E14               	addlw	20
 14279  0F00  00A6               	movwf	DATAEE_WriteByte@bAdd
 14280  0F01  3070               	movlw	112
 14281  0F02  3D21               	addwfc	?___wmul+1,w
 14282  0F03  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 14283  0F04  0867               	movf	_t+2,w
 14284  0F05  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14285  0F06  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14286  0F07  00A8               	movwf	DATAEE_WriteByte@bData
 14287  0F08  3192  2279  318E   	fcall	_DATAEE_WriteByte
 14288                           
 14289                           ;main.c: 578: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x3 , temp);
 14290  0F0B  0020               	movlb	0	; select bank0
 14291  0F0C  086B               	movf	_iwrite,w
 14292  0F0D  00AA               	movwf	??_monitoring_TEMP_LUM
 14293  0F0E  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14294  0F0F  082A               	movf	??_monitoring_TEMP_LUM,w
 14295  0F10  00A0               	movwf	___wmul@multiplier
 14296  0F11  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14297  0F12  00A1               	movwf	___wmul@multiplier+1
 14298  0F13  3005               	movlw	5
 14299  0F14  00A2               	movwf	___wmul@multiplicand
 14300  0F15  3000               	movlw	0
 14301  0F16  00A3               	movwf	___wmul@multiplicand+1
 14302  0F17  3191  21D1  318E   	fcall	___wmul
 14303  0F1A  0020               	movlb	0	; select bank0
 14304  0F1B  0820               	movf	?___wmul,w
 14305  0F1C  3E15               	addlw	21
 14306  0F1D  00A6               	movwf	DATAEE_WriteByte@bAdd
 14307  0F1E  3070               	movlw	112
 14308  0F1F  3D21               	addwfc	?___wmul+1,w
 14309  0F20  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 14310  0F21  086E               	movf	_temp,w
 14311  0F22  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14312  0F23  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14313  0F24  00A8               	movwf	DATAEE_WriteByte@bData
 14314  0F25  3192  2279  318E   	fcall	_DATAEE_WriteByte
 14315                           
 14316                           ;main.c: 579: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x4 , lumLevel);
 14317  0F28  0020               	movlb	0	; select bank0
 14318  0F29  086B               	movf	_iwrite,w
 14319  0F2A  00AA               	movwf	??_monitoring_TEMP_LUM
 14320  0F2B  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14321  0F2C  082A               	movf	??_monitoring_TEMP_LUM,w
 14322  0F2D  00A0               	movwf	___wmul@multiplier
 14323  0F2E  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14324  0F2F  00A1               	movwf	___wmul@multiplier+1
 14325  0F30  3005               	movlw	5
 14326  0F31  00A2               	movwf	___wmul@multiplicand
 14327  0F32  3000               	movlw	0
 14328  0F33  00A3               	movwf	___wmul@multiplicand+1
 14329  0F34  3191  21D1  318E   	fcall	___wmul
 14330  0F37  0020               	movlb	0	; select bank0
 14331  0F38  0820               	movf	?___wmul,w
 14332  0F39  3E16               	addlw	22
 14333  0F3A  00A6               	movwf	DATAEE_WriteByte@bAdd
 14334  0F3B  3070               	movlw	112
 14335  0F3C  3D21               	addwfc	?___wmul+1,w
 14336  0F3D  00A7               	movwf	DATAEE_WriteByte@bAdd+1
 14337  0F3E  086D               	movf	_lumLevel,w
 14338  0F3F  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14339  0F40  082C               	movf	??_monitoring_TEMP_LUM+2,w
 14340  0F41  00A8               	movwf	DATAEE_WriteByte@bData
 14341  0F42  3192  2279  318E   	fcall	_DATAEE_WriteByte
 14342  0F45                     l4973:
 14343                           
 14344                           ;main.c: 582: if(maxReadings == NREG){
 14345  0F45  0021               	movlb	1	; select bank1
 14346  0F46  0833               	movf	_maxReadings^(0+128),w
 14347  0F47  067D               	xorwf	_NREG,w
 14348  0F48  1D03               	skipz
 14349  0F49  2F4B               	goto	u4561
 14350  0F4A  2F4C               	goto	u4560
 14351  0F4B                     u4561:
 14352  0F4B  2F52               	goto	l4977
 14353  0F4C                     u4560:
 14354  0F4C                     l4975:
 14355                           
 14356                           ;main.c: 583: iread++;
 14357  0F4C  3001               	movlw	1
 14358  0F4D  0020               	movlb	0	; select bank0
 14359  0F4E  00AA               	movwf	??_monitoring_TEMP_LUM
 14360  0F4F  082A               	movf	??_monitoring_TEMP_LUM,w
 14361  0F50  07EC               	addwf	_iread,f
 14362                           
 14363                           ;main.c: 584: } else {
 14364  0F51  2F58               	goto	l1342
 14365  0F52                     l4977:
 14366                           
 14367                           ;main.c: 585: maxReadings++;
 14368  0F52  3001               	movlw	1
 14369  0F53  0020               	movlb	0	; select bank0
 14370  0F54  00AA               	movwf	??_monitoring_TEMP_LUM
 14371  0F55  082A               	movf	??_monitoring_TEMP_LUM,w
 14372  0F56  0021               	movlb	1	; select bank1
 14373  0F57  07B3               	addwf	_maxReadings^(0+128),f
 14374  0F58                     l1342:
 14375                           
 14376                           ;main.c: 586: };main.c: 588: iwrite++;
 14377  0F58  3001               	movlw	1
 14378  0F59  0020               	movlb	0	; select bank0
 14379  0F5A  00AA               	movwf	??_monitoring_TEMP_LUM
 14380  0F5B  082A               	movf	??_monitoring_TEMP_LUM,w
 14381  0F5C  07EB               	addwf	_iwrite,f
 14382  0F5D                     l4979:
 14383                           
 14384                           ;main.c: 589: if(iwrite > NREG - 1){
 14385  0F5D  087D               	movf	_NREG,w
 14386  0F5E  3EFF               	addlw	255
 14387  0F5F  00AA               	movwf	??_monitoring_TEMP_LUM
 14388  0F60  30FF               	movlw	255
 14389  0F61  1803               	skipnc
 14390  0F62  3000               	movlw	0
 14391  0F63  00AB               	movwf	??_monitoring_TEMP_LUM+1
 14392  0F64  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14393  0F65  3A80               	xorlw	128
 14394  0F66  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14395  0F67  3080               	movlw	128
 14396  0F68  022C               	subwf	??_monitoring_TEMP_LUM+2,w
 14397  0F69  1D03               	skipz
 14398  0F6A  2F6D               	goto	u4575
 14399  0F6B  086B               	movf	_iwrite,w
 14400  0F6C  022A               	subwf	??_monitoring_TEMP_LUM,w
 14401  0F6D                     u4575:
 14402  0F6D  1803               	skipnc
 14403  0F6E  2F70               	goto	u4571
 14404  0F6F  2F71               	goto	u4570
 14405  0F70                     u4571:
 14406  0F70  2F76               	goto	l4985
 14407  0F71                     u4570:
 14408  0F71                     l4981:
 14409                           
 14410                           ;main.c: 590: flagNr = 1;
 14411  0F71  0021               	movlb	1	; select bank1
 14412  0F72  01B1               	clrf	_flagNr^(0+128)
 14413  0F73  0AB1               	incf	_flagNr^(0+128),f
 14414  0F74                     l4983:
 14415                           
 14416                           ;main.c: 591: iwrite = 0;
 14417  0F74  0020               	movlb	0	; select bank0
 14418  0F75  01EB               	clrf	_iwrite
 14419  0F76                     l4985:
 14420                           
 14421                           ;main.c: 592: };main.c: 593: if(flagNr){
 14422  0F76  0021               	movlb	1	; select bank1
 14423  0F77  0831               	movf	_flagNr^(0+128),w
 14424  0F78  1903               	btfsc	3,2
 14425  0F79  2F7B               	goto	u4581
 14426  0F7A  2F7C               	goto	u4580
 14427  0F7B                     u4581:
 14428  0F7B  2F82               	goto	l4989
 14429  0F7C                     u4580:
 14430  0F7C                     l4987:
 14431                           
 14432                           ;main.c: 594: nr = NREG;
 14433  0F7C  087D               	movf	_NREG,w
 14434  0F7D  0020               	movlb	0	; select bank0
 14435  0F7E  00AA               	movwf	??_monitoring_TEMP_LUM
 14436  0F7F  082A               	movf	??_monitoring_TEMP_LUM,w
 14437  0F80  00EA               	movwf	_nr
 14438                           
 14439                           ;main.c: 595: } else{
 14440  0F81  2F87               	goto	l4991
 14441  0F82                     l4989:
 14442                           
 14443                           ;main.c: 596: nr++;
 14444  0F82  3001               	movlw	1
 14445  0F83  0020               	movlb	0	; select bank0
 14446  0F84  00AA               	movwf	??_monitoring_TEMP_LUM
 14447  0F85  082A               	movf	??_monitoring_TEMP_LUM,w
 14448  0F86  07EA               	addwf	_nr,f
 14449  0F87                     l4991:
 14450                           
 14451                           ;main.c: 597: };main.c: 599: if(iread > NREG-1){
 14452  0F87  087D               	movf	_NREG,w
 14453  0F88  3EFF               	addlw	255
 14454  0F89  00AA               	movwf	??_monitoring_TEMP_LUM
 14455  0F8A  30FF               	movlw	255
 14456  0F8B  1803               	skipnc
 14457  0F8C  3000               	movlw	0
 14458  0F8D  00AB               	movwf	??_monitoring_TEMP_LUM+1
 14459  0F8E  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14460  0F8F  3A80               	xorlw	128
 14461  0F90  00AC               	movwf	??_monitoring_TEMP_LUM+2
 14462  0F91  3080               	movlw	128
 14463  0F92  022C               	subwf	??_monitoring_TEMP_LUM+2,w
 14464  0F93  1D03               	skipz
 14465  0F94  2F97               	goto	u4595
 14466  0F95  086C               	movf	_iread,w
 14467  0F96  022A               	subwf	??_monitoring_TEMP_LUM,w
 14468  0F97                     u4595:
 14469  0F97  1803               	skipnc
 14470  0F98  2F9A               	goto	u4591
 14471  0F99  2F9B               	goto	u4590
 14472  0F9A                     u4591:
 14473  0F9A  2F9D               	goto	l4995
 14474  0F9B                     u4590:
 14475  0F9B                     l4993:
 14476                           
 14477                           ;main.c: 600: iread = 0;
 14478  0F9B  0020               	movlb	0	; select bank0
 14479  0F9C  01EC               	clrf	_iread
 14480  0F9D                     l4995:
 14481                           
 14482                           ;main.c: 601: };main.c: 603: prevTemp = temp;
 14483  0F9D  0020               	movlb	0	; select bank0
 14484  0F9E  086E               	movf	_temp,w
 14485  0F9F  00AA               	movwf	??_monitoring_TEMP_LUM
 14486  0FA0  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14487  0FA1  082A               	movf	??_monitoring_TEMP_LUM,w
 14488  0FA2  0021               	movlb	1	; select bank1
 14489  0FA3  00E6               	movwf	_prevTemp^(0+128)
 14490  0FA4  0020               	movlb	0	; select bank0
 14491  0FA5  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14492  0FA6  0021               	movlb	1	; select bank1
 14493  0FA7  00E7               	movwf	(_prevTemp+1)^(0+128)
 14494  0FA8                     l4997:
 14495                           
 14496                           ;main.c: 604: prevLumLevel = lumLevel;
 14497  0FA8  0020               	movlb	0	; select bank0
 14498  0FA9  086D               	movf	_lumLevel,w
 14499  0FAA  00AA               	movwf	??_monitoring_TEMP_LUM
 14500  0FAB  01AB               	clrf	??_monitoring_TEMP_LUM+1
 14501  0FAC  082A               	movf	??_monitoring_TEMP_LUM,w
 14502  0FAD  0021               	movlb	1	; select bank1
 14503  0FAE  00E4               	movwf	_prevLumLevel^(0+128)
 14504  0FAF  0020               	movlb	0	; select bank0
 14505  0FB0  082B               	movf	??_monitoring_TEMP_LUM+1,w
 14506  0FB1  0021               	movlb	1	; select bank1
 14507  0FB2  00E5               	movwf	(_prevLumLevel+1)^(0+128)
 14508  0FB3                     l4999:
 14509                           
 14510                           ;main.c: 605: };main.c: 608: if(ALAF == 'A'){
 14511  0FB3  3041               	movlw	65
 14512  0FB4  0020               	movlb	0	; select bank0
 14513  0FB5  066F               	xorwf	_ALAF,w
 14514  0FB6  1D03               	btfss	3,2
 14515  0FB7  2FB9               	goto	u4601
 14516  0FB8  2FBA               	goto	u4600
 14517  0FB9                     u4601:
 14518  0FB9  2FFF               	goto	l1362
 14519  0FBA                     u4600:
 14520  0FBA                     l5001:
 14521                           
 14522                           ;main.c: 610: if((lumAlarm.alarmLum > lumLevel) && (editingLumAlarm == 0)){
 14523  0FBA  0021               	movlb	1	; select bank1
 14524  0FBB  0824               	movf	_lumAlarm^(0+128),w
 14525  0FBC  0020               	movlb	0	; select bank0
 14526  0FBD  026D               	subwf	_lumLevel,w
 14527  0FBE  1803               	skipnc
 14528  0FBF  2FC1               	goto	u4611
 14529  0FC0  2FC2               	goto	u4610
 14530  0FC1                     u4611:
 14531  0FC1  2FDA               	goto	l5015
 14532  0FC2                     u4610:
 14533  0FC2                     l5003:
 14534  0FC2  0021               	movlb	1	; select bank1
 14535  0FC3  0839               	movf	_editingLumAlarm^(0+128),w
 14536  0FC4  1D03               	btfss	3,2
 14537  0FC5  2FC7               	goto	u4621
 14538  0FC6  2FC8               	goto	u4620
 14539  0FC7                     u4621:
 14540  0FC7  2FDA               	goto	l5015
 14541  0FC8                     u4620:
 14542  0FC8                     l5005:
 14543                           
 14544                           ;main.c: 611: if(!lumAlarm.triggered){
 14545  0FC8  0826               	movf	(_lumAlarm^(0+128)+2),w
 14546  0FC9  1D03               	btfss	3,2
 14547  0FCA  2FCC               	goto	u4631
 14548  0FCB  2FCD               	goto	u4630
 14549  0FCC                     u4631:
 14550  0FCC  2FD3               	goto	l5009
 14551  0FCD                     u4630:
 14552  0FCD                     l5007:
 14553                           
 14554                           ;main.c: 612: alarmPWMStart.h = 0xff;
 14555  0FCD  30FF               	movlw	255
 14556  0FCE  0020               	movlb	0	; select bank0
 14557  0FCF  00AA               	movwf	??_monitoring_TEMP_LUM
 14558  0FD0  082A               	movf	??_monitoring_TEMP_LUM,w
 14559  0FD1  0021               	movlb	1	; select bank1
 14560  0FD2  00E1               	movwf	_alarmPWMStart^(0+128)
 14561  0FD3                     l5009:
 14562                           
 14563                           ;main.c: 613: };main.c: 614: lumAlarm.triggered = 1;
 14564  0FD3  01A6               	clrf	(_lumAlarm^(0+128)+2)
 14565  0FD4  0AA6               	incf	(_lumAlarm^(0+128)+2),f
 14566  0FD5                     l5011:
 14567                           
 14568                           ;main.c: 616: lumAlarm.trigger = 1;
 14569  0FD5  01A5               	clrf	(_lumAlarm^(0+128)+1)
 14570  0FD6  0AA5               	incf	(_lumAlarm^(0+128)+1),f
 14571  0FD7                     l5013:
 14572  0FD7  0020               	movlb	0	; select bank0
 14573  0FD8  1616               	bsf	22,4	;volatile
 14574  0FD9  2FDE               	goto	l5019
 14575  0FDA                     l5015:
 14576                           
 14577                           ;main.c: 619: lumAlarm.triggered = 0;
 14578  0FDA  0021               	movlb	1	; select bank1
 14579  0FDB  01A6               	clrf	(_lumAlarm^(0+128)+2)
 14580  0FDC                     l5017:
 14581  0FDC  0020               	movlb	0	; select bank0
 14582  0FDD  1216               	bcf	22,4	;volatile
 14583  0FDE                     l5019:
 14584                           
 14585                           ;main.c: 621: };main.c: 624: if((tempAlarm.alarmTemp < temp) && (editingTempAlarm == 0))
      +                          {
 14586  0FDE  086E               	movf	_temp,w
 14587  0FDF  0021               	movlb	1	; select bank1
 14588  0FE0  0227               	subwf	_tempAlarm^(0+128),w
 14589  0FE1  1803               	skipnc
 14590  0FE2  2FE4               	goto	u4641
 14591  0FE3  2FE5               	goto	u4640
 14592  0FE4                     u4641:
 14593  0FE4  2FFC               	goto	l5033
 14594  0FE5                     u4640:
 14595  0FE5                     l5021:
 14596  0FE5  083A               	movf	_editingTempAlarm^(0+128),w
 14597  0FE6  1D03               	btfss	3,2
 14598  0FE7  2FE9               	goto	u4651
 14599  0FE8  2FEA               	goto	u4650
 14600  0FE9                     u4651:
 14601  0FE9  2FFC               	goto	l5033
 14602  0FEA                     u4650:
 14603  0FEA                     l5023:
 14604                           
 14605                           ;main.c: 625: if(!tempAlarm.triggered){
 14606  0FEA  0829               	movf	(_tempAlarm^(0+128)+2),w
 14607  0FEB  1D03               	btfss	3,2
 14608  0FEC  2FEE               	goto	u4661
 14609  0FED  2FEF               	goto	u4660
 14610  0FEE                     u4661:
 14611  0FEE  2FF5               	goto	l5027
 14612  0FEF                     u4660:
 14613  0FEF                     l5025:
 14614                           
 14615                           ;main.c: 626: alarmPWMStart.h = 0xff;
 14616  0FEF  30FF               	movlw	255
 14617  0FF0  0020               	movlb	0	; select bank0
 14618  0FF1  00AA               	movwf	??_monitoring_TEMP_LUM
 14619  0FF2  082A               	movf	??_monitoring_TEMP_LUM,w
 14620  0FF3  0021               	movlb	1	; select bank1
 14621  0FF4  00E1               	movwf	_alarmPWMStart^(0+128)
 14622  0FF5                     l5027:
 14623                           
 14624                           ;main.c: 627: };main.c: 629: tempAlarm.triggered = 1;
 14625  0FF5  01A9               	clrf	(_tempAlarm^(0+128)+2)
 14626  0FF6  0AA9               	incf	(_tempAlarm^(0+128)+2),f
 14627  0FF7                     l5029:
 14628                           
 14629                           ;main.c: 631: tempAlarm.trigger = 1;
 14630  0FF7  01A8               	clrf	(_tempAlarm^(0+128)+1)
 14631  0FF8  0AA8               	incf	(_tempAlarm^(0+128)+1),f
 14632  0FF9                     l5031:
 14633  0FF9  0020               	movlb	0	; select bank0
 14634  0FFA  1696               	bsf	22,5	;volatile
 14635  0FFB  2FFF               	goto	l1362
 14636  0FFC                     l5033:
 14637                           
 14638                           ;main.c: 635: tempAlarm.triggered = 0;
 14639  0FFC  01A9               	clrf	(_tempAlarm^(0+128)+2)
 14640  0FFD                     l5035:
 14641  0FFD  0020               	movlb	0	; select bank0
 14642  0FFE  1296               	bcf	22,5	;volatile
 14643  0FFF                     l1362:
 14644  0FFF  0008               	return
 14645  1000                     __end_of_monitoring_TEMP_LUM:
 14646                           
 14647                           	psect	text25
 14648  0D2A                     __ptext25:	
 14649 ;; *************** function _tsttc *****************
 14650 ;; Defined at:
 14651 ;;		line 196 in file "main.c"
 14652 ;; Parameters:    Size  Location     Type
 14653 ;;		None
 14654 ;; Auto vars:     Size  Location     Type
 14655 ;;  value           1    3[BANK0 ] unsigned char 
 14656 ;; Return value:  Size  Location     Type
 14657 ;;                  1    wreg      unsigned char 
 14658 ;; Registers used:
 14659 ;;		wreg, status,2, status,0, pclath, cstack
 14660 ;; Tracked objects:
 14661 ;;		On entry : 0/0
 14662 ;;		On exit  : 0/0
 14663 ;;		Unchanged: 0/0
 14664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;Total ram usage:        2 bytes
 14670 ;; Hardware stack levels used:    1
 14671 ;; Hardware stack levels required when called:    5
 14672 ;; This function calls:
 14673 ;;		_ReadI2C
 14674 ;;		_WriteI2C
 14675 ;; This function is called by:
 14676 ;;		_monitoring_TEMP_LUM
 14677 ;; This function uses a non-reentrant model
 14678 ;;
 14679                           
 14680                           
 14681                           ;psect for function _tsttc
 14682  0D2A                     _tsttc:
 14683  0D2A                     l1018:	
 14684                           ;incstack = 0
 14685                           ; Regs used in _tsttc: [wreg+status,2+status,0+pclath+cstack]
 14686                           ;main.c: 198: unsigned char value;;main.c: 199: do{
 14687                           
 14688  0D2A                     l4627:	
 14689                           ;main.c: 200: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14690                           
 14691  0D2A  0023               	movlb	3	; select bank3
 14692  0D2B  0C0F               	rrf	15,w	;volatile
 14693  0D2C  0C89               	rrf	9,f
 14694  0D2D  3901               	andlw	1
 14695  0D2E  0020               	movlb	0	; select bank0
 14696  0D2F  00A2               	movwf	??_tsttc
 14697  0D30  0023               	movlb	3	; select bank3
 14698  0D31  0811               	movf	17,w	;volatile
 14699  0D32  391F               	andlw	31
 14700  0D33  0020               	movlb	0	; select bank0
 14701  0D34  0422               	iorwf	??_tsttc,w
 14702  0D35  1D03               	btfss	3,2
 14703  0D36  2D38               	goto	u3781
 14704  0D37  2D39               	goto	u3780
 14705  0D38                     u3781:
 14706  0D38  2D2A               	goto	l4627
 14707  0D39                     u3780:
 14708  0D39                     l1021:
 14709                           
 14710                           ;main.c: 201: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14711  0D39  0023               	movlb	3	; select bank3
 14712  0D3A  1411               	bsf	17,0	;volatile
 14713  0D3B                     l1022:
 14714  0D3B  1811               	btfsc	17,0	;volatile
 14715  0D3C  2D3E               	goto	u3791
 14716  0D3D  2D3F               	goto	u3790
 14717  0D3E                     u3791:
 14718  0D3E  2D3B               	goto	l1022
 14719  0D3F                     u3790:
 14720  0D3F                     l4629:
 14721  0D3F  0023               	movlb	3	; select bank3
 14722  0D40  0C0F               	rrf	15,w	;volatile
 14723  0D41  0C89               	rrf	9,f
 14724  0D42  3901               	andlw	1
 14725  0D43  0020               	movlb	0	; select bank0
 14726  0D44  00A2               	movwf	??_tsttc
 14727  0D45  0023               	movlb	3	; select bank3
 14728  0D46  0811               	movf	17,w	;volatile
 14729  0D47  391F               	andlw	31
 14730  0D48  0020               	movlb	0	; select bank0
 14731  0D49  0422               	iorwf	??_tsttc,w
 14732  0D4A  1D03               	btfss	3,2
 14733  0D4B  2D4D               	goto	u3801
 14734  0D4C  2D4E               	goto	u3800
 14735  0D4D                     u3801:
 14736  0D4D  2D3F               	goto	l4629
 14737  0D4E                     u3800:
 14738  0D4E                     l4631:
 14739                           
 14740                           ;main.c: 203: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14741  0D4E  309A               	movlw	154
 14742  0D4F  3196  260B  318D   	fcall	_WriteI2C
 14743  0D52                     l4633:
 14744  0D52  0023               	movlb	3	; select bank3
 14745  0D53  0C0F               	rrf	15,w	;volatile
 14746  0D54  0C89               	rrf	9,f
 14747  0D55  3901               	andlw	1
 14748  0D56  0020               	movlb	0	; select bank0
 14749  0D57  00A2               	movwf	??_tsttc
 14750  0D58  0023               	movlb	3	; select bank3
 14751  0D59  0811               	movf	17,w	;volatile
 14752  0D5A  391F               	andlw	31
 14753  0D5B  0020               	movlb	0	; select bank0
 14754  0D5C  0422               	iorwf	??_tsttc,w
 14755  0D5D  1D03               	btfss	3,2
 14756  0D5E  2D60               	goto	u3811
 14757  0D5F  2D61               	goto	u3810
 14758  0D60                     u3811:
 14759  0D60  2D52               	goto	l4633
 14760  0D61                     u3810:
 14761  0D61                     l4635:
 14762                           
 14763                           ;main.c: 204: WriteI2C(0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14764  0D61  3001               	movlw	1
 14765  0D62  3196  260B  318D   	fcall	_WriteI2C
 14766  0D65                     l4637:
 14767  0D65  0023               	movlb	3	; select bank3
 14768  0D66  0C0F               	rrf	15,w	;volatile
 14769  0D67  0C89               	rrf	9,f
 14770  0D68  3901               	andlw	1
 14771  0D69  0020               	movlb	0	; select bank0
 14772  0D6A  00A2               	movwf	??_tsttc
 14773  0D6B  0023               	movlb	3	; select bank3
 14774  0D6C  0811               	movf	17,w	;volatile
 14775  0D6D  391F               	andlw	31
 14776  0D6E  0020               	movlb	0	; select bank0
 14777  0D6F  0422               	iorwf	??_tsttc,w
 14778  0D70  1D03               	btfss	3,2
 14779  0D71  2D73               	goto	u3821
 14780  0D72  2D74               	goto	u3820
 14781  0D73                     u3821:
 14782  0D73  2D65               	goto	l4637
 14783  0D74                     u3820:
 14784  0D74                     l1033:
 14785                           
 14786                           ;main.c: 205: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 14787  0D74  0023               	movlb	3	; select bank3
 14788  0D75  1491               	bsf	17,1	;volatile
 14789  0D76                     l1034:
 14790  0D76  1891               	btfsc	17,1	;volatile
 14791  0D77  2D79               	goto	u3831
 14792  0D78  2D7A               	goto	u3830
 14793  0D79                     u3831:
 14794  0D79  2D76               	goto	l1034
 14795  0D7A                     u3830:
 14796  0D7A                     l4639:
 14797  0D7A  0023               	movlb	3	; select bank3
 14798  0D7B  0C0F               	rrf	15,w	;volatile
 14799  0D7C  0C89               	rrf	9,f
 14800  0D7D  3901               	andlw	1
 14801  0D7E  0020               	movlb	0	; select bank0
 14802  0D7F  00A2               	movwf	??_tsttc
 14803  0D80  0023               	movlb	3	; select bank3
 14804  0D81  0811               	movf	17,w	;volatile
 14805  0D82  391F               	andlw	31
 14806  0D83  0020               	movlb	0	; select bank0
 14807  0D84  0422               	iorwf	??_tsttc,w
 14808  0D85  1D03               	btfss	3,2
 14809  0D86  2D88               	goto	u3841
 14810  0D87  2D89               	goto	u3840
 14811  0D88                     u3841:
 14812  0D88  2D7A               	goto	l4639
 14813  0D89                     u3840:
 14814  0D89                     l4641:
 14815                           
 14816                           ;main.c: 206: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14817  0D89  309B               	movlw	155
 14818  0D8A  3196  260B  318D   	fcall	_WriteI2C
 14819  0D8D                     l4643:
 14820  0D8D  0023               	movlb	3	; select bank3
 14821  0D8E  0C0F               	rrf	15,w	;volatile
 14822  0D8F  0C89               	rrf	9,f
 14823  0D90  3901               	andlw	1
 14824  0D91  0020               	movlb	0	; select bank0
 14825  0D92  00A2               	movwf	??_tsttc
 14826  0D93  0023               	movlb	3	; select bank3
 14827  0D94  0811               	movf	17,w	;volatile
 14828  0D95  391F               	andlw	31
 14829  0D96  0020               	movlb	0	; select bank0
 14830  0D97  0422               	iorwf	??_tsttc,w
 14831  0D98  1D03               	btfss	3,2
 14832  0D99  2D9B               	goto	u3851
 14833  0D9A  2D9C               	goto	u3850
 14834  0D9B                     u3851:
 14835  0D9B  2D8D               	goto	l4643
 14836  0D9C                     u3850:
 14837  0D9C                     l4645:
 14838                           
 14839                           ;main.c: 207: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14840  0D9C  3191  2193  318D   	fcall	_ReadI2C
 14841  0D9F  0020               	movlb	0	; select bank0
 14842  0DA0  00A2               	movwf	??_tsttc
 14843  0DA1  0822               	movf	??_tsttc,w
 14844  0DA2  00A3               	movwf	tsttc@value
 14845  0DA3                     l4647:
 14846  0DA3  0023               	movlb	3	; select bank3
 14847  0DA4  0C0F               	rrf	15,w	;volatile
 14848  0DA5  0C89               	rrf	9,f
 14849  0DA6  3901               	andlw	1
 14850  0DA7  0020               	movlb	0	; select bank0
 14851  0DA8  00A2               	movwf	??_tsttc
 14852  0DA9  0023               	movlb	3	; select bank3
 14853  0DAA  0811               	movf	17,w	;volatile
 14854  0DAB  391F               	andlw	31
 14855  0DAC  0020               	movlb	0	; select bank0
 14856  0DAD  0422               	iorwf	??_tsttc,w
 14857  0DAE  1D03               	btfss	3,2
 14858  0DAF  2DB1               	goto	u3861
 14859  0DB0  2DB2               	goto	u3860
 14860  0DB1                     u3861:
 14861  0DB1  2DA3               	goto	l4647
 14862  0DB2                     u3860:
 14863  0DB2                     l1045:
 14864                           
 14865                           ;main.c: 208: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14866  0DB2  0023               	movlb	3	; select bank3
 14867  0DB3  1691               	bsf	17,5	;volatile
 14868  0DB4  1611               	bsf	17,4	;volatile
 14869  0DB5                     l1046:
 14870  0DB5  1A11               	btfsc	17,4	;volatile
 14871  0DB6  2DB8               	goto	u3871
 14872  0DB7  2DB9               	goto	u3870
 14873  0DB8                     u3871:
 14874  0DB8  2DB5               	goto	l1046
 14875  0DB9                     u3870:
 14876  0DB9                     l4649:
 14877  0DB9  0023               	movlb	3	; select bank3
 14878  0DBA  0C0F               	rrf	15,w	;volatile
 14879  0DBB  0C89               	rrf	9,f
 14880  0DBC  3901               	andlw	1
 14881  0DBD  0020               	movlb	0	; select bank0
 14882  0DBE  00A2               	movwf	??_tsttc
 14883  0DBF  0023               	movlb	3	; select bank3
 14884  0DC0  0811               	movf	17,w	;volatile
 14885  0DC1  391F               	andlw	31
 14886  0DC2  0020               	movlb	0	; select bank0
 14887  0DC3  0422               	iorwf	??_tsttc,w
 14888  0DC4  1D03               	btfss	3,2
 14889  0DC5  2DC7               	goto	u3881
 14890  0DC6  2DC8               	goto	u3880
 14891  0DC7                     u3881:
 14892  0DC7  2DB9               	goto	l4649
 14893  0DC8                     u3880:
 14894  0DC8                     l1051:
 14895                           
 14896                           ;main.c: 209: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 14897  0DC8  0023               	movlb	3	; select bank3
 14898  0DC9  1511               	bsf	17,2	;volatile
 14899  0DCA                     l1052:
 14900  0DCA  1911               	btfsc	17,2	;volatile
 14901  0DCB  2DCD               	goto	u3891
 14902  0DCC  2DCE               	goto	u3890
 14903  0DCD                     u3891:
 14904  0DCD  2DCA               	goto	l1052
 14905  0DCE                     u3890:
 14906  0DCE                     l1054:
 14907                           
 14908                           ;main.c: 210: } while (!(value & 0x40));
 14909  0DCE  0020               	movlb	0	; select bank0
 14910  0DCF  1F23               	btfss	tsttc@value,6
 14911  0DD0  2DD2               	goto	u3901
 14912  0DD1  2DD3               	goto	u3900
 14913  0DD2                     u3901:
 14914  0DD2  2D2A               	goto	l1018
 14915  0DD3                     u3900:
 14916  0DD3                     l4651:
 14917  0DD3  0023               	movlb	3	; select bank3
 14918  0DD4  0C0F               	rrf	15,w	;volatile
 14919  0DD5  0C89               	rrf	9,f
 14920  0DD6  3901               	andlw	1
 14921  0DD7  0020               	movlb	0	; select bank0
 14922  0DD8  00A2               	movwf	??_tsttc
 14923  0DD9  0023               	movlb	3	; select bank3
 14924  0DDA  0811               	movf	17,w	;volatile
 14925  0DDB  391F               	andlw	31
 14926  0DDC  0020               	movlb	0	; select bank0
 14927  0DDD  0422               	iorwf	??_tsttc,w
 14928  0DDE  1D03               	btfss	3,2
 14929  0DDF  2DE1               	goto	u3911
 14930  0DE0  2DE2               	goto	u3910
 14931  0DE1                     u3911:
 14932  0DE1  2DD3               	goto	l4651
 14933  0DE2                     u3910:
 14934  0DE2                     l1058:
 14935                           
 14936                           ;main.c: 213: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14937  0DE2  0023               	movlb	3	; select bank3
 14938  0DE3  1411               	bsf	17,0	;volatile
 14939  0DE4                     l1059:
 14940  0DE4  1811               	btfsc	17,0	;volatile
 14941  0DE5  2DE7               	goto	u3921
 14942  0DE6  2DE8               	goto	u3920
 14943  0DE7                     u3921:
 14944  0DE7  2DE4               	goto	l1059
 14945  0DE8                     u3920:
 14946  0DE8                     l4653:
 14947  0DE8  0023               	movlb	3	; select bank3
 14948  0DE9  0C0F               	rrf	15,w	;volatile
 14949  0DEA  0C89               	rrf	9,f
 14950  0DEB  3901               	andlw	1
 14951  0DEC  0020               	movlb	0	; select bank0
 14952  0DED  00A2               	movwf	??_tsttc
 14953  0DEE  0023               	movlb	3	; select bank3
 14954  0DEF  0811               	movf	17,w	;volatile
 14955  0DF0  391F               	andlw	31
 14956  0DF1  0020               	movlb	0	; select bank0
 14957  0DF2  0422               	iorwf	??_tsttc,w
 14958  0DF3  1D03               	btfss	3,2
 14959  0DF4  2DF6               	goto	u3931
 14960  0DF5  2DF7               	goto	u3930
 14961  0DF6                     u3931:
 14962  0DF6  2DE8               	goto	l4653
 14963  0DF7                     u3930:
 14964  0DF7                     l4655:
 14965                           
 14966                           ;main.c: 214: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14967  0DF7  309A               	movlw	154
 14968  0DF8  3196  260B  318D   	fcall	_WriteI2C
 14969  0DFB                     l4657:
 14970  0DFB  0023               	movlb	3	; select bank3
 14971  0DFC  0C0F               	rrf	15,w	;volatile
 14972  0DFD  0C89               	rrf	9,f
 14973  0DFE  3901               	andlw	1
 14974  0DFF  0020               	movlb	0	; select bank0
 14975  0E00  00A2               	movwf	??_tsttc
 14976  0E01  0023               	movlb	3	; select bank3
 14977  0E02  0811               	movf	17,w	;volatile
 14978  0E03  391F               	andlw	31
 14979  0E04  0020               	movlb	0	; select bank0
 14980  0E05  0422               	iorwf	??_tsttc,w
 14981  0E06  1D03               	btfss	3,2
 14982  0E07  2E09               	goto	u3941
 14983  0E08  2E0A               	goto	u3940
 14984  0E09                     u3941:
 14985  0E09  2DFB               	goto	l4657
 14986  0E0A                     u3940:
 14987  0E0A                     l4659:
 14988                           
 14989                           ;main.c: 215: WriteI2C(0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14990  0E0A  3000               	movlw	0
 14991  0E0B  3196  260B  318D   	fcall	_WriteI2C
 14992  0E0E                     l4661:
 14993  0E0E  0023               	movlb	3	; select bank3
 14994  0E0F  0C0F               	rrf	15,w	;volatile
 14995  0E10  0C89               	rrf	9,f
 14996  0E11  3901               	andlw	1
 14997  0E12  0020               	movlb	0	; select bank0
 14998  0E13  00A2               	movwf	??_tsttc
 14999  0E14  0023               	movlb	3	; select bank3
 15000  0E15  0811               	movf	17,w	;volatile
 15001  0E16  391F               	andlw	31
 15002  0E17  0020               	movlb	0	; select bank0
 15003  0E18  0422               	iorwf	??_tsttc,w
 15004  0E19  1D03               	btfss	3,2
 15005  0E1A  2E1C               	goto	u3951
 15006  0E1B  2E1D               	goto	u3950
 15007  0E1C                     u3951:
 15008  0E1C  2E0E               	goto	l4661
 15009  0E1D                     u3950:
 15010  0E1D                     l1070:
 15011                           
 15012                           ;main.c: 216: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 15013  0E1D  0023               	movlb	3	; select bank3
 15014  0E1E  1491               	bsf	17,1	;volatile
 15015  0E1F                     l1071:
 15016  0E1F  1891               	btfsc	17,1	;volatile
 15017  0E20  2E22               	goto	u3961
 15018  0E21  2E23               	goto	u3960
 15019  0E22                     u3961:
 15020  0E22  2E1F               	goto	l1071
 15021  0E23                     u3960:
 15022  0E23                     l4663:
 15023  0E23  0023               	movlb	3	; select bank3
 15024  0E24  0C0F               	rrf	15,w	;volatile
 15025  0E25  0C89               	rrf	9,f
 15026  0E26  3901               	andlw	1
 15027  0E27  0020               	movlb	0	; select bank0
 15028  0E28  00A2               	movwf	??_tsttc
 15029  0E29  0023               	movlb	3	; select bank3
 15030  0E2A  0811               	movf	17,w	;volatile
 15031  0E2B  391F               	andlw	31
 15032  0E2C  0020               	movlb	0	; select bank0
 15033  0E2D  0422               	iorwf	??_tsttc,w
 15034  0E2E  1D03               	btfss	3,2
 15035  0E2F  2E31               	goto	u3971
 15036  0E30  2E32               	goto	u3970
 15037  0E31                     u3971:
 15038  0E31  2E23               	goto	l4663
 15039  0E32                     u3970:
 15040  0E32                     l4665:
 15041                           
 15042                           ;main.c: 217: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15043  0E32  309B               	movlw	155
 15044  0E33  3196  260B  318D   	fcall	_WriteI2C
 15045  0E36                     l4667:
 15046  0E36  0023               	movlb	3	; select bank3
 15047  0E37  0C0F               	rrf	15,w	;volatile
 15048  0E38  0C89               	rrf	9,f
 15049  0E39  3901               	andlw	1
 15050  0E3A  0020               	movlb	0	; select bank0
 15051  0E3B  00A2               	movwf	??_tsttc
 15052  0E3C  0023               	movlb	3	; select bank3
 15053  0E3D  0811               	movf	17,w	;volatile
 15054  0E3E  391F               	andlw	31
 15055  0E3F  0020               	movlb	0	; select bank0
 15056  0E40  0422               	iorwf	??_tsttc,w
 15057  0E41  1D03               	btfss	3,2
 15058  0E42  2E44               	goto	u3981
 15059  0E43  2E45               	goto	u3980
 15060  0E44                     u3981:
 15061  0E44  2E36               	goto	l4667
 15062  0E45                     u3980:
 15063  0E45                     l4669:
 15064                           
 15065                           ;main.c: 218: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15066  0E45  3191  2193  318D   	fcall	_ReadI2C
 15067  0E48  0020               	movlb	0	; select bank0
 15068  0E49  00A2               	movwf	??_tsttc
 15069  0E4A  0822               	movf	??_tsttc,w
 15070  0E4B  00A3               	movwf	tsttc@value
 15071  0E4C                     l4671:
 15072  0E4C  0023               	movlb	3	; select bank3
 15073  0E4D  0C0F               	rrf	15,w	;volatile
 15074  0E4E  0C89               	rrf	9,f
 15075  0E4F  3901               	andlw	1
 15076  0E50  0020               	movlb	0	; select bank0
 15077  0E51  00A2               	movwf	??_tsttc
 15078  0E52  0023               	movlb	3	; select bank3
 15079  0E53  0811               	movf	17,w	;volatile
 15080  0E54  391F               	andlw	31
 15081  0E55  0020               	movlb	0	; select bank0
 15082  0E56  0422               	iorwf	??_tsttc,w
 15083  0E57  1D03               	btfss	3,2
 15084  0E58  2E5A               	goto	u3991
 15085  0E59  2E5B               	goto	u3990
 15086  0E5A                     u3991:
 15087  0E5A  2E4C               	goto	l4671
 15088  0E5B                     u3990:
 15089  0E5B                     l1082:
 15090                           
 15091                           ;main.c: 219: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15092  0E5B  0023               	movlb	3	; select bank3
 15093  0E5C  1691               	bsf	17,5	;volatile
 15094  0E5D  1611               	bsf	17,4	;volatile
 15095  0E5E                     l1083:
 15096  0E5E  1A11               	btfsc	17,4	;volatile
 15097  0E5F  2E61               	goto	u4001
 15098  0E60  2E62               	goto	u4000
 15099  0E61                     u4001:
 15100  0E61  2E5E               	goto	l1083
 15101  0E62                     u4000:
 15102  0E62                     l4673:
 15103  0E62  0023               	movlb	3	; select bank3
 15104  0E63  0C0F               	rrf	15,w	;volatile
 15105  0E64  0C89               	rrf	9,f
 15106  0E65  3901               	andlw	1
 15107  0E66  0020               	movlb	0	; select bank0
 15108  0E67  00A2               	movwf	??_tsttc
 15109  0E68  0023               	movlb	3	; select bank3
 15110  0E69  0811               	movf	17,w	;volatile
 15111  0E6A  391F               	andlw	31
 15112  0E6B  0020               	movlb	0	; select bank0
 15113  0E6C  0422               	iorwf	??_tsttc,w
 15114  0E6D  1D03               	btfss	3,2
 15115  0E6E  2E70               	goto	u4011
 15116  0E6F  2E71               	goto	u4010
 15117  0E70                     u4011:
 15118  0E70  2E62               	goto	l4673
 15119  0E71                     u4010:
 15120  0E71                     l1088:
 15121                           
 15122                           ;main.c: 220: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 15123  0E71  0023               	movlb	3	; select bank3
 15124  0E72  1511               	bsf	17,2	;volatile
 15125  0E73                     l1089:
 15126  0E73  1911               	btfsc	17,2	;volatile
 15127  0E74  2E76               	goto	u4021
 15128  0E75  2E77               	goto	u4020
 15129  0E76                     u4021:
 15130  0E76  2E73               	goto	l1089
 15131  0E77                     u4020:
 15132  0E77                     l4675:
 15133                           
 15134                           ;main.c: 222: return value;
 15135  0E77  0020               	movlb	0	; select bank0
 15136  0E78  0823               	movf	tsttc@value,w
 15137  0E79                     l1092:
 15138  0E79  0008               	return
 15139  0E7A                     __end_of_tsttc:
 15140                           
 15141                           	psect	text26
 15142  1193                     __ptext26:	
 15143 ;; *************** function _ReadI2C *****************
 15144 ;; Defined at:
 15145 ;;		line 32 in file "I2C/i2c.c"
 15146 ;; Parameters:    Size  Location     Type
 15147 ;;		None
 15148 ;; Auto vars:     Size  Location     Type
 15149 ;;		None
 15150 ;; Return value:  Size  Location     Type
 15151 ;;                  1    wreg      unsigned char 
 15152 ;; Registers used:
 15153 ;;		wreg, status,2, status,0
 15154 ;; Tracked objects:
 15155 ;;		On entry : 0/0
 15156 ;;		On exit  : 0/0
 15157 ;;		Unchanged: 0/0
 15158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15163 ;;Total ram usage:        1 bytes
 15164 ;; Hardware stack levels used:    1
 15165 ;; Hardware stack levels required when called:    4
 15166 ;; This function calls:
 15167 ;;		Nothing
 15168 ;; This function is called by:
 15169 ;;		_tsttc
 15170 ;;		_LCDrecv
 15171 ;; This function uses a non-reentrant model
 15172 ;;
 15173                           
 15174                           
 15175                           ;psect for function _ReadI2C
 15176  1193                     _ReadI2C:
 15177  1193                     l4481:	
 15178                           ;incstack = 0
 15179                           ; Regs used in _ReadI2C: [wreg+status,2+status,0]
 15180                           
 15181                           
 15182                           ;i2c.c: 34: if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 15183  1193  300F               	movlw	15
 15184  1194  0023               	movlb	3	; select bank3
 15185  1195  0510               	andwf	16,w	;volatile
 15186  1196  0020               	movlb	0	; select bank0
 15187  1197  00A0               	movwf	??_ReadI2C
 15188  1198  3008               	movlw	8
 15189  1199  0620               	xorwf	??_ReadI2C,w
 15190  119A  1903               	btfsc	3,2
 15191  119B  299D               	goto	u3501
 15192  119C  299E               	goto	u3500
 15193  119D                     u3501:
 15194  119D  29A9               	goto	l22
 15195  119E                     u3500:
 15196  119E                     l4483:
 15197  119E  300F               	movlw	15
 15198  119F  0023               	movlb	3	; select bank3
 15199  11A0  0510               	andwf	16,w	;volatile
 15200  11A1  0020               	movlb	0	; select bank0
 15201  11A2  00A0               	movwf	??_ReadI2C
 15202  11A3  300B               	movlw	11
 15203  11A4  0620               	xorwf	??_ReadI2C,w
 15204  11A5  1D03               	btfss	3,2
 15205  11A6  29A8               	goto	u3511
 15206  11A7  29A9               	goto	u3510
 15207  11A8                     u3511:
 15208  11A8  29AB               	goto	l23
 15209  11A9                     u3510:
 15210  11A9                     l22:
 15211                           
 15212                           ;i2c.c: 35: SSP1CON2bits.RCEN = 1;
 15213  11A9  0023               	movlb	3	; select bank3
 15214  11AA  1591               	bsf	17,3	;volatile
 15215  11AB                     l23:
 15216  11AB  0023               	movlb	3	; select bank3
 15217  11AC  1C0F               	btfss	15,0	;volatile
 15218  11AD  29AF               	goto	u3521
 15219  11AE  29B0               	goto	u3520
 15220  11AF                     u3521:
 15221  11AF  29AB               	goto	l23
 15222  11B0                     u3520:
 15223  11B0                     l4485:
 15224                           
 15225                           ;i2c.c: 37: return ( SSP1BUF );
 15226  11B0  080C               	movf	12,w	;volatile
 15227  11B1                     l26:
 15228  11B1  0008               	return
 15229  11B2                     __end_of_ReadI2C:
 15230                           
 15231                           	psect	text27
 15232  1279                     __ptext27:	
 15233 ;; *************** function _DATAEE_WriteByte *****************
 15234 ;; Defined at:
 15235 ;;		line 180 in file "mcc_generated_files/memory.c"
 15236 ;; Parameters:    Size  Location     Type
 15237 ;;  bAdd            2    6[BANK0 ] unsigned int 
 15238 ;;  bData           1    8[BANK0 ] unsigned char 
 15239 ;; Auto vars:     Size  Location     Type
 15240 ;;  GIEBitValue     1    9[BANK0 ] unsigned char 
 15241 ;; Return value:  Size  Location     Type
 15242 ;;                  1    wreg      void 
 15243 ;; Registers used:
 15244 ;;		wreg, status,2, status,0
 15245 ;; Tracked objects:
 15246 ;;		On entry : 0/0
 15247 ;;		On exit  : 0/0
 15248 ;;		Unchanged: 0/0
 15249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15250 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15254 ;;Total ram usage:        4 bytes
 15255 ;; Hardware stack levels used:    1
 15256 ;; Hardware stack levels required when called:    4
 15257 ;; This function calls:
 15258 ;;		Nothing
 15259 ;; This function is called by:
 15260 ;;		_wirteEEPROMinit
 15261 ;;		_monitoring_TEMP_LUM
 15262 ;;		_main
 15263 ;; This function uses a non-reentrant model
 15264 ;;
 15265                           
 15266                           
 15267                           ;psect for function _DATAEE_WriteByte
 15268  1279                     _DATAEE_WriteByte:
 15269  1279                     l4605:	
 15270                           ;incstack = 0
 15271                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 15272                           
 15273                           
 15274                           ;memory.c: 182: uint8_t GIEBitValue = INTCONbits.GIE;
 15275  1279  3000               	movlw	0
 15276  127A  1B8B               	btfsc	11,7	;volatile
 15277  127B  3001               	movlw	1
 15278  127C  0020               	movlb	0	; select bank0
 15279  127D  00A9               	movwf	DATAEE_WriteByte@GIEBitValue
 15280                           
 15281                           ;memory.c: 184: NVMADRH = ((bAdd >> 8) & 0xFF);
 15282  127E  0827               	movf	DATAEE_WriteByte@bAdd+1,w
 15283  127F  0030               	movlb	16	; select bank16
 15284  1280  009B               	movwf	27	;volatile
 15285  1281                     l4607:
 15286                           
 15287                           ;memory.c: 185: NVMADRL = (bAdd & 0xFF);
 15288  1281  0020               	movlb	0	; select bank0
 15289  1282  0826               	movf	DATAEE_WriteByte@bAdd,w
 15290  1283  0030               	movlb	16	; select bank16
 15291  1284  009A               	movwf	26	;volatile
 15292  1285                     l4609:
 15293                           
 15294                           ;memory.c: 186: NVMDATL = bData;
 15295  1285  0020               	movlb	0	; select bank0
 15296  1286  0828               	movf	DATAEE_WriteByte@bData,w
 15297  1287  0030               	movlb	16	; select bank16
 15298  1288  009C               	movwf	28	;volatile
 15299  1289                     l4611:
 15300                           
 15301                           ;memory.c: 187: NVMCON1bits.NVMREGS = 1;
 15302  1289  171E               	bsf	30,6	;volsfr
 15303  128A                     l4613:
 15304                           
 15305                           ;memory.c: 188: NVMCON1bits.WREN = 1;
 15306  128A  151E               	bsf	30,2	;volsfr
 15307  128B                     l4615:
 15308                           
 15309                           ;memory.c: 189: INTCONbits.GIE = 0;
 15310  128B  138B               	bcf	11,7	;volatile
 15311  128C                     l4617:
 15312                           
 15313                           ;memory.c: 190: NVMCON2 = 0x55;
 15314  128C  3055               	movlw	85
 15315  128D  009F               	movwf	31	;volsfr
 15316  128E                     l4619:
 15317                           
 15318                           ;memory.c: 191: NVMCON2 = 0xAA;
 15319  128E  30AA               	movlw	170
 15320  128F  009F               	movwf	31	;volsfr
 15321  1290                     l4621:
 15322                           
 15323                           ;memory.c: 192: NVMCON1bits.WR = 1;
 15324  1290  149E               	bsf	30,1	;volsfr
 15325  1291                     l728:	
 15326                           ;memory.c: 195: {
 15327                           
 15328  1291  189E               	btfsc	30,1	;volsfr
 15329  1292  2A94               	goto	u3771
 15330  1293  2A95               	goto	u3770
 15331  1294                     u3771:
 15332  1294  2A91               	goto	l728
 15333  1295                     u3770:
 15334  1295                     l730:
 15335                           
 15336                           ;memory.c: 196: };memory.c: 198: NVMCON1bits.WREN = 0;
 15337  1295  111E               	bcf	30,2	;volsfr
 15338  1296                     l4623:
 15339                           
 15340                           ;memory.c: 199: INTCONbits.GIE = GIEBitValue;
 15341  1296  0020               	movlb	0	; select bank0
 15342  1297  0C29               	rrf	DATAEE_WriteByte@GIEBitValue,w
 15343  1298  1C03               	skipc
 15344  1299  138B               	bcf	11,7	;volatile
 15345  129A  1803               	skipnc
 15346  129B  178B               	bsf	11,7	;volatile
 15347  129C                     l731:
 15348  129C  0008               	return
 15349  129D                     __end_of_DATAEE_WriteByte:
 15350                           
 15351                           	psect	text28
 15352  1074                     __ptext28:	
 15353 ;; *************** function _ADCC_GetSingleConversion *****************
 15354 ;; Defined at:
 15355 ;;		line 130 in file "mcc_generated_files/adcc.c"
 15356 ;; Parameters:    Size  Location     Type
 15357 ;;  channel         1    wreg     enum E12086
 15358 ;; Auto vars:     Size  Location     Type
 15359 ;;  channel         1    3[BANK0 ] enum E12086
 15360 ;; Return value:  Size  Location     Type
 15361 ;;                  2    0[BANK0 ] unsigned int 
 15362 ;; Registers used:
 15363 ;;		wreg
 15364 ;; Tracked objects:
 15365 ;;		On entry : 0/0
 15366 ;;		On exit  : 0/0
 15367 ;;		Unchanged: 0/0
 15368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15369 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;Total ram usage:        4 bytes
 15374 ;; Hardware stack levels used:    1
 15375 ;; Hardware stack levels required when called:    4
 15376 ;; This function calls:
 15377 ;;		Nothing
 15378 ;; This function is called by:
 15379 ;;		_monitoring_TEMP_LUM
 15380 ;; This function uses a non-reentrant model
 15381 ;;
 15382                           
 15383                           
 15384                           ;psect for function _ADCC_GetSingleConversion
 15385  1074                     _ADCC_GetSingleConversion:
 15386                           
 15387                           ;incstack = 0
 15388                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 15389                           ;ADCC_GetSingleConversion@channel stored from wreg
 15390  1074  0020               	movlb	0	; select bank0
 15391  1075  00A3               	movwf	ADCC_GetSingleConversion@channel
 15392  1076                     l4585:
 15393                           
 15394                           ;adcc.c: 133: ADPCH = channel;
 15395  1076  0823               	movf	ADCC_GetSingleConversion@channel,w
 15396  1077  0021               	movlb	1	; select bank1
 15397  1078  009E               	movwf	30	;volatile
 15398  1079                     l4587:
 15399                           
 15400                           ;adcc.c: 136: ADCON0bits.ADON = 1;
 15401  1079  1793               	bsf	19,7	;volatile
 15402  107A                     l4589:
 15403                           
 15404                           ;adcc.c: 139: ADCON0bits.ADCONT = 0;
 15405  107A  1313               	bcf	19,6	;volatile
 15406  107B                     l4591:
 15407                           
 15408                           ;adcc.c: 142: ADCON0bits.ADGO = 1;
 15409  107B  1413               	bsf	19,0	;volatile
 15410  107C                     l4593:
 15411                           
 15412                           ;adcc.c: 145: __nop();
 15413  107C  0000               	nop
 15414  107D                     l537:	
 15415                           ;adcc.c: 149: {
 15416                           
 15417  107D  0021               	movlb	1	; select bank1
 15418  107E  1813               	btfsc	19,0	;volatile
 15419  107F  2881               	goto	u3751
 15420  1080  2882               	goto	u3750
 15421  1081                     u3751:
 15422  1081  287D               	goto	l537
 15423  1082                     u3750:
 15424  1082                     l4595:
 15425                           
 15426                           ;adcc.c: 150: };adcc.c: 154: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 15427  1082  080D               	movf	13,w	;volatile
 15428  1083  0020               	movlb	0	; select bank0
 15429  1084  00A1               	movwf	?_ADCC_GetSingleConversion+1
 15430  1085  0021               	movlb	1	; select bank1
 15431  1086  080C               	movf	12,w	;volatile
 15432  1087  0020               	movlb	0	; select bank0
 15433  1088  00A0               	movwf	?_ADCC_GetSingleConversion
 15434  1089                     l540:
 15435  1089  0008               	return
 15436  108A                     __end_of_ADCC_GetSingleConversion:
 15437                           
 15438                           	psect	text29
 15439  1F84                     __ptext29:	
 15440 ;; *************** function _TMR2_StartTimer *****************
 15441 ;; Defined at:
 15442 ;;		line 106 in file "mcc_generated_files/tmr2.c"
 15443 ;; Parameters:    Size  Location     Type
 15444 ;;		None
 15445 ;; Auto vars:     Size  Location     Type
 15446 ;;		None
 15447 ;; Return value:  Size  Location     Type
 15448 ;;                  1    wreg      void 
 15449 ;; Registers used:
 15450 ;;		status,2, status,0, pclath, cstack
 15451 ;; Tracked objects:
 15452 ;;		On entry : 0/0
 15453 ;;		On exit  : 0/0
 15454 ;;		Unchanged: 0/0
 15455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15460 ;;Total ram usage:        0 bytes
 15461 ;; Hardware stack levels used:    1
 15462 ;; Hardware stack levels required when called:    5
 15463 ;; This function calls:
 15464 ;;		_TMR2_Start
 15465 ;; This function is called by:
 15466 ;;		_checkFlags
 15467 ;; This function uses a non-reentrant model
 15468 ;;
 15469                           
 15470                           
 15471                           ;psect for function _TMR2_StartTimer
 15472  1F84                     _TMR2_StartTimer:
 15473  1F84                     l4815:	
 15474                           ;incstack = 0
 15475                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
 15476                           
 15477                           
 15478                           ;tmr2.c: 108: TMR2_Start();
 15479  1F84  319F  277B  319F   	fcall	_TMR2_Start
 15480  1F87                     l659:
 15481  1F87  0008               	return
 15482  1F88                     __end_of_TMR2_StartTimer:
 15483                           
 15484                           	psect	text30
 15485  1F7B                     __ptext30:	
 15486 ;; *************** function _TMR2_Start *****************
 15487 ;; Defined at:
 15488 ;;		line 100 in file "mcc_generated_files/tmr2.c"
 15489 ;; Parameters:    Size  Location     Type
 15490 ;;		None
 15491 ;; Auto vars:     Size  Location     Type
 15492 ;;		None
 15493 ;; Return value:  Size  Location     Type
 15494 ;;                  1    wreg      void 
 15495 ;; Registers used:
 15496 ;;		None
 15497 ;; Tracked objects:
 15498 ;;		On entry : 0/0
 15499 ;;		On exit  : 0/0
 15500 ;;		Unchanged: 0/0
 15501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;Total ram usage:        0 bytes
 15507 ;; Hardware stack levels used:    1
 15508 ;; Hardware stack levels required when called:    4
 15509 ;; This function calls:
 15510 ;;		Nothing
 15511 ;; This function is called by:
 15512 ;;		_TMR2_StartTimer
 15513 ;; This function uses a non-reentrant model
 15514 ;;
 15515                           
 15516                           
 15517                           ;psect for function _TMR2_Start
 15518  1F7B                     _TMR2_Start:
 15519  1F7B                     l4601:	
 15520                           ;incstack = 0
 15521                           ; Regs used in _TMR2_Start: []
 15522                           
 15523                           
 15524                           ;tmr2.c: 103: T2CONbits.TMR2ON = 1;
 15525  1F7B  0025               	movlb	5	; select bank5
 15526  1F7C  178E               	bsf	14,7	;volatile
 15527  1F7D                     l656:
 15528  1F7D  0008               	return
 15529  1F7E                     __end_of_TMR2_Start:
 15530                           
 15531                           	psect	text31
 15532  1665                     __ptext31:	
 15533 ;; *************** function _S1button *****************
 15534 ;; Defined at:
 15535 ;;		line 641 in file "main.c"
 15536 ;; Parameters:    Size  Location     Type
 15537 ;;		None
 15538 ;; Auto vars:     Size  Location     Type
 15539 ;;		None
 15540 ;; Return value:  Size  Location     Type
 15541 ;;                  1    wreg      void 
 15542 ;; Registers used:
 15543 ;;		wreg, status,2, status,0
 15544 ;; Tracked objects:
 15545 ;;		On entry : 0/0
 15546 ;;		On exit  : 0/0
 15547 ;;		Unchanged: 0/0
 15548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15552 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15553 ;;Total ram usage:        1 bytes
 15554 ;; Hardware stack levels used:    1
 15555 ;; Hardware stack levels required when called:    4
 15556 ;; This function calls:
 15557 ;;		Nothing
 15558 ;; This function is called by:
 15559 ;;		_checkFlags
 15560 ;; This function uses a non-reentrant model
 15561 ;;
 15562                           
 15563                           
 15564                           ;psect for function _S1button
 15565  1665                     _S1button:
 15566  1665                     l5037:	
 15567                           ;incstack = 0
 15568                           ; Regs used in _S1button: [wreg+status,2+status,0]
 15569                           
 15570                           
 15571                           ;main.c: 643: if(modeFlag == 0 && (clkAlarm.trigger || tempAlarm.trigger || lumAlarm.tri
      +                          gger)){
 15572  1665  0020               	movlb	0	; select bank0
 15573  1666  0868               	movf	_modeFlag,w
 15574  1667  0469               	iorwf	_modeFlag+1,w
 15575  1668  1D03               	btfss	3,2
 15576  1669  2E6B               	goto	u4671
 15577  166A  2E6C               	goto	u4670
 15578  166B                     u4671:
 15579  166B  2E82               	goto	l5049
 15580  166C                     u4670:
 15581  166C                     l5039:
 15582  166C  0021               	movlb	1	; select bank1
 15583  166D  0823               	movf	(_clkAlarm^(0+128)+3),w
 15584  166E  1D03               	btfss	3,2
 15585  166F  2E71               	goto	u4681
 15586  1670  2E72               	goto	u4680
 15587  1671                     u4681:
 15588  1671  2E7C               	goto	l5045
 15589  1672                     u4680:
 15590  1672                     l5041:
 15591  1672  0828               	movf	(_tempAlarm^(0+128)+1),w
 15592  1673  1D03               	btfss	3,2
 15593  1674  2E76               	goto	u4691
 15594  1675  2E77               	goto	u4690
 15595  1676                     u4691:
 15596  1676  2E7C               	goto	l5045
 15597  1677                     u4690:
 15598  1677                     l5043:
 15599  1677  0825               	movf	(_lumAlarm^(0+128)+1),w
 15600  1678  1903               	btfsc	3,2
 15601  1679  2E7B               	goto	u4701
 15602  167A  2E7C               	goto	u4700
 15603  167B                     u4701:
 15604  167B  2E82               	goto	l5049
 15605  167C                     u4700:
 15606  167C                     l5045:
 15607                           
 15608                           ;main.c: 644: clkAlarm.trigger = 0;
 15609  167C  01A3               	clrf	(_clkAlarm^(0+128)+3)
 15610                           
 15611                           ;main.c: 645: tempAlarm.trigger = 0;
 15612  167D  01A8               	clrf	(_tempAlarm^(0+128)+1)
 15613                           
 15614                           ;main.c: 646: lumAlarm.trigger = 0;
 15615  167E  01A5               	clrf	(_lumAlarm^(0+128)+1)
 15616  167F                     l5047:
 15617                           
 15618                           ;main.c: 647: updateLCD = 1;
 15619  167F  01E8               	clrf	_updateLCD^(0+128)
 15620  1680  0AE8               	incf	_updateLCD^(0+128),f
 15621                           
 15622                           ;main.c: 648: } else{
 15623  1681  2EB5               	goto	l1368
 15624  1682                     l5049:
 15625                           
 15626                           ;main.c: 649: if(modeFlag == 1){
 15627  1682  0020               	movlb	0	; select bank0
 15628  1683  0368               	decf	_modeFlag,w
 15629  1684  0469               	iorwf	_modeFlag+1,w
 15630  1685  1D03               	btfss	3,2
 15631  1686  2E88               	goto	u4711
 15632  1687  2E89               	goto	u4710
 15633  1688                     u4711:
 15634  1688  2EAA               	goto	l5057
 15635  1689                     u4710:
 15636  1689                     l5051:
 15637                           
 15638                           ;main.c: 650: if(editingClockAlarm >= 1){
 15639  1689  087C               	movf	_editingClockAlarm+1,w
 15640  168A  3A80               	xorlw	128
 15641  168B  00A0               	movwf	??_S1button
 15642  168C  3080               	movlw	128
 15643  168D  0220               	subwf	??_S1button,w
 15644  168E  1D03               	skipz
 15645  168F  2E92               	goto	u4725
 15646  1690  3001               	movlw	1
 15647  1691  027B               	subwf	_editingClockAlarm,w
 15648  1692                     u4725:
 15649  1692  1C03               	skipc
 15650  1693  2E95               	goto	u4721
 15651  1694  2E96               	goto	u4720
 15652  1695                     u4721:
 15653  1695  2E9A               	goto	l1370
 15654  1696                     u4720:
 15655  1696                     l5053:
 15656                           
 15657                           ;main.c: 651: editingClockAlarm++;
 15658  1696  3001               	movlw	1
 15659  1697  07FB               	addwf	_editingClockAlarm,f
 15660  1698  3000               	movlw	0
 15661  1699  3DFC               	addwfc	_editingClockAlarm+1,f
 15662  169A                     l1370:
 15663                           
 15664                           ;main.c: 652: };main.c: 653: if(editingClockAlarm > 3){
 15665  169A  087C               	movf	_editingClockAlarm+1,w
 15666  169B  3A80               	xorlw	128
 15667  169C  0020               	movlb	0	; select bank0
 15668  169D  00A0               	movwf	??_S1button
 15669  169E  3080               	movlw	128
 15670  169F  0220               	subwf	??_S1button,w
 15671  16A0  1D03               	skipz
 15672  16A1  2EA4               	goto	u4735
 15673  16A2  3004               	movlw	4
 15674  16A3  027B               	subwf	_editingClockAlarm,w
 15675  16A4                     u4735:
 15676  16A4  1C03               	skipc
 15677  16A5  2EA7               	goto	u4731
 15678  16A6  2EA8               	goto	u4730
 15679  16A7                     u4731:
 15680  16A7  2EAA               	goto	l5057
 15681  16A8                     u4730:
 15682  16A8                     l5055:
 15683                           
 15684                           ;main.c: 654: editingClockAlarm = 0;
 15685  16A8  01FB               	clrf	_editingClockAlarm
 15686  16A9  01FC               	clrf	_editingClockAlarm+1
 15687  16AA                     l5057:
 15688                           
 15689                           ;main.c: 655: };main.c: 656: };main.c: 657: if(editingClockAlarm == 0){
 15690  16AA  087B               	movf	_editingClockAlarm,w
 15691  16AB  047C               	iorwf	_editingClockAlarm+1,w
 15692  16AC  1D03               	btfss	3,2
 15693  16AD  2EAF               	goto	u4741
 15694  16AE  2EB0               	goto	u4740
 15695  16AF                     u4741:
 15696  16AF  2EB5               	goto	l1368
 15697  16B0                     u4740:
 15698  16B0                     l5059:
 15699                           
 15700                           ;main.c: 658: modeFlag++;
 15701  16B0  3001               	movlw	1
 15702  16B1  0020               	movlb	0	; select bank0
 15703  16B2  07E8               	addwf	_modeFlag,f
 15704  16B3  3000               	movlw	0
 15705  16B4  3DE9               	addwfc	_modeFlag+1,f
 15706  16B5                     l1368:
 15707                           
 15708                           ;main.c: 659: };main.c: 660: };main.c: 661: _delay((unsigned long)((50)*(1000000/4000.0)
      +                          ));
 15709  16B5  3011               	movlw	17
 15710  16B6  0020               	movlb	0	; select bank0
 15711  16B7  00A0               	movwf	??_S1button
 15712  16B8  303A               	movlw	58
 15713  16B9                     u6547:
 15714  16B9  0B89               	decfsz	9,f
 15715  16BA  2EB9               	goto	u6547
 15716  16BB  0BA0               	decfsz	??_S1button,f
 15717  16BC  2EB9               	goto	u6547
 15718  16BD  0000               	nop
 15719  16BE                     l1373:
 15720  16BE  0008               	return
 15721  16BF                     __end_of_S1button:
 15722                           
 15723                           	psect	text32
 15724  1F78                     __ptext32:	
 15725 ;; *************** function _PWM_Output_D4_Enable *****************
 15726 ;; Defined at:
 15727 ;;		line 350 in file "main.c"
 15728 ;; Parameters:    Size  Location     Type
 15729 ;;		None
 15730 ;; Auto vars:     Size  Location     Type
 15731 ;;		None
 15732 ;; Return value:  Size  Location     Type
 15733 ;;                  1    wreg      void 
 15734 ;; Registers used:
 15735 ;;		None
 15736 ;; Tracked objects:
 15737 ;;		On entry : 0/0
 15738 ;;		On exit  : 0/0
 15739 ;;		Unchanged: 0/0
 15740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15745 ;;Total ram usage:        0 bytes
 15746 ;; Hardware stack levels used:    1
 15747 ;; Hardware stack levels required when called:    4
 15748 ;; This function calls:
 15749 ;;		Nothing
 15750 ;; This function is called by:
 15751 ;;		_checkFlags
 15752 ;; This function uses a non-reentrant model
 15753 ;;
 15754                           
 15755                           
 15756                           ;psect for function _PWM_Output_D4_Enable
 15757  1F78                     _PWM_Output_D4_Enable:
 15758  1F78                     l4823:	
 15759                           ;incstack = 0
 15760                           ; Regs used in _PWM_Output_D4_Enable: []
 15761                           
 15762                           
 15763                           ;main.c: 351: PWM6EN = 1;
 15764  1F78  0027               	movlb	7	; select bank7
 15765  1F79  178E               	bsf	14,7	;volatile
 15766  1F7A                     l1261:
 15767  1F7A  0008               	return
 15768  1F7B                     __end_of_PWM_Output_D4_Enable:
 15769                           
 15770                           	psect	text33
 15771  0B28                     __ptext33:	
 15772 ;; *************** function _cmd_trc *****************
 15773 ;; Defined at:
 15774 ;;		line 1009 in file "main.c"
 15775 ;; Parameters:    Size  Location     Type
 15776 ;;  num             2   15[BANK0 ] int 
 15777 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 15778 ;;		 -> main@buff(20), 
 15779 ;; Auto vars:     Size  Location     Type
 15780 ;;  buffData        5   24[BANK0 ] unsigned char [5]
 15781 ;;  buffInit        3   29[BANK0 ] unsigned char [3]
 15782 ;;  nRegs           2   39[BANK0 ] int 
 15783 ;;  n               2   37[BANK0 ] int 
 15784 ;;  address         2   34[BANK0 ] unsigned int 
 15785 ;;  i               2   32[BANK0 ] int 
 15786 ;;  j               1   41[BANK0 ] unsigned char 
 15787 ;;  buffEOM         1   36[BANK0 ] unsigned char [1]
 15788 ;; Return value:  Size  Location     Type
 15789 ;;                  1    wreg      void 
 15790 ;; Registers used:
 15791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15792 ;; Tracked objects:
 15793 ;;		On entry : 0/0
 15794 ;;		On exit  : 0/0
 15795 ;;		Unchanged: 0/0
 15796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15797 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15798 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;Total ram usage:       27 bytes
 15802 ;; Hardware stack levels used:    1
 15803 ;; Hardware stack levels required when called:    8
 15804 ;; This function calls:
 15805 ;;		_DATAEE_ReadByte
 15806 ;;		___wmul
 15807 ;;		_sendERRORMessage
 15808 ;;		_sendMessage
 15809 ;; This function is called by:
 15810 ;;		_main
 15811 ;; This function uses a non-reentrant model
 15812 ;;
 15813                           
 15814                           
 15815                           ;psect for function _cmd_trc
 15816  0B28                     _cmd_trc:
 15817  0B28                     l5825:	
 15818                           ;incstack = 0
 15819                           ; Regs used in _cmd_trc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15820                           
 15821                           
 15822                           ;main.c: 1010: if(num == 4){
 15823  0B28  3004               	movlw	4
 15824  0B29  0020               	movlb	0	; select bank0
 15825  0B2A  062F               	xorwf	cmd_trc@num,w
 15826  0B2B  0430               	iorwf	cmd_trc@num+1,w
 15827  0B2C  1D03               	btfss	3,2
 15828  0B2D  2B2F               	goto	u5981
 15829  0B2E  2B30               	goto	u5980
 15830  0B2F                     u5981:
 15831  0B2F  2BFC               	goto	l5873
 15832  0B30                     u5980:
 15833  0B30                     l5827:
 15834                           
 15835                           ;main.c: 1011: int n = buffer[2];
 15836  0B30  0831               	movf	cmd_trc@buffer,w
 15837  0B31  3E02               	addlw	2
 15838  0B32  0086               	movwf	6
 15839  0B33  0187               	clrf	7
 15840  0B34  0801               	movf	1,w
 15841  0B35  00B2               	movwf	??_cmd_trc
 15842  0B36  01B3               	clrf	??_cmd_trc+1
 15843  0B37  0832               	movf	??_cmd_trc,w
 15844  0B38  00C5               	movwf	cmd_trc@n
 15845  0B39  0833               	movf	??_cmd_trc+1,w
 15846  0B3A  00C6               	movwf	cmd_trc@n+1
 15847  0B3B                     l5829:
 15848                           
 15849                           ;main.c: 1012: int nRegs = n;
 15850  0B3B  0846               	movf	cmd_trc@n+1,w
 15851  0B3C  00C8               	movwf	cmd_trc@nRegs+1
 15852  0B3D  0845               	movf	cmd_trc@n,w
 15853  0B3E  00C7               	movwf	cmd_trc@nRegs
 15854  0B3F                     l5831:
 15855                           
 15856                           ;main.c: 1024: if(n > maxReadings){
 15857  0B3F  0846               	movf	cmd_trc@n+1,w
 15858  0B40  3A80               	xorlw	128
 15859  0B41  3C80               	sublw	128
 15860  0B42  1D03               	skipz
 15861  0B43  2B47               	goto	u5995
 15862  0B44  0845               	movf	cmd_trc@n,w
 15863  0B45  0021               	movlb	1	; select bank1
 15864  0B46  0233               	subwf	_maxReadings^(0+128),w
 15865  0B47                     u5995:
 15866  0B47  1803               	skipnc
 15867  0B48  2B4A               	goto	u5991
 15868  0B49  2B4B               	goto	u5990
 15869  0B4A                     u5991:
 15870  0B4A  2B54               	goto	l1507
 15871  0B4B                     u5990:
 15872  0B4B                     l5833:
 15873                           
 15874                           ;main.c: 1025: nRegs = maxReadings;
 15875  0B4B  0021               	movlb	1	; select bank1
 15876  0B4C  0833               	movf	_maxReadings^(0+128),w
 15877  0B4D  0020               	movlb	0	; select bank0
 15878  0B4E  00B2               	movwf	??_cmd_trc
 15879  0B4F  01B3               	clrf	??_cmd_trc+1
 15880  0B50  0832               	movf	??_cmd_trc,w
 15881  0B51  00C7               	movwf	cmd_trc@nRegs
 15882  0B52  0833               	movf	??_cmd_trc+1,w
 15883  0B53  00C8               	movwf	cmd_trc@nRegs+1
 15884  0B54                     l1507:
 15885                           
 15886                           ;main.c: 1026: };main.c: 1027: uint8_t buffInit[3];;main.c: 1028: buffInit[0] = (uint8_t
      +                          )0xFD;
 15887  0B54  30FD               	movlw	253
 15888  0B55  0020               	movlb	0	; select bank0
 15889  0B56  00B2               	movwf	??_cmd_trc
 15890  0B57  0832               	movf	??_cmd_trc,w
 15891  0B58  00BD               	movwf	cmd_trc@buffInit
 15892                           
 15893                           ;main.c: 1029: buffInit[1] = (uint8_t)0XCB;
 15894  0B59  30CB               	movlw	203
 15895  0B5A  00B2               	movwf	??_cmd_trc
 15896  0B5B  0832               	movf	??_cmd_trc,w
 15897  0B5C  00BE               	movwf	cmd_trc@buffInit+1
 15898                           
 15899                           ;main.c: 1030: buffInit[2] = (uint8_t)nRegs;
 15900  0B5D  0847               	movf	cmd_trc@nRegs,w
 15901  0B5E  00B2               	movwf	??_cmd_trc
 15902  0B5F  0832               	movf	??_cmd_trc,w
 15903  0B60  00BF               	movwf	cmd_trc@buffInit+2
 15904  0B61                     l5835:
 15905                           
 15906                           ;main.c: 1031: sendMessage(3,buffInit);
 15907  0B61  3003               	movlw	3
 15908  0B62  00A3               	movwf	sendMessage@num
 15909  0B63  3000               	movlw	0
 15910  0B64  00A4               	movwf	sendMessage@num+1
 15911  0B65  303D               	movlw	(low (cmd_trc@buffInit| 0))& (0+255)
 15912  0B66  00B2               	movwf	??_cmd_trc
 15913  0B67  0832               	movf	??_cmd_trc,w
 15914  0B68  00A5               	movwf	sendMessage@buffer
 15915  0B69  3192  2256  318B   	fcall	_sendMessage
 15916  0B6C                     l5837:
 15917  0B6C                     l5839:
 15918                           
 15919                           ;main.c: 1036: for(i = 0; i < nRegs; i++){
 15920  0B6C  0020               	movlb	0	; select bank0
 15921  0B6D  01C0               	clrf	cmd_trc@i
 15922  0B6E  01C1               	clrf	cmd_trc@i+1
 15923  0B6F  2BD4               	goto	l5865
 15924  0B70                     l5841:
 15925                           
 15926                           ;main.c: 1037: for(j = 0; j < 5; j++){
 15927  0B70  0020               	movlb	0	; select bank0
 15928  0B71  01C9               	clrf	cmd_trc@j
 15929  0B72                     l5847:
 15930                           
 15931                           ;main.c: 1038: address = (iread * 0x5) + 0x7012 + j;
 15932  0B72  0849               	movf	cmd_trc@j,w
 15933  0B73  00B2               	movwf	??_cmd_trc
 15934  0B74  01B3               	clrf	??_cmd_trc+1
 15935  0B75  086C               	movf	_iread,w
 15936  0B76  00B4               	movwf	??_cmd_trc+2
 15937  0B77  01B5               	clrf	??_cmd_trc+3
 15938  0B78  0834               	movf	??_cmd_trc+2,w
 15939  0B79  00A0               	movwf	___wmul@multiplier
 15940  0B7A  0835               	movf	??_cmd_trc+3,w
 15941  0B7B  00A1               	movwf	___wmul@multiplier+1
 15942  0B7C  3005               	movlw	5
 15943  0B7D  00A2               	movwf	___wmul@multiplicand
 15944  0B7E  3000               	movlw	0
 15945  0B7F  00A3               	movwf	___wmul@multiplicand+1
 15946  0B80  3191  21D1  318B   	fcall	___wmul
 15947  0B83  0020               	movlb	0	; select bank0
 15948  0B84  0832               	movf	??_cmd_trc,w
 15949  0B85  0720               	addwf	?___wmul,w
 15950  0B86  00B6               	movwf	??_cmd_trc+4
 15951  0B87  0833               	movf	??_cmd_trc+1,w
 15952  0B88  3D21               	addwfc	?___wmul+1,w
 15953  0B89  00B7               	movwf	??_cmd_trc+5
 15954  0B8A  0836               	movf	??_cmd_trc+4,w
 15955  0B8B  3E12               	addlw	18
 15956  0B8C  00C2               	movwf	cmd_trc@address
 15957  0B8D  3070               	movlw	112
 15958  0B8E  3D37               	addwfc	??_cmd_trc+5,w
 15959  0B8F  00C3               	movwf	cmd_trc@address+1
 15960  0B90                     l5849:
 15961                           
 15962                           ;main.c: 1039: buffData[j] = DATAEE_ReadByte(address);
 15963  0B90  0843               	movf	cmd_trc@address+1,w
 15964  0B91  00A7               	movwf	DATAEE_ReadByte@bAdd+1
 15965  0B92  0842               	movf	cmd_trc@address,w
 15966  0B93  00A6               	movwf	DATAEE_ReadByte@bAdd
 15967  0B94  3190  2041  318B   	fcall	_DATAEE_ReadByte
 15968  0B97  0020               	movlb	0	; select bank0
 15969  0B98  00B2               	movwf	??_cmd_trc
 15970  0B99  0849               	movf	cmd_trc@j,w
 15971  0B9A  3E38               	addlw	(low (cmd_trc@buffData| 0))& (0+255)
 15972  0B9B  0086               	movwf	6
 15973  0B9C  0187               	clrf	7
 15974  0B9D  0832               	movf	??_cmd_trc,w
 15975  0B9E  0081               	movwf	1
 15976  0B9F                     l5851:
 15977  0B9F  3001               	movlw	1
 15978  0BA0  00B2               	movwf	??_cmd_trc
 15979  0BA1  0832               	movf	??_cmd_trc,w
 15980  0BA2  07C9               	addwf	cmd_trc@j,f
 15981  0BA3                     l5853:
 15982  0BA3  3005               	movlw	5
 15983  0BA4  0249               	subwf	cmd_trc@j,w
 15984  0BA5  1C03               	skipc
 15985  0BA6  2BA8               	goto	u6001
 15986  0BA7  2BA9               	goto	u6000
 15987  0BA8                     u6001:
 15988  0BA8  2B72               	goto	l5847
 15989  0BA9                     u6000:
 15990  0BA9                     l5855:
 15991                           
 15992                           ;main.c: 1040: };main.c: 1041: sendMessage(5,buffData);
 15993  0BA9  3005               	movlw	5
 15994  0BAA  00A3               	movwf	sendMessage@num
 15995  0BAB  3000               	movlw	0
 15996  0BAC  00A4               	movwf	sendMessage@num+1
 15997  0BAD  3038               	movlw	(low (cmd_trc@buffData| 0))& (0+255)
 15998  0BAE  00B2               	movwf	??_cmd_trc
 15999  0BAF  0832               	movf	??_cmd_trc,w
 16000  0BB0  00A5               	movwf	sendMessage@buffer
 16001  0BB1  3192  2256  318B   	fcall	_sendMessage
 16002  0BB4                     l5857:
 16003                           
 16004                           ;main.c: 1042: iread++;
 16005  0BB4  3001               	movlw	1
 16006  0BB5  0020               	movlb	0	; select bank0
 16007  0BB6  00B2               	movwf	??_cmd_trc
 16008  0BB7  0832               	movf	??_cmd_trc,w
 16009  0BB8  07EC               	addwf	_iread,f
 16010  0BB9                     l5859:
 16011                           
 16012                           ;main.c: 1043: if(iread>NREG-1){
 16013  0BB9  087D               	movf	_NREG,w
 16014  0BBA  3EFF               	addlw	255
 16015  0BBB  00B2               	movwf	??_cmd_trc
 16016  0BBC  30FF               	movlw	255
 16017  0BBD  1803               	skipnc
 16018  0BBE  3000               	movlw	0
 16019  0BBF  00B3               	movwf	??_cmd_trc+1
 16020  0BC0  0833               	movf	??_cmd_trc+1,w
 16021  0BC1  3A80               	xorlw	128
 16022  0BC2  00B4               	movwf	??_cmd_trc+2
 16023  0BC3  3080               	movlw	128
 16024  0BC4  0234               	subwf	??_cmd_trc+2,w
 16025  0BC5  1D03               	skipz
 16026  0BC6  2BC9               	goto	u6015
 16027  0BC7  086C               	movf	_iread,w
 16028  0BC8  0232               	subwf	??_cmd_trc,w
 16029  0BC9                     u6015:
 16030  0BC9  1803               	skipnc
 16031  0BCA  2BCC               	goto	u6011
 16032  0BCB  2BCD               	goto	u6010
 16033  0BCC                     u6011:
 16034  0BCC  2BCF               	goto	l5863
 16035  0BCD                     u6010:
 16036  0BCD                     l5861:
 16037                           
 16038                           ;main.c: 1044: iread=0;
 16039  0BCD  0020               	movlb	0	; select bank0
 16040  0BCE  01EC               	clrf	_iread
 16041  0BCF                     l5863:
 16042  0BCF  3001               	movlw	1
 16043  0BD0  0020               	movlb	0	; select bank0
 16044  0BD1  07C0               	addwf	cmd_trc@i,f
 16045  0BD2  3000               	movlw	0
 16046  0BD3  3DC1               	addwfc	cmd_trc@i+1,f
 16047  0BD4                     l5865:
 16048  0BD4  0841               	movf	cmd_trc@i+1,w
 16049  0BD5  3A80               	xorlw	128
 16050  0BD6  00B2               	movwf	??_cmd_trc
 16051  0BD7  0848               	movf	cmd_trc@nRegs+1,w
 16052  0BD8  3A80               	xorlw	128
 16053  0BD9  0232               	subwf	??_cmd_trc,w
 16054  0BDA  1D03               	skipz
 16055  0BDB  2BDE               	goto	u6025
 16056  0BDC  0847               	movf	cmd_trc@nRegs,w
 16057  0BDD  0240               	subwf	cmd_trc@i,w
 16058  0BDE                     u6025:
 16059  0BDE  1C03               	skipc
 16060  0BDF  2BE1               	goto	u6021
 16061  0BE0  2BE2               	goto	u6020
 16062  0BE1                     u6021:
 16063  0BE1  2B70               	goto	l5841
 16064  0BE2                     u6020:
 16065  0BE2                     l5867:
 16066                           
 16067                           ;main.c: 1045: };main.c: 1046: };main.c: 1047: maxReadings = maxReadings - nRegs;
 16068  0BE2  0020               	movlb	0	; select bank0
 16069  0BE3  0847               	movf	cmd_trc@nRegs,w
 16070  0BE4  0021               	movlb	1	; select bank1
 16071  0BE5  0233               	subwf	_maxReadings^(0+128),w
 16072  0BE6  0020               	movlb	0	; select bank0
 16073  0BE7  00B2               	movwf	??_cmd_trc
 16074  0BE8  0832               	movf	??_cmd_trc,w
 16075  0BE9  0021               	movlb	1	; select bank1
 16076  0BEA  00B3               	movwf	_maxReadings^(0+128)
 16077  0BEB                     l5869:
 16078                           
 16079                           ;main.c: 1048: uint8_t buffEOM[1];;main.c: 1049: buffEOM[0] = (uint8_t)0xFE;
 16080  0BEB  30FE               	movlw	254
 16081  0BEC  0020               	movlb	0	; select bank0
 16082  0BED  00B2               	movwf	??_cmd_trc
 16083  0BEE  0832               	movf	??_cmd_trc,w
 16084  0BEF  00C4               	movwf	cmd_trc@buffEOM
 16085  0BF0                     l5871:
 16086                           
 16087                           ;main.c: 1050: sendMessage(1,buffEOM);
 16088  0BF0  3001               	movlw	1
 16089  0BF1  00A3               	movwf	sendMessage@num
 16090  0BF2  3000               	movlw	0
 16091  0BF3  00A4               	movwf	sendMessage@num+1
 16092  0BF4  3044               	movlw	(low (cmd_trc@buffEOM| 0))& (0+255)
 16093  0BF5  00B2               	movwf	??_cmd_trc
 16094  0BF6  0832               	movf	??_cmd_trc,w
 16095  0BF7  00A5               	movwf	sendMessage@buffer
 16096  0BF8  3192  2256  318B   	fcall	_sendMessage
 16097                           
 16098                           ;main.c: 1051: } else{
 16099  0BFB  2C00               	goto	l1515
 16100  0BFC                     l5873:
 16101                           
 16102                           ;main.c: 1052: sendERRORMessage((uint8_t)0XCB);
 16103  0BFC  30CB               	movlw	203
 16104  0BFD  3191  2156  318B   	fcall	_sendERRORMessage
 16105  0C00                     l1515:
 16106  0C00  0008               	return
 16107  0C01                     __end_of_cmd_trc:
 16108                           
 16109                           	psect	text34
 16110  130D                     __ptext34:	
 16111 ;; *************** function _cmd_ir *****************
 16112 ;; Defined at:
 16113 ;;		line 996 in file "main.c"
 16114 ;; Parameters:    Size  Location     Type
 16115 ;;  num             2   15[BANK0 ] int 
 16116 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16117 ;;		 -> main@buff(20), 
 16118 ;; Auto vars:     Size  Location     Type
 16119 ;;  buff            7   19[BANK0 ] unsigned char [7]
 16120 ;; Return value:  Size  Location     Type
 16121 ;;                  1    wreg      void 
 16122 ;; Registers used:
 16123 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16124 ;; Tracked objects:
 16125 ;;		On entry : 0/0
 16126 ;;		On exit  : 0/0
 16127 ;;		Unchanged: 0/0
 16128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16129 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16130 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16131 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16132 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16133 ;;Total ram usage:       11 bytes
 16134 ;; Hardware stack levels used:    1
 16135 ;; Hardware stack levels required when called:    7
 16136 ;; This function calls:
 16137 ;;		_sendMessage
 16138 ;; This function is called by:
 16139 ;;		_main
 16140 ;; This function uses a non-reentrant model
 16141 ;;
 16142                           
 16143                           
 16144                           ;psect for function _cmd_ir
 16145  130D                     _cmd_ir:
 16146  130D                     l5821:	
 16147                           ;incstack = 0
 16148                           ; Regs used in _cmd_ir: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16149                           
 16150                           
 16151                           ;main.c: 997: uint8_t buff[7];;main.c: 998: buff[0] = (uint8_t)0xFD;
 16152  130D  30FD               	movlw	253
 16153  130E  0020               	movlb	0	; select bank0
 16154  130F  00B2               	movwf	??_cmd_ir
 16155  1310  0832               	movf	??_cmd_ir,w
 16156  1311  00B3               	movwf	cmd_ir@buff
 16157                           
 16158                           ;main.c: 999: buff[1] = (uint8_t)0XCA;
 16159  1312  30CA               	movlw	202
 16160  1313  00B2               	movwf	??_cmd_ir
 16161  1314  0832               	movf	??_cmd_ir,w
 16162  1315  00B4               	movwf	cmd_ir@buff+1
 16163                           
 16164                           ;main.c: 1000: buff[2] = NREG;
 16165  1316  087D               	movf	_NREG,w
 16166  1317  00B2               	movwf	??_cmd_ir
 16167  1318  0832               	movf	??_cmd_ir,w
 16168  1319  00B5               	movwf	cmd_ir@buff+2
 16169                           
 16170                           ;main.c: 1001: buff[3] = nr;
 16171  131A  086A               	movf	_nr,w
 16172  131B  00B2               	movwf	??_cmd_ir
 16173  131C  0832               	movf	??_cmd_ir,w
 16174  131D  00B6               	movwf	cmd_ir@buff+3
 16175                           
 16176                           ;main.c: 1002: buff[4] = iread;
 16177  131E  086C               	movf	_iread,w
 16178  131F  00B2               	movwf	??_cmd_ir
 16179  1320  0832               	movf	??_cmd_ir,w
 16180  1321  00B7               	movwf	cmd_ir@buff+4
 16181                           
 16182                           ;main.c: 1003: buff[5] = iwrite;
 16183  1322  086B               	movf	_iwrite,w
 16184  1323  00B2               	movwf	??_cmd_ir
 16185  1324  0832               	movf	??_cmd_ir,w
 16186  1325  00B8               	movwf	cmd_ir@buff+5
 16187                           
 16188                           ;main.c: 1004: buff[6] = (uint8_t)0xFE;
 16189  1326  30FE               	movlw	254
 16190  1327  00B2               	movwf	??_cmd_ir
 16191  1328  0832               	movf	??_cmd_ir,w
 16192  1329  00B9               	movwf	cmd_ir@buff+6
 16193  132A                     l5823:
 16194                           
 16195                           ;main.c: 1006: sendMessage(7,buff);
 16196  132A  3007               	movlw	7
 16197  132B  00A3               	movwf	sendMessage@num
 16198  132C  3000               	movlw	0
 16199  132D  00A4               	movwf	sendMessage@num+1
 16200  132E  3033               	movlw	(low (cmd_ir@buff| 0))& (0+255)
 16201  132F  00B2               	movwf	??_cmd_ir
 16202  1330  0832               	movf	??_cmd_ir,w
 16203  1331  00A5               	movwf	sendMessage@buffer
 16204  1332  3192  2256  3193   	fcall	_sendMessage
 16205  1335                     l1503:
 16206  1335  0008               	return
 16207  1336                     __end_of_cmd_ir:
 16208                           
 16209                           	psect	text35
 16210  1465                     __ptext35:	
 16211 ;; *************** function _cmd_aa *****************
 16212 ;; Defined at:
 16213 ;;		line 984 in file "main.c"
 16214 ;; Parameters:    Size  Location     Type
 16215 ;;  num             2   15[BANK0 ] int 
 16216 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16217 ;;		 -> main@buff(20), 
 16218 ;; Auto vars:     Size  Location     Type
 16219 ;;		None
 16220 ;; Return value:  Size  Location     Type
 16221 ;;                  1    wreg      void 
 16222 ;; Registers used:
 16223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16224 ;; Tracked objects:
 16225 ;;		On entry : 0/0
 16226 ;;		On exit  : 0/0
 16227 ;;		Unchanged: 0/0
 16228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16229 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;Total ram usage:        4 bytes
 16234 ;; Hardware stack levels used:    1
 16235 ;; Hardware stack levels required when called:    8
 16236 ;; This function calls:
 16237 ;;		_sendERRORMessage
 16238 ;;		_sendOKMessage
 16239 ;; This function is called by:
 16240 ;;		_main
 16241 ;; This function uses a non-reentrant model
 16242 ;;
 16243                           
 16244                           
 16245                           ;psect for function _cmd_aa
 16246  1465                     _cmd_aa:
 16247  1465                     l5803:	
 16248                           ;incstack = 0
 16249                           ; Regs used in _cmd_aa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16250                           
 16251                           
 16252                           ;main.c: 985: if(buffer[2] == 0 && num == 4){
 16253  1465  0020               	movlb	0	; select bank0
 16254  1466  0831               	movf	cmd_aa@buffer,w
 16255  1467  3E02               	addlw	2
 16256  1468  0086               	movwf	6
 16257  1469  0187               	clrf	7
 16258  146A  0801               	movf	1,w
 16259  146B  1D03               	btfss	3,2
 16260  146C  2C6E               	goto	u5941
 16261  146D  2C6F               	goto	u5940
 16262  146E                     u5941:
 16263  146E  2C7F               	goto	l5811
 16264  146F                     u5940:
 16265  146F                     l5805:
 16266  146F  3004               	movlw	4
 16267  1470  062F               	xorwf	cmd_aa@num,w
 16268  1471  0430               	iorwf	cmd_aa@num+1,w
 16269  1472  1D03               	btfss	3,2
 16270  1473  2C75               	goto	u5951
 16271  1474  2C76               	goto	u5950
 16272  1475                     u5951:
 16273  1475  2C7F               	goto	l5811
 16274  1476                     u5950:
 16275  1476                     l5807:
 16276                           
 16277                           ;main.c: 986: ALAF = 'a';
 16278  1476  3061               	movlw	97
 16279  1477  00B2               	movwf	??_cmd_aa
 16280  1478  0832               	movf	??_cmd_aa,w
 16281  1479  00EF               	movwf	_ALAF
 16282  147A                     l5809:
 16283                           
 16284                           ;main.c: 987: sendOKMessage((uint8_t)0XC9);
 16285  147A  30C9               	movlw	201
 16286  147B  3190  20E9  3194   	fcall	_sendOKMessage
 16287                           
 16288                           ;main.c: 988: } else if(buffer[2] == 1 && num == 4){
 16289  147E  2C9C               	goto	l1500
 16290  147F                     l5811:
 16291  147F  0831               	movf	cmd_aa@buffer,w
 16292  1480  3E02               	addlw	2
 16293  1481  0086               	movwf	6
 16294  1482  0187               	clrf	7
 16295  1483  0301               	decf	1,w
 16296  1484  1D03               	btfss	3,2
 16297  1485  2C87               	goto	u5961
 16298  1486  2C88               	goto	u5960
 16299  1487                     u5961:
 16300  1487  2C98               	goto	l5819
 16301  1488                     u5960:
 16302  1488                     l5813:
 16303  1488  3004               	movlw	4
 16304  1489  062F               	xorwf	cmd_aa@num,w
 16305  148A  0430               	iorwf	cmd_aa@num+1,w
 16306  148B  1D03               	btfss	3,2
 16307  148C  2C8E               	goto	u5971
 16308  148D  2C8F               	goto	u5970
 16309  148E                     u5971:
 16310  148E  2C98               	goto	l5819
 16311  148F                     u5970:
 16312  148F                     l5815:
 16313                           
 16314                           ;main.c: 989: ALAF = 'A';
 16315  148F  3041               	movlw	65
 16316  1490  00B2               	movwf	??_cmd_aa
 16317  1491  0832               	movf	??_cmd_aa,w
 16318  1492  00EF               	movwf	_ALAF
 16319  1493                     l5817:
 16320                           
 16321                           ;main.c: 990: sendOKMessage((uint8_t)0XC9);
 16322  1493  30C9               	movlw	201
 16323  1494  3190  20E9  3194   	fcall	_sendOKMessage
 16324                           
 16325                           ;main.c: 991: } else {
 16326  1497  2C9C               	goto	l1500
 16327  1498                     l5819:
 16328                           
 16329                           ;main.c: 992: sendERRORMessage((uint8_t)0XC9);
 16330  1498  30C9               	movlw	201
 16331  1499  3191  2156  3194   	fcall	_sendERRORMessage
 16332  149C                     l1500:
 16333  149C  0008               	return
 16334  149D                     __end_of_cmd_aa:
 16335                           
 16336                           	psect	text36
 16337  15B2                     __ptext36:	
 16338 ;; *************** function _cmd_dtl *****************
 16339 ;; Defined at:
 16340 ;;		line 972 in file "main.c"
 16341 ;; Parameters:    Size  Location     Type
 16342 ;;  num             2   15[BANK0 ] int 
 16343 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16344 ;;		 -> main@buff(20), 
 16345 ;; Auto vars:     Size  Location     Type
 16346 ;;  lumAux          2   22[BANK0 ] int 
 16347 ;;  tempAux         2   20[BANK0 ] int 
 16348 ;; Return value:  Size  Location     Type
 16349 ;;                  1    wreg      void 
 16350 ;; Registers used:
 16351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16352 ;; Tracked objects:
 16353 ;;		On entry : 0/0
 16354 ;;		On exit  : 0/0
 16355 ;;		Unchanged: 0/0
 16356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16357 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16359 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16360 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16361 ;;Total ram usage:        9 bytes
 16362 ;; Hardware stack levels used:    1
 16363 ;; Hardware stack levels required when called:    8
 16364 ;; This function calls:
 16365 ;;		_sendERRORMessage
 16366 ;;		_sendOKMessage
 16367 ;; This function is called by:
 16368 ;;		_main
 16369 ;; This function uses a non-reentrant model
 16370 ;;
 16371                           
 16372                           
 16373                           ;psect for function _cmd_dtl
 16374  15B2                     _cmd_dtl:
 16375  15B2                     l5785:	
 16376                           ;incstack = 0
 16377                           ; Regs used in _cmd_dtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16378                           
 16379                           
 16380                           ;main.c: 973: int tempAux = buffer[2];
 16381  15B2  0020               	movlb	0	; select bank0
 16382  15B3  0831               	movf	cmd_dtl@buffer,w
 16383  15B4  3E02               	addlw	2
 16384  15B5  0086               	movwf	6
 16385  15B6  0187               	clrf	7
 16386  15B7  0801               	movf	1,w
 16387  15B8  00B2               	movwf	??_cmd_dtl
 16388  15B9  01B3               	clrf	??_cmd_dtl+1
 16389  15BA  0832               	movf	??_cmd_dtl,w
 16390  15BB  00B4               	movwf	cmd_dtl@tempAux
 16391  15BC  0833               	movf	??_cmd_dtl+1,w
 16392  15BD  00B5               	movwf	cmd_dtl@tempAux+1
 16393                           
 16394                           ;main.c: 974: int lumAux = buffer[3];
 16395  15BE  0831               	movf	cmd_dtl@buffer,w
 16396  15BF  3E03               	addlw	3
 16397  15C0  0086               	movwf	6
 16398  15C1  0187               	clrf	7
 16399  15C2  0801               	movf	1,w
 16400  15C3  00B2               	movwf	??_cmd_dtl
 16401  15C4  01B3               	clrf	??_cmd_dtl+1
 16402  15C5  0832               	movf	??_cmd_dtl,w
 16403  15C6  00B6               	movwf	cmd_dtl@lumAux
 16404  15C7  0833               	movf	??_cmd_dtl+1,w
 16405  15C8  00B7               	movwf	cmd_dtl@lumAux+1
 16406  15C9                     l5787:
 16407                           
 16408                           ;main.c: 975: if((tempAux >= 0 && tempAux < 50) && (lumAux >= 0 && lumAux < 8) && num ==
      +                           5){
 16409  15C9  1BB5               	btfsc	cmd_dtl@tempAux+1,7
 16410  15CA  2DCC               	goto	u5891
 16411  15CB  2DCD               	goto	u5890
 16412  15CC                     u5891:
 16413  15CC  2E06               	goto	l5801
 16414  15CD                     u5890:
 16415  15CD                     l5789:
 16416  15CD  0835               	movf	cmd_dtl@tempAux+1,w
 16417  15CE  3A80               	xorlw	128
 16418  15CF  00B2               	movwf	??_cmd_dtl
 16419  15D0  3080               	movlw	128
 16420  15D1  0232               	subwf	??_cmd_dtl,w
 16421  15D2  1D03               	skipz
 16422  15D3  2DD6               	goto	u5905
 16423  15D4  3032               	movlw	50
 16424  15D5  0234               	subwf	cmd_dtl@tempAux,w
 16425  15D6                     u5905:
 16426  15D6  1803               	skipnc
 16427  15D7  2DD9               	goto	u5901
 16428  15D8  2DDA               	goto	u5900
 16429  15D9                     u5901:
 16430  15D9  2E06               	goto	l5801
 16431  15DA                     u5900:
 16432  15DA                     l5791:
 16433  15DA  0020               	movlb	0	; select bank0
 16434  15DB  1BB7               	btfsc	cmd_dtl@lumAux+1,7
 16435  15DC  2DDE               	goto	u5911
 16436  15DD  2DDF               	goto	u5910
 16437  15DE                     u5911:
 16438  15DE  2E06               	goto	l5801
 16439  15DF                     u5910:
 16440  15DF                     l5793:
 16441  15DF  0837               	movf	cmd_dtl@lumAux+1,w
 16442  15E0  3A80               	xorlw	128
 16443  15E1  00B2               	movwf	??_cmd_dtl
 16444  15E2  3080               	movlw	128
 16445  15E3  0232               	subwf	??_cmd_dtl,w
 16446  15E4  1D03               	skipz
 16447  15E5  2DE8               	goto	u5925
 16448  15E6  3008               	movlw	8
 16449  15E7  0236               	subwf	cmd_dtl@lumAux,w
 16450  15E8                     u5925:
 16451  15E8  1803               	skipnc
 16452  15E9  2DEB               	goto	u5921
 16453  15EA  2DEC               	goto	u5920
 16454  15EB                     u5921:
 16455  15EB  2E06               	goto	l5801
 16456  15EC                     u5920:
 16457  15EC                     l5795:
 16458  15EC  3005               	movlw	5
 16459  15ED  0020               	movlb	0	; select bank0
 16460  15EE  062F               	xorwf	cmd_dtl@num,w
 16461  15EF  0430               	iorwf	cmd_dtl@num+1,w
 16462  15F0  1D03               	btfss	3,2
 16463  15F1  2DF3               	goto	u5931
 16464  15F2  2DF4               	goto	u5930
 16465  15F3                     u5931:
 16466  15F3  2E06               	goto	l5801
 16467  15F4                     u5930:
 16468  15F4                     l5797:
 16469                           
 16470                           ;main.c: 976: tempAlarm.alarmTemp = buffer[2];
 16471  15F4  0831               	movf	cmd_dtl@buffer,w
 16472  15F5  0086               	movwf	6
 16473  15F6  0187               	clrf	7
 16474  15F7  3F42               	moviw [2]fsr1
 16475  15F8  0021               	movlb	1	; select bank1
 16476  15F9  00A7               	movwf	_tempAlarm^(0+128)
 16477                           
 16478                           ;main.c: 977: lumAlarm.alarmLum = buffer[3];
 16479  15FA  0020               	movlb	0	; select bank0
 16480  15FB  0831               	movf	cmd_dtl@buffer,w
 16481  15FC  0086               	movwf	6
 16482  15FD  0187               	clrf	7
 16483  15FE  3F43               	moviw [3]fsr1
 16484  15FF  0021               	movlb	1	; select bank1
 16485  1600  00A4               	movwf	_lumAlarm^(0+128)
 16486  1601                     l5799:
 16487                           
 16488                           ;main.c: 978: sendOKMessage((uint8_t)0XC8);
 16489  1601  30C8               	movlw	200
 16490  1602  3190  20E9  3195   	fcall	_sendOKMessage
 16491                           
 16492                           ;main.c: 979: } else {
 16493  1605  2E0A               	goto	l1493
 16494  1606                     l5801:
 16495                           
 16496                           ;main.c: 980: sendERRORMessage((uint8_t)0XC8);
 16497  1606  30C8               	movlw	200
 16498  1607  3191  2156  3195   	fcall	_sendERRORMessage
 16499  160A                     l1493:
 16500  160A  0008               	return
 16501  160B                     __end_of_cmd_dtl:
 16502                           
 16503                           	psect	text37
 16504  08A7                     __ptext37:	
 16505 ;; *************** function _cmd_dac *****************
 16506 ;; Defined at:
 16507 ;;		line 958 in file "main.c"
 16508 ;; Parameters:    Size  Location     Type
 16509 ;;  num             2   15[BANK0 ] int 
 16510 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16511 ;;		 -> main@buff(20), 
 16512 ;; Auto vars:     Size  Location     Type
 16513 ;;  s               2   24[BANK0 ] int 
 16514 ;;  m               2   22[BANK0 ] int 
 16515 ;;  h               2   20[BANK0 ] int 
 16516 ;; Return value:  Size  Location     Type
 16517 ;;                  1    wreg      void 
 16518 ;; Registers used:
 16519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16520 ;; Tracked objects:
 16521 ;;		On entry : 0/0
 16522 ;;		On exit  : 0/0
 16523 ;;		Unchanged: 0/0
 16524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16525 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16526 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16527 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16528 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16529 ;;Total ram usage:       11 bytes
 16530 ;; Hardware stack levels used:    1
 16531 ;; Hardware stack levels required when called:    8
 16532 ;; This function calls:
 16533 ;;		_sendERRORMessage
 16534 ;;		_sendOKMessage
 16535 ;; This function is called by:
 16536 ;;		_main
 16537 ;; This function uses a non-reentrant model
 16538 ;;
 16539                           
 16540                           
 16541                           ;psect for function _cmd_dac
 16542  08A7                     _cmd_dac:
 16543  08A7                     l5763:	
 16544                           ;incstack = 0
 16545                           ; Regs used in _cmd_dac: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16546                           
 16547                           
 16548                           ;main.c: 959: int h = buffer[2];
 16549  08A7  0020               	movlb	0	; select bank0
 16550  08A8  0831               	movf	cmd_dac@buffer,w
 16551  08A9  3E02               	addlw	2
 16552  08AA  0086               	movwf	6
 16553  08AB  0187               	clrf	7
 16554  08AC  0801               	movf	1,w
 16555  08AD  00B2               	movwf	??_cmd_dac
 16556  08AE  01B3               	clrf	??_cmd_dac+1
 16557  08AF  0832               	movf	??_cmd_dac,w
 16558  08B0  00B4               	movwf	cmd_dac@h
 16559  08B1  0833               	movf	??_cmd_dac+1,w
 16560  08B2  00B5               	movwf	cmd_dac@h+1
 16561                           
 16562                           ;main.c: 960: int m = buffer[3];
 16563  08B3  0831               	movf	cmd_dac@buffer,w
 16564  08B4  3E03               	addlw	3
 16565  08B5  0086               	movwf	6
 16566  08B6  0187               	clrf	7
 16567  08B7  0801               	movf	1,w
 16568  08B8  00B2               	movwf	??_cmd_dac
 16569  08B9  01B3               	clrf	??_cmd_dac+1
 16570  08BA  0832               	movf	??_cmd_dac,w
 16571  08BB  00B6               	movwf	cmd_dac@m
 16572  08BC  0833               	movf	??_cmd_dac+1,w
 16573  08BD  00B7               	movwf	cmd_dac@m+1
 16574                           
 16575                           ;main.c: 961: int s = buffer[4];
 16576  08BE  0831               	movf	cmd_dac@buffer,w
 16577  08BF  3E04               	addlw	4
 16578  08C0  0086               	movwf	6
 16579  08C1  0187               	clrf	7
 16580  08C2  0801               	movf	1,w
 16581  08C3  00B2               	movwf	??_cmd_dac
 16582  08C4  01B3               	clrf	??_cmd_dac+1
 16583  08C5  0832               	movf	??_cmd_dac,w
 16584  08C6  00B8               	movwf	cmd_dac@s
 16585  08C7  0833               	movf	??_cmd_dac+1,w
 16586  08C8  00B9               	movwf	cmd_dac@s+1
 16587  08C9                     l5765:
 16588                           
 16589                           ;main.c: 962: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 16590  08C9  1BB5               	btfsc	cmd_dac@h+1,7
 16591  08CA  28CC               	goto	u5821
 16592  08CB  28CD               	goto	u5820
 16593  08CC                     u5821:
 16594  08CC  291C               	goto	l5783
 16595  08CD                     u5820:
 16596  08CD                     l5767:
 16597  08CD  0835               	movf	cmd_dac@h+1,w
 16598  08CE  3A80               	xorlw	128
 16599  08CF  00B2               	movwf	??_cmd_dac
 16600  08D0  3080               	movlw	128
 16601  08D1  0232               	subwf	??_cmd_dac,w
 16602  08D2  1D03               	skipz
 16603  08D3  28D6               	goto	u5835
 16604  08D4  3018               	movlw	24
 16605  08D5  0234               	subwf	cmd_dac@h,w
 16606  08D6                     u5835:
 16607  08D6  1803               	skipnc
 16608  08D7  28D9               	goto	u5831
 16609  08D8  28DA               	goto	u5830
 16610  08D9                     u5831:
 16611  08D9  291C               	goto	l5783
 16612  08DA                     u5830:
 16613  08DA                     l5769:
 16614  08DA  0020               	movlb	0	; select bank0
 16615  08DB  1BB7               	btfsc	cmd_dac@m+1,7
 16616  08DC  28DE               	goto	u5841
 16617  08DD  28DF               	goto	u5840
 16618  08DE                     u5841:
 16619  08DE  291C               	goto	l5783
 16620  08DF                     u5840:
 16621  08DF                     l5771:
 16622  08DF  0837               	movf	cmd_dac@m+1,w
 16623  08E0  3A80               	xorlw	128
 16624  08E1  00B2               	movwf	??_cmd_dac
 16625  08E2  3080               	movlw	128
 16626  08E3  0232               	subwf	??_cmd_dac,w
 16627  08E4  1D03               	skipz
 16628  08E5  28E8               	goto	u5855
 16629  08E6  303C               	movlw	60
 16630  08E7  0236               	subwf	cmd_dac@m,w
 16631  08E8                     u5855:
 16632  08E8  1803               	skipnc
 16633  08E9  28EB               	goto	u5851
 16634  08EA  28EC               	goto	u5850
 16635  08EB                     u5851:
 16636  08EB  291C               	goto	l5783
 16637  08EC                     u5850:
 16638  08EC                     l5773:
 16639  08EC  0020               	movlb	0	; select bank0
 16640  08ED  1BB9               	btfsc	cmd_dac@s+1,7
 16641  08EE  28F0               	goto	u5861
 16642  08EF  28F1               	goto	u5860
 16643  08F0                     u5861:
 16644  08F0  291C               	goto	l5783
 16645  08F1                     u5860:
 16646  08F1                     l5775:
 16647  08F1  0839               	movf	cmd_dac@s+1,w
 16648  08F2  3A80               	xorlw	128
 16649  08F3  00B2               	movwf	??_cmd_dac
 16650  08F4  3080               	movlw	128
 16651  08F5  0232               	subwf	??_cmd_dac,w
 16652  08F6  1D03               	skipz
 16653  08F7  28FA               	goto	u5875
 16654  08F8  303C               	movlw	60
 16655  08F9  0238               	subwf	cmd_dac@s,w
 16656  08FA                     u5875:
 16657  08FA  1803               	skipnc
 16658  08FB  28FD               	goto	u5871
 16659  08FC  28FE               	goto	u5870
 16660  08FD                     u5871:
 16661  08FD  291C               	goto	l5783
 16662  08FE                     u5870:
 16663  08FE                     l5777:
 16664  08FE  3006               	movlw	6
 16665  08FF  0020               	movlb	0	; select bank0
 16666  0900  062F               	xorwf	cmd_dac@num,w
 16667  0901  0430               	iorwf	cmd_dac@num+1,w
 16668  0902  1D03               	btfss	3,2
 16669  0903  2905               	goto	u5881
 16670  0904  2906               	goto	u5880
 16671  0905                     u5881:
 16672  0905  291C               	goto	l5783
 16673  0906                     u5880:
 16674  0906                     l5779:
 16675                           
 16676                           ;main.c: 963: clkAlarm.alarmVal.h = h;
 16677  0906  0834               	movf	cmd_dac@h,w
 16678  0907  00B2               	movwf	??_cmd_dac
 16679  0908  0832               	movf	??_cmd_dac,w
 16680  0909  0021               	movlb	1	; select bank1
 16681  090A  00A0               	movwf	_clkAlarm^(0+128)
 16682                           
 16683                           ;main.c: 964: clkAlarm.alarmVal.m = m;
 16684  090B  0020               	movlb	0	; select bank0
 16685  090C  0836               	movf	cmd_dac@m,w
 16686  090D  00B2               	movwf	??_cmd_dac
 16687  090E  0832               	movf	??_cmd_dac,w
 16688  090F  0021               	movlb	1	; select bank1
 16689  0910  00A1               	movwf	(_clkAlarm^(0+128)+1)
 16690                           
 16691                           ;main.c: 965: clkAlarm.alarmVal.s = s;
 16692  0911  0020               	movlb	0	; select bank0
 16693  0912  0838               	movf	cmd_dac@s,w
 16694  0913  00B2               	movwf	??_cmd_dac
 16695  0914  0832               	movf	??_cmd_dac,w
 16696  0915  0021               	movlb	1	; select bank1
 16697  0916  00A2               	movwf	(_clkAlarm^(0+128)+2)
 16698  0917                     l5781:
 16699                           
 16700                           ;main.c: 966: sendOKMessage((uint8_t)0XC7);
 16701  0917  30C7               	movlw	199
 16702  0918  3190  20E9  3188   	fcall	_sendOKMessage
 16703                           
 16704                           ;main.c: 967: } else {
 16705  091B  2920               	goto	l1488
 16706  091C                     l5783:
 16707                           
 16708                           ;main.c: 968: sendERRORMessage((uint8_t)0XC7);
 16709  091C  30C7               	movlw	199
 16710  091D  3191  2156  3188   	fcall	_sendERRORMessage
 16711  0920                     l1488:
 16712  0920  0008               	return
 16713  0921                     __end_of_cmd_dac:
 16714                           
 16715                           	psect	text38
 16716  14DA                     __ptext38:	
 16717 ;; *************** function _cmd_ra *****************
 16718 ;; Defined at:
 16719 ;;		line 943 in file "main.c"
 16720 ;; Parameters:    Size  Location     Type
 16721 ;;  num             2   15[BANK0 ] int 
 16722 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16723 ;;		 -> main@buff(20), 
 16724 ;; Auto vars:     Size  Location     Type
 16725 ;;  buff            9   19[BANK0 ] unsigned char [9]
 16726 ;; Return value:  Size  Location     Type
 16727 ;;                  1    wreg      void 
 16728 ;; Registers used:
 16729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16730 ;; Tracked objects:
 16731 ;;		On entry : 0/0
 16732 ;;		On exit  : 0/0
 16733 ;;		Unchanged: 0/0
 16734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16735 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16736 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16737 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16738 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16739 ;;Total ram usage:       13 bytes
 16740 ;; Hardware stack levels used:    1
 16741 ;; Hardware stack levels required when called:    7
 16742 ;; This function calls:
 16743 ;;		_sendMessage
 16744 ;; This function is called by:
 16745 ;;		_main
 16746 ;; This function uses a non-reentrant model
 16747 ;;
 16748                           
 16749                           
 16750                           ;psect for function _cmd_ra
 16751  14DA                     _cmd_ra:
 16752  14DA                     l5755:	
 16753                           ;incstack = 0
 16754                           ; Regs used in _cmd_ra: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16755                           
 16756                           
 16757                           ;main.c: 944: uint8_t buff[9];;main.c: 945: buff[0] = (uint8_t)0xFD;
 16758  14DA  30FD               	movlw	253
 16759  14DB  0020               	movlb	0	; select bank0
 16760  14DC  00B2               	movwf	??_cmd_ra
 16761  14DD  0832               	movf	??_cmd_ra,w
 16762  14DE  00B3               	movwf	cmd_ra@buff
 16763                           
 16764                           ;main.c: 946: buff[1] = (uint8_t)0XC6;
 16765  14DF  30C6               	movlw	198
 16766  14E0  00B2               	movwf	??_cmd_ra
 16767  14E1  0832               	movf	??_cmd_ra,w
 16768  14E2  00B4               	movwf	cmd_ra@buff+1
 16769                           
 16770                           ;main.c: 947: buff[2] = clkAlarm.alarmVal.h;
 16771  14E3  0021               	movlb	1	; select bank1
 16772  14E4  0820               	movf	_clkAlarm^(0+128),w
 16773  14E5  0020               	movlb	0	; select bank0
 16774  14E6  00B2               	movwf	??_cmd_ra
 16775  14E7  0832               	movf	??_cmd_ra,w
 16776  14E8  00B5               	movwf	cmd_ra@buff+2
 16777                           
 16778                           ;main.c: 948: buff[3] = clkAlarm.alarmVal.m;
 16779  14E9  0021               	movlb	1	; select bank1
 16780  14EA  0821               	movf	(_clkAlarm^(0+128)+1),w
 16781  14EB  0020               	movlb	0	; select bank0
 16782  14EC  00B2               	movwf	??_cmd_ra
 16783  14ED  0832               	movf	??_cmd_ra,w
 16784  14EE  00B6               	movwf	cmd_ra@buff+3
 16785                           
 16786                           ;main.c: 949: buff[4] = clkAlarm.alarmVal.s;
 16787  14EF  0021               	movlb	1	; select bank1
 16788  14F0  0822               	movf	(_clkAlarm^(0+128)+2),w
 16789  14F1  0020               	movlb	0	; select bank0
 16790  14F2  00B2               	movwf	??_cmd_ra
 16791  14F3  0832               	movf	??_cmd_ra,w
 16792  14F4  00B7               	movwf	cmd_ra@buff+4
 16793                           
 16794                           ;main.c: 950: buff[5] = tempAlarm.alarmTemp;
 16795  14F5  0021               	movlb	1	; select bank1
 16796  14F6  0827               	movf	_tempAlarm^(0+128),w
 16797  14F7  0020               	movlb	0	; select bank0
 16798  14F8  00B2               	movwf	??_cmd_ra
 16799  14F9  0832               	movf	??_cmd_ra,w
 16800  14FA  00B8               	movwf	cmd_ra@buff+5
 16801                           
 16802                           ;main.c: 951: buff[6] = lumAlarm.alarmLum;
 16803  14FB  0021               	movlb	1	; select bank1
 16804  14FC  0824               	movf	_lumAlarm^(0+128),w
 16805  14FD  0020               	movlb	0	; select bank0
 16806  14FE  00B2               	movwf	??_cmd_ra
 16807  14FF  0832               	movf	??_cmd_ra,w
 16808  1500  00B9               	movwf	cmd_ra@buff+6
 16809  1501                     l5757:
 16810                           
 16811                           ;main.c: 952: buff[7] = ALAF == 'A' ? 1 : 0;
 16812  1501  3041               	movlw	65
 16813  1502  066F               	xorwf	_ALAF,w
 16814  1503  1903               	btfsc	3,2
 16815  1504  2D06               	goto	u5801
 16816  1505  2D08               	goto	u5800
 16817  1506                     u5801:
 16818  1506  3001               	movlw	1
 16819  1507  2D09               	goto	u5810
 16820  1508                     u5800:
 16821  1508  3000               	movlw	0
 16822  1509                     u5810:
 16823  1509  00B2               	movwf	??_cmd_ra
 16824  150A  0832               	movf	??_cmd_ra,w
 16825  150B  00BA               	movwf	cmd_ra@buff+7
 16826  150C                     l5759:
 16827                           
 16828                           ;main.c: 953: buff[8] = (uint8_t)0xFE;
 16829  150C  30FE               	movlw	254
 16830  150D  00B2               	movwf	??_cmd_ra
 16831  150E  0832               	movf	??_cmd_ra,w
 16832  150F  00BB               	movwf	cmd_ra@buff+8
 16833  1510                     l5761:
 16834                           
 16835                           ;main.c: 955: sendMessage(9,buff);
 16836  1510  3009               	movlw	9
 16837  1511  00A3               	movwf	sendMessage@num
 16838  1512  3000               	movlw	0
 16839  1513  00A4               	movwf	sendMessage@num+1
 16840  1514  3033               	movlw	(low (cmd_ra@buff| 0))& (0+255)
 16841  1515  00B2               	movwf	??_cmd_ra
 16842  1516  0832               	movf	??_cmd_ra,w
 16843  1517  00A5               	movwf	sendMessage@buffer
 16844  1518  3192  2256  3194   	fcall	_sendMessage
 16845  151B                     l1483:
 16846  151B  0008               	return
 16847  151C                     __end_of_cmd_ra:
 16848                           
 16849                           	psect	text39
 16850  1104                     __ptext39:	
 16851 ;; *************** function _cmd_mta *****************
 16852 ;; Defined at:
 16853 ;;		line 934 in file "main.c"
 16854 ;; Parameters:    Size  Location     Type
 16855 ;;  num             2   15[BANK0 ] int 
 16856 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16857 ;;		 -> main@buff(20), 
 16858 ;; Auto vars:     Size  Location     Type
 16859 ;;		None
 16860 ;; Return value:  Size  Location     Type
 16861 ;;                  1    wreg      void 
 16862 ;; Registers used:
 16863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16864 ;; Tracked objects:
 16865 ;;		On entry : 0/0
 16866 ;;		On exit  : 0/0
 16867 ;;		Unchanged: 0/0
 16868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16869 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16872 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16873 ;;Total ram usage:        3 bytes
 16874 ;; Hardware stack levels used:    1
 16875 ;; Hardware stack levels required when called:    8
 16876 ;; This function calls:
 16877 ;;		_sendERRORMessage
 16878 ;;		_sendOKMessage
 16879 ;; This function is called by:
 16880 ;;		_main
 16881 ;; This function uses a non-reentrant model
 16882 ;;
 16883                           
 16884                           
 16885                           ;psect for function _cmd_mta
 16886  1104                     _cmd_mta:
 16887  1104                     l5747:	
 16888                           ;incstack = 0
 16889                           ; Regs used in _cmd_mta: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16890                           
 16891                           
 16892                           ;main.c: 935: if(buffer[2] < 0x3c){
 16893  1104  0020               	movlb	0	; select bank0
 16894  1105  0831               	movf	cmd_mta@buffer,w
 16895  1106  3E02               	addlw	2
 16896  1107  0086               	movwf	6
 16897  1108  0187               	clrf	7
 16898  1109  303C               	movlw	60
 16899  110A  0201               	subwf	1,w
 16900  110B  1803               	skipnc
 16901  110C  290E               	goto	u5791
 16902  110D  290F               	goto	u5790
 16903  110E                     u5791:
 16904  110E  291A               	goto	l5753
 16905  110F                     u5790:
 16906  110F                     l5749:
 16907                           
 16908                           ;main.c: 936: TALA = buffer[2];
 16909  110F  0831               	movf	cmd_mta@buffer,w
 16910  1110  0086               	movwf	6
 16911  1111  0187               	clrf	7
 16912  1112  3F42               	moviw [2]fsr1
 16913  1113  0021               	movlb	1	; select bank1
 16914  1114  00E9               	movwf	_TALA^(0+128)
 16915  1115                     l5751:
 16916                           
 16917                           ;main.c: 937: sendOKMessage((uint8_t)0XC5);
 16918  1115  30C5               	movlw	197
 16919  1116  3190  20E9  3191   	fcall	_sendOKMessage
 16920                           
 16921                           ;main.c: 938: } else {
 16922  1119  291E               	goto	l1480
 16923  111A                     l5753:
 16924                           
 16925                           ;main.c: 939: sendERRORMessage((uint8_t)0XC5);
 16926  111A  30C5               	movlw	197
 16927  111B  3191  2156  3191   	fcall	_sendERRORMessage
 16928  111E                     l1480:
 16929  111E  0008               	return
 16930  111F                     __end_of_cmd_mta:
 16931                           
 16932                           	psect	text40
 16933  10B8                     __ptext40:	
 16934 ;; *************** function _cmd_mmp *****************
 16935 ;; Defined at:
 16936 ;;		line 925 in file "main.c"
 16937 ;; Parameters:    Size  Location     Type
 16938 ;;  num             2   15[BANK0 ] int 
 16939 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 16940 ;;		 -> main@buff(20), 
 16941 ;; Auto vars:     Size  Location     Type
 16942 ;;		None
 16943 ;; Return value:  Size  Location     Type
 16944 ;;                  1    wreg      void 
 16945 ;; Registers used:
 16946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16947 ;; Tracked objects:
 16948 ;;		On entry : 0/0
 16949 ;;		On exit  : 0/0
 16950 ;;		Unchanged: 0/0
 16951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16952 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16955 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16956 ;;Total ram usage:        3 bytes
 16957 ;; Hardware stack levels used:    1
 16958 ;; Hardware stack levels required when called:    8
 16959 ;; This function calls:
 16960 ;;		_sendERRORMessage
 16961 ;;		_sendOKMessage
 16962 ;; This function is called by:
 16963 ;;		_main
 16964 ;; This function uses a non-reentrant model
 16965 ;;
 16966                           
 16967                           
 16968                           ;psect for function _cmd_mmp
 16969  10B8                     _cmd_mmp:
 16970  10B8                     l5739:	
 16971                           ;incstack = 0
 16972                           ; Regs used in _cmd_mmp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16973                           
 16974                           
 16975                           ;main.c: 926: if(num == 4){
 16976  10B8  3004               	movlw	4
 16977  10B9  0020               	movlb	0	; select bank0
 16978  10BA  062F               	xorwf	cmd_mmp@num,w
 16979  10BB  0430               	iorwf	cmd_mmp@num+1,w
 16980  10BC  1D03               	btfss	3,2
 16981  10BD  28BF               	goto	u5781
 16982  10BE  28C0               	goto	u5780
 16983  10BF                     u5781:
 16984  10BF  28CB               	goto	l5745
 16985  10C0                     u5780:
 16986  10C0                     l5741:
 16987                           
 16988                           ;main.c: 927: PMON = buffer[2];
 16989  10C0  0831               	movf	cmd_mmp@buffer,w
 16990  10C1  0086               	movwf	6
 16991  10C2  0187               	clrf	7
 16992  10C3  3F42               	moviw [2]fsr1
 16993  10C4  0021               	movlb	1	; select bank1
 16994  10C5  00EA               	movwf	_PMON^(0+128)
 16995  10C6                     l5743:
 16996                           
 16997                           ;main.c: 928: sendOKMessage((uint8_t)0XC4);
 16998  10C6  30C4               	movlw	196
 16999  10C7  3190  20E9  3190   	fcall	_sendOKMessage
 17000                           
 17001                           ;main.c: 929: } else{
 17002  10CA  28CF               	goto	l1475
 17003  10CB                     l5745:
 17004                           
 17005                           ;main.c: 930: sendERRORMessage((uint8_t)0XC4);
 17006  10CB  30C4               	movlw	196
 17007  10CC  3191  2156  3190   	fcall	_sendERRORMessage
 17008  10CF                     l1475:
 17009  10CF  0008               	return
 17010  10D0                     __end_of_cmd_mmp:
 17011                           
 17012                           	psect	text41
 17013  12C2                     __ptext41:	
 17014 ;; *************** function _cmd_rp *****************
 17015 ;; Defined at:
 17016 ;;		line 914 in file "main.c"
 17017 ;; Parameters:    Size  Location     Type
 17018 ;;  num             2   15[BANK0 ] int 
 17019 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 17020 ;;		 -> main@buff(20), 
 17021 ;; Auto vars:     Size  Location     Type
 17022 ;;  buff            5   19[BANK0 ] unsigned char [5]
 17023 ;; Return value:  Size  Location     Type
 17024 ;;                  1    wreg      void 
 17025 ;; Registers used:
 17026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17027 ;; Tracked objects:
 17028 ;;		On entry : 0/0
 17029 ;;		On exit  : 0/0
 17030 ;;		Unchanged: 0/0
 17031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17032 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17033 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17035 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17036 ;;Total ram usage:        9 bytes
 17037 ;; Hardware stack levels used:    1
 17038 ;; Hardware stack levels required when called:    7
 17039 ;; This function calls:
 17040 ;;		_sendMessage
 17041 ;; This function is called by:
 17042 ;;		_main
 17043 ;; This function uses a non-reentrant model
 17044 ;;
 17045                           
 17046                           
 17047                           ;psect for function _cmd_rp
 17048  12C2                     _cmd_rp:
 17049  12C2                     l5735:	
 17050                           ;incstack = 0
 17051                           ; Regs used in _cmd_rp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17052                           
 17053                           
 17054                           ;main.c: 915: uint8_t buff[5];;main.c: 916: buff[0] = (uint8_t)0xFD;
 17055  12C2  30FD               	movlw	253
 17056  12C3  0020               	movlb	0	; select bank0
 17057  12C4  00B2               	movwf	??_cmd_rp
 17058  12C5  0832               	movf	??_cmd_rp,w
 17059  12C6  00B3               	movwf	cmd_rp@buff
 17060                           
 17061                           ;main.c: 917: buff[1] = (uint8_t)0XC3;
 17062  12C7  30C3               	movlw	195
 17063  12C8  00B2               	movwf	??_cmd_rp
 17064  12C9  0832               	movf	??_cmd_rp,w
 17065  12CA  00B4               	movwf	cmd_rp@buff+1
 17066                           
 17067                           ;main.c: 918: buff[2] = PMON;
 17068  12CB  0021               	movlb	1	; select bank1
 17069  12CC  086A               	movf	_PMON^(0+128),w
 17070  12CD  0020               	movlb	0	; select bank0
 17071  12CE  00B2               	movwf	??_cmd_rp
 17072  12CF  0832               	movf	??_cmd_rp,w
 17073  12D0  00B5               	movwf	cmd_rp@buff+2
 17074                           
 17075                           ;main.c: 919: buff[3] = TALA;
 17076  12D1  0021               	movlb	1	; select bank1
 17077  12D2  0869               	movf	_TALA^(0+128),w
 17078  12D3  0020               	movlb	0	; select bank0
 17079  12D4  00B2               	movwf	??_cmd_rp
 17080  12D5  0832               	movf	??_cmd_rp,w
 17081  12D6  00B6               	movwf	cmd_rp@buff+3
 17082                           
 17083                           ;main.c: 920: buff[4] = (uint8_t)0xFE;
 17084  12D7  30FE               	movlw	254
 17085  12D8  00B2               	movwf	??_cmd_rp
 17086  12D9  0832               	movf	??_cmd_rp,w
 17087  12DA  00B7               	movwf	cmd_rp@buff+4
 17088  12DB                     l5737:
 17089                           
 17090                           ;main.c: 922: sendMessage(5,buff);
 17091  12DB  3005               	movlw	5
 17092  12DC  00A3               	movwf	sendMessage@num
 17093  12DD  3000               	movlw	0
 17094  12DE  00A4               	movwf	sendMessage@num+1
 17095  12DF  3033               	movlw	(low (cmd_rp@buff| 0))& (0+255)
 17096  12E0  00B2               	movwf	??_cmd_rp
 17097  12E1  0832               	movf	??_cmd_rp,w
 17098  12E2  00A5               	movwf	sendMessage@buffer
 17099  12E3  3192  2256  3192   	fcall	_sendMessage
 17100  12E6                     l1470:
 17101  12E6  0008               	return
 17102  12E7                     __end_of_cmd_rp:
 17103                           
 17104                           	psect	text42
 17105  1212                     __ptext42:	
 17106 ;; *************** function _cmd_rtl *****************
 17107 ;; Defined at:
 17108 ;;		line 903 in file "main.c"
 17109 ;; Parameters:    Size  Location     Type
 17110 ;;  num             2   15[BANK0 ] int 
 17111 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 17112 ;;		 -> main@buff(20), 
 17113 ;; Auto vars:     Size  Location     Type
 17114 ;;  buff            5   19[BANK0 ] unsigned char [5]
 17115 ;; Return value:  Size  Location     Type
 17116 ;;                  1    wreg      void 
 17117 ;; Registers used:
 17118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17119 ;; Tracked objects:
 17120 ;;		On entry : 0/0
 17121 ;;		On exit  : 0/0
 17122 ;;		Unchanged: 0/0
 17123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17124 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17125 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17127 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17128 ;;Total ram usage:        9 bytes
 17129 ;; Hardware stack levels used:    1
 17130 ;; Hardware stack levels required when called:    7
 17131 ;; This function calls:
 17132 ;;		_sendMessage
 17133 ;; This function is called by:
 17134 ;;		_main
 17135 ;; This function uses a non-reentrant model
 17136 ;;
 17137                           
 17138                           
 17139                           ;psect for function _cmd_rtl
 17140  1212                     _cmd_rtl:
 17141  1212                     l5731:	
 17142                           ;incstack = 0
 17143                           ; Regs used in _cmd_rtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17144                           
 17145                           
 17146                           ;main.c: 904: uint8_t buff[5];;main.c: 905: buff[0] = (uint8_t)0xFD;
 17147  1212  30FD               	movlw	253
 17148  1213  0020               	movlb	0	; select bank0
 17149  1214  00B2               	movwf	??_cmd_rtl
 17150  1215  0832               	movf	??_cmd_rtl,w
 17151  1216  00B3               	movwf	cmd_rtl@buff
 17152                           
 17153                           ;main.c: 906: buff[1] = (uint8_t)0XC2;
 17154  1217  30C2               	movlw	194
 17155  1218  00B2               	movwf	??_cmd_rtl
 17156  1219  0832               	movf	??_cmd_rtl,w
 17157  121A  00B4               	movwf	cmd_rtl@buff+1
 17158                           
 17159                           ;main.c: 907: buff[2] = temp;
 17160  121B  086E               	movf	_temp,w
 17161  121C  00B2               	movwf	??_cmd_rtl
 17162  121D  0832               	movf	??_cmd_rtl,w
 17163  121E  00B5               	movwf	cmd_rtl@buff+2
 17164                           
 17165                           ;main.c: 908: buff[3] = lumLevel;
 17166  121F  086D               	movf	_lumLevel,w
 17167  1220  00B2               	movwf	??_cmd_rtl
 17168  1221  0832               	movf	??_cmd_rtl,w
 17169  1222  00B6               	movwf	cmd_rtl@buff+3
 17170                           
 17171                           ;main.c: 909: buff[4] = (uint8_t)0xFE;
 17172  1223  30FE               	movlw	254
 17173  1224  00B2               	movwf	??_cmd_rtl
 17174  1225  0832               	movf	??_cmd_rtl,w
 17175  1226  00B7               	movwf	cmd_rtl@buff+4
 17176  1227                     l5733:
 17177                           
 17178                           ;main.c: 911: sendMessage(5,buff);
 17179  1227  3005               	movlw	5
 17180  1228  00A3               	movwf	sendMessage@num
 17181  1229  3000               	movlw	0
 17182  122A  00A4               	movwf	sendMessage@num+1
 17183  122B  3033               	movlw	(low (cmd_rtl@buff| 0))& (0+255)
 17184  122C  00B2               	movwf	??_cmd_rtl
 17185  122D  0832               	movf	??_cmd_rtl,w
 17186  122E  00A5               	movwf	sendMessage@buffer
 17187  122F  3192  2256  3192   	fcall	_sendMessage
 17188  1232                     l1467:
 17189  1232  0008               	return
 17190  1233                     __end_of_cmd_rtl:
 17191                           
 17192                           	psect	text43
 17193  178B                     __ptext43:	
 17194 ;; *************** function _cmd_sc *****************
 17195 ;; Defined at:
 17196 ;;		line 888 in file "main.c"
 17197 ;; Parameters:    Size  Location     Type
 17198 ;;  num             2   15[BANK0 ] int 
 17199 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 17200 ;;		 -> main@buff(20), 
 17201 ;; Auto vars:     Size  Location     Type
 17202 ;;  s               2   24[BANK0 ] int 
 17203 ;;  m               2   22[BANK0 ] int 
 17204 ;;  h               2   20[BANK0 ] int 
 17205 ;; Return value:  Size  Location     Type
 17206 ;;                  1    wreg      void 
 17207 ;; Registers used:
 17208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17209 ;; Tracked objects:
 17210 ;;		On entry : 0/0
 17211 ;;		On exit  : 0/0
 17212 ;;		Unchanged: 0/0
 17213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17214 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17215 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17217 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17218 ;;Total ram usage:       11 bytes
 17219 ;; Hardware stack levels used:    1
 17220 ;; Hardware stack levels required when called:    8
 17221 ;; This function calls:
 17222 ;;		_sendERRORMessage
 17223 ;;		_sendOKMessage
 17224 ;; This function is called by:
 17225 ;;		_main
 17226 ;; This function uses a non-reentrant model
 17227 ;;
 17228                           
 17229                           
 17230                           ;psect for function _cmd_sc
 17231  178B                     _cmd_sc:
 17232  178B                     l5709:	
 17233                           ;incstack = 0
 17234                           ; Regs used in _cmd_sc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17235                           
 17236                           
 17237                           ;main.c: 889: int h = buffer[2];
 17238  178B  0020               	movlb	0	; select bank0
 17239  178C  0831               	movf	cmd_sc@buffer,w
 17240  178D  3E02               	addlw	2
 17241  178E  0086               	movwf	6
 17242  178F  0187               	clrf	7
 17243  1790  0801               	movf	1,w
 17244  1791  00B2               	movwf	??_cmd_sc
 17245  1792  01B3               	clrf	??_cmd_sc+1
 17246  1793  0832               	movf	??_cmd_sc,w
 17247  1794  00B4               	movwf	cmd_sc@h
 17248  1795  0833               	movf	??_cmd_sc+1,w
 17249  1796  00B5               	movwf	cmd_sc@h+1
 17250                           
 17251                           ;main.c: 890: int m = buffer[3];
 17252  1797  0831               	movf	cmd_sc@buffer,w
 17253  1798  3E03               	addlw	3
 17254  1799  0086               	movwf	6
 17255  179A  0187               	clrf	7
 17256  179B  0801               	movf	1,w
 17257  179C  00B2               	movwf	??_cmd_sc
 17258  179D  01B3               	clrf	??_cmd_sc+1
 17259  179E  0832               	movf	??_cmd_sc,w
 17260  179F  00B6               	movwf	cmd_sc@m
 17261  17A0  0833               	movf	??_cmd_sc+1,w
 17262  17A1  00B7               	movwf	cmd_sc@m+1
 17263                           
 17264                           ;main.c: 891: int s = buffer[4];
 17265  17A2  0831               	movf	cmd_sc@buffer,w
 17266  17A3  3E04               	addlw	4
 17267  17A4  0086               	movwf	6
 17268  17A5  0187               	clrf	7
 17269  17A6  0801               	movf	1,w
 17270  17A7  00B2               	movwf	??_cmd_sc
 17271  17A8  01B3               	clrf	??_cmd_sc+1
 17272  17A9  0832               	movf	??_cmd_sc,w
 17273  17AA  00B8               	movwf	cmd_sc@s
 17274  17AB  0833               	movf	??_cmd_sc+1,w
 17275  17AC  00B9               	movwf	cmd_sc@s+1
 17276  17AD                     l5711:
 17277                           
 17278                           ;main.c: 892: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 17279  17AD  1BB5               	btfsc	cmd_sc@h+1,7
 17280  17AE  2FB0               	goto	u5711
 17281  17AF  2FB1               	goto	u5710
 17282  17B0                     u5711:
 17283  17B0  2FFB               	goto	l5729
 17284  17B1                     u5710:
 17285  17B1                     l5713:
 17286  17B1  0835               	movf	cmd_sc@h+1,w
 17287  17B2  3A80               	xorlw	128
 17288  17B3  00B2               	movwf	??_cmd_sc
 17289  17B4  3080               	movlw	128
 17290  17B5  0232               	subwf	??_cmd_sc,w
 17291  17B6  1D03               	skipz
 17292  17B7  2FBA               	goto	u5725
 17293  17B8  3018               	movlw	24
 17294  17B9  0234               	subwf	cmd_sc@h,w
 17295  17BA                     u5725:
 17296  17BA  1803               	skipnc
 17297  17BB  2FBD               	goto	u5721
 17298  17BC  2FBE               	goto	u5720
 17299  17BD                     u5721:
 17300  17BD  2FFB               	goto	l5729
 17301  17BE                     u5720:
 17302  17BE                     l5715:
 17303  17BE  0020               	movlb	0	; select bank0
 17304  17BF  1BB7               	btfsc	cmd_sc@m+1,7
 17305  17C0  2FC2               	goto	u5731
 17306  17C1  2FC3               	goto	u5730
 17307  17C2                     u5731:
 17308  17C2  2FFB               	goto	l5729
 17309  17C3                     u5730:
 17310  17C3                     l5717:
 17311  17C3  0837               	movf	cmd_sc@m+1,w
 17312  17C4  3A80               	xorlw	128
 17313  17C5  00B2               	movwf	??_cmd_sc
 17314  17C6  3080               	movlw	128
 17315  17C7  0232               	subwf	??_cmd_sc,w
 17316  17C8  1D03               	skipz
 17317  17C9  2FCC               	goto	u5745
 17318  17CA  303C               	movlw	60
 17319  17CB  0236               	subwf	cmd_sc@m,w
 17320  17CC                     u5745:
 17321  17CC  1803               	skipnc
 17322  17CD  2FCF               	goto	u5741
 17323  17CE  2FD0               	goto	u5740
 17324  17CF                     u5741:
 17325  17CF  2FFB               	goto	l5729
 17326  17D0                     u5740:
 17327  17D0                     l5719:
 17328  17D0  0020               	movlb	0	; select bank0
 17329  17D1  1BB9               	btfsc	cmd_sc@s+1,7
 17330  17D2  2FD4               	goto	u5751
 17331  17D3  2FD5               	goto	u5750
 17332  17D4                     u5751:
 17333  17D4  2FFB               	goto	l5729
 17334  17D5                     u5750:
 17335  17D5                     l5721:
 17336  17D5  0839               	movf	cmd_sc@s+1,w
 17337  17D6  3A80               	xorlw	128
 17338  17D7  00B2               	movwf	??_cmd_sc
 17339  17D8  3080               	movlw	128
 17340  17D9  0232               	subwf	??_cmd_sc,w
 17341  17DA  1D03               	skipz
 17342  17DB  2FDE               	goto	u5765
 17343  17DC  303C               	movlw	60
 17344  17DD  0238               	subwf	cmd_sc@s,w
 17345  17DE                     u5765:
 17346  17DE  1803               	skipnc
 17347  17DF  2FE1               	goto	u5761
 17348  17E0  2FE2               	goto	u5760
 17349  17E1                     u5761:
 17350  17E1  2FFB               	goto	l5729
 17351  17E2                     u5760:
 17352  17E2                     l5723:
 17353  17E2  3006               	movlw	6
 17354  17E3  0020               	movlb	0	; select bank0
 17355  17E4  062F               	xorwf	cmd_sc@num,w
 17356  17E5  0430               	iorwf	cmd_sc@num+1,w
 17357  17E6  1D03               	btfss	3,2
 17358  17E7  2FE9               	goto	u5771
 17359  17E8  2FEA               	goto	u5770
 17360  17E9                     u5771:
 17361  17E9  2FFB               	goto	l5729
 17362  17EA                     u5770:
 17363  17EA                     l5725:
 17364                           
 17365                           ;main.c: 893: t.h = h;
 17366  17EA  0834               	movf	cmd_sc@h,w
 17367  17EB  00B2               	movwf	??_cmd_sc
 17368  17EC  0832               	movf	??_cmd_sc,w
 17369  17ED  00E5               	movwf	_t
 17370                           
 17371                           ;main.c: 894: t.m = m;
 17372  17EE  0836               	movf	cmd_sc@m,w
 17373  17EF  00B2               	movwf	??_cmd_sc
 17374  17F0  0832               	movf	??_cmd_sc,w
 17375  17F1  00E6               	movwf	_t+1
 17376                           
 17377                           ;main.c: 895: t.s = s;
 17378  17F2  0838               	movf	cmd_sc@s,w
 17379  17F3  00B2               	movwf	??_cmd_sc
 17380  17F4  0832               	movf	??_cmd_sc,w
 17381  17F5  00E7               	movwf	_t+2
 17382  17F6                     l5727:
 17383                           
 17384                           ;main.c: 896: sendOKMessage((uint8_t)0XC1);
 17385  17F6  30C1               	movlw	193
 17386  17F7  3190  20E9  3197   	fcall	_sendOKMessage
 17387                           
 17388                           ;main.c: 897: } else {
 17389  17FA  2FFF               	goto	l1464
 17390  17FB                     l5729:
 17391                           
 17392                           ;main.c: 898: sendERRORMessage((uint8_t)0XC1);
 17393  17FB  30C1               	movlw	193
 17394  17FC  3191  2156  3197   	fcall	_sendERRORMessage
 17395  17FF                     l1464:
 17396  17FF  0008               	return
 17397  1800                     __end_of_cmd_sc:
 17398                           
 17399                           	psect	text44
 17400  129D                     __ptext44:	
 17401 ;; *************** function _cmd_rc *****************
 17402 ;; Defined at:
 17403 ;;		line 876 in file "main.c"
 17404 ;; Parameters:    Size  Location     Type
 17405 ;;  num             2   15[BANK0 ] int 
 17406 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 17407 ;;		 -> main@buff(20), 
 17408 ;; Auto vars:     Size  Location     Type
 17409 ;;  buff            6   19[BANK0 ] unsigned char [6]
 17410 ;; Return value:  Size  Location     Type
 17411 ;;                  1    wreg      void 
 17412 ;; Registers used:
 17413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17414 ;; Tracked objects:
 17415 ;;		On entry : 0/0
 17416 ;;		On exit  : 0/0
 17417 ;;		Unchanged: 0/0
 17418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17419 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17420 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17422 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17423 ;;Total ram usage:       10 bytes
 17424 ;; Hardware stack levels used:    1
 17425 ;; Hardware stack levels required when called:    7
 17426 ;; This function calls:
 17427 ;;		_sendMessage
 17428 ;; This function is called by:
 17429 ;;		_main
 17430 ;; This function uses a non-reentrant model
 17431 ;;
 17432                           
 17433                           
 17434                           ;psect for function _cmd_rc
 17435  129D                     _cmd_rc:
 17436  129D                     l5705:	
 17437                           ;incstack = 0
 17438                           ; Regs used in _cmd_rc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17439                           
 17440                           
 17441                           ;main.c: 877: uint8_t buff[6];;main.c: 878: buff[0] = (uint8_t)0xFD;
 17442  129D  30FD               	movlw	253
 17443  129E  0020               	movlb	0	; select bank0
 17444  129F  00B2               	movwf	??_cmd_rc
 17445  12A0  0832               	movf	??_cmd_rc,w
 17446  12A1  00B3               	movwf	cmd_rc@buff
 17447                           
 17448                           ;main.c: 879: buff[1] = (uint8_t)0xC0;
 17449  12A2  30C0               	movlw	192
 17450  12A3  00B2               	movwf	??_cmd_rc
 17451  12A4  0832               	movf	??_cmd_rc,w
 17452  12A5  00B4               	movwf	cmd_rc@buff+1
 17453                           
 17454                           ;main.c: 880: buff[2] = t.h;
 17455  12A6  0865               	movf	_t,w
 17456  12A7  00B2               	movwf	??_cmd_rc
 17457  12A8  0832               	movf	??_cmd_rc,w
 17458  12A9  00B5               	movwf	cmd_rc@buff+2
 17459                           
 17460                           ;main.c: 881: buff[3] = t.m;
 17461  12AA  0866               	movf	_t+1,w
 17462  12AB  00B2               	movwf	??_cmd_rc
 17463  12AC  0832               	movf	??_cmd_rc,w
 17464  12AD  00B6               	movwf	cmd_rc@buff+3
 17465                           
 17466                           ;main.c: 882: buff[4] = t.s;
 17467  12AE  0867               	movf	_t+2,w
 17468  12AF  00B2               	movwf	??_cmd_rc
 17469  12B0  0832               	movf	??_cmd_rc,w
 17470  12B1  00B7               	movwf	cmd_rc@buff+4
 17471                           
 17472                           ;main.c: 883: buff[5] = (uint8_t)0xFE;
 17473  12B2  30FE               	movlw	254
 17474  12B3  00B2               	movwf	??_cmd_rc
 17475  12B4  0832               	movf	??_cmd_rc,w
 17476  12B5  00B8               	movwf	cmd_rc@buff+5
 17477  12B6                     l5707:
 17478                           
 17479                           ;main.c: 885: sendMessage(6,buff);
 17480  12B6  3006               	movlw	6
 17481  12B7  00A3               	movwf	sendMessage@num
 17482  12B8  3000               	movlw	0
 17483  12B9  00A4               	movwf	sendMessage@num+1
 17484  12BA  3033               	movlw	(low (cmd_rc@buff| 0))& (0+255)
 17485  12BB  00B2               	movwf	??_cmd_rc
 17486  12BC  0832               	movf	??_cmd_rc,w
 17487  12BD  00A5               	movwf	sendMessage@buffer
 17488  12BE  3192  2256  3192   	fcall	_sendMessage
 17489  12C1                     l1459:
 17490  12C1  0008               	return
 17491  12C2                     __end_of_cmd_rc:
 17492                           
 17493                           	psect	text45
 17494  0C01                     __ptext45:	
 17495 ;; *************** function _cmd_tri *****************
 17496 ;; Defined at:
 17497 ;;		line 1056 in file "main.c"
 17498 ;; Parameters:    Size  Location     Type
 17499 ;;  num             2   15[BANK0 ] int 
 17500 ;;  buffer          1   17[BANK0 ] PTR unsigned char 
 17501 ;;		 -> main@buff(20), 
 17502 ;; Auto vars:     Size  Location     Type
 17503 ;;  buffData        5   23[BANK0 ] unsigned char [5]
 17504 ;;  buffInit        4   28[BANK0 ] unsigned char [4]
 17505 ;;  startingInde    2   38[BANK0 ] int 
 17506 ;;  i               2   35[BANK0 ] int 
 17507 ;;  maxReadingsA    2   33[BANK0 ] int 
 17508 ;;  j               1   41[BANK0 ] unsigned char 
 17509 ;;  n               1   40[BANK0 ] unsigned char 
 17510 ;;  index           1   37[BANK0 ] unsigned char 
 17511 ;;  buffEOM         1   32[BANK0 ] unsigned char [1]
 17512 ;; Return value:  Size  Location     Type
 17513 ;;                  1    wreg      void 
 17514 ;; Registers used:
 17515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17516 ;; Tracked objects:
 17517 ;;		On entry : 0/0
 17518 ;;		On exit  : 0/0
 17519 ;;		Unchanged: 0/0
 17520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17521 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17522 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;Total ram usage:       27 bytes
 17526 ;; Hardware stack levels used:    1
 17527 ;; Hardware stack levels required when called:    8
 17528 ;; This function calls:
 17529 ;;		_DATAEE_ReadByte
 17530 ;;		___wmul
 17531 ;;		_sendERRORMessage
 17532 ;;		_sendMessage
 17533 ;; This function is called by:
 17534 ;;		_main
 17535 ;; This function uses a non-reentrant model
 17536 ;;
 17537                           
 17538                           
 17539                           ;psect for function _cmd_tri
 17540  0C01                     _cmd_tri:
 17541  0C01                     l5875:	
 17542                           ;incstack = 0
 17543                           ; Regs used in _cmd_tri: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17544                           
 17545                           
 17546                           ;main.c: 1057: if(num == 5){
 17547  0C01  3005               	movlw	5
 17548  0C02  0020               	movlb	0	; select bank0
 17549  0C03  062F               	xorwf	cmd_tri@num,w
 17550  0C04  0430               	iorwf	cmd_tri@num+1,w
 17551  0C05  1D03               	btfss	3,2
 17552  0C06  2C08               	goto	u6031
 17553  0C07  2C09               	goto	u6030
 17554  0C08                     u6031:
 17555  0C08  2D25               	goto	l5939
 17556  0C09                     u6030:
 17557  0C09                     l5877:
 17558                           
 17559                           ;main.c: 1058: uint8_t n = buffer[2];
 17560  0C09  0831               	movf	cmd_tri@buffer,w
 17561  0C0A  0086               	movwf	6
 17562  0C0B  0187               	clrf	7
 17563  0C0C  3F42               	moviw [2]fsr1
 17564  0C0D  00C8               	movwf	cmd_tri@n
 17565                           
 17566                           ;main.c: 1059: uint8_t index = buffer[3];
 17567  0C0E  0831               	movf	cmd_tri@buffer,w
 17568  0C0F  0086               	movwf	6
 17569  0C10  0187               	clrf	7
 17570  0C11  3F43               	moviw [3]fsr1
 17571  0C12  00C5               	movwf	cmd_tri@index
 17572  0C13                     l5879:
 17573                           
 17574                           ;main.c: 1061: int startingIndex = iwrite + index;
 17575  0C13  086B               	movf	_iwrite,w
 17576  0C14  0745               	addwf	cmd_tri@index,w
 17577  0C15  00C6               	movwf	cmd_tri@startingIndex
 17578  0C16  01C7               	clrf	cmd_tri@startingIndex+1
 17579  0C17  0DC7               	rlf	cmd_tri@startingIndex+1,f
 17580  0C18                     l5881:
 17581                           
 17582                           ;main.c: 1062: if(startingIndex >= NREG){
 17583  0C18  0847               	movf	cmd_tri@startingIndex+1,w
 17584  0C19  3A80               	xorlw	128
 17585  0C1A  00B2               	movwf	??_cmd_tri
 17586  0C1B  3080               	movlw	128
 17587  0C1C  0232               	subwf	??_cmd_tri,w
 17588  0C1D  1D03               	skipz
 17589  0C1E  2C21               	goto	u6045
 17590  0C1F  087D               	movf	_NREG,w
 17591  0C20  0246               	subwf	cmd_tri@startingIndex,w
 17592  0C21                     u6045:
 17593  0C21  1C03               	skipc
 17594  0C22  2C24               	goto	u6041
 17595  0C23  2C25               	goto	u6040
 17596  0C24                     u6041:
 17597  0C24  2C34               	goto	l5885
 17598  0C25                     u6040:
 17599  0C25                     l5883:
 17600                           
 17601                           ;main.c: 1063: startingIndex = index - (NREG - iwrite);
 17602  0C25  087D               	movf	_NREG,w
 17603  0C26  0020               	movlb	0	; select bank0
 17604  0C27  00B2               	movwf	??_cmd_tri
 17605  0C28  01B3               	clrf	??_cmd_tri+1
 17606  0C29  0845               	movf	cmd_tri@index,w
 17607  0C2A  076B               	addwf	_iwrite,w
 17608  0C2B  00B4               	movwf	??_cmd_tri+2
 17609  0C2C  01B5               	clrf	??_cmd_tri+3
 17610  0C2D  0DB5               	rlf	??_cmd_tri+3,f
 17611  0C2E  0832               	movf	??_cmd_tri,w
 17612  0C2F  0234               	subwf	??_cmd_tri+2,w
 17613  0C30  00C6               	movwf	cmd_tri@startingIndex
 17614  0C31  0833               	movf	??_cmd_tri+1,w
 17615  0C32  3B35               	subwfb	??_cmd_tri+3,w
 17616  0C33  00C7               	movwf	cmd_tri@startingIndex+1
 17617  0C34                     l5885:
 17618                           
 17619                           ;main.c: 1064: };main.c: 1065: if(nr != NREG){
 17620  0C34  0020               	movlb	0	; select bank0
 17621  0C35  086A               	movf	_nr,w
 17622  0C36  067D               	xorwf	_NREG,w
 17623  0C37  1903               	skipnz
 17624  0C38  2C3A               	goto	u6051
 17625  0C39  2C3B               	goto	u6050
 17626  0C3A                     u6051:
 17627  0C3A  2C42               	goto	l1520
 17628  0C3B                     u6050:
 17629  0C3B                     l5887:
 17630                           
 17631                           ;main.c: 1066: startingIndex = index;
 17632  0C3B  0845               	movf	cmd_tri@index,w
 17633  0C3C  00B2               	movwf	??_cmd_tri
 17634  0C3D  01B3               	clrf	??_cmd_tri+1
 17635  0C3E  0832               	movf	??_cmd_tri,w
 17636  0C3F  00C6               	movwf	cmd_tri@startingIndex
 17637  0C40  0833               	movf	??_cmd_tri+1,w
 17638  0C41  00C7               	movwf	cmd_tri@startingIndex+1
 17639  0C42                     l1520:
 17640                           
 17641                           ;main.c: 1067: };main.c: 1068: int maxReadingsAux = iwrite - startingIndex;
 17642  0C42  086B               	movf	_iwrite,w
 17643  0C43  00B2               	movwf	??_cmd_tri
 17644  0C44  0846               	movf	cmd_tri@startingIndex,w
 17645  0C45  0232               	subwf	??_cmd_tri,w
 17646  0C46  00C1               	movwf	cmd_tri@maxReadingsAux
 17647  0C47  0947               	comf	cmd_tri@startingIndex+1,w
 17648  0C48  1803               	skipnc
 17649  0C49  0A89               	incf	9,f
 17650  0C4A  00C2               	movwf	cmd_tri@maxReadingsAux+1
 17651  0C4B                     l5889:
 17652                           
 17653                           ;main.c: 1069: if(maxReadingsAux < 0){
 17654  0C4B  1FC2               	btfss	cmd_tri@maxReadingsAux+1,7
 17655  0C4C  2C4E               	goto	u6061
 17656  0C4D  2C4F               	goto	u6060
 17657  0C4E                     u6061:
 17658  0C4E  2C5A               	goto	l1521
 17659  0C4F                     u6060:
 17660  0C4F                     l5891:
 17661                           
 17662                           ;main.c: 1070: maxReadingsAux = iwrite + (NREG - startingIndex);
 17663  0C4F  086B               	movf	_iwrite,w
 17664  0C50  077D               	addwf	_NREG,w
 17665  0C51  00B2               	movwf	??_cmd_tri
 17666  0C52  01B3               	clrf	??_cmd_tri+1
 17667  0C53  0DB3               	rlf	??_cmd_tri+1,f
 17668  0C54  0846               	movf	cmd_tri@startingIndex,w
 17669  0C55  0232               	subwf	??_cmd_tri,w
 17670  0C56  00C1               	movwf	cmd_tri@maxReadingsAux
 17671  0C57  0847               	movf	cmd_tri@startingIndex+1,w
 17672  0C58  3B33               	subwfb	??_cmd_tri+1,w
 17673  0C59  00C2               	movwf	cmd_tri@maxReadingsAux+1
 17674  0C5A                     l1521:
 17675                           
 17676                           ;main.c: 1071: };main.c: 1072: if(maxReadingsAux == 0 && nr == NREG){
 17677  0C5A  0841               	movf	cmd_tri@maxReadingsAux,w
 17678  0C5B  0442               	iorwf	cmd_tri@maxReadingsAux+1,w
 17679  0C5C  1D03               	btfss	3,2
 17680  0C5D  2C5F               	goto	u6071
 17681  0C5E  2C60               	goto	u6070
 17682  0C5F                     u6071:
 17683  0C5F  2C6D               	goto	l1522
 17684  0C60                     u6070:
 17685  0C60                     l5893:
 17686  0C60  086A               	movf	_nr,w
 17687  0C61  067D               	xorwf	_NREG,w
 17688  0C62  1D03               	skipz
 17689  0C63  2C65               	goto	u6081
 17690  0C64  2C66               	goto	u6080
 17691  0C65                     u6081:
 17692  0C65  2C6D               	goto	l1522
 17693  0C66                     u6080:
 17694  0C66                     l5895:
 17695                           
 17696                           ;main.c: 1073: maxReadingsAux = nr;
 17697  0C66  086A               	movf	_nr,w
 17698  0C67  00B2               	movwf	??_cmd_tri
 17699  0C68  01B3               	clrf	??_cmd_tri+1
 17700  0C69  0832               	movf	??_cmd_tri,w
 17701  0C6A  00C1               	movwf	cmd_tri@maxReadingsAux
 17702  0C6B  0833               	movf	??_cmd_tri+1,w
 17703  0C6C  00C2               	movwf	cmd_tri@maxReadingsAux+1
 17704  0C6D                     l1522:
 17705                           
 17706                           ;main.c: 1074: };main.c: 1076: if((n > nr) || (maxReadingsAux < n)){
 17707  0C6D  0848               	movf	cmd_tri@n,w
 17708  0C6E  026A               	subwf	_nr,w
 17709  0C6F  1C03               	skipc
 17710  0C70  2C72               	goto	u6091
 17711  0C71  2C73               	goto	u6090
 17712  0C72                     u6091:
 17713  0C72  2C80               	goto	l5899
 17714  0C73                     u6090:
 17715  0C73                     l5897:
 17716  0C73  0842               	movf	cmd_tri@maxReadingsAux+1,w
 17717  0C74  3A80               	xorlw	128
 17718  0C75  00B2               	movwf	??_cmd_tri
 17719  0C76  3080               	movlw	128
 17720  0C77  0232               	subwf	??_cmd_tri,w
 17721  0C78  1D03               	skipz
 17722  0C79  2C7C               	goto	u6105
 17723  0C7A  0848               	movf	cmd_tri@n,w
 17724  0C7B  0241               	subwf	cmd_tri@maxReadingsAux,w
 17725  0C7C                     u6105:
 17726  0C7C  1803               	skipnc
 17727  0C7D  2C7F               	goto	u6101
 17728  0C7E  2C80               	goto	u6100
 17729  0C7F                     u6101:
 17730  0C7F  2C85               	goto	l5903
 17731  0C80                     u6100:
 17732  0C80                     l5899:
 17733                           
 17734                           ;main.c: 1077: sendERRORMessage((uint8_t)0XCC);
 17735  0C80  30CC               	movlw	204
 17736  0C81  3191  2156  318C   	fcall	_sendERRORMessage
 17737  0C84  2D29               	goto	l1526
 17738  0C85                     l5903:
 17739                           
 17740                           ;main.c: 1079: };main.c: 1082: uint8_t buffInit[4];;main.c: 1083: buffInit[0] = (uint8_t
      +                          )0xFD;
 17741  0C85  30FD               	movlw	253
 17742  0C86  0020               	movlb	0	; select bank0
 17743  0C87  00B2               	movwf	??_cmd_tri
 17744  0C88  0832               	movf	??_cmd_tri,w
 17745  0C89  00BC               	movwf	cmd_tri@buffInit
 17746                           
 17747                           ;main.c: 1084: buffInit[1] = (uint8_t)0XCC;
 17748  0C8A  30CC               	movlw	204
 17749  0C8B  00B2               	movwf	??_cmd_tri
 17750  0C8C  0832               	movf	??_cmd_tri,w
 17751  0C8D  00BD               	movwf	cmd_tri@buffInit+1
 17752                           
 17753                           ;main.c: 1085: buffInit[2] = (uint8_t)n;
 17754  0C8E  0848               	movf	cmd_tri@n,w
 17755  0C8F  00B2               	movwf	??_cmd_tri
 17756  0C90  0832               	movf	??_cmd_tri,w
 17757  0C91  00BE               	movwf	cmd_tri@buffInit+2
 17758                           
 17759                           ;main.c: 1086: buffInit[3] = (uint8_t)index;
 17760  0C92  0845               	movf	cmd_tri@index,w
 17761  0C93  00B2               	movwf	??_cmd_tri
 17762  0C94  0832               	movf	??_cmd_tri,w
 17763  0C95  00BF               	movwf	cmd_tri@buffInit+3
 17764  0C96                     l5905:
 17765                           
 17766                           ;main.c: 1087: sendMessage(4,buffInit);
 17767  0C96  3004               	movlw	4
 17768  0C97  00A3               	movwf	sendMessage@num
 17769  0C98  3000               	movlw	0
 17770  0C99  00A4               	movwf	sendMessage@num+1
 17771  0C9A  303C               	movlw	(low (cmd_tri@buffInit| 0))& (0+255)
 17772  0C9B  00B2               	movwf	??_cmd_tri
 17773  0C9C  0832               	movf	??_cmd_tri,w
 17774  0C9D  00A5               	movwf	sendMessage@buffer
 17775  0C9E  3192  2256  318C   	fcall	_sendMessage
 17776  0CA1                     l5907:
 17777                           
 17778                           ;main.c: 1089: int i = startingIndex;
 17779  0CA1  0020               	movlb	0	; select bank0
 17780  0CA2  0847               	movf	cmd_tri@startingIndex+1,w
 17781  0CA3  00C4               	movwf	cmd_tri@i+1
 17782  0CA4  0846               	movf	cmd_tri@startingIndex,w
 17783  0CA5  00C3               	movwf	cmd_tri@i
 17784                           
 17785                           ;main.c: 1091: uint8_t j;;main.c: 1092: uint8_t buffData[5];;main.c: 1093: while(n){
 17786  0CA6  2D0F               	goto	l5933
 17787  0CA7                     l5909:
 17788                           
 17789                           ;main.c: 1094: for(j = 0; j < 5; j++){
 17790  0CA7  01C9               	clrf	cmd_tri@j
 17791  0CA8                     l5915:
 17792                           
 17793                           ;main.c: 1095: buffData[j] = DATAEE_ReadByte( (i * 0x5) + 0x7012 + j);
 17794  0CA8  0849               	movf	cmd_tri@j,w
 17795  0CA9  00B2               	movwf	??_cmd_tri
 17796  0CAA  01B3               	clrf	??_cmd_tri+1
 17797  0CAB  0844               	movf	cmd_tri@i+1,w
 17798  0CAC  00A1               	movwf	___wmul@multiplier+1
 17799  0CAD  0843               	movf	cmd_tri@i,w
 17800  0CAE  00A0               	movwf	___wmul@multiplier
 17801  0CAF  3005               	movlw	5
 17802  0CB0  00A2               	movwf	___wmul@multiplicand
 17803  0CB1  3000               	movlw	0
 17804  0CB2  00A3               	movwf	___wmul@multiplicand+1
 17805  0CB3  3191  21D1  318C   	fcall	___wmul
 17806  0CB6  0020               	movlb	0	; select bank0
 17807  0CB7  0832               	movf	??_cmd_tri,w
 17808  0CB8  0720               	addwf	?___wmul,w
 17809  0CB9  00B4               	movwf	??_cmd_tri+2
 17810  0CBA  0833               	movf	??_cmd_tri+1,w
 17811  0CBB  3D21               	addwfc	?___wmul+1,w
 17812  0CBC  00B5               	movwf	??_cmd_tri+3
 17813  0CBD  0834               	movf	??_cmd_tri+2,w
 17814  0CBE  3E12               	addlw	18
 17815  0CBF  00A6               	movwf	DATAEE_ReadByte@bAdd
 17816  0CC0  3070               	movlw	112
 17817  0CC1  3D35               	addwfc	??_cmd_tri+3,w
 17818  0CC2  00A7               	movwf	DATAEE_ReadByte@bAdd+1
 17819  0CC3  3190  2041  318C   	fcall	_DATAEE_ReadByte
 17820  0CC6  0020               	movlb	0	; select bank0
 17821  0CC7  00B6               	movwf	??_cmd_tri+4
 17822  0CC8  0849               	movf	cmd_tri@j,w
 17823  0CC9  3E37               	addlw	(low (cmd_tri@buffData| 0))& (0+255)
 17824  0CCA  0086               	movwf	6
 17825  0CCB  0187               	clrf	7
 17826  0CCC  0836               	movf	??_cmd_tri+4,w
 17827  0CCD  0081               	movwf	1
 17828  0CCE                     l5917:
 17829  0CCE  3001               	movlw	1
 17830  0CCF  00B2               	movwf	??_cmd_tri
 17831  0CD0  0832               	movf	??_cmd_tri,w
 17832  0CD1  07C9               	addwf	cmd_tri@j,f
 17833  0CD2                     l5919:
 17834  0CD2  3005               	movlw	5
 17835  0CD3  0249               	subwf	cmd_tri@j,w
 17836  0CD4  1C03               	skipc
 17837  0CD5  2CD7               	goto	u6111
 17838  0CD6  2CD8               	goto	u6110
 17839  0CD7                     u6111:
 17840  0CD7  2CA8               	goto	l5915
 17841  0CD8                     u6110:
 17842  0CD8                     l5921:
 17843                           
 17844                           ;main.c: 1096: };main.c: 1097: sendMessage(5,buffData);
 17845  0CD8  3005               	movlw	5
 17846  0CD9  00A3               	movwf	sendMessage@num
 17847  0CDA  3000               	movlw	0
 17848  0CDB  00A4               	movwf	sendMessage@num+1
 17849  0CDC  3037               	movlw	(low (cmd_tri@buffData| 0))& (0+255)
 17850  0CDD  00B2               	movwf	??_cmd_tri
 17851  0CDE  0832               	movf	??_cmd_tri,w
 17852  0CDF  00A5               	movwf	sendMessage@buffer
 17853  0CE0  3192  2256  318C   	fcall	_sendMessage
 17854  0CE3                     l5923:
 17855                           
 17856                           ;main.c: 1098: if(iread == i){
 17857  0CE3  0020               	movlb	0	; select bank0
 17858  0CE4  086C               	movf	_iread,w
 17859  0CE5  00B2               	movwf	??_cmd_tri
 17860  0CE6  01B3               	clrf	??_cmd_tri+1
 17861  0CE7  0844               	movf	cmd_tri@i+1,w
 17862  0CE8  0633               	xorwf	??_cmd_tri+1,w
 17863  0CE9  1D03               	skipz
 17864  0CEA  2CED               	goto	u6125
 17865  0CEB  0843               	movf	cmd_tri@i,w
 17866  0CEC  0632               	xorwf	??_cmd_tri,w
 17867  0CED                     u6125:
 17868  0CED  1D03               	skipz
 17869  0CEE  2CF0               	goto	u6121
 17870  0CEF  2CF1               	goto	u6120
 17871  0CF0                     u6121:
 17872  0CF0  2CF9               	goto	l5927
 17873  0CF1                     u6120:
 17874  0CF1                     l5925:
 17875                           
 17876                           ;main.c: 1099: maxReadings--;
 17877  0CF1  3001               	movlw	1
 17878  0CF2  0021               	movlb	1	; select bank1
 17879  0CF3  02B3               	subwf	_maxReadings^(0+128),f
 17880                           
 17881                           ;main.c: 1100: iread++;
 17882  0CF4  3001               	movlw	1
 17883  0CF5  0020               	movlb	0	; select bank0
 17884  0CF6  00B2               	movwf	??_cmd_tri
 17885  0CF7  0832               	movf	??_cmd_tri,w
 17886  0CF8  07EC               	addwf	_iread,f
 17887  0CF9                     l5927:
 17888                           
 17889                           ;main.c: 1101: };main.c: 1102: i++;
 17890  0CF9  3001               	movlw	1
 17891  0CFA  07C3               	addwf	cmd_tri@i,f
 17892  0CFB  3000               	movlw	0
 17893  0CFC  3DC4               	addwfc	cmd_tri@i+1,f
 17894  0CFD                     l5929:
 17895                           
 17896                           ;main.c: 1103: n--;
 17897  0CFD  3001               	movlw	1
 17898  0CFE  02C8               	subwf	cmd_tri@n,f
 17899                           
 17900                           ;main.c: 1104: if(i >= NREG){
 17901  0CFF  0844               	movf	cmd_tri@i+1,w
 17902  0D00  3A80               	xorlw	128
 17903  0D01  00B2               	movwf	??_cmd_tri
 17904  0D02  3080               	movlw	128
 17905  0D03  0232               	subwf	??_cmd_tri,w
 17906  0D04  1D03               	skipz
 17907  0D05  2D08               	goto	u6135
 17908  0D06  087D               	movf	_NREG,w
 17909  0D07  0243               	subwf	cmd_tri@i,w
 17910  0D08                     u6135:
 17911  0D08  1C03               	skipc
 17912  0D09  2D0B               	goto	u6131
 17913  0D0A  2D0C               	goto	u6130
 17914  0D0B                     u6131:
 17915  0D0B  2D0F               	goto	l5933
 17916  0D0C                     u6130:
 17917  0D0C                     l5931:
 17918                           
 17919                           ;main.c: 1105: i=0;
 17920  0D0C  0020               	movlb	0	; select bank0
 17921  0D0D  01C3               	clrf	cmd_tri@i
 17922  0D0E  01C4               	clrf	cmd_tri@i+1
 17923  0D0F                     l5933:
 17924  0D0F  0020               	movlb	0	; select bank0
 17925  0D10  0848               	movf	cmd_tri@n,w
 17926  0D11  1D03               	btfss	3,2
 17927  0D12  2D14               	goto	u6141
 17928  0D13  2D15               	goto	u6140
 17929  0D14                     u6141:
 17930  0D14  2CA7               	goto	l5909
 17931  0D15                     u6140:
 17932  0D15                     l5935:
 17933                           
 17934                           ;main.c: 1106: };main.c: 1107: };main.c: 1110: uint8_t buffEOM[1];;main.c: 1111: buffEOM
      +                          [0] = (uint8_t)0xFE;
 17935  0D15  30FE               	movlw	254
 17936  0D16  00B2               	movwf	??_cmd_tri
 17937  0D17  0832               	movf	??_cmd_tri,w
 17938  0D18  00C0               	movwf	cmd_tri@buffEOM
 17939  0D19                     l5937:
 17940                           
 17941                           ;main.c: 1112: sendMessage(1,buffEOM);
 17942  0D19  3001               	movlw	1
 17943  0D1A  00A3               	movwf	sendMessage@num
 17944  0D1B  3000               	movlw	0
 17945  0D1C  00A4               	movwf	sendMessage@num+1
 17946  0D1D  3040               	movlw	(low (cmd_tri@buffEOM| 0))& (0+255)
 17947  0D1E  00B2               	movwf	??_cmd_tri
 17948  0D1F  0832               	movf	??_cmd_tri,w
 17949  0D20  00A5               	movwf	sendMessage@buffer
 17950  0D21  3192  2256  318C   	fcall	_sendMessage
 17951                           
 17952                           ;main.c: 1113: } else{
 17953  0D24  2D29               	goto	l1526
 17954  0D25                     l5939:
 17955                           
 17956                           ;main.c: 1114: sendERRORMessage((uint8_t)0XCC);
 17957  0D25  30CC               	movlw	204
 17958  0D26  3191  2156  318C   	fcall	_sendERRORMessage
 17959  0D29                     l1526:
 17960  0D29  0008               	return
 17961  0D2A                     __end_of_cmd_tri:
 17962                           
 17963                           	psect	text46
 17964  11D1                     __ptext46:	
 17965 ;; *************** function ___wmul *****************
 17966 ;; Defined at:
 17967 ;;		line 15 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 17968 ;; Parameters:    Size  Location     Type
 17969 ;;  multiplier      2    0[BANK0 ] unsigned int 
 17970 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 17971 ;; Auto vars:     Size  Location     Type
 17972 ;;  product         2    4[BANK0 ] unsigned int 
 17973 ;; Return value:  Size  Location     Type
 17974 ;;                  2    0[BANK0 ] unsigned int 
 17975 ;; Registers used:
 17976 ;;		wreg, status,2, status,0
 17977 ;; Tracked objects:
 17978 ;;		On entry : 0/0
 17979 ;;		On exit  : 0/0
 17980 ;;		Unchanged: 0/0
 17981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17982 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17983 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17985 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17986 ;;Total ram usage:        6 bytes
 17987 ;; Hardware stack levels used:    1
 17988 ;; Hardware stack levels required when called:    4
 17989 ;; This function calls:
 17990 ;;		Nothing
 17991 ;; This function is called by:
 17992 ;;		_monitoring_TEMP_LUM
 17993 ;;		_cmd_trc
 17994 ;;		_cmd_tri
 17995 ;;		_main
 17996 ;;		_sprintf
 17997 ;;		_map
 17998 ;; This function uses a non-reentrant model
 17999 ;;
 18000                           
 18001                           
 18002                           ;psect for function ___wmul
 18003  11D1                     ___wmul:
 18004  11D1                     l4523:	
 18005                           ;incstack = 0
 18006                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18007                           
 18008  11D1  0020               	movlb	0	; select bank0
 18009  11D2  01A4               	clrf	___wmul@product
 18010  11D3  01A5               	clrf	___wmul@product+1
 18011  11D4                     l4525:
 18012  11D4  1C20               	btfss	___wmul@multiplier,0
 18013  11D5  29D7               	goto	u3581
 18014  11D6  29D8               	goto	u3580
 18015  11D7                     u3581:
 18016  11D7  29DC               	goto	l1778
 18017  11D8                     u3580:
 18018  11D8                     l4527:
 18019  11D8  0822               	movf	___wmul@multiplicand,w
 18020  11D9  07A4               	addwf	___wmul@product,f
 18021  11DA  0823               	movf	___wmul@multiplicand+1,w
 18022  11DB  3DA5               	addwfc	___wmul@product+1,f
 18023  11DC                     l1778:
 18024  11DC  3001               	movlw	1
 18025  11DD                     u3595:
 18026  11DD  35A2               	lslf	___wmul@multiplicand,f
 18027  11DE  0DA3               	rlf	___wmul@multiplicand+1,f
 18028  11DF  0B89               	decfsz	9,f
 18029  11E0  29DD               	goto	u3595
 18030  11E1                     l4529:
 18031  11E1  3001               	movlw	1
 18032  11E2                     u3605:
 18033  11E2  36A1               	lsrf	___wmul@multiplier+1,f
 18034  11E3  0CA0               	rrf	___wmul@multiplier,f
 18035  11E4  0B89               	decfsz	9,f
 18036  11E5  29E2               	goto	u3605
 18037  11E6                     l4531:
 18038  11E6  0820               	movf	___wmul@multiplier,w
 18039  11E7  0421               	iorwf	___wmul@multiplier+1,w
 18040  11E8  1D03               	btfss	3,2
 18041  11E9  29EB               	goto	u3611
 18042  11EA  29EC               	goto	u3610
 18043  11EB                     u3611:
 18044  11EB  29D4               	goto	l4525
 18045  11EC                     u3610:
 18046  11EC                     l4533:
 18047  11EC  0825               	movf	___wmul@product+1,w
 18048  11ED  00A1               	movwf	?___wmul+1
 18049  11EE  0824               	movf	___wmul@product,w
 18050  11EF  00A0               	movwf	?___wmul
 18051  11F0                     l1780:
 18052  11F0  0008               	return
 18053  11F1                     __end_of___wmul:
 18054                           
 18055                           	psect	text47
 18056  1041                     __ptext47:	
 18057 ;; *************** function _DATAEE_ReadByte *****************
 18058 ;; Defined at:
 18059 ;;		line 202 in file "mcc_generated_files/memory.c"
 18060 ;; Parameters:    Size  Location     Type
 18061 ;;  bAdd            2    6[BANK0 ] unsigned int 
 18062 ;; Auto vars:     Size  Location     Type
 18063 ;;		None
 18064 ;; Return value:  Size  Location     Type
 18065 ;;                  1    wreg      unsigned char 
 18066 ;; Registers used:
 18067 ;;		wreg, status,2
 18068 ;; Tracked objects:
 18069 ;;		On entry : 0/0
 18070 ;;		On exit  : 0/0
 18071 ;;		Unchanged: 0/0
 18072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18073 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18076 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18077 ;;Total ram usage:        2 bytes
 18078 ;; Hardware stack levels used:    1
 18079 ;; Hardware stack levels required when called:    4
 18080 ;; This function calls:
 18081 ;;		Nothing
 18082 ;; This function is called by:
 18083 ;;		_cmd_trc
 18084 ;;		_cmd_tri
 18085 ;;		_main
 18086 ;; This function uses a non-reentrant model
 18087 ;;
 18088                           
 18089                           
 18090                           ;psect for function _DATAEE_ReadByte
 18091  1041                     _DATAEE_ReadByte:
 18092  1041                     l5263:	
 18093                           ;incstack = 0
 18094                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 18095                           
 18096                           
 18097                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 18098  1041  0020               	movlb	0	; select bank0
 18099  1042  0827               	movf	DATAEE_ReadByte@bAdd+1,w
 18100  1043  0030               	movlb	16	; select bank16
 18101  1044  009B               	movwf	27	;volatile
 18102  1045                     l5265:
 18103                           
 18104                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 18105  1045  0020               	movlb	0	; select bank0
 18106  1046  0826               	movf	DATAEE_ReadByte@bAdd,w
 18107  1047  0030               	movlb	16	; select bank16
 18108  1048  009A               	movwf	26	;volatile
 18109  1049                     l5267:
 18110                           
 18111                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 18112  1049  171E               	bsf	30,6	;volsfr
 18113  104A                     l5269:
 18114                           
 18115                           ;memory.c: 207: NVMCON1bits.RD = 1;
 18116  104A  141E               	bsf	30,0	;volsfr
 18117  104B                     l5271:
 18118                           
 18119                           ;memory.c: 208: __nop();
 18120  104B  0000               	nop
 18121  104C                     l5273:
 18122                           
 18123                           ;memory.c: 209: __nop();
 18124  104C  0000               	nop
 18125  104D                     l5275:
 18126                           
 18127                           ;memory.c: 211: return (NVMDATL);
 18128  104D  0030               	movlb	16	; select bank16
 18129  104E  081C               	movf	28,w	;volatile
 18130  104F                     l734:
 18131  104F  0008               	return
 18132  1050                     __end_of_DATAEE_ReadByte:
 18133                           
 18134                           	psect	text48
 18135  10E9                     __ptext48:	
 18136 ;; *************** function _sendOKMessage *****************
 18137 ;; Defined at:
 18138 ;;		line 856 in file "main.c"
 18139 ;; Parameters:    Size  Location     Type
 18140 ;;  cmd             1    wreg     unsigned char 
 18141 ;; Auto vars:     Size  Location     Type
 18142 ;;  cmd             1   10[BANK0 ] unsigned char 
 18143 ;;  bufw            4   11[BANK0 ] unsigned char [4]
 18144 ;; Return value:  Size  Location     Type
 18145 ;;                  1    wreg      void 
 18146 ;; Registers used:
 18147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18148 ;; Tracked objects:
 18149 ;;		On entry : 0/0
 18150 ;;		On exit  : 0/0
 18151 ;;		Unchanged: 0/0
 18152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18154 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18156 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18157 ;;Total ram usage:        6 bytes
 18158 ;; Hardware stack levels used:    1
 18159 ;; Hardware stack levels required when called:    7
 18160 ;; This function calls:
 18161 ;;		_sendMessage
 18162 ;; This function is called by:
 18163 ;;		_cmd_sc
 18164 ;;		_cmd_mmp
 18165 ;;		_cmd_mta
 18166 ;;		_cmd_dac
 18167 ;;		_cmd_dtl
 18168 ;;		_cmd_aa
 18169 ;; This function uses a non-reentrant model
 18170 ;;
 18171                           
 18172                           
 18173                           ;psect for function _sendOKMessage
 18174  10E9                     _sendOKMessage:
 18175                           
 18176                           ;incstack = 0
 18177                           ; Regs used in _sendOKMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18178                           ;sendOKMessage@cmd stored from wreg
 18179  10E9  0020               	movlb	0	; select bank0
 18180  10EA  00AA               	movwf	sendOKMessage@cmd
 18181  10EB                     l5425:
 18182                           
 18183                           ;main.c: 857: uint8_t bufw[4];;main.c: 858: bufw[0] = (uint8_t)0xFD;
 18184  10EB  30FD               	movlw	253
 18185  10EC  00A9               	movwf	??_sendOKMessage
 18186  10ED  0829               	movf	??_sendOKMessage,w
 18187  10EE  00AB               	movwf	sendOKMessage@bufw
 18188                           
 18189                           ;main.c: 859: bufw[1] = (uint8_t)cmd;
 18190  10EF  082A               	movf	sendOKMessage@cmd,w
 18191  10F0  00A9               	movwf	??_sendOKMessage
 18192  10F1  0829               	movf	??_sendOKMessage,w
 18193  10F2  00AC               	movwf	sendOKMessage@bufw+1
 18194  10F3                     l5427:
 18195                           
 18196                           ;main.c: 860: bufw[2] = (uint8_t)0;
 18197  10F3  01AD               	clrf	sendOKMessage@bufw+2
 18198  10F4                     l5429:
 18199                           
 18200                           ;main.c: 861: bufw[3] = (uint8_t)0xFE;
 18201  10F4  30FE               	movlw	254
 18202  10F5  00A9               	movwf	??_sendOKMessage
 18203  10F6  0829               	movf	??_sendOKMessage,w
 18204  10F7  00AE               	movwf	sendOKMessage@bufw+3
 18205  10F8                     l5431:
 18206                           
 18207                           ;main.c: 863: sendMessage(4,bufw);
 18208  10F8  3004               	movlw	4
 18209  10F9  00A3               	movwf	sendMessage@num
 18210  10FA  3000               	movlw	0
 18211  10FB  00A4               	movwf	sendMessage@num+1
 18212  10FC  302B               	movlw	(low (sendOKMessage@bufw| 0))& (0+255)
 18213  10FD  00A9               	movwf	??_sendOKMessage
 18214  10FE  0829               	movf	??_sendOKMessage,w
 18215  10FF  00A5               	movwf	sendMessage@buffer
 18216  1100  3192  2256  3190   	fcall	_sendMessage
 18217  1103                     l1453:
 18218  1103  0008               	return
 18219  1104                     __end_of_sendOKMessage:
 18220                           
 18221                           	psect	text49
 18222  1156                     __ptext49:	
 18223 ;; *************** function _sendERRORMessage *****************
 18224 ;; Defined at:
 18225 ;;		line 866 in file "main.c"
 18226 ;; Parameters:    Size  Location     Type
 18227 ;;  cmd             1    wreg     unsigned char 
 18228 ;; Auto vars:     Size  Location     Type
 18229 ;;  cmd             1   10[BANK0 ] unsigned char 
 18230 ;;  bufw            4   11[BANK0 ] unsigned char [4]
 18231 ;; Return value:  Size  Location     Type
 18232 ;;                  1    wreg      void 
 18233 ;; Registers used:
 18234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18235 ;; Tracked objects:
 18236 ;;		On entry : 0/0
 18237 ;;		On exit  : 0/0
 18238 ;;		Unchanged: 0/0
 18239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18241 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18243 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18244 ;;Total ram usage:        6 bytes
 18245 ;; Hardware stack levels used:    1
 18246 ;; Hardware stack levels required when called:    7
 18247 ;; This function calls:
 18248 ;;		_sendMessage
 18249 ;; This function is called by:
 18250 ;;		_cmd_sc
 18251 ;;		_cmd_mmp
 18252 ;;		_cmd_mta
 18253 ;;		_cmd_dac
 18254 ;;		_cmd_dtl
 18255 ;;		_cmd_aa
 18256 ;;		_cmd_trc
 18257 ;;		_cmd_tri
 18258 ;; This function uses a non-reentrant model
 18259 ;;
 18260                           
 18261                           
 18262                           ;psect for function _sendERRORMessage
 18263  1156                     _sendERRORMessage:
 18264                           
 18265                           ;incstack = 0
 18266                           ; Regs used in _sendERRORMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18267                           ;sendERRORMessage@cmd stored from wreg
 18268  1156  0020               	movlb	0	; select bank0
 18269  1157  00AA               	movwf	sendERRORMessage@cmd
 18270  1158                     l5433:
 18271                           
 18272                           ;main.c: 867: uint8_t bufw[4];;main.c: 868: bufw[0] = (uint8_t)0xFD;
 18273  1158  30FD               	movlw	253
 18274  1159  00A9               	movwf	??_sendERRORMessage
 18275  115A  0829               	movf	??_sendERRORMessage,w
 18276  115B  00AB               	movwf	sendERRORMessage@bufw
 18277                           
 18278                           ;main.c: 869: bufw[1] = (uint8_t)cmd;
 18279  115C  082A               	movf	sendERRORMessage@cmd,w
 18280  115D  00A9               	movwf	??_sendERRORMessage
 18281  115E  0829               	movf	??_sendERRORMessage,w
 18282  115F  00AC               	movwf	sendERRORMessage@bufw+1
 18283                           
 18284                           ;main.c: 870: bufw[2] = (uint8_t)0xFF;
 18285  1160  30FF               	movlw	255
 18286  1161  00A9               	movwf	??_sendERRORMessage
 18287  1162  0829               	movf	??_sendERRORMessage,w
 18288  1163  00AD               	movwf	sendERRORMessage@bufw+2
 18289                           
 18290                           ;main.c: 871: bufw[3] = (uint8_t)0xFE;
 18291  1164  30FE               	movlw	254
 18292  1165  00A9               	movwf	??_sendERRORMessage
 18293  1166  0829               	movf	??_sendERRORMessage,w
 18294  1167  00AE               	movwf	sendERRORMessage@bufw+3
 18295  1168                     l5435:
 18296                           
 18297                           ;main.c: 873: sendMessage(4,bufw);
 18298  1168  3004               	movlw	4
 18299  1169  00A3               	movwf	sendMessage@num
 18300  116A  3000               	movlw	0
 18301  116B  00A4               	movwf	sendMessage@num+1
 18302  116C  302B               	movlw	(low (sendERRORMessage@bufw| 0))& (0+255)
 18303  116D  00A9               	movwf	??_sendERRORMessage
 18304  116E  0829               	movf	??_sendERRORMessage,w
 18305  116F  00A5               	movwf	sendMessage@buffer
 18306  1170  3192  2256  3191   	fcall	_sendMessage
 18307  1173                     l1456:
 18308  1173  0008               	return
 18309  1174                     __end_of_sendERRORMessage:
 18310                           
 18311                           	psect	text50
 18312  1256                     __ptext50:	
 18313 ;; *************** function _sendMessage *****************
 18314 ;; Defined at:
 18315 ;;		line 664 in file "main.c"
 18316 ;; Parameters:    Size  Location     Type
 18317 ;;  num             2    3[BANK0 ] int 
 18318 ;;  buffer          1    5[BANK0 ] PTR unsigned char 
 18319 ;;		 -> cmd_tri@buffEOM(1), cmd_tri@buffData(5), cmd_tri@buffInit(4), cmd_trc@buffEOM(1), 
 18320 ;;		 -> cmd_trc@buffData(5), cmd_trc@buffInit(3), cmd_ir@buff(7), cmd_ra@buff(9), 
 18321 ;;		 -> cmd_rp@buff(5), cmd_rtl@buff(5), cmd_rc@buff(6), sendERRORMessage@bufw(4), 
 18322 ;;		 -> sendOKMessage@bufw(4), checkFlags@buff(7), 
 18323 ;; Auto vars:     Size  Location     Type
 18324 ;;  n               2    7[BANK0 ] int 
 18325 ;; Return value:  Size  Location     Type
 18326 ;;                  1    wreg      void 
 18327 ;; Registers used:
 18328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18329 ;; Tracked objects:
 18330 ;;		On entry : 0/0
 18331 ;;		On exit  : 0/0
 18332 ;;		Unchanged: 0/0
 18333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18334 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18337 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18338 ;;Total ram usage:        6 bytes
 18339 ;; Hardware stack levels used:    1
 18340 ;; Hardware stack levels required when called:    6
 18341 ;; This function calls:
 18342 ;;		_putch
 18343 ;; This function is called by:
 18344 ;;		_checkFlags
 18345 ;;		_sendOKMessage
 18346 ;;		_sendERRORMessage
 18347 ;;		_cmd_rc
 18348 ;;		_cmd_rtl
 18349 ;;		_cmd_rp
 18350 ;;		_cmd_ra
 18351 ;;		_cmd_ir
 18352 ;;		_cmd_trc
 18353 ;;		_cmd_tri
 18354 ;; This function uses a non-reentrant model
 18355 ;;
 18356                           
 18357                           
 18358                           ;psect for function _sendMessage
 18359  1256                     _sendMessage:
 18360  1256                     l5061:	
 18361                           ;incstack = 0
 18362                           ; Regs used in _sendMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18363                           
 18364                           
 18365                           ;main.c: 665: int n = 0;
 18366  1256  0020               	movlb	0	; select bank0
 18367  1257  01A7               	clrf	sendMessage@n
 18368  1258  01A8               	clrf	sendMessage@n+1
 18369                           
 18370                           ;main.c: 666: while(n<num){
 18371  1259  2A6A               	goto	l5067
 18372  125A                     l5063:
 18373                           
 18374                           ;main.c: 667: putch(buffer[n]);
 18375  125A  0020               	movlb	0	; select bank0
 18376  125B  0827               	movf	sendMessage@n,w
 18377  125C  0725               	addwf	sendMessage@buffer,w
 18378  125D  00A6               	movwf	??_sendMessage
 18379  125E  0826               	movf	??_sendMessage,w
 18380  125F  0086               	movwf	6
 18381  1260  0187               	clrf	7
 18382  1261  0801               	movf	1,w
 18383  1262  319F  279E  3192   	fcall	_putch
 18384  1265                     l5065:
 18385                           
 18386                           ;main.c: 668: n++;
 18387  1265  3001               	movlw	1
 18388  1266  0020               	movlb	0	; select bank0
 18389  1267  07A7               	addwf	sendMessage@n,f
 18390  1268  3000               	movlw	0
 18391  1269  3DA8               	addwfc	sendMessage@n+1,f
 18392  126A                     l5067:
 18393  126A  0828               	movf	sendMessage@n+1,w
 18394  126B  3A80               	xorlw	128
 18395  126C  00A6               	movwf	??_sendMessage
 18396  126D  0824               	movf	sendMessage@num+1,w
 18397  126E  3A80               	xorlw	128
 18398  126F  0226               	subwf	??_sendMessage,w
 18399  1270  1D03               	skipz
 18400  1271  2A74               	goto	u4755
 18401  1272  0823               	movf	sendMessage@num,w
 18402  1273  0227               	subwf	sendMessage@n,w
 18403  1274                     u4755:
 18404  1274  1C03               	skipc
 18405  1275  2A77               	goto	u4751
 18406  1276  2A78               	goto	u4750
 18407  1277                     u4751:
 18408  1277  2A5A               	goto	l5063
 18409  1278                     u4750:
 18410  1278                     l1379:
 18411  1278  0008               	return
 18412  1279                     __end_of_sendMessage:
 18413                           
 18414                           	psect	text51
 18415  1F9E                     __ptext51:	
 18416 ;; *************** function _putch *****************
 18417 ;; Defined at:
 18418 ;;		line 176 in file "mcc_generated_files/eusart.c"
 18419 ;; Parameters:    Size  Location     Type
 18420 ;;  txData          1    wreg     unsigned char 
 18421 ;; Auto vars:     Size  Location     Type
 18422 ;;  txData          1    2[BANK0 ] unsigned char 
 18423 ;; Return value:  Size  Location     Type
 18424 ;;                  1    wreg      void 
 18425 ;; Registers used:
 18426 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18427 ;; Tracked objects:
 18428 ;;		On entry : 0/0
 18429 ;;		On exit  : 0/0
 18430 ;;		Unchanged: 0/0
 18431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18435 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18436 ;;Total ram usage:        1 bytes
 18437 ;; Hardware stack levels used:    1
 18438 ;; Hardware stack levels required when called:    5
 18439 ;; This function calls:
 18440 ;;		_EUSART_Write
 18441 ;; This function is called by:
 18442 ;;		_sendMessage
 18443 ;; This function uses a non-reentrant model
 18444 ;;
 18445                           
 18446                           
 18447                           ;psect for function _putch
 18448  1F9E                     _putch:
 18449                           
 18450                           ;incstack = 0
 18451                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18452                           ;putch@txData stored from wreg
 18453  1F9E  0020               	movlb	0	; select bank0
 18454  1F9F  00A2               	movwf	putch@txData
 18455  1FA0                     l4625:
 18456                           
 18457                           ;eusart.c: 178: EUSART_Write(txData);
 18458  1FA0  0822               	movf	putch@txData,w
 18459  1FA1  3188  2001  319F   	fcall	_EUSART_Write
 18460  1FA4                     l842:
 18461  1FA4  0008               	return
 18462  1FA5                     __end_of_putch:
 18463                           
 18464                           	psect	text52
 18465  0801                     __ptext52:	
 18466 ;; *************** function _EUSART_Write *****************
 18467 ;; Defined at:
 18468 ;;		line 148 in file "mcc_generated_files/eusart.c"
 18469 ;; Parameters:    Size  Location     Type
 18470 ;;  txData          1    wreg     unsigned char 
 18471 ;; Auto vars:     Size  Location     Type
 18472 ;;  txData          1    1[BANK0 ] unsigned char 
 18473 ;; Return value:  Size  Location     Type
 18474 ;;                  1    wreg      void 
 18475 ;; Registers used:
 18476 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18477 ;; Tracked objects:
 18478 ;;		On entry : 0/0
 18479 ;;		On exit  : 0/0
 18480 ;;		Unchanged: 0/0
 18481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18486 ;;Total ram usage:        2 bytes
 18487 ;; Hardware stack levels used:    1
 18488 ;; Hardware stack levels required when called:    4
 18489 ;; This function calls:
 18490 ;;		Nothing
 18491 ;; This function is called by:
 18492 ;;		_putch
 18493 ;; This function uses a non-reentrant model
 18494 ;;
 18495                           
 18496                           
 18497                           ;psect for function _EUSART_Write
 18498  0801                     _EUSART_Write:
 18499                           
 18500                           ;incstack = 0
 18501                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 18502                           ;EUSART_Write@txData stored from wreg
 18503  0801  0020               	movlb	0	; select bank0
 18504  0802  00A1               	movwf	EUSART_Write@txData
 18505  0803                     l4491:
 18506  0803                     l4493:	
 18507                           ;eusart.c: 150: while(0 == eusartTxBufferRemaining)
 18508                           
 18509  0803  0021               	movlb	1	; select bank1
 18510  0804  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 18511  0805  1903               	btfsc	3,2
 18512  0806  2808               	goto	u3531
 18513  0807  2809               	goto	u3530
 18514  0808                     u3531:
 18515  0808  2803               	goto	l4493
 18516  0809                     u3530:
 18517  0809                     l832:
 18518                           
 18519                           ;eusart.c: 152: };eusart.c: 154: if(0 == PIE3bits.TXIE)
 18520  0809  002E               	movlb	14	; select bank14
 18521  080A  1A19               	btfsc	25,4	;volatile
 18522  080B  280D               	goto	u3541
 18523  080C  280E               	goto	u3540
 18524  080D                     u3541:
 18525  080D  2813               	goto	l833
 18526  080E                     u3540:
 18527  080E                     l4495:
 18528                           
 18529                           ;eusart.c: 155: {;eusart.c: 156: TX1REG = txData;
 18530  080E  0020               	movlb	0	; select bank0
 18531  080F  0821               	movf	EUSART_Write@txData,w
 18532  0810  0022               	movlb	2	; select bank2
 18533  0811  009A               	movwf	26	;volatile
 18534                           
 18535                           ;eusart.c: 157: }
 18536  0812  282E               	goto	l4507
 18537  0813                     l833:
 18538                           
 18539                           ;eusart.c: 158: else;eusart.c: 159: {;eusart.c: 160: PIE3bits.TXIE = 0;
 18540  0813  1219               	bcf	25,4	;volatile
 18541  0814                     l4497:
 18542                           
 18543                           ;eusart.c: 161: eusartTxBuffer[eusartTxHead++] = txData;
 18544  0814  0020               	movlb	0	; select bank0
 18545  0815  0821               	movf	EUSART_Write@txData,w
 18546  0816  00A0               	movwf	??_EUSART_Write
 18547  0817  0021               	movlb	1	; select bank1
 18548  0818  0840               	movf	_eusartTxHead^(0+128),w
 18549  0819  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 18550  081A  0086               	movwf	6
 18551  081B  3001               	movlw	1	; select bank3/4
 18552  081C  0087               	movwf	7
 18553  081D  0020               	movlb	0	; select bank0
 18554  081E  0820               	movf	??_EUSART_Write,w
 18555  081F  0081               	movwf	1
 18556  0820                     l4499:
 18557  0820  3001               	movlw	1
 18558  0821  00A0               	movwf	??_EUSART_Write
 18559  0822  0820               	movf	??_EUSART_Write,w
 18560  0823  0021               	movlb	1	; select bank1
 18561  0824  07C0               	addwf	_eusartTxHead^(0+128),f	;volatile
 18562  0825                     l4501:
 18563                           
 18564                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 18565  0825  3040               	movlw	64
 18566  0826  0240               	subwf	_eusartTxHead^(0+128),w	;volatile
 18567  0827  1C03               	skipc
 18568  0828  282A               	goto	u3551
 18569  0829  282B               	goto	u3550
 18570  082A                     u3551:
 18571  082A  282C               	goto	l4505
 18572  082B                     u3550:
 18573  082B                     l4503:
 18574                           
 18575                           ;eusart.c: 163: {;eusart.c: 164: eusartTxHead = 0;
 18576  082B  01C0               	clrf	_eusartTxHead^(0+128)	;volatile
 18577  082C                     l4505:
 18578                           
 18579                           ;eusart.c: 165: };eusart.c: 166: eusartTxBufferRemaining--;
 18580  082C  3001               	movlw	1
 18581  082D  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 18582  082E                     l4507:
 18583                           
 18584                           ;eusart.c: 167: };eusart.c: 168: PIE3bits.TXIE = 1;
 18585  082E  002E               	movlb	14	; select bank14
 18586  082F  1619               	bsf	25,4	;volatile
 18587  0830                     l836:
 18588  0830  0008               	return
 18589  0831                     __end_of_EUSART_Write:
 18590                           
 18591                           	psect	text53
 18592  113A                     __ptext53:	
 18593 ;; *************** function _SYSTEM_Initialize *****************
 18594 ;; Defined at:
 18595 ;;		line 50 in file "mcc_generated_files/mcc.c"
 18596 ;; Parameters:    Size  Location     Type
 18597 ;;		None
 18598 ;; Auto vars:     Size  Location     Type
 18599 ;;		None
 18600 ;; Return value:  Size  Location     Type
 18601 ;;                  1    wreg      void 
 18602 ;; Registers used:
 18603 ;;		wreg, status,2, status,0, pclath, cstack
 18604 ;; Tracked objects:
 18605 ;;		On entry : 0/0
 18606 ;;		On exit  : 0/0
 18607 ;;		Unchanged: 0/0
 18608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18613 ;;Total ram usage:        0 bytes
 18614 ;; Hardware stack levels used:    1
 18615 ;; Hardware stack levels required when called:    6
 18616 ;; This function calls:
 18617 ;;		_ADCC_Initialize
 18618 ;;		_EUSART_Initialize
 18619 ;;		_EXT_INT_Initialize
 18620 ;;		_OSCILLATOR_Initialize
 18621 ;;		_PIN_MANAGER_Initialize
 18622 ;;		_PMD_Initialize
 18623 ;;		_PWM6_Initialize
 18624 ;;		_TMR1_Initialize
 18625 ;;		_TMR2_Initialize
 18626 ;; This function is called by:
 18627 ;;		_main
 18628 ;; This function uses a non-reentrant model
 18629 ;;
 18630                           
 18631                           
 18632                           ;psect for function _SYSTEM_Initialize
 18633  113A                     _SYSTEM_Initialize:
 18634  113A                     l5437:	
 18635                           ;incstack = 0
 18636                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18637                           
 18638                           
 18639                           ;mcc.c: 52: PMD_Initialize();
 18640  113A  319F  27A5  3191   	fcall	_PMD_Initialize
 18641  113D                     l5439:
 18642                           
 18643                           ;mcc.c: 53: PIN_MANAGER_Initialize();
 18644  113D  3195  251C  3191   	fcall	_PIN_MANAGER_Initialize
 18645  1140                     l5441:
 18646                           
 18647                           ;mcc.c: 54: OSCILLATOR_Initialize();
 18648  1140  319F  27D9  3191   	fcall	_OSCILLATOR_Initialize
 18649  1143                     l5443:
 18650                           
 18651                           ;mcc.c: 55: PWM6_Initialize();
 18652  1143  3190  2018  3191   	fcall	_PWM6_Initialize
 18653  1146                     l5445:
 18654                           
 18655                           ;mcc.c: 56: ADCC_Initialize();
 18656  1146  3190  20A1  3191   	fcall	_ADCC_Initialize
 18657  1149                     l5447:
 18658                           
 18659                           ;mcc.c: 57: TMR2_Initialize();
 18660  1149  3190  2033  3191   	fcall	_TMR2_Initialize
 18661  114C                     l5449:
 18662                           
 18663                           ;mcc.c: 58: TMR1_Initialize();
 18664  114C  3191  2174  3191   	fcall	_TMR1_Initialize
 18665  114F                     l5451:
 18666                           
 18667                           ;mcc.c: 59: EXT_INT_Initialize();
 18668  114F  3190  2025  3191   	fcall	_EXT_INT_Initialize
 18669  1152                     l5453:
 18670                           
 18671                           ;mcc.c: 60: EUSART_Initialize();
 18672  1152  3193  2336  3191   	fcall	_EUSART_Initialize
 18673  1155                     l182:
 18674  1155  0008               	return
 18675  1156                     __end_of_SYSTEM_Initialize:
 18676                           
 18677                           	psect	text54
 18678  1033                     __ptext54:	
 18679 ;; *************** function _TMR2_Initialize *****************
 18680 ;; Defined at:
 18681 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 18682 ;; Parameters:    Size  Location     Type
 18683 ;;		None
 18684 ;; Auto vars:     Size  Location     Type
 18685 ;;		None
 18686 ;; Return value:  Size  Location     Type
 18687 ;;                  1    wreg      void 
 18688 ;; Registers used:
 18689 ;;		wreg, status,2
 18690 ;; Tracked objects:
 18691 ;;		On entry : 0/0
 18692 ;;		On exit  : 0/0
 18693 ;;		Unchanged: 0/0
 18694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18699 ;;Total ram usage:        0 bytes
 18700 ;; Hardware stack levels used:    1
 18701 ;; Hardware stack levels required when called:    4
 18702 ;; This function calls:
 18703 ;;		Nothing
 18704 ;; This function is called by:
 18705 ;;		_SYSTEM_Initialize
 18706 ;; This function uses a non-reentrant model
 18707 ;;
 18708                           
 18709                           
 18710                           ;psect for function _TMR2_Initialize
 18711  1033                     _TMR2_Initialize:
 18712  1033                     l5183:	
 18713                           ;incstack = 0
 18714                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 18715                           
 18716                           
 18717                           ;tmr2.c: 67: T2CLKCON = 0x01;
 18718  1033  3001               	movlw	1
 18719  1034  0025               	movlb	5	; select bank5
 18720  1035  0090               	movwf	16	;volatile
 18721  1036                     l5185:
 18722                           
 18723                           ;tmr2.c: 70: T2HLT = 0x00;
 18724  1036  018F               	clrf	15	;volatile
 18725  1037                     l5187:
 18726                           
 18727                           ;tmr2.c: 73: T2RST = 0x00;
 18728  1037  0191               	clrf	17	;volatile
 18729                           
 18730                           ;tmr2.c: 76: T2PR = 0xFF;
 18731  1038  30FF               	movlw	255
 18732  1039  008D               	movwf	13	;volatile
 18733  103A                     l5189:
 18734                           
 18735                           ;tmr2.c: 79: T2TMR = 0x00;
 18736  103A  018C               	clrf	12	;volatile
 18737  103B                     l5191:
 18738                           
 18739                           ;tmr2.c: 82: PIR4bits.TMR2IF = 0;
 18740  103B  002E               	movlb	14	; select bank14
 18741  103C  1090               	bcf	16,1	;volatile
 18742  103D                     l5193:
 18743                           
 18744                           ;tmr2.c: 85: T2CON = 0x80;
 18745  103D  3080               	movlw	128
 18746  103E  0025               	movlb	5	; select bank5
 18747  103F  008E               	movwf	14	;volatile
 18748  1040                     l647:
 18749  1040  0008               	return
 18750  1041                     __end_of_TMR2_Initialize:
 18751                           
 18752                           	psect	text55
 18753  1174                     __ptext55:	
 18754 ;; *************** function _TMR1_Initialize *****************
 18755 ;; Defined at:
 18756 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 18757 ;; Parameters:    Size  Location     Type
 18758 ;;		None
 18759 ;; Auto vars:     Size  Location     Type
 18760 ;;		None
 18761 ;; Return value:  Size  Location     Type
 18762 ;;                  1    wreg      void 
 18763 ;; Registers used:
 18764 ;;		wreg, status,2, status,0, pclath, cstack
 18765 ;; Tracked objects:
 18766 ;;		On entry : 0/0
 18767 ;;		On exit  : 0/0
 18768 ;;		Unchanged: 0/0
 18769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18774 ;;Total ram usage:        0 bytes
 18775 ;; Hardware stack levels used:    1
 18776 ;; Hardware stack levels required when called:    5
 18777 ;; This function calls:
 18778 ;;		_TMR1_SetInterruptHandler
 18779 ;; This function is called by:
 18780 ;;		_SYSTEM_Initialize
 18781 ;; This function uses a non-reentrant model
 18782 ;;
 18783                           
 18784                           
 18785                           ;psect for function _TMR1_Initialize
 18786  1174                     _TMR1_Initialize:
 18787  1174                     l5195:	
 18788                           ;incstack = 0
 18789                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18790                           
 18791                           
 18792                           ;tmr1.c: 69: T1GCON = 0x00;
 18793  1174  0024               	movlb	4	; select bank4
 18794  1175  018F               	clrf	15	;volatile
 18795                           
 18796                           ;tmr1.c: 72: T1GATE = 0x00;
 18797  1176  0190               	clrf	16	;volatile
 18798  1177                     l5197:
 18799                           
 18800                           ;tmr1.c: 75: T1CLK = 0x04;
 18801  1177  3004               	movlw	4
 18802  1178  0091               	movwf	17	;volatile
 18803  1179                     l5199:
 18804                           
 18805                           ;tmr1.c: 78: TMR1H = 0x86;
 18806  1179  3086               	movlw	134
 18807  117A  008D               	movwf	13	;volatile
 18808  117B                     l5201:
 18809                           
 18810                           ;tmr1.c: 81: TMR1L = 0xE8;
 18811  117B  30E8               	movlw	232
 18812  117C  008C               	movwf	12	;volatile
 18813  117D                     l5203:
 18814                           
 18815                           ;tmr1.c: 84: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 18816  117D  080D               	movf	13,w	;volatile
 18817  117E  0021               	movlb	1	; select bank1
 18818  117F  00EE               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
 18819  1180  0024               	movlb	4	; select bank4
 18820  1181  080C               	movf	12,w	;volatile
 18821  1182  0021               	movlb	1	; select bank1
 18822  1183  00ED               	movwf	_timer1ReloadVal^(0+128)	;volatile
 18823  1184                     l5205:
 18824                           
 18825                           ;tmr1.c: 87: PIR4bits.TMR1IF = 0;
 18826  1184  002E               	movlb	14	; select bank14
 18827  1185  1010               	bcf	16,0	;volatile
 18828  1186                     l5207:
 18829                           
 18830                           ;tmr1.c: 90: PIE4bits.TMR1IE = 1;
 18831  1186  141A               	bsf	26,0	;volatile
 18832  1187                     l5209:
 18833                           
 18834                           ;tmr1.c: 93: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 18835  1187  3003               	movlw	low _TMR1_DefaultInterruptHandler
 18836  1188  0020               	movlb	0	; select bank0
 18837  1189  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 18838  118A  3000               	movlw	high _TMR1_DefaultInterruptHandler
 18839  118B  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 18840  118C  319F  27E2  3191   	fcall	_TMR1_SetInterruptHandler
 18841  118F                     l5211:
 18842                           
 18843                           ;tmr1.c: 96: T1CON = 0x05;
 18844  118F  3005               	movlw	5
 18845  1190  0024               	movlb	4	; select bank4
 18846  1191  008E               	movwf	14	;volatile
 18847  1192                     l409:
 18848  1192  0008               	return
 18849  1193                     __end_of_TMR1_Initialize:
 18850                           
 18851                           	psect	text56
 18852  1FE2                     __ptext56:	
 18853 ;; *************** function _TMR1_SetInterruptHandler *****************
 18854 ;; Defined at:
 18855 ;;		line 178 in file "mcc_generated_files/tmr1.c"
 18856 ;; Parameters:    Size  Location     Type
 18857 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 18858 ;;		 -> Clock_ISR(1), TMR1_DefaultInterruptHandler(1), 
 18859 ;; Auto vars:     Size  Location     Type
 18860 ;;		None
 18861 ;; Return value:  Size  Location     Type
 18862 ;;                  1    wreg      void 
 18863 ;; Registers used:
 18864 ;;		wreg
 18865 ;; Tracked objects:
 18866 ;;		On entry : 0/0
 18867 ;;		On exit  : 0/0
 18868 ;;		Unchanged: 0/0
 18869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18870 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18873 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18874 ;;Total ram usage:        2 bytes
 18875 ;; Hardware stack levels used:    1
 18876 ;; Hardware stack levels required when called:    4
 18877 ;; This function calls:
 18878 ;;		Nothing
 18879 ;; This function is called by:
 18880 ;;		_TMR1_Initialize
 18881 ;;		_main
 18882 ;; This function uses a non-reentrant model
 18883 ;;
 18884                           
 18885                           
 18886                           ;psect for function _TMR1_SetInterruptHandler
 18887  1FE2                     _TMR1_SetInterruptHandler:
 18888  1FE2                     l4813:	
 18889                           ;incstack = 0
 18890                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 18891                           
 18892                           
 18893                           ;tmr1.c: 179: TMR1_InterruptHandler = InterruptHandler;
 18894  1FE2  0020               	movlb	0	; select bank0
 18895  1FE3  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 18896  1FE4  0021               	movlb	1	; select bank1
 18897  1FE5  00EC               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
 18898  1FE6  0020               	movlb	0	; select bank0
 18899  1FE7  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 18900  1FE8  0021               	movlb	1	; select bank1
 18901  1FE9  00EB               	movwf	_TMR1_InterruptHandler^(0+128)
 18902  1FEA                     l439:
 18903  1FEA  0008               	return
 18904  1FEB                     __end_of_TMR1_SetInterruptHandler:
 18905                           
 18906                           	psect	text57
 18907  1018                     __ptext57:	
 18908 ;; *************** function _PWM6_Initialize *****************
 18909 ;; Defined at:
 18910 ;;		line 58 in file "mcc_generated_files/pwm6.c"
 18911 ;; Parameters:    Size  Location     Type
 18912 ;;		None
 18913 ;; Auto vars:     Size  Location     Type
 18914 ;;		None
 18915 ;; Return value:  Size  Location     Type
 18916 ;;                  1    wreg      void 
 18917 ;; Registers used:
 18918 ;;		wreg, status,2, status,0
 18919 ;; Tracked objects:
 18920 ;;		On entry : 0/0
 18921 ;;		On exit  : 0/0
 18922 ;;		Unchanged: 0/0
 18923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18928 ;;Total ram usage:        0 bytes
 18929 ;; Hardware stack levels used:    1
 18930 ;; Hardware stack levels required when called:    4
 18931 ;; This function calls:
 18932 ;;		Nothing
 18933 ;; This function is called by:
 18934 ;;		_SYSTEM_Initialize
 18935 ;; This function uses a non-reentrant model
 18936 ;;
 18937                           
 18938                           
 18939                           ;psect for function _PWM6_Initialize
 18940  1018                     _PWM6_Initialize:
 18941  1018                     l5173:	
 18942                           ;incstack = 0
 18943                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 18944                           
 18945                           
 18946                           ;pwm6.c: 62: PWM6CON = 0x80;
 18947  1018  3080               	movlw	128
 18948  1019  0027               	movlb	7	; select bank7
 18949  101A  008E               	movwf	14	;volatile
 18950                           
 18951                           ;pwm6.c: 65: PWM6DCH = 0xFF;
 18952  101B  30FF               	movlw	255
 18953  101C  008D               	movwf	13	;volatile
 18954                           
 18955                           ;pwm6.c: 68: PWM6DCL = 0xC0;
 18956  101D  30C0               	movlw	192
 18957  101E  008C               	movwf	12	;volatile
 18958  101F                     l5175:
 18959                           
 18960                           ;pwm6.c: 71: CCPTMRS1bits.P6TSEL = 1;
 18961  101F  0024               	movlb	4	; select bank4
 18962  1020  081F               	movf	31,w	;volatile
 18963  1021  39F3               	andlw	-13
 18964  1022  3804               	iorlw	4
 18965  1023  009F               	movwf	31	;volatile
 18966  1024                     l617:
 18967  1024  0008               	return
 18968  1025                     __end_of_PWM6_Initialize:
 18969                           
 18970                           	psect	text58
 18971  1FA5                     __ptext58:	
 18972 ;; *************** function _PMD_Initialize *****************
 18973 ;; Defined at:
 18974 ;;		line 77 in file "mcc_generated_files/mcc.c"
 18975 ;; Parameters:    Size  Location     Type
 18976 ;;		None
 18977 ;; Auto vars:     Size  Location     Type
 18978 ;;		None
 18979 ;; Return value:  Size  Location     Type
 18980 ;;                  1    wreg      void 
 18981 ;; Registers used:
 18982 ;;		status,2
 18983 ;; Tracked objects:
 18984 ;;		On entry : 0/0
 18985 ;;		On exit  : 0/0
 18986 ;;		Unchanged: 0/0
 18987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18992 ;;Total ram usage:        0 bytes
 18993 ;; Hardware stack levels used:    1
 18994 ;; Hardware stack levels required when called:    4
 18995 ;; This function calls:
 18996 ;;		Nothing
 18997 ;; This function is called by:
 18998 ;;		_SYSTEM_Initialize
 18999 ;; This function uses a non-reentrant model
 19000 ;;
 19001                           
 19002                           
 19003                           ;psect for function _PMD_Initialize
 19004  1FA5                     _PMD_Initialize:
 19005  1FA5                     l5163:	
 19006                           ;incstack = 0
 19007                           ; Regs used in _PMD_Initialize: [status,2]
 19008                           
 19009                           
 19010                           ;mcc.c: 80: PMD0 = 0x00;
 19011  1FA5  002F               	movlb	15	; select bank15
 19012  1FA6  0196               	clrf	22	;volatile
 19013                           
 19014                           ;mcc.c: 82: PMD1 = 0x00;
 19015  1FA7  0197               	clrf	23	;volatile
 19016                           
 19017                           ;mcc.c: 84: PMD2 = 0x00;
 19018  1FA8  0198               	clrf	24	;volatile
 19019                           
 19020                           ;mcc.c: 86: PMD3 = 0x00;
 19021  1FA9  0199               	clrf	25	;volatile
 19022                           
 19023                           ;mcc.c: 88: PMD4 = 0x00;
 19024  1FAA  019A               	clrf	26	;volatile
 19025                           
 19026                           ;mcc.c: 90: PMD5 = 0x00;
 19027  1FAB  019B               	clrf	27	;volatile
 19028  1FAC                     l188:
 19029  1FAC  0008               	return
 19030  1FAD                     __end_of_PMD_Initialize:
 19031                           
 19032                           	psect	text59
 19033  151C                     __ptext59:	
 19034 ;; *************** function _PIN_MANAGER_Initialize *****************
 19035 ;; Defined at:
 19036 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 19037 ;; Parameters:    Size  Location     Type
 19038 ;;		None
 19039 ;; Auto vars:     Size  Location     Type
 19040 ;;		None
 19041 ;; Return value:  Size  Location     Type
 19042 ;;                  1    wreg      void 
 19043 ;; Registers used:
 19044 ;;		wreg, status,2
 19045 ;; Tracked objects:
 19046 ;;		On entry : 0/0
 19047 ;;		On exit  : 0/0
 19048 ;;		Unchanged: 0/0
 19049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19054 ;;Total ram usage:        0 bytes
 19055 ;; Hardware stack levels used:    1
 19056 ;; Hardware stack levels required when called:    4
 19057 ;; This function calls:
 19058 ;;		Nothing
 19059 ;; This function is called by:
 19060 ;;		_SYSTEM_Initialize
 19061 ;; This function uses a non-reentrant model
 19062 ;;
 19063                           
 19064                           
 19065                           ;psect for function _PIN_MANAGER_Initialize
 19066  151C                     _PIN_MANAGER_Initialize:
 19067  151C                     l5115:	
 19068                           ;incstack = 0
 19069                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 19070                           
 19071                           
 19072                           ;pin_manager.c: 62: LATE = 0x00;
 19073  151C  0020               	movlb	0	; select bank0
 19074  151D  019A               	clrf	26	;volatile
 19075                           
 19076                           ;pin_manager.c: 63: LATD = 0x00;
 19077  151E  0199               	clrf	25	;volatile
 19078                           
 19079                           ;pin_manager.c: 64: LATA = 0x00;
 19080  151F  0196               	clrf	22	;volatile
 19081                           
 19082                           ;pin_manager.c: 65: LATB = 0x00;
 19083  1520  0197               	clrf	23	;volatile
 19084                           
 19085                           ;pin_manager.c: 66: LATC = 0x00;
 19086  1521  0198               	clrf	24	;volatile
 19087  1522                     l5117:
 19088                           
 19089                           ;pin_manager.c: 71: TRISE = 0x07;
 19090  1522  3007               	movlw	7
 19091  1523  0095               	movwf	21	;volatile
 19092  1524                     l5119:
 19093                           
 19094                           ;pin_manager.c: 72: TRISA = 0x0F;
 19095  1524  300F               	movlw	15
 19096  1525  0091               	movwf	17	;volatile
 19097  1526                     l5121:
 19098                           
 19099                           ;pin_manager.c: 73: TRISB = 0xFF;
 19100  1526  30FF               	movlw	255
 19101  1527  0092               	movwf	18	;volatile
 19102  1528                     l5123:
 19103                           
 19104                           ;pin_manager.c: 74: TRISC = 0xBF;
 19105  1528  30BF               	movlw	191
 19106  1529  0093               	movwf	19	;volatile
 19107  152A                     l5125:
 19108                           
 19109                           ;pin_manager.c: 75: TRISD = 0xFF;
 19110  152A  30FF               	movlw	255
 19111  152B  0094               	movwf	20	;volatile
 19112  152C                     l5127:
 19113                           
 19114                           ;pin_manager.c: 80: ANSELD = 0xFF;
 19115  152C  30FF               	movlw	255
 19116  152D  003E               	movlb	30	; select bank30
 19117  152E  00D9               	movwf	89	;volatile
 19118  152F                     l5129:
 19119                           
 19120                           ;pin_manager.c: 81: ANSELC = 0x47;
 19121  152F  3047               	movlw	71
 19122  1530  00CE               	movwf	78	;volatile
 19123  1531                     l5131:
 19124                           
 19125                           ;pin_manager.c: 82: ANSELB = 0xEF;
 19126  1531  30EF               	movlw	239
 19127  1532  00C3               	movwf	67	;volatile
 19128  1533                     l5133:
 19129                           
 19130                           ;pin_manager.c: 83: ANSELE = 0x07;
 19131  1533  3007               	movlw	7
 19132  1534  00E4               	movwf	100	;volatile
 19133  1535                     l5135:
 19134                           
 19135                           ;pin_manager.c: 84: ANSELA = 0x4F;
 19136  1535  304F               	movlw	79
 19137  1536  00B8               	movwf	56	;volatile
 19138                           
 19139                           ;pin_manager.c: 89: WPUD = 0x00;
 19140  1537  01DA               	clrf	90	;volatile
 19141                           
 19142                           ;pin_manager.c: 90: WPUE = 0x00;
 19143  1538  01E5               	clrf	101	;volatile
 19144                           
 19145                           ;pin_manager.c: 91: WPUB = 0x00;
 19146  1539  01C4               	clrf	68	;volatile
 19147                           
 19148                           ;pin_manager.c: 92: WPUA = 0x00;
 19149  153A  01B9               	clrf	57	;volatile
 19150                           
 19151                           ;pin_manager.c: 93: WPUC = 0x00;
 19152  153B  01CF               	clrf	79	;volatile
 19153                           
 19154                           ;pin_manager.c: 98: ODCONE = 0x00;
 19155  153C  01E6               	clrf	102	;volatile
 19156                           
 19157                           ;pin_manager.c: 99: ODCONA = 0x00;
 19158  153D  01BA               	clrf	58	;volatile
 19159                           
 19160                           ;pin_manager.c: 100: ODCONB = 0x00;
 19161  153E  01C5               	clrf	69	;volatile
 19162                           
 19163                           ;pin_manager.c: 101: ODCONC = 0x00;
 19164  153F  01D0               	clrf	80	;volatile
 19165                           
 19166                           ;pin_manager.c: 102: ODCOND = 0x00;
 19167  1540  01DB               	clrf	91	;volatile
 19168  1541                     l5137:
 19169                           
 19170                           ;pin_manager.c: 107: SLRCONA = 0xFF;
 19171  1541  30FF               	movlw	255
 19172  1542  00BB               	movwf	59	;volatile
 19173  1543                     l5139:
 19174                           
 19175                           ;pin_manager.c: 108: SLRCONB = 0xFF;
 19176  1543  30FF               	movlw	255
 19177  1544  00C6               	movwf	70	;volatile
 19178  1545                     l5141:
 19179                           
 19180                           ;pin_manager.c: 109: SLRCONC = 0xFF;
 19181  1545  30FF               	movlw	255
 19182  1546  00D1               	movwf	81	;volatile
 19183  1547                     l5143:
 19184                           
 19185                           ;pin_manager.c: 110: SLRCOND = 0xFF;
 19186  1547  30FF               	movlw	255
 19187  1548  00DC               	movwf	92	;volatile
 19188  1549                     l5145:
 19189                           
 19190                           ;pin_manager.c: 111: SLRCONE = 0x07;
 19191  1549  3007               	movlw	7
 19192  154A  00E7               	movwf	103	;volatile
 19193  154B                     l5147:
 19194                           
 19195                           ;pin_manager.c: 120: INTPPS = 0x0C;
 19196  154B  300C               	movlw	12
 19197  154C  003D               	movlb	29	; select bank29
 19198  154D  0090               	movwf	16	;volatile
 19199  154E                     l5149:
 19200                           
 19201                           ;pin_manager.c: 121: RXPPS = 0x17;
 19202  154E  3017               	movlw	23
 19203  154F  00CB               	movwf	75	;volatile
 19204  1550                     l5151:
 19205                           
 19206                           ;pin_manager.c: 122: SSP1CLKPPS = 0x13;
 19207  1550  3013               	movlw	19
 19208  1551  00C5               	movwf	69	;volatile
 19209  1552                     l5153:
 19210                           
 19211                           ;pin_manager.c: 123: RC3PPS = 0x14;
 19212  1552  3014               	movlw	20
 19213  1553  003E               	movlb	30	; select bank30
 19214  1554  00A3               	movwf	35	;volatile
 19215  1555                     l5155:
 19216                           
 19217                           ;pin_manager.c: 124: RC4PPS = 0x15;
 19218  1555  3015               	movlw	21
 19219  1556  00A4               	movwf	36	;volatile
 19220  1557                     l5157:
 19221                           
 19222                           ;pin_manager.c: 125: RA6PPS = 0x0E;
 19223  1557  300E               	movlw	14
 19224  1558  0096               	movwf	22	;volatile
 19225  1559                     l5159:
 19226                           
 19227                           ;pin_manager.c: 126: RC6PPS = 0x10;
 19228  1559  3010               	movlw	16
 19229  155A  00A6               	movwf	38	;volatile
 19230  155B                     l5161:
 19231                           
 19232                           ;pin_manager.c: 127: SSP1DATPPS = 0x14;
 19233  155B  3014               	movlw	20
 19234  155C  003D               	movlb	29	; select bank29
 19235  155D  00C6               	movwf	70	;volatile
 19236  155E                     l128:
 19237  155E  0008               	return
 19238  155F                     __end_of_PIN_MANAGER_Initialize:
 19239                           
 19240                           	psect	text60
 19241  1FD9                     __ptext60:	
 19242 ;; *************** function _OSCILLATOR_Initialize *****************
 19243 ;; Defined at:
 19244 ;;		line 63 in file "mcc_generated_files/mcc.c"
 19245 ;; Parameters:    Size  Location     Type
 19246 ;;		None
 19247 ;; Auto vars:     Size  Location     Type
 19248 ;;		None
 19249 ;; Return value:  Size  Location     Type
 19250 ;;                  1    wreg      void 
 19251 ;; Registers used:
 19252 ;;		wreg, status,2
 19253 ;; Tracked objects:
 19254 ;;		On entry : 0/0
 19255 ;;		On exit  : 0/0
 19256 ;;		Unchanged: 0/0
 19257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19262 ;;Total ram usage:        0 bytes
 19263 ;; Hardware stack levels used:    1
 19264 ;; Hardware stack levels required when called:    4
 19265 ;; This function calls:
 19266 ;;		Nothing
 19267 ;; This function is called by:
 19268 ;;		_SYSTEM_Initialize
 19269 ;; This function uses a non-reentrant model
 19270 ;;
 19271                           
 19272                           
 19273                           ;psect for function _OSCILLATOR_Initialize
 19274  1FD9                     _OSCILLATOR_Initialize:
 19275  1FD9                     l5165:	
 19276                           ;incstack = 0
 19277                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 19278                           
 19279                           
 19280                           ;mcc.c: 66: OSCCON1 = 0x62;
 19281  1FD9  3062               	movlw	98
 19282  1FDA  0031               	movlb	17	; select bank17
 19283  1FDB  008D               	movwf	13	;volatile
 19284  1FDC                     l5167:
 19285                           
 19286                           ;mcc.c: 68: OSCCON3 = 0x00;
 19287  1FDC  018F               	clrf	15	;volatile
 19288  1FDD                     l5169:
 19289                           
 19290                           ;mcc.c: 70: OSCEN = 0x00;
 19291  1FDD  0191               	clrf	17	;volatile
 19292                           
 19293                           ;mcc.c: 72: OSCFRQ = 0x02;
 19294  1FDE  3002               	movlw	2
 19295  1FDF  0093               	movwf	19	;volatile
 19296  1FE0                     l5171:
 19297                           
 19298                           ;mcc.c: 74: OSCTUNE = 0x00;
 19299  1FE0  0192               	clrf	18	;volatile
 19300  1FE1                     l185:
 19301  1FE1  0008               	return
 19302  1FE2                     __end_of_OSCILLATOR_Initialize:
 19303                           
 19304                           	psect	text61
 19305  1025                     __ptext61:	
 19306 ;; *************** function _EXT_INT_Initialize *****************
 19307 ;; Defined at:
 19308 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 19309 ;; Parameters:    Size  Location     Type
 19310 ;;		None
 19311 ;; Auto vars:     Size  Location     Type
 19312 ;;		None
 19313 ;; Return value:  Size  Location     Type
 19314 ;;                  1    wreg      void 
 19315 ;; Registers used:
 19316 ;;		wreg, status,2, status,0, pclath, cstack
 19317 ;; Tracked objects:
 19318 ;;		On entry : 0/0
 19319 ;;		On exit  : 0/0
 19320 ;;		Unchanged: 0/0
 19321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19326 ;;Total ram usage:        0 bytes
 19327 ;; Hardware stack levels used:    1
 19328 ;; Hardware stack levels required when called:    5
 19329 ;; This function calls:
 19330 ;;		_INT_SetInterruptHandler
 19331 ;; This function is called by:
 19332 ;;		_SYSTEM_Initialize
 19333 ;; This function uses a non-reentrant model
 19334 ;;
 19335                           
 19336                           
 19337                           ;psect for function _EXT_INT_Initialize
 19338  1025                     _EXT_INT_Initialize:
 19339  1025                     l5213:	
 19340                           ;incstack = 0
 19341                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 19342                           
 19343                           
 19344                           ;ext_int.c: 64: (PIR0bits.INTF = 0);
 19345  1025  002E               	movlb	14	; select bank14
 19346  1026  100C               	bcf	12,0	;volatile
 19347                           
 19348                           ;ext_int.c: 66: (INTCONbits.INTEDG = 1);
 19349  1027  140B               	bsf	11,0	;volatile
 19350  1028                     l5215:
 19351                           
 19352                           ;ext_int.c: 68: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
 19353  1028  3002               	movlw	low _INT_DefaultInterruptHandler
 19354  1029  0020               	movlb	0	; select bank0
 19355  102A  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler
 19356  102B  3000               	movlw	high _INT_DefaultInterruptHandler
 19357  102C  00A1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 19358  102D  319F  27D0  3190   	fcall	_INT_SetInterruptHandler
 19359  1030                     l5217:
 19360                           
 19361                           ;ext_int.c: 69: (PIE0bits.INTE = 1);
 19362  1030  002E               	movlb	14	; select bank14
 19363  1031  1416               	bsf	22,0	;volatile
 19364  1032                     l760:
 19365  1032  0008               	return
 19366  1033                     __end_of_EXT_INT_Initialize:
 19367                           
 19368                           	psect	text62
 19369  1FD0                     __ptext62:	
 19370 ;; *************** function _INT_SetInterruptHandler *****************
 19371 ;; Defined at:
 19372 ;;		line 50 in file "mcc_generated_files/ext_int.c"
 19373 ;; Parameters:    Size  Location     Type
 19374 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 19375 ;;		 -> S1_ISR(1), INT_DefaultInterruptHandler(1), 
 19376 ;; Auto vars:     Size  Location     Type
 19377 ;;		None
 19378 ;; Return value:  Size  Location     Type
 19379 ;;                  1    wreg      void 
 19380 ;; Registers used:
 19381 ;;		wreg
 19382 ;; Tracked objects:
 19383 ;;		On entry : 0/0
 19384 ;;		On exit  : 0/0
 19385 ;;		Unchanged: 0/0
 19386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19387 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19391 ;;Total ram usage:        2 bytes
 19392 ;; Hardware stack levels used:    1
 19393 ;; Hardware stack levels required when called:    4
 19394 ;; This function calls:
 19395 ;;		Nothing
 19396 ;; This function is called by:
 19397 ;;		_EXT_INT_Initialize
 19398 ;;		_main
 19399 ;; This function uses a non-reentrant model
 19400 ;;
 19401                           
 19402                           
 19403                           ;psect for function _INT_SetInterruptHandler
 19404  1FD0                     _INT_SetInterruptHandler:
 19405  1FD0                     l4817:	
 19406                           ;incstack = 0
 19407                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 19408                           
 19409                           
 19410                           ;ext_int.c: 51: INT_InterruptHandler = InterruptHandler;
 19411  1FD0  0020               	movlb	0	; select bank0
 19412  1FD1  0821               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 19413  1FD2  0022               	movlb	2	; select bank2
 19414  1FD3  00B8               	movwf	(_INT_InterruptHandler+1)^(0+256)
 19415  1FD4  0020               	movlb	0	; select bank0
 19416  1FD5  0820               	movf	INT_SetInterruptHandler@InterruptHandler,w
 19417  1FD6  0022               	movlb	2	; select bank2
 19418  1FD7  00B7               	movwf	_INT_InterruptHandler^(0+256)
 19419  1FD8                     l754:
 19420  1FD8  0008               	return
 19421  1FD9                     __end_of_INT_SetInterruptHandler:
 19422                           
 19423                           	psect	text63
 19424  1336                     __ptext63:	
 19425 ;; *************** function _EUSART_Initialize *****************
 19426 ;; Defined at:
 19427 ;;		line 75 in file "mcc_generated_files/eusart.c"
 19428 ;; Parameters:    Size  Location     Type
 19429 ;;		None
 19430 ;; Auto vars:     Size  Location     Type
 19431 ;;		None
 19432 ;; Return value:  Size  Location     Type
 19433 ;;                  1    wreg      void 
 19434 ;; Registers used:
 19435 ;;		wreg, status,2, status,0, pclath, cstack
 19436 ;; Tracked objects:
 19437 ;;		On entry : 0/0
 19438 ;;		On exit  : 0/0
 19439 ;;		Unchanged: 0/0
 19440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19444 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19445 ;;Total ram usage:        1 bytes
 19446 ;; Hardware stack levels used:    1
 19447 ;; Hardware stack levels required when called:    5
 19448 ;; This function calls:
 19449 ;;		_EUSART_SetRxInterruptHandler
 19450 ;;		_EUSART_SetTxInterruptHandler
 19451 ;; This function is called by:
 19452 ;;		_SYSTEM_Initialize
 19453 ;; This function uses a non-reentrant model
 19454 ;;
 19455                           
 19456                           
 19457                           ;psect for function _EUSART_Initialize
 19458  1336                     _EUSART_Initialize:
 19459  1336                     l5219:	
 19460                           ;incstack = 0
 19461                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 19462                           
 19463                           
 19464                           ;eusart.c: 78: PIE3bits.RCIE = 0;
 19465  1336  002E               	movlb	14	; select bank14
 19466  1337  1299               	bcf	25,5	;volatile
 19467  1338                     l5221:
 19468                           
 19469                           ;eusart.c: 79: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 19470  1338  30F1               	movlw	low _EUSART_Receive_ISR
 19471  1339  0020               	movlb	0	; select bank0
 19472  133A  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 19473  133B  3011               	movlw	high _EUSART_Receive_ISR
 19474  133C  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 19475  133D  319F  27BE  3193   	fcall	_EUSART_SetRxInterruptHandler
 19476  1340                     l5223:
 19477                           
 19478                           ;eusart.c: 80: PIE3bits.TXIE = 0;
 19479  1340  002E               	movlb	14	; select bank14
 19480  1341  1219               	bcf	25,4	;volatile
 19481                           
 19482                           ;eusart.c: 81: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
 19483  1342  3033               	movlw	low _EUSART_Transmit_ISR
 19484  1343  0020               	movlb	0	; select bank0
 19485  1344  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 19486  1345  3012               	movlw	high _EUSART_Transmit_ISR
 19487  1346  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 19488  1347  319F  27C7  3193   	fcall	_EUSART_SetTxInterruptHandler
 19489  134A                     l5225:
 19490                           
 19491                           ;eusart.c: 85: BAUD1CON = 0x08;
 19492  134A  3008               	movlw	8
 19493  134B  0022               	movlb	2	; select bank2
 19494  134C  009F               	movwf	31	;volatile
 19495  134D                     l5227:
 19496                           
 19497                           ;eusart.c: 88: RC1STA = 0x90;
 19498  134D  3090               	movlw	144
 19499  134E  009D               	movwf	29	;volatile
 19500  134F                     l5229:
 19501                           
 19502                           ;eusart.c: 91: TX1STA = 0x24;
 19503  134F  3024               	movlw	36
 19504  1350  009E               	movwf	30	;volatile
 19505  1351                     l5231:
 19506                           
 19507                           ;eusart.c: 94: SP1BRGL = 0x19;
 19508  1351  3019               	movlw	25
 19509  1352  009B               	movwf	27	;volatile
 19510  1353                     l5233:
 19511                           
 19512                           ;eusart.c: 97: SP1BRGH = 0x00;
 19513  1353  019C               	clrf	28	;volatile
 19514  1354                     l5235:
 19515                           
 19516                           ;eusart.c: 101: eusartTxHead = 0;
 19517  1354  0021               	movlb	1	; select bank1
 19518  1355  01C0               	clrf	_eusartTxHead^(0+128)	;volatile
 19519  1356                     l5237:
 19520                           
 19521                           ;eusart.c: 102: eusartTxTail = 0;
 19522  1356  01BF               	clrf	_eusartTxTail^(0+128)	;volatile
 19523  1357                     l5239:
 19524                           
 19525                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 19526  1357  3040               	movlw	64
 19527  1358  0020               	movlb	0	; select bank0
 19528  1359  00A2               	movwf	??_EUSART_Initialize
 19529  135A  0822               	movf	??_EUSART_Initialize,w
 19530  135B  0021               	movlb	1	; select bank1
 19531  135C  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
 19532  135D                     l5241:
 19533                           
 19534                           ;eusart.c: 105: eusartRxHead = 0;
 19535  135D  01BE               	clrf	_eusartRxHead^(0+128)	;volatile
 19536  135E                     l5243:
 19537                           
 19538                           ;eusart.c: 106: eusartRxTail = 0;
 19539  135E  01BD               	clrf	_eusartRxTail^(0+128)	;volatile
 19540  135F                     l5245:
 19541                           
 19542                           ;eusart.c: 107: eusartRxCount = 0;
 19543  135F  01BC               	clrf	_eusartRxCount^(0+128)	;volatile
 19544  1360                     l5247:
 19545                           
 19546                           ;eusart.c: 110: PIE3bits.RCIE = 1;
 19547  1360  002E               	movlb	14	; select bank14
 19548  1361  1699               	bsf	25,5	;volatile
 19549  1362                     l811:
 19550  1362  0008               	return
 19551  1363                     __end_of_EUSART_Initialize:
 19552                           
 19553                           	psect	text64
 19554  1FC7                     __ptext64:	
 19555 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 19556 ;; Defined at:
 19557 ;;		line 220 in file "mcc_generated_files/eusart.c"
 19558 ;; Parameters:    Size  Location     Type
 19559 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 19560 ;;		 -> EUSART_Transmit_ISR(1), 
 19561 ;; Auto vars:     Size  Location     Type
 19562 ;;		None
 19563 ;; Return value:  Size  Location     Type
 19564 ;;                  1    wreg      void 
 19565 ;; Registers used:
 19566 ;;		wreg
 19567 ;; Tracked objects:
 19568 ;;		On entry : 0/0
 19569 ;;		On exit  : 0/0
 19570 ;;		Unchanged: 0/0
 19571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19572 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19576 ;;Total ram usage:        2 bytes
 19577 ;; Hardware stack levels used:    1
 19578 ;; Hardware stack levels required when called:    4
 19579 ;; This function calls:
 19580 ;;		Nothing
 19581 ;; This function is called by:
 19582 ;;		_EUSART_Initialize
 19583 ;; This function uses a non-reentrant model
 19584 ;;
 19585                           
 19586                           
 19587                           ;psect for function _EUSART_SetTxInterruptHandler
 19588  1FC7                     _EUSART_SetTxInterruptHandler:
 19589  1FC7                     l4821:	
 19590                           ;incstack = 0
 19591                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 19592                           
 19593                           
 19594                           ;eusart.c: 221: EUSART_TxDefaultInterruptHandler = interruptHandler;
 19595  1FC7  0020               	movlb	0	; select bank0
 19596  1FC8  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 19597  1FC9  0022               	movlb	2	; select bank2
 19598  1FCA  00BC               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
 19599  1FCB  0020               	movlb	0	; select bank0
 19600  1FCC  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 19601  1FCD  0022               	movlb	2	; select bank2
 19602  1FCE  00BB               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
 19603  1FCF                     l856:
 19604  1FCF  0008               	return
 19605  1FD0                     __end_of_EUSART_SetTxInterruptHandler:
 19606                           
 19607                           	psect	text65
 19608  1FBE                     __ptext65:	
 19609 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 19610 ;; Defined at:
 19611 ;;		line 224 in file "mcc_generated_files/eusart.c"
 19612 ;; Parameters:    Size  Location     Type
 19613 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 19614 ;;		 -> EUSART_Receive_ISR(1), 
 19615 ;; Auto vars:     Size  Location     Type
 19616 ;;		None
 19617 ;; Return value:  Size  Location     Type
 19618 ;;                  1    wreg      void 
 19619 ;; Registers used:
 19620 ;;		wreg
 19621 ;; Tracked objects:
 19622 ;;		On entry : 0/0
 19623 ;;		On exit  : 0/0
 19624 ;;		Unchanged: 0/0
 19625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19626 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19630 ;;Total ram usage:        2 bytes
 19631 ;; Hardware stack levels used:    1
 19632 ;; Hardware stack levels required when called:    4
 19633 ;; This function calls:
 19634 ;;		Nothing
 19635 ;; This function is called by:
 19636 ;;		_EUSART_Initialize
 19637 ;; This function uses a non-reentrant model
 19638 ;;
 19639                           
 19640                           
 19641                           ;psect for function _EUSART_SetRxInterruptHandler
 19642  1FBE                     _EUSART_SetRxInterruptHandler:
 19643  1FBE                     l4819:	
 19644                           ;incstack = 0
 19645                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 19646                           
 19647                           
 19648                           ;eusart.c: 225: EUSART_RxDefaultInterruptHandler = interruptHandler;
 19649  1FBE  0020               	movlb	0	; select bank0
 19650  1FBF  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 19651  1FC0  0022               	movlb	2	; select bank2
 19652  1FC1  00BA               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
 19653  1FC2  0020               	movlb	0	; select bank0
 19654  1FC3  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 19655  1FC4  0022               	movlb	2	; select bank2
 19656  1FC5  00B9               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
 19657  1FC6                     l859:
 19658  1FC6  0008               	return
 19659  1FC7                     __end_of_EUSART_SetRxInterruptHandler:
 19660                           
 19661                           	psect	text66
 19662  10A1                     __ptext66:	
 19663 ;; *************** function _ADCC_Initialize *****************
 19664 ;; Defined at:
 19665 ;;		line 63 in file "mcc_generated_files/adcc.c"
 19666 ;; Parameters:    Size  Location     Type
 19667 ;;		None
 19668 ;; Auto vars:     Size  Location     Type
 19669 ;;		None
 19670 ;; Return value:  Size  Location     Type
 19671 ;;                  1    wreg      void 
 19672 ;; Registers used:
 19673 ;;		wreg, status,2
 19674 ;; Tracked objects:
 19675 ;;		On entry : 0/0
 19676 ;;		On exit  : 0/0
 19677 ;;		Unchanged: 0/0
 19678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19683 ;;Total ram usage:        0 bytes
 19684 ;; Hardware stack levels used:    1
 19685 ;; Hardware stack levels required when called:    4
 19686 ;; This function calls:
 19687 ;;		Nothing
 19688 ;; This function is called by:
 19689 ;;		_SYSTEM_Initialize
 19690 ;; This function uses a non-reentrant model
 19691 ;;
 19692                           
 19693                           
 19694                           ;psect for function _ADCC_Initialize
 19695  10A1                     _ADCC_Initialize:
 19696  10A1                     l5177:	
 19697                           ;incstack = 0
 19698                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 19699                           
 19700                           
 19701                           ;adcc.c: 67: ADLTHL = 0x00;
 19702  10A1  0022               	movlb	2	; select bank2
 19703  10A2  018E               	clrf	14	;volatile
 19704                           
 19705                           ;adcc.c: 69: ADLTHH = 0x00;
 19706  10A3  018F               	clrf	15	;volatile
 19707                           
 19708                           ;adcc.c: 71: ADUTHL = 0x00;
 19709  10A4  0190               	clrf	16	;volatile
 19710                           
 19711                           ;adcc.c: 73: ADUTHH = 0x00;
 19712  10A5  0191               	clrf	17	;volatile
 19713                           
 19714                           ;adcc.c: 75: ADSTPTL = 0x00;
 19715  10A6  0192               	clrf	18	;volatile
 19716                           
 19717                           ;adcc.c: 77: ADSTPTH = 0x00;
 19718  10A7  0193               	clrf	19	;volatile
 19719                           
 19720                           ;adcc.c: 79: ADRPT = 0x00;
 19721  10A8  018D               	clrf	13	;volatile
 19722                           
 19723                           ;adcc.c: 81: ADPCH = 0x00;
 19724  10A9  0021               	movlb	1	; select bank1
 19725  10AA  019E               	clrf	30	;volatile
 19726                           
 19727                           ;adcc.c: 83: ADCAP = 0x00;
 19728  10AB  019B               	clrf	27	;volatile
 19729                           
 19730                           ;adcc.c: 85: ADCON1 = 0x00;
 19731  10AC  0194               	clrf	20	;volatile
 19732                           
 19733                           ;adcc.c: 87: ADCON2 = 0x00;
 19734  10AD  0195               	clrf	21	;volatile
 19735                           
 19736                           ;adcc.c: 89: ADCON3 = 0x00;
 19737  10AE  0196               	clrf	22	;volatile
 19738                           
 19739                           ;adcc.c: 91: ADSTAT = 0x00;
 19740  10AF  0197               	clrf	23	;volatile
 19741                           
 19742                           ;adcc.c: 93: ADREF = 0x00;
 19743  10B0  019A               	clrf	26	;volatile
 19744                           
 19745                           ;adcc.c: 95: ADACT = 0x00;
 19746  10B1  0199               	clrf	25	;volatile
 19747                           
 19748                           ;adcc.c: 97: ADCLK = 0x00;
 19749  10B2  0198               	clrf	24	;volatile
 19750  10B3                     l5179:
 19751                           
 19752                           ;adcc.c: 99: ADCON0 = 0x80;
 19753  10B3  3080               	movlw	128
 19754  10B4  0093               	movwf	19	;volatile
 19755  10B5                     l5181:
 19756                           
 19757                           ;adcc.c: 101: ADACQ = 0xFF;
 19758  10B5  30FF               	movlw	255
 19759  10B6  009D               	movwf	29	;volatile
 19760  10B7                     l525:
 19761  10B7  0008               	return
 19762  10B8                     __end_of_ADCC_Initialize:
 19763                           
 19764                           	psect	text67
 19765  0831                     __ptext67:	
 19766 ;; *************** function _LCDinit *****************
 19767 ;; Defined at:
 19768 ;;		line 287 in file "main.c"
 19769 ;; Parameters:    Size  Location     Type
 19770 ;;		None
 19771 ;; Auto vars:     Size  Location     Type
 19772 ;;		None
 19773 ;; Return value:  Size  Location     Type
 19774 ;;                  1    wreg      void 
 19775 ;; Registers used:
 19776 ;;		wreg, status,2, status,0, pclath, cstack
 19777 ;; Tracked objects:
 19778 ;;		On entry : 0/0
 19779 ;;		On exit  : 0/0
 19780 ;;		Unchanged: 0/0
 19781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19785 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19786 ;;Total ram usage:        1 bytes
 19787 ;; Hardware stack levels used:    1
 19788 ;; Hardware stack levels required when called:    6
 19789 ;; This function calls:
 19790 ;;		_LCDsend
 19791 ;;		_LCDsend2x4
 19792 ;; This function is called by:
 19793 ;;		_main
 19794 ;; This function uses a non-reentrant model
 19795 ;;
 19796                           
 19797                           
 19798                           ;psect for function _LCDinit
 19799  0831                     _LCDinit:
 19800  0831                     l5579:	
 19801                           ;incstack = 0
 19802                           ; Regs used in _LCDinit: [wreg+status,2+status,0+pclath+cstack]
 19803                           
 19804                           
 19805                           ;main.c: 289: _delay((unsigned long)((50)*(1000000/4000.0)));
 19806  0831  3011               	movlw	17
 19807  0832  0020               	movlb	0	; select bank0
 19808  0833  00A8               	movwf	??_LCDinit
 19809  0834  303A               	movlw	58
 19810  0835                     u6557:
 19811  0835  0B89               	decfsz	9,f
 19812  0836  2835               	goto	u6557
 19813  0837  0BA8               	decfsz	??_LCDinit,f
 19814  0838  2835               	goto	u6557
 19815  0839  0000               	nop
 19816  083A                     l5581:
 19817                           
 19818                           ;main.c: 290: LCDsend(0x30);
 19819  083A  3030               	movlw	48
 19820  083B  3195  255F  3188   	fcall	_LCDsend
 19821  083E                     l5583:
 19822                           
 19823                           ;main.c: 291: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19824  083E  3034               	movlw	52
 19825  083F  3195  255F  3188   	fcall	_LCDsend
 19826  0842  3029               	movlw	41
 19827  0843                     u6567:
 19828  0843  0B89               	decfsz	9,f
 19829  0844  2843               	goto	u6567
 19830  0845  3200               	nop2
 19831  0846                     l5585:
 19832  0846  3030               	movlw	48
 19833  0847  3195  255F  3188   	fcall	_LCDsend
 19834  084A                     l5587:
 19835                           
 19836                           ;main.c: 292: _delay((unsigned long)((5)*(1000000/4000.0)));
 19837  084A  30FA               	movlw	250
 19838  084B                     u6577:
 19839  084B  3200               	nop2
 19840  084C  0B89               	decfsz	9,f
 19841  084D  284B               	goto	u6577
 19842                           
 19843                           ;main.c: 293: LCDsend(0x30);
 19844  084E  3030               	movlw	48
 19845  084F  3195  255F  3188   	fcall	_LCDsend
 19846                           
 19847                           ;main.c: 294: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19848  0852  3034               	movlw	52
 19849  0853  3195  255F  3188   	fcall	_LCDsend
 19850  0856                     l5589:
 19851  0856  3029               	movlw	41
 19852  0857                     u6587:
 19853  0857  0B89               	decfsz	9,f
 19854  0858  2857               	goto	u6587
 19855  0859  3200               	nop2
 19856  085A                     l5591:
 19857  085A  3030               	movlw	48
 19858  085B  3195  255F  3188   	fcall	_LCDsend
 19859                           
 19860                           ;main.c: 295: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19861  085E  3008               	movlw	8
 19862  085F                     u6597:
 19863  085F  0B89               	decfsz	9,f
 19864  0860  285F               	goto	u6597
 19865  0861  0000               	nop
 19866  0862                     l5593:
 19867                           
 19868                           ;main.c: 296: LCDsend(0x30);
 19869  0862  3030               	movlw	48
 19870  0863  3195  255F  3188   	fcall	_LCDsend
 19871  0866                     l5595:
 19872                           
 19873                           ;main.c: 297: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19874  0866  3034               	movlw	52
 19875  0867  3195  255F  3188   	fcall	_LCDsend
 19876  086A  3029               	movlw	41
 19877  086B                     u6607:
 19878  086B  0B89               	decfsz	9,f
 19879  086C  286B               	goto	u6607
 19880  086D  3200               	nop2
 19881  086E                     l5597:
 19882  086E  3030               	movlw	48
 19883  086F  3195  255F  3188   	fcall	_LCDsend
 19884  0872                     l5599:
 19885                           
 19886                           ;main.c: 298: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19887  0872  3008               	movlw	8
 19888  0873                     u6617:
 19889  0873  0B89               	decfsz	9,f
 19890  0874  2873               	goto	u6617
 19891  0875  0000               	nop
 19892                           
 19893                           ;main.c: 299: LCDsend(0x20);
 19894  0876  3020               	movlw	32
 19895  0877  3195  255F  3188   	fcall	_LCDsend
 19896                           
 19897                           ;main.c: 300: LCDsend(0x24); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x20);
 19898  087A  3024               	movlw	36
 19899  087B  3195  255F  3188   	fcall	_LCDsend
 19900  087E                     l5601:
 19901  087E  3029               	movlw	41
 19902  087F                     u6627:
 19903  087F  0B89               	decfsz	9,f
 19904  0880  287F               	goto	u6627
 19905  0881  3200               	nop2
 19906  0882                     l5603:
 19907  0882  3020               	movlw	32
 19908  0883  3195  255F  3188   	fcall	_LCDsend
 19909                           
 19910                           ;main.c: 301: _delay((unsigned long)((5)*(1000000/4000.0)));
 19911  0886  30FA               	movlw	250
 19912  0887                     u6637:
 19913  0887  3200               	nop2
 19914  0888  0B89               	decfsz	9,f
 19915  0889  2887               	goto	u6637
 19916  088A                     l5605:
 19917                           
 19918                           ;main.c: 303: LCDsend2x4(0x28, 0);
 19919  088A  0020               	movlb	0	; select bank0
 19920  088B  01A2               	clrf	LCDsend2x4@mode
 19921  088C  3028               	movlw	40
 19922  088D  318A  2254  3188   	fcall	_LCDsend2x4
 19923  0890                     l5607:
 19924                           
 19925                           ;main.c: 304: LCDsend2x4(0x06, 0);
 19926  0890  0020               	movlb	0	; select bank0
 19927  0891  01A2               	clrf	LCDsend2x4@mode
 19928  0892  3006               	movlw	6
 19929  0893  318A  2254  3188   	fcall	_LCDsend2x4
 19930  0896                     l5609:
 19931                           
 19932                           ;main.c: 305: LCDsend2x4(0x0f, 0);
 19933  0896  0020               	movlb	0	; select bank0
 19934  0897  01A2               	clrf	LCDsend2x4@mode
 19935  0898  300F               	movlw	15
 19936  0899  318A  2254  3188   	fcall	_LCDsend2x4
 19937  089C                     l5611:
 19938                           
 19939                           ;main.c: 306: LCDsend2x4(0x01, 0);
 19940  089C  0020               	movlb	0	; select bank0
 19941  089D  01A2               	clrf	LCDsend2x4@mode
 19942  089E  3001               	movlw	1
 19943  089F  318A  2254  3188   	fcall	_LCDsend2x4
 19944                           
 19945                           ;main.c: 307: _delay((unsigned long)((2)*(1000000/4000.0)));
 19946  08A2  30A6               	movlw	166
 19947  08A3                     u6647:
 19948  08A3  0B89               	decfsz	9,f
 19949  08A4  28A3               	goto	u6647
 19950  08A5  3200               	nop2
 19951  08A6                     l1233:
 19952  08A6  0008               	return
 19953  08A7                     __end_of_LCDinit:
 19954                           
 19955                           	psect	text68
 19956  0A54                     __ptext68:	
 19957 ;; *************** function _LCDsend2x4 *****************
 19958 ;; Defined at:
 19959 ;;		line 264 in file "main.c"
 19960 ;; Parameters:    Size  Location     Type
 19961 ;;  c               1    wreg     unsigned char 
 19962 ;;  mode            1    2[BANK0 ] unsigned char 
 19963 ;; Auto vars:     Size  Location     Type
 19964 ;;  c               1    5[BANK0 ] unsigned char 
 19965 ;;  lc              1    7[BANK0 ] unsigned char 
 19966 ;;  hc              1    6[BANK0 ] unsigned char 
 19967 ;; Return value:  Size  Location     Type
 19968 ;;                  1    wreg      void 
 19969 ;; Registers used:
 19970 ;;		wreg, status,2, status,0, pclath, cstack
 19971 ;; Tracked objects:
 19972 ;;		On entry : 0/0
 19973 ;;		On exit  : 0/0
 19974 ;;		Unchanged: 0/0
 19975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19976 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19977 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19979 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19980 ;;Total ram usage:        6 bytes
 19981 ;; Hardware stack levels used:    1
 19982 ;; Hardware stack levels required when called:    5
 19983 ;; This function calls:
 19984 ;;		_WriteI2C
 19985 ;; This function is called by:
 19986 ;;		_LCDinit
 19987 ;;		_LCDcmd
 19988 ;;		_LCDchar
 19989 ;; This function uses a non-reentrant model
 19990 ;;
 19991                           
 19992                           
 19993                           ;psect for function _LCDsend2x4
 19994  0A54                     _LCDsend2x4:
 19995                           
 19996                           ;incstack = 0
 19997                           ; Regs used in _LCDsend2x4: [wreg+status,2+status,0+pclath+cstack]
 19998                           ;LCDsend2x4@c stored from wreg
 19999  0A54  0020               	movlb	0	; select bank0
 20000  0A55  00A5               	movwf	LCDsend2x4@c
 20001  0A56                     l4443:
 20002                           
 20003                           ;main.c: 266: unsigned char hc;;main.c: 267: unsigned char lc;;main.c: 269: hc = c & 0xf
      +                          0;
 20004  0A56  0825               	movf	LCDsend2x4@c,w
 20005  0A57  39F0               	andlw	240
 20006  0A58  00A3               	movwf	??_LCDsend2x4
 20007  0A59  0823               	movf	??_LCDsend2x4,w
 20008  0A5A  00A6               	movwf	LCDsend2x4@hc
 20009  0A5B                     l4445:
 20010                           
 20011                           ;main.c: 270: lc = (c << 4) & 0xf0;
 20012  0A5B  0825               	movf	LCDsend2x4@c,w
 20013  0A5C  00A3               	movwf	??_LCDsend2x4
 20014  0A5D  3003               	movlw	3
 20015  0A5E                     u3385:
 20016  0A5E  35A3               	lslf	??_LCDsend2x4,f
 20017  0A5F  3EFF               	addlw	-1
 20018  0A60  1D03               	skipz
 20019  0A61  2A5E               	goto	u3385
 20020  0A62  3523               	lslf	??_LCDsend2x4,w
 20021  0A63  39F0               	andlw	240
 20022  0A64  00A4               	movwf	??_LCDsend2x4+1
 20023  0A65  0824               	movf	??_LCDsend2x4+1,w
 20024  0A66  00A7               	movwf	LCDsend2x4@lc
 20025  0A67                     l4447:	
 20026                           ;main.c: 272: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20027                           
 20028  0A67  0023               	movlb	3	; select bank3
 20029  0A68  0C0F               	rrf	15,w	;volatile
 20030  0A69  0C89               	rrf	9,f
 20031  0A6A  3901               	andlw	1
 20032  0A6B  0020               	movlb	0	; select bank0
 20033  0A6C  00A3               	movwf	??_LCDsend2x4
 20034  0A6D  0023               	movlb	3	; select bank3
 20035  0A6E  0811               	movf	17,w	;volatile
 20036  0A6F  391F               	andlw	31
 20037  0A70  0020               	movlb	0	; select bank0
 20038  0A71  0423               	iorwf	??_LCDsend2x4,w
 20039  0A72  1D03               	btfss	3,2
 20040  0A73  2A75               	goto	u3391
 20041  0A74  2A76               	goto	u3390
 20042  0A75                     u3391:
 20043  0A75  2A67               	goto	l4447
 20044  0A76                     u3390:
 20045  0A76                     l1199:
 20046                           
 20047                           ;main.c: 273: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 20048  0A76  0023               	movlb	3	; select bank3
 20049  0A77  1411               	bsf	17,0	;volatile
 20050  0A78                     l1200:
 20051  0A78  1811               	btfsc	17,0	;volatile
 20052  0A79  2A7B               	goto	u3401
 20053  0A7A  2A7C               	goto	u3400
 20054  0A7B                     u3401:
 20055  0A7B  2A78               	goto	l1200
 20056  0A7C                     u3400:
 20057  0A7C                     l4449:
 20058  0A7C  0023               	movlb	3	; select bank3
 20059  0A7D  0C0F               	rrf	15,w	;volatile
 20060  0A7E  0C89               	rrf	9,f
 20061  0A7F  3901               	andlw	1
 20062  0A80  0020               	movlb	0	; select bank0
 20063  0A81  00A3               	movwf	??_LCDsend2x4
 20064  0A82  0023               	movlb	3	; select bank3
 20065  0A83  0811               	movf	17,w	;volatile
 20066  0A84  391F               	andlw	31
 20067  0A85  0020               	movlb	0	; select bank0
 20068  0A86  0423               	iorwf	??_LCDsend2x4,w
 20069  0A87  1D03               	btfss	3,2
 20070  0A88  2A8A               	goto	u3411
 20071  0A89  2A8B               	goto	u3410
 20072  0A8A                     u3411:
 20073  0A8A  2A7C               	goto	l4449
 20074  0A8B                     u3410:
 20075  0A8B                     l4451:
 20076                           
 20077                           ;main.c: 274: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20078  0A8B  304E               	movlw	78
 20079  0A8C  3196  260B  318A   	fcall	_WriteI2C
 20080  0A8F                     l4453:
 20081  0A8F  0023               	movlb	3	; select bank3
 20082  0A90  0C0F               	rrf	15,w	;volatile
 20083  0A91  0C89               	rrf	9,f
 20084  0A92  3901               	andlw	1
 20085  0A93  0020               	movlb	0	; select bank0
 20086  0A94  00A3               	movwf	??_LCDsend2x4
 20087  0A95  0023               	movlb	3	; select bank3
 20088  0A96  0811               	movf	17,w	;volatile
 20089  0A97  391F               	andlw	31
 20090  0A98  0020               	movlb	0	; select bank0
 20091  0A99  0423               	iorwf	??_LCDsend2x4,w
 20092  0A9A  1D03               	btfss	3,2
 20093  0A9B  2A9D               	goto	u3421
 20094  0A9C  2A9E               	goto	u3420
 20095  0A9D                     u3421:
 20096  0A9D  2A8F               	goto	l4453
 20097  0A9E                     u3420:
 20098  0A9E                     l4455:
 20099                           
 20100                           ;main.c: 275: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20101  0A9E  0826               	movf	LCDsend2x4@hc,w
 20102  0A9F  0422               	iorwf	LCDsend2x4@mode,w
 20103  0AA0  3808               	iorlw	8
 20104  0AA1  3196  260B  318A   	fcall	_WriteI2C
 20105  0AA4                     l4457:
 20106  0AA4  0023               	movlb	3	; select bank3
 20107  0AA5  0C0F               	rrf	15,w	;volatile
 20108  0AA6  0C89               	rrf	9,f
 20109  0AA7  3901               	andlw	1
 20110  0AA8  0020               	movlb	0	; select bank0
 20111  0AA9  00A3               	movwf	??_LCDsend2x4
 20112  0AAA  0023               	movlb	3	; select bank3
 20113  0AAB  0811               	movf	17,w	;volatile
 20114  0AAC  391F               	andlw	31
 20115  0AAD  0020               	movlb	0	; select bank0
 20116  0AAE  0423               	iorwf	??_LCDsend2x4,w
 20117  0AAF  1D03               	btfss	3,2
 20118  0AB0  2AB2               	goto	u3431
 20119  0AB1  2AB3               	goto	u3430
 20120  0AB2                     u3431:
 20121  0AB2  2AA4               	goto	l4457
 20122  0AB3                     u3430:
 20123  0AB3                     l4459:
 20124                           
 20125                           ;main.c: 276: WriteI2C(hc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 20126  0AB3  0826               	movf	LCDsend2x4@hc,w
 20127  0AB4  0422               	iorwf	LCDsend2x4@mode,w
 20128  0AB5  380C               	iorlw	12
 20129  0AB6  3196  260B  318A   	fcall	_WriteI2C
 20130  0AB9                     l4461:
 20131  0AB9  0023               	movlb	3	; select bank3
 20132  0ABA  0C0F               	rrf	15,w	;volatile
 20133  0ABB  0C89               	rrf	9,f
 20134  0ABC  3901               	andlw	1
 20135  0ABD  0020               	movlb	0	; select bank0
 20136  0ABE  00A3               	movwf	??_LCDsend2x4
 20137  0ABF  0023               	movlb	3	; select bank3
 20138  0AC0  0811               	movf	17,w	;volatile
 20139  0AC1  391F               	andlw	31
 20140  0AC2  0020               	movlb	0	; select bank0
 20141  0AC3  0423               	iorwf	??_LCDsend2x4,w
 20142  0AC4  1D03               	btfss	3,2
 20143  0AC5  2AC7               	goto	u3441
 20144  0AC6  2AC8               	goto	u3440
 20145  0AC7                     u3441:
 20146  0AC7  2AB9               	goto	l4461
 20147  0AC8                     u3440:
 20148  0AC8                     l1214:
 20149  0AC8                     l4463:	
 20150                           ;main.c: 277: _delay((unsigned long)((1)*(1000000/4000000.0)));
 20151                           
 20152                           
 20153                           ;main.c: 278: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20154  0AC8  0020               	movlb	0	; select bank0
 20155  0AC9  0826               	movf	LCDsend2x4@hc,w
 20156  0ACA  0422               	iorwf	LCDsend2x4@mode,w
 20157  0ACB  3808               	iorlw	8
 20158  0ACC  3196  260B  318A   	fcall	_WriteI2C
 20159  0ACF                     l4465:
 20160  0ACF  0023               	movlb	3	; select bank3
 20161  0AD0  0C0F               	rrf	15,w	;volatile
 20162  0AD1  0C89               	rrf	9,f
 20163  0AD2  3901               	andlw	1
 20164  0AD3  0020               	movlb	0	; select bank0
 20165  0AD4  00A3               	movwf	??_LCDsend2x4
 20166  0AD5  0023               	movlb	3	; select bank3
 20167  0AD6  0811               	movf	17,w	;volatile
 20168  0AD7  391F               	andlw	31
 20169  0AD8  0020               	movlb	0	; select bank0
 20170  0AD9  0423               	iorwf	??_LCDsend2x4,w
 20171  0ADA  1D03               	btfss	3,2
 20172  0ADB  2ADD               	goto	u3451
 20173  0ADC  2ADE               	goto	u3450
 20174  0ADD                     u3451:
 20175  0ADD  2ACF               	goto	l4465
 20176  0ADE                     u3450:
 20177  0ADE                     l4467:
 20178                           
 20179                           ;main.c: 279: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20180  0ADE  0827               	movf	LCDsend2x4@lc,w
 20181  0ADF  0422               	iorwf	LCDsend2x4@mode,w
 20182  0AE0  3808               	iorlw	8
 20183  0AE1  3196  260B  318A   	fcall	_WriteI2C
 20184  0AE4                     l4469:
 20185  0AE4  0023               	movlb	3	; select bank3
 20186  0AE5  0C0F               	rrf	15,w	;volatile
 20187  0AE6  0C89               	rrf	9,f
 20188  0AE7  3901               	andlw	1
 20189  0AE8  0020               	movlb	0	; select bank0
 20190  0AE9  00A3               	movwf	??_LCDsend2x4
 20191  0AEA  0023               	movlb	3	; select bank3
 20192  0AEB  0811               	movf	17,w	;volatile
 20193  0AEC  391F               	andlw	31
 20194  0AED  0020               	movlb	0	; select bank0
 20195  0AEE  0423               	iorwf	??_LCDsend2x4,w
 20196  0AEF  1D03               	btfss	3,2
 20197  0AF0  2AF2               	goto	u3461
 20198  0AF1  2AF3               	goto	u3460
 20199  0AF2                     u3461:
 20200  0AF2  2AE4               	goto	l4469
 20201  0AF3                     u3460:
 20202  0AF3                     l4471:
 20203                           
 20204                           ;main.c: 280: WriteI2C(lc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 20205  0AF3  0827               	movf	LCDsend2x4@lc,w
 20206  0AF4  0422               	iorwf	LCDsend2x4@mode,w
 20207  0AF5  380C               	iorlw	12
 20208  0AF6  3196  260B  318A   	fcall	_WriteI2C
 20209  0AF9                     l4473:
 20210  0AF9  0023               	movlb	3	; select bank3
 20211  0AFA  0C0F               	rrf	15,w	;volatile
 20212  0AFB  0C89               	rrf	9,f
 20213  0AFC  3901               	andlw	1
 20214  0AFD  0020               	movlb	0	; select bank0
 20215  0AFE  00A3               	movwf	??_LCDsend2x4
 20216  0AFF  0023               	movlb	3	; select bank3
 20217  0B00  0811               	movf	17,w	;volatile
 20218  0B01  391F               	andlw	31
 20219  0B02  0020               	movlb	0	; select bank0
 20220  0B03  0423               	iorwf	??_LCDsend2x4,w
 20221  0B04  1D03               	btfss	3,2
 20222  0B05  2B07               	goto	u3471
 20223  0B06  2B08               	goto	u3470
 20224  0B07                     u3471:
 20225  0B07  2AF9               	goto	l4473
 20226  0B08                     u3470:
 20227  0B08                     l1223:
 20228  0B08                     l4475:	
 20229                           ;main.c: 281: _delay((unsigned long)((1)*(1000000/4000000.0)));
 20230                           
 20231                           
 20232                           ;main.c: 282: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20233  0B08  0020               	movlb	0	; select bank0
 20234  0B09  0827               	movf	LCDsend2x4@lc,w
 20235  0B0A  0422               	iorwf	LCDsend2x4@mode,w
 20236  0B0B  3808               	iorlw	8
 20237  0B0C  3196  260B  318A   	fcall	_WriteI2C
 20238  0B0F                     l4477:
 20239  0B0F  0023               	movlb	3	; select bank3
 20240  0B10  0C0F               	rrf	15,w	;volatile
 20241  0B11  0C89               	rrf	9,f
 20242  0B12  3901               	andlw	1
 20243  0B13  0020               	movlb	0	; select bank0
 20244  0B14  00A3               	movwf	??_LCDsend2x4
 20245  0B15  0023               	movlb	3	; select bank3
 20246  0B16  0811               	movf	17,w	;volatile
 20247  0B17  391F               	andlw	31
 20248  0B18  0020               	movlb	0	; select bank0
 20249  0B19  0423               	iorwf	??_LCDsend2x4,w
 20250  0B1A  1D03               	btfss	3,2
 20251  0B1B  2B1D               	goto	u3481
 20252  0B1C  2B1E               	goto	u3480
 20253  0B1D                     u3481:
 20254  0B1D  2B0F               	goto	l4477
 20255  0B1E                     u3480:
 20256  0B1E                     l1226:
 20257                           
 20258                           ;main.c: 283: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 20259  0B1E  0023               	movlb	3	; select bank3
 20260  0B1F  1511               	bsf	17,2	;volatile
 20261  0B20                     l1227:
 20262  0B20  1911               	btfsc	17,2	;volatile
 20263  0B21  2B23               	goto	u3491
 20264  0B22  2B24               	goto	u3490
 20265  0B23                     u3491:
 20266  0B23  2B20               	goto	l1227
 20267  0B24                     u3490:
 20268  0B24                     l4479:
 20269                           
 20270                           ;main.c: 284: _delay((unsigned long)((50)*(1000000/4000000.0)));
 20271  0B24  3004               	movlw	4
 20272  0B25                     u6657:
 20273  0B25  0B89               	decfsz	9,f
 20274  0B26  2B25               	goto	u6657
 20275  0B27                     l1230:
 20276  0B27  0008               	return
 20277  0B28                     __end_of_LCDsend2x4:
 20278                           
 20279                           	psect	text69
 20280  155F                     __ptext69:	
 20281 ;; *************** function _LCDsend *****************
 20282 ;; Defined at:
 20283 ;;		line 225 in file "main.c"
 20284 ;; Parameters:    Size  Location     Type
 20285 ;;  c               1    wreg     unsigned char 
 20286 ;; Auto vars:     Size  Location     Type
 20287 ;;  c               1    3[BANK0 ] unsigned char 
 20288 ;; Return value:  Size  Location     Type
 20289 ;;                  1    wreg      void 
 20290 ;; Registers used:
 20291 ;;		wreg, status,2, status,0, pclath, cstack
 20292 ;; Tracked objects:
 20293 ;;		On entry : 0/0
 20294 ;;		On exit  : 0/0
 20295 ;;		Unchanged: 0/0
 20296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20300 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20301 ;;Total ram usage:        2 bytes
 20302 ;; Hardware stack levels used:    1
 20303 ;; Hardware stack levels required when called:    5
 20304 ;; This function calls:
 20305 ;;		_WriteI2C
 20306 ;; This function is called by:
 20307 ;;		_LCDinit
 20308 ;; This function uses a non-reentrant model
 20309 ;;
 20310                           
 20311                           
 20312                           ;psect for function _LCDsend
 20313  155F                     _LCDsend:
 20314                           
 20315                           ;incstack = 0
 20316                           ; Regs used in _LCDsend: [wreg+status,2+status,0+pclath+cstack]
 20317                           ;LCDsend@c stored from wreg
 20318  155F  0020               	movlb	0	; select bank0
 20319  1560  00A3               	movwf	LCDsend@c
 20320  1561                     l5305:
 20321  1561                     l5307:	
 20322                           ;main.c: 227: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20323                           
 20324  1561  0023               	movlb	3	; select bank3
 20325  1562  0C0F               	rrf	15,w	;volatile
 20326  1563  0C89               	rrf	9,f
 20327  1564  3901               	andlw	1
 20328  1565  0020               	movlb	0	; select bank0
 20329  1566  00A2               	movwf	??_LCDsend
 20330  1567  0023               	movlb	3	; select bank3
 20331  1568  0811               	movf	17,w	;volatile
 20332  1569  391F               	andlw	31
 20333  156A  0020               	movlb	0	; select bank0
 20334  156B  0422               	iorwf	??_LCDsend,w
 20335  156C  1D03               	btfss	3,2
 20336  156D  2D6F               	goto	u4901
 20337  156E  2D70               	goto	u4900
 20338  156F                     u4901:
 20339  156F  2D61               	goto	l5307
 20340  1570                     u4900:
 20341  1570                     l1097:
 20342                           
 20343                           ;main.c: 228: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 20344  1570  0023               	movlb	3	; select bank3
 20345  1571  1411               	bsf	17,0	;volatile
 20346  1572                     l1098:
 20347  1572  1811               	btfsc	17,0	;volatile
 20348  1573  2D75               	goto	u4911
 20349  1574  2D76               	goto	u4910
 20350  1575                     u4911:
 20351  1575  2D72               	goto	l1098
 20352  1576                     u4910:
 20353  1576                     l5309:
 20354  1576  0023               	movlb	3	; select bank3
 20355  1577  0C0F               	rrf	15,w	;volatile
 20356  1578  0C89               	rrf	9,f
 20357  1579  3901               	andlw	1
 20358  157A  0020               	movlb	0	; select bank0
 20359  157B  00A2               	movwf	??_LCDsend
 20360  157C  0023               	movlb	3	; select bank3
 20361  157D  0811               	movf	17,w	;volatile
 20362  157E  391F               	andlw	31
 20363  157F  0020               	movlb	0	; select bank0
 20364  1580  0422               	iorwf	??_LCDsend,w
 20365  1581  1D03               	btfss	3,2
 20366  1582  2D84               	goto	u4921
 20367  1583  2D85               	goto	u4920
 20368  1584                     u4921:
 20369  1584  2D76               	goto	l5309
 20370  1585                     u4920:
 20371  1585                     l5311:
 20372                           
 20373                           ;main.c: 229: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20374  1585  304E               	movlw	78
 20375  1586  3196  260B  3195   	fcall	_WriteI2C
 20376  1589                     l5313:
 20377  1589  0023               	movlb	3	; select bank3
 20378  158A  0C0F               	rrf	15,w	;volatile
 20379  158B  0C89               	rrf	9,f
 20380  158C  3901               	andlw	1
 20381  158D  0020               	movlb	0	; select bank0
 20382  158E  00A2               	movwf	??_LCDsend
 20383  158F  0023               	movlb	3	; select bank3
 20384  1590  0811               	movf	17,w	;volatile
 20385  1591  391F               	andlw	31
 20386  1592  0020               	movlb	0	; select bank0
 20387  1593  0422               	iorwf	??_LCDsend,w
 20388  1594  1D03               	btfss	3,2
 20389  1595  2D97               	goto	u4931
 20390  1596  2D98               	goto	u4930
 20391  1597                     u4931:
 20392  1597  2D89               	goto	l5313
 20393  1598                     u4930:
 20394  1598                     l5315:
 20395                           
 20396                           ;main.c: 230: WriteI2C(c); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20397  1598  0823               	movf	LCDsend@c,w
 20398  1599  3196  260B  3195   	fcall	_WriteI2C
 20399  159C                     l5317:
 20400  159C  0023               	movlb	3	; select bank3
 20401  159D  0C0F               	rrf	15,w	;volatile
 20402  159E  0C89               	rrf	9,f
 20403  159F  3901               	andlw	1
 20404  15A0  0020               	movlb	0	; select bank0
 20405  15A1  00A2               	movwf	??_LCDsend
 20406  15A2  0023               	movlb	3	; select bank3
 20407  15A3  0811               	movf	17,w	;volatile
 20408  15A4  391F               	andlw	31
 20409  15A5  0020               	movlb	0	; select bank0
 20410  15A6  0422               	iorwf	??_LCDsend,w
 20411  15A7  1D03               	btfss	3,2
 20412  15A8  2DAA               	goto	u4941
 20413  15A9  2DAB               	goto	u4940
 20414  15AA                     u4941:
 20415  15AA  2D9C               	goto	l5317
 20416  15AB                     u4940:
 20417  15AB                     l1109:
 20418                           
 20419                           ;main.c: 231: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 20420  15AB  0023               	movlb	3	; select bank3
 20421  15AC  1511               	bsf	17,2	;volatile
 20422  15AD                     l1110:
 20423  15AD  1911               	btfsc	17,2	;volatile
 20424  15AE  2DB0               	goto	u4951
 20425  15AF  2DB1               	goto	u4950
 20426  15B0                     u4951:
 20427  15B0  2DAD               	goto	l1110
 20428  15B1                     u4950:
 20429  15B1                     l1113:
 20430  15B1  0008               	return
 20431  15B2                     __end_of_LCDsend:
 20432                           
 20433                           	psect	text70
 20434  160B                     __ptext70:	
 20435 ;; *************** function _WriteI2C *****************
 20436 ;; Defined at:
 20437 ;;		line 47 in file "I2C/i2c.c"
 20438 ;; Parameters:    Size  Location     Type
 20439 ;;  data_out        1    wreg     unsigned char 
 20440 ;; Auto vars:     Size  Location     Type
 20441 ;;  data_out        1    1[BANK0 ] unsigned char 
 20442 ;; Return value:  Size  Location     Type
 20443 ;;                  1    wreg      char 
 20444 ;; Registers used:
 20445 ;;		wreg, status,2, status,0
 20446 ;; Tracked objects:
 20447 ;;		On entry : 0/0
 20448 ;;		On exit  : 0/0
 20449 ;;		Unchanged: 0/0
 20450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20454 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20455 ;;Total ram usage:        2 bytes
 20456 ;; Hardware stack levels used:    1
 20457 ;; Hardware stack levels required when called:    4
 20458 ;; This function calls:
 20459 ;;		Nothing
 20460 ;; This function is called by:
 20461 ;;		_tsttc
 20462 ;;		_LCDsend
 20463 ;;		_LCDsend2x4
 20464 ;;		_LCDrecv
 20465 ;; This function uses a non-reentrant model
 20466 ;;
 20467                           
 20468                           
 20469                           ;psect for function _WriteI2C
 20470  160B                     _WriteI2C:
 20471                           
 20472                           ;incstack = 0
 20473                           ; Regs used in _WriteI2C: [wreg+status,2+status,0]
 20474                           ;WriteI2C@data_out stored from wreg
 20475  160B  0020               	movlb	0	; select bank0
 20476  160C  00A1               	movwf	WriteI2C@data_out
 20477  160D                     l4413:
 20478                           
 20479                           ;i2c.c: 49: SSP1BUF = data_out;
 20480  160D  0821               	movf	WriteI2C@data_out,w
 20481  160E  0023               	movlb	3	; select bank3
 20482  160F  008C               	movwf	12	;volatile
 20483  1610                     l4415:
 20484                           
 20485                           ;i2c.c: 50: if ( SSP1CON1bits.WCOL )
 20486  1610  1F90               	btfss	16,7	;volatile
 20487  1611  2E13               	goto	u3291
 20488  1612  2E14               	goto	u3290
 20489  1613                     u3291:
 20490  1613  2E15               	goto	l4421
 20491  1614                     u3290:
 20492  1614  2E64               	goto	l30
 20493  1615                     l4421:
 20494                           
 20495                           ;i2c.c: 52: else;i2c.c: 53: {;i2c.c: 54: if( ((SSP1CON1&0x0F)!=0x08) && ((SSP1CON1&0x0F)
      +                          !=0x0B) )
 20496  1615  300F               	movlw	15
 20497  1616  0510               	andwf	16,w	;volatile
 20498  1617  0020               	movlb	0	; select bank0
 20499  1618  00A0               	movwf	??_WriteI2C
 20500  1619  3008               	movlw	8
 20501  161A  0620               	xorwf	??_WriteI2C,w
 20502  161B  1903               	btfsc	3,2
 20503  161C  2E1E               	goto	u3301
 20504  161D  2E1F               	goto	u3300
 20505  161E                     u3301:
 20506  161E  2E38               	goto	l4433
 20507  161F                     u3300:
 20508  161F                     l4423:
 20509  161F  300F               	movlw	15
 20510  1620  0023               	movlb	3	; select bank3
 20511  1621  0510               	andwf	16,w	;volatile
 20512  1622  0020               	movlb	0	; select bank0
 20513  1623  00A0               	movwf	??_WriteI2C
 20514  1624  300B               	movlw	11
 20515  1625  0620               	xorwf	??_WriteI2C,w
 20516  1626  1903               	btfsc	3,2
 20517  1627  2E29               	goto	u3311
 20518  1628  2E2A               	goto	u3310
 20519  1629                     u3311:
 20520  1629  2E38               	goto	l4433
 20521  162A                     u3310:
 20522  162A                     l4425:
 20523                           
 20524                           ;i2c.c: 55: {;i2c.c: 56: SSP1CON1bits.CKP = 1;
 20525  162A  0023               	movlb	3	; select bank3
 20526  162B  1610               	bsf	16,4	;volatile
 20527  162C                     l33:	
 20528                           ;i2c.c: 57: while ( !PIR3bits.SSP1IF );
 20529                           
 20530  162C  002E               	movlb	14	; select bank14
 20531  162D  1C0F               	btfss	15,0	;volatile
 20532  162E  2E30               	goto	u3321
 20533  162F  2E31               	goto	u3320
 20534  1630                     u3321:
 20535  1630  2E2C               	goto	l33
 20536  1631                     u3320:
 20537  1631                     l35:
 20538                           
 20539                           ;i2c.c: 59: if ( ( !SSP1STATbits.R_W ) && ( !SSP1STATbits.BF ) )
 20540  1631  0023               	movlb	3	; select bank3
 20541  1632  190F               	btfsc	15,2	;volatile
 20542  1633  2E35               	goto	u3331
 20543  1634  2E36               	goto	u3330
 20544  1635                     u3331:
 20545  1635  2E64               	goto	l30
 20546  1636                     u3330:
 20547  1636                     l4427:
 20548  1636  080F               	movf	15,w	;volatile
 20549  1637  2E64               	goto	l30
 20550  1638                     l4433:
 20551                           
 20552                           ;i2c.c: 68: else if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 20553  1638  300F               	movlw	15
 20554  1639  0023               	movlb	3	; select bank3
 20555  163A  0510               	andwf	16,w	;volatile
 20556  163B  0020               	movlb	0	; select bank0
 20557  163C  00A0               	movwf	??_WriteI2C
 20558  163D  3008               	movlw	8
 20559  163E  0620               	xorwf	??_WriteI2C,w
 20560  163F  1903               	btfsc	3,2
 20561  1640  2E42               	goto	u3341
 20562  1641  2E43               	goto	u3340
 20563  1642                     u3341:
 20564  1642  2E4E               	goto	l42
 20565  1643                     u3340:
 20566  1643                     l4435:
 20567  1643  300F               	movlw	15
 20568  1644  0023               	movlb	3	; select bank3
 20569  1645  0510               	andwf	16,w	;volatile
 20570  1646  0020               	movlb	0	; select bank0
 20571  1647  00A0               	movwf	??_WriteI2C
 20572  1648  300B               	movlw	11
 20573  1649  0620               	xorwf	??_WriteI2C,w
 20574  164A  1D03               	btfss	3,2
 20575  164B  2E4D               	goto	u3351
 20576  164C  2E4E               	goto	u3350
 20577  164D                     u3351:
 20578  164D  2E64               	goto	l30
 20579  164E                     u3350:
 20580  164E                     l42:
 20581  164E  0023               	movlb	3	; select bank3
 20582  164F  180F               	btfsc	15,0	;volatile
 20583  1650  2E52               	goto	u3361
 20584  1651  2E53               	goto	u3360
 20585  1652                     u3361:
 20586  1652  2E4E               	goto	l42
 20587  1653                     u3360:
 20588  1653                     l4437:
 20589  1653  0023               	movlb	3	; select bank3
 20590  1654  0C0F               	rrf	15,w	;volatile
 20591  1655  0C89               	rrf	9,f
 20592  1656  3901               	andlw	1
 20593  1657  0020               	movlb	0	; select bank0
 20594  1658  00A0               	movwf	??_WriteI2C
 20595  1659  0023               	movlb	3	; select bank3
 20596  165A  0811               	movf	17,w	;volatile
 20597  165B  391F               	andlw	31
 20598  165C  0020               	movlb	0	; select bank0
 20599  165D  0420               	iorwf	??_WriteI2C,w
 20600  165E  1D03               	btfss	3,2
 20601  165F  2E61               	goto	u3371
 20602  1660  2E62               	goto	u3370
 20603  1661                     u3371:
 20604  1661  2E53               	goto	l4437
 20605  1662                     u3370:
 20606  1662                     l47:
 20607                           
 20608                           ;i2c.c: 72: if ( SSP1CON2bits.ACKSTAT )
 20609  1662  0023               	movlb	3	; select bank3
 20610  1663  0811               	movf	17,w	;volatile
 20611  1664                     l30:
 20612  1664  0008               	return
 20613  1665                     __end_of_WriteI2C:
 20614                           
 20615                           	psect	text71
 20616  1F75                     __ptext71:	
 20617 ;; *************** function _EUSART_is_rx_ready *****************
 20618 ;; Defined at:
 20619 ;;		line 118 in file "mcc_generated_files/eusart.c"
 20620 ;; Parameters:    Size  Location     Type
 20621 ;;		None
 20622 ;; Auto vars:     Size  Location     Type
 20623 ;;		None
 20624 ;; Return value:  Size  Location     Type
 20625 ;;                  1    wreg      unsigned char 
 20626 ;; Registers used:
 20627 ;;		wreg
 20628 ;; Tracked objects:
 20629 ;;		On entry : 0/0
 20630 ;;		On exit  : 0/0
 20631 ;;		Unchanged: 0/0
 20632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20637 ;;Total ram usage:        0 bytes
 20638 ;; Hardware stack levels used:    1
 20639 ;; Hardware stack levels required when called:    4
 20640 ;; This function calls:
 20641 ;;		Nothing
 20642 ;; This function is called by:
 20643 ;;		_main
 20644 ;; This function uses a non-reentrant model
 20645 ;;
 20646                           
 20647                           
 20648                           ;psect for function _EUSART_is_rx_ready
 20649  1F75                     _EUSART_is_rx_ready:
 20650  1F75                     l5479:	
 20651                           ;incstack = 0
 20652                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 20653                           
 20654                           
 20655                           ;eusart.c: 120: return eusartRxCount;
 20656  1F75  0021               	movlb	1	; select bank1
 20657  1F76  083C               	movf	_eusartRxCount^(0+128),w	;volatile
 20658  1F77                     l817:
 20659  1F77  0008               	return
 20660  1F78                     __end_of_EUSART_is_rx_ready:
 20661                           
 20662                           	psect	intentry
 20663  0004                     __pintentry:	
 20664 ;; *************** function _INTERRUPT_InterruptManager *****************
 20665 ;; Defined at:
 20666 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 20667 ;; Parameters:    Size  Location     Type
 20668 ;;		None
 20669 ;; Auto vars:     Size  Location     Type
 20670 ;;		None
 20671 ;; Return value:  Size  Location     Type
 20672 ;;                  1    wreg      void 
 20673 ;; Registers used:
 20674 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20675 ;; Tracked objects:
 20676 ;;		On entry : 0/0
 20677 ;;		On exit  : 0/0
 20678 ;;		Unchanged: 0/0
 20679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20684 ;;Total ram usage:        0 bytes
 20685 ;; Hardware stack levels used:    1
 20686 ;; Hardware stack levels required when called:    3
 20687 ;; This function calls:
 20688 ;;		Absolute function
 20689 ;;		_EUSART_Receive_ISR
 20690 ;;		_EUSART_Transmit_ISR
 20691 ;;		_INT_ISR
 20692 ;;		_TMR1_ISR
 20693 ;; This function is called by:
 20694 ;;		Interrupt level 1
 20695 ;; This function uses a non-reentrant model
 20696 ;;
 20697                           
 20698  0004                     _INTERRUPT_InterruptManager:
 20699                           
 20700                           ;incstack = 0
 20701  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 20702                           
 20703                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 20704  0005  3180               	pagesel	$
 20705  0006                     i1l5953:
 20706                           
 20707                           ;interrupt_manager.c: 55: if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
 20708  0006  002E               	movlb	14	; select bank14
 20709  0007  1C16               	btfss	22,0	;volatile
 20710  0008  280A               	goto	u616_21
 20711  0009  280B               	goto	u616_20
 20712  000A                     u616_21:
 20713  000A  2813               	goto	i1l364
 20714  000B                     u616_20:
 20715  000B                     i1l5955:
 20716  000B  1C0C               	btfss	12,0	;volatile
 20717  000C  280E               	goto	u617_21
 20718  000D  280F               	goto	u617_20
 20719  000E                     u617_21:
 20720  000E  2813               	goto	i1l364
 20721  000F                     u617_20:
 20722  000F                     i1l5957:
 20723                           
 20724                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: INT_ISR();
 20725  000F  319F  278C  3180   	fcall	_INT_ISR
 20726                           
 20727                           ;interrupt_manager.c: 58: }
 20728  0012  2850               	goto	i1l378
 20729  0013                     i1l364:
 20730                           
 20731                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
 20732  0013  1F0B               	btfss	11,6	;volatile
 20733  0014  2816               	goto	u618_21
 20734  0015  2817               	goto	u618_20
 20735  0016                     u618_21:
 20736  0016  2850               	goto	i1l378
 20737  0017                     u618_20:
 20738  0017                     i1l5959:
 20739                           
 20740                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: if(PIE3bits.TXIE == 1 && PIR3bits.T
      +                          XIF == 1)
 20741  0017  1E19               	btfss	25,4	;volatile
 20742  0018  281A               	goto	u619_21
 20743  0019  281B               	goto	u619_20
 20744  001A                     u619_21:
 20745  001A  2826               	goto	i1l367
 20746  001B                     u619_20:
 20747  001B                     i1l5961:
 20748  001B  1E0F               	btfss	15,4	;volatile
 20749  001C  281E               	goto	u620_21
 20750  001D  281F               	goto	u620_20
 20751  001E                     u620_21:
 20752  001E  2826               	goto	i1l367
 20753  001F                     u620_20:
 20754  001F                     i1l5963:
 20755                           
 20756                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 63: EUSART_TxDefaultInterruptHandler();
 20757  001F  0022               	movlb	2	; select bank2
 20758  0020  083C               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
 20759  0021  008A               	movwf	10
 20760  0022  083B               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
 20761  0023  000A               	callw
 20762  0024  3180               	pagesel	$
 20763                           
 20764                           ;interrupt_manager.c: 64: }
 20765  0025  2850               	goto	i1l378
 20766  0026                     i1l367:
 20767                           
 20768                           ;interrupt_manager.c: 65: else if(PIE3bits.RCIE == 1 && PIR3bits.RCIF == 1)
 20769  0026  1E99               	btfss	25,5	;volatile
 20770  0027  2829               	goto	u621_21
 20771  0028  282A               	goto	u621_20
 20772  0029                     u621_21:
 20773  0029  2835               	goto	i1l369
 20774  002A                     u621_20:
 20775  002A                     i1l5965:
 20776  002A  1E8F               	btfss	15,5	;volatile
 20777  002B  282D               	goto	u622_21
 20778  002C  282E               	goto	u622_20
 20779  002D                     u622_21:
 20780  002D  2835               	goto	i1l369
 20781  002E                     u622_20:
 20782  002E                     i1l5967:
 20783                           
 20784                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
 20785  002E  0022               	movlb	2	; select bank2
 20786  002F  083A               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 20787  0030  008A               	movwf	10
 20788  0031  0839               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 20789  0032  000A               	callw
 20790  0033  3180               	pagesel	$
 20791                           
 20792                           ;interrupt_manager.c: 68: }
 20793  0034  2850               	goto	i1l378
 20794  0035                     i1l369:
 20795                           
 20796                           ;interrupt_manager.c: 69: else if(PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1)
 20797  0035  1C1A               	btfss	26,0	;volatile
 20798  0036  2838               	goto	u623_21
 20799  0037  2839               	goto	u623_20
 20800  0038                     u623_21:
 20801  0038  2841               	goto	i1l371
 20802  0039                     u623_20:
 20803  0039                     i1l5969:
 20804  0039  1C10               	btfss	16,0	;volatile
 20805  003A  283C               	goto	u624_21
 20806  003B  283D               	goto	u624_20
 20807  003C                     u624_21:
 20808  003C  2841               	goto	i1l371
 20809  003D                     u624_20:
 20810  003D                     i1l5971:
 20811                           
 20812                           ;interrupt_manager.c: 70: {;interrupt_manager.c: 71: TMR1_ISR();
 20813  003D  3190  208A  3180   	fcall	_TMR1_ISR
 20814                           
 20815                           ;interrupt_manager.c: 72: }
 20816  0040  2850               	goto	i1l378
 20817  0041                     i1l371:
 20818                           
 20819                           ;interrupt_manager.c: 73: else if(PIE3bits.BCL1IE == 1 && PIR3bits.BCL1IF == 1)
 20820  0041  1C99               	btfss	25,1	;volatile
 20821  0042  2844               	goto	u625_21
 20822  0043  2845               	goto	u625_20
 20823  0044                     u625_21:
 20824  0044  284A               	goto	i1l373
 20825  0045                     u625_20:
 20826  0045                     i1l5973:
 20827                           
 20828                           ;interrupt_manager.c: 74: {;interrupt_manager.c: 75: i2c1_driver_busCollisionISR();
 20829  0045  1C8F               	btfss	15,1	;volatile
 20830  0046  2848               	goto	u626_21
 20831  0047  2849               	goto	u626_20
 20832  0048                     u626_21:
 20833  0048  284A               	goto	i1l373
 20834  0049                     u626_20:
 20835  0049  2850               	goto	i1l378
 20836  004A                     i1l373:
 20837                           
 20838                           ;interrupt_manager.c: 77: else if(PIE3bits.SSP1IE == 1 && PIR3bits.SSP1IF == 1)
 20839  004A  1C19               	btfss	25,0	;volatile
 20840  004B  284D               	goto	u627_21
 20841  004C  284E               	goto	u627_20
 20842  004D                     u627_21:
 20843  004D  2850               	goto	i1l372
 20844  004E                     u627_20:
 20845  004E                     i1l5977:
 20846                           
 20847                           ;interrupt_manager.c: 78: {;interrupt_manager.c: 79: i2c1_driver_i2cISR();
 20848  004E  080F               	movf	15,w	;volatile
 20849  004F  2850               	goto	i1l378
 20850  0050                     i1l372:
 20851  0050                     i1l378:
 20852  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 20853  0051  0009               	retfie
 20854  0052                     __end_of_INTERRUPT_InterruptManager:
 20855                           
 20856                           	psect	text73
 20857  108A                     __ptext73:	
 20858 ;; *************** function _TMR1_ISR *****************
 20859 ;; Defined at:
 20860 ;;		line 164 in file "mcc_generated_files/tmr1.c"
 20861 ;; Parameters:    Size  Location     Type
 20862 ;;		None
 20863 ;; Auto vars:     Size  Location     Type
 20864 ;;		None
 20865 ;; Return value:  Size  Location     Type
 20866 ;;                  1    wreg      void 
 20867 ;; Registers used:
 20868 ;;		wreg, status,2, status,0, pclath, cstack
 20869 ;; Tracked objects:
 20870 ;;		On entry : 0/0
 20871 ;;		On exit  : 0/0
 20872 ;;		Unchanged: 0/0
 20873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20878 ;;Total ram usage:        0 bytes
 20879 ;; Hardware stack levels used:    1
 20880 ;; Hardware stack levels required when called:    2
 20881 ;; This function calls:
 20882 ;;		Absolute function
 20883 ;;		_Clock_ISR
 20884 ;;		_TMR1_DefaultInterruptHandler
 20885 ;;		_TMR1_WriteTimer
 20886 ;; This function is called by:
 20887 ;;		_INTERRUPT_InterruptManager
 20888 ;; This function uses a non-reentrant model
 20889 ;;
 20890                           
 20891                           
 20892                           ;psect for function _TMR1_ISR
 20893  108A                     _TMR1_ISR:
 20894  108A                     i1l5471:	
 20895                           ;incstack = 0
 20896                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 20897                           
 20898                           
 20899                           ;tmr1.c: 168: PIR4bits.TMR1IF = 0;
 20900  108A  002E               	movlb	14	; select bank14
 20901  108B  1010               	bcf	16,0	;volatile
 20902  108C                     i1l5473:
 20903                           
 20904                           ;tmr1.c: 169: TMR1_WriteTimer(timer1ReloadVal);
 20905  108C  0021               	movlb	1	; select bank1
 20906  108D  086E               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 20907  108E  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 20908  108F  086D               	movf	_timer1ReloadVal^(0+128),w	;volatile
 20909  1090  00F0               	movwf	TMR1_WriteTimer@timerVal
 20910  1091  3190  2050  3190   	fcall	_TMR1_WriteTimer
 20911  1094                     i1l5475:
 20912                           
 20913                           ;tmr1.c: 171: if(TMR1_InterruptHandler)
 20914  1094  0021               	movlb	1	; select bank1
 20915  1095  086B               	movf	_TMR1_InterruptHandler^(0+128),w
 20916  1096  046C               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 20917  1097  1903               	btfsc	3,2
 20918  1098  289A               	goto	u519_21
 20919  1099  289B               	goto	u519_20
 20920  109A                     u519_21:
 20921  109A  28A0               	goto	i1l436
 20922  109B                     u519_20:
 20923  109B                     i1l5477:
 20924                           
 20925                           ;tmr1.c: 172: {;tmr1.c: 173: TMR1_InterruptHandler();
 20926  109B  086C               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 20927  109C  008A               	movwf	10
 20928  109D  086B               	movf	_TMR1_InterruptHandler^(0+128),w
 20929  109E  000A               	callw
 20930  109F  3190               	pagesel	$
 20931  10A0                     i1l436:
 20932  10A0  0008               	return
 20933  10A1                     __end_of_TMR1_ISR:
 20934                           
 20935                           	psect	text74
 20936  1050                     __ptext74:	
 20937 ;; *************** function _TMR1_WriteTimer *****************
 20938 ;; Defined at:
 20939 ;;		line 127 in file "mcc_generated_files/tmr1.c"
 20940 ;; Parameters:    Size  Location     Type
 20941 ;;  timerVal        2    0[COMMON] unsigned int 
 20942 ;; Auto vars:     Size  Location     Type
 20943 ;;		None
 20944 ;; Return value:  Size  Location     Type
 20945 ;;                  1    wreg      void 
 20946 ;; Registers used:
 20947 ;;		wreg, status,2
 20948 ;; Tracked objects:
 20949 ;;		On entry : 0/0
 20950 ;;		On exit  : 0/0
 20951 ;;		Unchanged: 0/0
 20952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20953 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20957 ;;Total ram usage:        2 bytes
 20958 ;; Hardware stack levels used:    1
 20959 ;; This function calls:
 20960 ;;		Nothing
 20961 ;; This function is called by:
 20962 ;;		_TMR1_ISR
 20963 ;;		_TMR1_Reload
 20964 ;; This function uses a non-reentrant model
 20965 ;;
 20966                           
 20967                           
 20968                           ;psect for function _TMR1_WriteTimer
 20969  1050                     _TMR1_WriteTimer:
 20970  1050                     i1l5249:	
 20971                           ;incstack = 0
 20972                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 20973                           
 20974                           
 20975                           ;tmr1.c: 129: if (T1CONbits.nT1SYNC == 1)
 20976  1050  0024               	movlb	4	; select bank4
 20977  1051  1D0E               	btfss	14,2	;volatile
 20978  1052  2854               	goto	u486_21
 20979  1053  2855               	goto	u486_20
 20980  1054                     u486_21:
 20981  1054  285C               	goto	i1l5259
 20982  1055                     u486_20:
 20983  1055                     i1l5251:
 20984                           
 20985                           ;tmr1.c: 130: {;tmr1.c: 132: T1CONbits.TMR1ON = 0;
 20986  1055  100E               	bcf	14,0	;volatile
 20987  1056                     i1l5253:
 20988                           
 20989                           ;tmr1.c: 135: TMR1H = (timerVal >> 8);
 20990  1056  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 20991  1057  008D               	movwf	13	;volatile
 20992  1058                     i1l5255:
 20993                           
 20994                           ;tmr1.c: 136: TMR1L = timerVal;
 20995  1058  0870               	movf	TMR1_WriteTimer@timerVal,w
 20996  1059  008C               	movwf	12	;volatile
 20997  105A                     i1l5257:
 20998                           
 20999                           ;tmr1.c: 139: T1CONbits.TMR1ON =1;
 21000  105A  140E               	bsf	14,0	;volatile
 21001                           
 21002                           ;tmr1.c: 140: }
 21003  105B  2860               	goto	i1l423
 21004  105C                     i1l5259:
 21005                           
 21006                           ;tmr1.c: 141: else;tmr1.c: 142: {;tmr1.c: 144: TMR1H = (timerVal >> 8);
 21007  105C  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 21008  105D  008D               	movwf	13	;volatile
 21009  105E                     i1l5261:
 21010                           
 21011                           ;tmr1.c: 145: TMR1L = timerVal;
 21012  105E  0870               	movf	TMR1_WriteTimer@timerVal,w
 21013  105F  008C               	movwf	12	;volatile
 21014  1060                     i1l423:
 21015  1060  0008               	return
 21016  1061                     __end_of_TMR1_WriteTimer:
 21017                           
 21018                           	psect	text75
 21019  0921                     __ptext75:	
 21020 ;; *************** function _Clock_ISR *****************
 21021 ;; Defined at:
 21022 ;;		line 362 in file "main.c"
 21023 ;; Parameters:    Size  Location     Type
 21024 ;;		None
 21025 ;; Auto vars:     Size  Location     Type
 21026 ;;		None
 21027 ;; Return value:  Size  Location     Type
 21028 ;;                  1    wreg      void 
 21029 ;; Registers used:
 21030 ;;		wreg, status,2, status,0, pclath, cstack
 21031 ;; Tracked objects:
 21032 ;;		On entry : 0/0
 21033 ;;		On exit  : 0/0
 21034 ;;		Unchanged: 0/0
 21035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21038 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21039 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21040 ;;Total ram usage:        2 bytes
 21041 ;; Hardware stack levels used:    1
 21042 ;; Hardware stack levels required when called:    1
 21043 ;; This function calls:
 21044 ;;		___awdiv
 21045 ;; This function is called by:
 21046 ;;		_main
 21047 ;;		_TMR1_ISR
 21048 ;; This function uses a non-reentrant model
 21049 ;;
 21050                           
 21051                           
 21052                           ;psect for function _Clock_ISR
 21053  0921                     _Clock_ISR:
 21054  0921                     i1l5319:	
 21055                           ;incstack = 0
 21056                           ; Regs used in _Clock_ISR: [wreg+status,2+status,0+pclath+cstack]
 21057                           
 21058                           
 21059                           ;main.c: 364: t.s++;
 21060  0921  3001               	movlw	1
 21061  0922  00F9               	movwf	??_Clock_ISR
 21062  0923  0879               	movf	??_Clock_ISR,w
 21063  0924  0020               	movlb	0	; select bank0
 21064  0925  07E7               	addwf	_t+2,f
 21065                           
 21066                           ;main.c: 366: if(t.s==60){
 21067  0926  303C               	movlw	60
 21068  0927  0667               	xorwf	_t+2,w
 21069  0928  1D03               	btfss	3,2
 21070  0929  292B               	goto	u496_21
 21071  092A  292C               	goto	u496_20
 21072  092B                     u496_21:
 21073  092B  2934               	goto	i1l5327
 21074  092C                     u496_20:
 21075  092C                     i1l5321:
 21076                           
 21077                           ;main.c: 367: t.m++;
 21078  092C  3001               	movlw	1
 21079  092D  00F9               	movwf	??_Clock_ISR
 21080  092E  0879               	movf	??_Clock_ISR,w
 21081  092F  07E6               	addwf	_t+1,f
 21082  0930                     i1l5323:
 21083                           
 21084                           ;main.c: 368: t.s=0;
 21085  0930  01E7               	clrf	_t+2
 21086  0931                     i1l5325:
 21087                           
 21088                           ;main.c: 369: writeEEPROM_flag = 1;
 21089  0931  0021               	movlb	1	; select bank1
 21090  0932  01B4               	clrf	_writeEEPROM_flag^(0+128)
 21091  0933  0AB4               	incf	_writeEEPROM_flag^(0+128),f
 21092  0934                     i1l5327:
 21093                           
 21094                           ;main.c: 370: };main.c: 371: if(t.m==60){
 21095  0934  303C               	movlw	60
 21096  0935  0020               	movlb	0	; select bank0
 21097  0936  0666               	xorwf	_t+1,w
 21098  0937  1D03               	btfss	3,2
 21099  0938  293A               	goto	u497_21
 21100  0939  293B               	goto	u497_20
 21101  093A                     u497_21:
 21102  093A  2940               	goto	i1l5333
 21103  093B                     u497_20:
 21104  093B                     i1l5329:
 21105                           
 21106                           ;main.c: 372: t.h++;
 21107  093B  3001               	movlw	1
 21108  093C  00F9               	movwf	??_Clock_ISR
 21109  093D  0879               	movf	??_Clock_ISR,w
 21110  093E  07E5               	addwf	_t,f
 21111  093F                     i1l5331:
 21112                           
 21113                           ;main.c: 373: t.m=0;
 21114  093F  01E6               	clrf	_t+1
 21115  0940                     i1l5333:
 21116                           
 21117                           ;main.c: 374: };main.c: 375: if(t.h==24){
 21118  0940  3018               	movlw	24
 21119  0941  0665               	xorwf	_t,w
 21120  0942  1D03               	btfss	3,2
 21121  0943  2945               	goto	u498_21
 21122  0944  2946               	goto	u498_20
 21123  0945                     u498_21:
 21124  0945  2947               	goto	i1l5337
 21125  0946                     u498_20:
 21126  0946                     i1l5335:
 21127                           
 21128                           ;main.c: 376: t.h=0;
 21129  0946  01E5               	clrf	_t
 21130  0947                     i1l5337:
 21131                           
 21132                           ;main.c: 377: };main.c: 380: if((ALAF == 'A') && t.s >= clkAlarm.alarmVal.s && t.m >= cl
      +                          kAlarm.alarmVal.m && t.h >= clkAlarm.alarmVal.h && editingClockAlarm == 0){
 21133  0947  3041               	movlw	65
 21134  0948  066F               	xorwf	_ALAF,w
 21135  0949  1D03               	btfss	3,2
 21136  094A  294C               	goto	u499_21
 21137  094B  294D               	goto	u499_20
 21138  094C                     u499_21:
 21139  094C  2976               	goto	i1l5351
 21140  094D                     u499_20:
 21141  094D                     i1l5339:
 21142  094D  0021               	movlb	1	; select bank1
 21143  094E  0822               	movf	(_clkAlarm^(0+128)+2),w
 21144  094F  0020               	movlb	0	; select bank0
 21145  0950  0267               	subwf	_t+2,w
 21146  0951  1C03               	skipc
 21147  0952  2954               	goto	u500_21
 21148  0953  2955               	goto	u500_20
 21149  0954                     u500_21:
 21150  0954  2976               	goto	i1l5351
 21151  0955                     u500_20:
 21152  0955                     i1l5341:
 21153  0955  0021               	movlb	1	; select bank1
 21154  0956  0821               	movf	(_clkAlarm^(0+128)+1),w
 21155  0957  0020               	movlb	0	; select bank0
 21156  0958  0266               	subwf	_t+1,w
 21157  0959  1C03               	skipc
 21158  095A  295C               	goto	u501_21
 21159  095B  295D               	goto	u501_20
 21160  095C                     u501_21:
 21161  095C  2976               	goto	i1l5351
 21162  095D                     u501_20:
 21163  095D                     i1l5343:
 21164  095D  0021               	movlb	1	; select bank1
 21165  095E  0820               	movf	_clkAlarm^(0+128),w
 21166  095F  0020               	movlb	0	; select bank0
 21167  0960  0265               	subwf	_t,w
 21168  0961  1C03               	skipc
 21169  0962  2964               	goto	u502_21
 21170  0963  2965               	goto	u502_20
 21171  0964                     u502_21:
 21172  0964  2976               	goto	i1l5351
 21173  0965                     u502_20:
 21174  0965                     i1l5345:
 21175  0965  087B               	movf	_editingClockAlarm,w
 21176  0966  047C               	iorwf	_editingClockAlarm+1,w
 21177  0967  1D03               	btfss	3,2
 21178  0968  296A               	goto	u503_21
 21179  0969  296B               	goto	u503_20
 21180  096A                     u503_21:
 21181  096A  2976               	goto	i1l5351
 21182  096B                     u503_20:
 21183  096B                     i1l5347:
 21184                           
 21185                           ;main.c: 381: alarmPWMStart.h = 0xff;
 21186  096B  30FF               	movlw	255
 21187  096C  00F9               	movwf	??_Clock_ISR
 21188  096D  0879               	movf	??_Clock_ISR,w
 21189  096E  0021               	movlb	1	; select bank1
 21190  096F  00E1               	movwf	_alarmPWMStart^(0+128)
 21191  0970                     i1l5349:
 21192                           
 21193                           ;main.c: 382: clkAlarm.trigger = 1;
 21194  0970  01A3               	clrf	(_clkAlarm^(0+128)+3)
 21195  0971  0AA3               	incf	(_clkAlarm^(0+128)+3),f
 21196                           
 21197                           ;main.c: 383: clkAlarm.alarmVal.h = 25;
 21198  0972  3019               	movlw	25
 21199  0973  00F9               	movwf	??_Clock_ISR
 21200  0974  0879               	movf	??_Clock_ISR,w
 21201  0975  00A0               	movwf	_clkAlarm^(0+128)
 21202  0976                     i1l5351:
 21203                           
 21204                           ;main.c: 384: };main.c: 388: if(maxReadings >= NREG/2){
 21205  0976  3002               	movlw	2
 21206  0977  00F0               	movwf	___awdiv@divisor
 21207  0978  3000               	movlw	0
 21208  0979  00F1               	movwf	___awdiv@divisor+1
 21209  097A  087D               	movf	_NREG,w
 21210  097B  00F9               	movwf	??_Clock_ISR
 21211  097C  01FA               	clrf	??_Clock_ISR+1
 21212  097D  0879               	movf	??_Clock_ISR,w
 21213  097E  00F2               	movwf	___awdiv@dividend
 21214  097F  087A               	movf	??_Clock_ISR+1,w
 21215  0980  00F3               	movwf	___awdiv@dividend+1
 21216  0981  3196  26BF  3189   	fcall	___awdiv
 21217  0984  0871               	movf	?___awdiv+1,w
 21218  0985  3A80               	xorlw	128
 21219  0986  3C80               	sublw	128
 21220  0987  1D03               	skipz
 21221  0988  298C               	goto	u504_25
 21222  0989  0870               	movf	?___awdiv,w
 21223  098A  0021               	movlb	1	; select bank1
 21224  098B  0233               	subwf	_maxReadings^(0+128),w
 21225  098C                     u504_25:
 21226  098C  1C03               	skipc
 21227  098D  298F               	goto	u504_21
 21228  098E  2990               	goto	u504_20
 21229  098F                     u504_21:
 21230  098F  2994               	goto	i1l5355
 21231  0990                     u504_20:
 21232  0990                     i1l5353:
 21233                           
 21234                           ;main.c: 389: bufHalfFull = 1;
 21235  0990  0021               	movlb	1	; select bank1
 21236  0991  01B2               	clrf	_bufHalfFull^(0+128)
 21237  0992  0AB2               	incf	_bufHalfFull^(0+128),f
 21238                           
 21239                           ;main.c: 390: } else {
 21240  0993  2996               	goto	i1l5357
 21241  0994                     i1l5355:
 21242                           
 21243                           ;main.c: 391: bufHalfFull = 0;
 21244  0994  0021               	movlb	1	; select bank1
 21245  0995  01B2               	clrf	_bufHalfFull^(0+128)
 21246  0996                     i1l5357:
 21247  0996  1003               	clrc
 21248  0997  0020               	movlb	0	; select bank0
 21249  0998  1F96               	btfss	22,7	;volatile
 21250  0999  1403               	setc
 21251  099A  1803               	btfsc	3,0
 21252  099B  299D               	goto	u505_21
 21253  099C  29A0               	goto	u505_20
 21254  099D                     u505_21:
 21255  099D  0020               	movlb	0	; select bank0
 21256  099E  1796               	bsf	22,7	;volatile
 21257  099F  29A2               	goto	u506_24
 21258  09A0                     u505_20:
 21259  09A0  0020               	movlb	0	; select bank0
 21260  09A1  1396               	bcf	22,7	;volatile
 21261  09A2                     u506_24:
 21262  09A2                     i1l5359:
 21263                           
 21264                           ;main.c: 395: updateLCD = 1;
 21265  09A2  0021               	movlb	1	; select bank1
 21266  09A3  01E8               	clrf	_updateLCD^(0+128)
 21267  09A4  0AE8               	incf	_updateLCD^(0+128),f
 21268  09A5                     i1l5361:
 21269                           
 21270                           ;main.c: 396: counterMonitorAux++;
 21271  09A5  3001               	movlw	1
 21272  09A6  00F9               	movwf	??_Clock_ISR
 21273  09A7  0879               	movf	??_Clock_ISR,w
 21274  09A8  07B5               	addwf	_counterMonitorAux^(0+128),f
 21275                           
 21276                           ;main.c: 397: if(counterMonitorAux >= PMON){
 21277  09A9  086A               	movf	_PMON^(0+128),w
 21278  09AA  0235               	subwf	_counterMonitorAux^(0+128),w
 21279  09AB  1C03               	skipc
 21280  09AC  29AE               	goto	u507_21
 21281  09AD  29AF               	goto	u507_20
 21282  09AE                     u507_21:
 21283  09AE  29B2               	goto	i1l1279
 21284  09AF                     u507_20:
 21285  09AF                     i1l5363:
 21286                           
 21287                           ;main.c: 398: counterMonitorAux = 0;
 21288  09AF  01B5               	clrf	_counterMonitorAux^(0+128)
 21289  09B0                     i1l5365:
 21290                           
 21291                           ;main.c: 399: monitor_TEMP_LUM = 1;
 21292  09B0  01B6               	clrf	_monitor_TEMP_LUM^(0+128)
 21293  09B1  0AB6               	incf	_monitor_TEMP_LUM^(0+128),f
 21294  09B2                     i1l1279:
 21295  09B2  0008               	return
 21296  09B3                     __end_of_Clock_ISR:
 21297                           
 21298                           	psect	text76
 21299  0003                     __ptext76:	
 21300 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 21301 ;; Defined at:
 21302 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 21303 ;; Parameters:    Size  Location     Type
 21304 ;;		None
 21305 ;; Auto vars:     Size  Location     Type
 21306 ;;		None
 21307 ;; Return value:  Size  Location     Type
 21308 ;;                  1    wreg      void 
 21309 ;; Registers used:
 21310 ;;		None
 21311 ;; Tracked objects:
 21312 ;;		On entry : 0/0
 21313 ;;		On exit  : 0/0
 21314 ;;		Unchanged: 0/0
 21315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21320 ;;Total ram usage:        0 bytes
 21321 ;; Hardware stack levels used:    1
 21322 ;; This function calls:
 21323 ;;		Nothing
 21324 ;; This function is called by:
 21325 ;;		_TMR1_Initialize
 21326 ;;		_TMR1_ISR
 21327 ;; This function uses a non-reentrant model
 21328 ;;
 21329                           
 21330                           
 21331                           ;psect for function _TMR1_DefaultInterruptHandler
 21332  0003                     _TMR1_DefaultInterruptHandler:
 21333  0003                     i1l442:	
 21334                           ;incstack = 0
 21335                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 21336                           
 21337  0003  0008               	return
 21338  0004                     __end_of_TMR1_DefaultInterruptHandler:
 21339                           
 21340                           	psect	text77
 21341  16BF                     __ptext77:	
 21342 ;; *************** function ___awdiv *****************
 21343 ;; Defined at:
 21344 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\awdiv.c"
 21345 ;; Parameters:    Size  Location     Type
 21346 ;;  divisor         2    0[COMMON] int 
 21347 ;;  dividend        2    2[COMMON] int 
 21348 ;; Auto vars:     Size  Location     Type
 21349 ;;  quotient        2    7[COMMON] int 
 21350 ;;  sign            1    6[COMMON] unsigned char 
 21351 ;;  counter         1    5[COMMON] unsigned char 
 21352 ;; Return value:  Size  Location     Type
 21353 ;;                  2    0[COMMON] int 
 21354 ;; Registers used:
 21355 ;;		wreg, status,2, status,0
 21356 ;; Tracked objects:
 21357 ;;		On entry : 0/0
 21358 ;;		On exit  : 0/0
 21359 ;;		Unchanged: 0/0
 21360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21362 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21363 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21364 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21365 ;;Total ram usage:        9 bytes
 21366 ;; Hardware stack levels used:    1
 21367 ;; This function calls:
 21368 ;;		Nothing
 21369 ;; This function is called by:
 21370 ;;		_Clock_ISR
 21371 ;;		_map
 21372 ;; This function uses a non-reentrant model
 21373 ;;
 21374                           
 21375                           
 21376                           ;psect for function ___awdiv
 21377  16BF                     ___awdiv:
 21378  16BF                     i1l5071:	
 21379                           ;incstack = 0
 21380                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 21381                           
 21382  16BF  01F6               	clrf	___awdiv@sign
 21383  16C0                     i1l5073:
 21384  16C0  1FF1               	btfss	___awdiv@divisor+1,7
 21385  16C1  2EC3               	goto	u476_21
 21386  16C2  2EC4               	goto	u476_20
 21387  16C3                     u476_21:
 21388  16C3  2ECB               	goto	i1l5079
 21389  16C4                     u476_20:
 21390  16C4                     i1l5075:
 21391  16C4  09F0               	comf	___awdiv@divisor,f
 21392  16C5  09F1               	comf	___awdiv@divisor+1,f
 21393  16C6  0AF0               	incf	___awdiv@divisor,f
 21394  16C7  1903               	skipnz
 21395  16C8  0AF1               	incf	___awdiv@divisor+1,f
 21396  16C9                     i1l5077:
 21397  16C9  01F6               	clrf	___awdiv@sign
 21398  16CA  0AF6               	incf	___awdiv@sign,f
 21399  16CB                     i1l5079:
 21400  16CB  1FF3               	btfss	___awdiv@dividend+1,7
 21401  16CC  2ECE               	goto	u477_21
 21402  16CD  2ECF               	goto	u477_20
 21403  16CE                     u477_21:
 21404  16CE  2ED8               	goto	i1l5085
 21405  16CF                     u477_20:
 21406  16CF                     i1l5081:
 21407  16CF  09F2               	comf	___awdiv@dividend,f
 21408  16D0  09F3               	comf	___awdiv@dividend+1,f
 21409  16D1  0AF2               	incf	___awdiv@dividend,f
 21410  16D2  1903               	skipnz
 21411  16D3  0AF3               	incf	___awdiv@dividend+1,f
 21412  16D4                     i1l5083:
 21413  16D4  3001               	movlw	1
 21414  16D5  00F4               	movwf	??___awdiv
 21415  16D6  0874               	movf	??___awdiv,w
 21416  16D7  06F6               	xorwf	___awdiv@sign,f
 21417  16D8                     i1l5085:
 21418  16D8  01F7               	clrf	___awdiv@quotient
 21419  16D9  01F8               	clrf	___awdiv@quotient+1
 21420  16DA                     i1l5087:
 21421  16DA  0870               	movf	___awdiv@divisor,w
 21422  16DB  0471               	iorwf	___awdiv@divisor+1,w
 21423  16DC  1903               	btfsc	3,2
 21424  16DD  2EDF               	goto	u478_21
 21425  16DE  2EE0               	goto	u478_20
 21426  16DF                     u478_21:
 21427  16DF  2F0F               	goto	i1l5107
 21428  16E0                     u478_20:
 21429  16E0                     i1l5089:
 21430  16E0  01F5               	clrf	___awdiv@counter
 21431  16E1  0AF5               	incf	___awdiv@counter,f
 21432  16E2  2EEC               	goto	i1l5095
 21433  16E3                     i1l5091:
 21434  16E3  3001               	movlw	1
 21435  16E4                     u479_25:
 21436  16E4  35F0               	lslf	___awdiv@divisor,f
 21437  16E5  0DF1               	rlf	___awdiv@divisor+1,f
 21438  16E6  0B89               	decfsz	9,f
 21439  16E7  2EE4               	goto	u479_25
 21440  16E8                     i1l5093:
 21441  16E8  3001               	movlw	1
 21442  16E9  00F4               	movwf	??___awdiv
 21443  16EA  0874               	movf	??___awdiv,w
 21444  16EB  07F5               	addwf	___awdiv@counter,f
 21445  16EC                     i1l5095:
 21446  16EC  1FF1               	btfss	___awdiv@divisor+1,7
 21447  16ED  2EEF               	goto	u480_21
 21448  16EE  2EF0               	goto	u480_20
 21449  16EF                     u480_21:
 21450  16EF  2EE3               	goto	i1l5091
 21451  16F0                     u480_20:
 21452  16F0                     i1l5097:
 21453  16F0  3001               	movlw	1
 21454  16F1                     u481_25:
 21455  16F1  35F7               	lslf	___awdiv@quotient,f
 21456  16F2  0DF8               	rlf	___awdiv@quotient+1,f
 21457  16F3  0B89               	decfsz	9,f
 21458  16F4  2EF1               	goto	u481_25
 21459  16F5  0871               	movf	___awdiv@divisor+1,w
 21460  16F6  0273               	subwf	___awdiv@dividend+1,w
 21461  16F7  1D03               	skipz
 21462  16F8  2EFB               	goto	u482_25
 21463  16F9  0870               	movf	___awdiv@divisor,w
 21464  16FA  0272               	subwf	___awdiv@dividend,w
 21465  16FB                     u482_25:
 21466  16FB  1C03               	skipc
 21467  16FC  2EFE               	goto	u482_21
 21468  16FD  2EFF               	goto	u482_20
 21469  16FE                     u482_21:
 21470  16FE  2F04               	goto	i1l5103
 21471  16FF                     u482_20:
 21472  16FF                     i1l5099:
 21473  16FF  0870               	movf	___awdiv@divisor,w
 21474  1700  02F2               	subwf	___awdiv@dividend,f
 21475  1701  0871               	movf	___awdiv@divisor+1,w
 21476  1702  3BF3               	subwfb	___awdiv@dividend+1,f
 21477  1703                     i1l5101:
 21478  1703  1477               	bsf	___awdiv@quotient,0
 21479  1704                     i1l5103:
 21480  1704  3001               	movlw	1
 21481  1705                     u483_25:
 21482  1705  36F1               	lsrf	___awdiv@divisor+1,f
 21483  1706  0CF0               	rrf	___awdiv@divisor,f
 21484  1707  0B89               	decfsz	9,f
 21485  1708  2F05               	goto	u483_25
 21486  1709                     i1l5105:
 21487  1709  3001               	movlw	1
 21488  170A  02F5               	subwf	___awdiv@counter,f
 21489  170B  1D03               	btfss	3,2
 21490  170C  2F0E               	goto	u484_21
 21491  170D  2F0F               	goto	u484_20
 21492  170E                     u484_21:
 21493  170E  2EF0               	goto	i1l5097
 21494  170F                     u484_20:
 21495  170F                     i1l5107:
 21496  170F  0876               	movf	___awdiv@sign,w
 21497  1710  1903               	btfsc	3,2
 21498  1711  2F13               	goto	u485_21
 21499  1712  2F14               	goto	u485_20
 21500  1713                     u485_21:
 21501  1713  2F19               	goto	i1l5111
 21502  1714                     u485_20:
 21503  1714                     i1l5109:
 21504  1714  09F7               	comf	___awdiv@quotient,f
 21505  1715  09F8               	comf	___awdiv@quotient+1,f
 21506  1716  0AF7               	incf	___awdiv@quotient,f
 21507  1717  1903               	skipnz
 21508  1718  0AF8               	incf	___awdiv@quotient+1,f
 21509  1719                     i1l5111:
 21510  1719  0878               	movf	___awdiv@quotient+1,w
 21511  171A  00F1               	movwf	?___awdiv+1
 21512  171B  0877               	movf	___awdiv@quotient,w
 21513  171C  00F0               	movwf	?___awdiv
 21514  171D                     i1l1931:
 21515  171D  0008               	return
 21516  171E                     __end_of___awdiv:
 21517                           
 21518                           	psect	text78
 21519  1F8C                     __ptext78:	
 21520 ;; *************** function _INT_ISR *****************
 21521 ;; Defined at:
 21522 ;;		line 32 in file "mcc_generated_files/ext_int.c"
 21523 ;; Parameters:    Size  Location     Type
 21524 ;;		None
 21525 ;; Auto vars:     Size  Location     Type
 21526 ;;		None
 21527 ;; Return value:  Size  Location     Type
 21528 ;;                  1    wreg      void 
 21529 ;; Registers used:
 21530 ;;		wreg, status,2, status,0, pclath, cstack
 21531 ;; Tracked objects:
 21532 ;;		On entry : 0/0
 21533 ;;		On exit  : 0/0
 21534 ;;		Unchanged: 0/0
 21535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21540 ;;Total ram usage:        0 bytes
 21541 ;; Hardware stack levels used:    1
 21542 ;; Hardware stack levels required when called:    2
 21543 ;; This function calls:
 21544 ;;		_INT_CallBack
 21545 ;; This function is called by:
 21546 ;;		_INTERRUPT_InterruptManager
 21547 ;; This function uses a non-reentrant model
 21548 ;;
 21549                           
 21550                           
 21551                           ;psect for function _INT_ISR
 21552  1F8C                     _INT_ISR:
 21553  1F8C                     i1l5467:	
 21554                           ;incstack = 0
 21555                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 21556                           
 21557                           
 21558                           ;ext_int.c: 34: (PIR0bits.INTF = 0);
 21559  1F8C  002E               	movlb	14	; select bank14
 21560  1F8D  100C               	bcf	12,0	;volatile
 21561  1F8E                     i1l5469:
 21562                           
 21563                           ;ext_int.c: 37: INT_CallBack();
 21564  1F8E  3190  200B  319F   	fcall	_INT_CallBack
 21565  1F91                     i1l747:
 21566  1F91  0008               	return
 21567  1F92                     __end_of_INT_ISR:
 21568                           
 21569                           	psect	text79
 21570  100B                     __ptext79:	
 21571 ;; *************** function _INT_CallBack *****************
 21572 ;; Defined at:
 21573 ;;		line 41 in file "mcc_generated_files/ext_int.c"
 21574 ;; Parameters:    Size  Location     Type
 21575 ;;		None
 21576 ;; Auto vars:     Size  Location     Type
 21577 ;;		None
 21578 ;; Return value:  Size  Location     Type
 21579 ;;                  1    wreg      void 
 21580 ;; Registers used:
 21581 ;;		wreg, status,2, status,0, pclath, cstack
 21582 ;; Tracked objects:
 21583 ;;		On entry : 0/0
 21584 ;;		On exit  : 0/0
 21585 ;;		Unchanged: 0/0
 21586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21591 ;;Total ram usage:        0 bytes
 21592 ;; Hardware stack levels used:    1
 21593 ;; Hardware stack levels required when called:    1
 21594 ;; This function calls:
 21595 ;;		Absolute function
 21596 ;;		_INT_DefaultInterruptHandler
 21597 ;;		_S1_ISR
 21598 ;; This function is called by:
 21599 ;;		_INT_ISR
 21600 ;; This function uses a non-reentrant model
 21601 ;;
 21602                           
 21603                           
 21604                           ;psect for function _INT_CallBack
 21605  100B                     _INT_CallBack:
 21606  100B                     i1l5279:	
 21607                           ;incstack = 0
 21608                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 21609                           
 21610                           
 21611                           ;ext_int.c: 44: if(INT_InterruptHandler)
 21612  100B  0022               	movlb	2	; select bank2
 21613  100C  0837               	movf	_INT_InterruptHandler^(0+256),w
 21614  100D  0438               	iorwf	(_INT_InterruptHandler+1)^(0+256),w
 21615  100E  1903               	btfsc	3,2
 21616  100F  2811               	goto	u487_21
 21617  1010  2812               	goto	u487_20
 21618  1011                     u487_21:
 21619  1011  2817               	goto	i1l751
 21620  1012                     u487_20:
 21621  1012                     i1l5281:
 21622                           
 21623                           ;ext_int.c: 45: {;ext_int.c: 46: INT_InterruptHandler();
 21624  1012  0838               	movf	(_INT_InterruptHandler+1)^(0+256),w
 21625  1013  008A               	movwf	10
 21626  1014  0837               	movf	_INT_InterruptHandler^(0+256),w
 21627  1015  000A               	callw
 21628  1016  3190               	pagesel	$
 21629  1017                     i1l751:
 21630  1017  0008               	return
 21631  1018                     __end_of_INT_CallBack:
 21632                           
 21633                           	psect	text80
 21634  0002                     __ptext80:	
 21635 ;; *************** function _INT_DefaultInterruptHandler *****************
 21636 ;; Defined at:
 21637 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 21638 ;; Parameters:    Size  Location     Type
 21639 ;;		None
 21640 ;; Auto vars:     Size  Location     Type
 21641 ;;		None
 21642 ;; Return value:  Size  Location     Type
 21643 ;;                  1    wreg      void 
 21644 ;; Registers used:
 21645 ;;		None
 21646 ;; Tracked objects:
 21647 ;;		On entry : 0/0
 21648 ;;		On exit  : 0/0
 21649 ;;		Unchanged: 0/0
 21650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21655 ;;Total ram usage:        0 bytes
 21656 ;; Hardware stack levels used:    1
 21657 ;; This function calls:
 21658 ;;		Nothing
 21659 ;; This function is called by:
 21660 ;;		_EXT_INT_Initialize
 21661 ;;		_INT_CallBack
 21662 ;; This function uses a non-reentrant model
 21663 ;;
 21664                           
 21665                           
 21666                           ;psect for function _INT_DefaultInterruptHandler
 21667  0002                     _INT_DefaultInterruptHandler:
 21668  0002                     i1l757:	
 21669                           ;incstack = 0
 21670                           ; Regs used in _INT_DefaultInterruptHandler: []
 21671                           
 21672  0002  0008               	return
 21673  0003                     __end_of_INT_DefaultInterruptHandler:
 21674                           
 21675                           	psect	text81
 21676  1FB5                     __ptext81:	
 21677 ;; *************** function _S1_ISR *****************
 21678 ;; Defined at:
 21679 ;;		line 827 in file "main.c"
 21680 ;; Parameters:    Size  Location     Type
 21681 ;;		None
 21682 ;; Auto vars:     Size  Location     Type
 21683 ;;		None
 21684 ;; Return value:  Size  Location     Type
 21685 ;;                  1    wreg      void 
 21686 ;; Registers used:
 21687 ;;		None
 21688 ;; Tracked objects:
 21689 ;;		On entry : 0/0
 21690 ;;		On exit  : 0/0
 21691 ;;		Unchanged: 0/0
 21692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21697 ;;Total ram usage:        0 bytes
 21698 ;; Hardware stack levels used:    1
 21699 ;; This function calls:
 21700 ;;		Nothing
 21701 ;; This function is called by:
 21702 ;;		_main
 21703 ;;		_INT_CallBack
 21704 ;; This function uses a non-reentrant model
 21705 ;;
 21706                           
 21707                           
 21708                           ;psect for function _S1_ISR
 21709  1FB5                     _S1_ISR:
 21710  1FB5                     i1l5069:	
 21711                           ;incstack = 0
 21712                           ; Regs used in _S1_ISR: []
 21713                           
 21714                           
 21715                           ;main.c: 828: PIE0bits.INTE = 0;
 21716  1FB5  002E               	movlb	14	; select bank14
 21717  1FB6  1016               	bcf	22,0	;volatile
 21718                           
 21719                           ;main.c: 829: flagS1pushed = 1;
 21720  1FB7  0021               	movlb	1	; select bank1
 21721  1FB8  01B7               	clrf	_flagS1pushed^(0+128)
 21722  1FB9  0AB7               	incf	_flagS1pushed^(0+128),f
 21723                           
 21724                           ;main.c: 848: (PIR0bits.INTF = 0);
 21725  1FBA  002E               	movlb	14	; select bank14
 21726  1FBB  100C               	bcf	12,0	;volatile
 21727                           
 21728                           ;main.c: 849: PIE0bits.INTE = 1;
 21729  1FBC  1416               	bsf	22,0	;volatile
 21730  1FBD                     i1l1450:
 21731  1FBD  0008               	return
 21732  1FBE                     __end_of_S1_ISR:
 21733                           
 21734                           	psect	text82
 21735  1233                     __ptext82:	
 21736 ;; *************** function _EUSART_Transmit_ISR *****************
 21737 ;; Defined at:
 21738 ;;		line 181 in file "mcc_generated_files/eusart.c"
 21739 ;; Parameters:    Size  Location     Type
 21740 ;;		None
 21741 ;; Auto vars:     Size  Location     Type
 21742 ;;		None
 21743 ;; Return value:  Size  Location     Type
 21744 ;;                  1    wreg      void 
 21745 ;; Registers used:
 21746 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21747 ;; Tracked objects:
 21748 ;;		On entry : 0/0
 21749 ;;		On exit  : 0/0
 21750 ;;		Unchanged: 0/0
 21751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21754 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21755 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21756 ;;Total ram usage:        1 bytes
 21757 ;; Hardware stack levels used:    1
 21758 ;; This function calls:
 21759 ;;		Nothing
 21760 ;; This function is called by:
 21761 ;;		_EUSART_Initialize
 21762 ;;		_INTERRUPT_InterruptManager
 21763 ;; This function uses a non-reentrant model
 21764 ;;
 21765                           
 21766                           
 21767                           ;psect for function _EUSART_Transmit_ISR
 21768  1233                     _EUSART_Transmit_ISR:
 21769  1233                     i1l5487:	
 21770                           ;incstack = 0
 21771                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 21772                           
 21773                           
 21774                           ;eusart.c: 185: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 21775  1233  3040               	movlw	64
 21776  1234  0021               	movlb	1	; select bank1
 21777  1235  026F               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 21778  1236  1803               	skipnc
 21779  1237  2A39               	goto	u520_21
 21780  1238  2A3A               	goto	u520_20
 21781  1239                     u520_21:
 21782  1239  2A53               	goto	i1l845
 21783  123A                     u520_20:
 21784  123A                     i1l5489:
 21785                           
 21786                           ;eusart.c: 186: {;eusart.c: 187: TX1REG = eusartTxBuffer[eusartTxTail++];
 21787  123A  083F               	movf	_eusartTxTail^(0+128),w
 21788  123B  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 21789  123C  0086               	movwf	6
 21790  123D  3001               	movlw	1	; select bank3/4
 21791  123E  0087               	movwf	7
 21792  123F  0801               	movf	1,w
 21793  1240  0022               	movlb	2	; select bank2
 21794  1241  009A               	movwf	26	;volatile
 21795  1242                     i1l5491:
 21796  1242  3001               	movlw	1
 21797  1243  00F0               	movwf	??_EUSART_Transmit_ISR
 21798  1244  0870               	movf	??_EUSART_Transmit_ISR,w
 21799  1245  0021               	movlb	1	; select bank1
 21800  1246  07BF               	addwf	_eusartTxTail^(0+128),f	;volatile
 21801  1247                     i1l5493:
 21802                           
 21803                           ;eusart.c: 188: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 21804  1247  3040               	movlw	64
 21805  1248  023F               	subwf	_eusartTxTail^(0+128),w	;volatile
 21806  1249  1C03               	skipc
 21807  124A  2A4C               	goto	u521_21
 21808  124B  2A4D               	goto	u521_20
 21809  124C                     u521_21:
 21810  124C  2A4E               	goto	i1l5497
 21811  124D                     u521_20:
 21812  124D                     i1l5495:
 21813                           
 21814                           ;eusart.c: 189: {;eusart.c: 190: eusartTxTail = 0;
 21815  124D  01BF               	clrf	_eusartTxTail^(0+128)	;volatile
 21816  124E                     i1l5497:
 21817                           
 21818                           ;eusart.c: 191: };eusart.c: 192: eusartTxBufferRemaining++;
 21819  124E  3001               	movlw	1
 21820  124F  00F0               	movwf	??_EUSART_Transmit_ISR
 21821  1250  0870               	movf	??_EUSART_Transmit_ISR,w
 21822  1251  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 21823                           
 21824                           ;eusart.c: 193: }
 21825  1252  2A55               	goto	i1l848
 21826  1253                     i1l845:
 21827                           
 21828                           ;eusart.c: 194: else;eusart.c: 195: {;eusart.c: 196: PIE3bits.TXIE = 0;
 21829  1253  002E               	movlb	14	; select bank14
 21830  1254  1219               	bcf	25,4	;volatile
 21831  1255                     i1l848:
 21832  1255  0008               	return
 21833  1256                     __end_of_EUSART_Transmit_ISR:
 21834                           
 21835                           	psect	text83
 21836  11F1                     __ptext83:	
 21837 ;; *************** function _EUSART_Receive_ISR *****************
 21838 ;; Defined at:
 21839 ;;		line 200 in file "mcc_generated_files/eusart.c"
 21840 ;; Parameters:    Size  Location     Type
 21841 ;;		None
 21842 ;; Auto vars:     Size  Location     Type
 21843 ;;		None
 21844 ;; Return value:  Size  Location     Type
 21845 ;;                  1    wreg      void 
 21846 ;; Registers used:
 21847 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21848 ;; Tracked objects:
 21849 ;;		On entry : 0/0
 21850 ;;		On exit  : 0/0
 21851 ;;		Unchanged: 0/0
 21852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21855 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21857 ;;Total ram usage:        1 bytes
 21858 ;; Hardware stack levels used:    1
 21859 ;; This function calls:
 21860 ;;		Nothing
 21861 ;; This function is called by:
 21862 ;;		_EUSART_Initialize
 21863 ;;		_INTERRUPT_InterruptManager
 21864 ;; This function uses a non-reentrant model
 21865 ;;
 21866                           
 21867                           
 21868                           ;psect for function _EUSART_Receive_ISR
 21869  11F1                     _EUSART_Receive_ISR:
 21870  11F1                     i1l5499:	
 21871                           ;incstack = 0
 21872                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 21873                           
 21874                           
 21875                           ;eusart.c: 203: if(1 == RC1STAbits.OERR)
 21876  11F1  0022               	movlb	2	; select bank2
 21877  11F2  1C9D               	btfss	29,1	;volatile
 21878  11F3  29F5               	goto	u522_21
 21879  11F4  29F6               	goto	u522_20
 21880  11F5                     u522_21:
 21881  11F5  29F8               	goto	i1l5503
 21882  11F6                     u522_20:
 21883  11F6                     i1l5501:
 21884                           
 21885                           ;eusart.c: 204: {;eusart.c: 207: RC1STAbits.CREN = 0;
 21886  11F6  121D               	bcf	29,4	;volatile
 21887                           
 21888                           ;eusart.c: 208: RC1STAbits.CREN = 1;
 21889  11F7  161D               	bsf	29,4	;volatile
 21890  11F8                     i1l5503:
 21891                           
 21892                           ;eusart.c: 209: };eusart.c: 212: eusartRxBuffer[eusartRxHead++] = RC1REG;
 21893  11F8  0819               	movf	25,w	;volatile
 21894  11F9  00F0               	movwf	??_EUSART_Receive_ISR
 21895  11FA  0021               	movlb	1	; select bank1
 21896  11FB  083E               	movf	_eusartRxHead^(0+128),w
 21897  11FC  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 21898  11FD  0086               	movwf	6
 21899  11FE  3002               	movlw	2	; select bank4/5
 21900  11FF  0087               	movwf	7
 21901  1200  0870               	movf	??_EUSART_Receive_ISR,w
 21902  1201  0081               	movwf	1
 21903  1202                     i1l5505:
 21904  1202  3001               	movlw	1
 21905  1203  00F0               	movwf	??_EUSART_Receive_ISR
 21906  1204  0870               	movf	??_EUSART_Receive_ISR,w
 21907  1205  07BE               	addwf	_eusartRxHead^(0+128),f	;volatile
 21908  1206                     i1l5507:
 21909                           
 21910                           ;eusart.c: 213: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 21911  1206  3040               	movlw	64
 21912  1207  023E               	subwf	_eusartRxHead^(0+128),w	;volatile
 21913  1208  1C03               	skipc
 21914  1209  2A0B               	goto	u523_21
 21915  120A  2A0C               	goto	u523_20
 21916  120B                     u523_21:
 21917  120B  2A0D               	goto	i1l5511
 21918  120C                     u523_20:
 21919  120C                     i1l5509:
 21920                           
 21921                           ;eusart.c: 214: {;eusart.c: 215: eusartRxHead = 0;
 21922  120C  01BE               	clrf	_eusartRxHead^(0+128)	;volatile
 21923  120D                     i1l5511:
 21924                           
 21925                           ;eusart.c: 216: };eusart.c: 217: eusartRxCount++;
 21926  120D  3001               	movlw	1
 21927  120E  00F0               	movwf	??_EUSART_Receive_ISR
 21928  120F  0870               	movf	??_EUSART_Receive_ISR,w
 21929  1210  07BC               	addwf	_eusartRxCount^(0+128),f	;volatile
 21930  1211                     i1l853:
 21931  1211  0008               	return
 21932  1212                     __end_of_EUSART_Receive_ISR:
 21933  007E                     btemp	set	126	;btemp
 21934  007E                     int$flags	set	126
 21935  007E                     wtemp0	set	126
 21936                           
 21937                           	psect	config
 21938                           
 21939                           ;Config register CONFIG1 @ 0x8007
 21940                           ;	External Oscillator mode selection bits
 21941                           ;	FEXTOSC = OFF, Oscillator not enabled
 21942                           ;	Power-up default value for COSC bits
 21943                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
 21944                           ;	Clock Out Enable bit
 21945                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
 21946                           ;	Clock Switch Enable bit
 21947                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 21948                           ;	Fail-Safe Clock Monitor Enable bit
 21949                           ;	FCMEN = ON, FSCM timer enabled
 21950  8007                     	org	32775
 21951  8007  3FEC               	dw	16364
 21952                           
 21953                           ;Config register CONFIG2 @ 0x8008
 21954                           ;	Master Clear Enable bit
 21955                           ;	MCLRE = ON, MCLR pin is Master Clear function
 21956                           ;	Power-up Timer Enable bit
 21957                           ;	PWRTE = OFF, PWRT disabled
 21958                           ;	Low-Power BOR enable bit
 21959                           ;	LPBOREN = OFF, ULPBOR disabled
 21960                           ;	Brown-out reset enable bits
 21961                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
 21962                           ;	Brown-out Reset Voltage Selection
 21963                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
 21964                           ;	Zero-cross detect disable
 21965                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
 21966                           ;	Peripheral Pin Select one-way control
 21967                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
 21968                           ;	Stack Overflow/Underflow Reset Enable bit
 21969                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
 21970                           ;	Background Debugger
 21971                           ;	DEBUG = OFF, Background Debugger disabled
 21972  8008                     	org	32776
 21973  8008  3FFF               	dw	16383
 21974                           
 21975                           ;Config register CONFIG3 @ 0x8009
 21976                           ;	WDT Period Select bits
 21977                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 21978                           ;	WDT operating mode
 21979                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
 21980                           ;	WDT Window Select bits
 21981                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 21982                           ;	WDT input clock selector
 21983                           ;	WDTCCS = SC, Software Control
 21984  8009                     	org	32777
 21985  8009  3F9F               	dw	16287
 21986                           
 21987                           ;Config register CONFIG4 @ 0x800A
 21988                           ;	UserNVM self-write protection bits
 21989                           ;	WRT = OFF, Write protection off
 21990                           ;	Scanner Enable bit
 21991                           ;	SCANE = available, Scanner module is available for use
 21992                           ;	Low Voltage Programming Enable bit
 21993                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
 21994  800A                     	org	32778
 21995  800A  3FFF               	dw	16383
 21996                           
 21997                           ;Config register CONFIG5 @ 0x800B
 21998                           ;	UserNVM Program memory code protection bit
 21999                           ;	CP = OFF, Program Memory code protection disabled
 22000                           ;	DataNVM code protection bit
 22001                           ;	CPD = OFF, Data EEPROM code protection disabled
 22002  800B                     	org	32779
 22003  800B  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    49
    Data        11
    BSS         197
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     69      80
    BANK1            80     32      80
    BANK2            80      0      29
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    main$3500$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    main$3500	const PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    cmd_rc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_rtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_rp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_ra@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_ir@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    S1885$0$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    memset@p1	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    memset@p	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[7]), STR_3(CODE[7]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> update_menuLCD@l(BANK0[3]), update_menuLCD@tt(BANK0[4]), update_menuLCD@str(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_tri@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_trc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_aa@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_dtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_dac@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_mta@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_mmp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_sc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    sendMessage@buffer	PTR unsigned char  size(1) Largest target is 9
		 -> cmd_tri@buffEOM(BANK0[1]), cmd_tri@buffData(BANK0[5]), cmd_tri@buffInit(BANK0[4]), cmd_trc@buffEOM(BANK0[1]), 
		 -> cmd_trc@buffData(BANK0[5]), cmd_trc@buffInit(BANK0[3]), cmd_ir@buff(BANK0[7]), cmd_ra@buff(BANK0[9]), 
		 -> cmd_rp@buff(BANK0[5]), cmd_rtl@buff(BANK0[5]), cmd_rc@buff(BANK0[6]), sendERRORMessage@bufw(BANK0[4]), 
		 -> sendOKMessage@bufw(BANK0[4]), checkFlags@buff(BANK0[7]), 

    differenceBetweenTimePeriod@diff	PTR struct Time size(1) Largest target is 3
		 -> update_menuLCD@diff(BANK0[3]), 

    LCDstr@p	PTR unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[4]), update_menuLCD@l(BANK0[3]), update_menuLCD@tt(BANK0[4]), update_menuLCD@str(BANK0[8]), 

    S1885command_d$cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    commands.cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_Clock_ISR
    _Clock_ISR->___awdiv

Critical Paths under _main in BANK0

    _main->_editClock
    _main->_editLum
    _main->_editTemp
    _main->_toggleAlarms
    _toggleAlarms->_checkFlags
    _getch->_EUSART_Read
    _editTemp->_checkFlags
    _editLum->_checkFlags
    _editClock->_checkFlags
    _checkFlags->_update_menuLCD
    _wirteEEPROMinit->_DATAEE_WriteByte
    _update_menuLCD->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDstr->_LCDchar
    _LCDchar->_LCDsend2x4
    _LCDcmd->_LCDsend2x4
    _monitoring_TEMP_LUM->_DATAEE_WriteByte
    _tsttc->_WriteI2C
    _DATAEE_WriteByte->___wmul
    _cmd_tri->_sendERRORMessage
    _cmd_trc->_sendERRORMessage
    _DATAEE_ReadByte->___wmul
    _cmd_sc->_sendERRORMessage
    _cmd_sc->_sendOKMessage
    _cmd_mta->_sendERRORMessage
    _cmd_mta->_sendOKMessage
    _cmd_mmp->_sendERRORMessage
    _cmd_mmp->_sendOKMessage
    _cmd_dtl->_sendERRORMessage
    _cmd_dtl->_sendOKMessage
    _cmd_dac->_sendERRORMessage
    _cmd_dac->_sendOKMessage
    _cmd_aa->_sendERRORMessage
    _cmd_aa->_sendOKMessage
    _sendOKMessage->_sendMessage
    _sendERRORMessage->_sendMessage
    _sendMessage->_putch
    _putch->_EUSART_Write
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _LCDinit->_LCDsend2x4
    _LCDsend2x4->_WriteI2C
    _LCDsend->_WriteI2C

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0  215147
                                             68 BANK0      1     1      0
                                              0 BANK1     32    32      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                 _EUSART_is_rx_ready
            _INT_SetInterruptHandler
                            _LCDinit
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                  _SYSTEM_Initialize
           _TMR1_SetInterruptHandler
                     _TMR2_StopTimer
                             ___wmul
                         _checkFlags
                             _cmd_aa *
                            _cmd_dac *
                            _cmd_dtl *
                             _cmd_ir *
                            _cmd_mmp *
                            _cmd_mta *
                             _cmd_ra *
                             _cmd_rc *
                             _cmd_rp *
                            _cmd_rtl *
                             _cmd_sc *
                            _cmd_trc *
                            _cmd_tri *
                          _editClock
                            _editLum
                           _editTemp
                              _getch
                   _i2c1_driver_open
                             _memset
                       _toggleAlarms
 ---------------------------------------------------------------------------------
 (1) _toggleAlarms                                         1     1      0   30632
                                             67 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     651
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getch                                                0     0      0      24
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _editTemp                                             1     1      0   30632
                                             67 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editLum                                              1     1      0   30632
                                             67 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editClock                                            1     1      0   30632
                                             67 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (2) _checkFlags                                           8     8      0   22596
                                             59 BANK0      8     8      0
                 _PWM6_LoadDutyValue
               _PWM_Output_D4_Enable
                           _S1button
                    _TMR2_StartTimer
                _monitoring_TEMP_LUM
                        _sendMessage
                     _update_menuLCD
                    _wirteEEPROMinit
 ---------------------------------------------------------------------------------
 (3) _wirteEEPROMinit                                      1     1      0    4953
                                             10 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _update_menuLCD                                      24    24      0    8036
                                             35 BANK0     24    24      0
                            _LCDchar
                             _LCDcmd
                             _LCDstr
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                     _TMR2_StopTimer
        _differenceBetweenTimePeriod
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             29    21      8    4019
                                             14 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _differenceBetweenTimePeriod                          8     1      7     595
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (3) _TMR2_StopTimer                                       0     0      0       0
                          _TMR2_Stop
 ---------------------------------------------------------------------------------
 (4) _TMR2_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Disable                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_LoadDutyValue                                   4     2      2     348
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _LCDstr                                               6     4      2    1159
                                              9 BANK0      6     4      2
                            _LCDchar
 ---------------------------------------------------------------------------------
 (4) _LCDchar                                              1     1      0     810
                                              8 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               1     1      0     810
                                              8 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _monitoring_TEMP_LUM                                  3     3      0    6807
                                             10 BANK0      3     3      0
           _ADCC_GetSingleConversion
                   _DATAEE_WriteByte
                             ___wmul
                              _tsttc
 ---------------------------------------------------------------------------------
 (4) _tsttc                                                2     2      0      68
                                              2 BANK0      2     2      0
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (5) _ReadI2C                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DATAEE_WriteByte                                     4     1      3    4953
                                              6 BANK0      4     1      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADCC_GetSingleConversion                             4     1      3      22
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (4) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _S1button                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Enable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cmd_tri                                             27    24      3    8547
                                             15 BANK0     27    24      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_trc                                             27    24      3    8148
                                             15 BANK0     27    24      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1764
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2    1260
                                              6 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _cmd_sc                                              11     8      3    5093
                                             15 BANK0     11     8      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rtl                                              9     6      3    2404
                                             15 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rp                                               9     6      3    2404
                                             15 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rc                                              10     7      3    2428
                                             15 BANK0     10     7      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ra                                              13    10      3    2500
                                             15 BANK0     13    10      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mta                                              3     0      3    4848
                                             15 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mmp                                              3     0      3    4848
                                             15 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ir                                              11     8      3    2452
                                             15 BANK0     11     8      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dtl                                              9     6      3    5004
                                             15 BANK0      9     6      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dac                                             11     8      3    5093
                                             15 BANK0     11     8      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_aa                                               4     1      3    4892
                                             15 BANK0      4     1      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (2) _sendOKMessage                                        6     6      0    2402
                                              9 BANK0      6     6      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (2) _sendERRORMessage                                     6     6      0    2402
                                              9 BANK0      6     6      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (3) _sendMessage                                          6     3      3    2284
                                              3 BANK0      6     3      3
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     544
                    _ADCC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM6_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     174
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     196
                                              2 BANK0      1     1      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0     832
                                              8 BANK0      1     1      0
                            _LCDsend
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (5) _LCDsend2x4                                           6     5      1     788
                                              2 BANK0      6     5      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _LCDsend                                              2     2      0      44
                                              2 BANK0      2     2      0
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (6) _WriteI2C                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     844
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                            _INT_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     844
                   Absolute function *
                          _Clock_ISR *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Clock_ISR                                           2     2      0     604
                                              9 COMMON     2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (11) ___awdiv                                             9     5      4     604
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (9) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (10) _INT_CallBack                                        0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
                             _S1_ISR *
 ---------------------------------------------------------------------------------
 (11) _S1_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
     ___wmul (ARG)
   _DATAEE_WriteByte
     ___wmul (ARG)
   _EUSART_is_rx_ready
   _INT_SetInterruptHandler
   _LCDinit
     _LCDsend
       _WriteI2C
     _LCDsend2x4
       _WriteI2C
   _PWM6_LoadDutyValue
   _PWM_Output_D4_Disable
   _SYSTEM_Initialize
     _ADCC_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM6_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
   _TMR1_SetInterruptHandler
   _TMR2_StopTimer
     _TMR2_Stop
   ___wmul
   _checkFlags
     _PWM6_LoadDutyValue
     _PWM_Output_D4_Enable
     _S1button
     _TMR2_StartTimer
       _TMR2_Start
     _monitoring_TEMP_LUM
       _ADCC_GetSingleConversion
       _DATAEE_WriteByte
         ___wmul (ARG)
       ___wmul
       _tsttc
         _ReadI2C
         _WriteI2C
     _sendMessage
       _putch
         _EUSART_Write
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _wirteEEPROMinit
       _DATAEE_WriteByte
         ___wmul (ARG)
   _cmd_aa *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dac *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dtl *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ir *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_mmp *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_mta *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ra *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rc *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rp *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rtl *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_sc *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_trc *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _cmd_tri *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _editClock *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editLum *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editTemp *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _getch *
     _EUSART_Read
   _i2c1_driver_open *
   _memset *
   _toggleAlarms *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
       _S1_ISR *
   _TMR1_ISR *
     Absolute function(Fake) *
     _Clock_ISR *
       ___awdiv
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     45      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     20      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1D       9       36.2%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Dec 15 15:26:20 2020

               ?_EUSART_SetRxInterruptHandler 0020                                             _t 0065  
                                          l30 1664                                            l22 11A9  
                                          l23 11AB                                            l33 162C  
                                          l42 164E                                            l26 11B1  
                                          l35 1631                                            l47 1662  
                                ___awdiv@sign 0076                                            _nr 006A  
                         ___wmul@multiplicand 0022                   __size_of_PWM6_LoadDutyValue 0019  
                           sendMessage@buffer 0025                                _update_menuLCD 036C  
                                         l128 155E                                           l253 1FFF  
                                         l182 1155                                           l185 1FE1  
                                         l409 1192                                           l188 1FAC  
                                         l540 1089                                           l620 10E8  
                                         l525 10B7                                           l439 1FEA  
                                         l617 1024                                           l537 107D  
                                         l730 1295                                           l811 1362  
                                         l731 129C                                           l734 104F  
                                         l662 1F83                                           l647 1040  
                                         l760 1032                                           l832 0809  
                                         l656 1F7D                                           l728 1291  
                                         l817 1F77                                           l833 0813  
                                         l665 1F8B                                           l754 1FD8  
                                         l842 1FA4                                           l659 1F87  
                                         l827 130C                                           l836 0830  
                                         l839 07FE                                           l856 1FCF  
                                         l859 1FC6                                           _PR2 028D  
                             _timer1ReloadVal 00ED                       __size_of_PMD_Initialize 0008  
                             _TMR2_Initialize 1033                                           wreg 0009  
                                ?_EUSART_Read 0070                                   ?_LCDsend2x4 0022  
                             __end_of_LCDchar 1FF4                                          l1021 0D39  
                                        l1110 15AD                                          l1022 0D3B  
                                        l1200 0A78                                          l1113 15B1  
                                        l1033 0D74                                          l1034 0D76  
                                        l1018 0D2A                                          l1051 0DC8  
                                        l1052 0DCA                                          l1109 15AB  
                                        l1045 0DB2                                          l1230 0B27  
                                        l1214 0AC8                                          l1070 0E1D  
                                        l1054 0DCE                                          l1046 0DB5  
                                        l1302 0469                                          l1223 0B08  
                                        l1071 0E1F                                          l1233 08A6  
                                        l1305 0499                                          l1226 0B1E  
                                        l1082 0E5B                                          l1058 0DE2  
                                        l2050 14D9                                          l1227 0B20  
                                        l1083 0E5E                                          l1059 0DE4  
                                        l1500 149C                                          l1092 0E79  
                                        l1236 1FB4                                          l2060 13FA  
                                        l1308 04B4                                          l1404 1772  
                                        l1261 1F7A                                          l1245 1139  
                                        l1317 0566                                          l1333 05A0  
                                        l1342 0F58                                          l1503 1335  
                                        l1239 1FF3                                          l2231 1073  
                                        l1415 178A                                          l1520 0C42  
                                        l1088 0E71                                          l1264 1F80  
                                        l1440 1363                                          l1097 1570  
                                        l1521 0C5A                                          l1089 0E73  
                                        l1098 1572                                          l1522 0C6D  
                                        l1370 169A                                          l1362 0FFF  
                                        l1258 13C5                                          l1282 07FA  
                                        l1426 1464                                          l1418 1430  
                                        l1515 0C00                                          l1507 0B54  
                                        l1443 1377                                          l1453 1103  
                                        l1373 16BE                                          l1437 142F  
                                        l1429 13FB                                          l2237 11D0  
                                        l1526 0D29                                          l1470 12E6  
                                        l1199 0A76                                          l1447 1390  
                                        l1456 1173                                          l1464 17FF  
                                        l1480 111E                                          l1368 16B5  
                                        l1296 0432                                          l5001 0FBA  
                                        l1394 0A53                                          l1379 1278  
                                        l1459 12C1                                          l1467 1232  
                                        l1475 10CF                                          l1483 151B  
                                        l5011 0FD5                                          l5003 0FC2  
                                        l1299 04AE                                          l1493 160A  
                                        l5021 0FE5                                          l5013 0FD7  
                                        l5005 0FC8                                          l1397 171E  
                                        l1549 02A5                                          l5031 0FF9  
                                        l5023 0FEA                                          l5007 0FCD  
                                        l5015 0FDA                                          l1488 0920  
                                        l5121 1526                                          l5201 117B  
                                        l5041 1672                                          l5025 0FEF  
                                        l5033 0FFC                                          l5017 0FDC  
                                        l5009 0FD3                                          l6001 00B6  
                                        l5131 1531                                          l5123 1528  
                                        l5115 151C                                          l5211 118F  
                                        l5203 117D                                          l5051 1689  
                                        l5043 1677                                          l5035 0FFD  
                                        l5027 0FF5                                          l5019 0FDE  
                                        l1739 05BE                                          l6003 00B7  
                                        l1780 11F0                                          l4421 1615  
                                        l4413 160D                                          l5221 1338  
                                        l5213 1025                                          l5141 1545  
                                        l5133 1533                                          l5125 152A  
                                        l5117 1522                                          l5205 1184  
                                        l4501 0825                                          l5061 1256  
                                        l5053 1696                                          l5045 167C  
                                        l5037 1665                                          l5029 0FF7  
                                        l1757 0671                                          l5301 130A  
                                        l6101 0288                                          l6021 00FD  
                                        l6013 00CA                                          l6005 00C4  
                                        l1774 073E                                          l4423 161F  
                                        l4415 1610                                          l5311 1585  
                                        l5231 1351                                          l5223 1340  
                                        l5215 1028                                          l5151 1550  
                                        l5143 1547                                          l5135 1535  
                                        l5127 152C                                          l5119 1524  
                                        l5207 1186                                          l4503 082B  
                                        l5063 125A                                          l5055 16A8  
                                        l5047 167F                                          l5039 166C  
                                        l4511 1063                                          l6103 028F  
                                        l6111 02A5                                          l6031 01AF  
                                        l6015 00DC                                          l6007 00C6  
                                        l6023 00FF                                          l4425 162A  
                                        l4433 1638                                          l5313 1589  
                                        l5305 1561                                          l5241 135D  
                                        l5233 1353                                          l5225 134A  
                                        l5217 1030                                          l5161 155B  
                                        l5153 1552                                          l5145 1549  
                                        l5137 1541                                          l5129 152F  
                                        l5209 1187                                          l4505 082C  
                                        l5065 1265                                          l5057 16AA  
                                        l5049 1682                                          l4601 1F7B  
                                        l4513 1064                                          l5401 0A08  
                                        l6121 02BB                                          l6113 02AD  
                                        l6105 029B                                          l6041 01EF  
                                        l6033 01BB                                          l6025 0105  
                                        l6017 00E0                                          l1778 11DC  
                                        l4435 1643                                          l4427 1636  
                                        l5315 1598                                          l5307 1561  
                                        l4451 0A8B                                          l4443 0A56  
                                        l5243 135E                                          l5235 1354  
                                        l5227 134D                                          l5219 1336  
                                        l5171 1FE0                                          l5155 1555  
                                        l5147 154B                                          l5139 1543  
                                        l5163 1FA5                                          l4507 082E  
                                        l5067 126A                                          l4531 11E6  
                                        l4523 11D1                                          l5059 16B0  
                                        l4611 1289                                          l4603 1F88  
                                        l4515 106A                                          l5411 0A21  
                                        l5403 0A13                                          l6131 0320  
                                        l6123 02D9                                          l6115 02B9  
                                        l6107 029E                                          l6051 022B  
                                        l6043 01FC                                          l6035 01C8  
                                        l6027 010A                                          l6019 00EF  
                                        l4437 1653                                          l5317 159C  
                                        l5309 1576                                          l4461 0AB9  
                                        l4453 0A8F                                          l4445 0A5B  
                                        l5181 10B5                                          l5245 135F  
                                        l5237 1356                                          l5229 134F  
                                        l5165 1FD9                                          l5157 1557  
                                        l5149 154E                                          l5173 1018  
                                        l4533 11EC                                          l4525 11D4  
                                        l4621 1290                                          l4613 128A  
                                        l4605 1279                                          l4509 1FED  
                                        l4701 1F7E                                          l4541 14A6  
                                        l4517 1070                                          l5421 0A45  
                                        l5413 0A26                                          l5405 0A16  
                                        l6141 0334                                          l6133 0320  
                                        l6125 02F5                                          l6061 0231  
                                        l6053 022C                                          l6045 0209  
                                        l6037 01D5                                          l6029 01A3  
                                        l4471 0AF3                                          l4463 0AC8  
                                        l4455 0A9E                                          l4447 0A67  
                                        l5247 1360                                          l5239 1357  
                                        l5167 1FDC                                          l5159 1559  
                                        l5175 101F                                          l5191 103B  
                                        l5183 1033                                          l5431 10F8  
                                        l5271 104B                                          l5263 1041  
                                        l4527 11D8                                          l4623 1296  
                                        l4615 128B                                          l4607 1281  
                                        l4631 0D4E                                          l4551 14C5  
                                        l4543 14A9                                          l4519 1072  
                                        l4711 05BA                                          l4703 05A3  
                                        l5423 0A4F                                          l5415 0A2C  
                                        l5407 0A1B                                          l6151 034E  
                                        l6143 0338                                          l6127 0307  
                                        l6135 0323                                          l6071 023A  
                                        l6063 0232                                          l6055 022E  
                                        l6047 0215                                          l6039 01E2  
                                        l4473 0AF9                                          l4465 0ACF  
                                        l4457 0AA4                                          l4449 0A7C  
                                        l5601 087E                               __end_of_LCDinit 08A7  
                                        l5177 10A1                                          l5169 1FDD  
                                        l5193 103D                                          l5185 1036  
                                        l5441 1140                                          l4625 1FA0  
                                        l5433 1158                                          l5425 10EB  
                                        l5273 104C                                          l5265 1045  
                                        l4529 11E1                                          l4617 128C  
                                        l4609 1285                                          l4481 1193  
                                        l4641 0D89                                          l4633 0D52  
                                        l4553 14C9                                          l4545 14AE  
                                        l4537 149D                                          l4801 0712  
                                        l4721 05D8                                          l4713 05BF  
                                        l4705 05A8                                          l5417 0A3C  
                                        l5409 0A1C                                          l6153 0355  
                                        l6145 033F                                          l6137 032A  
                                        l6129 0314                                          l6081 024B  
                                        l6073 023B                                          l6065 0235  
                                        l6057 022F                                          l6049 0220  
                                        l4475 0B08                                          l4467 0ADE  
                                        l4459 0AB3                                          l5611 089C  
                                        l5603 0882                                          l5179 10B3  
                                        l5195 1174                                          l5187 1037  
                                        l5451 114F                                          l5443 1143  
                                        l4491 0803                                          l5435 1168  
                                        l5427 10F3                                          l5275 104D  
                                        l5267 1049                                          l4619 128E  
                                        l4483 119E                                          l4651 0DD3  
                                        l4643 0D8D                                          l4635 0D61  
                                        l4627 0D2A                                          l4555 14CA  
                                        l4547 14B2                                          l4539 14A0  
                                        l4571 13D9                                          l4563 13C6  
                                        l4803 0719                                          l4723 05DB  
                                        l4707 05AE                                          l5419 0A42  
                                        l5371 09BC                                          l5291 12FC  
                                        l5283 12E7                                          l6155 0359  
                                        l6147 0343                                          l6139 032E  
                                        l6091 0263                                          l6083 024E  
                                        l6075 023E                                          l6067 0237  
                                        l6059 0230                                          l4477 0B0F  
                                        l4469 0AE4                                          l5605 088A  
                                        l4821 1FC7                                          l4813 1FE2  
                                        l5197 1177                                          l5189 103A  
                                        l5453 1152                                          l5445 1146  
                                        l5437 113A                                          l4493 0803  
                                        l5429 10F4                                          l5269 104A  
                                        l4485 11B0                                          l4661 0E0E  
                                        l4653 0DE8                                          l4645 0D9C  
                                        l4637 0D65                                          l4629 0D3F  
                                        l4557 14CF                                          l4549 14B6  
                                        l4573 13DD                                          l4565 13CD  
                                        l4581 13F6                                          l4805 071D  
                                        l4741 0632                                          l4725 05EC  
                                        l4733 060B                                          l4717 05C3  
                                        l4709 05B5                                          l4901 04B4  
                                        l5381 09CB                                          l5373 09BE  
                                        l5621 173B                                          l5613 1723  
                                        l5293 1302                                          l5285 12E7  
                                        l5461 1FFC                                          l5701 1386  
                                        l6157 0366                                          l6149 034A  
                                        l6093 0269                                          l6085 024F  
                                        l6077 023F                                          l6069 0238  
                                        l4479 0B24                                          l5607 0890  
                                        l5199 1179                                          l5447 1149  
                                        l5439 113D                                          l4495 080E  
                                        l5711 17AD                                          l4823 1F78  
                                        l4815 1F84                                          l4591 107B  
                                        l4671 0E4C                                          l4663 0E23  
                                        l4655 0DF7                                          l4647 0DA3  
                                        l4639 0D7A                                          l4559 14D5  
                                        l4575 13E7                                          l4567 13D0  
                                        l4751 063D                                          l4743 0636  
                                        l4735 0623                                          l4727 05FB  
                                        l4719 05CC                                          l4807 0726  
                                        l4911 04E9                                          l4903 04B8  
                                        l4831 037B                                          l5391 09DC  
                                        l5375 09C3                                          l5383 09CD  
                                        l5367 09B3                                          l5631 1754  
                                        l5623 173D                                          l5615 1729  
                                        l5295 1303                                          l5287 12ED  
                                        l5455 1FF4                                          l5703 138E  
                                        l6095 0275                                          l6087 0257  
                                        l6079 0240                                          l5609 0896  
                                        l4817 1FD0                                          l5449 114C  
                                        l4497 0814                                          l5705 129D  
                                        l5721 17D5                                          l5713 17B1  
                                        l5801 1606                                          l4593 107C  
                                        l4585 1076                                          l4673 0E62  
                                        l4665 0E32                                          l4657 0DFB  
                                        l4649 0DB9                                          l4681 111F  
                                        l4489 1F81                                          l4577 13EB  
                                        l4569 13D5                                          l4761 066D  
                                        l4745 063B                                          l4737 062A  
                                        l4809 073A                                          l4729 05FF  
                                        l4921 051E                                          l4913 04ED  
                                        l4905 04BE                                          l4841 03D0  
                                        l4833 0383                                          l4825 073F  
                                        l5393 09DF                                          l5385 09D2  
                                        l5377 09C6                                          l5369 09B9  
                                        l5633 175B                                          l5625 1744  
                                        l5641 1772                                          l5617 172E  
                                        l5297 1305                                          l5289 12F7  
                                        l5457 1FF9                                          l6097 0278  
                                        l6089 025D                                          l4819 1FBE  
                                        l4499 0820                                          l5707 12B6  
                                        l5723 17E2                                          l5715 17BE  
                                        l5731 1212                                          l5811 147F  
                                        l5803 1465                                          l4595 1082  
                                        l4587 1079                                          l4675 0E77  
                                        l4667 0E36                                          l4659 0E0A  
                                        l4683 1120                                          l4691 1398  
                                        l4579 13F0                                          l4771 0692  
                                        l4763 067C                                          l4755 0657  
                                        l4739 062E                                          l4931 053E  
                                        l4923 0525                                          l4915 04F3  
                                        l4907 04D1                                          l4851 03F6  
                                        l4843 03D8                                          l4835 0389  
                                        l4827 036C                                          l5395 09E1  
                                        l5387 09D5                                          l5379 09C8  
                                        l5643 177B                                          l5635 1762  
                                        l5627 174B                                          l5619 1734  
                                        l5651 1435                                          l5299 1308  
                                        l5483 07FB                                          l5459 1FFA  
                                        l6099 0283                                          l5581 083A  
                                        l5725 17EA                                          l5717 17C3  
                                        l5709 178B                                          l5733 1227  
                                        l5741 10C0                                          l5813 1488  
                                        l5805 146F                                          l5821 130D  
                                        l4589 107A                                          l4669 0E45  
                                        l4685 1124                                          l4693 139F  
                                        l4781 06AE                                          l4773 0699  
                                        l4765 0685                                          l4757 0661  
                                        l4941 055A                                          l4933 0543  
                                        l4925 0529                                          l4917 0506  
                                        l4909 04E1                                          l4861 041A  
                                        l4853 03FC                                          l4845 03DE  
                                        l4837 03AE                                          l4829 0372  
                                        l5397 09E6                                          l5389 09D7  
                                        l5637 1769                                          l5629 1752  
                                        l5645 177E                                          l5661 144B  
                                        l5653 143B                                          l5479 1F75  
                                        l5591 085A                                          l5583 083E  
                                        l5903 0C85                                          l5727 17F6  
                                        l5719 17D0                                          l5735 12C2  
                                        l5743 10C6                                          l5751 1115  
                                        l5815 148F                                          l5807 1476  
                                        l5823 132A                                          l5831 0B3F  
                                        l4679 1FAF                                          l4599 10D0  
                                        l4695 13A9                                          l4687 1391  
                                        l4791 06D4                                          l4775 069D  
                                        l4783 06B9                                          l4767 0688  
                                        l4759 0667                                          l4951 0579  
                                        l4943 0561                                          l4935 0549  
                                        l4927 0531                                          l4919 0516  
                                        l4871 0448                                          l4863 0423  
                                        l4855 0405                                          l4847 03E7  
                                        l4839 03CC                                          l5399 09EB  
                                        l5647 1781                                          l5639 176B  
                                        l5671 1400                                          l5663 1454  
                                        l5655 143E                                          l5593 0862  
                                        l5585 0846                                          l5921 0CD8  
                                        l5905 0C96                                          l5729 17FB  
                                        l5737 12DB                                          l5745 10CB  
                                        l5753 111A                                          l5761 1510  
                                        l5817 1493                                          l5809 147A  
                                        l5841 0B70                                          l5833 0B4B  
                                        l5825 0B28                                          l4697 13AF  
                                        l4689 1392                                          l4793 06DA  
                                        l4785 06BF                                          l4777 06A3  
                                        l4769 068C                                          l4961 0595  
                                        l4953 057E                                          l4937 054E  
                                        l4929 0538                                          l4945 0567  
                                        l4881 048E                                          l4873 044D  
                                        l4865 042A                                          l4857 040C  
                                        l4849 03EE                                          l5649 1788  
                                        l5681 1416                                          l5673 1406  
                                        l5657 1444                                          l5665 1457  
                                        l5595 0866                                          l5587 084A  
                                        l5579 0831                                          l5931 0D0C  
                                        l5923 0CE3                                          l5915 0CA8  
                                        l5907 0CA1                                          l5739 10B8  
                                        l5747 1104                                          l5755 14DA  
                                        l5771 08DF                                          l5763 08A7  
                                        l5819 1498                                          l5851 0B9F  
                                        l5835 0B61                                          l5827 0B30  
                                        l4971 0EB5                                          l4699 13B5  
                                        l4795 06E1                                          l4787 06C6  
                                        l4779 06AA                                          l4963 059C  
                                        l4955 0585                                          l4947 056E  
                                        l4939 0555                                          l4891 04AA  
                                        l4883 0496                                          l4875 0452  
                                        l4867 043B                                          l4859 0414  
                                        l5683 141F                                          l5675 1409  
                                        l5667 145A                                          l5659 144A  
                                        l5691 1368                                          l5597 086E  
                                        l5589 0856                                          l5925 0CF1  
                                        l5917 0CCE                                          l5909 0CA7  
                                        l5933 0D0F                                          l5749 110F  
                                        l5757 1501                                          l5781 0917  
                                        l5773 08EC                                          l5765 08C9  
                                        l5861 0BCD                                          l5853 0BA3  
                                        l5837 0B6C                                          l5829 0B3B  
                                        l4981 0F71                                          l4973 0F45  
                                        l4965 0E7A                                          l4789 06CA  
                                        l4797 06E5                                          l4957 058B  
                                        l4949 0574                                          l4885 049E  
                                        l4877 0457                                          l4869 0442  
                                        l5677 140F                                          l5685 1422  
                                        l5669 1462                                          l5941 11B4  
                                        l5693 136E                                          l5599 0872  
                                        l5935 0D15                                          l5927 0CF9  
                                        l5919 0CD2                                          l5759 150C  
                                        l5775 08F1                                          l5767 08CD  
                                        l5783 091C                                          l5791 15DA  
                                        l5871 0BF0                                          l5863 0BCF  
                                        l5855 0BA9                                          l5847 0B72  
                                        l5839 0B6C                                          l4991 0F87  
                                        l4983 0F74                                          l4975 0F4C  
                                        l4967 0E93                                          l4799 06EA  
                                        l4959 0590                                          l4887 04A0  
                                        l4879 0475                                          l5687 1425  
                                        l5679 1415                                          l5943 11B9  
                                        l5695 1373                                          l5937 0D19  
                                        l5929 0CFD                                          l5881 0C18  
                                        l5777 08FE                                          l5769 08DA  
                                        l5793 15DF                                          l5785 15B2  
                                        l5857 0BB4                                          l5849 0B90  
                                        l5865 0BD4                                          l5873 0BFC  
                                        l4993 0F9B                                          l4985 0F76  
                                        l4977 0F52                                          l4969 0EA4  
                                        l4889 04A7                                          l5689 142D  
                                        l5945 11C0                                          l5697 1380  
                                        l5891 0C4F                                          l5883 0C25  
                                        l5939 0D25                                          l5875 0C01  
                                        l5779 0906                                          l5795 15EC  
                                        l5787 15C9                                          l5867 0BE2  
                                        l5859 0BB9                                          l4995 0F9D  
                                        l4987 0F7C                                          l4979 0F5D  
                                        l5947 11C4                                          l5699 1383  
                                        l5893 0C60                                          l5885 0C34  
                                        l5877 0C09                                          l5797 15F4  
                                        l5789 15CD                                          l5869 0BEB  
                                        l4997 0FA8                                          l4989 0F82  
                                        l5895 0C66                                          l5887 0C3B  
                                        l5879 0C13                                          l5799 1601  
                                        l4999 0FB3                                          l5991 0092  
                                        _ALAF 006F                                          l5897 0C73  
                                        l5889 0C4B                                          l5993 009C  
                                        l5899 0C80                                          l5995 009F  
                                        l5997 00B2                               __end_of_LCDsend 15B2  
                                        l5999 00B4                                          STR_1 1827  
                                        STR_2 1827                                          STR_3 1840  
                                        STR_4 1840                                          STR_5 1847  
                                        STR_6 1847                                          STR_7 184C  
                                        _LATA 0016                                          _LATB 0017  
                             __end_of_INT_ISR 1F92                                          _LATC 0018  
                                        u4000 0E62                                          _LATD 0019  
                                        u4001 0E61                                          _LATE 001A  
                                        u4010 0E71                                          u4011 0E70  
                                        u3300 161F                                          u4020 0E77  
                                        u4100 0656                                          u3301 161E  
                                        u4021 0E76                                          u4101 0655  
                                        u3310 162A                                          u4030 1139  
                                        u4110 0661                                          u3311 1629  
                                        u4031 1138                                          u4111 0660  
                                        u3320 1631                                          u3400 0A7C  
                                        u4040 139F                                          u4200 06D4  
                                        u4120 0667                                          u3321 1630  
                                        u3401 0A7B                                          u4041 139E  
                                        u4201 06D3                                          u4121 0666  
                                        u4105 0652                                          u3330 1636  
                                        u3410 0A8B                                          u4050 13B5  
                                        u4210 06DA                                          u4130 066D  
                                        _T2PR 028D                                          u3331 1635  
                                        u3411 0A8A                                          u4051 13B4  
                                        u4211 06D9                                          u4131 066C  
                                        u3340 1643                                          u3420 0A9E  
                                        u3500 119E                                          u4220 0726  
                                        u4140 067C                                          u4060 05AE  
                                        u4300 041A                                          u5100 09D2  
                                        u3341 1642                                          u3421 0A9D  
                                        u3501 119D                                          u4221 0725  
                                        u4141 067B                                          u4061 05AD  
                                        u4301 0419                                          u5101 09D1  
                                        u3350 164E                                          u3430 0AB3  
                                        u3510 11A9                                          u4230 073A  
                                        u4150 068C                                          u4070 05D8  
                                        u4310 042A                                          u5110 09DC  
                                        u3351 164D                                          u3431 0AB2  
                                        u3511 11A8                                          u4231 0739  
                                        u4151 068B                                          u4071 05D7  
                                        u4311 0429                                          u5111 09DB  
                                        u3360 1653                                          u3440 0AC8  
                                        u6000 0BA9                                          u3520 11B0  
                                        u4160 0692                                          u4080 060B  
                                        u4400 04BE                                          u4320 0442  
                                        u4240 0372                                          u5120 09E6  
                                        u3361 1652                                          u3441 0AC7  
                                        u6001 0BA8                                          u3521 11AF  
                                        u4161 0691                                          u4145 0678  
                                        u4081 060A                                          u4401 04BD  
                                        u4321 0441                                          u4241 0371  
                                        u5121 09E5                                          u3370 1662  
                                        u3290 1614                                          u3450 0ADE  
                                        u3530 0809                                          u3610 11EC  
                                        u6010 0BCD                                          u4170 06A3  
                                        u4090 0632                                          u4410 04F3  
                                        u4330 0448                                          u4250 0389  
                                        u5130 09EB                                          u3371 1661  
                                        u3291 1613                                          u3451 0ADD  
                                        u3531 0808                                          u3611 11EB  
                                        u6011 0BCC                                          u4171 06A2  
                                        u4091 0631                                          u4411 04F2  
                                        u4331 0447                                          u4251 0388  
                                        u5131 09EA                                          u3460 0AF3  
                                        u3540 080E                                          u6100 0C80  
                                        u6020 0BE2                                          u3620 14A6  
                                        u4180 06B8                                          u4500 0585  
                                        u4420 0525                                          u4340 044D  
                                        u4260 03DE                                          u5140 0A1B  
                                        u3461 0AF2                                          u3541 080D  
                                        u3605 11E2                                          u6101 0C7F  
                                        u6021 0BE1                                          u3621 14A5  
                                        u4181 06B7                                          u4501 0584  
                                        u4421 0524                                          u4341 044C  
                                        u4261 03DD                                          u5141 0A1A  
                                        u3470 0B08                                          u3390 0A76  
                                        u3550 082B                                          u6110 0CD8  
                                        u6030 0C09                                          u3710 13DD  
                                        u4190 06BF                                          u4510 058B  
                                        u4430 0538                                          u4350 0452  
                                        u4270 03EE                                          u5150 0A21  
                                        u3471 0B07                                          u3391 0A75  
                                        u3551 082A                                          u6111 0CD7  
                                        u6031 0C08                                          u6015 0BC9  
                                        u3711 13DC                                          u4191 06BE  
                                        u4511 058A                                          u4431 0537  
                                        u4351 0451                                          u4271 03ED  
                                        u5151 0A20                                          u3480 0B1E  
                                        u6120 0CF1                                          u6040 0C25  
                                        u3800 0D4E                                          u4600 0FBA  
                                        u3640 14B6                                          u3720 13E7  
                                        u3560 106A                                          u4520 059C  
                                        u4440 053E                                          u4360 0457  
                                        u4280 03FC                                          u5160 0A26  
                                        u5080 09B9                                          u3481 0B1D  
                                        u3385 0A5E                                          u6121 0CF0  
                                        u6105 0C7C                                          u6041 0C24  
                                        u6025 0BDE                                          u3801 0D4D  
                                        u4601 0FB9                                          u3641 14B5  
                                        u3721 13E6                                          u3705 13D1  
                                        u3561 1069                                          u4521 059B  
                                        u4441 053D                                          u4361 0456  
                                        u4281 03FB                                          u5161 0A25  
                                        u5081 09B8                                          u3490 0B24  
                                        u6130 0D0C                                          u6050 0C3B  
                                        u3810 0D61                                          u4610 0FC2  
                                        u3570 1070                                          u4450 0549  
                                        u4370 0496                                          u4290 040C  
                                        u5170 0A3C                                          u5090 09C3  
                                        u3491 0B23                                          u6131 0D0B  
                                        u6051 0C3A                                          u3811 0D60  
                                        u4611 0FC1                                          u3635 14AA  
                                        u3571 106F                                          u4451 0548  
                                        u4371 0495                                          u4291 040B  
                                        u5171 0A3B                                          u5091 09C2  
                                        u3580 11D8                                          u6140 0D15  
                                        u6060 0C4F                                          u4700 167C  
                                        u3900 0DD3                                          u3820 0D74  
                                        u4620 0FC8                                          u4540 0EA4  
                                        u3660 14C5                                          u3740 13F6  
                                        u4460 0555                                          u4380 049E  
                                        u5180 1FF9                                          u6300 00FD  
                                        _PMD0 0796                                          u3581 11D7  
                                        u6141 0D14                                          u6125 0CED  
                                        u6061 0C4E                                          u6045 0C21  
                                        u4701 167B                                          u3901 0DD2  
                                        u3821 0D73                                          u4621 0FC7  
                                        u4541 0EA3                                          u3661 14C4  
                                        u3741 13F5                                          u3725 13E3  
                                        u4461 0554                                          u4381 049D  
                                        u5181 1FF8                                          u6301 00FC  
                                        _PMD1 0797                                          u6070 0C60  
                                        u4710 1689                                          u3750 1082  
                                        u3910 0DE2                                          u3830 0D7A  
                                        u4630 0FCD                                          u4550 0EB5  
                                        u4470 0561                                          u4390 04B3  
                                        u5510 1723                                          u6150 11D0  
                                        u6310 0105                                          _PMD2 0798  
                                        u6135 0D08                                          u6071 0C5F  
                                        u4711 1688                                          u3751 1081  
                                        u3911 0DE1                                          u3831 0D79  
                                        u4631 0FCC                                          u4551 0EB4  
                                        u4535 0E8B                                          u3655 14B7  
                                        u3735 13EC                                          u4471 0560  
                                        u4391 04B2                                          u5175 0A38  
                                        u5511 1722                                          u6151 11CF  
                                        u6311 0104                                          _PMD3 0799  
                                        u6080 0C66                                          u4720 1696  
                                        u3920 0DE8                                          u3840 0D89  
                                        u4640 0FE5                                          u4560 0F4C  
                                        u3680 14D5                                          u4480 056E  
                                        u5520 1729                                          u5600 1435  
                                        u6400 02B9                                          u6320 010A  
                                        _PMD4 079A                                          u6081 0C65  
                                        u4721 1695                                          u3921 0DE7  
                                        u3841 0D88                                          u4641 0FE4  
                                        u4561 0F4B                                          u4545 0EA0  
                                        u3681 14D4                                          u3665 14C1  
                                        u4481 056D                                          u5521 1728  
                                        u5601 1434                                          u6401 02B8  
                                        u6321 0109                                          _PMD5 079B  
                                        u6090 0C73                                          u4730 16A8  
                                        u3770 1295                                          u3930 0DF7  
                                        u3850 0D9C                                          u4650 0FEA  
                                        u4570 0F71                                          u3690 13CD  
                                        u4490 0574                                          u5530 1734  
                                        u5610 143B                                          u6410 02D9  
                                        u6330 0248                                          u3595 11DD  
                                        u6091 0C72                                          u4731 16A7  
                                        u3771 1294                                          u3931 0DF6  
                                        u3851 0D9B                                          u4651 0FE9  
                                        u4571 0F70                                          u4555 0EB1  
                                        u3675 14CB                                          u3691 13CC  
                                        u4491 0573                                          u5531 1733  
                                        u5611 143A                                          u6411 02D8  
                                        u4900 1570                                          u4740 16B0  
                                        u3940 0E0A                                          u3860 0DB2  
                                        u3780 0D39                                          u4660 0FEF  
                                        u4580 0F7C                                          u5540 173B  
                                        u5620 144A                                          u5700 138E  
                                        u6420 0314                                          u6340 025D  
                                        u4901 156F                                          u4741 16AF  
                                        u4725 1692                                          u3941 0E09  
                                        u3861 0DB1                                          u3781 0D38  
                                        u4661 0FEE                                          u4581 0F7B  
                                        u3765 10E1                                          u5541 173A  
                                        u5621 1449                                          u5701 138D  
                                        u6421 0313                                          u6341 025C  
                                        u4910 1576                                          u4750 1278  
                                        u5710 17B1                                          u4670 166C  
                                        u3950 0E1D                                          u3870 0DB9  
                                        u3790 0D3F                                          u4590 0F9B  
                                        u5550 174B                                          u5630 1462  
                                        u6430 032A                                          u6350 0263  
                                        u4911 1575                                          u4751 1277  
                                        u5711 17B0                                          u4735 16A4  
                                        u4671 166B                                          u3951 0E1C  
                                        u3871 0DB8                                          u3791 0D3E  
                                        u4591 0F9A                                          u4575 0F6D  
                                        u5551 174A                                          u5631 1461  
                                        u6431 0329                                          u6351 0262  
                                        u4920 1585                                          u5720 17BE  
                                        u5800 1508                                          u4680 1672  
                                        u3960 0E23                                          u3880 0DC8  
                                        u5560 1752                                          u5640 1400  
                                        u6440 0334                                          u6360 0269  
                                        u6280 00C4                                          u4921 1584  
                                        u5721 17BD                                          u5801 1506  
                                        u4681 1671                                          u3961 0E22  
                                        u3881 0DC7                                          u5561 1751  
                                        u5641 13FF                                          u6441 0333  
                                        u6361 0268                                          u6281 00C3  
                                        u4930 1598                                          u5730 17C3  
                                        u5810 1509                                          u4690 1677  
                                        u3970 0E32                                          u3890 0DCE  
                                        u5570 1762                                          u5650 1406  
                                        u6450 033F                                          u6370 028F  
                                        u6290 00EF                                          u4931 1597  
                                        u4755 1274                                          u5731 17C2  
                                        u4691 1676                                          u3971 0E31  
                                        u3891 0DCD                                          u4595 0F97  
                                        u5571 1761                                          u5651 1405  
                                        u6507 144F                                          u6451 033E  
                                        u6371 028E                                          u6291 00EE  
                                        u4940 15AB                                          u5740 17D0  
                                        u5820 08CD                                          u5900 15DA  
                                        u3980 0E45                                          u5580 1769  
                                        u5660 1415                                          u6460 034A  
                                        u6380 02A4                                          u4941 15AA  
                                        u5741 17CF                                          u5725 17BA  
                                        u5821 08CC                                          u5901 15D9  
                                        u3981 0E44                                          u5581 1768  
                                        u6517 141A                                          u5661 1414  
                                        u6461 0349                                          u6381 02A3  
                                        _TALA 00E9                                          u4950 15B1  
                                        u5750 17D5                                          u5830 08DA  
                                        u5910 15DF                                          u3990 0E5B  
                                        u5590 1788                                          u5670 142D  
                                        u6470 0355                                          u6390 02AD  
                                        u4951 15B0                                          u6607 086B  
                                        u5751 17D4                                          u5831 08D9  
                                        u5911 15DE                                          u3991 0E5A  
                                        u5591 1787                                          u6527 1776  
                                        u5671 142C                                          u6471 0354  
                                        u6391 02AC                                          u6295 00EB  
                                        u5760 17E2                                          u5840 08DF  
                                        u5920 15EC                                          u4880 12ED  
                                        u5680 1368                                          u6480 0366  
                                        u6617 0873                                          u5761 17E1  
                                        u5745 17CC                                          u5841 08DE  
                                        u5921 15EB                                          u5905 15D6  
                                        u6537 0A50                                          u4881 12EC  
                                        u5681 1367                                          u6481 0365  
                                        u5770 17EA                                          u5850 08EC  
                                        u5930 15F4                                          u4890 1302  
                                        u5690 136E                                          u6627 087F  
                                        u5771 17E9                                          u5851 08EB  
                                        u5835 08D6                                          u5931 15F3  
                                        u6547 16B9                                          u4891 1301  
                                        u5691 136D                                          u5780 10C0  
                                        u5860 08F1                                          u5940 146F  
                                        u6637 0887                                          u6557 0835  
                                        u5765 17DE                                          u5781 10BF  
                                        u5861 08F0                                          u5925 15E8  
                                        u5941 146E                                          u6485 0362  
                                        u5790 110F                                          u5870 08FE  
                                        u5950 1476                                          u6647 08A3  
                                        u6567 0843                                          u5791 110E  
                                        u5871 08FD                                          u5855 08E8  
                                        u5951 1475                                          u5880 0906  
                                        u5960 1488                                          u6657 0B25  
                                        u6577 084B                                          u5881 0905  
                                        u5961 1487                                          u6497 137B  
                                        _NREG 007D                                          u5890 15CD  
                                        u5970 148F                                          u6587 0857  
                                        u5875 08FA                                          u5891 15CC  
                                        u5971 148E                                          u5980 0B30  
                                        u6597 085F                                          u5981 0B2F  
                                        u5990 0B4B                                          u5991 0B4A  
                                        u5995 0B47                                          _PMON 00EA  
                                        _TMR2 028C                                          _WPUA 0F39  
                                        _WPUB 0F44                                          _WPUC 0F4F  
                                        _WPUD 0F5A                                          _WPUE 0F65  
                                 main@notInit 00D8                                          _main 0092  
                                        _temp 006E                                          fsr0h 0005  
                                        fsr1h 0007                                          indf0 0000  
                                        fsr0l 0004                                          indf1 0001  
                                        fsr1l 0006                                          btemp 007E  
         __end_of_INT_DefaultInterruptHandler 0003                   _INT_DefaultInterruptHandler 0002  
                                        start 0052                                cmd_dtl@tempAux 0034  
             __end_of_INT_SetInterruptHandler 1FD9                    ??_TMR1_SetInterruptHandler 0022  
                             __end_of_ReadI2C 11B2                     __size_of_DATAEE_WriteByte 0024  
                      __end_of_update_menuLCD 05A1                                 ?_EUSART_Write 0070  
              __size_of_OSCILLATOR_Initialize 0009                 __end_of_OSCILLATOR_Initialize 1FE2  
                                       _ADACQ 009D                                         _ADCAP 009B  
                                       _ADACT 0099                      __end_of_i2c1_driver_open 2000  
                                       ?_main 0070                                         _ADCLK 0098  
                                       _ADCNT 010C                                         _ADPCH 009E  
                                       _ADREF 009A                               __end_of___awdiv 171E  
                                       _ADPRE 009C                                         _ADRPT 010D  
                                       _T1CLK 0211                               ___awdiv@divisor 0070  
                                       _T1CON 020E                                         _T2CON 028E  
                                       _T2HLT 028F                               __end_of___lwdiv 14DA  
                                       _T2TMR 028C                                         _T2RST 0291  
                                       i1l423 1060                               __end_of___lwmod 13FB  
                                       i1l442 0003                                         i1l371 0041  
                                       i1l436 10A0                                         i1l372 0050  
                                       i1l364 0013                                         i1l373 004A  
                                       i1l367 0026                                         i1l369 0035  
                                       i1l378 0050                                         i1l751 1017  
                                       i1l747 1F91                                         i1l853 1211  
                                       i1l845 1253                                         i1l757 0002  
                                       i1l848 1255                               ___awdiv@counter 0075  
                                       _OSCEN 0891                                         _TMR1H 020D  
                    __size_of_wirteEEPROMinit 00BC                                         _TMR1L 020C  
                                       _TRISA 0011                                         _TRISB 0012  
                                       _TRISC 0013                                         _TRISD 0014  
                                       _TRISE 0015                                         _WPUC3 7A7B  
                                       _WPUC4 7A7C                                         _RXPPS 0ECB  
                             __end_of_cmd_dac 0921                               __end_of_editLum 1430  
                             __end_of_cmd_dtl 160B                               _PWM6_Initialize 1018  
                             __end_of_cmd_mta 111F                               __end_of_cmd_mmp 10D0  
                             __end_of_cmd_trc 0C01                               __end_of_cmd_rtl 1233  
                             __end_of_cmd_tri 0D2A                              __end_of_TMR1_ISR 10A1  
                            __end_of_S1button 16BF                               _DATAEE_ReadByte 1041  
                                       _getch 07FB                               __end_of_dpowers 1840  
                          __size_of_TMR2_Stop 0003                                   ?_TMR2_Start 0070  
                                       _iread 006C                               __end_of_isdigit 1074  
                                       _putch 1F9E                                         main@c 00DE  
                                       main@i 00DA                                         main@n 00DF  
                                       _tsttc 0D2A                       __end_of_TMR1_Initialize 1193  
                                       pclath 000A                                         status 0003  
                                       wtemp0 007E                               __end_of_sprintf 073F  
                      ??_PWM_Output_D4_Enable 0020                               _TMR2_StartTimer 1F84  
                             _TMR1_WriteTimer 1050                               __initialization 0054  
                                __end_of_main 036C                           __size_of_LCDsend2x4 00D4  
                              ??_EUSART_Write 0020                               ?_update_menuLCD 0070  
                     __end_of_TMR2_Initialize 1041                   ?_INTERRUPT_InterruptManager 0070  
              ??_EUSART_SetRxInterruptHandler 0022                                        ??_main 0064  
                             update_menuLCD@l 0055                                  ?_sendMessage 0023  
                   __size_of_sendERRORMessage 001E                            __size_of_Clock_ISR 0092  
            differenceBetweenTimePeriod@start 0020                                     ??_LCDchar 0028  
                                   ??_LCDinit 0028                                     ??_LCDsend 0022  
                                   ??_INT_ISR 0070                                        _ADACCH 0091  
                                      _ADACCL 0090                                        ?_getch 0070  
                                      _ADCON0 0093                                        _ADCON1 0094  
                                      _ADCON2 0095                                        _ADCON3 0096  
                                      _ADERRH 0117                                        _ADERRL 0116  
                                      _ADLTHH 010F                                        _ADLTHL 010E  
                                      _ADRESH 008D                                        _ADRESL 008C  
                                      _ADSTAT 0097                                        _ADUTHH 0111  
                            ___awdiv@dividend 0072                                        _ADUTHL 0110  
                            __end_of_WriteI2C 1665                                        _ANSELA 0F38  
                                      ?_putch 0070                                        _ANSELB 0F43  
                                      _ANSELC 0F4E                                        _ANSELD 0F59  
                                      _ANSELE 0F64                    __end_of_EUSART_is_rx_ready 1F78  
                                      _T1GATE 0210                                        _T1GCON 020F  
                                      ?_tsttc 0070                                        _RC1REG 0119  
                                      _RC1STA 011D                                        _RA6PPS 0F16  
                                      _RC3PPS 0F23                       TMR1_WriteTimer@timerVal 0070  
                                      _RC4PPS 0F24                                        _ODCONA 0F3A  
                                      i1l1450 1FBD                                        _ODCONB 0F45  
                                      _ODCONC 0F50                                        _RC6PPS 0F26  
                                      _ODCOND 0F5B                                        _ODCONE 0F66  
                                      i1l1279 09B2                                        i1l5101 1703  
                                      i1l5111 1719                                        i1l5103 1704  
                                      i1l5105 1709                                        i1l1931 171D  
                                      i1l5107 170F                                        i1l5109 1714  
                                      i1l5071 16BF                                        i1l5081 16CF  
                                      i1l5073 16C0                                        i1l5321 092C  
                                      i1l5091 16E3                                        i1l5083 16D4  
                                      i1l5075 16C4                                        i1l5331 093F  
                                      i1l5323 0930                                        i1l5251 1055  
                                      i1l5501 11F6                                        i1l5069 1FB5  
                                      i1l5093 16E8                                        i1l5085 16D8  
                                      i1l5077 16C9                                        i1l5341 0955  
                                      i1l5333 0940                                        i1l5325 0931  
                                      i1l5261 105E                                        i1l5253 1056  
                                      i1l5511 120D                                        i1l5503 11F8  
                                      i1l5095 16EC                                        i1l5087 16DA  
                                      i1l5079 16CB                                        i1l5343 095D  
                                      i1l5351 0976                                        i1l5335 0946  
                                      i1l5327 0934                                        i1l5319 0921  
                                      i1l5255 1058                                        i1l5505 1202  
                                      i1l5281 1012                                        i1l5097 16F0  
                                      i1l5089 16E0                                        i1l5361 09A5  
                                      i1l5353 0990                                        i1l5345 0965  
                                      i1l5337 0947                                        i1l5329 093B  
                                      i1l5257 105A                                        i1l5249 1050  
                                      i1l5507 1206                                        i1l5099 16FF  
                                      i1l5363 09AF                                        i1l5355 0994  
                                      i1l5347 096B                                        i1l5339 094D  
                                      i1l5259 105C                                        i1l5509 120C  
                                      i1l5365 09B0                                        i1l5357 0996  
                                      i1l5349 0970                                        i1l5279 100B  
                                      i1l5359 09A2                                        i1l5471 108A  
                                      i1l5473 108C                                        i1l5491 1242  
                                      i1l5467 1F8C                                        i1l5475 1094  
                                      i1l5493 1247                                        i1l5469 1F8E  
                                      i1l5477 109B                                        i1l5495 124D  
                                      i1l5487 1233                                        i1l5497 124E  
                                      i1l5489 123A                                        i1l5499 11F1  
                                      _S1_ISR 1FB5                                        i1l5961 001B  
                                      i1l5953 0006                                        i1l5971 003D  
                                      i1l5963 001F                                        i1l5955 000B  
                                      i1l5973 0045                                        i1l5965 002A  
                                      i1l5957 000F                                        i1l5967 002E  
                                      i1l5959 0017                                        i1l5977 004E  
                                      i1l5969 0039                                        _LCDcmd 1FAD  
                                      u500_20 0955                                        u500_21 0954  
                                      u501_20 095D                                        u501_21 095C  
                                      u502_20 0965                                        u502_21 0964  
                                      u503_20 096B                                        u503_21 096A  
                                      u520_20 123A                                        u504_20 0990  
                                      u520_21 1239                                        u504_21 098F  
                                      _INTPPS 0E90                                        u504_25 098C  
                                      u521_20 124D                                        u505_20 09A0  
                                      u521_21 124C                                        u505_21 099D  
                                      u522_20 11F6                                        u522_21 11F5  
                               main@corrupted 00D9                                        u506_24 09A2  
                                      u523_20 120C                                        u507_20 09AF  
                                      u523_21 120B                                        u507_21 09AE  
                                      u620_20 001F                                        u620_21 001E  
                                      _LCDstr 111F                                        u621_20 002A  
                                      u621_21 0029                                        u622_20 002E  
                                      u622_21 002D                                        u519_20 109B  
                                      u623_20 0039                                        u519_21 109A  
                                      u623_21 0038                                        u480_20 16F0  
                                      u624_20 003D                                        u616_20 000B  
                                      u480_21 16EF                                        u624_21 003C  
                                      u616_21 000A                                        u625_20 0045  
                                      u617_20 000F                                        u625_21 0044  
                                      u617_21 000E                                        u481_25 16F1  
                                      u482_20 16FF                                        u626_20 0049  
                                      u618_20 0017                                        u482_21 16FE  
                                      u626_21 0048                                        u618_21 0016  
                                      u482_25 16FB                                        u627_20 004E  
                                      u619_20 001B                                        u627_21 004D  
                                      u619_21 001A                                        u483_25 1705  
                                      u484_20 170F                                        u476_20 16C4  
                                      u484_21 170E                                        u476_21 16C3  
                                      _OSCFRQ 0893                                        u485_20 1714  
                                      u477_20 16CF                                        u485_21 1713  
                                      u477_21 16CE                                        u478_20 16E0  
                                      u486_20 1055                                        u478_21 16DF  
                                      u486_21 1054                                        u487_20 1012  
                                      u487_21 1011                                        u479_25 16E4  
                                      u496_20 092C                                        u496_21 092B  
                                      u497_20 093B                                        u497_21 093A  
                                      u498_20 0946                                        u498_21 0945  
                                      u499_20 094D                                        u499_21 094C  
                                      _PWM6EN 1C77                                        _TX1REG 011A  
                                      _TX1STA 011E                                     ??_ReadI2C 0020  
                            _writeEEPROM_flag 00B4                                        _PWM_on 00B8  
                                 LCDsend2x4@c 0025                              __end_of_editTemp 1465  
        __end_of_TMR1_DefaultInterruptHandler 0004         __size_of_TMR1_DefaultInterruptHandler 0001  
                _TMR1_DefaultInterruptHandler 0003                                  _CCPTMRS1bits 021F  
                            __end_of_commands 1827                                        ___wmul 11D1  
                                   ??___awdiv 0074                             __end_of_TMR2_Stop 1F84  
                                      _cmd_aa 1465                                        _cmd_ir 130D  
                                      _cmd_ra 14DA                                        _cmd_rc 129D  
                                      _cmd_sc 178B                                        _cmd_rp 12C2  
                                      _flagNr 00B1                                     ??___lwdiv 0024  
                                   ??___lwmod 002C                           __size_of_TMR2_Start 0003  
                         _EUSART_Transmit_ISR 1233                                        _memset 11B2  
                     __end_of_PWM6_Initialize 1025                              ___awdiv@quotient 0077  
                                   ??_cmd_dac 0032                                     ??_editLum 0063  
                                   ??_cmd_dtl 0032                                     ??_cmd_mta 0032  
                                   ??_cmd_mmp 0032                                        _iwrite 006B  
                                   ??_cmd_trc 0032                                     ??_cmd_rtl 0032  
                                   ??_cmd_tri 0032                  __size_of_monitoring_TEMP_LUM 0186  
                               ?_INT_CallBack 0070                       __end_of_DATAEE_ReadByte 1050  
                             _ADCC_Initialize 10A1                                _PMD_Initialize 1FA5  
                                __pdataCOMMON 007D                                     ??_isdigit 0020  
                           sendOKMessage@bufw 002B                            update_menuLCD@diff 0058  
           __size_of_ADCC_GetSingleConversion 0016              __size_of_INT_SetInterruptHandler 0009  
                   ?_ADCC_GetSingleConversion 0020                       __end_of_TMR2_StartTimer 1F88  
     INT_SetInterruptHandler@InterruptHandler 0020      TMR1_SetInterruptHandler@InterruptHandler 0020  
                                   ??_sprintf 0036                       __end_of_TMR1_WriteTimer 1061  
                           ??_wirteEEPROMinit 002A                       ??_PWM_Output_D4_Disable 0020  
                        ?_EUSART_Transmit_ISR 0070                              ?_TMR1_Initialize 0070  
                        __size_of_EUSART_Read 0026                             _SYSTEM_Initialize 113A  
                     __end_of__initialization 008E                                cmd_trc@address 0042  
                          ?_SYSTEM_Initialize 0070                             __end_of_Clock_ISR 09B3  
                              cmd_trc@buffEOM 0044          __end_of_EUSART_SetTxInterruptHandler 1FD0  
       __size_of_EUSART_SetTxInterruptHandler 0009                  _EUSART_SetTxInterruptHandler 1FC7  
                              __pcstackCOMMON 0070                                  __pidataBANK1 1001  
                         ??_SYSTEM_Initialize 0023                                     ?_TMR1_ISR 0070  
               ?_TMR1_DefaultInterruptHandler 0070                                 __end_of_getch 07FF  
                                   ?_S1button 0070                              _DATAEE_WriteByte 1279  
                               __end_of_putch 1FA5                            __size_of_editClock 006D  
             differenceBetweenTimePeriod@diff 0026                                 __end_of_tsttc 0E7A  
                            ?_TMR2_Initialize 0070                                ??_INT_CallBack 0070  
             differenceBetweenTimePeriod@stop 0023                        __end_of_PMD_Initialize 1FAD  
                              cmd_tri@buffEOM 0040                   __size_of_EXT_INT_Initialize 000E  
                                ??_LCDsend2x4 0023                                       ??_getch 0022  
                   __end_of_SYSTEM_Initialize 1156                                    _checkFlags 09B3  
                       ??_EUSART_Transmit_ISR 0070                                  sprintf@width 003F  
                            update_menuLCD@tt 0051                                       ??_putch 0022  
                                     ??_tsttc 0022                                    __pbssBANK0 0065  
                                  __pbssBANK1 00A0                                    __pbssBANK2 0120  
                                  __pbssBANK3 01A0                                    __pbssBANK4 0220  
                                     ?_S1_ISR 0070                                       ?_LCDcmd 0070  
                        __end_of_EUSART_Write 0831                                       ?_LCDstr 0029  
                                _flagS1pushed 00B7                                       LCDcmd@c 0028  
                 __size_of_EUSART_Receive_ISR 0021                                       LCDstr@c 002E  
                                     LCDstr@p 0029                                    __pmaintext 0092  
               ?_EUSART_SetTxInterruptHandler 0020              _EUSART_TxDefaultInterruptHandler 013B  
                                     ?___wmul 0020                                    ??_TMR1_ISR 007B  
                                     ?_cmd_aa 002F                       __end_of_ADCC_Initialize 10B8  
                  __end_of_PWM6_LoadDutyValue 10E9                                       ?_cmd_ir 002F  
                                     ?_cmd_ra 002F                                       ?_cmd_rc 002F  
                                     ?_cmd_sc 002F                                       ?_cmd_rp 002F  
                                  ??_S1button 0020                                    __pintentry 0004  
                                     _ADFLTRH 0115                                       _ADFLTRL 0114  
                                     ?_memset 0020                            __end_of_LCDsend2x4 0B28  
                                     _ADPREVH 008F                                       _ADPREVL 008E  
                                   ?_WriteI2C 0070                              ?_PWM6_Initialize 0070  
                                     _ADSTPTH 0113                                       _ADSTPTL 0112  
                             ?_PMD_Initialize 0070                              _sendERRORMessage 1156  
                            ?_DATAEE_ReadByte 0026                             ?_i2c1_driver_open 0070  
                               _eusartRxCount 00BC                                       _LCDchar 1FEB  
                                     _LCDinit 0831                                       _SP1BRGH 011C  
                                     _SP1BRGL 011B                                       _LCDsend 155F  
                        __size_of_sendMessage 0023                            ??_i2c1_driver_open 0020  
                                     _INT_ISR 1F8C                                       _OSCCON1 088D  
                                     _OSCCON3 088F                                     ?_editTemp 0070  
                      __size_of_sendOKMessage 001B                                checkFlags@buff 005C  
                                     _NVMADRH 081B                                       _NVMADRL 081A  
                                     _NVMDATH 081D                                       _OSCTUNE 0892  
                                     _NVMDATL 081C                                       _NVMCON2 081F  
                                     _PWM6DCH 038D                                       _PWM6DCL 038C  
                                     _PWM6CON 038E                                       _SSP1ADD 018D  
                                     _SLRCONA 0F3B                                       _SLRCONB 0F46  
                                     _SLRCONC 0F51                                       _SLRCOND 0F5C  
                                     _SLRCONE 0F67                                       _SSP1BUF 018C  
                                     _SSP1MSK 018E                                  ??_TMR2_Start 0020  
                     __size_of_TMR2_StopTimer 0004                              ?_TMR2_StartTimer 0070  
                            ?_TMR1_WriteTimer 0070                                  LCDsend2x4@hc 0026  
                                LCDsend2x4@lc 0027                             __end_of_editClock 178B  
                             __size_of_S1_ISR 0009                               __size_of_LCDcmd 0008  
                        DATAEE_WriteByte@bAdd 0026                            _i2c1_driver_i2cISR 00AC  
                             __size_of_LCDstr 001B                                       _ReadI2C 1193  
                       cmd_tri@maxReadingsAux 0041                              ??_update_menuLCD 0043  
                                     ___awdiv 16BF                               __size_of___wmul 0020  
                                     ___lwdiv 149D                               __size_of_cmd_aa 0038  
                                     ___lwmod 13C6                               __size_of_cmd_ir 0029  
                             __size_of_cmd_ra 0042                               __size_of_cmd_rc 0025  
                             __size_of_cmd_sc 0075                               __size_of_cmd_rp 0025  
                          __end_of_TMR2_Start 1F7E                                    ??_WriteI2C 0020  
                                     _cmd_dac 08A7                               __size_of_memset 001F  
                                     _editLum 13FB                                       _cmd_dtl 15B2  
                                     _cmd_mta 1104                                       _cmd_mmp 10B8  
                                     _cmd_trc 0B28                                       _cmd_rtl 1212  
                                     _cmd_tri 0C01                                       __ptext1 1363  
                                     __ptext2 11B2                                       __ptext3 1FF4  
                                     __ptext4 07FB                                       __ptext5 12E7  
                                     __ptext6 1430                                       __ptext7 13FB  
                                     __ptext8 171E                                       __ptext9 09B3  
              ??_TMR1_DefaultInterruptHandler 0070                                     _T1CONbits 020E  
                               cmd_dac@buffer 0031                                       _dpowers 1836  
                       _OSCILLATOR_Initialize 1FD9                                     _T2CONbits 028E  
                                     _isdigit 1061                                    cmd_dac@num 002F  
           __size_of_TMR1_SetInterruptHandler 0009                                       cmd_sc@h 0034  
                                     cmd_sc@m 0036                                       cmd_sc@s 0038  
                    ??_PIN_MANAGER_Initialize 0020                     ?_TMR1_SetInterruptHandler 0020  
                                   _T2HLTbits 028F                       _INT_SetInterruptHandler 1FD0  
                                  ??_editTemp 0063                                    cmd_ir@buff 0033  
                                  cmd_ra@buff 0033                                    cmd_rc@buff 0033  
                  __size_of_SYSTEM_Initialize 001C                                   ?_checkFlags 0070  
                                     _sprintf 05A1                                       clrloop0 1F93  
                                  cmd_dtl@num 002F                          end_of_initialization 008E  
                                   _T2RSTbits 0291                                    cmd_rp@buff 0033  
                                  cmd_mta@num 002F                                    cmd_mmp@num 002F  
                                     init_ram 1F98                                       memset@c 0020  
                                     memset@n 0022                                       memset@p 0025  
                         _monitoring_TEMP_LUM 0E7A                                       initloop 1F99  
                        __end_of_INT_CallBack 1018                                    cmd_trc@num 002F  
                                  cmd_rtl@num 002F                                    cmd_tri@num 002F  
                           _EUSART_Initialize 1336                 __size_of_PWM_Output_D4_Enable 0003  
                               _sendOKMessage 10E9                            ?_EUSART_Initialize 0070  
                          _EUSART_is_rx_ready 1F75                  ?_differenceBetweenTimePeriod 0020  
                                  main@F13053 0120                              ?_ADCC_Initialize 0070  
            __end_of_ADCC_GetSingleConversion 108A                           ??_EUSART_Initialize 0022  
              ??_EUSART_SetTxInterruptHandler 0022                          ?_monitoring_TEMP_LUM 0070  
                         ?_EUSART_is_rx_ready 0070                                     _PORTCbits 000E  
                                   _TMR2_Stop 1F81                               _wirteEEPROMinit 073F  
                                   _TRISCbits 0013                         __size_of_EUSART_Write 0030  
                               ?_toggleAlarms 0070                                    main@i_2536 00DC  
                    __end_of_DATAEE_WriteByte 129D                                 _alarmPWMStart 00E1  
              __size_of_PWM_Output_D4_Disable 0003                     __end_of_EUSART_Initialize 1363  
                        ??_EUSART_is_rx_ready 0020                 __end_of_PWM_Output_D4_Disable 1F81  
                              __end_of_S1_ISR 1FBE                                __end_of_LCDcmd 1FB5  
                              __end_of_LCDstr 113A                               cmd_trc@buffData 0038  
                               cmd_dtl@buffer 0031                                LCDsend2x4@mode 0022  
                             cmd_trc@buffInit 003D                                 cmd_dtl@lumAux 0036  
                              ?_sendOKMessage 0070                        _sentMessageBufHalfFull 00B0  
                                   _Clock_ISR 0921                              _monitor_TEMP_LUM 00B6  
                         __size_of_checkFlags 00A1                                __end_of___wmul 11F1  
                              __end_of_cmd_aa 149D                                __end_of_cmd_ir 1336  
                              __end_of_cmd_ra 151C                                __end_of_cmd_rc 12C2  
                              __end_of_cmd_sc 1800                                __end_of_cmd_rp 12E7  
                               __pidataCOMMON 07FF                         ??_monitoring_TEMP_LUM 002A  
                                _EUSART_Write 0801                             __size_of_TMR1_ISR 0017  
                           __size_of_S1button 005A                                    ?_TMR2_Stop 0070  
                      ?_OSCILLATOR_Initialize 0070                                __end_of_memset 11D1  
                   ??_INT_SetInterruptHandler 0022                               main@checkSumAux 00D7  
                         start_initialization 0054                                ??_toggleAlarms 0063  
             __size_of_PIN_MANAGER_Initialize 0043                                _TMR2_StopTimer 1F88  
                               ??_EUSART_Read 0020  EUSART_SetRxInterruptHandler@interruptHandler 0020  
EUSART_SetTxInterruptHandler@interruptHandler 0020                               cmd_tri@buffData 0037  
                            WriteI2C@data_out 0021                               cmd_tri@buffInit 003C  
                                 putch@txData 0022                                 cmd_mta@buffer 0031  
                               cmd_mmp@buffer 0031                                      ??_S1_ISR 0070  
                                    ??_LCDcmd 0028                                      ??_LCDstr 002B  
                    __end_of_sendERRORMessage 1174                             _counterMonitorAux 00B5  
                         DATAEE_ReadByte@bAdd 0026                  ?_INT_DefaultInterruptHandler 0070  
                    __size_of_TMR1_Initialize 001F                              ??_PMD_Initialize 0020  
                                  ?_Clock_ISR 0070                       __end_of_wirteEEPROMinit 07FB  
                                    ??___wmul 0024                                      ??_cmd_aa 0032  
                                    ??_cmd_ir 0032                                      ??_cmd_ra 0032  
                                    ??_cmd_rc 0032                                      ??_cmd_sc 0032  
                                    ??_cmd_rp 0032                                   __pdataBANK1 00E1  
                                    ??_memset 0024                              sendOKMessage@cmd 002A  
                  __end_of_EXT_INT_Initialize 1033                             _editingClockAlarm 007B  
                           update_menuLCD@str 0049                             __size_of_WriteI2C 005A  
                    _ADCC_GetSingleConversion 1074                   __end_of_EUSART_Transmit_ISR 1256  
                      __end_of_TMR2_StopTimer 1F8C                                      ?_LCDchar 0070  
                                 __pbssCOMMON 007B                                      ?_LCDinit 0070  
                                    ?_LCDsend 0070                                     ___latbits 0002  
                                    ?_INT_ISR 0070                                 __pcstackBANK0 0020  
                               cmd_trc@buffer 0031                                 __pcstackBANK1 00C1  
                          _PWM6_LoadDutyValue 10D0                      __size_of_TMR2_Initialize 000E  
                                _isdigit$2994 0020                         __size_of_INT_CallBack 000D  
        __size_of_differenceBetweenTimePeriod 0035                                      LCDchar@c 0028  
                           __size_of_editTemp 0035                                 cmd_rtl@buffer 0031  
                               cmd_tri@buffer 0031                    __end_of_EUSART_Receive_ISR 1212  
                                    LCDsend@c 0023                           ?_PWM6_LoadDutyValue 0020  
                  __size_of_EUSART_Initialize 002D                                   sprintf@flag 003E  
                   __size_of_i2c1_driver_open 000C                                   sprintf@prec 003B  
            _EUSART_RxDefaultInterruptHandler 0139                               ??_sendOKMessage 0029  
                         __end_of_EUSART_Read 130D                                      ?_ReadI2C 0070  
                                   __pnvBANK1 00EB                                     __pnvBANK2 0137  
                                 _bufHalfFull 00B2                                     _editClock 171E  
                                   _main$3500 00D5                              ___lwdiv@dividend 0022  
                      _PIN_MANAGER_Initialize 151C                 ??_INT_DefaultInterruptHandler 0070  
                        EUSART_Read@readValue 0021              __end_of_TMR1_SetInterruptHandler 1FEB  
             ADCC_GetSingleConversion@channel 0023                                      ?___awdiv 0070  
                                   _dimingLed 00AA                                      ?___lwdiv 0020  
                                    ?___lwmod 0028                   _i2c1_driver_busCollisionISR 00AE  
                                _eusartRxHead 00BE                                  _eusartTxHead 00C0  
                                _eusartRxTail 00BD                                  _eusartTxTail 00BF  
                        ??_PWM6_LoadDutyValue 0022                                      ?_cmd_dac 002F  
                                    ?_editLum 0070                                      ?_cmd_dtl 002F  
                                    ?_cmd_mta 002F                                      ?_cmd_mmp 002F  
                                cmd_aa@buffer 0031                  ??_INTERRUPT_InterruptManager 007B  
                                    ?_cmd_trc 002F                                      ?_cmd_rtl 002F  
                                    ?_cmd_tri 002F                                 ??_sendMessage 0026  
                                 ??_TMR2_Stop 0020                                  sendMessage@n 0027  
                     _eusartTxBufferRemaining 00EF                                  _INT_CallBack 100B  
                                    _BAUD1CON 011F                                      ?_isdigit 0070  
                             ?_TMR2_StopTimer 0070                      __size_of_PWM6_Initialize 000D  
                            ___lwdiv@quotient 0025                                  ??_checkFlags 005B  
                              __size_of_getch 0004                                      ?_sprintf 002E  
                                    _T2CLKCON 0290                      __size_of_DATAEE_ReadByte 000F  
                        cmd_tri@startingIndex 0046                                __size_of_putch 0007  
                                   cmd_aa@num 002F                                __size_of_tsttc 0150  
                              _eusartRxBuffer 0220                                _eusartTxBuffer 01A0  
                              ___wmul@product 0024                                     cmd_ir@num 002F  
                                   cmd_ra@num 002F                                      _LATAbits 0016  
                                   cmd_rc@num 002F                                     cmd_sc@num 002F  
                                   clear_ram0 1F92                                     cmd_rp@num 002F  
                                    _PIE0bits 0716                                      _PIE3bits 0719  
                                    _PIE4bits 071A                      __size_of_TMR2_StartTimer 0004  
                                  ?_editClock 0070                                     _tempAlarm 00A7  
                                    _S1_Value 00BB                      __size_of_TMR1_WriteTimer 0011  
         __size_of_INTERRUPT_InterruptManager 004E                                      _PIR0bits 070C  
                                    _PIR3bits 070F                                      _PIR4bits 0710  
                                 ??_Clock_ISR 0079                          __end_of_toggleAlarms 1391  
                            ?_wirteEEPROMinit 0070                                      _SSP1CON1 0190  
                                    _SSP1CON2 0191                                      _TMR1_ISR 108A  
                                    _S1button 1665                                      _SSP1STAT 018F  
                                   _updateLCD 00E8                            __end_of_checkFlags 0A54  
                           ??_TMR1_Initialize 0022                                    _ADCON0bits 0093  
                                  _ADCON1bits 0094                                sendMessage@num 0023  
                                  _ADCON2bits 0095                                    _ADCON3bits 0096  
                                cmd_ir@buffer 0031                             ___wmul@multiplier 0020  
                                cmd_ra@buffer 0031                  __end_of_PWM_Output_D4_Enable 1F7B  
                                cmd_rc@buffer 0031          __size_of_INT_DefaultInterruptHandler 0001  
                                cmd_sc@buffer 0031                              __size_of_LCDchar 0009  
                       DATAEE_WriteByte@bData 0028                              __size_of_LCDinit 0076  
                            __size_of_LCDsend 0053                              __size_of_INT_ISR 0006  
                         __end_of_sendMessage 1279                                   _EUSART_Read 12E7  
                                 _maxReadings 00B3                             ?_DATAEE_WriteByte 0026  
                           ??_TMR2_Initialize 0020                                  cmd_rp@buffer 0031  
                          ??_DATAEE_WriteByte 0029                              __size_of_ReadI2C 001F  
                                  _ADSTATbits 0097                       ??_OSCILLATOR_Initialize 0020  
                            __size_of___awdiv 005F                              __size_of___lwdiv 003D  
                                cmd_trc@nRegs 0047                              __size_of___lwmod 0035  
                                    _WriteI2C 160B                      _TMR1_SetInterruptHandler 1FE2  
                            __size_of_cmd_dac 007A                              __size_of_editLum 0035  
                            __size_of_cmd_dtl 0059                       __size_of_update_menuLCD 0235  
                            __size_of_cmd_mta 001B                              __size_of_cmd_mmp 0018  
                            __size_of_cmd_trc 00D9                              __size_of_cmd_rtl 0021  
                            __size_of_cmd_tri 0129                                  cmd_tri@index 0045  
                       _TMR1_InterruptHandler 00EB                                    sprintf@val 003C  
                                    _clkAlarm 00A0                      __size_of_ADCC_Initialize 0017  
                            __size_of_isdigit 0013                                      _editTemp 1430  
                             ___lwdiv@divisor 0020                               ___lwdiv@counter 0027  
                                    __ptext10 073F                                      __ptext11 036C  
                                    __ptext20 10D0                                      __ptext12 05A1  
                                    __ptext21 111F                                      __ptext13 1061  
                                  _T1GCONbits 020F                                      __ptext30 1F7B  
                                    __ptext22 1FEB                                      __ptext14 13C6  
                                    __ptext31 1665                                      __ptext23 1FAD  
                                    __ptext15 149D                                      __ptext40 10B8  
                                    __ptext32 1F78                                      __ptext24 0E7A  
                                    __ptext16 1391                                      __ptext41 12C2  
                                    __ptext33 0B28                                      __ptext25 0D2A  
                                    __ptext17 1F88                                      __ptext50 1256  
                                    __ptext42 1212                                      __ptext34 130D  
                                    __ptext26 1193                                      __ptext18 1F81  
                                    __ptext51 1F9E                                      __ptext43 178B  
                                    __ptext35 1465                                      __ptext27 1279  
                                    __ptext19 1F7E                                      __ptext60 1FD9  
                                    __ptext52 0801                                      __ptext44 129D  
                                    __ptext36 15B2                                      __ptext28 1074  
                                    __ptext61 1025                                      __ptext53 113A  
                                    __ptext45 0C01                                      __ptext37 08A7  
                                    __ptext29 1F84                                      __ptext70 160B  
                                    __ptext62 1FD0                                      __ptext54 1033  
                                    __ptext46 11D1                                      __ptext38 14DA  
                                    __ptext71 1F75                                      __ptext63 1336  
                                    __ptext55 1174                                      __ptext47 1041  
                                    __ptext39 1104                                      __ptext80 0002  
                                    __ptext64 1FC7                                      __ptext56 1FE2  
                                    __ptext48 10E9                                      __ptext81 1FB5  
                                    __ptext73 108A                                      __ptext65 1FBE  
                                    __ptext57 1018                                      __ptext49 1156  
                                    __ptext82 1233                                      __ptext74 1050  
                                    __ptext66 10A1                                      __ptext58 1FA5  
                                    __ptext83 11F1                                      __ptext75 0921  
                                    __ptext67 0831                                      __ptext59 151C  
                                    __ptext76 0003                                      __ptext68 0A54  
                                    __ptext77 16BF                                      __ptext69 155F  
                                    __ptext78 1F8C                                      __ptext79 100B  
                                _SSP1CON1bits 0190                                  _SSP1CON2bits 0191  
                                    _commands 1800                              __size_of_sprintf 019E  
                 DATAEE_WriteByte@GIEBitValue 0029                              _i2c1_driver_open 1FF4  
                                    _modeFlag 0068                             ??_PWM6_Initialize 0020  
                 __size_of_EUSART_is_rx_ready 0003                                 __size_of_main 02DA  
                                    cmd_dac@h 0034                                      cmd_dac@m 0036  
                                    _lumAlarm 00A4                                      cmd_dac@s 0038  
                           ?_sendERRORMessage 0070                             ??_DATAEE_ReadByte 0028  
                                    _lumLevel 006D                         _PWM_Output_D4_Disable 1F7E  
                                 ??_editClock 0063                                      cmd_trc@i 0040  
                                    cmd_trc@j 0049                                      cmd_trc@n 0045  
                                    cmd_tri@i 0043                                      cmd_tri@j 0049  
                                    cmd_tri@n 0048                              _editingTempAlarm 00BA  
                                  _RC1STAbits 011D                            ??_sendERRORMessage 0029  
                 __end_of_monitoring_TEMP_LUM 1000                                      _prevTemp 00E6  
                                  tsttc@value 0023                    ??_ADCC_GetSingleConversion 0023  
                                    int$flags 007E                             ??_TMR2_StartTimer 0020  
          __end_of_INTERRUPT_InterruptManager 0052                    _INTERRUPT_InterruptManager 0004  
                                    main@buff 00C1                                  _SSP1STATbits 018F  
                           ??_TMR1_WriteTimer 0072                                   _sendMessage 1256  
                        update_menuLCD@F12904 0134                                    _INTCONbits 000B  
                                 _NVMCON1bits 081E                                  _prevLumLevel 00E4  
                        _INT_InterruptHandler 0137                                      isdigit@c 0021  
                                    memset@p1 0026                                    _LCDsend2x4 0A54  
                          _EXT_INT_Initialize 1025                                   cmd_rtl@buff 0033  
                                    intlevel1 0000                                     sprintf@ap 003A  
                                   sprintf@sp 0042                              ___lwmod@dividend 002A  
                     ?_PIN_MANAGER_Initialize 0070                          sendERRORMessage@bufw 002B  
                       __size_of_toggleAlarms 002E                           ?_EXT_INT_Initialize 0070  
                             _editingLumAlarm 00B9          __end_of_EUSART_SetRxInterruptHandler 1FC7  
       __size_of_EUSART_SetRxInterruptHandler 0009                  _EUSART_SetRxInterruptHandler 1FBE  
                        _PWM_Output_D4_Enable 1F78           __end_of_differenceBetweenTimePeriod 13C6  
                 _differenceBetweenTimePeriod 1391                            _EUSART_Receive_ISR 11F1  
                    ?_INT_SetInterruptHandler 0020                              ??_TMR2_StopTimer 0020  
                               __pstringtext1 1800                                 __pstringtext2 1836  
                               __pstringtext3 1827                                 __pstringtext4 1840  
                               __pstringtext5 1847                                 __pstringtext6 184C  
                               __pstringtext7 0000                          ??_EXT_INT_Initialize 0022  
               ??_differenceBetweenTimePeriod 0027                                      sprintf@c 0041  
                                    sprintf@f 002E                           ?_EUSART_Receive_ISR 0070  
                                  _SSP1DATPPS 0EC6                                    _SSP1CLKPPS 0EC5  
                             ___lwmod@divisor 0028                           sendERRORMessage@cmd 002A  
                             ___lwmod@counter 002D                   PWM6_LoadDutyValue@dutyValue 0020  
                                  _TX1STAbits 011E                                  _toggleAlarms 1363  
                                  _TMR2_Start 1F7B                            EUSART_Write@txData 0021  
                __size_of_EUSART_Transmit_ISR 0023                __end_of_PIN_MANAGER_Initialize 155F  
                           ??_ADCC_Initialize 0020                        ?_PWM_Output_D4_Disable 0070  
                        ??_EUSART_Receive_ISR 0070                         ?_PWM_Output_D4_Enable 0070  
                             _TMR1_Initialize 1174                         __end_of_sendOKMessage 1104  
