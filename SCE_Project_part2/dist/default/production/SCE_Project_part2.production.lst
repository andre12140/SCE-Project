

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Dec 15 12:23:25 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F18875
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    24                           	psect	inittext,global,class=CODE,delta=2
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    44                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	text74,local,class=CODE,merge=1,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	psect	text81,local,class=CODE,merge=1,delta=2
   112                           	psect	text82,local,class=CODE,merge=1,delta=2
   113                           	psect	text83,local,class=CODE,merge=1,delta=2
   114                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   115                           	dabs	1,0x7E,2
   116  0000                     
   117                           ; Version 2.30
   118                           ; Generated 15/09/2020 GMT
   119                           ; 
   120                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   121                           ; All rights reserved.
   122                           ; 
   123                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   124                           ; 
   125                           ; Redistribution and use in source and binary forms, with or without modification, are
   126                           ; permitted provided that the following conditions are met:
   127                           ; 
   128                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   129                           ;        conditions and the following disclaimer.
   130                           ; 
   131                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   132                           ;        of conditions and the following disclaimer in the documentation and/or other
   133                           ;        materials provided with the distribution. Publication is not required when
   134                           ;        this file is used in an embedded application.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC16F18875 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000F                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001C                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  008C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0110                     	;# 
   212  0110                     	;# 
   213  0111                     	;# 
   214  0112                     	;# 
   215  0112                     	;# 
   216  0113                     	;# 
   217  0114                     	;# 
   218  0114                     	;# 
   219  0115                     	;# 
   220  0116                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  0119                     	;# 
   224  0119                     	;# 
   225  0119                     	;# 
   226  011A                     	;# 
   227  011A                     	;# 
   228  011A                     	;# 
   229  011B                     	;# 
   230  011B                     	;# 
   231  011B                     	;# 
   232  011B                     	;# 
   233  011B                     	;# 
   234  011C                     	;# 
   235  011C                     	;# 
   236  011C                     	;# 
   237  011D                     	;# 
   238  011D                     	;# 
   239  011D                     	;# 
   240  011E                     	;# 
   241  011E                     	;# 
   242  011E                     	;# 
   243  011F                     	;# 
   244  011F                     	;# 
   245  011F                     	;# 
   246  011F                     	;# 
   247  011F                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250  018E                     	;# 
   251  018F                     	;# 
   252  0190                     	;# 
   253  0191                     	;# 
   254  0192                     	;# 
   255  0196                     	;# 
   256  0197                     	;# 
   257  0198                     	;# 
   258  0199                     	;# 
   259  019A                     	;# 
   260  019B                     	;# 
   261  019C                     	;# 
   262  020C                     	;# 
   263  020C                     	;# 
   264  020D                     	;# 
   265  020E                     	;# 
   266  020F                     	;# 
   267  020F                     	;# 
   268  0210                     	;# 
   269  0210                     	;# 
   270  0211                     	;# 
   271  0211                     	;# 
   272  0212                     	;# 
   273  0212                     	;# 
   274  0213                     	;# 
   275  0214                     	;# 
   276  0215                     	;# 
   277  0215                     	;# 
   278  0216                     	;# 
   279  0216                     	;# 
   280  0217                     	;# 
   281  0217                     	;# 
   282  0218                     	;# 
   283  0218                     	;# 
   284  0219                     	;# 
   285  021A                     	;# 
   286  021B                     	;# 
   287  021B                     	;# 
   288  021C                     	;# 
   289  021C                     	;# 
   290  021D                     	;# 
   291  021D                     	;# 
   292  021E                     	;# 
   293  021F                     	;# 
   294  028C                     	;# 
   295  028C                     	;# 
   296  028D                     	;# 
   297  028D                     	;# 
   298  028E                     	;# 
   299  028F                     	;# 
   300  0290                     	;# 
   301  0290                     	;# 
   302  0291                     	;# 
   303  0292                     	;# 
   304  0292                     	;# 
   305  0293                     	;# 
   306  0293                     	;# 
   307  0294                     	;# 
   308  0295                     	;# 
   309  0296                     	;# 
   310  0296                     	;# 
   311  0297                     	;# 
   312  0298                     	;# 
   313  0298                     	;# 
   314  0299                     	;# 
   315  0299                     	;# 
   316  029A                     	;# 
   317  029B                     	;# 
   318  029C                     	;# 
   319  029C                     	;# 
   320  029D                     	;# 
   321  030C                     	;# 
   322  030C                     	;# 
   323  030D                     	;# 
   324  030E                     	;# 
   325  030F                     	;# 
   326  0310                     	;# 
   327  0310                     	;# 
   328  0311                     	;# 
   329  0312                     	;# 
   330  0313                     	;# 
   331  0314                     	;# 
   332  0314                     	;# 
   333  0315                     	;# 
   334  0316                     	;# 
   335  0317                     	;# 
   336  0318                     	;# 
   337  0318                     	;# 
   338  0319                     	;# 
   339  031A                     	;# 
   340  031B                     	;# 
   341  031C                     	;# 
   342  031C                     	;# 
   343  031D                     	;# 
   344  031E                     	;# 
   345  031F                     	;# 
   346  038C                     	;# 
   347  038C                     	;# 
   348  038D                     	;# 
   349  038E                     	;# 
   350  0390                     	;# 
   351  0390                     	;# 
   352  0391                     	;# 
   353  0392                     	;# 
   354  040C                     	;# 
   355  040D                     	;# 
   356  040E                     	;# 
   357  040F                     	;# 
   358  0410                     	;# 
   359  0411                     	;# 
   360  0416                     	;# 
   361  0416                     	;# 
   362  0417                     	;# 
   363  0418                     	;# 
   364  0418                     	;# 
   365  0419                     	;# 
   366  041A                     	;# 
   367  041A                     	;# 
   368  041B                     	;# 
   369  041C                     	;# 
   370  041C                     	;# 
   371  041D                     	;# 
   372  041E                     	;# 
   373  041F                     	;# 
   374  048C                     	;# 
   375  048C                     	;# 
   376  048D                     	;# 
   377  048E                     	;# 
   378  048F                     	;# 
   379  048F                     	;# 
   380  0490                     	;# 
   381  0491                     	;# 
   382  0492                     	;# 
   383  0492                     	;# 
   384  0493                     	;# 
   385  0494                     	;# 
   386  0495                     	;# 
   387  0495                     	;# 
   388  0496                     	;# 
   389  0497                     	;# 
   390  0498                     	;# 
   391  0499                     	;# 
   392  049A                     	;# 
   393  049B                     	;# 
   394  049C                     	;# 
   395  049D                     	;# 
   396  050C                     	;# 
   397  050C                     	;# 
   398  050D                     	;# 
   399  050E                     	;# 
   400  050F                     	;# 
   401  050F                     	;# 
   402  0510                     	;# 
   403  0511                     	;# 
   404  0512                     	;# 
   405  0512                     	;# 
   406  0513                     	;# 
   407  0514                     	;# 
   408  0515                     	;# 
   409  0515                     	;# 
   410  0516                     	;# 
   411  0517                     	;# 
   412  0518                     	;# 
   413  0519                     	;# 
   414  051A                     	;# 
   415  051B                     	;# 
   416  051C                     	;# 
   417  051D                     	;# 
   418  058C                     	;# 
   419  058C                     	;# 
   420  058D                     	;# 
   421  058E                     	;# 
   422  058F                     	;# 
   423  058F                     	;# 
   424  0590                     	;# 
   425  0591                     	;# 
   426  0592                     	;# 
   427  0593                     	;# 
   428  060C                     	;# 
   429  060D                     	;# 
   430  060E                     	;# 
   431  060F                     	;# 
   432  0610                     	;# 
   433  0611                     	;# 
   434  0612                     	;# 
   435  0613                     	;# 
   436  0614                     	;# 
   437  0616                     	;# 
   438  0617                     	;# 
   439  0618                     	;# 
   440  0619                     	;# 
   441  061A                     	;# 
   442  061B                     	;# 
   443  061C                     	;# 
   444  061D                     	;# 
   445  061E                     	;# 
   446  068C                     	;# 
   447  068D                     	;# 
   448  068E                     	;# 
   449  068F                     	;# 
   450  0690                     	;# 
   451  0691                     	;# 
   452  0692                     	;# 
   453  0693                     	;# 
   454  0694                     	;# 
   455  070C                     	;# 
   456  070D                     	;# 
   457  070E                     	;# 
   458  070F                     	;# 
   459  0710                     	;# 
   460  0711                     	;# 
   461  0712                     	;# 
   462  0713                     	;# 
   463  0714                     	;# 
   464  0716                     	;# 
   465  0717                     	;# 
   466  0718                     	;# 
   467  0719                     	;# 
   468  071A                     	;# 
   469  071B                     	;# 
   470  071C                     	;# 
   471  071D                     	;# 
   472  071E                     	;# 
   473  0796                     	;# 
   474  0797                     	;# 
   475  0798                     	;# 
   476  0799                     	;# 
   477  079A                     	;# 
   478  079B                     	;# 
   479  080C                     	;# 
   480  080D                     	;# 
   481  080E                     	;# 
   482  080F                     	;# 
   483  0810                     	;# 
   484  0811                     	;# 
   485  0812                     	;# 
   486  0813                     	;# 
   487  0814                     	;# 
   488  081A                     	;# 
   489  081B                     	;# 
   490  081C                     	;# 
   491  081D                     	;# 
   492  081E                     	;# 
   493  081F                     	;# 
   494  088C                     	;# 
   495  088D                     	;# 
   496  088E                     	;# 
   497  088F                     	;# 
   498  0890                     	;# 
   499  0891                     	;# 
   500  0892                     	;# 
   501  0893                     	;# 
   502  0895                     	;# 
   503  0896                     	;# 
   504  0897                     	;# 
   505  0898                     	;# 
   506  0899                     	;# 
   507  089A                     	;# 
   508  089B                     	;# 
   509  090C                     	;# 
   510  090E                     	;# 
   511  090F                     	;# 
   512  091F                     	;# 
   513  091F                     	;# 
   514  098F                     	;# 
   515  098F                     	;# 
   516  0990                     	;# 
   517  0991                     	;# 
   518  0992                     	;# 
   519  0993                     	;# 
   520  0994                     	;# 
   521  0995                     	;# 
   522  0996                     	;# 
   523  0997                     	;# 
   524  0E0F                     	;# 
   525  0E10                     	;# 
   526  0E11                     	;# 
   527  0E12                     	;# 
   528  0E13                     	;# 
   529  0E14                     	;# 
   530  0E15                     	;# 
   531  0E16                     	;# 
   532  0E17                     	;# 
   533  0E18                     	;# 
   534  0E19                     	;# 
   535  0E1A                     	;# 
   536  0E1B                     	;# 
   537  0E1C                     	;# 
   538  0E1D                     	;# 
   539  0E1E                     	;# 
   540  0E1F                     	;# 
   541  0E20                     	;# 
   542  0E21                     	;# 
   543  0E22                     	;# 
   544  0E23                     	;# 
   545  0E24                     	;# 
   546  0E25                     	;# 
   547  0E26                     	;# 
   548  0E27                     	;# 
   549  0E28                     	;# 
   550  0E29                     	;# 
   551  0E2A                     	;# 
   552  0E2B                     	;# 
   553  0E2C                     	;# 
   554  0E2D                     	;# 
   555  0E2E                     	;# 
   556  0E2F                     	;# 
   557  0E30                     	;# 
   558  0E31                     	;# 
   559  0E32                     	;# 
   560  0E33                     	;# 
   561  0E34                     	;# 
   562  0E35                     	;# 
   563  0E36                     	;# 
   564  0E37                     	;# 
   565  0E8F                     	;# 
   566  0E90                     	;# 
   567  0E91                     	;# 
   568  0E92                     	;# 
   569  0E93                     	;# 
   570  0E94                     	;# 
   571  0E95                     	;# 
   572  0E96                     	;# 
   573  0E97                     	;# 
   574  0E9C                     	;# 
   575  0E9D                     	;# 
   576  0E9E                     	;# 
   577  0EA1                     	;# 
   578  0EA2                     	;# 
   579  0EA3                     	;# 
   580  0EA4                     	;# 
   581  0EA5                     	;# 
   582  0EA9                     	;# 
   583  0EAA                     	;# 
   584  0EAB                     	;# 
   585  0EAC                     	;# 
   586  0EB1                     	;# 
   587  0EB2                     	;# 
   588  0EB3                     	;# 
   589  0EB8                     	;# 
   590  0EB9                     	;# 
   591  0EBA                     	;# 
   592  0EBB                     	;# 
   593  0EBC                     	;# 
   594  0EBD                     	;# 
   595  0EBE                     	;# 
   596  0EC3                     	;# 
   597  0EC5                     	;# 
   598  0EC6                     	;# 
   599  0EC7                     	;# 
   600  0EC8                     	;# 
   601  0EC9                     	;# 
   602  0ECA                     	;# 
   603  0ECB                     	;# 
   604  0ECC                     	;# 
   605  0F10                     	;# 
   606  0F11                     	;# 
   607  0F12                     	;# 
   608  0F13                     	;# 
   609  0F14                     	;# 
   610  0F15                     	;# 
   611  0F16                     	;# 
   612  0F17                     	;# 
   613  0F18                     	;# 
   614  0F19                     	;# 
   615  0F1A                     	;# 
   616  0F1B                     	;# 
   617  0F1C                     	;# 
   618  0F1D                     	;# 
   619  0F1E                     	;# 
   620  0F1F                     	;# 
   621  0F20                     	;# 
   622  0F21                     	;# 
   623  0F22                     	;# 
   624  0F23                     	;# 
   625  0F24                     	;# 
   626  0F25                     	;# 
   627  0F26                     	;# 
   628  0F27                     	;# 
   629  0F28                     	;# 
   630  0F29                     	;# 
   631  0F2A                     	;# 
   632  0F2B                     	;# 
   633  0F2C                     	;# 
   634  0F2D                     	;# 
   635  0F2E                     	;# 
   636  0F2F                     	;# 
   637  0F30                     	;# 
   638  0F31                     	;# 
   639  0F32                     	;# 
   640  0F38                     	;# 
   641  0F39                     	;# 
   642  0F3A                     	;# 
   643  0F3B                     	;# 
   644  0F3C                     	;# 
   645  0F3D                     	;# 
   646  0F3E                     	;# 
   647  0F3F                     	;# 
   648  0F40                     	;# 
   649  0F41                     	;# 
   650  0F43                     	;# 
   651  0F44                     	;# 
   652  0F45                     	;# 
   653  0F46                     	;# 
   654  0F47                     	;# 
   655  0F48                     	;# 
   656  0F49                     	;# 
   657  0F4A                     	;# 
   658  0F4B                     	;# 
   659  0F4C                     	;# 
   660  0F4E                     	;# 
   661  0F4F                     	;# 
   662  0F50                     	;# 
   663  0F51                     	;# 
   664  0F52                     	;# 
   665  0F53                     	;# 
   666  0F54                     	;# 
   667  0F55                     	;# 
   668  0F56                     	;# 
   669  0F57                     	;# 
   670  0F59                     	;# 
   671  0F5A                     	;# 
   672  0F5B                     	;# 
   673  0F5C                     	;# 
   674  0F5D                     	;# 
   675  0F61                     	;# 
   676  0F62                     	;# 
   677  0F64                     	;# 
   678  0F65                     	;# 
   679  0F66                     	;# 
   680  0F67                     	;# 
   681  0F68                     	;# 
   682  0F69                     	;# 
   683  0F6A                     	;# 
   684  0F6B                     	;# 
   685  0F6C                     	;# 
   686  0F6D                     	;# 
   687  0FE4                     	;# 
   688  0FE5                     	;# 
   689  0FE6                     	;# 
   690  0FE7                     	;# 
   691  0FE8                     	;# 
   692  0FE9                     	;# 
   693  0FEA                     	;# 
   694  0FEB                     	;# 
   695  0FED                     	;# 
   696  0FEE                     	;# 
   697  0FEF                     	;# 
   698  0000                     	;# 
   699  0001                     	;# 
   700  0002                     	;# 
   701  0003                     	;# 
   702  0004                     	;# 
   703  0005                     	;# 
   704  0006                     	;# 
   705  0007                     	;# 
   706  0008                     	;# 
   707  0009                     	;# 
   708  000A                     	;# 
   709  000B                     	;# 
   710  000C                     	;# 
   711  000D                     	;# 
   712  000E                     	;# 
   713  000F                     	;# 
   714  0010                     	;# 
   715  0011                     	;# 
   716  0012                     	;# 
   717  0013                     	;# 
   718  0014                     	;# 
   719  0015                     	;# 
   720  0016                     	;# 
   721  0017                     	;# 
   722  0018                     	;# 
   723  0019                     	;# 
   724  001A                     	;# 
   725  001C                     	;# 
   726  001C                     	;# 
   727  001D                     	;# 
   728  001D                     	;# 
   729  001E                     	;# 
   730  001F                     	;# 
   731  008C                     	;# 
   732  008C                     	;# 
   733  008D                     	;# 
   734  008E                     	;# 
   735  008E                     	;# 
   736  008F                     	;# 
   737  0090                     	;# 
   738  0090                     	;# 
   739  0091                     	;# 
   740  0093                     	;# 
   741  0094                     	;# 
   742  0095                     	;# 
   743  0096                     	;# 
   744  0097                     	;# 
   745  0098                     	;# 
   746  0099                     	;# 
   747  009A                     	;# 
   748  009B                     	;# 
   749  009C                     	;# 
   750  009D                     	;# 
   751  009E                     	;# 
   752  010C                     	;# 
   753  010D                     	;# 
   754  010E                     	;# 
   755  010E                     	;# 
   756  010F                     	;# 
   757  0110                     	;# 
   758  0110                     	;# 
   759  0111                     	;# 
   760  0112                     	;# 
   761  0112                     	;# 
   762  0113                     	;# 
   763  0114                     	;# 
   764  0114                     	;# 
   765  0115                     	;# 
   766  0116                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  0119                     	;# 
   770  0119                     	;# 
   771  0119                     	;# 
   772  011A                     	;# 
   773  011A                     	;# 
   774  011A                     	;# 
   775  011B                     	;# 
   776  011B                     	;# 
   777  011B                     	;# 
   778  011B                     	;# 
   779  011B                     	;# 
   780  011C                     	;# 
   781  011C                     	;# 
   782  011C                     	;# 
   783  011D                     	;# 
   784  011D                     	;# 
   785  011D                     	;# 
   786  011E                     	;# 
   787  011E                     	;# 
   788  011E                     	;# 
   789  011F                     	;# 
   790  011F                     	;# 
   791  011F                     	;# 
   792  011F                     	;# 
   793  011F                     	;# 
   794  018C                     	;# 
   795  018D                     	;# 
   796  018E                     	;# 
   797  018F                     	;# 
   798  0190                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0196                     	;# 
   802  0197                     	;# 
   803  0198                     	;# 
   804  0199                     	;# 
   805  019A                     	;# 
   806  019B                     	;# 
   807  019C                     	;# 
   808  020C                     	;# 
   809  020C                     	;# 
   810  020D                     	;# 
   811  020E                     	;# 
   812  020F                     	;# 
   813  020F                     	;# 
   814  0210                     	;# 
   815  0210                     	;# 
   816  0211                     	;# 
   817  0211                     	;# 
   818  0212                     	;# 
   819  0212                     	;# 
   820  0213                     	;# 
   821  0214                     	;# 
   822  0215                     	;# 
   823  0215                     	;# 
   824  0216                     	;# 
   825  0216                     	;# 
   826  0217                     	;# 
   827  0217                     	;# 
   828  0218                     	;# 
   829  0218                     	;# 
   830  0219                     	;# 
   831  021A                     	;# 
   832  021B                     	;# 
   833  021B                     	;# 
   834  021C                     	;# 
   835  021C                     	;# 
   836  021D                     	;# 
   837  021D                     	;# 
   838  021E                     	;# 
   839  021F                     	;# 
   840  028C                     	;# 
   841  028C                     	;# 
   842  028D                     	;# 
   843  028D                     	;# 
   844  028E                     	;# 
   845  028F                     	;# 
   846  0290                     	;# 
   847  0290                     	;# 
   848  0291                     	;# 
   849  0292                     	;# 
   850  0292                     	;# 
   851  0293                     	;# 
   852  0293                     	;# 
   853  0294                     	;# 
   854  0295                     	;# 
   855  0296                     	;# 
   856  0296                     	;# 
   857  0297                     	;# 
   858  0298                     	;# 
   859  0298                     	;# 
   860  0299                     	;# 
   861  0299                     	;# 
   862  029A                     	;# 
   863  029B                     	;# 
   864  029C                     	;# 
   865  029C                     	;# 
   866  029D                     	;# 
   867  030C                     	;# 
   868  030C                     	;# 
   869  030D                     	;# 
   870  030E                     	;# 
   871  030F                     	;# 
   872  0310                     	;# 
   873  0310                     	;# 
   874  0311                     	;# 
   875  0312                     	;# 
   876  0313                     	;# 
   877  0314                     	;# 
   878  0314                     	;# 
   879  0315                     	;# 
   880  0316                     	;# 
   881  0317                     	;# 
   882  0318                     	;# 
   883  0318                     	;# 
   884  0319                     	;# 
   885  031A                     	;# 
   886  031B                     	;# 
   887  031C                     	;# 
   888  031C                     	;# 
   889  031D                     	;# 
   890  031E                     	;# 
   891  031F                     	;# 
   892  038C                     	;# 
   893  038C                     	;# 
   894  038D                     	;# 
   895  038E                     	;# 
   896  0390                     	;# 
   897  0390                     	;# 
   898  0391                     	;# 
   899  0392                     	;# 
   900  040C                     	;# 
   901  040D                     	;# 
   902  040E                     	;# 
   903  040F                     	;# 
   904  0410                     	;# 
   905  0411                     	;# 
   906  0416                     	;# 
   907  0416                     	;# 
   908  0417                     	;# 
   909  0418                     	;# 
   910  0418                     	;# 
   911  0419                     	;# 
   912  041A                     	;# 
   913  041A                     	;# 
   914  041B                     	;# 
   915  041C                     	;# 
   916  041C                     	;# 
   917  041D                     	;# 
   918  041E                     	;# 
   919  041F                     	;# 
   920  048C                     	;# 
   921  048C                     	;# 
   922  048D                     	;# 
   923  048E                     	;# 
   924  048F                     	;# 
   925  048F                     	;# 
   926  0490                     	;# 
   927  0491                     	;# 
   928  0492                     	;# 
   929  0492                     	;# 
   930  0493                     	;# 
   931  0494                     	;# 
   932  0495                     	;# 
   933  0495                     	;# 
   934  0496                     	;# 
   935  0497                     	;# 
   936  0498                     	;# 
   937  0499                     	;# 
   938  049A                     	;# 
   939  049B                     	;# 
   940  049C                     	;# 
   941  049D                     	;# 
   942  050C                     	;# 
   943  050C                     	;# 
   944  050D                     	;# 
   945  050E                     	;# 
   946  050F                     	;# 
   947  050F                     	;# 
   948  0510                     	;# 
   949  0511                     	;# 
   950  0512                     	;# 
   951  0512                     	;# 
   952  0513                     	;# 
   953  0514                     	;# 
   954  0515                     	;# 
   955  0515                     	;# 
   956  0516                     	;# 
   957  0517                     	;# 
   958  0518                     	;# 
   959  0519                     	;# 
   960  051A                     	;# 
   961  051B                     	;# 
   962  051C                     	;# 
   963  051D                     	;# 
   964  058C                     	;# 
   965  058C                     	;# 
   966  058D                     	;# 
   967  058E                     	;# 
   968  058F                     	;# 
   969  058F                     	;# 
   970  0590                     	;# 
   971  0591                     	;# 
   972  0592                     	;# 
   973  0593                     	;# 
   974  060C                     	;# 
   975  060D                     	;# 
   976  060E                     	;# 
   977  060F                     	;# 
   978  0610                     	;# 
   979  0611                     	;# 
   980  0612                     	;# 
   981  0613                     	;# 
   982  0614                     	;# 
   983  0616                     	;# 
   984  0617                     	;# 
   985  0618                     	;# 
   986  0619                     	;# 
   987  061A                     	;# 
   988  061B                     	;# 
   989  061C                     	;# 
   990  061D                     	;# 
   991  061E                     	;# 
   992  068C                     	;# 
   993  068D                     	;# 
   994  068E                     	;# 
   995  068F                     	;# 
   996  0690                     	;# 
   997  0691                     	;# 
   998  0692                     	;# 
   999  0693                     	;# 
  1000  0694                     	;# 
  1001  070C                     	;# 
  1002  070D                     	;# 
  1003  070E                     	;# 
  1004  070F                     	;# 
  1005  0710                     	;# 
  1006  0711                     	;# 
  1007  0712                     	;# 
  1008  0713                     	;# 
  1009  0714                     	;# 
  1010  0716                     	;# 
  1011  0717                     	;# 
  1012  0718                     	;# 
  1013  0719                     	;# 
  1014  071A                     	;# 
  1015  071B                     	;# 
  1016  071C                     	;# 
  1017  071D                     	;# 
  1018  071E                     	;# 
  1019  0796                     	;# 
  1020  0797                     	;# 
  1021  0798                     	;# 
  1022  0799                     	;# 
  1023  079A                     	;# 
  1024  079B                     	;# 
  1025  080C                     	;# 
  1026  080D                     	;# 
  1027  080E                     	;# 
  1028  080F                     	;# 
  1029  0810                     	;# 
  1030  0811                     	;# 
  1031  0812                     	;# 
  1032  0813                     	;# 
  1033  0814                     	;# 
  1034  081A                     	;# 
  1035  081B                     	;# 
  1036  081C                     	;# 
  1037  081D                     	;# 
  1038  081E                     	;# 
  1039  081F                     	;# 
  1040  088C                     	;# 
  1041  088D                     	;# 
  1042  088E                     	;# 
  1043  088F                     	;# 
  1044  0890                     	;# 
  1045  0891                     	;# 
  1046  0892                     	;# 
  1047  0893                     	;# 
  1048  0895                     	;# 
  1049  0896                     	;# 
  1050  0897                     	;# 
  1051  0898                     	;# 
  1052  0899                     	;# 
  1053  089A                     	;# 
  1054  089B                     	;# 
  1055  090C                     	;# 
  1056  090E                     	;# 
  1057  090F                     	;# 
  1058  091F                     	;# 
  1059  091F                     	;# 
  1060  098F                     	;# 
  1061  098F                     	;# 
  1062  0990                     	;# 
  1063  0991                     	;# 
  1064  0992                     	;# 
  1065  0993                     	;# 
  1066  0994                     	;# 
  1067  0995                     	;# 
  1068  0996                     	;# 
  1069  0997                     	;# 
  1070  0E0F                     	;# 
  1071  0E10                     	;# 
  1072  0E11                     	;# 
  1073  0E12                     	;# 
  1074  0E13                     	;# 
  1075  0E14                     	;# 
  1076  0E15                     	;# 
  1077  0E16                     	;# 
  1078  0E17                     	;# 
  1079  0E18                     	;# 
  1080  0E19                     	;# 
  1081  0E1A                     	;# 
  1082  0E1B                     	;# 
  1083  0E1C                     	;# 
  1084  0E1D                     	;# 
  1085  0E1E                     	;# 
  1086  0E1F                     	;# 
  1087  0E20                     	;# 
  1088  0E21                     	;# 
  1089  0E22                     	;# 
  1090  0E23                     	;# 
  1091  0E24                     	;# 
  1092  0E25                     	;# 
  1093  0E26                     	;# 
  1094  0E27                     	;# 
  1095  0E28                     	;# 
  1096  0E29                     	;# 
  1097  0E2A                     	;# 
  1098  0E2B                     	;# 
  1099  0E2C                     	;# 
  1100  0E2D                     	;# 
  1101  0E2E                     	;# 
  1102  0E2F                     	;# 
  1103  0E30                     	;# 
  1104  0E31                     	;# 
  1105  0E32                     	;# 
  1106  0E33                     	;# 
  1107  0E34                     	;# 
  1108  0E35                     	;# 
  1109  0E36                     	;# 
  1110  0E37                     	;# 
  1111  0E8F                     	;# 
  1112  0E90                     	;# 
  1113  0E91                     	;# 
  1114  0E92                     	;# 
  1115  0E93                     	;# 
  1116  0E94                     	;# 
  1117  0E95                     	;# 
  1118  0E96                     	;# 
  1119  0E97                     	;# 
  1120  0E9C                     	;# 
  1121  0E9D                     	;# 
  1122  0E9E                     	;# 
  1123  0EA1                     	;# 
  1124  0EA2                     	;# 
  1125  0EA3                     	;# 
  1126  0EA4                     	;# 
  1127  0EA5                     	;# 
  1128  0EA9                     	;# 
  1129  0EAA                     	;# 
  1130  0EAB                     	;# 
  1131  0EAC                     	;# 
  1132  0EB1                     	;# 
  1133  0EB2                     	;# 
  1134  0EB3                     	;# 
  1135  0EB8                     	;# 
  1136  0EB9                     	;# 
  1137  0EBA                     	;# 
  1138  0EBB                     	;# 
  1139  0EBC                     	;# 
  1140  0EBD                     	;# 
  1141  0EBE                     	;# 
  1142  0EC3                     	;# 
  1143  0EC5                     	;# 
  1144  0EC6                     	;# 
  1145  0EC7                     	;# 
  1146  0EC8                     	;# 
  1147  0EC9                     	;# 
  1148  0ECA                     	;# 
  1149  0ECB                     	;# 
  1150  0ECC                     	;# 
  1151  0F10                     	;# 
  1152  0F11                     	;# 
  1153  0F12                     	;# 
  1154  0F13                     	;# 
  1155  0F14                     	;# 
  1156  0F15                     	;# 
  1157  0F16                     	;# 
  1158  0F17                     	;# 
  1159  0F18                     	;# 
  1160  0F19                     	;# 
  1161  0F1A                     	;# 
  1162  0F1B                     	;# 
  1163  0F1C                     	;# 
  1164  0F1D                     	;# 
  1165  0F1E                     	;# 
  1166  0F1F                     	;# 
  1167  0F20                     	;# 
  1168  0F21                     	;# 
  1169  0F22                     	;# 
  1170  0F23                     	;# 
  1171  0F24                     	;# 
  1172  0F25                     	;# 
  1173  0F26                     	;# 
  1174  0F27                     	;# 
  1175  0F28                     	;# 
  1176  0F29                     	;# 
  1177  0F2A                     	;# 
  1178  0F2B                     	;# 
  1179  0F2C                     	;# 
  1180  0F2D                     	;# 
  1181  0F2E                     	;# 
  1182  0F2F                     	;# 
  1183  0F30                     	;# 
  1184  0F31                     	;# 
  1185  0F32                     	;# 
  1186  0F38                     	;# 
  1187  0F39                     	;# 
  1188  0F3A                     	;# 
  1189  0F3B                     	;# 
  1190  0F3C                     	;# 
  1191  0F3D                     	;# 
  1192  0F3E                     	;# 
  1193  0F3F                     	;# 
  1194  0F40                     	;# 
  1195  0F41                     	;# 
  1196  0F43                     	;# 
  1197  0F44                     	;# 
  1198  0F45                     	;# 
  1199  0F46                     	;# 
  1200  0F47                     	;# 
  1201  0F48                     	;# 
  1202  0F49                     	;# 
  1203  0F4A                     	;# 
  1204  0F4B                     	;# 
  1205  0F4C                     	;# 
  1206  0F4E                     	;# 
  1207  0F4F                     	;# 
  1208  0F50                     	;# 
  1209  0F51                     	;# 
  1210  0F52                     	;# 
  1211  0F53                     	;# 
  1212  0F54                     	;# 
  1213  0F55                     	;# 
  1214  0F56                     	;# 
  1215  0F57                     	;# 
  1216  0F59                     	;# 
  1217  0F5A                     	;# 
  1218  0F5B                     	;# 
  1219  0F5C                     	;# 
  1220  0F5D                     	;# 
  1221  0F61                     	;# 
  1222  0F62                     	;# 
  1223  0F64                     	;# 
  1224  0F65                     	;# 
  1225  0F66                     	;# 
  1226  0F67                     	;# 
  1227  0F68                     	;# 
  1228  0F69                     	;# 
  1229  0F6A                     	;# 
  1230  0F6B                     	;# 
  1231  0F6C                     	;# 
  1232  0F6D                     	;# 
  1233  0FE4                     	;# 
  1234  0FE5                     	;# 
  1235  0FE6                     	;# 
  1236  0FE7                     	;# 
  1237  0FE8                     	;# 
  1238  0FE9                     	;# 
  1239  0FEA                     	;# 
  1240  0FEB                     	;# 
  1241  0FED                     	;# 
  1242  0FEE                     	;# 
  1243  0FEF                     	;# 
  1244  0000                     	;# 
  1245  0001                     	;# 
  1246  0002                     	;# 
  1247  0003                     	;# 
  1248  0004                     	;# 
  1249  0005                     	;# 
  1250  0006                     	;# 
  1251  0007                     	;# 
  1252  0008                     	;# 
  1253  0009                     	;# 
  1254  000A                     	;# 
  1255  000B                     	;# 
  1256  000C                     	;# 
  1257  000D                     	;# 
  1258  000E                     	;# 
  1259  000F                     	;# 
  1260  0010                     	;# 
  1261  0011                     	;# 
  1262  0012                     	;# 
  1263  0013                     	;# 
  1264  0014                     	;# 
  1265  0015                     	;# 
  1266  0016                     	;# 
  1267  0017                     	;# 
  1268  0018                     	;# 
  1269  0019                     	;# 
  1270  001A                     	;# 
  1271  001C                     	;# 
  1272  001C                     	;# 
  1273  001D                     	;# 
  1274  001D                     	;# 
  1275  001E                     	;# 
  1276  001F                     	;# 
  1277  008C                     	;# 
  1278  008C                     	;# 
  1279  008D                     	;# 
  1280  008E                     	;# 
  1281  008E                     	;# 
  1282  008F                     	;# 
  1283  0090                     	;# 
  1284  0090                     	;# 
  1285  0091                     	;# 
  1286  0093                     	;# 
  1287  0094                     	;# 
  1288  0095                     	;# 
  1289  0096                     	;# 
  1290  0097                     	;# 
  1291  0098                     	;# 
  1292  0099                     	;# 
  1293  009A                     	;# 
  1294  009B                     	;# 
  1295  009C                     	;# 
  1296  009D                     	;# 
  1297  009E                     	;# 
  1298  010C                     	;# 
  1299  010D                     	;# 
  1300  010E                     	;# 
  1301  010E                     	;# 
  1302  010F                     	;# 
  1303  0110                     	;# 
  1304  0110                     	;# 
  1305  0111                     	;# 
  1306  0112                     	;# 
  1307  0112                     	;# 
  1308  0113                     	;# 
  1309  0114                     	;# 
  1310  0114                     	;# 
  1311  0115                     	;# 
  1312  0116                     	;# 
  1313  0116                     	;# 
  1314  0117                     	;# 
  1315  0119                     	;# 
  1316  0119                     	;# 
  1317  0119                     	;# 
  1318  011A                     	;# 
  1319  011A                     	;# 
  1320  011A                     	;# 
  1321  011B                     	;# 
  1322  011B                     	;# 
  1323  011B                     	;# 
  1324  011B                     	;# 
  1325  011B                     	;# 
  1326  011C                     	;# 
  1327  011C                     	;# 
  1328  011C                     	;# 
  1329  011D                     	;# 
  1330  011D                     	;# 
  1331  011D                     	;# 
  1332  011E                     	;# 
  1333  011E                     	;# 
  1334  011E                     	;# 
  1335  011F                     	;# 
  1336  011F                     	;# 
  1337  011F                     	;# 
  1338  011F                     	;# 
  1339  011F                     	;# 
  1340  018C                     	;# 
  1341  018D                     	;# 
  1342  018E                     	;# 
  1343  018F                     	;# 
  1344  0190                     	;# 
  1345  0191                     	;# 
  1346  0192                     	;# 
  1347  0196                     	;# 
  1348  0197                     	;# 
  1349  0198                     	;# 
  1350  0199                     	;# 
  1351  019A                     	;# 
  1352  019B                     	;# 
  1353  019C                     	;# 
  1354  020C                     	;# 
  1355  020C                     	;# 
  1356  020D                     	;# 
  1357  020E                     	;# 
  1358  020F                     	;# 
  1359  020F                     	;# 
  1360  0210                     	;# 
  1361  0210                     	;# 
  1362  0211                     	;# 
  1363  0211                     	;# 
  1364  0212                     	;# 
  1365  0212                     	;# 
  1366  0213                     	;# 
  1367  0214                     	;# 
  1368  0215                     	;# 
  1369  0215                     	;# 
  1370  0216                     	;# 
  1371  0216                     	;# 
  1372  0217                     	;# 
  1373  0217                     	;# 
  1374  0218                     	;# 
  1375  0218                     	;# 
  1376  0219                     	;# 
  1377  021A                     	;# 
  1378  021B                     	;# 
  1379  021B                     	;# 
  1380  021C                     	;# 
  1381  021C                     	;# 
  1382  021D                     	;# 
  1383  021D                     	;# 
  1384  021E                     	;# 
  1385  021F                     	;# 
  1386  028C                     	;# 
  1387  028C                     	;# 
  1388  028D                     	;# 
  1389  028D                     	;# 
  1390  028E                     	;# 
  1391  028F                     	;# 
  1392  0290                     	;# 
  1393  0290                     	;# 
  1394  0291                     	;# 
  1395  0292                     	;# 
  1396  0292                     	;# 
  1397  0293                     	;# 
  1398  0293                     	;# 
  1399  0294                     	;# 
  1400  0295                     	;# 
  1401  0296                     	;# 
  1402  0296                     	;# 
  1403  0297                     	;# 
  1404  0298                     	;# 
  1405  0298                     	;# 
  1406  0299                     	;# 
  1407  0299                     	;# 
  1408  029A                     	;# 
  1409  029B                     	;# 
  1410  029C                     	;# 
  1411  029C                     	;# 
  1412  029D                     	;# 
  1413  030C                     	;# 
  1414  030C                     	;# 
  1415  030D                     	;# 
  1416  030E                     	;# 
  1417  030F                     	;# 
  1418  0310                     	;# 
  1419  0310                     	;# 
  1420  0311                     	;# 
  1421  0312                     	;# 
  1422  0313                     	;# 
  1423  0314                     	;# 
  1424  0314                     	;# 
  1425  0315                     	;# 
  1426  0316                     	;# 
  1427  0317                     	;# 
  1428  0318                     	;# 
  1429  0318                     	;# 
  1430  0319                     	;# 
  1431  031A                     	;# 
  1432  031B                     	;# 
  1433  031C                     	;# 
  1434  031C                     	;# 
  1435  031D                     	;# 
  1436  031E                     	;# 
  1437  031F                     	;# 
  1438  038C                     	;# 
  1439  038C                     	;# 
  1440  038D                     	;# 
  1441  038E                     	;# 
  1442  0390                     	;# 
  1443  0390                     	;# 
  1444  0391                     	;# 
  1445  0392                     	;# 
  1446  040C                     	;# 
  1447  040D                     	;# 
  1448  040E                     	;# 
  1449  040F                     	;# 
  1450  0410                     	;# 
  1451  0411                     	;# 
  1452  0416                     	;# 
  1453  0416                     	;# 
  1454  0417                     	;# 
  1455  0418                     	;# 
  1456  0418                     	;# 
  1457  0419                     	;# 
  1458  041A                     	;# 
  1459  041A                     	;# 
  1460  041B                     	;# 
  1461  041C                     	;# 
  1462  041C                     	;# 
  1463  041D                     	;# 
  1464  041E                     	;# 
  1465  041F                     	;# 
  1466  048C                     	;# 
  1467  048C                     	;# 
  1468  048D                     	;# 
  1469  048E                     	;# 
  1470  048F                     	;# 
  1471  048F                     	;# 
  1472  0490                     	;# 
  1473  0491                     	;# 
  1474  0492                     	;# 
  1475  0492                     	;# 
  1476  0493                     	;# 
  1477  0494                     	;# 
  1478  0495                     	;# 
  1479  0495                     	;# 
  1480  0496                     	;# 
  1481  0497                     	;# 
  1482  0498                     	;# 
  1483  0499                     	;# 
  1484  049A                     	;# 
  1485  049B                     	;# 
  1486  049C                     	;# 
  1487  049D                     	;# 
  1488  050C                     	;# 
  1489  050C                     	;# 
  1490  050D                     	;# 
  1491  050E                     	;# 
  1492  050F                     	;# 
  1493  050F                     	;# 
  1494  0510                     	;# 
  1495  0511                     	;# 
  1496  0512                     	;# 
  1497  0512                     	;# 
  1498  0513                     	;# 
  1499  0514                     	;# 
  1500  0515                     	;# 
  1501  0515                     	;# 
  1502  0516                     	;# 
  1503  0517                     	;# 
  1504  0518                     	;# 
  1505  0519                     	;# 
  1506  051A                     	;# 
  1507  051B                     	;# 
  1508  051C                     	;# 
  1509  051D                     	;# 
  1510  058C                     	;# 
  1511  058C                     	;# 
  1512  058D                     	;# 
  1513  058E                     	;# 
  1514  058F                     	;# 
  1515  058F                     	;# 
  1516  0590                     	;# 
  1517  0591                     	;# 
  1518  0592                     	;# 
  1519  0593                     	;# 
  1520  060C                     	;# 
  1521  060D                     	;# 
  1522  060E                     	;# 
  1523  060F                     	;# 
  1524  0610                     	;# 
  1525  0611                     	;# 
  1526  0612                     	;# 
  1527  0613                     	;# 
  1528  0614                     	;# 
  1529  0616                     	;# 
  1530  0617                     	;# 
  1531  0618                     	;# 
  1532  0619                     	;# 
  1533  061A                     	;# 
  1534  061B                     	;# 
  1535  061C                     	;# 
  1536  061D                     	;# 
  1537  061E                     	;# 
  1538  068C                     	;# 
  1539  068D                     	;# 
  1540  068E                     	;# 
  1541  068F                     	;# 
  1542  0690                     	;# 
  1543  0691                     	;# 
  1544  0692                     	;# 
  1545  0693                     	;# 
  1546  0694                     	;# 
  1547  070C                     	;# 
  1548  070D                     	;# 
  1549  070E                     	;# 
  1550  070F                     	;# 
  1551  0710                     	;# 
  1552  0711                     	;# 
  1553  0712                     	;# 
  1554  0713                     	;# 
  1555  0714                     	;# 
  1556  0716                     	;# 
  1557  0717                     	;# 
  1558  0718                     	;# 
  1559  0719                     	;# 
  1560  071A                     	;# 
  1561  071B                     	;# 
  1562  071C                     	;# 
  1563  071D                     	;# 
  1564  071E                     	;# 
  1565  0796                     	;# 
  1566  0797                     	;# 
  1567  0798                     	;# 
  1568  0799                     	;# 
  1569  079A                     	;# 
  1570  079B                     	;# 
  1571  080C                     	;# 
  1572  080D                     	;# 
  1573  080E                     	;# 
  1574  080F                     	;# 
  1575  0810                     	;# 
  1576  0811                     	;# 
  1577  0812                     	;# 
  1578  0813                     	;# 
  1579  0814                     	;# 
  1580  081A                     	;# 
  1581  081B                     	;# 
  1582  081C                     	;# 
  1583  081D                     	;# 
  1584  081E                     	;# 
  1585  081F                     	;# 
  1586  088C                     	;# 
  1587  088D                     	;# 
  1588  088E                     	;# 
  1589  088F                     	;# 
  1590  0890                     	;# 
  1591  0891                     	;# 
  1592  0892                     	;# 
  1593  0893                     	;# 
  1594  0895                     	;# 
  1595  0896                     	;# 
  1596  0897                     	;# 
  1597  0898                     	;# 
  1598  0899                     	;# 
  1599  089A                     	;# 
  1600  089B                     	;# 
  1601  090C                     	;# 
  1602  090E                     	;# 
  1603  090F                     	;# 
  1604  091F                     	;# 
  1605  091F                     	;# 
  1606  098F                     	;# 
  1607  098F                     	;# 
  1608  0990                     	;# 
  1609  0991                     	;# 
  1610  0992                     	;# 
  1611  0993                     	;# 
  1612  0994                     	;# 
  1613  0995                     	;# 
  1614  0996                     	;# 
  1615  0997                     	;# 
  1616  0E0F                     	;# 
  1617  0E10                     	;# 
  1618  0E11                     	;# 
  1619  0E12                     	;# 
  1620  0E13                     	;# 
  1621  0E14                     	;# 
  1622  0E15                     	;# 
  1623  0E16                     	;# 
  1624  0E17                     	;# 
  1625  0E18                     	;# 
  1626  0E19                     	;# 
  1627  0E1A                     	;# 
  1628  0E1B                     	;# 
  1629  0E1C                     	;# 
  1630  0E1D                     	;# 
  1631  0E1E                     	;# 
  1632  0E1F                     	;# 
  1633  0E20                     	;# 
  1634  0E21                     	;# 
  1635  0E22                     	;# 
  1636  0E23                     	;# 
  1637  0E24                     	;# 
  1638  0E25                     	;# 
  1639  0E26                     	;# 
  1640  0E27                     	;# 
  1641  0E28                     	;# 
  1642  0E29                     	;# 
  1643  0E2A                     	;# 
  1644  0E2B                     	;# 
  1645  0E2C                     	;# 
  1646  0E2D                     	;# 
  1647  0E2E                     	;# 
  1648  0E2F                     	;# 
  1649  0E30                     	;# 
  1650  0E31                     	;# 
  1651  0E32                     	;# 
  1652  0E33                     	;# 
  1653  0E34                     	;# 
  1654  0E35                     	;# 
  1655  0E36                     	;# 
  1656  0E37                     	;# 
  1657  0E8F                     	;# 
  1658  0E90                     	;# 
  1659  0E91                     	;# 
  1660  0E92                     	;# 
  1661  0E93                     	;# 
  1662  0E94                     	;# 
  1663  0E95                     	;# 
  1664  0E96                     	;# 
  1665  0E97                     	;# 
  1666  0E9C                     	;# 
  1667  0E9D                     	;# 
  1668  0E9E                     	;# 
  1669  0EA1                     	;# 
  1670  0EA2                     	;# 
  1671  0EA3                     	;# 
  1672  0EA4                     	;# 
  1673  0EA5                     	;# 
  1674  0EA9                     	;# 
  1675  0EAA                     	;# 
  1676  0EAB                     	;# 
  1677  0EAC                     	;# 
  1678  0EB1                     	;# 
  1679  0EB2                     	;# 
  1680  0EB3                     	;# 
  1681  0EB8                     	;# 
  1682  0EB9                     	;# 
  1683  0EBA                     	;# 
  1684  0EBB                     	;# 
  1685  0EBC                     	;# 
  1686  0EBD                     	;# 
  1687  0EBE                     	;# 
  1688  0EC3                     	;# 
  1689  0EC5                     	;# 
  1690  0EC6                     	;# 
  1691  0EC7                     	;# 
  1692  0EC8                     	;# 
  1693  0EC9                     	;# 
  1694  0ECA                     	;# 
  1695  0ECB                     	;# 
  1696  0ECC                     	;# 
  1697  0F10                     	;# 
  1698  0F11                     	;# 
  1699  0F12                     	;# 
  1700  0F13                     	;# 
  1701  0F14                     	;# 
  1702  0F15                     	;# 
  1703  0F16                     	;# 
  1704  0F17                     	;# 
  1705  0F18                     	;# 
  1706  0F19                     	;# 
  1707  0F1A                     	;# 
  1708  0F1B                     	;# 
  1709  0F1C                     	;# 
  1710  0F1D                     	;# 
  1711  0F1E                     	;# 
  1712  0F1F                     	;# 
  1713  0F20                     	;# 
  1714  0F21                     	;# 
  1715  0F22                     	;# 
  1716  0F23                     	;# 
  1717  0F24                     	;# 
  1718  0F25                     	;# 
  1719  0F26                     	;# 
  1720  0F27                     	;# 
  1721  0F28                     	;# 
  1722  0F29                     	;# 
  1723  0F2A                     	;# 
  1724  0F2B                     	;# 
  1725  0F2C                     	;# 
  1726  0F2D                     	;# 
  1727  0F2E                     	;# 
  1728  0F2F                     	;# 
  1729  0F30                     	;# 
  1730  0F31                     	;# 
  1731  0F32                     	;# 
  1732  0F38                     	;# 
  1733  0F39                     	;# 
  1734  0F3A                     	;# 
  1735  0F3B                     	;# 
  1736  0F3C                     	;# 
  1737  0F3D                     	;# 
  1738  0F3E                     	;# 
  1739  0F3F                     	;# 
  1740  0F40                     	;# 
  1741  0F41                     	;# 
  1742  0F43                     	;# 
  1743  0F44                     	;# 
  1744  0F45                     	;# 
  1745  0F46                     	;# 
  1746  0F47                     	;# 
  1747  0F48                     	;# 
  1748  0F49                     	;# 
  1749  0F4A                     	;# 
  1750  0F4B                     	;# 
  1751  0F4C                     	;# 
  1752  0F4E                     	;# 
  1753  0F4F                     	;# 
  1754  0F50                     	;# 
  1755  0F51                     	;# 
  1756  0F52                     	;# 
  1757  0F53                     	;# 
  1758  0F54                     	;# 
  1759  0F55                     	;# 
  1760  0F56                     	;# 
  1761  0F57                     	;# 
  1762  0F59                     	;# 
  1763  0F5A                     	;# 
  1764  0F5B                     	;# 
  1765  0F5C                     	;# 
  1766  0F5D                     	;# 
  1767  0F61                     	;# 
  1768  0F62                     	;# 
  1769  0F64                     	;# 
  1770  0F65                     	;# 
  1771  0F66                     	;# 
  1772  0F67                     	;# 
  1773  0F68                     	;# 
  1774  0F69                     	;# 
  1775  0F6A                     	;# 
  1776  0F6B                     	;# 
  1777  0F6C                     	;# 
  1778  0F6D                     	;# 
  1779  0FE4                     	;# 
  1780  0FE5                     	;# 
  1781  0FE6                     	;# 
  1782  0FE7                     	;# 
  1783  0FE8                     	;# 
  1784  0FE9                     	;# 
  1785  0FEA                     	;# 
  1786  0FEB                     	;# 
  1787  0FED                     	;# 
  1788  0FEE                     	;# 
  1789  0FEF                     	;# 
  1790  0000                     	;# 
  1791  0001                     	;# 
  1792  0002                     	;# 
  1793  0003                     	;# 
  1794  0004                     	;# 
  1795  0005                     	;# 
  1796  0006                     	;# 
  1797  0007                     	;# 
  1798  0008                     	;# 
  1799  0009                     	;# 
  1800  000A                     	;# 
  1801  000B                     	;# 
  1802  000C                     	;# 
  1803  000D                     	;# 
  1804  000E                     	;# 
  1805  000F                     	;# 
  1806  0010                     	;# 
  1807  0011                     	;# 
  1808  0012                     	;# 
  1809  0013                     	;# 
  1810  0014                     	;# 
  1811  0015                     	;# 
  1812  0016                     	;# 
  1813  0017                     	;# 
  1814  0018                     	;# 
  1815  0019                     	;# 
  1816  001A                     	;# 
  1817  001C                     	;# 
  1818  001C                     	;# 
  1819  001D                     	;# 
  1820  001D                     	;# 
  1821  001E                     	;# 
  1822  001F                     	;# 
  1823  008C                     	;# 
  1824  008C                     	;# 
  1825  008D                     	;# 
  1826  008E                     	;# 
  1827  008E                     	;# 
  1828  008F                     	;# 
  1829  0090                     	;# 
  1830  0090                     	;# 
  1831  0091                     	;# 
  1832  0093                     	;# 
  1833  0094                     	;# 
  1834  0095                     	;# 
  1835  0096                     	;# 
  1836  0097                     	;# 
  1837  0098                     	;# 
  1838  0099                     	;# 
  1839  009A                     	;# 
  1840  009B                     	;# 
  1841  009C                     	;# 
  1842  009D                     	;# 
  1843  009E                     	;# 
  1844  010C                     	;# 
  1845  010D                     	;# 
  1846  010E                     	;# 
  1847  010E                     	;# 
  1848  010F                     	;# 
  1849  0110                     	;# 
  1850  0110                     	;# 
  1851  0111                     	;# 
  1852  0112                     	;# 
  1853  0112                     	;# 
  1854  0113                     	;# 
  1855  0114                     	;# 
  1856  0114                     	;# 
  1857  0115                     	;# 
  1858  0116                     	;# 
  1859  0116                     	;# 
  1860  0117                     	;# 
  1861  0119                     	;# 
  1862  0119                     	;# 
  1863  0119                     	;# 
  1864  011A                     	;# 
  1865  011A                     	;# 
  1866  011A                     	;# 
  1867  011B                     	;# 
  1868  011B                     	;# 
  1869  011B                     	;# 
  1870  011B                     	;# 
  1871  011B                     	;# 
  1872  011C                     	;# 
  1873  011C                     	;# 
  1874  011C                     	;# 
  1875  011D                     	;# 
  1876  011D                     	;# 
  1877  011D                     	;# 
  1878  011E                     	;# 
  1879  011E                     	;# 
  1880  011E                     	;# 
  1881  011F                     	;# 
  1882  011F                     	;# 
  1883  011F                     	;# 
  1884  011F                     	;# 
  1885  011F                     	;# 
  1886  018C                     	;# 
  1887  018D                     	;# 
  1888  018E                     	;# 
  1889  018F                     	;# 
  1890  0190                     	;# 
  1891  0191                     	;# 
  1892  0192                     	;# 
  1893  0196                     	;# 
  1894  0197                     	;# 
  1895  0198                     	;# 
  1896  0199                     	;# 
  1897  019A                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  020C                     	;# 
  1901  020C                     	;# 
  1902  020D                     	;# 
  1903  020E                     	;# 
  1904  020F                     	;# 
  1905  020F                     	;# 
  1906  0210                     	;# 
  1907  0210                     	;# 
  1908  0211                     	;# 
  1909  0211                     	;# 
  1910  0212                     	;# 
  1911  0212                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0218                     	;# 
  1921  0218                     	;# 
  1922  0219                     	;# 
  1923  021A                     	;# 
  1924  021B                     	;# 
  1925  021B                     	;# 
  1926  021C                     	;# 
  1927  021C                     	;# 
  1928  021D                     	;# 
  1929  021D                     	;# 
  1930  021E                     	;# 
  1931  021F                     	;# 
  1932  028C                     	;# 
  1933  028C                     	;# 
  1934  028D                     	;# 
  1935  028D                     	;# 
  1936  028E                     	;# 
  1937  028F                     	;# 
  1938  0290                     	;# 
  1939  0290                     	;# 
  1940  0291                     	;# 
  1941  0292                     	;# 
  1942  0292                     	;# 
  1943  0293                     	;# 
  1944  0293                     	;# 
  1945  0294                     	;# 
  1946  0295                     	;# 
  1947  0296                     	;# 
  1948  0296                     	;# 
  1949  0297                     	;# 
  1950  0298                     	;# 
  1951  0298                     	;# 
  1952  0299                     	;# 
  1953  0299                     	;# 
  1954  029A                     	;# 
  1955  029B                     	;# 
  1956  029C                     	;# 
  1957  029C                     	;# 
  1958  029D                     	;# 
  1959  030C                     	;# 
  1960  030C                     	;# 
  1961  030D                     	;# 
  1962  030E                     	;# 
  1963  030F                     	;# 
  1964  0310                     	;# 
  1965  0310                     	;# 
  1966  0311                     	;# 
  1967  0312                     	;# 
  1968  0313                     	;# 
  1969  0314                     	;# 
  1970  0314                     	;# 
  1971  0315                     	;# 
  1972  0316                     	;# 
  1973  0317                     	;# 
  1974  0318                     	;# 
  1975  0318                     	;# 
  1976  0319                     	;# 
  1977  031A                     	;# 
  1978  031B                     	;# 
  1979  031C                     	;# 
  1980  031C                     	;# 
  1981  031D                     	;# 
  1982  031E                     	;# 
  1983  031F                     	;# 
  1984  038C                     	;# 
  1985  038C                     	;# 
  1986  038D                     	;# 
  1987  038E                     	;# 
  1988  0390                     	;# 
  1989  0390                     	;# 
  1990  0391                     	;# 
  1991  0392                     	;# 
  1992  040C                     	;# 
  1993  040D                     	;# 
  1994  040E                     	;# 
  1995  040F                     	;# 
  1996  0410                     	;# 
  1997  0411                     	;# 
  1998  0416                     	;# 
  1999  0416                     	;# 
  2000  0417                     	;# 
  2001  0418                     	;# 
  2002  0418                     	;# 
  2003  0419                     	;# 
  2004  041A                     	;# 
  2005  041A                     	;# 
  2006  041B                     	;# 
  2007  041C                     	;# 
  2008  041C                     	;# 
  2009  041D                     	;# 
  2010  041E                     	;# 
  2011  041F                     	;# 
  2012  048C                     	;# 
  2013  048C                     	;# 
  2014  048D                     	;# 
  2015  048E                     	;# 
  2016  048F                     	;# 
  2017  048F                     	;# 
  2018  0490                     	;# 
  2019  0491                     	;# 
  2020  0492                     	;# 
  2021  0492                     	;# 
  2022  0493                     	;# 
  2023  0494                     	;# 
  2024  0495                     	;# 
  2025  0495                     	;# 
  2026  0496                     	;# 
  2027  0497                     	;# 
  2028  0498                     	;# 
  2029  0499                     	;# 
  2030  049A                     	;# 
  2031  049B                     	;# 
  2032  049C                     	;# 
  2033  049D                     	;# 
  2034  050C                     	;# 
  2035  050C                     	;# 
  2036  050D                     	;# 
  2037  050E                     	;# 
  2038  050F                     	;# 
  2039  050F                     	;# 
  2040  0510                     	;# 
  2041  0511                     	;# 
  2042  0512                     	;# 
  2043  0512                     	;# 
  2044  0513                     	;# 
  2045  0514                     	;# 
  2046  0515                     	;# 
  2047  0515                     	;# 
  2048  0516                     	;# 
  2049  0517                     	;# 
  2050  0518                     	;# 
  2051  0519                     	;# 
  2052  051A                     	;# 
  2053  051B                     	;# 
  2054  051C                     	;# 
  2055  051D                     	;# 
  2056  058C                     	;# 
  2057  058C                     	;# 
  2058  058D                     	;# 
  2059  058E                     	;# 
  2060  058F                     	;# 
  2061  058F                     	;# 
  2062  0590                     	;# 
  2063  0591                     	;# 
  2064  0592                     	;# 
  2065  0593                     	;# 
  2066  060C                     	;# 
  2067  060D                     	;# 
  2068  060E                     	;# 
  2069  060F                     	;# 
  2070  0610                     	;# 
  2071  0611                     	;# 
  2072  0612                     	;# 
  2073  0613                     	;# 
  2074  0614                     	;# 
  2075  0616                     	;# 
  2076  0617                     	;# 
  2077  0618                     	;# 
  2078  0619                     	;# 
  2079  061A                     	;# 
  2080  061B                     	;# 
  2081  061C                     	;# 
  2082  061D                     	;# 
  2083  061E                     	;# 
  2084  068C                     	;# 
  2085  068D                     	;# 
  2086  068E                     	;# 
  2087  068F                     	;# 
  2088  0690                     	;# 
  2089  0691                     	;# 
  2090  0692                     	;# 
  2091  0693                     	;# 
  2092  0694                     	;# 
  2093  070C                     	;# 
  2094  070D                     	;# 
  2095  070E                     	;# 
  2096  070F                     	;# 
  2097  0710                     	;# 
  2098  0711                     	;# 
  2099  0712                     	;# 
  2100  0713                     	;# 
  2101  0714                     	;# 
  2102  0716                     	;# 
  2103  0717                     	;# 
  2104  0718                     	;# 
  2105  0719                     	;# 
  2106  071A                     	;# 
  2107  071B                     	;# 
  2108  071C                     	;# 
  2109  071D                     	;# 
  2110  071E                     	;# 
  2111  0796                     	;# 
  2112  0797                     	;# 
  2113  0798                     	;# 
  2114  0799                     	;# 
  2115  079A                     	;# 
  2116  079B                     	;# 
  2117  080C                     	;# 
  2118  080D                     	;# 
  2119  080E                     	;# 
  2120  080F                     	;# 
  2121  0810                     	;# 
  2122  0811                     	;# 
  2123  0812                     	;# 
  2124  0813                     	;# 
  2125  0814                     	;# 
  2126  081A                     	;# 
  2127  081B                     	;# 
  2128  081C                     	;# 
  2129  081D                     	;# 
  2130  081E                     	;# 
  2131  081F                     	;# 
  2132  088C                     	;# 
  2133  088D                     	;# 
  2134  088E                     	;# 
  2135  088F                     	;# 
  2136  0890                     	;# 
  2137  0891                     	;# 
  2138  0892                     	;# 
  2139  0893                     	;# 
  2140  0895                     	;# 
  2141  0896                     	;# 
  2142  0897                     	;# 
  2143  0898                     	;# 
  2144  0899                     	;# 
  2145  089A                     	;# 
  2146  089B                     	;# 
  2147  090C                     	;# 
  2148  090E                     	;# 
  2149  090F                     	;# 
  2150  091F                     	;# 
  2151  091F                     	;# 
  2152  098F                     	;# 
  2153  098F                     	;# 
  2154  0990                     	;# 
  2155  0991                     	;# 
  2156  0992                     	;# 
  2157  0993                     	;# 
  2158  0994                     	;# 
  2159  0995                     	;# 
  2160  0996                     	;# 
  2161  0997                     	;# 
  2162  0E0F                     	;# 
  2163  0E10                     	;# 
  2164  0E11                     	;# 
  2165  0E12                     	;# 
  2166  0E13                     	;# 
  2167  0E14                     	;# 
  2168  0E15                     	;# 
  2169  0E16                     	;# 
  2170  0E17                     	;# 
  2171  0E18                     	;# 
  2172  0E19                     	;# 
  2173  0E1A                     	;# 
  2174  0E1B                     	;# 
  2175  0E1C                     	;# 
  2176  0E1D                     	;# 
  2177  0E1E                     	;# 
  2178  0E1F                     	;# 
  2179  0E20                     	;# 
  2180  0E21                     	;# 
  2181  0E22                     	;# 
  2182  0E23                     	;# 
  2183  0E24                     	;# 
  2184  0E25                     	;# 
  2185  0E26                     	;# 
  2186  0E27                     	;# 
  2187  0E28                     	;# 
  2188  0E29                     	;# 
  2189  0E2A                     	;# 
  2190  0E2B                     	;# 
  2191  0E2C                     	;# 
  2192  0E2D                     	;# 
  2193  0E2E                     	;# 
  2194  0E2F                     	;# 
  2195  0E30                     	;# 
  2196  0E31                     	;# 
  2197  0E32                     	;# 
  2198  0E33                     	;# 
  2199  0E34                     	;# 
  2200  0E35                     	;# 
  2201  0E36                     	;# 
  2202  0E37                     	;# 
  2203  0E8F                     	;# 
  2204  0E90                     	;# 
  2205  0E91                     	;# 
  2206  0E92                     	;# 
  2207  0E93                     	;# 
  2208  0E94                     	;# 
  2209  0E95                     	;# 
  2210  0E96                     	;# 
  2211  0E97                     	;# 
  2212  0E9C                     	;# 
  2213  0E9D                     	;# 
  2214  0E9E                     	;# 
  2215  0EA1                     	;# 
  2216  0EA2                     	;# 
  2217  0EA3                     	;# 
  2218  0EA4                     	;# 
  2219  0EA5                     	;# 
  2220  0EA9                     	;# 
  2221  0EAA                     	;# 
  2222  0EAB                     	;# 
  2223  0EAC                     	;# 
  2224  0EB1                     	;# 
  2225  0EB2                     	;# 
  2226  0EB3                     	;# 
  2227  0EB8                     	;# 
  2228  0EB9                     	;# 
  2229  0EBA                     	;# 
  2230  0EBB                     	;# 
  2231  0EBC                     	;# 
  2232  0EBD                     	;# 
  2233  0EBE                     	;# 
  2234  0EC3                     	;# 
  2235  0EC5                     	;# 
  2236  0EC6                     	;# 
  2237  0EC7                     	;# 
  2238  0EC8                     	;# 
  2239  0EC9                     	;# 
  2240  0ECA                     	;# 
  2241  0ECB                     	;# 
  2242  0ECC                     	;# 
  2243  0F10                     	;# 
  2244  0F11                     	;# 
  2245  0F12                     	;# 
  2246  0F13                     	;# 
  2247  0F14                     	;# 
  2248  0F15                     	;# 
  2249  0F16                     	;# 
  2250  0F17                     	;# 
  2251  0F18                     	;# 
  2252  0F19                     	;# 
  2253  0F1A                     	;# 
  2254  0F1B                     	;# 
  2255  0F1C                     	;# 
  2256  0F1D                     	;# 
  2257  0F1E                     	;# 
  2258  0F1F                     	;# 
  2259  0F20                     	;# 
  2260  0F21                     	;# 
  2261  0F22                     	;# 
  2262  0F23                     	;# 
  2263  0F24                     	;# 
  2264  0F25                     	;# 
  2265  0F26                     	;# 
  2266  0F27                     	;# 
  2267  0F28                     	;# 
  2268  0F29                     	;# 
  2269  0F2A                     	;# 
  2270  0F2B                     	;# 
  2271  0F2C                     	;# 
  2272  0F2D                     	;# 
  2273  0F2E                     	;# 
  2274  0F2F                     	;# 
  2275  0F30                     	;# 
  2276  0F31                     	;# 
  2277  0F32                     	;# 
  2278  0F38                     	;# 
  2279  0F39                     	;# 
  2280  0F3A                     	;# 
  2281  0F3B                     	;# 
  2282  0F3C                     	;# 
  2283  0F3D                     	;# 
  2284  0F3E                     	;# 
  2285  0F3F                     	;# 
  2286  0F40                     	;# 
  2287  0F41                     	;# 
  2288  0F43                     	;# 
  2289  0F44                     	;# 
  2290  0F45                     	;# 
  2291  0F46                     	;# 
  2292  0F47                     	;# 
  2293  0F48                     	;# 
  2294  0F49                     	;# 
  2295  0F4A                     	;# 
  2296  0F4B                     	;# 
  2297  0F4C                     	;# 
  2298  0F4E                     	;# 
  2299  0F4F                     	;# 
  2300  0F50                     	;# 
  2301  0F51                     	;# 
  2302  0F52                     	;# 
  2303  0F53                     	;# 
  2304  0F54                     	;# 
  2305  0F55                     	;# 
  2306  0F56                     	;# 
  2307  0F57                     	;# 
  2308  0F59                     	;# 
  2309  0F5A                     	;# 
  2310  0F5B                     	;# 
  2311  0F5C                     	;# 
  2312  0F5D                     	;# 
  2313  0F61                     	;# 
  2314  0F62                     	;# 
  2315  0F64                     	;# 
  2316  0F65                     	;# 
  2317  0F66                     	;# 
  2318  0F67                     	;# 
  2319  0F68                     	;# 
  2320  0F69                     	;# 
  2321  0F6A                     	;# 
  2322  0F6B                     	;# 
  2323  0F6C                     	;# 
  2324  0F6D                     	;# 
  2325  0FE4                     	;# 
  2326  0FE5                     	;# 
  2327  0FE6                     	;# 
  2328  0FE7                     	;# 
  2329  0FE8                     	;# 
  2330  0FE9                     	;# 
  2331  0FEA                     	;# 
  2332  0FEB                     	;# 
  2333  0FED                     	;# 
  2334  0FEE                     	;# 
  2335  0FEF                     	;# 
  2336  0000                     	;# 
  2337  0001                     	;# 
  2338  0002                     	;# 
  2339  0003                     	;# 
  2340  0004                     	;# 
  2341  0005                     	;# 
  2342  0006                     	;# 
  2343  0007                     	;# 
  2344  0008                     	;# 
  2345  0009                     	;# 
  2346  000A                     	;# 
  2347  000B                     	;# 
  2348  000C                     	;# 
  2349  000D                     	;# 
  2350  000E                     	;# 
  2351  000F                     	;# 
  2352  0010                     	;# 
  2353  0011                     	;# 
  2354  0012                     	;# 
  2355  0013                     	;# 
  2356  0014                     	;# 
  2357  0015                     	;# 
  2358  0016                     	;# 
  2359  0017                     	;# 
  2360  0018                     	;# 
  2361  0019                     	;# 
  2362  001A                     	;# 
  2363  001C                     	;# 
  2364  001C                     	;# 
  2365  001D                     	;# 
  2366  001D                     	;# 
  2367  001E                     	;# 
  2368  001F                     	;# 
  2369  008C                     	;# 
  2370  008C                     	;# 
  2371  008D                     	;# 
  2372  008E                     	;# 
  2373  008E                     	;# 
  2374  008F                     	;# 
  2375  0090                     	;# 
  2376  0090                     	;# 
  2377  0091                     	;# 
  2378  0093                     	;# 
  2379  0094                     	;# 
  2380  0095                     	;# 
  2381  0096                     	;# 
  2382  0097                     	;# 
  2383  0098                     	;# 
  2384  0099                     	;# 
  2385  009A                     	;# 
  2386  009B                     	;# 
  2387  009C                     	;# 
  2388  009D                     	;# 
  2389  009E                     	;# 
  2390  010C                     	;# 
  2391  010D                     	;# 
  2392  010E                     	;# 
  2393  010E                     	;# 
  2394  010F                     	;# 
  2395  0110                     	;# 
  2396  0110                     	;# 
  2397  0111                     	;# 
  2398  0112                     	;# 
  2399  0112                     	;# 
  2400  0113                     	;# 
  2401  0114                     	;# 
  2402  0114                     	;# 
  2403  0115                     	;# 
  2404  0116                     	;# 
  2405  0116                     	;# 
  2406  0117                     	;# 
  2407  0119                     	;# 
  2408  0119                     	;# 
  2409  0119                     	;# 
  2410  011A                     	;# 
  2411  011A                     	;# 
  2412  011A                     	;# 
  2413  011B                     	;# 
  2414  011B                     	;# 
  2415  011B                     	;# 
  2416  011B                     	;# 
  2417  011B                     	;# 
  2418  011C                     	;# 
  2419  011C                     	;# 
  2420  011C                     	;# 
  2421  011D                     	;# 
  2422  011D                     	;# 
  2423  011D                     	;# 
  2424  011E                     	;# 
  2425  011E                     	;# 
  2426  011E                     	;# 
  2427  011F                     	;# 
  2428  011F                     	;# 
  2429  011F                     	;# 
  2430  011F                     	;# 
  2431  011F                     	;# 
  2432  018C                     	;# 
  2433  018D                     	;# 
  2434  018E                     	;# 
  2435  018F                     	;# 
  2436  0190                     	;# 
  2437  0191                     	;# 
  2438  0192                     	;# 
  2439  0196                     	;# 
  2440  0197                     	;# 
  2441  0198                     	;# 
  2442  0199                     	;# 
  2443  019A                     	;# 
  2444  019B                     	;# 
  2445  019C                     	;# 
  2446  020C                     	;# 
  2447  020C                     	;# 
  2448  020D                     	;# 
  2449  020E                     	;# 
  2450  020F                     	;# 
  2451  020F                     	;# 
  2452  0210                     	;# 
  2453  0210                     	;# 
  2454  0211                     	;# 
  2455  0211                     	;# 
  2456  0212                     	;# 
  2457  0212                     	;# 
  2458  0213                     	;# 
  2459  0214                     	;# 
  2460  0215                     	;# 
  2461  0215                     	;# 
  2462  0216                     	;# 
  2463  0216                     	;# 
  2464  0217                     	;# 
  2465  0217                     	;# 
  2466  0218                     	;# 
  2467  0218                     	;# 
  2468  0219                     	;# 
  2469  021A                     	;# 
  2470  021B                     	;# 
  2471  021B                     	;# 
  2472  021C                     	;# 
  2473  021C                     	;# 
  2474  021D                     	;# 
  2475  021D                     	;# 
  2476  021E                     	;# 
  2477  021F                     	;# 
  2478  028C                     	;# 
  2479  028C                     	;# 
  2480  028D                     	;# 
  2481  028D                     	;# 
  2482  028E                     	;# 
  2483  028F                     	;# 
  2484  0290                     	;# 
  2485  0290                     	;# 
  2486  0291                     	;# 
  2487  0292                     	;# 
  2488  0292                     	;# 
  2489  0293                     	;# 
  2490  0293                     	;# 
  2491  0294                     	;# 
  2492  0295                     	;# 
  2493  0296                     	;# 
  2494  0296                     	;# 
  2495  0297                     	;# 
  2496  0298                     	;# 
  2497  0298                     	;# 
  2498  0299                     	;# 
  2499  0299                     	;# 
  2500  029A                     	;# 
  2501  029B                     	;# 
  2502  029C                     	;# 
  2503  029C                     	;# 
  2504  029D                     	;# 
  2505  030C                     	;# 
  2506  030C                     	;# 
  2507  030D                     	;# 
  2508  030E                     	;# 
  2509  030F                     	;# 
  2510  0310                     	;# 
  2511  0310                     	;# 
  2512  0311                     	;# 
  2513  0312                     	;# 
  2514  0313                     	;# 
  2515  0314                     	;# 
  2516  0314                     	;# 
  2517  0315                     	;# 
  2518  0316                     	;# 
  2519  0317                     	;# 
  2520  0318                     	;# 
  2521  0318                     	;# 
  2522  0319                     	;# 
  2523  031A                     	;# 
  2524  031B                     	;# 
  2525  031C                     	;# 
  2526  031C                     	;# 
  2527  031D                     	;# 
  2528  031E                     	;# 
  2529  031F                     	;# 
  2530  038C                     	;# 
  2531  038C                     	;# 
  2532  038D                     	;# 
  2533  038E                     	;# 
  2534  0390                     	;# 
  2535  0390                     	;# 
  2536  0391                     	;# 
  2537  0392                     	;# 
  2538  040C                     	;# 
  2539  040D                     	;# 
  2540  040E                     	;# 
  2541  040F                     	;# 
  2542  0410                     	;# 
  2543  0411                     	;# 
  2544  0416                     	;# 
  2545  0416                     	;# 
  2546  0417                     	;# 
  2547  0418                     	;# 
  2548  0418                     	;# 
  2549  0419                     	;# 
  2550  041A                     	;# 
  2551  041A                     	;# 
  2552  041B                     	;# 
  2553  041C                     	;# 
  2554  041C                     	;# 
  2555  041D                     	;# 
  2556  041E                     	;# 
  2557  041F                     	;# 
  2558  048C                     	;# 
  2559  048C                     	;# 
  2560  048D                     	;# 
  2561  048E                     	;# 
  2562  048F                     	;# 
  2563  048F                     	;# 
  2564  0490                     	;# 
  2565  0491                     	;# 
  2566  0492                     	;# 
  2567  0492                     	;# 
  2568  0493                     	;# 
  2569  0494                     	;# 
  2570  0495                     	;# 
  2571  0495                     	;# 
  2572  0496                     	;# 
  2573  0497                     	;# 
  2574  0498                     	;# 
  2575  0499                     	;# 
  2576  049A                     	;# 
  2577  049B                     	;# 
  2578  049C                     	;# 
  2579  049D                     	;# 
  2580  050C                     	;# 
  2581  050C                     	;# 
  2582  050D                     	;# 
  2583  050E                     	;# 
  2584  050F                     	;# 
  2585  050F                     	;# 
  2586  0510                     	;# 
  2587  0511                     	;# 
  2588  0512                     	;# 
  2589  0512                     	;# 
  2590  0513                     	;# 
  2591  0514                     	;# 
  2592  0515                     	;# 
  2593  0515                     	;# 
  2594  0516                     	;# 
  2595  0517                     	;# 
  2596  0518                     	;# 
  2597  0519                     	;# 
  2598  051A                     	;# 
  2599  051B                     	;# 
  2600  051C                     	;# 
  2601  051D                     	;# 
  2602  058C                     	;# 
  2603  058C                     	;# 
  2604  058D                     	;# 
  2605  058E                     	;# 
  2606  058F                     	;# 
  2607  058F                     	;# 
  2608  0590                     	;# 
  2609  0591                     	;# 
  2610  0592                     	;# 
  2611  0593                     	;# 
  2612  060C                     	;# 
  2613  060D                     	;# 
  2614  060E                     	;# 
  2615  060F                     	;# 
  2616  0610                     	;# 
  2617  0611                     	;# 
  2618  0612                     	;# 
  2619  0613                     	;# 
  2620  0614                     	;# 
  2621  0616                     	;# 
  2622  0617                     	;# 
  2623  0618                     	;# 
  2624  0619                     	;# 
  2625  061A                     	;# 
  2626  061B                     	;# 
  2627  061C                     	;# 
  2628  061D                     	;# 
  2629  061E                     	;# 
  2630  068C                     	;# 
  2631  068D                     	;# 
  2632  068E                     	;# 
  2633  068F                     	;# 
  2634  0690                     	;# 
  2635  0691                     	;# 
  2636  0692                     	;# 
  2637  0693                     	;# 
  2638  0694                     	;# 
  2639  070C                     	;# 
  2640  070D                     	;# 
  2641  070E                     	;# 
  2642  070F                     	;# 
  2643  0710                     	;# 
  2644  0711                     	;# 
  2645  0712                     	;# 
  2646  0713                     	;# 
  2647  0714                     	;# 
  2648  0716                     	;# 
  2649  0717                     	;# 
  2650  0718                     	;# 
  2651  0719                     	;# 
  2652  071A                     	;# 
  2653  071B                     	;# 
  2654  071C                     	;# 
  2655  071D                     	;# 
  2656  071E                     	;# 
  2657  0796                     	;# 
  2658  0797                     	;# 
  2659  0798                     	;# 
  2660  0799                     	;# 
  2661  079A                     	;# 
  2662  079B                     	;# 
  2663  080C                     	;# 
  2664  080D                     	;# 
  2665  080E                     	;# 
  2666  080F                     	;# 
  2667  0810                     	;# 
  2668  0811                     	;# 
  2669  0812                     	;# 
  2670  0813                     	;# 
  2671  0814                     	;# 
  2672  081A                     	;# 
  2673  081B                     	;# 
  2674  081C                     	;# 
  2675  081D                     	;# 
  2676  081E                     	;# 
  2677  081F                     	;# 
  2678  088C                     	;# 
  2679  088D                     	;# 
  2680  088E                     	;# 
  2681  088F                     	;# 
  2682  0890                     	;# 
  2683  0891                     	;# 
  2684  0892                     	;# 
  2685  0893                     	;# 
  2686  0895                     	;# 
  2687  0896                     	;# 
  2688  0897                     	;# 
  2689  0898                     	;# 
  2690  0899                     	;# 
  2691  089A                     	;# 
  2692  089B                     	;# 
  2693  090C                     	;# 
  2694  090E                     	;# 
  2695  090F                     	;# 
  2696  091F                     	;# 
  2697  091F                     	;# 
  2698  098F                     	;# 
  2699  098F                     	;# 
  2700  0990                     	;# 
  2701  0991                     	;# 
  2702  0992                     	;# 
  2703  0993                     	;# 
  2704  0994                     	;# 
  2705  0995                     	;# 
  2706  0996                     	;# 
  2707  0997                     	;# 
  2708  0E0F                     	;# 
  2709  0E10                     	;# 
  2710  0E11                     	;# 
  2711  0E12                     	;# 
  2712  0E13                     	;# 
  2713  0E14                     	;# 
  2714  0E15                     	;# 
  2715  0E16                     	;# 
  2716  0E17                     	;# 
  2717  0E18                     	;# 
  2718  0E19                     	;# 
  2719  0E1A                     	;# 
  2720  0E1B                     	;# 
  2721  0E1C                     	;# 
  2722  0E1D                     	;# 
  2723  0E1E                     	;# 
  2724  0E1F                     	;# 
  2725  0E20                     	;# 
  2726  0E21                     	;# 
  2727  0E22                     	;# 
  2728  0E23                     	;# 
  2729  0E24                     	;# 
  2730  0E25                     	;# 
  2731  0E26                     	;# 
  2732  0E27                     	;# 
  2733  0E28                     	;# 
  2734  0E29                     	;# 
  2735  0E2A                     	;# 
  2736  0E2B                     	;# 
  2737  0E2C                     	;# 
  2738  0E2D                     	;# 
  2739  0E2E                     	;# 
  2740  0E2F                     	;# 
  2741  0E30                     	;# 
  2742  0E31                     	;# 
  2743  0E32                     	;# 
  2744  0E33                     	;# 
  2745  0E34                     	;# 
  2746  0E35                     	;# 
  2747  0E36                     	;# 
  2748  0E37                     	;# 
  2749  0E8F                     	;# 
  2750  0E90                     	;# 
  2751  0E91                     	;# 
  2752  0E92                     	;# 
  2753  0E93                     	;# 
  2754  0E94                     	;# 
  2755  0E95                     	;# 
  2756  0E96                     	;# 
  2757  0E97                     	;# 
  2758  0E9C                     	;# 
  2759  0E9D                     	;# 
  2760  0E9E                     	;# 
  2761  0EA1                     	;# 
  2762  0EA2                     	;# 
  2763  0EA3                     	;# 
  2764  0EA4                     	;# 
  2765  0EA5                     	;# 
  2766  0EA9                     	;# 
  2767  0EAA                     	;# 
  2768  0EAB                     	;# 
  2769  0EAC                     	;# 
  2770  0EB1                     	;# 
  2771  0EB2                     	;# 
  2772  0EB3                     	;# 
  2773  0EB8                     	;# 
  2774  0EB9                     	;# 
  2775  0EBA                     	;# 
  2776  0EBB                     	;# 
  2777  0EBC                     	;# 
  2778  0EBD                     	;# 
  2779  0EBE                     	;# 
  2780  0EC3                     	;# 
  2781  0EC5                     	;# 
  2782  0EC6                     	;# 
  2783  0EC7                     	;# 
  2784  0EC8                     	;# 
  2785  0EC9                     	;# 
  2786  0ECA                     	;# 
  2787  0ECB                     	;# 
  2788  0ECC                     	;# 
  2789  0F10                     	;# 
  2790  0F11                     	;# 
  2791  0F12                     	;# 
  2792  0F13                     	;# 
  2793  0F14                     	;# 
  2794  0F15                     	;# 
  2795  0F16                     	;# 
  2796  0F17                     	;# 
  2797  0F18                     	;# 
  2798  0F19                     	;# 
  2799  0F1A                     	;# 
  2800  0F1B                     	;# 
  2801  0F1C                     	;# 
  2802  0F1D                     	;# 
  2803  0F1E                     	;# 
  2804  0F1F                     	;# 
  2805  0F20                     	;# 
  2806  0F21                     	;# 
  2807  0F22                     	;# 
  2808  0F23                     	;# 
  2809  0F24                     	;# 
  2810  0F25                     	;# 
  2811  0F26                     	;# 
  2812  0F27                     	;# 
  2813  0F28                     	;# 
  2814  0F29                     	;# 
  2815  0F2A                     	;# 
  2816  0F2B                     	;# 
  2817  0F2C                     	;# 
  2818  0F2D                     	;# 
  2819  0F2E                     	;# 
  2820  0F2F                     	;# 
  2821  0F30                     	;# 
  2822  0F31                     	;# 
  2823  0F32                     	;# 
  2824  0F38                     	;# 
  2825  0F39                     	;# 
  2826  0F3A                     	;# 
  2827  0F3B                     	;# 
  2828  0F3C                     	;# 
  2829  0F3D                     	;# 
  2830  0F3E                     	;# 
  2831  0F3F                     	;# 
  2832  0F40                     	;# 
  2833  0F41                     	;# 
  2834  0F43                     	;# 
  2835  0F44                     	;# 
  2836  0F45                     	;# 
  2837  0F46                     	;# 
  2838  0F47                     	;# 
  2839  0F48                     	;# 
  2840  0F49                     	;# 
  2841  0F4A                     	;# 
  2842  0F4B                     	;# 
  2843  0F4C                     	;# 
  2844  0F4E                     	;# 
  2845  0F4F                     	;# 
  2846  0F50                     	;# 
  2847  0F51                     	;# 
  2848  0F52                     	;# 
  2849  0F53                     	;# 
  2850  0F54                     	;# 
  2851  0F55                     	;# 
  2852  0F56                     	;# 
  2853  0F57                     	;# 
  2854  0F59                     	;# 
  2855  0F5A                     	;# 
  2856  0F5B                     	;# 
  2857  0F5C                     	;# 
  2858  0F5D                     	;# 
  2859  0F61                     	;# 
  2860  0F62                     	;# 
  2861  0F64                     	;# 
  2862  0F65                     	;# 
  2863  0F66                     	;# 
  2864  0F67                     	;# 
  2865  0F68                     	;# 
  2866  0F69                     	;# 
  2867  0F6A                     	;# 
  2868  0F6B                     	;# 
  2869  0F6C                     	;# 
  2870  0F6D                     	;# 
  2871  0FE4                     	;# 
  2872  0FE5                     	;# 
  2873  0FE6                     	;# 
  2874  0FE7                     	;# 
  2875  0FE8                     	;# 
  2876  0FE9                     	;# 
  2877  0FEA                     	;# 
  2878  0FEB                     	;# 
  2879  0FED                     	;# 
  2880  0FEE                     	;# 
  2881  0FEF                     	;# 
  2882  0000                     	;# 
  2883  0001                     	;# 
  2884  0002                     	;# 
  2885  0003                     	;# 
  2886  0004                     	;# 
  2887  0005                     	;# 
  2888  0006                     	;# 
  2889  0007                     	;# 
  2890  0008                     	;# 
  2891  0009                     	;# 
  2892  000A                     	;# 
  2893  000B                     	;# 
  2894  000C                     	;# 
  2895  000D                     	;# 
  2896  000E                     	;# 
  2897  000F                     	;# 
  2898  0010                     	;# 
  2899  0011                     	;# 
  2900  0012                     	;# 
  2901  0013                     	;# 
  2902  0014                     	;# 
  2903  0015                     	;# 
  2904  0016                     	;# 
  2905  0017                     	;# 
  2906  0018                     	;# 
  2907  0019                     	;# 
  2908  001A                     	;# 
  2909  001C                     	;# 
  2910  001C                     	;# 
  2911  001D                     	;# 
  2912  001D                     	;# 
  2913  001E                     	;# 
  2914  001F                     	;# 
  2915  008C                     	;# 
  2916  008C                     	;# 
  2917  008D                     	;# 
  2918  008E                     	;# 
  2919  008E                     	;# 
  2920  008F                     	;# 
  2921  0090                     	;# 
  2922  0090                     	;# 
  2923  0091                     	;# 
  2924  0093                     	;# 
  2925  0094                     	;# 
  2926  0095                     	;# 
  2927  0096                     	;# 
  2928  0097                     	;# 
  2929  0098                     	;# 
  2930  0099                     	;# 
  2931  009A                     	;# 
  2932  009B                     	;# 
  2933  009C                     	;# 
  2934  009D                     	;# 
  2935  009E                     	;# 
  2936  010C                     	;# 
  2937  010D                     	;# 
  2938  010E                     	;# 
  2939  010E                     	;# 
  2940  010F                     	;# 
  2941  0110                     	;# 
  2942  0110                     	;# 
  2943  0111                     	;# 
  2944  0112                     	;# 
  2945  0112                     	;# 
  2946  0113                     	;# 
  2947  0114                     	;# 
  2948  0114                     	;# 
  2949  0115                     	;# 
  2950  0116                     	;# 
  2951  0116                     	;# 
  2952  0117                     	;# 
  2953  0119                     	;# 
  2954  0119                     	;# 
  2955  0119                     	;# 
  2956  011A                     	;# 
  2957  011A                     	;# 
  2958  011A                     	;# 
  2959  011B                     	;# 
  2960  011B                     	;# 
  2961  011B                     	;# 
  2962  011B                     	;# 
  2963  011B                     	;# 
  2964  011C                     	;# 
  2965  011C                     	;# 
  2966  011C                     	;# 
  2967  011D                     	;# 
  2968  011D                     	;# 
  2969  011D                     	;# 
  2970  011E                     	;# 
  2971  011E                     	;# 
  2972  011E                     	;# 
  2973  011F                     	;# 
  2974  011F                     	;# 
  2975  011F                     	;# 
  2976  011F                     	;# 
  2977  011F                     	;# 
  2978  018C                     	;# 
  2979  018D                     	;# 
  2980  018E                     	;# 
  2981  018F                     	;# 
  2982  0190                     	;# 
  2983  0191                     	;# 
  2984  0192                     	;# 
  2985  0196                     	;# 
  2986  0197                     	;# 
  2987  0198                     	;# 
  2988  0199                     	;# 
  2989  019A                     	;# 
  2990  019B                     	;# 
  2991  019C                     	;# 
  2992  020C                     	;# 
  2993  020C                     	;# 
  2994  020D                     	;# 
  2995  020E                     	;# 
  2996  020F                     	;# 
  2997  020F                     	;# 
  2998  0210                     	;# 
  2999  0210                     	;# 
  3000  0211                     	;# 
  3001  0211                     	;# 
  3002  0212                     	;# 
  3003  0212                     	;# 
  3004  0213                     	;# 
  3005  0214                     	;# 
  3006  0215                     	;# 
  3007  0215                     	;# 
  3008  0216                     	;# 
  3009  0216                     	;# 
  3010  0217                     	;# 
  3011  0217                     	;# 
  3012  0218                     	;# 
  3013  0218                     	;# 
  3014  0219                     	;# 
  3015  021A                     	;# 
  3016  021B                     	;# 
  3017  021B                     	;# 
  3018  021C                     	;# 
  3019  021C                     	;# 
  3020  021D                     	;# 
  3021  021D                     	;# 
  3022  021E                     	;# 
  3023  021F                     	;# 
  3024  028C                     	;# 
  3025  028C                     	;# 
  3026  028D                     	;# 
  3027  028D                     	;# 
  3028  028E                     	;# 
  3029  028F                     	;# 
  3030  0290                     	;# 
  3031  0290                     	;# 
  3032  0291                     	;# 
  3033  0292                     	;# 
  3034  0292                     	;# 
  3035  0293                     	;# 
  3036  0293                     	;# 
  3037  0294                     	;# 
  3038  0295                     	;# 
  3039  0296                     	;# 
  3040  0296                     	;# 
  3041  0297                     	;# 
  3042  0298                     	;# 
  3043  0298                     	;# 
  3044  0299                     	;# 
  3045  0299                     	;# 
  3046  029A                     	;# 
  3047  029B                     	;# 
  3048  029C                     	;# 
  3049  029C                     	;# 
  3050  029D                     	;# 
  3051  030C                     	;# 
  3052  030C                     	;# 
  3053  030D                     	;# 
  3054  030E                     	;# 
  3055  030F                     	;# 
  3056  0310                     	;# 
  3057  0310                     	;# 
  3058  0311                     	;# 
  3059  0312                     	;# 
  3060  0313                     	;# 
  3061  0314                     	;# 
  3062  0314                     	;# 
  3063  0315                     	;# 
  3064  0316                     	;# 
  3065  0317                     	;# 
  3066  0318                     	;# 
  3067  0318                     	;# 
  3068  0319                     	;# 
  3069  031A                     	;# 
  3070  031B                     	;# 
  3071  031C                     	;# 
  3072  031C                     	;# 
  3073  031D                     	;# 
  3074  031E                     	;# 
  3075  031F                     	;# 
  3076  038C                     	;# 
  3077  038C                     	;# 
  3078  038D                     	;# 
  3079  038E                     	;# 
  3080  0390                     	;# 
  3081  0390                     	;# 
  3082  0391                     	;# 
  3083  0392                     	;# 
  3084  040C                     	;# 
  3085  040D                     	;# 
  3086  040E                     	;# 
  3087  040F                     	;# 
  3088  0410                     	;# 
  3089  0411                     	;# 
  3090  0416                     	;# 
  3091  0416                     	;# 
  3092  0417                     	;# 
  3093  0418                     	;# 
  3094  0418                     	;# 
  3095  0419                     	;# 
  3096  041A                     	;# 
  3097  041A                     	;# 
  3098  041B                     	;# 
  3099  041C                     	;# 
  3100  041C                     	;# 
  3101  041D                     	;# 
  3102  041E                     	;# 
  3103  041F                     	;# 
  3104  048C                     	;# 
  3105  048C                     	;# 
  3106  048D                     	;# 
  3107  048E                     	;# 
  3108  048F                     	;# 
  3109  048F                     	;# 
  3110  0490                     	;# 
  3111  0491                     	;# 
  3112  0492                     	;# 
  3113  0492                     	;# 
  3114  0493                     	;# 
  3115  0494                     	;# 
  3116  0495                     	;# 
  3117  0495                     	;# 
  3118  0496                     	;# 
  3119  0497                     	;# 
  3120  0498                     	;# 
  3121  0499                     	;# 
  3122  049A                     	;# 
  3123  049B                     	;# 
  3124  049C                     	;# 
  3125  049D                     	;# 
  3126  050C                     	;# 
  3127  050C                     	;# 
  3128  050D                     	;# 
  3129  050E                     	;# 
  3130  050F                     	;# 
  3131  050F                     	;# 
  3132  0510                     	;# 
  3133  0511                     	;# 
  3134  0512                     	;# 
  3135  0512                     	;# 
  3136  0513                     	;# 
  3137  0514                     	;# 
  3138  0515                     	;# 
  3139  0515                     	;# 
  3140  0516                     	;# 
  3141  0517                     	;# 
  3142  0518                     	;# 
  3143  0519                     	;# 
  3144  051A                     	;# 
  3145  051B                     	;# 
  3146  051C                     	;# 
  3147  051D                     	;# 
  3148  058C                     	;# 
  3149  058C                     	;# 
  3150  058D                     	;# 
  3151  058E                     	;# 
  3152  058F                     	;# 
  3153  058F                     	;# 
  3154  0590                     	;# 
  3155  0591                     	;# 
  3156  0592                     	;# 
  3157  0593                     	;# 
  3158  060C                     	;# 
  3159  060D                     	;# 
  3160  060E                     	;# 
  3161  060F                     	;# 
  3162  0610                     	;# 
  3163  0611                     	;# 
  3164  0612                     	;# 
  3165  0613                     	;# 
  3166  0614                     	;# 
  3167  0616                     	;# 
  3168  0617                     	;# 
  3169  0618                     	;# 
  3170  0619                     	;# 
  3171  061A                     	;# 
  3172  061B                     	;# 
  3173  061C                     	;# 
  3174  061D                     	;# 
  3175  061E                     	;# 
  3176  068C                     	;# 
  3177  068D                     	;# 
  3178  068E                     	;# 
  3179  068F                     	;# 
  3180  0690                     	;# 
  3181  0691                     	;# 
  3182  0692                     	;# 
  3183  0693                     	;# 
  3184  0694                     	;# 
  3185  070C                     	;# 
  3186  070D                     	;# 
  3187  070E                     	;# 
  3188  070F                     	;# 
  3189  0710                     	;# 
  3190  0711                     	;# 
  3191  0712                     	;# 
  3192  0713                     	;# 
  3193  0714                     	;# 
  3194  0716                     	;# 
  3195  0717                     	;# 
  3196  0718                     	;# 
  3197  0719                     	;# 
  3198  071A                     	;# 
  3199  071B                     	;# 
  3200  071C                     	;# 
  3201  071D                     	;# 
  3202  071E                     	;# 
  3203  0796                     	;# 
  3204  0797                     	;# 
  3205  0798                     	;# 
  3206  0799                     	;# 
  3207  079A                     	;# 
  3208  079B                     	;# 
  3209  080C                     	;# 
  3210  080D                     	;# 
  3211  080E                     	;# 
  3212  080F                     	;# 
  3213  0810                     	;# 
  3214  0811                     	;# 
  3215  0812                     	;# 
  3216  0813                     	;# 
  3217  0814                     	;# 
  3218  081A                     	;# 
  3219  081B                     	;# 
  3220  081C                     	;# 
  3221  081D                     	;# 
  3222  081E                     	;# 
  3223  081F                     	;# 
  3224  088C                     	;# 
  3225  088D                     	;# 
  3226  088E                     	;# 
  3227  088F                     	;# 
  3228  0890                     	;# 
  3229  0891                     	;# 
  3230  0892                     	;# 
  3231  0893                     	;# 
  3232  0895                     	;# 
  3233  0896                     	;# 
  3234  0897                     	;# 
  3235  0898                     	;# 
  3236  0899                     	;# 
  3237  089A                     	;# 
  3238  089B                     	;# 
  3239  090C                     	;# 
  3240  090E                     	;# 
  3241  090F                     	;# 
  3242  091F                     	;# 
  3243  091F                     	;# 
  3244  098F                     	;# 
  3245  098F                     	;# 
  3246  0990                     	;# 
  3247  0991                     	;# 
  3248  0992                     	;# 
  3249  0993                     	;# 
  3250  0994                     	;# 
  3251  0995                     	;# 
  3252  0996                     	;# 
  3253  0997                     	;# 
  3254  0E0F                     	;# 
  3255  0E10                     	;# 
  3256  0E11                     	;# 
  3257  0E12                     	;# 
  3258  0E13                     	;# 
  3259  0E14                     	;# 
  3260  0E15                     	;# 
  3261  0E16                     	;# 
  3262  0E17                     	;# 
  3263  0E18                     	;# 
  3264  0E19                     	;# 
  3265  0E1A                     	;# 
  3266  0E1B                     	;# 
  3267  0E1C                     	;# 
  3268  0E1D                     	;# 
  3269  0E1E                     	;# 
  3270  0E1F                     	;# 
  3271  0E20                     	;# 
  3272  0E21                     	;# 
  3273  0E22                     	;# 
  3274  0E23                     	;# 
  3275  0E24                     	;# 
  3276  0E25                     	;# 
  3277  0E26                     	;# 
  3278  0E27                     	;# 
  3279  0E28                     	;# 
  3280  0E29                     	;# 
  3281  0E2A                     	;# 
  3282  0E2B                     	;# 
  3283  0E2C                     	;# 
  3284  0E2D                     	;# 
  3285  0E2E                     	;# 
  3286  0E2F                     	;# 
  3287  0E30                     	;# 
  3288  0E31                     	;# 
  3289  0E32                     	;# 
  3290  0E33                     	;# 
  3291  0E34                     	;# 
  3292  0E35                     	;# 
  3293  0E36                     	;# 
  3294  0E37                     	;# 
  3295  0E8F                     	;# 
  3296  0E90                     	;# 
  3297  0E91                     	;# 
  3298  0E92                     	;# 
  3299  0E93                     	;# 
  3300  0E94                     	;# 
  3301  0E95                     	;# 
  3302  0E96                     	;# 
  3303  0E97                     	;# 
  3304  0E9C                     	;# 
  3305  0E9D                     	;# 
  3306  0E9E                     	;# 
  3307  0EA1                     	;# 
  3308  0EA2                     	;# 
  3309  0EA3                     	;# 
  3310  0EA4                     	;# 
  3311  0EA5                     	;# 
  3312  0EA9                     	;# 
  3313  0EAA                     	;# 
  3314  0EAB                     	;# 
  3315  0EAC                     	;# 
  3316  0EB1                     	;# 
  3317  0EB2                     	;# 
  3318  0EB3                     	;# 
  3319  0EB8                     	;# 
  3320  0EB9                     	;# 
  3321  0EBA                     	;# 
  3322  0EBB                     	;# 
  3323  0EBC                     	;# 
  3324  0EBD                     	;# 
  3325  0EBE                     	;# 
  3326  0EC3                     	;# 
  3327  0EC5                     	;# 
  3328  0EC6                     	;# 
  3329  0EC7                     	;# 
  3330  0EC8                     	;# 
  3331  0EC9                     	;# 
  3332  0ECA                     	;# 
  3333  0ECB                     	;# 
  3334  0ECC                     	;# 
  3335  0F10                     	;# 
  3336  0F11                     	;# 
  3337  0F12                     	;# 
  3338  0F13                     	;# 
  3339  0F14                     	;# 
  3340  0F15                     	;# 
  3341  0F16                     	;# 
  3342  0F17                     	;# 
  3343  0F18                     	;# 
  3344  0F19                     	;# 
  3345  0F1A                     	;# 
  3346  0F1B                     	;# 
  3347  0F1C                     	;# 
  3348  0F1D                     	;# 
  3349  0F1E                     	;# 
  3350  0F1F                     	;# 
  3351  0F20                     	;# 
  3352  0F21                     	;# 
  3353  0F22                     	;# 
  3354  0F23                     	;# 
  3355  0F24                     	;# 
  3356  0F25                     	;# 
  3357  0F26                     	;# 
  3358  0F27                     	;# 
  3359  0F28                     	;# 
  3360  0F29                     	;# 
  3361  0F2A                     	;# 
  3362  0F2B                     	;# 
  3363  0F2C                     	;# 
  3364  0F2D                     	;# 
  3365  0F2E                     	;# 
  3366  0F2F                     	;# 
  3367  0F30                     	;# 
  3368  0F31                     	;# 
  3369  0F32                     	;# 
  3370  0F38                     	;# 
  3371  0F39                     	;# 
  3372  0F3A                     	;# 
  3373  0F3B                     	;# 
  3374  0F3C                     	;# 
  3375  0F3D                     	;# 
  3376  0F3E                     	;# 
  3377  0F3F                     	;# 
  3378  0F40                     	;# 
  3379  0F41                     	;# 
  3380  0F43                     	;# 
  3381  0F44                     	;# 
  3382  0F45                     	;# 
  3383  0F46                     	;# 
  3384  0F47                     	;# 
  3385  0F48                     	;# 
  3386  0F49                     	;# 
  3387  0F4A                     	;# 
  3388  0F4B                     	;# 
  3389  0F4C                     	;# 
  3390  0F4E                     	;# 
  3391  0F4F                     	;# 
  3392  0F50                     	;# 
  3393  0F51                     	;# 
  3394  0F52                     	;# 
  3395  0F53                     	;# 
  3396  0F54                     	;# 
  3397  0F55                     	;# 
  3398  0F56                     	;# 
  3399  0F57                     	;# 
  3400  0F59                     	;# 
  3401  0F5A                     	;# 
  3402  0F5B                     	;# 
  3403  0F5C                     	;# 
  3404  0F5D                     	;# 
  3405  0F61                     	;# 
  3406  0F62                     	;# 
  3407  0F64                     	;# 
  3408  0F65                     	;# 
  3409  0F66                     	;# 
  3410  0F67                     	;# 
  3411  0F68                     	;# 
  3412  0F69                     	;# 
  3413  0F6A                     	;# 
  3414  0F6B                     	;# 
  3415  0F6C                     	;# 
  3416  0F6D                     	;# 
  3417  0FE4                     	;# 
  3418  0FE5                     	;# 
  3419  0FE6                     	;# 
  3420  0FE7                     	;# 
  3421  0FE8                     	;# 
  3422  0FE9                     	;# 
  3423  0FEA                     	;# 
  3424  0FEB                     	;# 
  3425  0FED                     	;# 
  3426  0FEE                     	;# 
  3427  0FEF                     	;# 
  3428  0000                     	;# 
  3429  0001                     	;# 
  3430  0002                     	;# 
  3431  0003                     	;# 
  3432  0004                     	;# 
  3433  0005                     	;# 
  3434  0006                     	;# 
  3435  0007                     	;# 
  3436  0008                     	;# 
  3437  0009                     	;# 
  3438  000A                     	;# 
  3439  000B                     	;# 
  3440  000C                     	;# 
  3441  000D                     	;# 
  3442  000E                     	;# 
  3443  000F                     	;# 
  3444  0010                     	;# 
  3445  0011                     	;# 
  3446  0012                     	;# 
  3447  0013                     	;# 
  3448  0014                     	;# 
  3449  0015                     	;# 
  3450  0016                     	;# 
  3451  0017                     	;# 
  3452  0018                     	;# 
  3453  0019                     	;# 
  3454  001A                     	;# 
  3455  001C                     	;# 
  3456  001C                     	;# 
  3457  001D                     	;# 
  3458  001D                     	;# 
  3459  001E                     	;# 
  3460  001F                     	;# 
  3461  008C                     	;# 
  3462  008C                     	;# 
  3463  008D                     	;# 
  3464  008E                     	;# 
  3465  008E                     	;# 
  3466  008F                     	;# 
  3467  0090                     	;# 
  3468  0090                     	;# 
  3469  0091                     	;# 
  3470  0093                     	;# 
  3471  0094                     	;# 
  3472  0095                     	;# 
  3473  0096                     	;# 
  3474  0097                     	;# 
  3475  0098                     	;# 
  3476  0099                     	;# 
  3477  009A                     	;# 
  3478  009B                     	;# 
  3479  009C                     	;# 
  3480  009D                     	;# 
  3481  009E                     	;# 
  3482  010C                     	;# 
  3483  010D                     	;# 
  3484  010E                     	;# 
  3485  010E                     	;# 
  3486  010F                     	;# 
  3487  0110                     	;# 
  3488  0110                     	;# 
  3489  0111                     	;# 
  3490  0112                     	;# 
  3491  0112                     	;# 
  3492  0113                     	;# 
  3493  0114                     	;# 
  3494  0114                     	;# 
  3495  0115                     	;# 
  3496  0116                     	;# 
  3497  0116                     	;# 
  3498  0117                     	;# 
  3499  0119                     	;# 
  3500  0119                     	;# 
  3501  0119                     	;# 
  3502  011A                     	;# 
  3503  011A                     	;# 
  3504  011A                     	;# 
  3505  011B                     	;# 
  3506  011B                     	;# 
  3507  011B                     	;# 
  3508  011B                     	;# 
  3509  011B                     	;# 
  3510  011C                     	;# 
  3511  011C                     	;# 
  3512  011C                     	;# 
  3513  011D                     	;# 
  3514  011D                     	;# 
  3515  011D                     	;# 
  3516  011E                     	;# 
  3517  011E                     	;# 
  3518  011E                     	;# 
  3519  011F                     	;# 
  3520  011F                     	;# 
  3521  011F                     	;# 
  3522  011F                     	;# 
  3523  011F                     	;# 
  3524  018C                     	;# 
  3525  018D                     	;# 
  3526  018E                     	;# 
  3527  018F                     	;# 
  3528  0190                     	;# 
  3529  0191                     	;# 
  3530  0192                     	;# 
  3531  0196                     	;# 
  3532  0197                     	;# 
  3533  0198                     	;# 
  3534  0199                     	;# 
  3535  019A                     	;# 
  3536  019B                     	;# 
  3537  019C                     	;# 
  3538  020C                     	;# 
  3539  020C                     	;# 
  3540  020D                     	;# 
  3541  020E                     	;# 
  3542  020F                     	;# 
  3543  020F                     	;# 
  3544  0210                     	;# 
  3545  0210                     	;# 
  3546  0211                     	;# 
  3547  0211                     	;# 
  3548  0212                     	;# 
  3549  0212                     	;# 
  3550  0213                     	;# 
  3551  0214                     	;# 
  3552  0215                     	;# 
  3553  0215                     	;# 
  3554  0216                     	;# 
  3555  0216                     	;# 
  3556  0217                     	;# 
  3557  0217                     	;# 
  3558  0218                     	;# 
  3559  0218                     	;# 
  3560  0219                     	;# 
  3561  021A                     	;# 
  3562  021B                     	;# 
  3563  021B                     	;# 
  3564  021C                     	;# 
  3565  021C                     	;# 
  3566  021D                     	;# 
  3567  021D                     	;# 
  3568  021E                     	;# 
  3569  021F                     	;# 
  3570  028C                     	;# 
  3571  028C                     	;# 
  3572  028D                     	;# 
  3573  028D                     	;# 
  3574  028E                     	;# 
  3575  028F                     	;# 
  3576  0290                     	;# 
  3577  0290                     	;# 
  3578  0291                     	;# 
  3579  0292                     	;# 
  3580  0292                     	;# 
  3581  0293                     	;# 
  3582  0293                     	;# 
  3583  0294                     	;# 
  3584  0295                     	;# 
  3585  0296                     	;# 
  3586  0296                     	;# 
  3587  0297                     	;# 
  3588  0298                     	;# 
  3589  0298                     	;# 
  3590  0299                     	;# 
  3591  0299                     	;# 
  3592  029A                     	;# 
  3593  029B                     	;# 
  3594  029C                     	;# 
  3595  029C                     	;# 
  3596  029D                     	;# 
  3597  030C                     	;# 
  3598  030C                     	;# 
  3599  030D                     	;# 
  3600  030E                     	;# 
  3601  030F                     	;# 
  3602  0310                     	;# 
  3603  0310                     	;# 
  3604  0311                     	;# 
  3605  0312                     	;# 
  3606  0313                     	;# 
  3607  0314                     	;# 
  3608  0314                     	;# 
  3609  0315                     	;# 
  3610  0316                     	;# 
  3611  0317                     	;# 
  3612  0318                     	;# 
  3613  0318                     	;# 
  3614  0319                     	;# 
  3615  031A                     	;# 
  3616  031B                     	;# 
  3617  031C                     	;# 
  3618  031C                     	;# 
  3619  031D                     	;# 
  3620  031E                     	;# 
  3621  031F                     	;# 
  3622  038C                     	;# 
  3623  038C                     	;# 
  3624  038D                     	;# 
  3625  038E                     	;# 
  3626  0390                     	;# 
  3627  0390                     	;# 
  3628  0391                     	;# 
  3629  0392                     	;# 
  3630  040C                     	;# 
  3631  040D                     	;# 
  3632  040E                     	;# 
  3633  040F                     	;# 
  3634  0410                     	;# 
  3635  0411                     	;# 
  3636  0416                     	;# 
  3637  0416                     	;# 
  3638  0417                     	;# 
  3639  0418                     	;# 
  3640  0418                     	;# 
  3641  0419                     	;# 
  3642  041A                     	;# 
  3643  041A                     	;# 
  3644  041B                     	;# 
  3645  041C                     	;# 
  3646  041C                     	;# 
  3647  041D                     	;# 
  3648  041E                     	;# 
  3649  041F                     	;# 
  3650  048C                     	;# 
  3651  048C                     	;# 
  3652  048D                     	;# 
  3653  048E                     	;# 
  3654  048F                     	;# 
  3655  048F                     	;# 
  3656  0490                     	;# 
  3657  0491                     	;# 
  3658  0492                     	;# 
  3659  0492                     	;# 
  3660  0493                     	;# 
  3661  0494                     	;# 
  3662  0495                     	;# 
  3663  0495                     	;# 
  3664  0496                     	;# 
  3665  0497                     	;# 
  3666  0498                     	;# 
  3667  0499                     	;# 
  3668  049A                     	;# 
  3669  049B                     	;# 
  3670  049C                     	;# 
  3671  049D                     	;# 
  3672  050C                     	;# 
  3673  050C                     	;# 
  3674  050D                     	;# 
  3675  050E                     	;# 
  3676  050F                     	;# 
  3677  050F                     	;# 
  3678  0510                     	;# 
  3679  0511                     	;# 
  3680  0512                     	;# 
  3681  0512                     	;# 
  3682  0513                     	;# 
  3683  0514                     	;# 
  3684  0515                     	;# 
  3685  0515                     	;# 
  3686  0516                     	;# 
  3687  0517                     	;# 
  3688  0518                     	;# 
  3689  0519                     	;# 
  3690  051A                     	;# 
  3691  051B                     	;# 
  3692  051C                     	;# 
  3693  051D                     	;# 
  3694  058C                     	;# 
  3695  058C                     	;# 
  3696  058D                     	;# 
  3697  058E                     	;# 
  3698  058F                     	;# 
  3699  058F                     	;# 
  3700  0590                     	;# 
  3701  0591                     	;# 
  3702  0592                     	;# 
  3703  0593                     	;# 
  3704  060C                     	;# 
  3705  060D                     	;# 
  3706  060E                     	;# 
  3707  060F                     	;# 
  3708  0610                     	;# 
  3709  0611                     	;# 
  3710  0612                     	;# 
  3711  0613                     	;# 
  3712  0614                     	;# 
  3713  0616                     	;# 
  3714  0617                     	;# 
  3715  0618                     	;# 
  3716  0619                     	;# 
  3717  061A                     	;# 
  3718  061B                     	;# 
  3719  061C                     	;# 
  3720  061D                     	;# 
  3721  061E                     	;# 
  3722  068C                     	;# 
  3723  068D                     	;# 
  3724  068E                     	;# 
  3725  068F                     	;# 
  3726  0690                     	;# 
  3727  0691                     	;# 
  3728  0692                     	;# 
  3729  0693                     	;# 
  3730  0694                     	;# 
  3731  070C                     	;# 
  3732  070D                     	;# 
  3733  070E                     	;# 
  3734  070F                     	;# 
  3735  0710                     	;# 
  3736  0711                     	;# 
  3737  0712                     	;# 
  3738  0713                     	;# 
  3739  0714                     	;# 
  3740  0716                     	;# 
  3741  0717                     	;# 
  3742  0718                     	;# 
  3743  0719                     	;# 
  3744  071A                     	;# 
  3745  071B                     	;# 
  3746  071C                     	;# 
  3747  071D                     	;# 
  3748  071E                     	;# 
  3749  0796                     	;# 
  3750  0797                     	;# 
  3751  0798                     	;# 
  3752  0799                     	;# 
  3753  079A                     	;# 
  3754  079B                     	;# 
  3755  080C                     	;# 
  3756  080D                     	;# 
  3757  080E                     	;# 
  3758  080F                     	;# 
  3759  0810                     	;# 
  3760  0811                     	;# 
  3761  0812                     	;# 
  3762  0813                     	;# 
  3763  0814                     	;# 
  3764  081A                     	;# 
  3765  081B                     	;# 
  3766  081C                     	;# 
  3767  081D                     	;# 
  3768  081E                     	;# 
  3769  081F                     	;# 
  3770  088C                     	;# 
  3771  088D                     	;# 
  3772  088E                     	;# 
  3773  088F                     	;# 
  3774  0890                     	;# 
  3775  0891                     	;# 
  3776  0892                     	;# 
  3777  0893                     	;# 
  3778  0895                     	;# 
  3779  0896                     	;# 
  3780  0897                     	;# 
  3781  0898                     	;# 
  3782  0899                     	;# 
  3783  089A                     	;# 
  3784  089B                     	;# 
  3785  090C                     	;# 
  3786  090E                     	;# 
  3787  090F                     	;# 
  3788  091F                     	;# 
  3789  091F                     	;# 
  3790  098F                     	;# 
  3791  098F                     	;# 
  3792  0990                     	;# 
  3793  0991                     	;# 
  3794  0992                     	;# 
  3795  0993                     	;# 
  3796  0994                     	;# 
  3797  0995                     	;# 
  3798  0996                     	;# 
  3799  0997                     	;# 
  3800  0E0F                     	;# 
  3801  0E10                     	;# 
  3802  0E11                     	;# 
  3803  0E12                     	;# 
  3804  0E13                     	;# 
  3805  0E14                     	;# 
  3806  0E15                     	;# 
  3807  0E16                     	;# 
  3808  0E17                     	;# 
  3809  0E18                     	;# 
  3810  0E19                     	;# 
  3811  0E1A                     	;# 
  3812  0E1B                     	;# 
  3813  0E1C                     	;# 
  3814  0E1D                     	;# 
  3815  0E1E                     	;# 
  3816  0E1F                     	;# 
  3817  0E20                     	;# 
  3818  0E21                     	;# 
  3819  0E22                     	;# 
  3820  0E23                     	;# 
  3821  0E24                     	;# 
  3822  0E25                     	;# 
  3823  0E26                     	;# 
  3824  0E27                     	;# 
  3825  0E28                     	;# 
  3826  0E29                     	;# 
  3827  0E2A                     	;# 
  3828  0E2B                     	;# 
  3829  0E2C                     	;# 
  3830  0E2D                     	;# 
  3831  0E2E                     	;# 
  3832  0E2F                     	;# 
  3833  0E30                     	;# 
  3834  0E31                     	;# 
  3835  0E32                     	;# 
  3836  0E33                     	;# 
  3837  0E34                     	;# 
  3838  0E35                     	;# 
  3839  0E36                     	;# 
  3840  0E37                     	;# 
  3841  0E8F                     	;# 
  3842  0E90                     	;# 
  3843  0E91                     	;# 
  3844  0E92                     	;# 
  3845  0E93                     	;# 
  3846  0E94                     	;# 
  3847  0E95                     	;# 
  3848  0E96                     	;# 
  3849  0E97                     	;# 
  3850  0E9C                     	;# 
  3851  0E9D                     	;# 
  3852  0E9E                     	;# 
  3853  0EA1                     	;# 
  3854  0EA2                     	;# 
  3855  0EA3                     	;# 
  3856  0EA4                     	;# 
  3857  0EA5                     	;# 
  3858  0EA9                     	;# 
  3859  0EAA                     	;# 
  3860  0EAB                     	;# 
  3861  0EAC                     	;# 
  3862  0EB1                     	;# 
  3863  0EB2                     	;# 
  3864  0EB3                     	;# 
  3865  0EB8                     	;# 
  3866  0EB9                     	;# 
  3867  0EBA                     	;# 
  3868  0EBB                     	;# 
  3869  0EBC                     	;# 
  3870  0EBD                     	;# 
  3871  0EBE                     	;# 
  3872  0EC3                     	;# 
  3873  0EC5                     	;# 
  3874  0EC6                     	;# 
  3875  0EC7                     	;# 
  3876  0EC8                     	;# 
  3877  0EC9                     	;# 
  3878  0ECA                     	;# 
  3879  0ECB                     	;# 
  3880  0ECC                     	;# 
  3881  0F10                     	;# 
  3882  0F11                     	;# 
  3883  0F12                     	;# 
  3884  0F13                     	;# 
  3885  0F14                     	;# 
  3886  0F15                     	;# 
  3887  0F16                     	;# 
  3888  0F17                     	;# 
  3889  0F18                     	;# 
  3890  0F19                     	;# 
  3891  0F1A                     	;# 
  3892  0F1B                     	;# 
  3893  0F1C                     	;# 
  3894  0F1D                     	;# 
  3895  0F1E                     	;# 
  3896  0F1F                     	;# 
  3897  0F20                     	;# 
  3898  0F21                     	;# 
  3899  0F22                     	;# 
  3900  0F23                     	;# 
  3901  0F24                     	;# 
  3902  0F25                     	;# 
  3903  0F26                     	;# 
  3904  0F27                     	;# 
  3905  0F28                     	;# 
  3906  0F29                     	;# 
  3907  0F2A                     	;# 
  3908  0F2B                     	;# 
  3909  0F2C                     	;# 
  3910  0F2D                     	;# 
  3911  0F2E                     	;# 
  3912  0F2F                     	;# 
  3913  0F30                     	;# 
  3914  0F31                     	;# 
  3915  0F32                     	;# 
  3916  0F38                     	;# 
  3917  0F39                     	;# 
  3918  0F3A                     	;# 
  3919  0F3B                     	;# 
  3920  0F3C                     	;# 
  3921  0F3D                     	;# 
  3922  0F3E                     	;# 
  3923  0F3F                     	;# 
  3924  0F40                     	;# 
  3925  0F41                     	;# 
  3926  0F43                     	;# 
  3927  0F44                     	;# 
  3928  0F45                     	;# 
  3929  0F46                     	;# 
  3930  0F47                     	;# 
  3931  0F48                     	;# 
  3932  0F49                     	;# 
  3933  0F4A                     	;# 
  3934  0F4B                     	;# 
  3935  0F4C                     	;# 
  3936  0F4E                     	;# 
  3937  0F4F                     	;# 
  3938  0F50                     	;# 
  3939  0F51                     	;# 
  3940  0F52                     	;# 
  3941  0F53                     	;# 
  3942  0F54                     	;# 
  3943  0F55                     	;# 
  3944  0F56                     	;# 
  3945  0F57                     	;# 
  3946  0F59                     	;# 
  3947  0F5A                     	;# 
  3948  0F5B                     	;# 
  3949  0F5C                     	;# 
  3950  0F5D                     	;# 
  3951  0F61                     	;# 
  3952  0F62                     	;# 
  3953  0F64                     	;# 
  3954  0F65                     	;# 
  3955  0F66                     	;# 
  3956  0F67                     	;# 
  3957  0F68                     	;# 
  3958  0F69                     	;# 
  3959  0F6A                     	;# 
  3960  0F6B                     	;# 
  3961  0F6C                     	;# 
  3962  0F6D                     	;# 
  3963  0FE4                     	;# 
  3964  0FE5                     	;# 
  3965  0FE6                     	;# 
  3966  0FE7                     	;# 
  3967  0FE8                     	;# 
  3968  0FE9                     	;# 
  3969  0FEA                     	;# 
  3970  0FEB                     	;# 
  3971  0FED                     	;# 
  3972  0FEE                     	;# 
  3973  0FEF                     	;# 
  3974  0000                     	;# 
  3975  0001                     	;# 
  3976  0002                     	;# 
  3977  0003                     	;# 
  3978  0004                     	;# 
  3979  0005                     	;# 
  3980  0006                     	;# 
  3981  0007                     	;# 
  3982  0008                     	;# 
  3983  0009                     	;# 
  3984  000A                     	;# 
  3985  000B                     	;# 
  3986  000C                     	;# 
  3987  000D                     	;# 
  3988  000E                     	;# 
  3989  000F                     	;# 
  3990  0010                     	;# 
  3991  0011                     	;# 
  3992  0012                     	;# 
  3993  0013                     	;# 
  3994  0014                     	;# 
  3995  0015                     	;# 
  3996  0016                     	;# 
  3997  0017                     	;# 
  3998  0018                     	;# 
  3999  0019                     	;# 
  4000  001A                     	;# 
  4001  001C                     	;# 
  4002  001C                     	;# 
  4003  001D                     	;# 
  4004  001D                     	;# 
  4005  001E                     	;# 
  4006  001F                     	;# 
  4007  008C                     	;# 
  4008  008C                     	;# 
  4009  008D                     	;# 
  4010  008E                     	;# 
  4011  008E                     	;# 
  4012  008F                     	;# 
  4013  0090                     	;# 
  4014  0090                     	;# 
  4015  0091                     	;# 
  4016  0093                     	;# 
  4017  0094                     	;# 
  4018  0095                     	;# 
  4019  0096                     	;# 
  4020  0097                     	;# 
  4021  0098                     	;# 
  4022  0099                     	;# 
  4023  009A                     	;# 
  4024  009B                     	;# 
  4025  009C                     	;# 
  4026  009D                     	;# 
  4027  009E                     	;# 
  4028  010C                     	;# 
  4029  010D                     	;# 
  4030  010E                     	;# 
  4031  010E                     	;# 
  4032  010F                     	;# 
  4033  0110                     	;# 
  4034  0110                     	;# 
  4035  0111                     	;# 
  4036  0112                     	;# 
  4037  0112                     	;# 
  4038  0113                     	;# 
  4039  0114                     	;# 
  4040  0114                     	;# 
  4041  0115                     	;# 
  4042  0116                     	;# 
  4043  0116                     	;# 
  4044  0117                     	;# 
  4045  0119                     	;# 
  4046  0119                     	;# 
  4047  0119                     	;# 
  4048  011A                     	;# 
  4049  011A                     	;# 
  4050  011A                     	;# 
  4051  011B                     	;# 
  4052  011B                     	;# 
  4053  011B                     	;# 
  4054  011B                     	;# 
  4055  011B                     	;# 
  4056  011C                     	;# 
  4057  011C                     	;# 
  4058  011C                     	;# 
  4059  011D                     	;# 
  4060  011D                     	;# 
  4061  011D                     	;# 
  4062  011E                     	;# 
  4063  011E                     	;# 
  4064  011E                     	;# 
  4065  011F                     	;# 
  4066  011F                     	;# 
  4067  011F                     	;# 
  4068  011F                     	;# 
  4069  011F                     	;# 
  4070  018C                     	;# 
  4071  018D                     	;# 
  4072  018E                     	;# 
  4073  018F                     	;# 
  4074  0190                     	;# 
  4075  0191                     	;# 
  4076  0192                     	;# 
  4077  0196                     	;# 
  4078  0197                     	;# 
  4079  0198                     	;# 
  4080  0199                     	;# 
  4081  019A                     	;# 
  4082  019B                     	;# 
  4083  019C                     	;# 
  4084  020C                     	;# 
  4085  020C                     	;# 
  4086  020D                     	;# 
  4087  020E                     	;# 
  4088  020F                     	;# 
  4089  020F                     	;# 
  4090  0210                     	;# 
  4091  0210                     	;# 
  4092  0211                     	;# 
  4093  0211                     	;# 
  4094  0212                     	;# 
  4095  0212                     	;# 
  4096  0213                     	;# 
  4097  0214                     	;# 
  4098  0215                     	;# 
  4099  0215                     	;# 
  4100  0216                     	;# 
  4101  0216                     	;# 
  4102  0217                     	;# 
  4103  0217                     	;# 
  4104  0218                     	;# 
  4105  0218                     	;# 
  4106  0219                     	;# 
  4107  021A                     	;# 
  4108  021B                     	;# 
  4109  021B                     	;# 
  4110  021C                     	;# 
  4111  021C                     	;# 
  4112  021D                     	;# 
  4113  021D                     	;# 
  4114  021E                     	;# 
  4115  021F                     	;# 
  4116  028C                     	;# 
  4117  028C                     	;# 
  4118  028D                     	;# 
  4119  028D                     	;# 
  4120  028E                     	;# 
  4121  028F                     	;# 
  4122  0290                     	;# 
  4123  0290                     	;# 
  4124  0291                     	;# 
  4125  0292                     	;# 
  4126  0292                     	;# 
  4127  0293                     	;# 
  4128  0293                     	;# 
  4129  0294                     	;# 
  4130  0295                     	;# 
  4131  0296                     	;# 
  4132  0296                     	;# 
  4133  0297                     	;# 
  4134  0298                     	;# 
  4135  0298                     	;# 
  4136  0299                     	;# 
  4137  0299                     	;# 
  4138  029A                     	;# 
  4139  029B                     	;# 
  4140  029C                     	;# 
  4141  029C                     	;# 
  4142  029D                     	;# 
  4143  030C                     	;# 
  4144  030C                     	;# 
  4145  030D                     	;# 
  4146  030E                     	;# 
  4147  030F                     	;# 
  4148  0310                     	;# 
  4149  0310                     	;# 
  4150  0311                     	;# 
  4151  0312                     	;# 
  4152  0313                     	;# 
  4153  0314                     	;# 
  4154  0314                     	;# 
  4155  0315                     	;# 
  4156  0316                     	;# 
  4157  0317                     	;# 
  4158  0318                     	;# 
  4159  0318                     	;# 
  4160  0319                     	;# 
  4161  031A                     	;# 
  4162  031B                     	;# 
  4163  031C                     	;# 
  4164  031C                     	;# 
  4165  031D                     	;# 
  4166  031E                     	;# 
  4167  031F                     	;# 
  4168  038C                     	;# 
  4169  038C                     	;# 
  4170  038D                     	;# 
  4171  038E                     	;# 
  4172  0390                     	;# 
  4173  0390                     	;# 
  4174  0391                     	;# 
  4175  0392                     	;# 
  4176  040C                     	;# 
  4177  040D                     	;# 
  4178  040E                     	;# 
  4179  040F                     	;# 
  4180  0410                     	;# 
  4181  0411                     	;# 
  4182  0416                     	;# 
  4183  0416                     	;# 
  4184  0417                     	;# 
  4185  0418                     	;# 
  4186  0418                     	;# 
  4187  0419                     	;# 
  4188  041A                     	;# 
  4189  041A                     	;# 
  4190  041B                     	;# 
  4191  041C                     	;# 
  4192  041C                     	;# 
  4193  041D                     	;# 
  4194  041E                     	;# 
  4195  041F                     	;# 
  4196  048C                     	;# 
  4197  048C                     	;# 
  4198  048D                     	;# 
  4199  048E                     	;# 
  4200  048F                     	;# 
  4201  048F                     	;# 
  4202  0490                     	;# 
  4203  0491                     	;# 
  4204  0492                     	;# 
  4205  0492                     	;# 
  4206  0493                     	;# 
  4207  0494                     	;# 
  4208  0495                     	;# 
  4209  0495                     	;# 
  4210  0496                     	;# 
  4211  0497                     	;# 
  4212  0498                     	;# 
  4213  0499                     	;# 
  4214  049A                     	;# 
  4215  049B                     	;# 
  4216  049C                     	;# 
  4217  049D                     	;# 
  4218  050C                     	;# 
  4219  050C                     	;# 
  4220  050D                     	;# 
  4221  050E                     	;# 
  4222  050F                     	;# 
  4223  050F                     	;# 
  4224  0510                     	;# 
  4225  0511                     	;# 
  4226  0512                     	;# 
  4227  0512                     	;# 
  4228  0513                     	;# 
  4229  0514                     	;# 
  4230  0515                     	;# 
  4231  0515                     	;# 
  4232  0516                     	;# 
  4233  0517                     	;# 
  4234  0518                     	;# 
  4235  0519                     	;# 
  4236  051A                     	;# 
  4237  051B                     	;# 
  4238  051C                     	;# 
  4239  051D                     	;# 
  4240  058C                     	;# 
  4241  058C                     	;# 
  4242  058D                     	;# 
  4243  058E                     	;# 
  4244  058F                     	;# 
  4245  058F                     	;# 
  4246  0590                     	;# 
  4247  0591                     	;# 
  4248  0592                     	;# 
  4249  0593                     	;# 
  4250  060C                     	;# 
  4251  060D                     	;# 
  4252  060E                     	;# 
  4253  060F                     	;# 
  4254  0610                     	;# 
  4255  0611                     	;# 
  4256  0612                     	;# 
  4257  0613                     	;# 
  4258  0614                     	;# 
  4259  0616                     	;# 
  4260  0617                     	;# 
  4261  0618                     	;# 
  4262  0619                     	;# 
  4263  061A                     	;# 
  4264  061B                     	;# 
  4265  061C                     	;# 
  4266  061D                     	;# 
  4267  061E                     	;# 
  4268  068C                     	;# 
  4269  068D                     	;# 
  4270  068E                     	;# 
  4271  068F                     	;# 
  4272  0690                     	;# 
  4273  0691                     	;# 
  4274  0692                     	;# 
  4275  0693                     	;# 
  4276  0694                     	;# 
  4277  070C                     	;# 
  4278  070D                     	;# 
  4279  070E                     	;# 
  4280  070F                     	;# 
  4281  0710                     	;# 
  4282  0711                     	;# 
  4283  0712                     	;# 
  4284  0713                     	;# 
  4285  0714                     	;# 
  4286  0716                     	;# 
  4287  0717                     	;# 
  4288  0718                     	;# 
  4289  0719                     	;# 
  4290  071A                     	;# 
  4291  071B                     	;# 
  4292  071C                     	;# 
  4293  071D                     	;# 
  4294  071E                     	;# 
  4295  0796                     	;# 
  4296  0797                     	;# 
  4297  0798                     	;# 
  4298  0799                     	;# 
  4299  079A                     	;# 
  4300  079B                     	;# 
  4301  080C                     	;# 
  4302  080D                     	;# 
  4303  080E                     	;# 
  4304  080F                     	;# 
  4305  0810                     	;# 
  4306  0811                     	;# 
  4307  0812                     	;# 
  4308  0813                     	;# 
  4309  0814                     	;# 
  4310  081A                     	;# 
  4311  081B                     	;# 
  4312  081C                     	;# 
  4313  081D                     	;# 
  4314  081E                     	;# 
  4315  081F                     	;# 
  4316  088C                     	;# 
  4317  088D                     	;# 
  4318  088E                     	;# 
  4319  088F                     	;# 
  4320  0890                     	;# 
  4321  0891                     	;# 
  4322  0892                     	;# 
  4323  0893                     	;# 
  4324  0895                     	;# 
  4325  0896                     	;# 
  4326  0897                     	;# 
  4327  0898                     	;# 
  4328  0899                     	;# 
  4329  089A                     	;# 
  4330  089B                     	;# 
  4331  090C                     	;# 
  4332  090E                     	;# 
  4333  090F                     	;# 
  4334  091F                     	;# 
  4335  091F                     	;# 
  4336  098F                     	;# 
  4337  098F                     	;# 
  4338  0990                     	;# 
  4339  0991                     	;# 
  4340  0992                     	;# 
  4341  0993                     	;# 
  4342  0994                     	;# 
  4343  0995                     	;# 
  4344  0996                     	;# 
  4345  0997                     	;# 
  4346  0E0F                     	;# 
  4347  0E10                     	;# 
  4348  0E11                     	;# 
  4349  0E12                     	;# 
  4350  0E13                     	;# 
  4351  0E14                     	;# 
  4352  0E15                     	;# 
  4353  0E16                     	;# 
  4354  0E17                     	;# 
  4355  0E18                     	;# 
  4356  0E19                     	;# 
  4357  0E1A                     	;# 
  4358  0E1B                     	;# 
  4359  0E1C                     	;# 
  4360  0E1D                     	;# 
  4361  0E1E                     	;# 
  4362  0E1F                     	;# 
  4363  0E20                     	;# 
  4364  0E21                     	;# 
  4365  0E22                     	;# 
  4366  0E23                     	;# 
  4367  0E24                     	;# 
  4368  0E25                     	;# 
  4369  0E26                     	;# 
  4370  0E27                     	;# 
  4371  0E28                     	;# 
  4372  0E29                     	;# 
  4373  0E2A                     	;# 
  4374  0E2B                     	;# 
  4375  0E2C                     	;# 
  4376  0E2D                     	;# 
  4377  0E2E                     	;# 
  4378  0E2F                     	;# 
  4379  0E30                     	;# 
  4380  0E31                     	;# 
  4381  0E32                     	;# 
  4382  0E33                     	;# 
  4383  0E34                     	;# 
  4384  0E35                     	;# 
  4385  0E36                     	;# 
  4386  0E37                     	;# 
  4387  0E8F                     	;# 
  4388  0E90                     	;# 
  4389  0E91                     	;# 
  4390  0E92                     	;# 
  4391  0E93                     	;# 
  4392  0E94                     	;# 
  4393  0E95                     	;# 
  4394  0E96                     	;# 
  4395  0E97                     	;# 
  4396  0E9C                     	;# 
  4397  0E9D                     	;# 
  4398  0E9E                     	;# 
  4399  0EA1                     	;# 
  4400  0EA2                     	;# 
  4401  0EA3                     	;# 
  4402  0EA4                     	;# 
  4403  0EA5                     	;# 
  4404  0EA9                     	;# 
  4405  0EAA                     	;# 
  4406  0EAB                     	;# 
  4407  0EAC                     	;# 
  4408  0EB1                     	;# 
  4409  0EB2                     	;# 
  4410  0EB3                     	;# 
  4411  0EB8                     	;# 
  4412  0EB9                     	;# 
  4413  0EBA                     	;# 
  4414  0EBB                     	;# 
  4415  0EBC                     	;# 
  4416  0EBD                     	;# 
  4417  0EBE                     	;# 
  4418  0EC3                     	;# 
  4419  0EC5                     	;# 
  4420  0EC6                     	;# 
  4421  0EC7                     	;# 
  4422  0EC8                     	;# 
  4423  0EC9                     	;# 
  4424  0ECA                     	;# 
  4425  0ECB                     	;# 
  4426  0ECC                     	;# 
  4427  0F10                     	;# 
  4428  0F11                     	;# 
  4429  0F12                     	;# 
  4430  0F13                     	;# 
  4431  0F14                     	;# 
  4432  0F15                     	;# 
  4433  0F16                     	;# 
  4434  0F17                     	;# 
  4435  0F18                     	;# 
  4436  0F19                     	;# 
  4437  0F1A                     	;# 
  4438  0F1B                     	;# 
  4439  0F1C                     	;# 
  4440  0F1D                     	;# 
  4441  0F1E                     	;# 
  4442  0F1F                     	;# 
  4443  0F20                     	;# 
  4444  0F21                     	;# 
  4445  0F22                     	;# 
  4446  0F23                     	;# 
  4447  0F24                     	;# 
  4448  0F25                     	;# 
  4449  0F26                     	;# 
  4450  0F27                     	;# 
  4451  0F28                     	;# 
  4452  0F29                     	;# 
  4453  0F2A                     	;# 
  4454  0F2B                     	;# 
  4455  0F2C                     	;# 
  4456  0F2D                     	;# 
  4457  0F2E                     	;# 
  4458  0F2F                     	;# 
  4459  0F30                     	;# 
  4460  0F31                     	;# 
  4461  0F32                     	;# 
  4462  0F38                     	;# 
  4463  0F39                     	;# 
  4464  0F3A                     	;# 
  4465  0F3B                     	;# 
  4466  0F3C                     	;# 
  4467  0F3D                     	;# 
  4468  0F3E                     	;# 
  4469  0F3F                     	;# 
  4470  0F40                     	;# 
  4471  0F41                     	;# 
  4472  0F43                     	;# 
  4473  0F44                     	;# 
  4474  0F45                     	;# 
  4475  0F46                     	;# 
  4476  0F47                     	;# 
  4477  0F48                     	;# 
  4478  0F49                     	;# 
  4479  0F4A                     	;# 
  4480  0F4B                     	;# 
  4481  0F4C                     	;# 
  4482  0F4E                     	;# 
  4483  0F4F                     	;# 
  4484  0F50                     	;# 
  4485  0F51                     	;# 
  4486  0F52                     	;# 
  4487  0F53                     	;# 
  4488  0F54                     	;# 
  4489  0F55                     	;# 
  4490  0F56                     	;# 
  4491  0F57                     	;# 
  4492  0F59                     	;# 
  4493  0F5A                     	;# 
  4494  0F5B                     	;# 
  4495  0F5C                     	;# 
  4496  0F5D                     	;# 
  4497  0F61                     	;# 
  4498  0F62                     	;# 
  4499  0F64                     	;# 
  4500  0F65                     	;# 
  4501  0F66                     	;# 
  4502  0F67                     	;# 
  4503  0F68                     	;# 
  4504  0F69                     	;# 
  4505  0F6A                     	;# 
  4506  0F6B                     	;# 
  4507  0F6C                     	;# 
  4508  0F6D                     	;# 
  4509  0FE4                     	;# 
  4510  0FE5                     	;# 
  4511  0FE6                     	;# 
  4512  0FE7                     	;# 
  4513  0FE8                     	;# 
  4514  0FE9                     	;# 
  4515  0FEA                     	;# 
  4516  0FEB                     	;# 
  4517  0FED                     	;# 
  4518  0FEE                     	;# 
  4519  0FEF                     	;# 
  4520  0000                     	;# 
  4521  0001                     	;# 
  4522  0002                     	;# 
  4523  0003                     	;# 
  4524  0004                     	;# 
  4525  0005                     	;# 
  4526  0006                     	;# 
  4527  0007                     	;# 
  4528  0008                     	;# 
  4529  0009                     	;# 
  4530  000A                     	;# 
  4531  000B                     	;# 
  4532  000C                     	;# 
  4533  000D                     	;# 
  4534  000E                     	;# 
  4535  000F                     	;# 
  4536  0010                     	;# 
  4537  0011                     	;# 
  4538  0012                     	;# 
  4539  0013                     	;# 
  4540  0014                     	;# 
  4541  0015                     	;# 
  4542  0016                     	;# 
  4543  0017                     	;# 
  4544  0018                     	;# 
  4545  0019                     	;# 
  4546  001A                     	;# 
  4547  001C                     	;# 
  4548  001C                     	;# 
  4549  001D                     	;# 
  4550  001D                     	;# 
  4551  001E                     	;# 
  4552  001F                     	;# 
  4553  008C                     	;# 
  4554  008C                     	;# 
  4555  008D                     	;# 
  4556  008E                     	;# 
  4557  008E                     	;# 
  4558  008F                     	;# 
  4559  0090                     	;# 
  4560  0090                     	;# 
  4561  0091                     	;# 
  4562  0093                     	;# 
  4563  0094                     	;# 
  4564  0095                     	;# 
  4565  0096                     	;# 
  4566  0097                     	;# 
  4567  0098                     	;# 
  4568  0099                     	;# 
  4569  009A                     	;# 
  4570  009B                     	;# 
  4571  009C                     	;# 
  4572  009D                     	;# 
  4573  009E                     	;# 
  4574  010C                     	;# 
  4575  010D                     	;# 
  4576  010E                     	;# 
  4577  010E                     	;# 
  4578  010F                     	;# 
  4579  0110                     	;# 
  4580  0110                     	;# 
  4581  0111                     	;# 
  4582  0112                     	;# 
  4583  0112                     	;# 
  4584  0113                     	;# 
  4585  0114                     	;# 
  4586  0114                     	;# 
  4587  0115                     	;# 
  4588  0116                     	;# 
  4589  0116                     	;# 
  4590  0117                     	;# 
  4591  0119                     	;# 
  4592  0119                     	;# 
  4593  0119                     	;# 
  4594  011A                     	;# 
  4595  011A                     	;# 
  4596  011A                     	;# 
  4597  011B                     	;# 
  4598  011B                     	;# 
  4599  011B                     	;# 
  4600  011B                     	;# 
  4601  011B                     	;# 
  4602  011C                     	;# 
  4603  011C                     	;# 
  4604  011C                     	;# 
  4605  011D                     	;# 
  4606  011D                     	;# 
  4607  011D                     	;# 
  4608  011E                     	;# 
  4609  011E                     	;# 
  4610  011E                     	;# 
  4611  011F                     	;# 
  4612  011F                     	;# 
  4613  011F                     	;# 
  4614  011F                     	;# 
  4615  011F                     	;# 
  4616  018C                     	;# 
  4617  018D                     	;# 
  4618  018E                     	;# 
  4619  018F                     	;# 
  4620  0190                     	;# 
  4621  0191                     	;# 
  4622  0192                     	;# 
  4623  0196                     	;# 
  4624  0197                     	;# 
  4625  0198                     	;# 
  4626  0199                     	;# 
  4627  019A                     	;# 
  4628  019B                     	;# 
  4629  019C                     	;# 
  4630  020C                     	;# 
  4631  020C                     	;# 
  4632  020D                     	;# 
  4633  020E                     	;# 
  4634  020F                     	;# 
  4635  020F                     	;# 
  4636  0210                     	;# 
  4637  0210                     	;# 
  4638  0211                     	;# 
  4639  0211                     	;# 
  4640  0212                     	;# 
  4641  0212                     	;# 
  4642  0213                     	;# 
  4643  0214                     	;# 
  4644  0215                     	;# 
  4645  0215                     	;# 
  4646  0216                     	;# 
  4647  0216                     	;# 
  4648  0217                     	;# 
  4649  0217                     	;# 
  4650  0218                     	;# 
  4651  0218                     	;# 
  4652  0219                     	;# 
  4653  021A                     	;# 
  4654  021B                     	;# 
  4655  021B                     	;# 
  4656  021C                     	;# 
  4657  021C                     	;# 
  4658  021D                     	;# 
  4659  021D                     	;# 
  4660  021E                     	;# 
  4661  021F                     	;# 
  4662  028C                     	;# 
  4663  028C                     	;# 
  4664  028D                     	;# 
  4665  028D                     	;# 
  4666  028E                     	;# 
  4667  028F                     	;# 
  4668  0290                     	;# 
  4669  0290                     	;# 
  4670  0291                     	;# 
  4671  0292                     	;# 
  4672  0292                     	;# 
  4673  0293                     	;# 
  4674  0293                     	;# 
  4675  0294                     	;# 
  4676  0295                     	;# 
  4677  0296                     	;# 
  4678  0296                     	;# 
  4679  0297                     	;# 
  4680  0298                     	;# 
  4681  0298                     	;# 
  4682  0299                     	;# 
  4683  0299                     	;# 
  4684  029A                     	;# 
  4685  029B                     	;# 
  4686  029C                     	;# 
  4687  029C                     	;# 
  4688  029D                     	;# 
  4689  030C                     	;# 
  4690  030C                     	;# 
  4691  030D                     	;# 
  4692  030E                     	;# 
  4693  030F                     	;# 
  4694  0310                     	;# 
  4695  0310                     	;# 
  4696  0311                     	;# 
  4697  0312                     	;# 
  4698  0313                     	;# 
  4699  0314                     	;# 
  4700  0314                     	;# 
  4701  0315                     	;# 
  4702  0316                     	;# 
  4703  0317                     	;# 
  4704  0318                     	;# 
  4705  0318                     	;# 
  4706  0319                     	;# 
  4707  031A                     	;# 
  4708  031B                     	;# 
  4709  031C                     	;# 
  4710  031C                     	;# 
  4711  031D                     	;# 
  4712  031E                     	;# 
  4713  031F                     	;# 
  4714  038C                     	;# 
  4715  038C                     	;# 
  4716  038D                     	;# 
  4717  038E                     	;# 
  4718  0390                     	;# 
  4719  0390                     	;# 
  4720  0391                     	;# 
  4721  0392                     	;# 
  4722  040C                     	;# 
  4723  040D                     	;# 
  4724  040E                     	;# 
  4725  040F                     	;# 
  4726  0410                     	;# 
  4727  0411                     	;# 
  4728  0416                     	;# 
  4729  0416                     	;# 
  4730  0417                     	;# 
  4731  0418                     	;# 
  4732  0418                     	;# 
  4733  0419                     	;# 
  4734  041A                     	;# 
  4735  041A                     	;# 
  4736  041B                     	;# 
  4737  041C                     	;# 
  4738  041C                     	;# 
  4739  041D                     	;# 
  4740  041E                     	;# 
  4741  041F                     	;# 
  4742  048C                     	;# 
  4743  048C                     	;# 
  4744  048D                     	;# 
  4745  048E                     	;# 
  4746  048F                     	;# 
  4747  048F                     	;# 
  4748  0490                     	;# 
  4749  0491                     	;# 
  4750  0492                     	;# 
  4751  0492                     	;# 
  4752  0493                     	;# 
  4753  0494                     	;# 
  4754  0495                     	;# 
  4755  0495                     	;# 
  4756  0496                     	;# 
  4757  0497                     	;# 
  4758  0498                     	;# 
  4759  0499                     	;# 
  4760  049A                     	;# 
  4761  049B                     	;# 
  4762  049C                     	;# 
  4763  049D                     	;# 
  4764  050C                     	;# 
  4765  050C                     	;# 
  4766  050D                     	;# 
  4767  050E                     	;# 
  4768  050F                     	;# 
  4769  050F                     	;# 
  4770  0510                     	;# 
  4771  0511                     	;# 
  4772  0512                     	;# 
  4773  0512                     	;# 
  4774  0513                     	;# 
  4775  0514                     	;# 
  4776  0515                     	;# 
  4777  0515                     	;# 
  4778  0516                     	;# 
  4779  0517                     	;# 
  4780  0518                     	;# 
  4781  0519                     	;# 
  4782  051A                     	;# 
  4783  051B                     	;# 
  4784  051C                     	;# 
  4785  051D                     	;# 
  4786  058C                     	;# 
  4787  058C                     	;# 
  4788  058D                     	;# 
  4789  058E                     	;# 
  4790  058F                     	;# 
  4791  058F                     	;# 
  4792  0590                     	;# 
  4793  0591                     	;# 
  4794  0592                     	;# 
  4795  0593                     	;# 
  4796  060C                     	;# 
  4797  060D                     	;# 
  4798  060E                     	;# 
  4799  060F                     	;# 
  4800  0610                     	;# 
  4801  0611                     	;# 
  4802  0612                     	;# 
  4803  0613                     	;# 
  4804  0614                     	;# 
  4805  0616                     	;# 
  4806  0617                     	;# 
  4807  0618                     	;# 
  4808  0619                     	;# 
  4809  061A                     	;# 
  4810  061B                     	;# 
  4811  061C                     	;# 
  4812  061D                     	;# 
  4813  061E                     	;# 
  4814  068C                     	;# 
  4815  068D                     	;# 
  4816  068E                     	;# 
  4817  068F                     	;# 
  4818  0690                     	;# 
  4819  0691                     	;# 
  4820  0692                     	;# 
  4821  0693                     	;# 
  4822  0694                     	;# 
  4823  070C                     	;# 
  4824  070D                     	;# 
  4825  070E                     	;# 
  4826  070F                     	;# 
  4827  0710                     	;# 
  4828  0711                     	;# 
  4829  0712                     	;# 
  4830  0713                     	;# 
  4831  0714                     	;# 
  4832  0716                     	;# 
  4833  0717                     	;# 
  4834  0718                     	;# 
  4835  0719                     	;# 
  4836  071A                     	;# 
  4837  071B                     	;# 
  4838  071C                     	;# 
  4839  071D                     	;# 
  4840  071E                     	;# 
  4841  0796                     	;# 
  4842  0797                     	;# 
  4843  0798                     	;# 
  4844  0799                     	;# 
  4845  079A                     	;# 
  4846  079B                     	;# 
  4847  080C                     	;# 
  4848  080D                     	;# 
  4849  080E                     	;# 
  4850  080F                     	;# 
  4851  0810                     	;# 
  4852  0811                     	;# 
  4853  0812                     	;# 
  4854  0813                     	;# 
  4855  0814                     	;# 
  4856  081A                     	;# 
  4857  081B                     	;# 
  4858  081C                     	;# 
  4859  081D                     	;# 
  4860  081E                     	;# 
  4861  081F                     	;# 
  4862  088C                     	;# 
  4863  088D                     	;# 
  4864  088E                     	;# 
  4865  088F                     	;# 
  4866  0890                     	;# 
  4867  0891                     	;# 
  4868  0892                     	;# 
  4869  0893                     	;# 
  4870  0895                     	;# 
  4871  0896                     	;# 
  4872  0897                     	;# 
  4873  0898                     	;# 
  4874  0899                     	;# 
  4875  089A                     	;# 
  4876  089B                     	;# 
  4877  090C                     	;# 
  4878  090E                     	;# 
  4879  090F                     	;# 
  4880  091F                     	;# 
  4881  091F                     	;# 
  4882  098F                     	;# 
  4883  098F                     	;# 
  4884  0990                     	;# 
  4885  0991                     	;# 
  4886  0992                     	;# 
  4887  0993                     	;# 
  4888  0994                     	;# 
  4889  0995                     	;# 
  4890  0996                     	;# 
  4891  0997                     	;# 
  4892  0E0F                     	;# 
  4893  0E10                     	;# 
  4894  0E11                     	;# 
  4895  0E12                     	;# 
  4896  0E13                     	;# 
  4897  0E14                     	;# 
  4898  0E15                     	;# 
  4899  0E16                     	;# 
  4900  0E17                     	;# 
  4901  0E18                     	;# 
  4902  0E19                     	;# 
  4903  0E1A                     	;# 
  4904  0E1B                     	;# 
  4905  0E1C                     	;# 
  4906  0E1D                     	;# 
  4907  0E1E                     	;# 
  4908  0E1F                     	;# 
  4909  0E20                     	;# 
  4910  0E21                     	;# 
  4911  0E22                     	;# 
  4912  0E23                     	;# 
  4913  0E24                     	;# 
  4914  0E25                     	;# 
  4915  0E26                     	;# 
  4916  0E27                     	;# 
  4917  0E28                     	;# 
  4918  0E29                     	;# 
  4919  0E2A                     	;# 
  4920  0E2B                     	;# 
  4921  0E2C                     	;# 
  4922  0E2D                     	;# 
  4923  0E2E                     	;# 
  4924  0E2F                     	;# 
  4925  0E30                     	;# 
  4926  0E31                     	;# 
  4927  0E32                     	;# 
  4928  0E33                     	;# 
  4929  0E34                     	;# 
  4930  0E35                     	;# 
  4931  0E36                     	;# 
  4932  0E37                     	;# 
  4933  0E8F                     	;# 
  4934  0E90                     	;# 
  4935  0E91                     	;# 
  4936  0E92                     	;# 
  4937  0E93                     	;# 
  4938  0E94                     	;# 
  4939  0E95                     	;# 
  4940  0E96                     	;# 
  4941  0E97                     	;# 
  4942  0E9C                     	;# 
  4943  0E9D                     	;# 
  4944  0E9E                     	;# 
  4945  0EA1                     	;# 
  4946  0EA2                     	;# 
  4947  0EA3                     	;# 
  4948  0EA4                     	;# 
  4949  0EA5                     	;# 
  4950  0EA9                     	;# 
  4951  0EAA                     	;# 
  4952  0EAB                     	;# 
  4953  0EAC                     	;# 
  4954  0EB1                     	;# 
  4955  0EB2                     	;# 
  4956  0EB3                     	;# 
  4957  0EB8                     	;# 
  4958  0EB9                     	;# 
  4959  0EBA                     	;# 
  4960  0EBB                     	;# 
  4961  0EBC                     	;# 
  4962  0EBD                     	;# 
  4963  0EBE                     	;# 
  4964  0EC3                     	;# 
  4965  0EC5                     	;# 
  4966  0EC6                     	;# 
  4967  0EC7                     	;# 
  4968  0EC8                     	;# 
  4969  0EC9                     	;# 
  4970  0ECA                     	;# 
  4971  0ECB                     	;# 
  4972  0ECC                     	;# 
  4973  0F10                     	;# 
  4974  0F11                     	;# 
  4975  0F12                     	;# 
  4976  0F13                     	;# 
  4977  0F14                     	;# 
  4978  0F15                     	;# 
  4979  0F16                     	;# 
  4980  0F17                     	;# 
  4981  0F18                     	;# 
  4982  0F19                     	;# 
  4983  0F1A                     	;# 
  4984  0F1B                     	;# 
  4985  0F1C                     	;# 
  4986  0F1D                     	;# 
  4987  0F1E                     	;# 
  4988  0F1F                     	;# 
  4989  0F20                     	;# 
  4990  0F21                     	;# 
  4991  0F22                     	;# 
  4992  0F23                     	;# 
  4993  0F24                     	;# 
  4994  0F25                     	;# 
  4995  0F26                     	;# 
  4996  0F27                     	;# 
  4997  0F28                     	;# 
  4998  0F29                     	;# 
  4999  0F2A                     	;# 
  5000  0F2B                     	;# 
  5001  0F2C                     	;# 
  5002  0F2D                     	;# 
  5003  0F2E                     	;# 
  5004  0F2F                     	;# 
  5005  0F30                     	;# 
  5006  0F31                     	;# 
  5007  0F32                     	;# 
  5008  0F38                     	;# 
  5009  0F39                     	;# 
  5010  0F3A                     	;# 
  5011  0F3B                     	;# 
  5012  0F3C                     	;# 
  5013  0F3D                     	;# 
  5014  0F3E                     	;# 
  5015  0F3F                     	;# 
  5016  0F40                     	;# 
  5017  0F41                     	;# 
  5018  0F43                     	;# 
  5019  0F44                     	;# 
  5020  0F45                     	;# 
  5021  0F46                     	;# 
  5022  0F47                     	;# 
  5023  0F48                     	;# 
  5024  0F49                     	;# 
  5025  0F4A                     	;# 
  5026  0F4B                     	;# 
  5027  0F4C                     	;# 
  5028  0F4E                     	;# 
  5029  0F4F                     	;# 
  5030  0F50                     	;# 
  5031  0F51                     	;# 
  5032  0F52                     	;# 
  5033  0F53                     	;# 
  5034  0F54                     	;# 
  5035  0F55                     	;# 
  5036  0F56                     	;# 
  5037  0F57                     	;# 
  5038  0F59                     	;# 
  5039  0F5A                     	;# 
  5040  0F5B                     	;# 
  5041  0F5C                     	;# 
  5042  0F5D                     	;# 
  5043  0F61                     	;# 
  5044  0F62                     	;# 
  5045  0F64                     	;# 
  5046  0F65                     	;# 
  5047  0F66                     	;# 
  5048  0F67                     	;# 
  5049  0F68                     	;# 
  5050  0F69                     	;# 
  5051  0F6A                     	;# 
  5052  0F6B                     	;# 
  5053  0F6C                     	;# 
  5054  0F6D                     	;# 
  5055  0FE4                     	;# 
  5056  0FE5                     	;# 
  5057  0FE6                     	;# 
  5058  0FE7                     	;# 
  5059  0FE8                     	;# 
  5060  0FE9                     	;# 
  5061  0FEA                     	;# 
  5062  0FEB                     	;# 
  5063  0FED                     	;# 
  5064  0FEE                     	;# 
  5065  0FEF                     	;# 
  5066  0000                     	;# 
  5067  0001                     	;# 
  5068  0002                     	;# 
  5069  0003                     	;# 
  5070  0004                     	;# 
  5071  0005                     	;# 
  5072  0006                     	;# 
  5073  0007                     	;# 
  5074  0008                     	;# 
  5075  0009                     	;# 
  5076  000A                     	;# 
  5077  000B                     	;# 
  5078  000C                     	;# 
  5079  000D                     	;# 
  5080  000E                     	;# 
  5081  000F                     	;# 
  5082  0010                     	;# 
  5083  0011                     	;# 
  5084  0012                     	;# 
  5085  0013                     	;# 
  5086  0014                     	;# 
  5087  0015                     	;# 
  5088  0016                     	;# 
  5089  0017                     	;# 
  5090  0018                     	;# 
  5091  0019                     	;# 
  5092  001A                     	;# 
  5093  001C                     	;# 
  5094  001C                     	;# 
  5095  001D                     	;# 
  5096  001D                     	;# 
  5097  001E                     	;# 
  5098  001F                     	;# 
  5099  008C                     	;# 
  5100  008C                     	;# 
  5101  008D                     	;# 
  5102  008E                     	;# 
  5103  008E                     	;# 
  5104  008F                     	;# 
  5105  0090                     	;# 
  5106  0090                     	;# 
  5107  0091                     	;# 
  5108  0093                     	;# 
  5109  0094                     	;# 
  5110  0095                     	;# 
  5111  0096                     	;# 
  5112  0097                     	;# 
  5113  0098                     	;# 
  5114  0099                     	;# 
  5115  009A                     	;# 
  5116  009B                     	;# 
  5117  009C                     	;# 
  5118  009D                     	;# 
  5119  009E                     	;# 
  5120  010C                     	;# 
  5121  010D                     	;# 
  5122  010E                     	;# 
  5123  010E                     	;# 
  5124  010F                     	;# 
  5125  0110                     	;# 
  5126  0110                     	;# 
  5127  0111                     	;# 
  5128  0112                     	;# 
  5129  0112                     	;# 
  5130  0113                     	;# 
  5131  0114                     	;# 
  5132  0114                     	;# 
  5133  0115                     	;# 
  5134  0116                     	;# 
  5135  0116                     	;# 
  5136  0117                     	;# 
  5137  0119                     	;# 
  5138  0119                     	;# 
  5139  0119                     	;# 
  5140  011A                     	;# 
  5141  011A                     	;# 
  5142  011A                     	;# 
  5143  011B                     	;# 
  5144  011B                     	;# 
  5145  011B                     	;# 
  5146  011B                     	;# 
  5147  011B                     	;# 
  5148  011C                     	;# 
  5149  011C                     	;# 
  5150  011C                     	;# 
  5151  011D                     	;# 
  5152  011D                     	;# 
  5153  011D                     	;# 
  5154  011E                     	;# 
  5155  011E                     	;# 
  5156  011E                     	;# 
  5157  011F                     	;# 
  5158  011F                     	;# 
  5159  011F                     	;# 
  5160  011F                     	;# 
  5161  011F                     	;# 
  5162  018C                     	;# 
  5163  018D                     	;# 
  5164  018E                     	;# 
  5165  018F                     	;# 
  5166  0190                     	;# 
  5167  0191                     	;# 
  5168  0192                     	;# 
  5169  0196                     	;# 
  5170  0197                     	;# 
  5171  0198                     	;# 
  5172  0199                     	;# 
  5173  019A                     	;# 
  5174  019B                     	;# 
  5175  019C                     	;# 
  5176  020C                     	;# 
  5177  020C                     	;# 
  5178  020D                     	;# 
  5179  020E                     	;# 
  5180  020F                     	;# 
  5181  020F                     	;# 
  5182  0210                     	;# 
  5183  0210                     	;# 
  5184  0211                     	;# 
  5185  0211                     	;# 
  5186  0212                     	;# 
  5187  0212                     	;# 
  5188  0213                     	;# 
  5189  0214                     	;# 
  5190  0215                     	;# 
  5191  0215                     	;# 
  5192  0216                     	;# 
  5193  0216                     	;# 
  5194  0217                     	;# 
  5195  0217                     	;# 
  5196  0218                     	;# 
  5197  0218                     	;# 
  5198  0219                     	;# 
  5199  021A                     	;# 
  5200  021B                     	;# 
  5201  021B                     	;# 
  5202  021C                     	;# 
  5203  021C                     	;# 
  5204  021D                     	;# 
  5205  021D                     	;# 
  5206  021E                     	;# 
  5207  021F                     	;# 
  5208  028C                     	;# 
  5209  028C                     	;# 
  5210  028D                     	;# 
  5211  028D                     	;# 
  5212  028E                     	;# 
  5213  028F                     	;# 
  5214  0290                     	;# 
  5215  0290                     	;# 
  5216  0291                     	;# 
  5217  0292                     	;# 
  5218  0292                     	;# 
  5219  0293                     	;# 
  5220  0293                     	;# 
  5221  0294                     	;# 
  5222  0295                     	;# 
  5223  0296                     	;# 
  5224  0296                     	;# 
  5225  0297                     	;# 
  5226  0298                     	;# 
  5227  0298                     	;# 
  5228  0299                     	;# 
  5229  0299                     	;# 
  5230  029A                     	;# 
  5231  029B                     	;# 
  5232  029C                     	;# 
  5233  029C                     	;# 
  5234  029D                     	;# 
  5235  030C                     	;# 
  5236  030C                     	;# 
  5237  030D                     	;# 
  5238  030E                     	;# 
  5239  030F                     	;# 
  5240  0310                     	;# 
  5241  0310                     	;# 
  5242  0311                     	;# 
  5243  0312                     	;# 
  5244  0313                     	;# 
  5245  0314                     	;# 
  5246  0314                     	;# 
  5247  0315                     	;# 
  5248  0316                     	;# 
  5249  0317                     	;# 
  5250  0318                     	;# 
  5251  0318                     	;# 
  5252  0319                     	;# 
  5253  031A                     	;# 
  5254  031B                     	;# 
  5255  031C                     	;# 
  5256  031C                     	;# 
  5257  031D                     	;# 
  5258  031E                     	;# 
  5259  031F                     	;# 
  5260  038C                     	;# 
  5261  038C                     	;# 
  5262  038D                     	;# 
  5263  038E                     	;# 
  5264  0390                     	;# 
  5265  0390                     	;# 
  5266  0391                     	;# 
  5267  0392                     	;# 
  5268  040C                     	;# 
  5269  040D                     	;# 
  5270  040E                     	;# 
  5271  040F                     	;# 
  5272  0410                     	;# 
  5273  0411                     	;# 
  5274  0416                     	;# 
  5275  0416                     	;# 
  5276  0417                     	;# 
  5277  0418                     	;# 
  5278  0418                     	;# 
  5279  0419                     	;# 
  5280  041A                     	;# 
  5281  041A                     	;# 
  5282  041B                     	;# 
  5283  041C                     	;# 
  5284  041C                     	;# 
  5285  041D                     	;# 
  5286  041E                     	;# 
  5287  041F                     	;# 
  5288  048C                     	;# 
  5289  048C                     	;# 
  5290  048D                     	;# 
  5291  048E                     	;# 
  5292  048F                     	;# 
  5293  048F                     	;# 
  5294  0490                     	;# 
  5295  0491                     	;# 
  5296  0492                     	;# 
  5297  0492                     	;# 
  5298  0493                     	;# 
  5299  0494                     	;# 
  5300  0495                     	;# 
  5301  0495                     	;# 
  5302  0496                     	;# 
  5303  0497                     	;# 
  5304  0498                     	;# 
  5305  0499                     	;# 
  5306  049A                     	;# 
  5307  049B                     	;# 
  5308  049C                     	;# 
  5309  049D                     	;# 
  5310  050C                     	;# 
  5311  050C                     	;# 
  5312  050D                     	;# 
  5313  050E                     	;# 
  5314  050F                     	;# 
  5315  050F                     	;# 
  5316  0510                     	;# 
  5317  0511                     	;# 
  5318  0512                     	;# 
  5319  0512                     	;# 
  5320  0513                     	;# 
  5321  0514                     	;# 
  5322  0515                     	;# 
  5323  0515                     	;# 
  5324  0516                     	;# 
  5325  0517                     	;# 
  5326  0518                     	;# 
  5327  0519                     	;# 
  5328  051A                     	;# 
  5329  051B                     	;# 
  5330  051C                     	;# 
  5331  051D                     	;# 
  5332  058C                     	;# 
  5333  058C                     	;# 
  5334  058D                     	;# 
  5335  058E                     	;# 
  5336  058F                     	;# 
  5337  058F                     	;# 
  5338  0590                     	;# 
  5339  0591                     	;# 
  5340  0592                     	;# 
  5341  0593                     	;# 
  5342  060C                     	;# 
  5343  060D                     	;# 
  5344  060E                     	;# 
  5345  060F                     	;# 
  5346  0610                     	;# 
  5347  0611                     	;# 
  5348  0612                     	;# 
  5349  0613                     	;# 
  5350  0614                     	;# 
  5351  0616                     	;# 
  5352  0617                     	;# 
  5353  0618                     	;# 
  5354  0619                     	;# 
  5355  061A                     	;# 
  5356  061B                     	;# 
  5357  061C                     	;# 
  5358  061D                     	;# 
  5359  061E                     	;# 
  5360  068C                     	;# 
  5361  068D                     	;# 
  5362  068E                     	;# 
  5363  068F                     	;# 
  5364  0690                     	;# 
  5365  0691                     	;# 
  5366  0692                     	;# 
  5367  0693                     	;# 
  5368  0694                     	;# 
  5369  070C                     	;# 
  5370  070D                     	;# 
  5371  070E                     	;# 
  5372  070F                     	;# 
  5373  0710                     	;# 
  5374  0711                     	;# 
  5375  0712                     	;# 
  5376  0713                     	;# 
  5377  0714                     	;# 
  5378  0716                     	;# 
  5379  0717                     	;# 
  5380  0718                     	;# 
  5381  0719                     	;# 
  5382  071A                     	;# 
  5383  071B                     	;# 
  5384  071C                     	;# 
  5385  071D                     	;# 
  5386  071E                     	;# 
  5387  0796                     	;# 
  5388  0797                     	;# 
  5389  0798                     	;# 
  5390  0799                     	;# 
  5391  079A                     	;# 
  5392  079B                     	;# 
  5393  080C                     	;# 
  5394  080D                     	;# 
  5395  080E                     	;# 
  5396  080F                     	;# 
  5397  0810                     	;# 
  5398  0811                     	;# 
  5399  0812                     	;# 
  5400  0813                     	;# 
  5401  0814                     	;# 
  5402  081A                     	;# 
  5403  081B                     	;# 
  5404  081C                     	;# 
  5405  081D                     	;# 
  5406  081E                     	;# 
  5407  081F                     	;# 
  5408  088C                     	;# 
  5409  088D                     	;# 
  5410  088E                     	;# 
  5411  088F                     	;# 
  5412  0890                     	;# 
  5413  0891                     	;# 
  5414  0892                     	;# 
  5415  0893                     	;# 
  5416  0895                     	;# 
  5417  0896                     	;# 
  5418  0897                     	;# 
  5419  0898                     	;# 
  5420  0899                     	;# 
  5421  089A                     	;# 
  5422  089B                     	;# 
  5423  090C                     	;# 
  5424  090E                     	;# 
  5425  090F                     	;# 
  5426  091F                     	;# 
  5427  091F                     	;# 
  5428  098F                     	;# 
  5429  098F                     	;# 
  5430  0990                     	;# 
  5431  0991                     	;# 
  5432  0992                     	;# 
  5433  0993                     	;# 
  5434  0994                     	;# 
  5435  0995                     	;# 
  5436  0996                     	;# 
  5437  0997                     	;# 
  5438  0E0F                     	;# 
  5439  0E10                     	;# 
  5440  0E11                     	;# 
  5441  0E12                     	;# 
  5442  0E13                     	;# 
  5443  0E14                     	;# 
  5444  0E15                     	;# 
  5445  0E16                     	;# 
  5446  0E17                     	;# 
  5447  0E18                     	;# 
  5448  0E19                     	;# 
  5449  0E1A                     	;# 
  5450  0E1B                     	;# 
  5451  0E1C                     	;# 
  5452  0E1D                     	;# 
  5453  0E1E                     	;# 
  5454  0E1F                     	;# 
  5455  0E20                     	;# 
  5456  0E21                     	;# 
  5457  0E22                     	;# 
  5458  0E23                     	;# 
  5459  0E24                     	;# 
  5460  0E25                     	;# 
  5461  0E26                     	;# 
  5462  0E27                     	;# 
  5463  0E28                     	;# 
  5464  0E29                     	;# 
  5465  0E2A                     	;# 
  5466  0E2B                     	;# 
  5467  0E2C                     	;# 
  5468  0E2D                     	;# 
  5469  0E2E                     	;# 
  5470  0E2F                     	;# 
  5471  0E30                     	;# 
  5472  0E31                     	;# 
  5473  0E32                     	;# 
  5474  0E33                     	;# 
  5475  0E34                     	;# 
  5476  0E35                     	;# 
  5477  0E36                     	;# 
  5478  0E37                     	;# 
  5479  0E8F                     	;# 
  5480  0E90                     	;# 
  5481  0E91                     	;# 
  5482  0E92                     	;# 
  5483  0E93                     	;# 
  5484  0E94                     	;# 
  5485  0E95                     	;# 
  5486  0E96                     	;# 
  5487  0E97                     	;# 
  5488  0E9C                     	;# 
  5489  0E9D                     	;# 
  5490  0E9E                     	;# 
  5491  0EA1                     	;# 
  5492  0EA2                     	;# 
  5493  0EA3                     	;# 
  5494  0EA4                     	;# 
  5495  0EA5                     	;# 
  5496  0EA9                     	;# 
  5497  0EAA                     	;# 
  5498  0EAB                     	;# 
  5499  0EAC                     	;# 
  5500  0EB1                     	;# 
  5501  0EB2                     	;# 
  5502  0EB3                     	;# 
  5503  0EB8                     	;# 
  5504  0EB9                     	;# 
  5505  0EBA                     	;# 
  5506  0EBB                     	;# 
  5507  0EBC                     	;# 
  5508  0EBD                     	;# 
  5509  0EBE                     	;# 
  5510  0EC3                     	;# 
  5511  0EC5                     	;# 
  5512  0EC6                     	;# 
  5513  0EC7                     	;# 
  5514  0EC8                     	;# 
  5515  0EC9                     	;# 
  5516  0ECA                     	;# 
  5517  0ECB                     	;# 
  5518  0ECC                     	;# 
  5519  0F10                     	;# 
  5520  0F11                     	;# 
  5521  0F12                     	;# 
  5522  0F13                     	;# 
  5523  0F14                     	;# 
  5524  0F15                     	;# 
  5525  0F16                     	;# 
  5526  0F17                     	;# 
  5527  0F18                     	;# 
  5528  0F19                     	;# 
  5529  0F1A                     	;# 
  5530  0F1B                     	;# 
  5531  0F1C                     	;# 
  5532  0F1D                     	;# 
  5533  0F1E                     	;# 
  5534  0F1F                     	;# 
  5535  0F20                     	;# 
  5536  0F21                     	;# 
  5537  0F22                     	;# 
  5538  0F23                     	;# 
  5539  0F24                     	;# 
  5540  0F25                     	;# 
  5541  0F26                     	;# 
  5542  0F27                     	;# 
  5543  0F28                     	;# 
  5544  0F29                     	;# 
  5545  0F2A                     	;# 
  5546  0F2B                     	;# 
  5547  0F2C                     	;# 
  5548  0F2D                     	;# 
  5549  0F2E                     	;# 
  5550  0F2F                     	;# 
  5551  0F30                     	;# 
  5552  0F31                     	;# 
  5553  0F32                     	;# 
  5554  0F38                     	;# 
  5555  0F39                     	;# 
  5556  0F3A                     	;# 
  5557  0F3B                     	;# 
  5558  0F3C                     	;# 
  5559  0F3D                     	;# 
  5560  0F3E                     	;# 
  5561  0F3F                     	;# 
  5562  0F40                     	;# 
  5563  0F41                     	;# 
  5564  0F43                     	;# 
  5565  0F44                     	;# 
  5566  0F45                     	;# 
  5567  0F46                     	;# 
  5568  0F47                     	;# 
  5569  0F48                     	;# 
  5570  0F49                     	;# 
  5571  0F4A                     	;# 
  5572  0F4B                     	;# 
  5573  0F4C                     	;# 
  5574  0F4E                     	;# 
  5575  0F4F                     	;# 
  5576  0F50                     	;# 
  5577  0F51                     	;# 
  5578  0F52                     	;# 
  5579  0F53                     	;# 
  5580  0F54                     	;# 
  5581  0F55                     	;# 
  5582  0F56                     	;# 
  5583  0F57                     	;# 
  5584  0F59                     	;# 
  5585  0F5A                     	;# 
  5586  0F5B                     	;# 
  5587  0F5C                     	;# 
  5588  0F5D                     	;# 
  5589  0F61                     	;# 
  5590  0F62                     	;# 
  5591  0F64                     	;# 
  5592  0F65                     	;# 
  5593  0F66                     	;# 
  5594  0F67                     	;# 
  5595  0F68                     	;# 
  5596  0F69                     	;# 
  5597  0F6A                     	;# 
  5598  0F6B                     	;# 
  5599  0F6C                     	;# 
  5600  0F6D                     	;# 
  5601  0FE4                     	;# 
  5602  0FE5                     	;# 
  5603  0FE6                     	;# 
  5604  0FE7                     	;# 
  5605  0FE8                     	;# 
  5606  0FE9                     	;# 
  5607  0FEA                     	;# 
  5608  0FEB                     	;# 
  5609  0FED                     	;# 
  5610  0FEE                     	;# 
  5611  0FEF                     	;# 
  5612  0000                     	;# 
  5613  0001                     	;# 
  5614  0002                     	;# 
  5615  0003                     	;# 
  5616  0004                     	;# 
  5617  0005                     	;# 
  5618  0006                     	;# 
  5619  0007                     	;# 
  5620  0008                     	;# 
  5621  0009                     	;# 
  5622  000A                     	;# 
  5623  000B                     	;# 
  5624  000C                     	;# 
  5625  000D                     	;# 
  5626  000E                     	;# 
  5627  000F                     	;# 
  5628  0010                     	;# 
  5629  0011                     	;# 
  5630  0012                     	;# 
  5631  0013                     	;# 
  5632  0014                     	;# 
  5633  0015                     	;# 
  5634  0016                     	;# 
  5635  0017                     	;# 
  5636  0018                     	;# 
  5637  0019                     	;# 
  5638  001A                     	;# 
  5639  001C                     	;# 
  5640  001C                     	;# 
  5641  001D                     	;# 
  5642  001D                     	;# 
  5643  001E                     	;# 
  5644  001F                     	;# 
  5645  008C                     	;# 
  5646  008C                     	;# 
  5647  008D                     	;# 
  5648  008E                     	;# 
  5649  008E                     	;# 
  5650  008F                     	;# 
  5651  0090                     	;# 
  5652  0090                     	;# 
  5653  0091                     	;# 
  5654  0093                     	;# 
  5655  0094                     	;# 
  5656  0095                     	;# 
  5657  0096                     	;# 
  5658  0097                     	;# 
  5659  0098                     	;# 
  5660  0099                     	;# 
  5661  009A                     	;# 
  5662  009B                     	;# 
  5663  009C                     	;# 
  5664  009D                     	;# 
  5665  009E                     	;# 
  5666  010C                     	;# 
  5667  010D                     	;# 
  5668  010E                     	;# 
  5669  010E                     	;# 
  5670  010F                     	;# 
  5671  0110                     	;# 
  5672  0110                     	;# 
  5673  0111                     	;# 
  5674  0112                     	;# 
  5675  0112                     	;# 
  5676  0113                     	;# 
  5677  0114                     	;# 
  5678  0114                     	;# 
  5679  0115                     	;# 
  5680  0116                     	;# 
  5681  0116                     	;# 
  5682  0117                     	;# 
  5683  0119                     	;# 
  5684  0119                     	;# 
  5685  0119                     	;# 
  5686  011A                     	;# 
  5687  011A                     	;# 
  5688  011A                     	;# 
  5689  011B                     	;# 
  5690  011B                     	;# 
  5691  011B                     	;# 
  5692  011B                     	;# 
  5693  011B                     	;# 
  5694  011C                     	;# 
  5695  011C                     	;# 
  5696  011C                     	;# 
  5697  011D                     	;# 
  5698  011D                     	;# 
  5699  011D                     	;# 
  5700  011E                     	;# 
  5701  011E                     	;# 
  5702  011E                     	;# 
  5703  011F                     	;# 
  5704  011F                     	;# 
  5705  011F                     	;# 
  5706  011F                     	;# 
  5707  011F                     	;# 
  5708  018C                     	;# 
  5709  018D                     	;# 
  5710  018E                     	;# 
  5711  018F                     	;# 
  5712  0190                     	;# 
  5713  0191                     	;# 
  5714  0192                     	;# 
  5715  0196                     	;# 
  5716  0197                     	;# 
  5717  0198                     	;# 
  5718  0199                     	;# 
  5719  019A                     	;# 
  5720  019B                     	;# 
  5721  019C                     	;# 
  5722  020C                     	;# 
  5723  020C                     	;# 
  5724  020D                     	;# 
  5725  020E                     	;# 
  5726  020F                     	;# 
  5727  020F                     	;# 
  5728  0210                     	;# 
  5729  0210                     	;# 
  5730  0211                     	;# 
  5731  0211                     	;# 
  5732  0212                     	;# 
  5733  0212                     	;# 
  5734  0213                     	;# 
  5735  0214                     	;# 
  5736  0215                     	;# 
  5737  0215                     	;# 
  5738  0216                     	;# 
  5739  0216                     	;# 
  5740  0217                     	;# 
  5741  0217                     	;# 
  5742  0218                     	;# 
  5743  0218                     	;# 
  5744  0219                     	;# 
  5745  021A                     	;# 
  5746  021B                     	;# 
  5747  021B                     	;# 
  5748  021C                     	;# 
  5749  021C                     	;# 
  5750  021D                     	;# 
  5751  021D                     	;# 
  5752  021E                     	;# 
  5753  021F                     	;# 
  5754  028C                     	;# 
  5755  028C                     	;# 
  5756  028D                     	;# 
  5757  028D                     	;# 
  5758  028E                     	;# 
  5759  028F                     	;# 
  5760  0290                     	;# 
  5761  0290                     	;# 
  5762  0291                     	;# 
  5763  0292                     	;# 
  5764  0292                     	;# 
  5765  0293                     	;# 
  5766  0293                     	;# 
  5767  0294                     	;# 
  5768  0295                     	;# 
  5769  0296                     	;# 
  5770  0296                     	;# 
  5771  0297                     	;# 
  5772  0298                     	;# 
  5773  0298                     	;# 
  5774  0299                     	;# 
  5775  0299                     	;# 
  5776  029A                     	;# 
  5777  029B                     	;# 
  5778  029C                     	;# 
  5779  029C                     	;# 
  5780  029D                     	;# 
  5781  030C                     	;# 
  5782  030C                     	;# 
  5783  030D                     	;# 
  5784  030E                     	;# 
  5785  030F                     	;# 
  5786  0310                     	;# 
  5787  0310                     	;# 
  5788  0311                     	;# 
  5789  0312                     	;# 
  5790  0313                     	;# 
  5791  0314                     	;# 
  5792  0314                     	;# 
  5793  0315                     	;# 
  5794  0316                     	;# 
  5795  0317                     	;# 
  5796  0318                     	;# 
  5797  0318                     	;# 
  5798  0319                     	;# 
  5799  031A                     	;# 
  5800  031B                     	;# 
  5801  031C                     	;# 
  5802  031C                     	;# 
  5803  031D                     	;# 
  5804  031E                     	;# 
  5805  031F                     	;# 
  5806  038C                     	;# 
  5807  038C                     	;# 
  5808  038D                     	;# 
  5809  038E                     	;# 
  5810  0390                     	;# 
  5811  0390                     	;# 
  5812  0391                     	;# 
  5813  0392                     	;# 
  5814  040C                     	;# 
  5815  040D                     	;# 
  5816  040E                     	;# 
  5817  040F                     	;# 
  5818  0410                     	;# 
  5819  0411                     	;# 
  5820  0416                     	;# 
  5821  0416                     	;# 
  5822  0417                     	;# 
  5823  0418                     	;# 
  5824  0418                     	;# 
  5825  0419                     	;# 
  5826  041A                     	;# 
  5827  041A                     	;# 
  5828  041B                     	;# 
  5829  041C                     	;# 
  5830  041C                     	;# 
  5831  041D                     	;# 
  5832  041E                     	;# 
  5833  041F                     	;# 
  5834  048C                     	;# 
  5835  048C                     	;# 
  5836  048D                     	;# 
  5837  048E                     	;# 
  5838  048F                     	;# 
  5839  048F                     	;# 
  5840  0490                     	;# 
  5841  0491                     	;# 
  5842  0492                     	;# 
  5843  0492                     	;# 
  5844  0493                     	;# 
  5845  0494                     	;# 
  5846  0495                     	;# 
  5847  0495                     	;# 
  5848  0496                     	;# 
  5849  0497                     	;# 
  5850  0498                     	;# 
  5851  0499                     	;# 
  5852  049A                     	;# 
  5853  049B                     	;# 
  5854  049C                     	;# 
  5855  049D                     	;# 
  5856  050C                     	;# 
  5857  050C                     	;# 
  5858  050D                     	;# 
  5859  050E                     	;# 
  5860  050F                     	;# 
  5861  050F                     	;# 
  5862  0510                     	;# 
  5863  0511                     	;# 
  5864  0512                     	;# 
  5865  0512                     	;# 
  5866  0513                     	;# 
  5867  0514                     	;# 
  5868  0515                     	;# 
  5869  0515                     	;# 
  5870  0516                     	;# 
  5871  0517                     	;# 
  5872  0518                     	;# 
  5873  0519                     	;# 
  5874  051A                     	;# 
  5875  051B                     	;# 
  5876  051C                     	;# 
  5877  051D                     	;# 
  5878  058C                     	;# 
  5879  058C                     	;# 
  5880  058D                     	;# 
  5881  058E                     	;# 
  5882  058F                     	;# 
  5883  058F                     	;# 
  5884  0590                     	;# 
  5885  0591                     	;# 
  5886  0592                     	;# 
  5887  0593                     	;# 
  5888  060C                     	;# 
  5889  060D                     	;# 
  5890  060E                     	;# 
  5891  060F                     	;# 
  5892  0610                     	;# 
  5893  0611                     	;# 
  5894  0612                     	;# 
  5895  0613                     	;# 
  5896  0614                     	;# 
  5897  0616                     	;# 
  5898  0617                     	;# 
  5899  0618                     	;# 
  5900  0619                     	;# 
  5901  061A                     	;# 
  5902  061B                     	;# 
  5903  061C                     	;# 
  5904  061D                     	;# 
  5905  061E                     	;# 
  5906  068C                     	;# 
  5907  068D                     	;# 
  5908  068E                     	;# 
  5909  068F                     	;# 
  5910  0690                     	;# 
  5911  0691                     	;# 
  5912  0692                     	;# 
  5913  0693                     	;# 
  5914  0694                     	;# 
  5915  070C                     	;# 
  5916  070D                     	;# 
  5917  070E                     	;# 
  5918  070F                     	;# 
  5919  0710                     	;# 
  5920  0711                     	;# 
  5921  0712                     	;# 
  5922  0713                     	;# 
  5923  0714                     	;# 
  5924  0716                     	;# 
  5925  0717                     	;# 
  5926  0718                     	;# 
  5927  0719                     	;# 
  5928  071A                     	;# 
  5929  071B                     	;# 
  5930  071C                     	;# 
  5931  071D                     	;# 
  5932  071E                     	;# 
  5933  0796                     	;# 
  5934  0797                     	;# 
  5935  0798                     	;# 
  5936  0799                     	;# 
  5937  079A                     	;# 
  5938  079B                     	;# 
  5939  080C                     	;# 
  5940  080D                     	;# 
  5941  080E                     	;# 
  5942  080F                     	;# 
  5943  0810                     	;# 
  5944  0811                     	;# 
  5945  0812                     	;# 
  5946  0813                     	;# 
  5947  0814                     	;# 
  5948  081A                     	;# 
  5949  081B                     	;# 
  5950  081C                     	;# 
  5951  081D                     	;# 
  5952  081E                     	;# 
  5953  081F                     	;# 
  5954  088C                     	;# 
  5955  088D                     	;# 
  5956  088E                     	;# 
  5957  088F                     	;# 
  5958  0890                     	;# 
  5959  0891                     	;# 
  5960  0892                     	;# 
  5961  0893                     	;# 
  5962  0895                     	;# 
  5963  0896                     	;# 
  5964  0897                     	;# 
  5965  0898                     	;# 
  5966  0899                     	;# 
  5967  089A                     	;# 
  5968  089B                     	;# 
  5969  090C                     	;# 
  5970  090E                     	;# 
  5971  090F                     	;# 
  5972  091F                     	;# 
  5973  091F                     	;# 
  5974  098F                     	;# 
  5975  098F                     	;# 
  5976  0990                     	;# 
  5977  0991                     	;# 
  5978  0992                     	;# 
  5979  0993                     	;# 
  5980  0994                     	;# 
  5981  0995                     	;# 
  5982  0996                     	;# 
  5983  0997                     	;# 
  5984  0E0F                     	;# 
  5985  0E10                     	;# 
  5986  0E11                     	;# 
  5987  0E12                     	;# 
  5988  0E13                     	;# 
  5989  0E14                     	;# 
  5990  0E15                     	;# 
  5991  0E16                     	;# 
  5992  0E17                     	;# 
  5993  0E18                     	;# 
  5994  0E19                     	;# 
  5995  0E1A                     	;# 
  5996  0E1B                     	;# 
  5997  0E1C                     	;# 
  5998  0E1D                     	;# 
  5999  0E1E                     	;# 
  6000  0E1F                     	;# 
  6001  0E20                     	;# 
  6002  0E21                     	;# 
  6003  0E22                     	;# 
  6004  0E23                     	;# 
  6005  0E24                     	;# 
  6006  0E25                     	;# 
  6007  0E26                     	;# 
  6008  0E27                     	;# 
  6009  0E28                     	;# 
  6010  0E29                     	;# 
  6011  0E2A                     	;# 
  6012  0E2B                     	;# 
  6013  0E2C                     	;# 
  6014  0E2D                     	;# 
  6015  0E2E                     	;# 
  6016  0E2F                     	;# 
  6017  0E30                     	;# 
  6018  0E31                     	;# 
  6019  0E32                     	;# 
  6020  0E33                     	;# 
  6021  0E34                     	;# 
  6022  0E35                     	;# 
  6023  0E36                     	;# 
  6024  0E37                     	;# 
  6025  0E8F                     	;# 
  6026  0E90                     	;# 
  6027  0E91                     	;# 
  6028  0E92                     	;# 
  6029  0E93                     	;# 
  6030  0E94                     	;# 
  6031  0E95                     	;# 
  6032  0E96                     	;# 
  6033  0E97                     	;# 
  6034  0E9C                     	;# 
  6035  0E9D                     	;# 
  6036  0E9E                     	;# 
  6037  0EA1                     	;# 
  6038  0EA2                     	;# 
  6039  0EA3                     	;# 
  6040  0EA4                     	;# 
  6041  0EA5                     	;# 
  6042  0EA9                     	;# 
  6043  0EAA                     	;# 
  6044  0EAB                     	;# 
  6045  0EAC                     	;# 
  6046  0EB1                     	;# 
  6047  0EB2                     	;# 
  6048  0EB3                     	;# 
  6049  0EB8                     	;# 
  6050  0EB9                     	;# 
  6051  0EBA                     	;# 
  6052  0EBB                     	;# 
  6053  0EBC                     	;# 
  6054  0EBD                     	;# 
  6055  0EBE                     	;# 
  6056  0EC3                     	;# 
  6057  0EC5                     	;# 
  6058  0EC6                     	;# 
  6059  0EC7                     	;# 
  6060  0EC8                     	;# 
  6061  0EC9                     	;# 
  6062  0ECA                     	;# 
  6063  0ECB                     	;# 
  6064  0ECC                     	;# 
  6065  0F10                     	;# 
  6066  0F11                     	;# 
  6067  0F12                     	;# 
  6068  0F13                     	;# 
  6069  0F14                     	;# 
  6070  0F15                     	;# 
  6071  0F16                     	;# 
  6072  0F17                     	;# 
  6073  0F18                     	;# 
  6074  0F19                     	;# 
  6075  0F1A                     	;# 
  6076  0F1B                     	;# 
  6077  0F1C                     	;# 
  6078  0F1D                     	;# 
  6079  0F1E                     	;# 
  6080  0F1F                     	;# 
  6081  0F20                     	;# 
  6082  0F21                     	;# 
  6083  0F22                     	;# 
  6084  0F23                     	;# 
  6085  0F24                     	;# 
  6086  0F25                     	;# 
  6087  0F26                     	;# 
  6088  0F27                     	;# 
  6089  0F28                     	;# 
  6090  0F29                     	;# 
  6091  0F2A                     	;# 
  6092  0F2B                     	;# 
  6093  0F2C                     	;# 
  6094  0F2D                     	;# 
  6095  0F2E                     	;# 
  6096  0F2F                     	;# 
  6097  0F30                     	;# 
  6098  0F31                     	;# 
  6099  0F32                     	;# 
  6100  0F38                     	;# 
  6101  0F39                     	;# 
  6102  0F3A                     	;# 
  6103  0F3B                     	;# 
  6104  0F3C                     	;# 
  6105  0F3D                     	;# 
  6106  0F3E                     	;# 
  6107  0F3F                     	;# 
  6108  0F40                     	;# 
  6109  0F41                     	;# 
  6110  0F43                     	;# 
  6111  0F44                     	;# 
  6112  0F45                     	;# 
  6113  0F46                     	;# 
  6114  0F47                     	;# 
  6115  0F48                     	;# 
  6116  0F49                     	;# 
  6117  0F4A                     	;# 
  6118  0F4B                     	;# 
  6119  0F4C                     	;# 
  6120  0F4E                     	;# 
  6121  0F4F                     	;# 
  6122  0F50                     	;# 
  6123  0F51                     	;# 
  6124  0F52                     	;# 
  6125  0F53                     	;# 
  6126  0F54                     	;# 
  6127  0F55                     	;# 
  6128  0F56                     	;# 
  6129  0F57                     	;# 
  6130  0F59                     	;# 
  6131  0F5A                     	;# 
  6132  0F5B                     	;# 
  6133  0F5C                     	;# 
  6134  0F5D                     	;# 
  6135  0F61                     	;# 
  6136  0F62                     	;# 
  6137  0F64                     	;# 
  6138  0F65                     	;# 
  6139  0F66                     	;# 
  6140  0F67                     	;# 
  6141  0F68                     	;# 
  6142  0F69                     	;# 
  6143  0F6A                     	;# 
  6144  0F6B                     	;# 
  6145  0F6C                     	;# 
  6146  0F6D                     	;# 
  6147  0FE4                     	;# 
  6148  0FE5                     	;# 
  6149  0FE6                     	;# 
  6150  0FE7                     	;# 
  6151  0FE8                     	;# 
  6152  0FE9                     	;# 
  6153  0FEA                     	;# 
  6154  0FEB                     	;# 
  6155  0FED                     	;# 
  6156  0FEE                     	;# 
  6157  0FEF                     	;# 
  6158  0000                     	;# 
  6159  0001                     	;# 
  6160  0002                     	;# 
  6161  0003                     	;# 
  6162  0004                     	;# 
  6163  0005                     	;# 
  6164  0006                     	;# 
  6165  0007                     	;# 
  6166  0008                     	;# 
  6167  0009                     	;# 
  6168  000A                     	;# 
  6169  000B                     	;# 
  6170  000C                     	;# 
  6171  000D                     	;# 
  6172  000E                     	;# 
  6173  000F                     	;# 
  6174  0010                     	;# 
  6175  0011                     	;# 
  6176  0012                     	;# 
  6177  0013                     	;# 
  6178  0014                     	;# 
  6179  0015                     	;# 
  6180  0016                     	;# 
  6181  0017                     	;# 
  6182  0018                     	;# 
  6183  0019                     	;# 
  6184  001A                     	;# 
  6185  001C                     	;# 
  6186  001C                     	;# 
  6187  001D                     	;# 
  6188  001D                     	;# 
  6189  001E                     	;# 
  6190  001F                     	;# 
  6191  008C                     	;# 
  6192  008C                     	;# 
  6193  008D                     	;# 
  6194  008E                     	;# 
  6195  008E                     	;# 
  6196  008F                     	;# 
  6197  0090                     	;# 
  6198  0090                     	;# 
  6199  0091                     	;# 
  6200  0093                     	;# 
  6201  0094                     	;# 
  6202  0095                     	;# 
  6203  0096                     	;# 
  6204  0097                     	;# 
  6205  0098                     	;# 
  6206  0099                     	;# 
  6207  009A                     	;# 
  6208  009B                     	;# 
  6209  009C                     	;# 
  6210  009D                     	;# 
  6211  009E                     	;# 
  6212  010C                     	;# 
  6213  010D                     	;# 
  6214  010E                     	;# 
  6215  010E                     	;# 
  6216  010F                     	;# 
  6217  0110                     	;# 
  6218  0110                     	;# 
  6219  0111                     	;# 
  6220  0112                     	;# 
  6221  0112                     	;# 
  6222  0113                     	;# 
  6223  0114                     	;# 
  6224  0114                     	;# 
  6225  0115                     	;# 
  6226  0116                     	;# 
  6227  0116                     	;# 
  6228  0117                     	;# 
  6229  0119                     	;# 
  6230  0119                     	;# 
  6231  0119                     	;# 
  6232  011A                     	;# 
  6233  011A                     	;# 
  6234  011A                     	;# 
  6235  011B                     	;# 
  6236  011B                     	;# 
  6237  011B                     	;# 
  6238  011B                     	;# 
  6239  011B                     	;# 
  6240  011C                     	;# 
  6241  011C                     	;# 
  6242  011C                     	;# 
  6243  011D                     	;# 
  6244  011D                     	;# 
  6245  011D                     	;# 
  6246  011E                     	;# 
  6247  011E                     	;# 
  6248  011E                     	;# 
  6249  011F                     	;# 
  6250  011F                     	;# 
  6251  011F                     	;# 
  6252  011F                     	;# 
  6253  011F                     	;# 
  6254  018C                     	;# 
  6255  018D                     	;# 
  6256  018E                     	;# 
  6257  018F                     	;# 
  6258  0190                     	;# 
  6259  0191                     	;# 
  6260  0192                     	;# 
  6261  0196                     	;# 
  6262  0197                     	;# 
  6263  0198                     	;# 
  6264  0199                     	;# 
  6265  019A                     	;# 
  6266  019B                     	;# 
  6267  019C                     	;# 
  6268  020C                     	;# 
  6269  020C                     	;# 
  6270  020D                     	;# 
  6271  020E                     	;# 
  6272  020F                     	;# 
  6273  020F                     	;# 
  6274  0210                     	;# 
  6275  0210                     	;# 
  6276  0211                     	;# 
  6277  0211                     	;# 
  6278  0212                     	;# 
  6279  0212                     	;# 
  6280  0213                     	;# 
  6281  0214                     	;# 
  6282  0215                     	;# 
  6283  0215                     	;# 
  6284  0216                     	;# 
  6285  0216                     	;# 
  6286  0217                     	;# 
  6287  0217                     	;# 
  6288  0218                     	;# 
  6289  0218                     	;# 
  6290  0219                     	;# 
  6291  021A                     	;# 
  6292  021B                     	;# 
  6293  021B                     	;# 
  6294  021C                     	;# 
  6295  021C                     	;# 
  6296  021D                     	;# 
  6297  021D                     	;# 
  6298  021E                     	;# 
  6299  021F                     	;# 
  6300  028C                     	;# 
  6301  028C                     	;# 
  6302  028D                     	;# 
  6303  028D                     	;# 
  6304  028E                     	;# 
  6305  028F                     	;# 
  6306  0290                     	;# 
  6307  0290                     	;# 
  6308  0291                     	;# 
  6309  0292                     	;# 
  6310  0292                     	;# 
  6311  0293                     	;# 
  6312  0293                     	;# 
  6313  0294                     	;# 
  6314  0295                     	;# 
  6315  0296                     	;# 
  6316  0296                     	;# 
  6317  0297                     	;# 
  6318  0298                     	;# 
  6319  0298                     	;# 
  6320  0299                     	;# 
  6321  0299                     	;# 
  6322  029A                     	;# 
  6323  029B                     	;# 
  6324  029C                     	;# 
  6325  029C                     	;# 
  6326  029D                     	;# 
  6327  030C                     	;# 
  6328  030C                     	;# 
  6329  030D                     	;# 
  6330  030E                     	;# 
  6331  030F                     	;# 
  6332  0310                     	;# 
  6333  0310                     	;# 
  6334  0311                     	;# 
  6335  0312                     	;# 
  6336  0313                     	;# 
  6337  0314                     	;# 
  6338  0314                     	;# 
  6339  0315                     	;# 
  6340  0316                     	;# 
  6341  0317                     	;# 
  6342  0318                     	;# 
  6343  0318                     	;# 
  6344  0319                     	;# 
  6345  031A                     	;# 
  6346  031B                     	;# 
  6347  031C                     	;# 
  6348  031C                     	;# 
  6349  031D                     	;# 
  6350  031E                     	;# 
  6351  031F                     	;# 
  6352  038C                     	;# 
  6353  038C                     	;# 
  6354  038D                     	;# 
  6355  038E                     	;# 
  6356  0390                     	;# 
  6357  0390                     	;# 
  6358  0391                     	;# 
  6359  0392                     	;# 
  6360  040C                     	;# 
  6361  040D                     	;# 
  6362  040E                     	;# 
  6363  040F                     	;# 
  6364  0410                     	;# 
  6365  0411                     	;# 
  6366  0416                     	;# 
  6367  0416                     	;# 
  6368  0417                     	;# 
  6369  0418                     	;# 
  6370  0418                     	;# 
  6371  0419                     	;# 
  6372  041A                     	;# 
  6373  041A                     	;# 
  6374  041B                     	;# 
  6375  041C                     	;# 
  6376  041C                     	;# 
  6377  041D                     	;# 
  6378  041E                     	;# 
  6379  041F                     	;# 
  6380  048C                     	;# 
  6381  048C                     	;# 
  6382  048D                     	;# 
  6383  048E                     	;# 
  6384  048F                     	;# 
  6385  048F                     	;# 
  6386  0490                     	;# 
  6387  0491                     	;# 
  6388  0492                     	;# 
  6389  0492                     	;# 
  6390  0493                     	;# 
  6391  0494                     	;# 
  6392  0495                     	;# 
  6393  0495                     	;# 
  6394  0496                     	;# 
  6395  0497                     	;# 
  6396  0498                     	;# 
  6397  0499                     	;# 
  6398  049A                     	;# 
  6399  049B                     	;# 
  6400  049C                     	;# 
  6401  049D                     	;# 
  6402  050C                     	;# 
  6403  050C                     	;# 
  6404  050D                     	;# 
  6405  050E                     	;# 
  6406  050F                     	;# 
  6407  050F                     	;# 
  6408  0510                     	;# 
  6409  0511                     	;# 
  6410  0512                     	;# 
  6411  0512                     	;# 
  6412  0513                     	;# 
  6413  0514                     	;# 
  6414  0515                     	;# 
  6415  0515                     	;# 
  6416  0516                     	;# 
  6417  0517                     	;# 
  6418  0518                     	;# 
  6419  0519                     	;# 
  6420  051A                     	;# 
  6421  051B                     	;# 
  6422  051C                     	;# 
  6423  051D                     	;# 
  6424  058C                     	;# 
  6425  058C                     	;# 
  6426  058D                     	;# 
  6427  058E                     	;# 
  6428  058F                     	;# 
  6429  058F                     	;# 
  6430  0590                     	;# 
  6431  0591                     	;# 
  6432  0592                     	;# 
  6433  0593                     	;# 
  6434  060C                     	;# 
  6435  060D                     	;# 
  6436  060E                     	;# 
  6437  060F                     	;# 
  6438  0610                     	;# 
  6439  0611                     	;# 
  6440  0612                     	;# 
  6441  0613                     	;# 
  6442  0614                     	;# 
  6443  0616                     	;# 
  6444  0617                     	;# 
  6445  0618                     	;# 
  6446  0619                     	;# 
  6447  061A                     	;# 
  6448  061B                     	;# 
  6449  061C                     	;# 
  6450  061D                     	;# 
  6451  061E                     	;# 
  6452  068C                     	;# 
  6453  068D                     	;# 
  6454  068E                     	;# 
  6455  068F                     	;# 
  6456  0690                     	;# 
  6457  0691                     	;# 
  6458  0692                     	;# 
  6459  0693                     	;# 
  6460  0694                     	;# 
  6461  070C                     	;# 
  6462  070D                     	;# 
  6463  070E                     	;# 
  6464  070F                     	;# 
  6465  0710                     	;# 
  6466  0711                     	;# 
  6467  0712                     	;# 
  6468  0713                     	;# 
  6469  0714                     	;# 
  6470  0716                     	;# 
  6471  0717                     	;# 
  6472  0718                     	;# 
  6473  0719                     	;# 
  6474  071A                     	;# 
  6475  071B                     	;# 
  6476  071C                     	;# 
  6477  071D                     	;# 
  6478  071E                     	;# 
  6479  0796                     	;# 
  6480  0797                     	;# 
  6481  0798                     	;# 
  6482  0799                     	;# 
  6483  079A                     	;# 
  6484  079B                     	;# 
  6485  080C                     	;# 
  6486  080D                     	;# 
  6487  080E                     	;# 
  6488  080F                     	;# 
  6489  0810                     	;# 
  6490  0811                     	;# 
  6491  0812                     	;# 
  6492  0813                     	;# 
  6493  0814                     	;# 
  6494  081A                     	;# 
  6495  081B                     	;# 
  6496  081C                     	;# 
  6497  081D                     	;# 
  6498  081E                     	;# 
  6499  081F                     	;# 
  6500  088C                     	;# 
  6501  088D                     	;# 
  6502  088E                     	;# 
  6503  088F                     	;# 
  6504  0890                     	;# 
  6505  0891                     	;# 
  6506  0892                     	;# 
  6507  0893                     	;# 
  6508  0895                     	;# 
  6509  0896                     	;# 
  6510  0897                     	;# 
  6511  0898                     	;# 
  6512  0899                     	;# 
  6513  089A                     	;# 
  6514  089B                     	;# 
  6515  090C                     	;# 
  6516  090E                     	;# 
  6517  090F                     	;# 
  6518  091F                     	;# 
  6519  091F                     	;# 
  6520  098F                     	;# 
  6521  098F                     	;# 
  6522  0990                     	;# 
  6523  0991                     	;# 
  6524  0992                     	;# 
  6525  0993                     	;# 
  6526  0994                     	;# 
  6527  0995                     	;# 
  6528  0996                     	;# 
  6529  0997                     	;# 
  6530  0E0F                     	;# 
  6531  0E10                     	;# 
  6532  0E11                     	;# 
  6533  0E12                     	;# 
  6534  0E13                     	;# 
  6535  0E14                     	;# 
  6536  0E15                     	;# 
  6537  0E16                     	;# 
  6538  0E17                     	;# 
  6539  0E18                     	;# 
  6540  0E19                     	;# 
  6541  0E1A                     	;# 
  6542  0E1B                     	;# 
  6543  0E1C                     	;# 
  6544  0E1D                     	;# 
  6545  0E1E                     	;# 
  6546  0E1F                     	;# 
  6547  0E20                     	;# 
  6548  0E21                     	;# 
  6549  0E22                     	;# 
  6550  0E23                     	;# 
  6551  0E24                     	;# 
  6552  0E25                     	;# 
  6553  0E26                     	;# 
  6554  0E27                     	;# 
  6555  0E28                     	;# 
  6556  0E29                     	;# 
  6557  0E2A                     	;# 
  6558  0E2B                     	;# 
  6559  0E2C                     	;# 
  6560  0E2D                     	;# 
  6561  0E2E                     	;# 
  6562  0E2F                     	;# 
  6563  0E30                     	;# 
  6564  0E31                     	;# 
  6565  0E32                     	;# 
  6566  0E33                     	;# 
  6567  0E34                     	;# 
  6568  0E35                     	;# 
  6569  0E36                     	;# 
  6570  0E37                     	;# 
  6571  0E8F                     	;# 
  6572  0E90                     	;# 
  6573  0E91                     	;# 
  6574  0E92                     	;# 
  6575  0E93                     	;# 
  6576  0E94                     	;# 
  6577  0E95                     	;# 
  6578  0E96                     	;# 
  6579  0E97                     	;# 
  6580  0E9C                     	;# 
  6581  0E9D                     	;# 
  6582  0E9E                     	;# 
  6583  0EA1                     	;# 
  6584  0EA2                     	;# 
  6585  0EA3                     	;# 
  6586  0EA4                     	;# 
  6587  0EA5                     	;# 
  6588  0EA9                     	;# 
  6589  0EAA                     	;# 
  6590  0EAB                     	;# 
  6591  0EAC                     	;# 
  6592  0EB1                     	;# 
  6593  0EB2                     	;# 
  6594  0EB3                     	;# 
  6595  0EB8                     	;# 
  6596  0EB9                     	;# 
  6597  0EBA                     	;# 
  6598  0EBB                     	;# 
  6599  0EBC                     	;# 
  6600  0EBD                     	;# 
  6601  0EBE                     	;# 
  6602  0EC3                     	;# 
  6603  0EC5                     	;# 
  6604  0EC6                     	;# 
  6605  0EC7                     	;# 
  6606  0EC8                     	;# 
  6607  0EC9                     	;# 
  6608  0ECA                     	;# 
  6609  0ECB                     	;# 
  6610  0ECC                     	;# 
  6611  0F10                     	;# 
  6612  0F11                     	;# 
  6613  0F12                     	;# 
  6614  0F13                     	;# 
  6615  0F14                     	;# 
  6616  0F15                     	;# 
  6617  0F16                     	;# 
  6618  0F17                     	;# 
  6619  0F18                     	;# 
  6620  0F19                     	;# 
  6621  0F1A                     	;# 
  6622  0F1B                     	;# 
  6623  0F1C                     	;# 
  6624  0F1D                     	;# 
  6625  0F1E                     	;# 
  6626  0F1F                     	;# 
  6627  0F20                     	;# 
  6628  0F21                     	;# 
  6629  0F22                     	;# 
  6630  0F23                     	;# 
  6631  0F24                     	;# 
  6632  0F25                     	;# 
  6633  0F26                     	;# 
  6634  0F27                     	;# 
  6635  0F28                     	;# 
  6636  0F29                     	;# 
  6637  0F2A                     	;# 
  6638  0F2B                     	;# 
  6639  0F2C                     	;# 
  6640  0F2D                     	;# 
  6641  0F2E                     	;# 
  6642  0F2F                     	;# 
  6643  0F30                     	;# 
  6644  0F31                     	;# 
  6645  0F32                     	;# 
  6646  0F38                     	;# 
  6647  0F39                     	;# 
  6648  0F3A                     	;# 
  6649  0F3B                     	;# 
  6650  0F3C                     	;# 
  6651  0F3D                     	;# 
  6652  0F3E                     	;# 
  6653  0F3F                     	;# 
  6654  0F40                     	;# 
  6655  0F41                     	;# 
  6656  0F43                     	;# 
  6657  0F44                     	;# 
  6658  0F45                     	;# 
  6659  0F46                     	;# 
  6660  0F47                     	;# 
  6661  0F48                     	;# 
  6662  0F49                     	;# 
  6663  0F4A                     	;# 
  6664  0F4B                     	;# 
  6665  0F4C                     	;# 
  6666  0F4E                     	;# 
  6667  0F4F                     	;# 
  6668  0F50                     	;# 
  6669  0F51                     	;# 
  6670  0F52                     	;# 
  6671  0F53                     	;# 
  6672  0F54                     	;# 
  6673  0F55                     	;# 
  6674  0F56                     	;# 
  6675  0F57                     	;# 
  6676  0F59                     	;# 
  6677  0F5A                     	;# 
  6678  0F5B                     	;# 
  6679  0F5C                     	;# 
  6680  0F5D                     	;# 
  6681  0F61                     	;# 
  6682  0F62                     	;# 
  6683  0F64                     	;# 
  6684  0F65                     	;# 
  6685  0F66                     	;# 
  6686  0F67                     	;# 
  6687  0F68                     	;# 
  6688  0F69                     	;# 
  6689  0F6A                     	;# 
  6690  0F6B                     	;# 
  6691  0F6C                     	;# 
  6692  0F6D                     	;# 
  6693  0FE4                     	;# 
  6694  0FE5                     	;# 
  6695  0FE6                     	;# 
  6696  0FE7                     	;# 
  6697  0FE8                     	;# 
  6698  0FE9                     	;# 
  6699  0FEA                     	;# 
  6700  0FEB                     	;# 
  6701  0FED                     	;# 
  6702  0FEE                     	;# 
  6703  0FEF                     	;# 
  6704  0000                     	;# 
  6705  0001                     	;# 
  6706  0002                     	;# 
  6707  0003                     	;# 
  6708  0004                     	;# 
  6709  0005                     	;# 
  6710  0006                     	;# 
  6711  0007                     	;# 
  6712  0008                     	;# 
  6713  0009                     	;# 
  6714  000A                     	;# 
  6715  000B                     	;# 
  6716  000C                     	;# 
  6717  000D                     	;# 
  6718  000E                     	;# 
  6719  000F                     	;# 
  6720  0010                     	;# 
  6721  0011                     	;# 
  6722  0012                     	;# 
  6723  0013                     	;# 
  6724  0014                     	;# 
  6725  0015                     	;# 
  6726  0016                     	;# 
  6727  0017                     	;# 
  6728  0018                     	;# 
  6729  0019                     	;# 
  6730  001A                     	;# 
  6731  001C                     	;# 
  6732  001C                     	;# 
  6733  001D                     	;# 
  6734  001D                     	;# 
  6735  001E                     	;# 
  6736  001F                     	;# 
  6737  008C                     	;# 
  6738  008C                     	;# 
  6739  008D                     	;# 
  6740  008E                     	;# 
  6741  008E                     	;# 
  6742  008F                     	;# 
  6743  0090                     	;# 
  6744  0090                     	;# 
  6745  0091                     	;# 
  6746  0093                     	;# 
  6747  0094                     	;# 
  6748  0095                     	;# 
  6749  0096                     	;# 
  6750  0097                     	;# 
  6751  0098                     	;# 
  6752  0099                     	;# 
  6753  009A                     	;# 
  6754  009B                     	;# 
  6755  009C                     	;# 
  6756  009D                     	;# 
  6757  009E                     	;# 
  6758  010C                     	;# 
  6759  010D                     	;# 
  6760  010E                     	;# 
  6761  010E                     	;# 
  6762  010F                     	;# 
  6763  0110                     	;# 
  6764  0110                     	;# 
  6765  0111                     	;# 
  6766  0112                     	;# 
  6767  0112                     	;# 
  6768  0113                     	;# 
  6769  0114                     	;# 
  6770  0114                     	;# 
  6771  0115                     	;# 
  6772  0116                     	;# 
  6773  0116                     	;# 
  6774  0117                     	;# 
  6775  0119                     	;# 
  6776  0119                     	;# 
  6777  0119                     	;# 
  6778  011A                     	;# 
  6779  011A                     	;# 
  6780  011A                     	;# 
  6781  011B                     	;# 
  6782  011B                     	;# 
  6783  011B                     	;# 
  6784  011B                     	;# 
  6785  011B                     	;# 
  6786  011C                     	;# 
  6787  011C                     	;# 
  6788  011C                     	;# 
  6789  011D                     	;# 
  6790  011D                     	;# 
  6791  011D                     	;# 
  6792  011E                     	;# 
  6793  011E                     	;# 
  6794  011E                     	;# 
  6795  011F                     	;# 
  6796  011F                     	;# 
  6797  011F                     	;# 
  6798  011F                     	;# 
  6799  011F                     	;# 
  6800  018C                     	;# 
  6801  018D                     	;# 
  6802  018E                     	;# 
  6803  018F                     	;# 
  6804  0190                     	;# 
  6805  0191                     	;# 
  6806  0192                     	;# 
  6807  0196                     	;# 
  6808  0197                     	;# 
  6809  0198                     	;# 
  6810  0199                     	;# 
  6811  019A                     	;# 
  6812  019B                     	;# 
  6813  019C                     	;# 
  6814  020C                     	;# 
  6815  020C                     	;# 
  6816  020D                     	;# 
  6817  020E                     	;# 
  6818  020F                     	;# 
  6819  020F                     	;# 
  6820  0210                     	;# 
  6821  0210                     	;# 
  6822  0211                     	;# 
  6823  0211                     	;# 
  6824  0212                     	;# 
  6825  0212                     	;# 
  6826  0213                     	;# 
  6827  0214                     	;# 
  6828  0215                     	;# 
  6829  0215                     	;# 
  6830  0216                     	;# 
  6831  0216                     	;# 
  6832  0217                     	;# 
  6833  0217                     	;# 
  6834  0218                     	;# 
  6835  0218                     	;# 
  6836  0219                     	;# 
  6837  021A                     	;# 
  6838  021B                     	;# 
  6839  021B                     	;# 
  6840  021C                     	;# 
  6841  021C                     	;# 
  6842  021D                     	;# 
  6843  021D                     	;# 
  6844  021E                     	;# 
  6845  021F                     	;# 
  6846  028C                     	;# 
  6847  028C                     	;# 
  6848  028D                     	;# 
  6849  028D                     	;# 
  6850  028E                     	;# 
  6851  028F                     	;# 
  6852  0290                     	;# 
  6853  0290                     	;# 
  6854  0291                     	;# 
  6855  0292                     	;# 
  6856  0292                     	;# 
  6857  0293                     	;# 
  6858  0293                     	;# 
  6859  0294                     	;# 
  6860  0295                     	;# 
  6861  0296                     	;# 
  6862  0296                     	;# 
  6863  0297                     	;# 
  6864  0298                     	;# 
  6865  0298                     	;# 
  6866  0299                     	;# 
  6867  0299                     	;# 
  6868  029A                     	;# 
  6869  029B                     	;# 
  6870  029C                     	;# 
  6871  029C                     	;# 
  6872  029D                     	;# 
  6873  030C                     	;# 
  6874  030C                     	;# 
  6875  030D                     	;# 
  6876  030E                     	;# 
  6877  030F                     	;# 
  6878  0310                     	;# 
  6879  0310                     	;# 
  6880  0311                     	;# 
  6881  0312                     	;# 
  6882  0313                     	;# 
  6883  0314                     	;# 
  6884  0314                     	;# 
  6885  0315                     	;# 
  6886  0316                     	;# 
  6887  0317                     	;# 
  6888  0318                     	;# 
  6889  0318                     	;# 
  6890  0319                     	;# 
  6891  031A                     	;# 
  6892  031B                     	;# 
  6893  031C                     	;# 
  6894  031C                     	;# 
  6895  031D                     	;# 
  6896  031E                     	;# 
  6897  031F                     	;# 
  6898  038C                     	;# 
  6899  038C                     	;# 
  6900  038D                     	;# 
  6901  038E                     	;# 
  6902  0390                     	;# 
  6903  0390                     	;# 
  6904  0391                     	;# 
  6905  0392                     	;# 
  6906  040C                     	;# 
  6907  040D                     	;# 
  6908  040E                     	;# 
  6909  040F                     	;# 
  6910  0410                     	;# 
  6911  0411                     	;# 
  6912  0416                     	;# 
  6913  0416                     	;# 
  6914  0417                     	;# 
  6915  0418                     	;# 
  6916  0418                     	;# 
  6917  0419                     	;# 
  6918  041A                     	;# 
  6919  041A                     	;# 
  6920  041B                     	;# 
  6921  041C                     	;# 
  6922  041C                     	;# 
  6923  041D                     	;# 
  6924  041E                     	;# 
  6925  041F                     	;# 
  6926  048C                     	;# 
  6927  048C                     	;# 
  6928  048D                     	;# 
  6929  048E                     	;# 
  6930  048F                     	;# 
  6931  048F                     	;# 
  6932  0490                     	;# 
  6933  0491                     	;# 
  6934  0492                     	;# 
  6935  0492                     	;# 
  6936  0493                     	;# 
  6937  0494                     	;# 
  6938  0495                     	;# 
  6939  0495                     	;# 
  6940  0496                     	;# 
  6941  0497                     	;# 
  6942  0498                     	;# 
  6943  0499                     	;# 
  6944  049A                     	;# 
  6945  049B                     	;# 
  6946  049C                     	;# 
  6947  049D                     	;# 
  6948  050C                     	;# 
  6949  050C                     	;# 
  6950  050D                     	;# 
  6951  050E                     	;# 
  6952  050F                     	;# 
  6953  050F                     	;# 
  6954  0510                     	;# 
  6955  0511                     	;# 
  6956  0512                     	;# 
  6957  0512                     	;# 
  6958  0513                     	;# 
  6959  0514                     	;# 
  6960  0515                     	;# 
  6961  0515                     	;# 
  6962  0516                     	;# 
  6963  0517                     	;# 
  6964  0518                     	;# 
  6965  0519                     	;# 
  6966  051A                     	;# 
  6967  051B                     	;# 
  6968  051C                     	;# 
  6969  051D                     	;# 
  6970  058C                     	;# 
  6971  058C                     	;# 
  6972  058D                     	;# 
  6973  058E                     	;# 
  6974  058F                     	;# 
  6975  058F                     	;# 
  6976  0590                     	;# 
  6977  0591                     	;# 
  6978  0592                     	;# 
  6979  0593                     	;# 
  6980  060C                     	;# 
  6981  060D                     	;# 
  6982  060E                     	;# 
  6983  060F                     	;# 
  6984  0610                     	;# 
  6985  0611                     	;# 
  6986  0612                     	;# 
  6987  0613                     	;# 
  6988  0614                     	;# 
  6989  0616                     	;# 
  6990  0617                     	;# 
  6991  0618                     	;# 
  6992  0619                     	;# 
  6993  061A                     	;# 
  6994  061B                     	;# 
  6995  061C                     	;# 
  6996  061D                     	;# 
  6997  061E                     	;# 
  6998  068C                     	;# 
  6999  068D                     	;# 
  7000  068E                     	;# 
  7001  068F                     	;# 
  7002  0690                     	;# 
  7003  0691                     	;# 
  7004  0692                     	;# 
  7005  0693                     	;# 
  7006  0694                     	;# 
  7007  070C                     	;# 
  7008  070D                     	;# 
  7009  070E                     	;# 
  7010  070F                     	;# 
  7011  0710                     	;# 
  7012  0711                     	;# 
  7013  0712                     	;# 
  7014  0713                     	;# 
  7015  0714                     	;# 
  7016  0716                     	;# 
  7017  0717                     	;# 
  7018  0718                     	;# 
  7019  0719                     	;# 
  7020  071A                     	;# 
  7021  071B                     	;# 
  7022  071C                     	;# 
  7023  071D                     	;# 
  7024  071E                     	;# 
  7025  0796                     	;# 
  7026  0797                     	;# 
  7027  0798                     	;# 
  7028  0799                     	;# 
  7029  079A                     	;# 
  7030  079B                     	;# 
  7031  080C                     	;# 
  7032  080D                     	;# 
  7033  080E                     	;# 
  7034  080F                     	;# 
  7035  0810                     	;# 
  7036  0811                     	;# 
  7037  0812                     	;# 
  7038  0813                     	;# 
  7039  0814                     	;# 
  7040  081A                     	;# 
  7041  081B                     	;# 
  7042  081C                     	;# 
  7043  081D                     	;# 
  7044  081E                     	;# 
  7045  081F                     	;# 
  7046  088C                     	;# 
  7047  088D                     	;# 
  7048  088E                     	;# 
  7049  088F                     	;# 
  7050  0890                     	;# 
  7051  0891                     	;# 
  7052  0892                     	;# 
  7053  0893                     	;# 
  7054  0895                     	;# 
  7055  0896                     	;# 
  7056  0897                     	;# 
  7057  0898                     	;# 
  7058  0899                     	;# 
  7059  089A                     	;# 
  7060  089B                     	;# 
  7061  090C                     	;# 
  7062  090E                     	;# 
  7063  090F                     	;# 
  7064  091F                     	;# 
  7065  091F                     	;# 
  7066  098F                     	;# 
  7067  098F                     	;# 
  7068  0990                     	;# 
  7069  0991                     	;# 
  7070  0992                     	;# 
  7071  0993                     	;# 
  7072  0994                     	;# 
  7073  0995                     	;# 
  7074  0996                     	;# 
  7075  0997                     	;# 
  7076  0E0F                     	;# 
  7077  0E10                     	;# 
  7078  0E11                     	;# 
  7079  0E12                     	;# 
  7080  0E13                     	;# 
  7081  0E14                     	;# 
  7082  0E15                     	;# 
  7083  0E16                     	;# 
  7084  0E17                     	;# 
  7085  0E18                     	;# 
  7086  0E19                     	;# 
  7087  0E1A                     	;# 
  7088  0E1B                     	;# 
  7089  0E1C                     	;# 
  7090  0E1D                     	;# 
  7091  0E1E                     	;# 
  7092  0E1F                     	;# 
  7093  0E20                     	;# 
  7094  0E21                     	;# 
  7095  0E22                     	;# 
  7096  0E23                     	;# 
  7097  0E24                     	;# 
  7098  0E25                     	;# 
  7099  0E26                     	;# 
  7100  0E27                     	;# 
  7101  0E28                     	;# 
  7102  0E29                     	;# 
  7103  0E2A                     	;# 
  7104  0E2B                     	;# 
  7105  0E2C                     	;# 
  7106  0E2D                     	;# 
  7107  0E2E                     	;# 
  7108  0E2F                     	;# 
  7109  0E30                     	;# 
  7110  0E31                     	;# 
  7111  0E32                     	;# 
  7112  0E33                     	;# 
  7113  0E34                     	;# 
  7114  0E35                     	;# 
  7115  0E36                     	;# 
  7116  0E37                     	;# 
  7117  0E8F                     	;# 
  7118  0E90                     	;# 
  7119  0E91                     	;# 
  7120  0E92                     	;# 
  7121  0E93                     	;# 
  7122  0E94                     	;# 
  7123  0E95                     	;# 
  7124  0E96                     	;# 
  7125  0E97                     	;# 
  7126  0E9C                     	;# 
  7127  0E9D                     	;# 
  7128  0E9E                     	;# 
  7129  0EA1                     	;# 
  7130  0EA2                     	;# 
  7131  0EA3                     	;# 
  7132  0EA4                     	;# 
  7133  0EA5                     	;# 
  7134  0EA9                     	;# 
  7135  0EAA                     	;# 
  7136  0EAB                     	;# 
  7137  0EAC                     	;# 
  7138  0EB1                     	;# 
  7139  0EB2                     	;# 
  7140  0EB3                     	;# 
  7141  0EB8                     	;# 
  7142  0EB9                     	;# 
  7143  0EBA                     	;# 
  7144  0EBB                     	;# 
  7145  0EBC                     	;# 
  7146  0EBD                     	;# 
  7147  0EBE                     	;# 
  7148  0EC3                     	;# 
  7149  0EC5                     	;# 
  7150  0EC6                     	;# 
  7151  0EC7                     	;# 
  7152  0EC8                     	;# 
  7153  0EC9                     	;# 
  7154  0ECA                     	;# 
  7155  0ECB                     	;# 
  7156  0ECC                     	;# 
  7157  0F10                     	;# 
  7158  0F11                     	;# 
  7159  0F12                     	;# 
  7160  0F13                     	;# 
  7161  0F14                     	;# 
  7162  0F15                     	;# 
  7163  0F16                     	;# 
  7164  0F17                     	;# 
  7165  0F18                     	;# 
  7166  0F19                     	;# 
  7167  0F1A                     	;# 
  7168  0F1B                     	;# 
  7169  0F1C                     	;# 
  7170  0F1D                     	;# 
  7171  0F1E                     	;# 
  7172  0F1F                     	;# 
  7173  0F20                     	;# 
  7174  0F21                     	;# 
  7175  0F22                     	;# 
  7176  0F23                     	;# 
  7177  0F24                     	;# 
  7178  0F25                     	;# 
  7179  0F26                     	;# 
  7180  0F27                     	;# 
  7181  0F28                     	;# 
  7182  0F29                     	;# 
  7183  0F2A                     	;# 
  7184  0F2B                     	;# 
  7185  0F2C                     	;# 
  7186  0F2D                     	;# 
  7187  0F2E                     	;# 
  7188  0F2F                     	;# 
  7189  0F30                     	;# 
  7190  0F31                     	;# 
  7191  0F32                     	;# 
  7192  0F38                     	;# 
  7193  0F39                     	;# 
  7194  0F3A                     	;# 
  7195  0F3B                     	;# 
  7196  0F3C                     	;# 
  7197  0F3D                     	;# 
  7198  0F3E                     	;# 
  7199  0F3F                     	;# 
  7200  0F40                     	;# 
  7201  0F41                     	;# 
  7202  0F43                     	;# 
  7203  0F44                     	;# 
  7204  0F45                     	;# 
  7205  0F46                     	;# 
  7206  0F47                     	;# 
  7207  0F48                     	;# 
  7208  0F49                     	;# 
  7209  0F4A                     	;# 
  7210  0F4B                     	;# 
  7211  0F4C                     	;# 
  7212  0F4E                     	;# 
  7213  0F4F                     	;# 
  7214  0F50                     	;# 
  7215  0F51                     	;# 
  7216  0F52                     	;# 
  7217  0F53                     	;# 
  7218  0F54                     	;# 
  7219  0F55                     	;# 
  7220  0F56                     	;# 
  7221  0F57                     	;# 
  7222  0F59                     	;# 
  7223  0F5A                     	;# 
  7224  0F5B                     	;# 
  7225  0F5C                     	;# 
  7226  0F5D                     	;# 
  7227  0F61                     	;# 
  7228  0F62                     	;# 
  7229  0F64                     	;# 
  7230  0F65                     	;# 
  7231  0F66                     	;# 
  7232  0F67                     	;# 
  7233  0F68                     	;# 
  7234  0F69                     	;# 
  7235  0F6A                     	;# 
  7236  0F6B                     	;# 
  7237  0F6C                     	;# 
  7238  0F6D                     	;# 
  7239  0FE4                     	;# 
  7240  0FE5                     	;# 
  7241  0FE6                     	;# 
  7242  0FE7                     	;# 
  7243  0FE8                     	;# 
  7244  0FE9                     	;# 
  7245  0FEA                     	;# 
  7246  0FEB                     	;# 
  7247  0FED                     	;# 
  7248  0FEE                     	;# 
  7249  0FEF                     	;# 
  7250  0000                     	;# 
  7251  0001                     	;# 
  7252  0002                     	;# 
  7253  0003                     	;# 
  7254  0004                     	;# 
  7255  0005                     	;# 
  7256  0006                     	;# 
  7257  0007                     	;# 
  7258  0008                     	;# 
  7259  0009                     	;# 
  7260  000A                     	;# 
  7261  000B                     	;# 
  7262  000C                     	;# 
  7263  000D                     	;# 
  7264  000E                     	;# 
  7265  000F                     	;# 
  7266  0010                     	;# 
  7267  0011                     	;# 
  7268  0012                     	;# 
  7269  0013                     	;# 
  7270  0014                     	;# 
  7271  0015                     	;# 
  7272  0016                     	;# 
  7273  0017                     	;# 
  7274  0018                     	;# 
  7275  0019                     	;# 
  7276  001A                     	;# 
  7277  001C                     	;# 
  7278  001C                     	;# 
  7279  001D                     	;# 
  7280  001D                     	;# 
  7281  001E                     	;# 
  7282  001F                     	;# 
  7283  008C                     	;# 
  7284  008C                     	;# 
  7285  008D                     	;# 
  7286  008E                     	;# 
  7287  008E                     	;# 
  7288  008F                     	;# 
  7289  0090                     	;# 
  7290  0090                     	;# 
  7291  0091                     	;# 
  7292  0093                     	;# 
  7293  0094                     	;# 
  7294  0095                     	;# 
  7295  0096                     	;# 
  7296  0097                     	;# 
  7297  0098                     	;# 
  7298  0099                     	;# 
  7299  009A                     	;# 
  7300  009B                     	;# 
  7301  009C                     	;# 
  7302  009D                     	;# 
  7303  009E                     	;# 
  7304  010C                     	;# 
  7305  010D                     	;# 
  7306  010E                     	;# 
  7307  010E                     	;# 
  7308  010F                     	;# 
  7309  0110                     	;# 
  7310  0110                     	;# 
  7311  0111                     	;# 
  7312  0112                     	;# 
  7313  0112                     	;# 
  7314  0113                     	;# 
  7315  0114                     	;# 
  7316  0114                     	;# 
  7317  0115                     	;# 
  7318  0116                     	;# 
  7319  0116                     	;# 
  7320  0117                     	;# 
  7321  0119                     	;# 
  7322  0119                     	;# 
  7323  0119                     	;# 
  7324  011A                     	;# 
  7325  011A                     	;# 
  7326  011A                     	;# 
  7327  011B                     	;# 
  7328  011B                     	;# 
  7329  011B                     	;# 
  7330  011B                     	;# 
  7331  011B                     	;# 
  7332  011C                     	;# 
  7333  011C                     	;# 
  7334  011C                     	;# 
  7335  011D                     	;# 
  7336  011D                     	;# 
  7337  011D                     	;# 
  7338  011E                     	;# 
  7339  011E                     	;# 
  7340  011E                     	;# 
  7341  011F                     	;# 
  7342  011F                     	;# 
  7343  011F                     	;# 
  7344  011F                     	;# 
  7345  011F                     	;# 
  7346  018C                     	;# 
  7347  018D                     	;# 
  7348  018E                     	;# 
  7349  018F                     	;# 
  7350  0190                     	;# 
  7351  0191                     	;# 
  7352  0192                     	;# 
  7353  0196                     	;# 
  7354  0197                     	;# 
  7355  0198                     	;# 
  7356  0199                     	;# 
  7357  019A                     	;# 
  7358  019B                     	;# 
  7359  019C                     	;# 
  7360  020C                     	;# 
  7361  020C                     	;# 
  7362  020D                     	;# 
  7363  020E                     	;# 
  7364  020F                     	;# 
  7365  020F                     	;# 
  7366  0210                     	;# 
  7367  0210                     	;# 
  7368  0211                     	;# 
  7369  0211                     	;# 
  7370  0212                     	;# 
  7371  0212                     	;# 
  7372  0213                     	;# 
  7373  0214                     	;# 
  7374  0215                     	;# 
  7375  0215                     	;# 
  7376  0216                     	;# 
  7377  0216                     	;# 
  7378  0217                     	;# 
  7379  0217                     	;# 
  7380  0218                     	;# 
  7381  0218                     	;# 
  7382  0219                     	;# 
  7383  021A                     	;# 
  7384  021B                     	;# 
  7385  021B                     	;# 
  7386  021C                     	;# 
  7387  021C                     	;# 
  7388  021D                     	;# 
  7389  021D                     	;# 
  7390  021E                     	;# 
  7391  021F                     	;# 
  7392  028C                     	;# 
  7393  028C                     	;# 
  7394  028D                     	;# 
  7395  028D                     	;# 
  7396  028E                     	;# 
  7397  028F                     	;# 
  7398  0290                     	;# 
  7399  0290                     	;# 
  7400  0291                     	;# 
  7401  0292                     	;# 
  7402  0292                     	;# 
  7403  0293                     	;# 
  7404  0293                     	;# 
  7405  0294                     	;# 
  7406  0295                     	;# 
  7407  0296                     	;# 
  7408  0296                     	;# 
  7409  0297                     	;# 
  7410  0298                     	;# 
  7411  0298                     	;# 
  7412  0299                     	;# 
  7413  0299                     	;# 
  7414  029A                     	;# 
  7415  029B                     	;# 
  7416  029C                     	;# 
  7417  029C                     	;# 
  7418  029D                     	;# 
  7419  030C                     	;# 
  7420  030C                     	;# 
  7421  030D                     	;# 
  7422  030E                     	;# 
  7423  030F                     	;# 
  7424  0310                     	;# 
  7425  0310                     	;# 
  7426  0311                     	;# 
  7427  0312                     	;# 
  7428  0313                     	;# 
  7429  0314                     	;# 
  7430  0314                     	;# 
  7431  0315                     	;# 
  7432  0316                     	;# 
  7433  0317                     	;# 
  7434  0318                     	;# 
  7435  0318                     	;# 
  7436  0319                     	;# 
  7437  031A                     	;# 
  7438  031B                     	;# 
  7439  031C                     	;# 
  7440  031C                     	;# 
  7441  031D                     	;# 
  7442  031E                     	;# 
  7443  031F                     	;# 
  7444  038C                     	;# 
  7445  038C                     	;# 
  7446  038D                     	;# 
  7447  038E                     	;# 
  7448  0390                     	;# 
  7449  0390                     	;# 
  7450  0391                     	;# 
  7451  0392                     	;# 
  7452  040C                     	;# 
  7453  040D                     	;# 
  7454  040E                     	;# 
  7455  040F                     	;# 
  7456  0410                     	;# 
  7457  0411                     	;# 
  7458  0416                     	;# 
  7459  0416                     	;# 
  7460  0417                     	;# 
  7461  0418                     	;# 
  7462  0418                     	;# 
  7463  0419                     	;# 
  7464  041A                     	;# 
  7465  041A                     	;# 
  7466  041B                     	;# 
  7467  041C                     	;# 
  7468  041C                     	;# 
  7469  041D                     	;# 
  7470  041E                     	;# 
  7471  041F                     	;# 
  7472  048C                     	;# 
  7473  048C                     	;# 
  7474  048D                     	;# 
  7475  048E                     	;# 
  7476  048F                     	;# 
  7477  048F                     	;# 
  7478  0490                     	;# 
  7479  0491                     	;# 
  7480  0492                     	;# 
  7481  0492                     	;# 
  7482  0493                     	;# 
  7483  0494                     	;# 
  7484  0495                     	;# 
  7485  0495                     	;# 
  7486  0496                     	;# 
  7487  0497                     	;# 
  7488  0498                     	;# 
  7489  0499                     	;# 
  7490  049A                     	;# 
  7491  049B                     	;# 
  7492  049C                     	;# 
  7493  049D                     	;# 
  7494  050C                     	;# 
  7495  050C                     	;# 
  7496  050D                     	;# 
  7497  050E                     	;# 
  7498  050F                     	;# 
  7499  050F                     	;# 
  7500  0510                     	;# 
  7501  0511                     	;# 
  7502  0512                     	;# 
  7503  0512                     	;# 
  7504  0513                     	;# 
  7505  0514                     	;# 
  7506  0515                     	;# 
  7507  0515                     	;# 
  7508  0516                     	;# 
  7509  0517                     	;# 
  7510  0518                     	;# 
  7511  0519                     	;# 
  7512  051A                     	;# 
  7513  051B                     	;# 
  7514  051C                     	;# 
  7515  051D                     	;# 
  7516  058C                     	;# 
  7517  058C                     	;# 
  7518  058D                     	;# 
  7519  058E                     	;# 
  7520  058F                     	;# 
  7521  058F                     	;# 
  7522  0590                     	;# 
  7523  0591                     	;# 
  7524  0592                     	;# 
  7525  0593                     	;# 
  7526  060C                     	;# 
  7527  060D                     	;# 
  7528  060E                     	;# 
  7529  060F                     	;# 
  7530  0610                     	;# 
  7531  0611                     	;# 
  7532  0612                     	;# 
  7533  0613                     	;# 
  7534  0614                     	;# 
  7535  0616                     	;# 
  7536  0617                     	;# 
  7537  0618                     	;# 
  7538  0619                     	;# 
  7539  061A                     	;# 
  7540  061B                     	;# 
  7541  061C                     	;# 
  7542  061D                     	;# 
  7543  061E                     	;# 
  7544  068C                     	;# 
  7545  068D                     	;# 
  7546  068E                     	;# 
  7547  068F                     	;# 
  7548  0690                     	;# 
  7549  0691                     	;# 
  7550  0692                     	;# 
  7551  0693                     	;# 
  7552  0694                     	;# 
  7553  070C                     	;# 
  7554  070D                     	;# 
  7555  070E                     	;# 
  7556  070F                     	;# 
  7557  0710                     	;# 
  7558  0711                     	;# 
  7559  0712                     	;# 
  7560  0713                     	;# 
  7561  0714                     	;# 
  7562  0716                     	;# 
  7563  0717                     	;# 
  7564  0718                     	;# 
  7565  0719                     	;# 
  7566  071A                     	;# 
  7567  071B                     	;# 
  7568  071C                     	;# 
  7569  071D                     	;# 
  7570  071E                     	;# 
  7571  0796                     	;# 
  7572  0797                     	;# 
  7573  0798                     	;# 
  7574  0799                     	;# 
  7575  079A                     	;# 
  7576  079B                     	;# 
  7577  080C                     	;# 
  7578  080D                     	;# 
  7579  080E                     	;# 
  7580  080F                     	;# 
  7581  0810                     	;# 
  7582  0811                     	;# 
  7583  0812                     	;# 
  7584  0813                     	;# 
  7585  0814                     	;# 
  7586  081A                     	;# 
  7587  081B                     	;# 
  7588  081C                     	;# 
  7589  081D                     	;# 
  7590  081E                     	;# 
  7591  081F                     	;# 
  7592  088C                     	;# 
  7593  088D                     	;# 
  7594  088E                     	;# 
  7595  088F                     	;# 
  7596  0890                     	;# 
  7597  0891                     	;# 
  7598  0892                     	;# 
  7599  0893                     	;# 
  7600  0895                     	;# 
  7601  0896                     	;# 
  7602  0897                     	;# 
  7603  0898                     	;# 
  7604  0899                     	;# 
  7605  089A                     	;# 
  7606  089B                     	;# 
  7607  090C                     	;# 
  7608  090E                     	;# 
  7609  090F                     	;# 
  7610  091F                     	;# 
  7611  091F                     	;# 
  7612  098F                     	;# 
  7613  098F                     	;# 
  7614  0990                     	;# 
  7615  0991                     	;# 
  7616  0992                     	;# 
  7617  0993                     	;# 
  7618  0994                     	;# 
  7619  0995                     	;# 
  7620  0996                     	;# 
  7621  0997                     	;# 
  7622  0E0F                     	;# 
  7623  0E10                     	;# 
  7624  0E11                     	;# 
  7625  0E12                     	;# 
  7626  0E13                     	;# 
  7627  0E14                     	;# 
  7628  0E15                     	;# 
  7629  0E16                     	;# 
  7630  0E17                     	;# 
  7631  0E18                     	;# 
  7632  0E19                     	;# 
  7633  0E1A                     	;# 
  7634  0E1B                     	;# 
  7635  0E1C                     	;# 
  7636  0E1D                     	;# 
  7637  0E1E                     	;# 
  7638  0E1F                     	;# 
  7639  0E20                     	;# 
  7640  0E21                     	;# 
  7641  0E22                     	;# 
  7642  0E23                     	;# 
  7643  0E24                     	;# 
  7644  0E25                     	;# 
  7645  0E26                     	;# 
  7646  0E27                     	;# 
  7647  0E28                     	;# 
  7648  0E29                     	;# 
  7649  0E2A                     	;# 
  7650  0E2B                     	;# 
  7651  0E2C                     	;# 
  7652  0E2D                     	;# 
  7653  0E2E                     	;# 
  7654  0E2F                     	;# 
  7655  0E30                     	;# 
  7656  0E31                     	;# 
  7657  0E32                     	;# 
  7658  0E33                     	;# 
  7659  0E34                     	;# 
  7660  0E35                     	;# 
  7661  0E36                     	;# 
  7662  0E37                     	;# 
  7663  0E8F                     	;# 
  7664  0E90                     	;# 
  7665  0E91                     	;# 
  7666  0E92                     	;# 
  7667  0E93                     	;# 
  7668  0E94                     	;# 
  7669  0E95                     	;# 
  7670  0E96                     	;# 
  7671  0E97                     	;# 
  7672  0E9C                     	;# 
  7673  0E9D                     	;# 
  7674  0E9E                     	;# 
  7675  0EA1                     	;# 
  7676  0EA2                     	;# 
  7677  0EA3                     	;# 
  7678  0EA4                     	;# 
  7679  0EA5                     	;# 
  7680  0EA9                     	;# 
  7681  0EAA                     	;# 
  7682  0EAB                     	;# 
  7683  0EAC                     	;# 
  7684  0EB1                     	;# 
  7685  0EB2                     	;# 
  7686  0EB3                     	;# 
  7687  0EB8                     	;# 
  7688  0EB9                     	;# 
  7689  0EBA                     	;# 
  7690  0EBB                     	;# 
  7691  0EBC                     	;# 
  7692  0EBD                     	;# 
  7693  0EBE                     	;# 
  7694  0EC3                     	;# 
  7695  0EC5                     	;# 
  7696  0EC6                     	;# 
  7697  0EC7                     	;# 
  7698  0EC8                     	;# 
  7699  0EC9                     	;# 
  7700  0ECA                     	;# 
  7701  0ECB                     	;# 
  7702  0ECC                     	;# 
  7703  0F10                     	;# 
  7704  0F11                     	;# 
  7705  0F12                     	;# 
  7706  0F13                     	;# 
  7707  0F14                     	;# 
  7708  0F15                     	;# 
  7709  0F16                     	;# 
  7710  0F17                     	;# 
  7711  0F18                     	;# 
  7712  0F19                     	;# 
  7713  0F1A                     	;# 
  7714  0F1B                     	;# 
  7715  0F1C                     	;# 
  7716  0F1D                     	;# 
  7717  0F1E                     	;# 
  7718  0F1F                     	;# 
  7719  0F20                     	;# 
  7720  0F21                     	;# 
  7721  0F22                     	;# 
  7722  0F23                     	;# 
  7723  0F24                     	;# 
  7724  0F25                     	;# 
  7725  0F26                     	;# 
  7726  0F27                     	;# 
  7727  0F28                     	;# 
  7728  0F29                     	;# 
  7729  0F2A                     	;# 
  7730  0F2B                     	;# 
  7731  0F2C                     	;# 
  7732  0F2D                     	;# 
  7733  0F2E                     	;# 
  7734  0F2F                     	;# 
  7735  0F30                     	;# 
  7736  0F31                     	;# 
  7737  0F32                     	;# 
  7738  0F38                     	;# 
  7739  0F39                     	;# 
  7740  0F3A                     	;# 
  7741  0F3B                     	;# 
  7742  0F3C                     	;# 
  7743  0F3D                     	;# 
  7744  0F3E                     	;# 
  7745  0F3F                     	;# 
  7746  0F40                     	;# 
  7747  0F41                     	;# 
  7748  0F43                     	;# 
  7749  0F44                     	;# 
  7750  0F45                     	;# 
  7751  0F46                     	;# 
  7752  0F47                     	;# 
  7753  0F48                     	;# 
  7754  0F49                     	;# 
  7755  0F4A                     	;# 
  7756  0F4B                     	;# 
  7757  0F4C                     	;# 
  7758  0F4E                     	;# 
  7759  0F4F                     	;# 
  7760  0F50                     	;# 
  7761  0F51                     	;# 
  7762  0F52                     	;# 
  7763  0F53                     	;# 
  7764  0F54                     	;# 
  7765  0F55                     	;# 
  7766  0F56                     	;# 
  7767  0F57                     	;# 
  7768  0F59                     	;# 
  7769  0F5A                     	;# 
  7770  0F5B                     	;# 
  7771  0F5C                     	;# 
  7772  0F5D                     	;# 
  7773  0F61                     	;# 
  7774  0F62                     	;# 
  7775  0F64                     	;# 
  7776  0F65                     	;# 
  7777  0F66                     	;# 
  7778  0F67                     	;# 
  7779  0F68                     	;# 
  7780  0F69                     	;# 
  7781  0F6A                     	;# 
  7782  0F6B                     	;# 
  7783  0F6C                     	;# 
  7784  0F6D                     	;# 
  7785  0FE4                     	;# 
  7786  0FE5                     	;# 
  7787  0FE6                     	;# 
  7788  0FE7                     	;# 
  7789  0FE8                     	;# 
  7790  0FE9                     	;# 
  7791  0FEA                     	;# 
  7792  0FEB                     	;# 
  7793  0FED                     	;# 
  7794  0FEE                     	;# 
  7795  0FEF                     	;# 
  7796                           
  7797                           	psect	idataCOMMON
  7798  07FE                     __pidataCOMMON:
  7799                           
  7800                           ;initializer for _NREG
  7801  07FE  3419               	retlw	25
  7802                           
  7803                           	psect	idataBANK1
  7804  1F50                     __pidataBANK1:
  7805                           
  7806                           ;initializer for _alarmPWMStart
  7807  1F50  34FF               	retlw	255
  7808  1F51  34FF               	retlw	255
  7809  1F52  34FF               	retlw	255
  7810                           
  7811                           ;initializer for _prevLumLevel
  7812  1F53  34FF               	retlw	255
  7813  1F54  34FF               	retlw	255
  7814                           
  7815                           ;initializer for _prevTemp
  7816  1F55  34FF               	retlw	255
  7817  1F56  34FF               	retlw	255
  7818                           
  7819                           ;initializer for _updateLCD
  7820  1F57  3401               	retlw	1
  7821                           
  7822                           ;initializer for _TALA
  7823  1F58  3405               	retlw	5
  7824                           
  7825                           ;initializer for _PMON
  7826  1F59  3403               	retlw	3
  7827                           
  7828                           	psect	stringtext1
  7829  1800                     __pstringtext1:
  7830  1800                     _commands:
  7831  1800  34ED               	retlw	low _cmd_rc
  7832  1801  3411               	retlw	high _cmd_rc
  7833  1802  34C0               	retlw	192
  7834  1803  3488               	retlw	low _cmd_sc
  7835  1804  3417               	retlw	high _cmd_sc
  7836  1805  34C1               	retlw	193
  7837  1806  3460               	retlw	low _cmd_rtl
  7838  1807  3411               	retlw	high _cmd_rtl
  7839  1808  34C2               	retlw	194
  7840  1809  3412               	retlw	low _cmd_rp
  7841  180A  3412               	retlw	high _cmd_rp
  7842  180B  34C3               	retlw	195
  7843  180C  3419               	retlw	low _cmd_mmp
  7844  180D  3410               	retlw	high _cmd_mmp
  7845  180E  34C4               	retlw	196
  7846  180F  34A3               	retlw	low _cmd_mta
  7847  1810  3410               	retlw	high _cmd_mta
  7848  1811  34C5               	retlw	197
  7849  1812  3459               	retlw	low _cmd_ra
  7850  1813  3414               	retlw	high _cmd_ra
  7851  1814  34C6               	retlw	198
  7852  1815  3406               	retlw	low _cmd_dac
  7853  1816  3408               	retlw	high _cmd_dac
  7854  1817  34C7               	retlw	199
  7855  1818  3446               	retlw	low _cmd_dtl
  7856  1819  3416               	retlw	high _cmd_dtl
  7857  181A  34C8               	retlw	200
  7858  181B  34E2               	retlw	low _cmd_aa
  7859  181C  3413               	retlw	high _cmd_aa
  7860  181D  34C9               	retlw	201
  7861  181E  345D               	retlw	low _cmd_ir
  7862  181F  3412               	retlw	high _cmd_ir
  7863  1820  34CA               	retlw	202
  7864  1821  3404               	retlw	low _cmd_trc
  7865  1822  340B               	retlw	high _cmd_trc
  7866  1823  34CB               	retlw	203
  7867  1824  3405               	retlw	low _cmd_tri
  7868  1825  340C               	retlw	high _cmd_tri
  7869  1826  34CC               	retlw	204
  7870  1827                     __end_of_commands:
  7871                           
  7872                           	psect	stringtext2
  7873  1836                     __pstringtext2:
  7874  1836                     _dpowers:
  7875  1836  3401               	retlw	1
  7876  1837  3400               	retlw	0
  7877  1838  340A               	retlw	10
  7878  1839  3400               	retlw	0
  7879  183A  3464               	retlw	100
  7880  183B  3400               	retlw	0
  7881  183C  34E8               	retlw	232
  7882  183D  3403               	retlw	3
  7883  183E  3410               	retlw	16
  7884  183F  3427               	retlw	39
  7885  1840                     __end_of_dpowers:
  7886                           
  7887                           	psect	nvBANK1
  7888  00D8                     __pnvBANK1:
  7889  00D8                     _timer1ReloadVal:
  7890  00D8                     	ds	2
  7891  00DA                     _eusartTxBufferRemaining:
  7892  00DA                     	ds	1
  7893                           
  7894                           	psect	nvBANK2
  7895  0159                     __pnvBANK2:
  7896  0159                     _INT_InterruptHandler:
  7897  0159                     	ds	2
  7898  015B                     _TMR1_InterruptHandler:
  7899  015B                     	ds	2
  7900  015D                     _EUSART_RxDefaultInterruptHandler:
  7901  015D                     	ds	2
  7902  015F                     _EUSART_TxDefaultInterruptHandler:
  7903  015F                     	ds	2
  7904  0013                     _TRISCbits	set	19
  7905  000E                     _PORTCbits	set	14
  7906  0016                     _LATAbits	set	22
  7907  000B                     _INTCONbits	set	11
  7908  0014                     _TRISD	set	20
  7909  0013                     _TRISC	set	19
  7910  0012                     _TRISB	set	18
  7911  0011                     _TRISA	set	17
  7912  0015                     _TRISE	set	21
  7913  0018                     _LATC	set	24
  7914  0017                     _LATB	set	23
  7915  0016                     _LATA	set	22
  7916  0019                     _LATD	set	25
  7917  001A                     _LATE	set	26
  7918  0094                     _ADCON1bits	set	148
  7919  008E                     _ADPREVL	set	142
  7920  008F                     _ADPREVH	set	143
  7921  0097                     _ADSTATbits	set	151
  7922  0090                     _ADACCL	set	144
  7923  0091                     _ADACCH	set	145
  7924  0095                     _ADCON2bits	set	149
  7925  009C                     _ADPRE	set	156
  7926  0096                     _ADCON3bits	set	150
  7927  008C                     _ADRESL	set	140
  7928  008D                     _ADRESH	set	141
  7929  0093                     _ADCON0bits	set	147
  7930  009D                     _ADACQ	set	157
  7931  0093                     _ADCON0	set	147
  7932  0098                     _ADCLK	set	152
  7933  0099                     _ADACT	set	153
  7934  009A                     _ADREF	set	154
  7935  0097                     _ADSTAT	set	151
  7936  0096                     _ADCON3	set	150
  7937  0095                     _ADCON2	set	149
  7938  0094                     _ADCON1	set	148
  7939  009B                     _ADCAP	set	155
  7940  009E                     _ADPCH	set	158
  7941  0119                     _RC1REG	set	281
  7942  011D                     _RC1STAbits	set	285
  7943  011A                     _TX1REG	set	282
  7944  011E                     _TX1STAbits	set	286
  7945  011C                     _SP1BRGH	set	284
  7946  011B                     _SP1BRGL	set	283
  7947  011E                     _TX1STA	set	286
  7948  011D                     _RC1STA	set	285
  7949  011F                     _BAUD1CON	set	287
  7950  0116                     _ADERRL	set	278
  7951  0117                     _ADERRH	set	279
  7952  0114                     _ADFLTRL	set	276
  7953  0115                     _ADFLTRH	set	277
  7954  010C                     _ADCNT	set	268
  7955  010D                     _ADRPT	set	269
  7956  0113                     _ADSTPTH	set	275
  7957  0112                     _ADSTPTL	set	274
  7958  0111                     _ADUTHH	set	273
  7959  0110                     _ADUTHL	set	272
  7960  010F                     _ADLTHH	set	271
  7961  010E                     _ADLTHL	set	270
  7962  018E                     _SSP1MSK	set	398
  7963  018D                     _SSP1ADD	set	397
  7964  018F                     _SSP1STAT	set	399
  7965  0191                     _SSP1CON2	set	401
  7966  0190                     _SSP1CON1bits	set	400
  7967  018C                     _SSP1BUF	set	396
  7968  018F                     _SSP1STATbits	set	399
  7969  0191                     _SSP1CON2bits	set	401
  7970  0190                     _SSP1CON1	set	400
  7971  021F                     _CCPTMRS1bits	set	543
  7972  020F                     _T1GCONbits	set	527
  7973  020E                     _T1CONbits	set	526
  7974  020E                     _T1CON	set	526
  7975  020C                     _TMR1L	set	524
  7976  020D                     _TMR1H	set	525
  7977  0211                     _T1CLK	set	529
  7978  0210                     _T1GATE	set	528
  7979  020F                     _T1GCON	set	527
  7980  028D                     _PR2	set	653
  7981  028C                     _TMR2	set	652
  7982  028E                     _T2CONbits	set	654
  7983  0291                     _T2RSTbits	set	657
  7984  028F                     _T2HLTbits	set	655
  7985  028E                     _T2CON	set	654
  7986  028C                     _T2TMR	set	652
  7987  028D                     _T2PR	set	653
  7988  0291                     _T2RST	set	657
  7989  028F                     _T2HLT	set	655
  7990  0290                     _T2CLKCON	set	656
  7991  038C                     _PWM6DCL	set	908
  7992  038D                     _PWM6DCH	set	909
  7993  038E                     _PWM6CON	set	910
  7994  1C77                     _PWM6EN	set	7287
  7995  0710                     _PIR4bits	set	1808
  7996  071A                     _PIE4bits	set	1818
  7997  070C                     _PIR0bits	set	1804
  7998  0716                     _PIE0bits	set	1814
  7999  0719                     _PIE3bits	set	1817
  8000  070F                     _PIR3bits	set	1807
  8001  079B                     _PMD5	set	1947
  8002  079A                     _PMD4	set	1946
  8003  0799                     _PMD3	set	1945
  8004  0798                     _PMD2	set	1944
  8005  0797                     _PMD1	set	1943
  8006  0796                     _PMD0	set	1942
  8007  081F                     _NVMCON2	set	2079
  8008  081C                     _NVMDATL	set	2076
  8009  081D                     _NVMDATH	set	2077
  8010  081E                     _NVMCON1bits	set	2078
  8011  081B                     _NVMADRH	set	2075
  8012  081A                     _NVMADRL	set	2074
  8013  0892                     _OSCTUNE	set	2194
  8014  0893                     _OSCFRQ	set	2195
  8015  0891                     _OSCEN	set	2193
  8016  088F                     _OSCCON3	set	2191
  8017  088D                     _OSCCON1	set	2189
  8018  0EC6                     _SSP1DATPPS	set	3782
  8019  0EC5                     _SSP1CLKPPS	set	3781
  8020  0ECB                     _RXPPS	set	3787
  8021  0E90                     _INTPPS	set	3728
  8022  0F26                     _RC6PPS	set	3878
  8023  0F16                     _RA6PPS	set	3862
  8024  0F24                     _RC4PPS	set	3876
  8025  0F23                     _RC3PPS	set	3875
  8026  0F67                     _SLRCONE	set	3943
  8027  0F5C                     _SLRCOND	set	3932
  8028  0F51                     _SLRCONC	set	3921
  8029  0F46                     _SLRCONB	set	3910
  8030  0F3B                     _SLRCONA	set	3899
  8031  0F5B                     _ODCOND	set	3931
  8032  0F50                     _ODCONC	set	3920
  8033  0F45                     _ODCONB	set	3909
  8034  0F3A                     _ODCONA	set	3898
  8035  0F66                     _ODCONE	set	3942
  8036  0F4F                     _WPUC	set	3919
  8037  0F39                     _WPUA	set	3897
  8038  0F44                     _WPUB	set	3908
  8039  0F65                     _WPUE	set	3941
  8040  0F5A                     _WPUD	set	3930
  8041  0F38                     _ANSELA	set	3896
  8042  0F64                     _ANSELE	set	3940
  8043  0F43                     _ANSELB	set	3907
  8044  0F4E                     _ANSELC	set	3918
  8045  0F59                     _ANSELD	set	3929
  8046  7A7C                     _WPUC4	set	31356
  8047  7A7B                     _WPUC3	set	31355
  8048                           
  8049                           	psect	stringtext3
  8050  1827                     __pstringtext3:
  8051  1827                     STR_1:
  8052  1827  3425               	retlw	37	;'%'
  8053  1828  3430               	retlw	48	;'0'
  8054  1829  3432               	retlw	50	;'2'
  8055  182A  3464               	retlw	100	;'d'
  8056  182B  343A               	retlw	58	;':'
  8057  182C  3425               	retlw	37	;'%'
  8058  182D  3430               	retlw	48	;'0'
  8059  182E  3432               	retlw	50	;'2'
  8060  182F  3464               	retlw	100	;'d'
  8061  1830  343A               	retlw	58	;':'
  8062  1831  3425               	retlw	37	;'%'
  8063  1832  3430               	retlw	48	;'0'
  8064  1833  3432               	retlw	50	;'2'
  8065  1834  3464               	retlw	100	;'d'
  8066  1835  3400               	retlw	0
  8067                           
  8068                           	psect	stringtext4
  8069  1840                     __pstringtext4:
  8070  1840                     STR_3:
  8071  1840  3425               	retlw	37	;'%'
  8072  1841  3430               	retlw	48	;'0'
  8073  1842  3432               	retlw	50	;'2'
  8074  1843  3464               	retlw	100	;'d'
  8075  1844  3420               	retlw	32	;' '
  8076  1845  3443               	retlw	67	;'C'
  8077  1846  3400               	retlw	0
  8078                           
  8079                           	psect	stringtext5
  8080  1847                     __pstringtext5:
  8081  1847                     STR_5:
  8082  1847  344C               	retlw	76	;'L'
  8083  1848  3420               	retlw	32	;' '
  8084  1849  3425               	retlw	37	;'%'
  8085  184A  3464               	retlw	100	;'d'
  8086  184B  3400               	retlw	0
  8087                           
  8088                           	psect	stringtext6
  8089  184C                     __pstringtext6:
  8090  184C                     STR_7:
  8091  184C  3443               	retlw	67	;'C'
  8092  184D  3454               	retlw	84	;'T'
  8093  184E  344C               	retlw	76	;'L'
  8094  184F  3400               	retlw	0
  8095                           
  8096                           	psect	stringtext7
  8097  0000                     __pstringtext7:
  8098  1840                     
  8099                           	psect	cinit
  8100  0054                     start_initialization:	
  8101                           ; #config settings
  8102                           
  8103  0054                     __initialization:
  8104                           
  8105                           ; Initialize objects allocated to COMMON
  8106  0054  3187  27FE  3180   	fcall	__pidataCOMMON	;fetch initializer
  8107  0057  00FD               	movwf	__pdataCOMMON& (0+127)
  8108                           
  8109                           ; Initialize objects allocated to BANK1
  8110  0058  3050               	movlw	low __pidataBANK1
  8111  0059  0084               	movwf	4
  8112  005A  309F               	movlw	(high __pidataBANK1)| (0+128)
  8113  005B  0085               	movwf	5
  8114  005C  30CE               	movlw	low __pdataBANK1
  8115  005D  0086               	movwf	6
  8116  005E  3000               	movlw	high __pdataBANK1
  8117  005F  0087               	movwf	7
  8118  0060  300A               	movlw	10
  8119  0061  3188  2000  3180   	fcall	init_ram
  8120                           
  8121                           ; Clear objects allocated to COMMON
  8122  0064  01F9               	clrf	__pbssCOMMON& (0+127)
  8123  0065  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  8124  0066  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  8125  0067  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  8126                           
  8127                           ; Clear objects allocated to BANK0
  8128  0068  305A               	movlw	low __pbssBANK0
  8129  0069  0084               	movwf	4
  8130  006A  3000               	movlw	high __pbssBANK0
  8131  006B  0085               	movwf	5
  8132  006C  300B               	movlw	11
  8133  006D  319E  26F4  3180   	fcall	clear_ram0
  8134                           
  8135                           ; Clear objects allocated to BANK1
  8136  0070  30A0               	movlw	low __pbssBANK1
  8137  0071  0084               	movwf	4
  8138  0072  3000               	movlw	high __pbssBANK1
  8139  0073  0085               	movwf	5
  8140  0074  301C               	movlw	28
  8141  0075  319E  26F4  3180   	fcall	clear_ram0
  8142                           
  8143                           ; Clear objects allocated to BANK2
  8144  0078  3040               	movlw	low __pbssBANK2
  8145  0079  0084               	movwf	4
  8146  007A  3001               	movlw	high __pbssBANK2
  8147  007B  0085               	movwf	5
  8148  007C  3019               	movlw	25
  8149  007D  319E  26F4  3180   	fcall	clear_ram0
  8150                           
  8151                           ; Clear objects allocated to BANK3
  8152  0080  30A0               	movlw	low __pbssBANK3
  8153  0081  0084               	movwf	4
  8154  0082  3001               	movlw	high __pbssBANK3
  8155  0083  0085               	movwf	5
  8156  0084  3040               	movlw	64
  8157  0085  319E  26F4  3180   	fcall	clear_ram0
  8158                           
  8159                           ; Clear objects allocated to BANK4
  8160  0088  3020               	movlw	low __pbssBANK4
  8161  0089  0084               	movwf	4
  8162  008A  3002               	movlw	high __pbssBANK4
  8163  008B  0085               	movwf	5
  8164  008C  3040               	movlw	64
  8165  008D  319E  26F4  3180   	fcall	clear_ram0
  8166  0090                     end_of_initialization:	
  8167                           ;End of C runtime variable initialization code
  8168                           
  8169  0090                     __end_of__initialization:
  8170  0090  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8171  0091  0020               	movlb	0
  8172  0092  3180  2894         	ljmp	_main	;jump to C main() function
  8173                           
  8174                           	psect	bssCOMMON
  8175  0079                     __pbssCOMMON:
  8176  0079                     _nr:
  8177  0079                     	ds	1
  8178  007A                     _iwrite:
  8179  007A                     	ds	1
  8180  007B                     _iread:
  8181  007B                     	ds	1
  8182  007C                     _ALAF:
  8183  007C                     	ds	1
  8184                           
  8185                           	psect	dataCOMMON
  8186  007D                     __pdataCOMMON:
  8187  007D                     _NREG:
  8188  007D                     	ds	1
  8189                           
  8190                           	psect	bssBANK0
  8191  005A                     __pbssBANK0:
  8192  005A                     _t:
  8193  005A                     	ds	3
  8194  005D                     _modeFlag:
  8195  005D                     	ds	2
  8196  005F                     _editingClockAlarm:
  8197  005F                     	ds	2
  8198  0061                     _lumLevel:
  8199  0061                     	ds	1
  8200  0062                     _temp:
  8201  0062                     	ds	1
  8202  0063                     _eusartTxTail:
  8203  0063                     	ds	1
  8204  0064                     _eusartTxHead:
  8205  0064                     	ds	1
  8206                           
  8207                           	psect	bssBANK1
  8208  00A0                     __pbssBANK1:
  8209  00A0                     _clkAlarm:
  8210  00A0                     	ds	4
  8211  00A4                     _lumAlarm:
  8212  00A4                     	ds	3
  8213  00A7                     _tempAlarm:
  8214  00A7                     	ds	3
  8215  00AA                     _dimingLed:
  8216  00AA                     	ds	2
  8217  00AC                     _i2c1_driver_busCollisionISR:
  8218  00AC                     	ds	2
  8219  00AE                     _sentMessageBufHalfFull:
  8220  00AE                     	ds	1
  8221  00AF                     _flagNr:
  8222  00AF                     	ds	1
  8223  00B0                     _bufHalfFull:
  8224  00B0                     	ds	1
  8225  00B1                     _writeEEPROM_flag:
  8226  00B1                     	ds	1
  8227  00B2                     _counterMonitorAux:
  8228  00B2                     	ds	1
  8229  00B3                     _monitor_TEMP_LUM:
  8230  00B3                     	ds	1
  8231  00B4                     _flagS1pushed:
  8232  00B4                     	ds	1
  8233  00B5                     _PWM_on:
  8234  00B5                     	ds	1
  8235  00B6                     _editingLumAlarm:
  8236  00B6                     	ds	1
  8237  00B7                     _editingTempAlarm:
  8238  00B7                     	ds	1
  8239  00B8                     _S1_Value:
  8240  00B8                     	ds	1
  8241  00B9                     _eusartRxCount:
  8242  00B9                     	ds	1
  8243  00BA                     _eusartRxTail:
  8244  00BA                     	ds	1
  8245  00BB                     _eusartRxHead:
  8246  00BB                     	ds	1
  8247                           
  8248                           	psect	dataBANK1
  8249  00CE                     __pdataBANK1:
  8250  00CE                     _alarmPWMStart:
  8251  00CE                     	ds	3
  8252  00D1                     _prevLumLevel:
  8253  00D1                     	ds	2
  8254  00D3                     _prevTemp:
  8255  00D3                     	ds	2
  8256  00D5                     _updateLCD:
  8257  00D5                     	ds	1
  8258  00D6                     _TALA:
  8259  00D6                     	ds	1
  8260  00D7                     _PMON:
  8261  00D7                     	ds	1
  8262                           
  8263                           	psect	bssBANK2
  8264  0140                     __pbssBANK2:
  8265  0140                     main@F13053:
  8266  0140                     	ds	20
  8267  0154                     update_menuLCD@F12903:
  8268  0154                     	ds	3
  8269  0157                     _i2c1_driver_i2cISR:
  8270  0157                     	ds	2
  8271                           
  8272                           	psect	bssBANK3
  8273  01A0                     __pbssBANK3:
  8274  01A0                     _eusartTxBuffer:
  8275  01A0                     	ds	64
  8276                           
  8277                           	psect	bssBANK4
  8278  0220                     __pbssBANK4:
  8279  0220                     _eusartRxBuffer:
  8280  0220                     	ds	64
  8281                           
  8282                           	psect	inittext
  8283  0800                     init_ram:
  8284  0800  00FE               	movwf	btemp
  8285  0801                     initloop:
  8286  0801  0012               	moviw fsr0++
  8287  0802  001E               	movwi fsr1++
  8288  0803  0BFE               	decfsz	btemp,f
  8289  0804  2801               	goto	initloop
  8290  0805  3400               	retlw	0
  8291                           
  8292                           	psect	clrtext
  8293  1EF4                     clear_ram0:	
  8294                           ;	Called with FSR0 containing the base address, and
  8295                           ;	WREG with the size to clear
  8296                           
  8297  1EF4  0064               	clrwdt	;clear the watchdog before getting into this loop
  8298  1EF5                     clrloop0:
  8299  1EF5  0180               	clrf	0	;clear RAM location pointed to by FSR
  8300  1EF6  3101               	addfsr 0,1
  8301  1EF7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8302  1EF8  2EF5               	goto	clrloop0	;have we reached the end yet?
  8303  1EF9  3400               	retlw	0	;all done for this memory range, return
  8304                           
  8305                           	psect	cstackBANK2
  8306  0120                     __pcstackBANK2:
  8307  0120                     main@buff:
  8308                           
  8309                           ; 20 bytes @ 0x0
  8310  0120                     	ds	20
  8311  0134                     _main$3499:
  8312                           
  8313                           ; 2 bytes @ 0x14
  8314  0134                     	ds	2
  8315  0136                     main@checkSumAux:
  8316                           
  8317                           ; 1 bytes @ 0x16
  8318  0136                     	ds	1
  8319  0137                     main@notInit:
  8320                           
  8321                           ; 1 bytes @ 0x17
  8322  0137                     	ds	1
  8323  0138                     main@corrupted:
  8324                           
  8325                           ; 1 bytes @ 0x18
  8326  0138                     	ds	1
  8327  0139                     main@i:
  8328                           
  8329                           ; 2 bytes @ 0x19
  8330  0139                     	ds	2
  8331  013B                     main@c:
  8332                           
  8333                           ; 1 bytes @ 0x1B
  8334  013B                     	ds	1
  8335  013C                     main@i_2535:
  8336                           
  8337                           ; 2 bytes @ 0x1C
  8338  013C                     	ds	2
  8339  013E                     main@n:
  8340                           
  8341                           ; 2 bytes @ 0x1E
  8342  013E                     	ds	2
  8343                           
  8344                           	psect	cstackBANK1
  8345  00BC                     __pcstackBANK1:
  8346  00BC                     update_menuLCD@str:
  8347                           
  8348                           ; 8 bytes @ 0x0
  8349  00BC                     	ds	8
  8350  00C4                     update_menuLCD@tt:
  8351                           
  8352                           ; 4 bytes @ 0x8
  8353  00C4                     	ds	4
  8354  00C8                     update_menuLCD@l:
  8355                           
  8356                           ; 3 bytes @ 0xC
  8357  00C8                     	ds	3
  8358  00CB                     update_menuLCD@diff:
  8359                           
  8360                           ; 3 bytes @ 0xF
  8361  00CB                     	ds	3
  8362                           
  8363                           	psect	cstackCOMMON
  8364  0070                     __pcstackCOMMON:
  8365  0070                     ?_isdigit:
  8366  0070                     ?_i2c1_driver_open:	
  8367                           ; 1 bit 
  8368                           
  8369  0070                     ?_PMD_Initialize:	
  8370                           ; 1 bit 
  8371                           
  8372  0070                     ?_OSCILLATOR_Initialize:	
  8373                           ; 1 bytes @ 0x0
  8374                           
  8375  0070                     ?_PWM6_Initialize:	
  8376                           ; 1 bytes @ 0x0
  8377                           
  8378  0070                     ?_ADCC_Initialize:	
  8379                           ; 1 bytes @ 0x0
  8380                           
  8381  0070                     ?_TMR2_Initialize:	
  8382                           ; 1 bytes @ 0x0
  8383                           
  8384  0070                     ?_TMR1_Initialize:	
  8385                           ; 1 bytes @ 0x0
  8386                           
  8387  0070                     ?_EXT_INT_Initialize:	
  8388                           ; 1 bytes @ 0x0
  8389                           
  8390  0070                     ?_EUSART_Initialize:	
  8391                           ; 1 bytes @ 0x0
  8392                           
  8393  0070                     ?_INT_ISR:	
  8394                           ; 1 bytes @ 0x0
  8395                           
  8396  0070                     ??_INT_ISR:	
  8397                           ; 1 bytes @ 0x0
  8398                           
  8399  0070                     ?_TMR1_ISR:	
  8400                           ; 1 bytes @ 0x0
  8401                           
  8402  0070                     ?_TMR1_DefaultInterruptHandler:	
  8403                           ; 1 bytes @ 0x0
  8404                           
  8405  0070                     ??_TMR1_DefaultInterruptHandler:	
  8406                           ; 1 bytes @ 0x0
  8407                           
  8408  0070                     ?_INT_CallBack:	
  8409                           ; 1 bytes @ 0x0
  8410                           
  8411  0070                     ??_INT_CallBack:	
  8412                           ; 1 bytes @ 0x0
  8413                           
  8414  0070                     ?_EUSART_Receive_ISR:	
  8415                           ; 1 bytes @ 0x0
  8416                           
  8417  0070                     ??_EUSART_Receive_ISR:	
  8418                           ; 1 bytes @ 0x0
  8419                           
  8420  0070                     ?_EUSART_Transmit_ISR:	
  8421                           ; 1 bytes @ 0x0
  8422                           
  8423  0070                     ??_EUSART_Transmit_ISR:	
  8424                           ; 1 bytes @ 0x0
  8425                           
  8426  0070                     ?_ReadI2C:	
  8427                           ; 1 bytes @ 0x0
  8428                           
  8429  0070                     ?_WriteI2C:	
  8430                           ; 1 bytes @ 0x0
  8431                           
  8432  0070                     ?_PIN_MANAGER_Initialize:	
  8433                           ; 1 bytes @ 0x0
  8434                           
  8435  0070                     ?_SYSTEM_Initialize:	
  8436                           ; 1 bytes @ 0x0
  8437                           
  8438  0070                     ?_INTERRUPT_InterruptManager:	
  8439                           ; 1 bytes @ 0x0
  8440                           
  8441  0070                     ?_TMR1_WriteTimer:	
  8442                           ; 1 bytes @ 0x0
  8443                           
  8444  0070                     ?_TMR2_Start:	
  8445                           ; 1 bytes @ 0x0
  8446                           
  8447  0070                     ?_TMR2_StartTimer:	
  8448                           ; 1 bytes @ 0x0
  8449                           
  8450  0070                     ?_TMR2_Stop:	
  8451                           ; 1 bytes @ 0x0
  8452                           
  8453  0070                     ?_TMR2_StopTimer:	
  8454                           ; 1 bytes @ 0x0
  8455                           
  8456  0070                     ?_INT_DefaultInterruptHandler:	
  8457                           ; 1 bytes @ 0x0
  8458                           
  8459  0070                     ??_INT_DefaultInterruptHandler:	
  8460                           ; 1 bytes @ 0x0
  8461                           
  8462  0070                     ?_EUSART_is_rx_ready:	
  8463                           ; 1 bytes @ 0x0
  8464                           
  8465  0070                     ?_EUSART_Read:	
  8466                           ; 1 bytes @ 0x0
  8467                           
  8468  0070                     ?_EUSART_Write:	
  8469                           ; 1 bytes @ 0x0
  8470                           
  8471  0070                     ?_getch:	
  8472                           ; 1 bytes @ 0x0
  8473                           
  8474  0070                     ?_putch:	
  8475                           ; 1 bytes @ 0x0
  8476                           
  8477  0070                     ?_tsttc:	
  8478                           ; 1 bytes @ 0x0
  8479                           
  8480  0070                     ?_LCDsend:	
  8481                           ; 1 bytes @ 0x0
  8482                           
  8483  0070                     ?_LCDinit:	
  8484                           ; 1 bytes @ 0x0
  8485                           
  8486  0070                     ?_LCDcmd:	
  8487                           ; 1 bytes @ 0x0
  8488                           
  8489  0070                     ?_LCDchar:	
  8490                           ; 1 bytes @ 0x0
  8491                           
  8492  0070                     ?_PWM_Output_D4_Enable:	
  8493                           ; 1 bytes @ 0x0
  8494                           
  8495  0070                     ?_PWM_Output_D4_Disable:	
  8496                           ; 1 bytes @ 0x0
  8497                           
  8498  0070                     ?_Clock_ISR:	
  8499                           ; 1 bytes @ 0x0
  8500                           
  8501  0070                     ?_wirteEEPROMinit:	
  8502                           ; 1 bytes @ 0x0
  8503                           
  8504  0070                     ?_update_menuLCD:	
  8505                           ; 1 bytes @ 0x0
  8506                           
  8507  0070                     ?_monitoring_TEMP_LUM:	
  8508                           ; 1 bytes @ 0x0
  8509                           
  8510  0070                     ?_S1button:	
  8511                           ; 1 bytes @ 0x0
  8512                           
  8513  0070                     ?_checkFlags:	
  8514                           ; 1 bytes @ 0x0
  8515                           
  8516  0070                     ?_editClock:	
  8517                           ; 1 bytes @ 0x0
  8518                           
  8519  0070                     ?_editTemp:	
  8520                           ; 1 bytes @ 0x0
  8521                           
  8522  0070                     ?_editLum:	
  8523                           ; 1 bytes @ 0x0
  8524                           
  8525  0070                     ?_toggleAlarms:	
  8526                           ; 1 bytes @ 0x0
  8527                           
  8528  0070                     ?_S1_ISR:	
  8529                           ; 1 bytes @ 0x0
  8530                           
  8531  0070                     ??_S1_ISR:	
  8532                           ; 1 bytes @ 0x0
  8533                           
  8534  0070                     ?_sendOKMessage:	
  8535                           ; 1 bytes @ 0x0
  8536                           
  8537  0070                     ?_sendERRORMessage:	
  8538                           ; 1 bytes @ 0x0
  8539                           
  8540  0070                     ?_main:	
  8541                           ; 1 bytes @ 0x0
  8542                           
  8543  0070                     ?___awdiv:	
  8544                           ; 1 bytes @ 0x0
  8545                           
  8546  0070                     TMR1_WriteTimer@timerVal:	
  8547                           ; 2 bytes @ 0x0
  8548                           
  8549  0070                     ___awdiv@divisor:	
  8550                           ; 2 bytes @ 0x0
  8551                           
  8552                           
  8553                           ; 2 bytes @ 0x0
  8554  0070                     	ds	2
  8555  0072                     ??_TMR1_WriteTimer:
  8556  0072                     ___awdiv@dividend:	
  8557                           ; 1 bytes @ 0x2
  8558                           
  8559                           
  8560                           ; 2 bytes @ 0x2
  8561  0072                     	ds	2
  8562  0074                     ??___awdiv:
  8563                           
  8564                           ; 1 bytes @ 0x4
  8565  0074                     	ds	1
  8566  0075                     ___awdiv@counter:
  8567                           
  8568                           ; 1 bytes @ 0x5
  8569  0075                     	ds	1
  8570  0076                     ___awdiv@sign:
  8571                           
  8572                           ; 1 bytes @ 0x6
  8573  0076                     	ds	1
  8574  0077                     ___awdiv@quotient:
  8575                           
  8576                           ; 2 bytes @ 0x7
  8577  0077                     	ds	2
  8578  0079                     ??_TMR1_ISR:
  8579  0079                     ??_INTERRUPT_InterruptManager:	
  8580                           ; 1 bytes @ 0x9
  8581                           
  8582                           
  8583                           	psect	cstackBANK0
  8584  0020                     __pcstackBANK0:	
  8585                           ; 1 bytes @ 0x9
  8586                           
  8587  0020                     ??_Clock_ISR:
  8588                           
  8589                           ; 1 bytes @ 0x0
  8590  0020                     	ds	7
  8591  0027                     ??_PMD_Initialize:
  8592  0027                     ??_OSCILLATOR_Initialize:	
  8593                           ; 1 bytes @ 0x7
  8594                           
  8595  0027                     ??_PWM6_Initialize:	
  8596                           ; 1 bytes @ 0x7
  8597                           
  8598  0027                     ??_ADCC_Initialize:	
  8599                           ; 1 bytes @ 0x7
  8600                           
  8601  0027                     ??_TMR2_Initialize:	
  8602                           ; 1 bytes @ 0x7
  8603                           
  8604  0027                     ?_TMR1_SetInterruptHandler:	
  8605                           ; 1 bytes @ 0x7
  8606                           
  8607  0027                     ?_EUSART_SetRxInterruptHandler:	
  8608                           ; 1 bytes @ 0x7
  8609                           
  8610  0027                     ?_EUSART_SetTxInterruptHandler:	
  8611                           ; 1 bytes @ 0x7
  8612                           
  8613  0027                     ?_memset:	
  8614                           ; 1 bytes @ 0x7
  8615                           
  8616  0027                     ??_isdigit:	
  8617                           ; 1 bytes @ 0x7
  8618                           
  8619  0027                     ??_ReadI2C:	
  8620                           ; 1 bytes @ 0x7
  8621                           
  8622  0027                     ??_WriteI2C:	
  8623                           ; 1 bytes @ 0x7
  8624                           
  8625  0027                     ??_PIN_MANAGER_Initialize:	
  8626                           ; 1 bytes @ 0x7
  8627                           
  8628  0027                     ??_i2c1_driver_open:	
  8629                           ; 1 bytes @ 0x7
  8630                           
  8631  0027                     ?_PWM6_LoadDutyValue:	
  8632                           ; 1 bytes @ 0x7
  8633                           
  8634  0027                     ??_TMR2_Start:	
  8635                           ; 1 bytes @ 0x7
  8636                           
  8637  0027                     ??_TMR2_StartTimer:	
  8638                           ; 1 bytes @ 0x7
  8639                           
  8640  0027                     ??_TMR2_Stop:	
  8641                           ; 1 bytes @ 0x7
  8642                           
  8643  0027                     ??_TMR2_StopTimer:	
  8644                           ; 1 bytes @ 0x7
  8645                           
  8646  0027                     ?_INT_SetInterruptHandler:	
  8647                           ; 1 bytes @ 0x7
  8648                           
  8649  0027                     ??_EUSART_is_rx_ready:	
  8650                           ; 1 bytes @ 0x7
  8651                           
  8652  0027                     ??_EUSART_Read:	
  8653                           ; 1 bytes @ 0x7
  8654                           
  8655  0027                     ??_EUSART_Write:	
  8656                           ; 1 bytes @ 0x7
  8657                           
  8658  0027                     ?_differenceBetweenTimePeriod:	
  8659                           ; 1 bytes @ 0x7
  8660                           
  8661  0027                     ??_PWM_Output_D4_Enable:	
  8662                           ; 1 bytes @ 0x7
  8663                           
  8664  0027                     ??_PWM_Output_D4_Disable:	
  8665                           ; 1 bytes @ 0x7
  8666                           
  8667  0027                     ??_S1button:	
  8668                           ; 1 bytes @ 0x7
  8669                           
  8670  0027                     ?_ADCC_GetSingleConversion:	
  8671                           ; 1 bytes @ 0x7
  8672                           
  8673  0027                     ?___wmul:	
  8674                           ; 2 bytes @ 0x7
  8675                           
  8676  0027                     ?___lwdiv:	
  8677                           ; 2 bytes @ 0x7
  8678                           
  8679  0027                     _isdigit$2993:	
  8680                           ; 2 bytes @ 0x7
  8681                           
  8682  0027                     TMR1_SetInterruptHandler@InterruptHandler:	
  8683                           ; 1 bytes @ 0x7
  8684                           
  8685  0027                     PWM6_LoadDutyValue@dutyValue:	
  8686                           ; 2 bytes @ 0x7
  8687                           
  8688  0027                     INT_SetInterruptHandler@InterruptHandler:	
  8689                           ; 2 bytes @ 0x7
  8690                           
  8691  0027                     EUSART_SetTxInterruptHandler@interruptHandler:	
  8692                           ; 2 bytes @ 0x7
  8693                           
  8694  0027                     EUSART_SetRxInterruptHandler@interruptHandler:	
  8695                           ; 2 bytes @ 0x7
  8696                           
  8697  0027                     ___wmul@multiplier:	
  8698                           ; 2 bytes @ 0x7
  8699                           
  8700  0027                     ___lwdiv@divisor:	
  8701                           ; 2 bytes @ 0x7
  8702                           
  8703  0027                     memset@c:	
  8704                           ; 2 bytes @ 0x7
  8705                           
  8706  0027                     differenceBetweenTimePeriod@start:	
  8707                           ; 2 bytes @ 0x7
  8708                           
  8709                           
  8710                           ; 3 bytes @ 0x7
  8711  0027                     	ds	1
  8712  0028                     WriteI2C@data_out:
  8713  0028                     EUSART_Read@readValue:	
  8714                           ; 1 bytes @ 0x8
  8715                           
  8716  0028                     EUSART_Write@txData:	
  8717                           ; 1 bytes @ 0x8
  8718                           
  8719  0028                     isdigit@c:	
  8720                           ; 1 bytes @ 0x8
  8721                           
  8722                           
  8723                           ; 1 bytes @ 0x8
  8724  0028                     	ds	1
  8725  0029                     ??_TMR1_Initialize:
  8726  0029                     ??_EXT_INT_Initialize:	
  8727                           ; 1 bytes @ 0x9
  8728                           
  8729  0029                     ??_EUSART_Initialize:	
  8730                           ; 1 bytes @ 0x9
  8731                           
  8732  0029                     ??_TMR1_SetInterruptHandler:	
  8733                           ; 1 bytes @ 0x9
  8734                           
  8735  0029                     ??_EUSART_SetRxInterruptHandler:	
  8736                           ; 1 bytes @ 0x9
  8737                           
  8738  0029                     ??_EUSART_SetTxInterruptHandler:	
  8739                           ; 1 bytes @ 0x9
  8740                           
  8741  0029                     ??_PWM6_LoadDutyValue:	
  8742                           ; 1 bytes @ 0x9
  8743                           
  8744  0029                     ??_INT_SetInterruptHandler:	
  8745                           ; 1 bytes @ 0x9
  8746                           
  8747  0029                     ??_getch:	
  8748                           ; 1 bytes @ 0x9
  8749                           
  8750  0029                     ??_putch:	
  8751                           ; 1 bytes @ 0x9
  8752                           
  8753  0029                     ??_tsttc:	
  8754                           ; 1 bytes @ 0x9
  8755                           
  8756  0029                     ??_LCDsend:	
  8757                           ; 1 bytes @ 0x9
  8758                           
  8759  0029                     ?_LCDsend2x4:	
  8760                           ; 1 bytes @ 0x9
  8761                           
  8762  0029                     putch@txData:	
  8763                           ; 1 bytes @ 0x9
  8764                           
  8765  0029                     LCDsend2x4@mode:	
  8766                           ; 1 bytes @ 0x9
  8767                           
  8768  0029                     ___wmul@multiplicand:	
  8769                           ; 1 bytes @ 0x9
  8770                           
  8771  0029                     ___lwdiv@dividend:	
  8772                           ; 2 bytes @ 0x9
  8773                           
  8774  0029                     memset@n:	
  8775                           ; 2 bytes @ 0x9
  8776                           
  8777                           
  8778                           ; 2 bytes @ 0x9
  8779  0029                     	ds	1
  8780  002A                     ??_SYSTEM_Initialize:
  8781  002A                     ??_ADCC_GetSingleConversion:	
  8782                           ; 1 bytes @ 0xA
  8783                           
  8784  002A                     ??_LCDsend2x4:	
  8785                           ; 1 bytes @ 0xA
  8786                           
  8787  002A                     ?_sendMessage:	
  8788                           ; 1 bytes @ 0xA
  8789                           
  8790  002A                     ADCC_GetSingleConversion@channel:	
  8791                           ; 1 bytes @ 0xA
  8792                           
  8793  002A                     tsttc@value:	
  8794                           ; 1 bytes @ 0xA
  8795                           
  8796  002A                     LCDsend@c:	
  8797                           ; 1 bytes @ 0xA
  8798                           
  8799  002A                     sendMessage@num:	
  8800                           ; 1 bytes @ 0xA
  8801                           
  8802  002A                     differenceBetweenTimePeriod@stop:	
  8803                           ; 2 bytes @ 0xA
  8804                           
  8805                           
  8806                           ; 3 bytes @ 0xA
  8807  002A                     	ds	1
  8808  002B                     ??_memset:
  8809  002B                     ??___wmul:	
  8810                           ; 1 bytes @ 0xB
  8811                           
  8812  002B                     ??___lwdiv:	
  8813                           ; 1 bytes @ 0xB
  8814                           
  8815  002B                     ___wmul@product:	
  8816                           ; 1 bytes @ 0xB
  8817                           
  8818                           
  8819                           ; 2 bytes @ 0xB
  8820  002B                     	ds	1
  8821  002C                     LCDsend2x4@c:
  8822  002C                     sendMessage@buffer:	
  8823                           ; 1 bytes @ 0xC
  8824                           
  8825  002C                     ___lwdiv@counter:	
  8826                           ; 1 bytes @ 0xC
  8827                           
  8828  002C                     memset@p:	
  8829                           ; 1 bytes @ 0xC
  8830                           
  8831                           
  8832                           ; 1 bytes @ 0xC
  8833  002C                     	ds	1
  8834  002D                     ?_DATAEE_WriteByte:
  8835  002D                     ?_DATAEE_ReadByte:	
  8836                           ; 1 bytes @ 0xD
  8837                           
  8838  002D                     ??_sendMessage:	
  8839                           ; 1 bytes @ 0xD
  8840                           
  8841  002D                     LCDsend2x4@hc:	
  8842                           ; 1 bytes @ 0xD
  8843                           
  8844  002D                     differenceBetweenTimePeriod@diff:	
  8845                           ; 1 bytes @ 0xD
  8846                           
  8847  002D                     memset@p1:	
  8848                           ; 1 bytes @ 0xD
  8849                           
  8850  002D                     DATAEE_WriteByte@bAdd:	
  8851                           ; 1 bytes @ 0xD
  8852                           
  8853  002D                     DATAEE_ReadByte@bAdd:	
  8854                           ; 2 bytes @ 0xD
  8855                           
  8856  002D                     ___lwdiv@quotient:	
  8857                           ; 2 bytes @ 0xD
  8858                           
  8859                           
  8860                           ; 2 bytes @ 0xD
  8861  002D                     	ds	1
  8862  002E                     ??_differenceBetweenTimePeriod:
  8863  002E                     LCDsend2x4@lc:	
  8864                           ; 1 bytes @ 0xE
  8865                           
  8866  002E                     sendMessage@n:	
  8867                           ; 1 bytes @ 0xE
  8868                           
  8869                           
  8870                           ; 2 bytes @ 0xE
  8871  002E                     	ds	1
  8872  002F                     ??_DATAEE_ReadByte:
  8873  002F                     ??_LCDinit:	
  8874                           ; 1 bytes @ 0xF
  8875                           
  8876  002F                     ??_LCDcmd:	
  8877                           ; 1 bytes @ 0xF
  8878                           
  8879  002F                     ??_LCDchar:	
  8880                           ; 1 bytes @ 0xF
  8881                           
  8882  002F                     ?___lwmod:	
  8883                           ; 1 bytes @ 0xF
  8884                           
  8885  002F                     DATAEE_WriteByte@bData:	
  8886                           ; 2 bytes @ 0xF
  8887                           
  8888  002F                     LCDcmd@c:	
  8889                           ; 1 bytes @ 0xF
  8890                           
  8891  002F                     LCDchar@c:	
  8892                           ; 1 bytes @ 0xF
  8893                           
  8894  002F                     ___lwmod@divisor:	
  8895                           ; 1 bytes @ 0xF
  8896                           
  8897                           
  8898                           ; 2 bytes @ 0xF
  8899  002F                     	ds	1
  8900  0030                     ??_DATAEE_WriteByte:
  8901  0030                     ?_LCDstr:	
  8902                           ; 1 bytes @ 0x10
  8903                           
  8904  0030                     ??_sendOKMessage:	
  8905                           ; 1 bytes @ 0x10
  8906                           
  8907  0030                     ??_sendERRORMessage:	
  8908                           ; 1 bytes @ 0x10
  8909                           
  8910  0030                     DATAEE_WriteByte@GIEBitValue:	
  8911                           ; 1 bytes @ 0x10
  8912                           
  8913  0030                     LCDstr@p:	
  8914                           ; 1 bytes @ 0x10
  8915                           
  8916                           
  8917                           ; 2 bytes @ 0x10
  8918  0030                     	ds	1
  8919  0031                     ??_wirteEEPROMinit:
  8920  0031                     ??_monitoring_TEMP_LUM:	
  8921                           ; 1 bytes @ 0x11
  8922                           
  8923  0031                     sendOKMessage@cmd:	
  8924                           ; 1 bytes @ 0x11
  8925                           
  8926  0031                     sendERRORMessage@cmd:	
  8927                           ; 1 bytes @ 0x11
  8928                           
  8929  0031                     ___lwmod@dividend:	
  8930                           ; 1 bytes @ 0x11
  8931                           
  8932                           
  8933                           ; 2 bytes @ 0x11
  8934  0031                     	ds	1
  8935  0032                     ??_LCDstr:
  8936  0032                     sendOKMessage@bufw:	
  8937                           ; 1 bytes @ 0x12
  8938                           
  8939  0032                     sendERRORMessage@bufw:	
  8940                           ; 4 bytes @ 0x12
  8941                           
  8942                           
  8943                           ; 4 bytes @ 0x12
  8944  0032                     	ds	1
  8945  0033                     ??___lwmod:
  8946                           
  8947                           ; 1 bytes @ 0x13
  8948  0033                     	ds	1
  8949  0034                     ___lwmod@counter:
  8950                           
  8951                           ; 1 bytes @ 0x14
  8952  0034                     	ds	1
  8953  0035                     ?_sprintf:
  8954  0035                     LCDstr@c:	
  8955                           ; 2 bytes @ 0x15
  8956                           
  8957  0035                     sprintf@f:	
  8958                           ; 1 bytes @ 0x15
  8959                           
  8960                           
  8961                           ; 2 bytes @ 0x15
  8962  0035                     	ds	1
  8963  0036                     ?_cmd_rc:
  8964  0036                     ?_cmd_sc:	
  8965                           ; 1 bytes @ 0x16
  8966                           
  8967  0036                     ?_cmd_rtl:	
  8968                           ; 1 bytes @ 0x16
  8969                           
  8970  0036                     ?_cmd_rp:	
  8971                           ; 1 bytes @ 0x16
  8972                           
  8973  0036                     ?_cmd_mmp:	
  8974                           ; 1 bytes @ 0x16
  8975                           
  8976  0036                     ?_cmd_mta:	
  8977                           ; 1 bytes @ 0x16
  8978                           
  8979  0036                     ?_cmd_ra:	
  8980                           ; 1 bytes @ 0x16
  8981                           
  8982  0036                     ?_cmd_dac:	
  8983                           ; 1 bytes @ 0x16
  8984                           
  8985  0036                     ?_cmd_dtl:	
  8986                           ; 1 bytes @ 0x16
  8987                           
  8988  0036                     ?_cmd_aa:	
  8989                           ; 1 bytes @ 0x16
  8990                           
  8991  0036                     ?_cmd_ir:	
  8992                           ; 1 bytes @ 0x16
  8993                           
  8994  0036                     ?_cmd_trc:	
  8995                           ; 1 bytes @ 0x16
  8996                           
  8997  0036                     ?_cmd_tri:	
  8998                           ; 1 bytes @ 0x16
  8999                           
  9000  0036                     cmd_rc@num:	
  9001                           ; 1 bytes @ 0x16
  9002                           
  9003  0036                     cmd_sc@num:	
  9004                           ; 2 bytes @ 0x16
  9005                           
  9006  0036                     cmd_rtl@num:	
  9007                           ; 2 bytes @ 0x16
  9008                           
  9009  0036                     cmd_rp@num:	
  9010                           ; 2 bytes @ 0x16
  9011                           
  9012  0036                     cmd_mmp@num:	
  9013                           ; 2 bytes @ 0x16
  9014                           
  9015  0036                     cmd_mta@num:	
  9016                           ; 2 bytes @ 0x16
  9017                           
  9018  0036                     cmd_ra@num:	
  9019                           ; 2 bytes @ 0x16
  9020                           
  9021  0036                     cmd_dac@num:	
  9022                           ; 2 bytes @ 0x16
  9023                           
  9024  0036                     cmd_dtl@num:	
  9025                           ; 2 bytes @ 0x16
  9026                           
  9027  0036                     cmd_aa@num:	
  9028                           ; 2 bytes @ 0x16
  9029                           
  9030  0036                     cmd_ir@num:	
  9031                           ; 2 bytes @ 0x16
  9032                           
  9033  0036                     cmd_trc@num:	
  9034                           ; 2 bytes @ 0x16
  9035                           
  9036  0036                     cmd_tri@num:	
  9037                           ; 2 bytes @ 0x16
  9038                           
  9039                           
  9040                           ; 2 bytes @ 0x16
  9041  0036                     	ds	2
  9042  0038                     cmd_rc@buffer:
  9043  0038                     cmd_sc@buffer:	
  9044                           ; 1 bytes @ 0x18
  9045                           
  9046  0038                     cmd_rtl@buffer:	
  9047                           ; 1 bytes @ 0x18
  9048                           
  9049  0038                     cmd_rp@buffer:	
  9050                           ; 1 bytes @ 0x18
  9051                           
  9052  0038                     cmd_mmp@buffer:	
  9053                           ; 1 bytes @ 0x18
  9054                           
  9055  0038                     cmd_mta@buffer:	
  9056                           ; 1 bytes @ 0x18
  9057                           
  9058  0038                     cmd_ra@buffer:	
  9059                           ; 1 bytes @ 0x18
  9060                           
  9061  0038                     cmd_dac@buffer:	
  9062                           ; 1 bytes @ 0x18
  9063                           
  9064  0038                     cmd_dtl@buffer:	
  9065                           ; 1 bytes @ 0x18
  9066                           
  9067  0038                     cmd_aa@buffer:	
  9068                           ; 1 bytes @ 0x18
  9069                           
  9070  0038                     cmd_ir@buffer:	
  9071                           ; 1 bytes @ 0x18
  9072                           
  9073  0038                     cmd_trc@buffer:	
  9074                           ; 1 bytes @ 0x18
  9075                           
  9076  0038                     cmd_tri@buffer:	
  9077                           ; 1 bytes @ 0x18
  9078                           
  9079                           
  9080                           ; 1 bytes @ 0x18
  9081  0038                     	ds	1
  9082  0039                     ??_cmd_rc:
  9083  0039                     ??_cmd_sc:	
  9084                           ; 1 bytes @ 0x19
  9085                           
  9086  0039                     ??_cmd_rtl:	
  9087                           ; 1 bytes @ 0x19
  9088                           
  9089  0039                     ??_cmd_rp:	
  9090                           ; 1 bytes @ 0x19
  9091                           
  9092  0039                     ??_cmd_mmp:	
  9093                           ; 1 bytes @ 0x19
  9094                           
  9095  0039                     ??_cmd_mta:	
  9096                           ; 1 bytes @ 0x19
  9097                           
  9098  0039                     ??_cmd_ra:	
  9099                           ; 1 bytes @ 0x19
  9100                           
  9101  0039                     ??_cmd_dac:	
  9102                           ; 1 bytes @ 0x19
  9103                           
  9104  0039                     ??_cmd_dtl:	
  9105                           ; 1 bytes @ 0x19
  9106                           
  9107  0039                     ??_cmd_aa:	
  9108                           ; 1 bytes @ 0x19
  9109                           
  9110  0039                     ??_cmd_ir:	
  9111                           ; 1 bytes @ 0x19
  9112                           
  9113  0039                     ??_cmd_trc:	
  9114                           ; 1 bytes @ 0x19
  9115                           
  9116  0039                     ??_cmd_tri:	
  9117                           ; 1 bytes @ 0x19
  9118                           
  9119                           
  9120                           ; 1 bytes @ 0x19
  9121  0039                     	ds	1
  9122  003A                     cmd_rtl@buff:
  9123  003A                     cmd_rp@buff:	
  9124                           ; 5 bytes @ 0x1A
  9125                           
  9126  003A                     cmd_rc@buff:	
  9127                           ; 5 bytes @ 0x1A
  9128                           
  9129  003A                     cmd_ir@buff:	
  9130                           ; 6 bytes @ 0x1A
  9131                           
  9132  003A                     cmd_ra@buff:	
  9133                           ; 7 bytes @ 0x1A
  9134                           
  9135                           
  9136                           ; 9 bytes @ 0x1A
  9137  003A                     	ds	1
  9138  003B                     cmd_sc@h:
  9139  003B                     cmd_dac@h:	
  9140                           ; 2 bytes @ 0x1B
  9141                           
  9142  003B                     cmd_dtl@tempAux:	
  9143                           ; 2 bytes @ 0x1B
  9144                           
  9145                           
  9146                           ; 2 bytes @ 0x1B
  9147  003B                     	ds	2
  9148  003D                     ??_sprintf:
  9149  003D                     cmd_sc@m:	
  9150                           ; 1 bytes @ 0x1D
  9151                           
  9152  003D                     cmd_dac@m:	
  9153                           ; 2 bytes @ 0x1D
  9154                           
  9155  003D                     cmd_dtl@lumAux:	
  9156                           ; 2 bytes @ 0x1D
  9157                           
  9158                           
  9159                           ; 2 bytes @ 0x1D
  9160  003D                     	ds	1
  9161  003E                     cmd_tri@buffData:
  9162                           
  9163                           ; 5 bytes @ 0x1E
  9164  003E                     	ds	1
  9165  003F                     cmd_sc@s:
  9166  003F                     cmd_dac@s:	
  9167                           ; 2 bytes @ 0x1F
  9168                           
  9169  003F                     cmd_trc@buffData:	
  9170                           ; 2 bytes @ 0x1F
  9171                           
  9172                           
  9173                           ; 5 bytes @ 0x1F
  9174  003F                     	ds	2
  9175  0041                     sprintf@ap:
  9176                           
  9177                           ; 1 bytes @ 0x21
  9178  0041                     	ds	1
  9179  0042                     sprintf@prec:
  9180                           
  9181                           ; 1 bytes @ 0x22
  9182  0042                     	ds	1
  9183  0043                     sprintf@val:
  9184  0043                     cmd_tri@buffInit:	
  9185                           ; 2 bytes @ 0x23
  9186                           
  9187                           
  9188                           ; 4 bytes @ 0x23
  9189  0043                     	ds	1
  9190  0044                     cmd_trc@buffInit:
  9191                           
  9192                           ; 3 bytes @ 0x24
  9193  0044                     	ds	1
  9194  0045                     sprintf@flag:
  9195                           
  9196                           ; 1 bytes @ 0x25
  9197  0045                     	ds	1
  9198  0046                     sprintf@width:
  9199                           
  9200                           ; 2 bytes @ 0x26
  9201  0046                     	ds	1
  9202  0047                     cmd_tri@buffEOM:
  9203  0047                     cmd_trc@i:	
  9204                           ; 1 bytes @ 0x27
  9205                           
  9206                           
  9207                           ; 2 bytes @ 0x27
  9208  0047                     	ds	1
  9209  0048                     sprintf@c:
  9210  0048                     cmd_tri@maxReadings:	
  9211                           ; 1 bytes @ 0x28
  9212                           
  9213                           
  9214                           ; 2 bytes @ 0x28
  9215  0048                     	ds	1
  9216  0049                     sprintf@sp:
  9217  0049                     cmd_trc@address:	
  9218                           ; 1 bytes @ 0x29
  9219                           
  9220                           
  9221                           ; 2 bytes @ 0x29
  9222  0049                     	ds	1
  9223  004A                     ??_update_menuLCD:
  9224  004A                     cmd_tri@i:	
  9225                           ; 1 bytes @ 0x2A
  9226                           
  9227                           
  9228                           ; 2 bytes @ 0x2A
  9229  004A                     	ds	1
  9230  004B                     cmd_trc@buffEOM:
  9231                           
  9232                           ; 1 bytes @ 0x2B
  9233  004B                     	ds	1
  9234  004C                     cmd_tri@index:
  9235  004C                     cmd_trc@maxReadings:	
  9236                           ; 1 bytes @ 0x2C
  9237                           
  9238                           
  9239                           ; 2 bytes @ 0x2C
  9240  004C                     	ds	1
  9241  004D                     cmd_tri@n:
  9242                           
  9243                           ; 1 bytes @ 0x2D
  9244  004D                     	ds	1
  9245  004E                     cmd_tri@j:
  9246  004E                     cmd_trc@n:	
  9247                           ; 1 bytes @ 0x2E
  9248                           
  9249                           
  9250                           ; 2 bytes @ 0x2E
  9251  004E                     	ds	1
  9252  004F                     cmd_tri@startingIndex:
  9253                           
  9254                           ; 2 bytes @ 0x2F
  9255  004F                     	ds	1
  9256  0050                     ??_checkFlags:
  9257  0050                     cmd_trc@j:	
  9258                           ; 1 bytes @ 0x30
  9259                           
  9260                           
  9261                           ; 1 bytes @ 0x30
  9262  0050                     	ds	1
  9263  0051                     checkFlags@buff:
  9264                           
  9265                           ; 7 bytes @ 0x31
  9266  0051                     	ds	7
  9267  0058                     ??_editClock:
  9268  0058                     ??_editTemp:	
  9269                           ; 1 bytes @ 0x38
  9270                           
  9271  0058                     ??_editLum:	
  9272                           ; 1 bytes @ 0x38
  9273                           
  9274  0058                     ??_toggleAlarms:	
  9275                           ; 1 bytes @ 0x38
  9276                           
  9277                           
  9278                           ; 1 bytes @ 0x38
  9279  0058                     	ds	1
  9280  0059                     ??_main:
  9281                           
  9282                           ; 1 bytes @ 0x39
  9283  0059                     	ds	1
  9284                           
  9285                           	psect	maintext
  9286  0094                     __pmaintext:	
  9287 ;;
  9288 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  9289 ;;
  9290 ;; *************** function _main *****************
  9291 ;; Defined at:
  9292 ;;		line 1110 in file "main.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;		None
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;  i               2   25[BANK2 ] int 
  9297 ;;  buff           20    0[BANK2 ] unsigned char [20]
  9298 ;;  n               2   30[BANK2 ] int 
  9299 ;;  i               2   28[BANK2 ] int 
  9300 ;;  c               1   27[BANK2 ] unsigned char 
  9301 ;;  corrupted       1   24[BANK2 ] unsigned char 
  9302 ;;  notInit         1   23[BANK2 ] unsigned char 
  9303 ;;  checkSumAux     1   22[BANK2 ] unsigned char 
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      void 
  9306 ;; Registers used:
  9307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9308 ;; Tracked objects:
  9309 ;;		On entry : B1F/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Locals:         0       0       0      32       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Totals:         0       1       0      32       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;Total ram usage:       33 bytes
  9318 ;; Hardware stack levels required when called:   11
  9319 ;; This function calls:
  9320 ;;		_DATAEE_ReadByte
  9321 ;;		_DATAEE_WriteByte
  9322 ;;		_EUSART_is_rx_ready
  9323 ;;		_INT_SetInterruptHandler
  9324 ;;		_LCDinit
  9325 ;;		_PWM6_LoadDutyValue
  9326 ;;		_PWM_Output_D4_Disable
  9327 ;;		_SYSTEM_Initialize
  9328 ;;		_TMR1_SetInterruptHandler
  9329 ;;		_TMR2_StopTimer
  9330 ;;		___wmul
  9331 ;;		_checkFlags
  9332 ;;		_cmd_aa
  9333 ;;		_cmd_dac
  9334 ;;		_cmd_dtl
  9335 ;;		_cmd_ir
  9336 ;;		_cmd_mmp
  9337 ;;		_cmd_mta
  9338 ;;		_cmd_ra
  9339 ;;		_cmd_rc
  9340 ;;		_cmd_rp
  9341 ;;		_cmd_rtl
  9342 ;;		_cmd_sc
  9343 ;;		_cmd_trc
  9344 ;;		_cmd_tri
  9345 ;;		_editClock
  9346 ;;		_editLum
  9347 ;;		_editTemp
  9348 ;;		_getch
  9349 ;;		_i2c1_driver_open
  9350 ;;		_memset
  9351 ;;		_toggleAlarms
  9352 ;; This function is called by:
  9353 ;;		Startup code after reset
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           
  9358                           ;psect for function _main
  9359  0094                     _main:
  9360  0094                     l7602:	
  9361                           ;incstack = 0
  9362                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9363                           
  9364                           
  9365                           ;main.c: 1113: SYSTEM_Initialize();
  9366  0094  3190  2069  3180   	fcall	_SYSTEM_Initialize
  9367                           
  9368                           ;main.c: 1115: PWM6_LoadDutyValue(0);
  9369  0097  3000               	movlw	0
  9370  0098  0020               	movlb	0	; select bank0
  9371  0099  00A7               	movwf	PWM6_LoadDutyValue@dutyValue
  9372  009A  00A8               	movwf	PWM6_LoadDutyValue@dutyValue+1
  9373  009B  3190  2000  3180   	fcall	_PWM6_LoadDutyValue
  9374  009E                     l7604:
  9375                           
  9376                           ;main.c: 1116: TMR2_StopTimer();
  9377  009E  319E  26E6  3180   	fcall	_TMR2_StopTimer
  9378  00A1                     l7606:
  9379                           
  9380                           ;main.c: 1117: PWM_Output_D4_Disable();
  9381  00A1  319E  26DC  3180   	fcall	_PWM_Output_D4_Disable
  9382                           
  9383                           ;main.c: 1119: TMR1_SetInterruptHandler(Clock_ISR);
  9384  00A4  3013               	movlw	low _Clock_ISR
  9385  00A5  0020               	movlb	0	; select bank0
  9386  00A6  00A7               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9387  00A7  300A               	movlw	high _Clock_ISR
  9388  00A8  00A8               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9389  00A9  319F  273E  3180   	fcall	_TMR1_SetInterruptHandler
  9390                           
  9391                           ;main.c: 1121: INT_SetInterruptHandler(S1_ISR);
  9392  00AC  3011               	movlw	low _S1_ISR
  9393  00AD  0020               	movlb	0	; select bank0
  9394  00AE  00A7               	movwf	INT_SetInterruptHandler@InterruptHandler
  9395  00AF  301F               	movlw	high _S1_ISR
  9396  00B0  00A8               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  9397  00B1  319F  272C  3180   	fcall	_INT_SetInterruptHandler
  9398  00B4                     l7608:
  9399                           
  9400                           ;main.c: 1123: uint8_t checkSumAux = 0;
  9401  00B4  0022               	movlb	2	; select bank2
  9402  00B5  01B6               	clrf	main@checkSumAux^(0+256)
  9403  00B6                     l7610:
  9404                           
  9405                           ;main.c: 1124: bool notInit = 1;
  9406  00B6  01B7               	clrf	main@notInit^(0+256)
  9407  00B7  0AB7               	incf	main@notInit^(0+256),f
  9408  00B8                     l7612:
  9409                           
  9410                           ;main.c: 1125: bool corrupted = 0;
  9411  00B8  01B8               	clrf	main@corrupted^(0+256)
  9412  00B9                     l7614:
  9413                           
  9414                           ;main.c: 1126: if(DATAEE_ReadByte(0x7000) == 'S'){
  9415  00B9  3000               	movlw	0
  9416  00BA  0020               	movlb	0	; select bank0
  9417  00BB  00AD               	movwf	DATAEE_ReadByte@bAdd
  9418  00BC  3070               	movlw	112
  9419  00BD  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9420  00BE  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9421  00C1  3A53               	xorlw	83
  9422  00C2  1D03               	skipz
  9423  00C3  28C5               	goto	u9321
  9424  00C4  28C6               	goto	u9320
  9425  00C5                     u9321:
  9426  00C5  2901               	goto	l7634
  9427  00C6                     u9320:
  9428  00C6                     l7616:
  9429                           
  9430                           ;main.c: 1127: notInit = 0;
  9431  00C6  0022               	movlb	2	; select bank2
  9432  00C7  01B7               	clrf	main@notInit^(0+256)
  9433  00C8                     l7618:
  9434                           
  9435                           ;main.c: 1128: for(int i = 1; i < 13; i++){
  9436  00C8  3001               	movlw	1
  9437  00C9  00B9               	movwf	main@i^(0+256)
  9438  00CA  3000               	movlw	0
  9439  00CB  00BA               	movwf	(main@i^(0+256)+1)
  9440  00CC                     l7624:
  9441                           
  9442                           ;main.c: 1129: checkSumAux += DATAEE_ReadByte(0x7000 + (i));
  9443  00CC  0022               	movlb	2	; select bank2
  9444  00CD  0839               	movf	main@i^(0+256),w
  9445  00CE  3E00               	addlw	0
  9446  00CF  0020               	movlb	0	; select bank0
  9447  00D0  00AD               	movwf	DATAEE_ReadByte@bAdd
  9448  00D1  3070               	movlw	112
  9449  00D2  0022               	movlb	2	; select bank2
  9450  00D3  3D3A               	addwfc	(main@i+1)^(0+256),w
  9451  00D4  0020               	movlb	0	; select bank0
  9452  00D5  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9453  00D6  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9454  00D9  0020               	movlb	0	; select bank0
  9455  00DA  00D9               	movwf	??_main
  9456  00DB  0859               	movf	??_main,w
  9457  00DC  0022               	movlb	2	; select bank2
  9458  00DD  07B6               	addwf	main@checkSumAux^(0+256),f
  9459  00DE                     l7626:
  9460  00DE  3001               	movlw	1
  9461  00DF  07B9               	addwf	main@i^(0+256),f
  9462  00E0  3000               	movlw	0
  9463  00E1  3DBA               	addwfc	(main@i+1)^(0+256),f
  9464  00E2                     l7628:
  9465  00E2  083A               	movf	(main@i+1)^(0+256),w
  9466  00E3  3A80               	xorlw	128
  9467  00E4  0020               	movlb	0	; select bank0
  9468  00E5  00D9               	movwf	??_main
  9469  00E6  3080               	movlw	128
  9470  00E7  0259               	subwf	??_main,w
  9471  00E8  1D03               	skipz
  9472  00E9  28ED               	goto	u9335
  9473  00EA  300D               	movlw	13
  9474  00EB  0022               	movlb	2	; select bank2
  9475  00EC  0239               	subwf	main@i^(0+256),w
  9476  00ED                     u9335:
  9477  00ED  1C03               	skipc
  9478  00EE  28F0               	goto	u9331
  9479  00EF  28F1               	goto	u9330
  9480  00F0                     u9331:
  9481  00F0  28CC               	goto	l7624
  9482  00F1                     u9330:
  9483  00F1                     l7630:
  9484                           
  9485                           ;main.c: 1130: };main.c: 1131: if(checkSumAux != DATAEE_ReadByte(0x7000 + (13))){
  9486  00F1  300D               	movlw	13
  9487  00F2  0020               	movlb	0	; select bank0
  9488  00F3  00AD               	movwf	DATAEE_ReadByte@bAdd
  9489  00F4  3070               	movlw	112
  9490  00F5  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9491  00F6  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9492  00F9  0022               	movlb	2	; select bank2
  9493  00FA  0636               	xorwf	main@checkSumAux^(0+256),w
  9494  00FB  1903               	skipnz
  9495  00FC  28FE               	goto	u9341
  9496  00FD  28FF               	goto	u9340
  9497  00FE                     u9341:
  9498  00FE  2901               	goto	l7634
  9499  00FF                     u9340:
  9500  00FF                     l7632:
  9501                           
  9502                           ;main.c: 1132: corrupted = 1;
  9503  00FF  01B8               	clrf	main@corrupted^(0+256)
  9504  0100  0AB8               	incf	main@corrupted^(0+256),f
  9505  0101                     l7634:
  9506                           
  9507                           ;main.c: 1133: };main.c: 1134: };main.c: 1136: if(notInit || corrupted){
  9508  0101  0022               	movlb	2	; select bank2
  9509  0102  0837               	movf	main@notInit^(0+256),w
  9510  0103  1D03               	btfss	3,2
  9511  0104  2906               	goto	u9351
  9512  0105  2907               	goto	u9350
  9513  0106                     u9351:
  9514  0106  290C               	goto	l7638
  9515  0107                     u9350:
  9516  0107                     l7636:
  9517  0107  0838               	movf	main@corrupted^(0+256),w
  9518  0108  1903               	btfsc	3,2
  9519  0109  290B               	goto	u9361
  9520  010A  290C               	goto	u9360
  9521  010B                     u9361:
  9522  010B  29A5               	goto	l7640
  9523  010C                     u9360:
  9524  010C                     l7638:
  9525                           
  9526                           ;main.c: 1137: DATAEE_WriteByte( 0x7000 + (0), 'S');
  9527  010C  3000               	movlw	0
  9528  010D  0020               	movlb	0	; select bank0
  9529  010E  00AD               	movwf	DATAEE_WriteByte@bAdd
  9530  010F  3070               	movlw	112
  9531  0110  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9532  0111  3053               	movlw	83
  9533  0112  00D9               	movwf	??_main
  9534  0113  0859               	movf	??_main,w
  9535  0114  00AF               	movwf	DATAEE_WriteByte@bData
  9536  0115  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9537                           
  9538                           ;main.c: 1138: DATAEE_WriteByte( 0x7000 + (1), 25);
  9539  0118  3001               	movlw	1
  9540  0119  0020               	movlb	0	; select bank0
  9541  011A  00AD               	movwf	DATAEE_WriteByte@bAdd
  9542  011B  3070               	movlw	112
  9543  011C  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9544  011D  3019               	movlw	25
  9545  011E  00D9               	movwf	??_main
  9546  011F  0859               	movf	??_main,w
  9547  0120  00AF               	movwf	DATAEE_WriteByte@bData
  9548  0121  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9549                           
  9550                           ;main.c: 1139: DATAEE_WriteByte( 0x7000 + (2), 3);
  9551  0124  3002               	movlw	2
  9552  0125  0020               	movlb	0	; select bank0
  9553  0126  00AD               	movwf	DATAEE_WriteByte@bAdd
  9554  0127  3070               	movlw	112
  9555  0128  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9556  0129  3003               	movlw	3
  9557  012A  00D9               	movwf	??_main
  9558  012B  0859               	movf	??_main,w
  9559  012C  00AF               	movwf	DATAEE_WriteByte@bData
  9560  012D  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9561                           
  9562                           ;main.c: 1140: DATAEE_WriteByte( 0x7000 + (3), 5);
  9563  0130  3003               	movlw	3
  9564  0131  0020               	movlb	0	; select bank0
  9565  0132  00AD               	movwf	DATAEE_WriteByte@bAdd
  9566  0133  3070               	movlw	112
  9567  0134  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9568  0135  3005               	movlw	5
  9569  0136  00D9               	movwf	??_main
  9570  0137  0859               	movf	??_main,w
  9571  0138  00AF               	movwf	DATAEE_WriteByte@bData
  9572  0139  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9573                           
  9574                           ;main.c: 1141: DATAEE_WriteByte( 0x7000 + (4), 12);
  9575  013C  3004               	movlw	4
  9576  013D  0020               	movlb	0	; select bank0
  9577  013E  00AD               	movwf	DATAEE_WriteByte@bAdd
  9578  013F  3070               	movlw	112
  9579  0140  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9580  0141  300C               	movlw	12
  9581  0142  00D9               	movwf	??_main
  9582  0143  0859               	movf	??_main,w
  9583  0144  00AF               	movwf	DATAEE_WriteByte@bData
  9584  0145  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9585                           
  9586                           ;main.c: 1142: DATAEE_WriteByte( 0x7000 + (5), 0);
  9587  0148  3005               	movlw	5
  9588  0149  0020               	movlb	0	; select bank0
  9589  014A  00AD               	movwf	DATAEE_WriteByte@bAdd
  9590  014B  3070               	movlw	112
  9591  014C  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9592  014D  01AF               	clrf	DATAEE_WriteByte@bData
  9593  014E  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9594                           
  9595                           ;main.c: 1143: DATAEE_WriteByte( 0x7000 + (6), 0);
  9596  0151  3006               	movlw	6
  9597  0152  0020               	movlb	0	; select bank0
  9598  0153  00AD               	movwf	DATAEE_WriteByte@bAdd
  9599  0154  3070               	movlw	112
  9600  0155  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9601  0156  01AF               	clrf	DATAEE_WriteByte@bData
  9602  0157  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9603                           
  9604                           ;main.c: 1144: DATAEE_WriteByte( 0x7000 + (7), 28);
  9605  015A  3007               	movlw	7
  9606  015B  0020               	movlb	0	; select bank0
  9607  015C  00AD               	movwf	DATAEE_WriteByte@bAdd
  9608  015D  3070               	movlw	112
  9609  015E  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9610  015F  301C               	movlw	28
  9611  0160  00D9               	movwf	??_main
  9612  0161  0859               	movf	??_main,w
  9613  0162  00AF               	movwf	DATAEE_WriteByte@bData
  9614  0163  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9615                           
  9616                           ;main.c: 1145: DATAEE_WriteByte( 0x7000 + (8), 4);
  9617  0166  3008               	movlw	8
  9618  0167  0020               	movlb	0	; select bank0
  9619  0168  00AD               	movwf	DATAEE_WriteByte@bAdd
  9620  0169  3070               	movlw	112
  9621  016A  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9622  016B  3004               	movlw	4
  9623  016C  00D9               	movwf	??_main
  9624  016D  0859               	movf	??_main,w
  9625  016E  00AF               	movwf	DATAEE_WriteByte@bData
  9626  016F  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9627                           
  9628                           ;main.c: 1146: DATAEE_WriteByte( 0x7000 + (9), 'a');
  9629  0172  3009               	movlw	9
  9630  0173  0020               	movlb	0	; select bank0
  9631  0174  00AD               	movwf	DATAEE_WriteByte@bAdd
  9632  0175  3070               	movlw	112
  9633  0176  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9634  0177  3061               	movlw	97
  9635  0178  00D9               	movwf	??_main
  9636  0179  0859               	movf	??_main,w
  9637  017A  00AF               	movwf	DATAEE_WriteByte@bData
  9638  017B  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9639                           
  9640                           ;main.c: 1147: DATAEE_WriteByte( 0x7000 + (10), 0);
  9641  017E  300A               	movlw	10
  9642  017F  0020               	movlb	0	; select bank0
  9643  0180  00AD               	movwf	DATAEE_WriteByte@bAdd
  9644  0181  3070               	movlw	112
  9645  0182  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9646  0183  01AF               	clrf	DATAEE_WriteByte@bData
  9647  0184  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9648                           
  9649                           ;main.c: 1148: DATAEE_WriteByte( 0x7000 + (11), 0);
  9650  0187  300B               	movlw	11
  9651  0188  0020               	movlb	0	; select bank0
  9652  0189  00AD               	movwf	DATAEE_WriteByte@bAdd
  9653  018A  3070               	movlw	112
  9654  018B  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9655  018C  01AF               	clrf	DATAEE_WriteByte@bData
  9656  018D  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9657                           
  9658                           ;main.c: 1149: DATAEE_WriteByte( 0x7000 + (12), 0);
  9659  0190  300C               	movlw	12
  9660  0191  0020               	movlb	0	; select bank0
  9661  0192  00AD               	movwf	DATAEE_WriteByte@bAdd
  9662  0193  3070               	movlw	112
  9663  0194  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9664  0195  01AF               	clrf	DATAEE_WriteByte@bData
  9665  0196  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9666                           
  9667                           ;main.c: 1150: DATAEE_WriteByte( 0x7000 + (13), 174);
  9668  0199  300D               	movlw	13
  9669  019A  0020               	movlb	0	; select bank0
  9670  019B  00AD               	movwf	DATAEE_WriteByte@bAdd
  9671  019C  3070               	movlw	112
  9672  019D  00AE               	movwf	DATAEE_WriteByte@bAdd+1
  9673  019E  30AE               	movlw	174
  9674  019F  00D9               	movwf	??_main
  9675  01A0  0859               	movf	??_main,w
  9676  01A1  00AF               	movwf	DATAEE_WriteByte@bData
  9677  01A2  3191  21A4  3180   	fcall	_DATAEE_WriteByte
  9678  01A5                     l7640:
  9679                           
  9680                           ;main.c: 1151: };main.c: 1153: NREG = DATAEE_ReadByte(0x7000 + (1));
  9681  01A5  3001               	movlw	1
  9682  01A6  0020               	movlb	0	; select bank0
  9683  01A7  00AD               	movwf	DATAEE_ReadByte@bAdd
  9684  01A8  3070               	movlw	112
  9685  01A9  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9686  01AA  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9687  01AD  0020               	movlb	0	; select bank0
  9688  01AE  00D9               	movwf	??_main
  9689  01AF  0859               	movf	??_main,w
  9690  01B0  00FD               	movwf	_NREG
  9691  01B1                     l7642:
  9692                           
  9693                           ;main.c: 1154: PMON = DATAEE_ReadByte(0x7000 + (2));
  9694  01B1  3002               	movlw	2
  9695  01B2  00AD               	movwf	DATAEE_ReadByte@bAdd
  9696  01B3  3070               	movlw	112
  9697  01B4  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9698  01B5  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9699  01B8  0020               	movlb	0	; select bank0
  9700  01B9  00D9               	movwf	??_main
  9701  01BA  0859               	movf	??_main,w
  9702  01BB  0021               	movlb	1	; select bank1
  9703  01BC  00D7               	movwf	_PMON^(0+128)
  9704  01BD                     l7644:
  9705                           
  9706                           ;main.c: 1155: TALA = DATAEE_ReadByte(0x7000 + (3));
  9707  01BD  3003               	movlw	3
  9708  01BE  0020               	movlb	0	; select bank0
  9709  01BF  00AD               	movwf	DATAEE_ReadByte@bAdd
  9710  01C0  3070               	movlw	112
  9711  01C1  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9712  01C2  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9713  01C5  0020               	movlb	0	; select bank0
  9714  01C6  00D9               	movwf	??_main
  9715  01C7  0859               	movf	??_main,w
  9716  01C8  0021               	movlb	1	; select bank1
  9717  01C9  00D6               	movwf	_TALA^(0+128)
  9718  01CA                     l7646:
  9719                           
  9720                           ;main.c: 1156: clkAlarm.alarmVal.h = DATAEE_ReadByte(0x7000 + (4));
  9721  01CA  3004               	movlw	4
  9722  01CB  0020               	movlb	0	; select bank0
  9723  01CC  00AD               	movwf	DATAEE_ReadByte@bAdd
  9724  01CD  3070               	movlw	112
  9725  01CE  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9726  01CF  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9727  01D2  0020               	movlb	0	; select bank0
  9728  01D3  00D9               	movwf	??_main
  9729  01D4  0859               	movf	??_main,w
  9730  01D5  0021               	movlb	1	; select bank1
  9731  01D6  00A0               	movwf	_clkAlarm^(0+128)
  9732  01D7                     l7648:
  9733                           
  9734                           ;main.c: 1157: clkAlarm.alarmVal.m = DATAEE_ReadByte(0x7000 + (5));
  9735  01D7  3005               	movlw	5
  9736  01D8  0020               	movlb	0	; select bank0
  9737  01D9  00AD               	movwf	DATAEE_ReadByte@bAdd
  9738  01DA  3070               	movlw	112
  9739  01DB  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9740  01DC  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9741  01DF  0020               	movlb	0	; select bank0
  9742  01E0  00D9               	movwf	??_main
  9743  01E1  0859               	movf	??_main,w
  9744  01E2  0021               	movlb	1	; select bank1
  9745  01E3  00A1               	movwf	(_clkAlarm^(0+128)+1)
  9746  01E4                     l7650:
  9747                           
  9748                           ;main.c: 1158: clkAlarm.alarmVal.s = DATAEE_ReadByte(0x7000 + (6));
  9749  01E4  3006               	movlw	6
  9750  01E5  0020               	movlb	0	; select bank0
  9751  01E6  00AD               	movwf	DATAEE_ReadByte@bAdd
  9752  01E7  3070               	movlw	112
  9753  01E8  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9754  01E9  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9755  01EC  0020               	movlb	0	; select bank0
  9756  01ED  00D9               	movwf	??_main
  9757  01EE  0859               	movf	??_main,w
  9758  01EF  0021               	movlb	1	; select bank1
  9759  01F0  00A2               	movwf	(_clkAlarm^(0+128)+2)
  9760  01F1                     l7652:
  9761                           
  9762                           ;main.c: 1159: tempAlarm.alarmTemp = DATAEE_ReadByte(0x7000 + (7));
  9763  01F1  3007               	movlw	7
  9764  01F2  0020               	movlb	0	; select bank0
  9765  01F3  00AD               	movwf	DATAEE_ReadByte@bAdd
  9766  01F4  3070               	movlw	112
  9767  01F5  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9768  01F6  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9769  01F9  0020               	movlb	0	; select bank0
  9770  01FA  00D9               	movwf	??_main
  9771  01FB  0859               	movf	??_main,w
  9772  01FC  0021               	movlb	1	; select bank1
  9773  01FD  00A7               	movwf	_tempAlarm^(0+128)
  9774  01FE                     l7654:
  9775                           
  9776                           ;main.c: 1160: lumAlarm.alarmLum = DATAEE_ReadByte(0x7000 + (8));
  9777  01FE  3008               	movlw	8
  9778  01FF  0020               	movlb	0	; select bank0
  9779  0200  00AD               	movwf	DATAEE_ReadByte@bAdd
  9780  0201  3070               	movlw	112
  9781  0202  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9782  0203  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9783  0206  0020               	movlb	0	; select bank0
  9784  0207  00D9               	movwf	??_main
  9785  0208  0859               	movf	??_main,w
  9786  0209  0021               	movlb	1	; select bank1
  9787  020A  00A4               	movwf	_lumAlarm^(0+128)
  9788  020B                     l7656:
  9789                           
  9790                           ;main.c: 1161: ALAF = DATAEE_ReadByte(0x7000 + (9));
  9791  020B  3009               	movlw	9
  9792  020C  0020               	movlb	0	; select bank0
  9793  020D  00AD               	movwf	DATAEE_ReadByte@bAdd
  9794  020E  3070               	movlw	112
  9795  020F  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9796  0210  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9797  0213  0020               	movlb	0	; select bank0
  9798  0214  00D9               	movwf	??_main
  9799  0215  0859               	movf	??_main,w
  9800  0216  00FC               	movwf	_ALAF
  9801  0217                     l7658:
  9802                           
  9803                           ;main.c: 1162: t.h = DATAEE_ReadByte(0x7000 + (10));
  9804  0217  300A               	movlw	10
  9805  0218  00AD               	movwf	DATAEE_ReadByte@bAdd
  9806  0219  3070               	movlw	112
  9807  021A  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9808  021B  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9809  021E  0020               	movlb	0	; select bank0
  9810  021F  00D9               	movwf	??_main
  9811  0220  0859               	movf	??_main,w
  9812  0221  00DA               	movwf	_t
  9813  0222                     l7660:
  9814                           
  9815                           ;main.c: 1163: t.m = DATAEE_ReadByte(0x7000 + (11));
  9816  0222  300B               	movlw	11
  9817  0223  00AD               	movwf	DATAEE_ReadByte@bAdd
  9818  0224  3070               	movlw	112
  9819  0225  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9820  0226  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9821  0229  0020               	movlb	0	; select bank0
  9822  022A  00D9               	movwf	??_main
  9823  022B  0859               	movf	??_main,w
  9824  022C  00DB               	movwf	_t+1
  9825  022D                     l7662:
  9826                           
  9827                           ;main.c: 1164: iwrite = DATAEE_ReadByte(0x7000 + (12));
  9828  022D  300C               	movlw	12
  9829  022E  00AD               	movwf	DATAEE_ReadByte@bAdd
  9830  022F  3070               	movlw	112
  9831  0230  00AE               	movwf	DATAEE_ReadByte@bAdd+1
  9832  0231  319F  279C  3180   	fcall	_DATAEE_ReadByte
  9833  0234  0020               	movlb	0	; select bank0
  9834  0235  00D9               	movwf	??_main
  9835  0236  0859               	movf	??_main,w
  9836  0237  00FA               	movwf	_iwrite
  9837  0238                     l7664:
  9838                           
  9839                           ;main.c: 1168: tempAlarm.trigger = 0;
  9840  0238  0021               	movlb	1	; select bank1
  9841  0239  01A8               	clrf	(_tempAlarm^(0+128)+1)
  9842  023A                     l7666:
  9843                           
  9844                           ;main.c: 1169: tempAlarm.triggered = 0;
  9845  023A  01A9               	clrf	(_tempAlarm^(0+128)+2)
  9846  023B                     l7668:
  9847                           
  9848                           ;main.c: 1171: lumAlarm.trigger = 0;
  9849  023B  01A5               	clrf	(_lumAlarm^(0+128)+1)
  9850  023C                     l7670:
  9851                           
  9852                           ;main.c: 1172: lumAlarm.triggered = 0;
  9853  023C  01A6               	clrf	(_lumAlarm^(0+128)+2)
  9854  023D                     l7672:
  9855                           
  9856                           ;main.c: 1174: clkAlarm.trigger = 0;
  9857  023D  01A3               	clrf	(_clkAlarm^(0+128)+3)
  9858  023E                     l7674:
  9859                           
  9860                           ;main.c: 1177: i2c1_driver_open();
  9861  023E  319F  275A  3180   	fcall	_i2c1_driver_open
  9862  0241                     l7676:
  9863                           
  9864                           ;main.c: 1178: TRISCbits.TRISC3 = 1;
  9865  0241  0020               	movlb	0	; select bank0
  9866  0242  1593               	bsf	19,3	;volatile
  9867  0243                     l7678:
  9868                           
  9869                           ;main.c: 1179: TRISCbits.TRISC4 = 1;
  9870  0243  1613               	bsf	19,4	;volatile
  9871  0244                     l7680:
  9872                           
  9873                           ;main.c: 1180: WPUC3 = 1;
  9874  0244  003E               	movlb	30	; select bank30
  9875  0245  15CF               	bsf	79,3	;volatile
  9876  0246                     l7682:
  9877                           
  9878                           ;main.c: 1181: WPUC4 = 1;
  9879  0246  164F               	bsf	79,4	;volatile
  9880  0247                     l7684:
  9881                           
  9882                           ;main.c: 1182: LCDinit();
  9883  0247  3197  2712  3180   	fcall	_LCDinit
  9884  024A                     l7686:
  9885                           
  9886                           ;main.c: 1185: (INTCONbits.GIE = 1);
  9887  024A  178B               	bsf	11,7	;volatile
  9888  024B                     l7688:
  9889                           
  9890                           ;main.c: 1188: (INTCONbits.PEIE = 1);
  9891  024B  170B               	bsf	11,6	;volatile
  9892  024C                     l7690:
  9893                           
  9894                           ;main.c: 1192: uint8_t c;;main.c: 1193: char buff[20] = "";
  9895  024C  3020               	movlw	low main@buff
  9896  024D  0086               	movwf	6
  9897  024E  3001               	movlw	high main@buff
  9898  024F  0087               	movwf	7
  9899  0250  3014               	movlw	20
  9900  0251  0020               	movlb	0	; select bank0
  9901  0252  00D9               	movwf	??_main
  9902  0253  3000               	movlw	0
  9903  0254                     u9370:
  9904  0254  001E               	movwi fsr1++
  9905  0255  0BD9               	decfsz	??_main,f
  9906  0256  2A54               	goto	u9370
  9907  0257                     l7692:
  9908                           
  9909                           ;main.c: 1194: int n=0;
  9910  0257  0022               	movlb	2	; select bank2
  9911  0258  01BE               	clrf	main@n^(0+256)
  9912  0259  01BF               	clrf	(main@n+1)^(0+256)
  9913  025A                     l7694:
  9914  025A  2AB2               	goto	l7722
  9915  025B                     l7696:
  9916                           
  9917                           ;main.c: 1200: c = getch();
  9918  025B  319E  26EA  3180   	fcall	_getch
  9919  025E  0020               	movlb	0	; select bank0
  9920  025F  00D9               	movwf	??_main
  9921  0260  0859               	movf	??_main,w
  9922  0261  0022               	movlb	2	; select bank2
  9923  0262  00BB               	movwf	main@c^(0+256)
  9924  0263                     l7698:
  9925                           
  9926                           ;main.c: 1201: if((c == (uint8_t)0xFD || buff[0] == (uint8_t)0xFD)){
  9927  0263  30FD               	movlw	253
  9928  0264  063B               	xorwf	main@c^(0+256),w
  9929  0265  1903               	btfsc	3,2
  9930  0266  2A68               	goto	u9381
  9931  0267  2A69               	goto	u9380
  9932  0268                     u9381:
  9933  0268  2A6F               	goto	l7702
  9934  0269                     u9380:
  9935  0269                     l7700:
  9936  0269  30FD               	movlw	253
  9937  026A  0620               	xorwf	main@buff^(0+256),w
  9938  026B  1D03               	btfss	3,2
  9939  026C  2A6E               	goto	u9391
  9940  026D  2A6F               	goto	u9390
  9941  026E                     u9391:
  9942  026E  2AAB               	goto	l7718
  9943  026F                     u9390:
  9944  026F                     l7702:
  9945                           
  9946                           ;main.c: 1202: if(c == (uint8_t)0xFD){
  9947  026F  30FD               	movlw	253
  9948  0270  063B               	xorwf	main@c^(0+256),w
  9949  0271  1D03               	btfss	3,2
  9950  0272  2A74               	goto	u9401
  9951  0273  2A75               	goto	u9400
  9952  0274                     u9401:
  9953  0274  2A84               	goto	l7708
  9954  0275                     u9400:
  9955  0275                     l7704:
  9956                           
  9957                           ;main.c: 1203: memset(buff, 0, sizeof buff);
  9958  0275  3000               	movlw	0
  9959  0276  0020               	movlb	0	; select bank0
  9960  0277  00A7               	movwf	memset@c
  9961  0278  00A8               	movwf	memset@c+1
  9962  0279  3014               	movlw	20
  9963  027A  00A9               	movwf	memset@n
  9964  027B  3000               	movlw	0
  9965  027C  00AA               	movwf	memset@n+1
  9966  027D  3020               	movlw	(low (main@buff| (0+256)))& (0+255)
  9967  027E  3191  211F  3180   	fcall	_memset
  9968  0281                     l7706:
  9969                           
  9970                           ;main.c: 1204: n=0;
  9971  0281  0022               	movlb	2	; select bank2
  9972  0282  01BE               	clrf	main@n^(0+256)
  9973  0283  01BF               	clrf	(main@n+1)^(0+256)
  9974  0284                     l7708:
  9975                           
  9976                           ;main.c: 1205: };main.c: 1206: buff[n] = c;
  9977  0284  083B               	movf	main@c^(0+256),w
  9978  0285  0020               	movlb	0	; select bank0
  9979  0286  00D9               	movwf	??_main
  9980  0287  0022               	movlb	2	; select bank2
  9981  0288  083E               	movf	main@n^(0+256),w
  9982  0289  3E20               	addlw	(low (main@buff| (0+256)))& (0+255)
  9983  028A  0086               	movwf	6
  9984  028B  3001               	movlw	1	; select bank2/3
  9985  028C  0087               	movwf	7
  9986  028D  0020               	movlb	0	; select bank0
  9987  028E  0859               	movf	??_main,w
  9988  028F  0081               	movwf	1
  9989  0290                     l7710:
  9990                           
  9991                           ;main.c: 1207: n++;
  9992  0290  3001               	movlw	1
  9993  0291  0022               	movlb	2	; select bank2
  9994  0292  07BE               	addwf	main@n^(0+256),f
  9995  0293  3000               	movlw	0
  9996  0294  3DBF               	addwfc	(main@n+1)^(0+256),f
  9997  0295                     l7712:
  9998                           
  9999                           ;main.c: 1208: if(n == 20){
 10000  0295  3014               	movlw	20
 10001  0296  063E               	xorwf	main@n^(0+256),w
 10002  0297  043F               	iorwf	(main@n+1)^(0+256),w
 10003  0298  1D03               	btfss	3,2
 10004  0299  2A9B               	goto	u9411
 10005  029A  2A9C               	goto	u9410
 10006  029B                     u9411:
 10007  029B  2AAB               	goto	l7718
 10008  029C                     u9410:
 10009  029C                     l7714:
 10010                           
 10011                           ;main.c: 1209: memset(buff, 0, sizeof buff);
 10012  029C  3000               	movlw	0
 10013  029D  0020               	movlb	0	; select bank0
 10014  029E  00A7               	movwf	memset@c
 10015  029F  00A8               	movwf	memset@c+1
 10016  02A0  3014               	movlw	20
 10017  02A1  00A9               	movwf	memset@n
 10018  02A2  3000               	movlw	0
 10019  02A3  00AA               	movwf	memset@n+1
 10020  02A4  3020               	movlw	(low (main@buff| (0+256)))& (0+255)
 10021  02A5  3191  211F  3180   	fcall	_memset
 10022  02A8                     l7716:
 10023                           
 10024                           ;main.c: 1210: n=0;
 10025  02A8  0022               	movlb	2	; select bank2
 10026  02A9  01BE               	clrf	main@n^(0+256)
 10027  02AA  01BF               	clrf	(main@n+1)^(0+256)
 10028  02AB                     l7718:
 10029                           
 10030                           ;main.c: 1211: };main.c: 1212: };main.c: 1213: if(c == (uint8_t)0xFE){
 10031  02AB  30FE               	movlw	254
 10032  02AC  063B               	xorwf	main@c^(0+256),w
 10033  02AD  1D03               	btfss	3,2
 10034  02AE  2AB0               	goto	u9421
 10035  02AF  2AB1               	goto	u9420
 10036  02B0                     u9421:
 10037  02B0  2AB2               	goto	l7722
 10038  02B1                     u9420:
 10039  02B1  2ABA               	goto	l7724
 10040  02B2                     l1556:
 10041  02B2                     l7722:
 10042  02B2  319E  26D3  3180   	fcall	_EUSART_is_rx_ready
 10043  02B5  3A00               	xorlw	0
 10044  02B6  1D03               	skipz
 10045  02B7  2AB9               	goto	u9431
 10046  02B8  2ABA               	goto	u9430
 10047  02B9                     u9431:
 10048  02B9  2A5B               	goto	l7696
 10049  02BA                     u9430:
 10050  02BA                     l7724:
 10051                           
 10052                           ;main.c: 1215: };main.c: 1216: };main.c: 1217: if(buff[n-1] == (uint8_t)0xFE){
 10053  02BA  0022               	movlb	2	; select bank2
 10054  02BB  083E               	movf	main@n^(0+256),w
 10055  02BC  3EFF               	addlw	255
 10056  02BD  3E20               	addlw	(low (main@buff| (0+256)))& (0+255)
 10057  02BE  0086               	movwf	6
 10058  02BF  3001               	movlw	1	; select bank2/3
 10059  02C0  0087               	movwf	7
 10060  02C1  30FE               	movlw	254
 10061  02C2  0601               	xorwf	1,w
 10062  02C3  1D03               	btfss	3,2
 10063  02C4  2AC6               	goto	u9441
 10064  02C5  2AC7               	goto	u9440
 10065  02C6                     u9441:
 10066  02C6  2B31               	goto	l7746
 10067  02C7                     u9440:
 10068  02C7                     l7726:
 10069                           
 10070                           ;main.c: 1218: for (i = 0; i < (sizeof(commands) / sizeof(struct command_d)); i++){
 10071  02C7  01BC               	clrf	main@i_2535^(0+256)
 10072  02C8  01BD               	clrf	(main@i_2535+1)^(0+256)
 10073  02C9                     l7732:
 10074                           
 10075                           ;main.c: 1219: if (buff[1] == commands[i].cmd_name){
 10076  02C9  083D               	movf	(main@i_2535+1)^(0+256),w
 10077  02CA  0020               	movlb	0	; select bank0
 10078  02CB  00A8               	movwf	___wmul@multiplier+1
 10079  02CC  0022               	movlb	2	; select bank2
 10080  02CD  083C               	movf	main@i_2535^(0+256),w
 10081  02CE  0020               	movlb	0	; select bank0
 10082  02CF  00A7               	movwf	___wmul@multiplier
 10083  02D0  3003               	movlw	3
 10084  02D1  00A9               	movwf	___wmul@multiplicand
 10085  02D2  3000               	movlw	0
 10086  02D3  00AA               	movwf	___wmul@multiplicand+1
 10087  02D4  3190  20FF  3180   	fcall	___wmul
 10088  02D7  0020               	movlb	0	; select bank0
 10089  02D8  0828               	movf	?___wmul+1,w
 10090  02D9  0085               	movwf	5
 10091  02DA  0827               	movf	?___wmul,w
 10092  02DB  0084               	movwf	4
 10093  02DC  3002               	movlw	low ((_commands+2)| (0+32768))
 10094  02DD  0784               	addwf	4,f
 10095  02DE  3098               	movlw	high ((_commands+2)| (0+32768))
 10096  02DF  3D85               	addwfc	5,f
 10097  02E0  0800               	movf	0,w	;code access
 10098  02E1  0022               	movlb	2	; select bank2
 10099  02E2  0621               	xorwf	(main@buff^(0+256)+1),w
 10100  02E3  1D03               	skipz
 10101  02E4  2AE6               	goto	u9451
 10102  02E5  2AE7               	goto	u9450
 10103  02E6                     u9451:
 10104  02E6  2B15               	goto	l7738
 10105  02E7                     u9450:
 10106  02E7                     l7734:
 10107                           
 10108                           ;main.c: 1220: commands[i].cmd_fnct(n, buff);
 10109  02E7  083D               	movf	(main@i_2535+1)^(0+256),w
 10110  02E8  0020               	movlb	0	; select bank0
 10111  02E9  00A8               	movwf	___wmul@multiplier+1
 10112  02EA  0022               	movlb	2	; select bank2
 10113  02EB  083C               	movf	main@i_2535^(0+256),w
 10114  02EC  0020               	movlb	0	; select bank0
 10115  02ED  00A7               	movwf	___wmul@multiplier
 10116  02EE  3003               	movlw	3
 10117  02EF  00A9               	movwf	___wmul@multiplicand
 10118  02F0  3000               	movlw	0
 10119  02F1  00AA               	movwf	___wmul@multiplicand+1
 10120  02F2  3190  20FF  3180   	fcall	___wmul
 10121  02F5  0020               	movlb	0	; select bank0
 10122  02F6  0828               	movf	?___wmul+1,w
 10123  02F7  0085               	movwf	5
 10124  02F8  0827               	movf	?___wmul,w
 10125  02F9  0084               	movwf	4
 10126  02FA  3000               	movlw	low (_commands| (0+32768))
 10127  02FB  0784               	addwf	4,f
 10128  02FC  3098               	movlw	high (_commands| (0+32768))
 10129  02FD  3D85               	addwfc	5,f
 10130  02FE  3F00               	moviw [0]fsr0
 10131  02FF  0022               	movlb	2	; select bank2
 10132  0300  00B4               	movwf	_main$3499^(0+256)
 10133  0301  3F01               	moviw [1]fsr0
 10134  0302  00B5               	movwf	(_main$3499+1)^(0+256)
 10135  0303                     l7736:
 10136                           
 10137                           ;main.c: 1220: commands[i].cmd_fnct(n, buff);
 10138  0303  083F               	movf	(main@n+1)^(0+256),w
 10139  0304  0020               	movlb	0	; select bank0
 10140  0305  00B7               	movwf	cmd_tri@num+1
 10141  0306  0022               	movlb	2	; select bank2
 10142  0307  083E               	movf	main@n^(0+256),w
 10143  0308  0020               	movlb	0	; select bank0
 10144  0309  00B6               	movwf	cmd_tri@num
 10145  030A  3020               	movlw	(low (main@buff| (0+256)))& (0+255)
 10146  030B  00D9               	movwf	??_main
 10147  030C  0859               	movf	??_main,w
 10148  030D  00B8               	movwf	cmd_tri@buffer
 10149  030E  0022               	movlb	2	; select bank2
 10150  030F  0835               	movf	(_main$3499+1)^(0+256),w
 10151  0310  008A               	movwf	10
 10152  0311  0834               	movf	_main$3499^(0+256),w
 10153  0312  000A               	callw
 10154  0313  3180               	pagesel	$
 10155                           
 10156                           ;main.c: 1221: break;
 10157  0314  2B22               	goto	l7740
 10158  0315                     l7738:
 10159  0315  3001               	movlw	1
 10160  0316  07BC               	addwf	main@i_2535^(0+256),f
 10161  0317  3000               	movlw	0
 10162  0318  3DBD               	addwfc	(main@i_2535+1)^(0+256),f
 10163  0319  3000               	movlw	0
 10164  031A  023D               	subwf	(main@i_2535+1)^(0+256),w
 10165  031B  300D               	movlw	13
 10166  031C  1903               	skipnz
 10167  031D  023C               	subwf	main@i_2535^(0+256),w
 10168  031E  1C03               	skipc
 10169  031F  2B21               	goto	u9461
 10170  0320  2B22               	goto	u9460
 10171  0321                     u9461:
 10172  0321  2AC9               	goto	l7732
 10173  0322                     u9460:
 10174  0322                     l7740:
 10175                           
 10176                           ;main.c: 1222: };main.c: 1223: };main.c: 1224: memset(buff, 0, sizeof buff);
 10177  0322  3000               	movlw	0
 10178  0323  0020               	movlb	0	; select bank0
 10179  0324  00A7               	movwf	memset@c
 10180  0325  00A8               	movwf	memset@c+1
 10181  0326  3014               	movlw	20
 10182  0327  00A9               	movwf	memset@n
 10183  0328  3000               	movlw	0
 10184  0329  00AA               	movwf	memset@n+1
 10185  032A  3020               	movlw	(low (main@buff| (0+256)))& (0+255)
 10186  032B  3191  211F  3180   	fcall	_memset
 10187  032E                     l7742:
 10188  032E                     l7744:
 10189                           
 10190                           ;main.c: 1226: n=0;
 10191  032E  0022               	movlb	2	; select bank2
 10192  032F  01BE               	clrf	main@n^(0+256)
 10193  0330  01BF               	clrf	(main@n+1)^(0+256)
 10194  0331                     l7746:
 10195                           
 10196                           ;main.c: 1227: };main.c: 1229: if(modeFlag == 0){
 10197  0331  0020               	movlb	0	; select bank0
 10198  0332  085D               	movf	_modeFlag,w
 10199  0333  045E               	iorwf	_modeFlag+1,w
 10200  0334  1D03               	btfss	3,2
 10201  0335  2B37               	goto	u9471
 10202  0336  2B38               	goto	u9470
 10203  0337                     u9471:
 10204  0337  2B3C               	goto	l7750
 10205  0338                     u9470:
 10206  0338                     l7748:
 10207                           
 10208                           ;main.c: 1230: checkFlags();
 10209  0338  3187  274A  3180   	fcall	_checkFlags
 10210                           
 10211                           ;main.c: 1231: } else if(modeFlag == 1){
 10212  033B  2AB2               	goto	l7722
 10213  033C                     l7750:
 10214  033C  035D               	decf	_modeFlag,w
 10215  033D  045E               	iorwf	_modeFlag+1,w
 10216  033E  1D03               	btfss	3,2
 10217  033F  2B41               	goto	u9481
 10218  0340  2B42               	goto	u9480
 10219  0341                     u9481:
 10220  0341  2B46               	goto	l7754
 10221  0342                     u9480:
 10222  0342                     l7752:
 10223                           
 10224                           ;main.c: 1232: editClock();
 10225  0342  3196  26A5  3180   	fcall	_editClock
 10226                           
 10227                           ;main.c: 1233: } else if(modeFlag == 2){
 10228  0345  2AB2               	goto	l7722
 10229  0346                     l7754:
 10230  0346  3002               	movlw	2
 10231  0347  065D               	xorwf	_modeFlag,w
 10232  0348  045E               	iorwf	_modeFlag+1,w
 10233  0349  1D03               	btfss	3,2
 10234  034A  2B4C               	goto	u9491
 10235  034B  2B4D               	goto	u9490
 10236  034C                     u9491:
 10237  034C  2B51               	goto	l7758
 10238  034D                     u9490:
 10239  034D                     l7756:
 10240                           
 10241                           ;main.c: 1234: editTemp();
 10242  034D  3193  23AD  3180   	fcall	_editTemp
 10243                           
 10244                           ;main.c: 1235: } else if(modeFlag == 3){
 10245  0350  2AB2               	goto	l7722
 10246  0351                     l7758:
 10247  0351  3003               	movlw	3
 10248  0352  065D               	xorwf	_modeFlag,w
 10249  0353  045E               	iorwf	_modeFlag+1,w
 10250  0354  1D03               	btfss	3,2
 10251  0355  2B57               	goto	u9501
 10252  0356  2B58               	goto	u9500
 10253  0357                     u9501:
 10254  0357  2B5C               	goto	l7762
 10255  0358                     u9500:
 10256  0358                     l7760:
 10257                           
 10258                           ;main.c: 1236: editLum();
 10259  0358  3193  2378  3180   	fcall	_editLum
 10260                           
 10261                           ;main.c: 1237: } else if(modeFlag == 4){
 10262  035B  2AB2               	goto	l7722
 10263  035C                     l7762:
 10264  035C  3004               	movlw	4
 10265  035D  065D               	xorwf	_modeFlag,w
 10266  035E  045E               	iorwf	_modeFlag+1,w
 10267  035F  1D03               	btfss	3,2
 10268  0360  2B62               	goto	u9511
 10269  0361  2B63               	goto	u9510
 10270  0362                     u9511:
 10271  0362  2B67               	goto	l7766
 10272  0363                     u9510:
 10273  0363                     l7764:
 10274                           
 10275                           ;main.c: 1238: toggleAlarms();
 10276  0363  3192  22E0  3180   	fcall	_toggleAlarms
 10277                           
 10278                           ;main.c: 1239: } else if(modeFlag > 4){
 10279  0366  2AB2               	goto	l7722
 10280  0367                     l7766:
 10281  0367  085E               	movf	_modeFlag+1,w
 10282  0368  3A80               	xorlw	128
 10283  0369  00D9               	movwf	??_main
 10284  036A  3080               	movlw	128
 10285  036B  0259               	subwf	??_main,w
 10286  036C  1D03               	skipz
 10287  036D  2B70               	goto	u9525
 10288  036E  3005               	movlw	5
 10289  036F  025D               	subwf	_modeFlag,w
 10290  0370                     u9525:
 10291  0370  1C03               	skipc
 10292  0371  2B73               	goto	u9521
 10293  0372  2B74               	goto	u9520
 10294  0373                     u9521:
 10295  0373  2AB2               	goto	l1556
 10296  0374                     u9520:
 10297  0374                     l7768:
 10298                           
 10299                           ;main.c: 1240: modeFlag = 0;
 10300  0374  0020               	movlb	0	; select bank0
 10301  0375  01DD               	clrf	_modeFlag
 10302  0376  01DE               	clrf	_modeFlag+1
 10303  0377  2AB2               	goto	l7722
 10304  0378  3180  2852         	ljmp	start
 10305  037A                     __end_of_main:
 10306                           
 10307                           	psect	text1
 10308  12E0                     __ptext1:	
 10309 ;; *************** function _toggleAlarms *****************
 10310 ;; Defined at:
 10311 ;;		line 803 in file "main.c"
 10312 ;; Parameters:    Size  Location     Type
 10313 ;;		None
 10314 ;; Auto vars:     Size  Location     Type
 10315 ;;		None
 10316 ;; Return value:  Size  Location     Type
 10317 ;;                  1    wreg      void 
 10318 ;; Registers used:
 10319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10320 ;; Tracked objects:
 10321 ;;		On entry : 0/0
 10322 ;;		On exit  : 0/0
 10323 ;;		Unchanged: 0/0
 10324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;Total ram usage:        1 bytes
 10330 ;; Hardware stack levels used:    1
 10331 ;; Hardware stack levels required when called:   10
 10332 ;; This function calls:
 10333 ;;		_checkFlags
 10334 ;;		_update_menuLCD
 10335 ;; This function is called by:
 10336 ;;		_main
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           
 10341                           ;psect for function _toggleAlarms
 10342  12E0                     _toggleAlarms:
 10343  12E0                     l1443:	
 10344                           ;incstack = 0
 10345                           ; Regs used in _toggleAlarms: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10346                           ;main.c: 805: while(1){
 10347                           
 10348                           
 10349                           ;main.c: 806: if(PORTCbits.RC5 == 0){
 10350  12E0  0020               	movlb	0	; select bank0
 10351  12E1  1A8E               	btfsc	14,5	;volatile
 10352  12E2  2AE4               	goto	u8801
 10353  12E3  2AE5               	goto	u8800
 10354  12E4                     u8801:
 10355  12E4  2B00               	goto	l7334
 10356  12E5                     u8800:
 10357  12E5                     l7326:
 10358                           
 10359                           ;main.c: 807: if(ALAF == 'A'){
 10360  12E5  3041               	movlw	65
 10361  12E6  067C               	xorwf	_ALAF,w
 10362  12E7  1D03               	btfss	3,2
 10363  12E8  2AEA               	goto	u8811
 10364  12E9  2AEB               	goto	u8810
 10365  12EA                     u8811:
 10366  12EA  2AF0               	goto	l7330
 10367  12EB                     u8810:
 10368  12EB                     l7328:
 10369                           
 10370                           ;main.c: 808: ALAF = 'a';
 10371  12EB  3061               	movlw	97
 10372  12EC  00D8               	movwf	??_toggleAlarms
 10373  12ED  0858               	movf	??_toggleAlarms,w
 10374  12EE  00FC               	movwf	_ALAF
 10375                           
 10376                           ;main.c: 809: } else {
 10377  12EF  2AF4               	goto	l1446
 10378  12F0                     l7330:
 10379                           
 10380                           ;main.c: 810: ALAF = 'A';
 10381  12F0  3041               	movlw	65
 10382  12F1  00D8               	movwf	??_toggleAlarms
 10383  12F2  0858               	movf	??_toggleAlarms,w
 10384  12F3  00FC               	movwf	_ALAF
 10385  12F4                     l1446:
 10386                           
 10387                           ;main.c: 811: };main.c: 812: _delay((unsigned long)((100)*(1000000/4000.0)));
 10388  12F4  3021               	movlw	33
 10389  12F5  0020               	movlb	0	; select bank0
 10390  12F6  00D8               	movwf	??_toggleAlarms
 10391  12F7  3076               	movlw	118
 10392  12F8                     u9537:
 10393  12F8  0B89               	decfsz	9,f
 10394  12F9  2AF8               	goto	u9537
 10395  12FA  0BD8               	decfsz	??_toggleAlarms,f
 10396  12FB  2AF8               	goto	u9537
 10397  12FC  0000               	nop
 10398  12FD                     l7332:
 10399                           
 10400                           ;main.c: 813: update_menuLCD();
 10401  12FD  3183  237A  3192   	fcall	_update_menuLCD
 10402  1300                     l7334:
 10403                           
 10404                           ;main.c: 814: };main.c: 815: checkFlags();
 10405  1300  3187  274A  3192   	fcall	_checkFlags
 10406  1303                     l7336:
 10407                           
 10408                           ;main.c: 816: if(modeFlag != 4){
 10409  1303  3004               	movlw	4
 10410  1304  0020               	movlb	0	; select bank0
 10411  1305  065D               	xorwf	_modeFlag,w
 10412  1306  045E               	iorwf	_modeFlag+1,w
 10413  1307  1903               	btfsc	3,2
 10414  1308  2B0A               	goto	u8821
 10415  1309  2B0B               	goto	u8820
 10416  130A                     u8821:
 10417  130A  2AE0               	goto	l1443
 10418  130B                     u8820:
 10419  130B                     l7338:
 10420                           
 10421                           ;main.c: 817: modeFlag = 0;
 10422  130B  01DD               	clrf	_modeFlag
 10423  130C  01DE               	clrf	_modeFlag+1
 10424  130D                     l1450:	
 10425                           ;main.c: 818: break;
 10426                           
 10427  130D  0008               	return
 10428  130E                     __end_of_toggleAlarms:
 10429                           
 10430                           	psect	text2
 10431  111F                     __ptext2:	
 10432 ;; *************** function _memset *****************
 10433 ;; Defined at:
 10434 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;  p1              1    wreg     PTR void 
 10437 ;;		 -> main@buff(20), 
 10438 ;;  c               2    7[BANK0 ] int 
 10439 ;;  n               2    9[BANK0 ] unsigned int 
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;  p1              1   13[BANK0 ] PTR void 
 10442 ;;		 -> main@buff(20), 
 10443 ;;  p               1   12[BANK0 ] PTR unsigned char 
 10444 ;;		 -> main@buff(20), 
 10445 ;; Return value:  Size  Location     Type
 10446 ;;                  1    wreg      PTR void 
 10447 ;; Registers used:
 10448 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10449 ;; Tracked objects:
 10450 ;;		On entry : 0/0
 10451 ;;		On exit  : 0/0
 10452 ;;		Unchanged: 0/0
 10453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10454 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;Total ram usage:        7 bytes
 10459 ;; Hardware stack levels used:    1
 10460 ;; Hardware stack levels required when called:    4
 10461 ;; This function calls:
 10462 ;;		Nothing
 10463 ;; This function is called by:
 10464 ;;		_main
 10465 ;; This function uses a non-reentrant model
 10466 ;;
 10467                           
 10468                           
 10469                           ;psect for function _memset
 10470  111F                     _memset:
 10471                           
 10472                           ;incstack = 0
 10473                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10474                           ;memset@p1 stored from wreg
 10475  111F  0020               	movlb	0	; select bank0
 10476  1120  00AD               	movwf	memset@p1
 10477  1121                     l7586:
 10478  1121  082D               	movf	memset@p1,w
 10479  1122  00AB               	movwf	??_memset
 10480  1123  082B               	movf	??_memset,w
 10481  1124  00AC               	movwf	memset@p
 10482  1125  2932               	goto	l7592
 10483  1126                     l7588:
 10484  1126  0827               	movf	memset@c,w
 10485  1127  00AB               	movwf	??_memset
 10486  1128  082C               	movf	memset@p,w
 10487  1129  0086               	movwf	6
 10488  112A  3001               	movlw	1	; select bank2/3
 10489  112B  0087               	movwf	7
 10490  112C  082B               	movf	??_memset,w
 10491  112D  0081               	movwf	1
 10492  112E                     l7590:
 10493  112E  3001               	movlw	1
 10494  112F  00AB               	movwf	??_memset
 10495  1130  082B               	movf	??_memset,w
 10496  1131  07AC               	addwf	memset@p,f
 10497  1132                     l7592:
 10498  1132  3001               	movlw	1
 10499  1133  02A9               	subwf	memset@n,f
 10500  1134  3000               	movlw	0
 10501  1135  3BAA               	subwfb	memset@n+1,f
 10502  1136  0A29               	incf	memset@n,w
 10503  1137  1D03               	skipz
 10504  1138  293D               	goto	u9311
 10505  1139  0A2A               	incf	memset@n+1,w
 10506  113A  1D03               	btfss	3,2
 10507  113B  293D               	goto	u9311
 10508  113C  293E               	goto	u9310
 10509  113D                     u9311:
 10510  113D  2926               	goto	l7588
 10511  113E                     u9310:
 10512  113E                     l2244:
 10513  113E  0008               	return
 10514  113F                     __end_of_memset:
 10515                           
 10516                           	psect	text3
 10517  1F5A                     __ptext3:	
 10518 ;; *************** function _i2c1_driver_open *****************
 10519 ;; Defined at:
 10520 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
 10521 ;; Parameters:    Size  Location     Type
 10522 ;;		None
 10523 ;; Auto vars:     Size  Location     Type
 10524 ;;		None
 10525 ;; Return value:  Size  Location     Type
 10526 ;;		None               void
 10527 ;; Registers used:
 10528 ;;		wreg, status,2
 10529 ;; Tracked objects:
 10530 ;;		On entry : 0/0
 10531 ;;		On exit  : 0/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;Total ram usage:        0 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:    4
 10541 ;; This function calls:
 10542 ;;		Nothing
 10543 ;; This function is called by:
 10544 ;;		_main
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           
 10548                           
 10549                           ;psect for function _i2c1_driver_open
 10550  1F5A                     _i2c1_driver_open:
 10551  1F5A                     l7128:	
 10552                           ;incstack = 0
 10553                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
 10554                           
 10555                           
 10556                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
 10557  1F5A  0023               	movlb	3	; select bank3
 10558  1F5B  1A90               	btfsc	16,5	;volatile
 10559  1F5C  2F5E               	goto	u8351
 10560  1F5D  2F5F               	goto	u8350
 10561  1F5E                     u8351:
 10562  1F5E  2F65               	goto	l253
 10563  1F5F                     u8350:
 10564  1F5F                     l7130:
 10565                           
 10566                           ;i2c1_driver.c: 86: {;i2c1_driver.c: 87: SSP1STAT = 0x00;
 10567  1F5F  018F               	clrf	15	;volatile
 10568  1F60                     l7132:
 10569                           
 10570                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
 10571  1F60  3028               	movlw	40
 10572  1F61  0090               	movwf	16	;volatile
 10573  1F62                     l7134:
 10574                           
 10575                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
 10576  1F62  0191               	clrf	17	;volatile
 10577                           
 10578                           ;i2c1_driver.c: 90: SSP1ADD = 0x3;
 10579  1F63  3003               	movlw	3
 10580  1F64  008D               	movwf	13	;volatile
 10581  1F65                     l253:
 10582  1F65  0008               	return
 10583  1F66                     __end_of_i2c1_driver_open:
 10584                           
 10585                           	psect	text4
 10586  1EEA                     __ptext4:	
 10587 ;; *************** function _getch *****************
 10588 ;; Defined at:
 10589 ;;		line 171 in file "mcc_generated_files/eusart.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;		None
 10592 ;; Auto vars:     Size  Location     Type
 10593 ;;		None
 10594 ;; Return value:  Size  Location     Type
 10595 ;;                  1    wreg      unsigned char 
 10596 ;; Registers used:
 10597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10598 ;; Tracked objects:
 10599 ;;		On entry : 0/0
 10600 ;;		On exit  : 0/0
 10601 ;;		Unchanged: 0/0
 10602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;Total ram usage:        0 bytes
 10608 ;; Hardware stack levels used:    1
 10609 ;; Hardware stack levels required when called:    5
 10610 ;; This function calls:
 10611 ;;		_EUSART_Read
 10612 ;; This function is called by:
 10613 ;;		_main
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           
 10618                           ;psect for function _getch
 10619  1EEA                     _getch:
 10620  1EEA                     l7144:	
 10621                           ;incstack = 0
 10622                           ; Regs used in _getch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10623                           
 10624                           
 10625                           ;eusart.c: 173: return EUSART_Read();
 10626  1EEA  3192  2237  319E   	fcall	_EUSART_Read
 10627  1EED                     l839:
 10628  1EED  0008               	return
 10629  1EEE                     __end_of_getch:
 10630                           
 10631                           	psect	text5
 10632  1237                     __ptext5:	
 10633 ;; *************** function _EUSART_Read *****************
 10634 ;; Defined at:
 10635 ;;		line 128 in file "mcc_generated_files/eusart.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;		None
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;  readValue       1    8[BANK0 ] unsigned char 
 10640 ;; Return value:  Size  Location     Type
 10641 ;;                  1    wreg      unsigned char 
 10642 ;; Registers used:
 10643 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;Total ram usage:        2 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    4
 10656 ;; This function calls:
 10657 ;;		Nothing
 10658 ;; This function is called by:
 10659 ;;		_getch
 10660 ;; This function uses a non-reentrant model
 10661 ;;
 10662                           
 10663                           
 10664                           ;psect for function _EUSART_Read
 10665  1237                     _EUSART_Read:
 10666  1237                     l7004:	
 10667                           ;incstack = 0
 10668                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 10669                           
 10670  1237                     l7006:	
 10671                           ;eusart.c: 132: while(0 == eusartRxCount)
 10672                           
 10673  1237  0021               	movlb	1	; select bank1
 10674  1238  0839               	movf	_eusartRxCount^(0+128),w	;volatile
 10675  1239  1903               	btfsc	3,2
 10676  123A  2A3C               	goto	u8171
 10677  123B  2A3D               	goto	u8170
 10678  123C                     u8171:
 10679  123C  2A37               	goto	l7006
 10680  123D                     u8170:
 10681  123D                     l7008:
 10682                           
 10683                           ;eusart.c: 134: };eusart.c: 136: readValue = eusartRxBuffer[eusartRxTail++];
 10684  123D  083A               	movf	_eusartRxTail^(0+128),w
 10685  123E  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 10686  123F  0086               	movwf	6
 10687  1240  3002               	movlw	2	; select bank4/5
 10688  1241  0087               	movwf	7
 10689  1242  0801               	movf	1,w
 10690  1243  0020               	movlb	0	; select bank0
 10691  1244  00A7               	movwf	??_EUSART_Read
 10692  1245  0827               	movf	??_EUSART_Read,w
 10693  1246  00A8               	movwf	EUSART_Read@readValue
 10694  1247                     l7010:
 10695  1247  3001               	movlw	1
 10696  1248  00A7               	movwf	??_EUSART_Read
 10697  1249  0827               	movf	??_EUSART_Read,w
 10698  124A  0021               	movlb	1	; select bank1
 10699  124B  07BA               	addwf	_eusartRxTail^(0+128),f	;volatile
 10700  124C                     l7012:
 10701                           
 10702                           ;eusart.c: 137: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 10703  124C  3040               	movlw	64
 10704  124D  023A               	subwf	_eusartRxTail^(0+128),w	;volatile
 10705  124E  1C03               	skipc
 10706  124F  2A51               	goto	u8181
 10707  1250  2A52               	goto	u8180
 10708  1251                     u8181:
 10709  1251  2A53               	goto	l7016
 10710  1252                     u8180:
 10711  1252                     l7014:
 10712                           
 10713                           ;eusart.c: 138: {;eusart.c: 139: eusartRxTail = 0;
 10714  1252  01BA               	clrf	_eusartRxTail^(0+128)	;volatile
 10715  1253                     l7016:
 10716                           
 10717                           ;eusart.c: 140: };eusart.c: 141: PIE3bits.RCIE = 0;
 10718  1253  002E               	movlb	14	; select bank14
 10719  1254  1299               	bcf	25,5	;volatile
 10720  1255                     l7018:
 10721                           
 10722                           ;eusart.c: 142: eusartRxCount--;
 10723  1255  3001               	movlw	1
 10724  1256  0021               	movlb	1	; select bank1
 10725  1257  02B9               	subwf	_eusartRxCount^(0+128),f	;volatile
 10726  1258                     l7020:
 10727                           
 10728                           ;eusart.c: 143: PIE3bits.RCIE = 1;
 10729  1258  002E               	movlb	14	; select bank14
 10730  1259  1699               	bsf	25,5	;volatile
 10731  125A                     l7022:
 10732                           
 10733                           ;eusart.c: 145: return readValue;
 10734  125A  0020               	movlb	0	; select bank0
 10735  125B  0828               	movf	EUSART_Read@readValue,w
 10736  125C                     l827:
 10737  125C  0008               	return
 10738  125D                     __end_of_EUSART_Read:
 10739                           
 10740                           	psect	text6
 10741  13AD                     __ptext6:	
 10742 ;; *************** function _editTemp *****************
 10743 ;; Defined at:
 10744 ;;		line 759 in file "main.c"
 10745 ;; Parameters:    Size  Location     Type
 10746 ;;		None
 10747 ;; Auto vars:     Size  Location     Type
 10748 ;;		None
 10749 ;; Return value:  Size  Location     Type
 10750 ;;                  1    wreg      void 
 10751 ;; Registers used:
 10752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10753 ;; Tracked objects:
 10754 ;;		On entry : 0/0
 10755 ;;		On exit  : 0/0
 10756 ;;		Unchanged: 0/0
 10757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;Total ram usage:        1 bytes
 10763 ;; Hardware stack levels used:    1
 10764 ;; Hardware stack levels required when called:   10
 10765 ;; This function calls:
 10766 ;;		_checkFlags
 10767 ;;		_update_menuLCD
 10768 ;; This function is called by:
 10769 ;;		_main
 10770 ;; This function uses a non-reentrant model
 10771 ;;
 10772                           
 10773                           
 10774                           ;psect for function _editTemp
 10775  13AD                     _editTemp:
 10776  13AD                     l1421:	
 10777                           ;incstack = 0
 10778                           ; Regs used in _editTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10779                           ;main.c: 760: while(1){
 10780                           
 10781                           
 10782                           ;main.c: 761: if(PORTCbits.RC5 == 0){
 10783  13AD  0020               	movlb	0	; select bank0
 10784  13AE  1A8E               	btfsc	14,5	;volatile
 10785  13AF  2BB1               	goto	u8721
 10786  13B0  2BB2               	goto	u8720
 10787  13B1                     u8721:
 10788  13B1  2BD4               	goto	l7300
 10789  13B2                     u8720:
 10790  13B2                     l7286:
 10791                           
 10792                           ;main.c: 762: if(editingTempAlarm == 0){
 10793  13B2  0021               	movlb	1	; select bank1
 10794  13B3  0837               	movf	_editingTempAlarm^(0+128),w
 10795  13B4  1D03               	btfss	3,2
 10796  13B5  2BB7               	goto	u8731
 10797  13B6  2BB8               	goto	u8730
 10798  13B7                     u8731:
 10799  13B7  2BBB               	goto	l7290
 10800  13B8                     u8730:
 10801  13B8                     l7288:
 10802                           
 10803                           ;main.c: 763: editingTempAlarm = 1;
 10804  13B8  01B7               	clrf	_editingTempAlarm^(0+128)
 10805  13B9  0AB7               	incf	_editingTempAlarm^(0+128),f
 10806                           
 10807                           ;main.c: 764: } else {
 10808  13BA  2BC8               	goto	l7296
 10809  13BB                     l7290:
 10810                           
 10811                           ;main.c: 765: tempAlarm.alarmTemp++;
 10812  13BB  3001               	movlw	1
 10813  13BC  0020               	movlb	0	; select bank0
 10814  13BD  00D8               	movwf	??_editTemp
 10815  13BE  0858               	movf	??_editTemp,w
 10816  13BF  0021               	movlb	1	; select bank1
 10817  13C0  07A7               	addwf	_tempAlarm^(0+128),f
 10818  13C1                     l7292:
 10819                           
 10820                           ;main.c: 766: if(tempAlarm.alarmTemp > 50){
 10821  13C1  3033               	movlw	51
 10822  13C2  0227               	subwf	_tempAlarm^(0+128),w
 10823  13C3  1C03               	skipc
 10824  13C4  2BC6               	goto	u8741
 10825  13C5  2BC7               	goto	u8740
 10826  13C6                     u8741:
 10827  13C6  2BC8               	goto	l7296
 10828  13C7                     u8740:
 10829  13C7                     l7294:
 10830                           
 10831                           ;main.c: 767: tempAlarm.alarmTemp = 0;
 10832  13C7  01A7               	clrf	_tempAlarm^(0+128)
 10833  13C8                     l7296:
 10834                           
 10835                           ;main.c: 768: };main.c: 769: };main.c: 770: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10836  13C8  3021               	movlw	33
 10837  13C9  0020               	movlb	0	; select bank0
 10838  13CA  00D8               	movwf	??_editTemp
 10839  13CB  3076               	movlw	118
 10840  13CC                     u9547:
 10841  13CC  0B89               	decfsz	9,f
 10842  13CD  2BCC               	goto	u9547
 10843  13CE  0BD8               	decfsz	??_editTemp,f
 10844  13CF  2BCC               	goto	u9547
 10845  13D0  0000               	nop
 10846  13D1                     l7298:
 10847                           
 10848                           ;main.c: 771: update_menuLCD();
 10849  13D1  3183  237A  3193   	fcall	_update_menuLCD
 10850  13D4                     l7300:
 10851                           
 10852                           ;main.c: 772: };main.c: 773: checkFlags();
 10853  13D4  3187  274A  3193   	fcall	_checkFlags
 10854  13D7                     l7302:
 10855                           
 10856                           ;main.c: 774: if(modeFlag != 2){
 10857  13D7  3002               	movlw	2
 10858  13D8  0020               	movlb	0	; select bank0
 10859  13D9  065D               	xorwf	_modeFlag,w
 10860  13DA  045E               	iorwf	_modeFlag+1,w
 10861  13DB  1903               	btfsc	3,2
 10862  13DC  2BDE               	goto	u8751
 10863  13DD  2BDF               	goto	u8750
 10864  13DE                     u8751:
 10865  13DE  2BAD               	goto	l1421
 10866  13DF                     u8750:
 10867  13DF                     l7304:
 10868                           
 10869                           ;main.c: 775: editingTempAlarm = 0;
 10870  13DF  0021               	movlb	1	; select bank1
 10871  13E0  01B7               	clrf	_editingTempAlarm^(0+128)
 10872  13E1                     l1429:	
 10873                           ;main.c: 776: break;
 10874                           
 10875  13E1  0008               	return
 10876  13E2                     __end_of_editTemp:
 10877                           
 10878                           	psect	text7
 10879  1378                     __ptext7:	
 10880 ;; *************** function _editLum *****************
 10881 ;; Defined at:
 10882 ;;		line 781 in file "main.c"
 10883 ;; Parameters:    Size  Location     Type
 10884 ;;		None
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;		None
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  1    wreg      void 
 10889 ;; Registers used:
 10890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10891 ;; Tracked objects:
 10892 ;;		On entry : 0/0
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;Total ram usage:        1 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:   10
 10903 ;; This function calls:
 10904 ;;		_checkFlags
 10905 ;;		_update_menuLCD
 10906 ;; This function is called by:
 10907 ;;		_main
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           
 10912                           ;psect for function _editLum
 10913  1378                     _editLum:
 10914  1378                     l1432:	
 10915                           ;incstack = 0
 10916                           ; Regs used in _editLum: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10917                           ;main.c: 782: while(1){
 10918                           
 10919                           
 10920                           ;main.c: 783: if(PORTCbits.RC5 == 0){
 10921  1378  0020               	movlb	0	; select bank0
 10922  1379  1A8E               	btfsc	14,5	;volatile
 10923  137A  2B7C               	goto	u8761
 10924  137B  2B7D               	goto	u8760
 10925  137C                     u8761:
 10926  137C  2B9F               	goto	l7320
 10927  137D                     u8760:
 10928  137D                     l7306:
 10929                           
 10930                           ;main.c: 784: if(editingLumAlarm == 0){
 10931  137D  0021               	movlb	1	; select bank1
 10932  137E  0836               	movf	_editingLumAlarm^(0+128),w
 10933  137F  1D03               	btfss	3,2
 10934  1380  2B82               	goto	u8771
 10935  1381  2B83               	goto	u8770
 10936  1382                     u8771:
 10937  1382  2B86               	goto	l7310
 10938  1383                     u8770:
 10939  1383                     l7308:
 10940                           
 10941                           ;main.c: 785: editingLumAlarm = 1;
 10942  1383  01B6               	clrf	_editingLumAlarm^(0+128)
 10943  1384  0AB6               	incf	_editingLumAlarm^(0+128),f
 10944                           
 10945                           ;main.c: 786: } else {
 10946  1385  2B93               	goto	l7316
 10947  1386                     l7310:
 10948                           
 10949                           ;main.c: 787: lumAlarm.alarmLum++;
 10950  1386  3001               	movlw	1
 10951  1387  0020               	movlb	0	; select bank0
 10952  1388  00D8               	movwf	??_editLum
 10953  1389  0858               	movf	??_editLum,w
 10954  138A  0021               	movlb	1	; select bank1
 10955  138B  07A4               	addwf	_lumAlarm^(0+128),f
 10956  138C                     l7312:
 10957                           
 10958                           ;main.c: 788: if(lumAlarm.alarmLum > 7){
 10959  138C  3008               	movlw	8
 10960  138D  0224               	subwf	_lumAlarm^(0+128),w
 10961  138E  1C03               	skipc
 10962  138F  2B91               	goto	u8781
 10963  1390  2B92               	goto	u8780
 10964  1391                     u8781:
 10965  1391  2B93               	goto	l7316
 10966  1392                     u8780:
 10967  1392                     l7314:
 10968                           
 10969                           ;main.c: 789: lumAlarm.alarmLum = 0;
 10970  1392  01A4               	clrf	_lumAlarm^(0+128)
 10971  1393                     l7316:
 10972                           
 10973                           ;main.c: 790: };main.c: 791: };main.c: 792: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10974  1393  3021               	movlw	33
 10975  1394  0020               	movlb	0	; select bank0
 10976  1395  00D8               	movwf	??_editLum
 10977  1396  3076               	movlw	118
 10978  1397                     u9557:
 10979  1397  0B89               	decfsz	9,f
 10980  1398  2B97               	goto	u9557
 10981  1399  0BD8               	decfsz	??_editLum,f
 10982  139A  2B97               	goto	u9557
 10983  139B  0000               	nop
 10984  139C                     l7318:
 10985                           
 10986                           ;main.c: 793: update_menuLCD();
 10987  139C  3183  237A  3193   	fcall	_update_menuLCD
 10988  139F                     l7320:
 10989                           
 10990                           ;main.c: 794: };main.c: 795: checkFlags();
 10991  139F  3187  274A  3193   	fcall	_checkFlags
 10992  13A2                     l7322:
 10993                           
 10994                           ;main.c: 796: if(modeFlag != 3){
 10995  13A2  3003               	movlw	3
 10996  13A3  0020               	movlb	0	; select bank0
 10997  13A4  065D               	xorwf	_modeFlag,w
 10998  13A5  045E               	iorwf	_modeFlag+1,w
 10999  13A6  1903               	btfsc	3,2
 11000  13A7  2BA9               	goto	u8791
 11001  13A8  2BAA               	goto	u8790
 11002  13A9                     u8791:
 11003  13A9  2B78               	goto	l1432
 11004  13AA                     u8790:
 11005  13AA                     l7324:
 11006                           
 11007                           ;main.c: 797: editingLumAlarm = 0;
 11008  13AA  0021               	movlb	1	; select bank1
 11009  13AB  01B6               	clrf	_editingLumAlarm^(0+128)
 11010  13AC                     l1440:	
 11011                           ;main.c: 798: break;
 11012                           
 11013  13AC  0008               	return
 11014  13AD                     __end_of_editLum:
 11015                           
 11016                           	psect	text8
 11017  16A5                     __ptext8:	
 11018 ;; *************** function _editClock *****************
 11019 ;; Defined at:
 11020 ;;		line 721 in file "main.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;		None
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;		None
 11025 ;; Return value:  Size  Location     Type
 11026 ;;                  1    wreg      void 
 11027 ;; Registers used:
 11028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11029 ;; Tracked objects:
 11030 ;;		On entry : 0/0
 11031 ;;		On exit  : 0/0
 11032 ;;		Unchanged: 0/0
 11033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;Total ram usage:        1 bytes
 11039 ;; Hardware stack levels used:    1
 11040 ;; Hardware stack levels required when called:   10
 11041 ;; This function calls:
 11042 ;;		_checkFlags
 11043 ;;		_update_menuLCD
 11044 ;; This function is called by:
 11045 ;;		_main
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           
 11050                           ;psect for function _editClock
 11051  16A5                     _editClock:
 11052  16A5                     l1400:	
 11053                           ;incstack = 0
 11054                           ; Regs used in _editClock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11055                           ;main.c: 723: while(1){
 11056                           
 11057                           
 11058                           ;main.c: 724: if(PORTCbits.RC5 == 0){
 11059  16A5  0020               	movlb	0	; select bank0
 11060  16A6  1A8E               	btfsc	14,5	;volatile
 11061  16A7  2EA9               	goto	u8631
 11062  16A8  2EAA               	goto	u8630
 11063  16A9                     u8631:
 11064  16A9  2F05               	goto	l7280
 11065  16AA                     u8630:
 11066  16AA                     l7248:
 11067                           
 11068                           ;main.c: 725: if(editingClockAlarm == 0){
 11069  16AA  085F               	movf	_editingClockAlarm,w
 11070  16AB  0460               	iorwf	_editingClockAlarm+1,w
 11071  16AC  1D03               	btfss	3,2
 11072  16AD  2EAF               	goto	u8641
 11073  16AE  2EB0               	goto	u8640
 11074  16AF                     u8641:
 11075  16AF  2EB5               	goto	l7252
 11076  16B0                     u8640:
 11077  16B0                     l7250:
 11078                           
 11079                           ;main.c: 726: editingClockAlarm = 1;
 11080  16B0  3001               	movlw	1
 11081  16B1  00DF               	movwf	_editingClockAlarm
 11082  16B2  3000               	movlw	0
 11083  16B3  00E0               	movwf	_editingClockAlarm+1
 11084                           
 11085                           ;main.c: 728: } else if(editingClockAlarm == 1){
 11086  16B4  2EF9               	goto	l7276
 11087  16B5                     l7252:
 11088  16B5  035F               	decf	_editingClockAlarm,w
 11089  16B6  0460               	iorwf	_editingClockAlarm+1,w
 11090  16B7  1D03               	btfss	3,2
 11091  16B8  2EBA               	goto	u8651
 11092  16B9  2EBB               	goto	u8650
 11093  16BA                     u8651:
 11094  16BA  2ECB               	goto	l7260
 11095  16BB                     u8650:
 11096  16BB                     l7254:
 11097                           
 11098                           ;main.c: 729: if(clkAlarm.alarmVal.h >= 23){
 11099  16BB  3017               	movlw	23
 11100  16BC  0021               	movlb	1	; select bank1
 11101  16BD  0220               	subwf	_clkAlarm^(0+128),w
 11102  16BE  1C03               	skipc
 11103  16BF  2EC1               	goto	u8661
 11104  16C0  2EC2               	goto	u8660
 11105  16C1                     u8661:
 11106  16C1  2EC4               	goto	l7258
 11107  16C2                     u8660:
 11108  16C2                     l7256:
 11109                           
 11110                           ;main.c: 730: clkAlarm.alarmVal.h = 0;
 11111  16C2  01A0               	clrf	_clkAlarm^(0+128)
 11112                           
 11113                           ;main.c: 731: } else{
 11114  16C3  2EF9               	goto	l7276
 11115  16C4                     l7258:
 11116                           
 11117                           ;main.c: 732: clkAlarm.alarmVal.h++;
 11118  16C4  3001               	movlw	1
 11119  16C5  0020               	movlb	0	; select bank0
 11120  16C6  00D8               	movwf	??_editClock
 11121  16C7  0858               	movf	??_editClock,w
 11122  16C8  0021               	movlb	1	; select bank1
 11123  16C9  07A0               	addwf	_clkAlarm^(0+128),f
 11124  16CA  2EF9               	goto	l7276
 11125  16CB                     l7260:
 11126  16CB  3002               	movlw	2
 11127  16CC  065F               	xorwf	_editingClockAlarm,w
 11128  16CD  0460               	iorwf	_editingClockAlarm+1,w
 11129  16CE  1D03               	btfss	3,2
 11130  16CF  2ED1               	goto	u8671
 11131  16D0  2ED2               	goto	u8670
 11132  16D1                     u8671:
 11133  16D1  2EE2               	goto	l7268
 11134  16D2                     u8670:
 11135  16D2                     l7262:
 11136                           
 11137                           ;main.c: 735: if(clkAlarm.alarmVal.m == 59){
 11138  16D2  303B               	movlw	59
 11139  16D3  0021               	movlb	1	; select bank1
 11140  16D4  0621               	xorwf	(_clkAlarm^(0+128)+1),w
 11141  16D5  1D03               	btfss	3,2
 11142  16D6  2ED8               	goto	u8681
 11143  16D7  2ED9               	goto	u8680
 11144  16D8                     u8681:
 11145  16D8  2EDB               	goto	l7266
 11146  16D9                     u8680:
 11147  16D9                     l7264:
 11148                           
 11149                           ;main.c: 736: clkAlarm.alarmVal.m = 0;
 11150  16D9  01A1               	clrf	(_clkAlarm^(0+128)+1)
 11151                           
 11152                           ;main.c: 737: } else{
 11153  16DA  2EF9               	goto	l7276
 11154  16DB                     l7266:
 11155                           
 11156                           ;main.c: 738: clkAlarm.alarmVal.m++;
 11157  16DB  3001               	movlw	1
 11158  16DC  0020               	movlb	0	; select bank0
 11159  16DD  00D8               	movwf	??_editClock
 11160  16DE  0858               	movf	??_editClock,w
 11161  16DF  0021               	movlb	1	; select bank1
 11162  16E0  07A1               	addwf	(_clkAlarm^(0+128)+1),f
 11163  16E1  2EF9               	goto	l7276
 11164  16E2                     l7268:
 11165  16E2  3003               	movlw	3
 11166  16E3  065F               	xorwf	_editingClockAlarm,w
 11167  16E4  0460               	iorwf	_editingClockAlarm+1,w
 11168  16E5  1D03               	btfss	3,2
 11169  16E6  2EE8               	goto	u8691
 11170  16E7  2EE9               	goto	u8690
 11171  16E8                     u8691:
 11172  16E8  2EF9               	goto	l1407
 11173  16E9                     u8690:
 11174  16E9                     l7270:
 11175                           
 11176                           ;main.c: 741: if(clkAlarm.alarmVal.s == 59){
 11177  16E9  303B               	movlw	59
 11178  16EA  0021               	movlb	1	; select bank1
 11179  16EB  0622               	xorwf	(_clkAlarm^(0+128)+2),w
 11180  16EC  1D03               	btfss	3,2
 11181  16ED  2EEF               	goto	u8701
 11182  16EE  2EF0               	goto	u8700
 11183  16EF                     u8701:
 11184  16EF  2EF2               	goto	l7274
 11185  16F0                     u8700:
 11186  16F0                     l7272:
 11187                           
 11188                           ;main.c: 742: clkAlarm.alarmVal.s = 0;
 11189  16F0  01A2               	clrf	(_clkAlarm^(0+128)+2)
 11190                           
 11191                           ;main.c: 743: } else{
 11192  16F1  2EF9               	goto	l7276
 11193  16F2                     l7274:
 11194                           
 11195                           ;main.c: 744: clkAlarm.alarmVal.s++;
 11196  16F2  3001               	movlw	1
 11197  16F3  0020               	movlb	0	; select bank0
 11198  16F4  00D8               	movwf	??_editClock
 11199  16F5  0858               	movf	??_editClock,w
 11200  16F6  0021               	movlb	1	; select bank1
 11201  16F7  07A2               	addwf	(_clkAlarm^(0+128)+2),f
 11202  16F8  2EF9               	goto	l7276
 11203  16F9                     l1407:
 11204  16F9                     l7276:
 11205                           
 11206                           ;main.c: 745: };main.c: 746: };main.c: 747: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 11207  16F9  3021               	movlw	33
 11208  16FA  0020               	movlb	0	; select bank0
 11209  16FB  00D8               	movwf	??_editClock
 11210  16FC  3076               	movlw	118
 11211  16FD                     u9567:
 11212  16FD  0B89               	decfsz	9,f
 11213  16FE  2EFD               	goto	u9567
 11214  16FF  0BD8               	decfsz	??_editClock,f
 11215  1700  2EFD               	goto	u9567
 11216  1701  0000               	nop
 11217  1702                     l7278:
 11218                           
 11219                           ;main.c: 748: update_menuLCD();
 11220  1702  3183  237A  3196   	fcall	_update_menuLCD
 11221  1705                     l7280:
 11222                           
 11223                           ;main.c: 749: };main.c: 750: checkFlags();
 11224  1705  3187  274A  3196   	fcall	_checkFlags
 11225  1708                     l7282:
 11226                           
 11227                           ;main.c: 751: if(modeFlag != 1){
 11228  1708  0020               	movlb	0	; select bank0
 11229  1709  035D               	decf	_modeFlag,w
 11230  170A  045E               	iorwf	_modeFlag+1,w
 11231  170B  1903               	btfsc	3,2
 11232  170C  2F0E               	goto	u8711
 11233  170D  2F0F               	goto	u8710
 11234  170E                     u8711:
 11235  170E  2EA5               	goto	l1400
 11236  170F                     u8710:
 11237  170F                     l7284:
 11238                           
 11239                           ;main.c: 752: editingClockAlarm = 0;
 11240  170F  01DF               	clrf	_editingClockAlarm
 11241  1710  01E0               	clrf	_editingClockAlarm+1
 11242  1711                     l1418:	
 11243                           ;main.c: 753: break;
 11244                           
 11245  1711  0008               	return
 11246  1712                     __end_of_editClock:
 11247                           
 11248                           	psect	text9
 11249  074A                     __ptext9:	
 11250 ;; *************** function _checkFlags *****************
 11251 ;; Defined at:
 11252 ;;		line 670 in file "main.c"
 11253 ;; Parameters:    Size  Location     Type
 11254 ;;		None
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;  buff            7   49[BANK0 ] unsigned char [7]
 11257 ;; Return value:  Size  Location     Type
 11258 ;;                  1    wreg      void 
 11259 ;; Registers used:
 11260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;Total ram usage:        8 bytes
 11271 ;; Hardware stack levels used:    1
 11272 ;; Hardware stack levels required when called:    9
 11273 ;; This function calls:
 11274 ;;		_PWM6_LoadDutyValue
 11275 ;;		_PWM_Output_D4_Enable
 11276 ;;		_S1button
 11277 ;;		_TMR2_StartTimer
 11278 ;;		_monitoring_TEMP_LUM
 11279 ;;		_sendMessage
 11280 ;;		_update_menuLCD
 11281 ;;		_wirteEEPROMinit
 11282 ;; This function is called by:
 11283 ;;		_editClock
 11284 ;;		_editTemp
 11285 ;;		_editLum
 11286 ;;		_toggleAlarms
 11287 ;;		_main
 11288 ;; This function uses a non-reentrant model
 11289 ;;
 11290                           
 11291                           
 11292                           ;psect for function _checkFlags
 11293  074A                     _checkFlags:
 11294  074A                     l7040:	
 11295                           ;incstack = 0
 11296                           ; Regs used in _checkFlags: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11297                           
 11298                           
 11299                           ;main.c: 671: if(writeEEPROM_flag){
 11300  074A  0021               	movlb	1	; select bank1
 11301  074B  0831               	movf	_writeEEPROM_flag^(0+128),w
 11302  074C  1903               	btfsc	3,2
 11303  074D  2F4F               	goto	u8251
 11304  074E  2F50               	goto	u8250
 11305  074F                     u8251:
 11306  074F  2F55               	goto	l7046
 11307  0750                     u8250:
 11308  0750                     l7042:
 11309                           
 11310                           ;main.c: 672: wirteEEPROMinit();
 11311  0750  3188  2083  3187   	fcall	_wirteEEPROMinit
 11312  0753                     l7044:
 11313                           
 11314                           ;main.c: 673: writeEEPROM_flag = 0;
 11315  0753  0021               	movlb	1	; select bank1
 11316  0754  01B1               	clrf	_writeEEPROM_flag^(0+128)
 11317  0755                     l7046:
 11318                           
 11319                           ;main.c: 674: };main.c: 675: if(flagS1pushed){
 11320  0755  0834               	movf	_flagS1pushed^(0+128),w
 11321  0756  1903               	btfsc	3,2
 11322  0757  2F59               	goto	u8261
 11323  0758  2F5A               	goto	u8260
 11324  0759                     u8261:
 11325  0759  2F64               	goto	l7056
 11326  075A                     u8260:
 11327  075A                     l7048:
 11328                           
 11329                           ;main.c: 676: S1button();
 11330  075A  3195  258B  3187   	fcall	_S1button
 11331  075D                     l7050:
 11332                           
 11333                           ;main.c: 677: flagS1pushed=0;
 11334  075D  0021               	movlb	1	; select bank1
 11335  075E  01B4               	clrf	_flagS1pushed^(0+128)
 11336  075F                     l7052:
 11337                           
 11338                           ;main.c: 678: update_menuLCD();
 11339  075F  3183  237A  3187   	fcall	_update_menuLCD
 11340  0762                     l7054:
 11341                           
 11342                           ;main.c: 679: updateLCD=0;
 11343  0762  0021               	movlb	1	; select bank1
 11344  0763  01D5               	clrf	_updateLCD^(0+128)
 11345  0764                     l7056:
 11346                           
 11347                           ;main.c: 680: };main.c: 681: if(monitor_TEMP_LUM){
 11348  0764  0833               	movf	_monitor_TEMP_LUM^(0+128),w
 11349  0765  1903               	btfsc	3,2
 11350  0766  2F68               	goto	u8271
 11351  0767  2F69               	goto	u8270
 11352  0768                     u8271:
 11353  0768  2F6E               	goto	l7062
 11354  0769                     u8270:
 11355  0769                     l7058:
 11356                           
 11357                           ;main.c: 682: monitoring_TEMP_LUM();
 11358  0769  318E  267F  3187   	fcall	_monitoring_TEMP_LUM
 11359  076C                     l7060:
 11360                           
 11361                           ;main.c: 683: monitor_TEMP_LUM = 0;
 11362  076C  0021               	movlb	1	; select bank1
 11363  076D  01B3               	clrf	_monitor_TEMP_LUM^(0+128)
 11364  076E                     l7062:
 11365                           
 11366                           ;main.c: 684: };main.c: 685: if(updateLCD){
 11367  076E  0855               	movf	_updateLCD^(0+128),w
 11368  076F  1903               	btfsc	3,2
 11369  0770  2F72               	goto	u8281
 11370  0771  2F73               	goto	u8280
 11371  0772                     u8281:
 11372  0772  2F78               	goto	l7068
 11373  0773                     u8280:
 11374  0773                     l7064:
 11375                           
 11376                           ;main.c: 686: update_menuLCD();
 11377  0773  3183  237A  3187   	fcall	_update_menuLCD
 11378  0776                     l7066:
 11379                           
 11380                           ;main.c: 687: updateLCD=0;
 11381  0776  0021               	movlb	1	; select bank1
 11382  0777  01D5               	clrf	_updateLCD^(0+128)
 11383  0778                     l7068:
 11384                           
 11385                           ;main.c: 688: };main.c: 689: if(bufHalfFull && !sentMessageBufHalfFull){
 11386  0778  0830               	movf	_bufHalfFull^(0+128),w
 11387  0779  1903               	btfsc	3,2
 11388  077A  2F7C               	goto	u8291
 11389  077B  2F7D               	goto	u8290
 11390  077C                     u8291:
 11391  077C  2FAD               	goto	l7078
 11392  077D                     u8290:
 11393  077D                     l7070:
 11394  077D  082E               	movf	_sentMessageBufHalfFull^(0+128),w
 11395  077E  1D03               	btfss	3,2
 11396  077F  2F81               	goto	u8301
 11397  0780  2F82               	goto	u8300
 11398  0781                     u8301:
 11399  0781  2FAD               	goto	l7078
 11400  0782                     u8300:
 11401  0782                     l7072:
 11402                           
 11403                           ;main.c: 691: uint8_t buff[7];;main.c: 692: buff[0] = (uint8_t)0xFD;
 11404  0782  30FD               	movlw	253
 11405  0783  0020               	movlb	0	; select bank0
 11406  0784  00D0               	movwf	??_checkFlags
 11407  0785  0850               	movf	??_checkFlags,w
 11408  0786  00D1               	movwf	checkFlags@buff
 11409                           
 11410                           ;main.c: 693: buff[1] = (uint8_t)0XCD;
 11411  0787  30CD               	movlw	205
 11412  0788  00D0               	movwf	??_checkFlags
 11413  0789  0850               	movf	??_checkFlags,w
 11414  078A  00D2               	movwf	checkFlags@buff+1
 11415                           
 11416                           ;main.c: 694: buff[2] = NREG;
 11417  078B  087D               	movf	_NREG,w
 11418  078C  00D0               	movwf	??_checkFlags
 11419  078D  0850               	movf	??_checkFlags,w
 11420  078E  00D3               	movwf	checkFlags@buff+2
 11421                           
 11422                           ;main.c: 695: buff[3] = nr;
 11423  078F  0879               	movf	_nr,w
 11424  0790  00D0               	movwf	??_checkFlags
 11425  0791  0850               	movf	??_checkFlags,w
 11426  0792  00D4               	movwf	checkFlags@buff+3
 11427                           
 11428                           ;main.c: 696: buff[4] = iread;
 11429  0793  087B               	movf	_iread,w
 11430  0794  00D0               	movwf	??_checkFlags
 11431  0795  0850               	movf	??_checkFlags,w
 11432  0796  00D5               	movwf	checkFlags@buff+4
 11433                           
 11434                           ;main.c: 697: buff[5] = iwrite;
 11435  0797  087A               	movf	_iwrite,w
 11436  0798  00D0               	movwf	??_checkFlags
 11437  0799  0850               	movf	??_checkFlags,w
 11438  079A  00D6               	movwf	checkFlags@buff+5
 11439                           
 11440                           ;main.c: 698: buff[6] = (uint8_t)0xFE;
 11441  079B  30FE               	movlw	254
 11442  079C  00D0               	movwf	??_checkFlags
 11443  079D  0850               	movf	??_checkFlags,w
 11444  079E  00D7               	movwf	checkFlags@buff+6
 11445  079F                     l7074:
 11446                           
 11447                           ;main.c: 699: sendMessage(7,buff);
 11448  079F  3007               	movlw	7
 11449  07A0  00AA               	movwf	sendMessage@num
 11450  07A1  3000               	movlw	0
 11451  07A2  00AB               	movwf	sendMessage@num+1
 11452  07A3  3051               	movlw	(low (checkFlags@buff| 0))& (0+255)
 11453  07A4  00D0               	movwf	??_checkFlags
 11454  07A5  0850               	movf	??_checkFlags,w
 11455  07A6  00AC               	movwf	sendMessage@buffer
 11456  07A7  3191  2181  3187   	fcall	_sendMessage
 11457  07AA                     l7076:
 11458                           
 11459                           ;main.c: 701: sentMessageBufHalfFull = 1;
 11460  07AA  0021               	movlb	1	; select bank1
 11461  07AB  01AE               	clrf	_sentMessageBufHalfFull^(0+128)
 11462  07AC  0AAE               	incf	_sentMessageBufHalfFull^(0+128),f
 11463  07AD                     l7078:
 11464                           
 11465                           ;main.c: 702: };main.c: 703: if(!bufHalfFull){
 11466  07AD  0830               	movf	_bufHalfFull^(0+128),w
 11467  07AE  1D03               	btfss	3,2
 11468  07AF  2FB1               	goto	u8311
 11469  07B0  2FB2               	goto	u8310
 11470  07B1                     u8311:
 11471  07B1  2FB3               	goto	l7082
 11472  07B2                     u8310:
 11473  07B2                     l7080:
 11474                           
 11475                           ;main.c: 704: sentMessageBufHalfFull = 0;
 11476  07B2  01AE               	clrf	_sentMessageBufHalfFull^(0+128)
 11477  07B3                     l7082:
 11478                           
 11479                           ;main.c: 705: };main.c: 706: if(PWM_on){
 11480  07B3  0835               	movf	_PWM_on^(0+128),w
 11481  07B4  1903               	btfsc	3,2
 11482  07B5  2FB7               	goto	u8321
 11483  07B6  2FB8               	goto	u8320
 11484  07B7                     u8321:
 11485  07B7  2FEA               	goto	l1397
 11486  07B8                     u8320:
 11487  07B8                     l7084:
 11488                           
 11489                           ;main.c: 707: if(PWM6EN==0){
 11490  07B8  0027               	movlb	7	; select bank7
 11491  07B9  1B8E               	btfsc	14,7	;volatile
 11492  07BA  2FBC               	goto	u8331
 11493  07BB  2FBD               	goto	u8330
 11494  07BC                     u8331:
 11495  07BC  2FC3               	goto	l7088
 11496  07BD                     u8330:
 11497  07BD                     l7086:
 11498                           
 11499                           ;main.c: 708: TMR2_StartTimer();
 11500  07BD  319E  26E2  3187   	fcall	_TMR2_StartTimer
 11501                           
 11502                           ;main.c: 709: PWM_Output_D4_Enable();
 11503  07C0  319E  26D6  3187   	fcall	_PWM_Output_D4_Enable
 11504  07C3                     l7088:
 11505                           
 11506                           ;main.c: 710: };main.c: 711: if(dimingLed <= 1023){
 11507  07C3  0021               	movlb	1	; select bank1
 11508  07C4  082B               	movf	(_dimingLed+1)^(0+128),w
 11509  07C5  3A80               	xorlw	128
 11510  07C6  0020               	movlb	0	; select bank0
 11511  07C7  00D0               	movwf	??_checkFlags
 11512  07C8  3084               	movlw	132
 11513  07C9  0250               	subwf	??_checkFlags,w
 11514  07CA  1D03               	skipz
 11515  07CB  2FCF               	goto	u8345
 11516  07CC  3000               	movlw	0
 11517  07CD  0021               	movlb	1	; select bank1
 11518  07CE  022A               	subwf	_dimingLed^(0+128),w
 11519  07CF                     u8345:
 11520  07CF  1803               	skipnc
 11521  07D0  2FD2               	goto	u8341
 11522  07D1  2FD3               	goto	u8340
 11523  07D2                     u8341:
 11524  07D2  2FD9               	goto	l7092
 11525  07D3                     u8340:
 11526  07D3                     l7090:
 11527                           
 11528                           ;main.c: 712: dimingLed += 1;
 11529  07D3  3001               	movlw	1
 11530  07D4  0021               	movlb	1	; select bank1
 11531  07D5  07AA               	addwf	_dimingLed^(0+128),f
 11532  07D6  3000               	movlw	0
 11533  07D7  3DAB               	addwfc	(_dimingLed+1)^(0+128),f
 11534                           
 11535                           ;main.c: 713: } else{
 11536  07D8  2FDC               	goto	l7094
 11537  07D9                     l7092:
 11538                           
 11539                           ;main.c: 714: dimingLed = 0;
 11540  07D9  0021               	movlb	1	; select bank1
 11541  07DA  01AA               	clrf	_dimingLed^(0+128)
 11542  07DB  01AB               	clrf	(_dimingLed+1)^(0+128)
 11543  07DC                     l7094:
 11544                           
 11545                           ;main.c: 715: };main.c: 716: PWM6_LoadDutyValue(dimingLed);
 11546  07DC  082B               	movf	(_dimingLed+1)^(0+128),w
 11547  07DD  0020               	movlb	0	; select bank0
 11548  07DE  00A8               	movwf	PWM6_LoadDutyValue@dutyValue+1
 11549  07DF  0021               	movlb	1	; select bank1
 11550  07E0  082A               	movf	_dimingLed^(0+128),w
 11551  07E1  0020               	movlb	0	; select bank0
 11552  07E2  00A7               	movwf	PWM6_LoadDutyValue@dutyValue
 11553  07E3  3190  2000  3187   	fcall	_PWM6_LoadDutyValue
 11554  07E6                     l7096:
 11555                           
 11556                           ;main.c: 717: _delay((unsigned long)((1)*(1000000/4000.0)));
 11557  07E6  3053               	movlw	83
 11558  07E7                     u9577:
 11559  07E7  0B89               	decfsz	9,f
 11560  07E8  2FE7               	goto	u9577
 11561  07E9  0000               	nop
 11562  07EA                     l1397:
 11563  07EA  0008               	return
 11564  07EB                     __end_of_checkFlags:
 11565                           
 11566                           	psect	text10
 11567  0883                     __ptext10:	
 11568 ;; *************** function _wirteEEPROMinit *****************
 11569 ;; Defined at:
 11570 ;;		line 403 in file "main.c"
 11571 ;; Parameters:    Size  Location     Type
 11572 ;;		None
 11573 ;; Auto vars:     Size  Location     Type
 11574 ;;		None
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  1    wreg      void 
 11577 ;; Registers used:
 11578 ;;		wreg, status,2, status,0, pclath, cstack
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;Total ram usage:        1 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:    5
 11591 ;; This function calls:
 11592 ;;		_DATAEE_WriteByte
 11593 ;; This function is called by:
 11594 ;;		_checkFlags
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           
 11599                           ;psect for function _wirteEEPROMinit
 11600  0883                     _wirteEEPROMinit:
 11601  0883                     l6610:	
 11602                           ;incstack = 0
 11603                           ; Regs used in _wirteEEPROMinit: [wreg+status,2+status,0+pclath+cstack]
 11604                           
 11605                           
 11606                           ;main.c: 405: DATAEE_WriteByte( 0x7000 + (1), NREG);
 11607  0883  3001               	movlw	1
 11608  0884  0020               	movlb	0	; select bank0
 11609  0885  00AD               	movwf	DATAEE_WriteByte@bAdd
 11610  0886  3070               	movlw	112
 11611  0887  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11612  0888  087D               	movf	_NREG,w
 11613  0889  00B1               	movwf	??_wirteEEPROMinit
 11614  088A  0831               	movf	??_wirteEEPROMinit,w
 11615  088B  00AF               	movwf	DATAEE_WriteByte@bData
 11616  088C  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11617                           
 11618                           ;main.c: 406: DATAEE_WriteByte( 0x7000 + (2), PMON);
 11619  088F  3002               	movlw	2
 11620  0890  0020               	movlb	0	; select bank0
 11621  0891  00AD               	movwf	DATAEE_WriteByte@bAdd
 11622  0892  3070               	movlw	112
 11623  0893  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11624  0894  0021               	movlb	1	; select bank1
 11625  0895  0857               	movf	_PMON^(0+128),w
 11626  0896  0020               	movlb	0	; select bank0
 11627  0897  00B1               	movwf	??_wirteEEPROMinit
 11628  0898  0831               	movf	??_wirteEEPROMinit,w
 11629  0899  00AF               	movwf	DATAEE_WriteByte@bData
 11630  089A  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11631                           
 11632                           ;main.c: 407: DATAEE_WriteByte( 0x7000 + (3), TALA);
 11633  089D  3003               	movlw	3
 11634  089E  0020               	movlb	0	; select bank0
 11635  089F  00AD               	movwf	DATAEE_WriteByte@bAdd
 11636  08A0  3070               	movlw	112
 11637  08A1  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11638  08A2  0021               	movlb	1	; select bank1
 11639  08A3  0856               	movf	_TALA^(0+128),w
 11640  08A4  0020               	movlb	0	; select bank0
 11641  08A5  00B1               	movwf	??_wirteEEPROMinit
 11642  08A6  0831               	movf	??_wirteEEPROMinit,w
 11643  08A7  00AF               	movwf	DATAEE_WriteByte@bData
 11644  08A8  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11645                           
 11646                           ;main.c: 408: DATAEE_WriteByte( 0x7000 + (4), clkAlarm.alarmVal.h);
 11647  08AB  3004               	movlw	4
 11648  08AC  0020               	movlb	0	; select bank0
 11649  08AD  00AD               	movwf	DATAEE_WriteByte@bAdd
 11650  08AE  3070               	movlw	112
 11651  08AF  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11652  08B0  0021               	movlb	1	; select bank1
 11653  08B1  0820               	movf	_clkAlarm^(0+128),w
 11654  08B2  0020               	movlb	0	; select bank0
 11655  08B3  00B1               	movwf	??_wirteEEPROMinit
 11656  08B4  0831               	movf	??_wirteEEPROMinit,w
 11657  08B5  00AF               	movwf	DATAEE_WriteByte@bData
 11658  08B6  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11659                           
 11660                           ;main.c: 409: DATAEE_WriteByte( 0x7000 + (5), clkAlarm.alarmVal.m);
 11661  08B9  3005               	movlw	5
 11662  08BA  0020               	movlb	0	; select bank0
 11663  08BB  00AD               	movwf	DATAEE_WriteByte@bAdd
 11664  08BC  3070               	movlw	112
 11665  08BD  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11666  08BE  0021               	movlb	1	; select bank1
 11667  08BF  0821               	movf	(_clkAlarm^(0+128)+1),w
 11668  08C0  0020               	movlb	0	; select bank0
 11669  08C1  00B1               	movwf	??_wirteEEPROMinit
 11670  08C2  0831               	movf	??_wirteEEPROMinit,w
 11671  08C3  00AF               	movwf	DATAEE_WriteByte@bData
 11672  08C4  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11673                           
 11674                           ;main.c: 410: DATAEE_WriteByte( 0x7000 + (6), clkAlarm.alarmVal.s);
 11675  08C7  3006               	movlw	6
 11676  08C8  0020               	movlb	0	; select bank0
 11677  08C9  00AD               	movwf	DATAEE_WriteByte@bAdd
 11678  08CA  3070               	movlw	112
 11679  08CB  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11680  08CC  0021               	movlb	1	; select bank1
 11681  08CD  0822               	movf	(_clkAlarm^(0+128)+2),w
 11682  08CE  0020               	movlb	0	; select bank0
 11683  08CF  00B1               	movwf	??_wirteEEPROMinit
 11684  08D0  0831               	movf	??_wirteEEPROMinit,w
 11685  08D1  00AF               	movwf	DATAEE_WriteByte@bData
 11686  08D2  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11687                           
 11688                           ;main.c: 411: DATAEE_WriteByte( 0x7000 + (7), tempAlarm.alarmTemp);
 11689  08D5  3007               	movlw	7
 11690  08D6  0020               	movlb	0	; select bank0
 11691  08D7  00AD               	movwf	DATAEE_WriteByte@bAdd
 11692  08D8  3070               	movlw	112
 11693  08D9  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11694  08DA  0021               	movlb	1	; select bank1
 11695  08DB  0827               	movf	_tempAlarm^(0+128),w
 11696  08DC  0020               	movlb	0	; select bank0
 11697  08DD  00B1               	movwf	??_wirteEEPROMinit
 11698  08DE  0831               	movf	??_wirteEEPROMinit,w
 11699  08DF  00AF               	movwf	DATAEE_WriteByte@bData
 11700  08E0  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11701                           
 11702                           ;main.c: 412: DATAEE_WriteByte( 0x7000 + (8), lumAlarm.alarmLum);
 11703  08E3  3008               	movlw	8
 11704  08E4  0020               	movlb	0	; select bank0
 11705  08E5  00AD               	movwf	DATAEE_WriteByte@bAdd
 11706  08E6  3070               	movlw	112
 11707  08E7  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11708  08E8  0021               	movlb	1	; select bank1
 11709  08E9  0824               	movf	_lumAlarm^(0+128),w
 11710  08EA  0020               	movlb	0	; select bank0
 11711  08EB  00B1               	movwf	??_wirteEEPROMinit
 11712  08EC  0831               	movf	??_wirteEEPROMinit,w
 11713  08ED  00AF               	movwf	DATAEE_WriteByte@bData
 11714  08EE  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11715                           
 11716                           ;main.c: 413: DATAEE_WriteByte( 0x7000 + (9), ALAF);
 11717  08F1  3009               	movlw	9
 11718  08F2  0020               	movlb	0	; select bank0
 11719  08F3  00AD               	movwf	DATAEE_WriteByte@bAdd
 11720  08F4  3070               	movlw	112
 11721  08F5  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11722  08F6  087C               	movf	_ALAF,w
 11723  08F7  00B1               	movwf	??_wirteEEPROMinit
 11724  08F8  0831               	movf	??_wirteEEPROMinit,w
 11725  08F9  00AF               	movwf	DATAEE_WriteByte@bData
 11726  08FA  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11727                           
 11728                           ;main.c: 414: DATAEE_WriteByte( 0x7000 + (10), t.h);
 11729  08FD  300A               	movlw	10
 11730  08FE  0020               	movlb	0	; select bank0
 11731  08FF  00AD               	movwf	DATAEE_WriteByte@bAdd
 11732  0900  3070               	movlw	112
 11733  0901  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11734  0902  085A               	movf	_t,w
 11735  0903  00B1               	movwf	??_wirteEEPROMinit
 11736  0904  0831               	movf	??_wirteEEPROMinit,w
 11737  0905  00AF               	movwf	DATAEE_WriteByte@bData
 11738  0906  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11739                           
 11740                           ;main.c: 415: DATAEE_WriteByte( 0x7000 + (11), t.m);
 11741  0909  300B               	movlw	11
 11742  090A  0020               	movlb	0	; select bank0
 11743  090B  00AD               	movwf	DATAEE_WriteByte@bAdd
 11744  090C  3070               	movlw	112
 11745  090D  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11746  090E  085B               	movf	_t+1,w
 11747  090F  00B1               	movwf	??_wirteEEPROMinit
 11748  0910  0831               	movf	??_wirteEEPROMinit,w
 11749  0911  00AF               	movwf	DATAEE_WriteByte@bData
 11750  0912  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11751                           
 11752                           ;main.c: 416: DATAEE_WriteByte( 0x7000 + (12), iwrite);
 11753  0915  300C               	movlw	12
 11754  0916  0020               	movlb	0	; select bank0
 11755  0917  00AD               	movwf	DATAEE_WriteByte@bAdd
 11756  0918  3070               	movlw	112
 11757  0919  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11758  091A  087A               	movf	_iwrite,w
 11759  091B  00B1               	movwf	??_wirteEEPROMinit
 11760  091C  0831               	movf	??_wirteEEPROMinit,w
 11761  091D  00AF               	movwf	DATAEE_WriteByte@bData
 11762  091E  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11763                           
 11764                           ;main.c: 417: DATAEE_WriteByte( 0x7000 + (13), NREG + PMON + TALA + clkAlarm.alarmVal.h 
      +                          + clkAlarm.alarmVal.m + clkAlarm.alarmVal.s + tempAlarm.alarmTemp + lumAlarm.alarmLum + 
      +                          ALAF + t.h + t.m + iwrite);
 11765  0921  300D               	movlw	13
 11766  0922  0020               	movlb	0	; select bank0
 11767  0923  00AD               	movwf	DATAEE_WriteByte@bAdd
 11768  0924  3070               	movlw	112
 11769  0925  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 11770  0926  0021               	movlb	1	; select bank1
 11771  0927  0821               	movf	(_clkAlarm^(0+128)+1),w
 11772  0928  0722               	addwf	(_clkAlarm^(0+128)+2),w
 11773  0929  0020               	movlb	0	; select bank0
 11774  092A  075B               	addwf	_t+1,w
 11775  092B  0021               	movlb	1	; select bank1
 11776  092C  0720               	addwf	_clkAlarm^(0+128),w
 11777  092D  0727               	addwf	_tempAlarm^(0+128),w
 11778  092E  0724               	addwf	_lumAlarm^(0+128),w
 11779  092F  0020               	movlb	0	; select bank0
 11780  0930  075A               	addwf	_t,w
 11781  0931  077D               	addwf	_NREG,w
 11782  0932  0021               	movlb	1	; select bank1
 11783  0933  0757               	addwf	_PMON^(0+128),w
 11784  0934  0756               	addwf	_TALA^(0+128),w
 11785  0935  077C               	addwf	_ALAF,w
 11786  0936  077A               	addwf	_iwrite,w
 11787  0937  0020               	movlb	0	; select bank0
 11788  0938  00B1               	movwf	??_wirteEEPROMinit
 11789  0939  0831               	movf	??_wirteEEPROMinit,w
 11790  093A  00AF               	movwf	DATAEE_WriteByte@bData
 11791  093B  3191  21A4  3188   	fcall	_DATAEE_WriteByte
 11792  093E                     l1286:
 11793  093E  0008               	return
 11794  093F                     __end_of_wirteEEPROMinit:
 11795                           
 11796                           	psect	text11
 11797  037A                     __ptext11:	
 11798 ;; *************** function _update_menuLCD *****************
 11799 ;; Defined at:
 11800 ;;		line 423 in file "main.c"
 11801 ;; Parameters:    Size  Location     Type
 11802 ;;		None
 11803 ;; Auto vars:     Size  Location     Type
 11804 ;;  diff            3   15[BANK1 ] struct Time
 11805 ;;  str             8    0[BANK1 ] unsigned char [8]
 11806 ;;  tt              4    8[BANK1 ] unsigned char [4]
 11807 ;;  l               3   12[BANK1 ] unsigned char [3]
 11808 ;; Return value:  Size  Location     Type
 11809 ;;                  1    wreg      void 
 11810 ;; Registers used:
 11811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11812 ;; Tracked objects:
 11813 ;;		On entry : 0/0
 11814 ;;		On exit  : 0/0
 11815 ;;		Unchanged: 0/0
 11816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Locals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Totals:         0       6      18       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;Total ram usage:       24 bytes
 11822 ;; Hardware stack levels used:    1
 11823 ;; Hardware stack levels required when called:    8
 11824 ;; This function calls:
 11825 ;;		_LCDchar
 11826 ;;		_LCDcmd
 11827 ;;		_LCDstr
 11828 ;;		_PWM6_LoadDutyValue
 11829 ;;		_PWM_Output_D4_Disable
 11830 ;;		_TMR2_StopTimer
 11831 ;;		_differenceBetweenTimePeriod
 11832 ;;		_sprintf
 11833 ;; This function is called by:
 11834 ;;		_checkFlags
 11835 ;;		_editClock
 11836 ;;		_editTemp
 11837 ;;		_editLum
 11838 ;;		_toggleAlarms
 11839 ;; This function uses a non-reentrant model
 11840 ;;
 11841                           
 11842                           
 11843                           ;psect for function _update_menuLCD
 11844  037A                     _update_menuLCD:
 11845  037A                     l6612:	
 11846                           ;incstack = 0
 11847                           ; Regs used in _update_menuLCD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11848                           
 11849                           
 11850                           ;main.c: 425: if(bufHalfFull){
 11851  037A  0021               	movlb	1	; select bank1
 11852  037B  0830               	movf	_bufHalfFull^(0+128),w
 11853  037C  1903               	btfsc	3,2
 11854  037D  2B7F               	goto	u7641
 11855  037E  2B80               	goto	u7640
 11856  037F                     u7641:
 11857  037F  2B89               	goto	l6616
 11858  0380                     u7640:
 11859  0380                     l6614:
 11860                           
 11861                           ;main.c: 426: LCDcmd(0xc8);
 11862  0380  30C8               	movlw	200
 11863  0381  319F  2709  3183   	fcall	_LCDcmd
 11864                           
 11865                           ;main.c: 427: LCDchar('M');
 11866  0384  304D               	movlw	77
 11867  0385  319F  2747  3183   	fcall	_LCDchar
 11868                           
 11869                           ;main.c: 428: } else{
 11870  0388  2B91               	goto	l6618
 11871  0389                     l6616:
 11872                           
 11873                           ;main.c: 429: LCDcmd(0xc8);
 11874  0389  30C8               	movlw	200
 11875  038A  319F  2709  3183   	fcall	_LCDcmd
 11876                           
 11877                           ;main.c: 430: LCDchar(' ');
 11878  038D  3020               	movlw	32
 11879  038E  319F  2747  3183   	fcall	_LCDchar
 11880  0391                     l6618:
 11881                           
 11882                           ;main.c: 431: };main.c: 433: char str[8];;main.c: 434: if(editingClockAlarm){
 11883  0391  0020               	movlb	0	; select bank0
 11884  0392  085F               	movf	_editingClockAlarm,w
 11885  0393  0460               	iorwf	_editingClockAlarm+1,w
 11886  0394  1903               	btfsc	3,2
 11887  0395  2B97               	goto	u7651
 11888  0396  2B98               	goto	u7650
 11889  0397                     u7651:
 11890  0397  2BBC               	goto	l6622
 11891  0398                     u7650:
 11892  0398                     l6620:
 11893                           
 11894                           ;main.c: 435: sprintf(str, "%02d:%02d:%02d", clkAlarm.alarmVal.h,clkAlarm.alarmVal.m,clk
      +                          Alarm.alarmVal.s);
 11895  0398  3027               	movlw	low (STR_1| (0+32768))
 11896  0399  00B5               	movwf	sprintf@f
 11897  039A  3098               	movlw	high (STR_1| (0+32768))
 11898  039B  00B6               	movwf	sprintf@f+1
 11899  039C  0021               	movlb	1	; select bank1
 11900  039D  0820               	movf	_clkAlarm^(0+128),w
 11901  039E  0020               	movlb	0	; select bank0
 11902  039F  00CA               	movwf	??_update_menuLCD
 11903  03A0  01CB               	clrf	??_update_menuLCD+1
 11904  03A1  084A               	movf	??_update_menuLCD,w
 11905  03A2  00B7               	movwf	?_sprintf+2
 11906  03A3  084B               	movf	??_update_menuLCD+1,w
 11907  03A4  00B8               	movwf	?_sprintf+3
 11908  03A5  0021               	movlb	1	; select bank1
 11909  03A6  0821               	movf	(_clkAlarm^(0+128)+1),w
 11910  03A7  0020               	movlb	0	; select bank0
 11911  03A8  00CC               	movwf	??_update_menuLCD+2
 11912  03A9  01CD               	clrf	??_update_menuLCD+3
 11913  03AA  084C               	movf	??_update_menuLCD+2,w
 11914  03AB  00B9               	movwf	?_sprintf+4
 11915  03AC  084D               	movf	??_update_menuLCD+3,w
 11916  03AD  00BA               	movwf	?_sprintf+5
 11917  03AE  0021               	movlb	1	; select bank1
 11918  03AF  0822               	movf	(_clkAlarm^(0+128)+2),w
 11919  03B0  0020               	movlb	0	; select bank0
 11920  03B1  00CE               	movwf	??_update_menuLCD+4
 11921  03B2  01CF               	clrf	??_update_menuLCD+5
 11922  03B3  084E               	movf	??_update_menuLCD+4,w
 11923  03B4  00BB               	movwf	?_sprintf+6
 11924  03B5  084F               	movf	??_update_menuLCD+5,w
 11925  03B6  00BC               	movwf	?_sprintf+7
 11926  03B7  30BC               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11927  03B8  3185  25AC  3183   	fcall	_sprintf
 11928                           
 11929                           ;main.c: 436: } else {
 11930  03BB  2BD9               	goto	l6624
 11931  03BC                     l6622:
 11932                           
 11933                           ;main.c: 437: sprintf(str, "%02d:%02d:%02d", t.h,t.m,t.s);
 11934  03BC  3027               	movlw	low (STR_1| (0+32768))
 11935  03BD  00B5               	movwf	sprintf@f
 11936  03BE  3098               	movlw	high (STR_1| (0+32768))
 11937  03BF  00B6               	movwf	sprintf@f+1
 11938  03C0  085A               	movf	_t,w
 11939  03C1  00CA               	movwf	??_update_menuLCD
 11940  03C2  01CB               	clrf	??_update_menuLCD+1
 11941  03C3  084A               	movf	??_update_menuLCD,w
 11942  03C4  00B7               	movwf	?_sprintf+2
 11943  03C5  084B               	movf	??_update_menuLCD+1,w
 11944  03C6  00B8               	movwf	?_sprintf+3
 11945  03C7  085B               	movf	_t+1,w
 11946  03C8  00CC               	movwf	??_update_menuLCD+2
 11947  03C9  01CD               	clrf	??_update_menuLCD+3
 11948  03CA  084C               	movf	??_update_menuLCD+2,w
 11949  03CB  00B9               	movwf	?_sprintf+4
 11950  03CC  084D               	movf	??_update_menuLCD+3,w
 11951  03CD  00BA               	movwf	?_sprintf+5
 11952  03CE  085C               	movf	_t+2,w
 11953  03CF  00CE               	movwf	??_update_menuLCD+4
 11954  03D0  01CF               	clrf	??_update_menuLCD+5
 11955  03D1  084E               	movf	??_update_menuLCD+4,w
 11956  03D2  00BB               	movwf	?_sprintf+6
 11957  03D3  084F               	movf	??_update_menuLCD+5,w
 11958  03D4  00BC               	movwf	?_sprintf+7
 11959  03D5  30BC               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11960  03D6  3185  25AC  3183   	fcall	_sprintf
 11961  03D9                     l6624:
 11962                           
 11963                           ;main.c: 438: };main.c: 439: LCDcmd(0x80);
 11964  03D9  3080               	movlw	128
 11965  03DA  319F  2709  3183   	fcall	_LCDcmd
 11966  03DD                     l6626:
 11967                           
 11968                           ;main.c: 440: LCDstr(str);
 11969  03DD  30BC               	movlw	low update_menuLCD@str
 11970  03DE  0020               	movlb	0	; select bank0
 11971  03DF  00B0               	movwf	LCDstr@p
 11972  03E0  3000               	movlw	high update_menuLCD@str
 11973  03E1  00B1               	movwf	LCDstr@p+1
 11974  03E2  3190  204E  3183   	fcall	_LCDstr
 11975  03E5                     l6628:
 11976                           
 11977                           ;main.c: 443: if(clkAlarm.trigger == 1){
 11978  03E5  0021               	movlb	1	; select bank1
 11979  03E6  0323               	decf	(_clkAlarm^(0+128)+3),w
 11980  03E7  1D03               	btfss	3,2
 11981  03E8  2BEA               	goto	u7661
 11982  03E9  2BEB               	goto	u7660
 11983  03EA                     u7661:
 11984  03EA  2BF4               	goto	l6632
 11985  03EB                     u7660:
 11986  03EB                     l6630:
 11987                           
 11988                           ;main.c: 444: LCDcmd(0x8B);
 11989  03EB  308B               	movlw	139
 11990  03EC  319F  2709  3183   	fcall	_LCDcmd
 11991                           
 11992                           ;main.c: 445: LCDchar('C');
 11993  03EF  3043               	movlw	67
 11994  03F0  319F  2747  3183   	fcall	_LCDchar
 11995                           
 11996                           ;main.c: 446: } else if(modeFlag == 0){
 11997  03F3  2C03               	goto	l6636
 11998  03F4                     l6632:
 11999  03F4  0020               	movlb	0	; select bank0
 12000  03F5  085D               	movf	_modeFlag,w
 12001  03F6  045E               	iorwf	_modeFlag+1,w
 12002  03F7  1D03               	btfss	3,2
 12003  03F8  2BFA               	goto	u7671
 12004  03F9  2BFB               	goto	u7670
 12005  03FA                     u7671:
 12006  03FA  2C03               	goto	l6636
 12007  03FB                     u7670:
 12008  03FB                     l6634:
 12009                           
 12010                           ;main.c: 447: LCDcmd(0x8B);
 12011  03FB  308B               	movlw	139
 12012  03FC  319F  2709  3183   	fcall	_LCDcmd
 12013                           
 12014                           ;main.c: 448: LCDchar(' ');
 12015  03FF  3020               	movlw	32
 12016  0400  319F  2747  3183   	fcall	_LCDchar
 12017  0403                     l6636:
 12018                           
 12019                           ;main.c: 449: };main.c: 452: if(tempAlarm.trigger == 1){
 12020  0403  0021               	movlb	1	; select bank1
 12021  0404  0328               	decf	(_tempAlarm^(0+128)+1),w
 12022  0405  1D03               	btfss	3,2
 12023  0406  2C08               	goto	u7681
 12024  0407  2C09               	goto	u7680
 12025  0408                     u7681:
 12026  0408  2C12               	goto	l6640
 12027  0409                     u7680:
 12028  0409                     l6638:
 12029                           
 12030                           ;main.c: 453: LCDcmd(0x8C);
 12031  0409  308C               	movlw	140
 12032  040A  319F  2709  3183   	fcall	_LCDcmd
 12033                           
 12034                           ;main.c: 454: LCDchar('T');
 12035  040D  3054               	movlw	84
 12036  040E  319F  2747  3183   	fcall	_LCDchar
 12037                           
 12038                           ;main.c: 455: } else if(modeFlag == 0){
 12039  0411  2C21               	goto	l6644
 12040  0412                     l6640:
 12041  0412  0020               	movlb	0	; select bank0
 12042  0413  085D               	movf	_modeFlag,w
 12043  0414  045E               	iorwf	_modeFlag+1,w
 12044  0415  1D03               	btfss	3,2
 12045  0416  2C18               	goto	u7691
 12046  0417  2C19               	goto	u7690
 12047  0418                     u7691:
 12048  0418  2C21               	goto	l6644
 12049  0419                     u7690:
 12050  0419                     l6642:
 12051                           
 12052                           ;main.c: 456: LCDcmd(0x8C);
 12053  0419  308C               	movlw	140
 12054  041A  319F  2709  3183   	fcall	_LCDcmd
 12055                           
 12056                           ;main.c: 457: LCDchar(' ');
 12057  041D  3020               	movlw	32
 12058  041E  319F  2747  3183   	fcall	_LCDchar
 12059  0421                     l6644:
 12060                           
 12061                           ;main.c: 458: };main.c: 461: if(lumAlarm.trigger == 1){
 12062  0421  0021               	movlb	1	; select bank1
 12063  0422  0325               	decf	(_lumAlarm^(0+128)+1),w
 12064  0423  1D03               	btfss	3,2
 12065  0424  2C26               	goto	u7701
 12066  0425  2C27               	goto	u7700
 12067  0426                     u7701:
 12068  0426  2C30               	goto	l6648
 12069  0427                     u7700:
 12070  0427                     l6646:
 12071                           
 12072                           ;main.c: 462: LCDcmd(0x8D);
 12073  0427  308D               	movlw	141
 12074  0428  319F  2709  3183   	fcall	_LCDcmd
 12075                           
 12076                           ;main.c: 463: LCDchar('L');
 12077  042B  304C               	movlw	76
 12078  042C  319F  2747  3183   	fcall	_LCDchar
 12079                           
 12080                           ;main.c: 464: } else if(modeFlag == 0){
 12081  042F  2C3F               	goto	l1300
 12082  0430                     l6648:
 12083  0430  0020               	movlb	0	; select bank0
 12084  0431  085D               	movf	_modeFlag,w
 12085  0432  045E               	iorwf	_modeFlag+1,w
 12086  0433  1D03               	btfss	3,2
 12087  0434  2C36               	goto	u7711
 12088  0435  2C37               	goto	u7710
 12089  0436                     u7711:
 12090  0436  2C3F               	goto	l1300
 12091  0437                     u7710:
 12092  0437                     l6650:
 12093                           
 12094                           ;main.c: 465: LCDcmd(0x8D);
 12095  0437  308D               	movlw	141
 12096  0438  319F  2709  3183   	fcall	_LCDcmd
 12097                           
 12098                           ;main.c: 466: LCDchar(' ');
 12099  043B  3020               	movlw	32
 12100  043C  319F  2747  3183   	fcall	_LCDchar
 12101  043F                     l1300:
 12102                           
 12103                           ;main.c: 467: };main.c: 469: LCDcmd(0x8F);
 12104  043F  308F               	movlw	143
 12105  0440  319F  2709  3183   	fcall	_LCDcmd
 12106                           
 12107                           ;main.c: 470: LCDchar(ALAF);
 12108  0443  087C               	movf	_ALAF,w
 12109  0444  319F  2747  3183   	fcall	_LCDchar
 12110  0447                     l6652:
 12111                           
 12112                           ;main.c: 473: if(ALAF == 'A'){
 12113  0447  3041               	movlw	65
 12114  0448  067C               	xorwf	_ALAF,w
 12115  0449  1D03               	btfss	3,2
 12116  044A  2C4C               	goto	u7721
 12117  044B  2C4D               	goto	u7720
 12118  044C                     u7721:
 12119  044C  2CBF               	goto	l6686
 12120  044D                     u7720:
 12121  044D                     l6654:
 12122                           
 12123                           ;main.c: 474: if(clkAlarm.trigger || tempAlarm.trigger || lumAlarm.trigger){
 12124  044D  0021               	movlb	1	; select bank1
 12125  044E  0823               	movf	(_clkAlarm^(0+128)+3),w
 12126  044F  1D03               	btfss	3,2
 12127  0450  2C52               	goto	u7731
 12128  0451  2C53               	goto	u7730
 12129  0452                     u7731:
 12130  0452  2C5D               	goto	l6660
 12131  0453                     u7730:
 12132  0453                     l6656:
 12133  0453  0828               	movf	(_tempAlarm^(0+128)+1),w
 12134  0454  1D03               	btfss	3,2
 12135  0455  2C57               	goto	u7741
 12136  0456  2C58               	goto	u7740
 12137  0457                     u7741:
 12138  0457  2C5D               	goto	l6660
 12139  0458                     u7740:
 12140  0458                     l6658:
 12141  0458  0825               	movf	(_lumAlarm^(0+128)+1),w
 12142  0459  1903               	btfsc	3,2
 12143  045A  2C5C               	goto	u7751
 12144  045B  2C5D               	goto	u7750
 12145  045C                     u7751:
 12146  045C  2CB9               	goto	l1303
 12147  045D                     u7750:
 12148  045D                     l6660:
 12149                           
 12150                           ;main.c: 475: if(alarmPWMStart.h == 0xff){
 12151  045D  0A4E               	incf	_alarmPWMStart^(0+128),w
 12152  045E  1D03               	btfss	3,2
 12153  045F  2C61               	goto	u7761
 12154  0460  2C62               	goto	u7760
 12155  0461                     u7761:
 12156  0461  2C74               	goto	l1306
 12157  0462                     u7760:
 12158  0462                     l6662:
 12159                           
 12160                           ;main.c: 476: alarmPWMStart.h = t.h;
 12161  0462  0020               	movlb	0	; select bank0
 12162  0463  085A               	movf	_t,w
 12163  0464  00CA               	movwf	??_update_menuLCD
 12164  0465  084A               	movf	??_update_menuLCD,w
 12165  0466  0021               	movlb	1	; select bank1
 12166  0467  00CE               	movwf	_alarmPWMStart^(0+128)
 12167                           
 12168                           ;main.c: 477: alarmPWMStart.m = t.m;
 12169  0468  0020               	movlb	0	; select bank0
 12170  0469  085B               	movf	_t+1,w
 12171  046A  00CA               	movwf	??_update_menuLCD
 12172  046B  084A               	movf	??_update_menuLCD,w
 12173  046C  0021               	movlb	1	; select bank1
 12174  046D  00CF               	movwf	(_alarmPWMStart^(0+128)+1)
 12175                           
 12176                           ;main.c: 478: alarmPWMStart.s = t.s;
 12177  046E  0020               	movlb	0	; select bank0
 12178  046F  085C               	movf	_t+2,w
 12179  0470  00CA               	movwf	??_update_menuLCD
 12180  0471  084A               	movf	??_update_menuLCD,w
 12181  0472  0021               	movlb	1	; select bank1
 12182  0473  00D0               	movwf	(_alarmPWMStart^(0+128)+2)
 12183  0474                     l1306:
 12184                           
 12185                           ;main.c: 479: };main.c: 480: struct Time diff = {0,0,0};
 12186  0474  0022               	movlb	2	; select bank2
 12187  0475  0854               	movf	update_menuLCD@F12903^(0+256),w
 12188  0476  0021               	movlb	1	; select bank1
 12189  0477  00CB               	movwf	update_menuLCD@diff^(0+128)
 12190  0478  0022               	movlb	2	; select bank2
 12191  0479  0855               	movf	(update_menuLCD@F12903+1)^(0+256),w
 12192  047A  0021               	movlb	1	; select bank1
 12193  047B  00CC               	movwf	(update_menuLCD@diff+1)^(0+128)
 12194  047C  0022               	movlb	2	; select bank2
 12195  047D  0856               	movf	(update_menuLCD@F12903+2)^(0+256),w
 12196  047E  0021               	movlb	1	; select bank1
 12197  047F  00CD               	movwf	(update_menuLCD@diff+2)^(0+128)
 12198  0480                     l6664:
 12199                           
 12200                           ;main.c: 481: differenceBetweenTimePeriod( t, alarmPWMStart, &diff);
 12201  0480  0020               	movlb	0	; select bank0
 12202  0481  085A               	movf	_t,w
 12203  0482  00A7               	movwf	differenceBetweenTimePeriod@start
 12204  0483  085B               	movf	_t+1,w
 12205  0484  00A8               	movwf	differenceBetweenTimePeriod@start+1
 12206  0485  085C               	movf	_t+2,w
 12207  0486  00A9               	movwf	differenceBetweenTimePeriod@start+2
 12208  0487  0021               	movlb	1	; select bank1
 12209  0488  084E               	movf	_alarmPWMStart^(0+128),w
 12210  0489  0020               	movlb	0	; select bank0
 12211  048A  00AA               	movwf	differenceBetweenTimePeriod@stop
 12212  048B  0021               	movlb	1	; select bank1
 12213  048C  084F               	movf	(_alarmPWMStart+1)^(0+128),w
 12214  048D  0020               	movlb	0	; select bank0
 12215  048E  00AB               	movwf	differenceBetweenTimePeriod@stop+1
 12216  048F  0021               	movlb	1	; select bank1
 12217  0490  0850               	movf	(_alarmPWMStart+2)^(0+128),w
 12218  0491  0020               	movlb	0	; select bank0
 12219  0492  00AC               	movwf	differenceBetweenTimePeriod@stop+2
 12220  0493  30CB               	movlw	(low (update_menuLCD@diff| 0))& (0+255)
 12221  0494  00CA               	movwf	??_update_menuLCD
 12222  0495  084A               	movf	??_update_menuLCD,w
 12223  0496  00AD               	movwf	differenceBetweenTimePeriod@diff
 12224  0497  3193  230E  3183   	fcall	_differenceBetweenTimePeriod
 12225  049A                     l6666:
 12226                           
 12227                           ;main.c: 483: if(diff.s <= TALA){
 12228  049A  0021               	movlb	1	; select bank1
 12229  049B  084D               	movf	(update_menuLCD@diff^(0+128)+2),w
 12230  049C  0256               	subwf	_TALA^(0+128),w
 12231  049D  1C03               	skipc
 12232  049E  2CA0               	goto	u7771
 12233  049F  2CA1               	goto	u7770
 12234  04A0                     u7771:
 12235  04A0  2CA4               	goto	l1309
 12236  04A1                     u7770:
 12237  04A1                     l6668:
 12238                           
 12239                           ;main.c: 484: PWM_on = 1;
 12240  04A1  01B5               	clrf	_PWM_on^(0+128)
 12241  04A2  0AB5               	incf	_PWM_on^(0+128),f
 12242                           
 12243                           ;main.c: 495: } else if(PWM6EN==1){
 12244  04A3  2CBF               	goto	l6686
 12245  04A4                     l1309:
 12246  04A4  0027               	movlb	7	; select bank7
 12247  04A5  1F8E               	btfss	14,7	;volatile
 12248  04A6  2CA8               	goto	u7781
 12249  04A7  2CA9               	goto	u7780
 12250  04A8                     u7781:
 12251  04A8  2CBF               	goto	l1312
 12252  04A9                     u7780:
 12253  04A9                     l6670:
 12254                           
 12255                           ;main.c: 496: PWM_on = 0;
 12256  04A9  0021               	movlb	1	; select bank1
 12257  04AA  01B5               	clrf	_PWM_on^(0+128)
 12258  04AB                     l6672:
 12259                           
 12260                           ;main.c: 497: PWM6_LoadDutyValue(0);
 12261  04AB  3000               	movlw	0
 12262  04AC  0020               	movlb	0	; select bank0
 12263  04AD  00A7               	movwf	PWM6_LoadDutyValue@dutyValue
 12264  04AE  00A8               	movwf	PWM6_LoadDutyValue@dutyValue+1
 12265  04AF  3190  2000  3183   	fcall	_PWM6_LoadDutyValue
 12266  04B2                     l6674:
 12267                           
 12268                           ;main.c: 498: TMR2_StopTimer();
 12269  04B2  319E  26E6  3183   	fcall	_TMR2_StopTimer
 12270  04B5                     l6676:
 12271                           
 12272                           ;main.c: 499: PWM_Output_D4_Disable();
 12273  04B5  319E  26DC  3183   	fcall	_PWM_Output_D4_Disable
 12274  04B8  2CBF               	goto	l6686
 12275  04B9                     l1303:
 12276  04B9  0027               	movlb	7	; select bank7
 12277  04BA  1F8E               	btfss	14,7	;volatile
 12278  04BB  2CBD               	goto	u7791
 12279  04BC  2CBE               	goto	u7790
 12280  04BD                     u7791:
 12281  04BD  2CBF               	goto	l6686
 12282  04BE                     u7790:
 12283  04BE  2CA9               	goto	l6670
 12284  04BF                     l1312:
 12285  04BF                     l6686:
 12286                           
 12287                           ;main.c: 506: };main.c: 507: };main.c: 509: LCDcmd(0xc0);
 12288  04BF  30C0               	movlw	192
 12289  04C0  319F  2709  3183   	fcall	_LCDcmd
 12290  04C3                     l6688:
 12291                           
 12292                           ;main.c: 510: char tt[4];;main.c: 511: if(editingTempAlarm){
 12293  04C3  0021               	movlb	1	; select bank1
 12294  04C4  0837               	movf	_editingTempAlarm^(0+128),w
 12295  04C5  1903               	btfsc	3,2
 12296  04C6  2CC8               	goto	u7801
 12297  04C7  2CC9               	goto	u7800
 12298  04C8                     u7801:
 12299  04C8  2CDC               	goto	l6692
 12300  04C9                     u7800:
 12301  04C9                     l6690:
 12302                           
 12303                           ;main.c: 512: sprintf(tt, "%02d C", tempAlarm.alarmTemp);
 12304  04C9  3040               	movlw	low (STR_3| (0+32768))
 12305  04CA  0020               	movlb	0	; select bank0
 12306  04CB  00B5               	movwf	sprintf@f
 12307  04CC  3098               	movlw	high (STR_3| (0+32768))
 12308  04CD  00B6               	movwf	sprintf@f+1
 12309  04CE  0021               	movlb	1	; select bank1
 12310  04CF  0827               	movf	_tempAlarm^(0+128),w
 12311  04D0  0020               	movlb	0	; select bank0
 12312  04D1  00CA               	movwf	??_update_menuLCD
 12313  04D2  01CB               	clrf	??_update_menuLCD+1
 12314  04D3  084A               	movf	??_update_menuLCD,w
 12315  04D4  00B7               	movwf	?_sprintf+2
 12316  04D5  084B               	movf	??_update_menuLCD+1,w
 12317  04D6  00B8               	movwf	?_sprintf+3
 12318  04D7  30C4               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12319  04D8  3185  25AC  3183   	fcall	_sprintf
 12320                           
 12321                           ;main.c: 513: } else{
 12322  04DB  2CEC               	goto	l6694
 12323  04DC                     l6692:
 12324                           
 12325                           ;main.c: 514: sprintf(tt, "%02d C", temp);
 12326  04DC  3040               	movlw	low (STR_3| (0+32768))
 12327  04DD  0020               	movlb	0	; select bank0
 12328  04DE  00B5               	movwf	sprintf@f
 12329  04DF  3098               	movlw	high (STR_3| (0+32768))
 12330  04E0  00B6               	movwf	sprintf@f+1
 12331  04E1  0862               	movf	_temp,w
 12332  04E2  00CA               	movwf	??_update_menuLCD
 12333  04E3  01CB               	clrf	??_update_menuLCD+1
 12334  04E4  084A               	movf	??_update_menuLCD,w
 12335  04E5  00B7               	movwf	?_sprintf+2
 12336  04E6  084B               	movf	??_update_menuLCD+1,w
 12337  04E7  00B8               	movwf	?_sprintf+3
 12338  04E8  30C4               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12339  04E9  3185  25AC  3183   	fcall	_sprintf
 12340  04EC                     l6694:
 12341                           
 12342                           ;main.c: 515: };main.c: 516: LCDstr(tt);
 12343  04EC  30C4               	movlw	low update_menuLCD@tt
 12344  04ED  0020               	movlb	0	; select bank0
 12345  04EE  00B0               	movwf	LCDstr@p
 12346  04EF  3000               	movlw	high update_menuLCD@tt
 12347  04F0  00B1               	movwf	LCDstr@p+1
 12348  04F1  3190  204E  3183   	fcall	_LCDstr
 12349  04F4                     l6696:
 12350                           
 12351                           ;main.c: 518: LCDcmd(0xcd);
 12352  04F4  30CD               	movlw	205
 12353  04F5  319F  2709  3183   	fcall	_LCDcmd
 12354  04F8                     l6698:
 12355                           
 12356                           ;main.c: 519: char l[3];;main.c: 521: if(editingLumAlarm){
 12357  04F8  0021               	movlb	1	; select bank1
 12358  04F9  0836               	movf	_editingLumAlarm^(0+128),w
 12359  04FA  1903               	btfsc	3,2
 12360  04FB  2CFD               	goto	u7811
 12361  04FC  2CFE               	goto	u7810
 12362  04FD                     u7811:
 12363  04FD  2D11               	goto	l6702
 12364  04FE                     u7810:
 12365  04FE                     l6700:
 12366                           
 12367                           ;main.c: 522: sprintf(l, "L %d", lumAlarm.alarmLum);
 12368  04FE  3047               	movlw	low (STR_5| (0+32768))
 12369  04FF  0020               	movlb	0	; select bank0
 12370  0500  00B5               	movwf	sprintf@f
 12371  0501  3098               	movlw	high (STR_5| (0+32768))
 12372  0502  00B6               	movwf	sprintf@f+1
 12373  0503  0021               	movlb	1	; select bank1
 12374  0504  0824               	movf	_lumAlarm^(0+128),w
 12375  0505  0020               	movlb	0	; select bank0
 12376  0506  00CA               	movwf	??_update_menuLCD
 12377  0507  01CB               	clrf	??_update_menuLCD+1
 12378  0508  084A               	movf	??_update_menuLCD,w
 12379  0509  00B7               	movwf	?_sprintf+2
 12380  050A  084B               	movf	??_update_menuLCD+1,w
 12381  050B  00B8               	movwf	?_sprintf+3
 12382  050C  30C8               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12383  050D  3185  25AC  3183   	fcall	_sprintf
 12384                           
 12385                           ;main.c: 523: } else{
 12386  0510  2D21               	goto	l6704
 12387  0511                     l6702:
 12388                           
 12389                           ;main.c: 524: sprintf(l, "L %d", lumLevel);
 12390  0511  3047               	movlw	low (STR_5| (0+32768))
 12391  0512  0020               	movlb	0	; select bank0
 12392  0513  00B5               	movwf	sprintf@f
 12393  0514  3098               	movlw	high (STR_5| (0+32768))
 12394  0515  00B6               	movwf	sprintf@f+1
 12395  0516  0861               	movf	_lumLevel,w
 12396  0517  00CA               	movwf	??_update_menuLCD
 12397  0518  01CB               	clrf	??_update_menuLCD+1
 12398  0519  084A               	movf	??_update_menuLCD,w
 12399  051A  00B7               	movwf	?_sprintf+2
 12400  051B  084B               	movf	??_update_menuLCD+1,w
 12401  051C  00B8               	movwf	?_sprintf+3
 12402  051D  30C8               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12403  051E  3185  25AC  3183   	fcall	_sprintf
 12404  0521                     l6704:
 12405                           
 12406                           ;main.c: 525: };main.c: 526: LCDstr(l);
 12407  0521  30C8               	movlw	low update_menuLCD@l
 12408  0522  0020               	movlb	0	; select bank0
 12409  0523  00B0               	movwf	LCDstr@p
 12410  0524  3000               	movlw	high update_menuLCD@l
 12411  0525  00B1               	movwf	LCDstr@p+1
 12412  0526  3190  204E  3183   	fcall	_LCDstr
 12413  0529                     l6706:
 12414                           
 12415                           ;main.c: 528: if(modeFlag != 0){
 12416  0529  0020               	movlb	0	; select bank0
 12417  052A  085D               	movf	_modeFlag,w
 12418  052B  045E               	iorwf	_modeFlag+1,w
 12419  052C  1903               	btfsc	3,2
 12420  052D  2D2F               	goto	u7821
 12421  052E  2D30               	goto	u7820
 12422  052F                     u7821:
 12423  052F  2D3C               	goto	l6712
 12424  0530                     u7820:
 12425  0530                     l6708:
 12426                           
 12427                           ;main.c: 529: LCDcmd(0x8B);
 12428  0530  308B               	movlw	139
 12429  0531  319F  2709  3183   	fcall	_LCDcmd
 12430  0534                     l6710:
 12431                           
 12432                           ;main.c: 530: LCDstr((unsigned char *)"CTL");
 12433  0534  304C               	movlw	low (STR_7| (0+32768))
 12434  0535  0020               	movlb	0	; select bank0
 12435  0536  00B0               	movwf	LCDstr@p
 12436  0537  3098               	movlw	high (STR_7| (0+32768))
 12437  0538  00B1               	movwf	LCDstr@p+1
 12438  0539  3190  204E  3183   	fcall	_LCDstr
 12439  053C                     l6712:
 12440                           
 12441                           ;main.c: 531: };main.c: 533: if(modeFlag == 1){
 12442  053C  0020               	movlb	0	; select bank0
 12443  053D  035D               	decf	_modeFlag,w
 12444  053E  045E               	iorwf	_modeFlag+1,w
 12445  053F  1D03               	btfss	3,2
 12446  0540  2D42               	goto	u7831
 12447  0541  2D43               	goto	u7830
 12448  0542                     u7831:
 12449  0542  2D72               	goto	l6730
 12450  0543                     u7830:
 12451  0543                     l6714:
 12452                           
 12453                           ;main.c: 534: if(editingClockAlarm == 0){
 12454  0543  085F               	movf	_editingClockAlarm,w
 12455  0544  0460               	iorwf	_editingClockAlarm+1,w
 12456  0545  1D03               	btfss	3,2
 12457  0546  2D48               	goto	u7841
 12458  0547  2D49               	goto	u7840
 12459  0548                     u7841:
 12460  0548  2D4E               	goto	l6718
 12461  0549                     u7840:
 12462  0549                     l6716:
 12463                           
 12464                           ;main.c: 535: LCDcmd(0x8B);
 12465  0549  308B               	movlw	139
 12466  054A  319F  2709  3183   	fcall	_LCDcmd
 12467                           
 12468                           ;main.c: 536: } else{
 12469  054D  2DAB               	goto	l1337
 12470  054E                     l6718:
 12471                           
 12472                           ;main.c: 537: if(editingClockAlarm == 1){
 12473  054E  035F               	decf	_editingClockAlarm,w
 12474  054F  0460               	iorwf	_editingClockAlarm+1,w
 12475  0550  1D03               	btfss	3,2
 12476  0551  2D53               	goto	u7851
 12477  0552  2D54               	goto	u7850
 12478  0553                     u7851:
 12479  0553  2D59               	goto	l6722
 12480  0554                     u7850:
 12481  0554                     l6720:
 12482                           
 12483                           ;main.c: 538: LCDcmd(0x81);
 12484  0554  3081               	movlw	129
 12485  0555  319F  2709  3183   	fcall	_LCDcmd
 12486                           
 12487                           ;main.c: 539: } else if(editingClockAlarm == 2){
 12488  0558  2DAB               	goto	l1337
 12489  0559                     l6722:
 12490  0559  3002               	movlw	2
 12491  055A  065F               	xorwf	_editingClockAlarm,w
 12492  055B  0460               	iorwf	_editingClockAlarm+1,w
 12493  055C  1D03               	btfss	3,2
 12494  055D  2D5F               	goto	u7861
 12495  055E  2D60               	goto	u7860
 12496  055F                     u7861:
 12497  055F  2D65               	goto	l6726
 12498  0560                     u7860:
 12499  0560                     l6724:
 12500                           
 12501                           ;main.c: 540: LCDcmd(0x84);
 12502  0560  3084               	movlw	132
 12503  0561  319F  2709  3183   	fcall	_LCDcmd
 12504                           
 12505                           ;main.c: 541: } else if(editingClockAlarm == 3){
 12506  0564  2DAB               	goto	l1337
 12507  0565                     l6726:
 12508  0565  3003               	movlw	3
 12509  0566  065F               	xorwf	_editingClockAlarm,w
 12510  0567  0460               	iorwf	_editingClockAlarm+1,w
 12511  0568  1D03               	btfss	3,2
 12512  0569  2D6B               	goto	u7871
 12513  056A  2D6C               	goto	u7870
 12514  056B                     u7871:
 12515  056B  2D71               	goto	l1321
 12516  056C                     u7870:
 12517  056C                     l6728:
 12518                           
 12519                           ;main.c: 542: LCDcmd(0x87);
 12520  056C  3087               	movlw	135
 12521  056D  319F  2709  3183   	fcall	_LCDcmd
 12522  0570  2DAB               	goto	l1337
 12523  0571                     l1321:
 12524                           
 12525                           ;main.c: 543: };main.c: 544: };main.c: 545: } else if(modeFlag == 2){
 12526  0571  2DAB               	goto	l1337
 12527  0572                     l6730:
 12528  0572  3002               	movlw	2
 12529  0573  065D               	xorwf	_modeFlag,w
 12530  0574  045E               	iorwf	_modeFlag+1,w
 12531  0575  1D03               	btfss	3,2
 12532  0576  2D78               	goto	u7881
 12533  0577  2D79               	goto	u7880
 12534  0578                     u7881:
 12535  0578  2D89               	goto	l6738
 12536  0579                     u7880:
 12537  0579                     l6732:
 12538                           
 12539                           ;main.c: 547: if(editingTempAlarm == 0){
 12540  0579  0021               	movlb	1	; select bank1
 12541  057A  0837               	movf	_editingTempAlarm^(0+128),w
 12542  057B  1D03               	btfss	3,2
 12543  057C  2D7E               	goto	u7891
 12544  057D  2D7F               	goto	u7890
 12545  057E                     u7891:
 12546  057E  2D84               	goto	l6736
 12547  057F                     u7890:
 12548  057F                     l6734:
 12549                           
 12550                           ;main.c: 548: LCDcmd(0x8c);
 12551  057F  308C               	movlw	140
 12552  0580  319F  2709  3183   	fcall	_LCDcmd
 12553                           
 12554                           ;main.c: 549: }else {
 12555  0583  2DAB               	goto	l1337
 12556  0584                     l6736:
 12557                           
 12558                           ;main.c: 550: LCDcmd(0xc1);
 12559  0584  30C1               	movlw	193
 12560  0585  319F  2709  3183   	fcall	_LCDcmd
 12561  0588  2DAB               	goto	l1337
 12562  0589                     l6738:
 12563  0589  3003               	movlw	3
 12564  058A  065D               	xorwf	_modeFlag,w
 12565  058B  045E               	iorwf	_modeFlag+1,w
 12566  058C  1D03               	btfss	3,2
 12567  058D  2D8F               	goto	u7901
 12568  058E  2D90               	goto	u7900
 12569  058F                     u7901:
 12570  058F  2DA0               	goto	l6746
 12571  0590                     u7900:
 12572  0590                     l6740:
 12573                           
 12574                           ;main.c: 555: if(editingLumAlarm == 0){
 12575  0590  0021               	movlb	1	; select bank1
 12576  0591  0836               	movf	_editingLumAlarm^(0+128),w
 12577  0592  1D03               	btfss	3,2
 12578  0593  2D95               	goto	u7911
 12579  0594  2D96               	goto	u7910
 12580  0595                     u7911:
 12581  0595  2D9B               	goto	l6744
 12582  0596                     u7910:
 12583  0596                     l6742:
 12584                           
 12585                           ;main.c: 556: LCDcmd(0x8d);
 12586  0596  308D               	movlw	141
 12587  0597  319F  2709  3183   	fcall	_LCDcmd
 12588                           
 12589                           ;main.c: 557: }else {
 12590  059A  2DAB               	goto	l1337
 12591  059B                     l6744:
 12592                           
 12593                           ;main.c: 558: LCDcmd(0xcf);
 12594  059B  30CF               	movlw	207
 12595  059C  319F  2709  3183   	fcall	_LCDcmd
 12596  059F  2DAB               	goto	l1337
 12597  05A0                     l6746:
 12598  05A0  3004               	movlw	4
 12599  05A1  065D               	xorwf	_modeFlag,w
 12600  05A2  045E               	iorwf	_modeFlag+1,w
 12601  05A3  1D03               	btfss	3,2
 12602  05A4  2DA6               	goto	u7921
 12603  05A5  2DA7               	goto	u7920
 12604  05A6                     u7921:
 12605  05A6  2DAB               	goto	l1337
 12606  05A7                     u7920:
 12607  05A7                     l6748:
 12608                           
 12609                           ;main.c: 562: LCDcmd(0x8f);
 12610  05A7  308F               	movlw	143
 12611  05A8  319F  2709  3183   	fcall	_LCDcmd
 12612  05AB                     l1337:
 12613  05AB  0008               	return
 12614  05AC                     __end_of_update_menuLCD:
 12615                           
 12616                           	psect	text12
 12617  05AC                     __ptext12:	
 12618 ;; *************** function _sprintf *****************
 12619 ;; Defined at:
 12620 ;;		line 505 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c"
 12621 ;; Parameters:    Size  Location     Type
 12622 ;;  sp              1    wreg     PTR unsigned char 
 12623 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12624 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 12625 ;;		 -> STR_6(5), STR_5(5), STR_4(7), STR_3(7), 
 12626 ;;		 -> STR_2(15), STR_1(15), 
 12627 ;; Auto vars:     Size  Location     Type
 12628 ;;  sp              1   41[BANK0 ] PTR unsigned char 
 12629 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12630 ;;  tmpval          4    0        struct .
 12631 ;;  width           2   38[BANK0 ] int 
 12632 ;;  val             2   35[BANK0 ] unsigned int 
 12633 ;;  cp              2    0        PTR const unsigned char 
 12634 ;;  len             2    0        unsigned int 
 12635 ;;  c               1   40[BANK0 ] unsigned char 
 12636 ;;  flag            1   37[BANK0 ] unsigned char 
 12637 ;;  prec            1   34[BANK0 ] char 
 12638 ;;  ap              1   33[BANK0 ] PTR void [1]
 12639 ;;		 -> ?_sprintf(2), 
 12640 ;; Return value:  Size  Location     Type
 12641 ;;                  2   21[BANK0 ] int 
 12642 ;; Registers used:
 12643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12644 ;; Tracked objects:
 12645 ;;		On entry : 0/0
 12646 ;;		On exit  : 0/0
 12647 ;;		Unchanged: 0/0
 12648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12649 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12653 ;;Total ram usage:       21 bytes
 12654 ;; Hardware stack levels used:    1
 12655 ;; Hardware stack levels required when called:    5
 12656 ;; This function calls:
 12657 ;;		___lwdiv
 12658 ;;		___lwmod
 12659 ;;		___wmul
 12660 ;;		_isdigit
 12661 ;; This function is called by:
 12662 ;;		_update_menuLCD
 12663 ;; This function uses a non-reentrant model
 12664 ;;
 12665                           
 12666                           
 12667                           ;psect for function _sprintf
 12668  05AC                     _sprintf:
 12669                           
 12670                           ;incstack = 0
 12671                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12672                           ;sprintf@sp stored from wreg
 12673  05AC  0020               	movlb	0	; select bank0
 12674  05AD  00C9               	movwf	sprintf@sp
 12675  05AE                     l6488:
 12676                           
 12677                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
 12678  05AE  3037               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 12679  05AF  00BD               	movwf	??_sprintf
 12680  05B0  083D               	movf	??_sprintf,w
 12681  05B1  00C1               	movwf	sprintf@ap
 12682                           
 12683                           ;doprnt.c: 553: while((c = *f++)) {
 12684  05B2  2F31               	goto	l6592
 12685  05B3                     l6490:
 12686                           
 12687                           ;doprnt.c: 555: if(c != '%')
 12688  05B3  3025               	movlw	37
 12689  05B4  0648               	xorwf	sprintf@c,w
 12690  05B5  1903               	btfsc	3,2
 12691  05B6  2DB8               	goto	u7461
 12692  05B7  2DB9               	goto	u7460
 12693  05B8                     u7461:
 12694  05B8  2DC5               	goto	l6496
 12695  05B9                     u7460:
 12696  05B9                     l6492:
 12697                           
 12698                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
 12699  05B9  0848               	movf	sprintf@c,w
 12700  05BA  00BD               	movwf	??_sprintf
 12701  05BB  0849               	movf	sprintf@sp,w
 12702  05BC  0086               	movwf	6
 12703  05BD  0187               	clrf	7
 12704  05BE  083D               	movf	??_sprintf,w
 12705  05BF  0081               	movwf	1
 12706  05C0                     l6494:
 12707  05C0  3001               	movlw	1
 12708  05C1  00BD               	movwf	??_sprintf
 12709  05C2  083D               	movf	??_sprintf,w
 12710  05C3  07C9               	addwf	sprintf@sp,f
 12711                           
 12712                           ;doprnt.c: 559: continue;
 12713  05C4  2F31               	goto	l6592
 12714  05C5                     l6496:
 12715                           
 12716                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
 12717  05C5  01C6               	clrf	sprintf@width
 12718  05C6  01C7               	clrf	sprintf@width+1
 12719                           
 12720                           ;doprnt.c: 565: flag = 0;
 12721  05C7  01C5               	clrf	sprintf@flag
 12722  05C8  2DCE               	goto	l6502
 12723  05C9                     l1746:	
 12724                           ;doprnt.c: 596: case '0':
 12725                           
 12726                           
 12727                           ;doprnt.c: 597: flag |= 0x04;
 12728  05C9  1545               	bsf	sprintf@flag,2
 12729  05CA                     l6498:
 12730                           
 12731                           ;doprnt.c: 598: f++;
 12732  05CA  3001               	movlw	1
 12733  05CB  07B5               	addwf	sprintf@f,f
 12734  05CC  3000               	movlw	0
 12735  05CD  3DB6               	addwfc	sprintf@f+1,f
 12736  05CE                     l6502:	
 12737                           ;doprnt.c: 599: continue;
 12738                           
 12739  05CE  0835               	movf	sprintf@f,w
 12740  05CF  0084               	movwf	4
 12741  05D0  0836               	movf	sprintf@f+1,w
 12742  05D1  0085               	movwf	5
 12743  05D2  0800               	movf	0,w	;code access
 12744                           
 12745                           ; Switch size 1, requested type "simple"
 12746                           ; Number of cases is 1, Range of values is 48 to 48
 12747                           ; switch strategies available:
 12748                           ; Name         Instructions Cycles
 12749                           ; simple_byte            4     3 (average)
 12750                           ; direct_byte           11     9 (fixed)
 12751                           ; jumptable            263     9 (fixed)
 12752                           ;	Chosen strategy is simple_byte
 12753  05D3  3A30               	xorlw	48	; case 48
 12754  05D4  1903               	skipnz
 12755  05D5  2DC9               	goto	l1746
 12756  05D6  2DD7               	goto	l6504
 12757  05D7                     l6504:
 12758                           
 12759                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
 12760  05D7  0835               	movf	sprintf@f,w
 12761  05D8  0084               	movwf	4
 12762  05D9  0836               	movf	sprintf@f+1,w
 12763  05DA  0085               	movwf	5
 12764  05DB  0800               	movf	0,w	;code access
 12765  05DC  3187  27EB  3185   	fcall	_isdigit
 12766  05DF  1C03               	btfss	3,0
 12767  05E0  2DE2               	goto	u7471
 12768  05E1  2DE3               	goto	u7470
 12769  05E2                     u7471:
 12770  05E2  2E16               	goto	l6518
 12771  05E3                     u7470:
 12772  05E3                     l6506:
 12773                           
 12774                           ;doprnt.c: 615: width = 0;
 12775  05E3  0020               	movlb	0	; select bank0
 12776  05E4  01C6               	clrf	sprintf@width
 12777  05E5  01C7               	clrf	sprintf@width+1
 12778  05E6                     l6508:
 12779                           
 12780                           ;doprnt.c: 617: width *= 10;
 12781  05E6  300A               	movlw	10
 12782  05E7  0020               	movlb	0	; select bank0
 12783  05E8  00A7               	movwf	___wmul@multiplier
 12784  05E9  3000               	movlw	0
 12785  05EA  00A8               	movwf	___wmul@multiplier+1
 12786  05EB  0847               	movf	sprintf@width+1,w
 12787  05EC  00AA               	movwf	___wmul@multiplicand+1
 12788  05ED  0846               	movf	sprintf@width,w
 12789  05EE  00A9               	movwf	___wmul@multiplicand
 12790  05EF  3190  20FF  3185   	fcall	___wmul
 12791  05F2  0020               	movlb	0	; select bank0
 12792  05F3  0828               	movf	?___wmul+1,w
 12793  05F4  00C7               	movwf	sprintf@width+1
 12794  05F5  0827               	movf	?___wmul,w
 12795  05F6  00C6               	movwf	sprintf@width
 12796  05F7                     l6510:
 12797                           
 12798                           ;doprnt.c: 618: width += *f++ - '0';
 12799  05F7  0835               	movf	sprintf@f,w
 12800  05F8  0084               	movwf	4
 12801  05F9  0836               	movf	sprintf@f+1,w
 12802  05FA  0085               	movwf	5
 12803  05FB  0800               	movf	0,w	;code access
 12804  05FC  3ED0               	addlw	208
 12805  05FD  00BD               	movwf	??_sprintf
 12806  05FE  30FF               	movlw	255
 12807  05FF  1803               	skipnc
 12808  0600  3000               	movlw	0
 12809  0601  00BE               	movwf	??_sprintf+1
 12810  0602  083D               	movf	??_sprintf,w
 12811  0603  07C6               	addwf	sprintf@width,f
 12812  0604  083E               	movf	??_sprintf+1,w
 12813  0605  3DC7               	addwfc	sprintf@width+1,f
 12814  0606                     l6512:
 12815  0606  3001               	movlw	1
 12816  0607  07B5               	addwf	sprintf@f,f
 12817  0608  3000               	movlw	0
 12818  0609  3DB6               	addwfc	sprintf@f+1,f
 12819  060A                     l6514:
 12820                           
 12821                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
 12822  060A  0835               	movf	sprintf@f,w
 12823  060B  0084               	movwf	4
 12824  060C  0836               	movf	sprintf@f+1,w
 12825  060D  0085               	movwf	5
 12826  060E  0800               	movf	0,w	;code access
 12827  060F  3187  27EB  3185   	fcall	_isdigit
 12828  0612  1803               	btfsc	3,0
 12829  0613  2E15               	goto	u7481
 12830  0614  2E16               	goto	u7480
 12831  0615                     u7481:
 12832  0615  2DE6               	goto	l6508
 12833  0616                     u7480:
 12834  0616                     l6518:
 12835  0616  0020               	movlb	0	; select bank0
 12836  0617  0836               	movf	sprintf@f+1,w
 12837  0618  00BE               	movwf	??_sprintf+1
 12838  0619  0835               	movf	sprintf@f,w
 12839  061A  00BD               	movwf	??_sprintf
 12840  061B  0AB5               	incf	sprintf@f,f
 12841  061C  1903               	skipnz
 12842  061D  0AB6               	incf	sprintf@f+1,f
 12843  061E  083D               	movf	??_sprintf,w
 12844  061F  0084               	movwf	4
 12845  0620  083E               	movf	??_sprintf+1,w
 12846  0621  0085               	movwf	5
 12847  0622  0800               	movf	0,w	;code access
 12848  0623  00C8               	movwf	sprintf@c
 12849                           
 12850                           ; Switch size 1, requested type "simple"
 12851                           ; Number of cases is 3, Range of values is 0 to 105
 12852                           ; switch strategies available:
 12853                           ; Name         Instructions Cycles
 12854                           ; simple_byte           10     6 (average)
 12855                           ; direct_byte          218     6 (fixed)
 12856                           ; jumptable            260     6 (fixed)
 12857                           ;	Chosen strategy is simple_byte
 12858  0624  3A00               	xorlw	0	; case 0
 12859  0625  1903               	skipnz
 12860  0626  2F45               	goto	l6594
 12861  0627  3A64               	xorlw	100	; case 100
 12862  0628  1903               	skipnz
 12863  0629  2E2E               	goto	l6520
 12864  062A  3A0D               	xorlw	13	; case 105
 12865  062B  1903               	skipnz
 12866  062C  2E2E               	goto	l6520
 12867  062D  2F31               	goto	l6592
 12868  062E                     l6520:
 12869                           
 12870                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
 12871  062E  0841               	movf	sprintf@ap,w
 12872  062F  0086               	movwf	6
 12873  0630  0187               	clrf	7
 12874  0631  3F40               	moviw [0]fsr1
 12875  0632  00C3               	movwf	sprintf@val
 12876  0633  3F41               	moviw [1]fsr1
 12877  0634  00C4               	movwf	sprintf@val+1
 12878  0635                     l6522:
 12879  0635  3002               	movlw	2
 12880  0636  00BD               	movwf	??_sprintf
 12881  0637  083D               	movf	??_sprintf,w
 12882  0638  07C1               	addwf	sprintf@ap,f
 12883  0639                     l6524:
 12884                           
 12885                           ;doprnt.c: 1287: if((int)val < 0) {
 12886  0639  1FC4               	btfss	sprintf@val+1,7
 12887  063A  2E3C               	goto	u7491
 12888  063B  2E3D               	goto	u7490
 12889  063C                     u7491:
 12890  063C  2E46               	goto	l6530
 12891  063D                     u7490:
 12892  063D                     l6526:
 12893                           
 12894                           ;doprnt.c: 1288: flag |= 0x03;
 12895  063D  3003               	movlw	3
 12896  063E  00BD               	movwf	??_sprintf
 12897  063F  083D               	movf	??_sprintf,w
 12898  0640  04C5               	iorwf	sprintf@flag,f
 12899  0641                     l6528:
 12900                           
 12901                           ;doprnt.c: 1289: val = -val;
 12902  0641  09C3               	comf	sprintf@val,f
 12903  0642  09C4               	comf	sprintf@val+1,f
 12904  0643  0AC3               	incf	sprintf@val,f
 12905  0644  1903               	skipnz
 12906  0645  0AC4               	incf	sprintf@val+1,f
 12907  0646                     l6530:
 12908                           
 12909                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
 12910  0646  01C8               	clrf	sprintf@c
 12911  0647  0AC8               	incf	sprintf@c,f
 12912  0648                     l6536:
 12913                           
 12914                           ;doprnt.c: 1332: if(val < dpowers[c])
 12915  0648  0848               	movf	sprintf@c,w
 12916  0649  00BD               	movwf	??_sprintf
 12917  064A  01BE               	clrf	??_sprintf+1
 12918  064B  35BD               	lslf	??_sprintf,f
 12919  064C  0DBE               	rlf	??_sprintf+1,f
 12920  064D  3036               	movlw	low (_dpowers| (0+32768))
 12921  064E  073D               	addwf	??_sprintf,w
 12922  064F  0084               	movwf	4
 12923  0650  3098               	movlw	high (_dpowers| (0+32768))
 12924  0651  3D3E               	addwfc	??_sprintf+1,w
 12925  0652  0085               	movwf	5
 12926  0653  3F00               	moviw [0]fsr0
 12927  0654  00BF               	movwf	??_sprintf+2
 12928  0655  3F01               	moviw [1]fsr0
 12929  0656  00C0               	movwf	??_sprintf+3
 12930  0657  0840               	movf	??_sprintf+3,w
 12931  0658  0244               	subwf	sprintf@val+1,w
 12932  0659  1D03               	skipz
 12933  065A  2E5D               	goto	u7505
 12934  065B  083F               	movf	??_sprintf+2,w
 12935  065C  0243               	subwf	sprintf@val,w
 12936  065D                     u7505:
 12937  065D  1803               	skipnc
 12938  065E  2E60               	goto	u7501
 12939  065F  2E61               	goto	u7500
 12940  0660                     u7501:
 12941  0660  2E62               	goto	l6540
 12942  0661                     u7500:
 12943  0661  2E6C               	goto	l6542
 12944  0662                     l6540:
 12945  0662  3001               	movlw	1
 12946  0663  00BD               	movwf	??_sprintf
 12947  0664  083D               	movf	??_sprintf,w
 12948  0665  07C8               	addwf	sprintf@c,f
 12949  0666  3005               	movlw	5
 12950  0667  0648               	xorwf	sprintf@c,w
 12951  0668  1D03               	btfss	3,2
 12952  0669  2E6B               	goto	u7511
 12953  066A  2E6C               	goto	u7510
 12954  066B                     u7511:
 12955  066B  2E48               	goto	l6536
 12956  066C                     u7510:
 12957  066C                     l6542:
 12958                           
 12959                           ;doprnt.c: 1371: if(width && flag & 0x03)
 12960  066C  0846               	movf	sprintf@width,w
 12961  066D  0447               	iorwf	sprintf@width+1,w
 12962  066E  1903               	btfsc	3,2
 12963  066F  2E71               	goto	u7521
 12964  0670  2E72               	goto	u7520
 12965  0671                     u7521:
 12966  0671  2E7C               	goto	l1764
 12967  0672                     u7520:
 12968  0672                     l6544:
 12969  0672  0845               	movf	sprintf@flag,w
 12970  0673  3903               	andlw	3
 12971  0674  1903               	btfsc	3,2
 12972  0675  2E77               	goto	u7531
 12973  0676  2E78               	goto	u7530
 12974  0677                     u7531:
 12975  0677  2E7C               	goto	l1764
 12976  0678                     u7530:
 12977  0678                     l6546:
 12978                           
 12979                           ;doprnt.c: 1372: width--;
 12980  0678  30FF               	movlw	255
 12981  0679  07C6               	addwf	sprintf@width,f
 12982  067A  30FF               	movlw	255
 12983  067B  3DC7               	addwfc	sprintf@width+1,f
 12984  067C                     l1764:
 12985                           
 12986                           ;doprnt.c: 1407: if(width > c)
 12987  067C  0847               	movf	sprintf@width+1,w
 12988  067D  3A80               	xorlw	128
 12989  067E  3C80               	sublw	128
 12990  067F  1D03               	skipz
 12991  0680  2E83               	goto	u7545
 12992  0681  0846               	movf	sprintf@width,w
 12993  0682  0248               	subwf	sprintf@c,w
 12994  0683                     u7545:
 12995  0683  1803               	skipnc
 12996  0684  2E86               	goto	u7541
 12997  0685  2E87               	goto	u7540
 12998  0686                     u7541:
 12999  0686  2E90               	goto	l6550
 13000  0687                     u7540:
 13001  0687                     l6548:
 13002                           
 13003                           ;doprnt.c: 1408: width -= c;
 13004  0687  0020               	movlb	0	; select bank0
 13005  0688  0848               	movf	sprintf@c,w
 13006  0689  00BD               	movwf	??_sprintf
 13007  068A  01BE               	clrf	??_sprintf+1
 13008  068B  083D               	movf	??_sprintf,w
 13009  068C  02C6               	subwf	sprintf@width,f
 13010  068D  083E               	movf	??_sprintf+1,w
 13011  068E  3BC7               	subwfb	sprintf@width+1,f
 13012  068F  2E93               	goto	l6552
 13013  0690                     l6550:
 13014                           
 13015                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
 13016  0690  0020               	movlb	0	; select bank0
 13017  0691  01C6               	clrf	sprintf@width
 13018  0692  01C7               	clrf	sprintf@width+1
 13019  0693                     l6552:
 13020                           
 13021                           ;doprnt.c: 1413: if(flag & 0x04) {
 13022  0693  1D45               	btfss	sprintf@flag,2
 13023  0694  2E96               	goto	u7551
 13024  0695  2E97               	goto	u7550
 13025  0696                     u7551:
 13026  0696  2EC4               	goto	l6568
 13027  0697                     u7550:
 13028  0697                     l6554:
 13029                           
 13030                           ;doprnt.c: 1418: if(flag & 0x03)
 13031  0697  0845               	movf	sprintf@flag,w
 13032  0698  3903               	andlw	3
 13033  0699  1903               	btfsc	3,2
 13034  069A  2E9C               	goto	u7561
 13035  069B  2E9D               	goto	u7560
 13036  069C                     u7561:
 13037  069C  2EA8               	goto	l6560
 13038  069D                     u7560:
 13039  069D                     l6556:
 13040                           
 13041                           ;doprnt.c: 1419: ((*sp++ = ('-')));
 13042  069D  302D               	movlw	45
 13043  069E  00BD               	movwf	??_sprintf
 13044  069F  0849               	movf	sprintf@sp,w
 13045  06A0  0086               	movwf	6
 13046  06A1  0187               	clrf	7
 13047  06A2  083D               	movf	??_sprintf,w
 13048  06A3  0081               	movwf	1
 13049  06A4                     l6558:
 13050  06A4  3001               	movlw	1
 13051  06A5  00BD               	movwf	??_sprintf
 13052  06A6  083D               	movf	??_sprintf,w
 13053  06A7  07C9               	addwf	sprintf@sp,f
 13054  06A8                     l6560:
 13055                           
 13056                           ;doprnt.c: 1441: if(width)
 13057  06A8  0846               	movf	sprintf@width,w
 13058  06A9  0447               	iorwf	sprintf@width+1,w
 13059  06AA  1903               	btfsc	3,2
 13060  06AB  2EAD               	goto	u7571
 13061  06AC  2EAE               	goto	u7570
 13062  06AD                     u7571:
 13063  06AD  2EF0               	goto	l6582
 13064  06AE                     u7570:
 13065  06AE                     l6562:
 13066                           
 13067                           ;doprnt.c: 1443: ((*sp++ = ('0')));
 13068  06AE  3030               	movlw	48
 13069  06AF  00BD               	movwf	??_sprintf
 13070  06B0  0849               	movf	sprintf@sp,w
 13071  06B1  0086               	movwf	6
 13072  06B2  0187               	clrf	7
 13073  06B3  083D               	movf	??_sprintf,w
 13074  06B4  0081               	movwf	1
 13075  06B5                     l6564:
 13076  06B5  3001               	movlw	1
 13077  06B6  00BD               	movwf	??_sprintf
 13078  06B7  083D               	movf	??_sprintf,w
 13079  06B8  07C9               	addwf	sprintf@sp,f
 13080  06B9                     l6566:
 13081                           
 13082                           ;doprnt.c: 1444: while(--width);
 13083  06B9  30FF               	movlw	255
 13084  06BA  07C6               	addwf	sprintf@width,f
 13085  06BB  30FF               	movlw	255
 13086  06BC  3DC7               	addwfc	sprintf@width+1,f
 13087  06BD  0846               	movf	sprintf@width,w
 13088  06BE  0447               	iorwf	sprintf@width+1,w
 13089  06BF  1D03               	btfss	3,2
 13090  06C0  2EC2               	goto	u7581
 13091  06C1  2EC3               	goto	u7580
 13092  06C2                     u7581:
 13093  06C2  2EAE               	goto	l6562
 13094  06C3                     u7580:
 13095  06C3  2EF0               	goto	l6582
 13096  06C4                     l6568:
 13097                           
 13098                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
 13099  06C4  0846               	movf	sprintf@width,w
 13100  06C5  0447               	iorwf	sprintf@width+1,w
 13101  06C6  1903               	btfsc	3,2
 13102  06C7  2EC9               	goto	u7591
 13103  06C8  2ECA               	goto	u7590
 13104  06C9                     u7591:
 13105  06C9  2EDF               	goto	l6576
 13106  06CA                     u7590:
 13107  06CA                     l6570:
 13108                           
 13109                           ;doprnt.c: 1456: ((*sp++ = (' ')));
 13110  06CA  3020               	movlw	32
 13111  06CB  00BD               	movwf	??_sprintf
 13112  06CC  0849               	movf	sprintf@sp,w
 13113  06CD  0086               	movwf	6
 13114  06CE  0187               	clrf	7
 13115  06CF  083D               	movf	??_sprintf,w
 13116  06D0  0081               	movwf	1
 13117  06D1                     l6572:
 13118  06D1  3001               	movlw	1
 13119  06D2  00BD               	movwf	??_sprintf
 13120  06D3  083D               	movf	??_sprintf,w
 13121  06D4  07C9               	addwf	sprintf@sp,f
 13122  06D5                     l6574:
 13123                           
 13124                           ;doprnt.c: 1457: while(--width);
 13125  06D5  30FF               	movlw	255
 13126  06D6  07C6               	addwf	sprintf@width,f
 13127  06D7  30FF               	movlw	255
 13128  06D8  3DC7               	addwfc	sprintf@width+1,f
 13129  06D9  0846               	movf	sprintf@width,w
 13130  06DA  0447               	iorwf	sprintf@width+1,w
 13131  06DB  1D03               	btfss	3,2
 13132  06DC  2EDE               	goto	u7601
 13133  06DD  2EDF               	goto	u7600
 13134  06DE                     u7601:
 13135  06DE  2ECA               	goto	l6570
 13136  06DF                     u7600:
 13137  06DF                     l6576:
 13138                           
 13139                           ;doprnt.c: 1464: if(flag & 0x03)
 13140  06DF  0845               	movf	sprintf@flag,w
 13141  06E0  3903               	andlw	3
 13142  06E1  1903               	btfsc	3,2
 13143  06E2  2EE4               	goto	u7611
 13144  06E3  2EE5               	goto	u7610
 13145  06E4                     u7611:
 13146  06E4  2EF0               	goto	l6582
 13147  06E5                     u7610:
 13148  06E5                     l6578:
 13149                           
 13150                           ;doprnt.c: 1465: ((*sp++ = ('-')));
 13151  06E5  302D               	movlw	45
 13152  06E6  00BD               	movwf	??_sprintf
 13153  06E7  0849               	movf	sprintf@sp,w
 13154  06E8  0086               	movwf	6
 13155  06E9  0187               	clrf	7
 13156  06EA  083D               	movf	??_sprintf,w
 13157  06EB  0081               	movwf	1
 13158  06EC                     l6580:
 13159  06EC  3001               	movlw	1
 13160  06ED  00BD               	movwf	??_sprintf
 13161  06EE  083D               	movf	??_sprintf,w
 13162  06EF  07C9               	addwf	sprintf@sp,f
 13163  06F0                     l6582:
 13164                           
 13165                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
 13166  06F0  0848               	movf	sprintf@c,w
 13167  06F1  00BD               	movwf	??_sprintf
 13168  06F2  083D               	movf	??_sprintf,w
 13169  06F3  00C2               	movwf	sprintf@prec
 13170                           
 13171                           ;doprnt.c: 1500: while(prec--) {
 13172  06F4  2F28               	goto	l6590
 13173  06F5                     l6584:
 13174                           
 13175                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
 13176  06F5  300A               	movlw	10
 13177  06F6  00AF               	movwf	___lwmod@divisor
 13178  06F7  3000               	movlw	0
 13179  06F8  00B0               	movwf	___lwmod@divisor+1
 13180  06F9  0842               	movf	sprintf@prec,w
 13181  06FA  00BD               	movwf	??_sprintf
 13182  06FB  01BE               	clrf	??_sprintf+1
 13183  06FC  35BD               	lslf	??_sprintf,f
 13184  06FD  0DBE               	rlf	??_sprintf+1,f
 13185  06FE  3036               	movlw	low (_dpowers| (0+32768))
 13186  06FF  073D               	addwf	??_sprintf,w
 13187  0700  0084               	movwf	4
 13188  0701  3098               	movlw	high (_dpowers| (0+32768))
 13189  0702  3D3E               	addwfc	??_sprintf+1,w
 13190  0703  0085               	movwf	5
 13191  0704  3F00               	moviw [0]fsr0
 13192  0705  00A7               	movwf	___lwdiv@divisor
 13193  0706  3F01               	moviw [1]fsr0
 13194  0707  00A8               	movwf	___lwdiv@divisor+1
 13195  0708  0844               	movf	sprintf@val+1,w
 13196  0709  00AA               	movwf	___lwdiv@dividend+1
 13197  070A  0843               	movf	sprintf@val,w
 13198  070B  00A9               	movwf	___lwdiv@dividend
 13199  070C  3194  241C  3185   	fcall	___lwdiv
 13200  070F  0020               	movlb	0	; select bank0
 13201  0710  0828               	movf	?___lwdiv+1,w
 13202  0711  00B2               	movwf	___lwmod@dividend+1
 13203  0712  0827               	movf	?___lwdiv,w
 13204  0713  00B1               	movwf	___lwmod@dividend
 13205  0714  3193  2343  3185   	fcall	___lwmod
 13206  0717  0020               	movlb	0	; select bank0
 13207  0718  082F               	movf	?___lwmod,w
 13208  0719  3E30               	addlw	48
 13209  071A  00BF               	movwf	??_sprintf+2
 13210  071B  083F               	movf	??_sprintf+2,w
 13211  071C  00C8               	movwf	sprintf@c
 13212  071D                     l6586:
 13213                           
 13214                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
 13215  071D  0848               	movf	sprintf@c,w
 13216  071E  00BD               	movwf	??_sprintf
 13217  071F  0849               	movf	sprintf@sp,w
 13218  0720  0086               	movwf	6
 13219  0721  0187               	clrf	7
 13220  0722  083D               	movf	??_sprintf,w
 13221  0723  0081               	movwf	1
 13222  0724                     l6588:
 13223  0724  3001               	movlw	1
 13224  0725  00BD               	movwf	??_sprintf
 13225  0726  083D               	movf	??_sprintf,w
 13226  0727  07C9               	addwf	sprintf@sp,f
 13227  0728                     l6590:
 13228  0728  30FF               	movlw	255
 13229  0729  00BD               	movwf	??_sprintf
 13230  072A  083D               	movf	??_sprintf,w
 13231  072B  07C2               	addwf	sprintf@prec,f
 13232  072C  0A42               	incf	sprintf@prec,w
 13233  072D  1D03               	btfss	3,2
 13234  072E  2F30               	goto	u7621
 13235  072F  2F31               	goto	u7620
 13236  0730                     u7621:
 13237  0730  2EF5               	goto	l6584
 13238  0731                     u7620:
 13239  0731                     l6592:
 13240  0731  0836               	movf	sprintf@f+1,w
 13241  0732  00BE               	movwf	??_sprintf+1
 13242  0733  0835               	movf	sprintf@f,w
 13243  0734  00BD               	movwf	??_sprintf
 13244  0735  0AB5               	incf	sprintf@f,f
 13245  0736  1903               	skipnz
 13246  0737  0AB6               	incf	sprintf@f+1,f
 13247  0738  083D               	movf	??_sprintf,w
 13248  0739  0084               	movwf	4
 13249  073A  083E               	movf	??_sprintf+1,w
 13250  073B  0085               	movwf	5
 13251  073C  0800               	movf	0,w	;code access
 13252  073D  00BF               	movwf	??_sprintf+2
 13253  073E  083F               	movf	??_sprintf+2,w
 13254  073F  00C8               	movwf	sprintf@c
 13255  0740  0848               	movf	sprintf@c,w
 13256  0741  1D03               	btfss	3,2
 13257  0742  2F44               	goto	u7631
 13258  0743  2F45               	goto	u7630
 13259  0744                     u7631:
 13260  0744  2DB3               	goto	l6490
 13261  0745                     u7630:
 13262  0745                     l6594:
 13263                           
 13264                           ;doprnt.c: 1564: *sp = 0;
 13265  0745  0849               	movf	sprintf@sp,w
 13266  0746  0086               	movwf	6
 13267  0747  0187               	clrf	7
 13268  0748  0181               	clrf	1
 13269  0749                     l1781:
 13270  0749  0008               	return
 13271  074A                     __end_of_sprintf:
 13272                           
 13273                           	psect	text13
 13274  07EB                     __ptext13:	
 13275 ;; *************** function _isdigit *****************
 13276 ;; Defined at:
 13277 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
 13278 ;; Parameters:    Size  Location     Type
 13279 ;;  c               1    wreg     unsigned char 
 13280 ;; Auto vars:     Size  Location     Type
 13281 ;;  c               1    8[BANK0 ] unsigned char 
 13282 ;; Return value:  Size  Location     Type
 13283 ;;		None               void
 13284 ;; Registers used:
 13285 ;;		wreg, status,2, status,0
 13286 ;; Tracked objects:
 13287 ;;		On entry : 0/0
 13288 ;;		On exit  : 0/0
 13289 ;;		Unchanged: 0/0
 13290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;Total ram usage:        2 bytes
 13296 ;; Hardware stack levels used:    1
 13297 ;; Hardware stack levels required when called:    4
 13298 ;; This function calls:
 13299 ;;		Nothing
 13300 ;; This function is called by:
 13301 ;;		_sprintf
 13302 ;; This function uses a non-reentrant model
 13303 ;;
 13304                           
 13305                           
 13306                           ;psect for function _isdigit
 13307  07EB                     _isdigit:
 13308                           
 13309                           ;incstack = 0
 13310                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 13311                           ;isdigit@c stored from wreg
 13312  07EB  0020               	movlb	0	; select bank0
 13313  07EC  00A8               	movwf	isdigit@c
 13314  07ED                     l6296:
 13315  07ED  01A7               	clrf	_isdigit$2993
 13316  07EE                     l6298:
 13317  07EE  303A               	movlw	58
 13318  07EF  0228               	subwf	isdigit@c,w
 13319  07F0  1803               	skipnc
 13320  07F1  2FF3               	goto	u6961
 13321  07F2  2FF4               	goto	u6960
 13322  07F3                     u6961:
 13323  07F3  2FFC               	goto	l6304
 13324  07F4                     u6960:
 13325  07F4                     l6300:
 13326  07F4  3030               	movlw	48
 13327  07F5  0228               	subwf	isdigit@c,w
 13328  07F6  1C03               	skipc
 13329  07F7  2FF9               	goto	u6971
 13330  07F8  2FFA               	goto	u6970
 13331  07F9                     u6971:
 13332  07F9  2FFC               	goto	l6304
 13333  07FA                     u6970:
 13334  07FA                     l6302:
 13335  07FA  01A7               	clrf	_isdigit$2993
 13336  07FB  0AA7               	incf	_isdigit$2993,f
 13337  07FC                     l6304:
 13338  07FC  0C27               	rrf	_isdigit$2993,w
 13339  07FD                     l2238:
 13340  07FD  0008               	return
 13341  07FE                     __end_of_isdigit:
 13342                           
 13343                           	psect	text14
 13344  1343                     __ptext14:	
 13345 ;; *************** function ___lwmod *****************
 13346 ;; Defined at:
 13347 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
 13348 ;; Parameters:    Size  Location     Type
 13349 ;;  divisor         2   15[BANK0 ] unsigned int 
 13350 ;;  dividend        2   17[BANK0 ] unsigned int 
 13351 ;; Auto vars:     Size  Location     Type
 13352 ;;  counter         1   20[BANK0 ] unsigned char 
 13353 ;; Return value:  Size  Location     Type
 13354 ;;                  2   15[BANK0 ] unsigned int 
 13355 ;; Registers used:
 13356 ;;		wreg, status,2, status,0
 13357 ;; Tracked objects:
 13358 ;;		On entry : 0/0
 13359 ;;		On exit  : 0/0
 13360 ;;		Unchanged: 0/0
 13361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13362 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13364 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13365 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13366 ;;Total ram usage:        6 bytes
 13367 ;; Hardware stack levels used:    1
 13368 ;; Hardware stack levels required when called:    4
 13369 ;; This function calls:
 13370 ;;		Nothing
 13371 ;; This function is called by:
 13372 ;;		_sprintf
 13373 ;; This function uses a non-reentrant model
 13374 ;;
 13375                           
 13376                           
 13377                           ;psect for function ___lwmod
 13378  1343                     ___lwmod:
 13379  1343                     l6348:	
 13380                           ;incstack = 0
 13381                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13382                           
 13383  1343  0020               	movlb	0	; select bank0
 13384  1344  082F               	movf	___lwmod@divisor,w
 13385  1345  0430               	iorwf	___lwmod@divisor+1,w
 13386  1346  1903               	btfsc	3,2
 13387  1347  2B49               	goto	u7091
 13388  1348  2B4A               	goto	u7090
 13389  1349                     u7091:
 13390  1349  2B73               	goto	l6366
 13391  134A                     u7090:
 13392  134A                     l6350:
 13393  134A  01B4               	clrf	___lwmod@counter
 13394  134B  0AB4               	incf	___lwmod@counter,f
 13395  134C  2B56               	goto	l6356
 13396  134D                     l6352:
 13397  134D  3001               	movlw	1
 13398  134E                     u7105:
 13399  134E  35AF               	lslf	___lwmod@divisor,f
 13400  134F  0DB0               	rlf	___lwmod@divisor+1,f
 13401  1350  0B89               	decfsz	9,f
 13402  1351  2B4E               	goto	u7105
 13403  1352                     l6354:
 13404  1352  3001               	movlw	1
 13405  1353  00B3               	movwf	??___lwmod
 13406  1354  0833               	movf	??___lwmod,w
 13407  1355  07B4               	addwf	___lwmod@counter,f
 13408  1356                     l6356:
 13409  1356  1FB0               	btfss	___lwmod@divisor+1,7
 13410  1357  2B59               	goto	u7111
 13411  1358  2B5A               	goto	u7110
 13412  1359                     u7111:
 13413  1359  2B4D               	goto	l6352
 13414  135A                     u7110:
 13415  135A                     l6358:
 13416  135A  0830               	movf	___lwmod@divisor+1,w
 13417  135B  0232               	subwf	___lwmod@dividend+1,w
 13418  135C  1D03               	skipz
 13419  135D  2B60               	goto	u7125
 13420  135E  082F               	movf	___lwmod@divisor,w
 13421  135F  0231               	subwf	___lwmod@dividend,w
 13422  1360                     u7125:
 13423  1360  1C03               	skipc
 13424  1361  2B63               	goto	u7121
 13425  1362  2B64               	goto	u7120
 13426  1363                     u7121:
 13427  1363  2B68               	goto	l6362
 13428  1364                     u7120:
 13429  1364                     l6360:
 13430  1364  082F               	movf	___lwmod@divisor,w
 13431  1365  02B1               	subwf	___lwmod@dividend,f
 13432  1366  0830               	movf	___lwmod@divisor+1,w
 13433  1367  3BB2               	subwfb	___lwmod@dividend+1,f
 13434  1368                     l6362:
 13435  1368  3001               	movlw	1
 13436  1369                     u7135:
 13437  1369  36B0               	lsrf	___lwmod@divisor+1,f
 13438  136A  0CAF               	rrf	___lwmod@divisor,f
 13439  136B  0B89               	decfsz	9,f
 13440  136C  2B69               	goto	u7135
 13441  136D                     l6364:
 13442  136D  3001               	movlw	1
 13443  136E  02B4               	subwf	___lwmod@counter,f
 13444  136F  1D03               	btfss	3,2
 13445  1370  2B72               	goto	u7141
 13446  1371  2B73               	goto	u7140
 13447  1372                     u7141:
 13448  1372  2B5A               	goto	l6358
 13449  1373                     u7140:
 13450  1373                     l6366:
 13451  1373  0832               	movf	___lwmod@dividend+1,w
 13452  1374  00B0               	movwf	?___lwmod+1
 13453  1375  0831               	movf	___lwmod@dividend,w
 13454  1376  00AF               	movwf	?___lwmod
 13455  1377                     l2067:
 13456  1377  0008               	return
 13457  1378                     __end_of___lwmod:
 13458                           
 13459                           	psect	text15
 13460  141C                     __ptext15:	
 13461 ;; *************** function ___lwdiv *****************
 13462 ;; Defined at:
 13463 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;  divisor         2    7[BANK0 ] unsigned int 
 13466 ;;  dividend        2    9[BANK0 ] unsigned int 
 13467 ;; Auto vars:     Size  Location     Type
 13468 ;;  quotient        2   13[BANK0 ] unsigned int 
 13469 ;;  counter         1   12[BANK0 ] unsigned char 
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  2    7[BANK0 ] unsigned int 
 13472 ;; Registers used:
 13473 ;;		wreg, status,2, status,0
 13474 ;; Tracked objects:
 13475 ;;		On entry : 0/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13479 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13480 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;Total ram usage:        8 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:    4
 13486 ;; This function calls:
 13487 ;;		Nothing
 13488 ;; This function is called by:
 13489 ;;		_sprintf
 13490 ;; This function uses a non-reentrant model
 13491 ;;
 13492                           
 13493                           
 13494                           ;psect for function ___lwdiv
 13495  141C                     ___lwdiv:
 13496  141C                     l6322:	
 13497                           ;incstack = 0
 13498                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13499                           
 13500  141C  0020               	movlb	0	; select bank0
 13501  141D  01AD               	clrf	___lwdiv@quotient
 13502  141E  01AE               	clrf	___lwdiv@quotient+1
 13503  141F                     l6324:
 13504  141F  0827               	movf	___lwdiv@divisor,w
 13505  1420  0428               	iorwf	___lwdiv@divisor+1,w
 13506  1421  1903               	btfsc	3,2
 13507  1422  2C24               	goto	u7021
 13508  1423  2C25               	goto	u7020
 13509  1424                     u7021:
 13510  1424  2C54               	goto	l6344
 13511  1425                     u7020:
 13512  1425                     l6326:
 13513  1425  01AC               	clrf	___lwdiv@counter
 13514  1426  0AAC               	incf	___lwdiv@counter,f
 13515  1427  2C31               	goto	l6332
 13516  1428                     l6328:
 13517  1428  3001               	movlw	1
 13518  1429                     u7035:
 13519  1429  35A7               	lslf	___lwdiv@divisor,f
 13520  142A  0DA8               	rlf	___lwdiv@divisor+1,f
 13521  142B  0B89               	decfsz	9,f
 13522  142C  2C29               	goto	u7035
 13523  142D                     l6330:
 13524  142D  3001               	movlw	1
 13525  142E  00AB               	movwf	??___lwdiv
 13526  142F  082B               	movf	??___lwdiv,w
 13527  1430  07AC               	addwf	___lwdiv@counter,f
 13528  1431                     l6332:
 13529  1431  1FA8               	btfss	___lwdiv@divisor+1,7
 13530  1432  2C34               	goto	u7041
 13531  1433  2C35               	goto	u7040
 13532  1434                     u7041:
 13533  1434  2C28               	goto	l6328
 13534  1435                     u7040:
 13535  1435                     l6334:
 13536  1435  3001               	movlw	1
 13537  1436                     u7055:
 13538  1436  35AD               	lslf	___lwdiv@quotient,f
 13539  1437  0DAE               	rlf	___lwdiv@quotient+1,f
 13540  1438  0B89               	decfsz	9,f
 13541  1439  2C36               	goto	u7055
 13542  143A  0828               	movf	___lwdiv@divisor+1,w
 13543  143B  022A               	subwf	___lwdiv@dividend+1,w
 13544  143C  1D03               	skipz
 13545  143D  2C40               	goto	u7065
 13546  143E  0827               	movf	___lwdiv@divisor,w
 13547  143F  0229               	subwf	___lwdiv@dividend,w
 13548  1440                     u7065:
 13549  1440  1C03               	skipc
 13550  1441  2C43               	goto	u7061
 13551  1442  2C44               	goto	u7060
 13552  1443                     u7061:
 13553  1443  2C49               	goto	l6340
 13554  1444                     u7060:
 13555  1444                     l6336:
 13556  1444  0827               	movf	___lwdiv@divisor,w
 13557  1445  02A9               	subwf	___lwdiv@dividend,f
 13558  1446  0828               	movf	___lwdiv@divisor+1,w
 13559  1447  3BAA               	subwfb	___lwdiv@dividend+1,f
 13560  1448                     l6338:
 13561  1448  142D               	bsf	___lwdiv@quotient,0
 13562  1449                     l6340:
 13563  1449  3001               	movlw	1
 13564  144A                     u7075:
 13565  144A  36A8               	lsrf	___lwdiv@divisor+1,f
 13566  144B  0CA7               	rrf	___lwdiv@divisor,f
 13567  144C  0B89               	decfsz	9,f
 13568  144D  2C4A               	goto	u7075
 13569  144E                     l6342:
 13570  144E  3001               	movlw	1
 13571  144F  02AC               	subwf	___lwdiv@counter,f
 13572  1450  1D03               	btfss	3,2
 13573  1451  2C53               	goto	u7081
 13574  1452  2C54               	goto	u7080
 13575  1453                     u7081:
 13576  1453  2C35               	goto	l6334
 13577  1454                     u7080:
 13578  1454                     l6344:
 13579  1454  082E               	movf	___lwdiv@quotient+1,w
 13580  1455  00A8               	movwf	?___lwdiv+1
 13581  1456  082D               	movf	___lwdiv@quotient,w
 13582  1457  00A7               	movwf	?___lwdiv
 13583  1458                     l2057:
 13584  1458  0008               	return
 13585  1459                     __end_of___lwdiv:
 13586                           
 13587                           	psect	text16
 13588  130E                     __ptext16:	
 13589 ;; *************** function _differenceBetweenTimePeriod *****************
 13590 ;; Defined at:
 13591 ;;		line 335 in file "main.c"
 13592 ;; Parameters:    Size  Location     Type
 13593 ;;  start           3    7[BANK0 ] struct Time
 13594 ;;  stop            3   10[BANK0 ] struct Time
 13595 ;;  diff            1   13[BANK0 ] PTR struct Time
 13596 ;;		 -> update_menuLCD@diff(3), 
 13597 ;; Auto vars:     Size  Location     Type
 13598 ;;		None
 13599 ;; Return value:  Size  Location     Type
 13600 ;;                  1    wreg      void 
 13601 ;; Registers used:
 13602 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13603 ;; Tracked objects:
 13604 ;;		On entry : 0/0
 13605 ;;		On exit  : 0/0
 13606 ;;		Unchanged: 0/0
 13607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13608 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;Total ram usage:        8 bytes
 13613 ;; Hardware stack levels used:    1
 13614 ;; Hardware stack levels required when called:    4
 13615 ;; This function calls:
 13616 ;;		Nothing
 13617 ;; This function is called by:
 13618 ;;		_update_menuLCD
 13619 ;; This function uses a non-reentrant model
 13620 ;;
 13621                           
 13622                           
 13623                           ;psect for function _differenceBetweenTimePeriod
 13624  130E                     _differenceBetweenTimePeriod:
 13625  130E                     l6472:	
 13626                           ;incstack = 0
 13627                           ; Regs used in _differenceBetweenTimePeriod: [wreg+fsr1l+fsr1h+status,2+status,0]
 13628                           
 13629                           
 13630                           ;main.c: 338: while (stop.s > start.s) {
 13631  130E  2B15               	goto	l6476
 13632  130F                     l6474:
 13633                           
 13634                           ;main.c: 339: --start.m;
 13635  130F  3001               	movlw	1
 13636  1310  02A8               	subwf	differenceBetweenTimePeriod@start+1,f
 13637                           
 13638                           ;main.c: 340: start.s += 60;
 13639  1311  303C               	movlw	60
 13640  1312  00AE               	movwf	??_differenceBetweenTimePeriod
 13641  1313  082E               	movf	??_differenceBetweenTimePeriod,w
 13642  1314  07A9               	addwf	differenceBetweenTimePeriod@start+2,f
 13643  1315                     l6476:
 13644  1315  0020               	movlb	0	; select bank0
 13645  1316  082C               	movf	differenceBetweenTimePeriod@stop+2,w
 13646  1317  0229               	subwf	differenceBetweenTimePeriod@start+2,w
 13647  1318  1C03               	skipc
 13648  1319  2B1B               	goto	u7441
 13649  131A  2B1C               	goto	u7440
 13650  131B                     u7441:
 13651  131B  2B0F               	goto	l6474
 13652  131C                     u7440:
 13653  131C                     l6478:
 13654                           
 13655                           ;main.c: 341: };main.c: 342: diff->s = start.s - stop.s;
 13656  131C  082C               	movf	differenceBetweenTimePeriod@stop+2,w
 13657  131D  0229               	subwf	differenceBetweenTimePeriod@start+2,w
 13658  131E  00AE               	movwf	??_differenceBetweenTimePeriod
 13659  131F  082D               	movf	differenceBetweenTimePeriod@diff,w
 13660  1320  3E02               	addlw	2
 13661  1321  0086               	movwf	6
 13662  1322  0187               	clrf	7
 13663  1323  082E               	movf	??_differenceBetweenTimePeriod,w
 13664  1324  0081               	movwf	1
 13665                           
 13666                           ;main.c: 343: while (stop.m > start.m) {
 13667  1325  2B2C               	goto	l6482
 13668  1326                     l6480:
 13669                           
 13670                           ;main.c: 344: --start.h;
 13671  1326  3001               	movlw	1
 13672  1327  02A7               	subwf	differenceBetweenTimePeriod@start,f
 13673                           
 13674                           ;main.c: 345: start.m += 60;
 13675  1328  303C               	movlw	60
 13676  1329  00AE               	movwf	??_differenceBetweenTimePeriod
 13677  132A  082E               	movf	??_differenceBetweenTimePeriod,w
 13678  132B  07A8               	addwf	differenceBetweenTimePeriod@start+1,f
 13679  132C                     l6482:
 13680  132C  082B               	movf	differenceBetweenTimePeriod@stop+1,w
 13681  132D  0228               	subwf	differenceBetweenTimePeriod@start+1,w
 13682  132E  1C03               	skipc
 13683  132F  2B31               	goto	u7451
 13684  1330  2B32               	goto	u7450
 13685  1331                     u7451:
 13686  1331  2B26               	goto	l6480
 13687  1332                     u7450:
 13688  1332                     l6484:
 13689                           
 13690                           ;main.c: 346: };main.c: 347: diff->m = start.m - stop.m;
 13691  1332  082B               	movf	differenceBetweenTimePeriod@stop+1,w
 13692  1333  0228               	subwf	differenceBetweenTimePeriod@start+1,w
 13693  1334  00AE               	movwf	??_differenceBetweenTimePeriod
 13694  1335  0A2D               	incf	differenceBetweenTimePeriod@diff,w
 13695  1336  0086               	movwf	6
 13696  1337  0187               	clrf	7
 13697  1338  082E               	movf	??_differenceBetweenTimePeriod,w
 13698  1339  0081               	movwf	1
 13699                           
 13700                           ;main.c: 348: diff->h = start.h - stop.h;
 13701  133A  082A               	movf	differenceBetweenTimePeriod@stop,w
 13702  133B  0227               	subwf	differenceBetweenTimePeriod@start,w
 13703  133C  00AE               	movwf	??_differenceBetweenTimePeriod
 13704  133D  082D               	movf	differenceBetweenTimePeriod@diff,w
 13705  133E  0086               	movwf	6
 13706  133F  0187               	clrf	7
 13707  1340  082E               	movf	??_differenceBetweenTimePeriod,w
 13708  1341  0081               	movwf	1
 13709  1342                     l1256:
 13710  1342  0008               	return
 13711  1343                     __end_of_differenceBetweenTimePeriod:
 13712                           
 13713                           	psect	text17
 13714  1EE6                     __ptext17:	
 13715 ;; *************** function _TMR2_StopTimer *****************
 13716 ;; Defined at:
 13717 ;;		line 117 in file "mcc_generated_files/tmr2.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;		None
 13720 ;; Auto vars:     Size  Location     Type
 13721 ;;		None
 13722 ;; Return value:  Size  Location     Type
 13723 ;;                  1    wreg      void 
 13724 ;; Registers used:
 13725 ;;		status,2, status,0, pclath, cstack
 13726 ;; Tracked objects:
 13727 ;;		On entry : 0/0
 13728 ;;		On exit  : 0/0
 13729 ;;		Unchanged: 0/0
 13730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;Total ram usage:        0 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; Hardware stack levels required when called:    5
 13738 ;; This function calls:
 13739 ;;		_TMR2_Stop
 13740 ;; This function is called by:
 13741 ;;		_update_menuLCD
 13742 ;;		_main
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746                           
 13747                           ;psect for function _TMR2_StopTimer
 13748  1EE6                     _TMR2_StopTimer:
 13749  1EE6                     l6388:	
 13750                           ;incstack = 0
 13751                           ; Regs used in _TMR2_StopTimer: [status,2+status,0+pclath+cstack]
 13752                           
 13753                           
 13754                           ;tmr2.c: 119: TMR2_Stop();
 13755  1EE6  319E  26DF  319E   	fcall	_TMR2_Stop
 13756  1EE9                     l665:
 13757  1EE9  0008               	return
 13758  1EEA                     __end_of_TMR2_StopTimer:
 13759                           
 13760                           	psect	text18
 13761  1EDF                     __ptext18:	
 13762 ;; *************** function _TMR2_Stop *****************
 13763 ;; Defined at:
 13764 ;;		line 111 in file "mcc_generated_files/tmr2.c"
 13765 ;; Parameters:    Size  Location     Type
 13766 ;;		None
 13767 ;; Auto vars:     Size  Location     Type
 13768 ;;		None
 13769 ;; Return value:  Size  Location     Type
 13770 ;;                  1    wreg      void 
 13771 ;; Registers used:
 13772 ;;		None
 13773 ;; Tracked objects:
 13774 ;;		On entry : 0/0
 13775 ;;		On exit  : 0/0
 13776 ;;		Unchanged: 0/0
 13777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;Total ram usage:        0 bytes
 13783 ;; Hardware stack levels used:    1
 13784 ;; Hardware stack levels required when called:    4
 13785 ;; This function calls:
 13786 ;;		Nothing
 13787 ;; This function is called by:
 13788 ;;		_TMR2_StopTimer
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           
 13793                           ;psect for function _TMR2_Stop
 13794  1EDF                     _TMR2_Stop:
 13795  1EDF                     l6274:	
 13796                           ;incstack = 0
 13797                           ; Regs used in _TMR2_Stop: []
 13798                           
 13799                           
 13800                           ;tmr2.c: 114: T2CONbits.TMR2ON = 0;
 13801  1EDF  0025               	movlb	5	; select bank5
 13802  1EE0  138E               	bcf	14,7	;volatile
 13803  1EE1                     l662:
 13804  1EE1  0008               	return
 13805  1EE2                     __end_of_TMR2_Stop:
 13806                           
 13807                           	psect	text19
 13808  1EDC                     __ptext19:	
 13809 ;; *************** function _PWM_Output_D4_Disable *****************
 13810 ;; Defined at:
 13811 ;;		line 355 in file "main.c"
 13812 ;; Parameters:    Size  Location     Type
 13813 ;;		None
 13814 ;; Auto vars:     Size  Location     Type
 13815 ;;		None
 13816 ;; Return value:  Size  Location     Type
 13817 ;;                  1    wreg      void 
 13818 ;; Registers used:
 13819 ;;		None
 13820 ;; Tracked objects:
 13821 ;;		On entry : 0/0
 13822 ;;		On exit  : 0/0
 13823 ;;		Unchanged: 0/0
 13824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13829 ;;Total ram usage:        0 bytes
 13830 ;; Hardware stack levels used:    1
 13831 ;; Hardware stack levels required when called:    4
 13832 ;; This function calls:
 13833 ;;		Nothing
 13834 ;; This function is called by:
 13835 ;;		_update_menuLCD
 13836 ;;		_main
 13837 ;; This function uses a non-reentrant model
 13838 ;;
 13839                           
 13840                           
 13841                           ;psect for function _PWM_Output_D4_Disable
 13842  1EDC                     _PWM_Output_D4_Disable:
 13843  1EDC                     l6486:	
 13844                           ;incstack = 0
 13845                           ; Regs used in _PWM_Output_D4_Disable: []
 13846                           
 13847                           
 13848                           ;main.c: 356: PWM6EN = 0;
 13849  1EDC  0027               	movlb	7	; select bank7
 13850  1EDD  138E               	bcf	14,7	;volatile
 13851  1EDE                     l1262:
 13852  1EDE  0008               	return
 13853  1EDF                     __end_of_PWM_Output_D4_Disable:
 13854                           
 13855                           	psect	text20
 13856  1000                     __ptext20:	
 13857 ;; *************** function _PWM6_LoadDutyValue *****************
 13858 ;; Defined at:
 13859 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 13860 ;; Parameters:    Size  Location     Type
 13861 ;;  dutyValue       2    7[BANK0 ] unsigned int 
 13862 ;; Auto vars:     Size  Location     Type
 13863 ;;		None
 13864 ;; Return value:  Size  Location     Type
 13865 ;;                  1    wreg      void 
 13866 ;; Registers used:
 13867 ;;		wreg, status,2, status,0
 13868 ;; Tracked objects:
 13869 ;;		On entry : 0/0
 13870 ;;		On exit  : 0/0
 13871 ;;		Unchanged: 0/0
 13872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13873 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13875 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13876 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;Total ram usage:        4 bytes
 13878 ;; Hardware stack levels used:    1
 13879 ;; Hardware stack levels required when called:    4
 13880 ;; This function calls:
 13881 ;;		Nothing
 13882 ;; This function is called by:
 13883 ;;		_update_menuLCD
 13884 ;;		_checkFlags
 13885 ;;		_main
 13886 ;; This function uses a non-reentrant model
 13887 ;;
 13888                           
 13889                           
 13890                           ;psect for function _PWM6_LoadDutyValue
 13891  1000                     _PWM6_LoadDutyValue:
 13892  1000                     l6384:	
 13893                           ;incstack = 0
 13894                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13895                           
 13896                           
 13897                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 13898  1000  0020               	movlb	0	; select bank0
 13899  1001  0828               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 13900  1002  00AA               	movwf	??_PWM6_LoadDutyValue+1
 13901  1003  0827               	movf	PWM6_LoadDutyValue@dutyValue,w
 13902  1004  00A9               	movwf	??_PWM6_LoadDutyValue
 13903  1005  36AA               	lsrf	??_PWM6_LoadDutyValue+1,f
 13904  1006  0CA9               	rrf	??_PWM6_LoadDutyValue,f
 13905  1007  36AA               	lsrf	??_PWM6_LoadDutyValue+1,f
 13906  1008  0CA9               	rrf	??_PWM6_LoadDutyValue,f
 13907  1009  0829               	movf	??_PWM6_LoadDutyValue,w
 13908  100A  0027               	movlb	7	; select bank7
 13909  100B  008D               	movwf	13	;volatile
 13910                           
 13911                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 13912  100C  0020               	movlb	0	; select bank0
 13913  100D  0827               	movf	PWM6_LoadDutyValue@dutyValue,w
 13914  100E  3903               	andlw	3
 13915  100F  00A9               	movwf	??_PWM6_LoadDutyValue
 13916  1010  3005               	movlw	5
 13917  1011                     u7165:
 13918  1011  35A9               	lslf	??_PWM6_LoadDutyValue,f
 13919  1012  3EFF               	addlw	-1
 13920  1013  1D03               	skipz
 13921  1014  2811               	goto	u7165
 13922  1015  3529               	lslf	??_PWM6_LoadDutyValue,w
 13923  1016  0027               	movlb	7	; select bank7
 13924  1017  008C               	movwf	12	;volatile
 13925  1018                     l620:
 13926  1018  0008               	return
 13927  1019                     __end_of_PWM6_LoadDutyValue:
 13928                           
 13929                           	psect	text21
 13930  104E                     __ptext21:	
 13931 ;; *************** function _LCDstr *****************
 13932 ;; Defined at:
 13933 ;;		line 321 in file "main.c"
 13934 ;; Parameters:    Size  Location     Type
 13935 ;;  p               2   16[BANK0 ] PTR unsigned char 
 13936 ;;		 -> STR_7(4), update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 13937 ;; Auto vars:     Size  Location     Type
 13938 ;;  c               1   21[BANK0 ] unsigned char 
 13939 ;; Return value:  Size  Location     Type
 13940 ;;                  1    wreg      void 
 13941 ;; Registers used:
 13942 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13943 ;; Tracked objects:
 13944 ;;		On entry : 0/0
 13945 ;;		On exit  : 0/0
 13946 ;;		Unchanged: 0/0
 13947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13948 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13950 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13951 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13952 ;;Total ram usage:        6 bytes
 13953 ;; Hardware stack levels used:    1
 13954 ;; Hardware stack levels required when called:    7
 13955 ;; This function calls:
 13956 ;;		_LCDchar
 13957 ;; This function is called by:
 13958 ;;		_update_menuLCD
 13959 ;; This function uses a non-reentrant model
 13960 ;;
 13961                           
 13962                           
 13963                           ;psect for function _LCDstr
 13964  104E                     _LCDstr:
 13965  104E                     l6466:	
 13966                           ;incstack = 0
 13967                           ; Regs used in _LCDstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13968                           
 13969                           
 13970                           ;main.c: 323: unsigned char c;;main.c: 325: while((c = *p++)) LCDchar(c);
 13971  104E  2853               	goto	l6470
 13972  104F                     l6468:
 13973  104F  0835               	movf	LCDstr@c,w
 13974  1050  319F  2747  3190   	fcall	_LCDchar
 13975  1053                     l6470:
 13976  1053  0020               	movlb	0	; select bank0
 13977  1054  0831               	movf	LCDstr@p+1,w
 13978  1055  00B3               	movwf	??_LCDstr+1
 13979  1056  0830               	movf	LCDstr@p,w
 13980  1057  00B2               	movwf	??_LCDstr
 13981  1058  0AB0               	incf	LCDstr@p,f
 13982  1059  1903               	skipnz
 13983  105A  0AB1               	incf	LCDstr@p+1,f
 13984  105B  0832               	movf	??_LCDstr,w
 13985  105C  0084               	movwf	4
 13986  105D  0833               	movf	??_LCDstr+1,w
 13987  105E  0085               	movwf	5
 13988  105F  0800               	movf	0,w	;code access
 13989  1060  00B4               	movwf	??_LCDstr+2
 13990  1061  0834               	movf	??_LCDstr+2,w
 13991  1062  00B5               	movwf	LCDstr@c
 13992  1063  0835               	movf	LCDstr@c,w
 13993  1064  1D03               	btfss	3,2
 13994  1065  2867               	goto	u7431
 13995  1066  2868               	goto	u7430
 13996  1067                     u7431:
 13997  1067  284F               	goto	l6468
 13998  1068                     u7430:
 13999  1068                     l1243:
 14000  1068  0008               	return
 14001  1069                     __end_of_LCDstr:
 14002                           
 14003                           	psect	text22
 14004  1F47                     __ptext22:	
 14005 ;; *************** function _LCDchar *****************
 14006 ;; Defined at:
 14007 ;;		line 316 in file "main.c"
 14008 ;; Parameters:    Size  Location     Type
 14009 ;;  c               1    wreg     unsigned char 
 14010 ;; Auto vars:     Size  Location     Type
 14011 ;;  c               1   15[BANK0 ] unsigned char 
 14012 ;; Return value:  Size  Location     Type
 14013 ;;                  1    wreg      void 
 14014 ;; Registers used:
 14015 ;;		wreg, status,2, status,0, pclath, cstack
 14016 ;; Tracked objects:
 14017 ;;		On entry : 0/0
 14018 ;;		On exit  : 0/0
 14019 ;;		Unchanged: 0/0
 14020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14025 ;;Total ram usage:        1 bytes
 14026 ;; Hardware stack levels used:    1
 14027 ;; Hardware stack levels required when called:    6
 14028 ;; This function calls:
 14029 ;;		_LCDsend2x4
 14030 ;; This function is called by:
 14031 ;;		_LCDstr
 14032 ;;		_update_menuLCD
 14033 ;; This function uses a non-reentrant model
 14034 ;;
 14035                           
 14036                           
 14037                           ;psect for function _LCDchar
 14038  1F47                     _LCDchar:
 14039                           
 14040                           ;incstack = 0
 14041                           ; Regs used in _LCDchar: [wreg+status,2+status,0+pclath+cstack]
 14042                           ;LCDchar@c stored from wreg
 14043  1F47  0020               	movlb	0	; select bank0
 14044  1F48  00AF               	movwf	LCDchar@c
 14045  1F49                     l6294:
 14046                           
 14047                           ;main.c: 318: LCDsend2x4(c, 0x01);
 14048  1F49  01A9               	clrf	LCDsend2x4@mode
 14049  1F4A  0AA9               	incf	LCDsend2x4@mode,f
 14050  1F4B  082F               	movf	LCDchar@c,w
 14051  1F4C  3189  213F  319F   	fcall	_LCDsend2x4
 14052  1F4F                     l1237:
 14053  1F4F  0008               	return
 14054  1F50                     __end_of_LCDchar:
 14055                           
 14056                           	psect	text23
 14057  1F09                     __ptext23:	
 14058 ;; *************** function _LCDcmd *****************
 14059 ;; Defined at:
 14060 ;;		line 311 in file "main.c"
 14061 ;; Parameters:    Size  Location     Type
 14062 ;;  c               1    wreg     unsigned char 
 14063 ;; Auto vars:     Size  Location     Type
 14064 ;;  c               1   15[BANK0 ] unsigned char 
 14065 ;; Return value:  Size  Location     Type
 14066 ;;                  1    wreg      void 
 14067 ;; Registers used:
 14068 ;;		wreg, status,2, status,0, pclath, cstack
 14069 ;; Tracked objects:
 14070 ;;		On entry : 0/0
 14071 ;;		On exit  : 0/0
 14072 ;;		Unchanged: 0/0
 14073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14077 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14078 ;;Total ram usage:        1 bytes
 14079 ;; Hardware stack levels used:    1
 14080 ;; Hardware stack levels required when called:    6
 14081 ;; This function calls:
 14082 ;;		_LCDsend2x4
 14083 ;; This function is called by:
 14084 ;;		_update_menuLCD
 14085 ;; This function uses a non-reentrant model
 14086 ;;
 14087                           
 14088                           
 14089                           ;psect for function _LCDcmd
 14090  1F09                     _LCDcmd:
 14091                           
 14092                           ;incstack = 0
 14093                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
 14094                           ;LCDcmd@c stored from wreg
 14095  1F09  0020               	movlb	0	; select bank0
 14096  1F0A  00AF               	movwf	LCDcmd@c
 14097  1F0B                     l6464:
 14098                           
 14099                           ;main.c: 313: LCDsend2x4(c, 0);
 14100  1F0B  01A9               	clrf	LCDsend2x4@mode
 14101  1F0C  082F               	movf	LCDcmd@c,w
 14102  1F0D  3189  213F  319F   	fcall	_LCDsend2x4
 14103  1F10                     l1234:
 14104  1F10  0008               	return
 14105  1F11                     __end_of_LCDcmd:
 14106                           
 14107                           	psect	text24
 14108  0E7F                     __ptext24:	
 14109 ;; *************** function _monitoring_TEMP_LUM *****************
 14110 ;; Defined at:
 14111 ;;		line 568 in file "main.c"
 14112 ;; Parameters:    Size  Location     Type
 14113 ;;		None
 14114 ;; Auto vars:     Size  Location     Type
 14115 ;;		None
 14116 ;; Return value:  Size  Location     Type
 14117 ;;                  1    wreg      void 
 14118 ;; Registers used:
 14119 ;;		wreg, status,2, status,0, pclath, cstack
 14120 ;; Tracked objects:
 14121 ;;		On entry : 0/0
 14122 ;;		On exit  : 0/0
 14123 ;;		Unchanged: 0/0
 14124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14127 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14128 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14129 ;;Total ram usage:        3 bytes
 14130 ;; Hardware stack levels used:    1
 14131 ;; Hardware stack levels required when called:    6
 14132 ;; This function calls:
 14133 ;;		_ADCC_GetSingleConversion
 14134 ;;		_DATAEE_WriteByte
 14135 ;;		___wmul
 14136 ;;		_tsttc
 14137 ;; This function is called by:
 14138 ;;		_checkFlags
 14139 ;; This function uses a non-reentrant model
 14140 ;;
 14141                           
 14142                           
 14143                           ;psect for function _monitoring_TEMP_LUM
 14144  0E7F                     _monitoring_TEMP_LUM:
 14145  0E7F                     l6750:	
 14146                           ;incstack = 0
 14147                           ; Regs used in _monitoring_TEMP_LUM: [wreg+status,2+status,0+pclath+cstack]
 14148                           
 14149                           
 14150                           ;main.c: 569: temp = (uint8_t)tsttc();
 14151  0E7F  318D  252F  318E   	fcall	_tsttc
 14152  0E82  0020               	movlb	0	; select bank0
 14153  0E83  00B1               	movwf	??_monitoring_TEMP_LUM
 14154  0E84  0831               	movf	??_monitoring_TEMP_LUM,w
 14155  0E85  00E2               	movwf	_temp
 14156                           
 14157                           ;main.c: 571: lumLevel = ADCC_GetSingleConversion(channel_ANA0) >> 13;
 14158  0E86  3000               	movlw	0
 14159  0E87  319F  27BC  318E   	fcall	_ADCC_GetSingleConversion
 14160  0E8A  0020               	movlb	0	; select bank0
 14161  0E8B  0827               	movf	?_ADCC_GetSingleConversion,w
 14162  0E8C  00B1               	movwf	??_monitoring_TEMP_LUM
 14163  0E8D  0828               	movf	?_ADCC_GetSingleConversion+1,w
 14164  0E8E  00B2               	movwf	??_monitoring_TEMP_LUM+1
 14165  0E8F  300D               	movlw	13
 14166  0E90                     u7935:
 14167  0E90  36B2               	lsrf	??_monitoring_TEMP_LUM+1,f
 14168  0E91  0CB1               	rrf	??_monitoring_TEMP_LUM,f
 14169  0E92  0B89               	decfsz	9,f
 14170  0E93  2E90               	goto	u7935
 14171  0E94  0831               	movf	??_monitoring_TEMP_LUM,w
 14172  0E95  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14173  0E96  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14174  0E97  00E1               	movwf	_lumLevel
 14175  0E98                     l6752:
 14176                           
 14177                           ;main.c: 573: if(prevTemp != temp || prevLumLevel != lumLevel){
 14178  0E98  0862               	movf	_temp,w
 14179  0E99  00B1               	movwf	??_monitoring_TEMP_LUM
 14180  0E9A  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14181  0E9B  0021               	movlb	1	; select bank1
 14182  0E9C  0854               	movf	(_prevTemp+1)^(0+128),w
 14183  0E9D  0020               	movlb	0	; select bank0
 14184  0E9E  0632               	xorwf	??_monitoring_TEMP_LUM+1,w
 14185  0E9F  1D03               	skipz
 14186  0EA0  2EA5               	goto	u7945
 14187  0EA1  0021               	movlb	1	; select bank1
 14188  0EA2  0853               	movf	_prevTemp^(0+128),w
 14189  0EA3  0020               	movlb	0	; select bank0
 14190  0EA4  0631               	xorwf	??_monitoring_TEMP_LUM,w
 14191  0EA5                     u7945:
 14192  0EA5  1D03               	skipz
 14193  0EA6  2EA8               	goto	u7941
 14194  0EA7  2EA9               	goto	u7940
 14195  0EA8                     u7941:
 14196  0EA8  2EBA               	goto	l6756
 14197  0EA9                     u7940:
 14198  0EA9                     l6754:
 14199  0EA9  0861               	movf	_lumLevel,w
 14200  0EAA  00B1               	movwf	??_monitoring_TEMP_LUM
 14201  0EAB  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14202  0EAC  0021               	movlb	1	; select bank1
 14203  0EAD  0852               	movf	(_prevLumLevel+1)^(0+128),w
 14204  0EAE  0020               	movlb	0	; select bank0
 14205  0EAF  0632               	xorwf	??_monitoring_TEMP_LUM+1,w
 14206  0EB0  1D03               	skipz
 14207  0EB1  2EB6               	goto	u7955
 14208  0EB2  0021               	movlb	1	; select bank1
 14209  0EB3  0851               	movf	_prevLumLevel^(0+128),w
 14210  0EB4  0020               	movlb	0	; select bank0
 14211  0EB5  0631               	xorwf	??_monitoring_TEMP_LUM,w
 14212  0EB6                     u7955:
 14213  0EB6  1903               	skipnz
 14214  0EB7  2EB9               	goto	u7951
 14215  0EB8  2EBA               	goto	u7950
 14216  0EB9                     u7951:
 14217  0EB9  2FB4               	goto	l6784
 14218  0EBA                     u7950:
 14219  0EBA                     l6756:
 14220                           
 14221                           ;main.c: 575: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x0 , t.h);
 14222  0EBA  087A               	movf	_iwrite,w
 14223  0EBB  00B1               	movwf	??_monitoring_TEMP_LUM
 14224  0EBC  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14225  0EBD  0831               	movf	??_monitoring_TEMP_LUM,w
 14226  0EBE  00A7               	movwf	___wmul@multiplier
 14227  0EBF  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14228  0EC0  00A8               	movwf	___wmul@multiplier+1
 14229  0EC1  3005               	movlw	5
 14230  0EC2  00A9               	movwf	___wmul@multiplicand
 14231  0EC3  3000               	movlw	0
 14232  0EC4  00AA               	movwf	___wmul@multiplicand+1
 14233  0EC5  3190  20FF  318E   	fcall	___wmul
 14234  0EC8  0020               	movlb	0	; select bank0
 14235  0EC9  0827               	movf	?___wmul,w
 14236  0ECA  3E12               	addlw	18
 14237  0ECB  00AD               	movwf	DATAEE_WriteByte@bAdd
 14238  0ECC  3070               	movlw	112
 14239  0ECD  3D28               	addwfc	?___wmul+1,w
 14240  0ECE  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 14241  0ECF  085A               	movf	_t,w
 14242  0ED0  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14243  0ED1  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14244  0ED2  00AF               	movwf	DATAEE_WriteByte@bData
 14245  0ED3  3191  21A4  318E   	fcall	_DATAEE_WriteByte
 14246                           
 14247                           ;main.c: 576: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x1 , t.m);
 14248  0ED6  087A               	movf	_iwrite,w
 14249  0ED7  0020               	movlb	0	; select bank0
 14250  0ED8  00B1               	movwf	??_monitoring_TEMP_LUM
 14251  0ED9  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14252  0EDA  0831               	movf	??_monitoring_TEMP_LUM,w
 14253  0EDB  00A7               	movwf	___wmul@multiplier
 14254  0EDC  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14255  0EDD  00A8               	movwf	___wmul@multiplier+1
 14256  0EDE  3005               	movlw	5
 14257  0EDF  00A9               	movwf	___wmul@multiplicand
 14258  0EE0  3000               	movlw	0
 14259  0EE1  00AA               	movwf	___wmul@multiplicand+1
 14260  0EE2  3190  20FF  318E   	fcall	___wmul
 14261  0EE5  0020               	movlb	0	; select bank0
 14262  0EE6  0827               	movf	?___wmul,w
 14263  0EE7  3E13               	addlw	19
 14264  0EE8  00AD               	movwf	DATAEE_WriteByte@bAdd
 14265  0EE9  3070               	movlw	112
 14266  0EEA  3D28               	addwfc	?___wmul+1,w
 14267  0EEB  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 14268  0EEC  085B               	movf	_t+1,w
 14269  0EED  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14270  0EEE  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14271  0EEF  00AF               	movwf	DATAEE_WriteByte@bData
 14272  0EF0  3191  21A4  318E   	fcall	_DATAEE_WriteByte
 14273                           
 14274                           ;main.c: 577: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x2 , t.s);
 14275  0EF3  087A               	movf	_iwrite,w
 14276  0EF4  0020               	movlb	0	; select bank0
 14277  0EF5  00B1               	movwf	??_monitoring_TEMP_LUM
 14278  0EF6  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14279  0EF7  0831               	movf	??_monitoring_TEMP_LUM,w
 14280  0EF8  00A7               	movwf	___wmul@multiplier
 14281  0EF9  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14282  0EFA  00A8               	movwf	___wmul@multiplier+1
 14283  0EFB  3005               	movlw	5
 14284  0EFC  00A9               	movwf	___wmul@multiplicand
 14285  0EFD  3000               	movlw	0
 14286  0EFE  00AA               	movwf	___wmul@multiplicand+1
 14287  0EFF  3190  20FF  318E   	fcall	___wmul
 14288  0F02  0020               	movlb	0	; select bank0
 14289  0F03  0827               	movf	?___wmul,w
 14290  0F04  3E14               	addlw	20
 14291  0F05  00AD               	movwf	DATAEE_WriteByte@bAdd
 14292  0F06  3070               	movlw	112
 14293  0F07  3D28               	addwfc	?___wmul+1,w
 14294  0F08  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 14295  0F09  085C               	movf	_t+2,w
 14296  0F0A  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14297  0F0B  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14298  0F0C  00AF               	movwf	DATAEE_WriteByte@bData
 14299  0F0D  3191  21A4  318E   	fcall	_DATAEE_WriteByte
 14300                           
 14301                           ;main.c: 578: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x3 , temp);
 14302  0F10  087A               	movf	_iwrite,w
 14303  0F11  0020               	movlb	0	; select bank0
 14304  0F12  00B1               	movwf	??_monitoring_TEMP_LUM
 14305  0F13  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14306  0F14  0831               	movf	??_monitoring_TEMP_LUM,w
 14307  0F15  00A7               	movwf	___wmul@multiplier
 14308  0F16  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14309  0F17  00A8               	movwf	___wmul@multiplier+1
 14310  0F18  3005               	movlw	5
 14311  0F19  00A9               	movwf	___wmul@multiplicand
 14312  0F1A  3000               	movlw	0
 14313  0F1B  00AA               	movwf	___wmul@multiplicand+1
 14314  0F1C  3190  20FF  318E   	fcall	___wmul
 14315  0F1F  0020               	movlb	0	; select bank0
 14316  0F20  0827               	movf	?___wmul,w
 14317  0F21  3E15               	addlw	21
 14318  0F22  00AD               	movwf	DATAEE_WriteByte@bAdd
 14319  0F23  3070               	movlw	112
 14320  0F24  3D28               	addwfc	?___wmul+1,w
 14321  0F25  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 14322  0F26  0862               	movf	_temp,w
 14323  0F27  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14324  0F28  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14325  0F29  00AF               	movwf	DATAEE_WriteByte@bData
 14326  0F2A  3191  21A4  318E   	fcall	_DATAEE_WriteByte
 14327                           
 14328                           ;main.c: 579: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x4 , lumLevel);
 14329  0F2D  087A               	movf	_iwrite,w
 14330  0F2E  0020               	movlb	0	; select bank0
 14331  0F2F  00B1               	movwf	??_monitoring_TEMP_LUM
 14332  0F30  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14333  0F31  0831               	movf	??_monitoring_TEMP_LUM,w
 14334  0F32  00A7               	movwf	___wmul@multiplier
 14335  0F33  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14336  0F34  00A8               	movwf	___wmul@multiplier+1
 14337  0F35  3005               	movlw	5
 14338  0F36  00A9               	movwf	___wmul@multiplicand
 14339  0F37  3000               	movlw	0
 14340  0F38  00AA               	movwf	___wmul@multiplicand+1
 14341  0F39  3190  20FF  318E   	fcall	___wmul
 14342  0F3C  0020               	movlb	0	; select bank0
 14343  0F3D  0827               	movf	?___wmul,w
 14344  0F3E  3E16               	addlw	22
 14345  0F3F  00AD               	movwf	DATAEE_WriteByte@bAdd
 14346  0F40  3070               	movlw	112
 14347  0F41  3D28               	addwfc	?___wmul+1,w
 14348  0F42  00AE               	movwf	DATAEE_WriteByte@bAdd+1
 14349  0F43  0861               	movf	_lumLevel,w
 14350  0F44  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14351  0F45  0833               	movf	??_monitoring_TEMP_LUM+2,w
 14352  0F46  00AF               	movwf	DATAEE_WriteByte@bData
 14353  0F47  3191  21A4  318E   	fcall	_DATAEE_WriteByte
 14354  0F4A                     l6758:
 14355                           
 14356                           ;main.c: 581: if((nr == NREG) && (iread == iwrite)){
 14357  0F4A  0879               	movf	_nr,w
 14358  0F4B  067D               	xorwf	_NREG,w
 14359  0F4C  1D03               	skipz
 14360  0F4D  2F4F               	goto	u7961
 14361  0F4E  2F50               	goto	u7960
 14362  0F4F                     u7961:
 14363  0F4F  2F5B               	goto	l1345
 14364  0F50                     u7960:
 14365  0F50                     l6760:
 14366  0F50  087B               	movf	_iread,w
 14367  0F51  067A               	xorwf	_iwrite,w
 14368  0F52  1D03               	skipz
 14369  0F53  2F55               	goto	u7971
 14370  0F54  2F56               	goto	u7970
 14371  0F55                     u7971:
 14372  0F55  2F5B               	goto	l1345
 14373  0F56                     u7970:
 14374  0F56                     l6762:
 14375                           
 14376                           ;main.c: 582: iread++;
 14377  0F56  3001               	movlw	1
 14378  0F57  0020               	movlb	0	; select bank0
 14379  0F58  00B1               	movwf	??_monitoring_TEMP_LUM
 14380  0F59  0831               	movf	??_monitoring_TEMP_LUM,w
 14381  0F5A  07FB               	addwf	_iread,f
 14382  0F5B                     l1345:
 14383                           
 14384                           ;main.c: 583: };main.c: 585: iwrite++;
 14385  0F5B  3001               	movlw	1
 14386  0F5C  0020               	movlb	0	; select bank0
 14387  0F5D  00B1               	movwf	??_monitoring_TEMP_LUM
 14388  0F5E  0831               	movf	??_monitoring_TEMP_LUM,w
 14389  0F5F  07FA               	addwf	_iwrite,f
 14390  0F60                     l6764:
 14391                           
 14392                           ;main.c: 586: if(iwrite > NREG - 1){
 14393  0F60  087D               	movf	_NREG,w
 14394  0F61  3EFF               	addlw	255
 14395  0F62  00B1               	movwf	??_monitoring_TEMP_LUM
 14396  0F63  30FF               	movlw	255
 14397  0F64  1803               	skipnc
 14398  0F65  3000               	movlw	0
 14399  0F66  00B2               	movwf	??_monitoring_TEMP_LUM+1
 14400  0F67  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14401  0F68  3A80               	xorlw	128
 14402  0F69  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14403  0F6A  3080               	movlw	128
 14404  0F6B  0233               	subwf	??_monitoring_TEMP_LUM+2,w
 14405  0F6C  1D03               	skipz
 14406  0F6D  2F70               	goto	u7985
 14407  0F6E  087A               	movf	_iwrite,w
 14408  0F6F  0231               	subwf	??_monitoring_TEMP_LUM,w
 14409  0F70                     u7985:
 14410  0F70  1803               	skipnc
 14411  0F71  2F73               	goto	u7981
 14412  0F72  2F74               	goto	u7980
 14413  0F73                     u7981:
 14414  0F73  2F78               	goto	l6770
 14415  0F74                     u7980:
 14416  0F74                     l6766:
 14417                           
 14418                           ;main.c: 587: flagNr = 1;
 14419  0F74  0021               	movlb	1	; select bank1
 14420  0F75  01AF               	clrf	_flagNr^(0+128)
 14421  0F76  0AAF               	incf	_flagNr^(0+128),f
 14422  0F77                     l6768:
 14423                           
 14424                           ;main.c: 588: iwrite = 0;
 14425  0F77  01FA               	clrf	_iwrite
 14426  0F78                     l6770:
 14427                           
 14428                           ;main.c: 589: };main.c: 590: if(flagNr){
 14429  0F78  0021               	movlb	1	; select bank1
 14430  0F79  082F               	movf	_flagNr^(0+128),w
 14431  0F7A  1903               	btfsc	3,2
 14432  0F7B  2F7D               	goto	u7991
 14433  0F7C  2F7E               	goto	u7990
 14434  0F7D                     u7991:
 14435  0F7D  2F84               	goto	l6774
 14436  0F7E                     u7990:
 14437  0F7E                     l6772:
 14438                           
 14439                           ;main.c: 591: nr = NREG;
 14440  0F7E  087D               	movf	_NREG,w
 14441  0F7F  0020               	movlb	0	; select bank0
 14442  0F80  00B1               	movwf	??_monitoring_TEMP_LUM
 14443  0F81  0831               	movf	??_monitoring_TEMP_LUM,w
 14444  0F82  00F9               	movwf	_nr
 14445                           
 14446                           ;main.c: 592: } else{
 14447  0F83  2F89               	goto	l6776
 14448  0F84                     l6774:
 14449                           
 14450                           ;main.c: 593: nr++;
 14451  0F84  3001               	movlw	1
 14452  0F85  0020               	movlb	0	; select bank0
 14453  0F86  00B1               	movwf	??_monitoring_TEMP_LUM
 14454  0F87  0831               	movf	??_monitoring_TEMP_LUM,w
 14455  0F88  07F9               	addwf	_nr,f
 14456  0F89                     l6776:
 14457                           
 14458                           ;main.c: 594: };main.c: 596: if(iread > NREG-1){
 14459  0F89  087D               	movf	_NREG,w
 14460  0F8A  3EFF               	addlw	255
 14461  0F8B  00B1               	movwf	??_monitoring_TEMP_LUM
 14462  0F8C  30FF               	movlw	255
 14463  0F8D  1803               	skipnc
 14464  0F8E  3000               	movlw	0
 14465  0F8F  00B2               	movwf	??_monitoring_TEMP_LUM+1
 14466  0F90  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14467  0F91  3A80               	xorlw	128
 14468  0F92  00B3               	movwf	??_monitoring_TEMP_LUM+2
 14469  0F93  3080               	movlw	128
 14470  0F94  0233               	subwf	??_monitoring_TEMP_LUM+2,w
 14471  0F95  1D03               	skipz
 14472  0F96  2F99               	goto	u8005
 14473  0F97  087B               	movf	_iread,w
 14474  0F98  0231               	subwf	??_monitoring_TEMP_LUM,w
 14475  0F99                     u8005:
 14476  0F99  1803               	skipnc
 14477  0F9A  2F9C               	goto	u8001
 14478  0F9B  2F9D               	goto	u8000
 14479  0F9C                     u8001:
 14480  0F9C  2F9E               	goto	l6780
 14481  0F9D                     u8000:
 14482  0F9D                     l6778:
 14483                           
 14484                           ;main.c: 597: iread = 0;
 14485  0F9D  01FB               	clrf	_iread
 14486  0F9E                     l6780:
 14487                           
 14488                           ;main.c: 598: };main.c: 600: prevTemp = temp;
 14489  0F9E  0020               	movlb	0	; select bank0
 14490  0F9F  0862               	movf	_temp,w
 14491  0FA0  00B1               	movwf	??_monitoring_TEMP_LUM
 14492  0FA1  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14493  0FA2  0831               	movf	??_monitoring_TEMP_LUM,w
 14494  0FA3  0021               	movlb	1	; select bank1
 14495  0FA4  00D3               	movwf	_prevTemp^(0+128)
 14496  0FA5  0020               	movlb	0	; select bank0
 14497  0FA6  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14498  0FA7  0021               	movlb	1	; select bank1
 14499  0FA8  00D4               	movwf	(_prevTemp+1)^(0+128)
 14500  0FA9                     l6782:
 14501                           
 14502                           ;main.c: 601: prevLumLevel = lumLevel;
 14503  0FA9  0020               	movlb	0	; select bank0
 14504  0FAA  0861               	movf	_lumLevel,w
 14505  0FAB  00B1               	movwf	??_monitoring_TEMP_LUM
 14506  0FAC  01B2               	clrf	??_monitoring_TEMP_LUM+1
 14507  0FAD  0831               	movf	??_monitoring_TEMP_LUM,w
 14508  0FAE  0021               	movlb	1	; select bank1
 14509  0FAF  00D1               	movwf	_prevLumLevel^(0+128)
 14510  0FB0  0020               	movlb	0	; select bank0
 14511  0FB1  0832               	movf	??_monitoring_TEMP_LUM+1,w
 14512  0FB2  0021               	movlb	1	; select bank1
 14513  0FB3  00D2               	movwf	(_prevLumLevel+1)^(0+128)
 14514  0FB4                     l6784:
 14515                           
 14516                           ;main.c: 602: };main.c: 605: if(ALAF == 'A'){
 14517  0FB4  3041               	movlw	65
 14518  0FB5  067C               	xorwf	_ALAF,w
 14519  0FB6  1D03               	btfss	3,2
 14520  0FB7  2FB9               	goto	u8011
 14521  0FB8  2FBA               	goto	u8010
 14522  0FB9                     u8011:
 14523  0FB9  2FFF               	goto	l1365
 14524  0FBA                     u8010:
 14525  0FBA                     l6786:
 14526                           
 14527                           ;main.c: 607: if((lumAlarm.alarmLum > lumLevel) && (editingLumAlarm == 0)){
 14528  0FBA  0021               	movlb	1	; select bank1
 14529  0FBB  0824               	movf	_lumAlarm^(0+128),w
 14530  0FBC  0020               	movlb	0	; select bank0
 14531  0FBD  0261               	subwf	_lumLevel,w
 14532  0FBE  1803               	skipnc
 14533  0FBF  2FC1               	goto	u8021
 14534  0FC0  2FC2               	goto	u8020
 14535  0FC1                     u8021:
 14536  0FC1  2FDA               	goto	l6800
 14537  0FC2                     u8020:
 14538  0FC2                     l6788:
 14539  0FC2  0021               	movlb	1	; select bank1
 14540  0FC3  0836               	movf	_editingLumAlarm^(0+128),w
 14541  0FC4  1D03               	btfss	3,2
 14542  0FC5  2FC7               	goto	u8031
 14543  0FC6  2FC8               	goto	u8030
 14544  0FC7                     u8031:
 14545  0FC7  2FDA               	goto	l6800
 14546  0FC8                     u8030:
 14547  0FC8                     l6790:
 14548                           
 14549                           ;main.c: 608: if(!lumAlarm.triggered){
 14550  0FC8  0826               	movf	(_lumAlarm^(0+128)+2),w
 14551  0FC9  1D03               	btfss	3,2
 14552  0FCA  2FCC               	goto	u8041
 14553  0FCB  2FCD               	goto	u8040
 14554  0FCC                     u8041:
 14555  0FCC  2FD3               	goto	l6794
 14556  0FCD                     u8040:
 14557  0FCD                     l6792:
 14558                           
 14559                           ;main.c: 609: alarmPWMStart.h = 0xff;
 14560  0FCD  30FF               	movlw	255
 14561  0FCE  0020               	movlb	0	; select bank0
 14562  0FCF  00B1               	movwf	??_monitoring_TEMP_LUM
 14563  0FD0  0831               	movf	??_monitoring_TEMP_LUM,w
 14564  0FD1  0021               	movlb	1	; select bank1
 14565  0FD2  00CE               	movwf	_alarmPWMStart^(0+128)
 14566  0FD3                     l6794:
 14567                           
 14568                           ;main.c: 610: };main.c: 611: lumAlarm.triggered = 1;
 14569  0FD3  01A6               	clrf	(_lumAlarm^(0+128)+2)
 14570  0FD4  0AA6               	incf	(_lumAlarm^(0+128)+2),f
 14571  0FD5                     l6796:
 14572                           
 14573                           ;main.c: 613: lumAlarm.trigger = 1;
 14574  0FD5  01A5               	clrf	(_lumAlarm^(0+128)+1)
 14575  0FD6  0AA5               	incf	(_lumAlarm^(0+128)+1),f
 14576  0FD7                     l6798:
 14577  0FD7  0020               	movlb	0	; select bank0
 14578  0FD8  1616               	bsf	22,4	;volatile
 14579  0FD9  2FDE               	goto	l6804
 14580  0FDA                     l6800:
 14581                           
 14582                           ;main.c: 616: lumAlarm.triggered = 0;
 14583  0FDA  0021               	movlb	1	; select bank1
 14584  0FDB  01A6               	clrf	(_lumAlarm^(0+128)+2)
 14585  0FDC                     l6802:
 14586  0FDC  0020               	movlb	0	; select bank0
 14587  0FDD  1216               	bcf	22,4	;volatile
 14588  0FDE                     l6804:
 14589                           
 14590                           ;main.c: 618: };main.c: 621: if((tempAlarm.alarmTemp < temp) && (editingTempAlarm == 0))
      +                          {
 14591  0FDE  0862               	movf	_temp,w
 14592  0FDF  0021               	movlb	1	; select bank1
 14593  0FE0  0227               	subwf	_tempAlarm^(0+128),w
 14594  0FE1  1803               	skipnc
 14595  0FE2  2FE4               	goto	u8051
 14596  0FE3  2FE5               	goto	u8050
 14597  0FE4                     u8051:
 14598  0FE4  2FFC               	goto	l6818
 14599  0FE5                     u8050:
 14600  0FE5                     l6806:
 14601  0FE5  0837               	movf	_editingTempAlarm^(0+128),w
 14602  0FE6  1D03               	btfss	3,2
 14603  0FE7  2FE9               	goto	u8061
 14604  0FE8  2FEA               	goto	u8060
 14605  0FE9                     u8061:
 14606  0FE9  2FFC               	goto	l6818
 14607  0FEA                     u8060:
 14608  0FEA                     l6808:
 14609                           
 14610                           ;main.c: 622: if(!tempAlarm.triggered){
 14611  0FEA  0829               	movf	(_tempAlarm^(0+128)+2),w
 14612  0FEB  1D03               	btfss	3,2
 14613  0FEC  2FEE               	goto	u8071
 14614  0FED  2FEF               	goto	u8070
 14615  0FEE                     u8071:
 14616  0FEE  2FF5               	goto	l6812
 14617  0FEF                     u8070:
 14618  0FEF                     l6810:
 14619                           
 14620                           ;main.c: 623: alarmPWMStart.h = 0xff;
 14621  0FEF  30FF               	movlw	255
 14622  0FF0  0020               	movlb	0	; select bank0
 14623  0FF1  00B1               	movwf	??_monitoring_TEMP_LUM
 14624  0FF2  0831               	movf	??_monitoring_TEMP_LUM,w
 14625  0FF3  0021               	movlb	1	; select bank1
 14626  0FF4  00CE               	movwf	_alarmPWMStart^(0+128)
 14627  0FF5                     l6812:
 14628                           
 14629                           ;main.c: 624: };main.c: 626: tempAlarm.triggered = 1;
 14630  0FF5  01A9               	clrf	(_tempAlarm^(0+128)+2)
 14631  0FF6  0AA9               	incf	(_tempAlarm^(0+128)+2),f
 14632  0FF7                     l6814:
 14633                           
 14634                           ;main.c: 628: tempAlarm.trigger = 1;
 14635  0FF7  01A8               	clrf	(_tempAlarm^(0+128)+1)
 14636  0FF8  0AA8               	incf	(_tempAlarm^(0+128)+1),f
 14637  0FF9                     l6816:
 14638  0FF9  0020               	movlb	0	; select bank0
 14639  0FFA  1696               	bsf	22,5	;volatile
 14640  0FFB  2FFF               	goto	l1365
 14641  0FFC                     l6818:
 14642                           
 14643                           ;main.c: 632: tempAlarm.triggered = 0;
 14644  0FFC  01A9               	clrf	(_tempAlarm^(0+128)+2)
 14645  0FFD                     l6820:
 14646  0FFD  0020               	movlb	0	; select bank0
 14647  0FFE  1296               	bcf	22,5	;volatile
 14648  0FFF                     l1365:
 14649  0FFF  0008               	return
 14650  1000                     __end_of_monitoring_TEMP_LUM:
 14651                           
 14652                           	psect	text25
 14653  0D2F                     __ptext25:	
 14654 ;; *************** function _tsttc *****************
 14655 ;; Defined at:
 14656 ;;		line 197 in file "main.c"
 14657 ;; Parameters:    Size  Location     Type
 14658 ;;		None
 14659 ;; Auto vars:     Size  Location     Type
 14660 ;;  value           1   10[BANK0 ] unsigned char 
 14661 ;; Return value:  Size  Location     Type
 14662 ;;                  1    wreg      unsigned char 
 14663 ;; Registers used:
 14664 ;;		wreg, status,2, status,0, pclath, cstack
 14665 ;; Tracked objects:
 14666 ;;		On entry : 0/0
 14667 ;;		On exit  : 0/0
 14668 ;;		Unchanged: 0/0
 14669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;Total ram usage:        2 bytes
 14675 ;; Hardware stack levels used:    1
 14676 ;; Hardware stack levels required when called:    5
 14677 ;; This function calls:
 14678 ;;		_ReadI2C
 14679 ;;		_WriteI2C
 14680 ;; This function is called by:
 14681 ;;		_monitoring_TEMP_LUM
 14682 ;; This function uses a non-reentrant model
 14683 ;;
 14684                           
 14685                           
 14686                           ;psect for function _tsttc
 14687  0D2F                     _tsttc:
 14688  0D2F                     l1016:	
 14689                           ;incstack = 0
 14690                           ; Regs used in _tsttc: [wreg+status,2+status,0+pclath+cstack]
 14691                           ;main.c: 199: unsigned char value;;main.c: 200: do{
 14692                           
 14693  0D2F                     l6412:	
 14694                           ;main.c: 201: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14695                           
 14696  0D2F  0023               	movlb	3	; select bank3
 14697  0D30  0C0F               	rrf	15,w	;volatile
 14698  0D31  0C89               	rrf	9,f
 14699  0D32  3901               	andlw	1
 14700  0D33  0020               	movlb	0	; select bank0
 14701  0D34  00A9               	movwf	??_tsttc
 14702  0D35  0023               	movlb	3	; select bank3
 14703  0D36  0811               	movf	17,w	;volatile
 14704  0D37  391F               	andlw	31
 14705  0D38  0020               	movlb	0	; select bank0
 14706  0D39  0429               	iorwf	??_tsttc,w
 14707  0D3A  1D03               	btfss	3,2
 14708  0D3B  2D3D               	goto	u7181
 14709  0D3C  2D3E               	goto	u7180
 14710  0D3D                     u7181:
 14711  0D3D  2D2F               	goto	l6412
 14712  0D3E                     u7180:
 14713  0D3E                     l1019:
 14714                           
 14715                           ;main.c: 202: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14716  0D3E  0023               	movlb	3	; select bank3
 14717  0D3F  1411               	bsf	17,0	;volatile
 14718  0D40                     l1020:
 14719  0D40  1811               	btfsc	17,0	;volatile
 14720  0D41  2D43               	goto	u7191
 14721  0D42  2D44               	goto	u7190
 14722  0D43                     u7191:
 14723  0D43  2D40               	goto	l1020
 14724  0D44                     u7190:
 14725  0D44                     l6414:
 14726  0D44  0023               	movlb	3	; select bank3
 14727  0D45  0C0F               	rrf	15,w	;volatile
 14728  0D46  0C89               	rrf	9,f
 14729  0D47  3901               	andlw	1
 14730  0D48  0020               	movlb	0	; select bank0
 14731  0D49  00A9               	movwf	??_tsttc
 14732  0D4A  0023               	movlb	3	; select bank3
 14733  0D4B  0811               	movf	17,w	;volatile
 14734  0D4C  391F               	andlw	31
 14735  0D4D  0020               	movlb	0	; select bank0
 14736  0D4E  0429               	iorwf	??_tsttc,w
 14737  0D4F  1D03               	btfss	3,2
 14738  0D50  2D52               	goto	u7201
 14739  0D51  2D53               	goto	u7200
 14740  0D52                     u7201:
 14741  0D52  2D44               	goto	l6414
 14742  0D53                     u7200:
 14743  0D53                     l6416:
 14744                           
 14745                           ;main.c: 204: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14746  0D53  309A               	movlw	154
 14747  0D54  3195  2531  318D   	fcall	_WriteI2C
 14748  0D57                     l6418:
 14749  0D57  0023               	movlb	3	; select bank3
 14750  0D58  0C0F               	rrf	15,w	;volatile
 14751  0D59  0C89               	rrf	9,f
 14752  0D5A  3901               	andlw	1
 14753  0D5B  0020               	movlb	0	; select bank0
 14754  0D5C  00A9               	movwf	??_tsttc
 14755  0D5D  0023               	movlb	3	; select bank3
 14756  0D5E  0811               	movf	17,w	;volatile
 14757  0D5F  391F               	andlw	31
 14758  0D60  0020               	movlb	0	; select bank0
 14759  0D61  0429               	iorwf	??_tsttc,w
 14760  0D62  1D03               	btfss	3,2
 14761  0D63  2D65               	goto	u7211
 14762  0D64  2D66               	goto	u7210
 14763  0D65                     u7211:
 14764  0D65  2D57               	goto	l6418
 14765  0D66                     u7210:
 14766  0D66                     l6420:
 14767                           
 14768                           ;main.c: 205: WriteI2C(0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14769  0D66  3001               	movlw	1
 14770  0D67  3195  2531  318D   	fcall	_WriteI2C
 14771  0D6A                     l6422:
 14772  0D6A  0023               	movlb	3	; select bank3
 14773  0D6B  0C0F               	rrf	15,w	;volatile
 14774  0D6C  0C89               	rrf	9,f
 14775  0D6D  3901               	andlw	1
 14776  0D6E  0020               	movlb	0	; select bank0
 14777  0D6F  00A9               	movwf	??_tsttc
 14778  0D70  0023               	movlb	3	; select bank3
 14779  0D71  0811               	movf	17,w	;volatile
 14780  0D72  391F               	andlw	31
 14781  0D73  0020               	movlb	0	; select bank0
 14782  0D74  0429               	iorwf	??_tsttc,w
 14783  0D75  1D03               	btfss	3,2
 14784  0D76  2D78               	goto	u7221
 14785  0D77  2D79               	goto	u7220
 14786  0D78                     u7221:
 14787  0D78  2D6A               	goto	l6422
 14788  0D79                     u7220:
 14789  0D79                     l1031:
 14790                           
 14791                           ;main.c: 206: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 14792  0D79  0023               	movlb	3	; select bank3
 14793  0D7A  1491               	bsf	17,1	;volatile
 14794  0D7B                     l1032:
 14795  0D7B  1891               	btfsc	17,1	;volatile
 14796  0D7C  2D7E               	goto	u7231
 14797  0D7D  2D7F               	goto	u7230
 14798  0D7E                     u7231:
 14799  0D7E  2D7B               	goto	l1032
 14800  0D7F                     u7230:
 14801  0D7F                     l6424:
 14802  0D7F  0023               	movlb	3	; select bank3
 14803  0D80  0C0F               	rrf	15,w	;volatile
 14804  0D81  0C89               	rrf	9,f
 14805  0D82  3901               	andlw	1
 14806  0D83  0020               	movlb	0	; select bank0
 14807  0D84  00A9               	movwf	??_tsttc
 14808  0D85  0023               	movlb	3	; select bank3
 14809  0D86  0811               	movf	17,w	;volatile
 14810  0D87  391F               	andlw	31
 14811  0D88  0020               	movlb	0	; select bank0
 14812  0D89  0429               	iorwf	??_tsttc,w
 14813  0D8A  1D03               	btfss	3,2
 14814  0D8B  2D8D               	goto	u7241
 14815  0D8C  2D8E               	goto	u7240
 14816  0D8D                     u7241:
 14817  0D8D  2D7F               	goto	l6424
 14818  0D8E                     u7240:
 14819  0D8E                     l6426:
 14820                           
 14821                           ;main.c: 207: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14822  0D8E  309B               	movlw	155
 14823  0D8F  3195  2531  318D   	fcall	_WriteI2C
 14824  0D92                     l6428:
 14825  0D92  0023               	movlb	3	; select bank3
 14826  0D93  0C0F               	rrf	15,w	;volatile
 14827  0D94  0C89               	rrf	9,f
 14828  0D95  3901               	andlw	1
 14829  0D96  0020               	movlb	0	; select bank0
 14830  0D97  00A9               	movwf	??_tsttc
 14831  0D98  0023               	movlb	3	; select bank3
 14832  0D99  0811               	movf	17,w	;volatile
 14833  0D9A  391F               	andlw	31
 14834  0D9B  0020               	movlb	0	; select bank0
 14835  0D9C  0429               	iorwf	??_tsttc,w
 14836  0D9D  1D03               	btfss	3,2
 14837  0D9E  2DA0               	goto	u7251
 14838  0D9F  2DA1               	goto	u7250
 14839  0DA0                     u7251:
 14840  0DA0  2D92               	goto	l6428
 14841  0DA1                     u7250:
 14842  0DA1                     l6430:
 14843                           
 14844                           ;main.c: 208: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14845  0DA1  3190  20E0  318D   	fcall	_ReadI2C
 14846  0DA4  0020               	movlb	0	; select bank0
 14847  0DA5  00A9               	movwf	??_tsttc
 14848  0DA6  0829               	movf	??_tsttc,w
 14849  0DA7  00AA               	movwf	tsttc@value
 14850  0DA8                     l6432:
 14851  0DA8  0023               	movlb	3	; select bank3
 14852  0DA9  0C0F               	rrf	15,w	;volatile
 14853  0DAA  0C89               	rrf	9,f
 14854  0DAB  3901               	andlw	1
 14855  0DAC  0020               	movlb	0	; select bank0
 14856  0DAD  00A9               	movwf	??_tsttc
 14857  0DAE  0023               	movlb	3	; select bank3
 14858  0DAF  0811               	movf	17,w	;volatile
 14859  0DB0  391F               	andlw	31
 14860  0DB1  0020               	movlb	0	; select bank0
 14861  0DB2  0429               	iorwf	??_tsttc,w
 14862  0DB3  1D03               	btfss	3,2
 14863  0DB4  2DB6               	goto	u7261
 14864  0DB5  2DB7               	goto	u7260
 14865  0DB6                     u7261:
 14866  0DB6  2DA8               	goto	l6432
 14867  0DB7                     u7260:
 14868  0DB7                     l1043:
 14869                           
 14870                           ;main.c: 209: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14871  0DB7  0023               	movlb	3	; select bank3
 14872  0DB8  1691               	bsf	17,5	;volatile
 14873  0DB9  1611               	bsf	17,4	;volatile
 14874  0DBA                     l1044:
 14875  0DBA  1A11               	btfsc	17,4	;volatile
 14876  0DBB  2DBD               	goto	u7271
 14877  0DBC  2DBE               	goto	u7270
 14878  0DBD                     u7271:
 14879  0DBD  2DBA               	goto	l1044
 14880  0DBE                     u7270:
 14881  0DBE                     l6434:
 14882  0DBE  0023               	movlb	3	; select bank3
 14883  0DBF  0C0F               	rrf	15,w	;volatile
 14884  0DC0  0C89               	rrf	9,f
 14885  0DC1  3901               	andlw	1
 14886  0DC2  0020               	movlb	0	; select bank0
 14887  0DC3  00A9               	movwf	??_tsttc
 14888  0DC4  0023               	movlb	3	; select bank3
 14889  0DC5  0811               	movf	17,w	;volatile
 14890  0DC6  391F               	andlw	31
 14891  0DC7  0020               	movlb	0	; select bank0
 14892  0DC8  0429               	iorwf	??_tsttc,w
 14893  0DC9  1D03               	btfss	3,2
 14894  0DCA  2DCC               	goto	u7281
 14895  0DCB  2DCD               	goto	u7280
 14896  0DCC                     u7281:
 14897  0DCC  2DBE               	goto	l6434
 14898  0DCD                     u7280:
 14899  0DCD                     l1049:
 14900                           
 14901                           ;main.c: 210: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 14902  0DCD  0023               	movlb	3	; select bank3
 14903  0DCE  1511               	bsf	17,2	;volatile
 14904  0DCF                     l1050:
 14905  0DCF  1911               	btfsc	17,2	;volatile
 14906  0DD0  2DD2               	goto	u7291
 14907  0DD1  2DD3               	goto	u7290
 14908  0DD2                     u7291:
 14909  0DD2  2DCF               	goto	l1050
 14910  0DD3                     u7290:
 14911  0DD3                     l1052:
 14912                           
 14913                           ;main.c: 211: } while (!(value & 0x40));
 14914  0DD3  0020               	movlb	0	; select bank0
 14915  0DD4  1F2A               	btfss	tsttc@value,6
 14916  0DD5  2DD7               	goto	u7301
 14917  0DD6  2DD8               	goto	u7300
 14918  0DD7                     u7301:
 14919  0DD7  2D2F               	goto	l1016
 14920  0DD8                     u7300:
 14921  0DD8                     l6436:
 14922  0DD8  0023               	movlb	3	; select bank3
 14923  0DD9  0C0F               	rrf	15,w	;volatile
 14924  0DDA  0C89               	rrf	9,f
 14925  0DDB  3901               	andlw	1
 14926  0DDC  0020               	movlb	0	; select bank0
 14927  0DDD  00A9               	movwf	??_tsttc
 14928  0DDE  0023               	movlb	3	; select bank3
 14929  0DDF  0811               	movf	17,w	;volatile
 14930  0DE0  391F               	andlw	31
 14931  0DE1  0020               	movlb	0	; select bank0
 14932  0DE2  0429               	iorwf	??_tsttc,w
 14933  0DE3  1D03               	btfss	3,2
 14934  0DE4  2DE6               	goto	u7311
 14935  0DE5  2DE7               	goto	u7310
 14936  0DE6                     u7311:
 14937  0DE6  2DD8               	goto	l6436
 14938  0DE7                     u7310:
 14939  0DE7                     l1056:
 14940                           
 14941                           ;main.c: 214: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14942  0DE7  0023               	movlb	3	; select bank3
 14943  0DE8  1411               	bsf	17,0	;volatile
 14944  0DE9                     l1057:
 14945  0DE9  1811               	btfsc	17,0	;volatile
 14946  0DEA  2DEC               	goto	u7321
 14947  0DEB  2DED               	goto	u7320
 14948  0DEC                     u7321:
 14949  0DEC  2DE9               	goto	l1057
 14950  0DED                     u7320:
 14951  0DED                     l6438:
 14952  0DED  0023               	movlb	3	; select bank3
 14953  0DEE  0C0F               	rrf	15,w	;volatile
 14954  0DEF  0C89               	rrf	9,f
 14955  0DF0  3901               	andlw	1
 14956  0DF1  0020               	movlb	0	; select bank0
 14957  0DF2  00A9               	movwf	??_tsttc
 14958  0DF3  0023               	movlb	3	; select bank3
 14959  0DF4  0811               	movf	17,w	;volatile
 14960  0DF5  391F               	andlw	31
 14961  0DF6  0020               	movlb	0	; select bank0
 14962  0DF7  0429               	iorwf	??_tsttc,w
 14963  0DF8  1D03               	btfss	3,2
 14964  0DF9  2DFB               	goto	u7331
 14965  0DFA  2DFC               	goto	u7330
 14966  0DFB                     u7331:
 14967  0DFB  2DED               	goto	l6438
 14968  0DFC                     u7330:
 14969  0DFC                     l6440:
 14970                           
 14971                           ;main.c: 215: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14972  0DFC  309A               	movlw	154
 14973  0DFD  3195  2531  318D   	fcall	_WriteI2C
 14974  0E00                     l6442:
 14975  0E00  0023               	movlb	3	; select bank3
 14976  0E01  0C0F               	rrf	15,w	;volatile
 14977  0E02  0C89               	rrf	9,f
 14978  0E03  3901               	andlw	1
 14979  0E04  0020               	movlb	0	; select bank0
 14980  0E05  00A9               	movwf	??_tsttc
 14981  0E06  0023               	movlb	3	; select bank3
 14982  0E07  0811               	movf	17,w	;volatile
 14983  0E08  391F               	andlw	31
 14984  0E09  0020               	movlb	0	; select bank0
 14985  0E0A  0429               	iorwf	??_tsttc,w
 14986  0E0B  1D03               	btfss	3,2
 14987  0E0C  2E0E               	goto	u7341
 14988  0E0D  2E0F               	goto	u7340
 14989  0E0E                     u7341:
 14990  0E0E  2E00               	goto	l6442
 14991  0E0F                     u7340:
 14992  0E0F                     l6444:
 14993                           
 14994                           ;main.c: 216: WriteI2C(0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14995  0E0F  3000               	movlw	0
 14996  0E10  3195  2531  318D   	fcall	_WriteI2C
 14997  0E13                     l6446:
 14998  0E13  0023               	movlb	3	; select bank3
 14999  0E14  0C0F               	rrf	15,w	;volatile
 15000  0E15  0C89               	rrf	9,f
 15001  0E16  3901               	andlw	1
 15002  0E17  0020               	movlb	0	; select bank0
 15003  0E18  00A9               	movwf	??_tsttc
 15004  0E19  0023               	movlb	3	; select bank3
 15005  0E1A  0811               	movf	17,w	;volatile
 15006  0E1B  391F               	andlw	31
 15007  0E1C  0020               	movlb	0	; select bank0
 15008  0E1D  0429               	iorwf	??_tsttc,w
 15009  0E1E  1D03               	btfss	3,2
 15010  0E1F  2E21               	goto	u7351
 15011  0E20  2E22               	goto	u7350
 15012  0E21                     u7351:
 15013  0E21  2E13               	goto	l6446
 15014  0E22                     u7350:
 15015  0E22                     l1068:
 15016                           
 15017                           ;main.c: 217: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 15018  0E22  0023               	movlb	3	; select bank3
 15019  0E23  1491               	bsf	17,1	;volatile
 15020  0E24                     l1069:
 15021  0E24  1891               	btfsc	17,1	;volatile
 15022  0E25  2E27               	goto	u7361
 15023  0E26  2E28               	goto	u7360
 15024  0E27                     u7361:
 15025  0E27  2E24               	goto	l1069
 15026  0E28                     u7360:
 15027  0E28                     l6448:
 15028  0E28  0023               	movlb	3	; select bank3
 15029  0E29  0C0F               	rrf	15,w	;volatile
 15030  0E2A  0C89               	rrf	9,f
 15031  0E2B  3901               	andlw	1
 15032  0E2C  0020               	movlb	0	; select bank0
 15033  0E2D  00A9               	movwf	??_tsttc
 15034  0E2E  0023               	movlb	3	; select bank3
 15035  0E2F  0811               	movf	17,w	;volatile
 15036  0E30  391F               	andlw	31
 15037  0E31  0020               	movlb	0	; select bank0
 15038  0E32  0429               	iorwf	??_tsttc,w
 15039  0E33  1D03               	btfss	3,2
 15040  0E34  2E36               	goto	u7371
 15041  0E35  2E37               	goto	u7370
 15042  0E36                     u7371:
 15043  0E36  2E28               	goto	l6448
 15044  0E37                     u7370:
 15045  0E37                     l6450:
 15046                           
 15047                           ;main.c: 218: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15048  0E37  309B               	movlw	155
 15049  0E38  3195  2531  318D   	fcall	_WriteI2C
 15050  0E3B                     l6452:
 15051  0E3B  0023               	movlb	3	; select bank3
 15052  0E3C  0C0F               	rrf	15,w	;volatile
 15053  0E3D  0C89               	rrf	9,f
 15054  0E3E  3901               	andlw	1
 15055  0E3F  0020               	movlb	0	; select bank0
 15056  0E40  00A9               	movwf	??_tsttc
 15057  0E41  0023               	movlb	3	; select bank3
 15058  0E42  0811               	movf	17,w	;volatile
 15059  0E43  391F               	andlw	31
 15060  0E44  0020               	movlb	0	; select bank0
 15061  0E45  0429               	iorwf	??_tsttc,w
 15062  0E46  1D03               	btfss	3,2
 15063  0E47  2E49               	goto	u7381
 15064  0E48  2E4A               	goto	u7380
 15065  0E49                     u7381:
 15066  0E49  2E3B               	goto	l6452
 15067  0E4A                     u7380:
 15068  0E4A                     l6454:
 15069                           
 15070                           ;main.c: 219: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15071  0E4A  3190  20E0  318D   	fcall	_ReadI2C
 15072  0E4D  0020               	movlb	0	; select bank0
 15073  0E4E  00A9               	movwf	??_tsttc
 15074  0E4F  0829               	movf	??_tsttc,w
 15075  0E50  00AA               	movwf	tsttc@value
 15076  0E51                     l6456:
 15077  0E51  0023               	movlb	3	; select bank3
 15078  0E52  0C0F               	rrf	15,w	;volatile
 15079  0E53  0C89               	rrf	9,f
 15080  0E54  3901               	andlw	1
 15081  0E55  0020               	movlb	0	; select bank0
 15082  0E56  00A9               	movwf	??_tsttc
 15083  0E57  0023               	movlb	3	; select bank3
 15084  0E58  0811               	movf	17,w	;volatile
 15085  0E59  391F               	andlw	31
 15086  0E5A  0020               	movlb	0	; select bank0
 15087  0E5B  0429               	iorwf	??_tsttc,w
 15088  0E5C  1D03               	btfss	3,2
 15089  0E5D  2E5F               	goto	u7391
 15090  0E5E  2E60               	goto	u7390
 15091  0E5F                     u7391:
 15092  0E5F  2E51               	goto	l6456
 15093  0E60                     u7390:
 15094  0E60                     l1080:
 15095                           
 15096                           ;main.c: 220: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 15097  0E60  0023               	movlb	3	; select bank3
 15098  0E61  1691               	bsf	17,5	;volatile
 15099  0E62  1611               	bsf	17,4	;volatile
 15100  0E63                     l1081:
 15101  0E63  1A11               	btfsc	17,4	;volatile
 15102  0E64  2E66               	goto	u7401
 15103  0E65  2E67               	goto	u7400
 15104  0E66                     u7401:
 15105  0E66  2E63               	goto	l1081
 15106  0E67                     u7400:
 15107  0E67                     l6458:
 15108  0E67  0023               	movlb	3	; select bank3
 15109  0E68  0C0F               	rrf	15,w	;volatile
 15110  0E69  0C89               	rrf	9,f
 15111  0E6A  3901               	andlw	1
 15112  0E6B  0020               	movlb	0	; select bank0
 15113  0E6C  00A9               	movwf	??_tsttc
 15114  0E6D  0023               	movlb	3	; select bank3
 15115  0E6E  0811               	movf	17,w	;volatile
 15116  0E6F  391F               	andlw	31
 15117  0E70  0020               	movlb	0	; select bank0
 15118  0E71  0429               	iorwf	??_tsttc,w
 15119  0E72  1D03               	btfss	3,2
 15120  0E73  2E75               	goto	u7411
 15121  0E74  2E76               	goto	u7410
 15122  0E75                     u7411:
 15123  0E75  2E67               	goto	l6458
 15124  0E76                     u7410:
 15125  0E76                     l1086:
 15126                           
 15127                           ;main.c: 221: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 15128  0E76  0023               	movlb	3	; select bank3
 15129  0E77  1511               	bsf	17,2	;volatile
 15130  0E78                     l1087:
 15131  0E78  1911               	btfsc	17,2	;volatile
 15132  0E79  2E7B               	goto	u7421
 15133  0E7A  2E7C               	goto	u7420
 15134  0E7B                     u7421:
 15135  0E7B  2E78               	goto	l1087
 15136  0E7C                     u7420:
 15137  0E7C                     l6460:
 15138                           
 15139                           ;main.c: 223: return value;
 15140  0E7C  0020               	movlb	0	; select bank0
 15141  0E7D  082A               	movf	tsttc@value,w
 15142  0E7E                     l1090:
 15143  0E7E  0008               	return
 15144  0E7F                     __end_of_tsttc:
 15145                           
 15146                           	psect	text26
 15147  10E0                     __ptext26:	
 15148 ;; *************** function _ReadI2C *****************
 15149 ;; Defined at:
 15150 ;;		line 32 in file "I2C/i2c.c"
 15151 ;; Parameters:    Size  Location     Type
 15152 ;;		None
 15153 ;; Auto vars:     Size  Location     Type
 15154 ;;		None
 15155 ;; Return value:  Size  Location     Type
 15156 ;;                  1    wreg      unsigned char 
 15157 ;; Registers used:
 15158 ;;		wreg, status,2, status,0
 15159 ;; Tracked objects:
 15160 ;;		On entry : 0/0
 15161 ;;		On exit  : 0/0
 15162 ;;		Unchanged: 0/0
 15163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;Total ram usage:        1 bytes
 15169 ;; Hardware stack levels used:    1
 15170 ;; Hardware stack levels required when called:    4
 15171 ;; This function calls:
 15172 ;;		Nothing
 15173 ;; This function is called by:
 15174 ;;		_tsttc
 15175 ;;		_LCDrecv
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179                           
 15180                           ;psect for function _ReadI2C
 15181  10E0                     _ReadI2C:
 15182  10E0                     l6266:	
 15183                           ;incstack = 0
 15184                           ; Regs used in _ReadI2C: [wreg+status,2+status,0]
 15185                           
 15186                           
 15187                           ;i2c.c: 34: if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 15188  10E0  300F               	movlw	15
 15189  10E1  0023               	movlb	3	; select bank3
 15190  10E2  0510               	andwf	16,w	;volatile
 15191  10E3  0020               	movlb	0	; select bank0
 15192  10E4  00A7               	movwf	??_ReadI2C
 15193  10E5  3008               	movlw	8
 15194  10E6  0627               	xorwf	??_ReadI2C,w
 15195  10E7  1903               	btfsc	3,2
 15196  10E8  28EA               	goto	u6901
 15197  10E9  28EB               	goto	u6900
 15198  10EA                     u6901:
 15199  10EA  28F6               	goto	l22
 15200  10EB                     u6900:
 15201  10EB                     l6268:
 15202  10EB  300F               	movlw	15
 15203  10EC  0023               	movlb	3	; select bank3
 15204  10ED  0510               	andwf	16,w	;volatile
 15205  10EE  0020               	movlb	0	; select bank0
 15206  10EF  00A7               	movwf	??_ReadI2C
 15207  10F0  300B               	movlw	11
 15208  10F1  0627               	xorwf	??_ReadI2C,w
 15209  10F2  1D03               	btfss	3,2
 15210  10F3  28F5               	goto	u6911
 15211  10F4  28F6               	goto	u6910
 15212  10F5                     u6911:
 15213  10F5  28F8               	goto	l23
 15214  10F6                     u6910:
 15215  10F6                     l22:
 15216                           
 15217                           ;i2c.c: 35: SSP1CON2bits.RCEN = 1;
 15218  10F6  0023               	movlb	3	; select bank3
 15219  10F7  1591               	bsf	17,3	;volatile
 15220  10F8                     l23:
 15221  10F8  0023               	movlb	3	; select bank3
 15222  10F9  1C0F               	btfss	15,0	;volatile
 15223  10FA  28FC               	goto	u6921
 15224  10FB  28FD               	goto	u6920
 15225  10FC                     u6921:
 15226  10FC  28F8               	goto	l23
 15227  10FD                     u6920:
 15228  10FD                     l6270:
 15229                           
 15230                           ;i2c.c: 37: return ( SSP1BUF );
 15231  10FD  080C               	movf	12,w	;volatile
 15232  10FE                     l26:
 15233  10FE  0008               	return
 15234  10FF                     __end_of_ReadI2C:
 15235                           
 15236                           	psect	text27
 15237  11A4                     __ptext27:	
 15238 ;; *************** function _DATAEE_WriteByte *****************
 15239 ;; Defined at:
 15240 ;;		line 180 in file "mcc_generated_files/memory.c"
 15241 ;; Parameters:    Size  Location     Type
 15242 ;;  bAdd            2   13[BANK0 ] unsigned int 
 15243 ;;  bData           1   15[BANK0 ] unsigned char 
 15244 ;; Auto vars:     Size  Location     Type
 15245 ;;  GIEBitValue     1   16[BANK0 ] unsigned char 
 15246 ;; Return value:  Size  Location     Type
 15247 ;;                  1    wreg      void 
 15248 ;; Registers used:
 15249 ;;		wreg, status,2, status,0
 15250 ;; Tracked objects:
 15251 ;;		On entry : 0/0
 15252 ;;		On exit  : 0/0
 15253 ;;		Unchanged: 0/0
 15254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15255 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;Total ram usage:        4 bytes
 15260 ;; Hardware stack levels used:    1
 15261 ;; Hardware stack levels required when called:    4
 15262 ;; This function calls:
 15263 ;;		Nothing
 15264 ;; This function is called by:
 15265 ;;		_wirteEEPROMinit
 15266 ;;		_monitoring_TEMP_LUM
 15267 ;;		_main
 15268 ;; This function uses a non-reentrant model
 15269 ;;
 15270                           
 15271                           
 15272                           ;psect for function _DATAEE_WriteByte
 15273  11A4                     _DATAEE_WriteByte:
 15274  11A4                     l6390:	
 15275                           ;incstack = 0
 15276                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 15277                           
 15278                           
 15279                           ;memory.c: 182: uint8_t GIEBitValue = INTCONbits.GIE;
 15280  11A4  3000               	movlw	0
 15281  11A5  1B8B               	btfsc	11,7	;volatile
 15282  11A6  3001               	movlw	1
 15283  11A7  0020               	movlb	0	; select bank0
 15284  11A8  00B0               	movwf	DATAEE_WriteByte@GIEBitValue
 15285                           
 15286                           ;memory.c: 184: NVMADRH = ((bAdd >> 8) & 0xFF);
 15287  11A9  082E               	movf	DATAEE_WriteByte@bAdd+1,w
 15288  11AA  0030               	movlb	16	; select bank16
 15289  11AB  009B               	movwf	27	;volatile
 15290  11AC                     l6392:
 15291                           
 15292                           ;memory.c: 185: NVMADRL = (bAdd & 0xFF);
 15293  11AC  0020               	movlb	0	; select bank0
 15294  11AD  082D               	movf	DATAEE_WriteByte@bAdd,w
 15295  11AE  0030               	movlb	16	; select bank16
 15296  11AF  009A               	movwf	26	;volatile
 15297  11B0                     l6394:
 15298                           
 15299                           ;memory.c: 186: NVMDATL = bData;
 15300  11B0  0020               	movlb	0	; select bank0
 15301  11B1  082F               	movf	DATAEE_WriteByte@bData,w
 15302  11B2  0030               	movlb	16	; select bank16
 15303  11B3  009C               	movwf	28	;volatile
 15304  11B4                     l6396:
 15305                           
 15306                           ;memory.c: 187: NVMCON1bits.NVMREGS = 1;
 15307  11B4  171E               	bsf	30,6	;volsfr
 15308  11B5                     l6398:
 15309                           
 15310                           ;memory.c: 188: NVMCON1bits.WREN = 1;
 15311  11B5  151E               	bsf	30,2	;volsfr
 15312  11B6                     l6400:
 15313                           
 15314                           ;memory.c: 189: INTCONbits.GIE = 0;
 15315  11B6  138B               	bcf	11,7	;volatile
 15316  11B7                     l6402:
 15317                           
 15318                           ;memory.c: 190: NVMCON2 = 0x55;
 15319  11B7  3055               	movlw	85
 15320  11B8  009F               	movwf	31	;volsfr
 15321  11B9                     l6404:
 15322                           
 15323                           ;memory.c: 191: NVMCON2 = 0xAA;
 15324  11B9  30AA               	movlw	170
 15325  11BA  009F               	movwf	31	;volsfr
 15326  11BB                     l6406:
 15327                           
 15328                           ;memory.c: 192: NVMCON1bits.WR = 1;
 15329  11BB  149E               	bsf	30,1	;volsfr
 15330  11BC                     l728:	
 15331                           ;memory.c: 195: {
 15332                           
 15333  11BC  189E               	btfsc	30,1	;volsfr
 15334  11BD  29BF               	goto	u7171
 15335  11BE  29C0               	goto	u7170
 15336  11BF                     u7171:
 15337  11BF  29BC               	goto	l728
 15338  11C0                     u7170:
 15339  11C0                     l730:
 15340                           
 15341                           ;memory.c: 196: };memory.c: 198: NVMCON1bits.WREN = 0;
 15342  11C0  111E               	bcf	30,2	;volsfr
 15343  11C1                     l6408:
 15344                           
 15345                           ;memory.c: 199: INTCONbits.GIE = GIEBitValue;
 15346  11C1  0020               	movlb	0	; select bank0
 15347  11C2  0C30               	rrf	DATAEE_WriteByte@GIEBitValue,w
 15348  11C3  1C03               	skipc
 15349  11C4  138B               	bcf	11,7	;volatile
 15350  11C5  1803               	skipnc
 15351  11C6  178B               	bsf	11,7	;volatile
 15352  11C7                     l731:
 15353  11C7  0008               	return
 15354  11C8                     __end_of_DATAEE_WriteByte:
 15355                           
 15356                           	psect	text28
 15357  1FBC                     __ptext28:	
 15358 ;; *************** function _ADCC_GetSingleConversion *****************
 15359 ;; Defined at:
 15360 ;;		line 130 in file "mcc_generated_files/adcc.c"
 15361 ;; Parameters:    Size  Location     Type
 15362 ;;  channel         1    wreg     enum E12086
 15363 ;; Auto vars:     Size  Location     Type
 15364 ;;  channel         1   10[BANK0 ] enum E12086
 15365 ;; Return value:  Size  Location     Type
 15366 ;;                  2    7[BANK0 ] unsigned int 
 15367 ;; Registers used:
 15368 ;;		wreg
 15369 ;; Tracked objects:
 15370 ;;		On entry : 0/0
 15371 ;;		On exit  : 0/0
 15372 ;;		Unchanged: 0/0
 15373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15374 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15377 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15378 ;;Total ram usage:        4 bytes
 15379 ;; Hardware stack levels used:    1
 15380 ;; Hardware stack levels required when called:    4
 15381 ;; This function calls:
 15382 ;;		Nothing
 15383 ;; This function is called by:
 15384 ;;		_monitoring_TEMP_LUM
 15385 ;; This function uses a non-reentrant model
 15386 ;;
 15387                           
 15388                           
 15389                           ;psect for function _ADCC_GetSingleConversion
 15390  1FBC                     _ADCC_GetSingleConversion:
 15391                           
 15392                           ;incstack = 0
 15393                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 15394                           ;ADCC_GetSingleConversion@channel stored from wreg
 15395  1FBC  0020               	movlb	0	; select bank0
 15396  1FBD  00AA               	movwf	ADCC_GetSingleConversion@channel
 15397  1FBE                     l6370:
 15398                           
 15399                           ;adcc.c: 133: ADPCH = channel;
 15400  1FBE  082A               	movf	ADCC_GetSingleConversion@channel,w
 15401  1FBF  0021               	movlb	1	; select bank1
 15402  1FC0  009E               	movwf	30	;volatile
 15403  1FC1                     l6372:
 15404                           
 15405                           ;adcc.c: 136: ADCON0bits.ADON = 1;
 15406  1FC1  1793               	bsf	19,7	;volatile
 15407  1FC2                     l6374:
 15408                           
 15409                           ;adcc.c: 139: ADCON0bits.ADCONT = 0;
 15410  1FC2  1313               	bcf	19,6	;volatile
 15411  1FC3                     l6376:
 15412                           
 15413                           ;adcc.c: 142: ADCON0bits.ADGO = 1;
 15414  1FC3  1413               	bsf	19,0	;volatile
 15415  1FC4                     l6378:
 15416                           
 15417                           ;adcc.c: 145: __nop();
 15418  1FC4  0000               	nop
 15419  1FC5                     l537:	
 15420                           ;adcc.c: 149: {
 15421                           
 15422  1FC5  0021               	movlb	1	; select bank1
 15423  1FC6  1813               	btfsc	19,0	;volatile
 15424  1FC7  2FC9               	goto	u7151
 15425  1FC8  2FCA               	goto	u7150
 15426  1FC9                     u7151:
 15427  1FC9  2FC5               	goto	l537
 15428  1FCA                     u7150:
 15429  1FCA                     l6380:
 15430                           
 15431                           ;adcc.c: 150: };adcc.c: 154: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 15432  1FCA  080D               	movf	13,w	;volatile
 15433  1FCB  0020               	movlb	0	; select bank0
 15434  1FCC  00A8               	movwf	?_ADCC_GetSingleConversion+1
 15435  1FCD  0021               	movlb	1	; select bank1
 15436  1FCE  080C               	movf	12,w	;volatile
 15437  1FCF  0020               	movlb	0	; select bank0
 15438  1FD0  00A7               	movwf	?_ADCC_GetSingleConversion
 15439  1FD1                     l540:
 15440  1FD1  0008               	return
 15441  1FD2                     __end_of_ADCC_GetSingleConversion:
 15442                           
 15443                           	psect	text29
 15444  1EE2                     __ptext29:	
 15445 ;; *************** function _TMR2_StartTimer *****************
 15446 ;; Defined at:
 15447 ;;		line 106 in file "mcc_generated_files/tmr2.c"
 15448 ;; Parameters:    Size  Location     Type
 15449 ;;		None
 15450 ;; Auto vars:     Size  Location     Type
 15451 ;;		None
 15452 ;; Return value:  Size  Location     Type
 15453 ;;                  1    wreg      void 
 15454 ;; Registers used:
 15455 ;;		status,2, status,0, pclath, cstack
 15456 ;; Tracked objects:
 15457 ;;		On entry : 0/0
 15458 ;;		On exit  : 0/0
 15459 ;;		Unchanged: 0/0
 15460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15465 ;;Total ram usage:        0 bytes
 15466 ;; Hardware stack levels used:    1
 15467 ;; Hardware stack levels required when called:    5
 15468 ;; This function calls:
 15469 ;;		_TMR2_Start
 15470 ;; This function is called by:
 15471 ;;		_checkFlags
 15472 ;; This function uses a non-reentrant model
 15473 ;;
 15474                           
 15475                           
 15476                           ;psect for function _TMR2_StartTimer
 15477  1EE2                     _TMR2_StartTimer:
 15478  1EE2                     l6600:	
 15479                           ;incstack = 0
 15480                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
 15481                           
 15482                           
 15483                           ;tmr2.c: 108: TMR2_Start();
 15484  1EE2  319E  26D9  319E   	fcall	_TMR2_Start
 15485  1EE5                     l659:
 15486  1EE5  0008               	return
 15487  1EE6                     __end_of_TMR2_StartTimer:
 15488                           
 15489                           	psect	text30
 15490  1ED9                     __ptext30:	
 15491 ;; *************** function _TMR2_Start *****************
 15492 ;; Defined at:
 15493 ;;		line 100 in file "mcc_generated_files/tmr2.c"
 15494 ;; Parameters:    Size  Location     Type
 15495 ;;		None
 15496 ;; Auto vars:     Size  Location     Type
 15497 ;;		None
 15498 ;; Return value:  Size  Location     Type
 15499 ;;                  1    wreg      void 
 15500 ;; Registers used:
 15501 ;;		None
 15502 ;; Tracked objects:
 15503 ;;		On entry : 0/0
 15504 ;;		On exit  : 0/0
 15505 ;;		Unchanged: 0/0
 15506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;Total ram usage:        0 bytes
 15512 ;; Hardware stack levels used:    1
 15513 ;; Hardware stack levels required when called:    4
 15514 ;; This function calls:
 15515 ;;		Nothing
 15516 ;; This function is called by:
 15517 ;;		_TMR2_StartTimer
 15518 ;; This function uses a non-reentrant model
 15519 ;;
 15520                           
 15521                           
 15522                           ;psect for function _TMR2_Start
 15523  1ED9                     _TMR2_Start:
 15524  1ED9                     l6386:	
 15525                           ;incstack = 0
 15526                           ; Regs used in _TMR2_Start: []
 15527                           
 15528                           
 15529                           ;tmr2.c: 103: T2CONbits.TMR2ON = 1;
 15530  1ED9  0025               	movlb	5	; select bank5
 15531  1EDA  178E               	bsf	14,7	;volatile
 15532  1EDB                     l656:
 15533  1EDB  0008               	return
 15534  1EDC                     __end_of_TMR2_Start:
 15535                           
 15536                           	psect	text31
 15537  158B                     __ptext31:	
 15538 ;; *************** function _S1button *****************
 15539 ;; Defined at:
 15540 ;;		line 638 in file "main.c"
 15541 ;; Parameters:    Size  Location     Type
 15542 ;;		None
 15543 ;; Auto vars:     Size  Location     Type
 15544 ;;		None
 15545 ;; Return value:  Size  Location     Type
 15546 ;;                  1    wreg      void 
 15547 ;; Registers used:
 15548 ;;		wreg, status,2, status,0
 15549 ;; Tracked objects:
 15550 ;;		On entry : 0/0
 15551 ;;		On exit  : 0/0
 15552 ;;		Unchanged: 0/0
 15553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15558 ;;Total ram usage:        1 bytes
 15559 ;; Hardware stack levels used:    1
 15560 ;; Hardware stack levels required when called:    4
 15561 ;; This function calls:
 15562 ;;		Nothing
 15563 ;; This function is called by:
 15564 ;;		_checkFlags
 15565 ;; This function uses a non-reentrant model
 15566 ;;
 15567                           
 15568                           
 15569                           ;psect for function _S1button
 15570  158B                     _S1button:
 15571  158B                     l6822:	
 15572                           ;incstack = 0
 15573                           ; Regs used in _S1button: [wreg+status,2+status,0]
 15574                           
 15575                           
 15576                           ;main.c: 640: if(modeFlag == 0 && (clkAlarm.trigger || tempAlarm.trigger || lumAlarm.tri
      +                          gger)){
 15577  158B  0020               	movlb	0	; select bank0
 15578  158C  085D               	movf	_modeFlag,w
 15579  158D  045E               	iorwf	_modeFlag+1,w
 15580  158E  1D03               	btfss	3,2
 15581  158F  2D91               	goto	u8081
 15582  1590  2D92               	goto	u8080
 15583  1591                     u8081:
 15584  1591  2DA8               	goto	l6834
 15585  1592                     u8080:
 15586  1592                     l6824:
 15587  1592  0021               	movlb	1	; select bank1
 15588  1593  0823               	movf	(_clkAlarm^(0+128)+3),w
 15589  1594  1D03               	btfss	3,2
 15590  1595  2D97               	goto	u8091
 15591  1596  2D98               	goto	u8090
 15592  1597                     u8091:
 15593  1597  2DA2               	goto	l6830
 15594  1598                     u8090:
 15595  1598                     l6826:
 15596  1598  0828               	movf	(_tempAlarm^(0+128)+1),w
 15597  1599  1D03               	btfss	3,2
 15598  159A  2D9C               	goto	u8101
 15599  159B  2D9D               	goto	u8100
 15600  159C                     u8101:
 15601  159C  2DA2               	goto	l6830
 15602  159D                     u8100:
 15603  159D                     l6828:
 15604  159D  0825               	movf	(_lumAlarm^(0+128)+1),w
 15605  159E  1903               	btfsc	3,2
 15606  159F  2DA1               	goto	u8111
 15607  15A0  2DA2               	goto	u8110
 15608  15A1                     u8111:
 15609  15A1  2DA8               	goto	l6834
 15610  15A2                     u8110:
 15611  15A2                     l6830:
 15612                           
 15613                           ;main.c: 641: clkAlarm.trigger = 0;
 15614  15A2  01A3               	clrf	(_clkAlarm^(0+128)+3)
 15615                           
 15616                           ;main.c: 642: tempAlarm.trigger = 0;
 15617  15A3  01A8               	clrf	(_tempAlarm^(0+128)+1)
 15618                           
 15619                           ;main.c: 643: lumAlarm.trigger = 0;
 15620  15A4  01A5               	clrf	(_lumAlarm^(0+128)+1)
 15621  15A5                     l6832:
 15622                           
 15623                           ;main.c: 644: updateLCD = 1;
 15624  15A5  01D5               	clrf	_updateLCD^(0+128)
 15625  15A6  0AD5               	incf	_updateLCD^(0+128),f
 15626                           
 15627                           ;main.c: 645: } else{
 15628  15A7  2DDD               	goto	l1371
 15629  15A8                     l6834:
 15630                           
 15631                           ;main.c: 646: if(modeFlag == 1){
 15632  15A8  0020               	movlb	0	; select bank0
 15633  15A9  035D               	decf	_modeFlag,w
 15634  15AA  045E               	iorwf	_modeFlag+1,w
 15635  15AB  1D03               	btfss	3,2
 15636  15AC  2DAE               	goto	u8121
 15637  15AD  2DAF               	goto	u8120
 15638  15AE                     u8121:
 15639  15AE  2DD2               	goto	l6842
 15640  15AF                     u8120:
 15641  15AF                     l6836:
 15642                           
 15643                           ;main.c: 647: if(editingClockAlarm >= 1){
 15644  15AF  0860               	movf	_editingClockAlarm+1,w
 15645  15B0  3A80               	xorlw	128
 15646  15B1  00A7               	movwf	??_S1button
 15647  15B2  3080               	movlw	128
 15648  15B3  0227               	subwf	??_S1button,w
 15649  15B4  1D03               	skipz
 15650  15B5  2DB8               	goto	u8135
 15651  15B6  3001               	movlw	1
 15652  15B7  025F               	subwf	_editingClockAlarm,w
 15653  15B8                     u8135:
 15654  15B8  1C03               	skipc
 15655  15B9  2DBB               	goto	u8131
 15656  15BA  2DBC               	goto	u8130
 15657  15BB                     u8131:
 15658  15BB  2DC1               	goto	l1373
 15659  15BC                     u8130:
 15660  15BC                     l6838:
 15661                           
 15662                           ;main.c: 648: editingClockAlarm++;
 15663  15BC  3001               	movlw	1
 15664  15BD  0020               	movlb	0	; select bank0
 15665  15BE  07DF               	addwf	_editingClockAlarm,f
 15666  15BF  3000               	movlw	0
 15667  15C0  3DE0               	addwfc	_editingClockAlarm+1,f
 15668  15C1                     l1373:
 15669                           
 15670                           ;main.c: 649: };main.c: 650: if(editingClockAlarm > 3){
 15671  15C1  0020               	movlb	0	; select bank0
 15672  15C2  0860               	movf	_editingClockAlarm+1,w
 15673  15C3  3A80               	xorlw	128
 15674  15C4  00A7               	movwf	??_S1button
 15675  15C5  3080               	movlw	128
 15676  15C6  0227               	subwf	??_S1button,w
 15677  15C7  1D03               	skipz
 15678  15C8  2DCB               	goto	u8145
 15679  15C9  3004               	movlw	4
 15680  15CA  025F               	subwf	_editingClockAlarm,w
 15681  15CB                     u8145:
 15682  15CB  1C03               	skipc
 15683  15CC  2DCE               	goto	u8141
 15684  15CD  2DCF               	goto	u8140
 15685  15CE                     u8141:
 15686  15CE  2DD2               	goto	l6842
 15687  15CF                     u8140:
 15688  15CF                     l6840:
 15689                           
 15690                           ;main.c: 651: editingClockAlarm = 0;
 15691  15CF  0020               	movlb	0	; select bank0
 15692  15D0  01DF               	clrf	_editingClockAlarm
 15693  15D1  01E0               	clrf	_editingClockAlarm+1
 15694  15D2                     l6842:
 15695                           
 15696                           ;main.c: 652: };main.c: 653: };main.c: 654: if(editingClockAlarm == 0){
 15697  15D2  0020               	movlb	0	; select bank0
 15698  15D3  085F               	movf	_editingClockAlarm,w
 15699  15D4  0460               	iorwf	_editingClockAlarm+1,w
 15700  15D5  1D03               	btfss	3,2
 15701  15D6  2DD8               	goto	u8151
 15702  15D7  2DD9               	goto	u8150
 15703  15D8                     u8151:
 15704  15D8  2DDD               	goto	l1371
 15705  15D9                     u8150:
 15706  15D9                     l6844:
 15707                           
 15708                           ;main.c: 655: modeFlag++;
 15709  15D9  3001               	movlw	1
 15710  15DA  07DD               	addwf	_modeFlag,f
 15711  15DB  3000               	movlw	0
 15712  15DC  3DDE               	addwfc	_modeFlag+1,f
 15713  15DD                     l1371:
 15714                           
 15715                           ;main.c: 656: };main.c: 657: };main.c: 658: _delay((unsigned long)((50)*(1000000/4000.0)
      +                          ));
 15716  15DD  3011               	movlw	17
 15717  15DE  0020               	movlb	0	; select bank0
 15718  15DF  00A7               	movwf	??_S1button
 15719  15E0  303A               	movlw	58
 15720  15E1                     u9587:
 15721  15E1  0B89               	decfsz	9,f
 15722  15E2  2DE1               	goto	u9587
 15723  15E3  0BA7               	decfsz	??_S1button,f
 15724  15E4  2DE1               	goto	u9587
 15725  15E5  0000               	nop
 15726  15E6                     l1376:
 15727  15E6  0008               	return
 15728  15E7                     __end_of_S1button:
 15729                           
 15730                           	psect	text32
 15731  1ED6                     __ptext32:	
 15732 ;; *************** function _PWM_Output_D4_Enable *****************
 15733 ;; Defined at:
 15734 ;;		line 351 in file "main.c"
 15735 ;; Parameters:    Size  Location     Type
 15736 ;;		None
 15737 ;; Auto vars:     Size  Location     Type
 15738 ;;		None
 15739 ;; Return value:  Size  Location     Type
 15740 ;;                  1    wreg      void 
 15741 ;; Registers used:
 15742 ;;		None
 15743 ;; Tracked objects:
 15744 ;;		On entry : 0/0
 15745 ;;		On exit  : 0/0
 15746 ;;		Unchanged: 0/0
 15747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15752 ;;Total ram usage:        0 bytes
 15753 ;; Hardware stack levels used:    1
 15754 ;; Hardware stack levels required when called:    4
 15755 ;; This function calls:
 15756 ;;		Nothing
 15757 ;; This function is called by:
 15758 ;;		_checkFlags
 15759 ;; This function uses a non-reentrant model
 15760 ;;
 15761                           
 15762                           
 15763                           ;psect for function _PWM_Output_D4_Enable
 15764  1ED6                     _PWM_Output_D4_Enable:
 15765  1ED6                     l6608:	
 15766                           ;incstack = 0
 15767                           ; Regs used in _PWM_Output_D4_Enable: []
 15768                           
 15769                           
 15770                           ;main.c: 352: PWM6EN = 1;
 15771  1ED6  0027               	movlb	7	; select bank7
 15772  1ED7  178E               	bsf	14,7	;volatile
 15773  1ED8                     l1259:
 15774  1ED8  0008               	return
 15775  1ED9                     __end_of_PWM_Output_D4_Enable:
 15776                           
 15777                           	psect	text33
 15778  0B04                     __ptext33:	
 15779 ;; *************** function _cmd_trc *****************
 15780 ;; Defined at:
 15781 ;;		line 1006 in file "main.c"
 15782 ;; Parameters:    Size  Location     Type
 15783 ;;  num             2   22[BANK0 ] int 
 15784 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 15785 ;;		 -> main@buff(20), 
 15786 ;; Auto vars:     Size  Location     Type
 15787 ;;  buffData        5   31[BANK0 ] unsigned char [5]
 15788 ;;  buffInit        3   36[BANK0 ] unsigned char [3]
 15789 ;;  n               2   46[BANK0 ] int 
 15790 ;;  maxReadings     2   44[BANK0 ] int 
 15791 ;;  address         2   41[BANK0 ] unsigned int 
 15792 ;;  i               2   39[BANK0 ] int 
 15793 ;;  j               1   48[BANK0 ] unsigned char 
 15794 ;;  buffEOM         1   43[BANK0 ] unsigned char [1]
 15795 ;; Return value:  Size  Location     Type
 15796 ;;                  1    wreg      void 
 15797 ;; Registers used:
 15798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15799 ;; Tracked objects:
 15800 ;;		On entry : 0/0
 15801 ;;		On exit  : 0/0
 15802 ;;		Unchanged: 0/0
 15803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15804 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15805 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15806 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15807 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15808 ;;Total ram usage:       27 bytes
 15809 ;; Hardware stack levels used:    1
 15810 ;; Hardware stack levels required when called:    8
 15811 ;; This function calls:
 15812 ;;		_DATAEE_ReadByte
 15813 ;;		___wmul
 15814 ;;		_sendERRORMessage
 15815 ;;		_sendMessage
 15816 ;; This function is called by:
 15817 ;;		_main
 15818 ;; This function uses a non-reentrant model
 15819 ;;
 15820                           
 15821                           
 15822                           ;psect for function _cmd_trc
 15823  0B04                     _cmd_trc:
 15824  0B04                     l7460:	
 15825                           ;incstack = 0
 15826                           ; Regs used in _cmd_trc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15827                           
 15828                           
 15829                           ;main.c: 1007: if(num == 4){
 15830  0B04  3004               	movlw	4
 15831  0B05  0020               	movlb	0	; select bank0
 15832  0B06  0636               	xorwf	cmd_trc@num,w
 15833  0B07  0437               	iorwf	cmd_trc@num+1,w
 15834  0B08  1D03               	btfss	3,2
 15835  0B09  2B0B               	goto	u9101
 15836  0B0A  2B0C               	goto	u9100
 15837  0B0B                     u9101:
 15838  0B0B  2C00               	goto	l7518
 15839  0B0C                     u9100:
 15840  0B0C                     l7462:
 15841                           
 15842                           ;main.c: 1008: int n = buffer[2];
 15843  0B0C  0838               	movf	cmd_trc@buffer,w
 15844  0B0D  3E02               	addlw	2
 15845  0B0E  0086               	movwf	6
 15846  0B0F  3001               	movlw	1	; select bank2/3
 15847  0B10  0087               	movwf	7
 15848  0B11  0801               	movf	1,w
 15849  0B12  00B9               	movwf	??_cmd_trc
 15850  0B13  01BA               	clrf	??_cmd_trc+1
 15851  0B14  0839               	movf	??_cmd_trc,w
 15852  0B15  00CE               	movwf	cmd_trc@n
 15853  0B16  083A               	movf	??_cmd_trc+1,w
 15854  0B17  00CF               	movwf	cmd_trc@n+1
 15855  0B18                     l7464:
 15856                           
 15857                           ;main.c: 1009: int maxReadings = (iwrite-iread);
 15858  0B18  087B               	movf	_iread,w
 15859  0B19  027A               	subwf	_iwrite,w
 15860  0B1A  00CC               	movwf	cmd_trc@maxReadings
 15861  0B1B  01CD               	clrf	cmd_trc@maxReadings+1
 15862  0B1C  1C03               	skipc
 15863  0B1D  03CD               	decf	cmd_trc@maxReadings+1,f
 15864  0B1E                     l7466:
 15865                           
 15866                           ;main.c: 1010: if(maxReadings < 0){
 15867  0B1E  1FCD               	btfss	cmd_trc@maxReadings+1,7
 15868  0B1F  2B21               	goto	u9111
 15869  0B20  2B22               	goto	u9110
 15870  0B21                     u9111:
 15871  0B21  2B30               	goto	l1510
 15872  0B22                     u9110:
 15873  0B22                     l7468:
 15874                           
 15875                           ;main.c: 1011: maxReadings = iwrite + (NREG - iread);
 15876  0B22  087B               	movf	_iread,w
 15877  0B23  00B9               	movwf	??_cmd_trc
 15878  0B24  01BA               	clrf	??_cmd_trc+1
 15879  0B25  087A               	movf	_iwrite,w
 15880  0B26  077D               	addwf	_NREG,w
 15881  0B27  00BB               	movwf	??_cmd_trc+2
 15882  0B28  01BC               	clrf	??_cmd_trc+3
 15883  0B29  0DBC               	rlf	??_cmd_trc+3,f
 15884  0B2A  0839               	movf	??_cmd_trc,w
 15885  0B2B  023B               	subwf	??_cmd_trc+2,w
 15886  0B2C  00CC               	movwf	cmd_trc@maxReadings
 15887  0B2D  083A               	movf	??_cmd_trc+1,w
 15888  0B2E  3B3C               	subwfb	??_cmd_trc+3,w
 15889  0B2F  00CD               	movwf	cmd_trc@maxReadings+1
 15890  0B30                     l1510:
 15891                           
 15892                           ;main.c: 1012: };main.c: 1013: if(maxReadings == 0 && nr == NREG){
 15893  0B30  084C               	movf	cmd_trc@maxReadings,w
 15894  0B31  044D               	iorwf	cmd_trc@maxReadings+1,w
 15895  0B32  1D03               	btfss	3,2
 15896  0B33  2B35               	goto	u9121
 15897  0B34  2B36               	goto	u9120
 15898  0B35                     u9121:
 15899  0B35  2B43               	goto	l1511
 15900  0B36                     u9120:
 15901  0B36                     l7470:
 15902  0B36  0879               	movf	_nr,w
 15903  0B37  067D               	xorwf	_NREG,w
 15904  0B38  1D03               	skipz
 15905  0B39  2B3B               	goto	u9131
 15906  0B3A  2B3C               	goto	u9130
 15907  0B3B                     u9131:
 15908  0B3B  2B43               	goto	l1511
 15909  0B3C                     u9130:
 15910  0B3C                     l7472:
 15911                           
 15912                           ;main.c: 1014: maxReadings = nr;
 15913  0B3C  0879               	movf	_nr,w
 15914  0B3D  00B9               	movwf	??_cmd_trc
 15915  0B3E  01BA               	clrf	??_cmd_trc+1
 15916  0B3F  0839               	movf	??_cmd_trc,w
 15917  0B40  00CC               	movwf	cmd_trc@maxReadings
 15918  0B41  083A               	movf	??_cmd_trc+1,w
 15919  0B42  00CD               	movwf	cmd_trc@maxReadings+1
 15920  0B43                     l1511:
 15921                           
 15922                           ;main.c: 1015: };main.c: 1016: if((n > nr) || (n > maxReadings)){
 15923  0B43  084F               	movf	cmd_trc@n+1,w
 15924  0B44  3A80               	xorlw	128
 15925  0B45  3C80               	sublw	128
 15926  0B46  1D03               	skipz
 15927  0B47  2B4A               	goto	u9145
 15928  0B48  084E               	movf	cmd_trc@n,w
 15929  0B49  0279               	subwf	_nr,w
 15930  0B4A                     u9145:
 15931  0B4A  1C03               	skipc
 15932  0B4B  2B4D               	goto	u9141
 15933  0B4C  2B4E               	goto	u9140
 15934  0B4D                     u9141:
 15935  0B4D  2B5D               	goto	l7476
 15936  0B4E                     u9140:
 15937  0B4E                     l7474:
 15938  0B4E  0020               	movlb	0	; select bank0
 15939  0B4F  084D               	movf	cmd_trc@maxReadings+1,w
 15940  0B50  3A80               	xorlw	128
 15941  0B51  00B9               	movwf	??_cmd_trc
 15942  0B52  084F               	movf	cmd_trc@n+1,w
 15943  0B53  3A80               	xorlw	128
 15944  0B54  0239               	subwf	??_cmd_trc,w
 15945  0B55  1D03               	skipz
 15946  0B56  2B59               	goto	u9155
 15947  0B57  084E               	movf	cmd_trc@n,w
 15948  0B58  024C               	subwf	cmd_trc@maxReadings,w
 15949  0B59                     u9155:
 15950  0B59  1803               	skipnc
 15951  0B5A  2B5C               	goto	u9151
 15952  0B5B  2B5D               	goto	u9150
 15953  0B5C                     u9151:
 15954  0B5C  2B62               	goto	l7480
 15955  0B5D                     u9150:
 15956  0B5D                     l7476:
 15957                           
 15958                           ;main.c: 1017: sendERRORMessage((uint8_t)0XCB);
 15959  0B5D  30CB               	movlw	203
 15960  0B5E  3190  2085  318B   	fcall	_sendERRORMessage
 15961  0B61  2C04               	goto	l1515
 15962  0B62                     l7480:
 15963                           
 15964                           ;main.c: 1019: };main.c: 1020: uint8_t buffInit[3];;main.c: 1021: buffInit[0] = (uint8_t
      +                          )0xFD;
 15965  0B62  30FD               	movlw	253
 15966  0B63  0020               	movlb	0	; select bank0
 15967  0B64  00B9               	movwf	??_cmd_trc
 15968  0B65  0839               	movf	??_cmd_trc,w
 15969  0B66  00C4               	movwf	cmd_trc@buffInit
 15970                           
 15971                           ;main.c: 1022: buffInit[1] = (uint8_t)0XCB;
 15972  0B67  30CB               	movlw	203
 15973  0B68  00B9               	movwf	??_cmd_trc
 15974  0B69  0839               	movf	??_cmd_trc,w
 15975  0B6A  00C5               	movwf	cmd_trc@buffInit+1
 15976                           
 15977                           ;main.c: 1023: buffInit[2] = (uint8_t)n;
 15978  0B6B  084E               	movf	cmd_trc@n,w
 15979  0B6C  00B9               	movwf	??_cmd_trc
 15980  0B6D  0839               	movf	??_cmd_trc,w
 15981  0B6E  00C6               	movwf	cmd_trc@buffInit+2
 15982  0B6F                     l7482:
 15983                           
 15984                           ;main.c: 1024: sendMessage(3,buffInit);
 15985  0B6F  3003               	movlw	3
 15986  0B70  00AA               	movwf	sendMessage@num
 15987  0B71  3000               	movlw	0
 15988  0B72  00AB               	movwf	sendMessage@num+1
 15989  0B73  3044               	movlw	(low (cmd_trc@buffInit| 0))& (0+255)
 15990  0B74  00B9               	movwf	??_cmd_trc
 15991  0B75  0839               	movf	??_cmd_trc,w
 15992  0B76  00AC               	movwf	sendMessage@buffer
 15993  0B77  3191  2181  318B   	fcall	_sendMessage
 15994  0B7A                     l7484:
 15995  0B7A                     l7486:
 15996                           
 15997                           ;main.c: 1029: for(i = 0; i < n; i++){
 15998  0B7A  0020               	movlb	0	; select bank0
 15999  0B7B  01C7               	clrf	cmd_trc@i
 16000  0B7C  01C8               	clrf	cmd_trc@i+1
 16001  0B7D  2BE1               	goto	l7512
 16002  0B7E                     l7488:
 16003                           
 16004                           ;main.c: 1030: for(j = 0; j < 5; j++){
 16005  0B7E  0020               	movlb	0	; select bank0
 16006  0B7F  01D0               	clrf	cmd_trc@j
 16007  0B80                     l7494:
 16008                           
 16009                           ;main.c: 1031: address = (iread * 0x5) + 0x7012 + j;
 16010  0B80  0850               	movf	cmd_trc@j,w
 16011  0B81  00B9               	movwf	??_cmd_trc
 16012  0B82  01BA               	clrf	??_cmd_trc+1
 16013  0B83  087B               	movf	_iread,w
 16014  0B84  00BB               	movwf	??_cmd_trc+2
 16015  0B85  01BC               	clrf	??_cmd_trc+3
 16016  0B86  083B               	movf	??_cmd_trc+2,w
 16017  0B87  00A7               	movwf	___wmul@multiplier
 16018  0B88  083C               	movf	??_cmd_trc+3,w
 16019  0B89  00A8               	movwf	___wmul@multiplier+1
 16020  0B8A  3005               	movlw	5
 16021  0B8B  00A9               	movwf	___wmul@multiplicand
 16022  0B8C  3000               	movlw	0
 16023  0B8D  00AA               	movwf	___wmul@multiplicand+1
 16024  0B8E  3190  20FF  318B   	fcall	___wmul
 16025  0B91  0020               	movlb	0	; select bank0
 16026  0B92  0839               	movf	??_cmd_trc,w
 16027  0B93  0727               	addwf	?___wmul,w
 16028  0B94  00BD               	movwf	??_cmd_trc+4
 16029  0B95  083A               	movf	??_cmd_trc+1,w
 16030  0B96  3D28               	addwfc	?___wmul+1,w
 16031  0B97  00BE               	movwf	??_cmd_trc+5
 16032  0B98  083D               	movf	??_cmd_trc+4,w
 16033  0B99  3E12               	addlw	18
 16034  0B9A  00C9               	movwf	cmd_trc@address
 16035  0B9B  3070               	movlw	112
 16036  0B9C  3D3E               	addwfc	??_cmd_trc+5,w
 16037  0B9D  00CA               	movwf	cmd_trc@address+1
 16038  0B9E                     l7496:
 16039                           
 16040                           ;main.c: 1032: buffData[j] = DATAEE_ReadByte(address);
 16041  0B9E  084A               	movf	cmd_trc@address+1,w
 16042  0B9F  00AE               	movwf	DATAEE_ReadByte@bAdd+1
 16043  0BA0  0849               	movf	cmd_trc@address,w
 16044  0BA1  00AD               	movwf	DATAEE_ReadByte@bAdd
 16045  0BA2  319F  279C  318B   	fcall	_DATAEE_ReadByte
 16046  0BA5  0020               	movlb	0	; select bank0
 16047  0BA6  00B9               	movwf	??_cmd_trc
 16048  0BA7  0850               	movf	cmd_trc@j,w
 16049  0BA8  3E3F               	addlw	(low (cmd_trc@buffData| 0))& (0+255)
 16050  0BA9  0086               	movwf	6
 16051  0BAA  0187               	clrf	7
 16052  0BAB  0839               	movf	??_cmd_trc,w
 16053  0BAC  0081               	movwf	1
 16054  0BAD                     l7498:
 16055  0BAD  3001               	movlw	1
 16056  0BAE  00B9               	movwf	??_cmd_trc
 16057  0BAF  0839               	movf	??_cmd_trc,w
 16058  0BB0  07D0               	addwf	cmd_trc@j,f
 16059  0BB1                     l7500:
 16060  0BB1  3005               	movlw	5
 16061  0BB2  0250               	subwf	cmd_trc@j,w
 16062  0BB3  1C03               	skipc
 16063  0BB4  2BB6               	goto	u9161
 16064  0BB5  2BB7               	goto	u9160
 16065  0BB6                     u9161:
 16066  0BB6  2B80               	goto	l7494
 16067  0BB7                     u9160:
 16068  0BB7                     l7502:
 16069                           
 16070                           ;main.c: 1033: };main.c: 1034: sendMessage(5,buffData);
 16071  0BB7  3005               	movlw	5
 16072  0BB8  00AA               	movwf	sendMessage@num
 16073  0BB9  3000               	movlw	0
 16074  0BBA  00AB               	movwf	sendMessage@num+1
 16075  0BBB  303F               	movlw	(low (cmd_trc@buffData| 0))& (0+255)
 16076  0BBC  00B9               	movwf	??_cmd_trc
 16077  0BBD  0839               	movf	??_cmd_trc,w
 16078  0BBE  00AC               	movwf	sendMessage@buffer
 16079  0BBF  3191  2181  318B   	fcall	_sendMessage
 16080  0BC2                     l7504:
 16081                           
 16082                           ;main.c: 1035: iread++;
 16083  0BC2  3001               	movlw	1
 16084  0BC3  0020               	movlb	0	; select bank0
 16085  0BC4  00B9               	movwf	??_cmd_trc
 16086  0BC5  0839               	movf	??_cmd_trc,w
 16087  0BC6  07FB               	addwf	_iread,f
 16088  0BC7                     l7506:
 16089                           
 16090                           ;main.c: 1036: if(iread>NREG-1){
 16091  0BC7  087D               	movf	_NREG,w
 16092  0BC8  3EFF               	addlw	255
 16093  0BC9  00B9               	movwf	??_cmd_trc
 16094  0BCA  30FF               	movlw	255
 16095  0BCB  1803               	skipnc
 16096  0BCC  3000               	movlw	0
 16097  0BCD  00BA               	movwf	??_cmd_trc+1
 16098  0BCE  083A               	movf	??_cmd_trc+1,w
 16099  0BCF  3A80               	xorlw	128
 16100  0BD0  00BB               	movwf	??_cmd_trc+2
 16101  0BD1  3080               	movlw	128
 16102  0BD2  023B               	subwf	??_cmd_trc+2,w
 16103  0BD3  1D03               	skipz
 16104  0BD4  2BD7               	goto	u9175
 16105  0BD5  087B               	movf	_iread,w
 16106  0BD6  0239               	subwf	??_cmd_trc,w
 16107  0BD7                     u9175:
 16108  0BD7  1803               	skipnc
 16109  0BD8  2BDA               	goto	u9171
 16110  0BD9  2BDB               	goto	u9170
 16111  0BDA                     u9171:
 16112  0BDA  2BDC               	goto	l7510
 16113  0BDB                     u9170:
 16114  0BDB                     l7508:
 16115                           
 16116                           ;main.c: 1037: iread=0;
 16117  0BDB  01FB               	clrf	_iread
 16118  0BDC                     l7510:
 16119  0BDC  3001               	movlw	1
 16120  0BDD  0020               	movlb	0	; select bank0
 16121  0BDE  07C7               	addwf	cmd_trc@i,f
 16122  0BDF  3000               	movlw	0
 16123  0BE0  3DC8               	addwfc	cmd_trc@i+1,f
 16124  0BE1                     l7512:
 16125  0BE1  0848               	movf	cmd_trc@i+1,w
 16126  0BE2  3A80               	xorlw	128
 16127  0BE3  00B9               	movwf	??_cmd_trc
 16128  0BE4  084F               	movf	cmd_trc@n+1,w
 16129  0BE5  3A80               	xorlw	128
 16130  0BE6  0239               	subwf	??_cmd_trc,w
 16131  0BE7  1D03               	skipz
 16132  0BE8  2BEB               	goto	u9185
 16133  0BE9  084E               	movf	cmd_trc@n,w
 16134  0BEA  0247               	subwf	cmd_trc@i,w
 16135  0BEB                     u9185:
 16136  0BEB  1C03               	skipc
 16137  0BEC  2BEE               	goto	u9181
 16138  0BED  2BEF               	goto	u9180
 16139  0BEE                     u9181:
 16140  0BEE  2B7E               	goto	l7488
 16141  0BEF                     u9180:
 16142  0BEF                     l7514:
 16143                           
 16144                           ;main.c: 1038: };main.c: 1039: };main.c: 1040: uint8_t buffEOM[1];;main.c: 1041: buffEOM
      +                          [0] = (uint8_t)0xFE;
 16145  0BEF  30FE               	movlw	254
 16146  0BF0  0020               	movlb	0	; select bank0
 16147  0BF1  00B9               	movwf	??_cmd_trc
 16148  0BF2  0839               	movf	??_cmd_trc,w
 16149  0BF3  00CB               	movwf	cmd_trc@buffEOM
 16150  0BF4                     l7516:
 16151                           
 16152                           ;main.c: 1042: sendMessage(1,buffEOM);
 16153  0BF4  3001               	movlw	1
 16154  0BF5  00AA               	movwf	sendMessage@num
 16155  0BF6  3000               	movlw	0
 16156  0BF7  00AB               	movwf	sendMessage@num+1
 16157  0BF8  304B               	movlw	(low (cmd_trc@buffEOM| 0))& (0+255)
 16158  0BF9  00B9               	movwf	??_cmd_trc
 16159  0BFA  0839               	movf	??_cmd_trc,w
 16160  0BFB  00AC               	movwf	sendMessage@buffer
 16161  0BFC  3191  2181  318B   	fcall	_sendMessage
 16162                           
 16163                           ;main.c: 1043: } else{
 16164  0BFF  2C04               	goto	l1515
 16165  0C00                     l7518:
 16166                           
 16167                           ;main.c: 1044: sendERRORMessage((uint8_t)0XCB);
 16168  0C00  30CB               	movlw	203
 16169  0C01  3190  2085  318B   	fcall	_sendERRORMessage
 16170  0C04                     l1515:
 16171  0C04  0008               	return
 16172  0C05                     __end_of_cmd_trc:
 16173                           
 16174                           	psect	text34
 16175  125D                     __ptext34:	
 16176 ;; *************** function _cmd_ir *****************
 16177 ;; Defined at:
 16178 ;;		line 993 in file "main.c"
 16179 ;; Parameters:    Size  Location     Type
 16180 ;;  num             2   22[BANK0 ] int 
 16181 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16182 ;;		 -> main@buff(20), 
 16183 ;; Auto vars:     Size  Location     Type
 16184 ;;  buff            7   26[BANK0 ] unsigned char [7]
 16185 ;; Return value:  Size  Location     Type
 16186 ;;                  1    wreg      void 
 16187 ;; Registers used:
 16188 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16189 ;; Tracked objects:
 16190 ;;		On entry : 0/0
 16191 ;;		On exit  : 0/0
 16192 ;;		Unchanged: 0/0
 16193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16194 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16195 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16196 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16197 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16198 ;;Total ram usage:       11 bytes
 16199 ;; Hardware stack levels used:    1
 16200 ;; Hardware stack levels required when called:    7
 16201 ;; This function calls:
 16202 ;;		_sendMessage
 16203 ;; This function is called by:
 16204 ;;		_main
 16205 ;; This function uses a non-reentrant model
 16206 ;;
 16207                           
 16208                           
 16209                           ;psect for function _cmd_ir
 16210  125D                     _cmd_ir:
 16211  125D                     l7456:	
 16212                           ;incstack = 0
 16213                           ; Regs used in _cmd_ir: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16214                           
 16215                           
 16216                           ;main.c: 994: uint8_t buff[7];;main.c: 995: buff[0] = (uint8_t)0xFD;
 16217  125D  30FD               	movlw	253
 16218  125E  0020               	movlb	0	; select bank0
 16219  125F  00B9               	movwf	??_cmd_ir
 16220  1260  0839               	movf	??_cmd_ir,w
 16221  1261  00BA               	movwf	cmd_ir@buff
 16222                           
 16223                           ;main.c: 996: buff[1] = (uint8_t)0XCA;
 16224  1262  30CA               	movlw	202
 16225  1263  00B9               	movwf	??_cmd_ir
 16226  1264  0839               	movf	??_cmd_ir,w
 16227  1265  00BB               	movwf	cmd_ir@buff+1
 16228                           
 16229                           ;main.c: 997: buff[2] = NREG;
 16230  1266  087D               	movf	_NREG,w
 16231  1267  00B9               	movwf	??_cmd_ir
 16232  1268  0839               	movf	??_cmd_ir,w
 16233  1269  00BC               	movwf	cmd_ir@buff+2
 16234                           
 16235                           ;main.c: 998: buff[3] = nr;
 16236  126A  0879               	movf	_nr,w
 16237  126B  00B9               	movwf	??_cmd_ir
 16238  126C  0839               	movf	??_cmd_ir,w
 16239  126D  00BD               	movwf	cmd_ir@buff+3
 16240                           
 16241                           ;main.c: 999: buff[4] = iread;
 16242  126E  087B               	movf	_iread,w
 16243  126F  00B9               	movwf	??_cmd_ir
 16244  1270  0839               	movf	??_cmd_ir,w
 16245  1271  00BE               	movwf	cmd_ir@buff+4
 16246                           
 16247                           ;main.c: 1000: buff[5] = iwrite;
 16248  1272  087A               	movf	_iwrite,w
 16249  1273  00B9               	movwf	??_cmd_ir
 16250  1274  0839               	movf	??_cmd_ir,w
 16251  1275  00BF               	movwf	cmd_ir@buff+5
 16252                           
 16253                           ;main.c: 1001: buff[6] = (uint8_t)0xFE;
 16254  1276  30FE               	movlw	254
 16255  1277  00B9               	movwf	??_cmd_ir
 16256  1278  0839               	movf	??_cmd_ir,w
 16257  1279  00C0               	movwf	cmd_ir@buff+6
 16258  127A                     l7458:
 16259                           
 16260                           ;main.c: 1003: sendMessage(7,buff);
 16261  127A  3007               	movlw	7
 16262  127B  00AA               	movwf	sendMessage@num
 16263  127C  3000               	movlw	0
 16264  127D  00AB               	movwf	sendMessage@num+1
 16265  127E  303A               	movlw	(low (cmd_ir@buff| 0))& (0+255)
 16266  127F  00B9               	movwf	??_cmd_ir
 16267  1280  0839               	movf	??_cmd_ir,w
 16268  1281  00AC               	movwf	sendMessage@buffer
 16269  1282  3191  2181  3192   	fcall	_sendMessage
 16270  1285                     l1506:
 16271  1285  0008               	return
 16272  1286                     __end_of_cmd_ir:
 16273                           
 16274                           	psect	text35
 16275  13E2                     __ptext35:	
 16276 ;; *************** function _cmd_aa *****************
 16277 ;; Defined at:
 16278 ;;		line 981 in file "main.c"
 16279 ;; Parameters:    Size  Location     Type
 16280 ;;  num             2   22[BANK0 ] int 
 16281 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16282 ;;		 -> main@buff(20), 
 16283 ;; Auto vars:     Size  Location     Type
 16284 ;;		None
 16285 ;; Return value:  Size  Location     Type
 16286 ;;                  1    wreg      void 
 16287 ;; Registers used:
 16288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16289 ;; Tracked objects:
 16290 ;;		On entry : 0/0
 16291 ;;		On exit  : 0/0
 16292 ;;		Unchanged: 0/0
 16293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16294 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;Total ram usage:        4 bytes
 16299 ;; Hardware stack levels used:    1
 16300 ;; Hardware stack levels required when called:    8
 16301 ;; This function calls:
 16302 ;;		_sendERRORMessage
 16303 ;;		_sendOKMessage
 16304 ;; This function is called by:
 16305 ;;		_main
 16306 ;; This function uses a non-reentrant model
 16307 ;;
 16308                           
 16309                           
 16310                           ;psect for function _cmd_aa
 16311  13E2                     _cmd_aa:
 16312  13E2                     l7438:	
 16313                           ;incstack = 0
 16314                           ; Regs used in _cmd_aa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16315                           
 16316                           
 16317                           ;main.c: 982: if(buffer[2] == 0 && num == 4){
 16318  13E2  0020               	movlb	0	; select bank0
 16319  13E3  0838               	movf	cmd_aa@buffer,w
 16320  13E4  3E02               	addlw	2
 16321  13E5  0086               	movwf	6
 16322  13E6  3001               	movlw	1	; select bank2/3
 16323  13E7  0087               	movwf	7
 16324  13E8  0801               	movf	1,w
 16325  13E9  1D03               	btfss	3,2
 16326  13EA  2BEC               	goto	u9061
 16327  13EB  2BED               	goto	u9060
 16328  13EC                     u9061:
 16329  13EC  2BFD               	goto	l7446
 16330  13ED                     u9060:
 16331  13ED                     l7440:
 16332  13ED  3004               	movlw	4
 16333  13EE  0636               	xorwf	cmd_aa@num,w
 16334  13EF  0437               	iorwf	cmd_aa@num+1,w
 16335  13F0  1D03               	btfss	3,2
 16336  13F1  2BF3               	goto	u9071
 16337  13F2  2BF4               	goto	u9070
 16338  13F3                     u9071:
 16339  13F3  2BFD               	goto	l7446
 16340  13F4                     u9070:
 16341  13F4                     l7442:
 16342                           
 16343                           ;main.c: 983: ALAF = 'a';
 16344  13F4  3061               	movlw	97
 16345  13F5  00B9               	movwf	??_cmd_aa
 16346  13F6  0839               	movf	??_cmd_aa,w
 16347  13F7  00FC               	movwf	_ALAF
 16348  13F8                     l7444:
 16349                           
 16350                           ;main.c: 984: sendOKMessage((uint8_t)0XC9);
 16351  13F8  30C9               	movlw	201
 16352  13F9  3190  2033  3193   	fcall	_sendOKMessage
 16353                           
 16354                           ;main.c: 985: } else if(buffer[2] == 1 && num == 4){
 16355  13FC  2C1B               	goto	l1503
 16356  13FD                     l7446:
 16357  13FD  0838               	movf	cmd_aa@buffer,w
 16358  13FE  3E02               	addlw	2
 16359  13FF  0086               	movwf	6
 16360  1400  3001               	movlw	1	; select bank2/3
 16361  1401  0087               	movwf	7
 16362  1402  0301               	decf	1,w
 16363  1403  1D03               	btfss	3,2
 16364  1404  2C06               	goto	u9081
 16365  1405  2C07               	goto	u9080
 16366  1406                     u9081:
 16367  1406  2C17               	goto	l7454
 16368  1407                     u9080:
 16369  1407                     l7448:
 16370  1407  3004               	movlw	4
 16371  1408  0636               	xorwf	cmd_aa@num,w
 16372  1409  0437               	iorwf	cmd_aa@num+1,w
 16373  140A  1D03               	btfss	3,2
 16374  140B  2C0D               	goto	u9091
 16375  140C  2C0E               	goto	u9090
 16376  140D                     u9091:
 16377  140D  2C17               	goto	l7454
 16378  140E                     u9090:
 16379  140E                     l7450:
 16380                           
 16381                           ;main.c: 986: ALAF = 'A';
 16382  140E  3041               	movlw	65
 16383  140F  00B9               	movwf	??_cmd_aa
 16384  1410  0839               	movf	??_cmd_aa,w
 16385  1411  00FC               	movwf	_ALAF
 16386  1412                     l7452:
 16387                           
 16388                           ;main.c: 987: sendOKMessage((uint8_t)0XC9);
 16389  1412  30C9               	movlw	201
 16390  1413  3190  2033  3193   	fcall	_sendOKMessage
 16391                           
 16392                           ;main.c: 988: } else {
 16393  1416  2C1B               	goto	l1503
 16394  1417                     l7454:
 16395                           
 16396                           ;main.c: 989: sendERRORMessage((uint8_t)0XC9);
 16397  1417  30C9               	movlw	201
 16398  1418  3190  2085  3193   	fcall	_sendERRORMessage
 16399  141B                     l1503:
 16400  141B  0008               	return
 16401  141C                     __end_of_cmd_aa:
 16402                           
 16403                           	psect	text36
 16404  1646                     __ptext36:	
 16405 ;; *************** function _cmd_dtl *****************
 16406 ;; Defined at:
 16407 ;;		line 969 in file "main.c"
 16408 ;; Parameters:    Size  Location     Type
 16409 ;;  num             2   22[BANK0 ] int 
 16410 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16411 ;;		 -> main@buff(20), 
 16412 ;; Auto vars:     Size  Location     Type
 16413 ;;  lumAux          2   29[BANK0 ] int 
 16414 ;;  tempAux         2   27[BANK0 ] int 
 16415 ;; Return value:  Size  Location     Type
 16416 ;;                  1    wreg      void 
 16417 ;; Registers used:
 16418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16419 ;; Tracked objects:
 16420 ;;		On entry : 0/0
 16421 ;;		On exit  : 0/0
 16422 ;;		Unchanged: 0/0
 16423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16424 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16428 ;;Total ram usage:        9 bytes
 16429 ;; Hardware stack levels used:    1
 16430 ;; Hardware stack levels required when called:    8
 16431 ;; This function calls:
 16432 ;;		_sendERRORMessage
 16433 ;;		_sendOKMessage
 16434 ;; This function is called by:
 16435 ;;		_main
 16436 ;; This function uses a non-reentrant model
 16437 ;;
 16438                           
 16439                           
 16440                           ;psect for function _cmd_dtl
 16441  1646                     _cmd_dtl:
 16442  1646                     l7420:	
 16443                           ;incstack = 0
 16444                           ; Regs used in _cmd_dtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16445                           
 16446                           
 16447                           ;main.c: 970: int tempAux = buffer[2];
 16448  1646  0020               	movlb	0	; select bank0
 16449  1647  0838               	movf	cmd_dtl@buffer,w
 16450  1648  3E02               	addlw	2
 16451  1649  0086               	movwf	6
 16452  164A  3001               	movlw	1	; select bank2/3
 16453  164B  0087               	movwf	7
 16454  164C  0801               	movf	1,w
 16455  164D  00B9               	movwf	??_cmd_dtl
 16456  164E  01BA               	clrf	??_cmd_dtl+1
 16457  164F  0839               	movf	??_cmd_dtl,w
 16458  1650  00BB               	movwf	cmd_dtl@tempAux
 16459  1651  083A               	movf	??_cmd_dtl+1,w
 16460  1652  00BC               	movwf	cmd_dtl@tempAux+1
 16461                           
 16462                           ;main.c: 971: int lumAux = buffer[3];
 16463  1653  0838               	movf	cmd_dtl@buffer,w
 16464  1654  3E03               	addlw	3
 16465  1655  0086               	movwf	6
 16466  1656  3001               	movlw	1	; select bank2/3
 16467  1657  0087               	movwf	7
 16468  1658  0801               	movf	1,w
 16469  1659  00B9               	movwf	??_cmd_dtl
 16470  165A  01BA               	clrf	??_cmd_dtl+1
 16471  165B  0839               	movf	??_cmd_dtl,w
 16472  165C  00BD               	movwf	cmd_dtl@lumAux
 16473  165D  083A               	movf	??_cmd_dtl+1,w
 16474  165E  00BE               	movwf	cmd_dtl@lumAux+1
 16475  165F                     l7422:
 16476                           
 16477                           ;main.c: 972: if((tempAux >= 0 && tempAux < 50) && (lumAux >= 0 && lumAux < 8) && num ==
      +                           5){
 16478  165F  1BBC               	btfsc	cmd_dtl@tempAux+1,7
 16479  1660  2E62               	goto	u9011
 16480  1661  2E63               	goto	u9010
 16481  1662                     u9011:
 16482  1662  2EA0               	goto	l7436
 16483  1663                     u9010:
 16484  1663                     l7424:
 16485  1663  083C               	movf	cmd_dtl@tempAux+1,w
 16486  1664  3A80               	xorlw	128
 16487  1665  00B9               	movwf	??_cmd_dtl
 16488  1666  3080               	movlw	128
 16489  1667  0239               	subwf	??_cmd_dtl,w
 16490  1668  1D03               	skipz
 16491  1669  2E6C               	goto	u9025
 16492  166A  3032               	movlw	50
 16493  166B  023B               	subwf	cmd_dtl@tempAux,w
 16494  166C                     u9025:
 16495  166C  1803               	skipnc
 16496  166D  2E6F               	goto	u9021
 16497  166E  2E70               	goto	u9020
 16498  166F                     u9021:
 16499  166F  2EA0               	goto	l7436
 16500  1670                     u9020:
 16501  1670                     l7426:
 16502  1670  0020               	movlb	0	; select bank0
 16503  1671  1BBE               	btfsc	cmd_dtl@lumAux+1,7
 16504  1672  2E74               	goto	u9031
 16505  1673  2E75               	goto	u9030
 16506  1674                     u9031:
 16507  1674  2EA0               	goto	l7436
 16508  1675                     u9030:
 16509  1675                     l7428:
 16510  1675  083E               	movf	cmd_dtl@lumAux+1,w
 16511  1676  3A80               	xorlw	128
 16512  1677  00B9               	movwf	??_cmd_dtl
 16513  1678  3080               	movlw	128
 16514  1679  0239               	subwf	??_cmd_dtl,w
 16515  167A  1D03               	skipz
 16516  167B  2E7E               	goto	u9045
 16517  167C  3008               	movlw	8
 16518  167D  023D               	subwf	cmd_dtl@lumAux,w
 16519  167E                     u9045:
 16520  167E  1803               	skipnc
 16521  167F  2E81               	goto	u9041
 16522  1680  2E82               	goto	u9040
 16523  1681                     u9041:
 16524  1681  2EA0               	goto	l7436
 16525  1682                     u9040:
 16526  1682                     l7430:
 16527  1682  3005               	movlw	5
 16528  1683  0020               	movlb	0	; select bank0
 16529  1684  0636               	xorwf	cmd_dtl@num,w
 16530  1685  0437               	iorwf	cmd_dtl@num+1,w
 16531  1686  1D03               	btfss	3,2
 16532  1687  2E89               	goto	u9051
 16533  1688  2E8A               	goto	u9050
 16534  1689                     u9051:
 16535  1689  2EA0               	goto	l7436
 16536  168A                     u9050:
 16537  168A                     l7432:
 16538                           
 16539                           ;main.c: 973: tempAlarm.alarmTemp = buffer[2];
 16540  168A  0838               	movf	cmd_dtl@buffer,w
 16541  168B  0086               	movwf	6
 16542  168C  3001               	movlw	1	; select bank2/3
 16543  168D  0087               	movwf	7
 16544  168E  3001               	movlw	1	; select bank2/3
 16545  168F  3F42               	moviw [2]fsr1
 16546  1690  0021               	movlb	1	; select bank1
 16547  1691  00A7               	movwf	_tempAlarm^(0+128)
 16548                           
 16549                           ;main.c: 974: lumAlarm.alarmLum = buffer[3];
 16550  1692  0020               	movlb	0	; select bank0
 16551  1693  0838               	movf	cmd_dtl@buffer,w
 16552  1694  0086               	movwf	6
 16553  1695  3001               	movlw	1	; select bank2/3
 16554  1696  0087               	movwf	7
 16555  1697  3001               	movlw	1	; select bank2/3
 16556  1698  3F43               	moviw [3]fsr1
 16557  1699  0021               	movlb	1	; select bank1
 16558  169A  00A4               	movwf	_lumAlarm^(0+128)
 16559  169B                     l7434:
 16560                           
 16561                           ;main.c: 975: sendOKMessage((uint8_t)0XC8);
 16562  169B  30C8               	movlw	200
 16563  169C  3190  2033  3196   	fcall	_sendOKMessage
 16564                           
 16565                           ;main.c: 976: } else {
 16566  169F  2EA4               	goto	l1496
 16567  16A0                     l7436:
 16568                           
 16569                           ;main.c: 977: sendERRORMessage((uint8_t)0XC8);
 16570  16A0  30C8               	movlw	200
 16571  16A1  3190  2085  3196   	fcall	_sendERRORMessage
 16572  16A4                     l1496:
 16573  16A4  0008               	return
 16574  16A5                     __end_of_cmd_dtl:
 16575                           
 16576                           	psect	text37
 16577  0806                     __ptext37:	
 16578 ;; *************** function _cmd_dac *****************
 16579 ;; Defined at:
 16580 ;;		line 955 in file "main.c"
 16581 ;; Parameters:    Size  Location     Type
 16582 ;;  num             2   22[BANK0 ] int 
 16583 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16584 ;;		 -> main@buff(20), 
 16585 ;; Auto vars:     Size  Location     Type
 16586 ;;  s               2   31[BANK0 ] int 
 16587 ;;  m               2   29[BANK0 ] int 
 16588 ;;  h               2   27[BANK0 ] int 
 16589 ;; Return value:  Size  Location     Type
 16590 ;;                  1    wreg      void 
 16591 ;; Registers used:
 16592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16593 ;; Tracked objects:
 16594 ;;		On entry : 0/0
 16595 ;;		On exit  : 0/0
 16596 ;;		Unchanged: 0/0
 16597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16598 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16599 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16600 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16601 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16602 ;;Total ram usage:       11 bytes
 16603 ;; Hardware stack levels used:    1
 16604 ;; Hardware stack levels required when called:    8
 16605 ;; This function calls:
 16606 ;;		_sendERRORMessage
 16607 ;;		_sendOKMessage
 16608 ;; This function is called by:
 16609 ;;		_main
 16610 ;; This function uses a non-reentrant model
 16611 ;;
 16612                           
 16613                           
 16614                           ;psect for function _cmd_dac
 16615  0806                     _cmd_dac:
 16616  0806                     l7398:	
 16617                           ;incstack = 0
 16618                           ; Regs used in _cmd_dac: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16619                           
 16620                           
 16621                           ;main.c: 956: int h = buffer[2];
 16622  0806  0020               	movlb	0	; select bank0
 16623  0807  0838               	movf	cmd_dac@buffer,w
 16624  0808  3E02               	addlw	2
 16625  0809  0086               	movwf	6
 16626  080A  3001               	movlw	1	; select bank2/3
 16627  080B  0087               	movwf	7
 16628  080C  0801               	movf	1,w
 16629  080D  00B9               	movwf	??_cmd_dac
 16630  080E  01BA               	clrf	??_cmd_dac+1
 16631  080F  0839               	movf	??_cmd_dac,w
 16632  0810  00BB               	movwf	cmd_dac@h
 16633  0811  083A               	movf	??_cmd_dac+1,w
 16634  0812  00BC               	movwf	cmd_dac@h+1
 16635                           
 16636                           ;main.c: 957: int m = buffer[3];
 16637  0813  0838               	movf	cmd_dac@buffer,w
 16638  0814  3E03               	addlw	3
 16639  0815  0086               	movwf	6
 16640  0816  3001               	movlw	1	; select bank2/3
 16641  0817  0087               	movwf	7
 16642  0818  0801               	movf	1,w
 16643  0819  00B9               	movwf	??_cmd_dac
 16644  081A  01BA               	clrf	??_cmd_dac+1
 16645  081B  0839               	movf	??_cmd_dac,w
 16646  081C  00BD               	movwf	cmd_dac@m
 16647  081D  083A               	movf	??_cmd_dac+1,w
 16648  081E  00BE               	movwf	cmd_dac@m+1
 16649                           
 16650                           ;main.c: 958: int s = buffer[4];
 16651  081F  0838               	movf	cmd_dac@buffer,w
 16652  0820  3E04               	addlw	4
 16653  0821  0086               	movwf	6
 16654  0822  3001               	movlw	1	; select bank2/3
 16655  0823  0087               	movwf	7
 16656  0824  0801               	movf	1,w
 16657  0825  00B9               	movwf	??_cmd_dac
 16658  0826  01BA               	clrf	??_cmd_dac+1
 16659  0827  0839               	movf	??_cmd_dac,w
 16660  0828  00BF               	movwf	cmd_dac@s
 16661  0829  083A               	movf	??_cmd_dac+1,w
 16662  082A  00C0               	movwf	cmd_dac@s+1
 16663  082B                     l7400:
 16664                           
 16665                           ;main.c: 959: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 16666  082B  1BBC               	btfsc	cmd_dac@h+1,7
 16667  082C  282E               	goto	u8941
 16668  082D  282F               	goto	u8940
 16669  082E                     u8941:
 16670  082E  287E               	goto	l7418
 16671  082F                     u8940:
 16672  082F                     l7402:
 16673  082F  083C               	movf	cmd_dac@h+1,w
 16674  0830  3A80               	xorlw	128
 16675  0831  00B9               	movwf	??_cmd_dac
 16676  0832  3080               	movlw	128
 16677  0833  0239               	subwf	??_cmd_dac,w
 16678  0834  1D03               	skipz
 16679  0835  2838               	goto	u8955
 16680  0836  3018               	movlw	24
 16681  0837  023B               	subwf	cmd_dac@h,w
 16682  0838                     u8955:
 16683  0838  1803               	skipnc
 16684  0839  283B               	goto	u8951
 16685  083A  283C               	goto	u8950
 16686  083B                     u8951:
 16687  083B  287E               	goto	l7418
 16688  083C                     u8950:
 16689  083C                     l7404:
 16690  083C  0020               	movlb	0	; select bank0
 16691  083D  1BBE               	btfsc	cmd_dac@m+1,7
 16692  083E  2840               	goto	u8961
 16693  083F  2841               	goto	u8960
 16694  0840                     u8961:
 16695  0840  287E               	goto	l7418
 16696  0841                     u8960:
 16697  0841                     l7406:
 16698  0841  083E               	movf	cmd_dac@m+1,w
 16699  0842  3A80               	xorlw	128
 16700  0843  00B9               	movwf	??_cmd_dac
 16701  0844  3080               	movlw	128
 16702  0845  0239               	subwf	??_cmd_dac,w
 16703  0846  1D03               	skipz
 16704  0847  284A               	goto	u8975
 16705  0848  303C               	movlw	60
 16706  0849  023D               	subwf	cmd_dac@m,w
 16707  084A                     u8975:
 16708  084A  1803               	skipnc
 16709  084B  284D               	goto	u8971
 16710  084C  284E               	goto	u8970
 16711  084D                     u8971:
 16712  084D  287E               	goto	l7418
 16713  084E                     u8970:
 16714  084E                     l7408:
 16715  084E  0020               	movlb	0	; select bank0
 16716  084F  1BC0               	btfsc	cmd_dac@s+1,7
 16717  0850  2852               	goto	u8981
 16718  0851  2853               	goto	u8980
 16719  0852                     u8981:
 16720  0852  287E               	goto	l7418
 16721  0853                     u8980:
 16722  0853                     l7410:
 16723  0853  0840               	movf	cmd_dac@s+1,w
 16724  0854  3A80               	xorlw	128
 16725  0855  00B9               	movwf	??_cmd_dac
 16726  0856  3080               	movlw	128
 16727  0857  0239               	subwf	??_cmd_dac,w
 16728  0858  1D03               	skipz
 16729  0859  285C               	goto	u8995
 16730  085A  303C               	movlw	60
 16731  085B  023F               	subwf	cmd_dac@s,w
 16732  085C                     u8995:
 16733  085C  1803               	skipnc
 16734  085D  285F               	goto	u8991
 16735  085E  2860               	goto	u8990
 16736  085F                     u8991:
 16737  085F  287E               	goto	l7418
 16738  0860                     u8990:
 16739  0860                     l7412:
 16740  0860  3006               	movlw	6
 16741  0861  0020               	movlb	0	; select bank0
 16742  0862  0636               	xorwf	cmd_dac@num,w
 16743  0863  0437               	iorwf	cmd_dac@num+1,w
 16744  0864  1D03               	btfss	3,2
 16745  0865  2867               	goto	u9001
 16746  0866  2868               	goto	u9000
 16747  0867                     u9001:
 16748  0867  287E               	goto	l7418
 16749  0868                     u9000:
 16750  0868                     l7414:
 16751                           
 16752                           ;main.c: 960: clkAlarm.alarmVal.h = h;
 16753  0868  083B               	movf	cmd_dac@h,w
 16754  0869  00B9               	movwf	??_cmd_dac
 16755  086A  0839               	movf	??_cmd_dac,w
 16756  086B  0021               	movlb	1	; select bank1
 16757  086C  00A0               	movwf	_clkAlarm^(0+128)
 16758                           
 16759                           ;main.c: 961: clkAlarm.alarmVal.m = m;
 16760  086D  0020               	movlb	0	; select bank0
 16761  086E  083D               	movf	cmd_dac@m,w
 16762  086F  00B9               	movwf	??_cmd_dac
 16763  0870  0839               	movf	??_cmd_dac,w
 16764  0871  0021               	movlb	1	; select bank1
 16765  0872  00A1               	movwf	(_clkAlarm^(0+128)+1)
 16766                           
 16767                           ;main.c: 962: clkAlarm.alarmVal.s = s;
 16768  0873  0020               	movlb	0	; select bank0
 16769  0874  083F               	movf	cmd_dac@s,w
 16770  0875  00B9               	movwf	??_cmd_dac
 16771  0876  0839               	movf	??_cmd_dac,w
 16772  0877  0021               	movlb	1	; select bank1
 16773  0878  00A2               	movwf	(_clkAlarm^(0+128)+2)
 16774  0879                     l7416:
 16775                           
 16776                           ;main.c: 963: sendOKMessage((uint8_t)0XC7);
 16777  0879  30C7               	movlw	199
 16778  087A  3190  2033  3188   	fcall	_sendOKMessage
 16779                           
 16780                           ;main.c: 964: } else {
 16781  087D  2882               	goto	l1491
 16782  087E                     l7418:
 16783                           
 16784                           ;main.c: 965: sendERRORMessage((uint8_t)0XC7);
 16785  087E  30C7               	movlw	199
 16786  087F  3190  2085  3188   	fcall	_sendERRORMessage
 16787  0882                     l1491:
 16788  0882  0008               	return
 16789  0883                     __end_of_cmd_dac:
 16790                           
 16791                           	psect	text38
 16792  1459                     __ptext38:	
 16793 ;; *************** function _cmd_ra *****************
 16794 ;; Defined at:
 16795 ;;		line 940 in file "main.c"
 16796 ;; Parameters:    Size  Location     Type
 16797 ;;  num             2   22[BANK0 ] int 
 16798 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16799 ;;		 -> main@buff(20), 
 16800 ;; Auto vars:     Size  Location     Type
 16801 ;;  buff            9   26[BANK0 ] unsigned char [9]
 16802 ;; Return value:  Size  Location     Type
 16803 ;;                  1    wreg      void 
 16804 ;; Registers used:
 16805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16806 ;; Tracked objects:
 16807 ;;		On entry : 0/0
 16808 ;;		On exit  : 0/0
 16809 ;;		Unchanged: 0/0
 16810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16811 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;Total ram usage:       13 bytes
 16816 ;; Hardware stack levels used:    1
 16817 ;; Hardware stack levels required when called:    7
 16818 ;; This function calls:
 16819 ;;		_sendMessage
 16820 ;; This function is called by:
 16821 ;;		_main
 16822 ;; This function uses a non-reentrant model
 16823 ;;
 16824                           
 16825                           
 16826                           ;psect for function _cmd_ra
 16827  1459                     _cmd_ra:
 16828  1459                     l7390:	
 16829                           ;incstack = 0
 16830                           ; Regs used in _cmd_ra: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16831                           
 16832                           
 16833                           ;main.c: 941: uint8_t buff[9];;main.c: 942: buff[0] = (uint8_t)0xFD;
 16834  1459  30FD               	movlw	253
 16835  145A  0020               	movlb	0	; select bank0
 16836  145B  00B9               	movwf	??_cmd_ra
 16837  145C  0839               	movf	??_cmd_ra,w
 16838  145D  00BA               	movwf	cmd_ra@buff
 16839                           
 16840                           ;main.c: 943: buff[1] = (uint8_t)0XC6;
 16841  145E  30C6               	movlw	198
 16842  145F  00B9               	movwf	??_cmd_ra
 16843  1460  0839               	movf	??_cmd_ra,w
 16844  1461  00BB               	movwf	cmd_ra@buff+1
 16845                           
 16846                           ;main.c: 944: buff[2] = clkAlarm.alarmVal.h;
 16847  1462  0021               	movlb	1	; select bank1
 16848  1463  0820               	movf	_clkAlarm^(0+128),w
 16849  1464  0020               	movlb	0	; select bank0
 16850  1465  00B9               	movwf	??_cmd_ra
 16851  1466  0839               	movf	??_cmd_ra,w
 16852  1467  00BC               	movwf	cmd_ra@buff+2
 16853                           
 16854                           ;main.c: 945: buff[3] = clkAlarm.alarmVal.m;
 16855  1468  0021               	movlb	1	; select bank1
 16856  1469  0821               	movf	(_clkAlarm^(0+128)+1),w
 16857  146A  0020               	movlb	0	; select bank0
 16858  146B  00B9               	movwf	??_cmd_ra
 16859  146C  0839               	movf	??_cmd_ra,w
 16860  146D  00BD               	movwf	cmd_ra@buff+3
 16861                           
 16862                           ;main.c: 946: buff[4] = clkAlarm.alarmVal.s;
 16863  146E  0021               	movlb	1	; select bank1
 16864  146F  0822               	movf	(_clkAlarm^(0+128)+2),w
 16865  1470  0020               	movlb	0	; select bank0
 16866  1471  00B9               	movwf	??_cmd_ra
 16867  1472  0839               	movf	??_cmd_ra,w
 16868  1473  00BE               	movwf	cmd_ra@buff+4
 16869                           
 16870                           ;main.c: 947: buff[5] = tempAlarm.alarmTemp;
 16871  1474  0021               	movlb	1	; select bank1
 16872  1475  0827               	movf	_tempAlarm^(0+128),w
 16873  1476  0020               	movlb	0	; select bank0
 16874  1477  00B9               	movwf	??_cmd_ra
 16875  1478  0839               	movf	??_cmd_ra,w
 16876  1479  00BF               	movwf	cmd_ra@buff+5
 16877                           
 16878                           ;main.c: 948: buff[6] = lumAlarm.alarmLum;
 16879  147A  0021               	movlb	1	; select bank1
 16880  147B  0824               	movf	_lumAlarm^(0+128),w
 16881  147C  0020               	movlb	0	; select bank0
 16882  147D  00B9               	movwf	??_cmd_ra
 16883  147E  0839               	movf	??_cmd_ra,w
 16884  147F  00C0               	movwf	cmd_ra@buff+6
 16885  1480                     l7392:
 16886                           
 16887                           ;main.c: 949: buff[7] = ALAF == 'A' ? 1 : 0;
 16888  1480  3041               	movlw	65
 16889  1481  067C               	xorwf	_ALAF,w
 16890  1482  1903               	btfsc	3,2
 16891  1483  2C85               	goto	u8921
 16892  1484  2C87               	goto	u8920
 16893  1485                     u8921:
 16894  1485  3001               	movlw	1
 16895  1486  2C88               	goto	u8930
 16896  1487                     u8920:
 16897  1487  3000               	movlw	0
 16898  1488                     u8930:
 16899  1488  00B9               	movwf	??_cmd_ra
 16900  1489  0839               	movf	??_cmd_ra,w
 16901  148A  00C1               	movwf	cmd_ra@buff+7
 16902  148B                     l7394:
 16903                           
 16904                           ;main.c: 950: buff[8] = (uint8_t)0xFE;
 16905  148B  30FE               	movlw	254
 16906  148C  00B9               	movwf	??_cmd_ra
 16907  148D  0839               	movf	??_cmd_ra,w
 16908  148E  00C2               	movwf	cmd_ra@buff+8
 16909  148F                     l7396:
 16910                           
 16911                           ;main.c: 952: sendMessage(9,buff);
 16912  148F  3009               	movlw	9
 16913  1490  00AA               	movwf	sendMessage@num
 16914  1491  3000               	movlw	0
 16915  1492  00AB               	movwf	sendMessage@num+1
 16916  1493  303A               	movlw	(low (cmd_ra@buff| 0))& (0+255)
 16917  1494  00B9               	movwf	??_cmd_ra
 16918  1495  0839               	movf	??_cmd_ra,w
 16919  1496  00AC               	movwf	sendMessage@buffer
 16920  1497  3191  2181  3194   	fcall	_sendMessage
 16921  149A                     l1486:
 16922  149A  0008               	return
 16923  149B                     __end_of_cmd_ra:
 16924                           
 16925                           	psect	text39
 16926  10A3                     __ptext39:	
 16927 ;; *************** function _cmd_mta *****************
 16928 ;; Defined at:
 16929 ;;		line 931 in file "main.c"
 16930 ;; Parameters:    Size  Location     Type
 16931 ;;  num             2   22[BANK0 ] int 
 16932 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 16933 ;;		 -> main@buff(20), 
 16934 ;; Auto vars:     Size  Location     Type
 16935 ;;		None
 16936 ;; Return value:  Size  Location     Type
 16937 ;;                  1    wreg      void 
 16938 ;; Registers used:
 16939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16940 ;; Tracked objects:
 16941 ;;		On entry : 0/0
 16942 ;;		On exit  : 0/0
 16943 ;;		Unchanged: 0/0
 16944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16945 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16948 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;Total ram usage:        3 bytes
 16950 ;; Hardware stack levels used:    1
 16951 ;; Hardware stack levels required when called:    8
 16952 ;; This function calls:
 16953 ;;		_sendERRORMessage
 16954 ;;		_sendOKMessage
 16955 ;; This function is called by:
 16956 ;;		_main
 16957 ;; This function uses a non-reentrant model
 16958 ;;
 16959                           
 16960                           
 16961                           ;psect for function _cmd_mta
 16962  10A3                     _cmd_mta:
 16963  10A3                     l7382:	
 16964                           ;incstack = 0
 16965                           ; Regs used in _cmd_mta: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16966                           
 16967                           
 16968                           ;main.c: 932: if(buffer[2] < 0x3c){
 16969  10A3  0020               	movlb	0	; select bank0
 16970  10A4  0838               	movf	cmd_mta@buffer,w
 16971  10A5  3E02               	addlw	2
 16972  10A6  0086               	movwf	6
 16973  10A7  3001               	movlw	1	; select bank2/3
 16974  10A8  0087               	movwf	7
 16975  10A9  303C               	movlw	60
 16976  10AA  0201               	subwf	1,w
 16977  10AB  1803               	skipnc
 16978  10AC  28AE               	goto	u8911
 16979  10AD  28AF               	goto	u8910
 16980  10AE                     u8911:
 16981  10AE  28BC               	goto	l7388
 16982  10AF                     u8910:
 16983  10AF                     l7384:
 16984                           
 16985                           ;main.c: 933: TALA = buffer[2];
 16986  10AF  0838               	movf	cmd_mta@buffer,w
 16987  10B0  0086               	movwf	6
 16988  10B1  3001               	movlw	1	; select bank2/3
 16989  10B2  0087               	movwf	7
 16990  10B3  3001               	movlw	1	; select bank2/3
 16991  10B4  3F42               	moviw [2]fsr1
 16992  10B5  0021               	movlb	1	; select bank1
 16993  10B6  00D6               	movwf	_TALA^(0+128)
 16994  10B7                     l7386:
 16995                           
 16996                           ;main.c: 934: sendOKMessage((uint8_t)0XC5);
 16997  10B7  30C5               	movlw	197
 16998  10B8  3190  2033  3190   	fcall	_sendOKMessage
 16999                           
 17000                           ;main.c: 935: } else {
 17001  10BB  28C0               	goto	l1483
 17002  10BC                     l7388:
 17003                           
 17004                           ;main.c: 936: sendERRORMessage((uint8_t)0XC5);
 17005  10BC  30C5               	movlw	197
 17006  10BD  3190  2085  3190   	fcall	_sendERRORMessage
 17007  10C0                     l1483:
 17008  10C0  0008               	return
 17009  10C1                     __end_of_cmd_mta:
 17010                           
 17011                           	psect	text40
 17012  1019                     __ptext40:	
 17013 ;; *************** function _cmd_mmp *****************
 17014 ;; Defined at:
 17015 ;;		line 922 in file "main.c"
 17016 ;; Parameters:    Size  Location     Type
 17017 ;;  num             2   22[BANK0 ] int 
 17018 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17019 ;;		 -> main@buff(20), 
 17020 ;; Auto vars:     Size  Location     Type
 17021 ;;		None
 17022 ;; Return value:  Size  Location     Type
 17023 ;;                  1    wreg      void 
 17024 ;; Registers used:
 17025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17026 ;; Tracked objects:
 17027 ;;		On entry : 0/0
 17028 ;;		On exit  : 0/0
 17029 ;;		Unchanged: 0/0
 17030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17031 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17034 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17035 ;;Total ram usage:        3 bytes
 17036 ;; Hardware stack levels used:    1
 17037 ;; Hardware stack levels required when called:    8
 17038 ;; This function calls:
 17039 ;;		_sendERRORMessage
 17040 ;;		_sendOKMessage
 17041 ;; This function is called by:
 17042 ;;		_main
 17043 ;; This function uses a non-reentrant model
 17044 ;;
 17045                           
 17046                           
 17047                           ;psect for function _cmd_mmp
 17048  1019                     _cmd_mmp:
 17049  1019                     l7374:	
 17050                           ;incstack = 0
 17051                           ; Regs used in _cmd_mmp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17052                           
 17053                           
 17054                           ;main.c: 923: if(num == 4){
 17055  1019  3004               	movlw	4
 17056  101A  0020               	movlb	0	; select bank0
 17057  101B  0636               	xorwf	cmd_mmp@num,w
 17058  101C  0437               	iorwf	cmd_mmp@num+1,w
 17059  101D  1D03               	btfss	3,2
 17060  101E  2820               	goto	u8901
 17061  101F  2821               	goto	u8900
 17062  1020                     u8901:
 17063  1020  282E               	goto	l7380
 17064  1021                     u8900:
 17065  1021                     l7376:
 17066                           
 17067                           ;main.c: 924: PMON = buffer[2];
 17068  1021  0838               	movf	cmd_mmp@buffer,w
 17069  1022  0086               	movwf	6
 17070  1023  3001               	movlw	1	; select bank2/3
 17071  1024  0087               	movwf	7
 17072  1025  3001               	movlw	1	; select bank2/3
 17073  1026  3F42               	moviw [2]fsr1
 17074  1027  0021               	movlb	1	; select bank1
 17075  1028  00D7               	movwf	_PMON^(0+128)
 17076  1029                     l7378:
 17077                           
 17078                           ;main.c: 925: sendOKMessage((uint8_t)0XC4);
 17079  1029  30C4               	movlw	196
 17080  102A  3190  2033  3190   	fcall	_sendOKMessage
 17081                           
 17082                           ;main.c: 926: } else{
 17083  102D  2832               	goto	l1478
 17084  102E                     l7380:
 17085                           
 17086                           ;main.c: 927: sendERRORMessage((uint8_t)0XC4);
 17087  102E  30C4               	movlw	196
 17088  102F  3190  2085  3190   	fcall	_sendERRORMessage
 17089  1032                     l1478:
 17090  1032  0008               	return
 17091  1033                     __end_of_cmd_mmp:
 17092                           
 17093                           	psect	text41
 17094  1212                     __ptext41:	
 17095 ;; *************** function _cmd_rp *****************
 17096 ;; Defined at:
 17097 ;;		line 911 in file "main.c"
 17098 ;; Parameters:    Size  Location     Type
 17099 ;;  num             2   22[BANK0 ] int 
 17100 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17101 ;;		 -> main@buff(20), 
 17102 ;; Auto vars:     Size  Location     Type
 17103 ;;  buff            5   26[BANK0 ] unsigned char [5]
 17104 ;; Return value:  Size  Location     Type
 17105 ;;                  1    wreg      void 
 17106 ;; Registers used:
 17107 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17108 ;; Tracked objects:
 17109 ;;		On entry : 0/0
 17110 ;;		On exit  : 0/0
 17111 ;;		Unchanged: 0/0
 17112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17113 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17114 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17116 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17117 ;;Total ram usage:        9 bytes
 17118 ;; Hardware stack levels used:    1
 17119 ;; Hardware stack levels required when called:    7
 17120 ;; This function calls:
 17121 ;;		_sendMessage
 17122 ;; This function is called by:
 17123 ;;		_main
 17124 ;; This function uses a non-reentrant model
 17125 ;;
 17126                           
 17127                           
 17128                           ;psect for function _cmd_rp
 17129  1212                     _cmd_rp:
 17130  1212                     l7370:	
 17131                           ;incstack = 0
 17132                           ; Regs used in _cmd_rp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17133                           
 17134                           
 17135                           ;main.c: 912: uint8_t buff[5];;main.c: 913: buff[0] = (uint8_t)0xFD;
 17136  1212  30FD               	movlw	253
 17137  1213  0020               	movlb	0	; select bank0
 17138  1214  00B9               	movwf	??_cmd_rp
 17139  1215  0839               	movf	??_cmd_rp,w
 17140  1216  00BA               	movwf	cmd_rp@buff
 17141                           
 17142                           ;main.c: 914: buff[1] = (uint8_t)0XC3;
 17143  1217  30C3               	movlw	195
 17144  1218  00B9               	movwf	??_cmd_rp
 17145  1219  0839               	movf	??_cmd_rp,w
 17146  121A  00BB               	movwf	cmd_rp@buff+1
 17147                           
 17148                           ;main.c: 915: buff[2] = PMON;
 17149  121B  0021               	movlb	1	; select bank1
 17150  121C  0857               	movf	_PMON^(0+128),w
 17151  121D  0020               	movlb	0	; select bank0
 17152  121E  00B9               	movwf	??_cmd_rp
 17153  121F  0839               	movf	??_cmd_rp,w
 17154  1220  00BC               	movwf	cmd_rp@buff+2
 17155                           
 17156                           ;main.c: 916: buff[3] = TALA;
 17157  1221  0021               	movlb	1	; select bank1
 17158  1222  0856               	movf	_TALA^(0+128),w
 17159  1223  0020               	movlb	0	; select bank0
 17160  1224  00B9               	movwf	??_cmd_rp
 17161  1225  0839               	movf	??_cmd_rp,w
 17162  1226  00BD               	movwf	cmd_rp@buff+3
 17163                           
 17164                           ;main.c: 917: buff[4] = (uint8_t)0xFE;
 17165  1227  30FE               	movlw	254
 17166  1228  00B9               	movwf	??_cmd_rp
 17167  1229  0839               	movf	??_cmd_rp,w
 17168  122A  00BE               	movwf	cmd_rp@buff+4
 17169  122B                     l7372:
 17170                           
 17171                           ;main.c: 919: sendMessage(5,buff);
 17172  122B  3005               	movlw	5
 17173  122C  00AA               	movwf	sendMessage@num
 17174  122D  3000               	movlw	0
 17175  122E  00AB               	movwf	sendMessage@num+1
 17176  122F  303A               	movlw	(low (cmd_rp@buff| 0))& (0+255)
 17177  1230  00B9               	movwf	??_cmd_rp
 17178  1231  0839               	movf	??_cmd_rp,w
 17179  1232  00AC               	movwf	sendMessage@buffer
 17180  1233  3191  2181  3192   	fcall	_sendMessage
 17181  1236                     l1473:
 17182  1236  0008               	return
 17183  1237                     __end_of_cmd_rp:
 17184                           
 17185                           	psect	text42
 17186  1160                     __ptext42:	
 17187 ;; *************** function _cmd_rtl *****************
 17188 ;; Defined at:
 17189 ;;		line 900 in file "main.c"
 17190 ;; Parameters:    Size  Location     Type
 17191 ;;  num             2   22[BANK0 ] int 
 17192 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17193 ;;		 -> main@buff(20), 
 17194 ;; Auto vars:     Size  Location     Type
 17195 ;;  buff            5   26[BANK0 ] unsigned char [5]
 17196 ;; Return value:  Size  Location     Type
 17197 ;;                  1    wreg      void 
 17198 ;; Registers used:
 17199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17200 ;; Tracked objects:
 17201 ;;		On entry : 0/0
 17202 ;;		On exit  : 0/0
 17203 ;;		Unchanged: 0/0
 17204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17205 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17206 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17208 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17209 ;;Total ram usage:        9 bytes
 17210 ;; Hardware stack levels used:    1
 17211 ;; Hardware stack levels required when called:    7
 17212 ;; This function calls:
 17213 ;;		_sendMessage
 17214 ;; This function is called by:
 17215 ;;		_main
 17216 ;; This function uses a non-reentrant model
 17217 ;;
 17218                           
 17219                           
 17220                           ;psect for function _cmd_rtl
 17221  1160                     _cmd_rtl:
 17222  1160                     l7366:	
 17223                           ;incstack = 0
 17224                           ; Regs used in _cmd_rtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17225                           
 17226                           
 17227                           ;main.c: 901: uint8_t buff[5];;main.c: 902: buff[0] = (uint8_t)0xFD;
 17228  1160  30FD               	movlw	253
 17229  1161  0020               	movlb	0	; select bank0
 17230  1162  00B9               	movwf	??_cmd_rtl
 17231  1163  0839               	movf	??_cmd_rtl,w
 17232  1164  00BA               	movwf	cmd_rtl@buff
 17233                           
 17234                           ;main.c: 903: buff[1] = (uint8_t)0XC2;
 17235  1165  30C2               	movlw	194
 17236  1166  00B9               	movwf	??_cmd_rtl
 17237  1167  0839               	movf	??_cmd_rtl,w
 17238  1168  00BB               	movwf	cmd_rtl@buff+1
 17239                           
 17240                           ;main.c: 904: buff[2] = temp;
 17241  1169  0862               	movf	_temp,w
 17242  116A  00B9               	movwf	??_cmd_rtl
 17243  116B  0839               	movf	??_cmd_rtl,w
 17244  116C  00BC               	movwf	cmd_rtl@buff+2
 17245                           
 17246                           ;main.c: 905: buff[3] = lumLevel;
 17247  116D  0861               	movf	_lumLevel,w
 17248  116E  00B9               	movwf	??_cmd_rtl
 17249  116F  0839               	movf	??_cmd_rtl,w
 17250  1170  00BD               	movwf	cmd_rtl@buff+3
 17251                           
 17252                           ;main.c: 906: buff[4] = (uint8_t)0xFE;
 17253  1171  30FE               	movlw	254
 17254  1172  00B9               	movwf	??_cmd_rtl
 17255  1173  0839               	movf	??_cmd_rtl,w
 17256  1174  00BE               	movwf	cmd_rtl@buff+4
 17257  1175                     l7368:
 17258                           
 17259                           ;main.c: 908: sendMessage(5,buff);
 17260  1175  3005               	movlw	5
 17261  1176  00AA               	movwf	sendMessage@num
 17262  1177  3000               	movlw	0
 17263  1178  00AB               	movwf	sendMessage@num+1
 17264  1179  303A               	movlw	(low (cmd_rtl@buff| 0))& (0+255)
 17265  117A  00B9               	movwf	??_cmd_rtl
 17266  117B  0839               	movf	??_cmd_rtl,w
 17267  117C  00AC               	movwf	sendMessage@buffer
 17268  117D  3191  2181  3191   	fcall	_sendMessage
 17269  1180                     l1470:
 17270  1180  0008               	return
 17271  1181                     __end_of_cmd_rtl:
 17272                           
 17273                           	psect	text43
 17274  1788                     __ptext43:	
 17275 ;; *************** function _cmd_sc *****************
 17276 ;; Defined at:
 17277 ;;		line 885 in file "main.c"
 17278 ;; Parameters:    Size  Location     Type
 17279 ;;  num             2   22[BANK0 ] int 
 17280 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17281 ;;		 -> main@buff(20), 
 17282 ;; Auto vars:     Size  Location     Type
 17283 ;;  s               2   31[BANK0 ] int 
 17284 ;;  m               2   29[BANK0 ] int 
 17285 ;;  h               2   27[BANK0 ] int 
 17286 ;; Return value:  Size  Location     Type
 17287 ;;                  1    wreg      void 
 17288 ;; Registers used:
 17289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17290 ;; Tracked objects:
 17291 ;;		On entry : 0/0
 17292 ;;		On exit  : 0/0
 17293 ;;		Unchanged: 0/0
 17294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17295 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17296 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17297 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17298 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17299 ;;Total ram usage:       11 bytes
 17300 ;; Hardware stack levels used:    1
 17301 ;; Hardware stack levels required when called:    8
 17302 ;; This function calls:
 17303 ;;		_sendERRORMessage
 17304 ;;		_sendOKMessage
 17305 ;; This function is called by:
 17306 ;;		_main
 17307 ;; This function uses a non-reentrant model
 17308 ;;
 17309                           
 17310                           
 17311                           ;psect for function _cmd_sc
 17312  1788                     _cmd_sc:
 17313  1788                     l7344:	
 17314                           ;incstack = 0
 17315                           ; Regs used in _cmd_sc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17316                           
 17317                           
 17318                           ;main.c: 886: int h = buffer[2];
 17319  1788  0020               	movlb	0	; select bank0
 17320  1789  0838               	movf	cmd_sc@buffer,w
 17321  178A  3E02               	addlw	2
 17322  178B  0086               	movwf	6
 17323  178C  3001               	movlw	1	; select bank2/3
 17324  178D  0087               	movwf	7
 17325  178E  0801               	movf	1,w
 17326  178F  00B9               	movwf	??_cmd_sc
 17327  1790  01BA               	clrf	??_cmd_sc+1
 17328  1791  0839               	movf	??_cmd_sc,w
 17329  1792  00BB               	movwf	cmd_sc@h
 17330  1793  083A               	movf	??_cmd_sc+1,w
 17331  1794  00BC               	movwf	cmd_sc@h+1
 17332                           
 17333                           ;main.c: 887: int m = buffer[3];
 17334  1795  0838               	movf	cmd_sc@buffer,w
 17335  1796  3E03               	addlw	3
 17336  1797  0086               	movwf	6
 17337  1798  3001               	movlw	1	; select bank2/3
 17338  1799  0087               	movwf	7
 17339  179A  0801               	movf	1,w
 17340  179B  00B9               	movwf	??_cmd_sc
 17341  179C  01BA               	clrf	??_cmd_sc+1
 17342  179D  0839               	movf	??_cmd_sc,w
 17343  179E  00BD               	movwf	cmd_sc@m
 17344  179F  083A               	movf	??_cmd_sc+1,w
 17345  17A0  00BE               	movwf	cmd_sc@m+1
 17346                           
 17347                           ;main.c: 888: int s = buffer[4];
 17348  17A1  0838               	movf	cmd_sc@buffer,w
 17349  17A2  3E04               	addlw	4
 17350  17A3  0086               	movwf	6
 17351  17A4  3001               	movlw	1	; select bank2/3
 17352  17A5  0087               	movwf	7
 17353  17A6  0801               	movf	1,w
 17354  17A7  00B9               	movwf	??_cmd_sc
 17355  17A8  01BA               	clrf	??_cmd_sc+1
 17356  17A9  0839               	movf	??_cmd_sc,w
 17357  17AA  00BF               	movwf	cmd_sc@s
 17358  17AB  083A               	movf	??_cmd_sc+1,w
 17359  17AC  00C0               	movwf	cmd_sc@s+1
 17360  17AD                     l7346:
 17361                           
 17362                           ;main.c: 889: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 17363  17AD  1BBC               	btfsc	cmd_sc@h+1,7
 17364  17AE  2FB0               	goto	u8831
 17365  17AF  2FB1               	goto	u8830
 17366  17B0                     u8831:
 17367  17B0  2FFB               	goto	l7364
 17368  17B1                     u8830:
 17369  17B1                     l7348:
 17370  17B1  083C               	movf	cmd_sc@h+1,w
 17371  17B2  3A80               	xorlw	128
 17372  17B3  00B9               	movwf	??_cmd_sc
 17373  17B4  3080               	movlw	128
 17374  17B5  0239               	subwf	??_cmd_sc,w
 17375  17B6  1D03               	skipz
 17376  17B7  2FBA               	goto	u8845
 17377  17B8  3018               	movlw	24
 17378  17B9  023B               	subwf	cmd_sc@h,w
 17379  17BA                     u8845:
 17380  17BA  1803               	skipnc
 17381  17BB  2FBD               	goto	u8841
 17382  17BC  2FBE               	goto	u8840
 17383  17BD                     u8841:
 17384  17BD  2FFB               	goto	l7364
 17385  17BE                     u8840:
 17386  17BE                     l7350:
 17387  17BE  0020               	movlb	0	; select bank0
 17388  17BF  1BBE               	btfsc	cmd_sc@m+1,7
 17389  17C0  2FC2               	goto	u8851
 17390  17C1  2FC3               	goto	u8850
 17391  17C2                     u8851:
 17392  17C2  2FFB               	goto	l7364
 17393  17C3                     u8850:
 17394  17C3                     l7352:
 17395  17C3  083E               	movf	cmd_sc@m+1,w
 17396  17C4  3A80               	xorlw	128
 17397  17C5  00B9               	movwf	??_cmd_sc
 17398  17C6  3080               	movlw	128
 17399  17C7  0239               	subwf	??_cmd_sc,w
 17400  17C8  1D03               	skipz
 17401  17C9  2FCC               	goto	u8865
 17402  17CA  303C               	movlw	60
 17403  17CB  023D               	subwf	cmd_sc@m,w
 17404  17CC                     u8865:
 17405  17CC  1803               	skipnc
 17406  17CD  2FCF               	goto	u8861
 17407  17CE  2FD0               	goto	u8860
 17408  17CF                     u8861:
 17409  17CF  2FFB               	goto	l7364
 17410  17D0                     u8860:
 17411  17D0                     l7354:
 17412  17D0  0020               	movlb	0	; select bank0
 17413  17D1  1BC0               	btfsc	cmd_sc@s+1,7
 17414  17D2  2FD4               	goto	u8871
 17415  17D3  2FD5               	goto	u8870
 17416  17D4                     u8871:
 17417  17D4  2FFB               	goto	l7364
 17418  17D5                     u8870:
 17419  17D5                     l7356:
 17420  17D5  0840               	movf	cmd_sc@s+1,w
 17421  17D6  3A80               	xorlw	128
 17422  17D7  00B9               	movwf	??_cmd_sc
 17423  17D8  3080               	movlw	128
 17424  17D9  0239               	subwf	??_cmd_sc,w
 17425  17DA  1D03               	skipz
 17426  17DB  2FDE               	goto	u8885
 17427  17DC  303C               	movlw	60
 17428  17DD  023F               	subwf	cmd_sc@s,w
 17429  17DE                     u8885:
 17430  17DE  1803               	skipnc
 17431  17DF  2FE1               	goto	u8881
 17432  17E0  2FE2               	goto	u8880
 17433  17E1                     u8881:
 17434  17E1  2FFB               	goto	l7364
 17435  17E2                     u8880:
 17436  17E2                     l7358:
 17437  17E2  3006               	movlw	6
 17438  17E3  0020               	movlb	0	; select bank0
 17439  17E4  0636               	xorwf	cmd_sc@num,w
 17440  17E5  0437               	iorwf	cmd_sc@num+1,w
 17441  17E6  1D03               	btfss	3,2
 17442  17E7  2FE9               	goto	u8891
 17443  17E8  2FEA               	goto	u8890
 17444  17E9                     u8891:
 17445  17E9  2FFB               	goto	l7364
 17446  17EA                     u8890:
 17447  17EA                     l7360:
 17448                           
 17449                           ;main.c: 890: t.h = h;
 17450  17EA  083B               	movf	cmd_sc@h,w
 17451  17EB  00B9               	movwf	??_cmd_sc
 17452  17EC  0839               	movf	??_cmd_sc,w
 17453  17ED  00DA               	movwf	_t
 17454                           
 17455                           ;main.c: 891: t.m = m;
 17456  17EE  083D               	movf	cmd_sc@m,w
 17457  17EF  00B9               	movwf	??_cmd_sc
 17458  17F0  0839               	movf	??_cmd_sc,w
 17459  17F1  00DB               	movwf	_t+1
 17460                           
 17461                           ;main.c: 892: t.s = s;
 17462  17F2  083F               	movf	cmd_sc@s,w
 17463  17F3  00B9               	movwf	??_cmd_sc
 17464  17F4  0839               	movf	??_cmd_sc,w
 17465  17F5  00DC               	movwf	_t+2
 17466  17F6                     l7362:
 17467                           
 17468                           ;main.c: 893: sendOKMessage((uint8_t)0XC1);
 17469  17F6  30C1               	movlw	193
 17470  17F7  3190  2033  3197   	fcall	_sendOKMessage
 17471                           
 17472                           ;main.c: 894: } else {
 17473  17FA  2FFF               	goto	l1467
 17474  17FB                     l7364:
 17475                           
 17476                           ;main.c: 895: sendERRORMessage((uint8_t)0XC1);
 17477  17FB  30C1               	movlw	193
 17478  17FC  3190  2085  3197   	fcall	_sendERRORMessage
 17479  17FF                     l1467:
 17480  17FF  0008               	return
 17481  1800                     __end_of_cmd_sc:
 17482                           
 17483                           	psect	text44
 17484  11ED                     __ptext44:	
 17485 ;; *************** function _cmd_rc *****************
 17486 ;; Defined at:
 17487 ;;		line 873 in file "main.c"
 17488 ;; Parameters:    Size  Location     Type
 17489 ;;  num             2   22[BANK0 ] int 
 17490 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17491 ;;		 -> main@buff(20), 
 17492 ;; Auto vars:     Size  Location     Type
 17493 ;;  buff            6   26[BANK0 ] unsigned char [6]
 17494 ;; Return value:  Size  Location     Type
 17495 ;;                  1    wreg      void 
 17496 ;; Registers used:
 17497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17498 ;; Tracked objects:
 17499 ;;		On entry : 0/0
 17500 ;;		On exit  : 0/0
 17501 ;;		Unchanged: 0/0
 17502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17503 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17504 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17505 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17506 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17507 ;;Total ram usage:       10 bytes
 17508 ;; Hardware stack levels used:    1
 17509 ;; Hardware stack levels required when called:    7
 17510 ;; This function calls:
 17511 ;;		_sendMessage
 17512 ;; This function is called by:
 17513 ;;		_main
 17514 ;; This function uses a non-reentrant model
 17515 ;;
 17516                           
 17517                           
 17518                           ;psect for function _cmd_rc
 17519  11ED                     _cmd_rc:
 17520  11ED                     l7340:	
 17521                           ;incstack = 0
 17522                           ; Regs used in _cmd_rc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17523                           
 17524                           
 17525                           ;main.c: 874: uint8_t buff[6];;main.c: 875: buff[0] = (uint8_t)0xFD;
 17526  11ED  30FD               	movlw	253
 17527  11EE  0020               	movlb	0	; select bank0
 17528  11EF  00B9               	movwf	??_cmd_rc
 17529  11F0  0839               	movf	??_cmd_rc,w
 17530  11F1  00BA               	movwf	cmd_rc@buff
 17531                           
 17532                           ;main.c: 876: buff[1] = (uint8_t)0xC0;
 17533  11F2  30C0               	movlw	192
 17534  11F3  00B9               	movwf	??_cmd_rc
 17535  11F4  0839               	movf	??_cmd_rc,w
 17536  11F5  00BB               	movwf	cmd_rc@buff+1
 17537                           
 17538                           ;main.c: 877: buff[2] = t.h;
 17539  11F6  085A               	movf	_t,w
 17540  11F7  00B9               	movwf	??_cmd_rc
 17541  11F8  0839               	movf	??_cmd_rc,w
 17542  11F9  00BC               	movwf	cmd_rc@buff+2
 17543                           
 17544                           ;main.c: 878: buff[3] = t.m;
 17545  11FA  085B               	movf	_t+1,w
 17546  11FB  00B9               	movwf	??_cmd_rc
 17547  11FC  0839               	movf	??_cmd_rc,w
 17548  11FD  00BD               	movwf	cmd_rc@buff+3
 17549                           
 17550                           ;main.c: 879: buff[4] = t.s;
 17551  11FE  085C               	movf	_t+2,w
 17552  11FF  00B9               	movwf	??_cmd_rc
 17553  1200  0839               	movf	??_cmd_rc,w
 17554  1201  00BE               	movwf	cmd_rc@buff+4
 17555                           
 17556                           ;main.c: 880: buff[5] = (uint8_t)0xFE;
 17557  1202  30FE               	movlw	254
 17558  1203  00B9               	movwf	??_cmd_rc
 17559  1204  0839               	movf	??_cmd_rc,w
 17560  1205  00BF               	movwf	cmd_rc@buff+5
 17561  1206                     l7342:
 17562                           
 17563                           ;main.c: 882: sendMessage(6,buff);
 17564  1206  3006               	movlw	6
 17565  1207  00AA               	movwf	sendMessage@num
 17566  1208  3000               	movlw	0
 17567  1209  00AB               	movwf	sendMessage@num+1
 17568  120A  303A               	movlw	(low (cmd_rc@buff| 0))& (0+255)
 17569  120B  00B9               	movwf	??_cmd_rc
 17570  120C  0839               	movf	??_cmd_rc,w
 17571  120D  00AC               	movwf	sendMessage@buffer
 17572  120E  3191  2181  3191   	fcall	_sendMessage
 17573  1211                     l1462:
 17574  1211  0008               	return
 17575  1212                     __end_of_cmd_rc:
 17576                           
 17577                           	psect	text45
 17578  0C05                     __ptext45:	
 17579 ;; *************** function _cmd_tri *****************
 17580 ;; Defined at:
 17581 ;;		line 1048 in file "main.c"
 17582 ;; Parameters:    Size  Location     Type
 17583 ;;  num             2   22[BANK0 ] int 
 17584 ;;  buffer          1   24[BANK0 ] PTR unsigned char 
 17585 ;;		 -> main@buff(20), 
 17586 ;; Auto vars:     Size  Location     Type
 17587 ;;  buffData        5   30[BANK0 ] unsigned char [5]
 17588 ;;  buffInit        4   35[BANK0 ] unsigned char [4]
 17589 ;;  startingInde    2   47[BANK0 ] int 
 17590 ;;  i               2   42[BANK0 ] int 
 17591 ;;  maxReadings     2   40[BANK0 ] int 
 17592 ;;  j               1   46[BANK0 ] unsigned char 
 17593 ;;  n               1   45[BANK0 ] unsigned char 
 17594 ;;  index           1   44[BANK0 ] unsigned char 
 17595 ;;  buffEOM         1   39[BANK0 ] unsigned char [1]
 17596 ;; Return value:  Size  Location     Type
 17597 ;;                  1    wreg      void 
 17598 ;; Registers used:
 17599 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17600 ;; Tracked objects:
 17601 ;;		On entry : 0/0
 17602 ;;		On exit  : 0/0
 17603 ;;		Unchanged: 0/0
 17604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17605 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17606 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17607 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17608 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17609 ;;Total ram usage:       27 bytes
 17610 ;; Hardware stack levels used:    1
 17611 ;; Hardware stack levels required when called:    8
 17612 ;; This function calls:
 17613 ;;		_DATAEE_ReadByte
 17614 ;;		___wmul
 17615 ;;		_sendERRORMessage
 17616 ;;		_sendMessage
 17617 ;; This function is called by:
 17618 ;;		_main
 17619 ;; This function uses a non-reentrant model
 17620 ;;
 17621                           
 17622                           
 17623                           ;psect for function _cmd_tri
 17624  0C05                     _cmd_tri:
 17625  0C05                     l7520:	
 17626                           ;incstack = 0
 17627                           ; Regs used in _cmd_tri: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17628                           
 17629                           
 17630                           ;main.c: 1049: if(num == 5){
 17631  0C05  3005               	movlw	5
 17632  0C06  0020               	movlb	0	; select bank0
 17633  0C07  0636               	xorwf	cmd_tri@num,w
 17634  0C08  0437               	iorwf	cmd_tri@num+1,w
 17635  0C09  1D03               	btfss	3,2
 17636  0C0A  2C0C               	goto	u9191
 17637  0C0B  2C0D               	goto	u9190
 17638  0C0C                     u9191:
 17639  0C0C  2D2A               	goto	l7584
 17640  0C0D                     u9190:
 17641  0C0D                     l7522:
 17642                           
 17643                           ;main.c: 1050: uint8_t n = buffer[2];
 17644  0C0D  0838               	movf	cmd_tri@buffer,w
 17645  0C0E  0086               	movwf	6
 17646  0C0F  3001               	movlw	1	; select bank2/3
 17647  0C10  0087               	movwf	7
 17648  0C11  3001               	movlw	1	; select bank2/3
 17649  0C12  3F42               	moviw [2]fsr1
 17650  0C13  00CD               	movwf	cmd_tri@n
 17651                           
 17652                           ;main.c: 1051: uint8_t index = buffer[3];
 17653  0C14  0838               	movf	cmd_tri@buffer,w
 17654  0C15  0086               	movwf	6
 17655  0C16  3001               	movlw	1	; select bank2/3
 17656  0C17  0087               	movwf	7
 17657  0C18  3001               	movlw	1	; select bank2/3
 17658  0C19  3F43               	moviw [3]fsr1
 17659  0C1A  00CC               	movwf	cmd_tri@index
 17660  0C1B                     l7524:
 17661                           
 17662                           ;main.c: 1053: int startingIndex = iwrite + index;
 17663  0C1B  087A               	movf	_iwrite,w
 17664  0C1C  074C               	addwf	cmd_tri@index,w
 17665  0C1D  00CF               	movwf	cmd_tri@startingIndex
 17666  0C1E  01D0               	clrf	cmd_tri@startingIndex+1
 17667  0C1F  0DD0               	rlf	cmd_tri@startingIndex+1,f
 17668  0C20                     l7526:
 17669                           
 17670                           ;main.c: 1054: if(startingIndex >= NREG){
 17671  0C20  0850               	movf	cmd_tri@startingIndex+1,w
 17672  0C21  3A80               	xorlw	128
 17673  0C22  00B9               	movwf	??_cmd_tri
 17674  0C23  3080               	movlw	128
 17675  0C24  0239               	subwf	??_cmd_tri,w
 17676  0C25  1D03               	skipz
 17677  0C26  2C29               	goto	u9205
 17678  0C27  087D               	movf	_NREG,w
 17679  0C28  024F               	subwf	cmd_tri@startingIndex,w
 17680  0C29                     u9205:
 17681  0C29  1C03               	skipc
 17682  0C2A  2C2C               	goto	u9201
 17683  0C2B  2C2D               	goto	u9200
 17684  0C2C                     u9201:
 17685  0C2C  2C3C               	goto	l7530
 17686  0C2D                     u9200:
 17687  0C2D                     l7528:
 17688                           
 17689                           ;main.c: 1055: startingIndex = index - (NREG - iwrite);
 17690  0C2D  087D               	movf	_NREG,w
 17691  0C2E  0020               	movlb	0	; select bank0
 17692  0C2F  00B9               	movwf	??_cmd_tri
 17693  0C30  01BA               	clrf	??_cmd_tri+1
 17694  0C31  084C               	movf	cmd_tri@index,w
 17695  0C32  077A               	addwf	_iwrite,w
 17696  0C33  00BB               	movwf	??_cmd_tri+2
 17697  0C34  01BC               	clrf	??_cmd_tri+3
 17698  0C35  0DBC               	rlf	??_cmd_tri+3,f
 17699  0C36  0839               	movf	??_cmd_tri,w
 17700  0C37  023B               	subwf	??_cmd_tri+2,w
 17701  0C38  00CF               	movwf	cmd_tri@startingIndex
 17702  0C39  083A               	movf	??_cmd_tri+1,w
 17703  0C3A  3B3C               	subwfb	??_cmd_tri+3,w
 17704  0C3B  00D0               	movwf	cmd_tri@startingIndex+1
 17705  0C3C                     l7530:
 17706                           
 17707                           ;main.c: 1056: };main.c: 1057: if(nr != NREG){
 17708  0C3C  0879               	movf	_nr,w
 17709  0C3D  067D               	xorwf	_NREG,w
 17710  0C3E  1903               	skipnz
 17711  0C3F  2C41               	goto	u9211
 17712  0C40  2C42               	goto	u9210
 17713  0C41                     u9211:
 17714  0C41  2C4A               	goto	l1527
 17715  0C42                     u9210:
 17716  0C42                     l7532:
 17717                           
 17718                           ;main.c: 1058: startingIndex = index;
 17719  0C42  0020               	movlb	0	; select bank0
 17720  0C43  084C               	movf	cmd_tri@index,w
 17721  0C44  00B9               	movwf	??_cmd_tri
 17722  0C45  01BA               	clrf	??_cmd_tri+1
 17723  0C46  0839               	movf	??_cmd_tri,w
 17724  0C47  00CF               	movwf	cmd_tri@startingIndex
 17725  0C48  083A               	movf	??_cmd_tri+1,w
 17726  0C49  00D0               	movwf	cmd_tri@startingIndex+1
 17727  0C4A                     l1527:
 17728                           
 17729                           ;main.c: 1059: };main.c: 1060: int maxReadings = iwrite - startingIndex;
 17730  0C4A  087A               	movf	_iwrite,w
 17731  0C4B  0020               	movlb	0	; select bank0
 17732  0C4C  00B9               	movwf	??_cmd_tri
 17733  0C4D  084F               	movf	cmd_tri@startingIndex,w
 17734  0C4E  0239               	subwf	??_cmd_tri,w
 17735  0C4F  00C8               	movwf	cmd_tri@maxReadings
 17736  0C50  0950               	comf	cmd_tri@startingIndex+1,w
 17737  0C51  1803               	skipnc
 17738  0C52  0A89               	incf	9,f
 17739  0C53  00C9               	movwf	cmd_tri@maxReadings+1
 17740  0C54                     l7534:
 17741                           
 17742                           ;main.c: 1061: if(maxReadings < 0){
 17743  0C54  1FC9               	btfss	cmd_tri@maxReadings+1,7
 17744  0C55  2C57               	goto	u9221
 17745  0C56  2C58               	goto	u9220
 17746  0C57                     u9221:
 17747  0C57  2C63               	goto	l1528
 17748  0C58                     u9220:
 17749  0C58                     l7536:
 17750                           
 17751                           ;main.c: 1062: maxReadings = iwrite + (NREG - startingIndex);
 17752  0C58  087A               	movf	_iwrite,w
 17753  0C59  077D               	addwf	_NREG,w
 17754  0C5A  00B9               	movwf	??_cmd_tri
 17755  0C5B  01BA               	clrf	??_cmd_tri+1
 17756  0C5C  0DBA               	rlf	??_cmd_tri+1,f
 17757  0C5D  084F               	movf	cmd_tri@startingIndex,w
 17758  0C5E  0239               	subwf	??_cmd_tri,w
 17759  0C5F  00C8               	movwf	cmd_tri@maxReadings
 17760  0C60  0850               	movf	cmd_tri@startingIndex+1,w
 17761  0C61  3B3A               	subwfb	??_cmd_tri+1,w
 17762  0C62  00C9               	movwf	cmd_tri@maxReadings+1
 17763  0C63                     l1528:
 17764                           
 17765                           ;main.c: 1063: };main.c: 1064: if(maxReadings == 0 && nr == NREG){
 17766  0C63  0848               	movf	cmd_tri@maxReadings,w
 17767  0C64  0449               	iorwf	cmd_tri@maxReadings+1,w
 17768  0C65  1D03               	btfss	3,2
 17769  0C66  2C68               	goto	u9231
 17770  0C67  2C69               	goto	u9230
 17771  0C68                     u9231:
 17772  0C68  2C76               	goto	l1529
 17773  0C69                     u9230:
 17774  0C69                     l7538:
 17775  0C69  0879               	movf	_nr,w
 17776  0C6A  067D               	xorwf	_NREG,w
 17777  0C6B  1D03               	skipz
 17778  0C6C  2C6E               	goto	u9241
 17779  0C6D  2C6F               	goto	u9240
 17780  0C6E                     u9241:
 17781  0C6E  2C76               	goto	l1529
 17782  0C6F                     u9240:
 17783  0C6F                     l7540:
 17784                           
 17785                           ;main.c: 1065: maxReadings = nr;
 17786  0C6F  0879               	movf	_nr,w
 17787  0C70  00B9               	movwf	??_cmd_tri
 17788  0C71  01BA               	clrf	??_cmd_tri+1
 17789  0C72  0839               	movf	??_cmd_tri,w
 17790  0C73  00C8               	movwf	cmd_tri@maxReadings
 17791  0C74  083A               	movf	??_cmd_tri+1,w
 17792  0C75  00C9               	movwf	cmd_tri@maxReadings+1
 17793  0C76                     l1529:
 17794                           
 17795                           ;main.c: 1066: };main.c: 1068: if((n > nr) || (maxReadings < n)){
 17796  0C76  084D               	movf	cmd_tri@n,w
 17797  0C77  0279               	subwf	_nr,w
 17798  0C78  1C03               	skipc
 17799  0C79  2C7B               	goto	u9251
 17800  0C7A  2C7C               	goto	u9250
 17801  0C7B                     u9251:
 17802  0C7B  2C89               	goto	l7544
 17803  0C7C                     u9250:
 17804  0C7C                     l7542:
 17805  0C7C  0849               	movf	cmd_tri@maxReadings+1,w
 17806  0C7D  3A80               	xorlw	128
 17807  0C7E  00B9               	movwf	??_cmd_tri
 17808  0C7F  3080               	movlw	128
 17809  0C80  0239               	subwf	??_cmd_tri,w
 17810  0C81  1D03               	skipz
 17811  0C82  2C85               	goto	u9265
 17812  0C83  084D               	movf	cmd_tri@n,w
 17813  0C84  0248               	subwf	cmd_tri@maxReadings,w
 17814  0C85                     u9265:
 17815  0C85  1803               	skipnc
 17816  0C86  2C88               	goto	u9261
 17817  0C87  2C89               	goto	u9260
 17818  0C88                     u9261:
 17819  0C88  2C8E               	goto	l7548
 17820  0C89                     u9260:
 17821  0C89                     l7544:
 17822                           
 17823                           ;main.c: 1069: sendERRORMessage((uint8_t)0XCC);
 17824  0C89  30CC               	movlw	204
 17825  0C8A  3190  2085  318C   	fcall	_sendERRORMessage
 17826  0C8D  2D2E               	goto	l1533
 17827  0C8E                     l7548:
 17828                           
 17829                           ;main.c: 1071: };main.c: 1074: uint8_t buffInit[4];;main.c: 1075: buffInit[0] = (uint8_t
      +                          )0xFD;
 17830  0C8E  30FD               	movlw	253
 17831  0C8F  0020               	movlb	0	; select bank0
 17832  0C90  00B9               	movwf	??_cmd_tri
 17833  0C91  0839               	movf	??_cmd_tri,w
 17834  0C92  00C3               	movwf	cmd_tri@buffInit
 17835                           
 17836                           ;main.c: 1076: buffInit[1] = (uint8_t)0XCC;
 17837  0C93  30CC               	movlw	204
 17838  0C94  00B9               	movwf	??_cmd_tri
 17839  0C95  0839               	movf	??_cmd_tri,w
 17840  0C96  00C4               	movwf	cmd_tri@buffInit+1
 17841                           
 17842                           ;main.c: 1077: buffInit[2] = (uint8_t)n;
 17843  0C97  084D               	movf	cmd_tri@n,w
 17844  0C98  00B9               	movwf	??_cmd_tri
 17845  0C99  0839               	movf	??_cmd_tri,w
 17846  0C9A  00C5               	movwf	cmd_tri@buffInit+2
 17847                           
 17848                           ;main.c: 1078: buffInit[3] = (uint8_t)index;
 17849  0C9B  084C               	movf	cmd_tri@index,w
 17850  0C9C  00B9               	movwf	??_cmd_tri
 17851  0C9D  0839               	movf	??_cmd_tri,w
 17852  0C9E  00C6               	movwf	cmd_tri@buffInit+3
 17853  0C9F                     l7550:
 17854                           
 17855                           ;main.c: 1079: sendMessage(4,buffInit);
 17856  0C9F  3004               	movlw	4
 17857  0CA0  00AA               	movwf	sendMessage@num
 17858  0CA1  3000               	movlw	0
 17859  0CA2  00AB               	movwf	sendMessage@num+1
 17860  0CA3  3043               	movlw	(low (cmd_tri@buffInit| 0))& (0+255)
 17861  0CA4  00B9               	movwf	??_cmd_tri
 17862  0CA5  0839               	movf	??_cmd_tri,w
 17863  0CA6  00AC               	movwf	sendMessage@buffer
 17864  0CA7  3191  2181  318C   	fcall	_sendMessage
 17865  0CAA                     l7552:
 17866                           
 17867                           ;main.c: 1081: int i = startingIndex;
 17868  0CAA  0020               	movlb	0	; select bank0
 17869  0CAB  0850               	movf	cmd_tri@startingIndex+1,w
 17870  0CAC  00CB               	movwf	cmd_tri@i+1
 17871  0CAD  084F               	movf	cmd_tri@startingIndex,w
 17872  0CAE  00CA               	movwf	cmd_tri@i
 17873                           
 17874                           ;main.c: 1083: uint8_t j;;main.c: 1084: uint8_t buffData[5];;main.c: 1085: while(n){
 17875  0CAF  2D14               	goto	l7578
 17876  0CB0                     l7554:
 17877                           
 17878                           ;main.c: 1086: for(j = 0; j < 5; j++){
 17879  0CB0  01CE               	clrf	cmd_tri@j
 17880  0CB1                     l7560:
 17881                           
 17882                           ;main.c: 1087: buffData[j] = DATAEE_ReadByte( (i * 0x5) + 0x7012 + j);
 17883  0CB1  084E               	movf	cmd_tri@j,w
 17884  0CB2  00B9               	movwf	??_cmd_tri
 17885  0CB3  01BA               	clrf	??_cmd_tri+1
 17886  0CB4  084B               	movf	cmd_tri@i+1,w
 17887  0CB5  00A8               	movwf	___wmul@multiplier+1
 17888  0CB6  084A               	movf	cmd_tri@i,w
 17889  0CB7  00A7               	movwf	___wmul@multiplier
 17890  0CB8  3005               	movlw	5
 17891  0CB9  00A9               	movwf	___wmul@multiplicand
 17892  0CBA  3000               	movlw	0
 17893  0CBB  00AA               	movwf	___wmul@multiplicand+1
 17894  0CBC  3190  20FF  318C   	fcall	___wmul
 17895  0CBF  0020               	movlb	0	; select bank0
 17896  0CC0  0839               	movf	??_cmd_tri,w
 17897  0CC1  0727               	addwf	?___wmul,w
 17898  0CC2  00BB               	movwf	??_cmd_tri+2
 17899  0CC3  083A               	movf	??_cmd_tri+1,w
 17900  0CC4  3D28               	addwfc	?___wmul+1,w
 17901  0CC5  00BC               	movwf	??_cmd_tri+3
 17902  0CC6  083B               	movf	??_cmd_tri+2,w
 17903  0CC7  3E12               	addlw	18
 17904  0CC8  00AD               	movwf	DATAEE_ReadByte@bAdd
 17905  0CC9  3070               	movlw	112
 17906  0CCA  3D3C               	addwfc	??_cmd_tri+3,w
 17907  0CCB  00AE               	movwf	DATAEE_ReadByte@bAdd+1
 17908  0CCC  319F  279C  318C   	fcall	_DATAEE_ReadByte
 17909  0CCF  0020               	movlb	0	; select bank0
 17910  0CD0  00BD               	movwf	??_cmd_tri+4
 17911  0CD1  084E               	movf	cmd_tri@j,w
 17912  0CD2  3E3E               	addlw	(low (cmd_tri@buffData| 0))& (0+255)
 17913  0CD3  0086               	movwf	6
 17914  0CD4  0187               	clrf	7
 17915  0CD5  083D               	movf	??_cmd_tri+4,w
 17916  0CD6  0081               	movwf	1
 17917  0CD7                     l7562:
 17918  0CD7  3001               	movlw	1
 17919  0CD8  00B9               	movwf	??_cmd_tri
 17920  0CD9  0839               	movf	??_cmd_tri,w
 17921  0CDA  07CE               	addwf	cmd_tri@j,f
 17922  0CDB                     l7564:
 17923  0CDB  3005               	movlw	5
 17924  0CDC  024E               	subwf	cmd_tri@j,w
 17925  0CDD  1C03               	skipc
 17926  0CDE  2CE0               	goto	u9271
 17927  0CDF  2CE1               	goto	u9270
 17928  0CE0                     u9271:
 17929  0CE0  2CB1               	goto	l7560
 17930  0CE1                     u9270:
 17931  0CE1                     l7566:
 17932                           
 17933                           ;main.c: 1088: };main.c: 1089: sendMessage(5,buffData);
 17934  0CE1  3005               	movlw	5
 17935  0CE2  00AA               	movwf	sendMessage@num
 17936  0CE3  3000               	movlw	0
 17937  0CE4  00AB               	movwf	sendMessage@num+1
 17938  0CE5  303E               	movlw	(low (cmd_tri@buffData| 0))& (0+255)
 17939  0CE6  00B9               	movwf	??_cmd_tri
 17940  0CE7  0839               	movf	??_cmd_tri,w
 17941  0CE8  00AC               	movwf	sendMessage@buffer
 17942  0CE9  3191  2181  318C   	fcall	_sendMessage
 17943  0CEC                     l7568:
 17944                           
 17945                           ;main.c: 1090: if(iread == i){
 17946  0CEC  087B               	movf	_iread,w
 17947  0CED  0020               	movlb	0	; select bank0
 17948  0CEE  00B9               	movwf	??_cmd_tri
 17949  0CEF  01BA               	clrf	??_cmd_tri+1
 17950  0CF0  084B               	movf	cmd_tri@i+1,w
 17951  0CF1  063A               	xorwf	??_cmd_tri+1,w
 17952  0CF2  1D03               	skipz
 17953  0CF3  2CF6               	goto	u9285
 17954  0CF4  084A               	movf	cmd_tri@i,w
 17955  0CF5  0639               	xorwf	??_cmd_tri,w
 17956  0CF6                     u9285:
 17957  0CF6  1D03               	skipz
 17958  0CF7  2CF9               	goto	u9281
 17959  0CF8  2CFA               	goto	u9280
 17960  0CF9                     u9281:
 17961  0CF9  2CFE               	goto	l7572
 17962  0CFA                     u9280:
 17963  0CFA                     l7570:
 17964                           
 17965                           ;main.c: 1091: iread++;
 17966  0CFA  3001               	movlw	1
 17967  0CFB  00B9               	movwf	??_cmd_tri
 17968  0CFC  0839               	movf	??_cmd_tri,w
 17969  0CFD  07FB               	addwf	_iread,f
 17970  0CFE                     l7572:
 17971                           
 17972                           ;main.c: 1092: };main.c: 1093: i++;
 17973  0CFE  3001               	movlw	1
 17974  0CFF  07CA               	addwf	cmd_tri@i,f
 17975  0D00  3000               	movlw	0
 17976  0D01  3DCB               	addwfc	cmd_tri@i+1,f
 17977  0D02                     l7574:
 17978                           
 17979                           ;main.c: 1094: n--;
 17980  0D02  3001               	movlw	1
 17981  0D03  02CD               	subwf	cmd_tri@n,f
 17982                           
 17983                           ;main.c: 1095: if(i >= NREG){
 17984  0D04  084B               	movf	cmd_tri@i+1,w
 17985  0D05  3A80               	xorlw	128
 17986  0D06  00B9               	movwf	??_cmd_tri
 17987  0D07  3080               	movlw	128
 17988  0D08  0239               	subwf	??_cmd_tri,w
 17989  0D09  1D03               	skipz
 17990  0D0A  2D0D               	goto	u9295
 17991  0D0B  087D               	movf	_NREG,w
 17992  0D0C  024A               	subwf	cmd_tri@i,w
 17993  0D0D                     u9295:
 17994  0D0D  1C03               	skipc
 17995  0D0E  2D10               	goto	u9291
 17996  0D0F  2D11               	goto	u9290
 17997  0D10                     u9291:
 17998  0D10  2D14               	goto	l7578
 17999  0D11                     u9290:
 18000  0D11                     l7576:
 18001                           
 18002                           ;main.c: 1096: i=0;
 18003  0D11  0020               	movlb	0	; select bank0
 18004  0D12  01CA               	clrf	cmd_tri@i
 18005  0D13  01CB               	clrf	cmd_tri@i+1
 18006  0D14                     l7578:
 18007  0D14  0020               	movlb	0	; select bank0
 18008  0D15  084D               	movf	cmd_tri@n,w
 18009  0D16  1D03               	btfss	3,2
 18010  0D17  2D19               	goto	u9301
 18011  0D18  2D1A               	goto	u9300
 18012  0D19                     u9301:
 18013  0D19  2CB0               	goto	l7554
 18014  0D1A                     u9300:
 18015  0D1A                     l7580:
 18016                           
 18017                           ;main.c: 1097: };main.c: 1098: };main.c: 1101: uint8_t buffEOM[1];;main.c: 1102: buffEOM
      +                          [0] = (uint8_t)0xFE;
 18018  0D1A  30FE               	movlw	254
 18019  0D1B  00B9               	movwf	??_cmd_tri
 18020  0D1C  0839               	movf	??_cmd_tri,w
 18021  0D1D  00C7               	movwf	cmd_tri@buffEOM
 18022  0D1E                     l7582:
 18023                           
 18024                           ;main.c: 1103: sendMessage(1,buffEOM);
 18025  0D1E  3001               	movlw	1
 18026  0D1F  00AA               	movwf	sendMessage@num
 18027  0D20  3000               	movlw	0
 18028  0D21  00AB               	movwf	sendMessage@num+1
 18029  0D22  3047               	movlw	(low (cmd_tri@buffEOM| 0))& (0+255)
 18030  0D23  00B9               	movwf	??_cmd_tri
 18031  0D24  0839               	movf	??_cmd_tri,w
 18032  0D25  00AC               	movwf	sendMessage@buffer
 18033  0D26  3191  2181  318C   	fcall	_sendMessage
 18034                           
 18035                           ;main.c: 1104: } else{
 18036  0D29  2D2E               	goto	l1533
 18037  0D2A                     l7584:
 18038                           
 18039                           ;main.c: 1105: sendERRORMessage((uint8_t)0XCC);
 18040  0D2A  30CC               	movlw	204
 18041  0D2B  3190  2085  318C   	fcall	_sendERRORMessage
 18042  0D2E                     l1533:
 18043  0D2E  0008               	return
 18044  0D2F                     __end_of_cmd_tri:
 18045                           
 18046                           	psect	text46
 18047  10FF                     __ptext46:	
 18048 ;; *************** function ___wmul *****************
 18049 ;; Defined at:
 18050 ;;		line 15 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 18051 ;; Parameters:    Size  Location     Type
 18052 ;;  multiplier      2    7[BANK0 ] unsigned int 
 18053 ;;  multiplicand    2    9[BANK0 ] unsigned int 
 18054 ;; Auto vars:     Size  Location     Type
 18055 ;;  product         2   11[BANK0 ] unsigned int 
 18056 ;; Return value:  Size  Location     Type
 18057 ;;                  2    7[BANK0 ] unsigned int 
 18058 ;; Registers used:
 18059 ;;		wreg, status,2, status,0
 18060 ;; Tracked objects:
 18061 ;;		On entry : 0/0
 18062 ;;		On exit  : 0/0
 18063 ;;		Unchanged: 0/0
 18064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18065 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18066 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18068 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18069 ;;Total ram usage:        6 bytes
 18070 ;; Hardware stack levels used:    1
 18071 ;; Hardware stack levels required when called:    4
 18072 ;; This function calls:
 18073 ;;		Nothing
 18074 ;; This function is called by:
 18075 ;;		_monitoring_TEMP_LUM
 18076 ;;		_cmd_trc
 18077 ;;		_cmd_tri
 18078 ;;		_main
 18079 ;;		_sprintf
 18080 ;;		_map
 18081 ;; This function uses a non-reentrant model
 18082 ;;
 18083                           
 18084                           
 18085                           ;psect for function ___wmul
 18086  10FF                     ___wmul:
 18087  10FF                     l6308:	
 18088                           ;incstack = 0
 18089                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18090                           
 18091  10FF  0020               	movlb	0	; select bank0
 18092  1100  01AB               	clrf	___wmul@product
 18093  1101  01AC               	clrf	___wmul@product+1
 18094  1102                     l6310:
 18095  1102  1C27               	btfss	___wmul@multiplier,0
 18096  1103  2905               	goto	u6981
 18097  1104  2906               	goto	u6980
 18098  1105                     u6981:
 18099  1105  290A               	goto	l1785
 18100  1106                     u6980:
 18101  1106                     l6312:
 18102  1106  0829               	movf	___wmul@multiplicand,w
 18103  1107  07AB               	addwf	___wmul@product,f
 18104  1108  082A               	movf	___wmul@multiplicand+1,w
 18105  1109  3DAC               	addwfc	___wmul@product+1,f
 18106  110A                     l1785:
 18107  110A  3001               	movlw	1
 18108  110B                     u6995:
 18109  110B  35A9               	lslf	___wmul@multiplicand,f
 18110  110C  0DAA               	rlf	___wmul@multiplicand+1,f
 18111  110D  0B89               	decfsz	9,f
 18112  110E  290B               	goto	u6995
 18113  110F                     l6314:
 18114  110F  3001               	movlw	1
 18115  1110                     u7005:
 18116  1110  36A8               	lsrf	___wmul@multiplier+1,f
 18117  1111  0CA7               	rrf	___wmul@multiplier,f
 18118  1112  0B89               	decfsz	9,f
 18119  1113  2910               	goto	u7005
 18120  1114                     l6316:
 18121  1114  0827               	movf	___wmul@multiplier,w
 18122  1115  0428               	iorwf	___wmul@multiplier+1,w
 18123  1116  1D03               	btfss	3,2
 18124  1117  2919               	goto	u7011
 18125  1118  291A               	goto	u7010
 18126  1119                     u7011:
 18127  1119  2902               	goto	l6310
 18128  111A                     u7010:
 18129  111A                     l6318:
 18130  111A  082C               	movf	___wmul@product+1,w
 18131  111B  00A8               	movwf	?___wmul+1
 18132  111C  082B               	movf	___wmul@product,w
 18133  111D  00A7               	movwf	?___wmul
 18134  111E                     l1787:
 18135  111E  0008               	return
 18136  111F                     __end_of___wmul:
 18137                           
 18138                           	psect	text47
 18139  1F9C                     __ptext47:	
 18140 ;; *************** function _DATAEE_ReadByte *****************
 18141 ;; Defined at:
 18142 ;;		line 202 in file "mcc_generated_files/memory.c"
 18143 ;; Parameters:    Size  Location     Type
 18144 ;;  bAdd            2   13[BANK0 ] unsigned int 
 18145 ;; Auto vars:     Size  Location     Type
 18146 ;;		None
 18147 ;; Return value:  Size  Location     Type
 18148 ;;                  1    wreg      unsigned char 
 18149 ;; Registers used:
 18150 ;;		wreg, status,2
 18151 ;; Tracked objects:
 18152 ;;		On entry : 0/0
 18153 ;;		On exit  : 0/0
 18154 ;;		Unchanged: 0/0
 18155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18156 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18160 ;;Total ram usage:        2 bytes
 18161 ;; Hardware stack levels used:    1
 18162 ;; Hardware stack levels required when called:    4
 18163 ;; This function calls:
 18164 ;;		Nothing
 18165 ;; This function is called by:
 18166 ;;		_cmd_trc
 18167 ;;		_cmd_tri
 18168 ;;		_main
 18169 ;; This function uses a non-reentrant model
 18170 ;;
 18171                           
 18172                           
 18173                           ;psect for function _DATAEE_ReadByte
 18174  1F9C                     _DATAEE_ReadByte:
 18175  1F9C                     l6988:	
 18176                           ;incstack = 0
 18177                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 18178                           
 18179                           
 18180                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 18181  1F9C  0020               	movlb	0	; select bank0
 18182  1F9D  082E               	movf	DATAEE_ReadByte@bAdd+1,w
 18183  1F9E  0030               	movlb	16	; select bank16
 18184  1F9F  009B               	movwf	27	;volatile
 18185  1FA0                     l6990:
 18186                           
 18187                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 18188  1FA0  0020               	movlb	0	; select bank0
 18189  1FA1  082D               	movf	DATAEE_ReadByte@bAdd,w
 18190  1FA2  0030               	movlb	16	; select bank16
 18191  1FA3  009A               	movwf	26	;volatile
 18192  1FA4                     l6992:
 18193                           
 18194                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 18195  1FA4  171E               	bsf	30,6	;volsfr
 18196  1FA5                     l6994:
 18197                           
 18198                           ;memory.c: 207: NVMCON1bits.RD = 1;
 18199  1FA5  141E               	bsf	30,0	;volsfr
 18200  1FA6                     l6996:
 18201                           
 18202                           ;memory.c: 208: __nop();
 18203  1FA6  0000               	nop
 18204  1FA7                     l6998:
 18205                           
 18206                           ;memory.c: 209: __nop();
 18207  1FA7  0000               	nop
 18208  1FA8                     l7000:
 18209                           
 18210                           ;memory.c: 211: return (NVMDATL);
 18211  1FA8  0030               	movlb	16	; select bank16
 18212  1FA9  081C               	movf	28,w	;volatile
 18213  1FAA                     l734:
 18214  1FAA  0008               	return
 18215  1FAB                     __end_of_DATAEE_ReadByte:
 18216                           
 18217                           	psect	text48
 18218  1033                     __ptext48:	
 18219 ;; *************** function _sendOKMessage *****************
 18220 ;; Defined at:
 18221 ;;		line 853 in file "main.c"
 18222 ;; Parameters:    Size  Location     Type
 18223 ;;  cmd             1    wreg     unsigned char 
 18224 ;; Auto vars:     Size  Location     Type
 18225 ;;  cmd             1   17[BANK0 ] unsigned char 
 18226 ;;  bufw            4   18[BANK0 ] unsigned char [4]
 18227 ;; Return value:  Size  Location     Type
 18228 ;;                  1    wreg      void 
 18229 ;; Registers used:
 18230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18231 ;; Tracked objects:
 18232 ;;		On entry : 0/0
 18233 ;;		On exit  : 0/0
 18234 ;;		Unchanged: 0/0
 18235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18240 ;;Total ram usage:        6 bytes
 18241 ;; Hardware stack levels used:    1
 18242 ;; Hardware stack levels required when called:    7
 18243 ;; This function calls:
 18244 ;;		_sendMessage
 18245 ;; This function is called by:
 18246 ;;		_cmd_sc
 18247 ;;		_cmd_mmp
 18248 ;;		_cmd_mta
 18249 ;;		_cmd_dac
 18250 ;;		_cmd_dtl
 18251 ;;		_cmd_aa
 18252 ;; This function uses a non-reentrant model
 18253 ;;
 18254                           
 18255                           
 18256                           ;psect for function _sendOKMessage
 18257  1033                     _sendOKMessage:
 18258                           
 18259                           ;incstack = 0
 18260                           ; Regs used in _sendOKMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18261                           ;sendOKMessage@cmd stored from wreg
 18262  1033  0020               	movlb	0	; select bank0
 18263  1034  00B1               	movwf	sendOKMessage@cmd
 18264  1035                     l7098:
 18265                           
 18266                           ;main.c: 854: uint8_t bufw[4];;main.c: 855: bufw[0] = (uint8_t)0xFD;
 18267  1035  30FD               	movlw	253
 18268  1036  00B0               	movwf	??_sendOKMessage
 18269  1037  0830               	movf	??_sendOKMessage,w
 18270  1038  00B2               	movwf	sendOKMessage@bufw
 18271                           
 18272                           ;main.c: 856: bufw[1] = (uint8_t)cmd;
 18273  1039  0831               	movf	sendOKMessage@cmd,w
 18274  103A  00B0               	movwf	??_sendOKMessage
 18275  103B  0830               	movf	??_sendOKMessage,w
 18276  103C  00B3               	movwf	sendOKMessage@bufw+1
 18277  103D                     l7100:
 18278                           
 18279                           ;main.c: 857: bufw[2] = (uint8_t)0;
 18280  103D  01B4               	clrf	sendOKMessage@bufw+2
 18281  103E                     l7102:
 18282                           
 18283                           ;main.c: 858: bufw[3] = (uint8_t)0xFE;
 18284  103E  30FE               	movlw	254
 18285  103F  00B0               	movwf	??_sendOKMessage
 18286  1040  0830               	movf	??_sendOKMessage,w
 18287  1041  00B5               	movwf	sendOKMessage@bufw+3
 18288  1042                     l7104:
 18289                           
 18290                           ;main.c: 860: sendMessage(4,bufw);
 18291  1042  3004               	movlw	4
 18292  1043  00AA               	movwf	sendMessage@num
 18293  1044  3000               	movlw	0
 18294  1045  00AB               	movwf	sendMessage@num+1
 18295  1046  3032               	movlw	(low (sendOKMessage@bufw| 0))& (0+255)
 18296  1047  00B0               	movwf	??_sendOKMessage
 18297  1048  0830               	movf	??_sendOKMessage,w
 18298  1049  00AC               	movwf	sendMessage@buffer
 18299  104A  3191  2181  3190   	fcall	_sendMessage
 18300  104D                     l1456:
 18301  104D  0008               	return
 18302  104E                     __end_of_sendOKMessage:
 18303                           
 18304                           	psect	text49
 18305  1085                     __ptext49:	
 18306 ;; *************** function _sendERRORMessage *****************
 18307 ;; Defined at:
 18308 ;;		line 863 in file "main.c"
 18309 ;; Parameters:    Size  Location     Type
 18310 ;;  cmd             1    wreg     unsigned char 
 18311 ;; Auto vars:     Size  Location     Type
 18312 ;;  cmd             1   17[BANK0 ] unsigned char 
 18313 ;;  bufw            4   18[BANK0 ] unsigned char [4]
 18314 ;; Return value:  Size  Location     Type
 18315 ;;                  1    wreg      void 
 18316 ;; Registers used:
 18317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18318 ;; Tracked objects:
 18319 ;;		On entry : 0/0
 18320 ;;		On exit  : 0/0
 18321 ;;		Unchanged: 0/0
 18322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18324 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18326 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18327 ;;Total ram usage:        6 bytes
 18328 ;; Hardware stack levels used:    1
 18329 ;; Hardware stack levels required when called:    7
 18330 ;; This function calls:
 18331 ;;		_sendMessage
 18332 ;; This function is called by:
 18333 ;;		_cmd_sc
 18334 ;;		_cmd_mmp
 18335 ;;		_cmd_mta
 18336 ;;		_cmd_dac
 18337 ;;		_cmd_dtl
 18338 ;;		_cmd_aa
 18339 ;;		_cmd_trc
 18340 ;;		_cmd_tri
 18341 ;; This function uses a non-reentrant model
 18342 ;;
 18343                           
 18344                           
 18345                           ;psect for function _sendERRORMessage
 18346  1085                     _sendERRORMessage:
 18347                           
 18348                           ;incstack = 0
 18349                           ; Regs used in _sendERRORMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18350                           ;sendERRORMessage@cmd stored from wreg
 18351  1085  0020               	movlb	0	; select bank0
 18352  1086  00B1               	movwf	sendERRORMessage@cmd
 18353  1087                     l7106:
 18354                           
 18355                           ;main.c: 864: uint8_t bufw[4];;main.c: 865: bufw[0] = (uint8_t)0xFD;
 18356  1087  30FD               	movlw	253
 18357  1088  00B0               	movwf	??_sendERRORMessage
 18358  1089  0830               	movf	??_sendERRORMessage,w
 18359  108A  00B2               	movwf	sendERRORMessage@bufw
 18360                           
 18361                           ;main.c: 866: bufw[1] = (uint8_t)cmd;
 18362  108B  0831               	movf	sendERRORMessage@cmd,w
 18363  108C  00B0               	movwf	??_sendERRORMessage
 18364  108D  0830               	movf	??_sendERRORMessage,w
 18365  108E  00B3               	movwf	sendERRORMessage@bufw+1
 18366                           
 18367                           ;main.c: 867: bufw[2] = (uint8_t)0xFF;
 18368  108F  30FF               	movlw	255
 18369  1090  00B0               	movwf	??_sendERRORMessage
 18370  1091  0830               	movf	??_sendERRORMessage,w
 18371  1092  00B4               	movwf	sendERRORMessage@bufw+2
 18372                           
 18373                           ;main.c: 868: bufw[3] = (uint8_t)0xFE;
 18374  1093  30FE               	movlw	254
 18375  1094  00B0               	movwf	??_sendERRORMessage
 18376  1095  0830               	movf	??_sendERRORMessage,w
 18377  1096  00B5               	movwf	sendERRORMessage@bufw+3
 18378  1097                     l7108:
 18379                           
 18380                           ;main.c: 870: sendMessage(4,bufw);
 18381  1097  3004               	movlw	4
 18382  1098  00AA               	movwf	sendMessage@num
 18383  1099  3000               	movlw	0
 18384  109A  00AB               	movwf	sendMessage@num+1
 18385  109B  3032               	movlw	(low (sendERRORMessage@bufw| 0))& (0+255)
 18386  109C  00B0               	movwf	??_sendERRORMessage
 18387  109D  0830               	movf	??_sendERRORMessage,w
 18388  109E  00AC               	movwf	sendMessage@buffer
 18389  109F  3191  2181  3190   	fcall	_sendMessage
 18390  10A2                     l1459:
 18391  10A2  0008               	return
 18392  10A3                     __end_of_sendERRORMessage:
 18393                           
 18394                           	psect	text50
 18395  1181                     __ptext50:	
 18396 ;; *************** function _sendMessage *****************
 18397 ;; Defined at:
 18398 ;;		line 661 in file "main.c"
 18399 ;; Parameters:    Size  Location     Type
 18400 ;;  num             2   10[BANK0 ] int 
 18401 ;;  buffer          1   12[BANK0 ] PTR unsigned char 
 18402 ;;		 -> cmd_tri@buffEOM(1), cmd_tri@buffData(5), cmd_tri@buffInit(4), cmd_trc@buffEOM(1), 
 18403 ;;		 -> cmd_trc@buffData(5), cmd_trc@buffInit(3), cmd_ir@buff(7), cmd_ra@buff(9), 
 18404 ;;		 -> cmd_rp@buff(5), cmd_rtl@buff(5), cmd_rc@buff(6), sendERRORMessage@bufw(4), 
 18405 ;;		 -> sendOKMessage@bufw(4), checkFlags@buff(7), 
 18406 ;; Auto vars:     Size  Location     Type
 18407 ;;  n               2   14[BANK0 ] int 
 18408 ;; Return value:  Size  Location     Type
 18409 ;;                  1    wreg      void 
 18410 ;; Registers used:
 18411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18412 ;; Tracked objects:
 18413 ;;		On entry : 0/0
 18414 ;;		On exit  : 0/0
 18415 ;;		Unchanged: 0/0
 18416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18417 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18418 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18420 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18421 ;;Total ram usage:        6 bytes
 18422 ;; Hardware stack levels used:    1
 18423 ;; Hardware stack levels required when called:    6
 18424 ;; This function calls:
 18425 ;;		_putch
 18426 ;; This function is called by:
 18427 ;;		_checkFlags
 18428 ;;		_sendOKMessage
 18429 ;;		_sendERRORMessage
 18430 ;;		_cmd_rc
 18431 ;;		_cmd_rtl
 18432 ;;		_cmd_rp
 18433 ;;		_cmd_ra
 18434 ;;		_cmd_ir
 18435 ;;		_cmd_trc
 18436 ;;		_cmd_tri
 18437 ;; This function uses a non-reentrant model
 18438 ;;
 18439                           
 18440                           
 18441                           ;psect for function _sendMessage
 18442  1181                     _sendMessage:
 18443  1181                     l6846:	
 18444                           ;incstack = 0
 18445                           ; Regs used in _sendMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18446                           
 18447                           
 18448                           ;main.c: 662: int n = 0;
 18449  1181  0020               	movlb	0	; select bank0
 18450  1182  01AE               	clrf	sendMessage@n
 18451  1183  01AF               	clrf	sendMessage@n+1
 18452                           
 18453                           ;main.c: 663: while(n<num){
 18454  1184  2995               	goto	l6852
 18455  1185                     l6848:
 18456                           
 18457                           ;main.c: 664: putch(buffer[n]);
 18458  1185  0020               	movlb	0	; select bank0
 18459  1186  082E               	movf	sendMessage@n,w
 18460  1187  072C               	addwf	sendMessage@buffer,w
 18461  1188  00AD               	movwf	??_sendMessage
 18462  1189  082D               	movf	??_sendMessage,w
 18463  118A  0086               	movwf	6
 18464  118B  0187               	clrf	7
 18465  118C  0801               	movf	1,w
 18466  118D  319E  26FA  3191   	fcall	_putch
 18467  1190                     l6850:
 18468                           
 18469                           ;main.c: 665: n++;
 18470  1190  3001               	movlw	1
 18471  1191  0020               	movlb	0	; select bank0
 18472  1192  07AE               	addwf	sendMessage@n,f
 18473  1193  3000               	movlw	0
 18474  1194  3DAF               	addwfc	sendMessage@n+1,f
 18475  1195                     l6852:
 18476  1195  082F               	movf	sendMessage@n+1,w
 18477  1196  3A80               	xorlw	128
 18478  1197  00AD               	movwf	??_sendMessage
 18479  1198  082B               	movf	sendMessage@num+1,w
 18480  1199  3A80               	xorlw	128
 18481  119A  022D               	subwf	??_sendMessage,w
 18482  119B  1D03               	skipz
 18483  119C  299F               	goto	u8165
 18484  119D  082A               	movf	sendMessage@num,w
 18485  119E  022E               	subwf	sendMessage@n,w
 18486  119F                     u8165:
 18487  119F  1C03               	skipc
 18488  11A0  29A2               	goto	u8161
 18489  11A1  29A3               	goto	u8160
 18490  11A2                     u8161:
 18491  11A2  2985               	goto	l6848
 18492  11A3                     u8160:
 18493  11A3                     l1382:
 18494  11A3  0008               	return
 18495  11A4                     __end_of_sendMessage:
 18496                           
 18497                           	psect	text51
 18498  1EFA                     __ptext51:	
 18499 ;; *************** function _putch *****************
 18500 ;; Defined at:
 18501 ;;		line 176 in file "mcc_generated_files/eusart.c"
 18502 ;; Parameters:    Size  Location     Type
 18503 ;;  txData          1    wreg     unsigned char 
 18504 ;; Auto vars:     Size  Location     Type
 18505 ;;  txData          1    9[BANK0 ] unsigned char 
 18506 ;; Return value:  Size  Location     Type
 18507 ;;                  1    wreg      void 
 18508 ;; Registers used:
 18509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18510 ;; Tracked objects:
 18511 ;;		On entry : 0/0
 18512 ;;		On exit  : 0/0
 18513 ;;		Unchanged: 0/0
 18514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18518 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18519 ;;Total ram usage:        1 bytes
 18520 ;; Hardware stack levels used:    1
 18521 ;; Hardware stack levels required when called:    5
 18522 ;; This function calls:
 18523 ;;		_EUSART_Write
 18524 ;; This function is called by:
 18525 ;;		_sendMessage
 18526 ;; This function uses a non-reentrant model
 18527 ;;
 18528                           
 18529                           
 18530                           ;psect for function _putch
 18531  1EFA                     _putch:
 18532                           
 18533                           ;incstack = 0
 18534                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18535                           ;putch@txData stored from wreg
 18536  1EFA  0020               	movlb	0	; select bank0
 18537  1EFB  00A9               	movwf	putch@txData
 18538  1EFC                     l6410:
 18539                           
 18540                           ;eusart.c: 178: EUSART_Write(txData);
 18541  1EFC  0829               	movf	putch@txData,w
 18542  1EFD  3192  22B2  319E   	fcall	_EUSART_Write
 18543  1F00                     l842:
 18544  1F00  0008               	return
 18545  1F01                     __end_of_putch:
 18546                           
 18547                           	psect	text52
 18548  12B2                     __ptext52:	
 18549 ;; *************** function _EUSART_Write *****************
 18550 ;; Defined at:
 18551 ;;		line 148 in file "mcc_generated_files/eusart.c"
 18552 ;; Parameters:    Size  Location     Type
 18553 ;;  txData          1    wreg     unsigned char 
 18554 ;; Auto vars:     Size  Location     Type
 18555 ;;  txData          1    8[BANK0 ] unsigned char 
 18556 ;; Return value:  Size  Location     Type
 18557 ;;                  1    wreg      void 
 18558 ;; Registers used:
 18559 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18560 ;; Tracked objects:
 18561 ;;		On entry : 0/0
 18562 ;;		On exit  : 0/0
 18563 ;;		Unchanged: 0/0
 18564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18568 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18569 ;;Total ram usage:        2 bytes
 18570 ;; Hardware stack levels used:    1
 18571 ;; Hardware stack levels required when called:    4
 18572 ;; This function calls:
 18573 ;;		Nothing
 18574 ;; This function is called by:
 18575 ;;		_putch
 18576 ;; This function uses a non-reentrant model
 18577 ;;
 18578                           
 18579                           
 18580                           ;psect for function _EUSART_Write
 18581  12B2                     _EUSART_Write:
 18582                           
 18583                           ;incstack = 0
 18584                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 18585                           ;EUSART_Write@txData stored from wreg
 18586  12B2  0020               	movlb	0	; select bank0
 18587  12B3  00A8               	movwf	EUSART_Write@txData
 18588  12B4                     l6276:
 18589  12B4                     l6278:	
 18590                           ;eusart.c: 150: while(0 == eusartTxBufferRemaining)
 18591                           
 18592  12B4  0021               	movlb	1	; select bank1
 18593  12B5  085A               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 18594  12B6  1903               	btfsc	3,2
 18595  12B7  2AB9               	goto	u6931
 18596  12B8  2ABA               	goto	u6930
 18597  12B9                     u6931:
 18598  12B9  2AB4               	goto	l6278
 18599  12BA                     u6930:
 18600  12BA                     l832:
 18601                           
 18602                           ;eusart.c: 152: };eusart.c: 154: if(0 == PIE3bits.TXIE)
 18603  12BA  002E               	movlb	14	; select bank14
 18604  12BB  1A19               	btfsc	25,4	;volatile
 18605  12BC  2ABE               	goto	u6941
 18606  12BD  2ABF               	goto	u6940
 18607  12BE                     u6941:
 18608  12BE  2AC4               	goto	l833
 18609  12BF                     u6940:
 18610  12BF                     l6280:
 18611                           
 18612                           ;eusart.c: 155: {;eusart.c: 156: TX1REG = txData;
 18613  12BF  0020               	movlb	0	; select bank0
 18614  12C0  0828               	movf	EUSART_Write@txData,w
 18615  12C1  0022               	movlb	2	; select bank2
 18616  12C2  009A               	movwf	26	;volatile
 18617                           
 18618                           ;eusart.c: 157: }
 18619  12C3  2ADD               	goto	l6292
 18620  12C4                     l833:
 18621                           
 18622                           ;eusart.c: 158: else;eusart.c: 159: {;eusart.c: 160: PIE3bits.TXIE = 0;
 18623  12C4  1219               	bcf	25,4	;volatile
 18624  12C5                     l6282:
 18625                           
 18626                           ;eusart.c: 161: eusartTxBuffer[eusartTxHead++] = txData;
 18627  12C5  0020               	movlb	0	; select bank0
 18628  12C6  0828               	movf	EUSART_Write@txData,w
 18629  12C7  00A7               	movwf	??_EUSART_Write
 18630  12C8  0864               	movf	_eusartTxHead,w
 18631  12C9  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 18632  12CA  0086               	movwf	6
 18633  12CB  3001               	movlw	1	; select bank3/4
 18634  12CC  0087               	movwf	7
 18635  12CD  0827               	movf	??_EUSART_Write,w
 18636  12CE  0081               	movwf	1
 18637  12CF                     l6284:
 18638  12CF  3001               	movlw	1
 18639  12D0  00A7               	movwf	??_EUSART_Write
 18640  12D1  0827               	movf	??_EUSART_Write,w
 18641  12D2  07E4               	addwf	_eusartTxHead,f	;volatile
 18642  12D3                     l6286:
 18643                           
 18644                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 18645  12D3  3040               	movlw	64
 18646  12D4  0264               	subwf	_eusartTxHead,w	;volatile
 18647  12D5  1C03               	skipc
 18648  12D6  2AD8               	goto	u6951
 18649  12D7  2AD9               	goto	u6950
 18650  12D8                     u6951:
 18651  12D8  2ADA               	goto	l6290
 18652  12D9                     u6950:
 18653  12D9                     l6288:
 18654                           
 18655                           ;eusart.c: 163: {;eusart.c: 164: eusartTxHead = 0;
 18656  12D9  01E4               	clrf	_eusartTxHead	;volatile
 18657  12DA                     l6290:
 18658                           
 18659                           ;eusart.c: 165: };eusart.c: 166: eusartTxBufferRemaining--;
 18660  12DA  3001               	movlw	1
 18661  12DB  0021               	movlb	1	; select bank1
 18662  12DC  02DA               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 18663  12DD                     l6292:
 18664                           
 18665                           ;eusart.c: 167: };eusart.c: 168: PIE3bits.TXIE = 1;
 18666  12DD  002E               	movlb	14	; select bank14
 18667  12DE  1619               	bsf	25,4	;volatile
 18668  12DF                     l836:
 18669  12DF  0008               	return
 18670  12E0                     __end_of_EUSART_Write:
 18671                           
 18672                           	psect	text53
 18673  1069                     __ptext53:	
 18674 ;; *************** function _SYSTEM_Initialize *****************
 18675 ;; Defined at:
 18676 ;;		line 50 in file "mcc_generated_files/mcc.c"
 18677 ;; Parameters:    Size  Location     Type
 18678 ;;		None
 18679 ;; Auto vars:     Size  Location     Type
 18680 ;;		None
 18681 ;; Return value:  Size  Location     Type
 18682 ;;                  1    wreg      void 
 18683 ;; Registers used:
 18684 ;;		wreg, status,2, status,0, pclath, cstack
 18685 ;; Tracked objects:
 18686 ;;		On entry : 0/0
 18687 ;;		On exit  : 0/0
 18688 ;;		Unchanged: 0/0
 18689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18694 ;;Total ram usage:        0 bytes
 18695 ;; Hardware stack levels used:    1
 18696 ;; Hardware stack levels required when called:    6
 18697 ;; This function calls:
 18698 ;;		_ADCC_Initialize
 18699 ;;		_EUSART_Initialize
 18700 ;;		_EXT_INT_Initialize
 18701 ;;		_OSCILLATOR_Initialize
 18702 ;;		_PIN_MANAGER_Initialize
 18703 ;;		_PMD_Initialize
 18704 ;;		_PWM6_Initialize
 18705 ;;		_TMR1_Initialize
 18706 ;;		_TMR2_Initialize
 18707 ;; This function is called by:
 18708 ;;		_main
 18709 ;; This function uses a non-reentrant model
 18710 ;;
 18711                           
 18712                           
 18713                           ;psect for function _SYSTEM_Initialize
 18714  1069                     _SYSTEM_Initialize:
 18715  1069                     l7110:	
 18716                           ;incstack = 0
 18717                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18718                           
 18719                           
 18720                           ;mcc.c: 52: PMD_Initialize();
 18721  1069  319F  2701  3190   	fcall	_PMD_Initialize
 18722  106C                     l7112:
 18723                           
 18724                           ;mcc.c: 53: PIN_MANAGER_Initialize();
 18725  106C  3194  249B  3190   	fcall	_PIN_MANAGER_Initialize
 18726  106F                     l7114:
 18727                           
 18728                           ;mcc.c: 54: OSCILLATOR_Initialize();
 18729  106F  319F  2735  3190   	fcall	_OSCILLATOR_Initialize
 18730  1072                     l7116:
 18731                           
 18732                           ;mcc.c: 55: PWM6_Initialize();
 18733  1072  319F  2773  3190   	fcall	_PWM6_Initialize
 18734  1075                     l7118:
 18735                           
 18736                           ;mcc.c: 56: ADCC_Initialize();
 18737  1075  319F  27E9  3190   	fcall	_ADCC_Initialize
 18738  1078                     l7120:
 18739                           
 18740                           ;mcc.c: 57: TMR2_Initialize();
 18741  1078  319F  278E  3190   	fcall	_TMR2_Initialize
 18742  107B                     l7122:
 18743                           
 18744                           ;mcc.c: 58: TMR1_Initialize();
 18745  107B  3190  20C1  3190   	fcall	_TMR1_Initialize
 18746  107E                     l7124:
 18747                           
 18748                           ;mcc.c: 59: EXT_INT_Initialize();
 18749  107E  319F  2780  3190   	fcall	_EXT_INT_Initialize
 18750  1081                     l7126:
 18751                           
 18752                           ;mcc.c: 60: EUSART_Initialize();
 18753  1081  3192  2286  3190   	fcall	_EUSART_Initialize
 18754  1084                     l182:
 18755  1084  0008               	return
 18756  1085                     __end_of_SYSTEM_Initialize:
 18757                           
 18758                           	psect	text54
 18759  1F8E                     __ptext54:	
 18760 ;; *************** function _TMR2_Initialize *****************
 18761 ;; Defined at:
 18762 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 18763 ;; Parameters:    Size  Location     Type
 18764 ;;		None
 18765 ;; Auto vars:     Size  Location     Type
 18766 ;;		None
 18767 ;; Return value:  Size  Location     Type
 18768 ;;                  1    wreg      void 
 18769 ;; Registers used:
 18770 ;;		wreg, status,2
 18771 ;; Tracked objects:
 18772 ;;		On entry : 0/0
 18773 ;;		On exit  : 0/0
 18774 ;;		Unchanged: 0/0
 18775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18780 ;;Total ram usage:        0 bytes
 18781 ;; Hardware stack levels used:    1
 18782 ;; Hardware stack levels required when called:    4
 18783 ;; This function calls:
 18784 ;;		Nothing
 18785 ;; This function is called by:
 18786 ;;		_SYSTEM_Initialize
 18787 ;; This function uses a non-reentrant model
 18788 ;;
 18789                           
 18790                           
 18791                           ;psect for function _TMR2_Initialize
 18792  1F8E                     _TMR2_Initialize:
 18793  1F8E                     l6922:	
 18794                           ;incstack = 0
 18795                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 18796                           
 18797                           
 18798                           ;tmr2.c: 67: T2CLKCON = 0x01;
 18799  1F8E  3001               	movlw	1
 18800  1F8F  0025               	movlb	5	; select bank5
 18801  1F90  0090               	movwf	16	;volatile
 18802  1F91                     l6924:
 18803                           
 18804                           ;tmr2.c: 70: T2HLT = 0x00;
 18805  1F91  018F               	clrf	15	;volatile
 18806  1F92                     l6926:
 18807                           
 18808                           ;tmr2.c: 73: T2RST = 0x00;
 18809  1F92  0191               	clrf	17	;volatile
 18810                           
 18811                           ;tmr2.c: 76: T2PR = 0xFF;
 18812  1F93  30FF               	movlw	255
 18813  1F94  008D               	movwf	13	;volatile
 18814  1F95                     l6928:
 18815                           
 18816                           ;tmr2.c: 79: T2TMR = 0x00;
 18817  1F95  018C               	clrf	12	;volatile
 18818  1F96                     l6930:
 18819                           
 18820                           ;tmr2.c: 82: PIR4bits.TMR2IF = 0;
 18821  1F96  002E               	movlb	14	; select bank14
 18822  1F97  1090               	bcf	16,1	;volatile
 18823  1F98                     l6932:
 18824                           
 18825                           ;tmr2.c: 85: T2CON = 0x80;
 18826  1F98  3080               	movlw	128
 18827  1F99  0025               	movlb	5	; select bank5
 18828  1F9A  008E               	movwf	14	;volatile
 18829  1F9B                     l647:
 18830  1F9B  0008               	return
 18831  1F9C                     __end_of_TMR2_Initialize:
 18832                           
 18833                           	psect	text55
 18834  10C1                     __ptext55:	
 18835 ;; *************** function _TMR1_Initialize *****************
 18836 ;; Defined at:
 18837 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 18838 ;; Parameters:    Size  Location     Type
 18839 ;;		None
 18840 ;; Auto vars:     Size  Location     Type
 18841 ;;		None
 18842 ;; Return value:  Size  Location     Type
 18843 ;;                  1    wreg      void 
 18844 ;; Registers used:
 18845 ;;		wreg, status,2, status,0, pclath, cstack
 18846 ;; Tracked objects:
 18847 ;;		On entry : 0/0
 18848 ;;		On exit  : 0/0
 18849 ;;		Unchanged: 0/0
 18850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18855 ;;Total ram usage:        0 bytes
 18856 ;; Hardware stack levels used:    1
 18857 ;; Hardware stack levels required when called:    5
 18858 ;; This function calls:
 18859 ;;		_TMR1_SetInterruptHandler
 18860 ;; This function is called by:
 18861 ;;		_SYSTEM_Initialize
 18862 ;; This function uses a non-reentrant model
 18863 ;;
 18864                           
 18865                           
 18866                           ;psect for function _TMR1_Initialize
 18867  10C1                     _TMR1_Initialize:
 18868  10C1                     l6934:	
 18869                           ;incstack = 0
 18870                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18871                           
 18872                           
 18873                           ;tmr1.c: 69: T1GCON = 0x00;
 18874  10C1  0024               	movlb	4	; select bank4
 18875  10C2  018F               	clrf	15	;volatile
 18876                           
 18877                           ;tmr1.c: 72: T1GATE = 0x00;
 18878  10C3  0190               	clrf	16	;volatile
 18879  10C4                     l6936:
 18880                           
 18881                           ;tmr1.c: 75: T1CLK = 0x04;
 18882  10C4  3004               	movlw	4
 18883  10C5  0091               	movwf	17	;volatile
 18884  10C6                     l6938:
 18885                           
 18886                           ;tmr1.c: 78: TMR1H = 0x86;
 18887  10C6  3086               	movlw	134
 18888  10C7  008D               	movwf	13	;volatile
 18889  10C8                     l6940:
 18890                           
 18891                           ;tmr1.c: 81: TMR1L = 0xE8;
 18892  10C8  30E8               	movlw	232
 18893  10C9  008C               	movwf	12	;volatile
 18894  10CA                     l6942:
 18895                           
 18896                           ;tmr1.c: 84: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 18897  10CA  080D               	movf	13,w	;volatile
 18898  10CB  0021               	movlb	1	; select bank1
 18899  10CC  00D9               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
 18900  10CD  0024               	movlb	4	; select bank4
 18901  10CE  080C               	movf	12,w	;volatile
 18902  10CF  0021               	movlb	1	; select bank1
 18903  10D0  00D8               	movwf	_timer1ReloadVal^(0+128)	;volatile
 18904  10D1                     l6944:
 18905                           
 18906                           ;tmr1.c: 87: PIR4bits.TMR1IF = 0;
 18907  10D1  002E               	movlb	14	; select bank14
 18908  10D2  1010               	bcf	16,0	;volatile
 18909  10D3                     l6946:
 18910                           
 18911                           ;tmr1.c: 90: PIE4bits.TMR1IE = 1;
 18912  10D3  141A               	bsf	26,0	;volatile
 18913  10D4                     l6948:
 18914                           
 18915                           ;tmr1.c: 93: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 18916  10D4  30FF               	movlw	low _TMR1_DefaultInterruptHandler
 18917  10D5  0020               	movlb	0	; select bank0
 18918  10D6  00A7               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 18919  10D7  3007               	movlw	high _TMR1_DefaultInterruptHandler
 18920  10D8  00A8               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 18921  10D9  319F  273E  3190   	fcall	_TMR1_SetInterruptHandler
 18922  10DC                     l6950:
 18923                           
 18924                           ;tmr1.c: 96: T1CON = 0x05;
 18925  10DC  3005               	movlw	5
 18926  10DD  0024               	movlb	4	; select bank4
 18927  10DE  008E               	movwf	14	;volatile
 18928  10DF                     l409:
 18929  10DF  0008               	return
 18930  10E0                     __end_of_TMR1_Initialize:
 18931                           
 18932                           	psect	text56
 18933  1F3E                     __ptext56:	
 18934 ;; *************** function _TMR1_SetInterruptHandler *****************
 18935 ;; Defined at:
 18936 ;;		line 178 in file "mcc_generated_files/tmr1.c"
 18937 ;; Parameters:    Size  Location     Type
 18938 ;;  InterruptHan    2    7[BANK0 ] PTR FTN()void 
 18939 ;;		 -> Clock_ISR(1), TMR1_DefaultInterruptHandler(1), 
 18940 ;; Auto vars:     Size  Location     Type
 18941 ;;		None
 18942 ;; Return value:  Size  Location     Type
 18943 ;;                  1    wreg      void 
 18944 ;; Registers used:
 18945 ;;		wreg
 18946 ;; Tracked objects:
 18947 ;;		On entry : 0/0
 18948 ;;		On exit  : 0/0
 18949 ;;		Unchanged: 0/0
 18950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18951 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18954 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18955 ;;Total ram usage:        2 bytes
 18956 ;; Hardware stack levels used:    1
 18957 ;; Hardware stack levels required when called:    4
 18958 ;; This function calls:
 18959 ;;		Nothing
 18960 ;; This function is called by:
 18961 ;;		_TMR1_Initialize
 18962 ;;		_main
 18963 ;; This function uses a non-reentrant model
 18964 ;;
 18965                           
 18966                           
 18967                           ;psect for function _TMR1_SetInterruptHandler
 18968  1F3E                     _TMR1_SetInterruptHandler:
 18969  1F3E                     l6598:	
 18970                           ;incstack = 0
 18971                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 18972                           
 18973                           
 18974                           ;tmr1.c: 179: TMR1_InterruptHandler = InterruptHandler;
 18975  1F3E  0020               	movlb	0	; select bank0
 18976  1F3F  0828               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 18977  1F40  0022               	movlb	2	; select bank2
 18978  1F41  00DC               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
 18979  1F42  0020               	movlb	0	; select bank0
 18980  1F43  0827               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 18981  1F44  0022               	movlb	2	; select bank2
 18982  1F45  00DB               	movwf	_TMR1_InterruptHandler^(0+256)
 18983  1F46                     l439:
 18984  1F46  0008               	return
 18985  1F47                     __end_of_TMR1_SetInterruptHandler:
 18986                           
 18987                           	psect	text57
 18988  1F73                     __ptext57:	
 18989 ;; *************** function _PWM6_Initialize *****************
 18990 ;; Defined at:
 18991 ;;		line 58 in file "mcc_generated_files/pwm6.c"
 18992 ;; Parameters:    Size  Location     Type
 18993 ;;		None
 18994 ;; Auto vars:     Size  Location     Type
 18995 ;;		None
 18996 ;; Return value:  Size  Location     Type
 18997 ;;                  1    wreg      void 
 18998 ;; Registers used:
 18999 ;;		wreg, status,2, status,0
 19000 ;; Tracked objects:
 19001 ;;		On entry : 0/0
 19002 ;;		On exit  : 0/0
 19003 ;;		Unchanged: 0/0
 19004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19009 ;;Total ram usage:        0 bytes
 19010 ;; Hardware stack levels used:    1
 19011 ;; Hardware stack levels required when called:    4
 19012 ;; This function calls:
 19013 ;;		Nothing
 19014 ;; This function is called by:
 19015 ;;		_SYSTEM_Initialize
 19016 ;; This function uses a non-reentrant model
 19017 ;;
 19018                           
 19019                           
 19020                           ;psect for function _PWM6_Initialize
 19021  1F73                     _PWM6_Initialize:
 19022  1F73                     l6912:	
 19023                           ;incstack = 0
 19024                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 19025                           
 19026                           
 19027                           ;pwm6.c: 62: PWM6CON = 0x80;
 19028  1F73  3080               	movlw	128
 19029  1F74  0027               	movlb	7	; select bank7
 19030  1F75  008E               	movwf	14	;volatile
 19031                           
 19032                           ;pwm6.c: 65: PWM6DCH = 0xFF;
 19033  1F76  30FF               	movlw	255
 19034  1F77  008D               	movwf	13	;volatile
 19035                           
 19036                           ;pwm6.c: 68: PWM6DCL = 0xC0;
 19037  1F78  30C0               	movlw	192
 19038  1F79  008C               	movwf	12	;volatile
 19039  1F7A                     l6914:
 19040                           
 19041                           ;pwm6.c: 71: CCPTMRS1bits.P6TSEL = 1;
 19042  1F7A  0024               	movlb	4	; select bank4
 19043  1F7B  081F               	movf	31,w	;volatile
 19044  1F7C  39F3               	andlw	-13
 19045  1F7D  3804               	iorlw	4
 19046  1F7E  009F               	movwf	31	;volatile
 19047  1F7F                     l617:
 19048  1F7F  0008               	return
 19049  1F80                     __end_of_PWM6_Initialize:
 19050                           
 19051                           	psect	text58
 19052  1F01                     __ptext58:	
 19053 ;; *************** function _PMD_Initialize *****************
 19054 ;; Defined at:
 19055 ;;		line 77 in file "mcc_generated_files/mcc.c"
 19056 ;; Parameters:    Size  Location     Type
 19057 ;;		None
 19058 ;; Auto vars:     Size  Location     Type
 19059 ;;		None
 19060 ;; Return value:  Size  Location     Type
 19061 ;;                  1    wreg      void 
 19062 ;; Registers used:
 19063 ;;		status,2
 19064 ;; Tracked objects:
 19065 ;;		On entry : 0/0
 19066 ;;		On exit  : 0/0
 19067 ;;		Unchanged: 0/0
 19068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19073 ;;Total ram usage:        0 bytes
 19074 ;; Hardware stack levels used:    1
 19075 ;; Hardware stack levels required when called:    4
 19076 ;; This function calls:
 19077 ;;		Nothing
 19078 ;; This function is called by:
 19079 ;;		_SYSTEM_Initialize
 19080 ;; This function uses a non-reentrant model
 19081 ;;
 19082                           
 19083                           
 19084                           ;psect for function _PMD_Initialize
 19085  1F01                     _PMD_Initialize:
 19086  1F01                     l6902:	
 19087                           ;incstack = 0
 19088                           ; Regs used in _PMD_Initialize: [status,2]
 19089                           
 19090                           
 19091                           ;mcc.c: 80: PMD0 = 0x00;
 19092  1F01  002F               	movlb	15	; select bank15
 19093  1F02  0196               	clrf	22	;volatile
 19094                           
 19095                           ;mcc.c: 82: PMD1 = 0x00;
 19096  1F03  0197               	clrf	23	;volatile
 19097                           
 19098                           ;mcc.c: 84: PMD2 = 0x00;
 19099  1F04  0198               	clrf	24	;volatile
 19100                           
 19101                           ;mcc.c: 86: PMD3 = 0x00;
 19102  1F05  0199               	clrf	25	;volatile
 19103                           
 19104                           ;mcc.c: 88: PMD4 = 0x00;
 19105  1F06  019A               	clrf	26	;volatile
 19106                           
 19107                           ;mcc.c: 90: PMD5 = 0x00;
 19108  1F07  019B               	clrf	27	;volatile
 19109  1F08                     l188:
 19110  1F08  0008               	return
 19111  1F09                     __end_of_PMD_Initialize:
 19112                           
 19113                           	psect	text59
 19114  149B                     __ptext59:	
 19115 ;; *************** function _PIN_MANAGER_Initialize *****************
 19116 ;; Defined at:
 19117 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 19118 ;; Parameters:    Size  Location     Type
 19119 ;;		None
 19120 ;; Auto vars:     Size  Location     Type
 19121 ;;		None
 19122 ;; Return value:  Size  Location     Type
 19123 ;;                  1    wreg      void 
 19124 ;; Registers used:
 19125 ;;		wreg, status,2
 19126 ;; Tracked objects:
 19127 ;;		On entry : 0/0
 19128 ;;		On exit  : 0/0
 19129 ;;		Unchanged: 0/0
 19130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19135 ;;Total ram usage:        0 bytes
 19136 ;; Hardware stack levels used:    1
 19137 ;; Hardware stack levels required when called:    4
 19138 ;; This function calls:
 19139 ;;		Nothing
 19140 ;; This function is called by:
 19141 ;;		_SYSTEM_Initialize
 19142 ;; This function uses a non-reentrant model
 19143 ;;
 19144                           
 19145                           
 19146                           ;psect for function _PIN_MANAGER_Initialize
 19147  149B                     _PIN_MANAGER_Initialize:
 19148  149B                     l6854:	
 19149                           ;incstack = 0
 19150                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 19151                           
 19152                           
 19153                           ;pin_manager.c: 62: LATE = 0x00;
 19154  149B  0020               	movlb	0	; select bank0
 19155  149C  019A               	clrf	26	;volatile
 19156                           
 19157                           ;pin_manager.c: 63: LATD = 0x00;
 19158  149D  0199               	clrf	25	;volatile
 19159                           
 19160                           ;pin_manager.c: 64: LATA = 0x00;
 19161  149E  0196               	clrf	22	;volatile
 19162                           
 19163                           ;pin_manager.c: 65: LATB = 0x00;
 19164  149F  0197               	clrf	23	;volatile
 19165                           
 19166                           ;pin_manager.c: 66: LATC = 0x00;
 19167  14A0  0198               	clrf	24	;volatile
 19168  14A1                     l6856:
 19169                           
 19170                           ;pin_manager.c: 71: TRISE = 0x07;
 19171  14A1  3007               	movlw	7
 19172  14A2  0095               	movwf	21	;volatile
 19173  14A3                     l6858:
 19174                           
 19175                           ;pin_manager.c: 72: TRISA = 0x0F;
 19176  14A3  300F               	movlw	15
 19177  14A4  0091               	movwf	17	;volatile
 19178  14A5                     l6860:
 19179                           
 19180                           ;pin_manager.c: 73: TRISB = 0xFF;
 19181  14A5  30FF               	movlw	255
 19182  14A6  0092               	movwf	18	;volatile
 19183  14A7                     l6862:
 19184                           
 19185                           ;pin_manager.c: 74: TRISC = 0xBF;
 19186  14A7  30BF               	movlw	191
 19187  14A8  0093               	movwf	19	;volatile
 19188  14A9                     l6864:
 19189                           
 19190                           ;pin_manager.c: 75: TRISD = 0xFF;
 19191  14A9  30FF               	movlw	255
 19192  14AA  0094               	movwf	20	;volatile
 19193  14AB                     l6866:
 19194                           
 19195                           ;pin_manager.c: 80: ANSELD = 0xFF;
 19196  14AB  30FF               	movlw	255
 19197  14AC  003E               	movlb	30	; select bank30
 19198  14AD  00D9               	movwf	89	;volatile
 19199  14AE                     l6868:
 19200                           
 19201                           ;pin_manager.c: 81: ANSELC = 0x47;
 19202  14AE  3047               	movlw	71
 19203  14AF  00CE               	movwf	78	;volatile
 19204  14B0                     l6870:
 19205                           
 19206                           ;pin_manager.c: 82: ANSELB = 0xEF;
 19207  14B0  30EF               	movlw	239
 19208  14B1  00C3               	movwf	67	;volatile
 19209  14B2                     l6872:
 19210                           
 19211                           ;pin_manager.c: 83: ANSELE = 0x07;
 19212  14B2  3007               	movlw	7
 19213  14B3  00E4               	movwf	100	;volatile
 19214  14B4                     l6874:
 19215                           
 19216                           ;pin_manager.c: 84: ANSELA = 0x4F;
 19217  14B4  304F               	movlw	79
 19218  14B5  00B8               	movwf	56	;volatile
 19219                           
 19220                           ;pin_manager.c: 89: WPUD = 0x00;
 19221  14B6  01DA               	clrf	90	;volatile
 19222                           
 19223                           ;pin_manager.c: 90: WPUE = 0x00;
 19224  14B7  01E5               	clrf	101	;volatile
 19225                           
 19226                           ;pin_manager.c: 91: WPUB = 0x00;
 19227  14B8  01C4               	clrf	68	;volatile
 19228                           
 19229                           ;pin_manager.c: 92: WPUA = 0x00;
 19230  14B9  01B9               	clrf	57	;volatile
 19231                           
 19232                           ;pin_manager.c: 93: WPUC = 0x00;
 19233  14BA  01CF               	clrf	79	;volatile
 19234                           
 19235                           ;pin_manager.c: 98: ODCONE = 0x00;
 19236  14BB  01E6               	clrf	102	;volatile
 19237                           
 19238                           ;pin_manager.c: 99: ODCONA = 0x00;
 19239  14BC  01BA               	clrf	58	;volatile
 19240                           
 19241                           ;pin_manager.c: 100: ODCONB = 0x00;
 19242  14BD  01C5               	clrf	69	;volatile
 19243                           
 19244                           ;pin_manager.c: 101: ODCONC = 0x00;
 19245  14BE  01D0               	clrf	80	;volatile
 19246                           
 19247                           ;pin_manager.c: 102: ODCOND = 0x00;
 19248  14BF  01DB               	clrf	91	;volatile
 19249  14C0                     l6876:
 19250                           
 19251                           ;pin_manager.c: 107: SLRCONA = 0xFF;
 19252  14C0  30FF               	movlw	255
 19253  14C1  00BB               	movwf	59	;volatile
 19254  14C2                     l6878:
 19255                           
 19256                           ;pin_manager.c: 108: SLRCONB = 0xFF;
 19257  14C2  30FF               	movlw	255
 19258  14C3  00C6               	movwf	70	;volatile
 19259  14C4                     l6880:
 19260                           
 19261                           ;pin_manager.c: 109: SLRCONC = 0xFF;
 19262  14C4  30FF               	movlw	255
 19263  14C5  00D1               	movwf	81	;volatile
 19264  14C6                     l6882:
 19265                           
 19266                           ;pin_manager.c: 110: SLRCOND = 0xFF;
 19267  14C6  30FF               	movlw	255
 19268  14C7  00DC               	movwf	92	;volatile
 19269  14C8                     l6884:
 19270                           
 19271                           ;pin_manager.c: 111: SLRCONE = 0x07;
 19272  14C8  3007               	movlw	7
 19273  14C9  00E7               	movwf	103	;volatile
 19274  14CA                     l6886:
 19275                           
 19276                           ;pin_manager.c: 120: INTPPS = 0x0C;
 19277  14CA  300C               	movlw	12
 19278  14CB  003D               	movlb	29	; select bank29
 19279  14CC  0090               	movwf	16	;volatile
 19280  14CD                     l6888:
 19281                           
 19282                           ;pin_manager.c: 121: RXPPS = 0x17;
 19283  14CD  3017               	movlw	23
 19284  14CE  00CB               	movwf	75	;volatile
 19285  14CF                     l6890:
 19286                           
 19287                           ;pin_manager.c: 122: SSP1CLKPPS = 0x13;
 19288  14CF  3013               	movlw	19
 19289  14D0  00C5               	movwf	69	;volatile
 19290  14D1                     l6892:
 19291                           
 19292                           ;pin_manager.c: 123: RC3PPS = 0x14;
 19293  14D1  3014               	movlw	20
 19294  14D2  003E               	movlb	30	; select bank30
 19295  14D3  00A3               	movwf	35	;volatile
 19296  14D4                     l6894:
 19297                           
 19298                           ;pin_manager.c: 124: RC4PPS = 0x15;
 19299  14D4  3015               	movlw	21
 19300  14D5  00A4               	movwf	36	;volatile
 19301  14D6                     l6896:
 19302                           
 19303                           ;pin_manager.c: 125: RA6PPS = 0x0E;
 19304  14D6  300E               	movlw	14
 19305  14D7  0096               	movwf	22	;volatile
 19306  14D8                     l6898:
 19307                           
 19308                           ;pin_manager.c: 126: RC6PPS = 0x10;
 19309  14D8  3010               	movlw	16
 19310  14D9  00A6               	movwf	38	;volatile
 19311  14DA                     l6900:
 19312                           
 19313                           ;pin_manager.c: 127: SSP1DATPPS = 0x14;
 19314  14DA  3014               	movlw	20
 19315  14DB  003D               	movlb	29	; select bank29
 19316  14DC  00C6               	movwf	70	;volatile
 19317  14DD                     l128:
 19318  14DD  0008               	return
 19319  14DE                     __end_of_PIN_MANAGER_Initialize:
 19320                           
 19321                           	psect	text60
 19322  1F35                     __ptext60:	
 19323 ;; *************** function _OSCILLATOR_Initialize *****************
 19324 ;; Defined at:
 19325 ;;		line 63 in file "mcc_generated_files/mcc.c"
 19326 ;; Parameters:    Size  Location     Type
 19327 ;;		None
 19328 ;; Auto vars:     Size  Location     Type
 19329 ;;		None
 19330 ;; Return value:  Size  Location     Type
 19331 ;;                  1    wreg      void 
 19332 ;; Registers used:
 19333 ;;		wreg, status,2
 19334 ;; Tracked objects:
 19335 ;;		On entry : 0/0
 19336 ;;		On exit  : 0/0
 19337 ;;		Unchanged: 0/0
 19338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19343 ;;Total ram usage:        0 bytes
 19344 ;; Hardware stack levels used:    1
 19345 ;; Hardware stack levels required when called:    4
 19346 ;; This function calls:
 19347 ;;		Nothing
 19348 ;; This function is called by:
 19349 ;;		_SYSTEM_Initialize
 19350 ;; This function uses a non-reentrant model
 19351 ;;
 19352                           
 19353                           
 19354                           ;psect for function _OSCILLATOR_Initialize
 19355  1F35                     _OSCILLATOR_Initialize:
 19356  1F35                     l6904:	
 19357                           ;incstack = 0
 19358                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 19359                           
 19360                           
 19361                           ;mcc.c: 66: OSCCON1 = 0x62;
 19362  1F35  3062               	movlw	98
 19363  1F36  0031               	movlb	17	; select bank17
 19364  1F37  008D               	movwf	13	;volatile
 19365  1F38                     l6906:
 19366                           
 19367                           ;mcc.c: 68: OSCCON3 = 0x00;
 19368  1F38  018F               	clrf	15	;volatile
 19369  1F39                     l6908:
 19370                           
 19371                           ;mcc.c: 70: OSCEN = 0x00;
 19372  1F39  0191               	clrf	17	;volatile
 19373                           
 19374                           ;mcc.c: 72: OSCFRQ = 0x02;
 19375  1F3A  3002               	movlw	2
 19376  1F3B  0093               	movwf	19	;volatile
 19377  1F3C                     l6910:
 19378                           
 19379                           ;mcc.c: 74: OSCTUNE = 0x00;
 19380  1F3C  0192               	clrf	18	;volatile
 19381  1F3D                     l185:
 19382  1F3D  0008               	return
 19383  1F3E                     __end_of_OSCILLATOR_Initialize:
 19384                           
 19385                           	psect	text61
 19386  1F80                     __ptext61:	
 19387 ;; *************** function _EXT_INT_Initialize *****************
 19388 ;; Defined at:
 19389 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 19390 ;; Parameters:    Size  Location     Type
 19391 ;;		None
 19392 ;; Auto vars:     Size  Location     Type
 19393 ;;		None
 19394 ;; Return value:  Size  Location     Type
 19395 ;;                  1    wreg      void 
 19396 ;; Registers used:
 19397 ;;		wreg, status,2, status,0, pclath, cstack
 19398 ;; Tracked objects:
 19399 ;;		On entry : 0/0
 19400 ;;		On exit  : 0/0
 19401 ;;		Unchanged: 0/0
 19402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19407 ;;Total ram usage:        0 bytes
 19408 ;; Hardware stack levels used:    1
 19409 ;; Hardware stack levels required when called:    5
 19410 ;; This function calls:
 19411 ;;		_INT_SetInterruptHandler
 19412 ;; This function is called by:
 19413 ;;		_SYSTEM_Initialize
 19414 ;; This function uses a non-reentrant model
 19415 ;;
 19416                           
 19417                           
 19418                           ;psect for function _EXT_INT_Initialize
 19419  1F80                     _EXT_INT_Initialize:
 19420  1F80                     l6952:	
 19421                           ;incstack = 0
 19422                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 19423                           
 19424                           
 19425                           ;ext_int.c: 64: (PIR0bits.INTF = 0);
 19426  1F80  002E               	movlb	14	; select bank14
 19427  1F81  100C               	bcf	12,0	;volatile
 19428                           
 19429                           ;ext_int.c: 66: (INTCONbits.INTEDG = 1);
 19430  1F82  140B               	bsf	11,0	;volatile
 19431  1F83                     l6954:
 19432                           
 19433                           ;ext_int.c: 68: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
 19434  1F83  3003               	movlw	low _INT_DefaultInterruptHandler
 19435  1F84  0020               	movlb	0	; select bank0
 19436  1F85  00A7               	movwf	INT_SetInterruptHandler@InterruptHandler
 19437  1F86  3000               	movlw	high _INT_DefaultInterruptHandler
 19438  1F87  00A8               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 19439  1F88  319F  272C  319F   	fcall	_INT_SetInterruptHandler
 19440  1F8B                     l6956:
 19441                           
 19442                           ;ext_int.c: 69: (PIE0bits.INTE = 1);
 19443  1F8B  002E               	movlb	14	; select bank14
 19444  1F8C  1416               	bsf	22,0	;volatile
 19445  1F8D                     l760:
 19446  1F8D  0008               	return
 19447  1F8E                     __end_of_EXT_INT_Initialize:
 19448                           
 19449                           	psect	text62
 19450  1F2C                     __ptext62:	
 19451 ;; *************** function _INT_SetInterruptHandler *****************
 19452 ;; Defined at:
 19453 ;;		line 50 in file "mcc_generated_files/ext_int.c"
 19454 ;; Parameters:    Size  Location     Type
 19455 ;;  InterruptHan    2    7[BANK0 ] PTR FTN()void 
 19456 ;;		 -> S1_ISR(1), INT_DefaultInterruptHandler(1), 
 19457 ;; Auto vars:     Size  Location     Type
 19458 ;;		None
 19459 ;; Return value:  Size  Location     Type
 19460 ;;                  1    wreg      void 
 19461 ;; Registers used:
 19462 ;;		wreg
 19463 ;; Tracked objects:
 19464 ;;		On entry : 0/0
 19465 ;;		On exit  : 0/0
 19466 ;;		Unchanged: 0/0
 19467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19468 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19471 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19472 ;;Total ram usage:        2 bytes
 19473 ;; Hardware stack levels used:    1
 19474 ;; Hardware stack levels required when called:    4
 19475 ;; This function calls:
 19476 ;;		Nothing
 19477 ;; This function is called by:
 19478 ;;		_EXT_INT_Initialize
 19479 ;;		_main
 19480 ;; This function uses a non-reentrant model
 19481 ;;
 19482                           
 19483                           
 19484                           ;psect for function _INT_SetInterruptHandler
 19485  1F2C                     _INT_SetInterruptHandler:
 19486  1F2C                     l6602:	
 19487                           ;incstack = 0
 19488                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 19489                           
 19490                           
 19491                           ;ext_int.c: 51: INT_InterruptHandler = InterruptHandler;
 19492  1F2C  0020               	movlb	0	; select bank0
 19493  1F2D  0828               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 19494  1F2E  0022               	movlb	2	; select bank2
 19495  1F2F  00DA               	movwf	(_INT_InterruptHandler+1)^(0+256)
 19496  1F30  0020               	movlb	0	; select bank0
 19497  1F31  0827               	movf	INT_SetInterruptHandler@InterruptHandler,w
 19498  1F32  0022               	movlb	2	; select bank2
 19499  1F33  00D9               	movwf	_INT_InterruptHandler^(0+256)
 19500  1F34                     l754:
 19501  1F34  0008               	return
 19502  1F35                     __end_of_INT_SetInterruptHandler:
 19503                           
 19504                           	psect	text63
 19505  1286                     __ptext63:	
 19506 ;; *************** function _EUSART_Initialize *****************
 19507 ;; Defined at:
 19508 ;;		line 75 in file "mcc_generated_files/eusart.c"
 19509 ;; Parameters:    Size  Location     Type
 19510 ;;		None
 19511 ;; Auto vars:     Size  Location     Type
 19512 ;;		None
 19513 ;; Return value:  Size  Location     Type
 19514 ;;                  1    wreg      void 
 19515 ;; Registers used:
 19516 ;;		wreg, status,2, status,0, pclath, cstack
 19517 ;; Tracked objects:
 19518 ;;		On entry : 0/0
 19519 ;;		On exit  : 0/0
 19520 ;;		Unchanged: 0/0
 19521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19524 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19525 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19526 ;;Total ram usage:        1 bytes
 19527 ;; Hardware stack levels used:    1
 19528 ;; Hardware stack levels required when called:    5
 19529 ;; This function calls:
 19530 ;;		_EUSART_SetRxInterruptHandler
 19531 ;;		_EUSART_SetTxInterruptHandler
 19532 ;; This function is called by:
 19533 ;;		_SYSTEM_Initialize
 19534 ;; This function uses a non-reentrant model
 19535 ;;
 19536                           
 19537                           
 19538                           ;psect for function _EUSART_Initialize
 19539  1286                     _EUSART_Initialize:
 19540  1286                     l6958:	
 19541                           ;incstack = 0
 19542                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 19543                           
 19544                           
 19545                           ;eusart.c: 78: PIE3bits.RCIE = 0;
 19546  1286  002E               	movlb	14	; select bank14
 19547  1287  1299               	bcf	25,5	;volatile
 19548  1288                     l6960:
 19549                           
 19550                           ;eusart.c: 79: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 19551  1288  303F               	movlw	low _EUSART_Receive_ISR
 19552  1289  0020               	movlb	0	; select bank0
 19553  128A  00A7               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 19554  128B  3011               	movlw	high _EUSART_Receive_ISR
 19555  128C  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 19556  128D  319F  271A  3192   	fcall	_EUSART_SetRxInterruptHandler
 19557  1290                     l6962:
 19558                           
 19559                           ;eusart.c: 80: PIE3bits.TXIE = 0;
 19560  1290  002E               	movlb	14	; select bank14
 19561  1291  1219               	bcf	25,4	;volatile
 19562                           
 19563                           ;eusart.c: 81: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
 19564  1292  30C8               	movlw	low _EUSART_Transmit_ISR
 19565  1293  0020               	movlb	0	; select bank0
 19566  1294  00A7               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 19567  1295  3011               	movlw	high _EUSART_Transmit_ISR
 19568  1296  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 19569  1297  319F  2723  3192   	fcall	_EUSART_SetTxInterruptHandler
 19570  129A                     l6964:
 19571                           
 19572                           ;eusart.c: 85: BAUD1CON = 0x08;
 19573  129A  3008               	movlw	8
 19574  129B  0022               	movlb	2	; select bank2
 19575  129C  009F               	movwf	31	;volatile
 19576  129D                     l6966:
 19577                           
 19578                           ;eusart.c: 88: RC1STA = 0x90;
 19579  129D  3090               	movlw	144
 19580  129E  009D               	movwf	29	;volatile
 19581  129F                     l6968:
 19582                           
 19583                           ;eusart.c: 91: TX1STA = 0x24;
 19584  129F  3024               	movlw	36
 19585  12A0  009E               	movwf	30	;volatile
 19586  12A1                     l6970:
 19587                           
 19588                           ;eusart.c: 94: SP1BRGL = 0x19;
 19589  12A1  3019               	movlw	25
 19590  12A2  009B               	movwf	27	;volatile
 19591  12A3                     l6972:
 19592                           
 19593                           ;eusart.c: 97: SP1BRGH = 0x00;
 19594  12A3  019C               	clrf	28	;volatile
 19595  12A4                     l6974:
 19596                           
 19597                           ;eusart.c: 101: eusartTxHead = 0;
 19598  12A4  0020               	movlb	0	; select bank0
 19599  12A5  01E4               	clrf	_eusartTxHead	;volatile
 19600  12A6                     l6976:
 19601                           
 19602                           ;eusart.c: 102: eusartTxTail = 0;
 19603  12A6  01E3               	clrf	_eusartTxTail	;volatile
 19604  12A7                     l6978:
 19605                           
 19606                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 19607  12A7  3040               	movlw	64
 19608  12A8  00A9               	movwf	??_EUSART_Initialize
 19609  12A9  0829               	movf	??_EUSART_Initialize,w
 19610  12AA  0021               	movlb	1	; select bank1
 19611  12AB  00DA               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
 19612  12AC                     l6980:
 19613                           
 19614                           ;eusart.c: 105: eusartRxHead = 0;
 19615  12AC  01BB               	clrf	_eusartRxHead^(0+128)	;volatile
 19616  12AD                     l6982:
 19617                           
 19618                           ;eusart.c: 106: eusartRxTail = 0;
 19619  12AD  01BA               	clrf	_eusartRxTail^(0+128)	;volatile
 19620  12AE                     l6984:
 19621                           
 19622                           ;eusart.c: 107: eusartRxCount = 0;
 19623  12AE  01B9               	clrf	_eusartRxCount^(0+128)	;volatile
 19624  12AF                     l6986:
 19625                           
 19626                           ;eusart.c: 110: PIE3bits.RCIE = 1;
 19627  12AF  002E               	movlb	14	; select bank14
 19628  12B0  1699               	bsf	25,5	;volatile
 19629  12B1                     l811:
 19630  12B1  0008               	return
 19631  12B2                     __end_of_EUSART_Initialize:
 19632                           
 19633                           	psect	text64
 19634  1F23                     __ptext64:	
 19635 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 19636 ;; Defined at:
 19637 ;;		line 220 in file "mcc_generated_files/eusart.c"
 19638 ;; Parameters:    Size  Location     Type
 19639 ;;  interruptHan    2    7[BANK0 ] PTR FTN()void 
 19640 ;;		 -> EUSART_Transmit_ISR(1), 
 19641 ;; Auto vars:     Size  Location     Type
 19642 ;;		None
 19643 ;; Return value:  Size  Location     Type
 19644 ;;                  1    wreg      void 
 19645 ;; Registers used:
 19646 ;;		wreg
 19647 ;; Tracked objects:
 19648 ;;		On entry : 0/0
 19649 ;;		On exit  : 0/0
 19650 ;;		Unchanged: 0/0
 19651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19652 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19655 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19656 ;;Total ram usage:        2 bytes
 19657 ;; Hardware stack levels used:    1
 19658 ;; Hardware stack levels required when called:    4
 19659 ;; This function calls:
 19660 ;;		Nothing
 19661 ;; This function is called by:
 19662 ;;		_EUSART_Initialize
 19663 ;; This function uses a non-reentrant model
 19664 ;;
 19665                           
 19666                           
 19667                           ;psect for function _EUSART_SetTxInterruptHandler
 19668  1F23                     _EUSART_SetTxInterruptHandler:
 19669  1F23                     l6606:	
 19670                           ;incstack = 0
 19671                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 19672                           
 19673                           
 19674                           ;eusart.c: 221: EUSART_TxDefaultInterruptHandler = interruptHandler;
 19675  1F23  0020               	movlb	0	; select bank0
 19676  1F24  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 19677  1F25  0022               	movlb	2	; select bank2
 19678  1F26  00E0               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
 19679  1F27  0020               	movlb	0	; select bank0
 19680  1F28  0827               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 19681  1F29  0022               	movlb	2	; select bank2
 19682  1F2A  00DF               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
 19683  1F2B                     l856:
 19684  1F2B  0008               	return
 19685  1F2C                     __end_of_EUSART_SetTxInterruptHandler:
 19686                           
 19687                           	psect	text65
 19688  1F1A                     __ptext65:	
 19689 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 19690 ;; Defined at:
 19691 ;;		line 224 in file "mcc_generated_files/eusart.c"
 19692 ;; Parameters:    Size  Location     Type
 19693 ;;  interruptHan    2    7[BANK0 ] PTR FTN()void 
 19694 ;;		 -> EUSART_Receive_ISR(1), 
 19695 ;; Auto vars:     Size  Location     Type
 19696 ;;		None
 19697 ;; Return value:  Size  Location     Type
 19698 ;;                  1    wreg      void 
 19699 ;; Registers used:
 19700 ;;		wreg
 19701 ;; Tracked objects:
 19702 ;;		On entry : 0/0
 19703 ;;		On exit  : 0/0
 19704 ;;		Unchanged: 0/0
 19705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19706 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19709 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19710 ;;Total ram usage:        2 bytes
 19711 ;; Hardware stack levels used:    1
 19712 ;; Hardware stack levels required when called:    4
 19713 ;; This function calls:
 19714 ;;		Nothing
 19715 ;; This function is called by:
 19716 ;;		_EUSART_Initialize
 19717 ;; This function uses a non-reentrant model
 19718 ;;
 19719                           
 19720                           
 19721                           ;psect for function _EUSART_SetRxInterruptHandler
 19722  1F1A                     _EUSART_SetRxInterruptHandler:
 19723  1F1A                     l6604:	
 19724                           ;incstack = 0
 19725                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 19726                           
 19727                           
 19728                           ;eusart.c: 225: EUSART_RxDefaultInterruptHandler = interruptHandler;
 19729  1F1A  0020               	movlb	0	; select bank0
 19730  1F1B  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 19731  1F1C  0022               	movlb	2	; select bank2
 19732  1F1D  00DE               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
 19733  1F1E  0020               	movlb	0	; select bank0
 19734  1F1F  0827               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 19735  1F20  0022               	movlb	2	; select bank2
 19736  1F21  00DD               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
 19737  1F22                     l859:
 19738  1F22  0008               	return
 19739  1F23                     __end_of_EUSART_SetRxInterruptHandler:
 19740                           
 19741                           	psect	text66
 19742  1FE9                     __ptext66:	
 19743 ;; *************** function _ADCC_Initialize *****************
 19744 ;; Defined at:
 19745 ;;		line 63 in file "mcc_generated_files/adcc.c"
 19746 ;; Parameters:    Size  Location     Type
 19747 ;;		None
 19748 ;; Auto vars:     Size  Location     Type
 19749 ;;		None
 19750 ;; Return value:  Size  Location     Type
 19751 ;;                  1    wreg      void 
 19752 ;; Registers used:
 19753 ;;		wreg, status,2
 19754 ;; Tracked objects:
 19755 ;;		On entry : 0/0
 19756 ;;		On exit  : 0/0
 19757 ;;		Unchanged: 0/0
 19758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19763 ;;Total ram usage:        0 bytes
 19764 ;; Hardware stack levels used:    1
 19765 ;; Hardware stack levels required when called:    4
 19766 ;; This function calls:
 19767 ;;		Nothing
 19768 ;; This function is called by:
 19769 ;;		_SYSTEM_Initialize
 19770 ;; This function uses a non-reentrant model
 19771 ;;
 19772                           
 19773                           
 19774                           ;psect for function _ADCC_Initialize
 19775  1FE9                     _ADCC_Initialize:
 19776  1FE9                     l6916:	
 19777                           ;incstack = 0
 19778                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 19779                           
 19780                           
 19781                           ;adcc.c: 67: ADLTHL = 0x00;
 19782  1FE9  0022               	movlb	2	; select bank2
 19783  1FEA  018E               	clrf	14	;volatile
 19784                           
 19785                           ;adcc.c: 69: ADLTHH = 0x00;
 19786  1FEB  018F               	clrf	15	;volatile
 19787                           
 19788                           ;adcc.c: 71: ADUTHL = 0x00;
 19789  1FEC  0190               	clrf	16	;volatile
 19790                           
 19791                           ;adcc.c: 73: ADUTHH = 0x00;
 19792  1FED  0191               	clrf	17	;volatile
 19793                           
 19794                           ;adcc.c: 75: ADSTPTL = 0x00;
 19795  1FEE  0192               	clrf	18	;volatile
 19796                           
 19797                           ;adcc.c: 77: ADSTPTH = 0x00;
 19798  1FEF  0193               	clrf	19	;volatile
 19799                           
 19800                           ;adcc.c: 79: ADRPT = 0x00;
 19801  1FF0  018D               	clrf	13	;volatile
 19802                           
 19803                           ;adcc.c: 81: ADPCH = 0x00;
 19804  1FF1  0021               	movlb	1	; select bank1
 19805  1FF2  019E               	clrf	30	;volatile
 19806                           
 19807                           ;adcc.c: 83: ADCAP = 0x00;
 19808  1FF3  019B               	clrf	27	;volatile
 19809                           
 19810                           ;adcc.c: 85: ADCON1 = 0x00;
 19811  1FF4  0194               	clrf	20	;volatile
 19812                           
 19813                           ;adcc.c: 87: ADCON2 = 0x00;
 19814  1FF5  0195               	clrf	21	;volatile
 19815                           
 19816                           ;adcc.c: 89: ADCON3 = 0x00;
 19817  1FF6  0196               	clrf	22	;volatile
 19818                           
 19819                           ;adcc.c: 91: ADSTAT = 0x00;
 19820  1FF7  0197               	clrf	23	;volatile
 19821                           
 19822                           ;adcc.c: 93: ADREF = 0x00;
 19823  1FF8  019A               	clrf	26	;volatile
 19824                           
 19825                           ;adcc.c: 95: ADACT = 0x00;
 19826  1FF9  0199               	clrf	25	;volatile
 19827                           
 19828                           ;adcc.c: 97: ADCLK = 0x00;
 19829  1FFA  0198               	clrf	24	;volatile
 19830  1FFB                     l6918:
 19831                           
 19832                           ;adcc.c: 99: ADCON0 = 0x80;
 19833  1FFB  3080               	movlw	128
 19834  1FFC  0093               	movwf	19	;volatile
 19835  1FFD                     l6920:
 19836                           
 19837                           ;adcc.c: 101: ADACQ = 0xFF;
 19838  1FFD  30FF               	movlw	255
 19839  1FFE  009D               	movwf	29	;volatile
 19840  1FFF                     l525:
 19841  1FFF  0008               	return
 19842  2000                     __end_of_ADCC_Initialize:
 19843                           
 19844                           	psect	text67
 19845  1712                     __ptext67:	
 19846 ;; *************** function _LCDinit *****************
 19847 ;; Defined at:
 19848 ;;		line 288 in file "main.c"
 19849 ;; Parameters:    Size  Location     Type
 19850 ;;		None
 19851 ;; Auto vars:     Size  Location     Type
 19852 ;;		None
 19853 ;; Return value:  Size  Location     Type
 19854 ;;                  1    wreg      void 
 19855 ;; Registers used:
 19856 ;;		wreg, status,2, status,0, pclath, cstack
 19857 ;; Tracked objects:
 19858 ;;		On entry : 0/0
 19859 ;;		On exit  : 0/0
 19860 ;;		Unchanged: 0/0
 19861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19865 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19866 ;;Total ram usage:        1 bytes
 19867 ;; Hardware stack levels used:    1
 19868 ;; Hardware stack levels required when called:    6
 19869 ;; This function calls:
 19870 ;;		_LCDsend
 19871 ;;		_LCDsend2x4
 19872 ;; This function is called by:
 19873 ;;		_main
 19874 ;; This function uses a non-reentrant model
 19875 ;;
 19876                           
 19877                           
 19878                           ;psect for function _LCDinit
 19879  1712                     _LCDinit:
 19880  1712                     l7214:	
 19881                           ;incstack = 0
 19882                           ; Regs used in _LCDinit: [wreg+status,2+status,0+pclath+cstack]
 19883                           
 19884                           
 19885                           ;main.c: 290: _delay((unsigned long)((50)*(1000000/4000.0)));
 19886  1712  3011               	movlw	17
 19887  1713  0020               	movlb	0	; select bank0
 19888  1714  00AF               	movwf	??_LCDinit
 19889  1715  303A               	movlw	58
 19890  1716                     u9597:
 19891  1716  0B89               	decfsz	9,f
 19892  1717  2F16               	goto	u9597
 19893  1718  0BAF               	decfsz	??_LCDinit,f
 19894  1719  2F16               	goto	u9597
 19895  171A  0000               	nop
 19896  171B                     l7216:
 19897                           
 19898                           ;main.c: 291: LCDsend(0x30);
 19899  171B  3030               	movlw	48
 19900  171C  3194  24DE  3197   	fcall	_LCDsend
 19901  171F                     l7218:
 19902                           
 19903                           ;main.c: 292: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19904  171F  3034               	movlw	52
 19905  1720  3194  24DE  3197   	fcall	_LCDsend
 19906  1723  3029               	movlw	41
 19907  1724                     u9607:
 19908  1724  0B89               	decfsz	9,f
 19909  1725  2F24               	goto	u9607
 19910  1726  3200               	nop2
 19911  1727                     l7220:
 19912  1727  3030               	movlw	48
 19913  1728  3194  24DE  3197   	fcall	_LCDsend
 19914  172B                     l7222:
 19915                           
 19916                           ;main.c: 293: _delay((unsigned long)((5)*(1000000/4000.0)));
 19917  172B  30FA               	movlw	250
 19918  172C                     u9617:
 19919  172C  3200               	nop2
 19920  172D  0B89               	decfsz	9,f
 19921  172E  2F2C               	goto	u9617
 19922                           
 19923                           ;main.c: 294: LCDsend(0x30);
 19924  172F  3030               	movlw	48
 19925  1730  3194  24DE  3197   	fcall	_LCDsend
 19926                           
 19927                           ;main.c: 295: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19928  1733  3034               	movlw	52
 19929  1734  3194  24DE  3197   	fcall	_LCDsend
 19930  1737                     l7224:
 19931  1737  3029               	movlw	41
 19932  1738                     u9627:
 19933  1738  0B89               	decfsz	9,f
 19934  1739  2F38               	goto	u9627
 19935  173A  3200               	nop2
 19936  173B                     l7226:
 19937  173B  3030               	movlw	48
 19938  173C  3194  24DE  3197   	fcall	_LCDsend
 19939                           
 19940                           ;main.c: 296: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19941  173F  3008               	movlw	8
 19942  1740                     u9637:
 19943  1740  0B89               	decfsz	9,f
 19944  1741  2F40               	goto	u9637
 19945  1742  0000               	nop
 19946  1743                     l7228:
 19947                           
 19948                           ;main.c: 297: LCDsend(0x30);
 19949  1743  3030               	movlw	48
 19950  1744  3194  24DE  3197   	fcall	_LCDsend
 19951  1747                     l7230:
 19952                           
 19953                           ;main.c: 298: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19954  1747  3034               	movlw	52
 19955  1748  3194  24DE  3197   	fcall	_LCDsend
 19956  174B  3029               	movlw	41
 19957  174C                     u9647:
 19958  174C  0B89               	decfsz	9,f
 19959  174D  2F4C               	goto	u9647
 19960  174E  3200               	nop2
 19961  174F                     l7232:
 19962  174F  3030               	movlw	48
 19963  1750  3194  24DE  3197   	fcall	_LCDsend
 19964  1753                     l7234:
 19965                           
 19966                           ;main.c: 299: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19967  1753  3008               	movlw	8
 19968  1754                     u9657:
 19969  1754  0B89               	decfsz	9,f
 19970  1755  2F54               	goto	u9657
 19971  1756  0000               	nop
 19972                           
 19973                           ;main.c: 300: LCDsend(0x20);
 19974  1757  3020               	movlw	32
 19975  1758  3194  24DE  3197   	fcall	_LCDsend
 19976                           
 19977                           ;main.c: 301: LCDsend(0x24); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x20);
 19978  175B  3024               	movlw	36
 19979  175C  3194  24DE  3197   	fcall	_LCDsend
 19980  175F                     l7236:
 19981  175F  3029               	movlw	41
 19982  1760                     u9667:
 19983  1760  0B89               	decfsz	9,f
 19984  1761  2F60               	goto	u9667
 19985  1762  3200               	nop2
 19986  1763                     l7238:
 19987  1763  3020               	movlw	32
 19988  1764  3194  24DE  3197   	fcall	_LCDsend
 19989                           
 19990                           ;main.c: 302: _delay((unsigned long)((5)*(1000000/4000.0)));
 19991  1767  30FA               	movlw	250
 19992  1768                     u9677:
 19993  1768  3200               	nop2
 19994  1769  0B89               	decfsz	9,f
 19995  176A  2F68               	goto	u9677
 19996  176B                     l7240:
 19997                           
 19998                           ;main.c: 304: LCDsend2x4(0x28, 0);
 19999  176B  0020               	movlb	0	; select bank0
 20000  176C  01A9               	clrf	LCDsend2x4@mode
 20001  176D  3028               	movlw	40
 20002  176E  3189  213F  3197   	fcall	_LCDsend2x4
 20003  1771                     l7242:
 20004                           
 20005                           ;main.c: 305: LCDsend2x4(0x06, 0);
 20006  1771  0020               	movlb	0	; select bank0
 20007  1772  01A9               	clrf	LCDsend2x4@mode
 20008  1773  3006               	movlw	6
 20009  1774  3189  213F  3197   	fcall	_LCDsend2x4
 20010  1777                     l7244:
 20011                           
 20012                           ;main.c: 306: LCDsend2x4(0x0f, 0);
 20013  1777  0020               	movlb	0	; select bank0
 20014  1778  01A9               	clrf	LCDsend2x4@mode
 20015  1779  300F               	movlw	15
 20016  177A  3189  213F  3197   	fcall	_LCDsend2x4
 20017  177D                     l7246:
 20018                           
 20019                           ;main.c: 307: LCDsend2x4(0x01, 0);
 20020  177D  0020               	movlb	0	; select bank0
 20021  177E  01A9               	clrf	LCDsend2x4@mode
 20022  177F  3001               	movlw	1
 20023  1780  3189  213F  3197   	fcall	_LCDsend2x4
 20024                           
 20025                           ;main.c: 308: _delay((unsigned long)((2)*(1000000/4000.0)));
 20026  1783  30A6               	movlw	166
 20027  1784                     u9687:
 20028  1784  0B89               	decfsz	9,f
 20029  1785  2F84               	goto	u9687
 20030  1786  3200               	nop2
 20031  1787                     l1231:
 20032  1787  0008               	return
 20033  1788                     __end_of_LCDinit:
 20034                           
 20035                           	psect	text68
 20036  093F                     __ptext68:	
 20037 ;; *************** function _LCDsend2x4 *****************
 20038 ;; Defined at:
 20039 ;;		line 265 in file "main.c"
 20040 ;; Parameters:    Size  Location     Type
 20041 ;;  c               1    wreg     unsigned char 
 20042 ;;  mode            1    9[BANK0 ] unsigned char 
 20043 ;; Auto vars:     Size  Location     Type
 20044 ;;  c               1   12[BANK0 ] unsigned char 
 20045 ;;  lc              1   14[BANK0 ] unsigned char 
 20046 ;;  hc              1   13[BANK0 ] unsigned char 
 20047 ;; Return value:  Size  Location     Type
 20048 ;;                  1    wreg      void 
 20049 ;; Registers used:
 20050 ;;		wreg, status,2, status,0, pclath, cstack
 20051 ;; Tracked objects:
 20052 ;;		On entry : 0/0
 20053 ;;		On exit  : 0/0
 20054 ;;		Unchanged: 0/0
 20055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20056 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20057 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20058 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20059 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20060 ;;Total ram usage:        6 bytes
 20061 ;; Hardware stack levels used:    1
 20062 ;; Hardware stack levels required when called:    5
 20063 ;; This function calls:
 20064 ;;		_WriteI2C
 20065 ;; This function is called by:
 20066 ;;		_LCDinit
 20067 ;;		_LCDcmd
 20068 ;;		_LCDchar
 20069 ;; This function uses a non-reentrant model
 20070 ;;
 20071                           
 20072                           
 20073                           ;psect for function _LCDsend2x4
 20074  093F                     _LCDsend2x4:
 20075                           
 20076                           ;incstack = 0
 20077                           ; Regs used in _LCDsend2x4: [wreg+status,2+status,0+pclath+cstack]
 20078                           ;LCDsend2x4@c stored from wreg
 20079  093F  0020               	movlb	0	; select bank0
 20080  0940  00AC               	movwf	LCDsend2x4@c
 20081  0941                     l6228:
 20082                           
 20083                           ;main.c: 267: unsigned char hc;;main.c: 268: unsigned char lc;;main.c: 270: hc = c & 0xf
      +                          0;
 20084  0941  082C               	movf	LCDsend2x4@c,w
 20085  0942  39F0               	andlw	240
 20086  0943  00AA               	movwf	??_LCDsend2x4
 20087  0944  082A               	movf	??_LCDsend2x4,w
 20088  0945  00AD               	movwf	LCDsend2x4@hc
 20089  0946                     l6230:
 20090                           
 20091                           ;main.c: 271: lc = (c << 4) & 0xf0;
 20092  0946  082C               	movf	LCDsend2x4@c,w
 20093  0947  00AA               	movwf	??_LCDsend2x4
 20094  0948  3003               	movlw	3
 20095  0949                     u6785:
 20096  0949  35AA               	lslf	??_LCDsend2x4,f
 20097  094A  3EFF               	addlw	-1
 20098  094B  1D03               	skipz
 20099  094C  2949               	goto	u6785
 20100  094D  352A               	lslf	??_LCDsend2x4,w
 20101  094E  39F0               	andlw	240
 20102  094F  00AB               	movwf	??_LCDsend2x4+1
 20103  0950  082B               	movf	??_LCDsend2x4+1,w
 20104  0951  00AE               	movwf	LCDsend2x4@lc
 20105  0952                     l6232:	
 20106                           ;main.c: 273: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20107                           
 20108  0952  0023               	movlb	3	; select bank3
 20109  0953  0C0F               	rrf	15,w	;volatile
 20110  0954  0C89               	rrf	9,f
 20111  0955  3901               	andlw	1
 20112  0956  0020               	movlb	0	; select bank0
 20113  0957  00AA               	movwf	??_LCDsend2x4
 20114  0958  0023               	movlb	3	; select bank3
 20115  0959  0811               	movf	17,w	;volatile
 20116  095A  391F               	andlw	31
 20117  095B  0020               	movlb	0	; select bank0
 20118  095C  042A               	iorwf	??_LCDsend2x4,w
 20119  095D  1D03               	btfss	3,2
 20120  095E  2960               	goto	u6791
 20121  095F  2961               	goto	u6790
 20122  0960                     u6791:
 20123  0960  2952               	goto	l6232
 20124  0961                     u6790:
 20125  0961                     l1197:
 20126                           
 20127                           ;main.c: 274: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 20128  0961  0023               	movlb	3	; select bank3
 20129  0962  1411               	bsf	17,0	;volatile
 20130  0963                     l1198:
 20131  0963  1811               	btfsc	17,0	;volatile
 20132  0964  2966               	goto	u6801
 20133  0965  2967               	goto	u6800
 20134  0966                     u6801:
 20135  0966  2963               	goto	l1198
 20136  0967                     u6800:
 20137  0967                     l6234:
 20138  0967  0023               	movlb	3	; select bank3
 20139  0968  0C0F               	rrf	15,w	;volatile
 20140  0969  0C89               	rrf	9,f
 20141  096A  3901               	andlw	1
 20142  096B  0020               	movlb	0	; select bank0
 20143  096C  00AA               	movwf	??_LCDsend2x4
 20144  096D  0023               	movlb	3	; select bank3
 20145  096E  0811               	movf	17,w	;volatile
 20146  096F  391F               	andlw	31
 20147  0970  0020               	movlb	0	; select bank0
 20148  0971  042A               	iorwf	??_LCDsend2x4,w
 20149  0972  1D03               	btfss	3,2
 20150  0973  2975               	goto	u6811
 20151  0974  2976               	goto	u6810
 20152  0975                     u6811:
 20153  0975  2967               	goto	l6234
 20154  0976                     u6810:
 20155  0976                     l6236:
 20156                           
 20157                           ;main.c: 275: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20158  0976  304E               	movlw	78
 20159  0977  3195  2531  3189   	fcall	_WriteI2C
 20160  097A                     l6238:
 20161  097A  0023               	movlb	3	; select bank3
 20162  097B  0C0F               	rrf	15,w	;volatile
 20163  097C  0C89               	rrf	9,f
 20164  097D  3901               	andlw	1
 20165  097E  0020               	movlb	0	; select bank0
 20166  097F  00AA               	movwf	??_LCDsend2x4
 20167  0980  0023               	movlb	3	; select bank3
 20168  0981  0811               	movf	17,w	;volatile
 20169  0982  391F               	andlw	31
 20170  0983  0020               	movlb	0	; select bank0
 20171  0984  042A               	iorwf	??_LCDsend2x4,w
 20172  0985  1D03               	btfss	3,2
 20173  0986  2988               	goto	u6821
 20174  0987  2989               	goto	u6820
 20175  0988                     u6821:
 20176  0988  297A               	goto	l6238
 20177  0989                     u6820:
 20178  0989                     l6240:
 20179                           
 20180                           ;main.c: 276: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20181  0989  082D               	movf	LCDsend2x4@hc,w
 20182  098A  0429               	iorwf	LCDsend2x4@mode,w
 20183  098B  3808               	iorlw	8
 20184  098C  3195  2531  3189   	fcall	_WriteI2C
 20185  098F                     l6242:
 20186  098F  0023               	movlb	3	; select bank3
 20187  0990  0C0F               	rrf	15,w	;volatile
 20188  0991  0C89               	rrf	9,f
 20189  0992  3901               	andlw	1
 20190  0993  0020               	movlb	0	; select bank0
 20191  0994  00AA               	movwf	??_LCDsend2x4
 20192  0995  0023               	movlb	3	; select bank3
 20193  0996  0811               	movf	17,w	;volatile
 20194  0997  391F               	andlw	31
 20195  0998  0020               	movlb	0	; select bank0
 20196  0999  042A               	iorwf	??_LCDsend2x4,w
 20197  099A  1D03               	btfss	3,2
 20198  099B  299D               	goto	u6831
 20199  099C  299E               	goto	u6830
 20200  099D                     u6831:
 20201  099D  298F               	goto	l6242
 20202  099E                     u6830:
 20203  099E                     l6244:
 20204                           
 20205                           ;main.c: 277: WriteI2C(hc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 20206  099E  082D               	movf	LCDsend2x4@hc,w
 20207  099F  0429               	iorwf	LCDsend2x4@mode,w
 20208  09A0  380C               	iorlw	12
 20209  09A1  3195  2531  3189   	fcall	_WriteI2C
 20210  09A4                     l6246:
 20211  09A4  0023               	movlb	3	; select bank3
 20212  09A5  0C0F               	rrf	15,w	;volatile
 20213  09A6  0C89               	rrf	9,f
 20214  09A7  3901               	andlw	1
 20215  09A8  0020               	movlb	0	; select bank0
 20216  09A9  00AA               	movwf	??_LCDsend2x4
 20217  09AA  0023               	movlb	3	; select bank3
 20218  09AB  0811               	movf	17,w	;volatile
 20219  09AC  391F               	andlw	31
 20220  09AD  0020               	movlb	0	; select bank0
 20221  09AE  042A               	iorwf	??_LCDsend2x4,w
 20222  09AF  1D03               	btfss	3,2
 20223  09B0  29B2               	goto	u6841
 20224  09B1  29B3               	goto	u6840
 20225  09B2                     u6841:
 20226  09B2  29A4               	goto	l6246
 20227  09B3                     u6840:
 20228  09B3                     l1212:
 20229  09B3                     l6248:	
 20230                           ;main.c: 278: _delay((unsigned long)((1)*(1000000/4000000.0)));
 20231                           
 20232                           
 20233                           ;main.c: 279: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20234  09B3  0020               	movlb	0	; select bank0
 20235  09B4  082D               	movf	LCDsend2x4@hc,w
 20236  09B5  0429               	iorwf	LCDsend2x4@mode,w
 20237  09B6  3808               	iorlw	8
 20238  09B7  3195  2531  3189   	fcall	_WriteI2C
 20239  09BA                     l6250:
 20240  09BA  0023               	movlb	3	; select bank3
 20241  09BB  0C0F               	rrf	15,w	;volatile
 20242  09BC  0C89               	rrf	9,f
 20243  09BD  3901               	andlw	1
 20244  09BE  0020               	movlb	0	; select bank0
 20245  09BF  00AA               	movwf	??_LCDsend2x4
 20246  09C0  0023               	movlb	3	; select bank3
 20247  09C1  0811               	movf	17,w	;volatile
 20248  09C2  391F               	andlw	31
 20249  09C3  0020               	movlb	0	; select bank0
 20250  09C4  042A               	iorwf	??_LCDsend2x4,w
 20251  09C5  1D03               	btfss	3,2
 20252  09C6  29C8               	goto	u6851
 20253  09C7  29C9               	goto	u6850
 20254  09C8                     u6851:
 20255  09C8  29BA               	goto	l6250
 20256  09C9                     u6850:
 20257  09C9                     l6252:
 20258                           
 20259                           ;main.c: 280: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20260  09C9  082E               	movf	LCDsend2x4@lc,w
 20261  09CA  0429               	iorwf	LCDsend2x4@mode,w
 20262  09CB  3808               	iorlw	8
 20263  09CC  3195  2531  3189   	fcall	_WriteI2C
 20264  09CF                     l6254:
 20265  09CF  0023               	movlb	3	; select bank3
 20266  09D0  0C0F               	rrf	15,w	;volatile
 20267  09D1  0C89               	rrf	9,f
 20268  09D2  3901               	andlw	1
 20269  09D3  0020               	movlb	0	; select bank0
 20270  09D4  00AA               	movwf	??_LCDsend2x4
 20271  09D5  0023               	movlb	3	; select bank3
 20272  09D6  0811               	movf	17,w	;volatile
 20273  09D7  391F               	andlw	31
 20274  09D8  0020               	movlb	0	; select bank0
 20275  09D9  042A               	iorwf	??_LCDsend2x4,w
 20276  09DA  1D03               	btfss	3,2
 20277  09DB  29DD               	goto	u6861
 20278  09DC  29DE               	goto	u6860
 20279  09DD                     u6861:
 20280  09DD  29CF               	goto	l6254
 20281  09DE                     u6860:
 20282  09DE                     l6256:
 20283                           
 20284                           ;main.c: 281: WriteI2C(lc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 20285  09DE  082E               	movf	LCDsend2x4@lc,w
 20286  09DF  0429               	iorwf	LCDsend2x4@mode,w
 20287  09E0  380C               	iorlw	12
 20288  09E1  3195  2531  3189   	fcall	_WriteI2C
 20289  09E4                     l6258:
 20290  09E4  0023               	movlb	3	; select bank3
 20291  09E5  0C0F               	rrf	15,w	;volatile
 20292  09E6  0C89               	rrf	9,f
 20293  09E7  3901               	andlw	1
 20294  09E8  0020               	movlb	0	; select bank0
 20295  09E9  00AA               	movwf	??_LCDsend2x4
 20296  09EA  0023               	movlb	3	; select bank3
 20297  09EB  0811               	movf	17,w	;volatile
 20298  09EC  391F               	andlw	31
 20299  09ED  0020               	movlb	0	; select bank0
 20300  09EE  042A               	iorwf	??_LCDsend2x4,w
 20301  09EF  1D03               	btfss	3,2
 20302  09F0  29F2               	goto	u6871
 20303  09F1  29F3               	goto	u6870
 20304  09F2                     u6871:
 20305  09F2  29E4               	goto	l6258
 20306  09F3                     u6870:
 20307  09F3                     l1221:
 20308  09F3                     l6260:	
 20309                           ;main.c: 282: _delay((unsigned long)((1)*(1000000/4000000.0)));
 20310                           
 20311                           
 20312                           ;main.c: 283: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 20313  09F3  0020               	movlb	0	; select bank0
 20314  09F4  082E               	movf	LCDsend2x4@lc,w
 20315  09F5  0429               	iorwf	LCDsend2x4@mode,w
 20316  09F6  3808               	iorlw	8
 20317  09F7  3195  2531  3189   	fcall	_WriteI2C
 20318  09FA                     l6262:
 20319  09FA  0023               	movlb	3	; select bank3
 20320  09FB  0C0F               	rrf	15,w	;volatile
 20321  09FC  0C89               	rrf	9,f
 20322  09FD  3901               	andlw	1
 20323  09FE  0020               	movlb	0	; select bank0
 20324  09FF  00AA               	movwf	??_LCDsend2x4
 20325  0A00  0023               	movlb	3	; select bank3
 20326  0A01  0811               	movf	17,w	;volatile
 20327  0A02  391F               	andlw	31
 20328  0A03  0020               	movlb	0	; select bank0
 20329  0A04  042A               	iorwf	??_LCDsend2x4,w
 20330  0A05  1D03               	btfss	3,2
 20331  0A06  2A08               	goto	u6881
 20332  0A07  2A09               	goto	u6880
 20333  0A08                     u6881:
 20334  0A08  29FA               	goto	l6262
 20335  0A09                     u6880:
 20336  0A09                     l1224:
 20337                           
 20338                           ;main.c: 284: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 20339  0A09  0023               	movlb	3	; select bank3
 20340  0A0A  1511               	bsf	17,2	;volatile
 20341  0A0B                     l1225:
 20342  0A0B  1911               	btfsc	17,2	;volatile
 20343  0A0C  2A0E               	goto	u6891
 20344  0A0D  2A0F               	goto	u6890
 20345  0A0E                     u6891:
 20346  0A0E  2A0B               	goto	l1225
 20347  0A0F                     u6890:
 20348  0A0F                     l6264:
 20349                           
 20350                           ;main.c: 285: _delay((unsigned long)((50)*(1000000/4000000.0)));
 20351  0A0F  3004               	movlw	4
 20352  0A10                     u9697:
 20353  0A10  0B89               	decfsz	9,f
 20354  0A11  2A10               	goto	u9697
 20355  0A12                     l1228:
 20356  0A12  0008               	return
 20357  0A13                     __end_of_LCDsend2x4:
 20358                           
 20359                           	psect	text69
 20360  14DE                     __ptext69:	
 20361 ;; *************** function _LCDsend *****************
 20362 ;; Defined at:
 20363 ;;		line 226 in file "main.c"
 20364 ;; Parameters:    Size  Location     Type
 20365 ;;  c               1    wreg     unsigned char 
 20366 ;; Auto vars:     Size  Location     Type
 20367 ;;  c               1   10[BANK0 ] unsigned char 
 20368 ;; Return value:  Size  Location     Type
 20369 ;;                  1    wreg      void 
 20370 ;; Registers used:
 20371 ;;		wreg, status,2, status,0, pclath, cstack
 20372 ;; Tracked objects:
 20373 ;;		On entry : 0/0
 20374 ;;		On exit  : 0/0
 20375 ;;		Unchanged: 0/0
 20376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20380 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20381 ;;Total ram usage:        2 bytes
 20382 ;; Hardware stack levels used:    1
 20383 ;; Hardware stack levels required when called:    5
 20384 ;; This function calls:
 20385 ;;		_WriteI2C
 20386 ;; This function is called by:
 20387 ;;		_LCDinit
 20388 ;; This function uses a non-reentrant model
 20389 ;;
 20390                           
 20391                           
 20392                           ;psect for function _LCDsend
 20393  14DE                     _LCDsend:
 20394                           
 20395                           ;incstack = 0
 20396                           ; Regs used in _LCDsend: [wreg+status,2+status,0+pclath+cstack]
 20397                           ;LCDsend@c stored from wreg
 20398  14DE  0020               	movlb	0	; select bank0
 20399  14DF  00AA               	movwf	LCDsend@c
 20400  14E0                     l7026:
 20401  14E0                     l7028:	
 20402                           ;main.c: 228: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20403                           
 20404  14E0  0023               	movlb	3	; select bank3
 20405  14E1  0C0F               	rrf	15,w	;volatile
 20406  14E2  0C89               	rrf	9,f
 20407  14E3  3901               	andlw	1
 20408  14E4  0020               	movlb	0	; select bank0
 20409  14E5  00A9               	movwf	??_LCDsend
 20410  14E6  0023               	movlb	3	; select bank3
 20411  14E7  0811               	movf	17,w	;volatile
 20412  14E8  391F               	andlw	31
 20413  14E9  0020               	movlb	0	; select bank0
 20414  14EA  0429               	iorwf	??_LCDsend,w
 20415  14EB  1D03               	btfss	3,2
 20416  14EC  2CEE               	goto	u8191
 20417  14ED  2CEF               	goto	u8190
 20418  14EE                     u8191:
 20419  14EE  2CE0               	goto	l7028
 20420  14EF                     u8190:
 20421  14EF                     l1095:
 20422                           
 20423                           ;main.c: 229: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 20424  14EF  0023               	movlb	3	; select bank3
 20425  14F0  1411               	bsf	17,0	;volatile
 20426  14F1                     l1096:
 20427  14F1  1811               	btfsc	17,0	;volatile
 20428  14F2  2CF4               	goto	u8201
 20429  14F3  2CF5               	goto	u8200
 20430  14F4                     u8201:
 20431  14F4  2CF1               	goto	l1096
 20432  14F5                     u8200:
 20433  14F5                     l7030:
 20434  14F5  0023               	movlb	3	; select bank3
 20435  14F6  0C0F               	rrf	15,w	;volatile
 20436  14F7  0C89               	rrf	9,f
 20437  14F8  3901               	andlw	1
 20438  14F9  0020               	movlb	0	; select bank0
 20439  14FA  00A9               	movwf	??_LCDsend
 20440  14FB  0023               	movlb	3	; select bank3
 20441  14FC  0811               	movf	17,w	;volatile
 20442  14FD  391F               	andlw	31
 20443  14FE  0020               	movlb	0	; select bank0
 20444  14FF  0429               	iorwf	??_LCDsend,w
 20445  1500  1D03               	btfss	3,2
 20446  1501  2D03               	goto	u8211
 20447  1502  2D04               	goto	u8210
 20448  1503                     u8211:
 20449  1503  2CF5               	goto	l7030
 20450  1504                     u8210:
 20451  1504                     l7032:
 20452                           
 20453                           ;main.c: 230: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20454  1504  304E               	movlw	78
 20455  1505  3195  2531  3194   	fcall	_WriteI2C
 20456  1508                     l7034:
 20457  1508  0023               	movlb	3	; select bank3
 20458  1509  0C0F               	rrf	15,w	;volatile
 20459  150A  0C89               	rrf	9,f
 20460  150B  3901               	andlw	1
 20461  150C  0020               	movlb	0	; select bank0
 20462  150D  00A9               	movwf	??_LCDsend
 20463  150E  0023               	movlb	3	; select bank3
 20464  150F  0811               	movf	17,w	;volatile
 20465  1510  391F               	andlw	31
 20466  1511  0020               	movlb	0	; select bank0
 20467  1512  0429               	iorwf	??_LCDsend,w
 20468  1513  1D03               	btfss	3,2
 20469  1514  2D16               	goto	u8221
 20470  1515  2D17               	goto	u8220
 20471  1516                     u8221:
 20472  1516  2D08               	goto	l7034
 20473  1517                     u8220:
 20474  1517                     l7036:
 20475                           
 20476                           ;main.c: 231: WriteI2C(c); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 20477  1517  082A               	movf	LCDsend@c,w
 20478  1518  3195  2531  3194   	fcall	_WriteI2C
 20479  151B                     l7038:
 20480  151B  0023               	movlb	3	; select bank3
 20481  151C  0C0F               	rrf	15,w	;volatile
 20482  151D  0C89               	rrf	9,f
 20483  151E  3901               	andlw	1
 20484  151F  0020               	movlb	0	; select bank0
 20485  1520  00A9               	movwf	??_LCDsend
 20486  1521  0023               	movlb	3	; select bank3
 20487  1522  0811               	movf	17,w	;volatile
 20488  1523  391F               	andlw	31
 20489  1524  0020               	movlb	0	; select bank0
 20490  1525  0429               	iorwf	??_LCDsend,w
 20491  1526  1D03               	btfss	3,2
 20492  1527  2D29               	goto	u8231
 20493  1528  2D2A               	goto	u8230
 20494  1529                     u8231:
 20495  1529  2D1B               	goto	l7038
 20496  152A                     u8230:
 20497  152A                     l1107:
 20498                           
 20499                           ;main.c: 232: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 20500  152A  0023               	movlb	3	; select bank3
 20501  152B  1511               	bsf	17,2	;volatile
 20502  152C                     l1108:
 20503  152C  1911               	btfsc	17,2	;volatile
 20504  152D  2D2F               	goto	u8241
 20505  152E  2D30               	goto	u8240
 20506  152F                     u8241:
 20507  152F  2D2C               	goto	l1108
 20508  1530                     u8240:
 20509  1530                     l1111:
 20510  1530  0008               	return
 20511  1531                     __end_of_LCDsend:
 20512                           
 20513                           	psect	text70
 20514  1531                     __ptext70:	
 20515 ;; *************** function _WriteI2C *****************
 20516 ;; Defined at:
 20517 ;;		line 47 in file "I2C/i2c.c"
 20518 ;; Parameters:    Size  Location     Type
 20519 ;;  data_out        1    wreg     unsigned char 
 20520 ;; Auto vars:     Size  Location     Type
 20521 ;;  data_out        1    8[BANK0 ] unsigned char 
 20522 ;; Return value:  Size  Location     Type
 20523 ;;                  1    wreg      char 
 20524 ;; Registers used:
 20525 ;;		wreg, status,2, status,0
 20526 ;; Tracked objects:
 20527 ;;		On entry : 0/0
 20528 ;;		On exit  : 0/0
 20529 ;;		Unchanged: 0/0
 20530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20534 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20535 ;;Total ram usage:        2 bytes
 20536 ;; Hardware stack levels used:    1
 20537 ;; Hardware stack levels required when called:    4
 20538 ;; This function calls:
 20539 ;;		Nothing
 20540 ;; This function is called by:
 20541 ;;		_tsttc
 20542 ;;		_LCDsend
 20543 ;;		_LCDsend2x4
 20544 ;;		_LCDrecv
 20545 ;; This function uses a non-reentrant model
 20546 ;;
 20547                           
 20548                           
 20549                           ;psect for function _WriteI2C
 20550  1531                     _WriteI2C:
 20551                           
 20552                           ;incstack = 0
 20553                           ; Regs used in _WriteI2C: [wreg+status,2+status,0]
 20554                           ;WriteI2C@data_out stored from wreg
 20555  1531  0020               	movlb	0	; select bank0
 20556  1532  00A8               	movwf	WriteI2C@data_out
 20557  1533                     l6198:
 20558                           
 20559                           ;i2c.c: 49: SSP1BUF = data_out;
 20560  1533  0828               	movf	WriteI2C@data_out,w
 20561  1534  0023               	movlb	3	; select bank3
 20562  1535  008C               	movwf	12	;volatile
 20563  1536                     l6200:
 20564                           
 20565                           ;i2c.c: 50: if ( SSP1CON1bits.WCOL )
 20566  1536  1F90               	btfss	16,7	;volatile
 20567  1537  2D39               	goto	u6691
 20568  1538  2D3A               	goto	u6690
 20569  1539                     u6691:
 20570  1539  2D3B               	goto	l6206
 20571  153A                     u6690:
 20572  153A  2D8A               	goto	l30
 20573  153B                     l6206:
 20574                           
 20575                           ;i2c.c: 52: else;i2c.c: 53: {;i2c.c: 54: if( ((SSP1CON1&0x0F)!=0x08) && ((SSP1CON1&0x0F)
      +                          !=0x0B) )
 20576  153B  300F               	movlw	15
 20577  153C  0510               	andwf	16,w	;volatile
 20578  153D  0020               	movlb	0	; select bank0
 20579  153E  00A7               	movwf	??_WriteI2C
 20580  153F  3008               	movlw	8
 20581  1540  0627               	xorwf	??_WriteI2C,w
 20582  1541  1903               	btfsc	3,2
 20583  1542  2D44               	goto	u6701
 20584  1543  2D45               	goto	u6700
 20585  1544                     u6701:
 20586  1544  2D5E               	goto	l6218
 20587  1545                     u6700:
 20588  1545                     l6208:
 20589  1545  300F               	movlw	15
 20590  1546  0023               	movlb	3	; select bank3
 20591  1547  0510               	andwf	16,w	;volatile
 20592  1548  0020               	movlb	0	; select bank0
 20593  1549  00A7               	movwf	??_WriteI2C
 20594  154A  300B               	movlw	11
 20595  154B  0627               	xorwf	??_WriteI2C,w
 20596  154C  1903               	btfsc	3,2
 20597  154D  2D4F               	goto	u6711
 20598  154E  2D50               	goto	u6710
 20599  154F                     u6711:
 20600  154F  2D5E               	goto	l6218
 20601  1550                     u6710:
 20602  1550                     l6210:
 20603                           
 20604                           ;i2c.c: 55: {;i2c.c: 56: SSP1CON1bits.CKP = 1;
 20605  1550  0023               	movlb	3	; select bank3
 20606  1551  1610               	bsf	16,4	;volatile
 20607  1552                     l33:	
 20608                           ;i2c.c: 57: while ( !PIR3bits.SSP1IF );
 20609                           
 20610  1552  002E               	movlb	14	; select bank14
 20611  1553  1C0F               	btfss	15,0	;volatile
 20612  1554  2D56               	goto	u6721
 20613  1555  2D57               	goto	u6720
 20614  1556                     u6721:
 20615  1556  2D52               	goto	l33
 20616  1557                     u6720:
 20617  1557                     l35:
 20618                           
 20619                           ;i2c.c: 59: if ( ( !SSP1STATbits.R_W ) && ( !SSP1STATbits.BF ) )
 20620  1557  0023               	movlb	3	; select bank3
 20621  1558  190F               	btfsc	15,2	;volatile
 20622  1559  2D5B               	goto	u6731
 20623  155A  2D5C               	goto	u6730
 20624  155B                     u6731:
 20625  155B  2D8A               	goto	l30
 20626  155C                     u6730:
 20627  155C                     l6212:
 20628  155C  080F               	movf	15,w	;volatile
 20629  155D  2D8A               	goto	l30
 20630  155E                     l6218:
 20631                           
 20632                           ;i2c.c: 68: else if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 20633  155E  300F               	movlw	15
 20634  155F  0023               	movlb	3	; select bank3
 20635  1560  0510               	andwf	16,w	;volatile
 20636  1561  0020               	movlb	0	; select bank0
 20637  1562  00A7               	movwf	??_WriteI2C
 20638  1563  3008               	movlw	8
 20639  1564  0627               	xorwf	??_WriteI2C,w
 20640  1565  1903               	btfsc	3,2
 20641  1566  2D68               	goto	u6741
 20642  1567  2D69               	goto	u6740
 20643  1568                     u6741:
 20644  1568  2D74               	goto	l42
 20645  1569                     u6740:
 20646  1569                     l6220:
 20647  1569  300F               	movlw	15
 20648  156A  0023               	movlb	3	; select bank3
 20649  156B  0510               	andwf	16,w	;volatile
 20650  156C  0020               	movlb	0	; select bank0
 20651  156D  00A7               	movwf	??_WriteI2C
 20652  156E  300B               	movlw	11
 20653  156F  0627               	xorwf	??_WriteI2C,w
 20654  1570  1D03               	btfss	3,2
 20655  1571  2D73               	goto	u6751
 20656  1572  2D74               	goto	u6750
 20657  1573                     u6751:
 20658  1573  2D8A               	goto	l30
 20659  1574                     u6750:
 20660  1574                     l42:
 20661  1574  0023               	movlb	3	; select bank3
 20662  1575  180F               	btfsc	15,0	;volatile
 20663  1576  2D78               	goto	u6761
 20664  1577  2D79               	goto	u6760
 20665  1578                     u6761:
 20666  1578  2D74               	goto	l42
 20667  1579                     u6760:
 20668  1579                     l6222:
 20669  1579  0023               	movlb	3	; select bank3
 20670  157A  0C0F               	rrf	15,w	;volatile
 20671  157B  0C89               	rrf	9,f
 20672  157C  3901               	andlw	1
 20673  157D  0020               	movlb	0	; select bank0
 20674  157E  00A7               	movwf	??_WriteI2C
 20675  157F  0023               	movlb	3	; select bank3
 20676  1580  0811               	movf	17,w	;volatile
 20677  1581  391F               	andlw	31
 20678  1582  0020               	movlb	0	; select bank0
 20679  1583  0427               	iorwf	??_WriteI2C,w
 20680  1584  1D03               	btfss	3,2
 20681  1585  2D87               	goto	u6771
 20682  1586  2D88               	goto	u6770
 20683  1587                     u6771:
 20684  1587  2D79               	goto	l6222
 20685  1588                     u6770:
 20686  1588                     l47:
 20687                           
 20688                           ;i2c.c: 72: if ( SSP1CON2bits.ACKSTAT )
 20689  1588  0023               	movlb	3	; select bank3
 20690  1589  0811               	movf	17,w	;volatile
 20691  158A                     l30:
 20692  158A  0008               	return
 20693  158B                     __end_of_WriteI2C:
 20694                           
 20695                           	psect	text71
 20696  1ED3                     __ptext71:	
 20697 ;; *************** function _EUSART_is_rx_ready *****************
 20698 ;; Defined at:
 20699 ;;		line 118 in file "mcc_generated_files/eusart.c"
 20700 ;; Parameters:    Size  Location     Type
 20701 ;;		None
 20702 ;; Auto vars:     Size  Location     Type
 20703 ;;		None
 20704 ;; Return value:  Size  Location     Type
 20705 ;;                  1    wreg      unsigned char 
 20706 ;; Registers used:
 20707 ;;		wreg
 20708 ;; Tracked objects:
 20709 ;;		On entry : 0/0
 20710 ;;		On exit  : 0/0
 20711 ;;		Unchanged: 0/0
 20712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20717 ;;Total ram usage:        0 bytes
 20718 ;; Hardware stack levels used:    1
 20719 ;; Hardware stack levels required when called:    4
 20720 ;; This function calls:
 20721 ;;		Nothing
 20722 ;; This function is called by:
 20723 ;;		_main
 20724 ;; This function uses a non-reentrant model
 20725 ;;
 20726                           
 20727                           
 20728                           ;psect for function _EUSART_is_rx_ready
 20729  1ED3                     _EUSART_is_rx_ready:
 20730  1ED3                     l7140:	
 20731                           ;incstack = 0
 20732                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 20733                           
 20734                           
 20735                           ;eusart.c: 120: return eusartRxCount;
 20736  1ED3  0021               	movlb	1	; select bank1
 20737  1ED4  0839               	movf	_eusartRxCount^(0+128),w	;volatile
 20738  1ED5                     l817:
 20739  1ED5  0008               	return
 20740  1ED6                     __end_of_EUSART_is_rx_ready:
 20741                           
 20742                           	psect	intentry
 20743  0004                     __pintentry:	
 20744 ;; *************** function _INTERRUPT_InterruptManager *****************
 20745 ;; Defined at:
 20746 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 20747 ;; Parameters:    Size  Location     Type
 20748 ;;		None
 20749 ;; Auto vars:     Size  Location     Type
 20750 ;;		None
 20751 ;; Return value:  Size  Location     Type
 20752 ;;                  1    wreg      void 
 20753 ;; Registers used:
 20754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20755 ;; Tracked objects:
 20756 ;;		On entry : 0/0
 20757 ;;		On exit  : 0/0
 20758 ;;		Unchanged: 0/0
 20759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20764 ;;Total ram usage:        0 bytes
 20765 ;; Hardware stack levels used:    1
 20766 ;; Hardware stack levels required when called:    3
 20767 ;; This function calls:
 20768 ;;		Absolute function
 20769 ;;		_EUSART_Receive_ISR
 20770 ;;		_EUSART_Transmit_ISR
 20771 ;;		_INT_ISR
 20772 ;;		_TMR1_ISR
 20773 ;; This function is called by:
 20774 ;;		Interrupt level 1
 20775 ;; This function uses a non-reentrant model
 20776 ;;
 20777                           
 20778  0004                     _INTERRUPT_InterruptManager:
 20779                           
 20780                           ;incstack = 0
 20781  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 20782                           
 20783                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 20784  0005  3180               	pagesel	$
 20785  0006                     i1l5992:
 20786                           
 20787                           ;interrupt_manager.c: 55: if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
 20788  0006  002E               	movlb	14	; select bank14
 20789  0007  1C16               	btfss	22,0	;volatile
 20790  0008  280A               	goto	u636_21
 20791  0009  280B               	goto	u636_20
 20792  000A                     u636_21:
 20793  000A  2813               	goto	i1l364
 20794  000B                     u636_20:
 20795  000B                     i1l5994:
 20796  000B  1C0C               	btfss	12,0	;volatile
 20797  000C  280E               	goto	u637_21
 20798  000D  280F               	goto	u637_20
 20799  000E                     u637_21:
 20800  000E  2813               	goto	i1l364
 20801  000F                     u637_20:
 20802  000F                     i1l5996:
 20803                           
 20804                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: INT_ISR();
 20805  000F  319E  26EE  3180   	fcall	_INT_ISR
 20806                           
 20807                           ;interrupt_manager.c: 58: }
 20808  0012  2850               	goto	i1l378
 20809  0013                     i1l364:
 20810                           
 20811                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
 20812  0013  1F0B               	btfss	11,6	;volatile
 20813  0014  2816               	goto	u638_21
 20814  0015  2817               	goto	u638_20
 20815  0016                     u638_21:
 20816  0016  2850               	goto	i1l378
 20817  0017                     u638_20:
 20818  0017                     i1l5998:
 20819                           
 20820                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: if(PIE3bits.TXIE == 1 && PIR3bits.T
      +                          XIF == 1)
 20821  0017  1E19               	btfss	25,4	;volatile
 20822  0018  281A               	goto	u639_21
 20823  0019  281B               	goto	u639_20
 20824  001A                     u639_21:
 20825  001A  2826               	goto	i1l367
 20826  001B                     u639_20:
 20827  001B                     i1l6000:
 20828  001B  1E0F               	btfss	15,4	;volatile
 20829  001C  281E               	goto	u640_21
 20830  001D  281F               	goto	u640_20
 20831  001E                     u640_21:
 20832  001E  2826               	goto	i1l367
 20833  001F                     u640_20:
 20834  001F                     i1l6002:
 20835                           
 20836                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 63: EUSART_TxDefaultInterruptHandler();
 20837  001F  0022               	movlb	2	; select bank2
 20838  0020  0860               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
 20839  0021  008A               	movwf	10
 20840  0022  085F               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
 20841  0023  000A               	callw
 20842  0024  3180               	pagesel	$
 20843                           
 20844                           ;interrupt_manager.c: 64: }
 20845  0025  2850               	goto	i1l378
 20846  0026                     i1l367:
 20847                           
 20848                           ;interrupt_manager.c: 65: else if(PIE3bits.RCIE == 1 && PIR3bits.RCIF == 1)
 20849  0026  1E99               	btfss	25,5	;volatile
 20850  0027  2829               	goto	u641_21
 20851  0028  282A               	goto	u641_20
 20852  0029                     u641_21:
 20853  0029  2835               	goto	i1l369
 20854  002A                     u641_20:
 20855  002A                     i1l6004:
 20856  002A  1E8F               	btfss	15,5	;volatile
 20857  002B  282D               	goto	u642_21
 20858  002C  282E               	goto	u642_20
 20859  002D                     u642_21:
 20860  002D  2835               	goto	i1l369
 20861  002E                     u642_20:
 20862  002E                     i1l6006:
 20863                           
 20864                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
 20865  002E  0022               	movlb	2	; select bank2
 20866  002F  085E               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 20867  0030  008A               	movwf	10
 20868  0031  085D               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 20869  0032  000A               	callw
 20870  0033  3180               	pagesel	$
 20871                           
 20872                           ;interrupt_manager.c: 68: }
 20873  0034  2850               	goto	i1l378
 20874  0035                     i1l369:
 20875                           
 20876                           ;interrupt_manager.c: 69: else if(PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1)
 20877  0035  1C1A               	btfss	26,0	;volatile
 20878  0036  2838               	goto	u643_21
 20879  0037  2839               	goto	u643_20
 20880  0038                     u643_21:
 20881  0038  2841               	goto	i1l371
 20882  0039                     u643_20:
 20883  0039                     i1l6008:
 20884  0039  1C10               	btfss	16,0	;volatile
 20885  003A  283C               	goto	u644_21
 20886  003B  283D               	goto	u644_20
 20887  003C                     u644_21:
 20888  003C  2841               	goto	i1l371
 20889  003D                     u644_20:
 20890  003D                     i1l6010:
 20891                           
 20892                           ;interrupt_manager.c: 70: {;interrupt_manager.c: 71: TMR1_ISR();
 20893  003D  319F  27D2  3180   	fcall	_TMR1_ISR
 20894                           
 20895                           ;interrupt_manager.c: 72: }
 20896  0040  2850               	goto	i1l378
 20897  0041                     i1l371:
 20898                           
 20899                           ;interrupt_manager.c: 73: else if(PIE3bits.BCL1IE == 1 && PIR3bits.BCL1IF == 1)
 20900  0041  1C99               	btfss	25,1	;volatile
 20901  0042  2844               	goto	u645_21
 20902  0043  2845               	goto	u645_20
 20903  0044                     u645_21:
 20904  0044  284A               	goto	i1l373
 20905  0045                     u645_20:
 20906  0045                     i1l6012:
 20907                           
 20908                           ;interrupt_manager.c: 74: {;interrupt_manager.c: 75: i2c1_driver_busCollisionISR();
 20909  0045  1C8F               	btfss	15,1	;volatile
 20910  0046  2848               	goto	u646_21
 20911  0047  2849               	goto	u646_20
 20912  0048                     u646_21:
 20913  0048  284A               	goto	i1l373
 20914  0049                     u646_20:
 20915  0049  2850               	goto	i1l378
 20916  004A                     i1l373:
 20917                           
 20918                           ;interrupt_manager.c: 77: else if(PIE3bits.SSP1IE == 1 && PIR3bits.SSP1IF == 1)
 20919  004A  1C19               	btfss	25,0	;volatile
 20920  004B  284D               	goto	u647_21
 20921  004C  284E               	goto	u647_20
 20922  004D                     u647_21:
 20923  004D  2850               	goto	i1l372
 20924  004E                     u647_20:
 20925  004E                     i1l6016:
 20926                           
 20927                           ;interrupt_manager.c: 78: {;interrupt_manager.c: 79: i2c1_driver_i2cISR();
 20928  004E  080F               	movf	15,w	;volatile
 20929  004F  2850               	goto	i1l378
 20930  0050                     i1l372:
 20931  0050                     i1l378:
 20932  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 20933  0051  0009               	retfie
 20934  0052                     __end_of_INTERRUPT_InterruptManager:
 20935                           
 20936                           	psect	text73
 20937  1FD2                     __ptext73:	
 20938 ;; *************** function _TMR1_ISR *****************
 20939 ;; Defined at:
 20940 ;;		line 164 in file "mcc_generated_files/tmr1.c"
 20941 ;; Parameters:    Size  Location     Type
 20942 ;;		None
 20943 ;; Auto vars:     Size  Location     Type
 20944 ;;		None
 20945 ;; Return value:  Size  Location     Type
 20946 ;;                  1    wreg      void 
 20947 ;; Registers used:
 20948 ;;		wreg, status,2, status,0, pclath, cstack
 20949 ;; Tracked objects:
 20950 ;;		On entry : 0/0
 20951 ;;		On exit  : 0/0
 20952 ;;		Unchanged: 0/0
 20953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20958 ;;Total ram usage:        0 bytes
 20959 ;; Hardware stack levels used:    1
 20960 ;; Hardware stack levels required when called:    2
 20961 ;; This function calls:
 20962 ;;		Absolute function
 20963 ;;		_Clock_ISR
 20964 ;;		_TMR1_DefaultInterruptHandler
 20965 ;;		_TMR1_WriteTimer
 20966 ;; This function is called by:
 20967 ;;		_INTERRUPT_InterruptManager
 20968 ;; This function uses a non-reentrant model
 20969 ;;
 20970                           
 20971                           
 20972                           ;psect for function _TMR1_ISR
 20973  1FD2                     _TMR1_ISR:
 20974  1FD2                     i1l5500:	
 20975                           ;incstack = 0
 20976                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 20977                           
 20978                           
 20979                           ;tmr1.c: 168: PIR4bits.TMR1IF = 0;
 20980  1FD2  002E               	movlb	14	; select bank14
 20981  1FD3  1010               	bcf	16,0	;volatile
 20982  1FD4                     i1l5502:
 20983                           
 20984                           ;tmr1.c: 169: TMR1_WriteTimer(timer1ReloadVal);
 20985  1FD4  0021               	movlb	1	; select bank1
 20986  1FD5  0859               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 20987  1FD6  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 20988  1FD7  0858               	movf	_timer1ReloadVal^(0+128),w	;volatile
 20989  1FD8  00F0               	movwf	TMR1_WriteTimer@timerVal
 20990  1FD9  319F  27AB  319F   	fcall	_TMR1_WriteTimer
 20991  1FDC                     i1l5504:
 20992                           
 20993                           ;tmr1.c: 171: if(TMR1_InterruptHandler)
 20994  1FDC  0022               	movlb	2	; select bank2
 20995  1FDD  085B               	movf	_TMR1_InterruptHandler^(0+256),w
 20996  1FDE  045C               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 20997  1FDF  1903               	btfsc	3,2
 20998  1FE0  2FE2               	goto	u535_21
 20999  1FE1  2FE3               	goto	u535_20
 21000  1FE2                     u535_21:
 21001  1FE2  2FE8               	goto	i1l436
 21002  1FE3                     u535_20:
 21003  1FE3                     i1l5506:
 21004                           
 21005                           ;tmr1.c: 172: {;tmr1.c: 173: TMR1_InterruptHandler();
 21006  1FE3  085C               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 21007  1FE4  008A               	movwf	10
 21008  1FE5  085B               	movf	_TMR1_InterruptHandler^(0+256),w
 21009  1FE6  000A               	callw
 21010  1FE7  319F               	pagesel	$
 21011  1FE8                     i1l436:
 21012  1FE8  0008               	return
 21013  1FE9                     __end_of_TMR1_ISR:
 21014                           
 21015                           	psect	text74
 21016  1FAB                     __ptext74:	
 21017 ;; *************** function _TMR1_WriteTimer *****************
 21018 ;; Defined at:
 21019 ;;		line 127 in file "mcc_generated_files/tmr1.c"
 21020 ;; Parameters:    Size  Location     Type
 21021 ;;  timerVal        2    0[COMMON] unsigned int 
 21022 ;; Auto vars:     Size  Location     Type
 21023 ;;		None
 21024 ;; Return value:  Size  Location     Type
 21025 ;;                  1    wreg      void 
 21026 ;; Registers used:
 21027 ;;		wreg, status,2
 21028 ;; Tracked objects:
 21029 ;;		On entry : 0/0
 21030 ;;		On exit  : 0/0
 21031 ;;		Unchanged: 0/0
 21032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21036 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21037 ;;Total ram usage:        2 bytes
 21038 ;; Hardware stack levels used:    1
 21039 ;; This function calls:
 21040 ;;		Nothing
 21041 ;; This function is called by:
 21042 ;;		_TMR1_ISR
 21043 ;;		_TMR1_Reload
 21044 ;; This function uses a non-reentrant model
 21045 ;;
 21046                           
 21047                           
 21048                           ;psect for function _TMR1_WriteTimer
 21049  1FAB                     _TMR1_WriteTimer:
 21050  1FAB                     i1l5272:	
 21051                           ;incstack = 0
 21052                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 21053                           
 21054                           
 21055                           ;tmr1.c: 129: if (T1CONbits.nT1SYNC == 1)
 21056  1FAB  0024               	movlb	4	; select bank4
 21057  1FAC  1D0E               	btfss	14,2	;volatile
 21058  1FAD  2FAF               	goto	u497_21
 21059  1FAE  2FB0               	goto	u497_20
 21060  1FAF                     u497_21:
 21061  1FAF  2FB7               	goto	i1l5282
 21062  1FB0                     u497_20:
 21063  1FB0                     i1l5274:
 21064                           
 21065                           ;tmr1.c: 130: {;tmr1.c: 132: T1CONbits.TMR1ON = 0;
 21066  1FB0  100E               	bcf	14,0	;volatile
 21067  1FB1                     i1l5276:
 21068                           
 21069                           ;tmr1.c: 135: TMR1H = (timerVal >> 8);
 21070  1FB1  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 21071  1FB2  008D               	movwf	13	;volatile
 21072  1FB3                     i1l5278:
 21073                           
 21074                           ;tmr1.c: 136: TMR1L = timerVal;
 21075  1FB3  0870               	movf	TMR1_WriteTimer@timerVal,w
 21076  1FB4  008C               	movwf	12	;volatile
 21077  1FB5                     i1l5280:
 21078                           
 21079                           ;tmr1.c: 139: T1CONbits.TMR1ON =1;
 21080  1FB5  140E               	bsf	14,0	;volatile
 21081                           
 21082                           ;tmr1.c: 140: }
 21083  1FB6  2FBB               	goto	i1l423
 21084  1FB7                     i1l5282:
 21085                           
 21086                           ;tmr1.c: 141: else;tmr1.c: 142: {;tmr1.c: 144: TMR1H = (timerVal >> 8);
 21087  1FB7  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 21088  1FB8  008D               	movwf	13	;volatile
 21089  1FB9                     i1l5284:
 21090                           
 21091                           ;tmr1.c: 145: TMR1L = timerVal;
 21092  1FB9  0870               	movf	TMR1_WriteTimer@timerVal,w
 21093  1FBA  008C               	movwf	12	;volatile
 21094  1FBB                     i1l423:
 21095  1FBB  0008               	return
 21096  1FBC                     __end_of_TMR1_WriteTimer:
 21097                           
 21098                           	psect	text75
 21099  0A13                     __ptext75:	
 21100 ;; *************** function _Clock_ISR *****************
 21101 ;; Defined at:
 21102 ;;		line 363 in file "main.c"
 21103 ;; Parameters:    Size  Location     Type
 21104 ;;		None
 21105 ;; Auto vars:     Size  Location     Type
 21106 ;;		None
 21107 ;; Return value:  Size  Location     Type
 21108 ;;                  1    wreg      void 
 21109 ;; Registers used:
 21110 ;;		wreg, status,2, status,0, pclath, cstack
 21111 ;; Tracked objects:
 21112 ;;		On entry : 0/0
 21113 ;;		On exit  : 0/0
 21114 ;;		Unchanged: 0/0
 21115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21118 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21119 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21120 ;;Total ram usage:        7 bytes
 21121 ;; Hardware stack levels used:    1
 21122 ;; Hardware stack levels required when called:    1
 21123 ;; This function calls:
 21124 ;;		___awdiv
 21125 ;; This function is called by:
 21126 ;;		_main
 21127 ;;		_TMR1_ISR
 21128 ;; This function uses a non-reentrant model
 21129 ;;
 21130                           
 21131                           
 21132                           ;psect for function _Clock_ISR
 21133  0A13                     _Clock_ISR:
 21134  0A13                     i1l5342:	
 21135                           ;incstack = 0
 21136                           ; Regs used in _Clock_ISR: [wreg+status,2+status,0+pclath+cstack]
 21137                           
 21138                           
 21139                           ;main.c: 365: t.s++;
 21140  0A13  3001               	movlw	1
 21141  0A14  0020               	movlb	0	; select bank0
 21142  0A15  00A0               	movwf	??_Clock_ISR
 21143  0A16  0820               	movf	??_Clock_ISR,w
 21144  0A17  07DC               	addwf	_t+2,f
 21145                           
 21146                           ;main.c: 367: if(t.s==60){
 21147  0A18  303C               	movlw	60
 21148  0A19  065C               	xorwf	_t+2,w
 21149  0A1A  1D03               	btfss	3,2
 21150  0A1B  2A1D               	goto	u507_21
 21151  0A1C  2A1E               	goto	u507_20
 21152  0A1D                     u507_21:
 21153  0A1D  2A26               	goto	i1l5350
 21154  0A1E                     u507_20:
 21155  0A1E                     i1l5344:
 21156                           
 21157                           ;main.c: 368: t.m++;
 21158  0A1E  3001               	movlw	1
 21159  0A1F  00A0               	movwf	??_Clock_ISR
 21160  0A20  0820               	movf	??_Clock_ISR,w
 21161  0A21  07DB               	addwf	_t+1,f
 21162  0A22                     i1l5346:
 21163                           
 21164                           ;main.c: 369: t.s=0;
 21165  0A22  01DC               	clrf	_t+2
 21166  0A23                     i1l5348:
 21167                           
 21168                           ;main.c: 370: writeEEPROM_flag = 1;
 21169  0A23  0021               	movlb	1	; select bank1
 21170  0A24  01B1               	clrf	_writeEEPROM_flag^(0+128)
 21171  0A25  0AB1               	incf	_writeEEPROM_flag^(0+128),f
 21172  0A26                     i1l5350:
 21173                           
 21174                           ;main.c: 371: };main.c: 372: if(t.m==60){
 21175  0A26  303C               	movlw	60
 21176  0A27  0020               	movlb	0	; select bank0
 21177  0A28  065B               	xorwf	_t+1,w
 21178  0A29  1D03               	btfss	3,2
 21179  0A2A  2A2C               	goto	u508_21
 21180  0A2B  2A2D               	goto	u508_20
 21181  0A2C                     u508_21:
 21182  0A2C  2A32               	goto	i1l5356
 21183  0A2D                     u508_20:
 21184  0A2D                     i1l5352:
 21185                           
 21186                           ;main.c: 373: t.h++;
 21187  0A2D  3001               	movlw	1
 21188  0A2E  00A0               	movwf	??_Clock_ISR
 21189  0A2F  0820               	movf	??_Clock_ISR,w
 21190  0A30  07DA               	addwf	_t,f
 21191  0A31                     i1l5354:
 21192                           
 21193                           ;main.c: 374: t.m=0;
 21194  0A31  01DB               	clrf	_t+1
 21195  0A32                     i1l5356:
 21196                           
 21197                           ;main.c: 375: };main.c: 376: if(t.h==24){
 21198  0A32  3018               	movlw	24
 21199  0A33  065A               	xorwf	_t,w
 21200  0A34  1D03               	btfss	3,2
 21201  0A35  2A37               	goto	u509_21
 21202  0A36  2A38               	goto	u509_20
 21203  0A37                     u509_21:
 21204  0A37  2A39               	goto	i1l5360
 21205  0A38                     u509_20:
 21206  0A38                     i1l5358:
 21207                           
 21208                           ;main.c: 377: t.h=0;
 21209  0A38  01DA               	clrf	_t
 21210  0A39                     i1l5360:
 21211                           
 21212                           ;main.c: 378: };main.c: 381: if((ALAF == 'A') && t.s >= clkAlarm.alarmVal.s && t.m >= cl
      +                          kAlarm.alarmVal.m && t.h >= clkAlarm.alarmVal.h && editingClockAlarm == 0){
 21213  0A39  3041               	movlw	65
 21214  0A3A  067C               	xorwf	_ALAF,w
 21215  0A3B  1D03               	btfss	3,2
 21216  0A3C  2A3E               	goto	u510_21
 21217  0A3D  2A3F               	goto	u510_20
 21218  0A3E                     u510_21:
 21219  0A3E  2A6A               	goto	i1l1271
 21220  0A3F                     u510_20:
 21221  0A3F                     i1l5362:
 21222  0A3F  0021               	movlb	1	; select bank1
 21223  0A40  0822               	movf	(_clkAlarm^(0+128)+2),w
 21224  0A41  0020               	movlb	0	; select bank0
 21225  0A42  025C               	subwf	_t+2,w
 21226  0A43  1C03               	skipc
 21227  0A44  2A46               	goto	u511_21
 21228  0A45  2A47               	goto	u511_20
 21229  0A46                     u511_21:
 21230  0A46  2A6A               	goto	i1l1271
 21231  0A47                     u511_20:
 21232  0A47                     i1l5364:
 21233  0A47  0021               	movlb	1	; select bank1
 21234  0A48  0821               	movf	(_clkAlarm^(0+128)+1),w
 21235  0A49  0020               	movlb	0	; select bank0
 21236  0A4A  025B               	subwf	_t+1,w
 21237  0A4B  1C03               	skipc
 21238  0A4C  2A4E               	goto	u512_21
 21239  0A4D  2A4F               	goto	u512_20
 21240  0A4E                     u512_21:
 21241  0A4E  2A6A               	goto	i1l1271
 21242  0A4F                     u512_20:
 21243  0A4F                     i1l5366:
 21244  0A4F  0021               	movlb	1	; select bank1
 21245  0A50  0820               	movf	_clkAlarm^(0+128),w
 21246  0A51  0020               	movlb	0	; select bank0
 21247  0A52  025A               	subwf	_t,w
 21248  0A53  1C03               	skipc
 21249  0A54  2A56               	goto	u513_21
 21250  0A55  2A57               	goto	u513_20
 21251  0A56                     u513_21:
 21252  0A56  2A6A               	goto	i1l1271
 21253  0A57                     u513_20:
 21254  0A57                     i1l5368:
 21255  0A57  085F               	movf	_editingClockAlarm,w
 21256  0A58  0460               	iorwf	_editingClockAlarm+1,w
 21257  0A59  1D03               	btfss	3,2
 21258  0A5A  2A5C               	goto	u514_21
 21259  0A5B  2A5D               	goto	u514_20
 21260  0A5C                     u514_21:
 21261  0A5C  2A6A               	goto	i1l1271
 21262  0A5D                     u514_20:
 21263  0A5D                     i1l5370:
 21264                           
 21265                           ;main.c: 382: alarmPWMStart.h = 0xff;
 21266  0A5D  30FF               	movlw	255
 21267  0A5E  00A0               	movwf	??_Clock_ISR
 21268  0A5F  0820               	movf	??_Clock_ISR,w
 21269  0A60  0021               	movlb	1	; select bank1
 21270  0A61  00CE               	movwf	_alarmPWMStart^(0+128)
 21271  0A62                     i1l5372:
 21272                           
 21273                           ;main.c: 383: clkAlarm.trigger = 1;
 21274  0A62  01A3               	clrf	(_clkAlarm^(0+128)+3)
 21275  0A63  0AA3               	incf	(_clkAlarm^(0+128)+3),f
 21276                           
 21277                           ;main.c: 384: clkAlarm.alarmVal.h = 25;
 21278  0A64  3019               	movlw	25
 21279  0A65  0020               	movlb	0	; select bank0
 21280  0A66  00A0               	movwf	??_Clock_ISR
 21281  0A67  0820               	movf	??_Clock_ISR,w
 21282  0A68  0021               	movlb	1	; select bank1
 21283  0A69  00A0               	movwf	_clkAlarm^(0+128)
 21284  0A6A                     i1l1271:
 21285                           
 21286                           ;main.c: 385: };main.c: 388: if(((iwrite >= iread) && (((iwrite-iread) >= NREG/2) || ((i
      +                          write-iread) == 0 && nr == NREG))) || ((iwrite < iread) && ((iwrite+(NREG - iread)) >= N
      +                          REG/2))){
 21287  0A6A  087B               	movf	_iread,w
 21288  0A6B  027A               	subwf	_iwrite,w
 21289  0A6C  1C03               	skipc
 21290  0A6D  2A6F               	goto	u515_21
 21291  0A6E  2A70               	goto	u515_20
 21292  0A6F                     u515_21:
 21293  0A6F  2AAF               	goto	i1l5380
 21294  0A70                     u515_20:
 21295  0A70                     i1l5374:
 21296  0A70  3002               	movlw	2
 21297  0A71  00F0               	movwf	___awdiv@divisor
 21298  0A72  3000               	movlw	0
 21299  0A73  00F1               	movwf	___awdiv@divisor+1
 21300  0A74  087D               	movf	_NREG,w
 21301  0A75  0020               	movlb	0	; select bank0
 21302  0A76  00A0               	movwf	??_Clock_ISR
 21303  0A77  01A1               	clrf	??_Clock_ISR+1
 21304  0A78  0820               	movf	??_Clock_ISR,w
 21305  0A79  00F2               	movwf	___awdiv@dividend
 21306  0A7A  0821               	movf	??_Clock_ISR+1,w
 21307  0A7B  00F3               	movwf	___awdiv@dividend+1
 21308  0A7C  3195  25E7  318A   	fcall	___awdiv
 21309  0A7F  087A               	movf	_iwrite,w
 21310  0A80  0020               	movlb	0	; select bank0
 21311  0A81  00A2               	movwf	??_Clock_ISR+2
 21312  0A82  01A3               	clrf	??_Clock_ISR+3
 21313  0A83  0823               	movf	??_Clock_ISR+3,w
 21314  0A84  00A5               	movwf	??_Clock_ISR+5
 21315  0A85  087B               	movf	_iread,w
 21316  0A86  0222               	subwf	??_Clock_ISR+2,w
 21317  0A87  00A4               	movwf	??_Clock_ISR+4
 21318  0A88  1C03               	skipc
 21319  0A89  03A5               	decf	??_Clock_ISR+5,f
 21320  0A8A  0825               	movf	??_Clock_ISR+5,w
 21321  0A8B  3A80               	xorlw	128
 21322  0A8C  00A6               	movwf	??_Clock_ISR+6
 21323  0A8D  0871               	movf	?___awdiv+1,w
 21324  0A8E  3A80               	xorlw	128
 21325  0A8F  0226               	subwf	??_Clock_ISR+6,w
 21326  0A90  1D03               	skipz
 21327  0A91  2A94               	goto	u516_25
 21328  0A92  0870               	movf	?___awdiv,w
 21329  0A93  0224               	subwf	??_Clock_ISR+4,w
 21330  0A94                     u516_25:
 21331  0A94  1803               	skipnc
 21332  0A95  2A97               	goto	u516_21
 21333  0A96  2A98               	goto	u516_20
 21334  0A97                     u516_21:
 21335  0A97  2ADF               	goto	i1l1274
 21336  0A98                     u516_20:
 21337  0A98                     i1l5376:
 21338  0A98  087A               	movf	_iwrite,w
 21339  0A99  0020               	movlb	0	; select bank0
 21340  0A9A  00A0               	movwf	??_Clock_ISR
 21341  0A9B  01A1               	clrf	??_Clock_ISR+1
 21342  0A9C  0821               	movf	??_Clock_ISR+1,w
 21343  0A9D  00A3               	movwf	??_Clock_ISR+3
 21344  0A9E  087B               	movf	_iread,w
 21345  0A9F  0220               	subwf	??_Clock_ISR,w
 21346  0AA0  00A2               	movwf	??_Clock_ISR+2
 21347  0AA1  1C03               	skipc
 21348  0AA2  03A3               	decf	??_Clock_ISR+3,f
 21349  0AA3  0822               	movf	??_Clock_ISR+2,w
 21350  0AA4  0423               	iorwf	??_Clock_ISR+3,w
 21351  0AA5  1D03               	btfss	3,2
 21352  0AA6  2AA8               	goto	u517_21
 21353  0AA7  2AA9               	goto	u517_20
 21354  0AA8                     u517_21:
 21355  0AA8  2AAF               	goto	i1l5380
 21356  0AA9                     u517_20:
 21357  0AA9                     i1l5378:
 21358  0AA9  0879               	movf	_nr,w
 21359  0AAA  067D               	xorwf	_NREG,w
 21360  0AAB  1903               	skipnz
 21361  0AAC  2AAE               	goto	u518_21
 21362  0AAD  2AAF               	goto	u518_20
 21363  0AAE                     u518_21:
 21364  0AAE  2ADF               	goto	i1l1274
 21365  0AAF                     u518_20:
 21366  0AAF                     i1l5380:
 21367  0AAF  087B               	movf	_iread,w
 21368  0AB0  027A               	subwf	_iwrite,w
 21369  0AB1  1803               	skipnc
 21370  0AB2  2AB4               	goto	u519_21
 21371  0AB3  2AB5               	goto	u519_20
 21372  0AB4                     u519_21:
 21373  0AB4  2AE3               	goto	i1l5384
 21374  0AB5                     u519_20:
 21375  0AB5                     i1l5382:
 21376  0AB5  3002               	movlw	2
 21377  0AB6  00F0               	movwf	___awdiv@divisor
 21378  0AB7  3000               	movlw	0
 21379  0AB8  00F1               	movwf	___awdiv@divisor+1
 21380  0AB9  087D               	movf	_NREG,w
 21381  0ABA  0020               	movlb	0	; select bank0
 21382  0ABB  00A0               	movwf	??_Clock_ISR
 21383  0ABC  01A1               	clrf	??_Clock_ISR+1
 21384  0ABD  0820               	movf	??_Clock_ISR,w
 21385  0ABE  00F2               	movwf	___awdiv@dividend
 21386  0ABF  0821               	movf	??_Clock_ISR+1,w
 21387  0AC0  00F3               	movwf	___awdiv@dividend+1
 21388  0AC1  3195  25E7  318A   	fcall	___awdiv
 21389  0AC4  087A               	movf	_iwrite,w
 21390  0AC5  077D               	addwf	_NREG,w
 21391  0AC6  0020               	movlb	0	; select bank0
 21392  0AC7  00A2               	movwf	??_Clock_ISR+2
 21393  0AC8  01A3               	clrf	??_Clock_ISR+3
 21394  0AC9  0DA3               	rlf	??_Clock_ISR+3,f
 21395  0ACA  0823               	movf	??_Clock_ISR+3,w
 21396  0ACB  00A5               	movwf	??_Clock_ISR+5
 21397  0ACC  087B               	movf	_iread,w
 21398  0ACD  0222               	subwf	??_Clock_ISR+2,w
 21399  0ACE  00A4               	movwf	??_Clock_ISR+4
 21400  0ACF  1C03               	skipc
 21401  0AD0  03A5               	decf	??_Clock_ISR+5,f
 21402  0AD1  0825               	movf	??_Clock_ISR+5,w
 21403  0AD2  3A80               	xorlw	128
 21404  0AD3  00A6               	movwf	??_Clock_ISR+6
 21405  0AD4  0871               	movf	?___awdiv+1,w
 21406  0AD5  3A80               	xorlw	128
 21407  0AD6  0226               	subwf	??_Clock_ISR+6,w
 21408  0AD7  1D03               	skipz
 21409  0AD8  2ADB               	goto	u520_25
 21410  0AD9  0870               	movf	?___awdiv,w
 21411  0ADA  0224               	subwf	??_Clock_ISR+4,w
 21412  0ADB                     u520_25:
 21413  0ADB  1C03               	skipc
 21414  0ADC  2ADE               	goto	u520_21
 21415  0ADD  2ADF               	goto	u520_20
 21416  0ADE                     u520_21:
 21417  0ADE  2AE3               	goto	i1l5384
 21418  0ADF                     u520_20:
 21419  0ADF                     i1l1274:
 21420                           
 21421                           ;main.c: 389: bufHalfFull = 1;
 21422  0ADF  0021               	movlb	1	; select bank1
 21423  0AE0  01B0               	clrf	_bufHalfFull^(0+128)
 21424  0AE1  0AB0               	incf	_bufHalfFull^(0+128),f
 21425                           
 21426                           ;main.c: 390: } else {
 21427  0AE2  2AE5               	goto	i1l5386
 21428  0AE3                     i1l5384:
 21429                           
 21430                           ;main.c: 391: bufHalfFull = 0;
 21431  0AE3  0021               	movlb	1	; select bank1
 21432  0AE4  01B0               	clrf	_bufHalfFull^(0+128)
 21433  0AE5                     i1l5386:
 21434  0AE5  1003               	clrc
 21435  0AE6  0020               	movlb	0	; select bank0
 21436  0AE7  1F96               	btfss	22,7	;volatile
 21437  0AE8  1403               	setc
 21438  0AE9  1803               	btfsc	3,0
 21439  0AEA  2AEC               	goto	u521_21
 21440  0AEB  2AEF               	goto	u521_20
 21441  0AEC                     u521_21:
 21442  0AEC  0020               	movlb	0	; select bank0
 21443  0AED  1796               	bsf	22,7	;volatile
 21444  0AEE  2AF1               	goto	u522_24
 21445  0AEF                     u521_20:
 21446  0AEF  0020               	movlb	0	; select bank0
 21447  0AF0  1396               	bcf	22,7	;volatile
 21448  0AF1                     u522_24:
 21449  0AF1                     i1l5388:
 21450                           
 21451                           ;main.c: 395: updateLCD = 1;
 21452  0AF1  0021               	movlb	1	; select bank1
 21453  0AF2  01D5               	clrf	_updateLCD^(0+128)
 21454  0AF3  0AD5               	incf	_updateLCD^(0+128),f
 21455  0AF4                     i1l5390:
 21456                           
 21457                           ;main.c: 396: counterMonitorAux++;
 21458  0AF4  3001               	movlw	1
 21459  0AF5  0020               	movlb	0	; select bank0
 21460  0AF6  00A0               	movwf	??_Clock_ISR
 21461  0AF7  0820               	movf	??_Clock_ISR,w
 21462  0AF8  0021               	movlb	1	; select bank1
 21463  0AF9  07B2               	addwf	_counterMonitorAux^(0+128),f
 21464                           
 21465                           ;main.c: 397: if(counterMonitorAux >= PMON){
 21466  0AFA  0857               	movf	_PMON^(0+128),w
 21467  0AFB  0232               	subwf	_counterMonitorAux^(0+128),w
 21468  0AFC  1C03               	skipc
 21469  0AFD  2AFF               	goto	u523_21
 21470  0AFE  2B00               	goto	u523_20
 21471  0AFF                     u523_21:
 21472  0AFF  2B03               	goto	i1l1283
 21473  0B00                     u523_20:
 21474  0B00                     i1l5392:
 21475                           
 21476                           ;main.c: 398: counterMonitorAux = 0;
 21477  0B00  01B2               	clrf	_counterMonitorAux^(0+128)
 21478  0B01                     i1l5394:
 21479                           
 21480                           ;main.c: 399: monitor_TEMP_LUM = 1;
 21481  0B01  01B3               	clrf	_monitor_TEMP_LUM^(0+128)
 21482  0B02  0AB3               	incf	_monitor_TEMP_LUM^(0+128),f
 21483  0B03                     i1l1283:
 21484  0B03  0008               	return
 21485  0B04                     __end_of_Clock_ISR:
 21486                           
 21487                           	psect	text76
 21488  07FF                     __ptext76:	
 21489 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 21490 ;; Defined at:
 21491 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 21492 ;; Parameters:    Size  Location     Type
 21493 ;;		None
 21494 ;; Auto vars:     Size  Location     Type
 21495 ;;		None
 21496 ;; Return value:  Size  Location     Type
 21497 ;;                  1    wreg      void 
 21498 ;; Registers used:
 21499 ;;		None
 21500 ;; Tracked objects:
 21501 ;;		On entry : 0/0
 21502 ;;		On exit  : 0/0
 21503 ;;		Unchanged: 0/0
 21504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21509 ;;Total ram usage:        0 bytes
 21510 ;; Hardware stack levels used:    1
 21511 ;; This function calls:
 21512 ;;		Nothing
 21513 ;; This function is called by:
 21514 ;;		_TMR1_Initialize
 21515 ;;		_TMR1_ISR
 21516 ;; This function uses a non-reentrant model
 21517 ;;
 21518                           
 21519                           
 21520                           ;psect for function _TMR1_DefaultInterruptHandler
 21521  07FF                     _TMR1_DefaultInterruptHandler:
 21522  07FF                     i1l442:	
 21523                           ;incstack = 0
 21524                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 21525                           
 21526  07FF  0008               	return
 21527  0800                     __end_of_TMR1_DefaultInterruptHandler:
 21528                           
 21529                           	psect	text77
 21530  15E7                     __ptext77:	
 21531 ;; *************** function ___awdiv *****************
 21532 ;; Defined at:
 21533 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\awdiv.c"
 21534 ;; Parameters:    Size  Location     Type
 21535 ;;  divisor         2    0[COMMON] int 
 21536 ;;  dividend        2    2[COMMON] int 
 21537 ;; Auto vars:     Size  Location     Type
 21538 ;;  quotient        2    7[COMMON] int 
 21539 ;;  sign            1    6[COMMON] unsigned char 
 21540 ;;  counter         1    5[COMMON] unsigned char 
 21541 ;; Return value:  Size  Location     Type
 21542 ;;                  2    0[COMMON] int 
 21543 ;; Registers used:
 21544 ;;		wreg, status,2, status,0
 21545 ;; Tracked objects:
 21546 ;;		On entry : 0/0
 21547 ;;		On exit  : 0/0
 21548 ;;		Unchanged: 0/0
 21549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21550 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21551 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21552 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21553 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21554 ;;Total ram usage:        9 bytes
 21555 ;; Hardware stack levels used:    1
 21556 ;; This function calls:
 21557 ;;		Nothing
 21558 ;; This function is called by:
 21559 ;;		_Clock_ISR
 21560 ;;		_map
 21561 ;; This function uses a non-reentrant model
 21562 ;;
 21563                           
 21564                           
 21565                           ;psect for function ___awdiv
 21566  15E7                     ___awdiv:
 21567  15E7                     i1l5094:	
 21568                           ;incstack = 0
 21569                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 21570                           
 21571  15E7  01F6               	clrf	___awdiv@sign
 21572  15E8                     i1l5096:
 21573  15E8  1FF1               	btfss	___awdiv@divisor+1,7
 21574  15E9  2DEB               	goto	u487_21
 21575  15EA  2DEC               	goto	u487_20
 21576  15EB                     u487_21:
 21577  15EB  2DF3               	goto	i1l5102
 21578  15EC                     u487_20:
 21579  15EC                     i1l5098:
 21580  15EC  09F0               	comf	___awdiv@divisor,f
 21581  15ED  09F1               	comf	___awdiv@divisor+1,f
 21582  15EE  0AF0               	incf	___awdiv@divisor,f
 21583  15EF  1903               	skipnz
 21584  15F0  0AF1               	incf	___awdiv@divisor+1,f
 21585  15F1                     i1l5100:
 21586  15F1  01F6               	clrf	___awdiv@sign
 21587  15F2  0AF6               	incf	___awdiv@sign,f
 21588  15F3                     i1l5102:
 21589  15F3  1FF3               	btfss	___awdiv@dividend+1,7
 21590  15F4  2DF6               	goto	u488_21
 21591  15F5  2DF7               	goto	u488_20
 21592  15F6                     u488_21:
 21593  15F6  2E00               	goto	i1l5108
 21594  15F7                     u488_20:
 21595  15F7                     i1l5104:
 21596  15F7  09F2               	comf	___awdiv@dividend,f
 21597  15F8  09F3               	comf	___awdiv@dividend+1,f
 21598  15F9  0AF2               	incf	___awdiv@dividend,f
 21599  15FA  1903               	skipnz
 21600  15FB  0AF3               	incf	___awdiv@dividend+1,f
 21601  15FC                     i1l5106:
 21602  15FC  3001               	movlw	1
 21603  15FD  00F4               	movwf	??___awdiv
 21604  15FE  0874               	movf	??___awdiv,w
 21605  15FF  06F6               	xorwf	___awdiv@sign,f
 21606  1600                     i1l5108:
 21607  1600  01F7               	clrf	___awdiv@quotient
 21608  1601  01F8               	clrf	___awdiv@quotient+1
 21609  1602                     i1l5110:
 21610  1602  0870               	movf	___awdiv@divisor,w
 21611  1603  0471               	iorwf	___awdiv@divisor+1,w
 21612  1604  1903               	btfsc	3,2
 21613  1605  2E07               	goto	u489_21
 21614  1606  2E08               	goto	u489_20
 21615  1607                     u489_21:
 21616  1607  2E37               	goto	i1l5130
 21617  1608                     u489_20:
 21618  1608                     i1l5112:
 21619  1608  01F5               	clrf	___awdiv@counter
 21620  1609  0AF5               	incf	___awdiv@counter,f
 21621  160A  2E14               	goto	i1l5118
 21622  160B                     i1l5114:
 21623  160B  3001               	movlw	1
 21624  160C                     u490_25:
 21625  160C  35F0               	lslf	___awdiv@divisor,f
 21626  160D  0DF1               	rlf	___awdiv@divisor+1,f
 21627  160E  0B89               	decfsz	9,f
 21628  160F  2E0C               	goto	u490_25
 21629  1610                     i1l5116:
 21630  1610  3001               	movlw	1
 21631  1611  00F4               	movwf	??___awdiv
 21632  1612  0874               	movf	??___awdiv,w
 21633  1613  07F5               	addwf	___awdiv@counter,f
 21634  1614                     i1l5118:
 21635  1614  1FF1               	btfss	___awdiv@divisor+1,7
 21636  1615  2E17               	goto	u491_21
 21637  1616  2E18               	goto	u491_20
 21638  1617                     u491_21:
 21639  1617  2E0B               	goto	i1l5114
 21640  1618                     u491_20:
 21641  1618                     i1l5120:
 21642  1618  3001               	movlw	1
 21643  1619                     u492_25:
 21644  1619  35F7               	lslf	___awdiv@quotient,f
 21645  161A  0DF8               	rlf	___awdiv@quotient+1,f
 21646  161B  0B89               	decfsz	9,f
 21647  161C  2E19               	goto	u492_25
 21648  161D  0871               	movf	___awdiv@divisor+1,w
 21649  161E  0273               	subwf	___awdiv@dividend+1,w
 21650  161F  1D03               	skipz
 21651  1620  2E23               	goto	u493_25
 21652  1621  0870               	movf	___awdiv@divisor,w
 21653  1622  0272               	subwf	___awdiv@dividend,w
 21654  1623                     u493_25:
 21655  1623  1C03               	skipc
 21656  1624  2E26               	goto	u493_21
 21657  1625  2E27               	goto	u493_20
 21658  1626                     u493_21:
 21659  1626  2E2C               	goto	i1l5126
 21660  1627                     u493_20:
 21661  1627                     i1l5122:
 21662  1627  0870               	movf	___awdiv@divisor,w
 21663  1628  02F2               	subwf	___awdiv@dividend,f
 21664  1629  0871               	movf	___awdiv@divisor+1,w
 21665  162A  3BF3               	subwfb	___awdiv@dividend+1,f
 21666  162B                     i1l5124:
 21667  162B  1477               	bsf	___awdiv@quotient,0
 21668  162C                     i1l5126:
 21669  162C  3001               	movlw	1
 21670  162D                     u494_25:
 21671  162D  36F1               	lsrf	___awdiv@divisor+1,f
 21672  162E  0CF0               	rrf	___awdiv@divisor,f
 21673  162F  0B89               	decfsz	9,f
 21674  1630  2E2D               	goto	u494_25
 21675  1631                     i1l5128:
 21676  1631  3001               	movlw	1
 21677  1632  02F5               	subwf	___awdiv@counter,f
 21678  1633  1D03               	btfss	3,2
 21679  1634  2E36               	goto	u495_21
 21680  1635  2E37               	goto	u495_20
 21681  1636                     u495_21:
 21682  1636  2E18               	goto	i1l5120
 21683  1637                     u495_20:
 21684  1637                     i1l5130:
 21685  1637  0876               	movf	___awdiv@sign,w
 21686  1638  1903               	btfsc	3,2
 21687  1639  2E3B               	goto	u496_21
 21688  163A  2E3C               	goto	u496_20
 21689  163B                     u496_21:
 21690  163B  2E41               	goto	i1l5134
 21691  163C                     u496_20:
 21692  163C                     i1l5132:
 21693  163C  09F7               	comf	___awdiv@quotient,f
 21694  163D  09F8               	comf	___awdiv@quotient+1,f
 21695  163E  0AF7               	incf	___awdiv@quotient,f
 21696  163F  1903               	skipnz
 21697  1640  0AF8               	incf	___awdiv@quotient+1,f
 21698  1641                     i1l5134:
 21699  1641  0878               	movf	___awdiv@quotient+1,w
 21700  1642  00F1               	movwf	?___awdiv+1
 21701  1643  0877               	movf	___awdiv@quotient,w
 21702  1644  00F0               	movwf	?___awdiv
 21703  1645                     i1l1938:
 21704  1645  0008               	return
 21705  1646                     __end_of___awdiv:
 21706                           
 21707                           	psect	text78
 21708  1EEE                     __ptext78:	
 21709 ;; *************** function _INT_ISR *****************
 21710 ;; Defined at:
 21711 ;;		line 32 in file "mcc_generated_files/ext_int.c"
 21712 ;; Parameters:    Size  Location     Type
 21713 ;;		None
 21714 ;; Auto vars:     Size  Location     Type
 21715 ;;		None
 21716 ;; Return value:  Size  Location     Type
 21717 ;;                  1    wreg      void 
 21718 ;; Registers used:
 21719 ;;		wreg, status,2, status,0, pclath, cstack
 21720 ;; Tracked objects:
 21721 ;;		On entry : 0/0
 21722 ;;		On exit  : 0/0
 21723 ;;		Unchanged: 0/0
 21724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21729 ;;Total ram usage:        0 bytes
 21730 ;; Hardware stack levels used:    1
 21731 ;; Hardware stack levels required when called:    2
 21732 ;; This function calls:
 21733 ;;		_INT_CallBack
 21734 ;; This function is called by:
 21735 ;;		_INTERRUPT_InterruptManager
 21736 ;; This function uses a non-reentrant model
 21737 ;;
 21738                           
 21739                           
 21740                           ;psect for function _INT_ISR
 21741  1EEE                     _INT_ISR:
 21742  1EEE                     i1l5496:	
 21743                           ;incstack = 0
 21744                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 21745                           
 21746                           
 21747                           ;ext_int.c: 34: (PIR0bits.INTF = 0);
 21748  1EEE  002E               	movlb	14	; select bank14
 21749  1EEF  100C               	bcf	12,0	;volatile
 21750  1EF0                     i1l5498:
 21751                           
 21752                           ;ext_int.c: 37: INT_CallBack();
 21753  1EF0  319F  2766  319E   	fcall	_INT_CallBack
 21754  1EF3                     i1l747:
 21755  1EF3  0008               	return
 21756  1EF4                     __end_of_INT_ISR:
 21757                           
 21758                           	psect	text79
 21759  1F66                     __ptext79:	
 21760 ;; *************** function _INT_CallBack *****************
 21761 ;; Defined at:
 21762 ;;		line 41 in file "mcc_generated_files/ext_int.c"
 21763 ;; Parameters:    Size  Location     Type
 21764 ;;		None
 21765 ;; Auto vars:     Size  Location     Type
 21766 ;;		None
 21767 ;; Return value:  Size  Location     Type
 21768 ;;                  1    wreg      void 
 21769 ;; Registers used:
 21770 ;;		wreg, status,2, status,0, pclath, cstack
 21771 ;; Tracked objects:
 21772 ;;		On entry : 0/0
 21773 ;;		On exit  : 0/0
 21774 ;;		Unchanged: 0/0
 21775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21780 ;;Total ram usage:        0 bytes
 21781 ;; Hardware stack levels used:    1
 21782 ;; Hardware stack levels required when called:    1
 21783 ;; This function calls:
 21784 ;;		Absolute function
 21785 ;;		_INT_DefaultInterruptHandler
 21786 ;;		_S1_ISR
 21787 ;; This function is called by:
 21788 ;;		_INT_ISR
 21789 ;; This function uses a non-reentrant model
 21790 ;;
 21791                           
 21792                           
 21793                           ;psect for function _INT_CallBack
 21794  1F66                     _INT_CallBack:
 21795  1F66                     i1l5302:	
 21796                           ;incstack = 0
 21797                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 21798                           
 21799                           
 21800                           ;ext_int.c: 44: if(INT_InterruptHandler)
 21801  1F66  0022               	movlb	2	; select bank2
 21802  1F67  0859               	movf	_INT_InterruptHandler^(0+256),w
 21803  1F68  045A               	iorwf	(_INT_InterruptHandler+1)^(0+256),w
 21804  1F69  1903               	btfsc	3,2
 21805  1F6A  2F6C               	goto	u498_21
 21806  1F6B  2F6D               	goto	u498_20
 21807  1F6C                     u498_21:
 21808  1F6C  2F72               	goto	i1l751
 21809  1F6D                     u498_20:
 21810  1F6D                     i1l5304:
 21811                           
 21812                           ;ext_int.c: 45: {;ext_int.c: 46: INT_InterruptHandler();
 21813  1F6D  085A               	movf	(_INT_InterruptHandler+1)^(0+256),w
 21814  1F6E  008A               	movwf	10
 21815  1F6F  0859               	movf	_INT_InterruptHandler^(0+256),w
 21816  1F70  000A               	callw
 21817  1F71  319F               	pagesel	$
 21818  1F72                     i1l751:
 21819  1F72  0008               	return
 21820  1F73                     __end_of_INT_CallBack:
 21821                           
 21822                           	psect	text80
 21823  0003                     __ptext80:	
 21824 ;; *************** function _INT_DefaultInterruptHandler *****************
 21825 ;; Defined at:
 21826 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 21827 ;; Parameters:    Size  Location     Type
 21828 ;;		None
 21829 ;; Auto vars:     Size  Location     Type
 21830 ;;		None
 21831 ;; Return value:  Size  Location     Type
 21832 ;;                  1    wreg      void 
 21833 ;; Registers used:
 21834 ;;		None
 21835 ;; Tracked objects:
 21836 ;;		On entry : 0/0
 21837 ;;		On exit  : 0/0
 21838 ;;		Unchanged: 0/0
 21839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21844 ;;Total ram usage:        0 bytes
 21845 ;; Hardware stack levels used:    1
 21846 ;; This function calls:
 21847 ;;		Nothing
 21848 ;; This function is called by:
 21849 ;;		_EXT_INT_Initialize
 21850 ;;		_INT_CallBack
 21851 ;; This function uses a non-reentrant model
 21852 ;;
 21853                           
 21854                           
 21855                           ;psect for function _INT_DefaultInterruptHandler
 21856  0003                     _INT_DefaultInterruptHandler:
 21857  0003                     i1l757:	
 21858                           ;incstack = 0
 21859                           ; Regs used in _INT_DefaultInterruptHandler: []
 21860                           
 21861  0003  0008               	return
 21862  0004                     __end_of_INT_DefaultInterruptHandler:
 21863                           
 21864                           	psect	text81
 21865  1F11                     __ptext81:	
 21866 ;; *************** function _S1_ISR *****************
 21867 ;; Defined at:
 21868 ;;		line 824 in file "main.c"
 21869 ;; Parameters:    Size  Location     Type
 21870 ;;		None
 21871 ;; Auto vars:     Size  Location     Type
 21872 ;;		None
 21873 ;; Return value:  Size  Location     Type
 21874 ;;                  1    wreg      void 
 21875 ;; Registers used:
 21876 ;;		None
 21877 ;; Tracked objects:
 21878 ;;		On entry : 0/0
 21879 ;;		On exit  : 0/0
 21880 ;;		Unchanged: 0/0
 21881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21886 ;;Total ram usage:        0 bytes
 21887 ;; Hardware stack levels used:    1
 21888 ;; This function calls:
 21889 ;;		Nothing
 21890 ;; This function is called by:
 21891 ;;		_main
 21892 ;;		_INT_CallBack
 21893 ;; This function uses a non-reentrant model
 21894 ;;
 21895                           
 21896                           
 21897                           ;psect for function _S1_ISR
 21898  1F11                     _S1_ISR:
 21899  1F11                     i1l5092:	
 21900                           ;incstack = 0
 21901                           ; Regs used in _S1_ISR: []
 21902                           
 21903                           
 21904                           ;main.c: 825: PIE0bits.INTE = 0;
 21905  1F11  002E               	movlb	14	; select bank14
 21906  1F12  1016               	bcf	22,0	;volatile
 21907                           
 21908                           ;main.c: 826: flagS1pushed = 1;
 21909  1F13  0021               	movlb	1	; select bank1
 21910  1F14  01B4               	clrf	_flagS1pushed^(0+128)
 21911  1F15  0AB4               	incf	_flagS1pushed^(0+128),f
 21912                           
 21913                           ;main.c: 845: (PIR0bits.INTF = 0);
 21914  1F16  002E               	movlb	14	; select bank14
 21915  1F17  100C               	bcf	12,0	;volatile
 21916                           
 21917                           ;main.c: 846: PIE0bits.INTE = 1;
 21918  1F18  1416               	bsf	22,0	;volatile
 21919  1F19                     i1l1453:
 21920  1F19  0008               	return
 21921  1F1A                     __end_of_S1_ISR:
 21922                           
 21923                           	psect	text82
 21924  11C8                     __ptext82:	
 21925 ;; *************** function _EUSART_Transmit_ISR *****************
 21926 ;; Defined at:
 21927 ;;		line 181 in file "mcc_generated_files/eusart.c"
 21928 ;; Parameters:    Size  Location     Type
 21929 ;;		None
 21930 ;; Auto vars:     Size  Location     Type
 21931 ;;		None
 21932 ;; Return value:  Size  Location     Type
 21933 ;;                  1    wreg      void 
 21934 ;; Registers used:
 21935 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21936 ;; Tracked objects:
 21937 ;;		On entry : 0/0
 21938 ;;		On exit  : 0/0
 21939 ;;		Unchanged: 0/0
 21940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21944 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21945 ;;Total ram usage:        1 bytes
 21946 ;; Hardware stack levels used:    1
 21947 ;; This function calls:
 21948 ;;		Nothing
 21949 ;; This function is called by:
 21950 ;;		_EUSART_Initialize
 21951 ;;		_INTERRUPT_InterruptManager
 21952 ;; This function uses a non-reentrant model
 21953 ;;
 21954                           
 21955                           
 21956                           ;psect for function _EUSART_Transmit_ISR
 21957  11C8                     _EUSART_Transmit_ISR:
 21958  11C8                     i1l5516:	
 21959                           ;incstack = 0
 21960                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 21961                           
 21962                           
 21963                           ;eusart.c: 185: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 21964  11C8  3040               	movlw	64
 21965  11C9  0021               	movlb	1	; select bank1
 21966  11CA  025A               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 21967  11CB  1803               	skipnc
 21968  11CC  29CE               	goto	u536_21
 21969  11CD  29CF               	goto	u536_20
 21970  11CE                     u536_21:
 21971  11CE  29EA               	goto	i1l845
 21972  11CF                     u536_20:
 21973  11CF                     i1l5518:
 21974                           
 21975                           ;eusart.c: 186: {;eusart.c: 187: TX1REG = eusartTxBuffer[eusartTxTail++];
 21976  11CF  0020               	movlb	0	; select bank0
 21977  11D0  0863               	movf	_eusartTxTail,w
 21978  11D1  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 21979  11D2  0086               	movwf	6
 21980  11D3  3001               	movlw	1	; select bank3/4
 21981  11D4  0087               	movwf	7
 21982  11D5  0801               	movf	1,w
 21983  11D6  0022               	movlb	2	; select bank2
 21984  11D7  009A               	movwf	26	;volatile
 21985  11D8                     i1l5520:
 21986  11D8  3001               	movlw	1
 21987  11D9  00F0               	movwf	??_EUSART_Transmit_ISR
 21988  11DA  0870               	movf	??_EUSART_Transmit_ISR,w
 21989  11DB  0020               	movlb	0	; select bank0
 21990  11DC  07E3               	addwf	_eusartTxTail,f	;volatile
 21991  11DD                     i1l5522:
 21992                           
 21993                           ;eusart.c: 188: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 21994  11DD  3040               	movlw	64
 21995  11DE  0263               	subwf	_eusartTxTail,w	;volatile
 21996  11DF  1C03               	skipc
 21997  11E0  29E2               	goto	u537_21
 21998  11E1  29E3               	goto	u537_20
 21999  11E2                     u537_21:
 22000  11E2  29E4               	goto	i1l5526
 22001  11E3                     u537_20:
 22002  11E3                     i1l5524:
 22003                           
 22004                           ;eusart.c: 189: {;eusart.c: 190: eusartTxTail = 0;
 22005  11E3  01E3               	clrf	_eusartTxTail	;volatile
 22006  11E4                     i1l5526:
 22007                           
 22008                           ;eusart.c: 191: };eusart.c: 192: eusartTxBufferRemaining++;
 22009  11E4  3001               	movlw	1
 22010  11E5  00F0               	movwf	??_EUSART_Transmit_ISR
 22011  11E6  0870               	movf	??_EUSART_Transmit_ISR,w
 22012  11E7  0021               	movlb	1	; select bank1
 22013  11E8  07DA               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 22014                           
 22015                           ;eusart.c: 193: }
 22016  11E9  29EC               	goto	i1l848
 22017  11EA                     i1l845:
 22018                           
 22019                           ;eusart.c: 194: else;eusart.c: 195: {;eusart.c: 196: PIE3bits.TXIE = 0;
 22020  11EA  002E               	movlb	14	; select bank14
 22021  11EB  1219               	bcf	25,4	;volatile
 22022  11EC                     i1l848:
 22023  11EC  0008               	return
 22024  11ED                     __end_of_EUSART_Transmit_ISR:
 22025                           
 22026                           	psect	text83
 22027  113F                     __ptext83:	
 22028 ;; *************** function _EUSART_Receive_ISR *****************
 22029 ;; Defined at:
 22030 ;;		line 200 in file "mcc_generated_files/eusart.c"
 22031 ;; Parameters:    Size  Location     Type
 22032 ;;		None
 22033 ;; Auto vars:     Size  Location     Type
 22034 ;;		None
 22035 ;; Return value:  Size  Location     Type
 22036 ;;                  1    wreg      void 
 22037 ;; Registers used:
 22038 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 22039 ;; Tracked objects:
 22040 ;;		On entry : 0/0
 22041 ;;		On exit  : 0/0
 22042 ;;		Unchanged: 0/0
 22043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22047 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22048 ;;Total ram usage:        1 bytes
 22049 ;; Hardware stack levels used:    1
 22050 ;; This function calls:
 22051 ;;		Nothing
 22052 ;; This function is called by:
 22053 ;;		_EUSART_Initialize
 22054 ;;		_INTERRUPT_InterruptManager
 22055 ;; This function uses a non-reentrant model
 22056 ;;
 22057                           
 22058                           
 22059                           ;psect for function _EUSART_Receive_ISR
 22060  113F                     _EUSART_Receive_ISR:
 22061  113F                     i1l5528:	
 22062                           ;incstack = 0
 22063                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 22064                           
 22065                           
 22066                           ;eusart.c: 203: if(1 == RC1STAbits.OERR)
 22067  113F  0022               	movlb	2	; select bank2
 22068  1140  1C9D               	btfss	29,1	;volatile
 22069  1141  2943               	goto	u538_21
 22070  1142  2944               	goto	u538_20
 22071  1143                     u538_21:
 22072  1143  2946               	goto	i1l5532
 22073  1144                     u538_20:
 22074  1144                     i1l5530:
 22075                           
 22076                           ;eusart.c: 204: {;eusart.c: 207: RC1STAbits.CREN = 0;
 22077  1144  121D               	bcf	29,4	;volatile
 22078                           
 22079                           ;eusart.c: 208: RC1STAbits.CREN = 1;
 22080  1145  161D               	bsf	29,4	;volatile
 22081  1146                     i1l5532:
 22082                           
 22083                           ;eusart.c: 209: };eusart.c: 212: eusartRxBuffer[eusartRxHead++] = RC1REG;
 22084  1146  0819               	movf	25,w	;volatile
 22085  1147  00F0               	movwf	??_EUSART_Receive_ISR
 22086  1148  0021               	movlb	1	; select bank1
 22087  1149  083B               	movf	_eusartRxHead^(0+128),w
 22088  114A  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 22089  114B  0086               	movwf	6
 22090  114C  3002               	movlw	2	; select bank4/5
 22091  114D  0087               	movwf	7
 22092  114E  0870               	movf	??_EUSART_Receive_ISR,w
 22093  114F  0081               	movwf	1
 22094  1150                     i1l5534:
 22095  1150  3001               	movlw	1
 22096  1151  00F0               	movwf	??_EUSART_Receive_ISR
 22097  1152  0870               	movf	??_EUSART_Receive_ISR,w
 22098  1153  07BB               	addwf	_eusartRxHead^(0+128),f	;volatile
 22099  1154                     i1l5536:
 22100                           
 22101                           ;eusart.c: 213: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 22102  1154  3040               	movlw	64
 22103  1155  023B               	subwf	_eusartRxHead^(0+128),w	;volatile
 22104  1156  1C03               	skipc
 22105  1157  2959               	goto	u539_21
 22106  1158  295A               	goto	u539_20
 22107  1159                     u539_21:
 22108  1159  295B               	goto	i1l5540
 22109  115A                     u539_20:
 22110  115A                     i1l5538:
 22111                           
 22112                           ;eusart.c: 214: {;eusart.c: 215: eusartRxHead = 0;
 22113  115A  01BB               	clrf	_eusartRxHead^(0+128)	;volatile
 22114  115B                     i1l5540:
 22115                           
 22116                           ;eusart.c: 216: };eusart.c: 217: eusartRxCount++;
 22117  115B  3001               	movlw	1
 22118  115C  00F0               	movwf	??_EUSART_Receive_ISR
 22119  115D  0870               	movf	??_EUSART_Receive_ISR,w
 22120  115E  07B9               	addwf	_eusartRxCount^(0+128),f	;volatile
 22121  115F                     i1l853:
 22122  115F  0008               	return
 22123  1160                     __end_of_EUSART_Receive_ISR:
 22124  007E                     btemp	set	126	;btemp
 22125  007E                     int$flags	set	126
 22126  007E                     wtemp0	set	126
 22127                           
 22128                           	psect	config
 22129                           
 22130                           ;Config register CONFIG1 @ 0x8007
 22131                           ;	External Oscillator mode selection bits
 22132                           ;	FEXTOSC = OFF, Oscillator not enabled
 22133                           ;	Power-up default value for COSC bits
 22134                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
 22135                           ;	Clock Out Enable bit
 22136                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
 22137                           ;	Clock Switch Enable bit
 22138                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 22139                           ;	Fail-Safe Clock Monitor Enable bit
 22140                           ;	FCMEN = ON, FSCM timer enabled
 22141  8007                     	org	32775
 22142  8007  3FEC               	dw	16364
 22143                           
 22144                           ;Config register CONFIG2 @ 0x8008
 22145                           ;	Master Clear Enable bit
 22146                           ;	MCLRE = ON, MCLR pin is Master Clear function
 22147                           ;	Power-up Timer Enable bit
 22148                           ;	PWRTE = OFF, PWRT disabled
 22149                           ;	Low-Power BOR enable bit
 22150                           ;	LPBOREN = OFF, ULPBOR disabled
 22151                           ;	Brown-out reset enable bits
 22152                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
 22153                           ;	Brown-out Reset Voltage Selection
 22154                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
 22155                           ;	Zero-cross detect disable
 22156                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
 22157                           ;	Peripheral Pin Select one-way control
 22158                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
 22159                           ;	Stack Overflow/Underflow Reset Enable bit
 22160                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
 22161                           ;	Background Debugger
 22162                           ;	DEBUG = OFF, Background Debugger disabled
 22163  8008                     	org	32776
 22164  8008  3FFF               	dw	16383
 22165                           
 22166                           ;Config register CONFIG3 @ 0x8009
 22167                           ;	WDT Period Select bits
 22168                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 22169                           ;	WDT operating mode
 22170                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
 22171                           ;	WDT Window Select bits
 22172                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 22173                           ;	WDT input clock selector
 22174                           ;	WDTCCS = SC, Software Control
 22175  8009                     	org	32777
 22176  8009  3F9F               	dw	16287
 22177                           
 22178                           ;Config register CONFIG4 @ 0x800A
 22179                           ;	UserNVM self-write protection bits
 22180                           ;	WRT = OFF, Write protection off
 22181                           ;	Scanner Enable bit
 22182                           ;	SCANE = available, Scanner module is available for use
 22183                           ;	Low Voltage Programming Enable bit
 22184                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
 22185  800A                     	org	32778
 22186  800A  3FFF               	dw	16383
 22187                           
 22188                           ;Config register CONFIG5 @ 0x800B
 22189                           ;	UserNVM Program memory code protection bit
 22190                           ;	CP = OFF, Program Memory code protection disabled
 22191                           ;	DataNVM code protection bit
 22192                           ;	CPD = OFF, Data EEPROM code protection disabled
 22193  800B                     	org	32779
 22194  800B  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    49
    Data        11
    BSS         196
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     58      69
    BANK1            80     18      59
    BANK2            80     32      65
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    main$3499$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    main$3499	const PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    cmd_rc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_rtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_rp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_ra@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_ir@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    S1885$0$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    memset@p1	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    memset@p	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[7]), STR_3(CODE[7]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> update_menuLCD@l(BANK1[3]), update_menuLCD@tt(BANK1[4]), update_menuLCD@str(BANK1[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_tri@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_trc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_aa@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_dtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_dac@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_mta@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_mmp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    cmd_sc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK2[20]), 

    sendMessage@buffer	PTR unsigned char  size(1) Largest target is 9
		 -> cmd_tri@buffEOM(BANK0[1]), cmd_tri@buffData(BANK0[5]), cmd_tri@buffInit(BANK0[4]), cmd_trc@buffEOM(BANK0[1]), 
		 -> cmd_trc@buffData(BANK0[5]), cmd_trc@buffInit(BANK0[3]), cmd_ir@buff(BANK0[7]), cmd_ra@buff(BANK0[9]), 
		 -> cmd_rp@buff(BANK0[5]), cmd_rtl@buff(BANK0[5]), cmd_rc@buff(BANK0[6]), sendERRORMessage@bufw(BANK0[4]), 
		 -> sendOKMessage@bufw(BANK0[4]), checkFlags@buff(BANK0[7]), 

    differenceBetweenTimePeriod@diff	PTR struct Time size(1) Largest target is 3
		 -> update_menuLCD@diff(BANK1[3]), 

    LCDstr@p	PTR unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[4]), update_menuLCD@l(BANK1[3]), update_menuLCD@tt(BANK1[4]), update_menuLCD@str(BANK1[8]), 

    S1885command_d$cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    commands.cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _Clock_ISR->___awdiv

Critical Paths under _main in BANK0

    _main->_editClock
    _main->_editLum
    _main->_editTemp
    _main->_toggleAlarms
    _toggleAlarms->_checkFlags
    _getch->_EUSART_Read
    _editTemp->_checkFlags
    _editLum->_checkFlags
    _editClock->_checkFlags
    _checkFlags->_update_menuLCD
    _wirteEEPROMinit->_DATAEE_WriteByte
    _update_menuLCD->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDstr->_LCDchar
    _LCDchar->_LCDsend2x4
    _LCDcmd->_LCDsend2x4
    _monitoring_TEMP_LUM->_DATAEE_WriteByte
    _tsttc->_WriteI2C
    _DATAEE_WriteByte->___wmul
    _cmd_tri->_sendERRORMessage
    _cmd_trc->_sendERRORMessage
    _DATAEE_ReadByte->___wmul
    _cmd_sc->_sendERRORMessage
    _cmd_sc->_sendOKMessage
    _cmd_mta->_sendERRORMessage
    _cmd_mta->_sendOKMessage
    _cmd_mmp->_sendERRORMessage
    _cmd_mmp->_sendOKMessage
    _cmd_dtl->_sendERRORMessage
    _cmd_dtl->_sendOKMessage
    _cmd_dac->_sendERRORMessage
    _cmd_dac->_sendOKMessage
    _cmd_aa->_sendERRORMessage
    _cmd_aa->_sendOKMessage
    _sendOKMessage->_sendMessage
    _sendERRORMessage->_sendMessage
    _sendMessage->_putch
    _putch->_EUSART_Write
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _LCDinit->_LCDsend2x4
    _LCDsend2x4->_WriteI2C
    _LCDsend->_WriteI2C

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR1_ISR->_Clock_ISR

Critical Paths under _main in BANK1

    _toggleAlarms->_update_menuLCD
    _editTemp->_update_menuLCD
    _editLum->_update_menuLCD
    _editClock->_update_menuLCD
    _checkFlags->_update_menuLCD

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0  266878
                                             57 BANK0      1     1      0
                                              0 BANK2     32    32      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                 _EUSART_is_rx_ready
            _INT_SetInterruptHandler
                            _LCDinit
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                  _SYSTEM_Initialize
           _TMR1_SetInterruptHandler
                     _TMR2_StopTimer
                             ___wmul
                         _checkFlags
                             _cmd_aa *
                            _cmd_dac *
                            _cmd_dtl *
                             _cmd_ir *
                            _cmd_mmp *
                            _cmd_mta *
                             _cmd_ra *
                             _cmd_rc *
                             _cmd_rp *
                            _cmd_rtl *
                             _cmd_sc *
                            _cmd_trc *
                            _cmd_tri *
                          _editClock
                            _editLum
                           _editTemp
                              _getch
                   _i2c1_driver_open
                             _memset
                       _toggleAlarms
 ---------------------------------------------------------------------------------
 (1) _toggleAlarms                                         1     1      0   38268
                                             56 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     785
                                              7 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getch                                                0     0      0      37
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _editTemp                                             1     1      0   38268
                                             56 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editLum                                              1     1      0   38268
                                             56 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editClock                                            1     1      0   38268
                                             56 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (2) _checkFlags                                           8     8      0   27856
                                             48 BANK0      8     8      0
                 _PWM6_LoadDutyValue
               _PWM_Output_D4_Enable
                           _S1button
                    _TMR2_StartTimer
                _monitoring_TEMP_LUM
                        _sendMessage
                     _update_menuLCD
                    _wirteEEPROMinit
 ---------------------------------------------------------------------------------
 (3) _wirteEEPROMinit                                      1     1      0    5887
                                             17 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _update_menuLCD                                      24    24      0   10412
                                             42 BANK0      6     6      0
                                              0 BANK1     18    18      0
                            _LCDchar
                             _LCDcmd
                             _LCDstr
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                     _TMR2_StopTimer
        _differenceBetweenTimePeriod
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             29    21      8    5128
                                             21 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     412
                                             15 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     421
                                              7 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _differenceBetweenTimePeriod                          8     1      7     811
                                              7 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (3) _TMR2_StopTimer                                       0     0      0       0
                          _TMR2_Stop
 ---------------------------------------------------------------------------------
 (4) _TMR2_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Disable                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_LoadDutyValue                                   4     2      2     422
                                              7 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _LCDstr                                               6     4      2    1467
                                             16 BANK0      6     4      2
                            _LCDchar
 ---------------------------------------------------------------------------------
 (4) _LCDchar                                              1     1      0    1042
                                             15 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               1     1      0    1042
                                             15 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _monitoring_TEMP_LUM                                  3     3      0    8133
                                             17 BANK0      3     3      0
           _ADCC_GetSingleConversion
                   _DATAEE_WriteByte
                             ___wmul
                              _tsttc
 ---------------------------------------------------------------------------------
 (4) _tsttc                                                2     2      0      99
                                              9 BANK0      2     2      0
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (5) _ReadI2C                                              1     1      0       0
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DATAEE_WriteByte                                     4     1      3    5887
                                             13 BANK0      4     1      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADCC_GetSingleConversion                             4     1      3      31
                                              7 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (4) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _S1button                                             1     1      0       0
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Enable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cmd_tri                                             27    24      3   10576
                                             22 BANK0     27    24      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_trc                                             27    24      3   10087
                                             22 BANK0     27    24      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2116
                                              7 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2    1592
                                             13 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _cmd_sc                                              11     8      3    6256
                                             22 BANK0     11     8      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rtl                                              9     6      3    2928
                                             22 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rp                                               9     6      3    2928
                                             22 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rc                                              10     7      3    2965
                                             22 BANK0     10     7      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ra                                              13    10      3    3076
                                             22 BANK0     13    10      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mta                                              3     0      3    5906
                                             22 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mmp                                              3     0      3    5906
                                             22 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ir                                              11     8      3    3002
                                             22 BANK0     11     8      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dtl                                              9     6      3    6129
                                             22 BANK0      9     6      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dac                                             11     8      3    6256
                                             22 BANK0     11     8      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_aa                                               4     1      3    5968
                                             22 BANK0      4     1      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (2) _sendOKMessage                                        6     6      0    2922
                                             16 BANK0      6     6      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (2) _sendERRORMessage                                     6     6      0    2922
                                             16 BANK0      6     6      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (3) _sendMessage                                          6     3      3    2743
                                             10 BANK0      6     3      3
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                              9 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         2     2      0      62
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     664
                    _ADCC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM6_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     211
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     211
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     211
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     211
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     242
                                              9 BANK0      1     1      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0    1073
                                             15 BANK0      1     1      0
                            _LCDsend
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (5) _LCDsend2x4                                           6     5      1    1011
                                              9 BANK0      6     5      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _LCDsend                                              2     2      0      62
                                              9 BANK0      2     2      0
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (6) _WriteI2C                                             2     2      0      31
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     996
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                            _INT_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     996
                   Absolute function *
                          _Clock_ISR *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Clock_ISR                                           7     7      0     756
                                              0 BANK0      7     7      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (11) ___awdiv                                             9     5      4     756
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (9) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (10) _INT_CallBack                                        0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
                             _S1_ISR *
 ---------------------------------------------------------------------------------
 (11) _S1_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
     ___wmul (ARG)
   _DATAEE_WriteByte
     ___wmul (ARG)
   _EUSART_is_rx_ready
   _INT_SetInterruptHandler
   _LCDinit
     _LCDsend
       _WriteI2C
     _LCDsend2x4
       _WriteI2C
   _PWM6_LoadDutyValue
   _PWM_Output_D4_Disable
   _SYSTEM_Initialize
     _ADCC_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM6_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
   _TMR1_SetInterruptHandler
   _TMR2_StopTimer
     _TMR2_Stop
   ___wmul
   _checkFlags
     _PWM6_LoadDutyValue
     _PWM_Output_D4_Enable
     _S1button
     _TMR2_StartTimer
       _TMR2_Start
     _monitoring_TEMP_LUM
       _ADCC_GetSingleConversion
       _DATAEE_WriteByte
         ___wmul (ARG)
       ___wmul
       _tsttc
         _ReadI2C
         _WriteI2C
     _sendMessage
       _putch
         _EUSART_Write
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _wirteEEPROMinit
       _DATAEE_WriteByte
         ___wmul (ARG)
   _cmd_aa *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dac *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dtl *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ir *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_mmp *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_mta *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ra *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rc *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rp *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rtl *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_sc *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_trc *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _cmd_tri *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _editClock *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editLum *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editTemp *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _getch *
     _EUSART_Read
   _i2c1_driver_open *
   _memset *
   _toggleAlarms *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _sendMessage
         _putch
           _EUSART_Write
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
       _S1_ISR *
   _TMR1_ISR *
     Absolute function(Fake) *
     _Clock_ISR *
       ___awdiv
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3A      45       5       86.2%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     12      3B       7       73.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     20      41       9       81.2%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Dec 15 12:23:25 2020

               ?_EUSART_SetRxInterruptHandler 0027                                             _t 005A  
                                          l30 158A                                            l22 10F6  
                                          l23 10F8                                            l33 1552  
                                          l42 1574                                            l26 10FE  
                                          l35 1557                                            l47 1588  
                                ___awdiv@sign 0076                                            _nr 0079  
                         ___wmul@multiplicand 0029                   __size_of_PWM6_LoadDutyValue 0019  
                           sendMessage@buffer 002C                                _update_menuLCD 037A  
                                         l128 14DD                                           l253 1F65  
                                         l182 1084                                           l185 1F3D  
                                         l409 10DF                                           l188 1F08  
                                         l540 1FD1                                           l620 1018  
                                         l525 1FFF                                           l439 1F46  
                                         l617 1F7F                                           l537 1FC5  
                                         l730 11C0                                           l811 12B1  
                                         l731 11C7                                           l734 1FAA  
                                         l662 1EE1                                           l647 1F9B  
                                         l760 1F8D                                           l832 12BA  
                                         l656 1EDB                                           l728 11BC  
                                         l817 1ED5                                           l833 12C4  
                                         l665 1EE9                                           l754 1F34  
                                         l842 1F00                                           l659 1EE5  
                                         l827 125C                                           l836 12DF  
                                         l839 1EED                                           l856 1F2B  
                                         l859 1F22                                           _PR2 028D  
                             _timer1ReloadVal 00D8                       __size_of_PMD_Initialize 0008  
                             _TMR2_Initialize 1F8E                                           wreg 0009  
                                ?_EUSART_Read 0070                                   ?_LCDsend2x4 0029  
                             __end_of_LCDchar 1F50                                          l1020 0D40  
                                        l1111 1530                                          l1031 0D79  
                                        l1032 0D7B                                          l1016 0D2F  
                                        l1050 0DCF                                          l1107 152A  
                                        l1043 0DB7                                          l1019 0D3E  
                                        l1108 152C                                          l1212 09B3  
                                        l1052 0DD3                                          l1044 0DBA  
                                        l1300 043F                                          l1221 09F3  
                                        l1231 1787                                          l1303 04B9  
                                        l1224 0A09                                          l1080 0E60  
                                        l1056 0DE7                                          l1312 04BF  
                                        l1400 16A5                                          l1225 0A0B  
                                        l1081 0E63                                          l1057 0DE9  
                                        l1049 0DCD                                          l1321 0571  
                                        l1090 0E7E                                          l1234 1F10  
                                        l1306 0474                                          l1243 1068  
                                        l1228 0A12                                          l1068 0E22  
                                        l1069 0E24                                          l1237 1F4F  
                                        l1309 04A4                                          l1421 13AD  
                                        l1510 0B30                                          l1086 0E76  
                                        l1262 1EDE                                          l1095 14EF  
                                        l1503 141B                                          l1511 0B43  
                                        l1087 0E78                                          l1407 16F9  
                                        l1096 14F1                                          l1256 1342  
                                        l1440 13AC                                          l1432 1378  
                                        l1345 0F5B                                          l2057 1458  
                                        l1337 05AB                                          l1506 1285  
                                        l1418 1711                                          l1450 130D  
                                        l1515 0C04                                          l1259 1ED8  
                                        l1371 15DD                                          l2067 1377  
                                        l1443 12E0                                          l2244 113E  
                                        l1197 0961                                          l1533 0D2E  
                                        l1373 15C1                                          l1365 0FFF  
                                        l1429 13E1                                          l1198 0963  
                                        l1382 11A3                                          l1462 1211  
                                        l1470 1180                                          l2238 07FD  
                                        l1286 093E                                          l1446 12F4  
                                        l1527 0C4A                                          l1456 104D  
                                        l1528 0C63                                          l1376 15E6  
                                        l1529 0C76                                          l1473 1236  
                                        l1459 10A2                                          l1467 17FF  
                                        l1483 10C0                                          l1491 0882  
                                        l1556 02B2                                          l1397 07EA  
                                        l1478 1032                                          l1486 149A  
                                        l1496 16A4                                          l1746 05C9  
                                        l1764 067C                                          l1781 0749  
                                        l6200 1536                                          l7000 1FA8  
                                        l1785 110A                                          l6210 1550  
                                        l7010 1247                                          l1787 111E  
                                        l6220 1569                                          l6212 155C  
                                        l7100 103D                                          l6300 07F4  
                                        l7020 1258                                          l7012 124C  
                                        l7004 1237                                          l6222 1579  
                                        l6206 153B                                          l7030 14F5  
                                        l6230 0946                                          l7110 1069  
                                        l7102 103E                                          l6310 1102  
                                        l6302 07FA                                          l7022 125A  
                                        l7014 1252                                          l7006 1237  
                                        l6208 1545                                          l7032 1504  
                                        l6240 0989                                          l6232 0952  
                                        l7120 1078                                          l7112 106C  
                                        l7104 1042                                          l6312 1106  
                                        l6400 11B6                                          l6304 07FC  
                                        l7040 074A                                          l7016 1253  
                                        l7008 123D                               __end_of_LCDinit 1788  
                                        l6218 155E                                          l7034 1508  
                                        l7026 14E0                                          l6250 09BA  
                                        l6242 098F                                          l6234 0967  
                                        l7122 107B                                          l7114 106F  
                                        l6410 1EFC                                          l7106 1087  
                                        l6314 110F                                          l6402 11B7  
                                        l6330 142D                                          l6322 141C  
                                        l7050 075D                                          l7042 0750  
                                        l7018 1255                                          l7130 1F5F  
                                        l7140 1ED3                                          l7036 1517  
                                        l7028 14E0                                          l6260 09F3  
                                        l6252 09C9                                          l6244 099E  
                                        l6236 0976                                          l6228 0941  
                                        l7220 1727                                          l7124 107E  
                                        l7116 1072                                          l7108 1097  
                                        l6316 1114                                          l6308 10FF  
                                        l6404 11B9                                          l6420 0D66  
                                        l6412 0D2F                                          l6340 1449  
                                        l6332 1431                                          l6324 141F  
                                        l7060 076C                                          l7052 075F  
                                        l7044 0753                                          l7300 13D4  
                                        l7132 1F60                                          l7038 151B  
                                        l6262 09FA                                          l6254 09CF  
                                        l6246 09A4                                          l6238 097A  
                                        l7230 1747                                          l7222 172B  
                                        l7214 1712                                          l7126 1081  
                                        l7118 1075                                          l6318 111A  
                                        l6406 11BB                                          l6270 10FD  
                                        l6430 0DA1                                          l6422 0D6A  
                                        l6414 0D44                                          l6342 144E  
                                        l6334 1435                                          l6326 1425  
                                        l6350 134A                                          l6510 05F7  
                                        l6502 05CE                                          l7070 077D  
                                        l7062 076E                                          l7054 0762  
                                        l7046 0755                                          l7310 1386  
                                        l7302 13D7                                          l7134 1F62  
                                        l6264 0A0F                                          l6256 09DE  
                                        l6248 09B3                                          l7240 176B  
                                        l7232 174F                                          l7224 1737  
                                        l7216 171B                                          l6280 12BF  
                                        l7400 082B                                          l6600 1EE2  
                                        l6408 11C1                                          l6440 0DFC  
                                        l6432 0DA8                                          l6424 0D7F  
                                        l6416 0D53                                          l6336 1444  
                                        l6328 1428                                          l6344 1454  
                                        l6360 1364                                          l6352 134D  
                                        l6520 062E                                          l6512 0606  
                                        l6504 05D7                                          l7080 07B2  
                                        l7072 0782                                          l7064 0773  
                                        l7048 075A                                          l7056 0764  
                                        l7312 138C                                          l7320 139F  
                                        l7304 13DF                                          l7144 1EEA  
                                        l7128 1F5A                                          l6258 09E4  
                                        l7242 1771                                          l7234 1753  
                                        l7226 173B                                          l7218 171F  
                                        l6602 1F2C                                          l6290 12DA  
                                        l6282 12C5                                          l7410 0853  
                                        l7402 082F                                          l6370 1FBE  
                                        l6266 10E0                                          l6450 0E37  
                                        l6442 0E00                                          l6434 0DBE  
                                        l6426 0D8E                                          l6418 0D57  
                                        l6274 1EDF                                          l6338 1448  
                                        l6362 1368                                          l6354 1352  
                                        l6530 0646                                          l6522 0635  
                                        l6514 060A                                          l6506 05E3  
                                        l6610 0883                                          l7090 07D3  
                                        l7082 07B3                                          l7074 079F  
                                        l7066 0776                                          l7058 0769  
                                        l7250 16B0                                          l7322 13A2  
                                        l7314 1392                                          l7306 137D  
                                        l7330 12F0                                          l7244 1777  
                                        l7236 175F                                          l7228 1743  
                                        l6604 1F1A                                          l6284 12CF  
                                        l6292 12DD                                          l6276 12B4  
                                        l7340 11ED                                          l7412 0860  
                                        l7404 083C                                          l7420 1646  
                                        l7500 0BB1                                          l6380 1FCA  
                                        l6372 1FC1                                          l6268 10EB  
                                        l6460 0E7C                                          l6452 0E3B  
                                        l6444 0E0F                                          l6436 0DD8  
                                        l6428 0D92                                          l6364 136D  
                                        l6356 1356                                          l6348 1343  
                                        l6540 0662                                          l6524 0639  
                                        l6508 05E6                                          l6700 04FE  
                                        l6620 0398                                          l6612 037A  
                                        l7092 07D9                                          l7084 07B8  
                                        l7076 07AA                                          l7068 0778  
                                        l7260 16CB                                          l7252 16B5  
                                        l7324 13AA                                          l7316 1393  
                                        l7308 1383                                          l7332 12FD  
                                        l6198 1533                                          l7246 177D  
                                        l7238 1763                                          l6606 1F23  
                                        l6286 12D3                                          l6278 12B4  
                                        l7342 1206                                          l7350 17BE  
                                        l7414 0868                                          l7406 0841  
                                        l7430 1682                                          l7422 165F  
                                        l7510 0BDC                                          l7502 0BB7  
                                        l6374 1FC2                                          l6390 11A4  
                                        l6454 0E4A                                          l6446 0E13  
                                        l6438 0DED                                          l6294 1F49  
                                        l6470 1053                                          l6358 135A  
                                        l6366 1373                                          l6550 0690  
                                        l6542 066C                                          l6526 063D  
                                        l6518 0616                                          l6710 0534  
                                        l6702 0511                                          l6630 03EB  
                                        l6622 03BC                                          l6614 0380  
                                        l7094 07DC                                          l7086 07BD  
                                        l7078 07AD                                          l7270 16E9  
                                        l7262 16D2                                          l7254 16BB  
                                        l7318 139C                                          l7326 12E5  
                                        l7334 1300                                          l6288 12D9  
                                        l7520 0C05                                          l7360 17EA  
                                        l7352 17C3                                          l7344 1788  
                                        l7416 0879                                          l7408 084E  
                                        l7432 168A                                          l7424 1663  
                                        l7440 13ED                                          l7504 0BC2  
                                        l7512 0BE1                                          l6608 1ED6  
                                        l6376 1FC3                                          l6392 11AC  
                                        l6456 0E51                                          l6448 0E28  
                                        l6800 0FDA                                          l6464 1F0B  
                                        l6384 1000                                          l6480 1326  
                                        l6472 130E                                          l6296 07ED  
                                        l6560 06A8                                          l6552 0693  
                                        l6544 0672                                          l6536 0648  
                                        l6528 0641                                          l6720 0554  
                                        l6712 053C                                          l6704 0521  
                                        l6640 0412                                          l6632 03F4  
                                        l6624 03D9                                          l6616 0389  
                                        l7096 07E6                                          l7088 07C3  
                                        l7272 16F0                                          l7264 16D9  
                                        l7256 16C2                                          l7248 16AA  
                                        l7280 1705                                          l7336 1303  
                                        l7328 12EB                                          l7098 1035  
                                        l7530 0C3C                                          l7522 0C0D  
                                        l7362 17F6                                          l7354 17D0  
                                        l7346 17AD                                          l7370 1212  
                                        l7418 087E                                          l7434 169B  
                                        l7426 1670                                          l7450 140E  
                                        l7442 13F4                                          l7514 0BEF  
                                        l7506 0BC7                                          l6386 1ED9  
                                        l6378 1FC4                                          l6394 11B0  
                                        l6458 0E67                                          l6810 0FEF  
                                        l6802 0FDC                                          l6466 104E  
                                        l6482 132C                                          l6474 130F  
                                        l6298 07EE                                          l6570 06CA  
                                        l6562 06AE                                          l6554 0697  
                                        l6546 0678                                          l6490 05B3  
                                        l6722 0559                                          l6714 0543  
                                        l6730 0572                                          l6706 0529  
                                        l6650 0437                                          l6642 0419  
                                        l6634 03FB                                          l6626 03DD  
                                        l6618 0391                                          l7282 1708  
                                        l7274 16F2                                          l7266 16DB  
                                        l7258 16C4                                          l7290 13BB  
                                        l7338 130B                                          l7610 00B6  
                                        l7602 0094                                          l6900 14DA  
                                        l7540 0C6F                                          l7532 0C42  
                                        l7524 0C1B                                          l7356 17D5  
                                        l7348 17B1                                          l7364 17FB  
                                        l7372 122B                                          l7380 102E  
                                        l7428 1675                                          l7436 16A0  
                                        l7452 1412                                          l7444 13F8  
                                        l7516 0BF4                                          l7508 0BDB  
                                        l7460 0B04                                          l6396 11B4  
                                        l6820 0FFD                                          l6812 0FF5  
                                        l6804 0FDE                                          l6468 104F  
                                        l6388 1EE6                                          l6484 1332  
                                        l6476 1315                                          l6580 06EC  
                                        l6572 06D1                                          l6564 06B5  
                                        l6556 069D                                          l6548 0687  
                                        l6492 05B9                                          l6740 0590  
                                        l6732 0579                                          l6724 0560  
                                        l6716 0549                                          l6708 0530  
                                        l6660 045D                                          l6652 0447  
                                        l6644 0421                                          l6636 0403  
                                        l6628 03E5                                          l7284 170F  
                                        l7268 16E2                                          l7276 16F9  
                                        l7292 13C1                                          l7700 0269  
                                        l7612 00B8                                          l7604 009E  
                                        l6910 1F3C                                          l6902 1F01  
                                        l7550 0C9F                                          l7542 0C7C  
                                        l7534 0C54                                          l7526 0C20  
                                        l7358 17E2                                          l7366 1160  
                                        l7374 1019                                          l7382 10A3  
                                        l7390 1459                                          l7454 1417  
                                        l7446 13FD                                          l7438 13E2  
                                        l7470 0B36                                          l7462 0B0C  
                                        l7518 0C00                                          l6830 15A2  
                                        l6822 158B                                          l6398 11B5  
                                        l6814 0FF7                                          l6806 0FE5  
                                        l6750 0E7F                                          l6486 1EDC  
                                        l6478 131C                                          l6590 0728  
                                        l6574 06D5                                          l6566 06B9  
                                        l6582 06F0                                          l6558 06A4  
                                        l6494 05C0                                          l6742 0596  
                                        l6734 057F                                          l6726 0565  
                                        l6718 054E                                          l6670 04A9  
                                        l6662 0462                                          l6654 044D  
                                        l6646 0427                                          l6638 0409  
                                        l7278 1702                                          l7294 13C7  
                                        l7286 13B2                                          l7710 0290  
                                        l7702 026F                                          l7630 00F1  
                                        l7614 00B9                                          l7606 00A1  
                                        l6920 1FFD                                          l6904 1F35  
                                        l6912 1F73                                          l7560 0CB1  
                                        l7552 0CAA                                          l7544 0C89  
                                        l7536 0C58                                          l7528 0C2D  
                                        l7368 1175                                          l7376 1021  
                                        l7384 10AF                                          l7392 1480  
                                        l7448 1407                                          l7456 125D  
                                        l7480 0B62                                          l7472 0B3C  
                                        l7464 0B18                                          l6840 15CF  
                                        l6832 15A5                                          l6824 1592  
                                        l6816 0FF9                                          l6808 0FEA  
                                        l6760 0F50                                          l6752 0E98  
                                        l6584 06F5                                          l6576 06DF  
                                        l6568 06C4                                          l6496 05C5  
                                        l6592 0731                                          l6488 05AE  
                                        l6744 059B                                          l6736 0584  
                                        l6728 056C                                          l6672 04AB  
                                        l6664 0480                                          l6656 0453  
                                        l6648 0430                                          l7296 13C8  
                                        l7288 13B8                                          l7712 0295  
                                        l7704 0275                                          l7640 01A5  
                                        l7632 00FF                                          l7624 00CC  
                                        l7616 00C6                                          l7608 00B4  
                                        l6906 1F38                                          l6914 1F7A  
                                        l6930 1F96                                          l6922 1F8E  
                                        l6850 1190                                          l7570 0CFA  
                                        l7562 0CD7                                          l7554 0CB0  
                                        l7538 0C69                                          l7378 1029  
                                        l7386 10B7                                          l7394 148B  
                                        l7458 127A                                          l7482 0B6F  
                                        l7474 0B4E                                          l7466 0B1E  
                                        l6842 15D2                                          l6826 1598  
                                        l6834 15A8                                          l6818 0FFC  
                                        l6770 0F78                                          l6762 0F56  
                                        l6754 0EA9                                          l6586 071D  
                                        l6578 06E5                                          l6594 0745  
                                        l6498 05CA                                          l6746 05A0  
                                        l6738 0589                                          l6690 04C9  
                                        l6674 04B2                                          l6666 049A  
                                        l6658 0458                                          l7298 13D1  
                                        l7714 029C                                          l7706 0281  
                                        l7722 02B2                                          l7650 01E4  
                                        l7642 01B1                                          l7626 00DE  
                                        l7618 00C8                                          l7634 0101  
                                        l6916 1FE9                                          l6908 1F39  
                                        l6860 14A5                                          l6940 10C8  
                                        l6932 1F98                                          l6924 1F91  
                                        l6852 1195                                          l7580 0D1A  
                                        l7572 0CFE                                          l7564 0CDB  
                                        l7548 0C8E                                          l7388 10BC  
                                        l7396 148F                                          l7484 0B7A  
                                        l7476 0B5D                                          l7468 0B22  
                                        l6844 15D9                                          l6836 15AF  
                                        l6828 159D                                          l6780 0F9E  
                                        l6772 0F7E                                          l6764 0F60  
                                        l6756 0EBA                                          l6588 0724  
                                        l6748 05A7                                          l6692 04DC  
                                        l6676 04B5                                          l6668 04A1  
                                        l7740 0322                                          l7732 02C9  
                                        l7724 02BA                                          l7716 02A8  
                                        l7708 0284                                          l7660 0222  
                                        l7652 01F1                                          l7644 01BD  
                                        l7636 0107                                          l7628 00E2  
                                        l6918 1FFB                                          l6870 14B0  
                                        l6862 14A7                                          l6854 149B  
                                        l6598 1F3E                                          l6950 10DC  
                                        l6942 10CA                                          l6934 10C1  
                                        l6926 1F92                                          l6846 1181  
                                        l7582 0D1E                                          l7574 0D02  
                                        l7566 0CE1                                          l7398 0806  
                                        l7494 0B80                                          l7486 0B7A  
                                        l6838 15BC                                          l6790 0FC8  
                                        l6782 0FA9                                          l6774 0F84  
                                        l6766 0F74                                          l6758 0F4A  
                                        l6694 04EC                                          l6686 04BF  
                                        l7590 112E                                          l7750 033C  
                                        l7742 032E                                          l7734 02E7  
                                        l7726 02C7                                          l7718 02AB  
                                        l7670 023C                                          l7662 022D  
                                        l7654 01FE                                          l7646 01CA  
                                        l7638 010C                                          l6960 1288  
                                        l6952 1F80                                          l6880 14C4  
                                        l6872 14B2                                          l6864 14A9  
                                        l6856 14A1                                          l6944 10D1  
                                        l6936 10C4                                          l6928 1F95  
                                        l6848 1185                                          l7576 0D11  
                                        l7568 0CEC                                          l7584 0D2A  
                                        l7496 0B9E                                          l7488 0B7E  
                                        l6792 0FCD                                          l6776 0F89  
                                        l6768 0F77                                          l6784 0FB4  
                                        l6696 04F4                                          l6688 04C3  
                                        l7592 1132                                          l7760 0358  
                                        l7752 0342                                          l7744 032E  
                                        l7736 0303                                          l7680 0244  
                                        l7672 023D                                          l7664 0238  
                                        l7656 020B                                          l7648 01D7  
                                        _ALAF 007C                                          l6970 12A1  
                                        l6962 1290                                          l6954 1F83  
                                        l6890 14CF                                          l6882 14C6  
                                        l6874 14B4                                          l6866 14AB  
                                        l6858 14A3                                          l6946 10D3  
                                        l6938 10C6                                          l7578 0D14  
                                        l7498 0BAD                                          l6794 0FD3  
                                        l6786 0FBA                                          l6778 0F9D  
                                        l6698 04F8                                          l7586 1121  
                                        l7762 035C                                          l7754 0346  
                                        l7738 0315                                          l7746 0331  
                                        l7690 024C                                          l7682 0246  
                                        l7674 023E                                          l7666 023A  
                                        l7658 0217                                          l6980 12AC  
                                        l6972 12A3                                          l6964 129A  
                                        l6956 1F8B                                          l6892 14D1  
                                        l6884 14C8                                          l6876 14C0  
                                        l6868 14AE                                          l6948 10D4  
                                        l6796 0FD5                                          l6788 0FC2  
                                        l7588 1126                                          l7764 0363  
                                        l7756 034D                                          l7748 0338  
                                        l7692 0257                                          l7684 0247  
                                        l7676 0241                                          l7668 023B  
                                        l6982 12AD                                          l6974 12A4  
                                        l6966 129D                                          l6958 1286  
                                        l6894 14D4                                          l6886 14CA  
                                        l6878 14C2                                          l6990 1FA0  
                                        l6798 0FD7                                          l7766 0367  
                                        l7758 0351                                          l7694 025A  
                                        l7686 024A                                          l7678 0243  
                             __end_of_LCDsend 1531                                          l6984 12AE  
                                        l6976 12A6                                          l6968 129F  
                                        l6896 14D6                                          l6888 14CD  
                                        l6992 1FA4                                          l7768 0374  
                                        l7696 025B                                          l7688 024B  
                                        l6986 12AF                                          l6978 12A7  
                                        l6898 14D8                                          l6994 1FA5  
                                        l7698 0263                                          l6996 1FA6  
                                        l6988 1F9C                                          l6998 1FA7  
                                        STR_1 1827                                          STR_2 1827  
                                        STR_3 1840                                          STR_4 1840  
                                        STR_5 1847                                          STR_6 1847  
                                        STR_7 184C                                          _LATA 0016  
                                        _LATB 0017                               __end_of_INT_ISR 1EF4  
                                        _LATC 0018                                          _LATD 0019  
                                        _LATE 001A                                          _T2PR 028D  
                                        u7010 111A                                          u7011 1119  
                                        u7020 1425                                          _PMD0 0796  
                                        u7005 1110                                          u7021 1424  
                                        _PMD1 0797                                          u7110 135A  
                                        _PMD2 0798                                          u7111 1359  
                                        _PMD3 0799                                          u7200 0D53  
                                        u8000 0F9D                                          u7040 1435  
                                        u7120 1364                                          _PMD4 079A  
                                        u7201 0D52                                          u8001 0F9C  
                                        u7041 1434                                          u7121 1363  
                                        u7105 134E                                          _PMD5 079B  
                                        u7210 0D66                                          u8010 0FBA  
                                        u7211 0D65                                          u8011 0FB9  
                                        u7035 1429                                          u8100 159D  
                                        u7300 0DD8                                          u7220 0D79  
                                        u8020 0FC2                                          u7060 1444  
                                        u7140 1373                                          u8101 159C  
                                        u7301 0DD7                                          u7221 0D78  
                                        u8021 0FC1                                          u8005 0F99  
                                        u7061 1443                                          u7141 1372  
                                        u7125 1360                                          u8110 15A2  
                                        u7150 1FCA                                          u7310 0DE7  
                                        u7230 0D7F                                          u8030 0FC8  
                                        u8111 15A1                                          u7151 1FC9  
                                        u7311 0DE6                                          u7231 0D7E  
                                        u8031 0FC7                                          u7055 1436  
                                        u7135 1369                                          u8200 14F5  
                                        u9000 0868                                          u8120 15AF  
                                        u7400 0E67                                          u7320 0DED  
                                        u7240 0D8E                                          u8040 0FCD  
                                        u7080 1454                                          u8201 14F4  
                                        u9001 0867                                          u8121 15AE  
                                        u7401 0E66                                          u7321 0DEC  
                                        u7241 0D8D                                          u8041 0FCC  
                                        u7081 1453                                          u7065 1440  
                                        u8210 1504                                          u9010 1663  
                                        u8130 15BC                                          u7170 11C0  
                                        u7410 0E76                                          u7330 0DFC  
                                        u7250 0DA1                                          u8050 0FE5  
                                        u7090 134A                                          u8211 1503  
                                        u9011 1662                                          u8131 15BB  
                                        u7171 11BF                                          u7411 0E75  
                                        u7331 0DFB                                          u7251 0DA0  
                                        u8051 0FE4                                          u7075 144A  
                                        u7091 1349                                          u6700 1545  
                                        u8220 1517                                          u9020 1670  
                                        u9100 0B0C                                          u8140 15CF  
                                        u7420 0E7C                                          u7340 0E0F  
                                        u7260 0DB7                                          u7180 0D3E  
                                        u8060 0FEA                                          u7500 0661  
                                        u8300 0782                                          u6701 1544  
                                        u8221 1516                                          u9021 166F  
                                        u9101 0B0B                                          u8141 15CE  
                                        u7421 0E7B                                          u7341 0E0E  
                                        u7261 0DB6                                          u7181 0D3D  
                                        u8061 0FE9                                          u7165 1011  
                                        u7501 0660                                          u8301 0781  
                                        _TALA 00D6                                          u6710 1550  
                                        u8230 152A                                          u9030 1675  
                                        u9110 0B22                                          u8150 15D9  
                                        u7350 0E22                                          u7270 0DBE  
                                        u7190 0D44                                          u8070 0FEF  
                                        u7430 1068                                          u7510 066C  
                                        u8310 07B2                                          u6711 154F  
                                        u8231 1529                                          u9031 1674  
                                        u9111 0B21                                          u8151 15D8  
                                        u8135 15B8                                          u7351 0E21  
                                        u7271 0DBD                                          u7191 0D43  
                                        u8071 0FEE                                          u7431 1067  
                                        u7511 066B                                          u8311 07B1  
                                        u6720 1557                                          u8240 1530  
                                        u6800 0967                                          u8160 11A3  
                                        u9200 0C2D                                          u9040 1682  
                                        u9120 0B36                                          u8080 1592  
                                        u7360 0E28                                          u7280 0DCD  
                                        u7440 131C                                          u7600 06DF  
                                        u7520 0672                                          u8320 07B8  
                                        u6721 1556                                          u8241 152F  
                                        u6801 0966                                          u8161 11A2  
                                        u9201 0C2C                                          u9041 1681  
                                        u9025 166C                                          u9121 0B35  
                                        u8145 15CB                                          u8081 1591  
                                        u7361 0E27                                          u7281 0DCC  
                                        u7441 131B                                          u7601 06DE  
                                        u7521 0671                                          u7505 065D  
                                        u8321 07B7                                          u6730 155C  
                                        u6810 0976                                          u9210 0C42  
                                        u9050 168A                                          u9130 0B3C  
                                        u8090 1598                                          u7370 0E37  
                                        u7290 0DD3                                          u7450 1332  
                                        u7610 06E5                                          u7530 0678  
                                        u8330 07BD                                          u8250 0750  
                                        u8170 123D                                          u6731 155B  
                                        u6811 0975                                          u9211 0C41  
                                        u9051 1689                                          u9131 0B3B  
                                        u8091 1597                                          u7371 0E36  
                                        u7291 0DD2                                          u7451 1331  
                                        u7611 06E4                                          u7531 0677  
                                        u8331 07BC                                          u8251 074F  
                                        u8171 123C                                          u6740 1569  
                                        u6820 0989                                          u9300 0D1A  
                                        u9220 0C58                                          u9060 13ED  
                                        u9140 0B4E                                          u6900 10EB  
                                        u7380 0E4A                                          u7620 0731  
                                        u7540 0687                                          u7460 05B9  
                                        u7700 0427                                          u8340 07D3  
                                        u8260 075A                                          u8180 1252  
                                        u6741 1568                                          u6821 0988  
                                        u8165 119F                                          u9301 0D19  
                                        u9221 0C57                                          u9205 0C29  
                                        u9045 167E                                          u9061 13EC  
                                        u9141 0B4D                                          u6901 10EA  
                                        u7381 0E49                                          u7621 0730  
                                        u7541 0686                                          u7461 05B8  
                                        u7701 0426                                          u8341 07D2  
                                        u8261 0759                                          u8181 1251  
                                        u6750 1574                                          u8190 14EF  
                                        u6830 099E                                          u9230 0C69  
                                        u9070 13F4                                          u9150 0B5D  
                                        u6910 10F6                                          u7390 0E60  
                                        u7630 0745                                          u7550 0697  
                                        u7470 05E3                                          u7710 0437  
                                        u8270 0769                                          u8350 1F5F  
                                        u9310 113E                                          u6751 1573  
                                        u8191 14EE                                          u6831 099D  
                                        u9231 0C68                                          u9071 13F3  
                                        u9151 0B5C                                          u6911 10F5  
                                        u7391 0E5F                                          u7631 0744  
                                        u7551 0696                                          u7471 05E2  
                                        u7711 0436                                          u8271 0768  
                                        u8351 1F5E                                          u9311 113D  
                                        u6760 1579                                          u6840 09B3  
                                        u9240 0C6F                                          u9080 1407  
                                        u9160 0BB7                                          u6920 10FD  
                                        u7560 069D                                          u7480 0616  
                                        u7800 04C9                                          u7720 044D  
                                        u7640 0380                                          u8280 0773  
                                        u9400 0275                                          u9320 00C6  
                                        u6761 1578                                          u6841 09B2  
                                        u9241 0C6E                                          u9081 1406  
                                        u9161 0BB6                                          u9145 0B4A  
                                        u6921 10FC                                          u7561 069C  
                                        u7545 0683                                          u7481 0615  
                                        u7801 04C8                                          u7721 044C  
                                        u7641 037F                                          u8345 07CF  
                                        u8281 0772                                          u9401 0274  
                                        u9321 00C5                                          _NREG 007D  
                                        u6770 1588                                          u6690 153A  
                                        u6850 09C9                                          u6930 12BA  
                                        u9250 0C7C                                          u9090 140E  
                                        u9170 0BDB                                          u7570 06AE  
                                        u7490 063D                                          u7810 04FE  
                                        u7730 0453                                          u7650 0398  
                                        u8290 077D                                          u9410 029C  
                                        u9330 00F1                                          u6771 1587  
                                        u6691 1539                                          u6851 09C8  
                                        u6931 12B9                                          u9251 0C7B  
                                        u9091 140D                                          u9171 0BDA  
                                        u9155 0B59                                          u7571 06AD  
                                        u7491 063C                                          u7811 04FD  
                                        u7731 0452                                          u7651 0397  
                                        u8291 077C                                          u9411 029B  
                                        u9331 00F0                                          u6860 09DE  
                                        u6940 12BF                                          u9260 0C89  
                                        u9180 0BEF                                          u7580 06C3  
                                        u7900 0590                                          u7820 0530  
                                        u7740 0458                                          u7660 03EB  
                                        u8700 16F0                                          u9500 0358  
                                        u9420 02B1                                          u9340 00FF  
                                        u6861 09DD                                          u6941 12BE  
                                        u9261 0C88                                          u9181 0BEE  
                                        u7581 06C2                                          u7901 058F  
                                        u7821 052F                                          u7741 0457  
                                        u7661 03EA                                          u8701 16EF  
                                        u9501 0357                                          u9421 02B0  
                                        u9341 00FE                                          u6870 09F3  
                                        u6790 0961                                          u6950 12D9  
                                        u9270 0CE1                                          u9190 0C0D  
                                        u7590 06CA                                          u7910 0596  
                                        u7830 0543                                          u7750 045D  
                                        u7670 03FB                                          u8710 170F  
                                        u8630 16AA                                          u9510 0363  
                                        u9430 02BA                                          u9350 0107  
                                        u6871 09F2                                          u6791 0960  
                                        u6951 12D8                                          u9271 0CE0  
                                        u9191 0C0C                                          u9175 0BD7  
                                        u7591 06C9                                          u7911 0595  
                                        u7831 0542                                          u7751 045C  
                                        u7671 03FA                                          u8711 170E  
                                        u8631 16A9                                          u9511 0362  
                                        u9431 02B9                                          u9351 0106  
                                        u9335 00ED                                          u6880 0A09  
                                        u9280 0CFA                                          u6960 07F4  
                                        u7920 05A7                                          u7840 0549  
                                        u7760 0462                                          u7680 0409  
                                        u8640 16B0                                          u8720 13B2  
                                        u8800 12E5                                          u9520 0374  
                                        u9440 02C7                                          u9360 010C  
                                        u6881 0A08                                          u6785 0949  
                                        u9281 0CF9                                          u9265 0C85  
                                        u9185 0BEB                                          u6961 07F3  
                                        u7921 05A6                                          u7841 0548  
                                        u7761 0461                                          u7681 0408  
                                        u8641 16AF                                          u8721 13B1  
                                        u8801 12E4                                          u9521 0373  
                                        u9441 02C6                                          u9361 010B  
                                        u6890 0A0F                                          u9290 0D11  
                                        u6970 07FA                                          u7850 0554  
                                        u7770 04A1                                          u7690 0419  
                                        u8650 16BB                                          u8730 13B8  
                                        u8810 12EB                                          u9450 02E7  
                                        u9370 0254                                          u6891 0A0E  
                                        u9291 0D10                                          u6971 07F9  
                                        u7851 0553                                          u7771 04A0  
                                        u7691 0418                                          u8651 16BA  
                                        u8731 13B7                                          u8811 12EA  
                                        u9451 02E6                                          u6980 1106  
                                        u8900 1021                                          u7940 0EA9  
                                        u7860 0560                                          u7780 04A9  
                                        u8660 16C2                                          u8740 13C7  
                                        u8820 130B                                          u9460 0322  
                                        u9380 0269                                          u6981 1105  
                                        u9285 0CF6                                          u8901 1020  
                                        u7941 0EA8                                          u7861 055F  
                                        u7781 04A8                                          u8661 16C1  
                                        u8741 13C6                                          u8821 130A  
                                        u9525 0370                                          u9461 0321  
                                        u9381 0268                                          u8830 17B1  
                                        u8910 10AF                                          u7950 0EBA  
                                        u7870 056C                                          u7790 04BE  
                                        u8670 16D2                                          u8750 13DF  
                                        u9470 0338                                          u9390 026F  
                                        u9607 1724                                          u9295 0D0D  
                                        u8831 17B0                                          u8911 10AE  
                                        u7951 0EB9                                          u7935 0E90  
                                        u7871 056B                                          u7791 04BD  
                                        u8671 16D1                                          u8751 13DE  
                                        u9471 0337                                          u9391 026E  
                                        u8840 17BE                                          u8920 1487  
                                        u7960 0F50                                          u7880 0579  
                                        u8680 16D9                                          u8760 137D  
                                        u9480 0342                                          u9617 172C  
                                        u8841 17BD                                          u8921 1485  
                                        u7961 0F4F                                          u7945 0EA5  
                                        u7881 0578                                          u8681 16D8  
                                        u8761 137C                                          u9537 12F8  
                                        u9481 0341                                          u8850 17C3  
                                        u8930 1488                                          u7970 0F56  
                                        u7890 057F                                          u8690 16E9  
                                        u8770 1383                                          u9490 034D  
                                        u9627 1738                                          u6995 110B  
                                        u8851 17C2                                          u7971 0F55  
                                        u7955 0EB6                                          u7891 057E  
                                        u8691 16E8                                          u8771 1382  
                                        u9547 13CC                                          u9491 034C  
                                        u8860 17D0                                          u8940 082F  
                                        u7980 0F74                                          u8780 1392  
                                        u9637 1740                                          u8861 17CF  
                                        u8845 17BA                                          u8941 082E  
                                        u7981 0F73                                          u9557 1397  
                                        u8781 1391                                          u8870 17D5  
                                        u8950 083C                                          u7990 0F7E  
                                        u8790 13AA                                          u9647 174C  
                                        u8871 17D4                                          u8951 083B  
                                        u7991 0F7D                                          u9567 16FD  
                                        u8791 13A9                                          u8880 17E2  
                                        u8960 0841                                          _PMON 00D7  
                                        u9657 1754                                          u8881 17E1  
                                        u8865 17CC                                          u8961 0840  
                                        u7985 0F70                                          u9577 07E7  
                                        u8890 17EA                                          u8970 084E  
                                        u9667 1760                                          u8891 17E9  
                                        u8971 084D                                          u8955 0838  
                                        u9587 15E1                                          u8980 0853  
                                        u9677 1768                                          u9597 1716  
                                        u8885 17DE                                          u8981 0852  
                                        u8990 0860                                          u9687 1784  
                                        u8991 085F                                          u8975 084A  
                                        u9697 0A10                                          _TMR2 028C  
                                        u8995 085C                                          _WPUA 0F39  
                                        _WPUB 0F44                                          _WPUC 0F4F  
                                        _WPUD 0F5A                                          _WPUE 0F65  
                                 main@notInit 0137                                          _main 0094  
                                        _temp 0062                                          fsr0h 0005  
                                        fsr1h 0007                                          indf0 0000  
                                        fsr0l 0004                                          indf1 0001  
                                        fsr1l 0006                                          btemp 007E  
         __end_of_INT_DefaultInterruptHandler 0004                   _INT_DefaultInterruptHandler 0003  
                                        start 0052                                cmd_dtl@tempAux 003B  
             __end_of_INT_SetInterruptHandler 1F35                    ??_TMR1_SetInterruptHandler 0029  
                             __end_of_ReadI2C 10FF                     __size_of_DATAEE_WriteByte 0024  
                      __end_of_update_menuLCD 05AC                                 ?_EUSART_Write 0070  
              __size_of_OSCILLATOR_Initialize 0009                 __end_of_OSCILLATOR_Initialize 1F3E  
                                       _ADACQ 009D                                         _ADCAP 009B  
                                       _ADACT 0099                      __end_of_i2c1_driver_open 1F66  
                                       ?_main 0070                                         _ADCLK 0098  
                                       _ADCNT 010C                                         _ADPCH 009E  
                                       _ADREF 009A                               __end_of___awdiv 1646  
                                       _ADPRE 009C                                         _ADRPT 010D  
                                       _T1CLK 0211                               ___awdiv@divisor 0070  
                                       _T1CON 020E                                         _T2CON 028E  
                                       _T2HLT 028F                               __end_of___lwdiv 1459  
                                       _T2TMR 028C                                         _T2RST 0291  
                                       i1l423 1FBB                               __end_of___lwmod 1378  
                                       i1l442 07FF                                         i1l371 0041  
                                       i1l436 1FE8                                         i1l372 0050  
                                       i1l364 0013                                         i1l373 004A  
                                       i1l367 0026                                         i1l369 0035  
                                       i1l378 0050                                         i1l751 1F72  
                                       i1l747 1EF3                                         i1l853 115F  
                                       i1l845 11EA                                         i1l757 0003  
                                       i1l848 11EC                               ___awdiv@counter 0075  
                                       _OSCEN 0891                                         _TMR1H 020D  
                    __size_of_wirteEEPROMinit 00BC                                         _TMR1L 020C  
                                       _TRISA 0011                                         _TRISB 0012  
                                       _TRISC 0013                                         _TRISD 0014  
                                       _TRISE 0015                                         _WPUC3 7A7B  
                                       _WPUC4 7A7C                                         _RXPPS 0ECB  
                             __end_of_cmd_dac 0883                               __end_of_editLum 13AD  
                             __end_of_cmd_dtl 16A5                               _PWM6_Initialize 1F73  
                             __end_of_cmd_mta 10C1                               __end_of_cmd_mmp 1033  
                             __end_of_cmd_trc 0C05                               __end_of_cmd_rtl 1181  
                             __end_of_cmd_tri 0D2F                              __end_of_TMR1_ISR 1FE9  
                            __end_of_S1button 15E7                               _DATAEE_ReadByte 1F9C  
                                       _getch 1EEA                               __end_of_dpowers 1840  
                          __size_of_TMR2_Stop 0003                                   ?_TMR2_Start 0070  
                                       _iread 007B                               __end_of_isdigit 07FE  
                                       _putch 1EFA                                         main@c 013B  
                                       main@i 0139                                         main@n 013E  
                                       _tsttc 0D2F                       __end_of_TMR1_Initialize 10E0  
                                       pclath 000A                                         status 0003  
                                       wtemp0 007E                               __end_of_sprintf 074A  
                      ??_PWM_Output_D4_Enable 0027                               _TMR2_StartTimer 1EE2  
                             _TMR1_WriteTimer 1FAB                               __initialization 0054  
                                __end_of_main 037A                           __size_of_LCDsend2x4 00D4  
                              ??_EUSART_Write 0027                               ?_update_menuLCD 0070  
                     __end_of_TMR2_Initialize 1F9C                   ?_INTERRUPT_InterruptManager 0070  
              ??_EUSART_SetRxInterruptHandler 0029                                        ??_main 0059  
                             update_menuLCD@l 00C8                                  ?_sendMessage 002A  
                   __size_of_sendERRORMessage 001E                            __size_of_Clock_ISR 00F1  
            differenceBetweenTimePeriod@start 0027                                     ??_LCDchar 002F  
                                   ??_LCDinit 002F                                     ??_LCDsend 0029  
                                   ??_INT_ISR 0070                                        _ADACCH 0091  
                                      _ADACCL 0090                                        ?_getch 0070  
                                      _ADCON0 0093                                        _ADCON1 0094  
                                      _ADCON2 0095                                        _ADCON3 0096  
                                      _ADERRH 0117                                        _ADERRL 0116  
                                      _ADLTHH 010F                                        _ADLTHL 010E  
                                      _ADRESH 008D                                        _ADRESL 008C  
                                      _ADSTAT 0097                                        _ADUTHH 0111  
                            ___awdiv@dividend 0072                                        _ADUTHL 0110  
                            __end_of_WriteI2C 158B                                        _ANSELA 0F38  
                                      ?_putch 0070                                        _ANSELB 0F43  
                                      _ANSELC 0F4E                                        _ANSELD 0F59  
                                      _ANSELE 0F64                    __end_of_EUSART_is_rx_ready 1ED6  
                                      _T1GATE 0210                                        _T1GCON 020F  
                                      ?_tsttc 0070                                        _RC1REG 0119  
                                      _RC1STA 011D                                        _RA6PPS 0F16  
                                      _RC3PPS 0F23                       TMR1_WriteTimer@timerVal 0070  
                                      _RC4PPS 0F24                                        i1l1271 0A6A  
                                      _ODCONA 0F3A                                        i1l1274 0ADF  
                                      _ODCONB 0F45                                        i1l1283 0B03  
                                      _ODCONC 0F50                                        _RC6PPS 0F26  
                                      _ODCOND 0F5B                                        i1l1453 1F19  
                                      _ODCONE 0F66                                        i1l5100 15F1  
                                      i1l5110 1602                                        i1l5102 15F3  
                                      i1l5120 1618                                        i1l5112 1608  
                                      i1l5104 15F7                                        i1l6000 001B  
                                      i1l5122 1627                                        i1l5114 160B  
                                      i1l5130 1637                                        i1l5106 15FC  
                                      i1l6010 003D                                        i1l6002 001F  
                                      i1l5132 163C                                        i1l5124 162B  
                                      i1l5116 1610                                        i1l5108 1600  
                                      i1l6012 0045                                        i1l6004 002A  
                                      i1l5302 1F66                                        i1l5134 1641  
                                      i1l5126 162C                                        i1l5118 1614  
                                      i1l6006 002E                                        i1l5304 1F6D  
                                      i1l5128 1631                                        i1l6016 004E  
                                      i1l6008 0039                                        i1l1938 1645  
                                      i1l5092 1F11                                        i1l5500 1FD2  
                                      i1l5094 15E7                                        i1l5350 0A26  
                                      i1l5342 0A13                                        i1l5502 1FD4  
                                      i1l5520 11D8                                        i1l5096 15E8  
                                      i1l5360 0A39                                        i1l5352 0A2D  
                                      i1l5344 0A1E                                        i1l5280 1FB5  
                                      i1l5272 1FAB                                        i1l5504 1FDC  
                                      i1l5530 1144                                        i1l5522 11DD  
                                      i1l5098 15EC                                        i1l5370 0A5D  
                                      i1l5362 0A3F                                        i1l5354 0A31  
                                      i1l5346 0A22                                        i1l5274 1FB0  
                                      i1l5282 1FB7                                        i1l5506 1FE3  
                                      i1l5540 115B                                        i1l5532 1146  
                                      i1l5524 11E3                                        i1l5516 11C8  
                                      i1l5380 0AAF                                        i1l5372 0A62  
                                      i1l5364 0A47                                        i1l5356 0A32  
                                      i1l5348 0A23                                        i1l5284 1FB9  
                                      i1l5276 1FB1                                        i1l5534 1150  
                                      i1l5526 11E4                                        i1l5518 11CF  
                                      i1l5390 0AF4                                        i1l5382 0AB5  
                                      i1l5374 0A70                                        i1l5366 0A4F  
                                      i1l5358 0A38                                        i1l5278 1FB3  
                                      i1l5536 1154                                        i1l5528 113F  
                                      i1l5392 0B00                                        i1l5384 0AE3  
                                      i1l5376 0A98                                        i1l5368 0A57  
                                      i1l5538 115A                                        i1l5394 0B01  
                                      i1l5386 0AE5                                        i1l5378 0AA9  
                                      i1l5388 0AF1                                        i1l5496 1EEE  
                                      i1l5498 1EF0                                        _S1_ISR 1F11  
                                      i1l5992 0006                                        i1l5994 000B  
                                      i1l5996 000F                                        i1l5998 0017  
                                      _LCDcmd 1F09                                        u510_20 0A3F  
                                      u510_21 0A3E                                        u511_20 0A47  
                                      u511_21 0A46                                        u520_20 0ADF  
                                      u512_20 0A4F                                        u520_21 0ADE  
                                      u512_21 0A4E                                        _INTPPS 0E90  
                                      u520_25 0ADB                                        u521_20 0AEF  
                                      u513_20 0A57                                        u521_21 0AEC  
                                      u513_21 0A56                                        u514_20 0A5D  
                                      u514_21 0A5C                                 main@corrupted 0138  
                                      u522_24 0AF1                                        u523_20 0B00  
                                      u515_20 0A70                                        u507_20 0A1E  
                                      u523_21 0AFF                                        u515_21 0A6F  
                                      u507_21 0A1D                                        u516_20 0A98  
                                      u508_20 0A2D                                        u516_21 0A97  
                                      u508_21 0A2C                                        u516_25 0A94  
                                      _LCDstr 104E                                        u517_20 0AA9  
                                      u509_20 0A38                                        u517_21 0AA8  
                                      u509_21 0A37                                        u518_20 0AAF  
                                      u518_21 0AAE                                        u519_20 0AB5  
                                      u535_20 1FE3                                        u519_21 0AB4  
                                      u535_21 1FE2                                        u536_20 11CF  
                                      u640_20 001F                                        u536_21 11CE  
                                      u640_21 001E                                        u537_20 11E3  
                                      u641_20 002A                                        u537_21 11E2  
                                      u641_21 0029                                        u538_20 1144  
                                      u642_20 002E                                        u538_21 1143  
                                      u642_21 002D                                        u490_25 160C  
                                      u539_20 115A                                        u491_20 1618  
                                      u643_20 0039                                        u539_21 1159  
                                      u491_21 1617                                        u643_21 0038  
                                      u644_20 003D                                        u636_20 000B  
                                      u644_21 003C                                        u636_21 000A  
                                      u492_25 1619                                        _OSCFRQ 0893  
                                      u493_20 1627                                        u645_20 0045  
                                      u637_20 000F                                        u493_21 1626  
                                      u645_21 0044                                        u637_21 000E  
                                      u493_25 1623                                        u646_20 0049  
                                      u638_20 0017                                        u646_21 0048  
                                      u638_21 0016                                        u494_25 162D  
                                      u495_20 1637                                        u487_20 15EC  
                                      u647_20 004E                                        u639_20 001B  
                                      u495_21 1636                                        u487_21 15EB  
                                      u647_21 004D                                        u639_21 001A  
                                      u496_20 163C                                        u488_20 15F7  
                                      u496_21 163B                                        u488_21 15F6  
                                      u489_20 1608                                        u497_20 1FB0  
                                      u489_21 1607                                        u497_21 1FAF  
                                      u498_20 1F6D                                        u498_21 1F6C  
                                      _PWM6EN 1C77                                        _TX1REG 011A  
                                      _TX1STA 011E                                     ??_ReadI2C 0027  
                            _writeEEPROM_flag 00B1                                        _PWM_on 00B5  
                                 LCDsend2x4@c 002C                              __end_of_editTemp 13E2  
        __end_of_TMR1_DefaultInterruptHandler 0800         __size_of_TMR1_DefaultInterruptHandler 0001  
                _TMR1_DefaultInterruptHandler 07FF                                  _CCPTMRS1bits 021F  
                            __end_of_commands 1827                                        ___wmul 10FF  
                                   ??___awdiv 0074                             __end_of_TMR2_Stop 1EE2  
                                      _cmd_aa 13E2                                        _cmd_ir 125D  
                                      _cmd_ra 1459                                        _cmd_rc 11ED  
                                      _cmd_sc 1788                                        _cmd_rp 1212  
                                      _flagNr 00AF                                     ??___lwdiv 002B  
                                   ??___lwmod 0033                           __size_of_TMR2_Start 0003  
                         _EUSART_Transmit_ISR 11C8                                        _memset 111F  
                     __end_of_PWM6_Initialize 1F80                              ___awdiv@quotient 0077  
                                   ??_cmd_dac 0039                                     ??_editLum 0058  
                                   ??_cmd_dtl 0039                                     ??_cmd_mta 0039  
                                   ??_cmd_mmp 0039                                        _iwrite 007A  
                                   ??_cmd_trc 0039                                     ??_cmd_rtl 0039  
                                   ??_cmd_tri 0039                  __size_of_monitoring_TEMP_LUM 0181  
                               ?_INT_CallBack 0070                       __end_of_DATAEE_ReadByte 1FAB  
                             _ADCC_Initialize 1FE9                                _PMD_Initialize 1F01  
                                __pdataCOMMON 007D                                     ??_isdigit 0027  
                           sendOKMessage@bufw 0032                            update_menuLCD@diff 00CB  
           __size_of_ADCC_GetSingleConversion 0016              __size_of_INT_SetInterruptHandler 0009  
                   ?_ADCC_GetSingleConversion 0027                       __end_of_TMR2_StartTimer 1EE6  
     INT_SetInterruptHandler@InterruptHandler 0027      TMR1_SetInterruptHandler@InterruptHandler 0027  
                                   ??_sprintf 003D                       __end_of_TMR1_WriteTimer 1FBC  
                           ??_wirteEEPROMinit 0031                       ??_PWM_Output_D4_Disable 0027  
                        ?_EUSART_Transmit_ISR 0070                              ?_TMR1_Initialize 0070  
                        __size_of_EUSART_Read 0026                             _SYSTEM_Initialize 1069  
                     __end_of__initialization 0090                                cmd_trc@address 0049  
                          ?_SYSTEM_Initialize 0070                             __end_of_Clock_ISR 0B04  
                              cmd_trc@buffEOM 004B          __end_of_EUSART_SetTxInterruptHandler 1F2C  
       __size_of_EUSART_SetTxInterruptHandler 0009                  _EUSART_SetTxInterruptHandler 1F23  
                          cmd_trc@maxReadings 004C                                __pcstackCOMMON 0070  
                                __pidataBANK1 1F50                           ??_SYSTEM_Initialize 002A  
                                   ?_TMR1_ISR 0070                 ?_TMR1_DefaultInterruptHandler 0070  
                               __end_of_getch 1EEE                                     ?_S1button 0070  
                            _DATAEE_WriteByte 11A4                                 __end_of_putch 1F01  
                          __size_of_editClock 006D               differenceBetweenTimePeriod@diff 002D  
                               __end_of_tsttc 0E7F                              ?_TMR2_Initialize 0070  
                              ??_INT_CallBack 0070               differenceBetweenTimePeriod@stop 002A  
                      __end_of_PMD_Initialize 1F09                                cmd_tri@buffEOM 0047  
                 __size_of_EXT_INT_Initialize 000E                                  ??_LCDsend2x4 002A  
                                     ??_getch 0029                     __end_of_SYSTEM_Initialize 1085  
                                  _checkFlags 074A                         ??_EUSART_Transmit_ISR 0070  
                                sprintf@width 0046                              update_menuLCD@tt 00C4  
                                     ??_putch 0029                                       ??_tsttc 0029  
                                  __pbssBANK0 005A                                    __pbssBANK1 00A0  
                                  __pbssBANK2 0140                                    __pbssBANK3 01A0  
                                  __pbssBANK4 0220                                       ?_S1_ISR 0070  
                                     ?_LCDcmd 0070                          __end_of_EUSART_Write 12E0  
                                     ?_LCDstr 0030                                  _flagS1pushed 00B4  
                                     LCDcmd@c 002F                   __size_of_EUSART_Receive_ISR 0021  
                                     LCDstr@c 0035                                       LCDstr@p 0030  
                                  __pmaintext 0094                 ?_EUSART_SetTxInterruptHandler 0027  
            _EUSART_TxDefaultInterruptHandler 015F                                       ?___wmul 0027  
                                  ??_TMR1_ISR 0079                                       ?_cmd_aa 0036  
                     __end_of_ADCC_Initialize 2000                    __end_of_PWM6_LoadDutyValue 1019  
                                     ?_cmd_ir 0036                                       ?_cmd_ra 0036  
                                     ?_cmd_rc 0036                                       ?_cmd_sc 0036  
                                     ?_cmd_rp 0036                                    ??_S1button 0027  
                                  __pintentry 0004                                       _ADFLTRH 0115  
                                     _ADFLTRL 0114                                       ?_memset 0027  
                          __end_of_LCDsend2x4 0A13                                       _ADPREVH 008F  
                                     _ADPREVL 008E                                     ?_WriteI2C 0070  
                            ?_PWM6_Initialize 0070                                       _ADSTPTH 0113  
                                     _ADSTPTL 0112                               ?_PMD_Initialize 0070  
                            _sendERRORMessage 1085                              ?_DATAEE_ReadByte 002D  
                           ?_i2c1_driver_open 0070                                 _eusartRxCount 00B9  
                                     _LCDchar 1F47                                       _LCDinit 1712  
                                     _SP1BRGH 011C                                       _SP1BRGL 011B  
                                     _LCDsend 14DE                          __size_of_sendMessage 0023  
                          ??_i2c1_driver_open 0027                                       _INT_ISR 1EEE  
                                     _OSCCON1 088D                                       _OSCCON3 088F  
                                   ?_editTemp 0070                        __size_of_sendOKMessage 001B  
                              checkFlags@buff 0051                                       _NVMADRH 081B  
                                     _NVMADRL 081A                                       _NVMDATH 081D  
                                     _OSCTUNE 0892                                       _NVMDATL 081C  
                                     _NVMCON2 081F                                       _PWM6DCH 038D  
                                     _PWM6DCL 038C                                       _PWM6CON 038E  
                                     _SSP1ADD 018D                                       _SLRCONA 0F3B  
                                     _SLRCONB 0F46                                       _SLRCONC 0F51  
                                     _SLRCOND 0F5C                                       _SLRCONE 0F67  
                                     _SSP1BUF 018C                                       _SSP1MSK 018E  
                                ??_TMR2_Start 0027                       __size_of_TMR2_StopTimer 0004  
                            ?_TMR2_StartTimer 0070                              ?_TMR1_WriteTimer 0070  
                                LCDsend2x4@hc 002D                                  LCDsend2x4@lc 002E  
                           __end_of_editClock 1712                               __size_of_S1_ISR 0009  
                             __size_of_LCDcmd 0008                          DATAEE_WriteByte@bAdd 002D  
                          _i2c1_driver_i2cISR 0157                               __size_of_LCDstr 001B  
                                     _ReadI2C 10E0                              ??_update_menuLCD 004A  
                                     ___awdiv 15E7                               __size_of___wmul 0020  
                                     ___lwdiv 141C                               __size_of_cmd_aa 003A  
                                     ___lwmod 1343                               __size_of_cmd_ir 0029  
                             __size_of_cmd_ra 0042                               __size_of_cmd_rc 0025  
                             __size_of_cmd_sc 0078                               __size_of_cmd_rp 0025  
                          __end_of_TMR2_Start 1EDC                                    ??_WriteI2C 0027  
                                     _cmd_dac 0806                               __size_of_memset 0020  
                                     _editLum 1378                                       _cmd_dtl 1646  
                                     _cmd_mta 10A3                                       _cmd_mmp 1019  
                                     _cmd_trc 0B04                                       _cmd_rtl 1160  
                                     _cmd_tri 0C05                                       __ptext1 12E0  
                                     __ptext2 111F                                       __ptext3 1F5A  
                                     __ptext4 1EEA                                       __ptext5 1237  
                                     __ptext6 13AD                                       __ptext7 1378  
                                     __ptext8 16A5                                       __ptext9 074A  
              ??_TMR1_DefaultInterruptHandler 0070                                     _T1CONbits 020E  
                               cmd_dac@buffer 0038                                       _dpowers 1836  
                       _OSCILLATOR_Initialize 1F35                                     _T2CONbits 028E  
                                     _isdigit 07EB                                    cmd_dac@num 0036  
           __size_of_TMR1_SetInterruptHandler 0009                                       cmd_sc@h 003B  
                                     cmd_sc@m 003D                                       cmd_sc@s 003F  
                    ??_PIN_MANAGER_Initialize 0027                     ?_TMR1_SetInterruptHandler 0027  
                                   _T2HLTbits 028F                       _INT_SetInterruptHandler 1F2C  
                                  ??_editTemp 0058                                    cmd_ir@buff 003A  
                                  cmd_ra@buff 003A                                    cmd_rc@buff 003A  
                  __size_of_SYSTEM_Initialize 001C                                   ?_checkFlags 0070  
                                     _sprintf 05AC                                       clrloop0 1EF5  
                                  cmd_dtl@num 0036                          end_of_initialization 0090  
                                   _T2RSTbits 0291                                    cmd_rp@buff 003A  
                                  cmd_mta@num 0036                                    cmd_mmp@num 0036  
                                     init_ram 0800                                       memset@c 0027  
                                     memset@n 0029                                       memset@p 002C  
                         _monitoring_TEMP_LUM 0E7F                                       initloop 0801  
                        __end_of_INT_CallBack 1F73                                    cmd_trc@num 0036  
                                  cmd_rtl@num 0036                                    cmd_tri@num 0036  
                           _EUSART_Initialize 1286                 __size_of_PWM_Output_D4_Enable 0003  
                               _sendOKMessage 1033                            ?_EUSART_Initialize 0070  
                          _EUSART_is_rx_ready 1ED3                  ?_differenceBetweenTimePeriod 0027  
                                  main@F13053 0140                              ?_ADCC_Initialize 0070  
            __end_of_ADCC_GetSingleConversion 1FD2                           ??_EUSART_Initialize 0029  
              ??_EUSART_SetTxInterruptHandler 0029                          ?_monitoring_TEMP_LUM 0070  
                         ?_EUSART_is_rx_ready 0070                                     _PORTCbits 000E  
                                   _TMR2_Stop 1EDF                               _wirteEEPROMinit 0883  
                                   _TRISCbits 0013                         __size_of_EUSART_Write 002E  
                               ?_toggleAlarms 0070                                    main@i_2535 013C  
                    __end_of_DATAEE_WriteByte 11C8                                 _alarmPWMStart 00CE  
              __size_of_PWM_Output_D4_Disable 0003                     __end_of_EUSART_Initialize 12B2  
                        ??_EUSART_is_rx_ready 0027                 __end_of_PWM_Output_D4_Disable 1EDF  
                              __end_of_S1_ISR 1F1A                                __end_of_LCDcmd 1F11  
                              __end_of_LCDstr 1069                               cmd_trc@buffData 003F  
                               cmd_dtl@buffer 0038                                LCDsend2x4@mode 0029  
                             cmd_trc@buffInit 0044                                 cmd_dtl@lumAux 003D  
                              ?_sendOKMessage 0070                        _sentMessageBufHalfFull 00AE  
                                   _Clock_ISR 0A13                              _monitor_TEMP_LUM 00B3  
                         __size_of_checkFlags 00A1                                __end_of___wmul 111F  
                              __end_of_cmd_aa 141C                                __end_of_cmd_ir 1286  
                              __end_of_cmd_ra 149B                                __end_of_cmd_rc 1212  
                              __end_of_cmd_sc 1800                                __end_of_cmd_rp 1237  
                               __pidataCOMMON 07FE                         ??_monitoring_TEMP_LUM 0031  
                                _EUSART_Write 12B2                             __size_of_TMR1_ISR 0017  
                           __size_of_S1button 005C                                    ?_TMR2_Stop 0070  
                      ?_OSCILLATOR_Initialize 0070                                __end_of_memset 113F  
                   ??_INT_SetInterruptHandler 0029                               main@checkSumAux 0136  
                         start_initialization 0054                                ??_toggleAlarms 0058  
             __size_of_PIN_MANAGER_Initialize 0043                                _TMR2_StopTimer 1EE6  
                               ??_EUSART_Read 0027  EUSART_SetRxInterruptHandler@interruptHandler 0027  
EUSART_SetTxInterruptHandler@interruptHandler 0027                               cmd_tri@buffData 003E  
                            WriteI2C@data_out 0028                               cmd_tri@buffInit 0043  
                                 putch@txData 0029                                 cmd_mta@buffer 0038  
                               cmd_mmp@buffer 0038                                      ??_S1_ISR 0070  
                                    ??_LCDcmd 002F                                      ??_LCDstr 0032  
                    __end_of_sendERRORMessage 10A3                             _counterMonitorAux 00B2  
                         DATAEE_ReadByte@bAdd 002D                  ?_INT_DefaultInterruptHandler 0070  
                    __size_of_TMR1_Initialize 001F                              ??_PMD_Initialize 0027  
                                  ?_Clock_ISR 0070                       __end_of_wirteEEPROMinit 093F  
                                    ??___wmul 002B                                      ??_cmd_aa 0039  
                                    ??_cmd_ir 0039                                      ??_cmd_ra 0039  
                                    ??_cmd_rc 0039                                      ??_cmd_sc 0039  
                                    ??_cmd_rp 0039                                   __pdataBANK1 00CE  
                                    ??_memset 002B                              sendOKMessage@cmd 0031  
                  __end_of_EXT_INT_Initialize 1F8E                             _editingClockAlarm 005F  
                           update_menuLCD@str 00BC                             __size_of_WriteI2C 005A  
                    _ADCC_GetSingleConversion 1FBC                   __end_of_EUSART_Transmit_ISR 11ED  
                      __end_of_TMR2_StopTimer 1EEA                                      ?_LCDchar 0070  
                                 __pbssCOMMON 0079                                      ?_LCDinit 0070  
                                    ?_LCDsend 0070                                     ___latbits 0002  
                                    ?_INT_ISR 0070                                 __pcstackBANK0 0020  
                               cmd_trc@buffer 0038                                 __pcstackBANK1 00BC  
                               __pcstackBANK2 0120                            _PWM6_LoadDutyValue 1000  
                    __size_of_TMR2_Initialize 000E                                  _isdigit$2993 0027  
                       __size_of_INT_CallBack 000D          __size_of_differenceBetweenTimePeriod 0035  
                                    LCDchar@c 002F                             __size_of_editTemp 0035  
                               cmd_rtl@buffer 0038                                 cmd_tri@buffer 0038  
                  __end_of_EUSART_Receive_ISR 1160                                      LCDsend@c 002A  
                         ?_PWM6_LoadDutyValue 0027                    __size_of_EUSART_Initialize 002C  
                                 sprintf@flag 0045                     __size_of_i2c1_driver_open 000C  
                                 sprintf@prec 0042              _EUSART_RxDefaultInterruptHandler 015D  
                             ??_sendOKMessage 0030                           __end_of_EUSART_Read 125D  
                                    ?_ReadI2C 0070                                     __pnvBANK1 00D8  
                                   __pnvBANK2 0159                                   _bufHalfFull 00B0  
                                   _editClock 16A5                                     _main$3499 0134  
                            ___lwdiv@dividend 0029                        _PIN_MANAGER_Initialize 149B  
               ??_INT_DefaultInterruptHandler 0070                          EUSART_Read@readValue 0028  
            __end_of_TMR1_SetInterruptHandler 1F47               ADCC_GetSingleConversion@channel 002A  
                                    ?___awdiv 0070                            cmd_tri@maxReadings 0048  
                                   _dimingLed 00AA                                      ?___lwdiv 0027  
                                    ?___lwmod 002F                   _i2c1_driver_busCollisionISR 00AC  
                                _eusartRxHead 00BB                                  _eusartTxHead 0064  
                                _eusartRxTail 00BA                                  _eusartTxTail 0063  
                        ??_PWM6_LoadDutyValue 0029                                      ?_cmd_dac 0036  
                                    ?_editLum 0070                                      ?_cmd_dtl 0036  
                                    ?_cmd_mta 0036                                      ?_cmd_mmp 0036  
                                cmd_aa@buffer 0038                  ??_INTERRUPT_InterruptManager 0079  
                                    ?_cmd_trc 0036                                      ?_cmd_rtl 0036  
                                    ?_cmd_tri 0036                                 ??_sendMessage 002D  
                                 ??_TMR2_Stop 0027                                  sendMessage@n 002E  
                     _eusartTxBufferRemaining 00DA                                  _INT_CallBack 1F66  
                                    _BAUD1CON 011F                                      ?_isdigit 0070  
                             ?_TMR2_StopTimer 0070                      __size_of_PWM6_Initialize 000D  
                            ___lwdiv@quotient 002D                                  ??_checkFlags 0050  
                              __size_of_getch 0004                                      ?_sprintf 0035  
                                    _T2CLKCON 0290                      __size_of_DATAEE_ReadByte 000F  
                        cmd_tri@startingIndex 004F                                __size_of_putch 0007  
                                   cmd_aa@num 0036                                __size_of_tsttc 0150  
                              _eusartRxBuffer 0220                                _eusartTxBuffer 01A0  
                              ___wmul@product 002B                                     cmd_ir@num 0036  
                                   cmd_ra@num 0036                                      _LATAbits 0016  
                                   cmd_rc@num 0036                                     cmd_sc@num 0036  
                                   clear_ram0 1EF4                                     cmd_rp@num 0036  
                                    _PIE0bits 0716                                      _PIE3bits 0719  
                                    _PIE4bits 071A                      __size_of_TMR2_StartTimer 0004  
                                  ?_editClock 0070                                     _tempAlarm 00A7  
                                    _S1_Value 00B8                      __size_of_TMR1_WriteTimer 0011  
         __size_of_INTERRUPT_InterruptManager 004E                                      _PIR0bits 070C  
                                    _PIR3bits 070F                                      _PIR4bits 0710  
                                 ??_Clock_ISR 0020                          __end_of_toggleAlarms 130E  
                            ?_wirteEEPROMinit 0070                                      _SSP1CON1 0190  
                                    _SSP1CON2 0191                                      _TMR1_ISR 1FD2  
                                    _S1button 158B                                      _SSP1STAT 018F  
                                   _updateLCD 00D5                            __end_of_checkFlags 07EB  
                           ??_TMR1_Initialize 0029                                    _ADCON0bits 0093  
                                  _ADCON1bits 0094                                sendMessage@num 002A  
                                  _ADCON2bits 0095                                    _ADCON3bits 0096  
                                cmd_ir@buffer 0038                             ___wmul@multiplier 0027  
                                cmd_ra@buffer 0038                  __end_of_PWM_Output_D4_Enable 1ED9  
                                cmd_rc@buffer 0038          __size_of_INT_DefaultInterruptHandler 0001  
                                cmd_sc@buffer 0038                              __size_of_LCDchar 0009  
                       DATAEE_WriteByte@bData 002F                              __size_of_LCDinit 0076  
                            __size_of_LCDsend 0053                              __size_of_INT_ISR 0006  
                         __end_of_sendMessage 11A4                                   _EUSART_Read 1237  
                           ?_DATAEE_WriteByte 002D                             ??_TMR2_Initialize 0027  
                                cmd_rp@buffer 0038                            ??_DATAEE_WriteByte 0030  
                            __size_of_ReadI2C 001F                                    _ADSTATbits 0097  
                     ??_OSCILLATOR_Initialize 0027                              __size_of___awdiv 005F  
                            __size_of___lwdiv 003D                              __size_of___lwmod 0035  
                                    _WriteI2C 1531                      _TMR1_SetInterruptHandler 1F3E  
                            __size_of_cmd_dac 007D                              __size_of_editLum 0035  
                            __size_of_cmd_dtl 005F                       __size_of_update_menuLCD 0232  
                            __size_of_cmd_mta 001E                              __size_of_cmd_mmp 001A  
                            __size_of_cmd_trc 0101                              __size_of_cmd_rtl 0021  
                            __size_of_cmd_tri 012A                                  cmd_tri@index 004C  
                       _TMR1_InterruptHandler 015B                                    sprintf@val 0043  
                                    _clkAlarm 00A0                      __size_of_ADCC_Initialize 0017  
                            __size_of_isdigit 0013                                      _editTemp 13AD  
                             ___lwdiv@divisor 0027                               ___lwdiv@counter 002C  
                                    __ptext10 0883                                      __ptext11 037A  
                                    __ptext20 1000                                      __ptext12 05AC  
                                    __ptext21 104E                                      __ptext13 07EB  
                                  _T1GCONbits 020F                                      __ptext30 1ED9  
                                    __ptext22 1F47                                      __ptext14 1343  
                                    __ptext31 158B                                      __ptext23 1F09  
                                    __ptext15 141C                                      __ptext40 1019  
                                    __ptext32 1ED6                                      __ptext24 0E7F  
                                    __ptext16 130E                                      __ptext41 1212  
                                    __ptext33 0B04                                      __ptext25 0D2F  
                                    __ptext17 1EE6                                      __ptext50 1181  
                                    __ptext42 1160                                      __ptext34 125D  
                                    __ptext26 10E0                                      __ptext18 1EDF  
                                    __ptext51 1EFA                                      __ptext43 1788  
                                    __ptext35 13E2                                      __ptext27 11A4  
                                    __ptext19 1EDC                                      __ptext60 1F35  
                                    __ptext52 12B2                                      __ptext44 11ED  
                                    __ptext36 1646                                      __ptext28 1FBC  
                                    __ptext61 1F80                                      __ptext53 1069  
                                    __ptext45 0C05                                      __ptext37 0806  
                                    __ptext29 1EE2                                      __ptext70 1531  
                                    __ptext62 1F2C                                      __ptext54 1F8E  
                                    __ptext46 10FF                                      __ptext38 1459  
                                    __ptext71 1ED3                                      __ptext63 1286  
                                    __ptext55 10C1                                      __ptext47 1F9C  
                                    __ptext39 10A3                                      __ptext80 0003  
                                    __ptext64 1F23                                      __ptext56 1F3E  
                                    __ptext48 1033                                      __ptext81 1F11  
                                    __ptext73 1FD2                                      __ptext65 1F1A  
                                    __ptext57 1F73                                      __ptext49 1085  
                                    __ptext82 11C8                                      __ptext74 1FAB  
                                    __ptext66 1FE9                                      __ptext58 1F01  
                                    __ptext83 113F                                      __ptext75 0A13  
                                    __ptext67 1712                                      __ptext59 149B  
                                    __ptext76 07FF                                      __ptext68 093F  
                                    __ptext77 15E7                                      __ptext69 14DE  
                                    __ptext78 1EEE                                      __ptext79 1F66  
                                _SSP1CON1bits 0190                                  _SSP1CON2bits 0191  
                                    _commands 1800                              __size_of_sprintf 019E  
                 DATAEE_WriteByte@GIEBitValue 0030                              _i2c1_driver_open 1F5A  
                                    _modeFlag 005D                             ??_PWM6_Initialize 0027  
                 __size_of_EUSART_is_rx_ready 0003                                 __size_of_main 02E6  
                                    cmd_dac@h 003B                                      cmd_dac@m 003D  
                                    _lumAlarm 00A4                                      cmd_dac@s 003F  
                           ?_sendERRORMessage 0070                             ??_DATAEE_ReadByte 002F  
                                    _lumLevel 0061                         _PWM_Output_D4_Disable 1EDC  
                                 ??_editClock 0058                                      cmd_trc@i 0047  
                                    cmd_trc@j 0050                                      cmd_trc@n 004E  
                                    cmd_tri@i 004A                                      cmd_tri@j 004E  
                                    cmd_tri@n 004D                              _editingTempAlarm 00B7  
                                  _RC1STAbits 011D                            ??_sendERRORMessage 0030  
                 __end_of_monitoring_TEMP_LUM 1000                                      _prevTemp 00D3  
                                  tsttc@value 002A                    ??_ADCC_GetSingleConversion 002A  
                                    int$flags 007E                             ??_TMR2_StartTimer 0027  
          __end_of_INTERRUPT_InterruptManager 0052                    _INTERRUPT_InterruptManager 0004  
                                    main@buff 0120                                  _SSP1STATbits 018F  
                           ??_TMR1_WriteTimer 0072                                   _sendMessage 1181  
                        update_menuLCD@F12903 0154                                    _INTCONbits 000B  
                                 _NVMCON1bits 081E                                  _prevLumLevel 00D1  
                        _INT_InterruptHandler 0159                                      isdigit@c 0028  
                                    memset@p1 002D                                    _LCDsend2x4 093F  
                          _EXT_INT_Initialize 1F80                                   cmd_rtl@buff 003A  
                                    intlevel1 0000                                     sprintf@ap 0041  
                                   sprintf@sp 0049                              ___lwmod@dividend 0031  
                     ?_PIN_MANAGER_Initialize 0070                          sendERRORMessage@bufw 0032  
                       __size_of_toggleAlarms 002E                           ?_EXT_INT_Initialize 0070  
                             _editingLumAlarm 00B6          __end_of_EUSART_SetRxInterruptHandler 1F23  
       __size_of_EUSART_SetRxInterruptHandler 0009                  _EUSART_SetRxInterruptHandler 1F1A  
                        _PWM_Output_D4_Enable 1ED6           __end_of_differenceBetweenTimePeriod 1343  
                 _differenceBetweenTimePeriod 130E                            _EUSART_Receive_ISR 113F  
                    ?_INT_SetInterruptHandler 0027                              ??_TMR2_StopTimer 0027  
                               __pstringtext1 1800                                 __pstringtext2 1836  
                               __pstringtext3 1827                                 __pstringtext4 1840  
                               __pstringtext5 1847                                 __pstringtext6 184C  
                               __pstringtext7 0000                          ??_EXT_INT_Initialize 0029  
               ??_differenceBetweenTimePeriod 002E                                      sprintf@c 0048  
                                    sprintf@f 0035                           ?_EUSART_Receive_ISR 0070  
                                  _SSP1DATPPS 0EC6                                    _SSP1CLKPPS 0EC5  
                             ___lwmod@divisor 002F                           sendERRORMessage@cmd 0031  
                             ___lwmod@counter 0034                   PWM6_LoadDutyValue@dutyValue 0027  
                                  _TX1STAbits 011E                                  _toggleAlarms 12E0  
                                  _TMR2_Start 1ED9                            EUSART_Write@txData 0028  
                __size_of_EUSART_Transmit_ISR 0025                __end_of_PIN_MANAGER_Initialize 14DE  
                           ??_ADCC_Initialize 0027                        ?_PWM_Output_D4_Disable 0070  
                        ??_EUSART_Receive_ISR 0070                         ?_PWM_Output_D4_Enable 0070  
                             _TMR1_Initialize 10C1                         __end_of_sendOKMessage 104E  
