

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Dec 08 15:09:41 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F18875
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    25                           	psect	inittext,global,class=CODE,delta=2
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    44                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	text74,local,class=CODE,merge=1,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	psect	text81,local,class=CODE,merge=1,delta=2
   112                           	psect	text82,local,class=CODE,merge=1,delta=2
   113                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   114                           	dabs	1,0x7E,2
   115  0000                     
   116                           ; Version 2.30
   117                           ; Generated 15/09/2020 GMT
   118                           ; 
   119                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution. Publication is not required when
   133                           ;        this file is used in an embedded application.
   134                           ; 
   135                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   136                           ;        software without specific prior written permission.
   137                           ; 
   138                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   139                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   140                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   141                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   142                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   143                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   144                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   145                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   146                           ; 
   147                           ; 
   148                           ; Code-generator required, PIC16F18875 Definitions
   149                           ; 
   150                           ; SFR Addresses
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0008                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001C                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  008C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0110                     	;# 
   211  0110                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0112                     	;# 
   215  0113                     	;# 
   216  0114                     	;# 
   217  0114                     	;# 
   218  0115                     	;# 
   219  0116                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  0119                     	;# 
   223  0119                     	;# 
   224  0119                     	;# 
   225  011A                     	;# 
   226  011A                     	;# 
   227  011A                     	;# 
   228  011B                     	;# 
   229  011B                     	;# 
   230  011B                     	;# 
   231  011B                     	;# 
   232  011B                     	;# 
   233  011C                     	;# 
   234  011C                     	;# 
   235  011C                     	;# 
   236  011D                     	;# 
   237  011D                     	;# 
   238  011D                     	;# 
   239  011E                     	;# 
   240  011E                     	;# 
   241  011E                     	;# 
   242  011F                     	;# 
   243  011F                     	;# 
   244  011F                     	;# 
   245  011F                     	;# 
   246  011F                     	;# 
   247  018C                     	;# 
   248  018D                     	;# 
   249  018E                     	;# 
   250  018F                     	;# 
   251  0190                     	;# 
   252  0191                     	;# 
   253  0192                     	;# 
   254  0196                     	;# 
   255  0197                     	;# 
   256  0198                     	;# 
   257  0199                     	;# 
   258  019A                     	;# 
   259  019B                     	;# 
   260  019C                     	;# 
   261  020C                     	;# 
   262  020C                     	;# 
   263  020D                     	;# 
   264  020E                     	;# 
   265  020F                     	;# 
   266  020F                     	;# 
   267  0210                     	;# 
   268  0210                     	;# 
   269  0211                     	;# 
   270  0211                     	;# 
   271  0212                     	;# 
   272  0212                     	;# 
   273  0213                     	;# 
   274  0214                     	;# 
   275  0215                     	;# 
   276  0215                     	;# 
   277  0216                     	;# 
   278  0216                     	;# 
   279  0217                     	;# 
   280  0217                     	;# 
   281  0218                     	;# 
   282  0218                     	;# 
   283  0219                     	;# 
   284  021A                     	;# 
   285  021B                     	;# 
   286  021B                     	;# 
   287  021C                     	;# 
   288  021C                     	;# 
   289  021D                     	;# 
   290  021D                     	;# 
   291  021E                     	;# 
   292  021F                     	;# 
   293  028C                     	;# 
   294  028C                     	;# 
   295  028D                     	;# 
   296  028D                     	;# 
   297  028E                     	;# 
   298  028F                     	;# 
   299  0290                     	;# 
   300  0290                     	;# 
   301  0291                     	;# 
   302  0292                     	;# 
   303  0292                     	;# 
   304  0293                     	;# 
   305  0293                     	;# 
   306  0294                     	;# 
   307  0295                     	;# 
   308  0296                     	;# 
   309  0296                     	;# 
   310  0297                     	;# 
   311  0298                     	;# 
   312  0298                     	;# 
   313  0299                     	;# 
   314  0299                     	;# 
   315  029A                     	;# 
   316  029B                     	;# 
   317  029C                     	;# 
   318  029C                     	;# 
   319  029D                     	;# 
   320  030C                     	;# 
   321  030C                     	;# 
   322  030D                     	;# 
   323  030E                     	;# 
   324  030F                     	;# 
   325  0310                     	;# 
   326  0310                     	;# 
   327  0311                     	;# 
   328  0312                     	;# 
   329  0313                     	;# 
   330  0314                     	;# 
   331  0314                     	;# 
   332  0315                     	;# 
   333  0316                     	;# 
   334  0317                     	;# 
   335  0318                     	;# 
   336  0318                     	;# 
   337  0319                     	;# 
   338  031A                     	;# 
   339  031B                     	;# 
   340  031C                     	;# 
   341  031C                     	;# 
   342  031D                     	;# 
   343  031E                     	;# 
   344  031F                     	;# 
   345  038C                     	;# 
   346  038C                     	;# 
   347  038D                     	;# 
   348  038E                     	;# 
   349  0390                     	;# 
   350  0390                     	;# 
   351  0391                     	;# 
   352  0392                     	;# 
   353  040C                     	;# 
   354  040D                     	;# 
   355  040E                     	;# 
   356  040F                     	;# 
   357  0410                     	;# 
   358  0411                     	;# 
   359  0416                     	;# 
   360  0416                     	;# 
   361  0417                     	;# 
   362  0418                     	;# 
   363  0418                     	;# 
   364  0419                     	;# 
   365  041A                     	;# 
   366  041A                     	;# 
   367  041B                     	;# 
   368  041C                     	;# 
   369  041C                     	;# 
   370  041D                     	;# 
   371  041E                     	;# 
   372  041F                     	;# 
   373  048C                     	;# 
   374  048C                     	;# 
   375  048D                     	;# 
   376  048E                     	;# 
   377  048F                     	;# 
   378  048F                     	;# 
   379  0490                     	;# 
   380  0491                     	;# 
   381  0492                     	;# 
   382  0492                     	;# 
   383  0493                     	;# 
   384  0494                     	;# 
   385  0495                     	;# 
   386  0495                     	;# 
   387  0496                     	;# 
   388  0497                     	;# 
   389  0498                     	;# 
   390  0499                     	;# 
   391  049A                     	;# 
   392  049B                     	;# 
   393  049C                     	;# 
   394  049D                     	;# 
   395  050C                     	;# 
   396  050C                     	;# 
   397  050D                     	;# 
   398  050E                     	;# 
   399  050F                     	;# 
   400  050F                     	;# 
   401  0510                     	;# 
   402  0511                     	;# 
   403  0512                     	;# 
   404  0512                     	;# 
   405  0513                     	;# 
   406  0514                     	;# 
   407  0515                     	;# 
   408  0515                     	;# 
   409  0516                     	;# 
   410  0517                     	;# 
   411  0518                     	;# 
   412  0519                     	;# 
   413  051A                     	;# 
   414  051B                     	;# 
   415  051C                     	;# 
   416  051D                     	;# 
   417  058C                     	;# 
   418  058C                     	;# 
   419  058D                     	;# 
   420  058E                     	;# 
   421  058F                     	;# 
   422  058F                     	;# 
   423  0590                     	;# 
   424  0591                     	;# 
   425  0592                     	;# 
   426  0593                     	;# 
   427  060C                     	;# 
   428  060D                     	;# 
   429  060E                     	;# 
   430  060F                     	;# 
   431  0610                     	;# 
   432  0611                     	;# 
   433  0612                     	;# 
   434  0613                     	;# 
   435  0614                     	;# 
   436  0616                     	;# 
   437  0617                     	;# 
   438  0618                     	;# 
   439  0619                     	;# 
   440  061A                     	;# 
   441  061B                     	;# 
   442  061C                     	;# 
   443  061D                     	;# 
   444  061E                     	;# 
   445  068C                     	;# 
   446  068D                     	;# 
   447  068E                     	;# 
   448  068F                     	;# 
   449  0690                     	;# 
   450  0691                     	;# 
   451  0692                     	;# 
   452  0693                     	;# 
   453  0694                     	;# 
   454  070C                     	;# 
   455  070D                     	;# 
   456  070E                     	;# 
   457  070F                     	;# 
   458  0710                     	;# 
   459  0711                     	;# 
   460  0712                     	;# 
   461  0713                     	;# 
   462  0714                     	;# 
   463  0716                     	;# 
   464  0717                     	;# 
   465  0718                     	;# 
   466  0719                     	;# 
   467  071A                     	;# 
   468  071B                     	;# 
   469  071C                     	;# 
   470  071D                     	;# 
   471  071E                     	;# 
   472  0796                     	;# 
   473  0797                     	;# 
   474  0798                     	;# 
   475  0799                     	;# 
   476  079A                     	;# 
   477  079B                     	;# 
   478  080C                     	;# 
   479  080D                     	;# 
   480  080E                     	;# 
   481  080F                     	;# 
   482  0810                     	;# 
   483  0811                     	;# 
   484  0812                     	;# 
   485  0813                     	;# 
   486  0814                     	;# 
   487  081A                     	;# 
   488  081B                     	;# 
   489  081C                     	;# 
   490  081D                     	;# 
   491  081E                     	;# 
   492  081F                     	;# 
   493  088C                     	;# 
   494  088D                     	;# 
   495  088E                     	;# 
   496  088F                     	;# 
   497  0890                     	;# 
   498  0891                     	;# 
   499  0892                     	;# 
   500  0893                     	;# 
   501  0895                     	;# 
   502  0896                     	;# 
   503  0897                     	;# 
   504  0898                     	;# 
   505  0899                     	;# 
   506  089A                     	;# 
   507  089B                     	;# 
   508  090C                     	;# 
   509  090E                     	;# 
   510  090F                     	;# 
   511  091F                     	;# 
   512  091F                     	;# 
   513  098F                     	;# 
   514  098F                     	;# 
   515  0990                     	;# 
   516  0991                     	;# 
   517  0992                     	;# 
   518  0993                     	;# 
   519  0994                     	;# 
   520  0995                     	;# 
   521  0996                     	;# 
   522  0997                     	;# 
   523  0E0F                     	;# 
   524  0E10                     	;# 
   525  0E11                     	;# 
   526  0E12                     	;# 
   527  0E13                     	;# 
   528  0E14                     	;# 
   529  0E15                     	;# 
   530  0E16                     	;# 
   531  0E17                     	;# 
   532  0E18                     	;# 
   533  0E19                     	;# 
   534  0E1A                     	;# 
   535  0E1B                     	;# 
   536  0E1C                     	;# 
   537  0E1D                     	;# 
   538  0E1E                     	;# 
   539  0E1F                     	;# 
   540  0E20                     	;# 
   541  0E21                     	;# 
   542  0E22                     	;# 
   543  0E23                     	;# 
   544  0E24                     	;# 
   545  0E25                     	;# 
   546  0E26                     	;# 
   547  0E27                     	;# 
   548  0E28                     	;# 
   549  0E29                     	;# 
   550  0E2A                     	;# 
   551  0E2B                     	;# 
   552  0E2C                     	;# 
   553  0E2D                     	;# 
   554  0E2E                     	;# 
   555  0E2F                     	;# 
   556  0E30                     	;# 
   557  0E31                     	;# 
   558  0E32                     	;# 
   559  0E33                     	;# 
   560  0E34                     	;# 
   561  0E35                     	;# 
   562  0E36                     	;# 
   563  0E37                     	;# 
   564  0E8F                     	;# 
   565  0E90                     	;# 
   566  0E91                     	;# 
   567  0E92                     	;# 
   568  0E93                     	;# 
   569  0E94                     	;# 
   570  0E95                     	;# 
   571  0E96                     	;# 
   572  0E97                     	;# 
   573  0E9C                     	;# 
   574  0E9D                     	;# 
   575  0E9E                     	;# 
   576  0EA1                     	;# 
   577  0EA2                     	;# 
   578  0EA3                     	;# 
   579  0EA4                     	;# 
   580  0EA5                     	;# 
   581  0EA9                     	;# 
   582  0EAA                     	;# 
   583  0EAB                     	;# 
   584  0EAC                     	;# 
   585  0EB1                     	;# 
   586  0EB2                     	;# 
   587  0EB3                     	;# 
   588  0EB8                     	;# 
   589  0EB9                     	;# 
   590  0EBA                     	;# 
   591  0EBB                     	;# 
   592  0EBC                     	;# 
   593  0EBD                     	;# 
   594  0EBE                     	;# 
   595  0EC3                     	;# 
   596  0EC5                     	;# 
   597  0EC6                     	;# 
   598  0EC7                     	;# 
   599  0EC8                     	;# 
   600  0EC9                     	;# 
   601  0ECA                     	;# 
   602  0ECB                     	;# 
   603  0ECC                     	;# 
   604  0F10                     	;# 
   605  0F11                     	;# 
   606  0F12                     	;# 
   607  0F13                     	;# 
   608  0F14                     	;# 
   609  0F15                     	;# 
   610  0F16                     	;# 
   611  0F17                     	;# 
   612  0F18                     	;# 
   613  0F19                     	;# 
   614  0F1A                     	;# 
   615  0F1B                     	;# 
   616  0F1C                     	;# 
   617  0F1D                     	;# 
   618  0F1E                     	;# 
   619  0F1F                     	;# 
   620  0F20                     	;# 
   621  0F21                     	;# 
   622  0F22                     	;# 
   623  0F23                     	;# 
   624  0F24                     	;# 
   625  0F25                     	;# 
   626  0F26                     	;# 
   627  0F27                     	;# 
   628  0F28                     	;# 
   629  0F29                     	;# 
   630  0F2A                     	;# 
   631  0F2B                     	;# 
   632  0F2C                     	;# 
   633  0F2D                     	;# 
   634  0F2E                     	;# 
   635  0F2F                     	;# 
   636  0F30                     	;# 
   637  0F31                     	;# 
   638  0F32                     	;# 
   639  0F38                     	;# 
   640  0F39                     	;# 
   641  0F3A                     	;# 
   642  0F3B                     	;# 
   643  0F3C                     	;# 
   644  0F3D                     	;# 
   645  0F3E                     	;# 
   646  0F3F                     	;# 
   647  0F40                     	;# 
   648  0F41                     	;# 
   649  0F43                     	;# 
   650  0F44                     	;# 
   651  0F45                     	;# 
   652  0F46                     	;# 
   653  0F47                     	;# 
   654  0F48                     	;# 
   655  0F49                     	;# 
   656  0F4A                     	;# 
   657  0F4B                     	;# 
   658  0F4C                     	;# 
   659  0F4E                     	;# 
   660  0F4F                     	;# 
   661  0F50                     	;# 
   662  0F51                     	;# 
   663  0F52                     	;# 
   664  0F53                     	;# 
   665  0F54                     	;# 
   666  0F55                     	;# 
   667  0F56                     	;# 
   668  0F57                     	;# 
   669  0F59                     	;# 
   670  0F5A                     	;# 
   671  0F5B                     	;# 
   672  0F5C                     	;# 
   673  0F5D                     	;# 
   674  0F61                     	;# 
   675  0F62                     	;# 
   676  0F64                     	;# 
   677  0F65                     	;# 
   678  0F66                     	;# 
   679  0F67                     	;# 
   680  0F68                     	;# 
   681  0F69                     	;# 
   682  0F6A                     	;# 
   683  0F6B                     	;# 
   684  0F6C                     	;# 
   685  0F6D                     	;# 
   686  0FE4                     	;# 
   687  0FE5                     	;# 
   688  0FE6                     	;# 
   689  0FE7                     	;# 
   690  0FE8                     	;# 
   691  0FE9                     	;# 
   692  0FEA                     	;# 
   693  0FEB                     	;# 
   694  0FED                     	;# 
   695  0FEE                     	;# 
   696  0FEF                     	;# 
   697  0000                     	;# 
   698  0001                     	;# 
   699  0002                     	;# 
   700  0003                     	;# 
   701  0004                     	;# 
   702  0005                     	;# 
   703  0006                     	;# 
   704  0007                     	;# 
   705  0008                     	;# 
   706  0009                     	;# 
   707  000A                     	;# 
   708  000B                     	;# 
   709  000C                     	;# 
   710  000D                     	;# 
   711  000E                     	;# 
   712  000F                     	;# 
   713  0010                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0013                     	;# 
   717  0014                     	;# 
   718  0015                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001C                     	;# 
   725  001C                     	;# 
   726  001D                     	;# 
   727  001D                     	;# 
   728  001E                     	;# 
   729  001F                     	;# 
   730  008C                     	;# 
   731  008C                     	;# 
   732  008D                     	;# 
   733  008E                     	;# 
   734  008E                     	;# 
   735  008F                     	;# 
   736  0090                     	;# 
   737  0090                     	;# 
   738  0091                     	;# 
   739  0093                     	;# 
   740  0094                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0097                     	;# 
   744  0098                     	;# 
   745  0099                     	;# 
   746  009A                     	;# 
   747  009B                     	;# 
   748  009C                     	;# 
   749  009D                     	;# 
   750  009E                     	;# 
   751  010C                     	;# 
   752  010D                     	;# 
   753  010E                     	;# 
   754  010E                     	;# 
   755  010F                     	;# 
   756  0110                     	;# 
   757  0110                     	;# 
   758  0111                     	;# 
   759  0112                     	;# 
   760  0112                     	;# 
   761  0113                     	;# 
   762  0114                     	;# 
   763  0114                     	;# 
   764  0115                     	;# 
   765  0116                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  0119                     	;# 
   769  0119                     	;# 
   770  0119                     	;# 
   771  011A                     	;# 
   772  011A                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011B                     	;# 
   776  011B                     	;# 
   777  011B                     	;# 
   778  011B                     	;# 
   779  011C                     	;# 
   780  011C                     	;# 
   781  011C                     	;# 
   782  011D                     	;# 
   783  011D                     	;# 
   784  011D                     	;# 
   785  011E                     	;# 
   786  011E                     	;# 
   787  011E                     	;# 
   788  011F                     	;# 
   789  011F                     	;# 
   790  011F                     	;# 
   791  011F                     	;# 
   792  011F                     	;# 
   793  018C                     	;# 
   794  018D                     	;# 
   795  018E                     	;# 
   796  018F                     	;# 
   797  0190                     	;# 
   798  0191                     	;# 
   799  0192                     	;# 
   800  0196                     	;# 
   801  0197                     	;# 
   802  0198                     	;# 
   803  0199                     	;# 
   804  019A                     	;# 
   805  019B                     	;# 
   806  019C                     	;# 
   807  020C                     	;# 
   808  020C                     	;# 
   809  020D                     	;# 
   810  020E                     	;# 
   811  020F                     	;# 
   812  020F                     	;# 
   813  0210                     	;# 
   814  0210                     	;# 
   815  0211                     	;# 
   816  0211                     	;# 
   817  0212                     	;# 
   818  0212                     	;# 
   819  0213                     	;# 
   820  0214                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0218                     	;# 
   828  0218                     	;# 
   829  0219                     	;# 
   830  021A                     	;# 
   831  021B                     	;# 
   832  021B                     	;# 
   833  021C                     	;# 
   834  021C                     	;# 
   835  021D                     	;# 
   836  021D                     	;# 
   837  021E                     	;# 
   838  021F                     	;# 
   839  028C                     	;# 
   840  028C                     	;# 
   841  028D                     	;# 
   842  028D                     	;# 
   843  028E                     	;# 
   844  028F                     	;# 
   845  0290                     	;# 
   846  0290                     	;# 
   847  0291                     	;# 
   848  0292                     	;# 
   849  0292                     	;# 
   850  0293                     	;# 
   851  0293                     	;# 
   852  0294                     	;# 
   853  0295                     	;# 
   854  0296                     	;# 
   855  0296                     	;# 
   856  0297                     	;# 
   857  0298                     	;# 
   858  0298                     	;# 
   859  0299                     	;# 
   860  0299                     	;# 
   861  029A                     	;# 
   862  029B                     	;# 
   863  029C                     	;# 
   864  029C                     	;# 
   865  029D                     	;# 
   866  030C                     	;# 
   867  030C                     	;# 
   868  030D                     	;# 
   869  030E                     	;# 
   870  030F                     	;# 
   871  0310                     	;# 
   872  0310                     	;# 
   873  0311                     	;# 
   874  0312                     	;# 
   875  0313                     	;# 
   876  0314                     	;# 
   877  0314                     	;# 
   878  0315                     	;# 
   879  0316                     	;# 
   880  0317                     	;# 
   881  0318                     	;# 
   882  0318                     	;# 
   883  0319                     	;# 
   884  031A                     	;# 
   885  031B                     	;# 
   886  031C                     	;# 
   887  031C                     	;# 
   888  031D                     	;# 
   889  031E                     	;# 
   890  031F                     	;# 
   891  038C                     	;# 
   892  038C                     	;# 
   893  038D                     	;# 
   894  038E                     	;# 
   895  0390                     	;# 
   896  0390                     	;# 
   897  0391                     	;# 
   898  0392                     	;# 
   899  040C                     	;# 
   900  040D                     	;# 
   901  040E                     	;# 
   902  040F                     	;# 
   903  0410                     	;# 
   904  0411                     	;# 
   905  0416                     	;# 
   906  0416                     	;# 
   907  0417                     	;# 
   908  0418                     	;# 
   909  0418                     	;# 
   910  0419                     	;# 
   911  041A                     	;# 
   912  041A                     	;# 
   913  041B                     	;# 
   914  041C                     	;# 
   915  041C                     	;# 
   916  041D                     	;# 
   917  041E                     	;# 
   918  041F                     	;# 
   919  048C                     	;# 
   920  048C                     	;# 
   921  048D                     	;# 
   922  048E                     	;# 
   923  048F                     	;# 
   924  048F                     	;# 
   925  0490                     	;# 
   926  0491                     	;# 
   927  0492                     	;# 
   928  0492                     	;# 
   929  0493                     	;# 
   930  0494                     	;# 
   931  0495                     	;# 
   932  0495                     	;# 
   933  0496                     	;# 
   934  0497                     	;# 
   935  0498                     	;# 
   936  0499                     	;# 
   937  049A                     	;# 
   938  049B                     	;# 
   939  049C                     	;# 
   940  049D                     	;# 
   941  050C                     	;# 
   942  050C                     	;# 
   943  050D                     	;# 
   944  050E                     	;# 
   945  050F                     	;# 
   946  050F                     	;# 
   947  0510                     	;# 
   948  0511                     	;# 
   949  0512                     	;# 
   950  0512                     	;# 
   951  0513                     	;# 
   952  0514                     	;# 
   953  0515                     	;# 
   954  0515                     	;# 
   955  0516                     	;# 
   956  0517                     	;# 
   957  0518                     	;# 
   958  0519                     	;# 
   959  051A                     	;# 
   960  051B                     	;# 
   961  051C                     	;# 
   962  051D                     	;# 
   963  058C                     	;# 
   964  058C                     	;# 
   965  058D                     	;# 
   966  058E                     	;# 
   967  058F                     	;# 
   968  058F                     	;# 
   969  0590                     	;# 
   970  0591                     	;# 
   971  0592                     	;# 
   972  0593                     	;# 
   973  060C                     	;# 
   974  060D                     	;# 
   975  060E                     	;# 
   976  060F                     	;# 
   977  0610                     	;# 
   978  0611                     	;# 
   979  0612                     	;# 
   980  0613                     	;# 
   981  0614                     	;# 
   982  0616                     	;# 
   983  0617                     	;# 
   984  0618                     	;# 
   985  0619                     	;# 
   986  061A                     	;# 
   987  061B                     	;# 
   988  061C                     	;# 
   989  061D                     	;# 
   990  061E                     	;# 
   991  068C                     	;# 
   992  068D                     	;# 
   993  068E                     	;# 
   994  068F                     	;# 
   995  0690                     	;# 
   996  0691                     	;# 
   997  0692                     	;# 
   998  0693                     	;# 
   999  0694                     	;# 
  1000  070C                     	;# 
  1001  070D                     	;# 
  1002  070E                     	;# 
  1003  070F                     	;# 
  1004  0710                     	;# 
  1005  0711                     	;# 
  1006  0712                     	;# 
  1007  0713                     	;# 
  1008  0714                     	;# 
  1009  0716                     	;# 
  1010  0717                     	;# 
  1011  0718                     	;# 
  1012  0719                     	;# 
  1013  071A                     	;# 
  1014  071B                     	;# 
  1015  071C                     	;# 
  1016  071D                     	;# 
  1017  071E                     	;# 
  1018  0796                     	;# 
  1019  0797                     	;# 
  1020  0798                     	;# 
  1021  0799                     	;# 
  1022  079A                     	;# 
  1023  079B                     	;# 
  1024  080C                     	;# 
  1025  080D                     	;# 
  1026  080E                     	;# 
  1027  080F                     	;# 
  1028  0810                     	;# 
  1029  0811                     	;# 
  1030  0812                     	;# 
  1031  0813                     	;# 
  1032  0814                     	;# 
  1033  081A                     	;# 
  1034  081B                     	;# 
  1035  081C                     	;# 
  1036  081D                     	;# 
  1037  081E                     	;# 
  1038  081F                     	;# 
  1039  088C                     	;# 
  1040  088D                     	;# 
  1041  088E                     	;# 
  1042  088F                     	;# 
  1043  0890                     	;# 
  1044  0891                     	;# 
  1045  0892                     	;# 
  1046  0893                     	;# 
  1047  0895                     	;# 
  1048  0896                     	;# 
  1049  0897                     	;# 
  1050  0898                     	;# 
  1051  0899                     	;# 
  1052  089A                     	;# 
  1053  089B                     	;# 
  1054  090C                     	;# 
  1055  090E                     	;# 
  1056  090F                     	;# 
  1057  091F                     	;# 
  1058  091F                     	;# 
  1059  098F                     	;# 
  1060  098F                     	;# 
  1061  0990                     	;# 
  1062  0991                     	;# 
  1063  0992                     	;# 
  1064  0993                     	;# 
  1065  0994                     	;# 
  1066  0995                     	;# 
  1067  0996                     	;# 
  1068  0997                     	;# 
  1069  0E0F                     	;# 
  1070  0E10                     	;# 
  1071  0E11                     	;# 
  1072  0E12                     	;# 
  1073  0E13                     	;# 
  1074  0E14                     	;# 
  1075  0E15                     	;# 
  1076  0E16                     	;# 
  1077  0E17                     	;# 
  1078  0E18                     	;# 
  1079  0E19                     	;# 
  1080  0E1A                     	;# 
  1081  0E1B                     	;# 
  1082  0E1C                     	;# 
  1083  0E1D                     	;# 
  1084  0E1E                     	;# 
  1085  0E1F                     	;# 
  1086  0E20                     	;# 
  1087  0E21                     	;# 
  1088  0E22                     	;# 
  1089  0E23                     	;# 
  1090  0E24                     	;# 
  1091  0E25                     	;# 
  1092  0E26                     	;# 
  1093  0E27                     	;# 
  1094  0E28                     	;# 
  1095  0E29                     	;# 
  1096  0E2A                     	;# 
  1097  0E2B                     	;# 
  1098  0E2C                     	;# 
  1099  0E2D                     	;# 
  1100  0E2E                     	;# 
  1101  0E2F                     	;# 
  1102  0E30                     	;# 
  1103  0E31                     	;# 
  1104  0E32                     	;# 
  1105  0E33                     	;# 
  1106  0E34                     	;# 
  1107  0E35                     	;# 
  1108  0E36                     	;# 
  1109  0E37                     	;# 
  1110  0E8F                     	;# 
  1111  0E90                     	;# 
  1112  0E91                     	;# 
  1113  0E92                     	;# 
  1114  0E93                     	;# 
  1115  0E94                     	;# 
  1116  0E95                     	;# 
  1117  0E96                     	;# 
  1118  0E97                     	;# 
  1119  0E9C                     	;# 
  1120  0E9D                     	;# 
  1121  0E9E                     	;# 
  1122  0EA1                     	;# 
  1123  0EA2                     	;# 
  1124  0EA3                     	;# 
  1125  0EA4                     	;# 
  1126  0EA5                     	;# 
  1127  0EA9                     	;# 
  1128  0EAA                     	;# 
  1129  0EAB                     	;# 
  1130  0EAC                     	;# 
  1131  0EB1                     	;# 
  1132  0EB2                     	;# 
  1133  0EB3                     	;# 
  1134  0EB8                     	;# 
  1135  0EB9                     	;# 
  1136  0EBA                     	;# 
  1137  0EBB                     	;# 
  1138  0EBC                     	;# 
  1139  0EBD                     	;# 
  1140  0EBE                     	;# 
  1141  0EC3                     	;# 
  1142  0EC5                     	;# 
  1143  0EC6                     	;# 
  1144  0EC7                     	;# 
  1145  0EC8                     	;# 
  1146  0EC9                     	;# 
  1147  0ECA                     	;# 
  1148  0ECB                     	;# 
  1149  0ECC                     	;# 
  1150  0F10                     	;# 
  1151  0F11                     	;# 
  1152  0F12                     	;# 
  1153  0F13                     	;# 
  1154  0F14                     	;# 
  1155  0F15                     	;# 
  1156  0F16                     	;# 
  1157  0F17                     	;# 
  1158  0F18                     	;# 
  1159  0F19                     	;# 
  1160  0F1A                     	;# 
  1161  0F1B                     	;# 
  1162  0F1C                     	;# 
  1163  0F1D                     	;# 
  1164  0F1E                     	;# 
  1165  0F1F                     	;# 
  1166  0F20                     	;# 
  1167  0F21                     	;# 
  1168  0F22                     	;# 
  1169  0F23                     	;# 
  1170  0F24                     	;# 
  1171  0F25                     	;# 
  1172  0F26                     	;# 
  1173  0F27                     	;# 
  1174  0F28                     	;# 
  1175  0F29                     	;# 
  1176  0F2A                     	;# 
  1177  0F2B                     	;# 
  1178  0F2C                     	;# 
  1179  0F2D                     	;# 
  1180  0F2E                     	;# 
  1181  0F2F                     	;# 
  1182  0F30                     	;# 
  1183  0F31                     	;# 
  1184  0F32                     	;# 
  1185  0F38                     	;# 
  1186  0F39                     	;# 
  1187  0F3A                     	;# 
  1188  0F3B                     	;# 
  1189  0F3C                     	;# 
  1190  0F3D                     	;# 
  1191  0F3E                     	;# 
  1192  0F3F                     	;# 
  1193  0F40                     	;# 
  1194  0F41                     	;# 
  1195  0F43                     	;# 
  1196  0F44                     	;# 
  1197  0F45                     	;# 
  1198  0F46                     	;# 
  1199  0F47                     	;# 
  1200  0F48                     	;# 
  1201  0F49                     	;# 
  1202  0F4A                     	;# 
  1203  0F4B                     	;# 
  1204  0F4C                     	;# 
  1205  0F4E                     	;# 
  1206  0F4F                     	;# 
  1207  0F50                     	;# 
  1208  0F51                     	;# 
  1209  0F52                     	;# 
  1210  0F53                     	;# 
  1211  0F54                     	;# 
  1212  0F55                     	;# 
  1213  0F56                     	;# 
  1214  0F57                     	;# 
  1215  0F59                     	;# 
  1216  0F5A                     	;# 
  1217  0F5B                     	;# 
  1218  0F5C                     	;# 
  1219  0F5D                     	;# 
  1220  0F61                     	;# 
  1221  0F62                     	;# 
  1222  0F64                     	;# 
  1223  0F65                     	;# 
  1224  0F66                     	;# 
  1225  0F67                     	;# 
  1226  0F68                     	;# 
  1227  0F69                     	;# 
  1228  0F6A                     	;# 
  1229  0F6B                     	;# 
  1230  0F6C                     	;# 
  1231  0F6D                     	;# 
  1232  0FE4                     	;# 
  1233  0FE5                     	;# 
  1234  0FE6                     	;# 
  1235  0FE7                     	;# 
  1236  0FE8                     	;# 
  1237  0FE9                     	;# 
  1238  0FEA                     	;# 
  1239  0FEB                     	;# 
  1240  0FED                     	;# 
  1241  0FEE                     	;# 
  1242  0FEF                     	;# 
  1243  0000                     	;# 
  1244  0001                     	;# 
  1245  0002                     	;# 
  1246  0003                     	;# 
  1247  0004                     	;# 
  1248  0005                     	;# 
  1249  0006                     	;# 
  1250  0007                     	;# 
  1251  0008                     	;# 
  1252  0009                     	;# 
  1253  000A                     	;# 
  1254  000B                     	;# 
  1255  000C                     	;# 
  1256  000D                     	;# 
  1257  000E                     	;# 
  1258  000F                     	;# 
  1259  0010                     	;# 
  1260  0011                     	;# 
  1261  0012                     	;# 
  1262  0013                     	;# 
  1263  0014                     	;# 
  1264  0015                     	;# 
  1265  0016                     	;# 
  1266  0017                     	;# 
  1267  0018                     	;# 
  1268  0019                     	;# 
  1269  001A                     	;# 
  1270  001C                     	;# 
  1271  001C                     	;# 
  1272  001D                     	;# 
  1273  001D                     	;# 
  1274  001E                     	;# 
  1275  001F                     	;# 
  1276  008C                     	;# 
  1277  008C                     	;# 
  1278  008D                     	;# 
  1279  008E                     	;# 
  1280  008E                     	;# 
  1281  008F                     	;# 
  1282  0090                     	;# 
  1283  0090                     	;# 
  1284  0091                     	;# 
  1285  0093                     	;# 
  1286  0094                     	;# 
  1287  0095                     	;# 
  1288  0096                     	;# 
  1289  0097                     	;# 
  1290  0098                     	;# 
  1291  0099                     	;# 
  1292  009A                     	;# 
  1293  009B                     	;# 
  1294  009C                     	;# 
  1295  009D                     	;# 
  1296  009E                     	;# 
  1297  010C                     	;# 
  1298  010D                     	;# 
  1299  010E                     	;# 
  1300  010E                     	;# 
  1301  010F                     	;# 
  1302  0110                     	;# 
  1303  0110                     	;# 
  1304  0111                     	;# 
  1305  0112                     	;# 
  1306  0112                     	;# 
  1307  0113                     	;# 
  1308  0114                     	;# 
  1309  0114                     	;# 
  1310  0115                     	;# 
  1311  0116                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  0119                     	;# 
  1315  0119                     	;# 
  1316  0119                     	;# 
  1317  011A                     	;# 
  1318  011A                     	;# 
  1319  011A                     	;# 
  1320  011B                     	;# 
  1321  011B                     	;# 
  1322  011B                     	;# 
  1323  011B                     	;# 
  1324  011B                     	;# 
  1325  011C                     	;# 
  1326  011C                     	;# 
  1327  011C                     	;# 
  1328  011D                     	;# 
  1329  011D                     	;# 
  1330  011D                     	;# 
  1331  011E                     	;# 
  1332  011E                     	;# 
  1333  011E                     	;# 
  1334  011F                     	;# 
  1335  011F                     	;# 
  1336  011F                     	;# 
  1337  011F                     	;# 
  1338  011F                     	;# 
  1339  018C                     	;# 
  1340  018D                     	;# 
  1341  018E                     	;# 
  1342  018F                     	;# 
  1343  0190                     	;# 
  1344  0191                     	;# 
  1345  0192                     	;# 
  1346  0196                     	;# 
  1347  0197                     	;# 
  1348  0198                     	;# 
  1349  0199                     	;# 
  1350  019A                     	;# 
  1351  019B                     	;# 
  1352  019C                     	;# 
  1353  020C                     	;# 
  1354  020C                     	;# 
  1355  020D                     	;# 
  1356  020E                     	;# 
  1357  020F                     	;# 
  1358  020F                     	;# 
  1359  0210                     	;# 
  1360  0210                     	;# 
  1361  0211                     	;# 
  1362  0211                     	;# 
  1363  0212                     	;# 
  1364  0212                     	;# 
  1365  0213                     	;# 
  1366  0214                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0216                     	;# 
  1370  0216                     	;# 
  1371  0217                     	;# 
  1372  0217                     	;# 
  1373  0218                     	;# 
  1374  0218                     	;# 
  1375  0219                     	;# 
  1376  021A                     	;# 
  1377  021B                     	;# 
  1378  021B                     	;# 
  1379  021C                     	;# 
  1380  021C                     	;# 
  1381  021D                     	;# 
  1382  021D                     	;# 
  1383  021E                     	;# 
  1384  021F                     	;# 
  1385  028C                     	;# 
  1386  028C                     	;# 
  1387  028D                     	;# 
  1388  028D                     	;# 
  1389  028E                     	;# 
  1390  028F                     	;# 
  1391  0290                     	;# 
  1392  0290                     	;# 
  1393  0291                     	;# 
  1394  0292                     	;# 
  1395  0292                     	;# 
  1396  0293                     	;# 
  1397  0293                     	;# 
  1398  0294                     	;# 
  1399  0295                     	;# 
  1400  0296                     	;# 
  1401  0296                     	;# 
  1402  0297                     	;# 
  1403  0298                     	;# 
  1404  0298                     	;# 
  1405  0299                     	;# 
  1406  0299                     	;# 
  1407  029A                     	;# 
  1408  029B                     	;# 
  1409  029C                     	;# 
  1410  029C                     	;# 
  1411  029D                     	;# 
  1412  030C                     	;# 
  1413  030C                     	;# 
  1414  030D                     	;# 
  1415  030E                     	;# 
  1416  030F                     	;# 
  1417  0310                     	;# 
  1418  0310                     	;# 
  1419  0311                     	;# 
  1420  0312                     	;# 
  1421  0313                     	;# 
  1422  0314                     	;# 
  1423  0314                     	;# 
  1424  0315                     	;# 
  1425  0316                     	;# 
  1426  0317                     	;# 
  1427  0318                     	;# 
  1428  0318                     	;# 
  1429  0319                     	;# 
  1430  031A                     	;# 
  1431  031B                     	;# 
  1432  031C                     	;# 
  1433  031C                     	;# 
  1434  031D                     	;# 
  1435  031E                     	;# 
  1436  031F                     	;# 
  1437  038C                     	;# 
  1438  038C                     	;# 
  1439  038D                     	;# 
  1440  038E                     	;# 
  1441  0390                     	;# 
  1442  0390                     	;# 
  1443  0391                     	;# 
  1444  0392                     	;# 
  1445  040C                     	;# 
  1446  040D                     	;# 
  1447  040E                     	;# 
  1448  040F                     	;# 
  1449  0410                     	;# 
  1450  0411                     	;# 
  1451  0416                     	;# 
  1452  0416                     	;# 
  1453  0417                     	;# 
  1454  0418                     	;# 
  1455  0418                     	;# 
  1456  0419                     	;# 
  1457  041A                     	;# 
  1458  041A                     	;# 
  1459  041B                     	;# 
  1460  041C                     	;# 
  1461  041C                     	;# 
  1462  041D                     	;# 
  1463  041E                     	;# 
  1464  041F                     	;# 
  1465  048C                     	;# 
  1466  048C                     	;# 
  1467  048D                     	;# 
  1468  048E                     	;# 
  1469  048F                     	;# 
  1470  048F                     	;# 
  1471  0490                     	;# 
  1472  0491                     	;# 
  1473  0492                     	;# 
  1474  0492                     	;# 
  1475  0493                     	;# 
  1476  0494                     	;# 
  1477  0495                     	;# 
  1478  0495                     	;# 
  1479  0496                     	;# 
  1480  0497                     	;# 
  1481  0498                     	;# 
  1482  0499                     	;# 
  1483  049A                     	;# 
  1484  049B                     	;# 
  1485  049C                     	;# 
  1486  049D                     	;# 
  1487  050C                     	;# 
  1488  050C                     	;# 
  1489  050D                     	;# 
  1490  050E                     	;# 
  1491  050F                     	;# 
  1492  050F                     	;# 
  1493  0510                     	;# 
  1494  0511                     	;# 
  1495  0512                     	;# 
  1496  0512                     	;# 
  1497  0513                     	;# 
  1498  0514                     	;# 
  1499  0515                     	;# 
  1500  0515                     	;# 
  1501  0516                     	;# 
  1502  0517                     	;# 
  1503  0518                     	;# 
  1504  0519                     	;# 
  1505  051A                     	;# 
  1506  051B                     	;# 
  1507  051C                     	;# 
  1508  051D                     	;# 
  1509  058C                     	;# 
  1510  058C                     	;# 
  1511  058D                     	;# 
  1512  058E                     	;# 
  1513  058F                     	;# 
  1514  058F                     	;# 
  1515  0590                     	;# 
  1516  0591                     	;# 
  1517  0592                     	;# 
  1518  0593                     	;# 
  1519  060C                     	;# 
  1520  060D                     	;# 
  1521  060E                     	;# 
  1522  060F                     	;# 
  1523  0610                     	;# 
  1524  0611                     	;# 
  1525  0612                     	;# 
  1526  0613                     	;# 
  1527  0614                     	;# 
  1528  0616                     	;# 
  1529  0617                     	;# 
  1530  0618                     	;# 
  1531  0619                     	;# 
  1532  061A                     	;# 
  1533  061B                     	;# 
  1534  061C                     	;# 
  1535  061D                     	;# 
  1536  061E                     	;# 
  1537  068C                     	;# 
  1538  068D                     	;# 
  1539  068E                     	;# 
  1540  068F                     	;# 
  1541  0690                     	;# 
  1542  0691                     	;# 
  1543  0692                     	;# 
  1544  0693                     	;# 
  1545  0694                     	;# 
  1546  070C                     	;# 
  1547  070D                     	;# 
  1548  070E                     	;# 
  1549  070F                     	;# 
  1550  0710                     	;# 
  1551  0711                     	;# 
  1552  0712                     	;# 
  1553  0713                     	;# 
  1554  0714                     	;# 
  1555  0716                     	;# 
  1556  0717                     	;# 
  1557  0718                     	;# 
  1558  0719                     	;# 
  1559  071A                     	;# 
  1560  071B                     	;# 
  1561  071C                     	;# 
  1562  071D                     	;# 
  1563  071E                     	;# 
  1564  0796                     	;# 
  1565  0797                     	;# 
  1566  0798                     	;# 
  1567  0799                     	;# 
  1568  079A                     	;# 
  1569  079B                     	;# 
  1570  080C                     	;# 
  1571  080D                     	;# 
  1572  080E                     	;# 
  1573  080F                     	;# 
  1574  0810                     	;# 
  1575  0811                     	;# 
  1576  0812                     	;# 
  1577  0813                     	;# 
  1578  0814                     	;# 
  1579  081A                     	;# 
  1580  081B                     	;# 
  1581  081C                     	;# 
  1582  081D                     	;# 
  1583  081E                     	;# 
  1584  081F                     	;# 
  1585  088C                     	;# 
  1586  088D                     	;# 
  1587  088E                     	;# 
  1588  088F                     	;# 
  1589  0890                     	;# 
  1590  0891                     	;# 
  1591  0892                     	;# 
  1592  0893                     	;# 
  1593  0895                     	;# 
  1594  0896                     	;# 
  1595  0897                     	;# 
  1596  0898                     	;# 
  1597  0899                     	;# 
  1598  089A                     	;# 
  1599  089B                     	;# 
  1600  090C                     	;# 
  1601  090E                     	;# 
  1602  090F                     	;# 
  1603  091F                     	;# 
  1604  091F                     	;# 
  1605  098F                     	;# 
  1606  098F                     	;# 
  1607  0990                     	;# 
  1608  0991                     	;# 
  1609  0992                     	;# 
  1610  0993                     	;# 
  1611  0994                     	;# 
  1612  0995                     	;# 
  1613  0996                     	;# 
  1614  0997                     	;# 
  1615  0E0F                     	;# 
  1616  0E10                     	;# 
  1617  0E11                     	;# 
  1618  0E12                     	;# 
  1619  0E13                     	;# 
  1620  0E14                     	;# 
  1621  0E15                     	;# 
  1622  0E16                     	;# 
  1623  0E17                     	;# 
  1624  0E18                     	;# 
  1625  0E19                     	;# 
  1626  0E1A                     	;# 
  1627  0E1B                     	;# 
  1628  0E1C                     	;# 
  1629  0E1D                     	;# 
  1630  0E1E                     	;# 
  1631  0E1F                     	;# 
  1632  0E20                     	;# 
  1633  0E21                     	;# 
  1634  0E22                     	;# 
  1635  0E23                     	;# 
  1636  0E24                     	;# 
  1637  0E25                     	;# 
  1638  0E26                     	;# 
  1639  0E27                     	;# 
  1640  0E28                     	;# 
  1641  0E29                     	;# 
  1642  0E2A                     	;# 
  1643  0E2B                     	;# 
  1644  0E2C                     	;# 
  1645  0E2D                     	;# 
  1646  0E2E                     	;# 
  1647  0E2F                     	;# 
  1648  0E30                     	;# 
  1649  0E31                     	;# 
  1650  0E32                     	;# 
  1651  0E33                     	;# 
  1652  0E34                     	;# 
  1653  0E35                     	;# 
  1654  0E36                     	;# 
  1655  0E37                     	;# 
  1656  0E8F                     	;# 
  1657  0E90                     	;# 
  1658  0E91                     	;# 
  1659  0E92                     	;# 
  1660  0E93                     	;# 
  1661  0E94                     	;# 
  1662  0E95                     	;# 
  1663  0E96                     	;# 
  1664  0E97                     	;# 
  1665  0E9C                     	;# 
  1666  0E9D                     	;# 
  1667  0E9E                     	;# 
  1668  0EA1                     	;# 
  1669  0EA2                     	;# 
  1670  0EA3                     	;# 
  1671  0EA4                     	;# 
  1672  0EA5                     	;# 
  1673  0EA9                     	;# 
  1674  0EAA                     	;# 
  1675  0EAB                     	;# 
  1676  0EAC                     	;# 
  1677  0EB1                     	;# 
  1678  0EB2                     	;# 
  1679  0EB3                     	;# 
  1680  0EB8                     	;# 
  1681  0EB9                     	;# 
  1682  0EBA                     	;# 
  1683  0EBB                     	;# 
  1684  0EBC                     	;# 
  1685  0EBD                     	;# 
  1686  0EBE                     	;# 
  1687  0EC3                     	;# 
  1688  0EC5                     	;# 
  1689  0EC6                     	;# 
  1690  0EC7                     	;# 
  1691  0EC8                     	;# 
  1692  0EC9                     	;# 
  1693  0ECA                     	;# 
  1694  0ECB                     	;# 
  1695  0ECC                     	;# 
  1696  0F10                     	;# 
  1697  0F11                     	;# 
  1698  0F12                     	;# 
  1699  0F13                     	;# 
  1700  0F14                     	;# 
  1701  0F15                     	;# 
  1702  0F16                     	;# 
  1703  0F17                     	;# 
  1704  0F18                     	;# 
  1705  0F19                     	;# 
  1706  0F1A                     	;# 
  1707  0F1B                     	;# 
  1708  0F1C                     	;# 
  1709  0F1D                     	;# 
  1710  0F1E                     	;# 
  1711  0F1F                     	;# 
  1712  0F20                     	;# 
  1713  0F21                     	;# 
  1714  0F22                     	;# 
  1715  0F23                     	;# 
  1716  0F24                     	;# 
  1717  0F25                     	;# 
  1718  0F26                     	;# 
  1719  0F27                     	;# 
  1720  0F28                     	;# 
  1721  0F29                     	;# 
  1722  0F2A                     	;# 
  1723  0F2B                     	;# 
  1724  0F2C                     	;# 
  1725  0F2D                     	;# 
  1726  0F2E                     	;# 
  1727  0F2F                     	;# 
  1728  0F30                     	;# 
  1729  0F31                     	;# 
  1730  0F32                     	;# 
  1731  0F38                     	;# 
  1732  0F39                     	;# 
  1733  0F3A                     	;# 
  1734  0F3B                     	;# 
  1735  0F3C                     	;# 
  1736  0F3D                     	;# 
  1737  0F3E                     	;# 
  1738  0F3F                     	;# 
  1739  0F40                     	;# 
  1740  0F41                     	;# 
  1741  0F43                     	;# 
  1742  0F44                     	;# 
  1743  0F45                     	;# 
  1744  0F46                     	;# 
  1745  0F47                     	;# 
  1746  0F48                     	;# 
  1747  0F49                     	;# 
  1748  0F4A                     	;# 
  1749  0F4B                     	;# 
  1750  0F4C                     	;# 
  1751  0F4E                     	;# 
  1752  0F4F                     	;# 
  1753  0F50                     	;# 
  1754  0F51                     	;# 
  1755  0F52                     	;# 
  1756  0F53                     	;# 
  1757  0F54                     	;# 
  1758  0F55                     	;# 
  1759  0F56                     	;# 
  1760  0F57                     	;# 
  1761  0F59                     	;# 
  1762  0F5A                     	;# 
  1763  0F5B                     	;# 
  1764  0F5C                     	;# 
  1765  0F5D                     	;# 
  1766  0F61                     	;# 
  1767  0F62                     	;# 
  1768  0F64                     	;# 
  1769  0F65                     	;# 
  1770  0F66                     	;# 
  1771  0F67                     	;# 
  1772  0F68                     	;# 
  1773  0F69                     	;# 
  1774  0F6A                     	;# 
  1775  0F6B                     	;# 
  1776  0F6C                     	;# 
  1777  0F6D                     	;# 
  1778  0FE4                     	;# 
  1779  0FE5                     	;# 
  1780  0FE6                     	;# 
  1781  0FE7                     	;# 
  1782  0FE8                     	;# 
  1783  0FE9                     	;# 
  1784  0FEA                     	;# 
  1785  0FEB                     	;# 
  1786  0FED                     	;# 
  1787  0FEE                     	;# 
  1788  0FEF                     	;# 
  1789  0000                     	;# 
  1790  0001                     	;# 
  1791  0002                     	;# 
  1792  0003                     	;# 
  1793  0004                     	;# 
  1794  0005                     	;# 
  1795  0006                     	;# 
  1796  0007                     	;# 
  1797  0008                     	;# 
  1798  0009                     	;# 
  1799  000A                     	;# 
  1800  000B                     	;# 
  1801  000C                     	;# 
  1802  000D                     	;# 
  1803  000E                     	;# 
  1804  000F                     	;# 
  1805  0010                     	;# 
  1806  0011                     	;# 
  1807  0012                     	;# 
  1808  0013                     	;# 
  1809  0014                     	;# 
  1810  0015                     	;# 
  1811  0016                     	;# 
  1812  0017                     	;# 
  1813  0018                     	;# 
  1814  0019                     	;# 
  1815  001A                     	;# 
  1816  001C                     	;# 
  1817  001C                     	;# 
  1818  001D                     	;# 
  1819  001D                     	;# 
  1820  001E                     	;# 
  1821  001F                     	;# 
  1822  008C                     	;# 
  1823  008C                     	;# 
  1824  008D                     	;# 
  1825  008E                     	;# 
  1826  008E                     	;# 
  1827  008F                     	;# 
  1828  0090                     	;# 
  1829  0090                     	;# 
  1830  0091                     	;# 
  1831  0093                     	;# 
  1832  0094                     	;# 
  1833  0095                     	;# 
  1834  0096                     	;# 
  1835  0097                     	;# 
  1836  0098                     	;# 
  1837  0099                     	;# 
  1838  009A                     	;# 
  1839  009B                     	;# 
  1840  009C                     	;# 
  1841  009D                     	;# 
  1842  009E                     	;# 
  1843  010C                     	;# 
  1844  010D                     	;# 
  1845  010E                     	;# 
  1846  010E                     	;# 
  1847  010F                     	;# 
  1848  0110                     	;# 
  1849  0110                     	;# 
  1850  0111                     	;# 
  1851  0112                     	;# 
  1852  0112                     	;# 
  1853  0113                     	;# 
  1854  0114                     	;# 
  1855  0114                     	;# 
  1856  0115                     	;# 
  1857  0116                     	;# 
  1858  0116                     	;# 
  1859  0117                     	;# 
  1860  0119                     	;# 
  1861  0119                     	;# 
  1862  0119                     	;# 
  1863  011A                     	;# 
  1864  011A                     	;# 
  1865  011A                     	;# 
  1866  011B                     	;# 
  1867  011B                     	;# 
  1868  011B                     	;# 
  1869  011B                     	;# 
  1870  011B                     	;# 
  1871  011C                     	;# 
  1872  011C                     	;# 
  1873  011C                     	;# 
  1874  011D                     	;# 
  1875  011D                     	;# 
  1876  011D                     	;# 
  1877  011E                     	;# 
  1878  011E                     	;# 
  1879  011E                     	;# 
  1880  011F                     	;# 
  1881  011F                     	;# 
  1882  011F                     	;# 
  1883  011F                     	;# 
  1884  011F                     	;# 
  1885  018C                     	;# 
  1886  018D                     	;# 
  1887  018E                     	;# 
  1888  018F                     	;# 
  1889  0190                     	;# 
  1890  0191                     	;# 
  1891  0192                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0198                     	;# 
  1895  0199                     	;# 
  1896  019A                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  020C                     	;# 
  1900  020C                     	;# 
  1901  020D                     	;# 
  1902  020E                     	;# 
  1903  020F                     	;# 
  1904  020F                     	;# 
  1905  0210                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0218                     	;# 
  1920  0218                     	;# 
  1921  0219                     	;# 
  1922  021A                     	;# 
  1923  021B                     	;# 
  1924  021B                     	;# 
  1925  021C                     	;# 
  1926  021C                     	;# 
  1927  021D                     	;# 
  1928  021D                     	;# 
  1929  021E                     	;# 
  1930  021F                     	;# 
  1931  028C                     	;# 
  1932  028C                     	;# 
  1933  028D                     	;# 
  1934  028D                     	;# 
  1935  028E                     	;# 
  1936  028F                     	;# 
  1937  0290                     	;# 
  1938  0290                     	;# 
  1939  0291                     	;# 
  1940  0292                     	;# 
  1941  0292                     	;# 
  1942  0293                     	;# 
  1943  0293                     	;# 
  1944  0294                     	;# 
  1945  0295                     	;# 
  1946  0296                     	;# 
  1947  0296                     	;# 
  1948  0297                     	;# 
  1949  0298                     	;# 
  1950  0298                     	;# 
  1951  0299                     	;# 
  1952  0299                     	;# 
  1953  029A                     	;# 
  1954  029B                     	;# 
  1955  029C                     	;# 
  1956  029C                     	;# 
  1957  029D                     	;# 
  1958  030C                     	;# 
  1959  030C                     	;# 
  1960  030D                     	;# 
  1961  030E                     	;# 
  1962  030F                     	;# 
  1963  0310                     	;# 
  1964  0310                     	;# 
  1965  0311                     	;# 
  1966  0312                     	;# 
  1967  0313                     	;# 
  1968  0314                     	;# 
  1969  0314                     	;# 
  1970  0315                     	;# 
  1971  0316                     	;# 
  1972  0317                     	;# 
  1973  0318                     	;# 
  1974  0318                     	;# 
  1975  0319                     	;# 
  1976  031A                     	;# 
  1977  031B                     	;# 
  1978  031C                     	;# 
  1979  031C                     	;# 
  1980  031D                     	;# 
  1981  031E                     	;# 
  1982  031F                     	;# 
  1983  038C                     	;# 
  1984  038C                     	;# 
  1985  038D                     	;# 
  1986  038E                     	;# 
  1987  0390                     	;# 
  1988  0390                     	;# 
  1989  0391                     	;# 
  1990  0392                     	;# 
  1991  040C                     	;# 
  1992  040D                     	;# 
  1993  040E                     	;# 
  1994  040F                     	;# 
  1995  0410                     	;# 
  1996  0411                     	;# 
  1997  0416                     	;# 
  1998  0416                     	;# 
  1999  0417                     	;# 
  2000  0418                     	;# 
  2001  0418                     	;# 
  2002  0419                     	;# 
  2003  041A                     	;# 
  2004  041A                     	;# 
  2005  041B                     	;# 
  2006  041C                     	;# 
  2007  041C                     	;# 
  2008  041D                     	;# 
  2009  041E                     	;# 
  2010  041F                     	;# 
  2011  048C                     	;# 
  2012  048C                     	;# 
  2013  048D                     	;# 
  2014  048E                     	;# 
  2015  048F                     	;# 
  2016  048F                     	;# 
  2017  0490                     	;# 
  2018  0491                     	;# 
  2019  0492                     	;# 
  2020  0492                     	;# 
  2021  0493                     	;# 
  2022  0494                     	;# 
  2023  0495                     	;# 
  2024  0495                     	;# 
  2025  0496                     	;# 
  2026  0497                     	;# 
  2027  0498                     	;# 
  2028  0499                     	;# 
  2029  049A                     	;# 
  2030  049B                     	;# 
  2031  049C                     	;# 
  2032  049D                     	;# 
  2033  050C                     	;# 
  2034  050C                     	;# 
  2035  050D                     	;# 
  2036  050E                     	;# 
  2037  050F                     	;# 
  2038  050F                     	;# 
  2039  0510                     	;# 
  2040  0511                     	;# 
  2041  0512                     	;# 
  2042  0512                     	;# 
  2043  0513                     	;# 
  2044  0514                     	;# 
  2045  0515                     	;# 
  2046  0515                     	;# 
  2047  0516                     	;# 
  2048  0517                     	;# 
  2049  0518                     	;# 
  2050  0519                     	;# 
  2051  051A                     	;# 
  2052  051B                     	;# 
  2053  051C                     	;# 
  2054  051D                     	;# 
  2055  058C                     	;# 
  2056  058C                     	;# 
  2057  058D                     	;# 
  2058  058E                     	;# 
  2059  058F                     	;# 
  2060  058F                     	;# 
  2061  0590                     	;# 
  2062  0591                     	;# 
  2063  0592                     	;# 
  2064  0593                     	;# 
  2065  060C                     	;# 
  2066  060D                     	;# 
  2067  060E                     	;# 
  2068  060F                     	;# 
  2069  0610                     	;# 
  2070  0611                     	;# 
  2071  0612                     	;# 
  2072  0613                     	;# 
  2073  0614                     	;# 
  2074  0616                     	;# 
  2075  0617                     	;# 
  2076  0618                     	;# 
  2077  0619                     	;# 
  2078  061A                     	;# 
  2079  061B                     	;# 
  2080  061C                     	;# 
  2081  061D                     	;# 
  2082  061E                     	;# 
  2083  068C                     	;# 
  2084  068D                     	;# 
  2085  068E                     	;# 
  2086  068F                     	;# 
  2087  0690                     	;# 
  2088  0691                     	;# 
  2089  0692                     	;# 
  2090  0693                     	;# 
  2091  0694                     	;# 
  2092  070C                     	;# 
  2093  070D                     	;# 
  2094  070E                     	;# 
  2095  070F                     	;# 
  2096  0710                     	;# 
  2097  0711                     	;# 
  2098  0712                     	;# 
  2099  0713                     	;# 
  2100  0714                     	;# 
  2101  0716                     	;# 
  2102  0717                     	;# 
  2103  0718                     	;# 
  2104  0719                     	;# 
  2105  071A                     	;# 
  2106  071B                     	;# 
  2107  071C                     	;# 
  2108  071D                     	;# 
  2109  071E                     	;# 
  2110  0796                     	;# 
  2111  0797                     	;# 
  2112  0798                     	;# 
  2113  0799                     	;# 
  2114  079A                     	;# 
  2115  079B                     	;# 
  2116  080C                     	;# 
  2117  080D                     	;# 
  2118  080E                     	;# 
  2119  080F                     	;# 
  2120  0810                     	;# 
  2121  0811                     	;# 
  2122  0812                     	;# 
  2123  0813                     	;# 
  2124  0814                     	;# 
  2125  081A                     	;# 
  2126  081B                     	;# 
  2127  081C                     	;# 
  2128  081D                     	;# 
  2129  081E                     	;# 
  2130  081F                     	;# 
  2131  088C                     	;# 
  2132  088D                     	;# 
  2133  088E                     	;# 
  2134  088F                     	;# 
  2135  0890                     	;# 
  2136  0891                     	;# 
  2137  0892                     	;# 
  2138  0893                     	;# 
  2139  0895                     	;# 
  2140  0896                     	;# 
  2141  0897                     	;# 
  2142  0898                     	;# 
  2143  0899                     	;# 
  2144  089A                     	;# 
  2145  089B                     	;# 
  2146  090C                     	;# 
  2147  090E                     	;# 
  2148  090F                     	;# 
  2149  091F                     	;# 
  2150  091F                     	;# 
  2151  098F                     	;# 
  2152  098F                     	;# 
  2153  0990                     	;# 
  2154  0991                     	;# 
  2155  0992                     	;# 
  2156  0993                     	;# 
  2157  0994                     	;# 
  2158  0995                     	;# 
  2159  0996                     	;# 
  2160  0997                     	;# 
  2161  0E0F                     	;# 
  2162  0E10                     	;# 
  2163  0E11                     	;# 
  2164  0E12                     	;# 
  2165  0E13                     	;# 
  2166  0E14                     	;# 
  2167  0E15                     	;# 
  2168  0E16                     	;# 
  2169  0E17                     	;# 
  2170  0E18                     	;# 
  2171  0E19                     	;# 
  2172  0E1A                     	;# 
  2173  0E1B                     	;# 
  2174  0E1C                     	;# 
  2175  0E1D                     	;# 
  2176  0E1E                     	;# 
  2177  0E1F                     	;# 
  2178  0E20                     	;# 
  2179  0E21                     	;# 
  2180  0E22                     	;# 
  2181  0E23                     	;# 
  2182  0E24                     	;# 
  2183  0E25                     	;# 
  2184  0E26                     	;# 
  2185  0E27                     	;# 
  2186  0E28                     	;# 
  2187  0E29                     	;# 
  2188  0E2A                     	;# 
  2189  0E2B                     	;# 
  2190  0E2C                     	;# 
  2191  0E2D                     	;# 
  2192  0E2E                     	;# 
  2193  0E2F                     	;# 
  2194  0E30                     	;# 
  2195  0E31                     	;# 
  2196  0E32                     	;# 
  2197  0E33                     	;# 
  2198  0E34                     	;# 
  2199  0E35                     	;# 
  2200  0E36                     	;# 
  2201  0E37                     	;# 
  2202  0E8F                     	;# 
  2203  0E90                     	;# 
  2204  0E91                     	;# 
  2205  0E92                     	;# 
  2206  0E93                     	;# 
  2207  0E94                     	;# 
  2208  0E95                     	;# 
  2209  0E96                     	;# 
  2210  0E97                     	;# 
  2211  0E9C                     	;# 
  2212  0E9D                     	;# 
  2213  0E9E                     	;# 
  2214  0EA1                     	;# 
  2215  0EA2                     	;# 
  2216  0EA3                     	;# 
  2217  0EA4                     	;# 
  2218  0EA5                     	;# 
  2219  0EA9                     	;# 
  2220  0EAA                     	;# 
  2221  0EAB                     	;# 
  2222  0EAC                     	;# 
  2223  0EB1                     	;# 
  2224  0EB2                     	;# 
  2225  0EB3                     	;# 
  2226  0EB8                     	;# 
  2227  0EB9                     	;# 
  2228  0EBA                     	;# 
  2229  0EBB                     	;# 
  2230  0EBC                     	;# 
  2231  0EBD                     	;# 
  2232  0EBE                     	;# 
  2233  0EC3                     	;# 
  2234  0EC5                     	;# 
  2235  0EC6                     	;# 
  2236  0EC7                     	;# 
  2237  0EC8                     	;# 
  2238  0EC9                     	;# 
  2239  0ECA                     	;# 
  2240  0ECB                     	;# 
  2241  0ECC                     	;# 
  2242  0F10                     	;# 
  2243  0F11                     	;# 
  2244  0F12                     	;# 
  2245  0F13                     	;# 
  2246  0F14                     	;# 
  2247  0F15                     	;# 
  2248  0F16                     	;# 
  2249  0F17                     	;# 
  2250  0F18                     	;# 
  2251  0F19                     	;# 
  2252  0F1A                     	;# 
  2253  0F1B                     	;# 
  2254  0F1C                     	;# 
  2255  0F1D                     	;# 
  2256  0F1E                     	;# 
  2257  0F1F                     	;# 
  2258  0F20                     	;# 
  2259  0F21                     	;# 
  2260  0F22                     	;# 
  2261  0F23                     	;# 
  2262  0F24                     	;# 
  2263  0F25                     	;# 
  2264  0F26                     	;# 
  2265  0F27                     	;# 
  2266  0F28                     	;# 
  2267  0F29                     	;# 
  2268  0F2A                     	;# 
  2269  0F2B                     	;# 
  2270  0F2C                     	;# 
  2271  0F2D                     	;# 
  2272  0F2E                     	;# 
  2273  0F2F                     	;# 
  2274  0F30                     	;# 
  2275  0F31                     	;# 
  2276  0F32                     	;# 
  2277  0F38                     	;# 
  2278  0F39                     	;# 
  2279  0F3A                     	;# 
  2280  0F3B                     	;# 
  2281  0F3C                     	;# 
  2282  0F3D                     	;# 
  2283  0F3E                     	;# 
  2284  0F3F                     	;# 
  2285  0F40                     	;# 
  2286  0F41                     	;# 
  2287  0F43                     	;# 
  2288  0F44                     	;# 
  2289  0F45                     	;# 
  2290  0F46                     	;# 
  2291  0F47                     	;# 
  2292  0F48                     	;# 
  2293  0F49                     	;# 
  2294  0F4A                     	;# 
  2295  0F4B                     	;# 
  2296  0F4C                     	;# 
  2297  0F4E                     	;# 
  2298  0F4F                     	;# 
  2299  0F50                     	;# 
  2300  0F51                     	;# 
  2301  0F52                     	;# 
  2302  0F53                     	;# 
  2303  0F54                     	;# 
  2304  0F55                     	;# 
  2305  0F56                     	;# 
  2306  0F57                     	;# 
  2307  0F59                     	;# 
  2308  0F5A                     	;# 
  2309  0F5B                     	;# 
  2310  0F5C                     	;# 
  2311  0F5D                     	;# 
  2312  0F61                     	;# 
  2313  0F62                     	;# 
  2314  0F64                     	;# 
  2315  0F65                     	;# 
  2316  0F66                     	;# 
  2317  0F67                     	;# 
  2318  0F68                     	;# 
  2319  0F69                     	;# 
  2320  0F6A                     	;# 
  2321  0F6B                     	;# 
  2322  0F6C                     	;# 
  2323  0F6D                     	;# 
  2324  0FE4                     	;# 
  2325  0FE5                     	;# 
  2326  0FE6                     	;# 
  2327  0FE7                     	;# 
  2328  0FE8                     	;# 
  2329  0FE9                     	;# 
  2330  0FEA                     	;# 
  2331  0FEB                     	;# 
  2332  0FED                     	;# 
  2333  0FEE                     	;# 
  2334  0FEF                     	;# 
  2335  0000                     	;# 
  2336  0001                     	;# 
  2337  0002                     	;# 
  2338  0003                     	;# 
  2339  0004                     	;# 
  2340  0005                     	;# 
  2341  0006                     	;# 
  2342  0007                     	;# 
  2343  0008                     	;# 
  2344  0009                     	;# 
  2345  000A                     	;# 
  2346  000B                     	;# 
  2347  000C                     	;# 
  2348  000D                     	;# 
  2349  000E                     	;# 
  2350  000F                     	;# 
  2351  0010                     	;# 
  2352  0011                     	;# 
  2353  0012                     	;# 
  2354  0013                     	;# 
  2355  0014                     	;# 
  2356  0015                     	;# 
  2357  0016                     	;# 
  2358  0017                     	;# 
  2359  0018                     	;# 
  2360  0019                     	;# 
  2361  001A                     	;# 
  2362  001C                     	;# 
  2363  001C                     	;# 
  2364  001D                     	;# 
  2365  001D                     	;# 
  2366  001E                     	;# 
  2367  001F                     	;# 
  2368  008C                     	;# 
  2369  008C                     	;# 
  2370  008D                     	;# 
  2371  008E                     	;# 
  2372  008E                     	;# 
  2373  008F                     	;# 
  2374  0090                     	;# 
  2375  0090                     	;# 
  2376  0091                     	;# 
  2377  0093                     	;# 
  2378  0094                     	;# 
  2379  0095                     	;# 
  2380  0096                     	;# 
  2381  0097                     	;# 
  2382  0098                     	;# 
  2383  0099                     	;# 
  2384  009A                     	;# 
  2385  009B                     	;# 
  2386  009C                     	;# 
  2387  009D                     	;# 
  2388  009E                     	;# 
  2389  010C                     	;# 
  2390  010D                     	;# 
  2391  010E                     	;# 
  2392  010E                     	;# 
  2393  010F                     	;# 
  2394  0110                     	;# 
  2395  0110                     	;# 
  2396  0111                     	;# 
  2397  0112                     	;# 
  2398  0112                     	;# 
  2399  0113                     	;# 
  2400  0114                     	;# 
  2401  0114                     	;# 
  2402  0115                     	;# 
  2403  0116                     	;# 
  2404  0116                     	;# 
  2405  0117                     	;# 
  2406  0119                     	;# 
  2407  0119                     	;# 
  2408  0119                     	;# 
  2409  011A                     	;# 
  2410  011A                     	;# 
  2411  011A                     	;# 
  2412  011B                     	;# 
  2413  011B                     	;# 
  2414  011B                     	;# 
  2415  011B                     	;# 
  2416  011B                     	;# 
  2417  011C                     	;# 
  2418  011C                     	;# 
  2419  011C                     	;# 
  2420  011D                     	;# 
  2421  011D                     	;# 
  2422  011D                     	;# 
  2423  011E                     	;# 
  2424  011E                     	;# 
  2425  011E                     	;# 
  2426  011F                     	;# 
  2427  011F                     	;# 
  2428  011F                     	;# 
  2429  011F                     	;# 
  2430  011F                     	;# 
  2431  018C                     	;# 
  2432  018D                     	;# 
  2433  018E                     	;# 
  2434  018F                     	;# 
  2435  0190                     	;# 
  2436  0191                     	;# 
  2437  0192                     	;# 
  2438  0196                     	;# 
  2439  0197                     	;# 
  2440  0198                     	;# 
  2441  0199                     	;# 
  2442  019A                     	;# 
  2443  019B                     	;# 
  2444  019C                     	;# 
  2445  020C                     	;# 
  2446  020C                     	;# 
  2447  020D                     	;# 
  2448  020E                     	;# 
  2449  020F                     	;# 
  2450  020F                     	;# 
  2451  0210                     	;# 
  2452  0210                     	;# 
  2453  0211                     	;# 
  2454  0211                     	;# 
  2455  0212                     	;# 
  2456  0212                     	;# 
  2457  0213                     	;# 
  2458  0214                     	;# 
  2459  0215                     	;# 
  2460  0215                     	;# 
  2461  0216                     	;# 
  2462  0216                     	;# 
  2463  0217                     	;# 
  2464  0217                     	;# 
  2465  0218                     	;# 
  2466  0218                     	;# 
  2467  0219                     	;# 
  2468  021A                     	;# 
  2469  021B                     	;# 
  2470  021B                     	;# 
  2471  021C                     	;# 
  2472  021C                     	;# 
  2473  021D                     	;# 
  2474  021D                     	;# 
  2475  021E                     	;# 
  2476  021F                     	;# 
  2477  028C                     	;# 
  2478  028C                     	;# 
  2479  028D                     	;# 
  2480  028D                     	;# 
  2481  028E                     	;# 
  2482  028F                     	;# 
  2483  0290                     	;# 
  2484  0290                     	;# 
  2485  0291                     	;# 
  2486  0292                     	;# 
  2487  0292                     	;# 
  2488  0293                     	;# 
  2489  0293                     	;# 
  2490  0294                     	;# 
  2491  0295                     	;# 
  2492  0296                     	;# 
  2493  0296                     	;# 
  2494  0297                     	;# 
  2495  0298                     	;# 
  2496  0298                     	;# 
  2497  0299                     	;# 
  2498  0299                     	;# 
  2499  029A                     	;# 
  2500  029B                     	;# 
  2501  029C                     	;# 
  2502  029C                     	;# 
  2503  029D                     	;# 
  2504  030C                     	;# 
  2505  030C                     	;# 
  2506  030D                     	;# 
  2507  030E                     	;# 
  2508  030F                     	;# 
  2509  0310                     	;# 
  2510  0310                     	;# 
  2511  0311                     	;# 
  2512  0312                     	;# 
  2513  0313                     	;# 
  2514  0314                     	;# 
  2515  0314                     	;# 
  2516  0315                     	;# 
  2517  0316                     	;# 
  2518  0317                     	;# 
  2519  0318                     	;# 
  2520  0318                     	;# 
  2521  0319                     	;# 
  2522  031A                     	;# 
  2523  031B                     	;# 
  2524  031C                     	;# 
  2525  031C                     	;# 
  2526  031D                     	;# 
  2527  031E                     	;# 
  2528  031F                     	;# 
  2529  038C                     	;# 
  2530  038C                     	;# 
  2531  038D                     	;# 
  2532  038E                     	;# 
  2533  0390                     	;# 
  2534  0390                     	;# 
  2535  0391                     	;# 
  2536  0392                     	;# 
  2537  040C                     	;# 
  2538  040D                     	;# 
  2539  040E                     	;# 
  2540  040F                     	;# 
  2541  0410                     	;# 
  2542  0411                     	;# 
  2543  0416                     	;# 
  2544  0416                     	;# 
  2545  0417                     	;# 
  2546  0418                     	;# 
  2547  0418                     	;# 
  2548  0419                     	;# 
  2549  041A                     	;# 
  2550  041A                     	;# 
  2551  041B                     	;# 
  2552  041C                     	;# 
  2553  041C                     	;# 
  2554  041D                     	;# 
  2555  041E                     	;# 
  2556  041F                     	;# 
  2557  048C                     	;# 
  2558  048C                     	;# 
  2559  048D                     	;# 
  2560  048E                     	;# 
  2561  048F                     	;# 
  2562  048F                     	;# 
  2563  0490                     	;# 
  2564  0491                     	;# 
  2565  0492                     	;# 
  2566  0492                     	;# 
  2567  0493                     	;# 
  2568  0494                     	;# 
  2569  0495                     	;# 
  2570  0495                     	;# 
  2571  0496                     	;# 
  2572  0497                     	;# 
  2573  0498                     	;# 
  2574  0499                     	;# 
  2575  049A                     	;# 
  2576  049B                     	;# 
  2577  049C                     	;# 
  2578  049D                     	;# 
  2579  050C                     	;# 
  2580  050C                     	;# 
  2581  050D                     	;# 
  2582  050E                     	;# 
  2583  050F                     	;# 
  2584  050F                     	;# 
  2585  0510                     	;# 
  2586  0511                     	;# 
  2587  0512                     	;# 
  2588  0512                     	;# 
  2589  0513                     	;# 
  2590  0514                     	;# 
  2591  0515                     	;# 
  2592  0515                     	;# 
  2593  0516                     	;# 
  2594  0517                     	;# 
  2595  0518                     	;# 
  2596  0519                     	;# 
  2597  051A                     	;# 
  2598  051B                     	;# 
  2599  051C                     	;# 
  2600  051D                     	;# 
  2601  058C                     	;# 
  2602  058C                     	;# 
  2603  058D                     	;# 
  2604  058E                     	;# 
  2605  058F                     	;# 
  2606  058F                     	;# 
  2607  0590                     	;# 
  2608  0591                     	;# 
  2609  0592                     	;# 
  2610  0593                     	;# 
  2611  060C                     	;# 
  2612  060D                     	;# 
  2613  060E                     	;# 
  2614  060F                     	;# 
  2615  0610                     	;# 
  2616  0611                     	;# 
  2617  0612                     	;# 
  2618  0613                     	;# 
  2619  0614                     	;# 
  2620  0616                     	;# 
  2621  0617                     	;# 
  2622  0618                     	;# 
  2623  0619                     	;# 
  2624  061A                     	;# 
  2625  061B                     	;# 
  2626  061C                     	;# 
  2627  061D                     	;# 
  2628  061E                     	;# 
  2629  068C                     	;# 
  2630  068D                     	;# 
  2631  068E                     	;# 
  2632  068F                     	;# 
  2633  0690                     	;# 
  2634  0691                     	;# 
  2635  0692                     	;# 
  2636  0693                     	;# 
  2637  0694                     	;# 
  2638  070C                     	;# 
  2639  070D                     	;# 
  2640  070E                     	;# 
  2641  070F                     	;# 
  2642  0710                     	;# 
  2643  0711                     	;# 
  2644  0712                     	;# 
  2645  0713                     	;# 
  2646  0714                     	;# 
  2647  0716                     	;# 
  2648  0717                     	;# 
  2649  0718                     	;# 
  2650  0719                     	;# 
  2651  071A                     	;# 
  2652  071B                     	;# 
  2653  071C                     	;# 
  2654  071D                     	;# 
  2655  071E                     	;# 
  2656  0796                     	;# 
  2657  0797                     	;# 
  2658  0798                     	;# 
  2659  0799                     	;# 
  2660  079A                     	;# 
  2661  079B                     	;# 
  2662  080C                     	;# 
  2663  080D                     	;# 
  2664  080E                     	;# 
  2665  080F                     	;# 
  2666  0810                     	;# 
  2667  0811                     	;# 
  2668  0812                     	;# 
  2669  0813                     	;# 
  2670  0814                     	;# 
  2671  081A                     	;# 
  2672  081B                     	;# 
  2673  081C                     	;# 
  2674  081D                     	;# 
  2675  081E                     	;# 
  2676  081F                     	;# 
  2677  088C                     	;# 
  2678  088D                     	;# 
  2679  088E                     	;# 
  2680  088F                     	;# 
  2681  0890                     	;# 
  2682  0891                     	;# 
  2683  0892                     	;# 
  2684  0893                     	;# 
  2685  0895                     	;# 
  2686  0896                     	;# 
  2687  0897                     	;# 
  2688  0898                     	;# 
  2689  0899                     	;# 
  2690  089A                     	;# 
  2691  089B                     	;# 
  2692  090C                     	;# 
  2693  090E                     	;# 
  2694  090F                     	;# 
  2695  091F                     	;# 
  2696  091F                     	;# 
  2697  098F                     	;# 
  2698  098F                     	;# 
  2699  0990                     	;# 
  2700  0991                     	;# 
  2701  0992                     	;# 
  2702  0993                     	;# 
  2703  0994                     	;# 
  2704  0995                     	;# 
  2705  0996                     	;# 
  2706  0997                     	;# 
  2707  0E0F                     	;# 
  2708  0E10                     	;# 
  2709  0E11                     	;# 
  2710  0E12                     	;# 
  2711  0E13                     	;# 
  2712  0E14                     	;# 
  2713  0E15                     	;# 
  2714  0E16                     	;# 
  2715  0E17                     	;# 
  2716  0E18                     	;# 
  2717  0E19                     	;# 
  2718  0E1A                     	;# 
  2719  0E1B                     	;# 
  2720  0E1C                     	;# 
  2721  0E1D                     	;# 
  2722  0E1E                     	;# 
  2723  0E1F                     	;# 
  2724  0E20                     	;# 
  2725  0E21                     	;# 
  2726  0E22                     	;# 
  2727  0E23                     	;# 
  2728  0E24                     	;# 
  2729  0E25                     	;# 
  2730  0E26                     	;# 
  2731  0E27                     	;# 
  2732  0E28                     	;# 
  2733  0E29                     	;# 
  2734  0E2A                     	;# 
  2735  0E2B                     	;# 
  2736  0E2C                     	;# 
  2737  0E2D                     	;# 
  2738  0E2E                     	;# 
  2739  0E2F                     	;# 
  2740  0E30                     	;# 
  2741  0E31                     	;# 
  2742  0E32                     	;# 
  2743  0E33                     	;# 
  2744  0E34                     	;# 
  2745  0E35                     	;# 
  2746  0E36                     	;# 
  2747  0E37                     	;# 
  2748  0E8F                     	;# 
  2749  0E90                     	;# 
  2750  0E91                     	;# 
  2751  0E92                     	;# 
  2752  0E93                     	;# 
  2753  0E94                     	;# 
  2754  0E95                     	;# 
  2755  0E96                     	;# 
  2756  0E97                     	;# 
  2757  0E9C                     	;# 
  2758  0E9D                     	;# 
  2759  0E9E                     	;# 
  2760  0EA1                     	;# 
  2761  0EA2                     	;# 
  2762  0EA3                     	;# 
  2763  0EA4                     	;# 
  2764  0EA5                     	;# 
  2765  0EA9                     	;# 
  2766  0EAA                     	;# 
  2767  0EAB                     	;# 
  2768  0EAC                     	;# 
  2769  0EB1                     	;# 
  2770  0EB2                     	;# 
  2771  0EB3                     	;# 
  2772  0EB8                     	;# 
  2773  0EB9                     	;# 
  2774  0EBA                     	;# 
  2775  0EBB                     	;# 
  2776  0EBC                     	;# 
  2777  0EBD                     	;# 
  2778  0EBE                     	;# 
  2779  0EC3                     	;# 
  2780  0EC5                     	;# 
  2781  0EC6                     	;# 
  2782  0EC7                     	;# 
  2783  0EC8                     	;# 
  2784  0EC9                     	;# 
  2785  0ECA                     	;# 
  2786  0ECB                     	;# 
  2787  0ECC                     	;# 
  2788  0F10                     	;# 
  2789  0F11                     	;# 
  2790  0F12                     	;# 
  2791  0F13                     	;# 
  2792  0F14                     	;# 
  2793  0F15                     	;# 
  2794  0F16                     	;# 
  2795  0F17                     	;# 
  2796  0F18                     	;# 
  2797  0F19                     	;# 
  2798  0F1A                     	;# 
  2799  0F1B                     	;# 
  2800  0F1C                     	;# 
  2801  0F1D                     	;# 
  2802  0F1E                     	;# 
  2803  0F1F                     	;# 
  2804  0F20                     	;# 
  2805  0F21                     	;# 
  2806  0F22                     	;# 
  2807  0F23                     	;# 
  2808  0F24                     	;# 
  2809  0F25                     	;# 
  2810  0F26                     	;# 
  2811  0F27                     	;# 
  2812  0F28                     	;# 
  2813  0F29                     	;# 
  2814  0F2A                     	;# 
  2815  0F2B                     	;# 
  2816  0F2C                     	;# 
  2817  0F2D                     	;# 
  2818  0F2E                     	;# 
  2819  0F2F                     	;# 
  2820  0F30                     	;# 
  2821  0F31                     	;# 
  2822  0F32                     	;# 
  2823  0F38                     	;# 
  2824  0F39                     	;# 
  2825  0F3A                     	;# 
  2826  0F3B                     	;# 
  2827  0F3C                     	;# 
  2828  0F3D                     	;# 
  2829  0F3E                     	;# 
  2830  0F3F                     	;# 
  2831  0F40                     	;# 
  2832  0F41                     	;# 
  2833  0F43                     	;# 
  2834  0F44                     	;# 
  2835  0F45                     	;# 
  2836  0F46                     	;# 
  2837  0F47                     	;# 
  2838  0F48                     	;# 
  2839  0F49                     	;# 
  2840  0F4A                     	;# 
  2841  0F4B                     	;# 
  2842  0F4C                     	;# 
  2843  0F4E                     	;# 
  2844  0F4F                     	;# 
  2845  0F50                     	;# 
  2846  0F51                     	;# 
  2847  0F52                     	;# 
  2848  0F53                     	;# 
  2849  0F54                     	;# 
  2850  0F55                     	;# 
  2851  0F56                     	;# 
  2852  0F57                     	;# 
  2853  0F59                     	;# 
  2854  0F5A                     	;# 
  2855  0F5B                     	;# 
  2856  0F5C                     	;# 
  2857  0F5D                     	;# 
  2858  0F61                     	;# 
  2859  0F62                     	;# 
  2860  0F64                     	;# 
  2861  0F65                     	;# 
  2862  0F66                     	;# 
  2863  0F67                     	;# 
  2864  0F68                     	;# 
  2865  0F69                     	;# 
  2866  0F6A                     	;# 
  2867  0F6B                     	;# 
  2868  0F6C                     	;# 
  2869  0F6D                     	;# 
  2870  0FE4                     	;# 
  2871  0FE5                     	;# 
  2872  0FE6                     	;# 
  2873  0FE7                     	;# 
  2874  0FE8                     	;# 
  2875  0FE9                     	;# 
  2876  0FEA                     	;# 
  2877  0FEB                     	;# 
  2878  0FED                     	;# 
  2879  0FEE                     	;# 
  2880  0FEF                     	;# 
  2881  0000                     	;# 
  2882  0001                     	;# 
  2883  0002                     	;# 
  2884  0003                     	;# 
  2885  0004                     	;# 
  2886  0005                     	;# 
  2887  0006                     	;# 
  2888  0007                     	;# 
  2889  0008                     	;# 
  2890  0009                     	;# 
  2891  000A                     	;# 
  2892  000B                     	;# 
  2893  000C                     	;# 
  2894  000D                     	;# 
  2895  000E                     	;# 
  2896  000F                     	;# 
  2897  0010                     	;# 
  2898  0011                     	;# 
  2899  0012                     	;# 
  2900  0013                     	;# 
  2901  0014                     	;# 
  2902  0015                     	;# 
  2903  0016                     	;# 
  2904  0017                     	;# 
  2905  0018                     	;# 
  2906  0019                     	;# 
  2907  001A                     	;# 
  2908  001C                     	;# 
  2909  001C                     	;# 
  2910  001D                     	;# 
  2911  001D                     	;# 
  2912  001E                     	;# 
  2913  001F                     	;# 
  2914  008C                     	;# 
  2915  008C                     	;# 
  2916  008D                     	;# 
  2917  008E                     	;# 
  2918  008E                     	;# 
  2919  008F                     	;# 
  2920  0090                     	;# 
  2921  0090                     	;# 
  2922  0091                     	;# 
  2923  0093                     	;# 
  2924  0094                     	;# 
  2925  0095                     	;# 
  2926  0096                     	;# 
  2927  0097                     	;# 
  2928  0098                     	;# 
  2929  0099                     	;# 
  2930  009A                     	;# 
  2931  009B                     	;# 
  2932  009C                     	;# 
  2933  009D                     	;# 
  2934  009E                     	;# 
  2935  010C                     	;# 
  2936  010D                     	;# 
  2937  010E                     	;# 
  2938  010E                     	;# 
  2939  010F                     	;# 
  2940  0110                     	;# 
  2941  0110                     	;# 
  2942  0111                     	;# 
  2943  0112                     	;# 
  2944  0112                     	;# 
  2945  0113                     	;# 
  2946  0114                     	;# 
  2947  0114                     	;# 
  2948  0115                     	;# 
  2949  0116                     	;# 
  2950  0116                     	;# 
  2951  0117                     	;# 
  2952  0119                     	;# 
  2953  0119                     	;# 
  2954  0119                     	;# 
  2955  011A                     	;# 
  2956  011A                     	;# 
  2957  011A                     	;# 
  2958  011B                     	;# 
  2959  011B                     	;# 
  2960  011B                     	;# 
  2961  011B                     	;# 
  2962  011B                     	;# 
  2963  011C                     	;# 
  2964  011C                     	;# 
  2965  011C                     	;# 
  2966  011D                     	;# 
  2967  011D                     	;# 
  2968  011D                     	;# 
  2969  011E                     	;# 
  2970  011E                     	;# 
  2971  011E                     	;# 
  2972  011F                     	;# 
  2973  011F                     	;# 
  2974  011F                     	;# 
  2975  011F                     	;# 
  2976  011F                     	;# 
  2977  018C                     	;# 
  2978  018D                     	;# 
  2979  018E                     	;# 
  2980  018F                     	;# 
  2981  0190                     	;# 
  2982  0191                     	;# 
  2983  0192                     	;# 
  2984  0196                     	;# 
  2985  0197                     	;# 
  2986  0198                     	;# 
  2987  0199                     	;# 
  2988  019A                     	;# 
  2989  019B                     	;# 
  2990  019C                     	;# 
  2991  020C                     	;# 
  2992  020C                     	;# 
  2993  020D                     	;# 
  2994  020E                     	;# 
  2995  020F                     	;# 
  2996  020F                     	;# 
  2997  0210                     	;# 
  2998  0210                     	;# 
  2999  0211                     	;# 
  3000  0211                     	;# 
  3001  0212                     	;# 
  3002  0212                     	;# 
  3003  0213                     	;# 
  3004  0214                     	;# 
  3005  0215                     	;# 
  3006  0215                     	;# 
  3007  0216                     	;# 
  3008  0216                     	;# 
  3009  0217                     	;# 
  3010  0217                     	;# 
  3011  0218                     	;# 
  3012  0218                     	;# 
  3013  0219                     	;# 
  3014  021A                     	;# 
  3015  021B                     	;# 
  3016  021B                     	;# 
  3017  021C                     	;# 
  3018  021C                     	;# 
  3019  021D                     	;# 
  3020  021D                     	;# 
  3021  021E                     	;# 
  3022  021F                     	;# 
  3023  028C                     	;# 
  3024  028C                     	;# 
  3025  028D                     	;# 
  3026  028D                     	;# 
  3027  028E                     	;# 
  3028  028F                     	;# 
  3029  0290                     	;# 
  3030  0290                     	;# 
  3031  0291                     	;# 
  3032  0292                     	;# 
  3033  0292                     	;# 
  3034  0293                     	;# 
  3035  0293                     	;# 
  3036  0294                     	;# 
  3037  0295                     	;# 
  3038  0296                     	;# 
  3039  0296                     	;# 
  3040  0297                     	;# 
  3041  0298                     	;# 
  3042  0298                     	;# 
  3043  0299                     	;# 
  3044  0299                     	;# 
  3045  029A                     	;# 
  3046  029B                     	;# 
  3047  029C                     	;# 
  3048  029C                     	;# 
  3049  029D                     	;# 
  3050  030C                     	;# 
  3051  030C                     	;# 
  3052  030D                     	;# 
  3053  030E                     	;# 
  3054  030F                     	;# 
  3055  0310                     	;# 
  3056  0310                     	;# 
  3057  0311                     	;# 
  3058  0312                     	;# 
  3059  0313                     	;# 
  3060  0314                     	;# 
  3061  0314                     	;# 
  3062  0315                     	;# 
  3063  0316                     	;# 
  3064  0317                     	;# 
  3065  0318                     	;# 
  3066  0318                     	;# 
  3067  0319                     	;# 
  3068  031A                     	;# 
  3069  031B                     	;# 
  3070  031C                     	;# 
  3071  031C                     	;# 
  3072  031D                     	;# 
  3073  031E                     	;# 
  3074  031F                     	;# 
  3075  038C                     	;# 
  3076  038C                     	;# 
  3077  038D                     	;# 
  3078  038E                     	;# 
  3079  0390                     	;# 
  3080  0390                     	;# 
  3081  0391                     	;# 
  3082  0392                     	;# 
  3083  040C                     	;# 
  3084  040D                     	;# 
  3085  040E                     	;# 
  3086  040F                     	;# 
  3087  0410                     	;# 
  3088  0411                     	;# 
  3089  0416                     	;# 
  3090  0416                     	;# 
  3091  0417                     	;# 
  3092  0418                     	;# 
  3093  0418                     	;# 
  3094  0419                     	;# 
  3095  041A                     	;# 
  3096  041A                     	;# 
  3097  041B                     	;# 
  3098  041C                     	;# 
  3099  041C                     	;# 
  3100  041D                     	;# 
  3101  041E                     	;# 
  3102  041F                     	;# 
  3103  048C                     	;# 
  3104  048C                     	;# 
  3105  048D                     	;# 
  3106  048E                     	;# 
  3107  048F                     	;# 
  3108  048F                     	;# 
  3109  0490                     	;# 
  3110  0491                     	;# 
  3111  0492                     	;# 
  3112  0492                     	;# 
  3113  0493                     	;# 
  3114  0494                     	;# 
  3115  0495                     	;# 
  3116  0495                     	;# 
  3117  0496                     	;# 
  3118  0497                     	;# 
  3119  0498                     	;# 
  3120  0499                     	;# 
  3121  049A                     	;# 
  3122  049B                     	;# 
  3123  049C                     	;# 
  3124  049D                     	;# 
  3125  050C                     	;# 
  3126  050C                     	;# 
  3127  050D                     	;# 
  3128  050E                     	;# 
  3129  050F                     	;# 
  3130  050F                     	;# 
  3131  0510                     	;# 
  3132  0511                     	;# 
  3133  0512                     	;# 
  3134  0512                     	;# 
  3135  0513                     	;# 
  3136  0514                     	;# 
  3137  0515                     	;# 
  3138  0515                     	;# 
  3139  0516                     	;# 
  3140  0517                     	;# 
  3141  0518                     	;# 
  3142  0519                     	;# 
  3143  051A                     	;# 
  3144  051B                     	;# 
  3145  051C                     	;# 
  3146  051D                     	;# 
  3147  058C                     	;# 
  3148  058C                     	;# 
  3149  058D                     	;# 
  3150  058E                     	;# 
  3151  058F                     	;# 
  3152  058F                     	;# 
  3153  0590                     	;# 
  3154  0591                     	;# 
  3155  0592                     	;# 
  3156  0593                     	;# 
  3157  060C                     	;# 
  3158  060D                     	;# 
  3159  060E                     	;# 
  3160  060F                     	;# 
  3161  0610                     	;# 
  3162  0611                     	;# 
  3163  0612                     	;# 
  3164  0613                     	;# 
  3165  0614                     	;# 
  3166  0616                     	;# 
  3167  0617                     	;# 
  3168  0618                     	;# 
  3169  0619                     	;# 
  3170  061A                     	;# 
  3171  061B                     	;# 
  3172  061C                     	;# 
  3173  061D                     	;# 
  3174  061E                     	;# 
  3175  068C                     	;# 
  3176  068D                     	;# 
  3177  068E                     	;# 
  3178  068F                     	;# 
  3179  0690                     	;# 
  3180  0691                     	;# 
  3181  0692                     	;# 
  3182  0693                     	;# 
  3183  0694                     	;# 
  3184  070C                     	;# 
  3185  070D                     	;# 
  3186  070E                     	;# 
  3187  070F                     	;# 
  3188  0710                     	;# 
  3189  0711                     	;# 
  3190  0712                     	;# 
  3191  0713                     	;# 
  3192  0714                     	;# 
  3193  0716                     	;# 
  3194  0717                     	;# 
  3195  0718                     	;# 
  3196  0719                     	;# 
  3197  071A                     	;# 
  3198  071B                     	;# 
  3199  071C                     	;# 
  3200  071D                     	;# 
  3201  071E                     	;# 
  3202  0796                     	;# 
  3203  0797                     	;# 
  3204  0798                     	;# 
  3205  0799                     	;# 
  3206  079A                     	;# 
  3207  079B                     	;# 
  3208  080C                     	;# 
  3209  080D                     	;# 
  3210  080E                     	;# 
  3211  080F                     	;# 
  3212  0810                     	;# 
  3213  0811                     	;# 
  3214  0812                     	;# 
  3215  0813                     	;# 
  3216  0814                     	;# 
  3217  081A                     	;# 
  3218  081B                     	;# 
  3219  081C                     	;# 
  3220  081D                     	;# 
  3221  081E                     	;# 
  3222  081F                     	;# 
  3223  088C                     	;# 
  3224  088D                     	;# 
  3225  088E                     	;# 
  3226  088F                     	;# 
  3227  0890                     	;# 
  3228  0891                     	;# 
  3229  0892                     	;# 
  3230  0893                     	;# 
  3231  0895                     	;# 
  3232  0896                     	;# 
  3233  0897                     	;# 
  3234  0898                     	;# 
  3235  0899                     	;# 
  3236  089A                     	;# 
  3237  089B                     	;# 
  3238  090C                     	;# 
  3239  090E                     	;# 
  3240  090F                     	;# 
  3241  091F                     	;# 
  3242  091F                     	;# 
  3243  098F                     	;# 
  3244  098F                     	;# 
  3245  0990                     	;# 
  3246  0991                     	;# 
  3247  0992                     	;# 
  3248  0993                     	;# 
  3249  0994                     	;# 
  3250  0995                     	;# 
  3251  0996                     	;# 
  3252  0997                     	;# 
  3253  0E0F                     	;# 
  3254  0E10                     	;# 
  3255  0E11                     	;# 
  3256  0E12                     	;# 
  3257  0E13                     	;# 
  3258  0E14                     	;# 
  3259  0E15                     	;# 
  3260  0E16                     	;# 
  3261  0E17                     	;# 
  3262  0E18                     	;# 
  3263  0E19                     	;# 
  3264  0E1A                     	;# 
  3265  0E1B                     	;# 
  3266  0E1C                     	;# 
  3267  0E1D                     	;# 
  3268  0E1E                     	;# 
  3269  0E1F                     	;# 
  3270  0E20                     	;# 
  3271  0E21                     	;# 
  3272  0E22                     	;# 
  3273  0E23                     	;# 
  3274  0E24                     	;# 
  3275  0E25                     	;# 
  3276  0E26                     	;# 
  3277  0E27                     	;# 
  3278  0E28                     	;# 
  3279  0E29                     	;# 
  3280  0E2A                     	;# 
  3281  0E2B                     	;# 
  3282  0E2C                     	;# 
  3283  0E2D                     	;# 
  3284  0E2E                     	;# 
  3285  0E2F                     	;# 
  3286  0E30                     	;# 
  3287  0E31                     	;# 
  3288  0E32                     	;# 
  3289  0E33                     	;# 
  3290  0E34                     	;# 
  3291  0E35                     	;# 
  3292  0E36                     	;# 
  3293  0E37                     	;# 
  3294  0E8F                     	;# 
  3295  0E90                     	;# 
  3296  0E91                     	;# 
  3297  0E92                     	;# 
  3298  0E93                     	;# 
  3299  0E94                     	;# 
  3300  0E95                     	;# 
  3301  0E96                     	;# 
  3302  0E97                     	;# 
  3303  0E9C                     	;# 
  3304  0E9D                     	;# 
  3305  0E9E                     	;# 
  3306  0EA1                     	;# 
  3307  0EA2                     	;# 
  3308  0EA3                     	;# 
  3309  0EA4                     	;# 
  3310  0EA5                     	;# 
  3311  0EA9                     	;# 
  3312  0EAA                     	;# 
  3313  0EAB                     	;# 
  3314  0EAC                     	;# 
  3315  0EB1                     	;# 
  3316  0EB2                     	;# 
  3317  0EB3                     	;# 
  3318  0EB8                     	;# 
  3319  0EB9                     	;# 
  3320  0EBA                     	;# 
  3321  0EBB                     	;# 
  3322  0EBC                     	;# 
  3323  0EBD                     	;# 
  3324  0EBE                     	;# 
  3325  0EC3                     	;# 
  3326  0EC5                     	;# 
  3327  0EC6                     	;# 
  3328  0EC7                     	;# 
  3329  0EC8                     	;# 
  3330  0EC9                     	;# 
  3331  0ECA                     	;# 
  3332  0ECB                     	;# 
  3333  0ECC                     	;# 
  3334  0F10                     	;# 
  3335  0F11                     	;# 
  3336  0F12                     	;# 
  3337  0F13                     	;# 
  3338  0F14                     	;# 
  3339  0F15                     	;# 
  3340  0F16                     	;# 
  3341  0F17                     	;# 
  3342  0F18                     	;# 
  3343  0F19                     	;# 
  3344  0F1A                     	;# 
  3345  0F1B                     	;# 
  3346  0F1C                     	;# 
  3347  0F1D                     	;# 
  3348  0F1E                     	;# 
  3349  0F1F                     	;# 
  3350  0F20                     	;# 
  3351  0F21                     	;# 
  3352  0F22                     	;# 
  3353  0F23                     	;# 
  3354  0F24                     	;# 
  3355  0F25                     	;# 
  3356  0F26                     	;# 
  3357  0F27                     	;# 
  3358  0F28                     	;# 
  3359  0F29                     	;# 
  3360  0F2A                     	;# 
  3361  0F2B                     	;# 
  3362  0F2C                     	;# 
  3363  0F2D                     	;# 
  3364  0F2E                     	;# 
  3365  0F2F                     	;# 
  3366  0F30                     	;# 
  3367  0F31                     	;# 
  3368  0F32                     	;# 
  3369  0F38                     	;# 
  3370  0F39                     	;# 
  3371  0F3A                     	;# 
  3372  0F3B                     	;# 
  3373  0F3C                     	;# 
  3374  0F3D                     	;# 
  3375  0F3E                     	;# 
  3376  0F3F                     	;# 
  3377  0F40                     	;# 
  3378  0F41                     	;# 
  3379  0F43                     	;# 
  3380  0F44                     	;# 
  3381  0F45                     	;# 
  3382  0F46                     	;# 
  3383  0F47                     	;# 
  3384  0F48                     	;# 
  3385  0F49                     	;# 
  3386  0F4A                     	;# 
  3387  0F4B                     	;# 
  3388  0F4C                     	;# 
  3389  0F4E                     	;# 
  3390  0F4F                     	;# 
  3391  0F50                     	;# 
  3392  0F51                     	;# 
  3393  0F52                     	;# 
  3394  0F53                     	;# 
  3395  0F54                     	;# 
  3396  0F55                     	;# 
  3397  0F56                     	;# 
  3398  0F57                     	;# 
  3399  0F59                     	;# 
  3400  0F5A                     	;# 
  3401  0F5B                     	;# 
  3402  0F5C                     	;# 
  3403  0F5D                     	;# 
  3404  0F61                     	;# 
  3405  0F62                     	;# 
  3406  0F64                     	;# 
  3407  0F65                     	;# 
  3408  0F66                     	;# 
  3409  0F67                     	;# 
  3410  0F68                     	;# 
  3411  0F69                     	;# 
  3412  0F6A                     	;# 
  3413  0F6B                     	;# 
  3414  0F6C                     	;# 
  3415  0F6D                     	;# 
  3416  0FE4                     	;# 
  3417  0FE5                     	;# 
  3418  0FE6                     	;# 
  3419  0FE7                     	;# 
  3420  0FE8                     	;# 
  3421  0FE9                     	;# 
  3422  0FEA                     	;# 
  3423  0FEB                     	;# 
  3424  0FED                     	;# 
  3425  0FEE                     	;# 
  3426  0FEF                     	;# 
  3427  0000                     	;# 
  3428  0001                     	;# 
  3429  0002                     	;# 
  3430  0003                     	;# 
  3431  0004                     	;# 
  3432  0005                     	;# 
  3433  0006                     	;# 
  3434  0007                     	;# 
  3435  0008                     	;# 
  3436  0009                     	;# 
  3437  000A                     	;# 
  3438  000B                     	;# 
  3439  000C                     	;# 
  3440  000D                     	;# 
  3441  000E                     	;# 
  3442  000F                     	;# 
  3443  0010                     	;# 
  3444  0011                     	;# 
  3445  0012                     	;# 
  3446  0013                     	;# 
  3447  0014                     	;# 
  3448  0015                     	;# 
  3449  0016                     	;# 
  3450  0017                     	;# 
  3451  0018                     	;# 
  3452  0019                     	;# 
  3453  001A                     	;# 
  3454  001C                     	;# 
  3455  001C                     	;# 
  3456  001D                     	;# 
  3457  001D                     	;# 
  3458  001E                     	;# 
  3459  001F                     	;# 
  3460  008C                     	;# 
  3461  008C                     	;# 
  3462  008D                     	;# 
  3463  008E                     	;# 
  3464  008E                     	;# 
  3465  008F                     	;# 
  3466  0090                     	;# 
  3467  0090                     	;# 
  3468  0091                     	;# 
  3469  0093                     	;# 
  3470  0094                     	;# 
  3471  0095                     	;# 
  3472  0096                     	;# 
  3473  0097                     	;# 
  3474  0098                     	;# 
  3475  0099                     	;# 
  3476  009A                     	;# 
  3477  009B                     	;# 
  3478  009C                     	;# 
  3479  009D                     	;# 
  3480  009E                     	;# 
  3481  010C                     	;# 
  3482  010D                     	;# 
  3483  010E                     	;# 
  3484  010E                     	;# 
  3485  010F                     	;# 
  3486  0110                     	;# 
  3487  0110                     	;# 
  3488  0111                     	;# 
  3489  0112                     	;# 
  3490  0112                     	;# 
  3491  0113                     	;# 
  3492  0114                     	;# 
  3493  0114                     	;# 
  3494  0115                     	;# 
  3495  0116                     	;# 
  3496  0116                     	;# 
  3497  0117                     	;# 
  3498  0119                     	;# 
  3499  0119                     	;# 
  3500  0119                     	;# 
  3501  011A                     	;# 
  3502  011A                     	;# 
  3503  011A                     	;# 
  3504  011B                     	;# 
  3505  011B                     	;# 
  3506  011B                     	;# 
  3507  011B                     	;# 
  3508  011B                     	;# 
  3509  011C                     	;# 
  3510  011C                     	;# 
  3511  011C                     	;# 
  3512  011D                     	;# 
  3513  011D                     	;# 
  3514  011D                     	;# 
  3515  011E                     	;# 
  3516  011E                     	;# 
  3517  011E                     	;# 
  3518  011F                     	;# 
  3519  011F                     	;# 
  3520  011F                     	;# 
  3521  011F                     	;# 
  3522  011F                     	;# 
  3523  018C                     	;# 
  3524  018D                     	;# 
  3525  018E                     	;# 
  3526  018F                     	;# 
  3527  0190                     	;# 
  3528  0191                     	;# 
  3529  0192                     	;# 
  3530  0196                     	;# 
  3531  0197                     	;# 
  3532  0198                     	;# 
  3533  0199                     	;# 
  3534  019A                     	;# 
  3535  019B                     	;# 
  3536  019C                     	;# 
  3537  020C                     	;# 
  3538  020C                     	;# 
  3539  020D                     	;# 
  3540  020E                     	;# 
  3541  020F                     	;# 
  3542  020F                     	;# 
  3543  0210                     	;# 
  3544  0210                     	;# 
  3545  0211                     	;# 
  3546  0211                     	;# 
  3547  0212                     	;# 
  3548  0212                     	;# 
  3549  0213                     	;# 
  3550  0214                     	;# 
  3551  0215                     	;# 
  3552  0215                     	;# 
  3553  0216                     	;# 
  3554  0216                     	;# 
  3555  0217                     	;# 
  3556  0217                     	;# 
  3557  0218                     	;# 
  3558  0218                     	;# 
  3559  0219                     	;# 
  3560  021A                     	;# 
  3561  021B                     	;# 
  3562  021B                     	;# 
  3563  021C                     	;# 
  3564  021C                     	;# 
  3565  021D                     	;# 
  3566  021D                     	;# 
  3567  021E                     	;# 
  3568  021F                     	;# 
  3569  028C                     	;# 
  3570  028C                     	;# 
  3571  028D                     	;# 
  3572  028D                     	;# 
  3573  028E                     	;# 
  3574  028F                     	;# 
  3575  0290                     	;# 
  3576  0290                     	;# 
  3577  0291                     	;# 
  3578  0292                     	;# 
  3579  0292                     	;# 
  3580  0293                     	;# 
  3581  0293                     	;# 
  3582  0294                     	;# 
  3583  0295                     	;# 
  3584  0296                     	;# 
  3585  0296                     	;# 
  3586  0297                     	;# 
  3587  0298                     	;# 
  3588  0298                     	;# 
  3589  0299                     	;# 
  3590  0299                     	;# 
  3591  029A                     	;# 
  3592  029B                     	;# 
  3593  029C                     	;# 
  3594  029C                     	;# 
  3595  029D                     	;# 
  3596  030C                     	;# 
  3597  030C                     	;# 
  3598  030D                     	;# 
  3599  030E                     	;# 
  3600  030F                     	;# 
  3601  0310                     	;# 
  3602  0310                     	;# 
  3603  0311                     	;# 
  3604  0312                     	;# 
  3605  0313                     	;# 
  3606  0314                     	;# 
  3607  0314                     	;# 
  3608  0315                     	;# 
  3609  0316                     	;# 
  3610  0317                     	;# 
  3611  0318                     	;# 
  3612  0318                     	;# 
  3613  0319                     	;# 
  3614  031A                     	;# 
  3615  031B                     	;# 
  3616  031C                     	;# 
  3617  031C                     	;# 
  3618  031D                     	;# 
  3619  031E                     	;# 
  3620  031F                     	;# 
  3621  038C                     	;# 
  3622  038C                     	;# 
  3623  038D                     	;# 
  3624  038E                     	;# 
  3625  0390                     	;# 
  3626  0390                     	;# 
  3627  0391                     	;# 
  3628  0392                     	;# 
  3629  040C                     	;# 
  3630  040D                     	;# 
  3631  040E                     	;# 
  3632  040F                     	;# 
  3633  0410                     	;# 
  3634  0411                     	;# 
  3635  0416                     	;# 
  3636  0416                     	;# 
  3637  0417                     	;# 
  3638  0418                     	;# 
  3639  0418                     	;# 
  3640  0419                     	;# 
  3641  041A                     	;# 
  3642  041A                     	;# 
  3643  041B                     	;# 
  3644  041C                     	;# 
  3645  041C                     	;# 
  3646  041D                     	;# 
  3647  041E                     	;# 
  3648  041F                     	;# 
  3649  048C                     	;# 
  3650  048C                     	;# 
  3651  048D                     	;# 
  3652  048E                     	;# 
  3653  048F                     	;# 
  3654  048F                     	;# 
  3655  0490                     	;# 
  3656  0491                     	;# 
  3657  0492                     	;# 
  3658  0492                     	;# 
  3659  0493                     	;# 
  3660  0494                     	;# 
  3661  0495                     	;# 
  3662  0495                     	;# 
  3663  0496                     	;# 
  3664  0497                     	;# 
  3665  0498                     	;# 
  3666  0499                     	;# 
  3667  049A                     	;# 
  3668  049B                     	;# 
  3669  049C                     	;# 
  3670  049D                     	;# 
  3671  050C                     	;# 
  3672  050C                     	;# 
  3673  050D                     	;# 
  3674  050E                     	;# 
  3675  050F                     	;# 
  3676  050F                     	;# 
  3677  0510                     	;# 
  3678  0511                     	;# 
  3679  0512                     	;# 
  3680  0512                     	;# 
  3681  0513                     	;# 
  3682  0514                     	;# 
  3683  0515                     	;# 
  3684  0515                     	;# 
  3685  0516                     	;# 
  3686  0517                     	;# 
  3687  0518                     	;# 
  3688  0519                     	;# 
  3689  051A                     	;# 
  3690  051B                     	;# 
  3691  051C                     	;# 
  3692  051D                     	;# 
  3693  058C                     	;# 
  3694  058C                     	;# 
  3695  058D                     	;# 
  3696  058E                     	;# 
  3697  058F                     	;# 
  3698  058F                     	;# 
  3699  0590                     	;# 
  3700  0591                     	;# 
  3701  0592                     	;# 
  3702  0593                     	;# 
  3703  060C                     	;# 
  3704  060D                     	;# 
  3705  060E                     	;# 
  3706  060F                     	;# 
  3707  0610                     	;# 
  3708  0611                     	;# 
  3709  0612                     	;# 
  3710  0613                     	;# 
  3711  0614                     	;# 
  3712  0616                     	;# 
  3713  0617                     	;# 
  3714  0618                     	;# 
  3715  0619                     	;# 
  3716  061A                     	;# 
  3717  061B                     	;# 
  3718  061C                     	;# 
  3719  061D                     	;# 
  3720  061E                     	;# 
  3721  068C                     	;# 
  3722  068D                     	;# 
  3723  068E                     	;# 
  3724  068F                     	;# 
  3725  0690                     	;# 
  3726  0691                     	;# 
  3727  0692                     	;# 
  3728  0693                     	;# 
  3729  0694                     	;# 
  3730  070C                     	;# 
  3731  070D                     	;# 
  3732  070E                     	;# 
  3733  070F                     	;# 
  3734  0710                     	;# 
  3735  0711                     	;# 
  3736  0712                     	;# 
  3737  0713                     	;# 
  3738  0714                     	;# 
  3739  0716                     	;# 
  3740  0717                     	;# 
  3741  0718                     	;# 
  3742  0719                     	;# 
  3743  071A                     	;# 
  3744  071B                     	;# 
  3745  071C                     	;# 
  3746  071D                     	;# 
  3747  071E                     	;# 
  3748  0796                     	;# 
  3749  0797                     	;# 
  3750  0798                     	;# 
  3751  0799                     	;# 
  3752  079A                     	;# 
  3753  079B                     	;# 
  3754  080C                     	;# 
  3755  080D                     	;# 
  3756  080E                     	;# 
  3757  080F                     	;# 
  3758  0810                     	;# 
  3759  0811                     	;# 
  3760  0812                     	;# 
  3761  0813                     	;# 
  3762  0814                     	;# 
  3763  081A                     	;# 
  3764  081B                     	;# 
  3765  081C                     	;# 
  3766  081D                     	;# 
  3767  081E                     	;# 
  3768  081F                     	;# 
  3769  088C                     	;# 
  3770  088D                     	;# 
  3771  088E                     	;# 
  3772  088F                     	;# 
  3773  0890                     	;# 
  3774  0891                     	;# 
  3775  0892                     	;# 
  3776  0893                     	;# 
  3777  0895                     	;# 
  3778  0896                     	;# 
  3779  0897                     	;# 
  3780  0898                     	;# 
  3781  0899                     	;# 
  3782  089A                     	;# 
  3783  089B                     	;# 
  3784  090C                     	;# 
  3785  090E                     	;# 
  3786  090F                     	;# 
  3787  091F                     	;# 
  3788  091F                     	;# 
  3789  098F                     	;# 
  3790  098F                     	;# 
  3791  0990                     	;# 
  3792  0991                     	;# 
  3793  0992                     	;# 
  3794  0993                     	;# 
  3795  0994                     	;# 
  3796  0995                     	;# 
  3797  0996                     	;# 
  3798  0997                     	;# 
  3799  0E0F                     	;# 
  3800  0E10                     	;# 
  3801  0E11                     	;# 
  3802  0E12                     	;# 
  3803  0E13                     	;# 
  3804  0E14                     	;# 
  3805  0E15                     	;# 
  3806  0E16                     	;# 
  3807  0E17                     	;# 
  3808  0E18                     	;# 
  3809  0E19                     	;# 
  3810  0E1A                     	;# 
  3811  0E1B                     	;# 
  3812  0E1C                     	;# 
  3813  0E1D                     	;# 
  3814  0E1E                     	;# 
  3815  0E1F                     	;# 
  3816  0E20                     	;# 
  3817  0E21                     	;# 
  3818  0E22                     	;# 
  3819  0E23                     	;# 
  3820  0E24                     	;# 
  3821  0E25                     	;# 
  3822  0E26                     	;# 
  3823  0E27                     	;# 
  3824  0E28                     	;# 
  3825  0E29                     	;# 
  3826  0E2A                     	;# 
  3827  0E2B                     	;# 
  3828  0E2C                     	;# 
  3829  0E2D                     	;# 
  3830  0E2E                     	;# 
  3831  0E2F                     	;# 
  3832  0E30                     	;# 
  3833  0E31                     	;# 
  3834  0E32                     	;# 
  3835  0E33                     	;# 
  3836  0E34                     	;# 
  3837  0E35                     	;# 
  3838  0E36                     	;# 
  3839  0E37                     	;# 
  3840  0E8F                     	;# 
  3841  0E90                     	;# 
  3842  0E91                     	;# 
  3843  0E92                     	;# 
  3844  0E93                     	;# 
  3845  0E94                     	;# 
  3846  0E95                     	;# 
  3847  0E96                     	;# 
  3848  0E97                     	;# 
  3849  0E9C                     	;# 
  3850  0E9D                     	;# 
  3851  0E9E                     	;# 
  3852  0EA1                     	;# 
  3853  0EA2                     	;# 
  3854  0EA3                     	;# 
  3855  0EA4                     	;# 
  3856  0EA5                     	;# 
  3857  0EA9                     	;# 
  3858  0EAA                     	;# 
  3859  0EAB                     	;# 
  3860  0EAC                     	;# 
  3861  0EB1                     	;# 
  3862  0EB2                     	;# 
  3863  0EB3                     	;# 
  3864  0EB8                     	;# 
  3865  0EB9                     	;# 
  3866  0EBA                     	;# 
  3867  0EBB                     	;# 
  3868  0EBC                     	;# 
  3869  0EBD                     	;# 
  3870  0EBE                     	;# 
  3871  0EC3                     	;# 
  3872  0EC5                     	;# 
  3873  0EC6                     	;# 
  3874  0EC7                     	;# 
  3875  0EC8                     	;# 
  3876  0EC9                     	;# 
  3877  0ECA                     	;# 
  3878  0ECB                     	;# 
  3879  0ECC                     	;# 
  3880  0F10                     	;# 
  3881  0F11                     	;# 
  3882  0F12                     	;# 
  3883  0F13                     	;# 
  3884  0F14                     	;# 
  3885  0F15                     	;# 
  3886  0F16                     	;# 
  3887  0F17                     	;# 
  3888  0F18                     	;# 
  3889  0F19                     	;# 
  3890  0F1A                     	;# 
  3891  0F1B                     	;# 
  3892  0F1C                     	;# 
  3893  0F1D                     	;# 
  3894  0F1E                     	;# 
  3895  0F1F                     	;# 
  3896  0F20                     	;# 
  3897  0F21                     	;# 
  3898  0F22                     	;# 
  3899  0F23                     	;# 
  3900  0F24                     	;# 
  3901  0F25                     	;# 
  3902  0F26                     	;# 
  3903  0F27                     	;# 
  3904  0F28                     	;# 
  3905  0F29                     	;# 
  3906  0F2A                     	;# 
  3907  0F2B                     	;# 
  3908  0F2C                     	;# 
  3909  0F2D                     	;# 
  3910  0F2E                     	;# 
  3911  0F2F                     	;# 
  3912  0F30                     	;# 
  3913  0F31                     	;# 
  3914  0F32                     	;# 
  3915  0F38                     	;# 
  3916  0F39                     	;# 
  3917  0F3A                     	;# 
  3918  0F3B                     	;# 
  3919  0F3C                     	;# 
  3920  0F3D                     	;# 
  3921  0F3E                     	;# 
  3922  0F3F                     	;# 
  3923  0F40                     	;# 
  3924  0F41                     	;# 
  3925  0F43                     	;# 
  3926  0F44                     	;# 
  3927  0F45                     	;# 
  3928  0F46                     	;# 
  3929  0F47                     	;# 
  3930  0F48                     	;# 
  3931  0F49                     	;# 
  3932  0F4A                     	;# 
  3933  0F4B                     	;# 
  3934  0F4C                     	;# 
  3935  0F4E                     	;# 
  3936  0F4F                     	;# 
  3937  0F50                     	;# 
  3938  0F51                     	;# 
  3939  0F52                     	;# 
  3940  0F53                     	;# 
  3941  0F54                     	;# 
  3942  0F55                     	;# 
  3943  0F56                     	;# 
  3944  0F57                     	;# 
  3945  0F59                     	;# 
  3946  0F5A                     	;# 
  3947  0F5B                     	;# 
  3948  0F5C                     	;# 
  3949  0F5D                     	;# 
  3950  0F61                     	;# 
  3951  0F62                     	;# 
  3952  0F64                     	;# 
  3953  0F65                     	;# 
  3954  0F66                     	;# 
  3955  0F67                     	;# 
  3956  0F68                     	;# 
  3957  0F69                     	;# 
  3958  0F6A                     	;# 
  3959  0F6B                     	;# 
  3960  0F6C                     	;# 
  3961  0F6D                     	;# 
  3962  0FE4                     	;# 
  3963  0FE5                     	;# 
  3964  0FE6                     	;# 
  3965  0FE7                     	;# 
  3966  0FE8                     	;# 
  3967  0FE9                     	;# 
  3968  0FEA                     	;# 
  3969  0FEB                     	;# 
  3970  0FED                     	;# 
  3971  0FEE                     	;# 
  3972  0FEF                     	;# 
  3973  0000                     	;# 
  3974  0001                     	;# 
  3975  0002                     	;# 
  3976  0003                     	;# 
  3977  0004                     	;# 
  3978  0005                     	;# 
  3979  0006                     	;# 
  3980  0007                     	;# 
  3981  0008                     	;# 
  3982  0009                     	;# 
  3983  000A                     	;# 
  3984  000B                     	;# 
  3985  000C                     	;# 
  3986  000D                     	;# 
  3987  000E                     	;# 
  3988  000F                     	;# 
  3989  0010                     	;# 
  3990  0011                     	;# 
  3991  0012                     	;# 
  3992  0013                     	;# 
  3993  0014                     	;# 
  3994  0015                     	;# 
  3995  0016                     	;# 
  3996  0017                     	;# 
  3997  0018                     	;# 
  3998  0019                     	;# 
  3999  001A                     	;# 
  4000  001C                     	;# 
  4001  001C                     	;# 
  4002  001D                     	;# 
  4003  001D                     	;# 
  4004  001E                     	;# 
  4005  001F                     	;# 
  4006  008C                     	;# 
  4007  008C                     	;# 
  4008  008D                     	;# 
  4009  008E                     	;# 
  4010  008E                     	;# 
  4011  008F                     	;# 
  4012  0090                     	;# 
  4013  0090                     	;# 
  4014  0091                     	;# 
  4015  0093                     	;# 
  4016  0094                     	;# 
  4017  0095                     	;# 
  4018  0096                     	;# 
  4019  0097                     	;# 
  4020  0098                     	;# 
  4021  0099                     	;# 
  4022  009A                     	;# 
  4023  009B                     	;# 
  4024  009C                     	;# 
  4025  009D                     	;# 
  4026  009E                     	;# 
  4027  010C                     	;# 
  4028  010D                     	;# 
  4029  010E                     	;# 
  4030  010E                     	;# 
  4031  010F                     	;# 
  4032  0110                     	;# 
  4033  0110                     	;# 
  4034  0111                     	;# 
  4035  0112                     	;# 
  4036  0112                     	;# 
  4037  0113                     	;# 
  4038  0114                     	;# 
  4039  0114                     	;# 
  4040  0115                     	;# 
  4041  0116                     	;# 
  4042  0116                     	;# 
  4043  0117                     	;# 
  4044  0119                     	;# 
  4045  0119                     	;# 
  4046  0119                     	;# 
  4047  011A                     	;# 
  4048  011A                     	;# 
  4049  011A                     	;# 
  4050  011B                     	;# 
  4051  011B                     	;# 
  4052  011B                     	;# 
  4053  011B                     	;# 
  4054  011B                     	;# 
  4055  011C                     	;# 
  4056  011C                     	;# 
  4057  011C                     	;# 
  4058  011D                     	;# 
  4059  011D                     	;# 
  4060  011D                     	;# 
  4061  011E                     	;# 
  4062  011E                     	;# 
  4063  011E                     	;# 
  4064  011F                     	;# 
  4065  011F                     	;# 
  4066  011F                     	;# 
  4067  011F                     	;# 
  4068  011F                     	;# 
  4069  018C                     	;# 
  4070  018D                     	;# 
  4071  018E                     	;# 
  4072  018F                     	;# 
  4073  0190                     	;# 
  4074  0191                     	;# 
  4075  0192                     	;# 
  4076  0196                     	;# 
  4077  0197                     	;# 
  4078  0198                     	;# 
  4079  0199                     	;# 
  4080  019A                     	;# 
  4081  019B                     	;# 
  4082  019C                     	;# 
  4083  020C                     	;# 
  4084  020C                     	;# 
  4085  020D                     	;# 
  4086  020E                     	;# 
  4087  020F                     	;# 
  4088  020F                     	;# 
  4089  0210                     	;# 
  4090  0210                     	;# 
  4091  0211                     	;# 
  4092  0211                     	;# 
  4093  0212                     	;# 
  4094  0212                     	;# 
  4095  0213                     	;# 
  4096  0214                     	;# 
  4097  0215                     	;# 
  4098  0215                     	;# 
  4099  0216                     	;# 
  4100  0216                     	;# 
  4101  0217                     	;# 
  4102  0217                     	;# 
  4103  0218                     	;# 
  4104  0218                     	;# 
  4105  0219                     	;# 
  4106  021A                     	;# 
  4107  021B                     	;# 
  4108  021B                     	;# 
  4109  021C                     	;# 
  4110  021C                     	;# 
  4111  021D                     	;# 
  4112  021D                     	;# 
  4113  021E                     	;# 
  4114  021F                     	;# 
  4115  028C                     	;# 
  4116  028C                     	;# 
  4117  028D                     	;# 
  4118  028D                     	;# 
  4119  028E                     	;# 
  4120  028F                     	;# 
  4121  0290                     	;# 
  4122  0290                     	;# 
  4123  0291                     	;# 
  4124  0292                     	;# 
  4125  0292                     	;# 
  4126  0293                     	;# 
  4127  0293                     	;# 
  4128  0294                     	;# 
  4129  0295                     	;# 
  4130  0296                     	;# 
  4131  0296                     	;# 
  4132  0297                     	;# 
  4133  0298                     	;# 
  4134  0298                     	;# 
  4135  0299                     	;# 
  4136  0299                     	;# 
  4137  029A                     	;# 
  4138  029B                     	;# 
  4139  029C                     	;# 
  4140  029C                     	;# 
  4141  029D                     	;# 
  4142  030C                     	;# 
  4143  030C                     	;# 
  4144  030D                     	;# 
  4145  030E                     	;# 
  4146  030F                     	;# 
  4147  0310                     	;# 
  4148  0310                     	;# 
  4149  0311                     	;# 
  4150  0312                     	;# 
  4151  0313                     	;# 
  4152  0314                     	;# 
  4153  0314                     	;# 
  4154  0315                     	;# 
  4155  0316                     	;# 
  4156  0317                     	;# 
  4157  0318                     	;# 
  4158  0318                     	;# 
  4159  0319                     	;# 
  4160  031A                     	;# 
  4161  031B                     	;# 
  4162  031C                     	;# 
  4163  031C                     	;# 
  4164  031D                     	;# 
  4165  031E                     	;# 
  4166  031F                     	;# 
  4167  038C                     	;# 
  4168  038C                     	;# 
  4169  038D                     	;# 
  4170  038E                     	;# 
  4171  0390                     	;# 
  4172  0390                     	;# 
  4173  0391                     	;# 
  4174  0392                     	;# 
  4175  040C                     	;# 
  4176  040D                     	;# 
  4177  040E                     	;# 
  4178  040F                     	;# 
  4179  0410                     	;# 
  4180  0411                     	;# 
  4181  0416                     	;# 
  4182  0416                     	;# 
  4183  0417                     	;# 
  4184  0418                     	;# 
  4185  0418                     	;# 
  4186  0419                     	;# 
  4187  041A                     	;# 
  4188  041A                     	;# 
  4189  041B                     	;# 
  4190  041C                     	;# 
  4191  041C                     	;# 
  4192  041D                     	;# 
  4193  041E                     	;# 
  4194  041F                     	;# 
  4195  048C                     	;# 
  4196  048C                     	;# 
  4197  048D                     	;# 
  4198  048E                     	;# 
  4199  048F                     	;# 
  4200  048F                     	;# 
  4201  0490                     	;# 
  4202  0491                     	;# 
  4203  0492                     	;# 
  4204  0492                     	;# 
  4205  0493                     	;# 
  4206  0494                     	;# 
  4207  0495                     	;# 
  4208  0495                     	;# 
  4209  0496                     	;# 
  4210  0497                     	;# 
  4211  0498                     	;# 
  4212  0499                     	;# 
  4213  049A                     	;# 
  4214  049B                     	;# 
  4215  049C                     	;# 
  4216  049D                     	;# 
  4217  050C                     	;# 
  4218  050C                     	;# 
  4219  050D                     	;# 
  4220  050E                     	;# 
  4221  050F                     	;# 
  4222  050F                     	;# 
  4223  0510                     	;# 
  4224  0511                     	;# 
  4225  0512                     	;# 
  4226  0512                     	;# 
  4227  0513                     	;# 
  4228  0514                     	;# 
  4229  0515                     	;# 
  4230  0515                     	;# 
  4231  0516                     	;# 
  4232  0517                     	;# 
  4233  0518                     	;# 
  4234  0519                     	;# 
  4235  051A                     	;# 
  4236  051B                     	;# 
  4237  051C                     	;# 
  4238  051D                     	;# 
  4239  058C                     	;# 
  4240  058C                     	;# 
  4241  058D                     	;# 
  4242  058E                     	;# 
  4243  058F                     	;# 
  4244  058F                     	;# 
  4245  0590                     	;# 
  4246  0591                     	;# 
  4247  0592                     	;# 
  4248  0593                     	;# 
  4249  060C                     	;# 
  4250  060D                     	;# 
  4251  060E                     	;# 
  4252  060F                     	;# 
  4253  0610                     	;# 
  4254  0611                     	;# 
  4255  0612                     	;# 
  4256  0613                     	;# 
  4257  0614                     	;# 
  4258  0616                     	;# 
  4259  0617                     	;# 
  4260  0618                     	;# 
  4261  0619                     	;# 
  4262  061A                     	;# 
  4263  061B                     	;# 
  4264  061C                     	;# 
  4265  061D                     	;# 
  4266  061E                     	;# 
  4267  068C                     	;# 
  4268  068D                     	;# 
  4269  068E                     	;# 
  4270  068F                     	;# 
  4271  0690                     	;# 
  4272  0691                     	;# 
  4273  0692                     	;# 
  4274  0693                     	;# 
  4275  0694                     	;# 
  4276  070C                     	;# 
  4277  070D                     	;# 
  4278  070E                     	;# 
  4279  070F                     	;# 
  4280  0710                     	;# 
  4281  0711                     	;# 
  4282  0712                     	;# 
  4283  0713                     	;# 
  4284  0714                     	;# 
  4285  0716                     	;# 
  4286  0717                     	;# 
  4287  0718                     	;# 
  4288  0719                     	;# 
  4289  071A                     	;# 
  4290  071B                     	;# 
  4291  071C                     	;# 
  4292  071D                     	;# 
  4293  071E                     	;# 
  4294  0796                     	;# 
  4295  0797                     	;# 
  4296  0798                     	;# 
  4297  0799                     	;# 
  4298  079A                     	;# 
  4299  079B                     	;# 
  4300  080C                     	;# 
  4301  080D                     	;# 
  4302  080E                     	;# 
  4303  080F                     	;# 
  4304  0810                     	;# 
  4305  0811                     	;# 
  4306  0812                     	;# 
  4307  0813                     	;# 
  4308  0814                     	;# 
  4309  081A                     	;# 
  4310  081B                     	;# 
  4311  081C                     	;# 
  4312  081D                     	;# 
  4313  081E                     	;# 
  4314  081F                     	;# 
  4315  088C                     	;# 
  4316  088D                     	;# 
  4317  088E                     	;# 
  4318  088F                     	;# 
  4319  0890                     	;# 
  4320  0891                     	;# 
  4321  0892                     	;# 
  4322  0893                     	;# 
  4323  0895                     	;# 
  4324  0896                     	;# 
  4325  0897                     	;# 
  4326  0898                     	;# 
  4327  0899                     	;# 
  4328  089A                     	;# 
  4329  089B                     	;# 
  4330  090C                     	;# 
  4331  090E                     	;# 
  4332  090F                     	;# 
  4333  091F                     	;# 
  4334  091F                     	;# 
  4335  098F                     	;# 
  4336  098F                     	;# 
  4337  0990                     	;# 
  4338  0991                     	;# 
  4339  0992                     	;# 
  4340  0993                     	;# 
  4341  0994                     	;# 
  4342  0995                     	;# 
  4343  0996                     	;# 
  4344  0997                     	;# 
  4345  0E0F                     	;# 
  4346  0E10                     	;# 
  4347  0E11                     	;# 
  4348  0E12                     	;# 
  4349  0E13                     	;# 
  4350  0E14                     	;# 
  4351  0E15                     	;# 
  4352  0E16                     	;# 
  4353  0E17                     	;# 
  4354  0E18                     	;# 
  4355  0E19                     	;# 
  4356  0E1A                     	;# 
  4357  0E1B                     	;# 
  4358  0E1C                     	;# 
  4359  0E1D                     	;# 
  4360  0E1E                     	;# 
  4361  0E1F                     	;# 
  4362  0E20                     	;# 
  4363  0E21                     	;# 
  4364  0E22                     	;# 
  4365  0E23                     	;# 
  4366  0E24                     	;# 
  4367  0E25                     	;# 
  4368  0E26                     	;# 
  4369  0E27                     	;# 
  4370  0E28                     	;# 
  4371  0E29                     	;# 
  4372  0E2A                     	;# 
  4373  0E2B                     	;# 
  4374  0E2C                     	;# 
  4375  0E2D                     	;# 
  4376  0E2E                     	;# 
  4377  0E2F                     	;# 
  4378  0E30                     	;# 
  4379  0E31                     	;# 
  4380  0E32                     	;# 
  4381  0E33                     	;# 
  4382  0E34                     	;# 
  4383  0E35                     	;# 
  4384  0E36                     	;# 
  4385  0E37                     	;# 
  4386  0E8F                     	;# 
  4387  0E90                     	;# 
  4388  0E91                     	;# 
  4389  0E92                     	;# 
  4390  0E93                     	;# 
  4391  0E94                     	;# 
  4392  0E95                     	;# 
  4393  0E96                     	;# 
  4394  0E97                     	;# 
  4395  0E9C                     	;# 
  4396  0E9D                     	;# 
  4397  0E9E                     	;# 
  4398  0EA1                     	;# 
  4399  0EA2                     	;# 
  4400  0EA3                     	;# 
  4401  0EA4                     	;# 
  4402  0EA5                     	;# 
  4403  0EA9                     	;# 
  4404  0EAA                     	;# 
  4405  0EAB                     	;# 
  4406  0EAC                     	;# 
  4407  0EB1                     	;# 
  4408  0EB2                     	;# 
  4409  0EB3                     	;# 
  4410  0EB8                     	;# 
  4411  0EB9                     	;# 
  4412  0EBA                     	;# 
  4413  0EBB                     	;# 
  4414  0EBC                     	;# 
  4415  0EBD                     	;# 
  4416  0EBE                     	;# 
  4417  0EC3                     	;# 
  4418  0EC5                     	;# 
  4419  0EC6                     	;# 
  4420  0EC7                     	;# 
  4421  0EC8                     	;# 
  4422  0EC9                     	;# 
  4423  0ECA                     	;# 
  4424  0ECB                     	;# 
  4425  0ECC                     	;# 
  4426  0F10                     	;# 
  4427  0F11                     	;# 
  4428  0F12                     	;# 
  4429  0F13                     	;# 
  4430  0F14                     	;# 
  4431  0F15                     	;# 
  4432  0F16                     	;# 
  4433  0F17                     	;# 
  4434  0F18                     	;# 
  4435  0F19                     	;# 
  4436  0F1A                     	;# 
  4437  0F1B                     	;# 
  4438  0F1C                     	;# 
  4439  0F1D                     	;# 
  4440  0F1E                     	;# 
  4441  0F1F                     	;# 
  4442  0F20                     	;# 
  4443  0F21                     	;# 
  4444  0F22                     	;# 
  4445  0F23                     	;# 
  4446  0F24                     	;# 
  4447  0F25                     	;# 
  4448  0F26                     	;# 
  4449  0F27                     	;# 
  4450  0F28                     	;# 
  4451  0F29                     	;# 
  4452  0F2A                     	;# 
  4453  0F2B                     	;# 
  4454  0F2C                     	;# 
  4455  0F2D                     	;# 
  4456  0F2E                     	;# 
  4457  0F2F                     	;# 
  4458  0F30                     	;# 
  4459  0F31                     	;# 
  4460  0F32                     	;# 
  4461  0F38                     	;# 
  4462  0F39                     	;# 
  4463  0F3A                     	;# 
  4464  0F3B                     	;# 
  4465  0F3C                     	;# 
  4466  0F3D                     	;# 
  4467  0F3E                     	;# 
  4468  0F3F                     	;# 
  4469  0F40                     	;# 
  4470  0F41                     	;# 
  4471  0F43                     	;# 
  4472  0F44                     	;# 
  4473  0F45                     	;# 
  4474  0F46                     	;# 
  4475  0F47                     	;# 
  4476  0F48                     	;# 
  4477  0F49                     	;# 
  4478  0F4A                     	;# 
  4479  0F4B                     	;# 
  4480  0F4C                     	;# 
  4481  0F4E                     	;# 
  4482  0F4F                     	;# 
  4483  0F50                     	;# 
  4484  0F51                     	;# 
  4485  0F52                     	;# 
  4486  0F53                     	;# 
  4487  0F54                     	;# 
  4488  0F55                     	;# 
  4489  0F56                     	;# 
  4490  0F57                     	;# 
  4491  0F59                     	;# 
  4492  0F5A                     	;# 
  4493  0F5B                     	;# 
  4494  0F5C                     	;# 
  4495  0F5D                     	;# 
  4496  0F61                     	;# 
  4497  0F62                     	;# 
  4498  0F64                     	;# 
  4499  0F65                     	;# 
  4500  0F66                     	;# 
  4501  0F67                     	;# 
  4502  0F68                     	;# 
  4503  0F69                     	;# 
  4504  0F6A                     	;# 
  4505  0F6B                     	;# 
  4506  0F6C                     	;# 
  4507  0F6D                     	;# 
  4508  0FE4                     	;# 
  4509  0FE5                     	;# 
  4510  0FE6                     	;# 
  4511  0FE7                     	;# 
  4512  0FE8                     	;# 
  4513  0FE9                     	;# 
  4514  0FEA                     	;# 
  4515  0FEB                     	;# 
  4516  0FED                     	;# 
  4517  0FEE                     	;# 
  4518  0FEF                     	;# 
  4519  0000                     	;# 
  4520  0001                     	;# 
  4521  0002                     	;# 
  4522  0003                     	;# 
  4523  0004                     	;# 
  4524  0005                     	;# 
  4525  0006                     	;# 
  4526  0007                     	;# 
  4527  0008                     	;# 
  4528  0009                     	;# 
  4529  000A                     	;# 
  4530  000B                     	;# 
  4531  000C                     	;# 
  4532  000D                     	;# 
  4533  000E                     	;# 
  4534  000F                     	;# 
  4535  0010                     	;# 
  4536  0011                     	;# 
  4537  0012                     	;# 
  4538  0013                     	;# 
  4539  0014                     	;# 
  4540  0015                     	;# 
  4541  0016                     	;# 
  4542  0017                     	;# 
  4543  0018                     	;# 
  4544  0019                     	;# 
  4545  001A                     	;# 
  4546  001C                     	;# 
  4547  001C                     	;# 
  4548  001D                     	;# 
  4549  001D                     	;# 
  4550  001E                     	;# 
  4551  001F                     	;# 
  4552  008C                     	;# 
  4553  008C                     	;# 
  4554  008D                     	;# 
  4555  008E                     	;# 
  4556  008E                     	;# 
  4557  008F                     	;# 
  4558  0090                     	;# 
  4559  0090                     	;# 
  4560  0091                     	;# 
  4561  0093                     	;# 
  4562  0094                     	;# 
  4563  0095                     	;# 
  4564  0096                     	;# 
  4565  0097                     	;# 
  4566  0098                     	;# 
  4567  0099                     	;# 
  4568  009A                     	;# 
  4569  009B                     	;# 
  4570  009C                     	;# 
  4571  009D                     	;# 
  4572  009E                     	;# 
  4573  010C                     	;# 
  4574  010D                     	;# 
  4575  010E                     	;# 
  4576  010E                     	;# 
  4577  010F                     	;# 
  4578  0110                     	;# 
  4579  0110                     	;# 
  4580  0111                     	;# 
  4581  0112                     	;# 
  4582  0112                     	;# 
  4583  0113                     	;# 
  4584  0114                     	;# 
  4585  0114                     	;# 
  4586  0115                     	;# 
  4587  0116                     	;# 
  4588  0116                     	;# 
  4589  0117                     	;# 
  4590  0119                     	;# 
  4591  0119                     	;# 
  4592  0119                     	;# 
  4593  011A                     	;# 
  4594  011A                     	;# 
  4595  011A                     	;# 
  4596  011B                     	;# 
  4597  011B                     	;# 
  4598  011B                     	;# 
  4599  011B                     	;# 
  4600  011B                     	;# 
  4601  011C                     	;# 
  4602  011C                     	;# 
  4603  011C                     	;# 
  4604  011D                     	;# 
  4605  011D                     	;# 
  4606  011D                     	;# 
  4607  011E                     	;# 
  4608  011E                     	;# 
  4609  011E                     	;# 
  4610  011F                     	;# 
  4611  011F                     	;# 
  4612  011F                     	;# 
  4613  011F                     	;# 
  4614  011F                     	;# 
  4615  018C                     	;# 
  4616  018D                     	;# 
  4617  018E                     	;# 
  4618  018F                     	;# 
  4619  0190                     	;# 
  4620  0191                     	;# 
  4621  0192                     	;# 
  4622  0196                     	;# 
  4623  0197                     	;# 
  4624  0198                     	;# 
  4625  0199                     	;# 
  4626  019A                     	;# 
  4627  019B                     	;# 
  4628  019C                     	;# 
  4629  020C                     	;# 
  4630  020C                     	;# 
  4631  020D                     	;# 
  4632  020E                     	;# 
  4633  020F                     	;# 
  4634  020F                     	;# 
  4635  0210                     	;# 
  4636  0210                     	;# 
  4637  0211                     	;# 
  4638  0211                     	;# 
  4639  0212                     	;# 
  4640  0212                     	;# 
  4641  0213                     	;# 
  4642  0214                     	;# 
  4643  0215                     	;# 
  4644  0215                     	;# 
  4645  0216                     	;# 
  4646  0216                     	;# 
  4647  0217                     	;# 
  4648  0217                     	;# 
  4649  0218                     	;# 
  4650  0218                     	;# 
  4651  0219                     	;# 
  4652  021A                     	;# 
  4653  021B                     	;# 
  4654  021B                     	;# 
  4655  021C                     	;# 
  4656  021C                     	;# 
  4657  021D                     	;# 
  4658  021D                     	;# 
  4659  021E                     	;# 
  4660  021F                     	;# 
  4661  028C                     	;# 
  4662  028C                     	;# 
  4663  028D                     	;# 
  4664  028D                     	;# 
  4665  028E                     	;# 
  4666  028F                     	;# 
  4667  0290                     	;# 
  4668  0290                     	;# 
  4669  0291                     	;# 
  4670  0292                     	;# 
  4671  0292                     	;# 
  4672  0293                     	;# 
  4673  0293                     	;# 
  4674  0294                     	;# 
  4675  0295                     	;# 
  4676  0296                     	;# 
  4677  0296                     	;# 
  4678  0297                     	;# 
  4679  0298                     	;# 
  4680  0298                     	;# 
  4681  0299                     	;# 
  4682  0299                     	;# 
  4683  029A                     	;# 
  4684  029B                     	;# 
  4685  029C                     	;# 
  4686  029C                     	;# 
  4687  029D                     	;# 
  4688  030C                     	;# 
  4689  030C                     	;# 
  4690  030D                     	;# 
  4691  030E                     	;# 
  4692  030F                     	;# 
  4693  0310                     	;# 
  4694  0310                     	;# 
  4695  0311                     	;# 
  4696  0312                     	;# 
  4697  0313                     	;# 
  4698  0314                     	;# 
  4699  0314                     	;# 
  4700  0315                     	;# 
  4701  0316                     	;# 
  4702  0317                     	;# 
  4703  0318                     	;# 
  4704  0318                     	;# 
  4705  0319                     	;# 
  4706  031A                     	;# 
  4707  031B                     	;# 
  4708  031C                     	;# 
  4709  031C                     	;# 
  4710  031D                     	;# 
  4711  031E                     	;# 
  4712  031F                     	;# 
  4713  038C                     	;# 
  4714  038C                     	;# 
  4715  038D                     	;# 
  4716  038E                     	;# 
  4717  0390                     	;# 
  4718  0390                     	;# 
  4719  0391                     	;# 
  4720  0392                     	;# 
  4721  040C                     	;# 
  4722  040D                     	;# 
  4723  040E                     	;# 
  4724  040F                     	;# 
  4725  0410                     	;# 
  4726  0411                     	;# 
  4727  0416                     	;# 
  4728  0416                     	;# 
  4729  0417                     	;# 
  4730  0418                     	;# 
  4731  0418                     	;# 
  4732  0419                     	;# 
  4733  041A                     	;# 
  4734  041A                     	;# 
  4735  041B                     	;# 
  4736  041C                     	;# 
  4737  041C                     	;# 
  4738  041D                     	;# 
  4739  041E                     	;# 
  4740  041F                     	;# 
  4741  048C                     	;# 
  4742  048C                     	;# 
  4743  048D                     	;# 
  4744  048E                     	;# 
  4745  048F                     	;# 
  4746  048F                     	;# 
  4747  0490                     	;# 
  4748  0491                     	;# 
  4749  0492                     	;# 
  4750  0492                     	;# 
  4751  0493                     	;# 
  4752  0494                     	;# 
  4753  0495                     	;# 
  4754  0495                     	;# 
  4755  0496                     	;# 
  4756  0497                     	;# 
  4757  0498                     	;# 
  4758  0499                     	;# 
  4759  049A                     	;# 
  4760  049B                     	;# 
  4761  049C                     	;# 
  4762  049D                     	;# 
  4763  050C                     	;# 
  4764  050C                     	;# 
  4765  050D                     	;# 
  4766  050E                     	;# 
  4767  050F                     	;# 
  4768  050F                     	;# 
  4769  0510                     	;# 
  4770  0511                     	;# 
  4771  0512                     	;# 
  4772  0512                     	;# 
  4773  0513                     	;# 
  4774  0514                     	;# 
  4775  0515                     	;# 
  4776  0515                     	;# 
  4777  0516                     	;# 
  4778  0517                     	;# 
  4779  0518                     	;# 
  4780  0519                     	;# 
  4781  051A                     	;# 
  4782  051B                     	;# 
  4783  051C                     	;# 
  4784  051D                     	;# 
  4785  058C                     	;# 
  4786  058C                     	;# 
  4787  058D                     	;# 
  4788  058E                     	;# 
  4789  058F                     	;# 
  4790  058F                     	;# 
  4791  0590                     	;# 
  4792  0591                     	;# 
  4793  0592                     	;# 
  4794  0593                     	;# 
  4795  060C                     	;# 
  4796  060D                     	;# 
  4797  060E                     	;# 
  4798  060F                     	;# 
  4799  0610                     	;# 
  4800  0611                     	;# 
  4801  0612                     	;# 
  4802  0613                     	;# 
  4803  0614                     	;# 
  4804  0616                     	;# 
  4805  0617                     	;# 
  4806  0618                     	;# 
  4807  0619                     	;# 
  4808  061A                     	;# 
  4809  061B                     	;# 
  4810  061C                     	;# 
  4811  061D                     	;# 
  4812  061E                     	;# 
  4813  068C                     	;# 
  4814  068D                     	;# 
  4815  068E                     	;# 
  4816  068F                     	;# 
  4817  0690                     	;# 
  4818  0691                     	;# 
  4819  0692                     	;# 
  4820  0693                     	;# 
  4821  0694                     	;# 
  4822  070C                     	;# 
  4823  070D                     	;# 
  4824  070E                     	;# 
  4825  070F                     	;# 
  4826  0710                     	;# 
  4827  0711                     	;# 
  4828  0712                     	;# 
  4829  0713                     	;# 
  4830  0714                     	;# 
  4831  0716                     	;# 
  4832  0717                     	;# 
  4833  0718                     	;# 
  4834  0719                     	;# 
  4835  071A                     	;# 
  4836  071B                     	;# 
  4837  071C                     	;# 
  4838  071D                     	;# 
  4839  071E                     	;# 
  4840  0796                     	;# 
  4841  0797                     	;# 
  4842  0798                     	;# 
  4843  0799                     	;# 
  4844  079A                     	;# 
  4845  079B                     	;# 
  4846  080C                     	;# 
  4847  080D                     	;# 
  4848  080E                     	;# 
  4849  080F                     	;# 
  4850  0810                     	;# 
  4851  0811                     	;# 
  4852  0812                     	;# 
  4853  0813                     	;# 
  4854  0814                     	;# 
  4855  081A                     	;# 
  4856  081B                     	;# 
  4857  081C                     	;# 
  4858  081D                     	;# 
  4859  081E                     	;# 
  4860  081F                     	;# 
  4861  088C                     	;# 
  4862  088D                     	;# 
  4863  088E                     	;# 
  4864  088F                     	;# 
  4865  0890                     	;# 
  4866  0891                     	;# 
  4867  0892                     	;# 
  4868  0893                     	;# 
  4869  0895                     	;# 
  4870  0896                     	;# 
  4871  0897                     	;# 
  4872  0898                     	;# 
  4873  0899                     	;# 
  4874  089A                     	;# 
  4875  089B                     	;# 
  4876  090C                     	;# 
  4877  090E                     	;# 
  4878  090F                     	;# 
  4879  091F                     	;# 
  4880  091F                     	;# 
  4881  098F                     	;# 
  4882  098F                     	;# 
  4883  0990                     	;# 
  4884  0991                     	;# 
  4885  0992                     	;# 
  4886  0993                     	;# 
  4887  0994                     	;# 
  4888  0995                     	;# 
  4889  0996                     	;# 
  4890  0997                     	;# 
  4891  0E0F                     	;# 
  4892  0E10                     	;# 
  4893  0E11                     	;# 
  4894  0E12                     	;# 
  4895  0E13                     	;# 
  4896  0E14                     	;# 
  4897  0E15                     	;# 
  4898  0E16                     	;# 
  4899  0E17                     	;# 
  4900  0E18                     	;# 
  4901  0E19                     	;# 
  4902  0E1A                     	;# 
  4903  0E1B                     	;# 
  4904  0E1C                     	;# 
  4905  0E1D                     	;# 
  4906  0E1E                     	;# 
  4907  0E1F                     	;# 
  4908  0E20                     	;# 
  4909  0E21                     	;# 
  4910  0E22                     	;# 
  4911  0E23                     	;# 
  4912  0E24                     	;# 
  4913  0E25                     	;# 
  4914  0E26                     	;# 
  4915  0E27                     	;# 
  4916  0E28                     	;# 
  4917  0E29                     	;# 
  4918  0E2A                     	;# 
  4919  0E2B                     	;# 
  4920  0E2C                     	;# 
  4921  0E2D                     	;# 
  4922  0E2E                     	;# 
  4923  0E2F                     	;# 
  4924  0E30                     	;# 
  4925  0E31                     	;# 
  4926  0E32                     	;# 
  4927  0E33                     	;# 
  4928  0E34                     	;# 
  4929  0E35                     	;# 
  4930  0E36                     	;# 
  4931  0E37                     	;# 
  4932  0E8F                     	;# 
  4933  0E90                     	;# 
  4934  0E91                     	;# 
  4935  0E92                     	;# 
  4936  0E93                     	;# 
  4937  0E94                     	;# 
  4938  0E95                     	;# 
  4939  0E96                     	;# 
  4940  0E97                     	;# 
  4941  0E9C                     	;# 
  4942  0E9D                     	;# 
  4943  0E9E                     	;# 
  4944  0EA1                     	;# 
  4945  0EA2                     	;# 
  4946  0EA3                     	;# 
  4947  0EA4                     	;# 
  4948  0EA5                     	;# 
  4949  0EA9                     	;# 
  4950  0EAA                     	;# 
  4951  0EAB                     	;# 
  4952  0EAC                     	;# 
  4953  0EB1                     	;# 
  4954  0EB2                     	;# 
  4955  0EB3                     	;# 
  4956  0EB8                     	;# 
  4957  0EB9                     	;# 
  4958  0EBA                     	;# 
  4959  0EBB                     	;# 
  4960  0EBC                     	;# 
  4961  0EBD                     	;# 
  4962  0EBE                     	;# 
  4963  0EC3                     	;# 
  4964  0EC5                     	;# 
  4965  0EC6                     	;# 
  4966  0EC7                     	;# 
  4967  0EC8                     	;# 
  4968  0EC9                     	;# 
  4969  0ECA                     	;# 
  4970  0ECB                     	;# 
  4971  0ECC                     	;# 
  4972  0F10                     	;# 
  4973  0F11                     	;# 
  4974  0F12                     	;# 
  4975  0F13                     	;# 
  4976  0F14                     	;# 
  4977  0F15                     	;# 
  4978  0F16                     	;# 
  4979  0F17                     	;# 
  4980  0F18                     	;# 
  4981  0F19                     	;# 
  4982  0F1A                     	;# 
  4983  0F1B                     	;# 
  4984  0F1C                     	;# 
  4985  0F1D                     	;# 
  4986  0F1E                     	;# 
  4987  0F1F                     	;# 
  4988  0F20                     	;# 
  4989  0F21                     	;# 
  4990  0F22                     	;# 
  4991  0F23                     	;# 
  4992  0F24                     	;# 
  4993  0F25                     	;# 
  4994  0F26                     	;# 
  4995  0F27                     	;# 
  4996  0F28                     	;# 
  4997  0F29                     	;# 
  4998  0F2A                     	;# 
  4999  0F2B                     	;# 
  5000  0F2C                     	;# 
  5001  0F2D                     	;# 
  5002  0F2E                     	;# 
  5003  0F2F                     	;# 
  5004  0F30                     	;# 
  5005  0F31                     	;# 
  5006  0F32                     	;# 
  5007  0F38                     	;# 
  5008  0F39                     	;# 
  5009  0F3A                     	;# 
  5010  0F3B                     	;# 
  5011  0F3C                     	;# 
  5012  0F3D                     	;# 
  5013  0F3E                     	;# 
  5014  0F3F                     	;# 
  5015  0F40                     	;# 
  5016  0F41                     	;# 
  5017  0F43                     	;# 
  5018  0F44                     	;# 
  5019  0F45                     	;# 
  5020  0F46                     	;# 
  5021  0F47                     	;# 
  5022  0F48                     	;# 
  5023  0F49                     	;# 
  5024  0F4A                     	;# 
  5025  0F4B                     	;# 
  5026  0F4C                     	;# 
  5027  0F4E                     	;# 
  5028  0F4F                     	;# 
  5029  0F50                     	;# 
  5030  0F51                     	;# 
  5031  0F52                     	;# 
  5032  0F53                     	;# 
  5033  0F54                     	;# 
  5034  0F55                     	;# 
  5035  0F56                     	;# 
  5036  0F57                     	;# 
  5037  0F59                     	;# 
  5038  0F5A                     	;# 
  5039  0F5B                     	;# 
  5040  0F5C                     	;# 
  5041  0F5D                     	;# 
  5042  0F61                     	;# 
  5043  0F62                     	;# 
  5044  0F64                     	;# 
  5045  0F65                     	;# 
  5046  0F66                     	;# 
  5047  0F67                     	;# 
  5048  0F68                     	;# 
  5049  0F69                     	;# 
  5050  0F6A                     	;# 
  5051  0F6B                     	;# 
  5052  0F6C                     	;# 
  5053  0F6D                     	;# 
  5054  0FE4                     	;# 
  5055  0FE5                     	;# 
  5056  0FE6                     	;# 
  5057  0FE7                     	;# 
  5058  0FE8                     	;# 
  5059  0FE9                     	;# 
  5060  0FEA                     	;# 
  5061  0FEB                     	;# 
  5062  0FED                     	;# 
  5063  0FEE                     	;# 
  5064  0FEF                     	;# 
  5065  0000                     	;# 
  5066  0001                     	;# 
  5067  0002                     	;# 
  5068  0003                     	;# 
  5069  0004                     	;# 
  5070  0005                     	;# 
  5071  0006                     	;# 
  5072  0007                     	;# 
  5073  0008                     	;# 
  5074  0009                     	;# 
  5075  000A                     	;# 
  5076  000B                     	;# 
  5077  000C                     	;# 
  5078  000D                     	;# 
  5079  000E                     	;# 
  5080  000F                     	;# 
  5081  0010                     	;# 
  5082  0011                     	;# 
  5083  0012                     	;# 
  5084  0013                     	;# 
  5085  0014                     	;# 
  5086  0015                     	;# 
  5087  0016                     	;# 
  5088  0017                     	;# 
  5089  0018                     	;# 
  5090  0019                     	;# 
  5091  001A                     	;# 
  5092  001C                     	;# 
  5093  001C                     	;# 
  5094  001D                     	;# 
  5095  001D                     	;# 
  5096  001E                     	;# 
  5097  001F                     	;# 
  5098  008C                     	;# 
  5099  008C                     	;# 
  5100  008D                     	;# 
  5101  008E                     	;# 
  5102  008E                     	;# 
  5103  008F                     	;# 
  5104  0090                     	;# 
  5105  0090                     	;# 
  5106  0091                     	;# 
  5107  0093                     	;# 
  5108  0094                     	;# 
  5109  0095                     	;# 
  5110  0096                     	;# 
  5111  0097                     	;# 
  5112  0098                     	;# 
  5113  0099                     	;# 
  5114  009A                     	;# 
  5115  009B                     	;# 
  5116  009C                     	;# 
  5117  009D                     	;# 
  5118  009E                     	;# 
  5119  010C                     	;# 
  5120  010D                     	;# 
  5121  010E                     	;# 
  5122  010E                     	;# 
  5123  010F                     	;# 
  5124  0110                     	;# 
  5125  0110                     	;# 
  5126  0111                     	;# 
  5127  0112                     	;# 
  5128  0112                     	;# 
  5129  0113                     	;# 
  5130  0114                     	;# 
  5131  0114                     	;# 
  5132  0115                     	;# 
  5133  0116                     	;# 
  5134  0116                     	;# 
  5135  0117                     	;# 
  5136  0119                     	;# 
  5137  0119                     	;# 
  5138  0119                     	;# 
  5139  011A                     	;# 
  5140  011A                     	;# 
  5141  011A                     	;# 
  5142  011B                     	;# 
  5143  011B                     	;# 
  5144  011B                     	;# 
  5145  011B                     	;# 
  5146  011B                     	;# 
  5147  011C                     	;# 
  5148  011C                     	;# 
  5149  011C                     	;# 
  5150  011D                     	;# 
  5151  011D                     	;# 
  5152  011D                     	;# 
  5153  011E                     	;# 
  5154  011E                     	;# 
  5155  011E                     	;# 
  5156  011F                     	;# 
  5157  011F                     	;# 
  5158  011F                     	;# 
  5159  011F                     	;# 
  5160  011F                     	;# 
  5161  018C                     	;# 
  5162  018D                     	;# 
  5163  018E                     	;# 
  5164  018F                     	;# 
  5165  0190                     	;# 
  5166  0191                     	;# 
  5167  0192                     	;# 
  5168  0196                     	;# 
  5169  0197                     	;# 
  5170  0198                     	;# 
  5171  0199                     	;# 
  5172  019A                     	;# 
  5173  019B                     	;# 
  5174  019C                     	;# 
  5175  020C                     	;# 
  5176  020C                     	;# 
  5177  020D                     	;# 
  5178  020E                     	;# 
  5179  020F                     	;# 
  5180  020F                     	;# 
  5181  0210                     	;# 
  5182  0210                     	;# 
  5183  0211                     	;# 
  5184  0211                     	;# 
  5185  0212                     	;# 
  5186  0212                     	;# 
  5187  0213                     	;# 
  5188  0214                     	;# 
  5189  0215                     	;# 
  5190  0215                     	;# 
  5191  0216                     	;# 
  5192  0216                     	;# 
  5193  0217                     	;# 
  5194  0217                     	;# 
  5195  0218                     	;# 
  5196  0218                     	;# 
  5197  0219                     	;# 
  5198  021A                     	;# 
  5199  021B                     	;# 
  5200  021B                     	;# 
  5201  021C                     	;# 
  5202  021C                     	;# 
  5203  021D                     	;# 
  5204  021D                     	;# 
  5205  021E                     	;# 
  5206  021F                     	;# 
  5207  028C                     	;# 
  5208  028C                     	;# 
  5209  028D                     	;# 
  5210  028D                     	;# 
  5211  028E                     	;# 
  5212  028F                     	;# 
  5213  0290                     	;# 
  5214  0290                     	;# 
  5215  0291                     	;# 
  5216  0292                     	;# 
  5217  0292                     	;# 
  5218  0293                     	;# 
  5219  0293                     	;# 
  5220  0294                     	;# 
  5221  0295                     	;# 
  5222  0296                     	;# 
  5223  0296                     	;# 
  5224  0297                     	;# 
  5225  0298                     	;# 
  5226  0298                     	;# 
  5227  0299                     	;# 
  5228  0299                     	;# 
  5229  029A                     	;# 
  5230  029B                     	;# 
  5231  029C                     	;# 
  5232  029C                     	;# 
  5233  029D                     	;# 
  5234  030C                     	;# 
  5235  030C                     	;# 
  5236  030D                     	;# 
  5237  030E                     	;# 
  5238  030F                     	;# 
  5239  0310                     	;# 
  5240  0310                     	;# 
  5241  0311                     	;# 
  5242  0312                     	;# 
  5243  0313                     	;# 
  5244  0314                     	;# 
  5245  0314                     	;# 
  5246  0315                     	;# 
  5247  0316                     	;# 
  5248  0317                     	;# 
  5249  0318                     	;# 
  5250  0318                     	;# 
  5251  0319                     	;# 
  5252  031A                     	;# 
  5253  031B                     	;# 
  5254  031C                     	;# 
  5255  031C                     	;# 
  5256  031D                     	;# 
  5257  031E                     	;# 
  5258  031F                     	;# 
  5259  038C                     	;# 
  5260  038C                     	;# 
  5261  038D                     	;# 
  5262  038E                     	;# 
  5263  0390                     	;# 
  5264  0390                     	;# 
  5265  0391                     	;# 
  5266  0392                     	;# 
  5267  040C                     	;# 
  5268  040D                     	;# 
  5269  040E                     	;# 
  5270  040F                     	;# 
  5271  0410                     	;# 
  5272  0411                     	;# 
  5273  0416                     	;# 
  5274  0416                     	;# 
  5275  0417                     	;# 
  5276  0418                     	;# 
  5277  0418                     	;# 
  5278  0419                     	;# 
  5279  041A                     	;# 
  5280  041A                     	;# 
  5281  041B                     	;# 
  5282  041C                     	;# 
  5283  041C                     	;# 
  5284  041D                     	;# 
  5285  041E                     	;# 
  5286  041F                     	;# 
  5287  048C                     	;# 
  5288  048C                     	;# 
  5289  048D                     	;# 
  5290  048E                     	;# 
  5291  048F                     	;# 
  5292  048F                     	;# 
  5293  0490                     	;# 
  5294  0491                     	;# 
  5295  0492                     	;# 
  5296  0492                     	;# 
  5297  0493                     	;# 
  5298  0494                     	;# 
  5299  0495                     	;# 
  5300  0495                     	;# 
  5301  0496                     	;# 
  5302  0497                     	;# 
  5303  0498                     	;# 
  5304  0499                     	;# 
  5305  049A                     	;# 
  5306  049B                     	;# 
  5307  049C                     	;# 
  5308  049D                     	;# 
  5309  050C                     	;# 
  5310  050C                     	;# 
  5311  050D                     	;# 
  5312  050E                     	;# 
  5313  050F                     	;# 
  5314  050F                     	;# 
  5315  0510                     	;# 
  5316  0511                     	;# 
  5317  0512                     	;# 
  5318  0512                     	;# 
  5319  0513                     	;# 
  5320  0514                     	;# 
  5321  0515                     	;# 
  5322  0515                     	;# 
  5323  0516                     	;# 
  5324  0517                     	;# 
  5325  0518                     	;# 
  5326  0519                     	;# 
  5327  051A                     	;# 
  5328  051B                     	;# 
  5329  051C                     	;# 
  5330  051D                     	;# 
  5331  058C                     	;# 
  5332  058C                     	;# 
  5333  058D                     	;# 
  5334  058E                     	;# 
  5335  058F                     	;# 
  5336  058F                     	;# 
  5337  0590                     	;# 
  5338  0591                     	;# 
  5339  0592                     	;# 
  5340  0593                     	;# 
  5341  060C                     	;# 
  5342  060D                     	;# 
  5343  060E                     	;# 
  5344  060F                     	;# 
  5345  0610                     	;# 
  5346  0611                     	;# 
  5347  0612                     	;# 
  5348  0613                     	;# 
  5349  0614                     	;# 
  5350  0616                     	;# 
  5351  0617                     	;# 
  5352  0618                     	;# 
  5353  0619                     	;# 
  5354  061A                     	;# 
  5355  061B                     	;# 
  5356  061C                     	;# 
  5357  061D                     	;# 
  5358  061E                     	;# 
  5359  068C                     	;# 
  5360  068D                     	;# 
  5361  068E                     	;# 
  5362  068F                     	;# 
  5363  0690                     	;# 
  5364  0691                     	;# 
  5365  0692                     	;# 
  5366  0693                     	;# 
  5367  0694                     	;# 
  5368  070C                     	;# 
  5369  070D                     	;# 
  5370  070E                     	;# 
  5371  070F                     	;# 
  5372  0710                     	;# 
  5373  0711                     	;# 
  5374  0712                     	;# 
  5375  0713                     	;# 
  5376  0714                     	;# 
  5377  0716                     	;# 
  5378  0717                     	;# 
  5379  0718                     	;# 
  5380  0719                     	;# 
  5381  071A                     	;# 
  5382  071B                     	;# 
  5383  071C                     	;# 
  5384  071D                     	;# 
  5385  071E                     	;# 
  5386  0796                     	;# 
  5387  0797                     	;# 
  5388  0798                     	;# 
  5389  0799                     	;# 
  5390  079A                     	;# 
  5391  079B                     	;# 
  5392  080C                     	;# 
  5393  080D                     	;# 
  5394  080E                     	;# 
  5395  080F                     	;# 
  5396  0810                     	;# 
  5397  0811                     	;# 
  5398  0812                     	;# 
  5399  0813                     	;# 
  5400  0814                     	;# 
  5401  081A                     	;# 
  5402  081B                     	;# 
  5403  081C                     	;# 
  5404  081D                     	;# 
  5405  081E                     	;# 
  5406  081F                     	;# 
  5407  088C                     	;# 
  5408  088D                     	;# 
  5409  088E                     	;# 
  5410  088F                     	;# 
  5411  0890                     	;# 
  5412  0891                     	;# 
  5413  0892                     	;# 
  5414  0893                     	;# 
  5415  0895                     	;# 
  5416  0896                     	;# 
  5417  0897                     	;# 
  5418  0898                     	;# 
  5419  0899                     	;# 
  5420  089A                     	;# 
  5421  089B                     	;# 
  5422  090C                     	;# 
  5423  090E                     	;# 
  5424  090F                     	;# 
  5425  091F                     	;# 
  5426  091F                     	;# 
  5427  098F                     	;# 
  5428  098F                     	;# 
  5429  0990                     	;# 
  5430  0991                     	;# 
  5431  0992                     	;# 
  5432  0993                     	;# 
  5433  0994                     	;# 
  5434  0995                     	;# 
  5435  0996                     	;# 
  5436  0997                     	;# 
  5437  0E0F                     	;# 
  5438  0E10                     	;# 
  5439  0E11                     	;# 
  5440  0E12                     	;# 
  5441  0E13                     	;# 
  5442  0E14                     	;# 
  5443  0E15                     	;# 
  5444  0E16                     	;# 
  5445  0E17                     	;# 
  5446  0E18                     	;# 
  5447  0E19                     	;# 
  5448  0E1A                     	;# 
  5449  0E1B                     	;# 
  5450  0E1C                     	;# 
  5451  0E1D                     	;# 
  5452  0E1E                     	;# 
  5453  0E1F                     	;# 
  5454  0E20                     	;# 
  5455  0E21                     	;# 
  5456  0E22                     	;# 
  5457  0E23                     	;# 
  5458  0E24                     	;# 
  5459  0E25                     	;# 
  5460  0E26                     	;# 
  5461  0E27                     	;# 
  5462  0E28                     	;# 
  5463  0E29                     	;# 
  5464  0E2A                     	;# 
  5465  0E2B                     	;# 
  5466  0E2C                     	;# 
  5467  0E2D                     	;# 
  5468  0E2E                     	;# 
  5469  0E2F                     	;# 
  5470  0E30                     	;# 
  5471  0E31                     	;# 
  5472  0E32                     	;# 
  5473  0E33                     	;# 
  5474  0E34                     	;# 
  5475  0E35                     	;# 
  5476  0E36                     	;# 
  5477  0E37                     	;# 
  5478  0E8F                     	;# 
  5479  0E90                     	;# 
  5480  0E91                     	;# 
  5481  0E92                     	;# 
  5482  0E93                     	;# 
  5483  0E94                     	;# 
  5484  0E95                     	;# 
  5485  0E96                     	;# 
  5486  0E97                     	;# 
  5487  0E9C                     	;# 
  5488  0E9D                     	;# 
  5489  0E9E                     	;# 
  5490  0EA1                     	;# 
  5491  0EA2                     	;# 
  5492  0EA3                     	;# 
  5493  0EA4                     	;# 
  5494  0EA5                     	;# 
  5495  0EA9                     	;# 
  5496  0EAA                     	;# 
  5497  0EAB                     	;# 
  5498  0EAC                     	;# 
  5499  0EB1                     	;# 
  5500  0EB2                     	;# 
  5501  0EB3                     	;# 
  5502  0EB8                     	;# 
  5503  0EB9                     	;# 
  5504  0EBA                     	;# 
  5505  0EBB                     	;# 
  5506  0EBC                     	;# 
  5507  0EBD                     	;# 
  5508  0EBE                     	;# 
  5509  0EC3                     	;# 
  5510  0EC5                     	;# 
  5511  0EC6                     	;# 
  5512  0EC7                     	;# 
  5513  0EC8                     	;# 
  5514  0EC9                     	;# 
  5515  0ECA                     	;# 
  5516  0ECB                     	;# 
  5517  0ECC                     	;# 
  5518  0F10                     	;# 
  5519  0F11                     	;# 
  5520  0F12                     	;# 
  5521  0F13                     	;# 
  5522  0F14                     	;# 
  5523  0F15                     	;# 
  5524  0F16                     	;# 
  5525  0F17                     	;# 
  5526  0F18                     	;# 
  5527  0F19                     	;# 
  5528  0F1A                     	;# 
  5529  0F1B                     	;# 
  5530  0F1C                     	;# 
  5531  0F1D                     	;# 
  5532  0F1E                     	;# 
  5533  0F1F                     	;# 
  5534  0F20                     	;# 
  5535  0F21                     	;# 
  5536  0F22                     	;# 
  5537  0F23                     	;# 
  5538  0F24                     	;# 
  5539  0F25                     	;# 
  5540  0F26                     	;# 
  5541  0F27                     	;# 
  5542  0F28                     	;# 
  5543  0F29                     	;# 
  5544  0F2A                     	;# 
  5545  0F2B                     	;# 
  5546  0F2C                     	;# 
  5547  0F2D                     	;# 
  5548  0F2E                     	;# 
  5549  0F2F                     	;# 
  5550  0F30                     	;# 
  5551  0F31                     	;# 
  5552  0F32                     	;# 
  5553  0F38                     	;# 
  5554  0F39                     	;# 
  5555  0F3A                     	;# 
  5556  0F3B                     	;# 
  5557  0F3C                     	;# 
  5558  0F3D                     	;# 
  5559  0F3E                     	;# 
  5560  0F3F                     	;# 
  5561  0F40                     	;# 
  5562  0F41                     	;# 
  5563  0F43                     	;# 
  5564  0F44                     	;# 
  5565  0F45                     	;# 
  5566  0F46                     	;# 
  5567  0F47                     	;# 
  5568  0F48                     	;# 
  5569  0F49                     	;# 
  5570  0F4A                     	;# 
  5571  0F4B                     	;# 
  5572  0F4C                     	;# 
  5573  0F4E                     	;# 
  5574  0F4F                     	;# 
  5575  0F50                     	;# 
  5576  0F51                     	;# 
  5577  0F52                     	;# 
  5578  0F53                     	;# 
  5579  0F54                     	;# 
  5580  0F55                     	;# 
  5581  0F56                     	;# 
  5582  0F57                     	;# 
  5583  0F59                     	;# 
  5584  0F5A                     	;# 
  5585  0F5B                     	;# 
  5586  0F5C                     	;# 
  5587  0F5D                     	;# 
  5588  0F61                     	;# 
  5589  0F62                     	;# 
  5590  0F64                     	;# 
  5591  0F65                     	;# 
  5592  0F66                     	;# 
  5593  0F67                     	;# 
  5594  0F68                     	;# 
  5595  0F69                     	;# 
  5596  0F6A                     	;# 
  5597  0F6B                     	;# 
  5598  0F6C                     	;# 
  5599  0F6D                     	;# 
  5600  0FE4                     	;# 
  5601  0FE5                     	;# 
  5602  0FE6                     	;# 
  5603  0FE7                     	;# 
  5604  0FE8                     	;# 
  5605  0FE9                     	;# 
  5606  0FEA                     	;# 
  5607  0FEB                     	;# 
  5608  0FED                     	;# 
  5609  0FEE                     	;# 
  5610  0FEF                     	;# 
  5611  0000                     	;# 
  5612  0001                     	;# 
  5613  0002                     	;# 
  5614  0003                     	;# 
  5615  0004                     	;# 
  5616  0005                     	;# 
  5617  0006                     	;# 
  5618  0007                     	;# 
  5619  0008                     	;# 
  5620  0009                     	;# 
  5621  000A                     	;# 
  5622  000B                     	;# 
  5623  000C                     	;# 
  5624  000D                     	;# 
  5625  000E                     	;# 
  5626  000F                     	;# 
  5627  0010                     	;# 
  5628  0011                     	;# 
  5629  0012                     	;# 
  5630  0013                     	;# 
  5631  0014                     	;# 
  5632  0015                     	;# 
  5633  0016                     	;# 
  5634  0017                     	;# 
  5635  0018                     	;# 
  5636  0019                     	;# 
  5637  001A                     	;# 
  5638  001C                     	;# 
  5639  001C                     	;# 
  5640  001D                     	;# 
  5641  001D                     	;# 
  5642  001E                     	;# 
  5643  001F                     	;# 
  5644  008C                     	;# 
  5645  008C                     	;# 
  5646  008D                     	;# 
  5647  008E                     	;# 
  5648  008E                     	;# 
  5649  008F                     	;# 
  5650  0090                     	;# 
  5651  0090                     	;# 
  5652  0091                     	;# 
  5653  0093                     	;# 
  5654  0094                     	;# 
  5655  0095                     	;# 
  5656  0096                     	;# 
  5657  0097                     	;# 
  5658  0098                     	;# 
  5659  0099                     	;# 
  5660  009A                     	;# 
  5661  009B                     	;# 
  5662  009C                     	;# 
  5663  009D                     	;# 
  5664  009E                     	;# 
  5665  010C                     	;# 
  5666  010D                     	;# 
  5667  010E                     	;# 
  5668  010E                     	;# 
  5669  010F                     	;# 
  5670  0110                     	;# 
  5671  0110                     	;# 
  5672  0111                     	;# 
  5673  0112                     	;# 
  5674  0112                     	;# 
  5675  0113                     	;# 
  5676  0114                     	;# 
  5677  0114                     	;# 
  5678  0115                     	;# 
  5679  0116                     	;# 
  5680  0116                     	;# 
  5681  0117                     	;# 
  5682  0119                     	;# 
  5683  0119                     	;# 
  5684  0119                     	;# 
  5685  011A                     	;# 
  5686  011A                     	;# 
  5687  011A                     	;# 
  5688  011B                     	;# 
  5689  011B                     	;# 
  5690  011B                     	;# 
  5691  011B                     	;# 
  5692  011B                     	;# 
  5693  011C                     	;# 
  5694  011C                     	;# 
  5695  011C                     	;# 
  5696  011D                     	;# 
  5697  011D                     	;# 
  5698  011D                     	;# 
  5699  011E                     	;# 
  5700  011E                     	;# 
  5701  011E                     	;# 
  5702  011F                     	;# 
  5703  011F                     	;# 
  5704  011F                     	;# 
  5705  011F                     	;# 
  5706  011F                     	;# 
  5707  018C                     	;# 
  5708  018D                     	;# 
  5709  018E                     	;# 
  5710  018F                     	;# 
  5711  0190                     	;# 
  5712  0191                     	;# 
  5713  0192                     	;# 
  5714  0196                     	;# 
  5715  0197                     	;# 
  5716  0198                     	;# 
  5717  0199                     	;# 
  5718  019A                     	;# 
  5719  019B                     	;# 
  5720  019C                     	;# 
  5721  020C                     	;# 
  5722  020C                     	;# 
  5723  020D                     	;# 
  5724  020E                     	;# 
  5725  020F                     	;# 
  5726  020F                     	;# 
  5727  0210                     	;# 
  5728  0210                     	;# 
  5729  0211                     	;# 
  5730  0211                     	;# 
  5731  0212                     	;# 
  5732  0212                     	;# 
  5733  0213                     	;# 
  5734  0214                     	;# 
  5735  0215                     	;# 
  5736  0215                     	;# 
  5737  0216                     	;# 
  5738  0216                     	;# 
  5739  0217                     	;# 
  5740  0217                     	;# 
  5741  0218                     	;# 
  5742  0218                     	;# 
  5743  0219                     	;# 
  5744  021A                     	;# 
  5745  021B                     	;# 
  5746  021B                     	;# 
  5747  021C                     	;# 
  5748  021C                     	;# 
  5749  021D                     	;# 
  5750  021D                     	;# 
  5751  021E                     	;# 
  5752  021F                     	;# 
  5753  028C                     	;# 
  5754  028C                     	;# 
  5755  028D                     	;# 
  5756  028D                     	;# 
  5757  028E                     	;# 
  5758  028F                     	;# 
  5759  0290                     	;# 
  5760  0290                     	;# 
  5761  0291                     	;# 
  5762  0292                     	;# 
  5763  0292                     	;# 
  5764  0293                     	;# 
  5765  0293                     	;# 
  5766  0294                     	;# 
  5767  0295                     	;# 
  5768  0296                     	;# 
  5769  0296                     	;# 
  5770  0297                     	;# 
  5771  0298                     	;# 
  5772  0298                     	;# 
  5773  0299                     	;# 
  5774  0299                     	;# 
  5775  029A                     	;# 
  5776  029B                     	;# 
  5777  029C                     	;# 
  5778  029C                     	;# 
  5779  029D                     	;# 
  5780  030C                     	;# 
  5781  030C                     	;# 
  5782  030D                     	;# 
  5783  030E                     	;# 
  5784  030F                     	;# 
  5785  0310                     	;# 
  5786  0310                     	;# 
  5787  0311                     	;# 
  5788  0312                     	;# 
  5789  0313                     	;# 
  5790  0314                     	;# 
  5791  0314                     	;# 
  5792  0315                     	;# 
  5793  0316                     	;# 
  5794  0317                     	;# 
  5795  0318                     	;# 
  5796  0318                     	;# 
  5797  0319                     	;# 
  5798  031A                     	;# 
  5799  031B                     	;# 
  5800  031C                     	;# 
  5801  031C                     	;# 
  5802  031D                     	;# 
  5803  031E                     	;# 
  5804  031F                     	;# 
  5805  038C                     	;# 
  5806  038C                     	;# 
  5807  038D                     	;# 
  5808  038E                     	;# 
  5809  0390                     	;# 
  5810  0390                     	;# 
  5811  0391                     	;# 
  5812  0392                     	;# 
  5813  040C                     	;# 
  5814  040D                     	;# 
  5815  040E                     	;# 
  5816  040F                     	;# 
  5817  0410                     	;# 
  5818  0411                     	;# 
  5819  0416                     	;# 
  5820  0416                     	;# 
  5821  0417                     	;# 
  5822  0418                     	;# 
  5823  0418                     	;# 
  5824  0419                     	;# 
  5825  041A                     	;# 
  5826  041A                     	;# 
  5827  041B                     	;# 
  5828  041C                     	;# 
  5829  041C                     	;# 
  5830  041D                     	;# 
  5831  041E                     	;# 
  5832  041F                     	;# 
  5833  048C                     	;# 
  5834  048C                     	;# 
  5835  048D                     	;# 
  5836  048E                     	;# 
  5837  048F                     	;# 
  5838  048F                     	;# 
  5839  0490                     	;# 
  5840  0491                     	;# 
  5841  0492                     	;# 
  5842  0492                     	;# 
  5843  0493                     	;# 
  5844  0494                     	;# 
  5845  0495                     	;# 
  5846  0495                     	;# 
  5847  0496                     	;# 
  5848  0497                     	;# 
  5849  0498                     	;# 
  5850  0499                     	;# 
  5851  049A                     	;# 
  5852  049B                     	;# 
  5853  049C                     	;# 
  5854  049D                     	;# 
  5855  050C                     	;# 
  5856  050C                     	;# 
  5857  050D                     	;# 
  5858  050E                     	;# 
  5859  050F                     	;# 
  5860  050F                     	;# 
  5861  0510                     	;# 
  5862  0511                     	;# 
  5863  0512                     	;# 
  5864  0512                     	;# 
  5865  0513                     	;# 
  5866  0514                     	;# 
  5867  0515                     	;# 
  5868  0515                     	;# 
  5869  0516                     	;# 
  5870  0517                     	;# 
  5871  0518                     	;# 
  5872  0519                     	;# 
  5873  051A                     	;# 
  5874  051B                     	;# 
  5875  051C                     	;# 
  5876  051D                     	;# 
  5877  058C                     	;# 
  5878  058C                     	;# 
  5879  058D                     	;# 
  5880  058E                     	;# 
  5881  058F                     	;# 
  5882  058F                     	;# 
  5883  0590                     	;# 
  5884  0591                     	;# 
  5885  0592                     	;# 
  5886  0593                     	;# 
  5887  060C                     	;# 
  5888  060D                     	;# 
  5889  060E                     	;# 
  5890  060F                     	;# 
  5891  0610                     	;# 
  5892  0611                     	;# 
  5893  0612                     	;# 
  5894  0613                     	;# 
  5895  0614                     	;# 
  5896  0616                     	;# 
  5897  0617                     	;# 
  5898  0618                     	;# 
  5899  0619                     	;# 
  5900  061A                     	;# 
  5901  061B                     	;# 
  5902  061C                     	;# 
  5903  061D                     	;# 
  5904  061E                     	;# 
  5905  068C                     	;# 
  5906  068D                     	;# 
  5907  068E                     	;# 
  5908  068F                     	;# 
  5909  0690                     	;# 
  5910  0691                     	;# 
  5911  0692                     	;# 
  5912  0693                     	;# 
  5913  0694                     	;# 
  5914  070C                     	;# 
  5915  070D                     	;# 
  5916  070E                     	;# 
  5917  070F                     	;# 
  5918  0710                     	;# 
  5919  0711                     	;# 
  5920  0712                     	;# 
  5921  0713                     	;# 
  5922  0714                     	;# 
  5923  0716                     	;# 
  5924  0717                     	;# 
  5925  0718                     	;# 
  5926  0719                     	;# 
  5927  071A                     	;# 
  5928  071B                     	;# 
  5929  071C                     	;# 
  5930  071D                     	;# 
  5931  071E                     	;# 
  5932  0796                     	;# 
  5933  0797                     	;# 
  5934  0798                     	;# 
  5935  0799                     	;# 
  5936  079A                     	;# 
  5937  079B                     	;# 
  5938  080C                     	;# 
  5939  080D                     	;# 
  5940  080E                     	;# 
  5941  080F                     	;# 
  5942  0810                     	;# 
  5943  0811                     	;# 
  5944  0812                     	;# 
  5945  0813                     	;# 
  5946  0814                     	;# 
  5947  081A                     	;# 
  5948  081B                     	;# 
  5949  081C                     	;# 
  5950  081D                     	;# 
  5951  081E                     	;# 
  5952  081F                     	;# 
  5953  088C                     	;# 
  5954  088D                     	;# 
  5955  088E                     	;# 
  5956  088F                     	;# 
  5957  0890                     	;# 
  5958  0891                     	;# 
  5959  0892                     	;# 
  5960  0893                     	;# 
  5961  0895                     	;# 
  5962  0896                     	;# 
  5963  0897                     	;# 
  5964  0898                     	;# 
  5965  0899                     	;# 
  5966  089A                     	;# 
  5967  089B                     	;# 
  5968  090C                     	;# 
  5969  090E                     	;# 
  5970  090F                     	;# 
  5971  091F                     	;# 
  5972  091F                     	;# 
  5973  098F                     	;# 
  5974  098F                     	;# 
  5975  0990                     	;# 
  5976  0991                     	;# 
  5977  0992                     	;# 
  5978  0993                     	;# 
  5979  0994                     	;# 
  5980  0995                     	;# 
  5981  0996                     	;# 
  5982  0997                     	;# 
  5983  0E0F                     	;# 
  5984  0E10                     	;# 
  5985  0E11                     	;# 
  5986  0E12                     	;# 
  5987  0E13                     	;# 
  5988  0E14                     	;# 
  5989  0E15                     	;# 
  5990  0E16                     	;# 
  5991  0E17                     	;# 
  5992  0E18                     	;# 
  5993  0E19                     	;# 
  5994  0E1A                     	;# 
  5995  0E1B                     	;# 
  5996  0E1C                     	;# 
  5997  0E1D                     	;# 
  5998  0E1E                     	;# 
  5999  0E1F                     	;# 
  6000  0E20                     	;# 
  6001  0E21                     	;# 
  6002  0E22                     	;# 
  6003  0E23                     	;# 
  6004  0E24                     	;# 
  6005  0E25                     	;# 
  6006  0E26                     	;# 
  6007  0E27                     	;# 
  6008  0E28                     	;# 
  6009  0E29                     	;# 
  6010  0E2A                     	;# 
  6011  0E2B                     	;# 
  6012  0E2C                     	;# 
  6013  0E2D                     	;# 
  6014  0E2E                     	;# 
  6015  0E2F                     	;# 
  6016  0E30                     	;# 
  6017  0E31                     	;# 
  6018  0E32                     	;# 
  6019  0E33                     	;# 
  6020  0E34                     	;# 
  6021  0E35                     	;# 
  6022  0E36                     	;# 
  6023  0E37                     	;# 
  6024  0E8F                     	;# 
  6025  0E90                     	;# 
  6026  0E91                     	;# 
  6027  0E92                     	;# 
  6028  0E93                     	;# 
  6029  0E94                     	;# 
  6030  0E95                     	;# 
  6031  0E96                     	;# 
  6032  0E97                     	;# 
  6033  0E9C                     	;# 
  6034  0E9D                     	;# 
  6035  0E9E                     	;# 
  6036  0EA1                     	;# 
  6037  0EA2                     	;# 
  6038  0EA3                     	;# 
  6039  0EA4                     	;# 
  6040  0EA5                     	;# 
  6041  0EA9                     	;# 
  6042  0EAA                     	;# 
  6043  0EAB                     	;# 
  6044  0EAC                     	;# 
  6045  0EB1                     	;# 
  6046  0EB2                     	;# 
  6047  0EB3                     	;# 
  6048  0EB8                     	;# 
  6049  0EB9                     	;# 
  6050  0EBA                     	;# 
  6051  0EBB                     	;# 
  6052  0EBC                     	;# 
  6053  0EBD                     	;# 
  6054  0EBE                     	;# 
  6055  0EC3                     	;# 
  6056  0EC5                     	;# 
  6057  0EC6                     	;# 
  6058  0EC7                     	;# 
  6059  0EC8                     	;# 
  6060  0EC9                     	;# 
  6061  0ECA                     	;# 
  6062  0ECB                     	;# 
  6063  0ECC                     	;# 
  6064  0F10                     	;# 
  6065  0F11                     	;# 
  6066  0F12                     	;# 
  6067  0F13                     	;# 
  6068  0F14                     	;# 
  6069  0F15                     	;# 
  6070  0F16                     	;# 
  6071  0F17                     	;# 
  6072  0F18                     	;# 
  6073  0F19                     	;# 
  6074  0F1A                     	;# 
  6075  0F1B                     	;# 
  6076  0F1C                     	;# 
  6077  0F1D                     	;# 
  6078  0F1E                     	;# 
  6079  0F1F                     	;# 
  6080  0F20                     	;# 
  6081  0F21                     	;# 
  6082  0F22                     	;# 
  6083  0F23                     	;# 
  6084  0F24                     	;# 
  6085  0F25                     	;# 
  6086  0F26                     	;# 
  6087  0F27                     	;# 
  6088  0F28                     	;# 
  6089  0F29                     	;# 
  6090  0F2A                     	;# 
  6091  0F2B                     	;# 
  6092  0F2C                     	;# 
  6093  0F2D                     	;# 
  6094  0F2E                     	;# 
  6095  0F2F                     	;# 
  6096  0F30                     	;# 
  6097  0F31                     	;# 
  6098  0F32                     	;# 
  6099  0F38                     	;# 
  6100  0F39                     	;# 
  6101  0F3A                     	;# 
  6102  0F3B                     	;# 
  6103  0F3C                     	;# 
  6104  0F3D                     	;# 
  6105  0F3E                     	;# 
  6106  0F3F                     	;# 
  6107  0F40                     	;# 
  6108  0F41                     	;# 
  6109  0F43                     	;# 
  6110  0F44                     	;# 
  6111  0F45                     	;# 
  6112  0F46                     	;# 
  6113  0F47                     	;# 
  6114  0F48                     	;# 
  6115  0F49                     	;# 
  6116  0F4A                     	;# 
  6117  0F4B                     	;# 
  6118  0F4C                     	;# 
  6119  0F4E                     	;# 
  6120  0F4F                     	;# 
  6121  0F50                     	;# 
  6122  0F51                     	;# 
  6123  0F52                     	;# 
  6124  0F53                     	;# 
  6125  0F54                     	;# 
  6126  0F55                     	;# 
  6127  0F56                     	;# 
  6128  0F57                     	;# 
  6129  0F59                     	;# 
  6130  0F5A                     	;# 
  6131  0F5B                     	;# 
  6132  0F5C                     	;# 
  6133  0F5D                     	;# 
  6134  0F61                     	;# 
  6135  0F62                     	;# 
  6136  0F64                     	;# 
  6137  0F65                     	;# 
  6138  0F66                     	;# 
  6139  0F67                     	;# 
  6140  0F68                     	;# 
  6141  0F69                     	;# 
  6142  0F6A                     	;# 
  6143  0F6B                     	;# 
  6144  0F6C                     	;# 
  6145  0F6D                     	;# 
  6146  0FE4                     	;# 
  6147  0FE5                     	;# 
  6148  0FE6                     	;# 
  6149  0FE7                     	;# 
  6150  0FE8                     	;# 
  6151  0FE9                     	;# 
  6152  0FEA                     	;# 
  6153  0FEB                     	;# 
  6154  0FED                     	;# 
  6155  0FEE                     	;# 
  6156  0FEF                     	;# 
  6157  0000                     	;# 
  6158  0001                     	;# 
  6159  0002                     	;# 
  6160  0003                     	;# 
  6161  0004                     	;# 
  6162  0005                     	;# 
  6163  0006                     	;# 
  6164  0007                     	;# 
  6165  0008                     	;# 
  6166  0009                     	;# 
  6167  000A                     	;# 
  6168  000B                     	;# 
  6169  000C                     	;# 
  6170  000D                     	;# 
  6171  000E                     	;# 
  6172  000F                     	;# 
  6173  0010                     	;# 
  6174  0011                     	;# 
  6175  0012                     	;# 
  6176  0013                     	;# 
  6177  0014                     	;# 
  6178  0015                     	;# 
  6179  0016                     	;# 
  6180  0017                     	;# 
  6181  0018                     	;# 
  6182  0019                     	;# 
  6183  001A                     	;# 
  6184  001C                     	;# 
  6185  001C                     	;# 
  6186  001D                     	;# 
  6187  001D                     	;# 
  6188  001E                     	;# 
  6189  001F                     	;# 
  6190  008C                     	;# 
  6191  008C                     	;# 
  6192  008D                     	;# 
  6193  008E                     	;# 
  6194  008E                     	;# 
  6195  008F                     	;# 
  6196  0090                     	;# 
  6197  0090                     	;# 
  6198  0091                     	;# 
  6199  0093                     	;# 
  6200  0094                     	;# 
  6201  0095                     	;# 
  6202  0096                     	;# 
  6203  0097                     	;# 
  6204  0098                     	;# 
  6205  0099                     	;# 
  6206  009A                     	;# 
  6207  009B                     	;# 
  6208  009C                     	;# 
  6209  009D                     	;# 
  6210  009E                     	;# 
  6211  010C                     	;# 
  6212  010D                     	;# 
  6213  010E                     	;# 
  6214  010E                     	;# 
  6215  010F                     	;# 
  6216  0110                     	;# 
  6217  0110                     	;# 
  6218  0111                     	;# 
  6219  0112                     	;# 
  6220  0112                     	;# 
  6221  0113                     	;# 
  6222  0114                     	;# 
  6223  0114                     	;# 
  6224  0115                     	;# 
  6225  0116                     	;# 
  6226  0116                     	;# 
  6227  0117                     	;# 
  6228  0119                     	;# 
  6229  0119                     	;# 
  6230  0119                     	;# 
  6231  011A                     	;# 
  6232  011A                     	;# 
  6233  011A                     	;# 
  6234  011B                     	;# 
  6235  011B                     	;# 
  6236  011B                     	;# 
  6237  011B                     	;# 
  6238  011B                     	;# 
  6239  011C                     	;# 
  6240  011C                     	;# 
  6241  011C                     	;# 
  6242  011D                     	;# 
  6243  011D                     	;# 
  6244  011D                     	;# 
  6245  011E                     	;# 
  6246  011E                     	;# 
  6247  011E                     	;# 
  6248  011F                     	;# 
  6249  011F                     	;# 
  6250  011F                     	;# 
  6251  011F                     	;# 
  6252  011F                     	;# 
  6253  018C                     	;# 
  6254  018D                     	;# 
  6255  018E                     	;# 
  6256  018F                     	;# 
  6257  0190                     	;# 
  6258  0191                     	;# 
  6259  0192                     	;# 
  6260  0196                     	;# 
  6261  0197                     	;# 
  6262  0198                     	;# 
  6263  0199                     	;# 
  6264  019A                     	;# 
  6265  019B                     	;# 
  6266  019C                     	;# 
  6267  020C                     	;# 
  6268  020C                     	;# 
  6269  020D                     	;# 
  6270  020E                     	;# 
  6271  020F                     	;# 
  6272  020F                     	;# 
  6273  0210                     	;# 
  6274  0210                     	;# 
  6275  0211                     	;# 
  6276  0211                     	;# 
  6277  0212                     	;# 
  6278  0212                     	;# 
  6279  0213                     	;# 
  6280  0214                     	;# 
  6281  0215                     	;# 
  6282  0215                     	;# 
  6283  0216                     	;# 
  6284  0216                     	;# 
  6285  0217                     	;# 
  6286  0217                     	;# 
  6287  0218                     	;# 
  6288  0218                     	;# 
  6289  0219                     	;# 
  6290  021A                     	;# 
  6291  021B                     	;# 
  6292  021B                     	;# 
  6293  021C                     	;# 
  6294  021C                     	;# 
  6295  021D                     	;# 
  6296  021D                     	;# 
  6297  021E                     	;# 
  6298  021F                     	;# 
  6299  028C                     	;# 
  6300  028C                     	;# 
  6301  028D                     	;# 
  6302  028D                     	;# 
  6303  028E                     	;# 
  6304  028F                     	;# 
  6305  0290                     	;# 
  6306  0290                     	;# 
  6307  0291                     	;# 
  6308  0292                     	;# 
  6309  0292                     	;# 
  6310  0293                     	;# 
  6311  0293                     	;# 
  6312  0294                     	;# 
  6313  0295                     	;# 
  6314  0296                     	;# 
  6315  0296                     	;# 
  6316  0297                     	;# 
  6317  0298                     	;# 
  6318  0298                     	;# 
  6319  0299                     	;# 
  6320  0299                     	;# 
  6321  029A                     	;# 
  6322  029B                     	;# 
  6323  029C                     	;# 
  6324  029C                     	;# 
  6325  029D                     	;# 
  6326  030C                     	;# 
  6327  030C                     	;# 
  6328  030D                     	;# 
  6329  030E                     	;# 
  6330  030F                     	;# 
  6331  0310                     	;# 
  6332  0310                     	;# 
  6333  0311                     	;# 
  6334  0312                     	;# 
  6335  0313                     	;# 
  6336  0314                     	;# 
  6337  0314                     	;# 
  6338  0315                     	;# 
  6339  0316                     	;# 
  6340  0317                     	;# 
  6341  0318                     	;# 
  6342  0318                     	;# 
  6343  0319                     	;# 
  6344  031A                     	;# 
  6345  031B                     	;# 
  6346  031C                     	;# 
  6347  031C                     	;# 
  6348  031D                     	;# 
  6349  031E                     	;# 
  6350  031F                     	;# 
  6351  038C                     	;# 
  6352  038C                     	;# 
  6353  038D                     	;# 
  6354  038E                     	;# 
  6355  0390                     	;# 
  6356  0390                     	;# 
  6357  0391                     	;# 
  6358  0392                     	;# 
  6359  040C                     	;# 
  6360  040D                     	;# 
  6361  040E                     	;# 
  6362  040F                     	;# 
  6363  0410                     	;# 
  6364  0411                     	;# 
  6365  0416                     	;# 
  6366  0416                     	;# 
  6367  0417                     	;# 
  6368  0418                     	;# 
  6369  0418                     	;# 
  6370  0419                     	;# 
  6371  041A                     	;# 
  6372  041A                     	;# 
  6373  041B                     	;# 
  6374  041C                     	;# 
  6375  041C                     	;# 
  6376  041D                     	;# 
  6377  041E                     	;# 
  6378  041F                     	;# 
  6379  048C                     	;# 
  6380  048C                     	;# 
  6381  048D                     	;# 
  6382  048E                     	;# 
  6383  048F                     	;# 
  6384  048F                     	;# 
  6385  0490                     	;# 
  6386  0491                     	;# 
  6387  0492                     	;# 
  6388  0492                     	;# 
  6389  0493                     	;# 
  6390  0494                     	;# 
  6391  0495                     	;# 
  6392  0495                     	;# 
  6393  0496                     	;# 
  6394  0497                     	;# 
  6395  0498                     	;# 
  6396  0499                     	;# 
  6397  049A                     	;# 
  6398  049B                     	;# 
  6399  049C                     	;# 
  6400  049D                     	;# 
  6401  050C                     	;# 
  6402  050C                     	;# 
  6403  050D                     	;# 
  6404  050E                     	;# 
  6405  050F                     	;# 
  6406  050F                     	;# 
  6407  0510                     	;# 
  6408  0511                     	;# 
  6409  0512                     	;# 
  6410  0512                     	;# 
  6411  0513                     	;# 
  6412  0514                     	;# 
  6413  0515                     	;# 
  6414  0515                     	;# 
  6415  0516                     	;# 
  6416  0517                     	;# 
  6417  0518                     	;# 
  6418  0519                     	;# 
  6419  051A                     	;# 
  6420  051B                     	;# 
  6421  051C                     	;# 
  6422  051D                     	;# 
  6423  058C                     	;# 
  6424  058C                     	;# 
  6425  058D                     	;# 
  6426  058E                     	;# 
  6427  058F                     	;# 
  6428  058F                     	;# 
  6429  0590                     	;# 
  6430  0591                     	;# 
  6431  0592                     	;# 
  6432  0593                     	;# 
  6433  060C                     	;# 
  6434  060D                     	;# 
  6435  060E                     	;# 
  6436  060F                     	;# 
  6437  0610                     	;# 
  6438  0611                     	;# 
  6439  0612                     	;# 
  6440  0613                     	;# 
  6441  0614                     	;# 
  6442  0616                     	;# 
  6443  0617                     	;# 
  6444  0618                     	;# 
  6445  0619                     	;# 
  6446  061A                     	;# 
  6447  061B                     	;# 
  6448  061C                     	;# 
  6449  061D                     	;# 
  6450  061E                     	;# 
  6451  068C                     	;# 
  6452  068D                     	;# 
  6453  068E                     	;# 
  6454  068F                     	;# 
  6455  0690                     	;# 
  6456  0691                     	;# 
  6457  0692                     	;# 
  6458  0693                     	;# 
  6459  0694                     	;# 
  6460  070C                     	;# 
  6461  070D                     	;# 
  6462  070E                     	;# 
  6463  070F                     	;# 
  6464  0710                     	;# 
  6465  0711                     	;# 
  6466  0712                     	;# 
  6467  0713                     	;# 
  6468  0714                     	;# 
  6469  0716                     	;# 
  6470  0717                     	;# 
  6471  0718                     	;# 
  6472  0719                     	;# 
  6473  071A                     	;# 
  6474  071B                     	;# 
  6475  071C                     	;# 
  6476  071D                     	;# 
  6477  071E                     	;# 
  6478  0796                     	;# 
  6479  0797                     	;# 
  6480  0798                     	;# 
  6481  0799                     	;# 
  6482  079A                     	;# 
  6483  079B                     	;# 
  6484  080C                     	;# 
  6485  080D                     	;# 
  6486  080E                     	;# 
  6487  080F                     	;# 
  6488  0810                     	;# 
  6489  0811                     	;# 
  6490  0812                     	;# 
  6491  0813                     	;# 
  6492  0814                     	;# 
  6493  081A                     	;# 
  6494  081B                     	;# 
  6495  081C                     	;# 
  6496  081D                     	;# 
  6497  081E                     	;# 
  6498  081F                     	;# 
  6499  088C                     	;# 
  6500  088D                     	;# 
  6501  088E                     	;# 
  6502  088F                     	;# 
  6503  0890                     	;# 
  6504  0891                     	;# 
  6505  0892                     	;# 
  6506  0893                     	;# 
  6507  0895                     	;# 
  6508  0896                     	;# 
  6509  0897                     	;# 
  6510  0898                     	;# 
  6511  0899                     	;# 
  6512  089A                     	;# 
  6513  089B                     	;# 
  6514  090C                     	;# 
  6515  090E                     	;# 
  6516  090F                     	;# 
  6517  091F                     	;# 
  6518  091F                     	;# 
  6519  098F                     	;# 
  6520  098F                     	;# 
  6521  0990                     	;# 
  6522  0991                     	;# 
  6523  0992                     	;# 
  6524  0993                     	;# 
  6525  0994                     	;# 
  6526  0995                     	;# 
  6527  0996                     	;# 
  6528  0997                     	;# 
  6529  0E0F                     	;# 
  6530  0E10                     	;# 
  6531  0E11                     	;# 
  6532  0E12                     	;# 
  6533  0E13                     	;# 
  6534  0E14                     	;# 
  6535  0E15                     	;# 
  6536  0E16                     	;# 
  6537  0E17                     	;# 
  6538  0E18                     	;# 
  6539  0E19                     	;# 
  6540  0E1A                     	;# 
  6541  0E1B                     	;# 
  6542  0E1C                     	;# 
  6543  0E1D                     	;# 
  6544  0E1E                     	;# 
  6545  0E1F                     	;# 
  6546  0E20                     	;# 
  6547  0E21                     	;# 
  6548  0E22                     	;# 
  6549  0E23                     	;# 
  6550  0E24                     	;# 
  6551  0E25                     	;# 
  6552  0E26                     	;# 
  6553  0E27                     	;# 
  6554  0E28                     	;# 
  6555  0E29                     	;# 
  6556  0E2A                     	;# 
  6557  0E2B                     	;# 
  6558  0E2C                     	;# 
  6559  0E2D                     	;# 
  6560  0E2E                     	;# 
  6561  0E2F                     	;# 
  6562  0E30                     	;# 
  6563  0E31                     	;# 
  6564  0E32                     	;# 
  6565  0E33                     	;# 
  6566  0E34                     	;# 
  6567  0E35                     	;# 
  6568  0E36                     	;# 
  6569  0E37                     	;# 
  6570  0E8F                     	;# 
  6571  0E90                     	;# 
  6572  0E91                     	;# 
  6573  0E92                     	;# 
  6574  0E93                     	;# 
  6575  0E94                     	;# 
  6576  0E95                     	;# 
  6577  0E96                     	;# 
  6578  0E97                     	;# 
  6579  0E9C                     	;# 
  6580  0E9D                     	;# 
  6581  0E9E                     	;# 
  6582  0EA1                     	;# 
  6583  0EA2                     	;# 
  6584  0EA3                     	;# 
  6585  0EA4                     	;# 
  6586  0EA5                     	;# 
  6587  0EA9                     	;# 
  6588  0EAA                     	;# 
  6589  0EAB                     	;# 
  6590  0EAC                     	;# 
  6591  0EB1                     	;# 
  6592  0EB2                     	;# 
  6593  0EB3                     	;# 
  6594  0EB8                     	;# 
  6595  0EB9                     	;# 
  6596  0EBA                     	;# 
  6597  0EBB                     	;# 
  6598  0EBC                     	;# 
  6599  0EBD                     	;# 
  6600  0EBE                     	;# 
  6601  0EC3                     	;# 
  6602  0EC5                     	;# 
  6603  0EC6                     	;# 
  6604  0EC7                     	;# 
  6605  0EC8                     	;# 
  6606  0EC9                     	;# 
  6607  0ECA                     	;# 
  6608  0ECB                     	;# 
  6609  0ECC                     	;# 
  6610  0F10                     	;# 
  6611  0F11                     	;# 
  6612  0F12                     	;# 
  6613  0F13                     	;# 
  6614  0F14                     	;# 
  6615  0F15                     	;# 
  6616  0F16                     	;# 
  6617  0F17                     	;# 
  6618  0F18                     	;# 
  6619  0F19                     	;# 
  6620  0F1A                     	;# 
  6621  0F1B                     	;# 
  6622  0F1C                     	;# 
  6623  0F1D                     	;# 
  6624  0F1E                     	;# 
  6625  0F1F                     	;# 
  6626  0F20                     	;# 
  6627  0F21                     	;# 
  6628  0F22                     	;# 
  6629  0F23                     	;# 
  6630  0F24                     	;# 
  6631  0F25                     	;# 
  6632  0F26                     	;# 
  6633  0F27                     	;# 
  6634  0F28                     	;# 
  6635  0F29                     	;# 
  6636  0F2A                     	;# 
  6637  0F2B                     	;# 
  6638  0F2C                     	;# 
  6639  0F2D                     	;# 
  6640  0F2E                     	;# 
  6641  0F2F                     	;# 
  6642  0F30                     	;# 
  6643  0F31                     	;# 
  6644  0F32                     	;# 
  6645  0F38                     	;# 
  6646  0F39                     	;# 
  6647  0F3A                     	;# 
  6648  0F3B                     	;# 
  6649  0F3C                     	;# 
  6650  0F3D                     	;# 
  6651  0F3E                     	;# 
  6652  0F3F                     	;# 
  6653  0F40                     	;# 
  6654  0F41                     	;# 
  6655  0F43                     	;# 
  6656  0F44                     	;# 
  6657  0F45                     	;# 
  6658  0F46                     	;# 
  6659  0F47                     	;# 
  6660  0F48                     	;# 
  6661  0F49                     	;# 
  6662  0F4A                     	;# 
  6663  0F4B                     	;# 
  6664  0F4C                     	;# 
  6665  0F4E                     	;# 
  6666  0F4F                     	;# 
  6667  0F50                     	;# 
  6668  0F51                     	;# 
  6669  0F52                     	;# 
  6670  0F53                     	;# 
  6671  0F54                     	;# 
  6672  0F55                     	;# 
  6673  0F56                     	;# 
  6674  0F57                     	;# 
  6675  0F59                     	;# 
  6676  0F5A                     	;# 
  6677  0F5B                     	;# 
  6678  0F5C                     	;# 
  6679  0F5D                     	;# 
  6680  0F61                     	;# 
  6681  0F62                     	;# 
  6682  0F64                     	;# 
  6683  0F65                     	;# 
  6684  0F66                     	;# 
  6685  0F67                     	;# 
  6686  0F68                     	;# 
  6687  0F69                     	;# 
  6688  0F6A                     	;# 
  6689  0F6B                     	;# 
  6690  0F6C                     	;# 
  6691  0F6D                     	;# 
  6692  0FE4                     	;# 
  6693  0FE5                     	;# 
  6694  0FE6                     	;# 
  6695  0FE7                     	;# 
  6696  0FE8                     	;# 
  6697  0FE9                     	;# 
  6698  0FEA                     	;# 
  6699  0FEB                     	;# 
  6700  0FED                     	;# 
  6701  0FEE                     	;# 
  6702  0FEF                     	;# 
  6703  0000                     	;# 
  6704  0001                     	;# 
  6705  0002                     	;# 
  6706  0003                     	;# 
  6707  0004                     	;# 
  6708  0005                     	;# 
  6709  0006                     	;# 
  6710  0007                     	;# 
  6711  0008                     	;# 
  6712  0009                     	;# 
  6713  000A                     	;# 
  6714  000B                     	;# 
  6715  000C                     	;# 
  6716  000D                     	;# 
  6717  000E                     	;# 
  6718  000F                     	;# 
  6719  0010                     	;# 
  6720  0011                     	;# 
  6721  0012                     	;# 
  6722  0013                     	;# 
  6723  0014                     	;# 
  6724  0015                     	;# 
  6725  0016                     	;# 
  6726  0017                     	;# 
  6727  0018                     	;# 
  6728  0019                     	;# 
  6729  001A                     	;# 
  6730  001C                     	;# 
  6731  001C                     	;# 
  6732  001D                     	;# 
  6733  001D                     	;# 
  6734  001E                     	;# 
  6735  001F                     	;# 
  6736  008C                     	;# 
  6737  008C                     	;# 
  6738  008D                     	;# 
  6739  008E                     	;# 
  6740  008E                     	;# 
  6741  008F                     	;# 
  6742  0090                     	;# 
  6743  0090                     	;# 
  6744  0091                     	;# 
  6745  0093                     	;# 
  6746  0094                     	;# 
  6747  0095                     	;# 
  6748  0096                     	;# 
  6749  0097                     	;# 
  6750  0098                     	;# 
  6751  0099                     	;# 
  6752  009A                     	;# 
  6753  009B                     	;# 
  6754  009C                     	;# 
  6755  009D                     	;# 
  6756  009E                     	;# 
  6757  010C                     	;# 
  6758  010D                     	;# 
  6759  010E                     	;# 
  6760  010E                     	;# 
  6761  010F                     	;# 
  6762  0110                     	;# 
  6763  0110                     	;# 
  6764  0111                     	;# 
  6765  0112                     	;# 
  6766  0112                     	;# 
  6767  0113                     	;# 
  6768  0114                     	;# 
  6769  0114                     	;# 
  6770  0115                     	;# 
  6771  0116                     	;# 
  6772  0116                     	;# 
  6773  0117                     	;# 
  6774  0119                     	;# 
  6775  0119                     	;# 
  6776  0119                     	;# 
  6777  011A                     	;# 
  6778  011A                     	;# 
  6779  011A                     	;# 
  6780  011B                     	;# 
  6781  011B                     	;# 
  6782  011B                     	;# 
  6783  011B                     	;# 
  6784  011B                     	;# 
  6785  011C                     	;# 
  6786  011C                     	;# 
  6787  011C                     	;# 
  6788  011D                     	;# 
  6789  011D                     	;# 
  6790  011D                     	;# 
  6791  011E                     	;# 
  6792  011E                     	;# 
  6793  011E                     	;# 
  6794  011F                     	;# 
  6795  011F                     	;# 
  6796  011F                     	;# 
  6797  011F                     	;# 
  6798  011F                     	;# 
  6799  018C                     	;# 
  6800  018D                     	;# 
  6801  018E                     	;# 
  6802  018F                     	;# 
  6803  0190                     	;# 
  6804  0191                     	;# 
  6805  0192                     	;# 
  6806  0196                     	;# 
  6807  0197                     	;# 
  6808  0198                     	;# 
  6809  0199                     	;# 
  6810  019A                     	;# 
  6811  019B                     	;# 
  6812  019C                     	;# 
  6813  020C                     	;# 
  6814  020C                     	;# 
  6815  020D                     	;# 
  6816  020E                     	;# 
  6817  020F                     	;# 
  6818  020F                     	;# 
  6819  0210                     	;# 
  6820  0210                     	;# 
  6821  0211                     	;# 
  6822  0211                     	;# 
  6823  0212                     	;# 
  6824  0212                     	;# 
  6825  0213                     	;# 
  6826  0214                     	;# 
  6827  0215                     	;# 
  6828  0215                     	;# 
  6829  0216                     	;# 
  6830  0216                     	;# 
  6831  0217                     	;# 
  6832  0217                     	;# 
  6833  0218                     	;# 
  6834  0218                     	;# 
  6835  0219                     	;# 
  6836  021A                     	;# 
  6837  021B                     	;# 
  6838  021B                     	;# 
  6839  021C                     	;# 
  6840  021C                     	;# 
  6841  021D                     	;# 
  6842  021D                     	;# 
  6843  021E                     	;# 
  6844  021F                     	;# 
  6845  028C                     	;# 
  6846  028C                     	;# 
  6847  028D                     	;# 
  6848  028D                     	;# 
  6849  028E                     	;# 
  6850  028F                     	;# 
  6851  0290                     	;# 
  6852  0290                     	;# 
  6853  0291                     	;# 
  6854  0292                     	;# 
  6855  0292                     	;# 
  6856  0293                     	;# 
  6857  0293                     	;# 
  6858  0294                     	;# 
  6859  0295                     	;# 
  6860  0296                     	;# 
  6861  0296                     	;# 
  6862  0297                     	;# 
  6863  0298                     	;# 
  6864  0298                     	;# 
  6865  0299                     	;# 
  6866  0299                     	;# 
  6867  029A                     	;# 
  6868  029B                     	;# 
  6869  029C                     	;# 
  6870  029C                     	;# 
  6871  029D                     	;# 
  6872  030C                     	;# 
  6873  030C                     	;# 
  6874  030D                     	;# 
  6875  030E                     	;# 
  6876  030F                     	;# 
  6877  0310                     	;# 
  6878  0310                     	;# 
  6879  0311                     	;# 
  6880  0312                     	;# 
  6881  0313                     	;# 
  6882  0314                     	;# 
  6883  0314                     	;# 
  6884  0315                     	;# 
  6885  0316                     	;# 
  6886  0317                     	;# 
  6887  0318                     	;# 
  6888  0318                     	;# 
  6889  0319                     	;# 
  6890  031A                     	;# 
  6891  031B                     	;# 
  6892  031C                     	;# 
  6893  031C                     	;# 
  6894  031D                     	;# 
  6895  031E                     	;# 
  6896  031F                     	;# 
  6897  038C                     	;# 
  6898  038C                     	;# 
  6899  038D                     	;# 
  6900  038E                     	;# 
  6901  0390                     	;# 
  6902  0390                     	;# 
  6903  0391                     	;# 
  6904  0392                     	;# 
  6905  040C                     	;# 
  6906  040D                     	;# 
  6907  040E                     	;# 
  6908  040F                     	;# 
  6909  0410                     	;# 
  6910  0411                     	;# 
  6911  0416                     	;# 
  6912  0416                     	;# 
  6913  0417                     	;# 
  6914  0418                     	;# 
  6915  0418                     	;# 
  6916  0419                     	;# 
  6917  041A                     	;# 
  6918  041A                     	;# 
  6919  041B                     	;# 
  6920  041C                     	;# 
  6921  041C                     	;# 
  6922  041D                     	;# 
  6923  041E                     	;# 
  6924  041F                     	;# 
  6925  048C                     	;# 
  6926  048C                     	;# 
  6927  048D                     	;# 
  6928  048E                     	;# 
  6929  048F                     	;# 
  6930  048F                     	;# 
  6931  0490                     	;# 
  6932  0491                     	;# 
  6933  0492                     	;# 
  6934  0492                     	;# 
  6935  0493                     	;# 
  6936  0494                     	;# 
  6937  0495                     	;# 
  6938  0495                     	;# 
  6939  0496                     	;# 
  6940  0497                     	;# 
  6941  0498                     	;# 
  6942  0499                     	;# 
  6943  049A                     	;# 
  6944  049B                     	;# 
  6945  049C                     	;# 
  6946  049D                     	;# 
  6947  050C                     	;# 
  6948  050C                     	;# 
  6949  050D                     	;# 
  6950  050E                     	;# 
  6951  050F                     	;# 
  6952  050F                     	;# 
  6953  0510                     	;# 
  6954  0511                     	;# 
  6955  0512                     	;# 
  6956  0512                     	;# 
  6957  0513                     	;# 
  6958  0514                     	;# 
  6959  0515                     	;# 
  6960  0515                     	;# 
  6961  0516                     	;# 
  6962  0517                     	;# 
  6963  0518                     	;# 
  6964  0519                     	;# 
  6965  051A                     	;# 
  6966  051B                     	;# 
  6967  051C                     	;# 
  6968  051D                     	;# 
  6969  058C                     	;# 
  6970  058C                     	;# 
  6971  058D                     	;# 
  6972  058E                     	;# 
  6973  058F                     	;# 
  6974  058F                     	;# 
  6975  0590                     	;# 
  6976  0591                     	;# 
  6977  0592                     	;# 
  6978  0593                     	;# 
  6979  060C                     	;# 
  6980  060D                     	;# 
  6981  060E                     	;# 
  6982  060F                     	;# 
  6983  0610                     	;# 
  6984  0611                     	;# 
  6985  0612                     	;# 
  6986  0613                     	;# 
  6987  0614                     	;# 
  6988  0616                     	;# 
  6989  0617                     	;# 
  6990  0618                     	;# 
  6991  0619                     	;# 
  6992  061A                     	;# 
  6993  061B                     	;# 
  6994  061C                     	;# 
  6995  061D                     	;# 
  6996  061E                     	;# 
  6997  068C                     	;# 
  6998  068D                     	;# 
  6999  068E                     	;# 
  7000  068F                     	;# 
  7001  0690                     	;# 
  7002  0691                     	;# 
  7003  0692                     	;# 
  7004  0693                     	;# 
  7005  0694                     	;# 
  7006  070C                     	;# 
  7007  070D                     	;# 
  7008  070E                     	;# 
  7009  070F                     	;# 
  7010  0710                     	;# 
  7011  0711                     	;# 
  7012  0712                     	;# 
  7013  0713                     	;# 
  7014  0714                     	;# 
  7015  0716                     	;# 
  7016  0717                     	;# 
  7017  0718                     	;# 
  7018  0719                     	;# 
  7019  071A                     	;# 
  7020  071B                     	;# 
  7021  071C                     	;# 
  7022  071D                     	;# 
  7023  071E                     	;# 
  7024  0796                     	;# 
  7025  0797                     	;# 
  7026  0798                     	;# 
  7027  0799                     	;# 
  7028  079A                     	;# 
  7029  079B                     	;# 
  7030  080C                     	;# 
  7031  080D                     	;# 
  7032  080E                     	;# 
  7033  080F                     	;# 
  7034  0810                     	;# 
  7035  0811                     	;# 
  7036  0812                     	;# 
  7037  0813                     	;# 
  7038  0814                     	;# 
  7039  081A                     	;# 
  7040  081B                     	;# 
  7041  081C                     	;# 
  7042  081D                     	;# 
  7043  081E                     	;# 
  7044  081F                     	;# 
  7045  088C                     	;# 
  7046  088D                     	;# 
  7047  088E                     	;# 
  7048  088F                     	;# 
  7049  0890                     	;# 
  7050  0891                     	;# 
  7051  0892                     	;# 
  7052  0893                     	;# 
  7053  0895                     	;# 
  7054  0896                     	;# 
  7055  0897                     	;# 
  7056  0898                     	;# 
  7057  0899                     	;# 
  7058  089A                     	;# 
  7059  089B                     	;# 
  7060  090C                     	;# 
  7061  090E                     	;# 
  7062  090F                     	;# 
  7063  091F                     	;# 
  7064  091F                     	;# 
  7065  098F                     	;# 
  7066  098F                     	;# 
  7067  0990                     	;# 
  7068  0991                     	;# 
  7069  0992                     	;# 
  7070  0993                     	;# 
  7071  0994                     	;# 
  7072  0995                     	;# 
  7073  0996                     	;# 
  7074  0997                     	;# 
  7075  0E0F                     	;# 
  7076  0E10                     	;# 
  7077  0E11                     	;# 
  7078  0E12                     	;# 
  7079  0E13                     	;# 
  7080  0E14                     	;# 
  7081  0E15                     	;# 
  7082  0E16                     	;# 
  7083  0E17                     	;# 
  7084  0E18                     	;# 
  7085  0E19                     	;# 
  7086  0E1A                     	;# 
  7087  0E1B                     	;# 
  7088  0E1C                     	;# 
  7089  0E1D                     	;# 
  7090  0E1E                     	;# 
  7091  0E1F                     	;# 
  7092  0E20                     	;# 
  7093  0E21                     	;# 
  7094  0E22                     	;# 
  7095  0E23                     	;# 
  7096  0E24                     	;# 
  7097  0E25                     	;# 
  7098  0E26                     	;# 
  7099  0E27                     	;# 
  7100  0E28                     	;# 
  7101  0E29                     	;# 
  7102  0E2A                     	;# 
  7103  0E2B                     	;# 
  7104  0E2C                     	;# 
  7105  0E2D                     	;# 
  7106  0E2E                     	;# 
  7107  0E2F                     	;# 
  7108  0E30                     	;# 
  7109  0E31                     	;# 
  7110  0E32                     	;# 
  7111  0E33                     	;# 
  7112  0E34                     	;# 
  7113  0E35                     	;# 
  7114  0E36                     	;# 
  7115  0E37                     	;# 
  7116  0E8F                     	;# 
  7117  0E90                     	;# 
  7118  0E91                     	;# 
  7119  0E92                     	;# 
  7120  0E93                     	;# 
  7121  0E94                     	;# 
  7122  0E95                     	;# 
  7123  0E96                     	;# 
  7124  0E97                     	;# 
  7125  0E9C                     	;# 
  7126  0E9D                     	;# 
  7127  0E9E                     	;# 
  7128  0EA1                     	;# 
  7129  0EA2                     	;# 
  7130  0EA3                     	;# 
  7131  0EA4                     	;# 
  7132  0EA5                     	;# 
  7133  0EA9                     	;# 
  7134  0EAA                     	;# 
  7135  0EAB                     	;# 
  7136  0EAC                     	;# 
  7137  0EB1                     	;# 
  7138  0EB2                     	;# 
  7139  0EB3                     	;# 
  7140  0EB8                     	;# 
  7141  0EB9                     	;# 
  7142  0EBA                     	;# 
  7143  0EBB                     	;# 
  7144  0EBC                     	;# 
  7145  0EBD                     	;# 
  7146  0EBE                     	;# 
  7147  0EC3                     	;# 
  7148  0EC5                     	;# 
  7149  0EC6                     	;# 
  7150  0EC7                     	;# 
  7151  0EC8                     	;# 
  7152  0EC9                     	;# 
  7153  0ECA                     	;# 
  7154  0ECB                     	;# 
  7155  0ECC                     	;# 
  7156  0F10                     	;# 
  7157  0F11                     	;# 
  7158  0F12                     	;# 
  7159  0F13                     	;# 
  7160  0F14                     	;# 
  7161  0F15                     	;# 
  7162  0F16                     	;# 
  7163  0F17                     	;# 
  7164  0F18                     	;# 
  7165  0F19                     	;# 
  7166  0F1A                     	;# 
  7167  0F1B                     	;# 
  7168  0F1C                     	;# 
  7169  0F1D                     	;# 
  7170  0F1E                     	;# 
  7171  0F1F                     	;# 
  7172  0F20                     	;# 
  7173  0F21                     	;# 
  7174  0F22                     	;# 
  7175  0F23                     	;# 
  7176  0F24                     	;# 
  7177  0F25                     	;# 
  7178  0F26                     	;# 
  7179  0F27                     	;# 
  7180  0F28                     	;# 
  7181  0F29                     	;# 
  7182  0F2A                     	;# 
  7183  0F2B                     	;# 
  7184  0F2C                     	;# 
  7185  0F2D                     	;# 
  7186  0F2E                     	;# 
  7187  0F2F                     	;# 
  7188  0F30                     	;# 
  7189  0F31                     	;# 
  7190  0F32                     	;# 
  7191  0F38                     	;# 
  7192  0F39                     	;# 
  7193  0F3A                     	;# 
  7194  0F3B                     	;# 
  7195  0F3C                     	;# 
  7196  0F3D                     	;# 
  7197  0F3E                     	;# 
  7198  0F3F                     	;# 
  7199  0F40                     	;# 
  7200  0F41                     	;# 
  7201  0F43                     	;# 
  7202  0F44                     	;# 
  7203  0F45                     	;# 
  7204  0F46                     	;# 
  7205  0F47                     	;# 
  7206  0F48                     	;# 
  7207  0F49                     	;# 
  7208  0F4A                     	;# 
  7209  0F4B                     	;# 
  7210  0F4C                     	;# 
  7211  0F4E                     	;# 
  7212  0F4F                     	;# 
  7213  0F50                     	;# 
  7214  0F51                     	;# 
  7215  0F52                     	;# 
  7216  0F53                     	;# 
  7217  0F54                     	;# 
  7218  0F55                     	;# 
  7219  0F56                     	;# 
  7220  0F57                     	;# 
  7221  0F59                     	;# 
  7222  0F5A                     	;# 
  7223  0F5B                     	;# 
  7224  0F5C                     	;# 
  7225  0F5D                     	;# 
  7226  0F61                     	;# 
  7227  0F62                     	;# 
  7228  0F64                     	;# 
  7229  0F65                     	;# 
  7230  0F66                     	;# 
  7231  0F67                     	;# 
  7232  0F68                     	;# 
  7233  0F69                     	;# 
  7234  0F6A                     	;# 
  7235  0F6B                     	;# 
  7236  0F6C                     	;# 
  7237  0F6D                     	;# 
  7238  0FE4                     	;# 
  7239  0FE5                     	;# 
  7240  0FE6                     	;# 
  7241  0FE7                     	;# 
  7242  0FE8                     	;# 
  7243  0FE9                     	;# 
  7244  0FEA                     	;# 
  7245  0FEB                     	;# 
  7246  0FED                     	;# 
  7247  0FEE                     	;# 
  7248  0FEF                     	;# 
  7249  0000                     	;# 
  7250  0001                     	;# 
  7251  0002                     	;# 
  7252  0003                     	;# 
  7253  0004                     	;# 
  7254  0005                     	;# 
  7255  0006                     	;# 
  7256  0007                     	;# 
  7257  0008                     	;# 
  7258  0009                     	;# 
  7259  000A                     	;# 
  7260  000B                     	;# 
  7261  000C                     	;# 
  7262  000D                     	;# 
  7263  000E                     	;# 
  7264  000F                     	;# 
  7265  0010                     	;# 
  7266  0011                     	;# 
  7267  0012                     	;# 
  7268  0013                     	;# 
  7269  0014                     	;# 
  7270  0015                     	;# 
  7271  0016                     	;# 
  7272  0017                     	;# 
  7273  0018                     	;# 
  7274  0019                     	;# 
  7275  001A                     	;# 
  7276  001C                     	;# 
  7277  001C                     	;# 
  7278  001D                     	;# 
  7279  001D                     	;# 
  7280  001E                     	;# 
  7281  001F                     	;# 
  7282  008C                     	;# 
  7283  008C                     	;# 
  7284  008D                     	;# 
  7285  008E                     	;# 
  7286  008E                     	;# 
  7287  008F                     	;# 
  7288  0090                     	;# 
  7289  0090                     	;# 
  7290  0091                     	;# 
  7291  0093                     	;# 
  7292  0094                     	;# 
  7293  0095                     	;# 
  7294  0096                     	;# 
  7295  0097                     	;# 
  7296  0098                     	;# 
  7297  0099                     	;# 
  7298  009A                     	;# 
  7299  009B                     	;# 
  7300  009C                     	;# 
  7301  009D                     	;# 
  7302  009E                     	;# 
  7303  010C                     	;# 
  7304  010D                     	;# 
  7305  010E                     	;# 
  7306  010E                     	;# 
  7307  010F                     	;# 
  7308  0110                     	;# 
  7309  0110                     	;# 
  7310  0111                     	;# 
  7311  0112                     	;# 
  7312  0112                     	;# 
  7313  0113                     	;# 
  7314  0114                     	;# 
  7315  0114                     	;# 
  7316  0115                     	;# 
  7317  0116                     	;# 
  7318  0116                     	;# 
  7319  0117                     	;# 
  7320  0119                     	;# 
  7321  0119                     	;# 
  7322  0119                     	;# 
  7323  011A                     	;# 
  7324  011A                     	;# 
  7325  011A                     	;# 
  7326  011B                     	;# 
  7327  011B                     	;# 
  7328  011B                     	;# 
  7329  011B                     	;# 
  7330  011B                     	;# 
  7331  011C                     	;# 
  7332  011C                     	;# 
  7333  011C                     	;# 
  7334  011D                     	;# 
  7335  011D                     	;# 
  7336  011D                     	;# 
  7337  011E                     	;# 
  7338  011E                     	;# 
  7339  011E                     	;# 
  7340  011F                     	;# 
  7341  011F                     	;# 
  7342  011F                     	;# 
  7343  011F                     	;# 
  7344  011F                     	;# 
  7345  018C                     	;# 
  7346  018D                     	;# 
  7347  018E                     	;# 
  7348  018F                     	;# 
  7349  0190                     	;# 
  7350  0191                     	;# 
  7351  0192                     	;# 
  7352  0196                     	;# 
  7353  0197                     	;# 
  7354  0198                     	;# 
  7355  0199                     	;# 
  7356  019A                     	;# 
  7357  019B                     	;# 
  7358  019C                     	;# 
  7359  020C                     	;# 
  7360  020C                     	;# 
  7361  020D                     	;# 
  7362  020E                     	;# 
  7363  020F                     	;# 
  7364  020F                     	;# 
  7365  0210                     	;# 
  7366  0210                     	;# 
  7367  0211                     	;# 
  7368  0211                     	;# 
  7369  0212                     	;# 
  7370  0212                     	;# 
  7371  0213                     	;# 
  7372  0214                     	;# 
  7373  0215                     	;# 
  7374  0215                     	;# 
  7375  0216                     	;# 
  7376  0216                     	;# 
  7377  0217                     	;# 
  7378  0217                     	;# 
  7379  0218                     	;# 
  7380  0218                     	;# 
  7381  0219                     	;# 
  7382  021A                     	;# 
  7383  021B                     	;# 
  7384  021B                     	;# 
  7385  021C                     	;# 
  7386  021C                     	;# 
  7387  021D                     	;# 
  7388  021D                     	;# 
  7389  021E                     	;# 
  7390  021F                     	;# 
  7391  028C                     	;# 
  7392  028C                     	;# 
  7393  028D                     	;# 
  7394  028D                     	;# 
  7395  028E                     	;# 
  7396  028F                     	;# 
  7397  0290                     	;# 
  7398  0290                     	;# 
  7399  0291                     	;# 
  7400  0292                     	;# 
  7401  0292                     	;# 
  7402  0293                     	;# 
  7403  0293                     	;# 
  7404  0294                     	;# 
  7405  0295                     	;# 
  7406  0296                     	;# 
  7407  0296                     	;# 
  7408  0297                     	;# 
  7409  0298                     	;# 
  7410  0298                     	;# 
  7411  0299                     	;# 
  7412  0299                     	;# 
  7413  029A                     	;# 
  7414  029B                     	;# 
  7415  029C                     	;# 
  7416  029C                     	;# 
  7417  029D                     	;# 
  7418  030C                     	;# 
  7419  030C                     	;# 
  7420  030D                     	;# 
  7421  030E                     	;# 
  7422  030F                     	;# 
  7423  0310                     	;# 
  7424  0310                     	;# 
  7425  0311                     	;# 
  7426  0312                     	;# 
  7427  0313                     	;# 
  7428  0314                     	;# 
  7429  0314                     	;# 
  7430  0315                     	;# 
  7431  0316                     	;# 
  7432  0317                     	;# 
  7433  0318                     	;# 
  7434  0318                     	;# 
  7435  0319                     	;# 
  7436  031A                     	;# 
  7437  031B                     	;# 
  7438  031C                     	;# 
  7439  031C                     	;# 
  7440  031D                     	;# 
  7441  031E                     	;# 
  7442  031F                     	;# 
  7443  038C                     	;# 
  7444  038C                     	;# 
  7445  038D                     	;# 
  7446  038E                     	;# 
  7447  0390                     	;# 
  7448  0390                     	;# 
  7449  0391                     	;# 
  7450  0392                     	;# 
  7451  040C                     	;# 
  7452  040D                     	;# 
  7453  040E                     	;# 
  7454  040F                     	;# 
  7455  0410                     	;# 
  7456  0411                     	;# 
  7457  0416                     	;# 
  7458  0416                     	;# 
  7459  0417                     	;# 
  7460  0418                     	;# 
  7461  0418                     	;# 
  7462  0419                     	;# 
  7463  041A                     	;# 
  7464  041A                     	;# 
  7465  041B                     	;# 
  7466  041C                     	;# 
  7467  041C                     	;# 
  7468  041D                     	;# 
  7469  041E                     	;# 
  7470  041F                     	;# 
  7471  048C                     	;# 
  7472  048C                     	;# 
  7473  048D                     	;# 
  7474  048E                     	;# 
  7475  048F                     	;# 
  7476  048F                     	;# 
  7477  0490                     	;# 
  7478  0491                     	;# 
  7479  0492                     	;# 
  7480  0492                     	;# 
  7481  0493                     	;# 
  7482  0494                     	;# 
  7483  0495                     	;# 
  7484  0495                     	;# 
  7485  0496                     	;# 
  7486  0497                     	;# 
  7487  0498                     	;# 
  7488  0499                     	;# 
  7489  049A                     	;# 
  7490  049B                     	;# 
  7491  049C                     	;# 
  7492  049D                     	;# 
  7493  050C                     	;# 
  7494  050C                     	;# 
  7495  050D                     	;# 
  7496  050E                     	;# 
  7497  050F                     	;# 
  7498  050F                     	;# 
  7499  0510                     	;# 
  7500  0511                     	;# 
  7501  0512                     	;# 
  7502  0512                     	;# 
  7503  0513                     	;# 
  7504  0514                     	;# 
  7505  0515                     	;# 
  7506  0515                     	;# 
  7507  0516                     	;# 
  7508  0517                     	;# 
  7509  0518                     	;# 
  7510  0519                     	;# 
  7511  051A                     	;# 
  7512  051B                     	;# 
  7513  051C                     	;# 
  7514  051D                     	;# 
  7515  058C                     	;# 
  7516  058C                     	;# 
  7517  058D                     	;# 
  7518  058E                     	;# 
  7519  058F                     	;# 
  7520  058F                     	;# 
  7521  0590                     	;# 
  7522  0591                     	;# 
  7523  0592                     	;# 
  7524  0593                     	;# 
  7525  060C                     	;# 
  7526  060D                     	;# 
  7527  060E                     	;# 
  7528  060F                     	;# 
  7529  0610                     	;# 
  7530  0611                     	;# 
  7531  0612                     	;# 
  7532  0613                     	;# 
  7533  0614                     	;# 
  7534  0616                     	;# 
  7535  0617                     	;# 
  7536  0618                     	;# 
  7537  0619                     	;# 
  7538  061A                     	;# 
  7539  061B                     	;# 
  7540  061C                     	;# 
  7541  061D                     	;# 
  7542  061E                     	;# 
  7543  068C                     	;# 
  7544  068D                     	;# 
  7545  068E                     	;# 
  7546  068F                     	;# 
  7547  0690                     	;# 
  7548  0691                     	;# 
  7549  0692                     	;# 
  7550  0693                     	;# 
  7551  0694                     	;# 
  7552  070C                     	;# 
  7553  070D                     	;# 
  7554  070E                     	;# 
  7555  070F                     	;# 
  7556  0710                     	;# 
  7557  0711                     	;# 
  7558  0712                     	;# 
  7559  0713                     	;# 
  7560  0714                     	;# 
  7561  0716                     	;# 
  7562  0717                     	;# 
  7563  0718                     	;# 
  7564  0719                     	;# 
  7565  071A                     	;# 
  7566  071B                     	;# 
  7567  071C                     	;# 
  7568  071D                     	;# 
  7569  071E                     	;# 
  7570  0796                     	;# 
  7571  0797                     	;# 
  7572  0798                     	;# 
  7573  0799                     	;# 
  7574  079A                     	;# 
  7575  079B                     	;# 
  7576  080C                     	;# 
  7577  080D                     	;# 
  7578  080E                     	;# 
  7579  080F                     	;# 
  7580  0810                     	;# 
  7581  0811                     	;# 
  7582  0812                     	;# 
  7583  0813                     	;# 
  7584  0814                     	;# 
  7585  081A                     	;# 
  7586  081B                     	;# 
  7587  081C                     	;# 
  7588  081D                     	;# 
  7589  081E                     	;# 
  7590  081F                     	;# 
  7591  088C                     	;# 
  7592  088D                     	;# 
  7593  088E                     	;# 
  7594  088F                     	;# 
  7595  0890                     	;# 
  7596  0891                     	;# 
  7597  0892                     	;# 
  7598  0893                     	;# 
  7599  0895                     	;# 
  7600  0896                     	;# 
  7601  0897                     	;# 
  7602  0898                     	;# 
  7603  0899                     	;# 
  7604  089A                     	;# 
  7605  089B                     	;# 
  7606  090C                     	;# 
  7607  090E                     	;# 
  7608  090F                     	;# 
  7609  091F                     	;# 
  7610  091F                     	;# 
  7611  098F                     	;# 
  7612  098F                     	;# 
  7613  0990                     	;# 
  7614  0991                     	;# 
  7615  0992                     	;# 
  7616  0993                     	;# 
  7617  0994                     	;# 
  7618  0995                     	;# 
  7619  0996                     	;# 
  7620  0997                     	;# 
  7621  0E0F                     	;# 
  7622  0E10                     	;# 
  7623  0E11                     	;# 
  7624  0E12                     	;# 
  7625  0E13                     	;# 
  7626  0E14                     	;# 
  7627  0E15                     	;# 
  7628  0E16                     	;# 
  7629  0E17                     	;# 
  7630  0E18                     	;# 
  7631  0E19                     	;# 
  7632  0E1A                     	;# 
  7633  0E1B                     	;# 
  7634  0E1C                     	;# 
  7635  0E1D                     	;# 
  7636  0E1E                     	;# 
  7637  0E1F                     	;# 
  7638  0E20                     	;# 
  7639  0E21                     	;# 
  7640  0E22                     	;# 
  7641  0E23                     	;# 
  7642  0E24                     	;# 
  7643  0E25                     	;# 
  7644  0E26                     	;# 
  7645  0E27                     	;# 
  7646  0E28                     	;# 
  7647  0E29                     	;# 
  7648  0E2A                     	;# 
  7649  0E2B                     	;# 
  7650  0E2C                     	;# 
  7651  0E2D                     	;# 
  7652  0E2E                     	;# 
  7653  0E2F                     	;# 
  7654  0E30                     	;# 
  7655  0E31                     	;# 
  7656  0E32                     	;# 
  7657  0E33                     	;# 
  7658  0E34                     	;# 
  7659  0E35                     	;# 
  7660  0E36                     	;# 
  7661  0E37                     	;# 
  7662  0E8F                     	;# 
  7663  0E90                     	;# 
  7664  0E91                     	;# 
  7665  0E92                     	;# 
  7666  0E93                     	;# 
  7667  0E94                     	;# 
  7668  0E95                     	;# 
  7669  0E96                     	;# 
  7670  0E97                     	;# 
  7671  0E9C                     	;# 
  7672  0E9D                     	;# 
  7673  0E9E                     	;# 
  7674  0EA1                     	;# 
  7675  0EA2                     	;# 
  7676  0EA3                     	;# 
  7677  0EA4                     	;# 
  7678  0EA5                     	;# 
  7679  0EA9                     	;# 
  7680  0EAA                     	;# 
  7681  0EAB                     	;# 
  7682  0EAC                     	;# 
  7683  0EB1                     	;# 
  7684  0EB2                     	;# 
  7685  0EB3                     	;# 
  7686  0EB8                     	;# 
  7687  0EB9                     	;# 
  7688  0EBA                     	;# 
  7689  0EBB                     	;# 
  7690  0EBC                     	;# 
  7691  0EBD                     	;# 
  7692  0EBE                     	;# 
  7693  0EC3                     	;# 
  7694  0EC5                     	;# 
  7695  0EC6                     	;# 
  7696  0EC7                     	;# 
  7697  0EC8                     	;# 
  7698  0EC9                     	;# 
  7699  0ECA                     	;# 
  7700  0ECB                     	;# 
  7701  0ECC                     	;# 
  7702  0F10                     	;# 
  7703  0F11                     	;# 
  7704  0F12                     	;# 
  7705  0F13                     	;# 
  7706  0F14                     	;# 
  7707  0F15                     	;# 
  7708  0F16                     	;# 
  7709  0F17                     	;# 
  7710  0F18                     	;# 
  7711  0F19                     	;# 
  7712  0F1A                     	;# 
  7713  0F1B                     	;# 
  7714  0F1C                     	;# 
  7715  0F1D                     	;# 
  7716  0F1E                     	;# 
  7717  0F1F                     	;# 
  7718  0F20                     	;# 
  7719  0F21                     	;# 
  7720  0F22                     	;# 
  7721  0F23                     	;# 
  7722  0F24                     	;# 
  7723  0F25                     	;# 
  7724  0F26                     	;# 
  7725  0F27                     	;# 
  7726  0F28                     	;# 
  7727  0F29                     	;# 
  7728  0F2A                     	;# 
  7729  0F2B                     	;# 
  7730  0F2C                     	;# 
  7731  0F2D                     	;# 
  7732  0F2E                     	;# 
  7733  0F2F                     	;# 
  7734  0F30                     	;# 
  7735  0F31                     	;# 
  7736  0F32                     	;# 
  7737  0F38                     	;# 
  7738  0F39                     	;# 
  7739  0F3A                     	;# 
  7740  0F3B                     	;# 
  7741  0F3C                     	;# 
  7742  0F3D                     	;# 
  7743  0F3E                     	;# 
  7744  0F3F                     	;# 
  7745  0F40                     	;# 
  7746  0F41                     	;# 
  7747  0F43                     	;# 
  7748  0F44                     	;# 
  7749  0F45                     	;# 
  7750  0F46                     	;# 
  7751  0F47                     	;# 
  7752  0F48                     	;# 
  7753  0F49                     	;# 
  7754  0F4A                     	;# 
  7755  0F4B                     	;# 
  7756  0F4C                     	;# 
  7757  0F4E                     	;# 
  7758  0F4F                     	;# 
  7759  0F50                     	;# 
  7760  0F51                     	;# 
  7761  0F52                     	;# 
  7762  0F53                     	;# 
  7763  0F54                     	;# 
  7764  0F55                     	;# 
  7765  0F56                     	;# 
  7766  0F57                     	;# 
  7767  0F59                     	;# 
  7768  0F5A                     	;# 
  7769  0F5B                     	;# 
  7770  0F5C                     	;# 
  7771  0F5D                     	;# 
  7772  0F61                     	;# 
  7773  0F62                     	;# 
  7774  0F64                     	;# 
  7775  0F65                     	;# 
  7776  0F66                     	;# 
  7777  0F67                     	;# 
  7778  0F68                     	;# 
  7779  0F69                     	;# 
  7780  0F6A                     	;# 
  7781  0F6B                     	;# 
  7782  0F6C                     	;# 
  7783  0F6D                     	;# 
  7784  0FE4                     	;# 
  7785  0FE5                     	;# 
  7786  0FE6                     	;# 
  7787  0FE7                     	;# 
  7788  0FE8                     	;# 
  7789  0FE9                     	;# 
  7790  0FEA                     	;# 
  7791  0FEB                     	;# 
  7792  0FED                     	;# 
  7793  0FEE                     	;# 
  7794  0FEF                     	;# 
  7795                           
  7796                           	psect	idataCOMMON
  7797  11DC                     __pidataCOMMON:
  7798                           
  7799                           ;initializer for _NREG
  7800  11DC  3419               	retlw	25
  7801                           
  7802                           	psect	idataBANK0
  7803  0002                     __pidataBANK0:
  7804                           
  7805                           ;initializer for _TALA
  7806  0002  3405               	retlw	5
  7807                           
  7808                           ;initializer for _PMON
  7809  0003  3403               	retlw	3
  7810                           
  7811                           	psect	idataBANK1
  7812  1238                     __pidataBANK1:
  7813                           
  7814                           ;initializer for _alarmPWMStart
  7815  1238  34FF               	retlw	255
  7816  1239  34FF               	retlw	255
  7817  123A  34FF               	retlw	255
  7818                           
  7819                           ;initializer for _prevLumLevel
  7820  123B  34FF               	retlw	255
  7821  123C  34FF               	retlw	255
  7822                           
  7823                           ;initializer for _prevTemp
  7824  123D  34FF               	retlw	255
  7825  123E  34FF               	retlw	255
  7826                           
  7827                           ;initializer for _updateLCD
  7828  123F  3401               	retlw	1
  7829                           
  7830                           	psect	stringtext1
  7831  1800                     __pstringtext1:
  7832  1800                     _commands:
  7833  1800  3428               	retlw	low _cmd_rc
  7834  1801  3415               	retlw	high _cmd_rc
  7835  1802  34C0               	retlw	192
  7836  1803  3482               	retlw	low _cmd_sc
  7837  1804  3417               	retlw	high _cmd_sc
  7838  1805  34C1               	retlw	193
  7839  1806  3458               	retlw	low _cmd_rtl
  7840  1807  3414               	retlw	high _cmd_rtl
  7841  1808  34C2               	retlw	194
  7842  1809  3479               	retlw	low _cmd_rp
  7843  180A  3414               	retlw	high _cmd_rp
  7844  180B  34C3               	retlw	195
  7845  180C  3421               	retlw	low _cmd_mmp
  7846  180D  3413               	retlw	high _cmd_mmp
  7847  180E  34C4               	retlw	196
  7848  180F  3438               	retlw	low _cmd_mta
  7849  1810  3413               	retlw	high _cmd_mta
  7850  1811  34C5               	retlw	197
  7851  1812  340A               	retlw	low _cmd_ra
  7852  1813  3417               	retlw	high _cmd_ra
  7853  1814  34C6               	retlw	198
  7854  1815  34C1               	retlw	low _cmd_dac
  7855  1816  3417               	retlw	high _cmd_dac
  7856  1817  34C7               	retlw	199
  7857  1818  3468               	retlw	low _cmd_dtl
  7858  1819  3416               	retlw	high _cmd_dtl
  7859  181A  34C8               	retlw	200
  7860  181B  34D2               	retlw	low _cmd_aa
  7861  181C  3416               	retlw	high _cmd_aa
  7862  181D  34C9               	retlw	201
  7863  181E  344D               	retlw	low _cmd_ir
  7864  181F  3415               	retlw	high _cmd_ir
  7865  1820  34CA               	retlw	202
  7866  1821  3475               	retlw	low _cmd_trc
  7867  1822  340C               	retlw	high _cmd_trc
  7868  1823  34CB               	retlw	203
  7869  1824  3484               	retlw	low _cmd_tri
  7870  1825  340B               	retlw	high _cmd_tri
  7871  1826  34CC               	retlw	204
  7872  1827                     __end_of_commands:
  7873                           
  7874                           	psect	stringtext2
  7875  1836                     __pstringtext2:
  7876  1836                     _dpowers:
  7877  1836  3401               	retlw	1
  7878  1837  3400               	retlw	0
  7879  1838  340A               	retlw	10
  7880  1839  3400               	retlw	0
  7881  183A  3464               	retlw	100
  7882  183B  3400               	retlw	0
  7883  183C  34E8               	retlw	232
  7884  183D  3403               	retlw	3
  7885  183E  3410               	retlw	16
  7886  183F  3427               	retlw	39
  7887  1840                     __end_of_dpowers:
  7888                           
  7889                           	psect	nvBANK1
  7890  00D8                     __pnvBANK1:
  7891  00D8                     _INT_InterruptHandler:
  7892  00D8                     	ds	2
  7893  00DA                     _TMR1_InterruptHandler:
  7894  00DA                     	ds	2
  7895  00DC                     _timer1ReloadVal:
  7896  00DC                     	ds	2
  7897  00DE                     _EUSART_RxDefaultInterruptHandler:
  7898  00DE                     	ds	2
  7899  00E0                     _EUSART_TxDefaultInterruptHandler:
  7900  00E0                     	ds	2
  7901  00E2                     _eusartTxBufferRemaining:
  7902  00E2                     	ds	1
  7903  0013                     _TRISCbits	set	19
  7904  000E                     _PORTCbits	set	14
  7905  0016                     _LATAbits	set	22
  7906  000B                     _INTCONbits	set	11
  7907  0014                     _TRISD	set	20
  7908  0013                     _TRISC	set	19
  7909  0012                     _TRISB	set	18
  7910  0011                     _TRISA	set	17
  7911  0015                     _TRISE	set	21
  7912  0018                     _LATC	set	24
  7913  0017                     _LATB	set	23
  7914  0016                     _LATA	set	22
  7915  0019                     _LATD	set	25
  7916  001A                     _LATE	set	26
  7917  0094                     _ADCON1bits	set	148
  7918  008E                     _ADPREVL	set	142
  7919  008F                     _ADPREVH	set	143
  7920  0097                     _ADSTATbits	set	151
  7921  0090                     _ADACCL	set	144
  7922  0091                     _ADACCH	set	145
  7923  0095                     _ADCON2bits	set	149
  7924  009C                     _ADPRE	set	156
  7925  0096                     _ADCON3bits	set	150
  7926  008C                     _ADRESL	set	140
  7927  008D                     _ADRESH	set	141
  7928  0093                     _ADCON0bits	set	147
  7929  009D                     _ADACQ	set	157
  7930  0093                     _ADCON0	set	147
  7931  0098                     _ADCLK	set	152
  7932  0099                     _ADACT	set	153
  7933  009A                     _ADREF	set	154
  7934  0097                     _ADSTAT	set	151
  7935  0096                     _ADCON3	set	150
  7936  0095                     _ADCON2	set	149
  7937  0094                     _ADCON1	set	148
  7938  009B                     _ADCAP	set	155
  7939  009E                     _ADPCH	set	158
  7940  0119                     _RC1REG	set	281
  7941  011D                     _RC1STAbits	set	285
  7942  011A                     _TX1REG	set	282
  7943  011E                     _TX1STAbits	set	286
  7944  011C                     _SP1BRGH	set	284
  7945  011B                     _SP1BRGL	set	283
  7946  011E                     _TX1STA	set	286
  7947  011D                     _RC1STA	set	285
  7948  011F                     _BAUD1CON	set	287
  7949  0116                     _ADERRL	set	278
  7950  0117                     _ADERRH	set	279
  7951  0114                     _ADFLTRL	set	276
  7952  0115                     _ADFLTRH	set	277
  7953  010C                     _ADCNT	set	268
  7954  010D                     _ADRPT	set	269
  7955  0113                     _ADSTPTH	set	275
  7956  0112                     _ADSTPTL	set	274
  7957  0111                     _ADUTHH	set	273
  7958  0110                     _ADUTHL	set	272
  7959  010F                     _ADLTHH	set	271
  7960  010E                     _ADLTHL	set	270
  7961  018E                     _SSP1MSK	set	398
  7962  018D                     _SSP1ADD	set	397
  7963  018F                     _SSP1STAT	set	399
  7964  0191                     _SSP1CON2	set	401
  7965  0190                     _SSP1CON1bits	set	400
  7966  018C                     _SSP1BUF	set	396
  7967  018F                     _SSP1STATbits	set	399
  7968  0191                     _SSP1CON2bits	set	401
  7969  0190                     _SSP1CON1	set	400
  7970  021F                     _CCPTMRS1bits	set	543
  7971  020F                     _T1GCONbits	set	527
  7972  020E                     _T1CONbits	set	526
  7973  020E                     _T1CON	set	526
  7974  020C                     _TMR1L	set	524
  7975  020D                     _TMR1H	set	525
  7976  0211                     _T1CLK	set	529
  7977  0210                     _T1GATE	set	528
  7978  020F                     _T1GCON	set	527
  7979  028D                     _PR2	set	653
  7980  028C                     _TMR2	set	652
  7981  028E                     _T2CONbits	set	654
  7982  0291                     _T2RSTbits	set	657
  7983  028F                     _T2HLTbits	set	655
  7984  028E                     _T2CON	set	654
  7985  028C                     _T2TMR	set	652
  7986  028D                     _T2PR	set	653
  7987  0291                     _T2RST	set	657
  7988  028F                     _T2HLT	set	655
  7989  0290                     _T2CLKCON	set	656
  7990  038C                     _PWM6DCL	set	908
  7991  038D                     _PWM6DCH	set	909
  7992  038E                     _PWM6CON	set	910
  7993  1C77                     _PWM6EN	set	7287
  7994  0710                     _PIR4bits	set	1808
  7995  071A                     _PIE4bits	set	1818
  7996  070C                     _PIR0bits	set	1804
  7997  0716                     _PIE0bits	set	1814
  7998  0719                     _PIE3bits	set	1817
  7999  070F                     _PIR3bits	set	1807
  8000  079B                     _PMD5	set	1947
  8001  079A                     _PMD4	set	1946
  8002  0799                     _PMD3	set	1945
  8003  0798                     _PMD2	set	1944
  8004  0797                     _PMD1	set	1943
  8005  0796                     _PMD0	set	1942
  8006  081F                     _NVMCON2	set	2079
  8007  081C                     _NVMDATL	set	2076
  8008  081D                     _NVMDATH	set	2077
  8009  081E                     _NVMCON1bits	set	2078
  8010  081B                     _NVMADRH	set	2075
  8011  081A                     _NVMADRL	set	2074
  8012  0892                     _OSCTUNE	set	2194
  8013  0893                     _OSCFRQ	set	2195
  8014  0891                     _OSCEN	set	2193
  8015  088F                     _OSCCON3	set	2191
  8016  088D                     _OSCCON1	set	2189
  8017  0EC6                     _SSP1DATPPS	set	3782
  8018  0EC5                     _SSP1CLKPPS	set	3781
  8019  0ECB                     _RXPPS	set	3787
  8020  0E90                     _INTPPS	set	3728
  8021  0F26                     _RC6PPS	set	3878
  8022  0F16                     _RA6PPS	set	3862
  8023  0F24                     _RC4PPS	set	3876
  8024  0F23                     _RC3PPS	set	3875
  8025  0F67                     _SLRCONE	set	3943
  8026  0F5C                     _SLRCOND	set	3932
  8027  0F51                     _SLRCONC	set	3921
  8028  0F46                     _SLRCONB	set	3910
  8029  0F3B                     _SLRCONA	set	3899
  8030  0F5B                     _ODCOND	set	3931
  8031  0F50                     _ODCONC	set	3920
  8032  0F45                     _ODCONB	set	3909
  8033  0F3A                     _ODCONA	set	3898
  8034  0F66                     _ODCONE	set	3942
  8035  0F4F                     _WPUC	set	3919
  8036  0F39                     _WPUA	set	3897
  8037  0F44                     _WPUB	set	3908
  8038  0F65                     _WPUE	set	3941
  8039  0F5A                     _WPUD	set	3930
  8040  0F38                     _ANSELA	set	3896
  8041  0F64                     _ANSELE	set	3940
  8042  0F43                     _ANSELB	set	3907
  8043  0F4E                     _ANSELC	set	3918
  8044  0F59                     _ANSELD	set	3929
  8045  7A7C                     _WPUC4	set	31356
  8046  7A7B                     _WPUC3	set	31355
  8047                           
  8048                           	psect	stringtext3
  8049  1827                     __pstringtext3:
  8050  1827                     STR_1:
  8051  1827  3425               	retlw	37	;'%'
  8052  1828  3430               	retlw	48	;'0'
  8053  1829  3432               	retlw	50	;'2'
  8054  182A  3464               	retlw	100	;'d'
  8055  182B  343A               	retlw	58	;':'
  8056  182C  3425               	retlw	37	;'%'
  8057  182D  3430               	retlw	48	;'0'
  8058  182E  3432               	retlw	50	;'2'
  8059  182F  3464               	retlw	100	;'d'
  8060  1830  343A               	retlw	58	;':'
  8061  1831  3425               	retlw	37	;'%'
  8062  1832  3430               	retlw	48	;'0'
  8063  1833  3432               	retlw	50	;'2'
  8064  1834  3464               	retlw	100	;'d'
  8065  1835  3400               	retlw	0
  8066                           
  8067                           	psect	stringtext4
  8068  1840                     __pstringtext4:
  8069  1840                     STR_3:
  8070  1840  3425               	retlw	37	;'%'
  8071  1841  3430               	retlw	48	;'0'
  8072  1842  3432               	retlw	50	;'2'
  8073  1843  3464               	retlw	100	;'d'
  8074  1844  3420               	retlw	32	;' '
  8075  1845  3443               	retlw	67	;'C'
  8076  1846  3400               	retlw	0
  8077                           
  8078                           	psect	stringtext5
  8079  1847                     __pstringtext5:
  8080  1847                     STR_5:
  8081  1847  344C               	retlw	76	;'L'
  8082  1848  3420               	retlw	32	;' '
  8083  1849  3425               	retlw	37	;'%'
  8084  184A  3464               	retlw	100	;'d'
  8085  184B  3400               	retlw	0
  8086                           
  8087                           	psect	stringtext6
  8088  184C                     __pstringtext6:
  8089  184C                     STR_7:
  8090  184C  3443               	retlw	67	;'C'
  8091  184D  3454               	retlw	84	;'T'
  8092  184E  344C               	retlw	76	;'L'
  8093  184F  3400               	retlw	0
  8094                           
  8095                           	psect	stringtext7
  8096  0000                     __pstringtext7:
  8097  1840                     
  8098                           	psect	cinit
  8099  0054                     start_initialization:	
  8100                           ; #config settings
  8101                           
  8102  0054                     __initialization:
  8103                           
  8104                           ; Initialize objects allocated to COMMON
  8105  0054  3191  21DC  3180   	fcall	__pidataCOMMON	;fetch initializer
  8106  0057  00FB               	movwf	__pdataCOMMON& (0+127)
  8107                           
  8108                           ; Initialize objects allocated to BANK0
  8109  0058  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
  8110  005B  00ED               	movwf	__pdataBANK0& (0+127)
  8111  005C  3180  2003  3180   	fcall	__pidataBANK0+1	;fetch initializer
  8112  005F  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  8113                           
  8114                           ; Initialize objects allocated to BANK1
  8115  0060  3038               	movlw	low __pidataBANK1
  8116  0061  0084               	movwf	4
  8117  0062  3092               	movlw	(high __pidataBANK1)| (0+128)
  8118  0063  0085               	movwf	5
  8119  0064  30E3               	movlw	low __pdataBANK1
  8120  0065  0086               	movwf	6
  8121  0066  3000               	movlw	high __pdataBANK1
  8122  0067  0087               	movwf	7
  8123  0068  3008               	movlw	8
  8124  0069  3192  2222  3180   	fcall	init_ram
  8125                           
  8126                           ; Clear objects allocated to COMMON
  8127  006C  01FA               	clrf	__pbssCOMMON& (0+127)
  8128                           
  8129                           ; Clear objects allocated to BANK0
  8130  006D  3055               	movlw	low __pbssBANK0
  8131  006E  0084               	movwf	4
  8132  006F  3000               	movlw	high __pbssBANK0
  8133  0070  0085               	movwf	5
  8134  0071  3018               	movlw	24
  8135  0072  3192  221C  3180   	fcall	clear_ram0
  8136                           
  8137                           ; Clear objects allocated to BANK1
  8138  0075  30C3               	movlw	low __pbssBANK1
  8139  0076  0084               	movwf	4
  8140  0077  3000               	movlw	high __pbssBANK1
  8141  0078  0085               	movwf	5
  8142  0079  3015               	movlw	21
  8143  007A  3192  221C  3180   	fcall	clear_ram0
  8144                           
  8145                           ; Clear objects allocated to BANK2
  8146  007D  3020               	movlw	low __pbssBANK2
  8147  007E  0084               	movwf	4
  8148  007F  3001               	movlw	high __pbssBANK2
  8149  0080  0085               	movwf	5
  8150  0081  3014               	movlw	20
  8151  0082  3192  221C  3180   	fcall	clear_ram0
  8152                           
  8153                           ; Clear objects allocated to BANK3
  8154  0085  30A0               	movlw	low __pbssBANK3
  8155  0086  0084               	movwf	4
  8156  0087  3001               	movlw	high __pbssBANK3
  8157  0088  0085               	movwf	5
  8158  0089  3040               	movlw	64
  8159  008A  3192  221C  3180   	fcall	clear_ram0
  8160                           
  8161                           ; Clear objects allocated to BANK4
  8162  008D  3020               	movlw	low __pbssBANK4
  8163  008E  0084               	movwf	4
  8164  008F  3002               	movlw	high __pbssBANK4
  8165  0090  0085               	movwf	5
  8166  0091  3040               	movlw	64
  8167  0092  3192  221C  3180   	fcall	clear_ram0
  8168  0095                     end_of_initialization:	
  8169                           ;End of C runtime variable initialization code
  8170                           
  8171  0095                     __end_of__initialization:
  8172  0095  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8173  0096  0020               	movlb	0
  8174  0097  3180  2899         	ljmp	_main	;jump to C main() function
  8175                           
  8176                           	psect	bssCOMMON
  8177  007A                     __pbssCOMMON:
  8178  007A                     _iwrite:
  8179  007A                     	ds	1
  8180                           
  8181                           	psect	dataCOMMON
  8182  007B                     __pdataCOMMON:
  8183  007B                     _NREG:
  8184  007B                     	ds	1
  8185                           
  8186                           	psect	bssBANK0
  8187  0055                     __pbssBANK0:
  8188  0055                     _clkAlarm:
  8189  0055                     	ds	4
  8190  0059                     _t:
  8191  0059                     	ds	3
  8192  005C                     _modeFlag:
  8193  005C                     	ds	2
  8194  005E                     _editingClockAlarm:
  8195  005E                     	ds	2
  8196  0060                     _nr:
  8197  0060                     	ds	1
  8198  0061                     _iread:
  8199  0061                     	ds	1
  8200  0062                     _PWM_on:
  8201  0062                     	ds	1
  8202  0063                     _editingLumAlarm:
  8203  0063                     	ds	1
  8204  0064                     _editingTempAlarm:
  8205  0064                     	ds	1
  8206  0065                     _lumLevel:
  8207  0065                     	ds	1
  8208  0066                     _temp:
  8209  0066                     	ds	1
  8210  0067                     _ALAF:
  8211  0067                     	ds	1
  8212  0068                     _eusartRxCount:
  8213  0068                     	ds	1
  8214  0069                     _eusartRxTail:
  8215  0069                     	ds	1
  8216  006A                     _eusartRxHead:
  8217  006A                     	ds	1
  8218  006B                     _eusartTxTail:
  8219  006B                     	ds	1
  8220  006C                     _eusartTxHead:
  8221  006C                     	ds	1
  8222                           
  8223                           	psect	dataBANK0
  8224  006D                     __pdataBANK0:
  8225  006D                     _TALA:
  8226  006D                     	ds	1
  8227  006E                     _PMON:
  8228  006E                     	ds	1
  8229                           
  8230                           	psect	bssBANK1
  8231  00C3                     __pbssBANK1:
  8232  00C3                     update_menuLCD@F12902:
  8233  00C3                     	ds	3
  8234  00C6                     _lumAlarm:
  8235  00C6                     	ds	3
  8236  00C9                     _tempAlarm:
  8237  00C9                     	ds	3
  8238  00CC                     _dimingLed:
  8239  00CC                     	ds	2
  8240  00CE                     _i2c1_driver_i2cISR:
  8241  00CE                     	ds	2
  8242  00D0                     _i2c1_driver_busCollisionISR:
  8243  00D0                     	ds	2
  8244  00D2                     _flagNr:
  8245  00D2                     	ds	1
  8246  00D3                     _writeEEPROM_flag:
  8247  00D3                     	ds	1
  8248  00D4                     _counterMonitorAux:
  8249  00D4                     	ds	1
  8250  00D5                     _monitor_TEMP_LUM:
  8251  00D5                     	ds	1
  8252  00D6                     _flagS1pushed:
  8253  00D6                     	ds	1
  8254  00D7                     _S1_Value:
  8255  00D7                     	ds	1
  8256                           
  8257                           	psect	dataBANK1
  8258  00E3                     __pdataBANK1:
  8259  00E3                     _alarmPWMStart:
  8260  00E3                     	ds	3
  8261  00E6                     _prevLumLevel:
  8262  00E6                     	ds	2
  8263  00E8                     _prevTemp:
  8264  00E8                     	ds	2
  8265  00EA                     _updateLCD:
  8266  00EA                     	ds	1
  8267                           
  8268                           	psect	bssBANK2
  8269  0120                     __pbssBANK2:
  8270  0120                     main@F13047:
  8271  0120                     	ds	20
  8272                           
  8273                           	psect	bssBANK3
  8274  01A0                     __pbssBANK3:
  8275  01A0                     _eusartTxBuffer:
  8276  01A0                     	ds	64
  8277                           
  8278                           	psect	bssBANK4
  8279  0220                     __pbssBANK4:
  8280  0220                     _eusartRxBuffer:
  8281  0220                     	ds	64
  8282                           
  8283                           	psect	inittext
  8284  1222                     init_ram:
  8285  1222  00FE               	movwf	btemp
  8286  1223                     initloop:
  8287  1223  0012               	moviw fsr0++
  8288  1224  001E               	movwi fsr1++
  8289  1225  0BFE               	decfsz	btemp,f
  8290  1226  2A23               	goto	initloop
  8291  1227  3400               	retlw	0
  8292                           
  8293                           	psect	clrtext
  8294  121C                     clear_ram0:	
  8295                           ;	Called with FSR0 containing the base address, and
  8296                           ;	WREG with the size to clear
  8297                           
  8298  121C  0064               	clrwdt	;clear the watchdog before getting into this loop
  8299  121D                     clrloop0:
  8300  121D  0180               	clrf	0	;clear RAM location pointed to by FSR
  8301  121E  3101               	addfsr 0,1
  8302  121F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8303  1220  2A1D               	goto	clrloop0	;have we reached the end yet?
  8304  1221  3400               	retlw	0	;all done for this memory range, return
  8305                           
  8306                           	psect	cstackBANK1
  8307  00A0                     __pcstackBANK1:
  8308  00A0                     ??_main:
  8309                           
  8310                           ; 1 bytes @ 0x0
  8311  00A0                     	ds	3
  8312  00A3                     main@buff:
  8313                           
  8314                           ; 20 bytes @ 0x3
  8315  00A3                     	ds	20
  8316  00B7                     _main$3496:
  8317                           
  8318                           ; 2 bytes @ 0x17
  8319  00B7                     	ds	2
  8320  00B9                     main@checkSumAux:
  8321                           
  8322                           ; 1 bytes @ 0x19
  8323  00B9                     	ds	1
  8324  00BA                     main@notInit:
  8325                           
  8326                           ; 1 bytes @ 0x1A
  8327  00BA                     	ds	1
  8328  00BB                     main@corrupted:
  8329                           
  8330                           ; 1 bytes @ 0x1B
  8331  00BB                     	ds	1
  8332  00BC                     main@i:
  8333                           
  8334                           ; 2 bytes @ 0x1C
  8335  00BC                     	ds	2
  8336  00BE                     main@c:
  8337                           
  8338                           ; 1 bytes @ 0x1E
  8339  00BE                     	ds	1
  8340  00BF                     main@i_2532:
  8341                           
  8342                           ; 2 bytes @ 0x1F
  8343  00BF                     	ds	2
  8344  00C1                     main@n:
  8345                           
  8346                           ; 2 bytes @ 0x21
  8347  00C1                     	ds	2
  8348                           
  8349                           	psect	cstackCOMMON
  8350  0070                     __pcstackCOMMON:
  8351  0070                     ?_isdigit:
  8352  0070                     ?_i2c1_driver_open:	
  8353                           ; 1 bit 
  8354                           
  8355  0070                     ?_PMD_Initialize:	
  8356                           ; 1 bit 
  8357                           
  8358  0070                     ?_OSCILLATOR_Initialize:	
  8359                           ; 1 bytes @ 0x0
  8360                           
  8361  0070                     ?_PWM6_Initialize:	
  8362                           ; 1 bytes @ 0x0
  8363                           
  8364  0070                     ?_ADCC_Initialize:	
  8365                           ; 1 bytes @ 0x0
  8366                           
  8367  0070                     ?_TMR2_Initialize:	
  8368                           ; 1 bytes @ 0x0
  8369                           
  8370  0070                     ?_TMR1_Initialize:	
  8371                           ; 1 bytes @ 0x0
  8372                           
  8373  0070                     ?_EXT_INT_Initialize:	
  8374                           ; 1 bytes @ 0x0
  8375                           
  8376  0070                     ?_EUSART_Initialize:	
  8377                           ; 1 bytes @ 0x0
  8378                           
  8379  0070                     ?_INT_ISR:	
  8380                           ; 1 bytes @ 0x0
  8381                           
  8382  0070                     ??_INT_ISR:	
  8383                           ; 1 bytes @ 0x0
  8384                           
  8385  0070                     ?_TMR1_ISR:	
  8386                           ; 1 bytes @ 0x0
  8387                           
  8388  0070                     ?_TMR1_DefaultInterruptHandler:	
  8389                           ; 1 bytes @ 0x0
  8390                           
  8391  0070                     ??_TMR1_DefaultInterruptHandler:	
  8392                           ; 1 bytes @ 0x0
  8393                           
  8394  0070                     ?_INT_CallBack:	
  8395                           ; 1 bytes @ 0x0
  8396                           
  8397  0070                     ??_INT_CallBack:	
  8398                           ; 1 bytes @ 0x0
  8399                           
  8400  0070                     ?_EUSART_Receive_ISR:	
  8401                           ; 1 bytes @ 0x0
  8402                           
  8403  0070                     ??_EUSART_Receive_ISR:	
  8404                           ; 1 bytes @ 0x0
  8405                           
  8406  0070                     ?_EUSART_Transmit_ISR:	
  8407                           ; 1 bytes @ 0x0
  8408                           
  8409  0070                     ??_EUSART_Transmit_ISR:	
  8410                           ; 1 bytes @ 0x0
  8411                           
  8412  0070                     ?_ReadI2C:	
  8413                           ; 1 bytes @ 0x0
  8414                           
  8415  0070                     ?_WriteI2C:	
  8416                           ; 1 bytes @ 0x0
  8417                           
  8418  0070                     ?_PIN_MANAGER_Initialize:	
  8419                           ; 1 bytes @ 0x0
  8420                           
  8421  0070                     ?_SYSTEM_Initialize:	
  8422                           ; 1 bytes @ 0x0
  8423                           
  8424  0070                     ?_INTERRUPT_InterruptManager:	
  8425                           ; 1 bytes @ 0x0
  8426                           
  8427  0070                     ?_TMR1_WriteTimer:	
  8428                           ; 1 bytes @ 0x0
  8429                           
  8430  0070                     ?_TMR2_Start:	
  8431                           ; 1 bytes @ 0x0
  8432                           
  8433  0070                     ?_TMR2_StartTimer:	
  8434                           ; 1 bytes @ 0x0
  8435                           
  8436  0070                     ?_TMR2_Stop:	
  8437                           ; 1 bytes @ 0x0
  8438                           
  8439  0070                     ?_TMR2_StopTimer:	
  8440                           ; 1 bytes @ 0x0
  8441                           
  8442  0070                     ?_INT_DefaultInterruptHandler:	
  8443                           ; 1 bytes @ 0x0
  8444                           
  8445  0070                     ??_INT_DefaultInterruptHandler:	
  8446                           ; 1 bytes @ 0x0
  8447                           
  8448  0070                     ?_EUSART_is_rx_ready:	
  8449                           ; 1 bytes @ 0x0
  8450                           
  8451  0070                     ?_EUSART_Read:	
  8452                           ; 1 bytes @ 0x0
  8453                           
  8454  0070                     ?_EUSART_Write:	
  8455                           ; 1 bytes @ 0x0
  8456                           
  8457  0070                     ?_getch:	
  8458                           ; 1 bytes @ 0x0
  8459                           
  8460  0070                     ?_putch:	
  8461                           ; 1 bytes @ 0x0
  8462                           
  8463  0070                     ?_tsttc:	
  8464                           ; 1 bytes @ 0x0
  8465                           
  8466  0070                     ?_LCDsend:	
  8467                           ; 1 bytes @ 0x0
  8468                           
  8469  0070                     ?_LCDinit:	
  8470                           ; 1 bytes @ 0x0
  8471                           
  8472  0070                     ?_LCDcmd:	
  8473                           ; 1 bytes @ 0x0
  8474                           
  8475  0070                     ?_LCDchar:	
  8476                           ; 1 bytes @ 0x0
  8477                           
  8478  0070                     ?_PWM_Output_D4_Enable:	
  8479                           ; 1 bytes @ 0x0
  8480                           
  8481  0070                     ?_PWM_Output_D4_Disable:	
  8482                           ; 1 bytes @ 0x0
  8483                           
  8484  0070                     ?_Clock_ISR:	
  8485                           ; 1 bytes @ 0x0
  8486                           
  8487  0070                     ??_Clock_ISR:	
  8488                           ; 1 bytes @ 0x0
  8489                           
  8490  0070                     ?_wirteEEPROMinit:	
  8491                           ; 1 bytes @ 0x0
  8492                           
  8493  0070                     ?_update_menuLCD:	
  8494                           ; 1 bytes @ 0x0
  8495                           
  8496  0070                     ?_monitoring_TEMP_LUM:	
  8497                           ; 1 bytes @ 0x0
  8498                           
  8499  0070                     ?_S1button:	
  8500                           ; 1 bytes @ 0x0
  8501                           
  8502  0070                     ?_checkFlags:	
  8503                           ; 1 bytes @ 0x0
  8504                           
  8505  0070                     ?_editClock:	
  8506                           ; 1 bytes @ 0x0
  8507                           
  8508  0070                     ?_editTemp:	
  8509                           ; 1 bytes @ 0x0
  8510                           
  8511  0070                     ?_editLum:	
  8512                           ; 1 bytes @ 0x0
  8513                           
  8514  0070                     ?_toggleAlarms:	
  8515                           ; 1 bytes @ 0x0
  8516                           
  8517  0070                     ?_S1_ISR:	
  8518                           ; 1 bytes @ 0x0
  8519                           
  8520  0070                     ??_S1_ISR:	
  8521                           ; 1 bytes @ 0x0
  8522                           
  8523  0070                     ?_sendOKMessage:	
  8524                           ; 1 bytes @ 0x0
  8525                           
  8526  0070                     ?_sendERRORMessage:	
  8527                           ; 1 bytes @ 0x0
  8528                           
  8529  0070                     ?_main:	
  8530                           ; 1 bytes @ 0x0
  8531                           
  8532  0070                     TMR1_WriteTimer@timerVal:	
  8533                           ; 1 bytes @ 0x0
  8534                           
  8535                           
  8536                           ; 2 bytes @ 0x0
  8537  0070                     	ds	2
  8538  0072                     ??_PMD_Initialize:
  8539  0072                     ??_OSCILLATOR_Initialize:	
  8540                           ; 1 bytes @ 0x2
  8541                           
  8542  0072                     ??_PWM6_Initialize:	
  8543                           ; 1 bytes @ 0x2
  8544                           
  8545  0072                     ??_ADCC_Initialize:	
  8546                           ; 1 bytes @ 0x2
  8547                           
  8548  0072                     ??_TMR2_Initialize:	
  8549                           ; 1 bytes @ 0x2
  8550                           
  8551  0072                     ??_TMR1_ISR:	
  8552                           ; 1 bytes @ 0x2
  8553                           
  8554  0072                     ?_TMR1_SetInterruptHandler:	
  8555                           ; 1 bytes @ 0x2
  8556                           
  8557  0072                     ?_EUSART_SetRxInterruptHandler:	
  8558                           ; 1 bytes @ 0x2
  8559                           
  8560  0072                     ?_EUSART_SetTxInterruptHandler:	
  8561                           ; 1 bytes @ 0x2
  8562                           
  8563  0072                     ?_memset:	
  8564                           ; 1 bytes @ 0x2
  8565                           
  8566  0072                     ??_isdigit:	
  8567                           ; 1 bytes @ 0x2
  8568                           
  8569  0072                     ??_ReadI2C:	
  8570                           ; 1 bytes @ 0x2
  8571                           
  8572  0072                     ??_WriteI2C:	
  8573                           ; 1 bytes @ 0x2
  8574                           
  8575  0072                     ??_PIN_MANAGER_Initialize:	
  8576                           ; 1 bytes @ 0x2
  8577                           
  8578  0072                     ??_i2c1_driver_open:	
  8579                           ; 1 bytes @ 0x2
  8580                           
  8581  0072                     ??_INTERRUPT_InterruptManager:	
  8582                           ; 1 bytes @ 0x2
  8583                           
  8584  0072                     ??_TMR1_WriteTimer:	
  8585                           ; 1 bytes @ 0x2
  8586                           
  8587  0072                     ?_PWM6_LoadDutyValue:	
  8588                           ; 1 bytes @ 0x2
  8589                           
  8590  0072                     ??_TMR2_Start:	
  8591                           ; 1 bytes @ 0x2
  8592                           
  8593  0072                     ??_TMR2_StartTimer:	
  8594                           ; 1 bytes @ 0x2
  8595                           
  8596  0072                     ??_TMR2_Stop:	
  8597                           ; 1 bytes @ 0x2
  8598                           
  8599  0072                     ??_TMR2_StopTimer:	
  8600                           ; 1 bytes @ 0x2
  8601                           
  8602  0072                     ?_INT_SetInterruptHandler:	
  8603                           ; 1 bytes @ 0x2
  8604                           
  8605  0072                     ??_EUSART_is_rx_ready:	
  8606                           ; 1 bytes @ 0x2
  8607                           
  8608  0072                     ??_EUSART_Read:	
  8609                           ; 1 bytes @ 0x2
  8610                           
  8611  0072                     ??_EUSART_Write:	
  8612                           ; 1 bytes @ 0x2
  8613                           
  8614  0072                     ?_differenceBetweenTimePeriod:	
  8615                           ; 1 bytes @ 0x2
  8616                           
  8617  0072                     ??_PWM_Output_D4_Enable:	
  8618                           ; 1 bytes @ 0x2
  8619                           
  8620  0072                     ??_PWM_Output_D4_Disable:	
  8621                           ; 1 bytes @ 0x2
  8622                           
  8623  0072                     ??_S1button:	
  8624                           ; 1 bytes @ 0x2
  8625                           
  8626  0072                     ?_ADCC_GetSingleConversion:	
  8627                           ; 1 bytes @ 0x2
  8628                           
  8629  0072                     ?___wmul:	
  8630                           ; 2 bytes @ 0x2
  8631                           
  8632  0072                     ?___lwdiv:	
  8633                           ; 2 bytes @ 0x2
  8634                           
  8635  0072                     _isdigit$2990:	
  8636                           ; 2 bytes @ 0x2
  8637                           
  8638  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  8639                           ; 1 bytes @ 0x2
  8640                           
  8641  0072                     PWM6_LoadDutyValue@dutyValue:	
  8642                           ; 2 bytes @ 0x2
  8643                           
  8644  0072                     INT_SetInterruptHandler@InterruptHandler:	
  8645                           ; 2 bytes @ 0x2
  8646                           
  8647  0072                     EUSART_SetTxInterruptHandler@interruptHandler:	
  8648                           ; 2 bytes @ 0x2
  8649                           
  8650  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  8651                           ; 2 bytes @ 0x2
  8652                           
  8653  0072                     ___wmul@multiplier:	
  8654                           ; 2 bytes @ 0x2
  8655                           
  8656  0072                     ___lwdiv@divisor:	
  8657                           ; 2 bytes @ 0x2
  8658                           
  8659  0072                     memset@c:	
  8660                           ; 2 bytes @ 0x2
  8661                           
  8662  0072                     differenceBetweenTimePeriod@start:	
  8663                           ; 2 bytes @ 0x2
  8664                           
  8665                           
  8666                           ; 3 bytes @ 0x2
  8667  0072                     	ds	1
  8668  0073                     WriteI2C@data_out:
  8669  0073                     EUSART_Read@readValue:	
  8670                           ; 1 bytes @ 0x3
  8671                           
  8672  0073                     EUSART_Write@txData:	
  8673                           ; 1 bytes @ 0x3
  8674                           
  8675  0073                     isdigit@c:	
  8676                           ; 1 bytes @ 0x3
  8677                           
  8678                           
  8679                           ; 1 bytes @ 0x3
  8680  0073                     	ds	1
  8681  0074                     ??_TMR1_Initialize:
  8682  0074                     ??_EXT_INT_Initialize:	
  8683                           ; 1 bytes @ 0x4
  8684                           
  8685  0074                     ??_EUSART_Initialize:	
  8686                           ; 1 bytes @ 0x4
  8687                           
  8688  0074                     ??_TMR1_SetInterruptHandler:	
  8689                           ; 1 bytes @ 0x4
  8690                           
  8691  0074                     ??_EUSART_SetRxInterruptHandler:	
  8692                           ; 1 bytes @ 0x4
  8693                           
  8694  0074                     ??_EUSART_SetTxInterruptHandler:	
  8695                           ; 1 bytes @ 0x4
  8696                           
  8697  0074                     ??_PWM6_LoadDutyValue:	
  8698                           ; 1 bytes @ 0x4
  8699                           
  8700  0074                     ??_INT_SetInterruptHandler:	
  8701                           ; 1 bytes @ 0x4
  8702                           
  8703  0074                     ??_getch:	
  8704                           ; 1 bytes @ 0x4
  8705                           
  8706  0074                     ??_putch:	
  8707                           ; 1 bytes @ 0x4
  8708                           
  8709  0074                     ??_tsttc:	
  8710                           ; 1 bytes @ 0x4
  8711                           
  8712  0074                     ??_LCDsend:	
  8713                           ; 1 bytes @ 0x4
  8714                           
  8715  0074                     ?_LCDsend2x4:	
  8716                           ; 1 bytes @ 0x4
  8717                           
  8718  0074                     putch@txData:	
  8719                           ; 1 bytes @ 0x4
  8720                           
  8721  0074                     LCDsend2x4@mode:	
  8722                           ; 1 bytes @ 0x4
  8723                           
  8724  0074                     ___wmul@multiplicand:	
  8725                           ; 1 bytes @ 0x4
  8726                           
  8727  0074                     ___lwdiv@dividend:	
  8728                           ; 2 bytes @ 0x4
  8729                           
  8730  0074                     memset@n:	
  8731                           ; 2 bytes @ 0x4
  8732                           
  8733                           
  8734                           ; 2 bytes @ 0x4
  8735  0074                     	ds	1
  8736  0075                     ??_SYSTEM_Initialize:
  8737  0075                     ??_ADCC_GetSingleConversion:	
  8738                           ; 1 bytes @ 0x5
  8739                           
  8740  0075                     ??_LCDsend2x4:	
  8741                           ; 1 bytes @ 0x5
  8742                           
  8743  0075                     ?_sendMessage:	
  8744                           ; 1 bytes @ 0x5
  8745                           
  8746  0075                     ADCC_GetSingleConversion@channel:	
  8747                           ; 1 bytes @ 0x5
  8748                           
  8749  0075                     tsttc@value:	
  8750                           ; 1 bytes @ 0x5
  8751                           
  8752  0075                     LCDsend@c:	
  8753                           ; 1 bytes @ 0x5
  8754                           
  8755  0075                     sendMessage@num:	
  8756                           ; 1 bytes @ 0x5
  8757                           
  8758  0075                     differenceBetweenTimePeriod@stop:	
  8759                           ; 2 bytes @ 0x5
  8760                           
  8761                           
  8762                           ; 3 bytes @ 0x5
  8763  0075                     	ds	1
  8764  0076                     ??_memset:
  8765  0076                     ??___wmul:	
  8766                           ; 1 bytes @ 0x6
  8767                           
  8768  0076                     ??___lwdiv:	
  8769                           ; 1 bytes @ 0x6
  8770                           
  8771  0076                     ___wmul@product:	
  8772                           ; 1 bytes @ 0x6
  8773                           
  8774                           
  8775                           ; 2 bytes @ 0x6
  8776  0076                     	ds	1
  8777  0077                     LCDsend2x4@c:
  8778  0077                     sendMessage@buffer:	
  8779                           ; 1 bytes @ 0x7
  8780                           
  8781  0077                     memset@p:	
  8782                           ; 1 bytes @ 0x7
  8783                           
  8784  0077                     ___lwdiv@quotient:	
  8785                           ; 1 bytes @ 0x7
  8786                           
  8787                           
  8788                           ; 2 bytes @ 0x7
  8789  0077                     	ds	1
  8790  0078                     ??_DATAEE_WriteByte:
  8791  0078                     ?_DATAEE_ReadByte:	
  8792                           ; 1 bytes @ 0x8
  8793                           
  8794  0078                     ??_sendMessage:	
  8795                           ; 1 bytes @ 0x8
  8796                           
  8797  0078                     DATAEE_WriteByte@GIEBitValue:	
  8798                           ; 1 bytes @ 0x8
  8799                           
  8800  0078                     LCDsend2x4@hc:	
  8801                           ; 1 bytes @ 0x8
  8802                           
  8803  0078                     differenceBetweenTimePeriod@diff:	
  8804                           ; 1 bytes @ 0x8
  8805                           
  8806  0078                     memset@p1:	
  8807                           ; 1 bytes @ 0x8
  8808                           
  8809  0078                     DATAEE_ReadByte@bAdd:	
  8810                           ; 1 bytes @ 0x8
  8811                           
  8812                           
  8813                           ; 2 bytes @ 0x8
  8814  0078                     	ds	1
  8815  0079                     ??_differenceBetweenTimePeriod:
  8816  0079                     ??_wirteEEPROMinit:	
  8817                           ; 1 bytes @ 0x9
  8818                           
  8819  0079                     ??_sendOKMessage:	
  8820                           ; 1 bytes @ 0x9
  8821                           
  8822  0079                     ??_sendERRORMessage:	
  8823                           ; 1 bytes @ 0x9
  8824                           
  8825  0079                     LCDsend2x4@lc:	
  8826                           ; 1 bytes @ 0x9
  8827                           
  8828  0079                     ___lwdiv@counter:	
  8829                           ; 1 bytes @ 0x9
  8830                           
  8831                           
  8832                           ; 1 bytes @ 0x9
  8833  0079                     	ds	1
  8834  007A                     ??_cmd_mmp:
  8835  007A                     ??_cmd_mta:	
  8836                           ; 1 bytes @ 0xA
  8837                           
  8838  007A                     ??_cmd_dtl:	
  8839                           ; 1 bytes @ 0xA
  8840                           
  8841  007A                     ??_DATAEE_ReadByte:	
  8842                           ; 1 bytes @ 0xA
  8843                           
  8844  007A                     ??_LCDcmd:	
  8845                           ; 1 bytes @ 0xA
  8846                           
  8847  007A                     ??_LCDchar:	
  8848                           ; 1 bytes @ 0xA
  8849                           
  8850                           
  8851                           	psect	cstackBANK0
  8852  0020                     __pcstackBANK0:	
  8853                           ; 1 bytes @ 0xA
  8854                           
  8855  0020                     ?_DATAEE_WriteByte:
  8856  0020                     ??_LCDinit:	
  8857                           ; 1 bytes @ 0x0
  8858                           
  8859  0020                     ?___lwmod:	
  8860                           ; 1 bytes @ 0x0
  8861                           
  8862  0020                     LCDcmd@c:	
  8863                           ; 2 bytes @ 0x0
  8864                           
  8865  0020                     LCDchar@c:	
  8866                           ; 1 bytes @ 0x0
  8867                           
  8868  0020                     DATAEE_WriteByte@bAdd:	
  8869                           ; 1 bytes @ 0x0
  8870                           
  8871  0020                     sendMessage@n:	
  8872                           ; 2 bytes @ 0x0
  8873                           
  8874  0020                     ___lwmod@divisor:	
  8875                           ; 2 bytes @ 0x0
  8876                           
  8877                           
  8878                           ; 2 bytes @ 0x0
  8879  0020                     	ds	1
  8880  0021                     ?_LCDstr:
  8881  0021                     LCDstr@p:	
  8882                           ; 1 bytes @ 0x1
  8883                           
  8884                           
  8885                           ; 2 bytes @ 0x1
  8886  0021                     	ds	1
  8887  0022                     DATAEE_WriteByte@bData:
  8888  0022                     sendOKMessage@cmd:	
  8889                           ; 1 bytes @ 0x2
  8890                           
  8891  0022                     sendERRORMessage@cmd:	
  8892                           ; 1 bytes @ 0x2
  8893                           
  8894  0022                     ___lwmod@dividend:	
  8895                           ; 1 bytes @ 0x2
  8896                           
  8897                           
  8898                           ; 2 bytes @ 0x2
  8899  0022                     	ds	1
  8900  0023                     ??_LCDstr:
  8901  0023                     ??_monitoring_TEMP_LUM:	
  8902                           ; 1 bytes @ 0x3
  8903                           
  8904  0023                     sendOKMessage@bufw:	
  8905                           ; 1 bytes @ 0x3
  8906                           
  8907  0023                     sendERRORMessage@bufw:	
  8908                           ; 4 bytes @ 0x3
  8909                           
  8910                           
  8911                           ; 4 bytes @ 0x3
  8912  0023                     	ds	1
  8913  0024                     ??___lwmod:
  8914                           
  8915                           ; 1 bytes @ 0x4
  8916  0024                     	ds	1
  8917  0025                     ___lwmod@counter:
  8918                           
  8919                           ; 1 bytes @ 0x5
  8920  0025                     	ds	1
  8921  0026                     ?_sprintf:
  8922  0026                     LCDstr@c:	
  8923                           ; 2 bytes @ 0x6
  8924                           
  8925  0026                     sprintf@f:	
  8926                           ; 1 bytes @ 0x6
  8927                           
  8928                           
  8929                           ; 2 bytes @ 0x6
  8930  0026                     	ds	1
  8931  0027                     ?_cmd_rc:
  8932  0027                     ?_cmd_sc:	
  8933                           ; 1 bytes @ 0x7
  8934                           
  8935  0027                     ?_cmd_rtl:	
  8936                           ; 1 bytes @ 0x7
  8937                           
  8938  0027                     ?_cmd_rp:	
  8939                           ; 1 bytes @ 0x7
  8940                           
  8941  0027                     ?_cmd_mmp:	
  8942                           ; 1 bytes @ 0x7
  8943                           
  8944  0027                     ?_cmd_mta:	
  8945                           ; 1 bytes @ 0x7
  8946                           
  8947  0027                     ?_cmd_ra:	
  8948                           ; 1 bytes @ 0x7
  8949                           
  8950  0027                     ?_cmd_dac:	
  8951                           ; 1 bytes @ 0x7
  8952                           
  8953  0027                     ?_cmd_dtl:	
  8954                           ; 1 bytes @ 0x7
  8955                           
  8956  0027                     ?_cmd_aa:	
  8957                           ; 1 bytes @ 0x7
  8958                           
  8959  0027                     ?_cmd_ir:	
  8960                           ; 1 bytes @ 0x7
  8961                           
  8962  0027                     ?_cmd_trc:	
  8963                           ; 1 bytes @ 0x7
  8964                           
  8965  0027                     ?_cmd_tri:	
  8966                           ; 1 bytes @ 0x7
  8967                           
  8968  0027                     cmd_rc@num:	
  8969                           ; 1 bytes @ 0x7
  8970                           
  8971  0027                     cmd_sc@num:	
  8972                           ; 2 bytes @ 0x7
  8973                           
  8974  0027                     cmd_rtl@num:	
  8975                           ; 2 bytes @ 0x7
  8976                           
  8977  0027                     cmd_rp@num:	
  8978                           ; 2 bytes @ 0x7
  8979                           
  8980  0027                     cmd_mmp@num:	
  8981                           ; 2 bytes @ 0x7
  8982                           
  8983  0027                     cmd_mta@num:	
  8984                           ; 2 bytes @ 0x7
  8985                           
  8986  0027                     cmd_ra@num:	
  8987                           ; 2 bytes @ 0x7
  8988                           
  8989  0027                     cmd_dac@num:	
  8990                           ; 2 bytes @ 0x7
  8991                           
  8992  0027                     cmd_dtl@num:	
  8993                           ; 2 bytes @ 0x7
  8994                           
  8995  0027                     cmd_aa@num:	
  8996                           ; 2 bytes @ 0x7
  8997                           
  8998  0027                     cmd_ir@num:	
  8999                           ; 2 bytes @ 0x7
  9000                           
  9001  0027                     cmd_trc@num:	
  9002                           ; 2 bytes @ 0x7
  9003                           
  9004  0027                     cmd_tri@num:	
  9005                           ; 2 bytes @ 0x7
  9006                           
  9007                           
  9008                           ; 2 bytes @ 0x7
  9009  0027                     	ds	2
  9010  0029                     cmd_rc@buffer:
  9011  0029                     cmd_sc@buffer:	
  9012                           ; 1 bytes @ 0x9
  9013                           
  9014  0029                     cmd_rtl@buffer:	
  9015                           ; 1 bytes @ 0x9
  9016                           
  9017  0029                     cmd_rp@buffer:	
  9018                           ; 1 bytes @ 0x9
  9019                           
  9020  0029                     cmd_mmp@buffer:	
  9021                           ; 1 bytes @ 0x9
  9022                           
  9023  0029                     cmd_mta@buffer:	
  9024                           ; 1 bytes @ 0x9
  9025                           
  9026  0029                     cmd_ra@buffer:	
  9027                           ; 1 bytes @ 0x9
  9028                           
  9029  0029                     cmd_dac@buffer:	
  9030                           ; 1 bytes @ 0x9
  9031                           
  9032  0029                     cmd_dtl@buffer:	
  9033                           ; 1 bytes @ 0x9
  9034                           
  9035  0029                     cmd_aa@buffer:	
  9036                           ; 1 bytes @ 0x9
  9037                           
  9038  0029                     cmd_ir@buffer:	
  9039                           ; 1 bytes @ 0x9
  9040                           
  9041  0029                     cmd_trc@buffer:	
  9042                           ; 1 bytes @ 0x9
  9043                           
  9044  0029                     cmd_tri@buffer:	
  9045                           ; 1 bytes @ 0x9
  9046                           
  9047                           
  9048                           ; 1 bytes @ 0x9
  9049  0029                     	ds	1
  9050  002A                     ??_cmd_rc:
  9051  002A                     ??_cmd_sc:	
  9052                           ; 1 bytes @ 0xA
  9053                           
  9054  002A                     ??_cmd_rtl:	
  9055                           ; 1 bytes @ 0xA
  9056                           
  9057  002A                     ??_cmd_rp:	
  9058                           ; 1 bytes @ 0xA
  9059                           
  9060  002A                     ??_cmd_ra:	
  9061                           ; 1 bytes @ 0xA
  9062                           
  9063  002A                     ??_cmd_dac:	
  9064                           ; 1 bytes @ 0xA
  9065                           
  9066  002A                     ??_cmd_aa:	
  9067                           ; 1 bytes @ 0xA
  9068                           
  9069  002A                     ??_cmd_ir:	
  9070                           ; 1 bytes @ 0xA
  9071                           
  9072  002A                     ??_cmd_trc:	
  9073                           ; 1 bytes @ 0xA
  9074                           
  9075  002A                     ??_cmd_tri:	
  9076                           ; 1 bytes @ 0xA
  9077                           
  9078  002A                     cmd_dtl@tempAux:	
  9079                           ; 1 bytes @ 0xA
  9080                           
  9081                           
  9082                           ; 1 bytes @ 0xA
  9083  002A                     	ds	1
  9084  002B                     cmd_sc@h:
  9085  002B                     cmd_dac@h:	
  9086                           ; 1 bytes @ 0xB
  9087                           
  9088  002B                     cmd_dtl@lumAux:	
  9089                           ; 1 bytes @ 0xB
  9090                           
  9091  002B                     cmd_rtl@buff:	
  9092                           ; 1 bytes @ 0xB
  9093                           
  9094  002B                     cmd_rp@buff:	
  9095                           ; 5 bytes @ 0xB
  9096                           
  9097  002B                     cmd_rc@buff:	
  9098                           ; 5 bytes @ 0xB
  9099                           
  9100  002B                     cmd_ir@buff:	
  9101                           ; 6 bytes @ 0xB
  9102                           
  9103  002B                     cmd_ra@buff:	
  9104                           ; 7 bytes @ 0xB
  9105                           
  9106                           
  9107                           ; 9 bytes @ 0xB
  9108  002B                     	ds	1
  9109  002C                     cmd_sc@m:
  9110  002C                     cmd_dac@m:	
  9111                           ; 1 bytes @ 0xC
  9112                           
  9113                           
  9114                           ; 1 bytes @ 0xC
  9115  002C                     	ds	1
  9116  002D                     cmd_sc@s:
  9117  002D                     cmd_dac@s:	
  9118                           ; 1 bytes @ 0xD
  9119                           
  9120                           
  9121                           ; 1 bytes @ 0xD
  9122  002D                     	ds	1
  9123  002E                     ??_sprintf:
  9124                           
  9125                           ; 1 bytes @ 0xE
  9126  002E                     	ds	1
  9127  002F                     cmd_tri@buffData:
  9128                           
  9129                           ; 5 bytes @ 0xF
  9130  002F                     	ds	1
  9131  0030                     cmd_trc@buffData:
  9132                           
  9133                           ; 5 bytes @ 0x10
  9134  0030                     	ds	2
  9135  0032                     sprintf@ap:
  9136                           
  9137                           ; 1 bytes @ 0x12
  9138  0032                     	ds	1
  9139  0033                     sprintf@prec:
  9140                           
  9141                           ; 1 bytes @ 0x13
  9142  0033                     	ds	1
  9143  0034                     sprintf@val:
  9144  0034                     cmd_tri@buffInit:	
  9145                           ; 2 bytes @ 0x14
  9146                           
  9147                           
  9148                           ; 4 bytes @ 0x14
  9149  0034                     	ds	1
  9150  0035                     cmd_trc@buffInit:
  9151                           
  9152                           ; 3 bytes @ 0x15
  9153  0035                     	ds	1
  9154  0036                     sprintf@flag:
  9155                           
  9156                           ; 1 bytes @ 0x16
  9157  0036                     	ds	1
  9158  0037                     sprintf@width:
  9159                           
  9160                           ; 2 bytes @ 0x17
  9161  0037                     	ds	1
  9162  0038                     cmd_tri@buffEOM:
  9163  0038                     cmd_trc@i:	
  9164                           ; 1 bytes @ 0x18
  9165                           
  9166                           
  9167                           ; 2 bytes @ 0x18
  9168  0038                     	ds	1
  9169  0039                     cmd_tri@maxReadings:
  9170  0039                     sprintf@c:	
  9171                           ; 1 bytes @ 0x19
  9172                           
  9173                           
  9174                           ; 1 bytes @ 0x19
  9175  0039                     	ds	1
  9176  003A                     sprintf@sp:
  9177  003A                     cmd_trc@address:	
  9178                           ; 1 bytes @ 0x1A
  9179                           
  9180  003A                     cmd_tri@i:	
  9181                           ; 2 bytes @ 0x1A
  9182                           
  9183                           
  9184                           ; 2 bytes @ 0x1A
  9185  003A                     	ds	1
  9186  003B                     ??_update_menuLCD:
  9187                           
  9188                           ; 1 bytes @ 0x1B
  9189  003B                     	ds	1
  9190  003C                     cmd_trc@buffEOM:
  9191  003C                     cmd_tri@index:	
  9192                           ; 1 bytes @ 0x1C
  9193                           
  9194                           
  9195                           ; 1 bytes @ 0x1C
  9196  003C                     	ds	1
  9197  003D                     cmd_tri@n:
  9198  003D                     cmd_trc@maxReadings:	
  9199                           ; 1 bytes @ 0x1D
  9200                           
  9201                           
  9202                           ; 2 bytes @ 0x1D
  9203  003D                     	ds	1
  9204  003E                     cmd_tri@j:
  9205                           
  9206                           ; 1 bytes @ 0x1E
  9207  003E                     	ds	1
  9208  003F                     cmd_tri@startingIndex:
  9209  003F                     cmd_trc@n:	
  9210                           ; 1 bytes @ 0x1F
  9211                           
  9212                           
  9213                           ; 2 bytes @ 0x1F
  9214  003F                     	ds	2
  9215  0041                     cmd_trc@j:
  9216  0041                     update_menuLCD@str:	
  9217                           ; 1 bytes @ 0x21
  9218                           
  9219                           
  9220                           ; 8 bytes @ 0x21
  9221  0041                     	ds	8
  9222  0049                     update_menuLCD@tt:
  9223                           
  9224                           ; 4 bytes @ 0x29
  9225  0049                     	ds	4
  9226  004D                     update_menuLCD@l:
  9227                           
  9228                           ; 3 bytes @ 0x2D
  9229  004D                     	ds	3
  9230  0050                     update_menuLCD@diff:
  9231                           
  9232                           ; 3 bytes @ 0x30
  9233  0050                     	ds	3
  9234  0053                     ??_checkFlags:
  9235                           
  9236                           ; 1 bytes @ 0x33
  9237  0053                     	ds	1
  9238  0054                     ??_editClock:
  9239  0054                     ??_editTemp:	
  9240                           ; 1 bytes @ 0x34
  9241                           
  9242  0054                     ??_editLum:	
  9243                           ; 1 bytes @ 0x34
  9244                           
  9245  0054                     ??_toggleAlarms:	
  9246                           ; 1 bytes @ 0x34
  9247                           
  9248                           
  9249                           ; 1 bytes @ 0x34
  9250  0054                     	ds	1
  9251                           
  9252                           	psect	maintext
  9253  0099                     __pmaintext:	
  9254 ;;
  9255 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  9256 ;;
  9257 ;; *************** function _main *****************
  9258 ;; Defined at:
  9259 ;;		line 1079 in file "main.c"
  9260 ;; Parameters:    Size  Location     Type
  9261 ;;		None
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;  i               2   28[BANK1 ] int 
  9264 ;;  buff           20    3[BANK1 ] unsigned char [20]
  9265 ;;  n               2   33[BANK1 ] int 
  9266 ;;  i               2   31[BANK1 ] int 
  9267 ;;  c               1   30[BANK1 ] unsigned char 
  9268 ;;  corrupted       1   27[BANK1 ] unsigned char 
  9269 ;;  notInit         1   26[BANK1 ] unsigned char 
  9270 ;;  checkSumAux     1   25[BANK1 ] unsigned char 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;                  1    wreg      void 
  9273 ;; Registers used:
  9274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9275 ;; Tracked objects:
  9276 ;;		On entry : B1F/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Locals:         0       0      32       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;Total ram usage:       35 bytes
  9285 ;; Hardware stack levels required when called:   11
  9286 ;; This function calls:
  9287 ;;		_DATAEE_ReadByte
  9288 ;;		_DATAEE_WriteByte
  9289 ;;		_EUSART_is_rx_ready
  9290 ;;		_INT_SetInterruptHandler
  9291 ;;		_LCDinit
  9292 ;;		_PWM6_LoadDutyValue
  9293 ;;		_PWM_Output_D4_Disable
  9294 ;;		_SYSTEM_Initialize
  9295 ;;		_TMR1_SetInterruptHandler
  9296 ;;		_TMR2_StopTimer
  9297 ;;		___wmul
  9298 ;;		_checkFlags
  9299 ;;		_cmd_aa
  9300 ;;		_cmd_dac
  9301 ;;		_cmd_dtl
  9302 ;;		_cmd_ir
  9303 ;;		_cmd_mmp
  9304 ;;		_cmd_mta
  9305 ;;		_cmd_ra
  9306 ;;		_cmd_rc
  9307 ;;		_cmd_rp
  9308 ;;		_cmd_rtl
  9309 ;;		_cmd_sc
  9310 ;;		_cmd_trc
  9311 ;;		_cmd_tri
  9312 ;;		_editClock
  9313 ;;		_editLum
  9314 ;;		_editTemp
  9315 ;;		_getch
  9316 ;;		_i2c1_driver_open
  9317 ;;		_memset
  9318 ;;		_toggleAlarms
  9319 ;; This function is called by:
  9320 ;;		Startup code after reset
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           
  9325                           ;psect for function _main
  9326  0099                     _main:
  9327  0099                     l7006:	
  9328                           ;incstack = 0
  9329                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9330                           
  9331                           
  9332                           ;main.c: 1082: SYSTEM_Initialize();
  9333  0099  3193  23A2  3180   	fcall	_SYSTEM_Initialize
  9334                           
  9335                           ;main.c: 1084: PWM6_LoadDutyValue(0);
  9336  009C  3000               	movlw	0
  9337  009D  00F2               	movwf	PWM6_LoadDutyValue@dutyValue
  9338  009E  00F3               	movwf	PWM6_LoadDutyValue@dutyValue+1
  9339  009F  3192  22DD  3180   	fcall	_PWM6_LoadDutyValue
  9340  00A2                     l7008:
  9341                           
  9342                           ;main.c: 1085: TMR2_StopTimer();
  9343  00A2  3191  21F0  3180   	fcall	_TMR2_StopTimer
  9344  00A5                     l7010:
  9345                           
  9346                           ;main.c: 1086: PWM_Output_D4_Disable();
  9347  00A5  3191  21E6  3180   	fcall	_PWM_Output_D4_Disable
  9348                           
  9349                           ;main.c: 1088: TMR1_SetInterruptHandler(Clock_ISR);
  9350  00A8  30F6               	movlw	low _Clock_ISR
  9351  00A9  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9352  00AA  3009               	movlw	high _Clock_ISR
  9353  00AB  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9354  00AC  3192  2210  3180   	fcall	_TMR1_SetInterruptHandler
  9355                           
  9356                           ;main.c: 1090: INT_SetInterruptHandler(S1_ISR);
  9357  00AF  3040               	movlw	low _S1_ISR
  9358  00B0  00F2               	movwf	INT_SetInterruptHandler@InterruptHandler
  9359  00B1  3012               	movlw	high _S1_ISR
  9360  00B2  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  9361  00B3  3192  220A  3180   	fcall	_INT_SetInterruptHandler
  9362  00B6                     l7012:
  9363                           
  9364                           ;main.c: 1092: uint8_t checkSumAux = 0;
  9365  00B6  0021               	movlb	1	; select bank1
  9366  00B7  01B9               	clrf	main@checkSumAux^(0+128)
  9367  00B8                     l7014:
  9368                           
  9369                           ;main.c: 1093: bool notInit = 1;
  9370  00B8  01BA               	clrf	main@notInit^(0+128)
  9371  00B9  0ABA               	incf	main@notInit^(0+128),f
  9372  00BA                     l7016:
  9373                           
  9374                           ;main.c: 1094: bool corrupted = 0;
  9375  00BA  01BB               	clrf	main@corrupted^(0+128)
  9376  00BB                     l7018:
  9377                           
  9378                           ;main.c: 1095: if(DATAEE_ReadByte(0x7000) == 'S'){
  9379  00BB  3000               	movlw	0
  9380  00BC  00F8               	movwf	DATAEE_ReadByte@bAdd
  9381  00BD  3070               	movlw	112
  9382  00BE  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9383  00BF  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9384  00C2  3A53               	xorlw	83
  9385  00C3  1D03               	skipz
  9386  00C4  28C6               	goto	u8201
  9387  00C5  28C7               	goto	u8200
  9388  00C6                     u8201:
  9389  00C6  2905               	goto	l7038
  9390  00C7                     u8200:
  9391  00C7                     l7020:
  9392                           
  9393                           ;main.c: 1096: notInit = 0;
  9394  00C7  0021               	movlb	1	; select bank1
  9395  00C8  01BA               	clrf	main@notInit^(0+128)
  9396  00C9                     l7022:
  9397                           
  9398                           ;main.c: 1097: for(int i = 1; i < 13; i++){
  9399  00C9  3001               	movlw	1
  9400  00CA  00BC               	movwf	main@i^(0+128)
  9401  00CB  3000               	movlw	0
  9402  00CC  00BD               	movwf	(main@i^(0+128)+1)
  9403  00CD                     l7028:
  9404                           
  9405                           ;main.c: 1098: checkSumAux += DATAEE_ReadByte(0x7000 + (i*8));
  9406  00CD  0021               	movlb	1	; select bank1
  9407  00CE  083D               	movf	(main@i+1)^(0+128),w
  9408  00CF  00A1               	movwf	(??_main^(0+128)+1)
  9409  00D0  083C               	movf	main@i^(0+128),w
  9410  00D1  00A0               	movwf	??_main^(0+128)
  9411  00D2  35A0               	lslf	??_main^(0+128),f
  9412  00D3  0DA1               	rlf	(??_main^(0+128)+1),f
  9413  00D4  35A0               	lslf	??_main^(0+128),f
  9414  00D5  0DA1               	rlf	(??_main^(0+128)+1),f
  9415  00D6  35A0               	lslf	??_main^(0+128),f
  9416  00D7  0DA1               	rlf	(??_main^(0+128)+1),f
  9417  00D8  0820               	movf	??_main^(0+128),w
  9418  00D9  3E00               	addlw	0
  9419  00DA  00F8               	movwf	DATAEE_ReadByte@bAdd
  9420  00DB  3070               	movlw	112
  9421  00DC  3D21               	addwfc	(??_main+1)^(0+128),w
  9422  00DD  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9423  00DE  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9424  00E1  0021               	movlb	1	; select bank1
  9425  00E2  00A2               	movwf	(??_main+2)^(0+128)
  9426  00E3  0822               	movf	(??_main+2)^(0+128),w
  9427  00E4  07B9               	addwf	main@checkSumAux^(0+128),f
  9428  00E5                     l7030:
  9429  00E5  3001               	movlw	1
  9430  00E6  07BC               	addwf	main@i^(0+128),f
  9431  00E7  3000               	movlw	0
  9432  00E8  3DBD               	addwfc	(main@i+1)^(0+128),f
  9433  00E9                     l7032:
  9434  00E9  083D               	movf	(main@i+1)^(0+128),w
  9435  00EA  3A80               	xorlw	128
  9436  00EB  00A0               	movwf	??_main^(0+128)
  9437  00EC  3080               	movlw	128
  9438  00ED  0220               	subwf	??_main^(0+128),w
  9439  00EE  1D03               	skipz
  9440  00EF  28F2               	goto	u8215
  9441  00F0  300D               	movlw	13
  9442  00F1  023C               	subwf	main@i^(0+128),w
  9443  00F2                     u8215:
  9444  00F2  1C03               	skipc
  9445  00F3  28F5               	goto	u8211
  9446  00F4  28F6               	goto	u8210
  9447  00F5                     u8211:
  9448  00F5  28CD               	goto	l7028
  9449  00F6                     u8210:
  9450  00F6                     l7034:
  9451                           
  9452                           ;main.c: 1099: };main.c: 1100: if(checkSumAux != DATAEE_ReadByte(0x7000 + (13*8))){
  9453  00F6  3068               	movlw	104
  9454  00F7  00F8               	movwf	DATAEE_ReadByte@bAdd
  9455  00F8  3070               	movlw	112
  9456  00F9  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9457  00FA  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9458  00FD  0021               	movlb	1	; select bank1
  9459  00FE  0639               	xorwf	main@checkSumAux^(0+128),w
  9460  00FF  1903               	skipnz
  9461  0100  2902               	goto	u8221
  9462  0101  2903               	goto	u8220
  9463  0102                     u8221:
  9464  0102  2905               	goto	l7038
  9465  0103                     u8220:
  9466  0103                     l7036:
  9467                           
  9468                           ;main.c: 1101: corrupted = 1;
  9469  0103  01BB               	clrf	main@corrupted^(0+128)
  9470  0104  0ABB               	incf	main@corrupted^(0+128),f
  9471  0105                     l7038:
  9472                           
  9473                           ;main.c: 1102: };main.c: 1103: };main.c: 1105: if(notInit || corrupted){
  9474  0105  0021               	movlb	1	; select bank1
  9475  0106  083A               	movf	main@notInit^(0+128),w
  9476  0107  1D03               	btfss	3,2
  9477  0108  290A               	goto	u8231
  9478  0109  290B               	goto	u8230
  9479  010A                     u8231:
  9480  010A  2910               	goto	l7042
  9481  010B                     u8230:
  9482  010B                     l7040:
  9483  010B  083B               	movf	main@corrupted^(0+128),w
  9484  010C  1903               	btfsc	3,2
  9485  010D  290F               	goto	u8241
  9486  010E  2910               	goto	u8240
  9487  010F                     u8241:
  9488  010F  29BB               	goto	l7044
  9489  0110                     u8240:
  9490  0110                     l7042:
  9491                           
  9492                           ;main.c: 1106: DATAEE_WriteByte( 0x7000 + (0), 'S');
  9493  0110  3000               	movlw	0
  9494  0111  0020               	movlb	0	; select bank0
  9495  0112  00A0               	movwf	DATAEE_WriteByte@bAdd
  9496  0113  3070               	movlw	112
  9497  0114  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9498  0115  3053               	movlw	83
  9499  0116  0021               	movlb	1	; select bank1
  9500  0117  00A0               	movwf	??_main^(0+128)
  9501  0118  0820               	movf	??_main^(0+128),w
  9502  0119  0020               	movlb	0	; select bank0
  9503  011A  00A2               	movwf	DATAEE_WriteByte@bData
  9504  011B  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9505                           
  9506                           ;main.c: 1107: DATAEE_WriteByte( 0x7000 + (1), 25);
  9507  011E  3001               	movlw	1
  9508  011F  0020               	movlb	0	; select bank0
  9509  0120  00A0               	movwf	DATAEE_WriteByte@bAdd
  9510  0121  3070               	movlw	112
  9511  0122  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9512  0123  3019               	movlw	25
  9513  0124  0021               	movlb	1	; select bank1
  9514  0125  00A0               	movwf	??_main^(0+128)
  9515  0126  0820               	movf	??_main^(0+128),w
  9516  0127  0020               	movlb	0	; select bank0
  9517  0128  00A2               	movwf	DATAEE_WriteByte@bData
  9518  0129  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9519                           
  9520                           ;main.c: 1108: DATAEE_WriteByte( 0x7000 + (2), 3);
  9521  012C  3002               	movlw	2
  9522  012D  0020               	movlb	0	; select bank0
  9523  012E  00A0               	movwf	DATAEE_WriteByte@bAdd
  9524  012F  3070               	movlw	112
  9525  0130  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9526  0131  3003               	movlw	3
  9527  0132  0021               	movlb	1	; select bank1
  9528  0133  00A0               	movwf	??_main^(0+128)
  9529  0134  0820               	movf	??_main^(0+128),w
  9530  0135  0020               	movlb	0	; select bank0
  9531  0136  00A2               	movwf	DATAEE_WriteByte@bData
  9532  0137  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9533                           
  9534                           ;main.c: 1109: DATAEE_WriteByte( 0x7000 + (3), 5);
  9535  013A  3003               	movlw	3
  9536  013B  0020               	movlb	0	; select bank0
  9537  013C  00A0               	movwf	DATAEE_WriteByte@bAdd
  9538  013D  3070               	movlw	112
  9539  013E  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9540  013F  3005               	movlw	5
  9541  0140  0021               	movlb	1	; select bank1
  9542  0141  00A0               	movwf	??_main^(0+128)
  9543  0142  0820               	movf	??_main^(0+128),w
  9544  0143  0020               	movlb	0	; select bank0
  9545  0144  00A2               	movwf	DATAEE_WriteByte@bData
  9546  0145  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9547                           
  9548                           ;main.c: 1110: DATAEE_WriteByte( 0x7000 + (4), 12);
  9549  0148  3004               	movlw	4
  9550  0149  0020               	movlb	0	; select bank0
  9551  014A  00A0               	movwf	DATAEE_WriteByte@bAdd
  9552  014B  3070               	movlw	112
  9553  014C  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9554  014D  300C               	movlw	12
  9555  014E  0021               	movlb	1	; select bank1
  9556  014F  00A0               	movwf	??_main^(0+128)
  9557  0150  0820               	movf	??_main^(0+128),w
  9558  0151  0020               	movlb	0	; select bank0
  9559  0152  00A2               	movwf	DATAEE_WriteByte@bData
  9560  0153  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9561                           
  9562                           ;main.c: 1111: DATAEE_WriteByte( 0x7000 + (5), 0);
  9563  0156  3005               	movlw	5
  9564  0157  0020               	movlb	0	; select bank0
  9565  0158  00A0               	movwf	DATAEE_WriteByte@bAdd
  9566  0159  3070               	movlw	112
  9567  015A  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9568  015B  01A2               	clrf	DATAEE_WriteByte@bData
  9569  015C  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9570                           
  9571                           ;main.c: 1112: DATAEE_WriteByte( 0x7000 + (6), 0);
  9572  015F  3006               	movlw	6
  9573  0160  0020               	movlb	0	; select bank0
  9574  0161  00A0               	movwf	DATAEE_WriteByte@bAdd
  9575  0162  3070               	movlw	112
  9576  0163  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9577  0164  01A2               	clrf	DATAEE_WriteByte@bData
  9578  0165  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9579                           
  9580                           ;main.c: 1113: DATAEE_WriteByte( 0x7000 + (7), 28);
  9581  0168  3007               	movlw	7
  9582  0169  0020               	movlb	0	; select bank0
  9583  016A  00A0               	movwf	DATAEE_WriteByte@bAdd
  9584  016B  3070               	movlw	112
  9585  016C  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9586  016D  301C               	movlw	28
  9587  016E  0021               	movlb	1	; select bank1
  9588  016F  00A0               	movwf	??_main^(0+128)
  9589  0170  0820               	movf	??_main^(0+128),w
  9590  0171  0020               	movlb	0	; select bank0
  9591  0172  00A2               	movwf	DATAEE_WriteByte@bData
  9592  0173  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9593                           
  9594                           ;main.c: 1114: DATAEE_WriteByte( 0x7000 + (8), 4);
  9595  0176  3008               	movlw	8
  9596  0177  0020               	movlb	0	; select bank0
  9597  0178  00A0               	movwf	DATAEE_WriteByte@bAdd
  9598  0179  3070               	movlw	112
  9599  017A  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9600  017B  3004               	movlw	4
  9601  017C  0021               	movlb	1	; select bank1
  9602  017D  00A0               	movwf	??_main^(0+128)
  9603  017E  0820               	movf	??_main^(0+128),w
  9604  017F  0020               	movlb	0	; select bank0
  9605  0180  00A2               	movwf	DATAEE_WriteByte@bData
  9606  0181  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9607                           
  9608                           ;main.c: 1115: DATAEE_WriteByte( 0x7000 + (9), 'a');
  9609  0184  3009               	movlw	9
  9610  0185  0020               	movlb	0	; select bank0
  9611  0186  00A0               	movwf	DATAEE_WriteByte@bAdd
  9612  0187  3070               	movlw	112
  9613  0188  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9614  0189  3061               	movlw	97
  9615  018A  0021               	movlb	1	; select bank1
  9616  018B  00A0               	movwf	??_main^(0+128)
  9617  018C  0820               	movf	??_main^(0+128),w
  9618  018D  0020               	movlb	0	; select bank0
  9619  018E  00A2               	movwf	DATAEE_WriteByte@bData
  9620  018F  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9621                           
  9622                           ;main.c: 1116: DATAEE_WriteByte( 0x7000 + (10), 0);
  9623  0192  300A               	movlw	10
  9624  0193  0020               	movlb	0	; select bank0
  9625  0194  00A0               	movwf	DATAEE_WriteByte@bAdd
  9626  0195  3070               	movlw	112
  9627  0196  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9628  0197  01A2               	clrf	DATAEE_WriteByte@bData
  9629  0198  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9630                           
  9631                           ;main.c: 1117: DATAEE_WriteByte( 0x7000 + (11), 0);
  9632  019B  300B               	movlw	11
  9633  019C  0020               	movlb	0	; select bank0
  9634  019D  00A0               	movwf	DATAEE_WriteByte@bAdd
  9635  019E  3070               	movlw	112
  9636  019F  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9637  01A0  01A2               	clrf	DATAEE_WriteByte@bData
  9638  01A1  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9639                           
  9640                           ;main.c: 1118: DATAEE_WriteByte( 0x7000 + (12), 0);
  9641  01A4  300C               	movlw	12
  9642  01A5  0020               	movlb	0	; select bank0
  9643  01A6  00A0               	movwf	DATAEE_WriteByte@bAdd
  9644  01A7  3070               	movlw	112
  9645  01A8  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9646  01A9  01A2               	clrf	DATAEE_WriteByte@bData
  9647  01AA  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9648                           
  9649                           ;main.c: 1119: DATAEE_WriteByte( 0x7000 + (13), 174);
  9650  01AD  300D               	movlw	13
  9651  01AE  0020               	movlb	0	; select bank0
  9652  01AF  00A0               	movwf	DATAEE_WriteByte@bAdd
  9653  01B0  3070               	movlw	112
  9654  01B1  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  9655  01B2  30AE               	movlw	174
  9656  01B3  0021               	movlb	1	; select bank1
  9657  01B4  00A0               	movwf	??_main^(0+128)
  9658  01B5  0820               	movf	??_main^(0+128),w
  9659  01B6  0020               	movlb	0	; select bank0
  9660  01B7  00A2               	movwf	DATAEE_WriteByte@bData
  9661  01B8  3194  24BD  3180   	fcall	_DATAEE_WriteByte
  9662  01BB                     l7044:
  9663                           
  9664                           ;main.c: 1120: };main.c: 1122: NREG = DATAEE_ReadByte(0x7000 + (1));
  9665  01BB  3001               	movlw	1
  9666  01BC  00F8               	movwf	DATAEE_ReadByte@bAdd
  9667  01BD  3070               	movlw	112
  9668  01BE  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9669  01BF  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9670  01C2  0021               	movlb	1	; select bank1
  9671  01C3  00A0               	movwf	??_main^(0+128)
  9672  01C4  0820               	movf	??_main^(0+128),w
  9673  01C5  00FB               	movwf	_NREG
  9674  01C6                     l7046:
  9675                           
  9676                           ;main.c: 1123: PMON = DATAEE_ReadByte(0x7000 + (2));
  9677  01C6  3002               	movlw	2
  9678  01C7  00F8               	movwf	DATAEE_ReadByte@bAdd
  9679  01C8  3070               	movlw	112
  9680  01C9  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9681  01CA  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9682  01CD  0021               	movlb	1	; select bank1
  9683  01CE  00A0               	movwf	??_main^(0+128)
  9684  01CF  0820               	movf	??_main^(0+128),w
  9685  01D0  0020               	movlb	0	; select bank0
  9686  01D1  00EE               	movwf	_PMON
  9687  01D2                     l7048:
  9688                           
  9689                           ;main.c: 1124: TALA = DATAEE_ReadByte(0x7000 + (3));
  9690  01D2  3003               	movlw	3
  9691  01D3  00F8               	movwf	DATAEE_ReadByte@bAdd
  9692  01D4  3070               	movlw	112
  9693  01D5  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9694  01D6  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9695  01D9  0021               	movlb	1	; select bank1
  9696  01DA  00A0               	movwf	??_main^(0+128)
  9697  01DB  0820               	movf	??_main^(0+128),w
  9698  01DC  0020               	movlb	0	; select bank0
  9699  01DD  00ED               	movwf	_TALA
  9700  01DE                     l7050:
  9701                           
  9702                           ;main.c: 1125: clkAlarm.alarmVal.h = DATAEE_ReadByte(0x7000 + (4));
  9703  01DE  3004               	movlw	4
  9704  01DF  00F8               	movwf	DATAEE_ReadByte@bAdd
  9705  01E0  3070               	movlw	112
  9706  01E1  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9707  01E2  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9708  01E5  0021               	movlb	1	; select bank1
  9709  01E6  00A0               	movwf	??_main^(0+128)
  9710  01E7  0820               	movf	??_main^(0+128),w
  9711  01E8  0020               	movlb	0	; select bank0
  9712  01E9  00D5               	movwf	_clkAlarm
  9713  01EA                     l7052:
  9714                           
  9715                           ;main.c: 1126: clkAlarm.alarmVal.m = DATAEE_ReadByte(0x7000 + (5));
  9716  01EA  3005               	movlw	5
  9717  01EB  00F8               	movwf	DATAEE_ReadByte@bAdd
  9718  01EC  3070               	movlw	112
  9719  01ED  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9720  01EE  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9721  01F1  0021               	movlb	1	; select bank1
  9722  01F2  00A0               	movwf	??_main^(0+128)
  9723  01F3  0820               	movf	??_main^(0+128),w
  9724  01F4  0020               	movlb	0	; select bank0
  9725  01F5  00D6               	movwf	_clkAlarm+1
  9726  01F6                     l7054:
  9727                           
  9728                           ;main.c: 1127: clkAlarm.alarmVal.s = DATAEE_ReadByte(0x7000 + (6));
  9729  01F6  3006               	movlw	6
  9730  01F7  00F8               	movwf	DATAEE_ReadByte@bAdd
  9731  01F8  3070               	movlw	112
  9732  01F9  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9733  01FA  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9734  01FD  0021               	movlb	1	; select bank1
  9735  01FE  00A0               	movwf	??_main^(0+128)
  9736  01FF  0820               	movf	??_main^(0+128),w
  9737  0200  0020               	movlb	0	; select bank0
  9738  0201  00D7               	movwf	_clkAlarm+2
  9739  0202                     l7056:
  9740                           
  9741                           ;main.c: 1128: tempAlarm.alarmTemp = DATAEE_ReadByte(0x7000 + (7));
  9742  0202  3007               	movlw	7
  9743  0203  00F8               	movwf	DATAEE_ReadByte@bAdd
  9744  0204  3070               	movlw	112
  9745  0205  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9746  0206  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9747  0209  0021               	movlb	1	; select bank1
  9748  020A  00A0               	movwf	??_main^(0+128)
  9749  020B  0820               	movf	??_main^(0+128),w
  9750  020C  00C9               	movwf	_tempAlarm^(0+128)
  9751  020D                     l7058:
  9752                           
  9753                           ;main.c: 1129: lumAlarm.alarmLum = DATAEE_ReadByte(0x7000 + (8));
  9754  020D  3008               	movlw	8
  9755  020E  00F8               	movwf	DATAEE_ReadByte@bAdd
  9756  020F  3070               	movlw	112
  9757  0210  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9758  0211  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9759  0214  0021               	movlb	1	; select bank1
  9760  0215  00A0               	movwf	??_main^(0+128)
  9761  0216  0820               	movf	??_main^(0+128),w
  9762  0217  00C6               	movwf	_lumAlarm^(0+128)
  9763  0218                     l7060:
  9764                           
  9765                           ;main.c: 1130: ALAF = DATAEE_ReadByte(0x7000 + (9));
  9766  0218  3009               	movlw	9
  9767  0219  00F8               	movwf	DATAEE_ReadByte@bAdd
  9768  021A  3070               	movlw	112
  9769  021B  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9770  021C  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9771  021F  0021               	movlb	1	; select bank1
  9772  0220  00A0               	movwf	??_main^(0+128)
  9773  0221  0820               	movf	??_main^(0+128),w
  9774  0222  0020               	movlb	0	; select bank0
  9775  0223  00E7               	movwf	_ALAF
  9776  0224                     l7062:
  9777                           
  9778                           ;main.c: 1131: t.h = DATAEE_ReadByte(0x7000 + (10));
  9779  0224  300A               	movlw	10
  9780  0225  00F8               	movwf	DATAEE_ReadByte@bAdd
  9781  0226  3070               	movlw	112
  9782  0227  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9783  0228  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9784  022B  0021               	movlb	1	; select bank1
  9785  022C  00A0               	movwf	??_main^(0+128)
  9786  022D  0820               	movf	??_main^(0+128),w
  9787  022E  0020               	movlb	0	; select bank0
  9788  022F  00D9               	movwf	_t
  9789  0230                     l7064:
  9790                           
  9791                           ;main.c: 1132: t.m = DATAEE_ReadByte(0x7000 + (11));
  9792  0230  300B               	movlw	11
  9793  0231  00F8               	movwf	DATAEE_ReadByte@bAdd
  9794  0232  3070               	movlw	112
  9795  0233  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9796  0234  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9797  0237  0021               	movlb	1	; select bank1
  9798  0238  00A0               	movwf	??_main^(0+128)
  9799  0239  0820               	movf	??_main^(0+128),w
  9800  023A  0020               	movlb	0	; select bank0
  9801  023B  00DA               	movwf	_t+1
  9802  023C                     l7066:
  9803                           
  9804                           ;main.c: 1133: iwrite = DATAEE_ReadByte(0x7000 + (12));
  9805  023C  300C               	movlw	12
  9806  023D  00F8               	movwf	DATAEE_ReadByte@bAdd
  9807  023E  3070               	movlw	112
  9808  023F  00F9               	movwf	DATAEE_ReadByte@bAdd+1
  9809  0240  3192  225B  3180   	fcall	_DATAEE_ReadByte
  9810  0243  0021               	movlb	1	; select bank1
  9811  0244  00A0               	movwf	??_main^(0+128)
  9812  0245  0820               	movf	??_main^(0+128),w
  9813  0246  00FA               	movwf	_iwrite
  9814  0247                     l7068:
  9815                           
  9816                           ;main.c: 1137: tempAlarm.trigger = 0;
  9817  0247  01CA               	clrf	(_tempAlarm^(0+128)+1)
  9818  0248                     l7070:
  9819                           
  9820                           ;main.c: 1138: tempAlarm.triggered = 0;
  9821  0248  01CB               	clrf	(_tempAlarm^(0+128)+2)
  9822  0249                     l7072:
  9823                           
  9824                           ;main.c: 1140: lumAlarm.trigger = 0;
  9825  0249  01C7               	clrf	(_lumAlarm^(0+128)+1)
  9826  024A                     l7074:
  9827                           
  9828                           ;main.c: 1141: lumAlarm.triggered = 0;
  9829  024A  01C8               	clrf	(_lumAlarm^(0+128)+2)
  9830  024B                     l7076:
  9831                           
  9832                           ;main.c: 1143: clkAlarm.trigger = 0;
  9833  024B  0020               	movlb	0	; select bank0
  9834  024C  01D8               	clrf	_clkAlarm+3
  9835  024D                     l7078:
  9836                           
  9837                           ;main.c: 1146: i2c1_driver_open();
  9838  024D  3192  2267  3180   	fcall	_i2c1_driver_open
  9839  0250                     l7080:
  9840                           
  9841                           ;main.c: 1147: TRISCbits.TRISC3 = 1;
  9842  0250  0020               	movlb	0	; select bank0
  9843  0251  1593               	bsf	19,3	;volatile
  9844  0252                     l7082:
  9845                           
  9846                           ;main.c: 1148: TRISCbits.TRISC4 = 1;
  9847  0252  1613               	bsf	19,4	;volatile
  9848  0253                     l7084:
  9849                           
  9850                           ;main.c: 1149: WPUC3 = 1;
  9851  0253  003E               	movlb	30	; select bank30
  9852  0254  15CF               	bsf	79,3	;volatile
  9853  0255                     l7086:
  9854                           
  9855                           ;main.c: 1150: WPUC4 = 1;
  9856  0255  164F               	bsf	79,4	;volatile
  9857  0256                     l7088:
  9858                           
  9859                           ;main.c: 1151: LCDinit();
  9860  0256  318A  2264  3180   	fcall	_LCDinit
  9861  0259                     l7090:
  9862                           
  9863                           ;main.c: 1154: (INTCONbits.GIE = 1);
  9864  0259  178B               	bsf	11,7	;volatile
  9865  025A                     l7092:
  9866                           
  9867                           ;main.c: 1157: (INTCONbits.PEIE = 1);
  9868  025A  170B               	bsf	11,6	;volatile
  9869  025B                     l7094:
  9870                           
  9871                           ;main.c: 1161: uint8_t c;;main.c: 1162: char buff[20] = "";
  9872  025B  30A3               	movlw	low main@buff
  9873  025C  0086               	movwf	6
  9874  025D  3000               	movlw	high main@buff
  9875  025E  0087               	movwf	7
  9876  025F  3014               	movlw	20
  9877  0260  0021               	movlb	1	; select bank1
  9878  0261  00A0               	movwf	??_main^(0+128)
  9879  0262  3000               	movlw	0
  9880  0263                     u8250:
  9881  0263  001E               	movwi fsr1++
  9882  0264  0BA0               	decfsz	??_main^(0+128),f
  9883  0265  2A63               	goto	u8250
  9884  0266                     l7096:
  9885                           
  9886                           ;main.c: 1163: int n=0;
  9887  0266  01C1               	clrf	main@n^(0+128)
  9888  0267  01C2               	clrf	(main@n+1)^(0+128)
  9889  0268                     l7098:
  9890  0268  2AB8               	goto	l7126
  9891  0269                     l7100:
  9892                           
  9893                           ;main.c: 1169: c = getch();
  9894  0269  3191  21F4  3180   	fcall	_getch
  9895  026C  0021               	movlb	1	; select bank1
  9896  026D  00A0               	movwf	??_main^(0+128)
  9897  026E  0820               	movf	??_main^(0+128),w
  9898  026F  00BE               	movwf	main@c^(0+128)
  9899  0270                     l7102:
  9900                           
  9901                           ;main.c: 1170: if((c == (uint8_t)0xFD || buff[0] == (uint8_t)0xFD)){
  9902  0270  30FD               	movlw	253
  9903  0271  063E               	xorwf	main@c^(0+128),w
  9904  0272  1903               	btfsc	3,2
  9905  0273  2A75               	goto	u8261
  9906  0274  2A76               	goto	u8260
  9907  0275                     u8261:
  9908  0275  2A7C               	goto	l7106
  9909  0276                     u8260:
  9910  0276                     l7104:
  9911  0276  30FD               	movlw	253
  9912  0277  0623               	xorwf	main@buff^(0+128),w
  9913  0278  1D03               	btfss	3,2
  9914  0279  2A7B               	goto	u8271
  9915  027A  2A7C               	goto	u8270
  9916  027B                     u8271:
  9917  027B  2AB1               	goto	l7122
  9918  027C                     u8270:
  9919  027C                     l7106:
  9920                           
  9921                           ;main.c: 1171: if(c == (uint8_t)0xFD){
  9922  027C  30FD               	movlw	253
  9923  027D  063E               	xorwf	main@c^(0+128),w
  9924  027E  1D03               	btfss	3,2
  9925  027F  2A81               	goto	u8281
  9926  0280  2A82               	goto	u8280
  9927  0281                     u8281:
  9928  0281  2A90               	goto	l7112
  9929  0282                     u8280:
  9930  0282                     l7108:
  9931                           
  9932                           ;main.c: 1172: memset(buff, 0, sizeof buff);
  9933  0282  3000               	movlw	0
  9934  0283  00F2               	movwf	memset@c
  9935  0284  00F3               	movwf	memset@c+1
  9936  0285  3014               	movlw	20
  9937  0286  00F4               	movwf	memset@n
  9938  0287  3000               	movlw	0
  9939  0288  00F5               	movwf	memset@n+1
  9940  0289  30A3               	movlw	(low (main@buff| 0))& (0+255)
  9941  028A  3193  23FA  3180   	fcall	_memset
  9942  028D                     l7110:
  9943                           
  9944                           ;main.c: 1173: n=0;
  9945  028D  0021               	movlb	1	; select bank1
  9946  028E  01C1               	clrf	main@n^(0+128)
  9947  028F  01C2               	clrf	(main@n+1)^(0+128)
  9948  0290                     l7112:
  9949                           
  9950                           ;main.c: 1174: };main.c: 1175: buff[n] = c;
  9951  0290  083E               	movf	main@c^(0+128),w
  9952  0291  00A0               	movwf	??_main^(0+128)
  9953  0292  0841               	movf	main@n^(0+128),w
  9954  0293  3EA3               	addlw	(low (main@buff| 0))& (0+255)
  9955  0294  0086               	movwf	6
  9956  0295  0187               	clrf	7
  9957  0296  0820               	movf	??_main^(0+128),w
  9958  0297  0081               	movwf	1
  9959  0298                     l7114:
  9960                           
  9961                           ;main.c: 1176: n++;
  9962  0298  3001               	movlw	1
  9963  0299  07C1               	addwf	main@n^(0+128),f
  9964  029A  3000               	movlw	0
  9965  029B  3DC2               	addwfc	(main@n+1)^(0+128),f
  9966  029C                     l7116:
  9967                           
  9968                           ;main.c: 1177: if(n == 20){
  9969  029C  3014               	movlw	20
  9970  029D  0641               	xorwf	main@n^(0+128),w
  9971  029E  0442               	iorwf	(main@n+1)^(0+128),w
  9972  029F  1D03               	btfss	3,2
  9973  02A0  2AA2               	goto	u8291
  9974  02A1  2AA3               	goto	u8290
  9975  02A2                     u8291:
  9976  02A2  2AB1               	goto	l7122
  9977  02A3                     u8290:
  9978  02A3                     l7118:
  9979                           
  9980                           ;main.c: 1178: memset(buff, 0, sizeof buff);
  9981  02A3  3000               	movlw	0
  9982  02A4  00F2               	movwf	memset@c
  9983  02A5  00F3               	movwf	memset@c+1
  9984  02A6  3014               	movlw	20
  9985  02A7  00F4               	movwf	memset@n
  9986  02A8  3000               	movlw	0
  9987  02A9  00F5               	movwf	memset@n+1
  9988  02AA  30A3               	movlw	(low (main@buff| 0))& (0+255)
  9989  02AB  3193  23FA  3180   	fcall	_memset
  9990  02AE                     l7120:
  9991                           
  9992                           ;main.c: 1179: n=0;
  9993  02AE  0021               	movlb	1	; select bank1
  9994  02AF  01C1               	clrf	main@n^(0+128)
  9995  02B0  01C2               	clrf	(main@n+1)^(0+128)
  9996  02B1                     l7122:
  9997                           
  9998                           ;main.c: 1180: };main.c: 1181: };main.c: 1182: if(c == (uint8_t)0xFE){
  9999  02B1  30FE               	movlw	254
 10000  02B2  063E               	xorwf	main@c^(0+128),w
 10001  02B3  1D03               	btfss	3,2
 10002  02B4  2AB6               	goto	u8301
 10003  02B5  2AB7               	goto	u8300
 10004  02B6                     u8301:
 10005  02B6  2AB8               	goto	l7126
 10006  02B7                     u8300:
 10007  02B7  2AC0               	goto	l7128
 10008  02B8                     l1538:
 10009  02B8                     l7126:
 10010  02B8  3191  21DD  3180   	fcall	_EUSART_is_rx_ready
 10011  02BB  3A00               	xorlw	0
 10012  02BC  1D03               	skipz
 10013  02BD  2ABF               	goto	u8311
 10014  02BE  2AC0               	goto	u8310
 10015  02BF                     u8311:
 10016  02BF  2A69               	goto	l7100
 10017  02C0                     u8310:
 10018  02C0                     l7128:
 10019                           
 10020                           ;main.c: 1184: };main.c: 1185: };main.c: 1186: if(buff[n-1] == (uint8_t)0xFE){
 10021  02C0  0021               	movlb	1	; select bank1
 10022  02C1  0841               	movf	main@n^(0+128),w
 10023  02C2  3EFF               	addlw	255
 10024  02C3  3EA3               	addlw	(low (main@buff| 0))& (0+255)
 10025  02C4  0086               	movwf	6
 10026  02C5  0187               	clrf	7
 10027  02C6  30FE               	movlw	254
 10028  02C7  0601               	xorwf	1,w
 10029  02C8  1D03               	btfss	3,2
 10030  02C9  2ACB               	goto	u8321
 10031  02CA  2ACC               	goto	u8320
 10032  02CB                     u8321:
 10033  02CB  2B2F               	goto	l7150
 10034  02CC                     u8320:
 10035  02CC                     l7130:
 10036                           
 10037                           ;main.c: 1187: for (i = 0; i < (sizeof(commands) / sizeof(struct command_d)); i++){
 10038  02CC  01BF               	clrf	main@i_2532^(0+128)
 10039  02CD  01C0               	clrf	(main@i_2532+1)^(0+128)
 10040  02CE                     l7136:
 10041                           
 10042                           ;main.c: 1188: if (buff[1] == commands[i].cmd_name){
 10043  02CE  0840               	movf	(main@i_2532+1)^(0+128),w
 10044  02CF  00F3               	movwf	___wmul@multiplier+1
 10045  02D0  083F               	movf	main@i_2532^(0+128),w
 10046  02D1  00F2               	movwf	___wmul@multiplier
 10047  02D2  3003               	movlw	3
 10048  02D3  00F4               	movwf	___wmul@multiplicand
 10049  02D4  3000               	movlw	0
 10050  02D5  00F5               	movwf	___wmul@multiplicand+1
 10051  02D6  3194  2418  3180   	fcall	___wmul
 10052  02D9  0873               	movf	?___wmul+1,w
 10053  02DA  0085               	movwf	5
 10054  02DB  0872               	movf	?___wmul,w
 10055  02DC  0084               	movwf	4
 10056  02DD  3002               	movlw	low ((_commands+2)| (0+32768))
 10057  02DE  0784               	addwf	4,f
 10058  02DF  3098               	movlw	high ((_commands+2)| (0+32768))
 10059  02E0  3D85               	addwfc	5,f
 10060  02E1  0800               	movf	0,w	;code access
 10061  02E2  0021               	movlb	1	; select bank1
 10062  02E3  0624               	xorwf	(main@buff^(0+128)+1),w
 10063  02E4  1D03               	skipz
 10064  02E5  2AE7               	goto	u8331
 10065  02E6  2AE8               	goto	u8330
 10066  02E7                     u8331:
 10067  02E7  2B14               	goto	l7142
 10068  02E8                     u8330:
 10069  02E8                     l7138:
 10070                           
 10071                           ;main.c: 1189: commands[i].cmd_fnct(n, buff);
 10072  02E8  0840               	movf	(main@i_2532+1)^(0+128),w
 10073  02E9  00F3               	movwf	___wmul@multiplier+1
 10074  02EA  083F               	movf	main@i_2532^(0+128),w
 10075  02EB  00F2               	movwf	___wmul@multiplier
 10076  02EC  3003               	movlw	3
 10077  02ED  00F4               	movwf	___wmul@multiplicand
 10078  02EE  3000               	movlw	0
 10079  02EF  00F5               	movwf	___wmul@multiplicand+1
 10080  02F0  3194  2418  3180   	fcall	___wmul
 10081  02F3  0873               	movf	?___wmul+1,w
 10082  02F4  0085               	movwf	5
 10083  02F5  0872               	movf	?___wmul,w
 10084  02F6  0084               	movwf	4
 10085  02F7  3000               	movlw	low (_commands| (0+32768))
 10086  02F8  0784               	addwf	4,f
 10087  02F9  3098               	movlw	high (_commands| (0+32768))
 10088  02FA  3D85               	addwfc	5,f
 10089  02FB  3F00               	moviw [0]fsr0
 10090  02FC  0021               	movlb	1	; select bank1
 10091  02FD  00B7               	movwf	_main$3496^(0+128)
 10092  02FE  3F01               	moviw [1]fsr0
 10093  02FF  00B8               	movwf	(_main$3496+1)^(0+128)
 10094  0300                     l7140:
 10095                           
 10096                           ;main.c: 1189: commands[i].cmd_fnct(n, buff);
 10097  0300  0842               	movf	(main@n+1)^(0+128),w
 10098  0301  0020               	movlb	0	; select bank0
 10099  0302  00A8               	movwf	cmd_tri@num+1
 10100  0303  0021               	movlb	1	; select bank1
 10101  0304  0841               	movf	main@n^(0+128),w
 10102  0305  0020               	movlb	0	; select bank0
 10103  0306  00A7               	movwf	cmd_tri@num
 10104  0307  30A3               	movlw	(low (main@buff| 0))& (0+255)
 10105  0308  0021               	movlb	1	; select bank1
 10106  0309  00A0               	movwf	??_main^(0+128)
 10107  030A  0820               	movf	??_main^(0+128),w
 10108  030B  0020               	movlb	0	; select bank0
 10109  030C  00A9               	movwf	cmd_tri@buffer
 10110  030D  0021               	movlb	1	; select bank1
 10111  030E  0838               	movf	(_main$3496+1)^(0+128),w
 10112  030F  008A               	movwf	10
 10113  0310  0837               	movf	_main$3496^(0+128),w
 10114  0311  000A               	callw
 10115  0312  3180               	pagesel	$
 10116                           
 10117                           ;main.c: 1190: break;
 10118  0313  2B21               	goto	l7144
 10119  0314                     l7142:
 10120  0314  3001               	movlw	1
 10121  0315  07BF               	addwf	main@i_2532^(0+128),f
 10122  0316  3000               	movlw	0
 10123  0317  3DC0               	addwfc	(main@i_2532+1)^(0+128),f
 10124  0318  3000               	movlw	0
 10125  0319  0240               	subwf	(main@i_2532+1)^(0+128),w
 10126  031A  300D               	movlw	13
 10127  031B  1903               	skipnz
 10128  031C  023F               	subwf	main@i_2532^(0+128),w
 10129  031D  1C03               	skipc
 10130  031E  2B20               	goto	u8341
 10131  031F  2B21               	goto	u8340
 10132  0320                     u8341:
 10133  0320  2ACE               	goto	l7136
 10134  0321                     u8340:
 10135  0321                     l7144:
 10136                           
 10137                           ;main.c: 1191: };main.c: 1192: };main.c: 1193: memset(buff, 0, sizeof buff);
 10138  0321  3000               	movlw	0
 10139  0322  00F2               	movwf	memset@c
 10140  0323  00F3               	movwf	memset@c+1
 10141  0324  3014               	movlw	20
 10142  0325  00F4               	movwf	memset@n
 10143  0326  3000               	movlw	0
 10144  0327  00F5               	movwf	memset@n+1
 10145  0328  30A3               	movlw	(low (main@buff| 0))& (0+255)
 10146  0329  3193  23FA  3180   	fcall	_memset
 10147  032C                     l7146:
 10148  032C                     l7148:
 10149                           
 10150                           ;main.c: 1195: n=0;
 10151  032C  0021               	movlb	1	; select bank1
 10152  032D  01C1               	clrf	main@n^(0+128)
 10153  032E  01C2               	clrf	(main@n+1)^(0+128)
 10154  032F                     l7150:
 10155                           
 10156                           ;main.c: 1196: };main.c: 1198: if(modeFlag == 0){
 10157  032F  0020               	movlb	0	; select bank0
 10158  0330  085C               	movf	_modeFlag,w
 10159  0331  045D               	iorwf	_modeFlag+1,w
 10160  0332  1D03               	btfss	3,2
 10161  0333  2B35               	goto	u8351
 10162  0334  2B36               	goto	u8350
 10163  0335                     u8351:
 10164  0335  2B3A               	goto	l7154
 10165  0336                     u8350:
 10166  0336                     l7152:
 10167                           
 10168                           ;main.c: 1199: checkFlags();
 10169  0336  3189  212E  3180   	fcall	_checkFlags
 10170                           
 10171                           ;main.c: 1200: } else if(modeFlag == 1){
 10172  0339  2AB8               	goto	l7126
 10173  033A                     l7154:
 10174  033A  035C               	decf	_modeFlag,w
 10175  033B  045D               	iorwf	_modeFlag+1,w
 10176  033C  1D03               	btfss	3,2
 10177  033D  2B3F               	goto	u8361
 10178  033E  2B40               	goto	u8360
 10179  033F                     u8361:
 10180  033F  2B44               	goto	l7158
 10181  0340                     u8360:
 10182  0340                     l7156:
 10183                           
 10184                           ;main.c: 1201: editClock();
 10185  0340  3189  2192  3180   	fcall	_editClock
 10186                           
 10187                           ;main.c: 1202: } else if(modeFlag == 2){
 10188  0343  2AB8               	goto	l7126
 10189  0344                     l7158:
 10190  0344  3002               	movlw	2
 10191  0345  065C               	xorwf	_modeFlag,w
 10192  0346  045D               	iorwf	_modeFlag+1,w
 10193  0347  1D03               	btfss	3,2
 10194  0348  2B4A               	goto	u8371
 10195  0349  2B4B               	goto	u8370
 10196  034A                     u8371:
 10197  034A  2B4F               	goto	l7162
 10198  034B                     u8370:
 10199  034B                     l7160:
 10200                           
 10201                           ;main.c: 1203: editTemp();
 10202  034B  3196  2602  3180   	fcall	_editTemp
 10203                           
 10204                           ;main.c: 1204: } else if(modeFlag == 3){
 10205  034E  2AB8               	goto	l7126
 10206  034F                     l7162:
 10207  034F  3003               	movlw	3
 10208  0350  065C               	xorwf	_modeFlag,w
 10209  0351  045D               	iorwf	_modeFlag+1,w
 10210  0352  1D03               	btfss	3,2
 10211  0353  2B55               	goto	u8381
 10212  0354  2B56               	goto	u8380
 10213  0355                     u8381:
 10214  0355  2B5A               	goto	l7166
 10215  0356                     u8380:
 10216  0356                     l7164:
 10217                           
 10218                           ;main.c: 1205: editLum();
 10219  0356  3195  25D0  3180   	fcall	_editLum
 10220                           
 10221                           ;main.c: 1206: } else if(modeFlag == 4){
 10222  0359  2AB8               	goto	l7126
 10223  035A                     l7166:
 10224  035A  3004               	movlw	4
 10225  035B  065C               	xorwf	_modeFlag,w
 10226  035C  045D               	iorwf	_modeFlag+1,w
 10227  035D  1D03               	btfss	3,2
 10228  035E  2B60               	goto	u8391
 10229  035F  2B61               	goto	u8390
 10230  0360                     u8391:
 10231  0360  2B65               	goto	l7170
 10232  0361                     u8390:
 10233  0361                     l7168:
 10234                           
 10235                           ;main.c: 1207: toggleAlarms();
 10236  0361  3195  25A2  3180   	fcall	_toggleAlarms
 10237                           
 10238                           ;main.c: 1208: } else if(modeFlag > 4){
 10239  0364  2AB8               	goto	l7126
 10240  0365                     l7170:
 10241  0365  085D               	movf	_modeFlag+1,w
 10242  0366  3A80               	xorlw	128
 10243  0367  0021               	movlb	1	; select bank1
 10244  0368  00A0               	movwf	??_main^(0+128)
 10245  0369  3080               	movlw	128
 10246  036A  0220               	subwf	??_main^(0+128),w
 10247  036B  1D03               	skipz
 10248  036C  2B70               	goto	u8405
 10249  036D  3005               	movlw	5
 10250  036E  0020               	movlb	0	; select bank0
 10251  036F  025C               	subwf	_modeFlag,w
 10252  0370                     u8405:
 10253  0370  1C03               	skipc
 10254  0371  2B73               	goto	u8401
 10255  0372  2B74               	goto	u8400
 10256  0373                     u8401:
 10257  0373  2AB8               	goto	l1538
 10258  0374                     u8400:
 10259  0374                     l7172:
 10260                           
 10261                           ;main.c: 1209: modeFlag = 0;
 10262  0374  0020               	movlb	0	; select bank0
 10263  0375  01DC               	clrf	_modeFlag
 10264  0376  01DD               	clrf	_modeFlag+1
 10265  0377  2AB8               	goto	l7126
 10266  0378  3180  2852         	ljmp	start
 10267  037A                     __end_of_main:
 10268                           
 10269                           	psect	text1
 10270  15A2                     __ptext1:	
 10271 ;; *************** function _toggleAlarms *****************
 10272 ;; Defined at:
 10273 ;;		line 765 in file "main.c"
 10274 ;; Parameters:    Size  Location     Type
 10275 ;;		None
 10276 ;; Auto vars:     Size  Location     Type
 10277 ;;		None
 10278 ;; Return value:  Size  Location     Type
 10279 ;;                  1    wreg      void 
 10280 ;; Registers used:
 10281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10282 ;; Tracked objects:
 10283 ;;		On entry : 0/0
 10284 ;;		On exit  : 0/0
 10285 ;;		Unchanged: 0/0
 10286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;Total ram usage:        1 bytes
 10292 ;; Hardware stack levels used:    1
 10293 ;; Hardware stack levels required when called:   10
 10294 ;; This function calls:
 10295 ;;		_checkFlags
 10296 ;;		_update_menuLCD
 10297 ;; This function is called by:
 10298 ;;		_main
 10299 ;; This function uses a non-reentrant model
 10300 ;;
 10301                           
 10302                           
 10303                           ;psect for function _toggleAlarms
 10304  15A2                     _toggleAlarms:
 10305  15A2                     l1421:	
 10306                           ;incstack = 0
 10307                           ; Regs used in _toggleAlarms: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10308                           ;main.c: 767: while(1){
 10309                           
 10310                           
 10311                           ;main.c: 768: if(PORTCbits.RC5 == 0){
 10312  15A2  0020               	movlb	0	; select bank0
 10313  15A3  1A8E               	btfsc	14,5	;volatile
 10314  15A4  2DA6               	goto	u7811
 10315  15A5  2DA7               	goto	u7810
 10316  15A6                     u7811:
 10317  15A6  2DC2               	goto	l6768
 10318  15A7                     u7810:
 10319  15A7                     l6760:
 10320                           
 10321                           ;main.c: 769: if(ALAF == 'A'){
 10322  15A7  3041               	movlw	65
 10323  15A8  0667               	xorwf	_ALAF,w
 10324  15A9  1D03               	btfss	3,2
 10325  15AA  2DAC               	goto	u7821
 10326  15AB  2DAD               	goto	u7820
 10327  15AC                     u7821:
 10328  15AC  2DB2               	goto	l6764
 10329  15AD                     u7820:
 10330  15AD                     l6762:
 10331                           
 10332                           ;main.c: 770: ALAF = 'a';
 10333  15AD  3061               	movlw	97
 10334  15AE  00D4               	movwf	??_toggleAlarms
 10335  15AF  0854               	movf	??_toggleAlarms,w
 10336  15B0  00E7               	movwf	_ALAF
 10337                           
 10338                           ;main.c: 771: } else {
 10339  15B1  2DB6               	goto	l1424
 10340  15B2                     l6764:
 10341                           
 10342                           ;main.c: 772: ALAF = 'A';
 10343  15B2  3041               	movlw	65
 10344  15B3  00D4               	movwf	??_toggleAlarms
 10345  15B4  0854               	movf	??_toggleAlarms,w
 10346  15B5  00E7               	movwf	_ALAF
 10347  15B6                     l1424:
 10348                           
 10349                           ;main.c: 773: };main.c: 774: _delay((unsigned long)((100)*(1000000/4000.0)));
 10350  15B6  3021               	movlw	33
 10351  15B7  0020               	movlb	0	; select bank0
 10352  15B8  00D4               	movwf	??_toggleAlarms
 10353  15B9  3076               	movlw	118
 10354  15BA                     u8417:
 10355  15BA  0B89               	decfsz	9,f
 10356  15BB  2DBA               	goto	u8417
 10357  15BC  0BD4               	decfsz	??_toggleAlarms,f
 10358  15BD  2DBA               	goto	u8417
 10359  15BE  0000               	nop
 10360  15BF                     l6766:
 10361                           
 10362                           ;main.c: 775: update_menuLCD();
 10363  15BF  3183  237A  3195   	fcall	_update_menuLCD
 10364  15C2                     l6768:
 10365                           
 10366                           ;main.c: 776: };main.c: 777: checkFlags();
 10367  15C2  3189  212E  3195   	fcall	_checkFlags
 10368  15C5                     l6770:
 10369                           
 10370                           ;main.c: 778: if(modeFlag != 4){
 10371  15C5  3004               	movlw	4
 10372  15C6  0020               	movlb	0	; select bank0
 10373  15C7  065C               	xorwf	_modeFlag,w
 10374  15C8  045D               	iorwf	_modeFlag+1,w
 10375  15C9  1903               	btfsc	3,2
 10376  15CA  2DCC               	goto	u7831
 10377  15CB  2DCD               	goto	u7830
 10378  15CC                     u7831:
 10379  15CC  2DA2               	goto	l1421
 10380  15CD                     u7830:
 10381  15CD                     l6772:
 10382                           
 10383                           ;main.c: 779: modeFlag = 0;
 10384  15CD  01DC               	clrf	_modeFlag
 10385  15CE  01DD               	clrf	_modeFlag+1
 10386  15CF                     l1428:	
 10387                           ;main.c: 780: break;
 10388                           
 10389  15CF  0008               	return
 10390  15D0                     __end_of_toggleAlarms:
 10391                           
 10392                           	psect	text2
 10393  13FA                     __ptext2:	
 10394 ;; *************** function _memset *****************
 10395 ;; Defined at:
 10396 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;  p1              1    wreg     PTR void 
 10399 ;;		 -> main@buff(20), 
 10400 ;;  c               2    2[COMMON] int 
 10401 ;;  n               2    4[COMMON] unsigned int 
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;  p1              1    8[COMMON] PTR void 
 10404 ;;		 -> main@buff(20), 
 10405 ;;  p               1    7[COMMON] PTR unsigned char 
 10406 ;;		 -> main@buff(20), 
 10407 ;; Return value:  Size  Location     Type
 10408 ;;                  1    wreg      PTR void 
 10409 ;; Registers used:
 10410 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10411 ;; Tracked objects:
 10412 ;;		On entry : 0/0
 10413 ;;		On exit  : 0/0
 10414 ;;		Unchanged: 0/0
 10415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10416 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;Total ram usage:        7 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:    4
 10423 ;; This function calls:
 10424 ;;		Nothing
 10425 ;; This function is called by:
 10426 ;;		_main
 10427 ;; This function uses a non-reentrant model
 10428 ;;
 10429                           
 10430                           
 10431                           ;psect for function _memset
 10432  13FA                     _memset:
 10433                           
 10434                           ;incstack = 0
 10435                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10436                           ;memset@p1 stored from wreg
 10437  13FA  00F8               	movwf	memset@p1
 10438  13FB                     l5778:
 10439  13FB  0878               	movf	memset@p1,w
 10440  13FC  00F6               	movwf	??_memset
 10441  13FD  0876               	movf	??_memset,w
 10442  13FE  00F7               	movwf	memset@p
 10443  13FF  2C0B               	goto	l5784
 10444  1400                     l5780:
 10445  1400  0872               	movf	memset@c,w
 10446  1401  00F6               	movwf	??_memset
 10447  1402  0877               	movf	memset@p,w
 10448  1403  0086               	movwf	6
 10449  1404  0187               	clrf	7
 10450  1405  0876               	movf	??_memset,w
 10451  1406  0081               	movwf	1
 10452  1407                     l5782:
 10453  1407  3001               	movlw	1
 10454  1408  00F6               	movwf	??_memset
 10455  1409  0876               	movf	??_memset,w
 10456  140A  07F7               	addwf	memset@p,f
 10457  140B                     l5784:
 10458  140B  3001               	movlw	1
 10459  140C  02F4               	subwf	memset@n,f
 10460  140D  3000               	movlw	0
 10461  140E  3BF5               	subwfb	memset@n+1,f
 10462  140F  0A74               	incf	memset@n,w
 10463  1410  1D03               	skipz
 10464  1411  2C16               	goto	u5711
 10465  1412  0A75               	incf	memset@n+1,w
 10466  1413  1D03               	btfss	3,2
 10467  1414  2C16               	goto	u5711
 10468  1415  2C17               	goto	u5710
 10469  1416                     u5711:
 10470  1416  2C00               	goto	l5780
 10471  1417                     u5710:
 10472  1417                     l2226:
 10473  1417  0008               	return
 10474  1418                     __end_of_memset:
 10475                           
 10476                           	psect	text3
 10477  1267                     __ptext3:	
 10478 ;; *************** function _i2c1_driver_open *****************
 10479 ;; Defined at:
 10480 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;		None
 10483 ;; Auto vars:     Size  Location     Type
 10484 ;;		None
 10485 ;; Return value:  Size  Location     Type
 10486 ;;		None               void
 10487 ;; Registers used:
 10488 ;;		wreg, status,2
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;Total ram usage:        0 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; Hardware stack levels required when called:    4
 10501 ;; This function calls:
 10502 ;;		Nothing
 10503 ;; This function is called by:
 10504 ;;		_main
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           
 10509                           ;psect for function _i2c1_driver_open
 10510  1267                     _i2c1_driver_open:
 10511  1267                     l5300:	
 10512                           ;incstack = 0
 10513                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
 10514                           
 10515                           
 10516                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
 10517  1267  0023               	movlb	3	; select bank3
 10518  1268  1A90               	btfsc	16,5	;volatile
 10519  1269  2A6B               	goto	u4821
 10520  126A  2A6C               	goto	u4820
 10521  126B                     u4821:
 10522  126B  2A72               	goto	l253
 10523  126C                     u4820:
 10524  126C                     l5302:
 10525                           
 10526                           ;i2c1_driver.c: 86: {;i2c1_driver.c: 87: SSP1STAT = 0x00;
 10527  126C  018F               	clrf	15	;volatile
 10528  126D                     l5304:
 10529                           
 10530                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
 10531  126D  3028               	movlw	40
 10532  126E  0090               	movwf	16	;volatile
 10533  126F                     l5306:
 10534                           
 10535                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
 10536  126F  0191               	clrf	17	;volatile
 10537                           
 10538                           ;i2c1_driver.c: 90: SSP1ADD = 0x3;
 10539  1270  3003               	movlw	3
 10540  1271  008D               	movwf	13	;volatile
 10541  1272                     l253:
 10542  1272  0008               	return
 10543  1273                     __end_of_i2c1_driver_open:
 10544                           
 10545                           	psect	text4
 10546  11F4                     __ptext4:	
 10547 ;; *************** function _getch *****************
 10548 ;; Defined at:
 10549 ;;		line 171 in file "mcc_generated_files/eusart.c"
 10550 ;; Parameters:    Size  Location     Type
 10551 ;;		None
 10552 ;; Auto vars:     Size  Location     Type
 10553 ;;		None
 10554 ;; Return value:  Size  Location     Type
 10555 ;;                  1    wreg      unsigned char 
 10556 ;; Registers used:
 10557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;Total ram usage:        0 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; Hardware stack levels required when called:    5
 10570 ;; This function calls:
 10571 ;;		_EUSART_Read
 10572 ;; This function is called by:
 10573 ;;		_main
 10574 ;; This function uses a non-reentrant model
 10575 ;;
 10576                           
 10577                           
 10578                           ;psect for function _getch
 10579  11F4                     _getch:
 10580  11F4                     l5328:	
 10581                           ;incstack = 0
 10582                           ; Regs used in _getch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10583                           
 10584                           
 10585                           ;eusart.c: 173: return EUSART_Read();
 10586  11F4  3194  24E0  3191   	fcall	_EUSART_Read
 10587  11F7                     l839:
 10588  11F7  0008               	return
 10589  11F8                     __end_of_getch:
 10590                           
 10591                           	psect	text5
 10592  14E0                     __ptext5:	
 10593 ;; *************** function _EUSART_Read *****************
 10594 ;; Defined at:
 10595 ;;		line 128 in file "mcc_generated_files/eusart.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;		None
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;  readValue       1    3[COMMON] unsigned char 
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  1    wreg      unsigned char 
 10602 ;; Registers used:
 10603 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;Total ram usage:        2 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:    4
 10616 ;; This function calls:
 10617 ;;		Nothing
 10618 ;; This function is called by:
 10619 ;;		_getch
 10620 ;; This function uses a non-reentrant model
 10621 ;;
 10622                           
 10623                           
 10624                           ;psect for function _EUSART_Read
 10625  14E0                     _EUSART_Read:
 10626  14E0                     l5146:	
 10627                           ;incstack = 0
 10628                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 10629                           
 10630  14E0                     l5148:	
 10631                           ;eusart.c: 132: while(0 == eusartRxCount)
 10632                           
 10633  14E0  0020               	movlb	0	; select bank0
 10634  14E1  0868               	movf	_eusartRxCount,w	;volatile
 10635  14E2  1903               	btfsc	3,2
 10636  14E3  2CE5               	goto	u4561
 10637  14E4  2CE6               	goto	u4560
 10638  14E5                     u4561:
 10639  14E5  2CE0               	goto	l5148
 10640  14E6                     u4560:
 10641  14E6                     l5150:
 10642                           
 10643                           ;eusart.c: 134: };eusart.c: 136: readValue = eusartRxBuffer[eusartRxTail++];
 10644  14E6  0869               	movf	_eusartRxTail,w
 10645  14E7  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 10646  14E8  0086               	movwf	6
 10647  14E9  3002               	movlw	2	; select bank4/5
 10648  14EA  0087               	movwf	7
 10649  14EB  0801               	movf	1,w
 10650  14EC  00F2               	movwf	??_EUSART_Read
 10651  14ED  0872               	movf	??_EUSART_Read,w
 10652  14EE  00F3               	movwf	EUSART_Read@readValue
 10653  14EF                     l5152:
 10654  14EF  3001               	movlw	1
 10655  14F0  00F2               	movwf	??_EUSART_Read
 10656  14F1  0872               	movf	??_EUSART_Read,w
 10657  14F2  07E9               	addwf	_eusartRxTail,f	;volatile
 10658  14F3                     l5154:
 10659                           
 10660                           ;eusart.c: 137: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 10661  14F3  3040               	movlw	64
 10662  14F4  0269               	subwf	_eusartRxTail,w	;volatile
 10663  14F5  1C03               	skipc
 10664  14F6  2CF8               	goto	u4571
 10665  14F7  2CF9               	goto	u4570
 10666  14F8                     u4571:
 10667  14F8  2CFA               	goto	l5158
 10668  14F9                     u4570:
 10669  14F9                     l5156:
 10670                           
 10671                           ;eusart.c: 138: {;eusart.c: 139: eusartRxTail = 0;
 10672  14F9  01E9               	clrf	_eusartRxTail	;volatile
 10673  14FA                     l5158:
 10674                           
 10675                           ;eusart.c: 140: };eusart.c: 141: PIE3bits.RCIE = 0;
 10676  14FA  002E               	movlb	14	; select bank14
 10677  14FB  1299               	bcf	25,5	;volatile
 10678  14FC                     l5160:
 10679                           
 10680                           ;eusart.c: 142: eusartRxCount--;
 10681  14FC  3001               	movlw	1
 10682  14FD  0020               	movlb	0	; select bank0
 10683  14FE  02E8               	subwf	_eusartRxCount,f	;volatile
 10684  14FF                     l5162:
 10685                           
 10686                           ;eusart.c: 143: PIE3bits.RCIE = 1;
 10687  14FF  002E               	movlb	14	; select bank14
 10688  1500  1699               	bsf	25,5	;volatile
 10689  1501                     l5164:
 10690                           
 10691                           ;eusart.c: 145: return readValue;
 10692  1501  0873               	movf	EUSART_Read@readValue,w
 10693  1502                     l827:
 10694  1502  0008               	return
 10695  1503                     __end_of_EUSART_Read:
 10696                           
 10697                           	psect	text6
 10698  1602                     __ptext6:	
 10699 ;; *************** function _editTemp *****************
 10700 ;; Defined at:
 10701 ;;		line 721 in file "main.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;		None
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;		None
 10706 ;; Return value:  Size  Location     Type
 10707 ;;                  1    wreg      void 
 10708 ;; Registers used:
 10709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;Total ram usage:        1 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:   10
 10722 ;; This function calls:
 10723 ;;		_checkFlags
 10724 ;;		_update_menuLCD
 10725 ;; This function is called by:
 10726 ;;		_main
 10727 ;; This function uses a non-reentrant model
 10728 ;;
 10729                           
 10730                           
 10731                           ;psect for function _editTemp
 10732  1602                     _editTemp:
 10733  1602                     l1399:	
 10734                           ;incstack = 0
 10735                           ; Regs used in _editTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10736                           ;main.c: 722: while(1){
 10737                           
 10738                           
 10739                           ;main.c: 723: if(PORTCbits.RC5 == 0){
 10740  1602  0020               	movlb	0	; select bank0
 10741  1603  1A8E               	btfsc	14,5	;volatile
 10742  1604  2E06               	goto	u7731
 10743  1605  2E07               	goto	u7730
 10744  1606                     u7731:
 10745  1606  2E27               	goto	l6734
 10746  1607                     u7730:
 10747  1607                     l6720:
 10748                           
 10749                           ;main.c: 724: if(editingTempAlarm == 0){
 10750  1607  0864               	movf	_editingTempAlarm,w
 10751  1608  1D03               	btfss	3,2
 10752  1609  2E0B               	goto	u7741
 10753  160A  2E0C               	goto	u7740
 10754  160B                     u7741:
 10755  160B  2E0F               	goto	l6724
 10756  160C                     u7740:
 10757  160C                     l6722:
 10758                           
 10759                           ;main.c: 725: editingTempAlarm = 1;
 10760  160C  01E4               	clrf	_editingTempAlarm
 10761  160D  0AE4               	incf	_editingTempAlarm,f
 10762                           
 10763                           ;main.c: 726: } else {
 10764  160E  2E1B               	goto	l6730
 10765  160F                     l6724:
 10766                           
 10767                           ;main.c: 727: tempAlarm.alarmTemp++;
 10768  160F  3001               	movlw	1
 10769  1610  00D4               	movwf	??_editTemp
 10770  1611  0854               	movf	??_editTemp,w
 10771  1612  0021               	movlb	1	; select bank1
 10772  1613  07C9               	addwf	_tempAlarm^(0+128),f
 10773  1614                     l6726:
 10774                           
 10775                           ;main.c: 728: if(tempAlarm.alarmTemp > 50){
 10776  1614  3033               	movlw	51
 10777  1615  0249               	subwf	_tempAlarm^(0+128),w
 10778  1616  1C03               	skipc
 10779  1617  2E19               	goto	u7751
 10780  1618  2E1A               	goto	u7750
 10781  1619                     u7751:
 10782  1619  2E1B               	goto	l6730
 10783  161A                     u7750:
 10784  161A                     l6728:
 10785                           
 10786                           ;main.c: 729: tempAlarm.alarmTemp = 0;
 10787  161A  01C9               	clrf	_tempAlarm^(0+128)
 10788  161B                     l6730:
 10789                           
 10790                           ;main.c: 730: };main.c: 731: };main.c: 732: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10791  161B  3021               	movlw	33
 10792  161C  0020               	movlb	0	; select bank0
 10793  161D  00D4               	movwf	??_editTemp
 10794  161E  3076               	movlw	118
 10795  161F                     u8427:
 10796  161F  0B89               	decfsz	9,f
 10797  1620  2E1F               	goto	u8427
 10798  1621  0BD4               	decfsz	??_editTemp,f
 10799  1622  2E1F               	goto	u8427
 10800  1623  0000               	nop
 10801  1624                     l6732:
 10802                           
 10803                           ;main.c: 733: update_menuLCD();
 10804  1624  3183  237A  3196   	fcall	_update_menuLCD
 10805  1627                     l6734:
 10806                           
 10807                           ;main.c: 734: };main.c: 735: checkFlags();
 10808  1627  3189  212E  3196   	fcall	_checkFlags
 10809  162A                     l6736:
 10810                           
 10811                           ;main.c: 736: if(modeFlag != 2){
 10812  162A  3002               	movlw	2
 10813  162B  0020               	movlb	0	; select bank0
 10814  162C  065C               	xorwf	_modeFlag,w
 10815  162D  045D               	iorwf	_modeFlag+1,w
 10816  162E  1903               	btfsc	3,2
 10817  162F  2E31               	goto	u7761
 10818  1630  2E32               	goto	u7760
 10819  1631                     u7761:
 10820  1631  2E02               	goto	l1399
 10821  1632                     u7760:
 10822  1632                     l6738:
 10823                           
 10824                           ;main.c: 737: editingTempAlarm = 0;
 10825  1632  01E4               	clrf	_editingTempAlarm
 10826  1633                     l1407:	
 10827                           ;main.c: 738: break;
 10828                           
 10829  1633  0008               	return
 10830  1634                     __end_of_editTemp:
 10831                           
 10832                           	psect	text7
 10833  15D0                     __ptext7:	
 10834 ;; *************** function _editLum *****************
 10835 ;; Defined at:
 10836 ;;		line 743 in file "main.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;		None
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;		None
 10841 ;; Return value:  Size  Location     Type
 10842 ;;                  1    wreg      void 
 10843 ;; Registers used:
 10844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10845 ;; Tracked objects:
 10846 ;;		On entry : 0/0
 10847 ;;		On exit  : 0/0
 10848 ;;		Unchanged: 0/0
 10849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;Total ram usage:        1 bytes
 10855 ;; Hardware stack levels used:    1
 10856 ;; Hardware stack levels required when called:   10
 10857 ;; This function calls:
 10858 ;;		_checkFlags
 10859 ;;		_update_menuLCD
 10860 ;; This function is called by:
 10861 ;;		_main
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           
 10866                           ;psect for function _editLum
 10867  15D0                     _editLum:
 10868  15D0                     l1410:	
 10869                           ;incstack = 0
 10870                           ; Regs used in _editLum: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10871                           ;main.c: 744: while(1){
 10872                           
 10873                           
 10874                           ;main.c: 745: if(PORTCbits.RC5 == 0){
 10875  15D0  0020               	movlb	0	; select bank0
 10876  15D1  1A8E               	btfsc	14,5	;volatile
 10877  15D2  2DD4               	goto	u7771
 10878  15D3  2DD5               	goto	u7770
 10879  15D4                     u7771:
 10880  15D4  2DF5               	goto	l6754
 10881  15D5                     u7770:
 10882  15D5                     l6740:
 10883                           
 10884                           ;main.c: 746: if(editingLumAlarm == 0){
 10885  15D5  0863               	movf	_editingLumAlarm,w
 10886  15D6  1D03               	btfss	3,2
 10887  15D7  2DD9               	goto	u7781
 10888  15D8  2DDA               	goto	u7780
 10889  15D9                     u7781:
 10890  15D9  2DDD               	goto	l6744
 10891  15DA                     u7780:
 10892  15DA                     l6742:
 10893                           
 10894                           ;main.c: 747: editingLumAlarm = 1;
 10895  15DA  01E3               	clrf	_editingLumAlarm
 10896  15DB  0AE3               	incf	_editingLumAlarm,f
 10897                           
 10898                           ;main.c: 748: } else {
 10899  15DC  2DE9               	goto	l6750
 10900  15DD                     l6744:
 10901                           
 10902                           ;main.c: 749: lumAlarm.alarmLum++;
 10903  15DD  3001               	movlw	1
 10904  15DE  00D4               	movwf	??_editLum
 10905  15DF  0854               	movf	??_editLum,w
 10906  15E0  0021               	movlb	1	; select bank1
 10907  15E1  07C6               	addwf	_lumAlarm^(0+128),f
 10908  15E2                     l6746:
 10909                           
 10910                           ;main.c: 750: if(lumAlarm.alarmLum > 7){
 10911  15E2  3008               	movlw	8
 10912  15E3  0246               	subwf	_lumAlarm^(0+128),w
 10913  15E4  1C03               	skipc
 10914  15E5  2DE7               	goto	u7791
 10915  15E6  2DE8               	goto	u7790
 10916  15E7                     u7791:
 10917  15E7  2DE9               	goto	l6750
 10918  15E8                     u7790:
 10919  15E8                     l6748:
 10920                           
 10921                           ;main.c: 751: lumAlarm.alarmLum = 0;
 10922  15E8  01C6               	clrf	_lumAlarm^(0+128)
 10923  15E9                     l6750:
 10924                           
 10925                           ;main.c: 752: };main.c: 753: };main.c: 754: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 10926  15E9  3021               	movlw	33
 10927  15EA  0020               	movlb	0	; select bank0
 10928  15EB  00D4               	movwf	??_editLum
 10929  15EC  3076               	movlw	118
 10930  15ED                     u8437:
 10931  15ED  0B89               	decfsz	9,f
 10932  15EE  2DED               	goto	u8437
 10933  15EF  0BD4               	decfsz	??_editLum,f
 10934  15F0  2DED               	goto	u8437
 10935  15F1  0000               	nop
 10936  15F2                     l6752:
 10937                           
 10938                           ;main.c: 755: update_menuLCD();
 10939  15F2  3183  237A  3195   	fcall	_update_menuLCD
 10940  15F5                     l6754:
 10941                           
 10942                           ;main.c: 756: };main.c: 757: checkFlags();
 10943  15F5  3189  212E  3195   	fcall	_checkFlags
 10944  15F8                     l6756:
 10945                           
 10946                           ;main.c: 758: if(modeFlag != 3){
 10947  15F8  3003               	movlw	3
 10948  15F9  0020               	movlb	0	; select bank0
 10949  15FA  065C               	xorwf	_modeFlag,w
 10950  15FB  045D               	iorwf	_modeFlag+1,w
 10951  15FC  1903               	btfsc	3,2
 10952  15FD  2DFF               	goto	u7801
 10953  15FE  2E00               	goto	u7800
 10954  15FF                     u7801:
 10955  15FF  2DD0               	goto	l1410
 10956  1600                     u7800:
 10957  1600                     l6758:
 10958                           
 10959                           ;main.c: 759: editingLumAlarm = 0;
 10960  1600  01E3               	clrf	_editingLumAlarm
 10961  1601                     l1418:	
 10962                           ;main.c: 760: break;
 10963                           
 10964  1601  0008               	return
 10965  1602                     __end_of_editLum:
 10966                           
 10967                           	psect	text8
 10968  0992                     __ptext8:	
 10969 ;; *************** function _editClock *****************
 10970 ;; Defined at:
 10971 ;;		line 683 in file "main.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;		None
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;		None
 10976 ;; Return value:  Size  Location     Type
 10977 ;;                  1    wreg      void 
 10978 ;; Registers used:
 10979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;Total ram usage:        1 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; Hardware stack levels required when called:   10
 10992 ;; This function calls:
 10993 ;;		_checkFlags
 10994 ;;		_update_menuLCD
 10995 ;; This function is called by:
 10996 ;;		_main
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           
 11001                           ;psect for function _editClock
 11002  0992                     _editClock:
 11003  0992                     l1378:	
 11004                           ;incstack = 0
 11005                           ; Regs used in _editClock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11006                           ;main.c: 685: while(1){
 11007                           
 11008                           
 11009                           ;main.c: 686: if(PORTCbits.RC5 == 0){
 11010  0992  0020               	movlb	0	; select bank0
 11011  0993  1A8E               	btfsc	14,5	;volatile
 11012  0994  2996               	goto	u7641
 11013  0995  2997               	goto	u7640
 11014  0996                     u7641:
 11015  0996  29E9               	goto	l6714
 11016  0997                     u7640:
 11017  0997                     l6682:
 11018                           
 11019                           ;main.c: 687: if(editingClockAlarm == 0){
 11020  0997  085E               	movf	_editingClockAlarm,w
 11021  0998  045F               	iorwf	_editingClockAlarm+1,w
 11022  0999  1D03               	btfss	3,2
 11023  099A  299C               	goto	u7651
 11024  099B  299D               	goto	u7650
 11025  099C                     u7651:
 11026  099C  29A2               	goto	l6686
 11027  099D                     u7650:
 11028  099D                     l6684:
 11029                           
 11030                           ;main.c: 688: editingClockAlarm = 1;
 11031  099D  3001               	movlw	1
 11032  099E  00DE               	movwf	_editingClockAlarm
 11033  099F  3000               	movlw	0
 11034  09A0  00DF               	movwf	_editingClockAlarm+1
 11035                           
 11036                           ;main.c: 690: } else if(editingClockAlarm == 1){
 11037  09A1  29DD               	goto	l6710
 11038  09A2                     l6686:
 11039  09A2  035E               	decf	_editingClockAlarm,w
 11040  09A3  045F               	iorwf	_editingClockAlarm+1,w
 11041  09A4  1D03               	btfss	3,2
 11042  09A5  29A7               	goto	u7661
 11043  09A6  29A8               	goto	u7660
 11044  09A7                     u7661:
 11045  09A7  29B5               	goto	l6694
 11046  09A8                     u7660:
 11047  09A8                     l6688:
 11048                           
 11049                           ;main.c: 691: if(clkAlarm.alarmVal.h >= 23){
 11050  09A8  3017               	movlw	23
 11051  09A9  0255               	subwf	_clkAlarm,w
 11052  09AA  1C03               	skipc
 11053  09AB  29AD               	goto	u7671
 11054  09AC  29AE               	goto	u7670
 11055  09AD                     u7671:
 11056  09AD  29B0               	goto	l6692
 11057  09AE                     u7670:
 11058  09AE                     l6690:
 11059                           
 11060                           ;main.c: 692: clkAlarm.alarmVal.h = 0;
 11061  09AE  01D5               	clrf	_clkAlarm
 11062                           
 11063                           ;main.c: 693: } else{
 11064  09AF  29DD               	goto	l6710
 11065  09B0                     l6692:
 11066                           
 11067                           ;main.c: 694: clkAlarm.alarmVal.h++;
 11068  09B0  3001               	movlw	1
 11069  09B1  00D4               	movwf	??_editClock
 11070  09B2  0854               	movf	??_editClock,w
 11071  09B3  07D5               	addwf	_clkAlarm,f
 11072  09B4  29DD               	goto	l6710
 11073  09B5                     l6694:
 11074  09B5  3002               	movlw	2
 11075  09B6  065E               	xorwf	_editingClockAlarm,w
 11076  09B7  045F               	iorwf	_editingClockAlarm+1,w
 11077  09B8  1D03               	btfss	3,2
 11078  09B9  29BB               	goto	u7681
 11079  09BA  29BC               	goto	u7680
 11080  09BB                     u7681:
 11081  09BB  29C9               	goto	l6702
 11082  09BC                     u7680:
 11083  09BC                     l6696:
 11084                           
 11085                           ;main.c: 697: if(clkAlarm.alarmVal.m == 59){
 11086  09BC  303B               	movlw	59
 11087  09BD  0656               	xorwf	_clkAlarm+1,w
 11088  09BE  1D03               	btfss	3,2
 11089  09BF  29C1               	goto	u7691
 11090  09C0  29C2               	goto	u7690
 11091  09C1                     u7691:
 11092  09C1  29C4               	goto	l6700
 11093  09C2                     u7690:
 11094  09C2                     l6698:
 11095                           
 11096                           ;main.c: 698: clkAlarm.alarmVal.m = 0;
 11097  09C2  01D6               	clrf	_clkAlarm+1
 11098                           
 11099                           ;main.c: 699: } else{
 11100  09C3  29DD               	goto	l6710
 11101  09C4                     l6700:
 11102                           
 11103                           ;main.c: 700: clkAlarm.alarmVal.m++;
 11104  09C4  3001               	movlw	1
 11105  09C5  00D4               	movwf	??_editClock
 11106  09C6  0854               	movf	??_editClock,w
 11107  09C7  07D6               	addwf	_clkAlarm+1,f
 11108  09C8  29DD               	goto	l6710
 11109  09C9                     l6702:
 11110  09C9  3003               	movlw	3
 11111  09CA  065E               	xorwf	_editingClockAlarm,w
 11112  09CB  045F               	iorwf	_editingClockAlarm+1,w
 11113  09CC  1D03               	btfss	3,2
 11114  09CD  29CF               	goto	u7701
 11115  09CE  29D0               	goto	u7700
 11116  09CF                     u7701:
 11117  09CF  29DD               	goto	l1385
 11118  09D0                     u7700:
 11119  09D0                     l6704:
 11120                           
 11121                           ;main.c: 703: if(clkAlarm.alarmVal.s == 59){
 11122  09D0  303B               	movlw	59
 11123  09D1  0657               	xorwf	_clkAlarm+2,w
 11124  09D2  1D03               	btfss	3,2
 11125  09D3  29D5               	goto	u7711
 11126  09D4  29D6               	goto	u7710
 11127  09D5                     u7711:
 11128  09D5  29D8               	goto	l6708
 11129  09D6                     u7710:
 11130  09D6                     l6706:
 11131                           
 11132                           ;main.c: 704: clkAlarm.alarmVal.s = 0;
 11133  09D6  01D7               	clrf	_clkAlarm+2
 11134                           
 11135                           ;main.c: 705: } else{
 11136  09D7  29DD               	goto	l6710
 11137  09D8                     l6708:
 11138                           
 11139                           ;main.c: 706: clkAlarm.alarmVal.s++;
 11140  09D8  3001               	movlw	1
 11141  09D9  00D4               	movwf	??_editClock
 11142  09DA  0854               	movf	??_editClock,w
 11143  09DB  07D7               	addwf	_clkAlarm+2,f
 11144  09DC  29DD               	goto	l6710
 11145  09DD                     l1385:
 11146  09DD                     l6710:
 11147                           
 11148                           ;main.c: 707: };main.c: 708: };main.c: 709: _delay((unsigned long)((100)*(1000000/4000.0
      +                          )));
 11149  09DD  3021               	movlw	33
 11150  09DE  0020               	movlb	0	; select bank0
 11151  09DF  00D4               	movwf	??_editClock
 11152  09E0  3076               	movlw	118
 11153  09E1                     u8447:
 11154  09E1  0B89               	decfsz	9,f
 11155  09E2  29E1               	goto	u8447
 11156  09E3  0BD4               	decfsz	??_editClock,f
 11157  09E4  29E1               	goto	u8447
 11158  09E5  0000               	nop
 11159  09E6                     l6712:
 11160                           
 11161                           ;main.c: 710: update_menuLCD();
 11162  09E6  3183  237A  3189   	fcall	_update_menuLCD
 11163  09E9                     l6714:
 11164                           
 11165                           ;main.c: 711: };main.c: 712: checkFlags();
 11166  09E9  3189  212E  3189   	fcall	_checkFlags
 11167  09EC                     l6716:
 11168                           
 11169                           ;main.c: 713: if(modeFlag != 1){
 11170  09EC  0020               	movlb	0	; select bank0
 11171  09ED  035C               	decf	_modeFlag,w
 11172  09EE  045D               	iorwf	_modeFlag+1,w
 11173  09EF  1903               	btfsc	3,2
 11174  09F0  29F2               	goto	u7721
 11175  09F1  29F3               	goto	u7720
 11176  09F2                     u7721:
 11177  09F2  2992               	goto	l1378
 11178  09F3                     u7720:
 11179  09F3                     l6718:
 11180                           
 11181                           ;main.c: 714: editingClockAlarm = 0;
 11182  09F3  01DE               	clrf	_editingClockAlarm
 11183  09F4  01DF               	clrf	_editingClockAlarm+1
 11184  09F5                     l1396:	
 11185                           ;main.c: 715: break;
 11186                           
 11187  09F5  0008               	return
 11188  09F6                     __end_of_editClock:
 11189                           
 11190                           	psect	text9
 11191  092E                     __ptext9:	
 11192 ;; *************** function _checkFlags *****************
 11193 ;; Defined at:
 11194 ;;		line 649 in file "main.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;		None
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      void 
 11201 ;; Registers used:
 11202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;Total ram usage:        1 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    9
 11215 ;; This function calls:
 11216 ;;		_PWM6_LoadDutyValue
 11217 ;;		_PWM_Output_D4_Enable
 11218 ;;		_S1button
 11219 ;;		_TMR2_StartTimer
 11220 ;;		_monitoring_TEMP_LUM
 11221 ;;		_update_menuLCD
 11222 ;;		_wirteEEPROMinit
 11223 ;; This function is called by:
 11224 ;;		_editClock
 11225 ;;		_editTemp
 11226 ;;		_editLum
 11227 ;;		_toggleAlarms
 11228 ;;		_main
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           
 11233                           ;psect for function _checkFlags
 11234  092E                     _checkFlags:
 11235  092E                     l6526:	
 11236                           ;incstack = 0
 11237                           ; Regs used in _checkFlags: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11238                           
 11239                           
 11240                           ;main.c: 650: if(writeEEPROM_flag){
 11241  092E  0021               	movlb	1	; select bank1
 11242  092F  0853               	movf	_writeEEPROM_flag^(0+128),w
 11243  0930  1903               	btfsc	3,2
 11244  0931  2933               	goto	u7301
 11245  0932  2934               	goto	u7300
 11246  0933                     u7301:
 11247  0933  2939               	goto	l6532
 11248  0934                     u7300:
 11249  0934                     l6528:
 11250                           
 11251                           ;main.c: 651: wirteEEPROMinit();
 11252  0934  318A  22D6  3189   	fcall	_wirteEEPROMinit
 11253  0937                     l6530:
 11254                           
 11255                           ;main.c: 652: writeEEPROM_flag = 0;
 11256  0937  0021               	movlb	1	; select bank1
 11257  0938  01D3               	clrf	_writeEEPROM_flag^(0+128)
 11258  0939                     l6532:
 11259                           
 11260                           ;main.c: 653: };main.c: 654: if(flagS1pushed){
 11261  0939  0856               	movf	_flagS1pushed^(0+128),w
 11262  093A  1903               	btfsc	3,2
 11263  093B  293D               	goto	u7311
 11264  093C  293E               	goto	u7310
 11265  093D                     u7311:
 11266  093D  2948               	goto	l6542
 11267  093E                     u7310:
 11268  093E                     l6534:
 11269                           
 11270                           ;main.c: 655: S1button();
 11271  093E  3188  20D1  3189   	fcall	_S1button
 11272  0941                     l6536:
 11273                           
 11274                           ;main.c: 656: flagS1pushed=0;
 11275  0941  0021               	movlb	1	; select bank1
 11276  0942  01D6               	clrf	_flagS1pushed^(0+128)
 11277  0943                     l6538:
 11278                           
 11279                           ;main.c: 657: update_menuLCD();
 11280  0943  3183  237A  3189   	fcall	_update_menuLCD
 11281  0946                     l6540:
 11282                           
 11283                           ;main.c: 658: updateLCD=0;
 11284  0946  0021               	movlb	1	; select bank1
 11285  0947  01EA               	clrf	_updateLCD^(0+128)
 11286  0948                     l6542:
 11287                           
 11288                           ;main.c: 659: };main.c: 660: if(monitor_TEMP_LUM){
 11289  0948  0855               	movf	_monitor_TEMP_LUM^(0+128),w
 11290  0949  1903               	btfsc	3,2
 11291  094A  294C               	goto	u7321
 11292  094B  294D               	goto	u7320
 11293  094C                     u7321:
 11294  094C  2952               	goto	l6548
 11295  094D                     u7320:
 11296  094D                     l6544:
 11297                           
 11298                           ;main.c: 661: monitoring_TEMP_LUM();
 11299  094D  318E  267B  3189   	fcall	_monitoring_TEMP_LUM
 11300  0950                     l6546:
 11301                           
 11302                           ;main.c: 662: monitor_TEMP_LUM = 0;
 11303  0950  0021               	movlb	1	; select bank1
 11304  0951  01D5               	clrf	_monitor_TEMP_LUM^(0+128)
 11305  0952                     l6548:
 11306                           
 11307                           ;main.c: 663: };main.c: 664: if(updateLCD){
 11308  0952  086A               	movf	_updateLCD^(0+128),w
 11309  0953  1903               	btfsc	3,2
 11310  0954  2956               	goto	u7331
 11311  0955  2957               	goto	u7330
 11312  0956                     u7331:
 11313  0956  295C               	goto	l6554
 11314  0957                     u7330:
 11315  0957                     l6550:
 11316                           
 11317                           ;main.c: 665: update_menuLCD();
 11318  0957  3183  237A  3189   	fcall	_update_menuLCD
 11319  095A                     l6552:
 11320                           
 11321                           ;main.c: 666: updateLCD=0;
 11322  095A  0021               	movlb	1	; select bank1
 11323  095B  01EA               	clrf	_updateLCD^(0+128)
 11324  095C                     l6554:
 11325                           
 11326                           ;main.c: 667: };main.c: 668: if(PWM_on){
 11327  095C  0020               	movlb	0	; select bank0
 11328  095D  0862               	movf	_PWM_on,w
 11329  095E  1903               	btfsc	3,2
 11330  095F  2961               	goto	u7341
 11331  0960  2962               	goto	u7340
 11332  0961                     u7341:
 11333  0961  2991               	goto	l1375
 11334  0962                     u7340:
 11335  0962                     l6556:
 11336                           
 11337                           ;main.c: 669: if(PWM6EN==0){
 11338  0962  0027               	movlb	7	; select bank7
 11339  0963  1B8E               	btfsc	14,7	;volatile
 11340  0964  2966               	goto	u7351
 11341  0965  2967               	goto	u7350
 11342  0966                     u7351:
 11343  0966  296D               	goto	l6560
 11344  0967                     u7350:
 11345  0967                     l6558:
 11346                           
 11347                           ;main.c: 670: TMR2_StartTimer();
 11348  0967  3191  21EC  3189   	fcall	_TMR2_StartTimer
 11349                           
 11350                           ;main.c: 671: PWM_Output_D4_Enable();
 11351  096A  3191  21E0  3189   	fcall	_PWM_Output_D4_Enable
 11352  096D                     l6560:
 11353                           
 11354                           ;main.c: 672: };main.c: 673: if(dimingLed <= 1023){
 11355  096D  0021               	movlb	1	; select bank1
 11356  096E  084D               	movf	(_dimingLed+1)^(0+128),w
 11357  096F  3A80               	xorlw	128
 11358  0970  0020               	movlb	0	; select bank0
 11359  0971  00D3               	movwf	??_checkFlags
 11360  0972  3084               	movlw	132
 11361  0973  0253               	subwf	??_checkFlags,w
 11362  0974  1D03               	skipz
 11363  0975  2979               	goto	u7365
 11364  0976  3000               	movlw	0
 11365  0977  0021               	movlb	1	; select bank1
 11366  0978  024C               	subwf	_dimingLed^(0+128),w
 11367  0979                     u7365:
 11368  0979  1803               	skipnc
 11369  097A  297C               	goto	u7361
 11370  097B  297D               	goto	u7360
 11371  097C                     u7361:
 11372  097C  2983               	goto	l6564
 11373  097D                     u7360:
 11374  097D                     l6562:
 11375                           
 11376                           ;main.c: 674: dimingLed += 1;
 11377  097D  3001               	movlw	1
 11378  097E  0021               	movlb	1	; select bank1
 11379  097F  07CC               	addwf	_dimingLed^(0+128),f
 11380  0980  3000               	movlw	0
 11381  0981  3DCD               	addwfc	(_dimingLed+1)^(0+128),f
 11382                           
 11383                           ;main.c: 675: } else{
 11384  0982  2986               	goto	l6566
 11385  0983                     l6564:
 11386                           
 11387                           ;main.c: 676: dimingLed = 0;
 11388  0983  0021               	movlb	1	; select bank1
 11389  0984  01CC               	clrf	_dimingLed^(0+128)
 11390  0985  01CD               	clrf	(_dimingLed+1)^(0+128)
 11391  0986                     l6566:
 11392                           
 11393                           ;main.c: 677: };main.c: 678: PWM6_LoadDutyValue(dimingLed);
 11394  0986  084D               	movf	(_dimingLed+1)^(0+128),w
 11395  0987  00F3               	movwf	PWM6_LoadDutyValue@dutyValue+1
 11396  0988  084C               	movf	_dimingLed^(0+128),w
 11397  0989  00F2               	movwf	PWM6_LoadDutyValue@dutyValue
 11398  098A  3192  22DD  3189   	fcall	_PWM6_LoadDutyValue
 11399  098D                     l6568:
 11400                           
 11401                           ;main.c: 679: _delay((unsigned long)((1)*(1000000/4000.0)));
 11402  098D  3053               	movlw	83
 11403  098E                     u8457:
 11404  098E  0B89               	decfsz	9,f
 11405  098F  298E               	goto	u8457
 11406  0990  0000               	nop
 11407  0991                     l1375:
 11408  0991  0008               	return
 11409  0992                     __end_of_checkFlags:
 11410                           
 11411                           	psect	text10
 11412  0AD6                     __ptext10:	
 11413 ;; *************** function _wirteEEPROMinit *****************
 11414 ;; Defined at:
 11415 ;;		line 394 in file "main.c"
 11416 ;; Parameters:    Size  Location     Type
 11417 ;;		None
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;		None
 11420 ;; Return value:  Size  Location     Type
 11421 ;;                  1    wreg      void 
 11422 ;; Registers used:
 11423 ;;		wreg, status,2, status,0, pclath, cstack
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/0
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11432 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11433 ;;Total ram usage:        1 bytes
 11434 ;; Hardware stack levels used:    1
 11435 ;; Hardware stack levels required when called:    5
 11436 ;; This function calls:
 11437 ;;		_DATAEE_WriteByte
 11438 ;; This function is called by:
 11439 ;;		_checkFlags
 11440 ;; This function uses a non-reentrant model
 11441 ;;
 11442                           
 11443                           
 11444                           ;psect for function _wirteEEPROMinit
 11445  0AD6                     _wirteEEPROMinit:
 11446  0AD6                     l6298:	
 11447                           ;incstack = 0
 11448                           ; Regs used in _wirteEEPROMinit: [wreg+status,2+status,0+pclath+cstack]
 11449                           
 11450                           
 11451                           ;main.c: 396: DATAEE_WriteByte( 0x7000 + (1), NREG);
 11452  0AD6  3001               	movlw	1
 11453  0AD7  0020               	movlb	0	; select bank0
 11454  0AD8  00A0               	movwf	DATAEE_WriteByte@bAdd
 11455  0AD9  3070               	movlw	112
 11456  0ADA  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11457  0ADB  087B               	movf	_NREG,w
 11458  0ADC  00F9               	movwf	??_wirteEEPROMinit
 11459  0ADD  0879               	movf	??_wirteEEPROMinit,w
 11460  0ADE  00A2               	movwf	DATAEE_WriteByte@bData
 11461  0ADF  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11462                           
 11463                           ;main.c: 397: DATAEE_WriteByte( 0x7000 + (2), PMON);
 11464  0AE2  3002               	movlw	2
 11465  0AE3  0020               	movlb	0	; select bank0
 11466  0AE4  00A0               	movwf	DATAEE_WriteByte@bAdd
 11467  0AE5  3070               	movlw	112
 11468  0AE6  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11469  0AE7  086E               	movf	_PMON,w
 11470  0AE8  00F9               	movwf	??_wirteEEPROMinit
 11471  0AE9  0879               	movf	??_wirteEEPROMinit,w
 11472  0AEA  00A2               	movwf	DATAEE_WriteByte@bData
 11473  0AEB  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11474                           
 11475                           ;main.c: 398: DATAEE_WriteByte( 0x7000 + (3), TALA);
 11476  0AEE  3003               	movlw	3
 11477  0AEF  0020               	movlb	0	; select bank0
 11478  0AF0  00A0               	movwf	DATAEE_WriteByte@bAdd
 11479  0AF1  3070               	movlw	112
 11480  0AF2  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11481  0AF3  086D               	movf	_TALA,w
 11482  0AF4  00F9               	movwf	??_wirteEEPROMinit
 11483  0AF5  0879               	movf	??_wirteEEPROMinit,w
 11484  0AF6  00A2               	movwf	DATAEE_WriteByte@bData
 11485  0AF7  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11486                           
 11487                           ;main.c: 399: DATAEE_WriteByte( 0x7000 + (4), clkAlarm.alarmVal.h);
 11488  0AFA  3004               	movlw	4
 11489  0AFB  0020               	movlb	0	; select bank0
 11490  0AFC  00A0               	movwf	DATAEE_WriteByte@bAdd
 11491  0AFD  3070               	movlw	112
 11492  0AFE  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11493  0AFF  0855               	movf	_clkAlarm,w
 11494  0B00  00F9               	movwf	??_wirteEEPROMinit
 11495  0B01  0879               	movf	??_wirteEEPROMinit,w
 11496  0B02  00A2               	movwf	DATAEE_WriteByte@bData
 11497  0B03  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11498                           
 11499                           ;main.c: 400: DATAEE_WriteByte( 0x7000 + (5), clkAlarm.alarmVal.m);
 11500  0B06  3005               	movlw	5
 11501  0B07  0020               	movlb	0	; select bank0
 11502  0B08  00A0               	movwf	DATAEE_WriteByte@bAdd
 11503  0B09  3070               	movlw	112
 11504  0B0A  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11505  0B0B  0856               	movf	_clkAlarm+1,w
 11506  0B0C  00F9               	movwf	??_wirteEEPROMinit
 11507  0B0D  0879               	movf	??_wirteEEPROMinit,w
 11508  0B0E  00A2               	movwf	DATAEE_WriteByte@bData
 11509  0B0F  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11510                           
 11511                           ;main.c: 401: DATAEE_WriteByte( 0x7000 + (6), clkAlarm.alarmVal.s);
 11512  0B12  3006               	movlw	6
 11513  0B13  0020               	movlb	0	; select bank0
 11514  0B14  00A0               	movwf	DATAEE_WriteByte@bAdd
 11515  0B15  3070               	movlw	112
 11516  0B16  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11517  0B17  0857               	movf	_clkAlarm+2,w
 11518  0B18  00F9               	movwf	??_wirteEEPROMinit
 11519  0B19  0879               	movf	??_wirteEEPROMinit,w
 11520  0B1A  00A2               	movwf	DATAEE_WriteByte@bData
 11521  0B1B  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11522                           
 11523                           ;main.c: 402: DATAEE_WriteByte( 0x7000 + (7), tempAlarm.alarmTemp);
 11524  0B1E  3007               	movlw	7
 11525  0B1F  0020               	movlb	0	; select bank0
 11526  0B20  00A0               	movwf	DATAEE_WriteByte@bAdd
 11527  0B21  3070               	movlw	112
 11528  0B22  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11529  0B23  0021               	movlb	1	; select bank1
 11530  0B24  0849               	movf	_tempAlarm^(0+128),w
 11531  0B25  00F9               	movwf	??_wirteEEPROMinit
 11532  0B26  0879               	movf	??_wirteEEPROMinit,w
 11533  0B27  0020               	movlb	0	; select bank0
 11534  0B28  00A2               	movwf	DATAEE_WriteByte@bData
 11535  0B29  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11536                           
 11537                           ;main.c: 403: DATAEE_WriteByte( 0x7000 + (8), lumAlarm.alarmLum);
 11538  0B2C  3008               	movlw	8
 11539  0B2D  0020               	movlb	0	; select bank0
 11540  0B2E  00A0               	movwf	DATAEE_WriteByte@bAdd
 11541  0B2F  3070               	movlw	112
 11542  0B30  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11543  0B31  0021               	movlb	1	; select bank1
 11544  0B32  0846               	movf	_lumAlarm^(0+128),w
 11545  0B33  00F9               	movwf	??_wirteEEPROMinit
 11546  0B34  0879               	movf	??_wirteEEPROMinit,w
 11547  0B35  0020               	movlb	0	; select bank0
 11548  0B36  00A2               	movwf	DATAEE_WriteByte@bData
 11549  0B37  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11550                           
 11551                           ;main.c: 404: DATAEE_WriteByte( 0x7000 + (9), ALAF);
 11552  0B3A  3009               	movlw	9
 11553  0B3B  0020               	movlb	0	; select bank0
 11554  0B3C  00A0               	movwf	DATAEE_WriteByte@bAdd
 11555  0B3D  3070               	movlw	112
 11556  0B3E  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11557  0B3F  0867               	movf	_ALAF,w
 11558  0B40  00F9               	movwf	??_wirteEEPROMinit
 11559  0B41  0879               	movf	??_wirteEEPROMinit,w
 11560  0B42  00A2               	movwf	DATAEE_WriteByte@bData
 11561  0B43  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11562                           
 11563                           ;main.c: 405: DATAEE_WriteByte( 0x7000 + (10), t.h);
 11564  0B46  300A               	movlw	10
 11565  0B47  0020               	movlb	0	; select bank0
 11566  0B48  00A0               	movwf	DATAEE_WriteByte@bAdd
 11567  0B49  3070               	movlw	112
 11568  0B4A  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11569  0B4B  0859               	movf	_t,w
 11570  0B4C  00F9               	movwf	??_wirteEEPROMinit
 11571  0B4D  0879               	movf	??_wirteEEPROMinit,w
 11572  0B4E  00A2               	movwf	DATAEE_WriteByte@bData
 11573  0B4F  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11574                           
 11575                           ;main.c: 406: DATAEE_WriteByte( 0x7000 + (11), t.m);
 11576  0B52  300B               	movlw	11
 11577  0B53  0020               	movlb	0	; select bank0
 11578  0B54  00A0               	movwf	DATAEE_WriteByte@bAdd
 11579  0B55  3070               	movlw	112
 11580  0B56  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11581  0B57  085A               	movf	_t+1,w
 11582  0B58  00F9               	movwf	??_wirteEEPROMinit
 11583  0B59  0879               	movf	??_wirteEEPROMinit,w
 11584  0B5A  00A2               	movwf	DATAEE_WriteByte@bData
 11585  0B5B  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11586                           
 11587                           ;main.c: 407: DATAEE_WriteByte( 0x7000 + (12), iwrite);
 11588  0B5E  300C               	movlw	12
 11589  0B5F  0020               	movlb	0	; select bank0
 11590  0B60  00A0               	movwf	DATAEE_WriteByte@bAdd
 11591  0B61  3070               	movlw	112
 11592  0B62  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11593  0B63  087A               	movf	_iwrite,w
 11594  0B64  00F9               	movwf	??_wirteEEPROMinit
 11595  0B65  0879               	movf	??_wirteEEPROMinit,w
 11596  0B66  00A2               	movwf	DATAEE_WriteByte@bData
 11597  0B67  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11598                           
 11599                           ;main.c: 408: DATAEE_WriteByte( 0x7000 + (13), NREG + PMON + TALA + clkAlarm.alarmVal.h 
      +                          + clkAlarm.alarmVal.m + clkAlarm.alarmVal.s + tempAlarm.alarmTemp + lumAlarm.alarmLum + 
      +                          ALAF + t.h + t.m + iwrite);
 11600  0B6A  300D               	movlw	13
 11601  0B6B  0020               	movlb	0	; select bank0
 11602  0B6C  00A0               	movwf	DATAEE_WriteByte@bAdd
 11603  0B6D  3070               	movlw	112
 11604  0B6E  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 11605  0B6F  0856               	movf	_clkAlarm+1,w
 11606  0B70  0757               	addwf	_clkAlarm+2,w
 11607  0B71  075A               	addwf	_t+1,w
 11608  0B72  0755               	addwf	_clkAlarm,w
 11609  0B73  0021               	movlb	1	; select bank1
 11610  0B74  0749               	addwf	_tempAlarm^(0+128),w
 11611  0B75  0746               	addwf	_lumAlarm^(0+128),w
 11612  0B76  0020               	movlb	0	; select bank0
 11613  0B77  0759               	addwf	_t,w
 11614  0B78  077B               	addwf	_NREG,w
 11615  0B79  076E               	addwf	_PMON,w
 11616  0B7A  076D               	addwf	_TALA,w
 11617  0B7B  0767               	addwf	_ALAF,w
 11618  0B7C  077A               	addwf	_iwrite,w
 11619  0B7D  00F9               	movwf	??_wirteEEPROMinit
 11620  0B7E  0879               	movf	??_wirteEEPROMinit,w
 11621  0B7F  00A2               	movwf	DATAEE_WriteByte@bData
 11622  0B80  3194  24BD  318A   	fcall	_DATAEE_WriteByte
 11623  0B83                     l1276:
 11624  0B83  0008               	return
 11625  0B84                     __end_of_wirteEEPROMinit:
 11626                           
 11627                           	psect	text11
 11628  037A                     __ptext11:	
 11629 ;; *************** function _update_menuLCD *****************
 11630 ;; Defined at:
 11631 ;;		line 414 in file "main.c"
 11632 ;; Parameters:    Size  Location     Type
 11633 ;;		None
 11634 ;; Auto vars:     Size  Location     Type
 11635 ;;  diff            3   48[BANK0 ] struct Time
 11636 ;;  str             8   33[BANK0 ] unsigned char [8]
 11637 ;;  tt              4   41[BANK0 ] unsigned char [4]
 11638 ;;  l               3   45[BANK0 ] unsigned char [3]
 11639 ;; Return value:  Size  Location     Type
 11640 ;;                  1    wreg      void 
 11641 ;; Registers used:
 11642 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11643 ;; Tracked objects:
 11644 ;;		On entry : 0/0
 11645 ;;		On exit  : 0/0
 11646 ;;		Unchanged: 0/0
 11647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;Total ram usage:       24 bytes
 11653 ;; Hardware stack levels used:    1
 11654 ;; Hardware stack levels required when called:    8
 11655 ;; This function calls:
 11656 ;;		_LCDchar
 11657 ;;		_LCDcmd
 11658 ;;		_LCDstr
 11659 ;;		_PWM6_LoadDutyValue
 11660 ;;		_PWM_Output_D4_Disable
 11661 ;;		_TMR2_StopTimer
 11662 ;;		_differenceBetweenTimePeriod
 11663 ;;		_sprintf
 11664 ;; This function is called by:
 11665 ;;		_checkFlags
 11666 ;;		_editClock
 11667 ;;		_editTemp
 11668 ;;		_editLum
 11669 ;;		_toggleAlarms
 11670 ;; This function uses a non-reentrant model
 11671 ;;
 11672                           
 11673                           
 11674                           ;psect for function _update_menuLCD
 11675  037A                     _update_menuLCD:
 11676  037A                     l6300:	
 11677                           ;incstack = 0
 11678                           ; Regs used in _update_menuLCD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11679                           
 11680                           
 11681                           ;main.c: 416: char str[8];;main.c: 417: if(editingClockAlarm){
 11682  037A  0020               	movlb	0	; select bank0
 11683  037B  085E               	movf	_editingClockAlarm,w
 11684  037C  045F               	iorwf	_editingClockAlarm+1,w
 11685  037D  1903               	btfsc	3,2
 11686  037E  2B80               	goto	u6801
 11687  037F  2B81               	goto	u6800
 11688  0380                     u6801:
 11689  0380  2B9F               	goto	l6304
 11690  0381                     u6800:
 11691  0381                     l6302:
 11692                           
 11693                           ;main.c: 418: sprintf(str, "%02d:%02d:%02d", clkAlarm.alarmVal.h,clkAlarm.alarmVal.m,clk
      +                          Alarm.alarmVal.s);
 11694  0381  3027               	movlw	low (STR_1| (0+32768))
 11695  0382  00A6               	movwf	sprintf@f
 11696  0383  3098               	movlw	high (STR_1| (0+32768))
 11697  0384  00A7               	movwf	sprintf@f+1
 11698  0385  0855               	movf	_clkAlarm,w
 11699  0386  00BB               	movwf	??_update_menuLCD
 11700  0387  01BC               	clrf	??_update_menuLCD+1
 11701  0388  083B               	movf	??_update_menuLCD,w
 11702  0389  00A8               	movwf	?_sprintf+2
 11703  038A  083C               	movf	??_update_menuLCD+1,w
 11704  038B  00A9               	movwf	?_sprintf+3
 11705  038C  0856               	movf	_clkAlarm+1,w
 11706  038D  00BD               	movwf	??_update_menuLCD+2
 11707  038E  01BE               	clrf	??_update_menuLCD+3
 11708  038F  083D               	movf	??_update_menuLCD+2,w
 11709  0390  00AA               	movwf	?_sprintf+4
 11710  0391  083E               	movf	??_update_menuLCD+3,w
 11711  0392  00AB               	movwf	?_sprintf+5
 11712  0393  0857               	movf	_clkAlarm+2,w
 11713  0394  00BF               	movwf	??_update_menuLCD+4
 11714  0395  01C0               	clrf	??_update_menuLCD+5
 11715  0396  083F               	movf	??_update_menuLCD+4,w
 11716  0397  00AC               	movwf	?_sprintf+6
 11717  0398  0840               	movf	??_update_menuLCD+5,w
 11718  0399  00AD               	movwf	?_sprintf+7
 11719  039A  3041               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11720  039B  3185  2584  3183   	fcall	_sprintf
 11721                           
 11722                           ;main.c: 419: } else {
 11723  039E  2BBC               	goto	l6306
 11724  039F                     l6304:
 11725                           
 11726                           ;main.c: 420: sprintf(str, "%02d:%02d:%02d", t.h,t.m,t.s);
 11727  039F  3027               	movlw	low (STR_1| (0+32768))
 11728  03A0  00A6               	movwf	sprintf@f
 11729  03A1  3098               	movlw	high (STR_1| (0+32768))
 11730  03A2  00A7               	movwf	sprintf@f+1
 11731  03A3  0859               	movf	_t,w
 11732  03A4  00BB               	movwf	??_update_menuLCD
 11733  03A5  01BC               	clrf	??_update_menuLCD+1
 11734  03A6  083B               	movf	??_update_menuLCD,w
 11735  03A7  00A8               	movwf	?_sprintf+2
 11736  03A8  083C               	movf	??_update_menuLCD+1,w
 11737  03A9  00A9               	movwf	?_sprintf+3
 11738  03AA  085A               	movf	_t+1,w
 11739  03AB  00BD               	movwf	??_update_menuLCD+2
 11740  03AC  01BE               	clrf	??_update_menuLCD+3
 11741  03AD  083D               	movf	??_update_menuLCD+2,w
 11742  03AE  00AA               	movwf	?_sprintf+4
 11743  03AF  083E               	movf	??_update_menuLCD+3,w
 11744  03B0  00AB               	movwf	?_sprintf+5
 11745  03B1  085B               	movf	_t+2,w
 11746  03B2  00BF               	movwf	??_update_menuLCD+4
 11747  03B3  01C0               	clrf	??_update_menuLCD+5
 11748  03B4  083F               	movf	??_update_menuLCD+4,w
 11749  03B5  00AC               	movwf	?_sprintf+6
 11750  03B6  0840               	movf	??_update_menuLCD+5,w
 11751  03B7  00AD               	movwf	?_sprintf+7
 11752  03B8  3041               	movlw	(low (update_menuLCD@str| 0))& (0+255)
 11753  03B9  3185  2584  3183   	fcall	_sprintf
 11754  03BC                     l6306:
 11755                           
 11756                           ;main.c: 421: };main.c: 422: LCDcmd(0x80);
 11757  03BC  3080               	movlw	128
 11758  03BD  3192  2230  3183   	fcall	_LCDcmd
 11759  03C0                     l6308:
 11760                           
 11761                           ;main.c: 423: LCDstr(str);
 11762  03C0  3041               	movlw	low update_menuLCD@str
 11763  03C1  0020               	movlb	0	; select bank0
 11764  03C2  00A1               	movwf	LCDstr@p
 11765  03C3  3000               	movlw	high update_menuLCD@str
 11766  03C4  00A2               	movwf	LCDstr@p+1
 11767  03C5  3193  2387  3183   	fcall	_LCDstr
 11768  03C8                     l6310:
 11769                           
 11770                           ;main.c: 426: if(clkAlarm.trigger == 1){
 11771  03C8  0020               	movlb	0	; select bank0
 11772  03C9  0358               	decf	_clkAlarm+3,w
 11773  03CA  1D03               	btfss	3,2
 11774  03CB  2BCD               	goto	u6811
 11775  03CC  2BCE               	goto	u6810
 11776  03CD                     u6811:
 11777  03CD  2BD7               	goto	l6314
 11778  03CE                     u6810:
 11779  03CE                     l6312:
 11780                           
 11781                           ;main.c: 427: LCDcmd(0x8B);
 11782  03CE  308B               	movlw	139
 11783  03CF  3192  2230  3183   	fcall	_LCDcmd
 11784                           
 11785                           ;main.c: 428: LCDchar('C');
 11786  03D2  3043               	movlw	67
 11787  03D3  3192  2252  3183   	fcall	_LCDchar
 11788                           
 11789                           ;main.c: 429: } else if(modeFlag == 0){
 11790  03D6  2BE5               	goto	l6318
 11791  03D7                     l6314:
 11792  03D7  085C               	movf	_modeFlag,w
 11793  03D8  045D               	iorwf	_modeFlag+1,w
 11794  03D9  1D03               	btfss	3,2
 11795  03DA  2BDC               	goto	u6821
 11796  03DB  2BDD               	goto	u6820
 11797  03DC                     u6821:
 11798  03DC  2BE5               	goto	l6318
 11799  03DD                     u6820:
 11800  03DD                     l6316:
 11801                           
 11802                           ;main.c: 430: LCDcmd(0x8B);
 11803  03DD  308B               	movlw	139
 11804  03DE  3192  2230  3183   	fcall	_LCDcmd
 11805                           
 11806                           ;main.c: 431: LCDchar(' ');
 11807  03E1  3020               	movlw	32
 11808  03E2  3192  2252  3183   	fcall	_LCDchar
 11809  03E5                     l6318:
 11810                           
 11811                           ;main.c: 432: };main.c: 435: if(tempAlarm.trigger == 1){
 11812  03E5  0021               	movlb	1	; select bank1
 11813  03E6  034A               	decf	(_tempAlarm^(0+128)+1),w
 11814  03E7  1D03               	btfss	3,2
 11815  03E8  2BEA               	goto	u6831
 11816  03E9  2BEB               	goto	u6830
 11817  03EA                     u6831:
 11818  03EA  2BF4               	goto	l6322
 11819  03EB                     u6830:
 11820  03EB                     l6320:
 11821                           
 11822                           ;main.c: 436: LCDcmd(0x8C);
 11823  03EB  308C               	movlw	140
 11824  03EC  3192  2230  3183   	fcall	_LCDcmd
 11825                           
 11826                           ;main.c: 437: LCDchar('T');
 11827  03EF  3054               	movlw	84
 11828  03F0  3192  2252  3183   	fcall	_LCDchar
 11829                           
 11830                           ;main.c: 438: } else if(modeFlag == 0){
 11831  03F3  2C03               	goto	l6326
 11832  03F4                     l6322:
 11833  03F4  0020               	movlb	0	; select bank0
 11834  03F5  085C               	movf	_modeFlag,w
 11835  03F6  045D               	iorwf	_modeFlag+1,w
 11836  03F7  1D03               	btfss	3,2
 11837  03F8  2BFA               	goto	u6841
 11838  03F9  2BFB               	goto	u6840
 11839  03FA                     u6841:
 11840  03FA  2C03               	goto	l6326
 11841  03FB                     u6840:
 11842  03FB                     l6324:
 11843                           
 11844                           ;main.c: 439: LCDcmd(0x8C);
 11845  03FB  308C               	movlw	140
 11846  03FC  3192  2230  3183   	fcall	_LCDcmd
 11847                           
 11848                           ;main.c: 440: LCDchar(' ');
 11849  03FF  3020               	movlw	32
 11850  0400  3192  2252  3183   	fcall	_LCDchar
 11851  0403                     l6326:
 11852                           
 11853                           ;main.c: 441: };main.c: 444: if(lumAlarm.trigger == 1){
 11854  0403  0021               	movlb	1	; select bank1
 11855  0404  0347               	decf	(_lumAlarm^(0+128)+1),w
 11856  0405  1D03               	btfss	3,2
 11857  0406  2C08               	goto	u6851
 11858  0407  2C09               	goto	u6850
 11859  0408                     u6851:
 11860  0408  2C12               	goto	l6330
 11861  0409                     u6850:
 11862  0409                     l6328:
 11863                           
 11864                           ;main.c: 445: LCDcmd(0x8D);
 11865  0409  308D               	movlw	141
 11866  040A  3192  2230  3183   	fcall	_LCDcmd
 11867                           
 11868                           ;main.c: 446: LCDchar('L');
 11869  040D  304C               	movlw	76
 11870  040E  3192  2252  3183   	fcall	_LCDchar
 11871                           
 11872                           ;main.c: 447: } else if(modeFlag == 0){
 11873  0411  2C21               	goto	l1288
 11874  0412                     l6330:
 11875  0412  0020               	movlb	0	; select bank0
 11876  0413  085C               	movf	_modeFlag,w
 11877  0414  045D               	iorwf	_modeFlag+1,w
 11878  0415  1D03               	btfss	3,2
 11879  0416  2C18               	goto	u6861
 11880  0417  2C19               	goto	u6860
 11881  0418                     u6861:
 11882  0418  2C21               	goto	l1288
 11883  0419                     u6860:
 11884  0419                     l6332:
 11885                           
 11886                           ;main.c: 448: LCDcmd(0x8D);
 11887  0419  308D               	movlw	141
 11888  041A  3192  2230  3183   	fcall	_LCDcmd
 11889                           
 11890                           ;main.c: 449: LCDchar(' ');
 11891  041D  3020               	movlw	32
 11892  041E  3192  2252  3183   	fcall	_LCDchar
 11893  0421                     l1288:
 11894                           
 11895                           ;main.c: 450: };main.c: 452: LCDcmd(0x8F);
 11896  0421  308F               	movlw	143
 11897  0422  3192  2230  3183   	fcall	_LCDcmd
 11898                           
 11899                           ;main.c: 453: LCDchar(ALAF);
 11900  0425  0020               	movlb	0	; select bank0
 11901  0426  0867               	movf	_ALAF,w
 11902  0427  3192  2252  3183   	fcall	_LCDchar
 11903  042A                     l6334:
 11904                           
 11905                           ;main.c: 456: if(ALAF == 'A'){
 11906  042A  3041               	movlw	65
 11907  042B  0020               	movlb	0	; select bank0
 11908  042C  0667               	xorwf	_ALAF,w
 11909  042D  1D03               	btfss	3,2
 11910  042E  2C30               	goto	u6871
 11911  042F  2C31               	goto	u6870
 11912  0430                     u6871:
 11913  0430  2C9D               	goto	l6368
 11914  0431                     u6870:
 11915  0431                     l6336:
 11916                           
 11917                           ;main.c: 457: if(clkAlarm.trigger || tempAlarm.trigger || lumAlarm.trigger){
 11918  0431  0858               	movf	_clkAlarm+3,w
 11919  0432  1D03               	btfss	3,2
 11920  0433  2C35               	goto	u6881
 11921  0434  2C36               	goto	u6880
 11922  0435                     u6881:
 11923  0435  2C41               	goto	l6342
 11924  0436                     u6880:
 11925  0436                     l6338:
 11926  0436  0021               	movlb	1	; select bank1
 11927  0437  084A               	movf	(_tempAlarm^(0+128)+1),w
 11928  0438  1D03               	btfss	3,2
 11929  0439  2C3B               	goto	u6891
 11930  043A  2C3C               	goto	u6890
 11931  043B                     u6891:
 11932  043B  2C41               	goto	l6342
 11933  043C                     u6890:
 11934  043C                     l6340:
 11935  043C  0847               	movf	(_lumAlarm^(0+128)+1),w
 11936  043D  1903               	btfsc	3,2
 11937  043E  2C40               	goto	u6901
 11938  043F  2C41               	goto	u6900
 11939  0440                     u6901:
 11940  0440  2C97               	goto	l1291
 11941  0441                     u6900:
 11942  0441                     l6342:
 11943                           
 11944                           ;main.c: 458: if(alarmPWMStart.h == 0xff){
 11945  0441  0021               	movlb	1	; select bank1
 11946  0442  0A63               	incf	_alarmPWMStart^(0+128),w
 11947  0443  1D03               	btfss	3,2
 11948  0444  2C46               	goto	u6911
 11949  0445  2C47               	goto	u6910
 11950  0446                     u6911:
 11951  0446  2C59               	goto	l1294
 11952  0447                     u6910:
 11953  0447                     l6344:
 11954                           
 11955                           ;main.c: 459: alarmPWMStart.h = t.h;
 11956  0447  0020               	movlb	0	; select bank0
 11957  0448  0859               	movf	_t,w
 11958  0449  00BB               	movwf	??_update_menuLCD
 11959  044A  083B               	movf	??_update_menuLCD,w
 11960  044B  0021               	movlb	1	; select bank1
 11961  044C  00E3               	movwf	_alarmPWMStart^(0+128)
 11962                           
 11963                           ;main.c: 460: alarmPWMStart.m = t.m;
 11964  044D  0020               	movlb	0	; select bank0
 11965  044E  085A               	movf	_t+1,w
 11966  044F  00BB               	movwf	??_update_menuLCD
 11967  0450  083B               	movf	??_update_menuLCD,w
 11968  0451  0021               	movlb	1	; select bank1
 11969  0452  00E4               	movwf	(_alarmPWMStart^(0+128)+1)
 11970                           
 11971                           ;main.c: 461: alarmPWMStart.s = t.s;
 11972  0453  0020               	movlb	0	; select bank0
 11973  0454  085B               	movf	_t+2,w
 11974  0455  00BB               	movwf	??_update_menuLCD
 11975  0456  083B               	movf	??_update_menuLCD,w
 11976  0457  0021               	movlb	1	; select bank1
 11977  0458  00E5               	movwf	(_alarmPWMStart^(0+128)+2)
 11978  0459                     l1294:
 11979                           
 11980                           ;main.c: 462: };main.c: 463: struct Time diff = {0,0,0};
 11981  0459  0843               	movf	update_menuLCD@F12902^(0+128),w
 11982  045A  0020               	movlb	0	; select bank0
 11983  045B  00D0               	movwf	update_menuLCD@diff
 11984  045C  0021               	movlb	1	; select bank1
 11985  045D  0844               	movf	(update_menuLCD@F12902+1)^(0+128),w
 11986  045E  0020               	movlb	0	; select bank0
 11987  045F  00D1               	movwf	update_menuLCD@diff+1
 11988  0460  0021               	movlb	1	; select bank1
 11989  0461  0845               	movf	(update_menuLCD@F12902+2)^(0+128),w
 11990  0462  0020               	movlb	0	; select bank0
 11991  0463  00D2               	movwf	update_menuLCD@diff+2
 11992  0464                     l6346:
 11993                           
 11994                           ;main.c: 464: differenceBetweenTimePeriod( t, alarmPWMStart, &diff);
 11995  0464  0859               	movf	_t,w
 11996  0465  00F2               	movwf	differenceBetweenTimePeriod@start
 11997  0466  085A               	movf	_t+1,w
 11998  0467  00F3               	movwf	differenceBetweenTimePeriod@start+1
 11999  0468  085B               	movf	_t+2,w
 12000  0469  00F4               	movwf	differenceBetweenTimePeriod@start+2
 12001  046A  0021               	movlb	1	; select bank1
 12002  046B  0863               	movf	_alarmPWMStart^(0+128),w
 12003  046C  00F5               	movwf	differenceBetweenTimePeriod@stop
 12004  046D  0864               	movf	(_alarmPWMStart+1)^(0+128),w
 12005  046E  00F6               	movwf	differenceBetweenTimePeriod@stop+1
 12006  046F  0865               	movf	(_alarmPWMStart+2)^(0+128),w
 12007  0470  00F7               	movwf	differenceBetweenTimePeriod@stop+2
 12008  0471  3050               	movlw	(low (update_menuLCD@diff| 0))& (0+255)
 12009  0472  0020               	movlb	0	; select bank0
 12010  0473  00BB               	movwf	??_update_menuLCD
 12011  0474  083B               	movf	??_update_menuLCD,w
 12012  0475  00F8               	movwf	differenceBetweenTimePeriod@diff
 12013  0476  3196  2634  3183   	fcall	_differenceBetweenTimePeriod
 12014  0479                     l6348:
 12015                           
 12016                           ;main.c: 466: if(diff.s <= TALA){
 12017  0479  0020               	movlb	0	; select bank0
 12018  047A  0852               	movf	update_menuLCD@diff+2,w
 12019  047B  026D               	subwf	_TALA,w
 12020  047C  1C03               	skipc
 12021  047D  2C7F               	goto	u6921
 12022  047E  2C80               	goto	u6920
 12023  047F                     u6921:
 12024  047F  2C83               	goto	l1297
 12025  0480                     u6920:
 12026  0480                     l6350:
 12027                           
 12028                           ;main.c: 467: PWM_on = 1;
 12029  0480  01E2               	clrf	_PWM_on
 12030  0481  0AE2               	incf	_PWM_on,f
 12031                           
 12032                           ;main.c: 478: } else if(PWM6EN==1){
 12033  0482  2C9D               	goto	l6368
 12034  0483                     l1297:
 12035  0483  0027               	movlb	7	; select bank7
 12036  0484  1F8E               	btfss	14,7	;volatile
 12037  0485  2C87               	goto	u6931
 12038  0486  2C88               	goto	u6930
 12039  0487                     u6931:
 12040  0487  2C9D               	goto	l1300
 12041  0488                     u6930:
 12042  0488                     l6352:
 12043                           
 12044                           ;main.c: 479: PWM_on = 0;
 12045  0488  0020               	movlb	0	; select bank0
 12046  0489  01E2               	clrf	_PWM_on
 12047  048A                     l6354:
 12048                           
 12049                           ;main.c: 480: PWM6_LoadDutyValue(0);
 12050  048A  3000               	movlw	0
 12051  048B  00F2               	movwf	PWM6_LoadDutyValue@dutyValue
 12052  048C  00F3               	movwf	PWM6_LoadDutyValue@dutyValue+1
 12053  048D  3192  22DD  3183   	fcall	_PWM6_LoadDutyValue
 12054  0490                     l6356:
 12055                           
 12056                           ;main.c: 481: TMR2_StopTimer();
 12057  0490  3191  21F0  3183   	fcall	_TMR2_StopTimer
 12058  0493                     l6358:
 12059                           
 12060                           ;main.c: 482: PWM_Output_D4_Disable();
 12061  0493  3191  21E6  3183   	fcall	_PWM_Output_D4_Disable
 12062  0496  2C9D               	goto	l6368
 12063  0497                     l1291:
 12064  0497  0027               	movlb	7	; select bank7
 12065  0498  1F8E               	btfss	14,7	;volatile
 12066  0499  2C9B               	goto	u6941
 12067  049A  2C9C               	goto	u6940
 12068  049B                     u6941:
 12069  049B  2C9D               	goto	l6368
 12070  049C                     u6940:
 12071  049C  2C88               	goto	l6352
 12072  049D                     l1300:
 12073  049D                     l6368:
 12074                           
 12075                           ;main.c: 489: };main.c: 490: };main.c: 492: LCDcmd(0xc0);
 12076  049D  30C0               	movlw	192
 12077  049E  3192  2230  3183   	fcall	_LCDcmd
 12078  04A1                     l6370:
 12079                           
 12080                           ;main.c: 493: char tt[4];;main.c: 494: if(editingTempAlarm){
 12081  04A1  0020               	movlb	0	; select bank0
 12082  04A2  0864               	movf	_editingTempAlarm,w
 12083  04A3  1903               	btfsc	3,2
 12084  04A4  2CA6               	goto	u6951
 12085  04A5  2CA7               	goto	u6950
 12086  04A6                     u6951:
 12087  04A6  2CB9               	goto	l6374
 12088  04A7                     u6950:
 12089  04A7                     l6372:
 12090                           
 12091                           ;main.c: 495: sprintf(tt, "%02d C", tempAlarm.alarmTemp);
 12092  04A7  3040               	movlw	low (STR_3| (0+32768))
 12093  04A8  00A6               	movwf	sprintf@f
 12094  04A9  3098               	movlw	high (STR_3| (0+32768))
 12095  04AA  00A7               	movwf	sprintf@f+1
 12096  04AB  0021               	movlb	1	; select bank1
 12097  04AC  0849               	movf	_tempAlarm^(0+128),w
 12098  04AD  0020               	movlb	0	; select bank0
 12099  04AE  00BB               	movwf	??_update_menuLCD
 12100  04AF  01BC               	clrf	??_update_menuLCD+1
 12101  04B0  083B               	movf	??_update_menuLCD,w
 12102  04B1  00A8               	movwf	?_sprintf+2
 12103  04B2  083C               	movf	??_update_menuLCD+1,w
 12104  04B3  00A9               	movwf	?_sprintf+3
 12105  04B4  3049               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12106  04B5  3185  2584  3183   	fcall	_sprintf
 12107                           
 12108                           ;main.c: 496: } else{
 12109  04B8  2CC8               	goto	l6376
 12110  04B9                     l6374:
 12111                           
 12112                           ;main.c: 497: sprintf(tt, "%02d C", temp);
 12113  04B9  3040               	movlw	low (STR_3| (0+32768))
 12114  04BA  00A6               	movwf	sprintf@f
 12115  04BB  3098               	movlw	high (STR_3| (0+32768))
 12116  04BC  00A7               	movwf	sprintf@f+1
 12117  04BD  0866               	movf	_temp,w
 12118  04BE  00BB               	movwf	??_update_menuLCD
 12119  04BF  01BC               	clrf	??_update_menuLCD+1
 12120  04C0  083B               	movf	??_update_menuLCD,w
 12121  04C1  00A8               	movwf	?_sprintf+2
 12122  04C2  083C               	movf	??_update_menuLCD+1,w
 12123  04C3  00A9               	movwf	?_sprintf+3
 12124  04C4  3049               	movlw	(low (update_menuLCD@tt| 0))& (0+255)
 12125  04C5  3185  2584  3183   	fcall	_sprintf
 12126  04C8                     l6376:
 12127                           
 12128                           ;main.c: 498: };main.c: 499: LCDstr(tt);
 12129  04C8  3049               	movlw	low update_menuLCD@tt
 12130  04C9  0020               	movlb	0	; select bank0
 12131  04CA  00A1               	movwf	LCDstr@p
 12132  04CB  3000               	movlw	high update_menuLCD@tt
 12133  04CC  00A2               	movwf	LCDstr@p+1
 12134  04CD  3193  2387  3183   	fcall	_LCDstr
 12135  04D0                     l6378:
 12136                           
 12137                           ;main.c: 501: LCDcmd(0xcd);
 12138  04D0  30CD               	movlw	205
 12139  04D1  3192  2230  3183   	fcall	_LCDcmd
 12140  04D4                     l6380:
 12141                           
 12142                           ;main.c: 502: char l[3];;main.c: 504: if(editingLumAlarm){
 12143  04D4  0020               	movlb	0	; select bank0
 12144  04D5  0863               	movf	_editingLumAlarm,w
 12145  04D6  1903               	btfsc	3,2
 12146  04D7  2CD9               	goto	u6961
 12147  04D8  2CDA               	goto	u6960
 12148  04D9                     u6961:
 12149  04D9  2CEC               	goto	l6384
 12150  04DA                     u6960:
 12151  04DA                     l6382:
 12152                           
 12153                           ;main.c: 505: sprintf(l, "L %d", lumAlarm.alarmLum);
 12154  04DA  3047               	movlw	low (STR_5| (0+32768))
 12155  04DB  00A6               	movwf	sprintf@f
 12156  04DC  3098               	movlw	high (STR_5| (0+32768))
 12157  04DD  00A7               	movwf	sprintf@f+1
 12158  04DE  0021               	movlb	1	; select bank1
 12159  04DF  0846               	movf	_lumAlarm^(0+128),w
 12160  04E0  0020               	movlb	0	; select bank0
 12161  04E1  00BB               	movwf	??_update_menuLCD
 12162  04E2  01BC               	clrf	??_update_menuLCD+1
 12163  04E3  083B               	movf	??_update_menuLCD,w
 12164  04E4  00A8               	movwf	?_sprintf+2
 12165  04E5  083C               	movf	??_update_menuLCD+1,w
 12166  04E6  00A9               	movwf	?_sprintf+3
 12167  04E7  304D               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12168  04E8  3185  2584  3183   	fcall	_sprintf
 12169                           
 12170                           ;main.c: 506: } else{
 12171  04EB  2CFB               	goto	l6386
 12172  04EC                     l6384:
 12173                           
 12174                           ;main.c: 507: sprintf(l, "L %d", lumLevel);
 12175  04EC  3047               	movlw	low (STR_5| (0+32768))
 12176  04ED  00A6               	movwf	sprintf@f
 12177  04EE  3098               	movlw	high (STR_5| (0+32768))
 12178  04EF  00A7               	movwf	sprintf@f+1
 12179  04F0  0865               	movf	_lumLevel,w
 12180  04F1  00BB               	movwf	??_update_menuLCD
 12181  04F2  01BC               	clrf	??_update_menuLCD+1
 12182  04F3  083B               	movf	??_update_menuLCD,w
 12183  04F4  00A8               	movwf	?_sprintf+2
 12184  04F5  083C               	movf	??_update_menuLCD+1,w
 12185  04F6  00A9               	movwf	?_sprintf+3
 12186  04F7  304D               	movlw	(low (update_menuLCD@l| 0))& (0+255)
 12187  04F8  3185  2584  3183   	fcall	_sprintf
 12188  04FB                     l6386:
 12189                           
 12190                           ;main.c: 508: };main.c: 509: LCDstr(l);
 12191  04FB  304D               	movlw	low update_menuLCD@l
 12192  04FC  0020               	movlb	0	; select bank0
 12193  04FD  00A1               	movwf	LCDstr@p
 12194  04FE  3000               	movlw	high update_menuLCD@l
 12195  04FF  00A2               	movwf	LCDstr@p+1
 12196  0500  3193  2387  3183   	fcall	_LCDstr
 12197  0503                     l6388:
 12198                           
 12199                           ;main.c: 511: if(modeFlag != 0){
 12200  0503  0020               	movlb	0	; select bank0
 12201  0504  085C               	movf	_modeFlag,w
 12202  0505  045D               	iorwf	_modeFlag+1,w
 12203  0506  1903               	btfsc	3,2
 12204  0507  2D09               	goto	u6971
 12205  0508  2D0A               	goto	u6970
 12206  0509                     u6971:
 12207  0509  2D16               	goto	l6394
 12208  050A                     u6970:
 12209  050A                     l6390:
 12210                           
 12211                           ;main.c: 512: LCDcmd(0x8B);
 12212  050A  308B               	movlw	139
 12213  050B  3192  2230  3183   	fcall	_LCDcmd
 12214  050E                     l6392:
 12215                           
 12216                           ;main.c: 513: LCDstr((unsigned char *)"CTL");
 12217  050E  304C               	movlw	low (STR_7| (0+32768))
 12218  050F  0020               	movlb	0	; select bank0
 12219  0510  00A1               	movwf	LCDstr@p
 12220  0511  3098               	movlw	high (STR_7| (0+32768))
 12221  0512  00A2               	movwf	LCDstr@p+1
 12222  0513  3193  2387  3183   	fcall	_LCDstr
 12223  0516                     l6394:
 12224                           
 12225                           ;main.c: 514: };main.c: 516: if(modeFlag == 1){
 12226  0516  0020               	movlb	0	; select bank0
 12227  0517  035C               	decf	_modeFlag,w
 12228  0518  045D               	iorwf	_modeFlag+1,w
 12229  0519  1D03               	btfss	3,2
 12230  051A  2D1C               	goto	u6981
 12231  051B  2D1D               	goto	u6980
 12232  051C                     u6981:
 12233  051C  2D4C               	goto	l6412
 12234  051D                     u6980:
 12235  051D                     l6396:
 12236                           
 12237                           ;main.c: 517: if(editingClockAlarm == 0){
 12238  051D  085E               	movf	_editingClockAlarm,w
 12239  051E  045F               	iorwf	_editingClockAlarm+1,w
 12240  051F  1D03               	btfss	3,2
 12241  0520  2D22               	goto	u6991
 12242  0521  2D23               	goto	u6990
 12243  0522                     u6991:
 12244  0522  2D28               	goto	l6400
 12245  0523                     u6990:
 12246  0523                     l6398:
 12247                           
 12248                           ;main.c: 518: LCDcmd(0x8B);
 12249  0523  308B               	movlw	139
 12250  0524  3192  2230  3183   	fcall	_LCDcmd
 12251                           
 12252                           ;main.c: 519: } else{
 12253  0527  2D83               	goto	l1325
 12254  0528                     l6400:
 12255                           
 12256                           ;main.c: 520: if(editingClockAlarm == 1){
 12257  0528  035E               	decf	_editingClockAlarm,w
 12258  0529  045F               	iorwf	_editingClockAlarm+1,w
 12259  052A  1D03               	btfss	3,2
 12260  052B  2D2D               	goto	u7001
 12261  052C  2D2E               	goto	u7000
 12262  052D                     u7001:
 12263  052D  2D33               	goto	l6404
 12264  052E                     u7000:
 12265  052E                     l6402:
 12266                           
 12267                           ;main.c: 521: LCDcmd(0x81);
 12268  052E  3081               	movlw	129
 12269  052F  3192  2230  3183   	fcall	_LCDcmd
 12270                           
 12271                           ;main.c: 522: } else if(editingClockAlarm == 2){
 12272  0532  2D83               	goto	l1325
 12273  0533                     l6404:
 12274  0533  3002               	movlw	2
 12275  0534  065E               	xorwf	_editingClockAlarm,w
 12276  0535  045F               	iorwf	_editingClockAlarm+1,w
 12277  0536  1D03               	btfss	3,2
 12278  0537  2D39               	goto	u7011
 12279  0538  2D3A               	goto	u7010
 12280  0539                     u7011:
 12281  0539  2D3F               	goto	l6408
 12282  053A                     u7010:
 12283  053A                     l6406:
 12284                           
 12285                           ;main.c: 523: LCDcmd(0x84);
 12286  053A  3084               	movlw	132
 12287  053B  3192  2230  3183   	fcall	_LCDcmd
 12288                           
 12289                           ;main.c: 524: } else if(editingClockAlarm == 3){
 12290  053E  2D83               	goto	l1325
 12291  053F                     l6408:
 12292  053F  3003               	movlw	3
 12293  0540  065E               	xorwf	_editingClockAlarm,w
 12294  0541  045F               	iorwf	_editingClockAlarm+1,w
 12295  0542  1D03               	btfss	3,2
 12296  0543  2D45               	goto	u7021
 12297  0544  2D46               	goto	u7020
 12298  0545                     u7021:
 12299  0545  2D4B               	goto	l1309
 12300  0546                     u7020:
 12301  0546                     l6410:
 12302                           
 12303                           ;main.c: 525: LCDcmd(0x87);
 12304  0546  3087               	movlw	135
 12305  0547  3192  2230  3183   	fcall	_LCDcmd
 12306  054A  2D83               	goto	l1325
 12307  054B                     l1309:
 12308                           
 12309                           ;main.c: 526: };main.c: 527: };main.c: 528: } else if(modeFlag == 2){
 12310  054B  2D83               	goto	l1325
 12311  054C                     l6412:
 12312  054C  3002               	movlw	2
 12313  054D  065C               	xorwf	_modeFlag,w
 12314  054E  045D               	iorwf	_modeFlag+1,w
 12315  054F  1D03               	btfss	3,2
 12316  0550  2D52               	goto	u7031
 12317  0551  2D53               	goto	u7030
 12318  0552                     u7031:
 12319  0552  2D62               	goto	l6420
 12320  0553                     u7030:
 12321  0553                     l6414:
 12322                           
 12323                           ;main.c: 530: if(editingTempAlarm == 0){
 12324  0553  0864               	movf	_editingTempAlarm,w
 12325  0554  1D03               	btfss	3,2
 12326  0555  2D57               	goto	u7041
 12327  0556  2D58               	goto	u7040
 12328  0557                     u7041:
 12329  0557  2D5D               	goto	l6418
 12330  0558                     u7040:
 12331  0558                     l6416:
 12332                           
 12333                           ;main.c: 531: LCDcmd(0x8c);
 12334  0558  308C               	movlw	140
 12335  0559  3192  2230  3183   	fcall	_LCDcmd
 12336                           
 12337                           ;main.c: 532: }else {
 12338  055C  2D83               	goto	l1325
 12339  055D                     l6418:
 12340                           
 12341                           ;main.c: 533: LCDcmd(0xc1);
 12342  055D  30C1               	movlw	193
 12343  055E  3192  2230  3183   	fcall	_LCDcmd
 12344  0561  2D83               	goto	l1325
 12345  0562                     l6420:
 12346  0562  3003               	movlw	3
 12347  0563  065C               	xorwf	_modeFlag,w
 12348  0564  045D               	iorwf	_modeFlag+1,w
 12349  0565  1D03               	btfss	3,2
 12350  0566  2D68               	goto	u7051
 12351  0567  2D69               	goto	u7050
 12352  0568                     u7051:
 12353  0568  2D78               	goto	l6428
 12354  0569                     u7050:
 12355  0569                     l6422:
 12356                           
 12357                           ;main.c: 538: if(editingLumAlarm == 0){
 12358  0569  0863               	movf	_editingLumAlarm,w
 12359  056A  1D03               	btfss	3,2
 12360  056B  2D6D               	goto	u7061
 12361  056C  2D6E               	goto	u7060
 12362  056D                     u7061:
 12363  056D  2D73               	goto	l6426
 12364  056E                     u7060:
 12365  056E                     l6424:
 12366                           
 12367                           ;main.c: 539: LCDcmd(0x8d);
 12368  056E  308D               	movlw	141
 12369  056F  3192  2230  3183   	fcall	_LCDcmd
 12370                           
 12371                           ;main.c: 540: }else {
 12372  0572  2D83               	goto	l1325
 12373  0573                     l6426:
 12374                           
 12375                           ;main.c: 541: LCDcmd(0xcf);
 12376  0573  30CF               	movlw	207
 12377  0574  3192  2230  3183   	fcall	_LCDcmd
 12378  0577  2D83               	goto	l1325
 12379  0578                     l6428:
 12380  0578  3004               	movlw	4
 12381  0579  065C               	xorwf	_modeFlag,w
 12382  057A  045D               	iorwf	_modeFlag+1,w
 12383  057B  1D03               	btfss	3,2
 12384  057C  2D7E               	goto	u7071
 12385  057D  2D7F               	goto	u7070
 12386  057E                     u7071:
 12387  057E  2D83               	goto	l1325
 12388  057F                     u7070:
 12389  057F                     l6430:
 12390                           
 12391                           ;main.c: 545: LCDcmd(0x8f);
 12392  057F  308F               	movlw	143
 12393  0580  3192  2230  3183   	fcall	_LCDcmd
 12394  0583                     l1325:
 12395  0583  0008               	return
 12396  0584                     __end_of_update_menuLCD:
 12397                           
 12398                           	psect	text12
 12399  0584                     __ptext12:	
 12400 ;; *************** function _sprintf *****************
 12401 ;; Defined at:
 12402 ;;		line 505 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;  sp              1    wreg     PTR unsigned char 
 12405 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12406 ;;  f               2    6[BANK0 ] PTR const unsigned char 
 12407 ;;		 -> STR_6(5), STR_5(5), STR_4(7), STR_3(7), 
 12408 ;;		 -> STR_2(15), STR_1(15), 
 12409 ;; Auto vars:     Size  Location     Type
 12410 ;;  sp              1   26[BANK0 ] PTR unsigned char 
 12411 ;;		 -> update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 12412 ;;  tmpval          4    0        struct .
 12413 ;;  width           2   23[BANK0 ] int 
 12414 ;;  val             2   20[BANK0 ] unsigned int 
 12415 ;;  cp              2    0        PTR const unsigned char 
 12416 ;;  len             2    0        unsigned int 
 12417 ;;  c               1   25[BANK0 ] unsigned char 
 12418 ;;  flag            1   22[BANK0 ] unsigned char 
 12419 ;;  prec            1   19[BANK0 ] char 
 12420 ;;  ap              1   18[BANK0 ] PTR void [1]
 12421 ;;		 -> ?_sprintf(2), 
 12422 ;; Return value:  Size  Location     Type
 12423 ;;                  2    6[BANK0 ] int 
 12424 ;; Registers used:
 12425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12426 ;; Tracked objects:
 12427 ;;		On entry : 0/0
 12428 ;;		On exit  : 0/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12431 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;Total ram usage:       21 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:    5
 12438 ;; This function calls:
 12439 ;;		___lwdiv
 12440 ;;		___lwmod
 12441 ;;		___wmul
 12442 ;;		_isdigit
 12443 ;; This function is called by:
 12444 ;;		_update_menuLCD
 12445 ;; This function uses a non-reentrant model
 12446 ;;
 12447                           
 12448                           
 12449                           ;psect for function _sprintf
 12450  0584                     _sprintf:
 12451                           
 12452                           ;incstack = 0
 12453                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12454                           ;sprintf@sp stored from wreg
 12455  0584  0020               	movlb	0	; select bank0
 12456  0585  00BA               	movwf	sprintf@sp
 12457  0586                     l6188:
 12458                           
 12459                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
 12460  0586  3028               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 12461  0587  00AE               	movwf	??_sprintf
 12462  0588  082E               	movf	??_sprintf,w
 12463  0589  00B2               	movwf	sprintf@ap
 12464                           
 12465                           ;doprnt.c: 553: while((c = *f++)) {
 12466  058A  2F09               	goto	l6292
 12467  058B                     l6190:
 12468                           
 12469                           ;doprnt.c: 555: if(c != '%')
 12470  058B  3025               	movlw	37
 12471  058C  0639               	xorwf	sprintf@c,w
 12472  058D  1903               	btfsc	3,2
 12473  058E  2D90               	goto	u6621
 12474  058F  2D91               	goto	u6620
 12475  0590                     u6621:
 12476  0590  2D9D               	goto	l6196
 12477  0591                     u6620:
 12478  0591                     l6192:
 12479                           
 12480                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
 12481  0591  0839               	movf	sprintf@c,w
 12482  0592  00AE               	movwf	??_sprintf
 12483  0593  083A               	movf	sprintf@sp,w
 12484  0594  0086               	movwf	6
 12485  0595  0187               	clrf	7
 12486  0596  082E               	movf	??_sprintf,w
 12487  0597  0081               	movwf	1
 12488  0598                     l6194:
 12489  0598  3001               	movlw	1
 12490  0599  00AE               	movwf	??_sprintf
 12491  059A  082E               	movf	??_sprintf,w
 12492  059B  07BA               	addwf	sprintf@sp,f
 12493                           
 12494                           ;doprnt.c: 559: continue;
 12495  059C  2F09               	goto	l6292
 12496  059D                     l6196:
 12497                           
 12498                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
 12499  059D  01B7               	clrf	sprintf@width
 12500  059E  01B8               	clrf	sprintf@width+1
 12501                           
 12502                           ;doprnt.c: 565: flag = 0;
 12503  059F  01B6               	clrf	sprintf@flag
 12504  05A0  2DA6               	goto	l6202
 12505  05A1                     l1728:	
 12506                           ;doprnt.c: 596: case '0':
 12507                           
 12508                           
 12509                           ;doprnt.c: 597: flag |= 0x04;
 12510  05A1  1536               	bsf	sprintf@flag,2
 12511  05A2                     l6198:
 12512                           
 12513                           ;doprnt.c: 598: f++;
 12514  05A2  3001               	movlw	1
 12515  05A3  07A6               	addwf	sprintf@f,f
 12516  05A4  3000               	movlw	0
 12517  05A5  3DA7               	addwfc	sprintf@f+1,f
 12518  05A6                     l6202:	
 12519                           ;doprnt.c: 599: continue;
 12520                           
 12521  05A6  0826               	movf	sprintf@f,w
 12522  05A7  0084               	movwf	4
 12523  05A8  0827               	movf	sprintf@f+1,w
 12524  05A9  0085               	movwf	5
 12525  05AA  0800               	movf	0,w	;code access
 12526                           
 12527                           ; Switch size 1, requested type "simple"
 12528                           ; Number of cases is 1, Range of values is 48 to 48
 12529                           ; switch strategies available:
 12530                           ; Name         Instructions Cycles
 12531                           ; simple_byte            4     3 (average)
 12532                           ; direct_byte           11     9 (fixed)
 12533                           ; jumptable            263     9 (fixed)
 12534                           ;	Chosen strategy is simple_byte
 12535  05AB  3A30               	xorlw	48	; case 48
 12536  05AC  1903               	skipnz
 12537  05AD  2DA1               	goto	l1728
 12538  05AE  2DAF               	goto	l6204
 12539  05AF                     l6204:
 12540                           
 12541                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
 12542  05AF  0826               	movf	sprintf@f,w
 12543  05B0  0084               	movwf	4
 12544  05B1  0827               	movf	sprintf@f+1,w
 12545  05B2  0085               	movwf	5
 12546  05B3  0800               	movf	0,w	;code access
 12547  05B4  3192  22CB  3185   	fcall	_isdigit
 12548  05B7  1C03               	btfss	3,0
 12549  05B8  2DBA               	goto	u6631
 12550  05B9  2DBB               	goto	u6630
 12551  05BA                     u6631:
 12552  05BA  2DEE               	goto	l6218
 12553  05BB                     u6630:
 12554  05BB                     l6206:
 12555                           
 12556                           ;doprnt.c: 615: width = 0;
 12557  05BB  0020               	movlb	0	; select bank0
 12558  05BC  01B7               	clrf	sprintf@width
 12559  05BD  01B8               	clrf	sprintf@width+1
 12560  05BE                     l6208:
 12561                           
 12562                           ;doprnt.c: 617: width *= 10;
 12563  05BE  300A               	movlw	10
 12564  05BF  00F2               	movwf	___wmul@multiplier
 12565  05C0  3000               	movlw	0
 12566  05C1  00F3               	movwf	___wmul@multiplier+1
 12567  05C2  0020               	movlb	0	; select bank0
 12568  05C3  0838               	movf	sprintf@width+1,w
 12569  05C4  00F5               	movwf	___wmul@multiplicand+1
 12570  05C5  0837               	movf	sprintf@width,w
 12571  05C6  00F4               	movwf	___wmul@multiplicand
 12572  05C7  3194  2418  3185   	fcall	___wmul
 12573  05CA  0873               	movf	?___wmul+1,w
 12574  05CB  0020               	movlb	0	; select bank0
 12575  05CC  00B8               	movwf	sprintf@width+1
 12576  05CD  0872               	movf	?___wmul,w
 12577  05CE  00B7               	movwf	sprintf@width
 12578  05CF                     l6210:
 12579                           
 12580                           ;doprnt.c: 618: width += *f++ - '0';
 12581  05CF  0826               	movf	sprintf@f,w
 12582  05D0  0084               	movwf	4
 12583  05D1  0827               	movf	sprintf@f+1,w
 12584  05D2  0085               	movwf	5
 12585  05D3  0800               	movf	0,w	;code access
 12586  05D4  3ED0               	addlw	208
 12587  05D5  00AE               	movwf	??_sprintf
 12588  05D6  30FF               	movlw	255
 12589  05D7  1803               	skipnc
 12590  05D8  3000               	movlw	0
 12591  05D9  00AF               	movwf	??_sprintf+1
 12592  05DA  082E               	movf	??_sprintf,w
 12593  05DB  07B7               	addwf	sprintf@width,f
 12594  05DC  082F               	movf	??_sprintf+1,w
 12595  05DD  3DB8               	addwfc	sprintf@width+1,f
 12596  05DE                     l6212:
 12597  05DE  3001               	movlw	1
 12598  05DF  07A6               	addwf	sprintf@f,f
 12599  05E0  3000               	movlw	0
 12600  05E1  3DA7               	addwfc	sprintf@f+1,f
 12601  05E2                     l6214:
 12602                           
 12603                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
 12604  05E2  0826               	movf	sprintf@f,w
 12605  05E3  0084               	movwf	4
 12606  05E4  0827               	movf	sprintf@f+1,w
 12607  05E5  0085               	movwf	5
 12608  05E6  0800               	movf	0,w	;code access
 12609  05E7  3192  22CB  3185   	fcall	_isdigit
 12610  05EA  1803               	btfsc	3,0
 12611  05EB  2DED               	goto	u6641
 12612  05EC  2DEE               	goto	u6640
 12613  05ED                     u6641:
 12614  05ED  2DBE               	goto	l6208
 12615  05EE                     u6640:
 12616  05EE                     l6218:
 12617  05EE  0020               	movlb	0	; select bank0
 12618  05EF  0827               	movf	sprintf@f+1,w
 12619  05F0  00AF               	movwf	??_sprintf+1
 12620  05F1  0826               	movf	sprintf@f,w
 12621  05F2  00AE               	movwf	??_sprintf
 12622  05F3  0AA6               	incf	sprintf@f,f
 12623  05F4  1903               	skipnz
 12624  05F5  0AA7               	incf	sprintf@f+1,f
 12625  05F6  082E               	movf	??_sprintf,w
 12626  05F7  0084               	movwf	4
 12627  05F8  082F               	movf	??_sprintf+1,w
 12628  05F9  0085               	movwf	5
 12629  05FA  0800               	movf	0,w	;code access
 12630  05FB  00B9               	movwf	sprintf@c
 12631                           
 12632                           ; Switch size 1, requested type "simple"
 12633                           ; Number of cases is 3, Range of values is 0 to 105
 12634                           ; switch strategies available:
 12635                           ; Name         Instructions Cycles
 12636                           ; simple_byte           10     6 (average)
 12637                           ; direct_byte          218     6 (fixed)
 12638                           ; jumptable            260     6 (fixed)
 12639                           ;	Chosen strategy is simple_byte
 12640  05FC  3A00               	xorlw	0	; case 0
 12641  05FD  1903               	skipnz
 12642  05FE  2F1D               	goto	l6294
 12643  05FF  3A64               	xorlw	100	; case 100
 12644  0600  1903               	skipnz
 12645  0601  2E06               	goto	l6220
 12646  0602  3A0D               	xorlw	13	; case 105
 12647  0603  1903               	skipnz
 12648  0604  2E06               	goto	l6220
 12649  0605  2F09               	goto	l6292
 12650  0606                     l6220:
 12651                           
 12652                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
 12653  0606  0832               	movf	sprintf@ap,w
 12654  0607  0086               	movwf	6
 12655  0608  0187               	clrf	7
 12656  0609  3F40               	moviw [0]fsr1
 12657  060A  00B4               	movwf	sprintf@val
 12658  060B  3F41               	moviw [1]fsr1
 12659  060C  00B5               	movwf	sprintf@val+1
 12660  060D                     l6222:
 12661  060D  3002               	movlw	2
 12662  060E  00AE               	movwf	??_sprintf
 12663  060F  082E               	movf	??_sprintf,w
 12664  0610  07B2               	addwf	sprintf@ap,f
 12665  0611                     l6224:
 12666                           
 12667                           ;doprnt.c: 1287: if((int)val < 0) {
 12668  0611  1FB5               	btfss	sprintf@val+1,7
 12669  0612  2E14               	goto	u6651
 12670  0613  2E15               	goto	u6650
 12671  0614                     u6651:
 12672  0614  2E1E               	goto	l6230
 12673  0615                     u6650:
 12674  0615                     l6226:
 12675                           
 12676                           ;doprnt.c: 1288: flag |= 0x03;
 12677  0615  3003               	movlw	3
 12678  0616  00AE               	movwf	??_sprintf
 12679  0617  082E               	movf	??_sprintf,w
 12680  0618  04B6               	iorwf	sprintf@flag,f
 12681  0619                     l6228:
 12682                           
 12683                           ;doprnt.c: 1289: val = -val;
 12684  0619  09B4               	comf	sprintf@val,f
 12685  061A  09B5               	comf	sprintf@val+1,f
 12686  061B  0AB4               	incf	sprintf@val,f
 12687  061C  1903               	skipnz
 12688  061D  0AB5               	incf	sprintf@val+1,f
 12689  061E                     l6230:
 12690                           
 12691                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
 12692  061E  01B9               	clrf	sprintf@c
 12693  061F  0AB9               	incf	sprintf@c,f
 12694  0620                     l6236:
 12695                           
 12696                           ;doprnt.c: 1332: if(val < dpowers[c])
 12697  0620  0839               	movf	sprintf@c,w
 12698  0621  00AE               	movwf	??_sprintf
 12699  0622  01AF               	clrf	??_sprintf+1
 12700  0623  35AE               	lslf	??_sprintf,f
 12701  0624  0DAF               	rlf	??_sprintf+1,f
 12702  0625  3036               	movlw	low (_dpowers| (0+32768))
 12703  0626  072E               	addwf	??_sprintf,w
 12704  0627  0084               	movwf	4
 12705  0628  3098               	movlw	high (_dpowers| (0+32768))
 12706  0629  3D2F               	addwfc	??_sprintf+1,w
 12707  062A  0085               	movwf	5
 12708  062B  3F00               	moviw [0]fsr0
 12709  062C  00B0               	movwf	??_sprintf+2
 12710  062D  3F01               	moviw [1]fsr0
 12711  062E  00B1               	movwf	??_sprintf+3
 12712  062F  0831               	movf	??_sprintf+3,w
 12713  0630  0235               	subwf	sprintf@val+1,w
 12714  0631  1D03               	skipz
 12715  0632  2E35               	goto	u6665
 12716  0633  0830               	movf	??_sprintf+2,w
 12717  0634  0234               	subwf	sprintf@val,w
 12718  0635                     u6665:
 12719  0635  1803               	skipnc
 12720  0636  2E38               	goto	u6661
 12721  0637  2E39               	goto	u6660
 12722  0638                     u6661:
 12723  0638  2E3A               	goto	l6240
 12724  0639                     u6660:
 12725  0639  2E44               	goto	l6242
 12726  063A                     l6240:
 12727  063A  3001               	movlw	1
 12728  063B  00AE               	movwf	??_sprintf
 12729  063C  082E               	movf	??_sprintf,w
 12730  063D  07B9               	addwf	sprintf@c,f
 12731  063E  3005               	movlw	5
 12732  063F  0639               	xorwf	sprintf@c,w
 12733  0640  1D03               	btfss	3,2
 12734  0641  2E43               	goto	u6671
 12735  0642  2E44               	goto	u6670
 12736  0643                     u6671:
 12737  0643  2E20               	goto	l6236
 12738  0644                     u6670:
 12739  0644                     l6242:
 12740                           
 12741                           ;doprnt.c: 1371: if(width && flag & 0x03)
 12742  0644  0837               	movf	sprintf@width,w
 12743  0645  0438               	iorwf	sprintf@width+1,w
 12744  0646  1903               	btfsc	3,2
 12745  0647  2E49               	goto	u6681
 12746  0648  2E4A               	goto	u6680
 12747  0649                     u6681:
 12748  0649  2E54               	goto	l1746
 12749  064A                     u6680:
 12750  064A                     l6244:
 12751  064A  0836               	movf	sprintf@flag,w
 12752  064B  3903               	andlw	3
 12753  064C  1903               	btfsc	3,2
 12754  064D  2E4F               	goto	u6691
 12755  064E  2E50               	goto	u6690
 12756  064F                     u6691:
 12757  064F  2E54               	goto	l1746
 12758  0650                     u6690:
 12759  0650                     l6246:
 12760                           
 12761                           ;doprnt.c: 1372: width--;
 12762  0650  30FF               	movlw	255
 12763  0651  07B7               	addwf	sprintf@width,f
 12764  0652  30FF               	movlw	255
 12765  0653  3DB8               	addwfc	sprintf@width+1,f
 12766  0654                     l1746:
 12767                           
 12768                           ;doprnt.c: 1407: if(width > c)
 12769  0654  0838               	movf	sprintf@width+1,w
 12770  0655  3A80               	xorlw	128
 12771  0656  3C80               	sublw	128
 12772  0657  1D03               	skipz
 12773  0658  2E5B               	goto	u6705
 12774  0659  0837               	movf	sprintf@width,w
 12775  065A  0239               	subwf	sprintf@c,w
 12776  065B                     u6705:
 12777  065B  1803               	skipnc
 12778  065C  2E5E               	goto	u6701
 12779  065D  2E5F               	goto	u6700
 12780  065E                     u6701:
 12781  065E  2E68               	goto	l6250
 12782  065F                     u6700:
 12783  065F                     l6248:
 12784                           
 12785                           ;doprnt.c: 1408: width -= c;
 12786  065F  0020               	movlb	0	; select bank0
 12787  0660  0839               	movf	sprintf@c,w
 12788  0661  00AE               	movwf	??_sprintf
 12789  0662  01AF               	clrf	??_sprintf+1
 12790  0663  082E               	movf	??_sprintf,w
 12791  0664  02B7               	subwf	sprintf@width,f
 12792  0665  082F               	movf	??_sprintf+1,w
 12793  0666  3BB8               	subwfb	sprintf@width+1,f
 12794  0667  2E6B               	goto	l6252
 12795  0668                     l6250:
 12796                           
 12797                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
 12798  0668  0020               	movlb	0	; select bank0
 12799  0669  01B7               	clrf	sprintf@width
 12800  066A  01B8               	clrf	sprintf@width+1
 12801  066B                     l6252:
 12802                           
 12803                           ;doprnt.c: 1413: if(flag & 0x04) {
 12804  066B  1D36               	btfss	sprintf@flag,2
 12805  066C  2E6E               	goto	u6711
 12806  066D  2E6F               	goto	u6710
 12807  066E                     u6711:
 12808  066E  2E9C               	goto	l6268
 12809  066F                     u6710:
 12810  066F                     l6254:
 12811                           
 12812                           ;doprnt.c: 1418: if(flag & 0x03)
 12813  066F  0836               	movf	sprintf@flag,w
 12814  0670  3903               	andlw	3
 12815  0671  1903               	btfsc	3,2
 12816  0672  2E74               	goto	u6721
 12817  0673  2E75               	goto	u6720
 12818  0674                     u6721:
 12819  0674  2E80               	goto	l6260
 12820  0675                     u6720:
 12821  0675                     l6256:
 12822                           
 12823                           ;doprnt.c: 1419: ((*sp++ = ('-')));
 12824  0675  302D               	movlw	45
 12825  0676  00AE               	movwf	??_sprintf
 12826  0677  083A               	movf	sprintf@sp,w
 12827  0678  0086               	movwf	6
 12828  0679  0187               	clrf	7
 12829  067A  082E               	movf	??_sprintf,w
 12830  067B  0081               	movwf	1
 12831  067C                     l6258:
 12832  067C  3001               	movlw	1
 12833  067D  00AE               	movwf	??_sprintf
 12834  067E  082E               	movf	??_sprintf,w
 12835  067F  07BA               	addwf	sprintf@sp,f
 12836  0680                     l6260:
 12837                           
 12838                           ;doprnt.c: 1441: if(width)
 12839  0680  0837               	movf	sprintf@width,w
 12840  0681  0438               	iorwf	sprintf@width+1,w
 12841  0682  1903               	btfsc	3,2
 12842  0683  2E85               	goto	u6731
 12843  0684  2E86               	goto	u6730
 12844  0685                     u6731:
 12845  0685  2EC8               	goto	l6282
 12846  0686                     u6730:
 12847  0686                     l6262:
 12848                           
 12849                           ;doprnt.c: 1443: ((*sp++ = ('0')));
 12850  0686  3030               	movlw	48
 12851  0687  00AE               	movwf	??_sprintf
 12852  0688  083A               	movf	sprintf@sp,w
 12853  0689  0086               	movwf	6
 12854  068A  0187               	clrf	7
 12855  068B  082E               	movf	??_sprintf,w
 12856  068C  0081               	movwf	1
 12857  068D                     l6264:
 12858  068D  3001               	movlw	1
 12859  068E  00AE               	movwf	??_sprintf
 12860  068F  082E               	movf	??_sprintf,w
 12861  0690  07BA               	addwf	sprintf@sp,f
 12862  0691                     l6266:
 12863                           
 12864                           ;doprnt.c: 1444: while(--width);
 12865  0691  30FF               	movlw	255
 12866  0692  07B7               	addwf	sprintf@width,f
 12867  0693  30FF               	movlw	255
 12868  0694  3DB8               	addwfc	sprintf@width+1,f
 12869  0695  0837               	movf	sprintf@width,w
 12870  0696  0438               	iorwf	sprintf@width+1,w
 12871  0697  1D03               	btfss	3,2
 12872  0698  2E9A               	goto	u6741
 12873  0699  2E9B               	goto	u6740
 12874  069A                     u6741:
 12875  069A  2E86               	goto	l6262
 12876  069B                     u6740:
 12877  069B  2EC8               	goto	l6282
 12878  069C                     l6268:
 12879                           
 12880                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
 12881  069C  0837               	movf	sprintf@width,w
 12882  069D  0438               	iorwf	sprintf@width+1,w
 12883  069E  1903               	btfsc	3,2
 12884  069F  2EA1               	goto	u6751
 12885  06A0  2EA2               	goto	u6750
 12886  06A1                     u6751:
 12887  06A1  2EB7               	goto	l6276
 12888  06A2                     u6750:
 12889  06A2                     l6270:
 12890                           
 12891                           ;doprnt.c: 1456: ((*sp++ = (' ')));
 12892  06A2  3020               	movlw	32
 12893  06A3  00AE               	movwf	??_sprintf
 12894  06A4  083A               	movf	sprintf@sp,w
 12895  06A5  0086               	movwf	6
 12896  06A6  0187               	clrf	7
 12897  06A7  082E               	movf	??_sprintf,w
 12898  06A8  0081               	movwf	1
 12899  06A9                     l6272:
 12900  06A9  3001               	movlw	1
 12901  06AA  00AE               	movwf	??_sprintf
 12902  06AB  082E               	movf	??_sprintf,w
 12903  06AC  07BA               	addwf	sprintf@sp,f
 12904  06AD                     l6274:
 12905                           
 12906                           ;doprnt.c: 1457: while(--width);
 12907  06AD  30FF               	movlw	255
 12908  06AE  07B7               	addwf	sprintf@width,f
 12909  06AF  30FF               	movlw	255
 12910  06B0  3DB8               	addwfc	sprintf@width+1,f
 12911  06B1  0837               	movf	sprintf@width,w
 12912  06B2  0438               	iorwf	sprintf@width+1,w
 12913  06B3  1D03               	btfss	3,2
 12914  06B4  2EB6               	goto	u6761
 12915  06B5  2EB7               	goto	u6760
 12916  06B6                     u6761:
 12917  06B6  2EA2               	goto	l6270
 12918  06B7                     u6760:
 12919  06B7                     l6276:
 12920                           
 12921                           ;doprnt.c: 1464: if(flag & 0x03)
 12922  06B7  0836               	movf	sprintf@flag,w
 12923  06B8  3903               	andlw	3
 12924  06B9  1903               	btfsc	3,2
 12925  06BA  2EBC               	goto	u6771
 12926  06BB  2EBD               	goto	u6770
 12927  06BC                     u6771:
 12928  06BC  2EC8               	goto	l6282
 12929  06BD                     u6770:
 12930  06BD                     l6278:
 12931                           
 12932                           ;doprnt.c: 1465: ((*sp++ = ('-')));
 12933  06BD  302D               	movlw	45
 12934  06BE  00AE               	movwf	??_sprintf
 12935  06BF  083A               	movf	sprintf@sp,w
 12936  06C0  0086               	movwf	6
 12937  06C1  0187               	clrf	7
 12938  06C2  082E               	movf	??_sprintf,w
 12939  06C3  0081               	movwf	1
 12940  06C4                     l6280:
 12941  06C4  3001               	movlw	1
 12942  06C5  00AE               	movwf	??_sprintf
 12943  06C6  082E               	movf	??_sprintf,w
 12944  06C7  07BA               	addwf	sprintf@sp,f
 12945  06C8                     l6282:
 12946                           
 12947                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
 12948  06C8  0839               	movf	sprintf@c,w
 12949  06C9  00AE               	movwf	??_sprintf
 12950  06CA  082E               	movf	??_sprintf,w
 12951  06CB  00B3               	movwf	sprintf@prec
 12952                           
 12953                           ;doprnt.c: 1500: while(prec--) {
 12954  06CC  2F00               	goto	l6290
 12955  06CD                     l6284:
 12956                           
 12957                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
 12958  06CD  300A               	movlw	10
 12959  06CE  00A0               	movwf	___lwmod@divisor
 12960  06CF  3000               	movlw	0
 12961  06D0  00A1               	movwf	___lwmod@divisor+1
 12962  06D1  0833               	movf	sprintf@prec,w
 12963  06D2  00AE               	movwf	??_sprintf
 12964  06D3  01AF               	clrf	??_sprintf+1
 12965  06D4  35AE               	lslf	??_sprintf,f
 12966  06D5  0DAF               	rlf	??_sprintf+1,f
 12967  06D6  3036               	movlw	low (_dpowers| (0+32768))
 12968  06D7  072E               	addwf	??_sprintf,w
 12969  06D8  0084               	movwf	4
 12970  06D9  3098               	movlw	high (_dpowers| (0+32768))
 12971  06DA  3D2F               	addwfc	??_sprintf+1,w
 12972  06DB  0085               	movwf	5
 12973  06DC  3F00               	moviw [0]fsr0
 12974  06DD  00F2               	movwf	___lwdiv@divisor
 12975  06DE  3F01               	moviw [1]fsr0
 12976  06DF  00F3               	movwf	___lwdiv@divisor+1
 12977  06E0  0835               	movf	sprintf@val+1,w
 12978  06E1  00F5               	movwf	___lwdiv@dividend+1
 12979  06E2  0834               	movf	sprintf@val,w
 12980  06E3  00F4               	movwf	___lwdiv@dividend
 12981  06E4  3197  2746  3185   	fcall	___lwdiv
 12982  06E7  0873               	movf	?___lwdiv+1,w
 12983  06E8  0020               	movlb	0	; select bank0
 12984  06E9  00A3               	movwf	___lwmod@dividend+1
 12985  06EA  0872               	movf	?___lwdiv,w
 12986  06EB  00A2               	movwf	___lwmod@dividend
 12987  06EC  3196  269D  3185   	fcall	___lwmod
 12988  06EF  0020               	movlb	0	; select bank0
 12989  06F0  0820               	movf	?___lwmod,w
 12990  06F1  3E30               	addlw	48
 12991  06F2  00B0               	movwf	??_sprintf+2
 12992  06F3  0830               	movf	??_sprintf+2,w
 12993  06F4  00B9               	movwf	sprintf@c
 12994  06F5                     l6286:
 12995                           
 12996                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
 12997  06F5  0839               	movf	sprintf@c,w
 12998  06F6  00AE               	movwf	??_sprintf
 12999  06F7  083A               	movf	sprintf@sp,w
 13000  06F8  0086               	movwf	6
 13001  06F9  0187               	clrf	7
 13002  06FA  082E               	movf	??_sprintf,w
 13003  06FB  0081               	movwf	1
 13004  06FC                     l6288:
 13005  06FC  3001               	movlw	1
 13006  06FD  00AE               	movwf	??_sprintf
 13007  06FE  082E               	movf	??_sprintf,w
 13008  06FF  07BA               	addwf	sprintf@sp,f
 13009  0700                     l6290:
 13010  0700  30FF               	movlw	255
 13011  0701  00AE               	movwf	??_sprintf
 13012  0702  082E               	movf	??_sprintf,w
 13013  0703  07B3               	addwf	sprintf@prec,f
 13014  0704  0A33               	incf	sprintf@prec,w
 13015  0705  1D03               	btfss	3,2
 13016  0706  2F08               	goto	u6781
 13017  0707  2F09               	goto	u6780
 13018  0708                     u6781:
 13019  0708  2ECD               	goto	l6284
 13020  0709                     u6780:
 13021  0709                     l6292:
 13022  0709  0827               	movf	sprintf@f+1,w
 13023  070A  00AF               	movwf	??_sprintf+1
 13024  070B  0826               	movf	sprintf@f,w
 13025  070C  00AE               	movwf	??_sprintf
 13026  070D  0AA6               	incf	sprintf@f,f
 13027  070E  1903               	skipnz
 13028  070F  0AA7               	incf	sprintf@f+1,f
 13029  0710  082E               	movf	??_sprintf,w
 13030  0711  0084               	movwf	4
 13031  0712  082F               	movf	??_sprintf+1,w
 13032  0713  0085               	movwf	5
 13033  0714  0800               	movf	0,w	;code access
 13034  0715  00B0               	movwf	??_sprintf+2
 13035  0716  0830               	movf	??_sprintf+2,w
 13036  0717  00B9               	movwf	sprintf@c
 13037  0718  0839               	movf	sprintf@c,w
 13038  0719  1D03               	btfss	3,2
 13039  071A  2F1C               	goto	u6791
 13040  071B  2F1D               	goto	u6790
 13041  071C                     u6791:
 13042  071C  2D8B               	goto	l6190
 13043  071D                     u6790:
 13044  071D                     l6294:
 13045                           
 13046                           ;doprnt.c: 1564: *sp = 0;
 13047  071D  083A               	movf	sprintf@sp,w
 13048  071E  0086               	movwf	6
 13049  071F  0187               	clrf	7
 13050  0720  0181               	clrf	1
 13051  0721                     l1763:
 13052  0721  0008               	return
 13053  0722                     __end_of_sprintf:
 13054                           
 13055                           	psect	text13
 13056  12CB                     __ptext13:	
 13057 ;; *************** function _isdigit *****************
 13058 ;; Defined at:
 13059 ;;		line 8 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
 13060 ;; Parameters:    Size  Location     Type
 13061 ;;  c               1    wreg     unsigned char 
 13062 ;; Auto vars:     Size  Location     Type
 13063 ;;  c               1    3[COMMON] unsigned char 
 13064 ;; Return value:  Size  Location     Type
 13065 ;;		None               void
 13066 ;; Registers used:
 13067 ;;		wreg, status,2, status,0
 13068 ;; Tracked objects:
 13069 ;;		On entry : 0/0
 13070 ;;		On exit  : 0/0
 13071 ;;		Unchanged: 0/0
 13072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13076 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13077 ;;Total ram usage:        2 bytes
 13078 ;; Hardware stack levels used:    1
 13079 ;; Hardware stack levels required when called:    4
 13080 ;; This function calls:
 13081 ;;		Nothing
 13082 ;; This function is called by:
 13083 ;;		_sprintf
 13084 ;; This function uses a non-reentrant model
 13085 ;;
 13086                           
 13087                           
 13088                           ;psect for function _isdigit
 13089  12CB                     _isdigit:
 13090                           
 13091                           ;incstack = 0
 13092                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 13093                           ;isdigit@c stored from wreg
 13094  12CB  00F3               	movwf	isdigit@c
 13095  12CC                     l4424:
 13096  12CC  01F2               	clrf	_isdigit$2990
 13097  12CD                     l4426:
 13098  12CD  303A               	movlw	58
 13099  12CE  0273               	subwf	isdigit@c,w
 13100  12CF  1803               	skipnc
 13101  12D0  2AD2               	goto	u3341
 13102  12D1  2AD3               	goto	u3340
 13103  12D2                     u3341:
 13104  12D2  2ADB               	goto	l4432
 13105  12D3                     u3340:
 13106  12D3                     l4428:
 13107  12D3  3030               	movlw	48
 13108  12D4  0273               	subwf	isdigit@c,w
 13109  12D5  1C03               	skipc
 13110  12D6  2AD8               	goto	u3351
 13111  12D7  2AD9               	goto	u3350
 13112  12D8                     u3351:
 13113  12D8  2ADB               	goto	l4432
 13114  12D9                     u3350:
 13115  12D9                     l4430:
 13116  12D9  01F2               	clrf	_isdigit$2990
 13117  12DA  0AF2               	incf	_isdigit$2990,f
 13118  12DB                     l4432:
 13119  12DB  0C72               	rrf	_isdigit$2990,w
 13120  12DC                     l2220:
 13121  12DC  0008               	return
 13122  12DD                     __end_of_isdigit:
 13123                           
 13124                           	psect	text14
 13125  169D                     __ptext14:	
 13126 ;; *************** function ___lwmod *****************
 13127 ;; Defined at:
 13128 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
 13129 ;; Parameters:    Size  Location     Type
 13130 ;;  divisor         2    0[BANK0 ] unsigned int 
 13131 ;;  dividend        2    2[BANK0 ] unsigned int 
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;  counter         1    5[BANK0 ] unsigned char 
 13134 ;; Return value:  Size  Location     Type
 13135 ;;                  2    0[BANK0 ] unsigned int 
 13136 ;; Registers used:
 13137 ;;		wreg, status,2, status,0
 13138 ;; Tracked objects:
 13139 ;;		On entry : 0/0
 13140 ;;		On exit  : 0/0
 13141 ;;		Unchanged: 0/0
 13142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13143 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13147 ;;Total ram usage:        6 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; Hardware stack levels required when called:    4
 13150 ;; This function calls:
 13151 ;;		Nothing
 13152 ;; This function is called by:
 13153 ;;		_sprintf
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           
 13158                           ;psect for function ___lwmod
 13159  169D                     ___lwmod:
 13160  169D                     l6084:	
 13161                           ;incstack = 0
 13162                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13163                           
 13164  169D  0020               	movlb	0	; select bank0
 13165  169E  0820               	movf	___lwmod@divisor,w
 13166  169F  0421               	iorwf	___lwmod@divisor+1,w
 13167  16A0  1903               	btfsc	3,2
 13168  16A1  2EA3               	goto	u6291
 13169  16A2  2EA4               	goto	u6290
 13170  16A3                     u6291:
 13171  16A3  2ECD               	goto	l6102
 13172  16A4                     u6290:
 13173  16A4                     l6086:
 13174  16A4  01A5               	clrf	___lwmod@counter
 13175  16A5  0AA5               	incf	___lwmod@counter,f
 13176  16A6  2EB0               	goto	l6092
 13177  16A7                     l6088:
 13178  16A7  3001               	movlw	1
 13179  16A8                     u6305:
 13180  16A8  35A0               	lslf	___lwmod@divisor,f
 13181  16A9  0DA1               	rlf	___lwmod@divisor+1,f
 13182  16AA  0B89               	decfsz	9,f
 13183  16AB  2EA8               	goto	u6305
 13184  16AC                     l6090:
 13185  16AC  3001               	movlw	1
 13186  16AD  00A4               	movwf	??___lwmod
 13187  16AE  0824               	movf	??___lwmod,w
 13188  16AF  07A5               	addwf	___lwmod@counter,f
 13189  16B0                     l6092:
 13190  16B0  1FA1               	btfss	___lwmod@divisor+1,7
 13191  16B1  2EB3               	goto	u6311
 13192  16B2  2EB4               	goto	u6310
 13193  16B3                     u6311:
 13194  16B3  2EA7               	goto	l6088
 13195  16B4                     u6310:
 13196  16B4                     l6094:
 13197  16B4  0821               	movf	___lwmod@divisor+1,w
 13198  16B5  0223               	subwf	___lwmod@dividend+1,w
 13199  16B6  1D03               	skipz
 13200  16B7  2EBA               	goto	u6325
 13201  16B8  0820               	movf	___lwmod@divisor,w
 13202  16B9  0222               	subwf	___lwmod@dividend,w
 13203  16BA                     u6325:
 13204  16BA  1C03               	skipc
 13205  16BB  2EBD               	goto	u6321
 13206  16BC  2EBE               	goto	u6320
 13207  16BD                     u6321:
 13208  16BD  2EC2               	goto	l6098
 13209  16BE                     u6320:
 13210  16BE                     l6096:
 13211  16BE  0820               	movf	___lwmod@divisor,w
 13212  16BF  02A2               	subwf	___lwmod@dividend,f
 13213  16C0  0821               	movf	___lwmod@divisor+1,w
 13214  16C1  3BA3               	subwfb	___lwmod@dividend+1,f
 13215  16C2                     l6098:
 13216  16C2  3001               	movlw	1
 13217  16C3                     u6335:
 13218  16C3  36A1               	lsrf	___lwmod@divisor+1,f
 13219  16C4  0CA0               	rrf	___lwmod@divisor,f
 13220  16C5  0B89               	decfsz	9,f
 13221  16C6  2EC3               	goto	u6335
 13222  16C7                     l6100:
 13223  16C7  3001               	movlw	1
 13224  16C8  02A5               	subwf	___lwmod@counter,f
 13225  16C9  1D03               	btfss	3,2
 13226  16CA  2ECC               	goto	u6341
 13227  16CB  2ECD               	goto	u6340
 13228  16CC                     u6341:
 13229  16CC  2EB4               	goto	l6094
 13230  16CD                     u6340:
 13231  16CD                     l6102:
 13232  16CD  0823               	movf	___lwmod@dividend+1,w
 13233  16CE  00A1               	movwf	?___lwmod+1
 13234  16CF  0822               	movf	___lwmod@dividend,w
 13235  16D0  00A0               	movwf	?___lwmod
 13236  16D1                     l2049:
 13237  16D1  0008               	return
 13238  16D2                     __end_of___lwmod:
 13239                           
 13240                           	psect	text15
 13241  1746                     __ptext15:	
 13242 ;; *************** function ___lwdiv *****************
 13243 ;; Defined at:
 13244 ;;		line 5 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
 13245 ;; Parameters:    Size  Location     Type
 13246 ;;  divisor         2    2[COMMON] unsigned int 
 13247 ;;  dividend        2    4[COMMON] unsigned int 
 13248 ;; Auto vars:     Size  Location     Type
 13249 ;;  quotient        2    7[COMMON] unsigned int 
 13250 ;;  counter         1    9[COMMON] unsigned char 
 13251 ;; Return value:  Size  Location     Type
 13252 ;;                  2    2[COMMON] unsigned int 
 13253 ;; Registers used:
 13254 ;;		wreg, status,2, status,0
 13255 ;; Tracked objects:
 13256 ;;		On entry : 0/0
 13257 ;;		On exit  : 0/0
 13258 ;;		Unchanged: 0/0
 13259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13260 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13263 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13264 ;;Total ram usage:        8 bytes
 13265 ;; Hardware stack levels used:    1
 13266 ;; Hardware stack levels required when called:    4
 13267 ;; This function calls:
 13268 ;;		Nothing
 13269 ;; This function is called by:
 13270 ;;		_sprintf
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           
 13275                           ;psect for function ___lwdiv
 13276  1746                     ___lwdiv:
 13277  1746                     l4450:	
 13278                           ;incstack = 0
 13279                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13280                           
 13281  1746  01F7               	clrf	___lwdiv@quotient
 13282  1747  01F8               	clrf	___lwdiv@quotient+1
 13283  1748                     l4452:
 13284  1748  0872               	movf	___lwdiv@divisor,w
 13285  1749  0473               	iorwf	___lwdiv@divisor+1,w
 13286  174A  1903               	btfsc	3,2
 13287  174B  2F4D               	goto	u3401
 13288  174C  2F4E               	goto	u3400
 13289  174D                     u3401:
 13290  174D  2F7D               	goto	l4472
 13291  174E                     u3400:
 13292  174E                     l4454:
 13293  174E  01F9               	clrf	___lwdiv@counter
 13294  174F  0AF9               	incf	___lwdiv@counter,f
 13295  1750  2F5A               	goto	l4460
 13296  1751                     l4456:
 13297  1751  3001               	movlw	1
 13298  1752                     u3415:
 13299  1752  35F2               	lslf	___lwdiv@divisor,f
 13300  1753  0DF3               	rlf	___lwdiv@divisor+1,f
 13301  1754  0B89               	decfsz	9,f
 13302  1755  2F52               	goto	u3415
 13303  1756                     l4458:
 13304  1756  3001               	movlw	1
 13305  1757  00F6               	movwf	??___lwdiv
 13306  1758  0876               	movf	??___lwdiv,w
 13307  1759  07F9               	addwf	___lwdiv@counter,f
 13308  175A                     l4460:
 13309  175A  1FF3               	btfss	___lwdiv@divisor+1,7
 13310  175B  2F5D               	goto	u3421
 13311  175C  2F5E               	goto	u3420
 13312  175D                     u3421:
 13313  175D  2F51               	goto	l4456
 13314  175E                     u3420:
 13315  175E                     l4462:
 13316  175E  3001               	movlw	1
 13317  175F                     u3435:
 13318  175F  35F7               	lslf	___lwdiv@quotient,f
 13319  1760  0DF8               	rlf	___lwdiv@quotient+1,f
 13320  1761  0B89               	decfsz	9,f
 13321  1762  2F5F               	goto	u3435
 13322  1763  0873               	movf	___lwdiv@divisor+1,w
 13323  1764  0275               	subwf	___lwdiv@dividend+1,w
 13324  1765  1D03               	skipz
 13325  1766  2F69               	goto	u3445
 13326  1767  0872               	movf	___lwdiv@divisor,w
 13327  1768  0274               	subwf	___lwdiv@dividend,w
 13328  1769                     u3445:
 13329  1769  1C03               	skipc
 13330  176A  2F6C               	goto	u3441
 13331  176B  2F6D               	goto	u3440
 13332  176C                     u3441:
 13333  176C  2F72               	goto	l4468
 13334  176D                     u3440:
 13335  176D                     l4464:
 13336  176D  0872               	movf	___lwdiv@divisor,w
 13337  176E  02F4               	subwf	___lwdiv@dividend,f
 13338  176F  0873               	movf	___lwdiv@divisor+1,w
 13339  1770  3BF5               	subwfb	___lwdiv@dividend+1,f
 13340  1771                     l4466:
 13341  1771  1477               	bsf	___lwdiv@quotient,0
 13342  1772                     l4468:
 13343  1772  3001               	movlw	1
 13344  1773                     u3455:
 13345  1773  36F3               	lsrf	___lwdiv@divisor+1,f
 13346  1774  0CF2               	rrf	___lwdiv@divisor,f
 13347  1775  0B89               	decfsz	9,f
 13348  1776  2F73               	goto	u3455
 13349  1777                     l4470:
 13350  1777  3001               	movlw	1
 13351  1778  02F9               	subwf	___lwdiv@counter,f
 13352  1779  1D03               	btfss	3,2
 13353  177A  2F7C               	goto	u3461
 13354  177B  2F7D               	goto	u3460
 13355  177C                     u3461:
 13356  177C  2F5E               	goto	l4462
 13357  177D                     u3460:
 13358  177D                     l4472:
 13359  177D  0878               	movf	___lwdiv@quotient+1,w
 13360  177E  00F3               	movwf	?___lwdiv+1
 13361  177F  0877               	movf	___lwdiv@quotient,w
 13362  1780  00F2               	movwf	?___lwdiv
 13363  1781                     l2039:
 13364  1781  0008               	return
 13365  1782                     __end_of___lwdiv:
 13366                           
 13367                           	psect	text16
 13368  1634                     __ptext16:	
 13369 ;; *************** function _differenceBetweenTimePeriod *****************
 13370 ;; Defined at:
 13371 ;;		line 333 in file "main.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;  start           3    2[COMMON] struct Time
 13374 ;;  stop            3    5[COMMON] struct Time
 13375 ;;  diff            1    8[COMMON] PTR struct Time
 13376 ;;		 -> update_menuLCD@diff(3), 
 13377 ;; Auto vars:     Size  Location     Type
 13378 ;;		None
 13379 ;; Return value:  Size  Location     Type
 13380 ;;                  1    wreg      void 
 13381 ;; Registers used:
 13382 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13383 ;; Tracked objects:
 13384 ;;		On entry : 0/0
 13385 ;;		On exit  : 0/0
 13386 ;;		Unchanged: 0/0
 13387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13388 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;Total ram usage:        8 bytes
 13393 ;; Hardware stack levels used:    1
 13394 ;; Hardware stack levels required when called:    4
 13395 ;; This function calls:
 13396 ;;		Nothing
 13397 ;; This function is called by:
 13398 ;;		_update_menuLCD
 13399 ;; This function uses a non-reentrant model
 13400 ;;
 13401                           
 13402                           
 13403                           ;psect for function _differenceBetweenTimePeriod
 13404  1634                     _differenceBetweenTimePeriod:
 13405  1634                     l4600:	
 13406                           ;incstack = 0
 13407                           ; Regs used in _differenceBetweenTimePeriod: [wreg+fsr1l+fsr1h+status,2+status,0]
 13408                           
 13409                           
 13410                           ;main.c: 336: while (stop.s > start.s) {
 13411  1634  2E3B               	goto	l4604
 13412  1635                     l4602:
 13413                           
 13414                           ;main.c: 337: --start.m;
 13415  1635  3001               	movlw	1
 13416  1636  02F3               	subwf	differenceBetweenTimePeriod@start+1,f
 13417                           
 13418                           ;main.c: 338: start.s += 60;
 13419  1637  303C               	movlw	60
 13420  1638  00F9               	movwf	??_differenceBetweenTimePeriod
 13421  1639  0879               	movf	??_differenceBetweenTimePeriod,w
 13422  163A  07F4               	addwf	differenceBetweenTimePeriod@start+2,f
 13423  163B                     l4604:
 13424  163B  0877               	movf	differenceBetweenTimePeriod@stop+2,w
 13425  163C  0274               	subwf	differenceBetweenTimePeriod@start+2,w
 13426  163D  1C03               	skipc
 13427  163E  2E40               	goto	u3821
 13428  163F  2E41               	goto	u3820
 13429  1640                     u3821:
 13430  1640  2E35               	goto	l4602
 13431  1641                     u3820:
 13432  1641                     l4606:
 13433                           
 13434                           ;main.c: 339: };main.c: 340: diff->s = start.s - stop.s;
 13435  1641  0877               	movf	differenceBetweenTimePeriod@stop+2,w
 13436  1642  0274               	subwf	differenceBetweenTimePeriod@start+2,w
 13437  1643  00F9               	movwf	??_differenceBetweenTimePeriod
 13438  1644  0878               	movf	differenceBetweenTimePeriod@diff,w
 13439  1645  3E02               	addlw	2
 13440  1646  0086               	movwf	6
 13441  1647  0187               	clrf	7
 13442  1648  0879               	movf	??_differenceBetweenTimePeriod,w
 13443  1649  0081               	movwf	1
 13444                           
 13445                           ;main.c: 341: while (stop.m > start.m) {
 13446  164A  2E51               	goto	l4610
 13447  164B                     l4608:
 13448                           
 13449                           ;main.c: 342: --start.h;
 13450  164B  3001               	movlw	1
 13451  164C  02F2               	subwf	differenceBetweenTimePeriod@start,f
 13452                           
 13453                           ;main.c: 343: start.m += 60;
 13454  164D  303C               	movlw	60
 13455  164E  00F9               	movwf	??_differenceBetweenTimePeriod
 13456  164F  0879               	movf	??_differenceBetweenTimePeriod,w
 13457  1650  07F3               	addwf	differenceBetweenTimePeriod@start+1,f
 13458  1651                     l4610:
 13459  1651  0876               	movf	differenceBetweenTimePeriod@stop+1,w
 13460  1652  0273               	subwf	differenceBetweenTimePeriod@start+1,w
 13461  1653  1C03               	skipc
 13462  1654  2E56               	goto	u3831
 13463  1655  2E57               	goto	u3830
 13464  1656                     u3831:
 13465  1656  2E4B               	goto	l4608
 13466  1657                     u3830:
 13467  1657                     l4612:
 13468                           
 13469                           ;main.c: 344: };main.c: 345: diff->m = start.m - stop.m;
 13470  1657  0876               	movf	differenceBetweenTimePeriod@stop+1,w
 13471  1658  0273               	subwf	differenceBetweenTimePeriod@start+1,w
 13472  1659  00F9               	movwf	??_differenceBetweenTimePeriod
 13473  165A  0A78               	incf	differenceBetweenTimePeriod@diff,w
 13474  165B  0086               	movwf	6
 13475  165C  0187               	clrf	7
 13476  165D  0879               	movf	??_differenceBetweenTimePeriod,w
 13477  165E  0081               	movwf	1
 13478                           
 13479                           ;main.c: 346: diff->h = start.h - stop.h;
 13480  165F  0875               	movf	differenceBetweenTimePeriod@stop,w
 13481  1660  0272               	subwf	differenceBetweenTimePeriod@start,w
 13482  1661  00F9               	movwf	??_differenceBetweenTimePeriod
 13483  1662  0878               	movf	differenceBetweenTimePeriod@diff,w
 13484  1663  0086               	movwf	6
 13485  1664  0187               	clrf	7
 13486  1665  0879               	movf	??_differenceBetweenTimePeriod,w
 13487  1666  0081               	movwf	1
 13488  1667                     l1254:
 13489  1667  0008               	return
 13490  1668                     __end_of_differenceBetweenTimePeriod:
 13491                           
 13492                           	psect	text17
 13493  11F0                     __ptext17:	
 13494 ;; *************** function _TMR2_StopTimer *****************
 13495 ;; Defined at:
 13496 ;;		line 117 in file "mcc_generated_files/tmr2.c"
 13497 ;; Parameters:    Size  Location     Type
 13498 ;;		None
 13499 ;; Auto vars:     Size  Location     Type
 13500 ;;		None
 13501 ;; Return value:  Size  Location     Type
 13502 ;;                  1    wreg      void 
 13503 ;; Registers used:
 13504 ;;		status,2, status,0, pclath, cstack
 13505 ;; Tracked objects:
 13506 ;;		On entry : 0/0
 13507 ;;		On exit  : 0/0
 13508 ;;		Unchanged: 0/0
 13509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13514 ;;Total ram usage:        0 bytes
 13515 ;; Hardware stack levels used:    1
 13516 ;; Hardware stack levels required when called:    5
 13517 ;; This function calls:
 13518 ;;		_TMR2_Stop
 13519 ;; This function is called by:
 13520 ;;		_update_menuLCD
 13521 ;;		_main
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           
 13526                           ;psect for function _TMR2_StopTimer
 13527  11F0                     _TMR2_StopTimer:
 13528  11F0                     l4516:	
 13529                           ;incstack = 0
 13530                           ; Regs used in _TMR2_StopTimer: [status,2+status,0+pclath+cstack]
 13531                           
 13532                           
 13533                           ;tmr2.c: 119: TMR2_Stop();
 13534  11F0  3191  21E9  3191   	fcall	_TMR2_Stop
 13535  11F3                     l665:
 13536  11F3  0008               	return
 13537  11F4                     __end_of_TMR2_StopTimer:
 13538                           
 13539                           	psect	text18
 13540  11E9                     __ptext18:	
 13541 ;; *************** function _TMR2_Stop *****************
 13542 ;; Defined at:
 13543 ;;		line 111 in file "mcc_generated_files/tmr2.c"
 13544 ;; Parameters:    Size  Location     Type
 13545 ;;		None
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;		None
 13548 ;; Return value:  Size  Location     Type
 13549 ;;                  1    wreg      void 
 13550 ;; Registers used:
 13551 ;;		None
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;Total ram usage:        0 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; Hardware stack levels required when called:    4
 13564 ;; This function calls:
 13565 ;;		Nothing
 13566 ;; This function is called by:
 13567 ;;		_TMR2_StopTimer
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           
 13572                           ;psect for function _TMR2_Stop
 13573  11E9                     _TMR2_Stop:
 13574  11E9                     l4402:	
 13575                           ;incstack = 0
 13576                           ; Regs used in _TMR2_Stop: []
 13577                           
 13578                           
 13579                           ;tmr2.c: 114: T2CONbits.TMR2ON = 0;
 13580  11E9  0025               	movlb	5	; select bank5
 13581  11EA  138E               	bcf	14,7	;volatile
 13582  11EB                     l662:
 13583  11EB  0008               	return
 13584  11EC                     __end_of_TMR2_Stop:
 13585                           
 13586                           	psect	text19
 13587  11E6                     __ptext19:	
 13588 ;; *************** function _PWM_Output_D4_Disable *****************
 13589 ;; Defined at:
 13590 ;;		line 353 in file "main.c"
 13591 ;; Parameters:    Size  Location     Type
 13592 ;;		None
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;		None
 13595 ;; Return value:  Size  Location     Type
 13596 ;;                  1    wreg      void 
 13597 ;; Registers used:
 13598 ;;		None
 13599 ;; Tracked objects:
 13600 ;;		On entry : 0/0
 13601 ;;		On exit  : 0/0
 13602 ;;		Unchanged: 0/0
 13603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;Total ram usage:        0 bytes
 13609 ;; Hardware stack levels used:    1
 13610 ;; Hardware stack levels required when called:    4
 13611 ;; This function calls:
 13612 ;;		Nothing
 13613 ;; This function is called by:
 13614 ;;		_update_menuLCD
 13615 ;;		_main
 13616 ;; This function uses a non-reentrant model
 13617 ;;
 13618                           
 13619                           
 13620                           ;psect for function _PWM_Output_D4_Disable
 13621  11E6                     _PWM_Output_D4_Disable:
 13622  11E6                     l4614:	
 13623                           ;incstack = 0
 13624                           ; Regs used in _PWM_Output_D4_Disable: []
 13625                           
 13626                           
 13627                           ;main.c: 354: PWM6EN = 0;
 13628  11E6  0027               	movlb	7	; select bank7
 13629  11E7  138E               	bcf	14,7	;volatile
 13630  11E8                     l1260:
 13631  11E8  0008               	return
 13632  11E9                     __end_of_PWM_Output_D4_Disable:
 13633                           
 13634                           	psect	text20
 13635  12DD                     __ptext20:	
 13636 ;; *************** function _PWM6_LoadDutyValue *****************
 13637 ;; Defined at:
 13638 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 13639 ;; Parameters:    Size  Location     Type
 13640 ;;  dutyValue       2    2[COMMON] unsigned int 
 13641 ;; Auto vars:     Size  Location     Type
 13642 ;;		None
 13643 ;; Return value:  Size  Location     Type
 13644 ;;                  1    wreg      void 
 13645 ;; Registers used:
 13646 ;;		wreg, status,2, status,0
 13647 ;; Tracked objects:
 13648 ;;		On entry : 0/0
 13649 ;;		On exit  : 0/0
 13650 ;;		Unchanged: 0/0
 13651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13656 ;;Total ram usage:        4 bytes
 13657 ;; Hardware stack levels used:    1
 13658 ;; Hardware stack levels required when called:    4
 13659 ;; This function calls:
 13660 ;;		Nothing
 13661 ;; This function is called by:
 13662 ;;		_update_menuLCD
 13663 ;;		_checkFlags
 13664 ;;		_main
 13665 ;; This function uses a non-reentrant model
 13666 ;;
 13667                           
 13668                           
 13669                           ;psect for function _PWM6_LoadDutyValue
 13670  12DD                     _PWM6_LoadDutyValue:
 13671  12DD                     l4512:	
 13672                           ;incstack = 0
 13673                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13674                           
 13675                           
 13676                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 13677  12DD  0873               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 13678  12DE  00F5               	movwf	??_PWM6_LoadDutyValue+1
 13679  12DF  0872               	movf	PWM6_LoadDutyValue@dutyValue,w
 13680  12E0  00F4               	movwf	??_PWM6_LoadDutyValue
 13681  12E1  36F5               	lsrf	??_PWM6_LoadDutyValue+1,f
 13682  12E2  0CF4               	rrf	??_PWM6_LoadDutyValue,f
 13683  12E3  36F5               	lsrf	??_PWM6_LoadDutyValue+1,f
 13684  12E4  0CF4               	rrf	??_PWM6_LoadDutyValue,f
 13685  12E5  0874               	movf	??_PWM6_LoadDutyValue,w
 13686  12E6  0027               	movlb	7	; select bank7
 13687  12E7  008D               	movwf	13	;volatile
 13688                           
 13689                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 13690  12E8  0872               	movf	PWM6_LoadDutyValue@dutyValue,w
 13691  12E9  3903               	andlw	3
 13692  12EA  00F4               	movwf	??_PWM6_LoadDutyValue
 13693  12EB  3005               	movlw	5
 13694  12EC                     u3545:
 13695  12EC  35F4               	lslf	??_PWM6_LoadDutyValue,f
 13696  12ED  3EFF               	addlw	-1
 13697  12EE  1D03               	skipz
 13698  12EF  2AEC               	goto	u3545
 13699  12F0  3574               	lslf	??_PWM6_LoadDutyValue,w
 13700  12F1  008C               	movwf	12	;volatile
 13701  12F2                     l620:
 13702  12F2  0008               	return
 13703  12F3                     __end_of_PWM6_LoadDutyValue:
 13704                           
 13705                           	psect	text21
 13706  1387                     __ptext21:	
 13707 ;; *************** function _LCDstr *****************
 13708 ;; Defined at:
 13709 ;;		line 319 in file "main.c"
 13710 ;; Parameters:    Size  Location     Type
 13711 ;;  p               2    1[BANK0 ] PTR unsigned char 
 13712 ;;		 -> STR_7(4), update_menuLCD@l(3), update_menuLCD@tt(4), update_menuLCD@str(8), 
 13713 ;; Auto vars:     Size  Location     Type
 13714 ;;  c               1    6[BANK0 ] unsigned char 
 13715 ;; Return value:  Size  Location     Type
 13716 ;;                  1    wreg      void 
 13717 ;; Registers used:
 13718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13719 ;; Tracked objects:
 13720 ;;		On entry : 0/0
 13721 ;;		On exit  : 0/0
 13722 ;;		Unchanged: 0/0
 13723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13724 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13726 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;Total ram usage:        6 bytes
 13729 ;; Hardware stack levels used:    1
 13730 ;; Hardware stack levels required when called:    7
 13731 ;; This function calls:
 13732 ;;		_LCDchar
 13733 ;; This function is called by:
 13734 ;;		_update_menuLCD
 13735 ;; This function uses a non-reentrant model
 13736 ;;
 13737                           
 13738                           
 13739                           ;psect for function _LCDstr
 13740  1387                     _LCDstr:
 13741  1387                     l6182:	
 13742                           ;incstack = 0
 13743                           ; Regs used in _LCDstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13744                           
 13745                           
 13746                           ;main.c: 321: unsigned char c;;main.c: 323: while((c = *p++)) LCDchar(c);
 13747  1387  2B8C               	goto	l6186
 13748  1388                     l6184:
 13749  1388  0826               	movf	LCDstr@c,w
 13750  1389  3192  2252  3193   	fcall	_LCDchar
 13751  138C                     l6186:
 13752  138C  0020               	movlb	0	; select bank0
 13753  138D  0822               	movf	LCDstr@p+1,w
 13754  138E  00A4               	movwf	??_LCDstr+1
 13755  138F  0821               	movf	LCDstr@p,w
 13756  1390  00A3               	movwf	??_LCDstr
 13757  1391  0AA1               	incf	LCDstr@p,f
 13758  1392  1903               	skipnz
 13759  1393  0AA2               	incf	LCDstr@p+1,f
 13760  1394  0823               	movf	??_LCDstr,w
 13761  1395  0084               	movwf	4
 13762  1396  0824               	movf	??_LCDstr+1,w
 13763  1397  0085               	movwf	5
 13764  1398  0800               	movf	0,w	;code access
 13765  1399  00A5               	movwf	??_LCDstr+2
 13766  139A  0825               	movf	??_LCDstr+2,w
 13767  139B  00A6               	movwf	LCDstr@c
 13768  139C  0826               	movf	LCDstr@c,w
 13769  139D  1D03               	btfss	3,2
 13770  139E  2BA0               	goto	u6611
 13771  139F  2BA1               	goto	u6610
 13772  13A0                     u6611:
 13773  13A0  2B88               	goto	l6184
 13774  13A1                     u6610:
 13775  13A1                     l1241:
 13776  13A1  0008               	return
 13777  13A2                     __end_of_LCDstr:
 13778                           
 13779                           	psect	text22
 13780  1252                     __ptext22:	
 13781 ;; *************** function _LCDchar *****************
 13782 ;; Defined at:
 13783 ;;		line 314 in file "main.c"
 13784 ;; Parameters:    Size  Location     Type
 13785 ;;  c               1    wreg     unsigned char 
 13786 ;; Auto vars:     Size  Location     Type
 13787 ;;  c               1    0[BANK0 ] unsigned char 
 13788 ;; Return value:  Size  Location     Type
 13789 ;;                  1    wreg      void 
 13790 ;; Registers used:
 13791 ;;		wreg, status,2, status,0, pclath, cstack
 13792 ;; Tracked objects:
 13793 ;;		On entry : 0/0
 13794 ;;		On exit  : 0/0
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;Total ram usage:        1 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    6
 13804 ;; This function calls:
 13805 ;;		_LCDsend2x4
 13806 ;; This function is called by:
 13807 ;;		_LCDstr
 13808 ;;		_update_menuLCD
 13809 ;; This function uses a non-reentrant model
 13810 ;;
 13811                           
 13812                           
 13813                           ;psect for function _LCDchar
 13814  1252                     _LCDchar:
 13815                           
 13816                           ;incstack = 0
 13817                           ; Regs used in _LCDchar: [wreg+status,2+status,0+pclath+cstack]
 13818                           ;LCDchar@c stored from wreg
 13819  1252  0020               	movlb	0	; select bank0
 13820  1253  00A0               	movwf	LCDchar@c
 13821  1254                     l6082:
 13822                           
 13823                           ;main.c: 316: LCDsend2x4(c, 0x01);
 13824  1254  01F4               	clrf	LCDsend2x4@mode
 13825  1255  0AF4               	incf	LCDsend2x4@mode,f
 13826  1256  0820               	movf	LCDchar@c,w
 13827  1257  3187  2722  3192   	fcall	_LCDsend2x4
 13828  125A                     l1235:
 13829  125A  0008               	return
 13830  125B                     __end_of_LCDchar:
 13831                           
 13832                           	psect	text23
 13833  1230                     __ptext23:	
 13834 ;; *************** function _LCDcmd *****************
 13835 ;; Defined at:
 13836 ;;		line 309 in file "main.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;  c               1    wreg     unsigned char 
 13839 ;; Auto vars:     Size  Location     Type
 13840 ;;  c               1    0[BANK0 ] unsigned char 
 13841 ;; Return value:  Size  Location     Type
 13842 ;;                  1    wreg      void 
 13843 ;; Registers used:
 13844 ;;		wreg, status,2, status,0, pclath, cstack
 13845 ;; Tracked objects:
 13846 ;;		On entry : 0/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;Total ram usage:        1 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:    6
 13857 ;; This function calls:
 13858 ;;		_LCDsend2x4
 13859 ;; This function is called by:
 13860 ;;		_update_menuLCD
 13861 ;; This function uses a non-reentrant model
 13862 ;;
 13863                           
 13864                           
 13865                           ;psect for function _LCDcmd
 13866  1230                     _LCDcmd:
 13867                           
 13868                           ;incstack = 0
 13869                           ; Regs used in _LCDcmd: [wreg+status,2+status,0+pclath+cstack]
 13870                           ;LCDcmd@c stored from wreg
 13871  1230  0020               	movlb	0	; select bank0
 13872  1231  00A0               	movwf	LCDcmd@c
 13873  1232                     l6180:
 13874                           
 13875                           ;main.c: 311: LCDsend2x4(c, 0);
 13876  1232  01F4               	clrf	LCDsend2x4@mode
 13877  1233  0820               	movf	LCDcmd@c,w
 13878  1234  3187  2722  3192   	fcall	_LCDsend2x4
 13879  1237                     l1232:
 13880  1237  0008               	return
 13881  1238                     __end_of_LCDcmd:
 13882                           
 13883                           	psect	text24
 13884  0E7B                     __ptext24:	
 13885 ;; *************** function _monitoring_TEMP_LUM *****************
 13886 ;; Defined at:
 13887 ;;		line 551 in file "main.c"
 13888 ;; Parameters:    Size  Location     Type
 13889 ;;		None
 13890 ;; Auto vars:     Size  Location     Type
 13891 ;;		None
 13892 ;; Return value:  Size  Location     Type
 13893 ;;                  1    wreg      void 
 13894 ;; Registers used:
 13895 ;;		wreg, status,2, status,0, pclath, cstack
 13896 ;; Tracked objects:
 13897 ;;		On entry : 0/0
 13898 ;;		On exit  : 0/0
 13899 ;;		Unchanged: 0/0
 13900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13905 ;;Total ram usage:        3 bytes
 13906 ;; Hardware stack levels used:    1
 13907 ;; Hardware stack levels required when called:    6
 13908 ;; This function calls:
 13909 ;;		_ADCC_GetSingleConversion
 13910 ;;		_DATAEE_WriteByte
 13911 ;;		___wmul
 13912 ;;		_tsttc
 13913 ;; This function is called by:
 13914 ;;		_checkFlags
 13915 ;; This function uses a non-reentrant model
 13916 ;;
 13917                           
 13918                           
 13919                           ;psect for function _monitoring_TEMP_LUM
 13920  0E7B                     _monitoring_TEMP_LUM:
 13921  0E7B                     l6432:	
 13922                           ;incstack = 0
 13923                           ; Regs used in _monitoring_TEMP_LUM: [wreg+status,2+status,0+pclath+cstack]
 13924                           
 13925                           
 13926                           ;main.c: 552: temp = (uint8_t)tsttc();
 13927  0E7B  318D  256E  318E   	fcall	_tsttc
 13928  0E7E  0020               	movlb	0	; select bank0
 13929  0E7F  00A3               	movwf	??_monitoring_TEMP_LUM
 13930  0E80  0823               	movf	??_monitoring_TEMP_LUM,w
 13931  0E81  00E6               	movwf	_temp
 13932                           
 13933                           ;main.c: 554: lumLevel = ADCC_GetSingleConversion(channel_ANA0) >> 13;
 13934  0E82  3000               	movlw	0
 13935  0E83  3192  22B9  318E   	fcall	_ADCC_GetSingleConversion
 13936  0E86  0872               	movf	?_ADCC_GetSingleConversion,w
 13937  0E87  0020               	movlb	0	; select bank0
 13938  0E88  00A3               	movwf	??_monitoring_TEMP_LUM
 13939  0E89  0873               	movf	?_ADCC_GetSingleConversion+1,w
 13940  0E8A  00A4               	movwf	??_monitoring_TEMP_LUM+1
 13941  0E8B  300D               	movlw	13
 13942  0E8C                     u7085:
 13943  0E8C  36A4               	lsrf	??_monitoring_TEMP_LUM+1,f
 13944  0E8D  0CA3               	rrf	??_monitoring_TEMP_LUM,f
 13945  0E8E  0B89               	decfsz	9,f
 13946  0E8F  2E8C               	goto	u7085
 13947  0E90  0823               	movf	??_monitoring_TEMP_LUM,w
 13948  0E91  00A5               	movwf	??_monitoring_TEMP_LUM+2
 13949  0E92  0825               	movf	??_monitoring_TEMP_LUM+2,w
 13950  0E93  00E5               	movwf	_lumLevel
 13951  0E94                     l6434:
 13952                           
 13953                           ;main.c: 556: if(prevTemp != temp || prevLumLevel != lumLevel){
 13954  0E94  0866               	movf	_temp,w
 13955  0E95  00A3               	movwf	??_monitoring_TEMP_LUM
 13956  0E96  01A4               	clrf	??_monitoring_TEMP_LUM+1
 13957  0E97  0021               	movlb	1	; select bank1
 13958  0E98  0869               	movf	(_prevTemp+1)^(0+128),w
 13959  0E99  0020               	movlb	0	; select bank0
 13960  0E9A  0624               	xorwf	??_monitoring_TEMP_LUM+1,w
 13961  0E9B  1D03               	skipz
 13962  0E9C  2EA1               	goto	u7095
 13963  0E9D  0021               	movlb	1	; select bank1
 13964  0E9E  0868               	movf	_prevTemp^(0+128),w
 13965  0E9F  0020               	movlb	0	; select bank0
 13966  0EA0  0623               	xorwf	??_monitoring_TEMP_LUM,w
 13967  0EA1                     u7095:
 13968  0EA1  1D03               	skipz
 13969  0EA2  2EA4               	goto	u7091
 13970  0EA3  2EA5               	goto	u7090
 13971  0EA4                     u7091:
 13972  0EA4  2EB6               	goto	l6438
 13973  0EA5                     u7090:
 13974  0EA5                     l6436:
 13975  0EA5  0865               	movf	_lumLevel,w
 13976  0EA6  00A3               	movwf	??_monitoring_TEMP_LUM
 13977  0EA7  01A4               	clrf	??_monitoring_TEMP_LUM+1
 13978  0EA8  0021               	movlb	1	; select bank1
 13979  0EA9  0867               	movf	(_prevLumLevel+1)^(0+128),w
 13980  0EAA  0020               	movlb	0	; select bank0
 13981  0EAB  0624               	xorwf	??_monitoring_TEMP_LUM+1,w
 13982  0EAC  1D03               	skipz
 13983  0EAD  2EB2               	goto	u7105
 13984  0EAE  0021               	movlb	1	; select bank1
 13985  0EAF  0866               	movf	_prevLumLevel^(0+128),w
 13986  0EB0  0020               	movlb	0	; select bank0
 13987  0EB1  0623               	xorwf	??_monitoring_TEMP_LUM,w
 13988  0EB2                     u7105:
 13989  0EB2  1903               	skipnz
 13990  0EB3  2EB5               	goto	u7101
 13991  0EB4  2EB6               	goto	u7100
 13992  0EB5                     u7101:
 13993  0EB5  2FB0               	goto	l6466
 13994  0EB6                     u7100:
 13995  0EB6                     l6438:
 13996                           
 13997                           ;main.c: 563: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x0 , t.h);
 13998  0EB6  087A               	movf	_iwrite,w
 13999  0EB7  00A3               	movwf	??_monitoring_TEMP_LUM
 14000  0EB8  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14001  0EB9  0823               	movf	??_monitoring_TEMP_LUM,w
 14002  0EBA  00F2               	movwf	___wmul@multiplier
 14003  0EBB  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14004  0EBC  00F3               	movwf	___wmul@multiplier+1
 14005  0EBD  3005               	movlw	5
 14006  0EBE  00F4               	movwf	___wmul@multiplicand
 14007  0EBF  3000               	movlw	0
 14008  0EC0  00F5               	movwf	___wmul@multiplicand+1
 14009  0EC1  3194  2418  318E   	fcall	___wmul
 14010  0EC4  0872               	movf	?___wmul,w
 14011  0EC5  3E12               	addlw	18
 14012  0EC6  0020               	movlb	0	; select bank0
 14013  0EC7  00A0               	movwf	DATAEE_WriteByte@bAdd
 14014  0EC8  3070               	movlw	112
 14015  0EC9  3D73               	addwfc	?___wmul+1,w
 14016  0ECA  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14017  0ECB  0859               	movf	_t,w
 14018  0ECC  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14019  0ECD  0825               	movf	??_monitoring_TEMP_LUM+2,w
 14020  0ECE  00A2               	movwf	DATAEE_WriteByte@bData
 14021  0ECF  3194  24BD  318E   	fcall	_DATAEE_WriteByte
 14022                           
 14023                           ;main.c: 564: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x1 , t.m);
 14024  0ED2  087A               	movf	_iwrite,w
 14025  0ED3  0020               	movlb	0	; select bank0
 14026  0ED4  00A3               	movwf	??_monitoring_TEMP_LUM
 14027  0ED5  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14028  0ED6  0823               	movf	??_monitoring_TEMP_LUM,w
 14029  0ED7  00F2               	movwf	___wmul@multiplier
 14030  0ED8  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14031  0ED9  00F3               	movwf	___wmul@multiplier+1
 14032  0EDA  3005               	movlw	5
 14033  0EDB  00F4               	movwf	___wmul@multiplicand
 14034  0EDC  3000               	movlw	0
 14035  0EDD  00F5               	movwf	___wmul@multiplicand+1
 14036  0EDE  3194  2418  318E   	fcall	___wmul
 14037  0EE1  0872               	movf	?___wmul,w
 14038  0EE2  3E13               	addlw	19
 14039  0EE3  0020               	movlb	0	; select bank0
 14040  0EE4  00A0               	movwf	DATAEE_WriteByte@bAdd
 14041  0EE5  3070               	movlw	112
 14042  0EE6  3D73               	addwfc	?___wmul+1,w
 14043  0EE7  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14044  0EE8  085A               	movf	_t+1,w
 14045  0EE9  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14046  0EEA  0825               	movf	??_monitoring_TEMP_LUM+2,w
 14047  0EEB  00A2               	movwf	DATAEE_WriteByte@bData
 14048  0EEC  3194  24BD  318E   	fcall	_DATAEE_WriteByte
 14049                           
 14050                           ;main.c: 565: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x2 , t.s);
 14051  0EEF  087A               	movf	_iwrite,w
 14052  0EF0  0020               	movlb	0	; select bank0
 14053  0EF1  00A3               	movwf	??_monitoring_TEMP_LUM
 14054  0EF2  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14055  0EF3  0823               	movf	??_monitoring_TEMP_LUM,w
 14056  0EF4  00F2               	movwf	___wmul@multiplier
 14057  0EF5  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14058  0EF6  00F3               	movwf	___wmul@multiplier+1
 14059  0EF7  3005               	movlw	5
 14060  0EF8  00F4               	movwf	___wmul@multiplicand
 14061  0EF9  3000               	movlw	0
 14062  0EFA  00F5               	movwf	___wmul@multiplicand+1
 14063  0EFB  3194  2418  318E   	fcall	___wmul
 14064  0EFE  0872               	movf	?___wmul,w
 14065  0EFF  3E14               	addlw	20
 14066  0F00  0020               	movlb	0	; select bank0
 14067  0F01  00A0               	movwf	DATAEE_WriteByte@bAdd
 14068  0F02  3070               	movlw	112
 14069  0F03  3D73               	addwfc	?___wmul+1,w
 14070  0F04  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14071  0F05  085B               	movf	_t+2,w
 14072  0F06  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14073  0F07  0825               	movf	??_monitoring_TEMP_LUM+2,w
 14074  0F08  00A2               	movwf	DATAEE_WriteByte@bData
 14075  0F09  3194  24BD  318E   	fcall	_DATAEE_WriteByte
 14076                           
 14077                           ;main.c: 566: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x3 , temp);
 14078  0F0C  087A               	movf	_iwrite,w
 14079  0F0D  0020               	movlb	0	; select bank0
 14080  0F0E  00A3               	movwf	??_monitoring_TEMP_LUM
 14081  0F0F  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14082  0F10  0823               	movf	??_monitoring_TEMP_LUM,w
 14083  0F11  00F2               	movwf	___wmul@multiplier
 14084  0F12  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14085  0F13  00F3               	movwf	___wmul@multiplier+1
 14086  0F14  3005               	movlw	5
 14087  0F15  00F4               	movwf	___wmul@multiplicand
 14088  0F16  3000               	movlw	0
 14089  0F17  00F5               	movwf	___wmul@multiplicand+1
 14090  0F18  3194  2418  318E   	fcall	___wmul
 14091  0F1B  0872               	movf	?___wmul,w
 14092  0F1C  3E15               	addlw	21
 14093  0F1D  0020               	movlb	0	; select bank0
 14094  0F1E  00A0               	movwf	DATAEE_WriteByte@bAdd
 14095  0F1F  3070               	movlw	112
 14096  0F20  3D73               	addwfc	?___wmul+1,w
 14097  0F21  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14098  0F22  0866               	movf	_temp,w
 14099  0F23  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14100  0F24  0825               	movf	??_monitoring_TEMP_LUM+2,w
 14101  0F25  00A2               	movwf	DATAEE_WriteByte@bData
 14102  0F26  3194  24BD  318E   	fcall	_DATAEE_WriteByte
 14103                           
 14104                           ;main.c: 567: DATAEE_WriteByte( (iwrite * 0x5) + 0x7012 + 0x4 , lumLevel);
 14105  0F29  087A               	movf	_iwrite,w
 14106  0F2A  0020               	movlb	0	; select bank0
 14107  0F2B  00A3               	movwf	??_monitoring_TEMP_LUM
 14108  0F2C  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14109  0F2D  0823               	movf	??_monitoring_TEMP_LUM,w
 14110  0F2E  00F2               	movwf	___wmul@multiplier
 14111  0F2F  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14112  0F30  00F3               	movwf	___wmul@multiplier+1
 14113  0F31  3005               	movlw	5
 14114  0F32  00F4               	movwf	___wmul@multiplicand
 14115  0F33  3000               	movlw	0
 14116  0F34  00F5               	movwf	___wmul@multiplicand+1
 14117  0F35  3194  2418  318E   	fcall	___wmul
 14118  0F38  0872               	movf	?___wmul,w
 14119  0F39  3E16               	addlw	22
 14120  0F3A  0020               	movlb	0	; select bank0
 14121  0F3B  00A0               	movwf	DATAEE_WriteByte@bAdd
 14122  0F3C  3070               	movlw	112
 14123  0F3D  3D73               	addwfc	?___wmul+1,w
 14124  0F3E  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14125  0F3F  0865               	movf	_lumLevel,w
 14126  0F40  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14127  0F41  0825               	movf	??_monitoring_TEMP_LUM+2,w
 14128  0F42  00A2               	movwf	DATAEE_WriteByte@bData
 14129  0F43  3194  24BD  318E   	fcall	_DATAEE_WriteByte
 14130  0F46                     l6440:
 14131                           
 14132                           ;main.c: 569: if((nr == NREG) && (iread == iwrite)){
 14133  0F46  0020               	movlb	0	; select bank0
 14134  0F47  0860               	movf	_nr,w
 14135  0F48  067B               	xorwf	_NREG,w
 14136  0F49  1D03               	skipz
 14137  0F4A  2F4C               	goto	u7111
 14138  0F4B  2F4D               	goto	u7110
 14139  0F4C                     u7111:
 14140  0F4C  2F57               	goto	l1333
 14141  0F4D                     u7110:
 14142  0F4D                     l6442:
 14143  0F4D  0861               	movf	_iread,w
 14144  0F4E  067A               	xorwf	_iwrite,w
 14145  0F4F  1D03               	skipz
 14146  0F50  2F52               	goto	u7121
 14147  0F51  2F53               	goto	u7120
 14148  0F52                     u7121:
 14149  0F52  2F57               	goto	l1333
 14150  0F53                     u7120:
 14151  0F53                     l6444:
 14152                           
 14153                           ;main.c: 570: iread++;
 14154  0F53  3001               	movlw	1
 14155  0F54  00A3               	movwf	??_monitoring_TEMP_LUM
 14156  0F55  0823               	movf	??_monitoring_TEMP_LUM,w
 14157  0F56  07E1               	addwf	_iread,f
 14158  0F57                     l1333:
 14159                           
 14160                           ;main.c: 571: };main.c: 573: iwrite++;
 14161  0F57  3001               	movlw	1
 14162  0F58  00A3               	movwf	??_monitoring_TEMP_LUM
 14163  0F59  0823               	movf	??_monitoring_TEMP_LUM,w
 14164  0F5A  07FA               	addwf	_iwrite,f
 14165  0F5B                     l6446:
 14166                           
 14167                           ;main.c: 574: if(iwrite > NREG - 1){
 14168  0F5B  087B               	movf	_NREG,w
 14169  0F5C  3EFF               	addlw	255
 14170  0F5D  00A3               	movwf	??_monitoring_TEMP_LUM
 14171  0F5E  30FF               	movlw	255
 14172  0F5F  1803               	skipnc
 14173  0F60  3000               	movlw	0
 14174  0F61  00A4               	movwf	??_monitoring_TEMP_LUM+1
 14175  0F62  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14176  0F63  3A80               	xorlw	128
 14177  0F64  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14178  0F65  3080               	movlw	128
 14179  0F66  0225               	subwf	??_monitoring_TEMP_LUM+2,w
 14180  0F67  1D03               	skipz
 14181  0F68  2F6B               	goto	u7135
 14182  0F69  087A               	movf	_iwrite,w
 14183  0F6A  0223               	subwf	??_monitoring_TEMP_LUM,w
 14184  0F6B                     u7135:
 14185  0F6B  1803               	skipnc
 14186  0F6C  2F6E               	goto	u7131
 14187  0F6D  2F6F               	goto	u7130
 14188  0F6E                     u7131:
 14189  0F6E  2F73               	goto	l6452
 14190  0F6F                     u7130:
 14191  0F6F                     l6448:
 14192                           
 14193                           ;main.c: 575: flagNr = 1;
 14194  0F6F  0021               	movlb	1	; select bank1
 14195  0F70  01D2               	clrf	_flagNr^(0+128)
 14196  0F71  0AD2               	incf	_flagNr^(0+128),f
 14197  0F72                     l6450:
 14198                           
 14199                           ;main.c: 576: iwrite = 0;
 14200  0F72  01FA               	clrf	_iwrite
 14201  0F73                     l6452:
 14202                           
 14203                           ;main.c: 577: };main.c: 578: if(flagNr){
 14204  0F73  0021               	movlb	1	; select bank1
 14205  0F74  0852               	movf	_flagNr^(0+128),w
 14206  0F75  1903               	btfsc	3,2
 14207  0F76  2F78               	goto	u7141
 14208  0F77  2F79               	goto	u7140
 14209  0F78                     u7141:
 14210  0F78  2F7F               	goto	l6456
 14211  0F79                     u7140:
 14212  0F79                     l6454:
 14213                           
 14214                           ;main.c: 579: nr = NREG;
 14215  0F79  087B               	movf	_NREG,w
 14216  0F7A  0020               	movlb	0	; select bank0
 14217  0F7B  00A3               	movwf	??_monitoring_TEMP_LUM
 14218  0F7C  0823               	movf	??_monitoring_TEMP_LUM,w
 14219  0F7D  00E0               	movwf	_nr
 14220                           
 14221                           ;main.c: 580: } else{
 14222  0F7E  2F84               	goto	l6458
 14223  0F7F                     l6456:
 14224                           
 14225                           ;main.c: 581: nr++;
 14226  0F7F  3001               	movlw	1
 14227  0F80  0020               	movlb	0	; select bank0
 14228  0F81  00A3               	movwf	??_monitoring_TEMP_LUM
 14229  0F82  0823               	movf	??_monitoring_TEMP_LUM,w
 14230  0F83  07E0               	addwf	_nr,f
 14231  0F84                     l6458:
 14232                           
 14233                           ;main.c: 582: };main.c: 584: if(iread > NREG-1){
 14234  0F84  087B               	movf	_NREG,w
 14235  0F85  3EFF               	addlw	255
 14236  0F86  00A3               	movwf	??_monitoring_TEMP_LUM
 14237  0F87  30FF               	movlw	255
 14238  0F88  1803               	skipnc
 14239  0F89  3000               	movlw	0
 14240  0F8A  00A4               	movwf	??_monitoring_TEMP_LUM+1
 14241  0F8B  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14242  0F8C  3A80               	xorlw	128
 14243  0F8D  00A5               	movwf	??_monitoring_TEMP_LUM+2
 14244  0F8E  3080               	movlw	128
 14245  0F8F  0225               	subwf	??_monitoring_TEMP_LUM+2,w
 14246  0F90  1D03               	skipz
 14247  0F91  2F94               	goto	u7155
 14248  0F92  0861               	movf	_iread,w
 14249  0F93  0223               	subwf	??_monitoring_TEMP_LUM,w
 14250  0F94                     u7155:
 14251  0F94  1803               	skipnc
 14252  0F95  2F97               	goto	u7151
 14253  0F96  2F98               	goto	u7150
 14254  0F97                     u7151:
 14255  0F97  2F9A               	goto	l6462
 14256  0F98                     u7150:
 14257  0F98                     l6460:
 14258                           
 14259                           ;main.c: 585: iread = 0;
 14260  0F98  0020               	movlb	0	; select bank0
 14261  0F99  01E1               	clrf	_iread
 14262  0F9A                     l6462:
 14263                           
 14264                           ;main.c: 586: };main.c: 588: prevTemp = temp;
 14265  0F9A  0020               	movlb	0	; select bank0
 14266  0F9B  0866               	movf	_temp,w
 14267  0F9C  00A3               	movwf	??_monitoring_TEMP_LUM
 14268  0F9D  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14269  0F9E  0823               	movf	??_monitoring_TEMP_LUM,w
 14270  0F9F  0021               	movlb	1	; select bank1
 14271  0FA0  00E8               	movwf	_prevTemp^(0+128)
 14272  0FA1  0020               	movlb	0	; select bank0
 14273  0FA2  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14274  0FA3  0021               	movlb	1	; select bank1
 14275  0FA4  00E9               	movwf	(_prevTemp+1)^(0+128)
 14276  0FA5                     l6464:
 14277                           
 14278                           ;main.c: 589: prevLumLevel = lumLevel;
 14279  0FA5  0020               	movlb	0	; select bank0
 14280  0FA6  0865               	movf	_lumLevel,w
 14281  0FA7  00A3               	movwf	??_monitoring_TEMP_LUM
 14282  0FA8  01A4               	clrf	??_monitoring_TEMP_LUM+1
 14283  0FA9  0823               	movf	??_monitoring_TEMP_LUM,w
 14284  0FAA  0021               	movlb	1	; select bank1
 14285  0FAB  00E6               	movwf	_prevLumLevel^(0+128)
 14286  0FAC  0020               	movlb	0	; select bank0
 14287  0FAD  0824               	movf	??_monitoring_TEMP_LUM+1,w
 14288  0FAE  0021               	movlb	1	; select bank1
 14289  0FAF  00E7               	movwf	(_prevLumLevel+1)^(0+128)
 14290  0FB0                     l6466:
 14291                           
 14292                           ;main.c: 590: };main.c: 593: if(ALAF == 'A'){
 14293  0FB0  3041               	movlw	65
 14294  0FB1  0020               	movlb	0	; select bank0
 14295  0FB2  0667               	xorwf	_ALAF,w
 14296  0FB3  1D03               	btfss	3,2
 14297  0FB4  2FB6               	goto	u7161
 14298  0FB5  2FB7               	goto	u7160
 14299  0FB6                     u7161:
 14300  0FB6  2FFF               	goto	l1353
 14301  0FB7                     u7160:
 14302  0FB7                     l6468:
 14303                           
 14304                           ;main.c: 595: if((lumAlarm.alarmLum > lumLevel) && (editingLumAlarm == 0)){
 14305  0FB7  0021               	movlb	1	; select bank1
 14306  0FB8  0846               	movf	_lumAlarm^(0+128),w
 14307  0FB9  0020               	movlb	0	; select bank0
 14308  0FBA  0265               	subwf	_lumLevel,w
 14309  0FBB  1803               	skipnc
 14310  0FBC  2FBE               	goto	u7171
 14311  0FBD  2FBF               	goto	u7170
 14312  0FBE                     u7171:
 14313  0FBE  2FD7               	goto	l6482
 14314  0FBF                     u7170:
 14315  0FBF                     l6470:
 14316  0FBF  0863               	movf	_editingLumAlarm,w
 14317  0FC0  1D03               	btfss	3,2
 14318  0FC1  2FC3               	goto	u7181
 14319  0FC2  2FC4               	goto	u7180
 14320  0FC3                     u7181:
 14321  0FC3  2FD7               	goto	l6482
 14322  0FC4                     u7180:
 14323  0FC4                     l6472:
 14324                           
 14325                           ;main.c: 596: if(!lumAlarm.triggered){
 14326  0FC4  0021               	movlb	1	; select bank1
 14327  0FC5  0848               	movf	(_lumAlarm^(0+128)+2),w
 14328  0FC6  1D03               	btfss	3,2
 14329  0FC7  2FC9               	goto	u7191
 14330  0FC8  2FCA               	goto	u7190
 14331  0FC9                     u7191:
 14332  0FC9  2FD0               	goto	l6476
 14333  0FCA                     u7190:
 14334  0FCA                     l6474:
 14335                           
 14336                           ;main.c: 597: alarmPWMStart.h = 0xff;
 14337  0FCA  30FF               	movlw	255
 14338  0FCB  0020               	movlb	0	; select bank0
 14339  0FCC  00A3               	movwf	??_monitoring_TEMP_LUM
 14340  0FCD  0823               	movf	??_monitoring_TEMP_LUM,w
 14341  0FCE  0021               	movlb	1	; select bank1
 14342  0FCF  00E3               	movwf	_alarmPWMStart^(0+128)
 14343  0FD0                     l6476:
 14344                           
 14345                           ;main.c: 598: };main.c: 599: lumAlarm.triggered = 1;
 14346  0FD0  01C8               	clrf	(_lumAlarm^(0+128)+2)
 14347  0FD1  0AC8               	incf	(_lumAlarm^(0+128)+2),f
 14348  0FD2                     l6478:
 14349                           
 14350                           ;main.c: 601: lumAlarm.trigger = 1;
 14351  0FD2  01C7               	clrf	(_lumAlarm^(0+128)+1)
 14352  0FD3  0AC7               	incf	(_lumAlarm^(0+128)+1),f
 14353  0FD4                     l6480:
 14354  0FD4  0020               	movlb	0	; select bank0
 14355  0FD5  1616               	bsf	22,4	;volatile
 14356  0FD6  2FDB               	goto	l6486
 14357  0FD7                     l6482:
 14358                           
 14359                           ;main.c: 604: lumAlarm.triggered = 0;
 14360  0FD7  0021               	movlb	1	; select bank1
 14361  0FD8  01C8               	clrf	(_lumAlarm^(0+128)+2)
 14362  0FD9                     l6484:
 14363  0FD9  0020               	movlb	0	; select bank0
 14364  0FDA  1216               	bcf	22,4	;volatile
 14365  0FDB                     l6486:
 14366                           
 14367                           ;main.c: 606: };main.c: 609: if((tempAlarm.alarmTemp < temp) && (editingTempAlarm == 0))
      +                          {
 14368  0FDB  0866               	movf	_temp,w
 14369  0FDC  0021               	movlb	1	; select bank1
 14370  0FDD  0249               	subwf	_tempAlarm^(0+128),w
 14371  0FDE  1803               	skipnc
 14372  0FDF  2FE1               	goto	u7201
 14373  0FE0  2FE2               	goto	u7200
 14374  0FE1                     u7201:
 14375  0FE1  2FFB               	goto	l6500
 14376  0FE2                     u7200:
 14377  0FE2                     l6488:
 14378  0FE2  0020               	movlb	0	; select bank0
 14379  0FE3  0864               	movf	_editingTempAlarm,w
 14380  0FE4  1D03               	btfss	3,2
 14381  0FE5  2FE7               	goto	u7211
 14382  0FE6  2FE8               	goto	u7210
 14383  0FE7                     u7211:
 14384  0FE7  2FFB               	goto	l6500
 14385  0FE8                     u7210:
 14386  0FE8                     l6490:
 14387                           
 14388                           ;main.c: 610: if(!tempAlarm.triggered){
 14389  0FE8  0021               	movlb	1	; select bank1
 14390  0FE9  084B               	movf	(_tempAlarm^(0+128)+2),w
 14391  0FEA  1D03               	btfss	3,2
 14392  0FEB  2FED               	goto	u7221
 14393  0FEC  2FEE               	goto	u7220
 14394  0FED                     u7221:
 14395  0FED  2FF4               	goto	l6494
 14396  0FEE                     u7220:
 14397  0FEE                     l6492:
 14398                           
 14399                           ;main.c: 611: alarmPWMStart.h = 0xff;
 14400  0FEE  30FF               	movlw	255
 14401  0FEF  0020               	movlb	0	; select bank0
 14402  0FF0  00A3               	movwf	??_monitoring_TEMP_LUM
 14403  0FF1  0823               	movf	??_monitoring_TEMP_LUM,w
 14404  0FF2  0021               	movlb	1	; select bank1
 14405  0FF3  00E3               	movwf	_alarmPWMStart^(0+128)
 14406  0FF4                     l6494:
 14407                           
 14408                           ;main.c: 612: };main.c: 614: tempAlarm.triggered = 1;
 14409  0FF4  01CB               	clrf	(_tempAlarm^(0+128)+2)
 14410  0FF5  0ACB               	incf	(_tempAlarm^(0+128)+2),f
 14411  0FF6                     l6496:
 14412                           
 14413                           ;main.c: 616: tempAlarm.trigger = 1;
 14414  0FF6  01CA               	clrf	(_tempAlarm^(0+128)+1)
 14415  0FF7  0ACA               	incf	(_tempAlarm^(0+128)+1),f
 14416  0FF8                     l6498:
 14417  0FF8  0020               	movlb	0	; select bank0
 14418  0FF9  1696               	bsf	22,5	;volatile
 14419  0FFA  2FFF               	goto	l1353
 14420  0FFB                     l6500:
 14421                           
 14422                           ;main.c: 620: tempAlarm.triggered = 0;
 14423  0FFB  0021               	movlb	1	; select bank1
 14424  0FFC  01CB               	clrf	(_tempAlarm^(0+128)+2)
 14425  0FFD                     l6502:
 14426  0FFD  0020               	movlb	0	; select bank0
 14427  0FFE  1296               	bcf	22,5	;volatile
 14428  0FFF                     l1353:
 14429  0FFF  0008               	return
 14430  1000                     __end_of_monitoring_TEMP_LUM:
 14431                           
 14432                           	psect	text25
 14433  0D6E                     __ptext25:	
 14434 ;; *************** function _tsttc *****************
 14435 ;; Defined at:
 14436 ;;		line 195 in file "main.c"
 14437 ;; Parameters:    Size  Location     Type
 14438 ;;		None
 14439 ;; Auto vars:     Size  Location     Type
 14440 ;;  value           1    5[COMMON] unsigned char 
 14441 ;; Return value:  Size  Location     Type
 14442 ;;                  1    wreg      unsigned char 
 14443 ;; Registers used:
 14444 ;;		wreg, status,2, status,0, pclath, cstack
 14445 ;; Tracked objects:
 14446 ;;		On entry : 0/0
 14447 ;;		On exit  : 0/0
 14448 ;;		Unchanged: 0/0
 14449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14451 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14453 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;Total ram usage:        2 bytes
 14455 ;; Hardware stack levels used:    1
 14456 ;; Hardware stack levels required when called:    5
 14457 ;; This function calls:
 14458 ;;		_ReadI2C
 14459 ;;		_WriteI2C
 14460 ;; This function is called by:
 14461 ;;		_monitoring_TEMP_LUM
 14462 ;; This function uses a non-reentrant model
 14463 ;;
 14464                           
 14465                           
 14466                           ;psect for function _tsttc
 14467  0D6E                     _tsttc:
 14468  0D6E                     l1014:	
 14469                           ;incstack = 0
 14470                           ; Regs used in _tsttc: [wreg+status,2+status,0+pclath+cstack]
 14471                           ;main.c: 197: unsigned char value;;main.c: 198: do{
 14472                           
 14473  0D6E                     l6128:	
 14474                           ;main.c: 199: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14475                           
 14476  0D6E  0023               	movlb	3	; select bank3
 14477  0D6F  0C0F               	rrf	15,w	;volatile
 14478  0D70  0C89               	rrf	9,f
 14479  0D71  3901               	andlw	1
 14480  0D72  00F4               	movwf	??_tsttc
 14481  0D73  0811               	movf	17,w	;volatile
 14482  0D74  391F               	andlw	31
 14483  0D75  0474               	iorwf	??_tsttc,w
 14484  0D76  1D03               	btfss	3,2
 14485  0D77  2D79               	goto	u6361
 14486  0D78  2D7A               	goto	u6360
 14487  0D79                     u6361:
 14488  0D79  2D6E               	goto	l6128
 14489  0D7A                     u6360:
 14490  0D7A                     l1017:
 14491                           
 14492                           ;main.c: 200: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14493  0D7A  1411               	bsf	17,0	;volatile
 14494  0D7B                     l1018:
 14495  0D7B  1811               	btfsc	17,0	;volatile
 14496  0D7C  2D7E               	goto	u6371
 14497  0D7D  2D7F               	goto	u6370
 14498  0D7E                     u6371:
 14499  0D7E  2D7B               	goto	l1018
 14500  0D7F                     u6370:
 14501  0D7F                     l6130:
 14502  0D7F  0C0F               	rrf	15,w	;volatile
 14503  0D80  0C89               	rrf	9,f
 14504  0D81  3901               	andlw	1
 14505  0D82  00F4               	movwf	??_tsttc
 14506  0D83  0811               	movf	17,w	;volatile
 14507  0D84  391F               	andlw	31
 14508  0D85  0474               	iorwf	??_tsttc,w
 14509  0D86  1D03               	btfss	3,2
 14510  0D87  2D89               	goto	u6381
 14511  0D88  2D8A               	goto	u6380
 14512  0D89                     u6381:
 14513  0D89  2D7F               	goto	l6130
 14514  0D8A                     u6380:
 14515  0D8A                     l6132:
 14516                           
 14517                           ;main.c: 202: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14518  0D8A  309A               	movlw	154
 14519  0D8B  3188  2086  318D   	fcall	_WriteI2C
 14520  0D8E                     l6134:
 14521  0D8E  0023               	movlb	3	; select bank3
 14522  0D8F  0C0F               	rrf	15,w	;volatile
 14523  0D90  0C89               	rrf	9,f
 14524  0D91  3901               	andlw	1
 14525  0D92  00F4               	movwf	??_tsttc
 14526  0D93  0811               	movf	17,w	;volatile
 14527  0D94  391F               	andlw	31
 14528  0D95  0474               	iorwf	??_tsttc,w
 14529  0D96  1D03               	btfss	3,2
 14530  0D97  2D99               	goto	u6391
 14531  0D98  2D9A               	goto	u6390
 14532  0D99                     u6391:
 14533  0D99  2D8E               	goto	l6134
 14534  0D9A                     u6390:
 14535  0D9A                     l6136:
 14536                           
 14537                           ;main.c: 203: WriteI2C(0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14538  0D9A  3001               	movlw	1
 14539  0D9B  3188  2086  318D   	fcall	_WriteI2C
 14540  0D9E                     l6138:
 14541  0D9E  0023               	movlb	3	; select bank3
 14542  0D9F  0C0F               	rrf	15,w	;volatile
 14543  0DA0  0C89               	rrf	9,f
 14544  0DA1  3901               	andlw	1
 14545  0DA2  00F4               	movwf	??_tsttc
 14546  0DA3  0811               	movf	17,w	;volatile
 14547  0DA4  391F               	andlw	31
 14548  0DA5  0474               	iorwf	??_tsttc,w
 14549  0DA6  1D03               	btfss	3,2
 14550  0DA7  2DA9               	goto	u6401
 14551  0DA8  2DAA               	goto	u6400
 14552  0DA9                     u6401:
 14553  0DA9  2D9E               	goto	l6138
 14554  0DAA                     u6400:
 14555  0DAA                     l1029:
 14556                           
 14557                           ;main.c: 204: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 14558  0DAA  1491               	bsf	17,1	;volatile
 14559  0DAB                     l1030:
 14560  0DAB  1891               	btfsc	17,1	;volatile
 14561  0DAC  2DAE               	goto	u6411
 14562  0DAD  2DAF               	goto	u6410
 14563  0DAE                     u6411:
 14564  0DAE  2DAB               	goto	l1030
 14565  0DAF                     u6410:
 14566  0DAF                     l6140:
 14567  0DAF  0C0F               	rrf	15,w	;volatile
 14568  0DB0  0C89               	rrf	9,f
 14569  0DB1  3901               	andlw	1
 14570  0DB2  00F4               	movwf	??_tsttc
 14571  0DB3  0811               	movf	17,w	;volatile
 14572  0DB4  391F               	andlw	31
 14573  0DB5  0474               	iorwf	??_tsttc,w
 14574  0DB6  1D03               	btfss	3,2
 14575  0DB7  2DB9               	goto	u6421
 14576  0DB8  2DBA               	goto	u6420
 14577  0DB9                     u6421:
 14578  0DB9  2DAF               	goto	l6140
 14579  0DBA                     u6420:
 14580  0DBA                     l6142:
 14581                           
 14582                           ;main.c: 205: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14583  0DBA  309B               	movlw	155
 14584  0DBB  3188  2086  318D   	fcall	_WriteI2C
 14585  0DBE                     l6144:
 14586  0DBE  0023               	movlb	3	; select bank3
 14587  0DBF  0C0F               	rrf	15,w	;volatile
 14588  0DC0  0C89               	rrf	9,f
 14589  0DC1  3901               	andlw	1
 14590  0DC2  00F4               	movwf	??_tsttc
 14591  0DC3  0811               	movf	17,w	;volatile
 14592  0DC4  391F               	andlw	31
 14593  0DC5  0474               	iorwf	??_tsttc,w
 14594  0DC6  1D03               	btfss	3,2
 14595  0DC7  2DC9               	goto	u6431
 14596  0DC8  2DCA               	goto	u6430
 14597  0DC9                     u6431:
 14598  0DC9  2DBE               	goto	l6144
 14599  0DCA                     u6430:
 14600  0DCA                     l6146:
 14601                           
 14602                           ;main.c: 206: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14603  0DCA  3193  2352  318D   	fcall	_ReadI2C
 14604  0DCD  00F4               	movwf	??_tsttc
 14605  0DCE  0874               	movf	??_tsttc,w
 14606  0DCF  00F5               	movwf	tsttc@value
 14607  0DD0                     l6148:
 14608  0DD0  0023               	movlb	3	; select bank3
 14609  0DD1  0C0F               	rrf	15,w	;volatile
 14610  0DD2  0C89               	rrf	9,f
 14611  0DD3  3901               	andlw	1
 14612  0DD4  00F4               	movwf	??_tsttc
 14613  0DD5  0811               	movf	17,w	;volatile
 14614  0DD6  391F               	andlw	31
 14615  0DD7  0474               	iorwf	??_tsttc,w
 14616  0DD8  1D03               	btfss	3,2
 14617  0DD9  2DDB               	goto	u6441
 14618  0DDA  2DDC               	goto	u6440
 14619  0DDB                     u6441:
 14620  0DDB  2DD0               	goto	l6148
 14621  0DDC                     u6440:
 14622  0DDC                     l1041:
 14623                           
 14624                           ;main.c: 207: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14625  0DDC  1691               	bsf	17,5	;volatile
 14626  0DDD  1611               	bsf	17,4	;volatile
 14627  0DDE                     l1042:
 14628  0DDE  1A11               	btfsc	17,4	;volatile
 14629  0DDF  2DE1               	goto	u6451
 14630  0DE0  2DE2               	goto	u6450
 14631  0DE1                     u6451:
 14632  0DE1  2DDE               	goto	l1042
 14633  0DE2                     u6450:
 14634  0DE2                     l6150:
 14635  0DE2  0C0F               	rrf	15,w	;volatile
 14636  0DE3  0C89               	rrf	9,f
 14637  0DE4  3901               	andlw	1
 14638  0DE5  00F4               	movwf	??_tsttc
 14639  0DE6  0811               	movf	17,w	;volatile
 14640  0DE7  391F               	andlw	31
 14641  0DE8  0474               	iorwf	??_tsttc,w
 14642  0DE9  1D03               	btfss	3,2
 14643  0DEA  2DEC               	goto	u6461
 14644  0DEB  2DED               	goto	u6460
 14645  0DEC                     u6461:
 14646  0DEC  2DE2               	goto	l6150
 14647  0DED                     u6460:
 14648  0DED                     l1047:
 14649                           
 14650                           ;main.c: 208: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 14651  0DED  1511               	bsf	17,2	;volatile
 14652  0DEE                     l1048:
 14653  0DEE  1911               	btfsc	17,2	;volatile
 14654  0DEF  2DF1               	goto	u6471
 14655  0DF0  2DF2               	goto	u6470
 14656  0DF1                     u6471:
 14657  0DF1  2DEE               	goto	l1048
 14658  0DF2                     u6470:
 14659  0DF2                     l1050:
 14660                           
 14661                           ;main.c: 209: } while (!(value & 0x40));
 14662  0DF2  1F75               	btfss	tsttc@value,6
 14663  0DF3  2DF5               	goto	u6481
 14664  0DF4  2DF6               	goto	u6480
 14665  0DF5                     u6481:
 14666  0DF5  2D6E               	goto	l1014
 14667  0DF6                     u6480:
 14668  0DF6                     l6152:
 14669  0DF6  0C0F               	rrf	15,w	;volatile
 14670  0DF7  0C89               	rrf	9,f
 14671  0DF8  3901               	andlw	1
 14672  0DF9  00F4               	movwf	??_tsttc
 14673  0DFA  0811               	movf	17,w	;volatile
 14674  0DFB  391F               	andlw	31
 14675  0DFC  0474               	iorwf	??_tsttc,w
 14676  0DFD  1D03               	btfss	3,2
 14677  0DFE  2E00               	goto	u6491
 14678  0DFF  2E01               	goto	u6490
 14679  0E00                     u6491:
 14680  0E00  2DF6               	goto	l6152
 14681  0E01                     u6490:
 14682  0E01                     l1054:
 14683                           
 14684                           ;main.c: 212: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 14685  0E01  1411               	bsf	17,0	;volatile
 14686  0E02                     l1055:
 14687  0E02  1811               	btfsc	17,0	;volatile
 14688  0E03  2E05               	goto	u6501
 14689  0E04  2E06               	goto	u6500
 14690  0E05                     u6501:
 14691  0E05  2E02               	goto	l1055
 14692  0E06                     u6500:
 14693  0E06                     l6154:
 14694  0E06  0C0F               	rrf	15,w	;volatile
 14695  0E07  0C89               	rrf	9,f
 14696  0E08  3901               	andlw	1
 14697  0E09  00F4               	movwf	??_tsttc
 14698  0E0A  0811               	movf	17,w	;volatile
 14699  0E0B  391F               	andlw	31
 14700  0E0C  0474               	iorwf	??_tsttc,w
 14701  0E0D  1D03               	btfss	3,2
 14702  0E0E  2E10               	goto	u6511
 14703  0E0F  2E11               	goto	u6510
 14704  0E10                     u6511:
 14705  0E10  2E06               	goto	l6154
 14706  0E11                     u6510:
 14707  0E11                     l6156:
 14708                           
 14709                           ;main.c: 213: WriteI2C(0x9a | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14710  0E11  309A               	movlw	154
 14711  0E12  3188  2086  318D   	fcall	_WriteI2C
 14712  0E15                     l6158:
 14713  0E15  0023               	movlb	3	; select bank3
 14714  0E16  0C0F               	rrf	15,w	;volatile
 14715  0E17  0C89               	rrf	9,f
 14716  0E18  3901               	andlw	1
 14717  0E19  00F4               	movwf	??_tsttc
 14718  0E1A  0811               	movf	17,w	;volatile
 14719  0E1B  391F               	andlw	31
 14720  0E1C  0474               	iorwf	??_tsttc,w
 14721  0E1D  1D03               	btfss	3,2
 14722  0E1E  2E20               	goto	u6521
 14723  0E1F  2E21               	goto	u6520
 14724  0E20                     u6521:
 14725  0E20  2E15               	goto	l6158
 14726  0E21                     u6520:
 14727  0E21                     l6160:
 14728                           
 14729                           ;main.c: 214: WriteI2C(0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14730  0E21  3000               	movlw	0
 14731  0E22  3188  2086  318D   	fcall	_WriteI2C
 14732  0E25                     l6162:
 14733  0E25  0023               	movlb	3	; select bank3
 14734  0E26  0C0F               	rrf	15,w	;volatile
 14735  0E27  0C89               	rrf	9,f
 14736  0E28  3901               	andlw	1
 14737  0E29  00F4               	movwf	??_tsttc
 14738  0E2A  0811               	movf	17,w	;volatile
 14739  0E2B  391F               	andlw	31
 14740  0E2C  0474               	iorwf	??_tsttc,w
 14741  0E2D  1D03               	btfss	3,2
 14742  0E2E  2E30               	goto	u6531
 14743  0E2F  2E31               	goto	u6530
 14744  0E30                     u6531:
 14745  0E30  2E25               	goto	l6162
 14746  0E31                     u6530:
 14747  0E31                     l1066:
 14748                           
 14749                           ;main.c: 215: SSP1CON2bits.RSEN=1;while(SSP1CON2bits.RSEN); while ((SSP1CON2 & 0x1F) | (
      +                          SSP1STATbits.R_W));
 14750  0E31  1491               	bsf	17,1	;volatile
 14751  0E32                     l1067:
 14752  0E32  1891               	btfsc	17,1	;volatile
 14753  0E33  2E35               	goto	u6541
 14754  0E34  2E36               	goto	u6540
 14755  0E35                     u6541:
 14756  0E35  2E32               	goto	l1067
 14757  0E36                     u6540:
 14758  0E36                     l6164:
 14759  0E36  0C0F               	rrf	15,w	;volatile
 14760  0E37  0C89               	rrf	9,f
 14761  0E38  3901               	andlw	1
 14762  0E39  00F4               	movwf	??_tsttc
 14763  0E3A  0811               	movf	17,w	;volatile
 14764  0E3B  391F               	andlw	31
 14765  0E3C  0474               	iorwf	??_tsttc,w
 14766  0E3D  1D03               	btfss	3,2
 14767  0E3E  2E40               	goto	u6551
 14768  0E3F  2E41               	goto	u6550
 14769  0E40                     u6551:
 14770  0E40  2E36               	goto	l6164
 14771  0E41                     u6550:
 14772  0E41                     l6166:
 14773                           
 14774                           ;main.c: 216: WriteI2C(0x9a | 0x01); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14775  0E41  309B               	movlw	155
 14776  0E42  3188  2086  318D   	fcall	_WriteI2C
 14777  0E45                     l6168:
 14778  0E45  0023               	movlb	3	; select bank3
 14779  0E46  0C0F               	rrf	15,w	;volatile
 14780  0E47  0C89               	rrf	9,f
 14781  0E48  3901               	andlw	1
 14782  0E49  00F4               	movwf	??_tsttc
 14783  0E4A  0811               	movf	17,w	;volatile
 14784  0E4B  391F               	andlw	31
 14785  0E4C  0474               	iorwf	??_tsttc,w
 14786  0E4D  1D03               	btfss	3,2
 14787  0E4E  2E50               	goto	u6561
 14788  0E4F  2E51               	goto	u6560
 14789  0E50                     u6561:
 14790  0E50  2E45               	goto	l6168
 14791  0E51                     u6560:
 14792  0E51                     l6170:
 14793                           
 14794                           ;main.c: 217: value = ReadI2C(); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14795  0E51  3193  2352  318D   	fcall	_ReadI2C
 14796  0E54  00F4               	movwf	??_tsttc
 14797  0E55  0874               	movf	??_tsttc,w
 14798  0E56  00F5               	movwf	tsttc@value
 14799  0E57                     l6172:
 14800  0E57  0023               	movlb	3	; select bank3
 14801  0E58  0C0F               	rrf	15,w	;volatile
 14802  0E59  0C89               	rrf	9,f
 14803  0E5A  3901               	andlw	1
 14804  0E5B  00F4               	movwf	??_tsttc
 14805  0E5C  0811               	movf	17,w	;volatile
 14806  0E5D  391F               	andlw	31
 14807  0E5E  0474               	iorwf	??_tsttc,w
 14808  0E5F  1D03               	btfss	3,2
 14809  0E60  2E62               	goto	u6571
 14810  0E61  2E63               	goto	u6570
 14811  0E62                     u6571:
 14812  0E62  2E57               	goto	l6172
 14813  0E63                     u6570:
 14814  0E63                     l1078:
 14815                           
 14816                           ;main.c: 218: SSP1CON2bits.ACKDT=1;SSP1CON2bits.ACKEN=1;while(SSP1CON2bits.ACKEN); while
      +                           ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 14817  0E63  1691               	bsf	17,5	;volatile
 14818  0E64  1611               	bsf	17,4	;volatile
 14819  0E65                     l1079:
 14820  0E65  1A11               	btfsc	17,4	;volatile
 14821  0E66  2E68               	goto	u6581
 14822  0E67  2E69               	goto	u6580
 14823  0E68                     u6581:
 14824  0E68  2E65               	goto	l1079
 14825  0E69                     u6580:
 14826  0E69                     l6174:
 14827  0E69  0C0F               	rrf	15,w	;volatile
 14828  0E6A  0C89               	rrf	9,f
 14829  0E6B  3901               	andlw	1
 14830  0E6C  00F4               	movwf	??_tsttc
 14831  0E6D  0811               	movf	17,w	;volatile
 14832  0E6E  391F               	andlw	31
 14833  0E6F  0474               	iorwf	??_tsttc,w
 14834  0E70  1D03               	btfss	3,2
 14835  0E71  2E73               	goto	u6591
 14836  0E72  2E74               	goto	u6590
 14837  0E73                     u6591:
 14838  0E73  2E69               	goto	l6174
 14839  0E74                     u6590:
 14840  0E74                     l1084:
 14841                           
 14842                           ;main.c: 219: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 14843  0E74  1511               	bsf	17,2	;volatile
 14844  0E75                     l1085:
 14845  0E75  1911               	btfsc	17,2	;volatile
 14846  0E76  2E78               	goto	u6601
 14847  0E77  2E79               	goto	u6600
 14848  0E78                     u6601:
 14849  0E78  2E75               	goto	l1085
 14850  0E79                     u6600:
 14851  0E79                     l6176:
 14852                           
 14853                           ;main.c: 221: return value;
 14854  0E79  0875               	movf	tsttc@value,w
 14855  0E7A                     l1088:
 14856  0E7A  0008               	return
 14857  0E7B                     __end_of_tsttc:
 14858                           
 14859                           	psect	text26
 14860  1352                     __ptext26:	
 14861 ;; *************** function _ReadI2C *****************
 14862 ;; Defined at:
 14863 ;;		line 32 in file "I2C/i2c.c"
 14864 ;; Parameters:    Size  Location     Type
 14865 ;;		None
 14866 ;; Auto vars:     Size  Location     Type
 14867 ;;		None
 14868 ;; Return value:  Size  Location     Type
 14869 ;;                  1    wreg      unsigned char 
 14870 ;; Registers used:
 14871 ;;		wreg, status,2, status,0
 14872 ;; Tracked objects:
 14873 ;;		On entry : 0/0
 14874 ;;		On exit  : 0/0
 14875 ;;		Unchanged: 0/0
 14876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14881 ;;Total ram usage:        1 bytes
 14882 ;; Hardware stack levels used:    1
 14883 ;; Hardware stack levels required when called:    4
 14884 ;; This function calls:
 14885 ;;		Nothing
 14886 ;; This function is called by:
 14887 ;;		_tsttc
 14888 ;;		_LCDrecv
 14889 ;; This function uses a non-reentrant model
 14890 ;;
 14891                           
 14892                           
 14893                           ;psect for function _ReadI2C
 14894  1352                     _ReadI2C:
 14895  1352                     l4394:	
 14896                           ;incstack = 0
 14897                           ; Regs used in _ReadI2C: [wreg+status,2+status,0]
 14898                           
 14899                           
 14900                           ;i2c.c: 34: if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 14901  1352  300F               	movlw	15
 14902  1353  0023               	movlb	3	; select bank3
 14903  1354  0510               	andwf	16,w	;volatile
 14904  1355  00F2               	movwf	??_ReadI2C
 14905  1356  3008               	movlw	8
 14906  1357  0672               	xorwf	??_ReadI2C,w
 14907  1358  1903               	btfsc	3,2
 14908  1359  2B5B               	goto	u3281
 14909  135A  2B5C               	goto	u3280
 14910  135B                     u3281:
 14911  135B  2B65               	goto	l22
 14912  135C                     u3280:
 14913  135C                     l4396:
 14914  135C  300F               	movlw	15
 14915  135D  0510               	andwf	16,w	;volatile
 14916  135E  00F2               	movwf	??_ReadI2C
 14917  135F  300B               	movlw	11
 14918  1360  0672               	xorwf	??_ReadI2C,w
 14919  1361  1D03               	btfss	3,2
 14920  1362  2B64               	goto	u3291
 14921  1363  2B65               	goto	u3290
 14922  1364                     u3291:
 14923  1364  2B66               	goto	l23
 14924  1365                     u3290:
 14925  1365                     l22:
 14926                           
 14927                           ;i2c.c: 35: SSP1CON2bits.RCEN = 1;
 14928  1365  1591               	bsf	17,3	;volatile
 14929  1366                     l23:
 14930  1366  1C0F               	btfss	15,0	;volatile
 14931  1367  2B69               	goto	u3301
 14932  1368  2B6A               	goto	u3300
 14933  1369                     u3301:
 14934  1369  2B66               	goto	l23
 14935  136A                     u3300:
 14936  136A                     l4398:
 14937                           
 14938                           ;i2c.c: 37: return ( SSP1BUF );
 14939  136A  080C               	movf	12,w	;volatile
 14940  136B                     l26:
 14941  136B  0008               	return
 14942  136C                     __end_of_ReadI2C:
 14943                           
 14944                           	psect	text27
 14945  14BD                     __ptext27:	
 14946 ;; *************** function _DATAEE_WriteByte *****************
 14947 ;; Defined at:
 14948 ;;		line 180 in file "mcc_generated_files/memory.c"
 14949 ;; Parameters:    Size  Location     Type
 14950 ;;  bAdd            2    0[BANK0 ] unsigned int 
 14951 ;;  bData           1    2[BANK0 ] unsigned char 
 14952 ;; Auto vars:     Size  Location     Type
 14953 ;;  GIEBitValue     1    8[COMMON] unsigned char 
 14954 ;; Return value:  Size  Location     Type
 14955 ;;                  1    wreg      void 
 14956 ;; Registers used:
 14957 ;;		wreg, status,2, status,0
 14958 ;; Tracked objects:
 14959 ;;		On entry : 0/0
 14960 ;;		On exit  : 0/0
 14961 ;;		Unchanged: 0/0
 14962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14963 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14967 ;;Total ram usage:        4 bytes
 14968 ;; Hardware stack levels used:    1
 14969 ;; Hardware stack levels required when called:    4
 14970 ;; This function calls:
 14971 ;;		Nothing
 14972 ;; This function is called by:
 14973 ;;		_wirteEEPROMinit
 14974 ;;		_monitoring_TEMP_LUM
 14975 ;;		_main
 14976 ;; This function uses a non-reentrant model
 14977 ;;
 14978                           
 14979                           
 14980                           ;psect for function _DATAEE_WriteByte
 14981  14BD                     _DATAEE_WriteByte:
 14982  14BD                     l6106:	
 14983                           ;incstack = 0
 14984                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 14985                           
 14986                           
 14987                           ;memory.c: 182: uint8_t GIEBitValue = INTCONbits.GIE;
 14988  14BD  3000               	movlw	0
 14989  14BE  1B8B               	btfsc	11,7	;volatile
 14990  14BF  3001               	movlw	1
 14991  14C0  00F8               	movwf	DATAEE_WriteByte@GIEBitValue
 14992                           
 14993                           ;memory.c: 184: NVMADRH = ((bAdd >> 8) & 0xFF);
 14994  14C1  0020               	movlb	0	; select bank0
 14995  14C2  0821               	movf	DATAEE_WriteByte@bAdd+1,w
 14996  14C3  0030               	movlb	16	; select bank16
 14997  14C4  009B               	movwf	27	;volatile
 14998  14C5                     l6108:
 14999                           
 15000                           ;memory.c: 185: NVMADRL = (bAdd & 0xFF);
 15001  14C5  0020               	movlb	0	; select bank0
 15002  14C6  0820               	movf	DATAEE_WriteByte@bAdd,w
 15003  14C7  0030               	movlb	16	; select bank16
 15004  14C8  009A               	movwf	26	;volatile
 15005  14C9                     l6110:
 15006                           
 15007                           ;memory.c: 186: NVMDATL = bData;
 15008  14C9  0020               	movlb	0	; select bank0
 15009  14CA  0822               	movf	DATAEE_WriteByte@bData,w
 15010  14CB  0030               	movlb	16	; select bank16
 15011  14CC  009C               	movwf	28	;volatile
 15012  14CD                     l6112:
 15013                           
 15014                           ;memory.c: 187: NVMCON1bits.NVMREGS = 1;
 15015  14CD  171E               	bsf	30,6	;volsfr
 15016  14CE                     l6114:
 15017                           
 15018                           ;memory.c: 188: NVMCON1bits.WREN = 1;
 15019  14CE  151E               	bsf	30,2	;volsfr
 15020  14CF                     l6116:
 15021                           
 15022                           ;memory.c: 189: INTCONbits.GIE = 0;
 15023  14CF  138B               	bcf	11,7	;volatile
 15024  14D0                     l6118:
 15025                           
 15026                           ;memory.c: 190: NVMCON2 = 0x55;
 15027  14D0  3055               	movlw	85
 15028  14D1  009F               	movwf	31	;volsfr
 15029  14D2                     l6120:
 15030                           
 15031                           ;memory.c: 191: NVMCON2 = 0xAA;
 15032  14D2  30AA               	movlw	170
 15033  14D3  009F               	movwf	31	;volsfr
 15034  14D4                     l6122:
 15035                           
 15036                           ;memory.c: 192: NVMCON1bits.WR = 1;
 15037  14D4  149E               	bsf	30,1	;volsfr
 15038  14D5                     l728:	
 15039                           ;memory.c: 195: {
 15040                           
 15041  14D5  189E               	btfsc	30,1	;volsfr
 15042  14D6  2CD8               	goto	u6351
 15043  14D7  2CD9               	goto	u6350
 15044  14D8                     u6351:
 15045  14D8  2CD5               	goto	l728
 15046  14D9                     u6350:
 15047  14D9                     l730:
 15048                           
 15049                           ;memory.c: 196: };memory.c: 198: NVMCON1bits.WREN = 0;
 15050  14D9  111E               	bcf	30,2	;volsfr
 15051  14DA                     l6124:
 15052                           
 15053                           ;memory.c: 199: INTCONbits.GIE = GIEBitValue;
 15054  14DA  0C78               	rrf	DATAEE_WriteByte@GIEBitValue,w
 15055  14DB  1C03               	skipc
 15056  14DC  138B               	bcf	11,7	;volatile
 15057  14DD  1803               	skipnc
 15058  14DE  178B               	bsf	11,7	;volatile
 15059  14DF                     l731:
 15060  14DF  0008               	return
 15061  14E0                     __end_of_DATAEE_WriteByte:
 15062                           
 15063                           	psect	text28
 15064  12B9                     __ptext28:	
 15065 ;; *************** function _ADCC_GetSingleConversion *****************
 15066 ;; Defined at:
 15067 ;;		line 130 in file "mcc_generated_files/adcc.c"
 15068 ;; Parameters:    Size  Location     Type
 15069 ;;  channel         1    wreg     enum E12086
 15070 ;; Auto vars:     Size  Location     Type
 15071 ;;  channel         1    5[COMMON] enum E12086
 15072 ;; Return value:  Size  Location     Type
 15073 ;;                  2    2[COMMON] unsigned int 
 15074 ;; Registers used:
 15075 ;;		wreg
 15076 ;; Tracked objects:
 15077 ;;		On entry : 0/0
 15078 ;;		On exit  : 0/0
 15079 ;;		Unchanged: 0/0
 15080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15081 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15085 ;;Total ram usage:        4 bytes
 15086 ;; Hardware stack levels used:    1
 15087 ;; Hardware stack levels required when called:    4
 15088 ;; This function calls:
 15089 ;;		Nothing
 15090 ;; This function is called by:
 15091 ;;		_monitoring_TEMP_LUM
 15092 ;; This function uses a non-reentrant model
 15093 ;;
 15094                           
 15095                           
 15096                           ;psect for function _ADCC_GetSingleConversion
 15097  12B9                     _ADCC_GetSingleConversion:
 15098                           
 15099                           ;incstack = 0
 15100                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 15101                           ;ADCC_GetSingleConversion@channel stored from wreg
 15102  12B9  00F5               	movwf	ADCC_GetSingleConversion@channel
 15103  12BA                     l4498:
 15104                           
 15105                           ;adcc.c: 133: ADPCH = channel;
 15106  12BA  0875               	movf	ADCC_GetSingleConversion@channel,w
 15107  12BB  0021               	movlb	1	; select bank1
 15108  12BC  009E               	movwf	30	;volatile
 15109  12BD                     l4500:
 15110                           
 15111                           ;adcc.c: 136: ADCON0bits.ADON = 1;
 15112  12BD  1793               	bsf	19,7	;volatile
 15113  12BE                     l4502:
 15114                           
 15115                           ;adcc.c: 139: ADCON0bits.ADCONT = 0;
 15116  12BE  1313               	bcf	19,6	;volatile
 15117  12BF                     l4504:
 15118                           
 15119                           ;adcc.c: 142: ADCON0bits.ADGO = 1;
 15120  12BF  1413               	bsf	19,0	;volatile
 15121  12C0                     l4506:
 15122                           
 15123                           ;adcc.c: 145: __nop();
 15124  12C0  0000               	nop
 15125  12C1                     l537:	
 15126                           ;adcc.c: 149: {
 15127                           
 15128  12C1  0021               	movlb	1	; select bank1
 15129  12C2  1813               	btfsc	19,0	;volatile
 15130  12C3  2AC5               	goto	u3531
 15131  12C4  2AC6               	goto	u3530
 15132  12C5                     u3531:
 15133  12C5  2AC1               	goto	l537
 15134  12C6                     u3530:
 15135  12C6                     l4508:
 15136                           
 15137                           ;adcc.c: 150: };adcc.c: 154: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 15138  12C6  080D               	movf	13,w	;volatile
 15139  12C7  00F3               	movwf	?_ADCC_GetSingleConversion+1
 15140  12C8  080C               	movf	12,w	;volatile
 15141  12C9  00F2               	movwf	?_ADCC_GetSingleConversion
 15142  12CA                     l540:
 15143  12CA  0008               	return
 15144  12CB                     __end_of_ADCC_GetSingleConversion:
 15145                           
 15146                           	psect	text29
 15147  11EC                     __ptext29:	
 15148 ;; *************** function _TMR2_StartTimer *****************
 15149 ;; Defined at:
 15150 ;;		line 106 in file "mcc_generated_files/tmr2.c"
 15151 ;; Parameters:    Size  Location     Type
 15152 ;;		None
 15153 ;; Auto vars:     Size  Location     Type
 15154 ;;		None
 15155 ;; Return value:  Size  Location     Type
 15156 ;;                  1    wreg      void 
 15157 ;; Registers used:
 15158 ;;		status,2, status,0, pclath, cstack
 15159 ;; Tracked objects:
 15160 ;;		On entry : 0/0
 15161 ;;		On exit  : 0/0
 15162 ;;		Unchanged: 0/0
 15163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;Total ram usage:        0 bytes
 15169 ;; Hardware stack levels used:    1
 15170 ;; Hardware stack levels required when called:    5
 15171 ;; This function calls:
 15172 ;;		_TMR2_Start
 15173 ;; This function is called by:
 15174 ;;		_checkFlags
 15175 ;; This function uses a non-reentrant model
 15176 ;;
 15177                           
 15178                           
 15179                           ;psect for function _TMR2_StartTimer
 15180  11EC                     _TMR2_StartTimer:
 15181  11EC                     l4728:	
 15182                           ;incstack = 0
 15183                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
 15184                           
 15185                           
 15186                           ;tmr2.c: 108: TMR2_Start();
 15187  11EC  3191  21E3  3191   	fcall	_TMR2_Start
 15188  11EF                     l659:
 15189  11EF  0008               	return
 15190  11F0                     __end_of_TMR2_StartTimer:
 15191                           
 15192                           	psect	text30
 15193  11E3                     __ptext30:	
 15194 ;; *************** function _TMR2_Start *****************
 15195 ;; Defined at:
 15196 ;;		line 100 in file "mcc_generated_files/tmr2.c"
 15197 ;; Parameters:    Size  Location     Type
 15198 ;;		None
 15199 ;; Auto vars:     Size  Location     Type
 15200 ;;		None
 15201 ;; Return value:  Size  Location     Type
 15202 ;;                  1    wreg      void 
 15203 ;; Registers used:
 15204 ;;		None
 15205 ;; Tracked objects:
 15206 ;;		On entry : 0/0
 15207 ;;		On exit  : 0/0
 15208 ;;		Unchanged: 0/0
 15209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15214 ;;Total ram usage:        0 bytes
 15215 ;; Hardware stack levels used:    1
 15216 ;; Hardware stack levels required when called:    4
 15217 ;; This function calls:
 15218 ;;		Nothing
 15219 ;; This function is called by:
 15220 ;;		_TMR2_StartTimer
 15221 ;; This function uses a non-reentrant model
 15222 ;;
 15223                           
 15224                           
 15225                           ;psect for function _TMR2_Start
 15226  11E3                     _TMR2_Start:
 15227  11E3                     l4514:	
 15228                           ;incstack = 0
 15229                           ; Regs used in _TMR2_Start: []
 15230                           
 15231                           
 15232                           ;tmr2.c: 103: T2CONbits.TMR2ON = 1;
 15233  11E3  0025               	movlb	5	; select bank5
 15234  11E4  178E               	bsf	14,7	;volatile
 15235  11E5                     l656:
 15236  11E5  0008               	return
 15237  11E6                     __end_of_TMR2_Start:
 15238                           
 15239                           	psect	text31
 15240  08D1                     __ptext31:	
 15241 ;; *************** function _S1button *****************
 15242 ;; Defined at:
 15243 ;;		line 626 in file "main.c"
 15244 ;; Parameters:    Size  Location     Type
 15245 ;;		None
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;		None
 15248 ;; Return value:  Size  Location     Type
 15249 ;;                  1    wreg      void 
 15250 ;; Registers used:
 15251 ;;		wreg, status,2, status,0
 15252 ;; Tracked objects:
 15253 ;;		On entry : 0/0
 15254 ;;		On exit  : 0/0
 15255 ;;		Unchanged: 0/0
 15256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;Total ram usage:        1 bytes
 15262 ;; Hardware stack levels used:    1
 15263 ;; Hardware stack levels required when called:    4
 15264 ;; This function calls:
 15265 ;;		Nothing
 15266 ;; This function is called by:
 15267 ;;		_checkFlags
 15268 ;; This function uses a non-reentrant model
 15269 ;;
 15270                           
 15271                           
 15272                           ;psect for function _S1button
 15273  08D1                     _S1button:
 15274  08D1                     l4944:	
 15275                           ;incstack = 0
 15276                           ; Regs used in _S1button: [wreg+status,2+status,0]
 15277                           
 15278                           
 15279                           ;main.c: 628: if(modeFlag == 0 && (clkAlarm.trigger || tempAlarm.trigger || lumAlarm.tri
      +                          gger)){
 15280  08D1  0020               	movlb	0	; select bank0
 15281  08D2  085C               	movf	_modeFlag,w
 15282  08D3  045D               	iorwf	_modeFlag+1,w
 15283  08D4  1D03               	btfss	3,2
 15284  08D5  28D7               	goto	u4451
 15285  08D6  28D8               	goto	u4450
 15286  08D7                     u4451:
 15287  08D7  28F0               	goto	l4956
 15288  08D8                     u4450:
 15289  08D8                     l4946:
 15290  08D8  0858               	movf	_clkAlarm+3,w
 15291  08D9  1D03               	btfss	3,2
 15292  08DA  28DC               	goto	u4461
 15293  08DB  28DD               	goto	u4460
 15294  08DC                     u4461:
 15295  08DC  28E8               	goto	l4952
 15296  08DD                     u4460:
 15297  08DD                     l4948:
 15298  08DD  0021               	movlb	1	; select bank1
 15299  08DE  084A               	movf	(_tempAlarm^(0+128)+1),w
 15300  08DF  1D03               	btfss	3,2
 15301  08E0  28E2               	goto	u4471
 15302  08E1  28E3               	goto	u4470
 15303  08E2                     u4471:
 15304  08E2  28E8               	goto	l4952
 15305  08E3                     u4470:
 15306  08E3                     l4950:
 15307  08E3  0847               	movf	(_lumAlarm^(0+128)+1),w
 15308  08E4  1903               	btfsc	3,2
 15309  08E5  28E7               	goto	u4481
 15310  08E6  28E8               	goto	u4480
 15311  08E7                     u4481:
 15312  08E7  28F0               	goto	l4956
 15313  08E8                     u4480:
 15314  08E8                     l4952:
 15315                           
 15316                           ;main.c: 629: clkAlarm.trigger = 0;
 15317  08E8  0020               	movlb	0	; select bank0
 15318  08E9  01D8               	clrf	_clkAlarm+3
 15319                           
 15320                           ;main.c: 630: tempAlarm.trigger = 0;
 15321  08EA  0021               	movlb	1	; select bank1
 15322  08EB  01CA               	clrf	(_tempAlarm^(0+128)+1)
 15323                           
 15324                           ;main.c: 631: lumAlarm.trigger = 0;
 15325  08EC  01C7               	clrf	(_lumAlarm^(0+128)+1)
 15326  08ED                     l4954:
 15327                           
 15328                           ;main.c: 632: updateLCD = 1;
 15329  08ED  01EA               	clrf	_updateLCD^(0+128)
 15330  08EE  0AEA               	incf	_updateLCD^(0+128),f
 15331                           
 15332                           ;main.c: 633: } else{
 15333  08EF  2925               	goto	l1359
 15334  08F0                     l4956:
 15335                           
 15336                           ;main.c: 634: if(modeFlag == 1){
 15337  08F0  0020               	movlb	0	; select bank0
 15338  08F1  035C               	decf	_modeFlag,w
 15339  08F2  045D               	iorwf	_modeFlag+1,w
 15340  08F3  1D03               	btfss	3,2
 15341  08F4  28F6               	goto	u4491
 15342  08F5  28F7               	goto	u4490
 15343  08F6                     u4491:
 15344  08F6  291A               	goto	l4964
 15345  08F7                     u4490:
 15346  08F7                     l4958:
 15347                           
 15348                           ;main.c: 635: if(editingClockAlarm >= 1){
 15349  08F7  085F               	movf	_editingClockAlarm+1,w
 15350  08F8  3A80               	xorlw	128
 15351  08F9  00F2               	movwf	??_S1button
 15352  08FA  3080               	movlw	128
 15353  08FB  0272               	subwf	??_S1button,w
 15354  08FC  1D03               	skipz
 15355  08FD  2900               	goto	u4505
 15356  08FE  3001               	movlw	1
 15357  08FF  025E               	subwf	_editingClockAlarm,w
 15358  0900                     u4505:
 15359  0900  1C03               	skipc
 15360  0901  2903               	goto	u4501
 15361  0902  2904               	goto	u4500
 15362  0903                     u4501:
 15363  0903  2909               	goto	l1361
 15364  0904                     u4500:
 15365  0904                     l4960:
 15366                           
 15367                           ;main.c: 636: editingClockAlarm++;
 15368  0904  3001               	movlw	1
 15369  0905  0020               	movlb	0	; select bank0
 15370  0906  07DE               	addwf	_editingClockAlarm,f
 15371  0907  3000               	movlw	0
 15372  0908  3DDF               	addwfc	_editingClockAlarm+1,f
 15373  0909                     l1361:
 15374                           
 15375                           ;main.c: 637: };main.c: 638: if(editingClockAlarm > 3){
 15376  0909  0020               	movlb	0	; select bank0
 15377  090A  085F               	movf	_editingClockAlarm+1,w
 15378  090B  3A80               	xorlw	128
 15379  090C  00F2               	movwf	??_S1button
 15380  090D  3080               	movlw	128
 15381  090E  0272               	subwf	??_S1button,w
 15382  090F  1D03               	skipz
 15383  0910  2913               	goto	u4515
 15384  0911  3004               	movlw	4
 15385  0912  025E               	subwf	_editingClockAlarm,w
 15386  0913                     u4515:
 15387  0913  1C03               	skipc
 15388  0914  2916               	goto	u4511
 15389  0915  2917               	goto	u4510
 15390  0916                     u4511:
 15391  0916  291A               	goto	l4964
 15392  0917                     u4510:
 15393  0917                     l4962:
 15394                           
 15395                           ;main.c: 639: editingClockAlarm = 0;
 15396  0917  0020               	movlb	0	; select bank0
 15397  0918  01DE               	clrf	_editingClockAlarm
 15398  0919  01DF               	clrf	_editingClockAlarm+1
 15399  091A                     l4964:
 15400                           
 15401                           ;main.c: 640: };main.c: 641: };main.c: 642: if(editingClockAlarm == 0){
 15402  091A  0020               	movlb	0	; select bank0
 15403  091B  085E               	movf	_editingClockAlarm,w
 15404  091C  045F               	iorwf	_editingClockAlarm+1,w
 15405  091D  1D03               	btfss	3,2
 15406  091E  2920               	goto	u4521
 15407  091F  2921               	goto	u4520
 15408  0920                     u4521:
 15409  0920  2925               	goto	l1359
 15410  0921                     u4520:
 15411  0921                     l4966:
 15412                           
 15413                           ;main.c: 643: modeFlag++;
 15414  0921  3001               	movlw	1
 15415  0922  07DC               	addwf	_modeFlag,f
 15416  0923  3000               	movlw	0
 15417  0924  3DDD               	addwfc	_modeFlag+1,f
 15418  0925                     l1359:
 15419                           
 15420                           ;main.c: 644: };main.c: 645: };main.c: 646: _delay((unsigned long)((50)*(1000000/4000.0)
      +                          ));
 15421  0925  3011               	movlw	17
 15422  0926  00F2               	movwf	??_S1button
 15423  0927  303A               	movlw	58
 15424  0928                     u8467:
 15425  0928  0B89               	decfsz	9,f
 15426  0929  2928               	goto	u8467
 15427  092A  0BF2               	decfsz	??_S1button,f
 15428  092B  2928               	goto	u8467
 15429  092C  3200               	nop2
 15430  092D                     l1364:
 15431  092D  0008               	return
 15432  092E                     __end_of_S1button:
 15433                           
 15434                           	psect	text32
 15435  11E0                     __ptext32:	
 15436 ;; *************** function _PWM_Output_D4_Enable *****************
 15437 ;; Defined at:
 15438 ;;		line 349 in file "main.c"
 15439 ;; Parameters:    Size  Location     Type
 15440 ;;		None
 15441 ;; Auto vars:     Size  Location     Type
 15442 ;;		None
 15443 ;; Return value:  Size  Location     Type
 15444 ;;                  1    wreg      void 
 15445 ;; Registers used:
 15446 ;;		None
 15447 ;; Tracked objects:
 15448 ;;		On entry : 0/0
 15449 ;;		On exit  : 0/0
 15450 ;;		Unchanged: 0/0
 15451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;Total ram usage:        0 bytes
 15457 ;; Hardware stack levels used:    1
 15458 ;; Hardware stack levels required when called:    4
 15459 ;; This function calls:
 15460 ;;		Nothing
 15461 ;; This function is called by:
 15462 ;;		_checkFlags
 15463 ;; This function uses a non-reentrant model
 15464 ;;
 15465                           
 15466                           
 15467                           ;psect for function _PWM_Output_D4_Enable
 15468  11E0                     _PWM_Output_D4_Enable:
 15469  11E0                     l4736:	
 15470                           ;incstack = 0
 15471                           ; Regs used in _PWM_Output_D4_Enable: []
 15472                           
 15473                           
 15474                           ;main.c: 350: PWM6EN = 1;
 15475  11E0  0027               	movlb	7	; select bank7
 15476  11E1  178E               	bsf	14,7	;volatile
 15477  11E2                     l1257:
 15478  11E2  0008               	return
 15479  11E3                     __end_of_PWM_Output_D4_Enable:
 15480                           
 15481                           	psect	text33
 15482  0C75                     __ptext33:	
 15483 ;; *************** function _cmd_trc *****************
 15484 ;; Defined at:
 15485 ;;		line 977 in file "main.c"
 15486 ;; Parameters:    Size  Location     Type
 15487 ;;  num             2    7[BANK0 ] int 
 15488 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 15489 ;;		 -> main@buff(20), 
 15490 ;; Auto vars:     Size  Location     Type
 15491 ;;  buffData        5   16[BANK0 ] unsigned char [5]
 15492 ;;  buffInit        3   21[BANK0 ] unsigned char [3]
 15493 ;;  n               2   31[BANK0 ] int 
 15494 ;;  maxReadings     2   29[BANK0 ] int 
 15495 ;;  address         2   26[BANK0 ] unsigned int 
 15496 ;;  i               2   24[BANK0 ] int 
 15497 ;;  j               1   33[BANK0 ] unsigned char 
 15498 ;;  buffEOM         1   28[BANK0 ] unsigned char [1]
 15499 ;; Return value:  Size  Location     Type
 15500 ;;                  1    wreg      void 
 15501 ;; Registers used:
 15502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15503 ;; Tracked objects:
 15504 ;;		On entry : 0/0
 15505 ;;		On exit  : 0/0
 15506 ;;		Unchanged: 0/0
 15507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15508 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;Total ram usage:       27 bytes
 15513 ;; Hardware stack levels used:    1
 15514 ;; Hardware stack levels required when called:    8
 15515 ;; This function calls:
 15516 ;;		_DATAEE_ReadByte
 15517 ;;		___wmul
 15518 ;;		_sendERRORMessage
 15519 ;;		_sendMessage
 15520 ;; This function is called by:
 15521 ;;		_main
 15522 ;; This function uses a non-reentrant model
 15523 ;;
 15524                           
 15525                           
 15526                           ;psect for function _cmd_trc
 15527  0C75                     _cmd_trc:
 15528  0C75                     l6878:	
 15529                           ;incstack = 0
 15530                           ; Regs used in _cmd_trc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15531                           
 15532                           
 15533                           ;main.c: 978: if(num == 4){
 15534  0C75  3004               	movlw	4
 15535  0C76  0020               	movlb	0	; select bank0
 15536  0C77  0627               	xorwf	cmd_trc@num,w
 15537  0C78  0428               	iorwf	cmd_trc@num+1,w
 15538  0C79  1D03               	btfss	3,2
 15539  0C7A  2C7C               	goto	u8031
 15540  0C7B  2C7D               	goto	u8030
 15541  0C7C                     u8031:
 15542  0C7C  2D69               	goto	l6934
 15543  0C7D                     u8030:
 15544  0C7D                     l6880:
 15545                           
 15546                           ;main.c: 979: int n = buffer[2];
 15547  0C7D  0829               	movf	cmd_trc@buffer,w
 15548  0C7E  3E02               	addlw	2
 15549  0C7F  0086               	movwf	6
 15550  0C80  0187               	clrf	7
 15551  0C81  0801               	movf	1,w
 15552  0C82  00AA               	movwf	??_cmd_trc
 15553  0C83  01AB               	clrf	??_cmd_trc+1
 15554  0C84  082A               	movf	??_cmd_trc,w
 15555  0C85  00BF               	movwf	cmd_trc@n
 15556  0C86  082B               	movf	??_cmd_trc+1,w
 15557  0C87  00C0               	movwf	cmd_trc@n+1
 15558  0C88                     l6882:
 15559                           
 15560                           ;main.c: 980: int maxReadings = (iwrite-iread);
 15561  0C88  0861               	movf	_iread,w
 15562  0C89  027A               	subwf	_iwrite,w
 15563  0C8A  00BD               	movwf	cmd_trc@maxReadings
 15564  0C8B  01BE               	clrf	cmd_trc@maxReadings+1
 15565  0C8C  1C03               	skipc
 15566  0C8D  03BE               	decf	cmd_trc@maxReadings+1,f
 15567  0C8E                     l6884:
 15568                           
 15569                           ;main.c: 981: if(maxReadings <= 0){
 15570  0C8E  083E               	movf	cmd_trc@maxReadings+1,w
 15571  0C8F  3A80               	xorlw	128
 15572  0C90  00AA               	movwf	??_cmd_trc
 15573  0C91  3080               	movlw	128
 15574  0C92  022A               	subwf	??_cmd_trc,w
 15575  0C93  1D03               	skipz
 15576  0C94  2C97               	goto	u8045
 15577  0C95  3001               	movlw	1
 15578  0C96  023D               	subwf	cmd_trc@maxReadings,w
 15579  0C97                     u8045:
 15580  0C97  1803               	skipnc
 15581  0C98  2C9A               	goto	u8041
 15582  0C99  2C9B               	goto	u8040
 15583  0C9A                     u8041:
 15584  0C9A  2CAA               	goto	l6888
 15585  0C9B                     u8040:
 15586  0C9B                     l6886:
 15587                           
 15588                           ;main.c: 982: maxReadings = iwrite + (NREG - iread);
 15589  0C9B  0020               	movlb	0	; select bank0
 15590  0C9C  0861               	movf	_iread,w
 15591  0C9D  00AA               	movwf	??_cmd_trc
 15592  0C9E  01AB               	clrf	??_cmd_trc+1
 15593  0C9F  087A               	movf	_iwrite,w
 15594  0CA0  077B               	addwf	_NREG,w
 15595  0CA1  00AC               	movwf	??_cmd_trc+2
 15596  0CA2  01AD               	clrf	??_cmd_trc+3
 15597  0CA3  0DAD               	rlf	??_cmd_trc+3,f
 15598  0CA4  082A               	movf	??_cmd_trc,w
 15599  0CA5  022C               	subwf	??_cmd_trc+2,w
 15600  0CA6  00BD               	movwf	cmd_trc@maxReadings
 15601  0CA7  082B               	movf	??_cmd_trc+1,w
 15602  0CA8  3B2D               	subwfb	??_cmd_trc+3,w
 15603  0CA9  00BE               	movwf	cmd_trc@maxReadings+1
 15604  0CAA                     l6888:
 15605                           
 15606                           ;main.c: 983: };main.c: 984: if((n > nr) || (n > maxReadings)){
 15607  0CAA  0020               	movlb	0	; select bank0
 15608  0CAB  0840               	movf	cmd_trc@n+1,w
 15609  0CAC  3A80               	xorlw	128
 15610  0CAD  3C80               	sublw	128
 15611  0CAE  1D03               	skipz
 15612  0CAF  2CB2               	goto	u8055
 15613  0CB0  083F               	movf	cmd_trc@n,w
 15614  0CB1  0260               	subwf	_nr,w
 15615  0CB2                     u8055:
 15616  0CB2  1C03               	skipc
 15617  0CB3  2CB5               	goto	u8051
 15618  0CB4  2CB6               	goto	u8050
 15619  0CB5                     u8051:
 15620  0CB5  2CC5               	goto	l6892
 15621  0CB6                     u8050:
 15622  0CB6                     l6890:
 15623  0CB6  0020               	movlb	0	; select bank0
 15624  0CB7  083E               	movf	cmd_trc@maxReadings+1,w
 15625  0CB8  3A80               	xorlw	128
 15626  0CB9  00AA               	movwf	??_cmd_trc
 15627  0CBA  0840               	movf	cmd_trc@n+1,w
 15628  0CBB  3A80               	xorlw	128
 15629  0CBC  022A               	subwf	??_cmd_trc,w
 15630  0CBD  1D03               	skipz
 15631  0CBE  2CC1               	goto	u8065
 15632  0CBF  083F               	movf	cmd_trc@n,w
 15633  0CC0  023D               	subwf	cmd_trc@maxReadings,w
 15634  0CC1                     u8065:
 15635  0CC1  1803               	skipnc
 15636  0CC2  2CC4               	goto	u8061
 15637  0CC3  2CC5               	goto	u8060
 15638  0CC4                     u8061:
 15639  0CC4  2CCA               	goto	l6896
 15640  0CC5                     u8060:
 15641  0CC5                     l6892:
 15642                           
 15643                           ;main.c: 985: sendERRORMessage((uint8_t)0XCB);
 15644  0CC5  30CB               	movlw	203
 15645  0CC6  3193  23DC  318C   	fcall	_sendERRORMessage
 15646  0CC9  2D6D               	goto	l1498
 15647  0CCA                     l6896:
 15648                           
 15649                           ;main.c: 987: };main.c: 992: uint8_t buffInit[3];;main.c: 993: buffInit[0] = (uint8_t)0x
      +                          FD;
 15650  0CCA  30FD               	movlw	253
 15651  0CCB  0020               	movlb	0	; select bank0
 15652  0CCC  00AA               	movwf	??_cmd_trc
 15653  0CCD  082A               	movf	??_cmd_trc,w
 15654  0CCE  00B5               	movwf	cmd_trc@buffInit
 15655                           
 15656                           ;main.c: 994: buffInit[1] = (uint8_t)0XCB;
 15657  0CCF  30CB               	movlw	203
 15658  0CD0  00AA               	movwf	??_cmd_trc
 15659  0CD1  082A               	movf	??_cmd_trc,w
 15660  0CD2  00B6               	movwf	cmd_trc@buffInit+1
 15661                           
 15662                           ;main.c: 995: buffInit[2] = (uint8_t)n;
 15663  0CD3  083F               	movf	cmd_trc@n,w
 15664  0CD4  00AA               	movwf	??_cmd_trc
 15665  0CD5  082A               	movf	??_cmd_trc,w
 15666  0CD6  00B7               	movwf	cmd_trc@buffInit+2
 15667  0CD7                     l6898:
 15668                           
 15669                           ;main.c: 996: sendMessage(3,buffInit);
 15670  0CD7  3003               	movlw	3
 15671  0CD8  00F5               	movwf	sendMessage@num
 15672  0CD9  3000               	movlw	0
 15673  0CDA  00F6               	movwf	sendMessage@num+1
 15674  0CDB  3035               	movlw	(low (cmd_trc@buffInit| 0))& (0+255)
 15675  0CDC  00AA               	movwf	??_cmd_trc
 15676  0CDD  082A               	movf	??_cmd_trc,w
 15677  0CDE  00F7               	movwf	sendMessage@buffer
 15678  0CDF  3194  249A  318C   	fcall	_sendMessage
 15679  0CE2                     l6900:
 15680  0CE2                     l6902:
 15681                           
 15682                           ;main.c: 1001: for(i = 0; i < n; i++){
 15683  0CE2  0020               	movlb	0	; select bank0
 15684  0CE3  01B8               	clrf	cmd_trc@i
 15685  0CE4  01B9               	clrf	cmd_trc@i+1
 15686  0CE5  2D4A               	goto	l6928
 15687  0CE6                     l6904:
 15688                           
 15689                           ;main.c: 1002: for(j = 0; j < 5; j++){
 15690  0CE6  0020               	movlb	0	; select bank0
 15691  0CE7  01C1               	clrf	cmd_trc@j
 15692  0CE8                     l6910:
 15693                           
 15694                           ;main.c: 1003: address = (iread * 0x5) + 0x7012 + j;
 15695  0CE8  0841               	movf	cmd_trc@j,w
 15696  0CE9  00AA               	movwf	??_cmd_trc
 15697  0CEA  01AB               	clrf	??_cmd_trc+1
 15698  0CEB  0861               	movf	_iread,w
 15699  0CEC  00AC               	movwf	??_cmd_trc+2
 15700  0CED  01AD               	clrf	??_cmd_trc+3
 15701  0CEE  082C               	movf	??_cmd_trc+2,w
 15702  0CEF  00F2               	movwf	___wmul@multiplier
 15703  0CF0  082D               	movf	??_cmd_trc+3,w
 15704  0CF1  00F3               	movwf	___wmul@multiplier+1
 15705  0CF2  3005               	movlw	5
 15706  0CF3  00F4               	movwf	___wmul@multiplicand
 15707  0CF4  3000               	movlw	0
 15708  0CF5  00F5               	movwf	___wmul@multiplicand+1
 15709  0CF6  3194  2418  318C   	fcall	___wmul
 15710  0CF9  0020               	movlb	0	; select bank0
 15711  0CFA  082A               	movf	??_cmd_trc,w
 15712  0CFB  0772               	addwf	?___wmul,w
 15713  0CFC  00AE               	movwf	??_cmd_trc+4
 15714  0CFD  082B               	movf	??_cmd_trc+1,w
 15715  0CFE  3D73               	addwfc	?___wmul+1,w
 15716  0CFF  00AF               	movwf	??_cmd_trc+5
 15717  0D00  082E               	movf	??_cmd_trc+4,w
 15718  0D01  3E12               	addlw	18
 15719  0D02  00BA               	movwf	cmd_trc@address
 15720  0D03  3070               	movlw	112
 15721  0D04  3D2F               	addwfc	??_cmd_trc+5,w
 15722  0D05  00BB               	movwf	cmd_trc@address+1
 15723  0D06                     l6912:
 15724                           
 15725                           ;main.c: 1004: buffData[j] = DATAEE_ReadByte(address);
 15726  0D06  083B               	movf	cmd_trc@address+1,w
 15727  0D07  00F9               	movwf	DATAEE_ReadByte@bAdd+1
 15728  0D08  083A               	movf	cmd_trc@address,w
 15729  0D09  00F8               	movwf	DATAEE_ReadByte@bAdd
 15730  0D0A  3192  225B  318C   	fcall	_DATAEE_ReadByte
 15731  0D0D  0020               	movlb	0	; select bank0
 15732  0D0E  00AA               	movwf	??_cmd_trc
 15733  0D0F  0841               	movf	cmd_trc@j,w
 15734  0D10  3E30               	addlw	(low (cmd_trc@buffData| 0))& (0+255)
 15735  0D11  0086               	movwf	6
 15736  0D12  0187               	clrf	7
 15737  0D13  082A               	movf	??_cmd_trc,w
 15738  0D14  0081               	movwf	1
 15739  0D15                     l6914:
 15740  0D15  3001               	movlw	1
 15741  0D16  00AA               	movwf	??_cmd_trc
 15742  0D17  082A               	movf	??_cmd_trc,w
 15743  0D18  07C1               	addwf	cmd_trc@j,f
 15744  0D19                     l6916:
 15745  0D19  3005               	movlw	5
 15746  0D1A  0241               	subwf	cmd_trc@j,w
 15747  0D1B  1C03               	skipc
 15748  0D1C  2D1E               	goto	u8071
 15749  0D1D  2D1F               	goto	u8070
 15750  0D1E                     u8071:
 15751  0D1E  2CE8               	goto	l6910
 15752  0D1F                     u8070:
 15753  0D1F                     l6918:
 15754                           
 15755                           ;main.c: 1005: };main.c: 1006: sendMessage(5,buffData);
 15756  0D1F  3005               	movlw	5
 15757  0D20  00F5               	movwf	sendMessage@num
 15758  0D21  3000               	movlw	0
 15759  0D22  00F6               	movwf	sendMessage@num+1
 15760  0D23  3030               	movlw	(low (cmd_trc@buffData| 0))& (0+255)
 15761  0D24  00AA               	movwf	??_cmd_trc
 15762  0D25  082A               	movf	??_cmd_trc,w
 15763  0D26  00F7               	movwf	sendMessage@buffer
 15764  0D27  3194  249A  318C   	fcall	_sendMessage
 15765  0D2A                     l6920:
 15766                           
 15767                           ;main.c: 1007: iread++;
 15768  0D2A  3001               	movlw	1
 15769  0D2B  0020               	movlb	0	; select bank0
 15770  0D2C  00AA               	movwf	??_cmd_trc
 15771  0D2D  082A               	movf	??_cmd_trc,w
 15772  0D2E  07E1               	addwf	_iread,f
 15773  0D2F                     l6922:
 15774                           
 15775                           ;main.c: 1008: if(iread>NREG-1){
 15776  0D2F  087B               	movf	_NREG,w
 15777  0D30  3EFF               	addlw	255
 15778  0D31  00AA               	movwf	??_cmd_trc
 15779  0D32  30FF               	movlw	255
 15780  0D33  1803               	skipnc
 15781  0D34  3000               	movlw	0
 15782  0D35  00AB               	movwf	??_cmd_trc+1
 15783  0D36  082B               	movf	??_cmd_trc+1,w
 15784  0D37  3A80               	xorlw	128
 15785  0D38  00AC               	movwf	??_cmd_trc+2
 15786  0D39  3080               	movlw	128
 15787  0D3A  022C               	subwf	??_cmd_trc+2,w
 15788  0D3B  1D03               	skipz
 15789  0D3C  2D3F               	goto	u8085
 15790  0D3D  0861               	movf	_iread,w
 15791  0D3E  022A               	subwf	??_cmd_trc,w
 15792  0D3F                     u8085:
 15793  0D3F  1803               	skipnc
 15794  0D40  2D42               	goto	u8081
 15795  0D41  2D43               	goto	u8080
 15796  0D42                     u8081:
 15797  0D42  2D45               	goto	l6926
 15798  0D43                     u8080:
 15799  0D43                     l6924:
 15800                           
 15801                           ;main.c: 1009: iread=0;
 15802  0D43  0020               	movlb	0	; select bank0
 15803  0D44  01E1               	clrf	_iread
 15804  0D45                     l6926:
 15805  0D45  3001               	movlw	1
 15806  0D46  0020               	movlb	0	; select bank0
 15807  0D47  07B8               	addwf	cmd_trc@i,f
 15808  0D48  3000               	movlw	0
 15809  0D49  3DB9               	addwfc	cmd_trc@i+1,f
 15810  0D4A                     l6928:
 15811  0D4A  0839               	movf	cmd_trc@i+1,w
 15812  0D4B  3A80               	xorlw	128
 15813  0D4C  00AA               	movwf	??_cmd_trc
 15814  0D4D  0840               	movf	cmd_trc@n+1,w
 15815  0D4E  3A80               	xorlw	128
 15816  0D4F  022A               	subwf	??_cmd_trc,w
 15817  0D50  1D03               	skipz
 15818  0D51  2D54               	goto	u8095
 15819  0D52  083F               	movf	cmd_trc@n,w
 15820  0D53  0238               	subwf	cmd_trc@i,w
 15821  0D54                     u8095:
 15822  0D54  1C03               	skipc
 15823  0D55  2D57               	goto	u8091
 15824  0D56  2D58               	goto	u8090
 15825  0D57                     u8091:
 15826  0D57  2CE6               	goto	l6904
 15827  0D58                     u8090:
 15828  0D58                     l6930:
 15829                           
 15830                           ;main.c: 1010: };main.c: 1011: };main.c: 1012: uint8_t buffEOM[1];;main.c: 1013: buffEOM
      +                          [0] = (uint8_t)0xFE;
 15831  0D58  30FE               	movlw	254
 15832  0D59  0020               	movlb	0	; select bank0
 15833  0D5A  00AA               	movwf	??_cmd_trc
 15834  0D5B  082A               	movf	??_cmd_trc,w
 15835  0D5C  00BC               	movwf	cmd_trc@buffEOM
 15836  0D5D                     l6932:
 15837                           
 15838                           ;main.c: 1014: sendMessage(1,buffEOM);
 15839  0D5D  3001               	movlw	1
 15840  0D5E  00F5               	movwf	sendMessage@num
 15841  0D5F  3000               	movlw	0
 15842  0D60  00F6               	movwf	sendMessage@num+1
 15843  0D61  303C               	movlw	(low (cmd_trc@buffEOM| 0))& (0+255)
 15844  0D62  00AA               	movwf	??_cmd_trc
 15845  0D63  082A               	movf	??_cmd_trc,w
 15846  0D64  00F7               	movwf	sendMessage@buffer
 15847  0D65  3194  249A  318C   	fcall	_sendMessage
 15848                           
 15849                           ;main.c: 1015: } else{
 15850  0D68  2D6D               	goto	l1498
 15851  0D69                     l6934:
 15852                           
 15853                           ;main.c: 1016: sendERRORMessage((uint8_t)0XCB);
 15854  0D69  30CB               	movlw	203
 15855  0D6A  3193  23DC  318C   	fcall	_sendERRORMessage
 15856  0D6D                     l1498:
 15857  0D6D  0008               	return
 15858  0D6E                     __end_of_cmd_trc:
 15859                           
 15860                           	psect	text34
 15861  154D                     __ptext34:	
 15862 ;; *************** function _cmd_ir *****************
 15863 ;; Defined at:
 15864 ;;		line 963 in file "main.c"
 15865 ;; Parameters:    Size  Location     Type
 15866 ;;  num             2    7[BANK0 ] int 
 15867 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 15868 ;;		 -> main@buff(20), 
 15869 ;; Auto vars:     Size  Location     Type
 15870 ;;  buff            7   11[BANK0 ] unsigned char [7]
 15871 ;; Return value:  Size  Location     Type
 15872 ;;                  1    wreg      void 
 15873 ;; Registers used:
 15874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15875 ;; Tracked objects:
 15876 ;;		On entry : 0/0
 15877 ;;		On exit  : 0/0
 15878 ;;		Unchanged: 0/0
 15879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15880 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15884 ;;Total ram usage:       11 bytes
 15885 ;; Hardware stack levels used:    1
 15886 ;; Hardware stack levels required when called:    7
 15887 ;; This function calls:
 15888 ;;		_sendMessage
 15889 ;; This function is called by:
 15890 ;;		_main
 15891 ;; This function uses a non-reentrant model
 15892 ;;
 15893                           
 15894                           
 15895                           ;psect for function _cmd_ir
 15896  154D                     _cmd_ir:
 15897  154D                     l6874:	
 15898                           ;incstack = 0
 15899                           ; Regs used in _cmd_ir: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15900                           
 15901                           
 15902                           ;main.c: 964: uint8_t buff[7];;main.c: 965: buff[0] = (uint8_t)0xFD;
 15903  154D  30FD               	movlw	253
 15904  154E  0020               	movlb	0	; select bank0
 15905  154F  00AA               	movwf	??_cmd_ir
 15906  1550  082A               	movf	??_cmd_ir,w
 15907  1551  00AB               	movwf	cmd_ir@buff
 15908                           
 15909                           ;main.c: 966: buff[1] = (uint8_t)0XCA;
 15910  1552  30CA               	movlw	202
 15911  1553  00AA               	movwf	??_cmd_ir
 15912  1554  082A               	movf	??_cmd_ir,w
 15913  1555  00AC               	movwf	cmd_ir@buff+1
 15914                           
 15915                           ;main.c: 967: buff[2] = NREG;
 15916  1556  087B               	movf	_NREG,w
 15917  1557  00AA               	movwf	??_cmd_ir
 15918  1558  082A               	movf	??_cmd_ir,w
 15919  1559  00AD               	movwf	cmd_ir@buff+2
 15920                           
 15921                           ;main.c: 968: buff[3] = nr;
 15922  155A  0860               	movf	_nr,w
 15923  155B  00AA               	movwf	??_cmd_ir
 15924  155C  082A               	movf	??_cmd_ir,w
 15925  155D  00AE               	movwf	cmd_ir@buff+3
 15926                           
 15927                           ;main.c: 969: buff[4] = iread;
 15928  155E  0861               	movf	_iread,w
 15929  155F  00AA               	movwf	??_cmd_ir
 15930  1560  082A               	movf	??_cmd_ir,w
 15931  1561  00AF               	movwf	cmd_ir@buff+4
 15932                           
 15933                           ;main.c: 970: buff[5] = iwrite;
 15934  1562  087A               	movf	_iwrite,w
 15935  1563  00AA               	movwf	??_cmd_ir
 15936  1564  082A               	movf	??_cmd_ir,w
 15937  1565  00B0               	movwf	cmd_ir@buff+5
 15938                           
 15939                           ;main.c: 971: buff[6] = (uint8_t)0xFE;
 15940  1566  30FE               	movlw	254
 15941  1567  00AA               	movwf	??_cmd_ir
 15942  1568  082A               	movf	??_cmd_ir,w
 15943  1569  00B1               	movwf	cmd_ir@buff+6
 15944  156A                     l6876:
 15945                           
 15946                           ;main.c: 973: sendMessage(7,buff);
 15947  156A  3007               	movlw	7
 15948  156B  00F5               	movwf	sendMessage@num
 15949  156C  3000               	movlw	0
 15950  156D  00F6               	movwf	sendMessage@num+1
 15951  156E  302B               	movlw	(low (cmd_ir@buff| 0))& (0+255)
 15952  156F  00AA               	movwf	??_cmd_ir
 15953  1570  082A               	movf	??_cmd_ir,w
 15954  1571  00F7               	movwf	sendMessage@buffer
 15955  1572  3194  249A  3195   	fcall	_sendMessage
 15956  1575                     l1490:
 15957  1575  0008               	return
 15958  1576                     __end_of_cmd_ir:
 15959                           
 15960                           	psect	text35
 15961  16D2                     __ptext35:	
 15962 ;; *************** function _cmd_aa *****************
 15963 ;; Defined at:
 15964 ;;		line 951 in file "main.c"
 15965 ;; Parameters:    Size  Location     Type
 15966 ;;  num             2    7[BANK0 ] int 
 15967 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 15968 ;;		 -> main@buff(20), 
 15969 ;; Auto vars:     Size  Location     Type
 15970 ;;		None
 15971 ;; Return value:  Size  Location     Type
 15972 ;;                  1    wreg      void 
 15973 ;; Registers used:
 15974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15975 ;; Tracked objects:
 15976 ;;		On entry : 0/0
 15977 ;;		On exit  : 0/0
 15978 ;;		Unchanged: 0/0
 15979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15980 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15983 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15984 ;;Total ram usage:        4 bytes
 15985 ;; Hardware stack levels used:    1
 15986 ;; Hardware stack levels required when called:    8
 15987 ;; This function calls:
 15988 ;;		_sendERRORMessage
 15989 ;;		_sendOKMessage
 15990 ;; This function is called by:
 15991 ;;		_main
 15992 ;; This function uses a non-reentrant model
 15993 ;;
 15994                           
 15995                           
 15996                           ;psect for function _cmd_aa
 15997  16D2                     _cmd_aa:
 15998  16D2                     l6856:	
 15999                           ;incstack = 0
 16000                           ; Regs used in _cmd_aa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16001                           
 16002                           
 16003                           ;main.c: 952: if(buffer[2] == 0 && num == 4){
 16004  16D2  0020               	movlb	0	; select bank0
 16005  16D3  0829               	movf	cmd_aa@buffer,w
 16006  16D4  3E02               	addlw	2
 16007  16D5  0086               	movwf	6
 16008  16D6  0187               	clrf	7
 16009  16D7  0801               	movf	1,w
 16010  16D8  1D03               	btfss	3,2
 16011  16D9  2EDB               	goto	u7991
 16012  16DA  2EDC               	goto	u7990
 16013  16DB                     u7991:
 16014  16DB  2EEC               	goto	l6864
 16015  16DC                     u7990:
 16016  16DC                     l6858:
 16017  16DC  3004               	movlw	4
 16018  16DD  0627               	xorwf	cmd_aa@num,w
 16019  16DE  0428               	iorwf	cmd_aa@num+1,w
 16020  16DF  1D03               	btfss	3,2
 16021  16E0  2EE2               	goto	u8001
 16022  16E1  2EE3               	goto	u8000
 16023  16E2                     u8001:
 16024  16E2  2EEC               	goto	l6864
 16025  16E3                     u8000:
 16026  16E3                     l6860:
 16027                           
 16028                           ;main.c: 953: ALAF = 'a';
 16029  16E3  3061               	movlw	97
 16030  16E4  00AA               	movwf	??_cmd_aa
 16031  16E5  082A               	movf	??_cmd_aa,w
 16032  16E6  00E7               	movwf	_ALAF
 16033  16E7                     l6862:
 16034                           
 16035                           ;main.c: 954: sendOKMessage((uint8_t)0XC9);
 16036  16E7  30C9               	movlw	201
 16037  16E8  3193  236C  3196   	fcall	_sendOKMessage
 16038                           
 16039                           ;main.c: 955: } else if(buffer[2] == 1 && num == 4){
 16040  16EB  2F09               	goto	l1487
 16041  16EC                     l6864:
 16042  16EC  0829               	movf	cmd_aa@buffer,w
 16043  16ED  3E02               	addlw	2
 16044  16EE  0086               	movwf	6
 16045  16EF  0187               	clrf	7
 16046  16F0  0301               	decf	1,w
 16047  16F1  1D03               	btfss	3,2
 16048  16F2  2EF4               	goto	u8011
 16049  16F3  2EF5               	goto	u8010
 16050  16F4                     u8011:
 16051  16F4  2F05               	goto	l6872
 16052  16F5                     u8010:
 16053  16F5                     l6866:
 16054  16F5  3004               	movlw	4
 16055  16F6  0627               	xorwf	cmd_aa@num,w
 16056  16F7  0428               	iorwf	cmd_aa@num+1,w
 16057  16F8  1D03               	btfss	3,2
 16058  16F9  2EFB               	goto	u8021
 16059  16FA  2EFC               	goto	u8020
 16060  16FB                     u8021:
 16061  16FB  2F05               	goto	l6872
 16062  16FC                     u8020:
 16063  16FC                     l6868:
 16064                           
 16065                           ;main.c: 956: ALAF = 'A';
 16066  16FC  3041               	movlw	65
 16067  16FD  00AA               	movwf	??_cmd_aa
 16068  16FE  082A               	movf	??_cmd_aa,w
 16069  16FF  00E7               	movwf	_ALAF
 16070  1700                     l6870:
 16071                           
 16072                           ;main.c: 957: sendOKMessage((uint8_t)0XC9);
 16073  1700  30C9               	movlw	201
 16074  1701  3193  236C  3196   	fcall	_sendOKMessage
 16075                           
 16076                           ;main.c: 958: } else {
 16077  1704  2F09               	goto	l1487
 16078  1705                     l6872:
 16079                           
 16080                           ;main.c: 959: sendERRORMessage((uint8_t)0XC9);
 16081  1705  30C9               	movlw	201
 16082  1706  3193  23DC  3196   	fcall	_sendERRORMessage
 16083  1709                     l1487:
 16084  1709  0008               	return
 16085  170A                     __end_of_cmd_aa:
 16086                           
 16087                           	psect	text36
 16088  1668                     __ptext36:	
 16089 ;; *************** function _cmd_dtl *****************
 16090 ;; Defined at:
 16091 ;;		line 939 in file "main.c"
 16092 ;; Parameters:    Size  Location     Type
 16093 ;;  num             2    7[BANK0 ] int 
 16094 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16095 ;;		 -> main@buff(20), 
 16096 ;; Auto vars:     Size  Location     Type
 16097 ;;  lumAux          1   11[BANK0 ] unsigned char 
 16098 ;;  tempAux         1   10[BANK0 ] unsigned char 
 16099 ;; Return value:  Size  Location     Type
 16100 ;;                  1    wreg      void 
 16101 ;; Registers used:
 16102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16103 ;; Tracked objects:
 16104 ;;		On entry : 0/0
 16105 ;;		On exit  : 0/0
 16106 ;;		Unchanged: 0/0
 16107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16108 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16112 ;;Total ram usage:        5 bytes
 16113 ;; Hardware stack levels used:    1
 16114 ;; Hardware stack levels required when called:    8
 16115 ;; This function calls:
 16116 ;;		_sendERRORMessage
 16117 ;;		_sendOKMessage
 16118 ;; This function is called by:
 16119 ;;		_main
 16120 ;; This function uses a non-reentrant model
 16121 ;;
 16122                           
 16123                           
 16124                           ;psect for function _cmd_dtl
 16125  1668                     _cmd_dtl:
 16126  1668                     l6842:	
 16127                           ;incstack = 0
 16128                           ; Regs used in _cmd_dtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16129                           
 16130                           
 16131                           ;main.c: 940: uint8_t tempAux = buffer[2];
 16132  1668  0020               	movlb	0	; select bank0
 16133  1669  0829               	movf	cmd_dtl@buffer,w
 16134  166A  0086               	movwf	6
 16135  166B  0187               	clrf	7
 16136  166C  3F42               	moviw [2]fsr1
 16137  166D  00AA               	movwf	cmd_dtl@tempAux
 16138                           
 16139                           ;main.c: 941: uint8_t lumAux = buffer[3];
 16140  166E  0829               	movf	cmd_dtl@buffer,w
 16141  166F  0086               	movwf	6
 16142  1670  0187               	clrf	7
 16143  1671  3F43               	moviw [3]fsr1
 16144  1672  00AB               	movwf	cmd_dtl@lumAux
 16145  1673                     l6844:
 16146                           
 16147                           ;main.c: 942: if((tempAux >= 0 && tempAux < 50) && (lumAux >= 0 && lumAux < 8) && num ==
      +                           5){
 16148  1673  3032               	movlw	50
 16149  1674  022A               	subwf	cmd_dtl@tempAux,w
 16150  1675  1803               	skipnc
 16151  1676  2E78               	goto	u7961
 16152  1677  2E79               	goto	u7960
 16153  1678                     u7961:
 16154  1678  2E98               	goto	l6854
 16155  1679                     u7960:
 16156  1679                     l6846:
 16157  1679  3008               	movlw	8
 16158  167A  022B               	subwf	cmd_dtl@lumAux,w
 16159  167B  1803               	skipnc
 16160  167C  2E7E               	goto	u7971
 16161  167D  2E7F               	goto	u7970
 16162  167E                     u7971:
 16163  167E  2E98               	goto	l6854
 16164  167F                     u7970:
 16165  167F                     l6848:
 16166  167F  3005               	movlw	5
 16167  1680  0627               	xorwf	cmd_dtl@num,w
 16168  1681  0428               	iorwf	cmd_dtl@num+1,w
 16169  1682  1D03               	btfss	3,2
 16170  1683  2E85               	goto	u7981
 16171  1684  2E86               	goto	u7980
 16172  1685                     u7981:
 16173  1685  2E98               	goto	l6854
 16174  1686                     u7980:
 16175  1686                     l6850:
 16176                           
 16177                           ;main.c: 943: tempAlarm.alarmTemp = buffer[2];
 16178  1686  0829               	movf	cmd_dtl@buffer,w
 16179  1687  0086               	movwf	6
 16180  1688  0187               	clrf	7
 16181  1689  3F42               	moviw [2]fsr1
 16182  168A  0021               	movlb	1	; select bank1
 16183  168B  00C9               	movwf	_tempAlarm^(0+128)
 16184                           
 16185                           ;main.c: 944: lumAlarm.alarmLum = buffer[3];
 16186  168C  0020               	movlb	0	; select bank0
 16187  168D  0829               	movf	cmd_dtl@buffer,w
 16188  168E  0086               	movwf	6
 16189  168F  0187               	clrf	7
 16190  1690  3F43               	moviw [3]fsr1
 16191  1691  0021               	movlb	1	; select bank1
 16192  1692  00C6               	movwf	_lumAlarm^(0+128)
 16193  1693                     l6852:
 16194                           
 16195                           ;main.c: 945: sendOKMessage((uint8_t)0XC8);
 16196  1693  30C8               	movlw	200
 16197  1694  3193  236C  3196   	fcall	_sendOKMessage
 16198                           
 16199                           ;main.c: 946: } else {
 16200  1697  2E9C               	goto	l1480
 16201  1698                     l6854:
 16202                           
 16203                           ;main.c: 947: sendERRORMessage((uint8_t)0XC8);
 16204  1698  30C8               	movlw	200
 16205  1699  3193  23DC  3196   	fcall	_sendERRORMessage
 16206  169C                     l1480:
 16207  169C  0008               	return
 16208  169D                     __end_of_cmd_dtl:
 16209                           
 16210                           	psect	text37
 16211  17C1                     __ptext37:	
 16212 ;; *************** function _cmd_dac *****************
 16213 ;; Defined at:
 16214 ;;		line 925 in file "main.c"
 16215 ;; Parameters:    Size  Location     Type
 16216 ;;  num             2    7[BANK0 ] int 
 16217 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16218 ;;		 -> main@buff(20), 
 16219 ;; Auto vars:     Size  Location     Type
 16220 ;;  s               1   13[BANK0 ] unsigned char 
 16221 ;;  m               1   12[BANK0 ] unsigned char 
 16222 ;;  h               1   11[BANK0 ] unsigned char 
 16223 ;; Return value:  Size  Location     Type
 16224 ;;                  1    wreg      void 
 16225 ;; Registers used:
 16226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16227 ;; Tracked objects:
 16228 ;;		On entry : 0/0
 16229 ;;		On exit  : 0/0
 16230 ;;		Unchanged: 0/0
 16231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16232 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16235 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16236 ;;Total ram usage:        7 bytes
 16237 ;; Hardware stack levels used:    1
 16238 ;; Hardware stack levels required when called:    8
 16239 ;; This function calls:
 16240 ;;		_sendERRORMessage
 16241 ;;		_sendOKMessage
 16242 ;; This function is called by:
 16243 ;;		_main
 16244 ;; This function uses a non-reentrant model
 16245 ;;
 16246                           
 16247                           
 16248                           ;psect for function _cmd_dac
 16249  17C1                     _cmd_dac:
 16250  17C1                     l6826:	
 16251                           ;incstack = 0
 16252                           ; Regs used in _cmd_dac: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16253                           
 16254                           
 16255                           ;main.c: 926: uint8_t h = buffer[2];
 16256  17C1  0020               	movlb	0	; select bank0
 16257  17C2  0829               	movf	cmd_dac@buffer,w
 16258  17C3  0086               	movwf	6
 16259  17C4  0187               	clrf	7
 16260  17C5  3F42               	moviw [2]fsr1
 16261  17C6  00AB               	movwf	cmd_dac@h
 16262                           
 16263                           ;main.c: 927: uint8_t m = buffer[3];
 16264  17C7  0829               	movf	cmd_dac@buffer,w
 16265  17C8  0086               	movwf	6
 16266  17C9  0187               	clrf	7
 16267  17CA  3F43               	moviw [3]fsr1
 16268  17CB  00AC               	movwf	cmd_dac@m
 16269                           
 16270                           ;main.c: 928: uint8_t s = buffer[4];
 16271  17CC  0829               	movf	cmd_dac@buffer,w
 16272  17CD  0086               	movwf	6
 16273  17CE  0187               	clrf	7
 16274  17CF  3F44               	moviw [4]fsr1
 16275  17D0  00AD               	movwf	cmd_dac@s
 16276  17D1                     l6828:
 16277                           
 16278                           ;main.c: 929: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 16279  17D1  3018               	movlw	24
 16280  17D2  022B               	subwf	cmd_dac@h,w
 16281  17D3  1803               	skipnc
 16282  17D4  2FD6               	goto	u7921
 16283  17D5  2FD7               	goto	u7920
 16284  17D6                     u7921:
 16285  17D6  2FFB               	goto	l6840
 16286  17D7                     u7920:
 16287  17D7                     l6830:
 16288  17D7  303C               	movlw	60
 16289  17D8  022C               	subwf	cmd_dac@m,w
 16290  17D9  1803               	skipnc
 16291  17DA  2FDC               	goto	u7931
 16292  17DB  2FDD               	goto	u7930
 16293  17DC                     u7931:
 16294  17DC  2FFB               	goto	l6840
 16295  17DD                     u7930:
 16296  17DD                     l6832:
 16297  17DD  303C               	movlw	60
 16298  17DE  022D               	subwf	cmd_dac@s,w
 16299  17DF  1803               	skipnc
 16300  17E0  2FE2               	goto	u7941
 16301  17E1  2FE3               	goto	u7940
 16302  17E2                     u7941:
 16303  17E2  2FFB               	goto	l6840
 16304  17E3                     u7940:
 16305  17E3                     l6834:
 16306  17E3  3006               	movlw	6
 16307  17E4  0627               	xorwf	cmd_dac@num,w
 16308  17E5  0428               	iorwf	cmd_dac@num+1,w
 16309  17E6  1D03               	btfss	3,2
 16310  17E7  2FE9               	goto	u7951
 16311  17E8  2FEA               	goto	u7950
 16312  17E9                     u7951:
 16313  17E9  2FFB               	goto	l6840
 16314  17EA                     u7950:
 16315  17EA                     l6836:
 16316                           
 16317                           ;main.c: 930: clkAlarm.alarmVal.h = h;
 16318  17EA  082B               	movf	cmd_dac@h,w
 16319  17EB  00AA               	movwf	??_cmd_dac
 16320  17EC  082A               	movf	??_cmd_dac,w
 16321  17ED  00D5               	movwf	_clkAlarm
 16322                           
 16323                           ;main.c: 931: clkAlarm.alarmVal.m = m;
 16324  17EE  082C               	movf	cmd_dac@m,w
 16325  17EF  00AA               	movwf	??_cmd_dac
 16326  17F0  082A               	movf	??_cmd_dac,w
 16327  17F1  00D6               	movwf	_clkAlarm+1
 16328                           
 16329                           ;main.c: 932: clkAlarm.alarmVal.s = s;
 16330  17F2  082D               	movf	cmd_dac@s,w
 16331  17F3  00AA               	movwf	??_cmd_dac
 16332  17F4  082A               	movf	??_cmd_dac,w
 16333  17F5  00D7               	movwf	_clkAlarm+2
 16334  17F6                     l6838:
 16335                           
 16336                           ;main.c: 933: sendOKMessage((uint8_t)0XC7);
 16337  17F6  30C7               	movlw	199
 16338  17F7  3193  236C  3197   	fcall	_sendOKMessage
 16339                           
 16340                           ;main.c: 934: } else {
 16341  17FA  2FFF               	goto	l1475
 16342  17FB                     l6840:
 16343                           
 16344                           ;main.c: 935: sendERRORMessage((uint8_t)0XC7);
 16345  17FB  30C7               	movlw	199
 16346  17FC  3193  23DC  3197   	fcall	_sendERRORMessage
 16347  17FF                     l1475:
 16348  17FF  0008               	return
 16349  1800                     __end_of_cmd_dac:
 16350                           
 16351                           	psect	text38
 16352  170A                     __ptext38:	
 16353 ;; *************** function _cmd_ra *****************
 16354 ;; Defined at:
 16355 ;;		line 910 in file "main.c"
 16356 ;; Parameters:    Size  Location     Type
 16357 ;;  num             2    7[BANK0 ] int 
 16358 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16359 ;;		 -> main@buff(20), 
 16360 ;; Auto vars:     Size  Location     Type
 16361 ;;  buff            9   11[BANK0 ] unsigned char [9]
 16362 ;; Return value:  Size  Location     Type
 16363 ;;                  1    wreg      void 
 16364 ;; Registers used:
 16365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16366 ;; Tracked objects:
 16367 ;;		On entry : 0/0
 16368 ;;		On exit  : 0/0
 16369 ;;		Unchanged: 0/0
 16370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16371 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16372 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16374 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16375 ;;Total ram usage:       13 bytes
 16376 ;; Hardware stack levels used:    1
 16377 ;; Hardware stack levels required when called:    7
 16378 ;; This function calls:
 16379 ;;		_sendMessage
 16380 ;; This function is called by:
 16381 ;;		_main
 16382 ;; This function uses a non-reentrant model
 16383 ;;
 16384                           
 16385                           
 16386                           ;psect for function _cmd_ra
 16387  170A                     _cmd_ra:
 16388  170A                     l6818:	
 16389                           ;incstack = 0
 16390                           ; Regs used in _cmd_ra: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16391                           
 16392                           
 16393                           ;main.c: 911: uint8_t buff[9];;main.c: 912: buff[0] = (uint8_t)0xFD;
 16394  170A  30FD               	movlw	253
 16395  170B  0020               	movlb	0	; select bank0
 16396  170C  00AA               	movwf	??_cmd_ra
 16397  170D  082A               	movf	??_cmd_ra,w
 16398  170E  00AB               	movwf	cmd_ra@buff
 16399                           
 16400                           ;main.c: 913: buff[1] = (uint8_t)0XC6;
 16401  170F  30C6               	movlw	198
 16402  1710  00AA               	movwf	??_cmd_ra
 16403  1711  082A               	movf	??_cmd_ra,w
 16404  1712  00AC               	movwf	cmd_ra@buff+1
 16405                           
 16406                           ;main.c: 914: buff[2] = clkAlarm.alarmVal.h;
 16407  1713  0855               	movf	_clkAlarm,w
 16408  1714  00AA               	movwf	??_cmd_ra
 16409  1715  082A               	movf	??_cmd_ra,w
 16410  1716  00AD               	movwf	cmd_ra@buff+2
 16411                           
 16412                           ;main.c: 915: buff[3] = clkAlarm.alarmVal.m;
 16413  1717  0856               	movf	_clkAlarm+1,w
 16414  1718  00AA               	movwf	??_cmd_ra
 16415  1719  082A               	movf	??_cmd_ra,w
 16416  171A  00AE               	movwf	cmd_ra@buff+3
 16417                           
 16418                           ;main.c: 916: buff[4] = clkAlarm.alarmVal.s;
 16419  171B  0857               	movf	_clkAlarm+2,w
 16420  171C  00AA               	movwf	??_cmd_ra
 16421  171D  082A               	movf	??_cmd_ra,w
 16422  171E  00AF               	movwf	cmd_ra@buff+4
 16423                           
 16424                           ;main.c: 917: buff[5] = tempAlarm.alarmTemp;
 16425  171F  0021               	movlb	1	; select bank1
 16426  1720  0849               	movf	_tempAlarm^(0+128),w
 16427  1721  0020               	movlb	0	; select bank0
 16428  1722  00AA               	movwf	??_cmd_ra
 16429  1723  082A               	movf	??_cmd_ra,w
 16430  1724  00B0               	movwf	cmd_ra@buff+5
 16431                           
 16432                           ;main.c: 918: buff[6] = lumAlarm.alarmLum;
 16433  1725  0021               	movlb	1	; select bank1
 16434  1726  0846               	movf	_lumAlarm^(0+128),w
 16435  1727  0020               	movlb	0	; select bank0
 16436  1728  00AA               	movwf	??_cmd_ra
 16437  1729  082A               	movf	??_cmd_ra,w
 16438  172A  00B1               	movwf	cmd_ra@buff+6
 16439  172B                     l6820:
 16440                           
 16441                           ;main.c: 919: buff[7] = ALAF == 'A' ? 1 : 0;
 16442  172B  3041               	movlw	65
 16443  172C  0667               	xorwf	_ALAF,w
 16444  172D  1903               	btfsc	3,2
 16445  172E  2F30               	goto	u7901
 16446  172F  2F32               	goto	u7900
 16447  1730                     u7901:
 16448  1730  3001               	movlw	1
 16449  1731  2F33               	goto	u7910
 16450  1732                     u7900:
 16451  1732  3000               	movlw	0
 16452  1733                     u7910:
 16453  1733  00AA               	movwf	??_cmd_ra
 16454  1734  082A               	movf	??_cmd_ra,w
 16455  1735  00B2               	movwf	cmd_ra@buff+7
 16456  1736                     l6822:
 16457                           
 16458                           ;main.c: 920: buff[8] = (uint8_t)0xFE;
 16459  1736  30FE               	movlw	254
 16460  1737  00AA               	movwf	??_cmd_ra
 16461  1738  082A               	movf	??_cmd_ra,w
 16462  1739  00B3               	movwf	cmd_ra@buff+8
 16463  173A                     l6824:
 16464                           
 16465                           ;main.c: 922: sendMessage(9,buff);
 16466  173A  3009               	movlw	9
 16467  173B  00F5               	movwf	sendMessage@num
 16468  173C  3000               	movlw	0
 16469  173D  00F6               	movwf	sendMessage@num+1
 16470  173E  302B               	movlw	(low (cmd_ra@buff| 0))& (0+255)
 16471  173F  00AA               	movwf	??_cmd_ra
 16472  1740  082A               	movf	??_cmd_ra,w
 16473  1741  00F7               	movwf	sendMessage@buffer
 16474  1742  3194  249A  3197   	fcall	_sendMessage
 16475  1745                     l1470:
 16476  1745  0008               	return
 16477  1746                     __end_of_cmd_ra:
 16478                           
 16479                           	psect	text39
 16480  1338                     __ptext39:	
 16481 ;; *************** function _cmd_mta *****************
 16482 ;; Defined at:
 16483 ;;		line 901 in file "main.c"
 16484 ;; Parameters:    Size  Location     Type
 16485 ;;  num             2    7[BANK0 ] int 
 16486 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16487 ;;		 -> main@buff(20), 
 16488 ;; Auto vars:     Size  Location     Type
 16489 ;;		None
 16490 ;; Return value:  Size  Location     Type
 16491 ;;                  1    wreg      void 
 16492 ;; Registers used:
 16493 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16494 ;; Tracked objects:
 16495 ;;		On entry : 0/0
 16496 ;;		On exit  : 0/0
 16497 ;;		Unchanged: 0/0
 16498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16499 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16503 ;;Total ram usage:        3 bytes
 16504 ;; Hardware stack levels used:    1
 16505 ;; Hardware stack levels required when called:    8
 16506 ;; This function calls:
 16507 ;;		_sendERRORMessage
 16508 ;;		_sendOKMessage
 16509 ;; This function is called by:
 16510 ;;		_main
 16511 ;; This function uses a non-reentrant model
 16512 ;;
 16513                           
 16514                           
 16515                           ;psect for function _cmd_mta
 16516  1338                     _cmd_mta:
 16517  1338                     l6810:	
 16518                           ;incstack = 0
 16519                           ; Regs used in _cmd_mta: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16520                           
 16521                           
 16522                           ;main.c: 902: if(buffer[2] >= 0x00 && buffer[2] < 0x3c){
 16523  1338  0020               	movlb	0	; select bank0
 16524  1339  0829               	movf	cmd_mta@buffer,w
 16525  133A  3E02               	addlw	2
 16526  133B  0086               	movwf	6
 16527  133C  0187               	clrf	7
 16528  133D  303C               	movlw	60
 16529  133E  0201               	subwf	1,w
 16530  133F  1803               	skipnc
 16531  1340  2B42               	goto	u7891
 16532  1341  2B43               	goto	u7890
 16533  1342                     u7891:
 16534  1342  2B4D               	goto	l6816
 16535  1343                     u7890:
 16536  1343                     l6812:
 16537                           
 16538                           ;main.c: 903: TALA = buffer[2];
 16539  1343  0829               	movf	cmd_mta@buffer,w
 16540  1344  0086               	movwf	6
 16541  1345  0187               	clrf	7
 16542  1346  3F42               	moviw [2]fsr1
 16543  1347  00ED               	movwf	_TALA
 16544  1348                     l6814:
 16545                           
 16546                           ;main.c: 904: sendOKMessage((uint8_t)0XC5);
 16547  1348  30C5               	movlw	197
 16548  1349  3193  236C  3193   	fcall	_sendOKMessage
 16549                           
 16550                           ;main.c: 905: } else {
 16551  134C  2B51               	goto	l1467
 16552  134D                     l6816:
 16553                           
 16554                           ;main.c: 906: sendERRORMessage((uint8_t)0XC5);
 16555  134D  30C5               	movlw	197
 16556  134E  3193  23DC  3193   	fcall	_sendERRORMessage
 16557  1351                     l1467:
 16558  1351  0008               	return
 16559  1352                     __end_of_cmd_mta:
 16560                           
 16561                           	psect	text40
 16562  1321                     __ptext40:	
 16563 ;; *************** function _cmd_mmp *****************
 16564 ;; Defined at:
 16565 ;;		line 892 in file "main.c"
 16566 ;; Parameters:    Size  Location     Type
 16567 ;;  num             2    7[BANK0 ] int 
 16568 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16569 ;;		 -> main@buff(20), 
 16570 ;; Auto vars:     Size  Location     Type
 16571 ;;		None
 16572 ;; Return value:  Size  Location     Type
 16573 ;;                  1    wreg      void 
 16574 ;; Registers used:
 16575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16576 ;; Tracked objects:
 16577 ;;		On entry : 0/0
 16578 ;;		On exit  : 0/0
 16579 ;;		Unchanged: 0/0
 16580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16581 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;Total ram usage:        3 bytes
 16586 ;; Hardware stack levels used:    1
 16587 ;; Hardware stack levels required when called:    8
 16588 ;; This function calls:
 16589 ;;		_sendERRORMessage
 16590 ;;		_sendOKMessage
 16591 ;; This function is called by:
 16592 ;;		_main
 16593 ;; This function uses a non-reentrant model
 16594 ;;
 16595                           
 16596                           
 16597                           ;psect for function _cmd_mmp
 16598  1321                     _cmd_mmp:
 16599  1321                     l6802:	
 16600                           ;incstack = 0
 16601                           ; Regs used in _cmd_mmp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16602                           
 16603                           
 16604                           ;main.c: 893: if(num == 4){
 16605  1321  3004               	movlw	4
 16606  1322  0020               	movlb	0	; select bank0
 16607  1323  0627               	xorwf	cmd_mmp@num,w
 16608  1324  0428               	iorwf	cmd_mmp@num+1,w
 16609  1325  1D03               	btfss	3,2
 16610  1326  2B28               	goto	u7881
 16611  1327  2B29               	goto	u7880
 16612  1328                     u7881:
 16613  1328  2B33               	goto	l6808
 16614  1329                     u7880:
 16615  1329                     l6804:
 16616                           
 16617                           ;main.c: 894: PMON = buffer[2];
 16618  1329  0829               	movf	cmd_mmp@buffer,w
 16619  132A  0086               	movwf	6
 16620  132B  0187               	clrf	7
 16621  132C  3F42               	moviw [2]fsr1
 16622  132D  00EE               	movwf	_PMON
 16623  132E                     l6806:
 16624                           
 16625                           ;main.c: 895: sendOKMessage((uint8_t)0XC4);
 16626  132E  30C4               	movlw	196
 16627  132F  3193  236C  3193   	fcall	_sendOKMessage
 16628                           
 16629                           ;main.c: 896: } else{
 16630  1332  2B37               	goto	l1462
 16631  1333                     l6808:
 16632                           
 16633                           ;main.c: 897: sendERRORMessage((uint8_t)0XC4);
 16634  1333  30C4               	movlw	196
 16635  1334  3193  23DC  3193   	fcall	_sendERRORMessage
 16636  1337                     l1462:
 16637  1337  0008               	return
 16638  1338                     __end_of_cmd_mmp:
 16639                           
 16640                           	psect	text41
 16641  1479                     __ptext41:	
 16642 ;; *************** function _cmd_rp *****************
 16643 ;; Defined at:
 16644 ;;		line 881 in file "main.c"
 16645 ;; Parameters:    Size  Location     Type
 16646 ;;  num             2    7[BANK0 ] int 
 16647 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16648 ;;		 -> main@buff(20), 
 16649 ;; Auto vars:     Size  Location     Type
 16650 ;;  buff            5   11[BANK0 ] unsigned char [5]
 16651 ;; Return value:  Size  Location     Type
 16652 ;;                  1    wreg      void 
 16653 ;; Registers used:
 16654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16655 ;; Tracked objects:
 16656 ;;		On entry : 0/0
 16657 ;;		On exit  : 0/0
 16658 ;;		Unchanged: 0/0
 16659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16660 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16661 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16663 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16664 ;;Total ram usage:        9 bytes
 16665 ;; Hardware stack levels used:    1
 16666 ;; Hardware stack levels required when called:    7
 16667 ;; This function calls:
 16668 ;;		_sendMessage
 16669 ;; This function is called by:
 16670 ;;		_main
 16671 ;; This function uses a non-reentrant model
 16672 ;;
 16673                           
 16674                           
 16675                           ;psect for function _cmd_rp
 16676  1479                     _cmd_rp:
 16677  1479                     l6798:	
 16678                           ;incstack = 0
 16679                           ; Regs used in _cmd_rp: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16680                           
 16681                           
 16682                           ;main.c: 882: uint8_t buff[5];;main.c: 883: buff[0] = (uint8_t)0xFD;
 16683  1479  30FD               	movlw	253
 16684  147A  0020               	movlb	0	; select bank0
 16685  147B  00AA               	movwf	??_cmd_rp
 16686  147C  082A               	movf	??_cmd_rp,w
 16687  147D  00AB               	movwf	cmd_rp@buff
 16688                           
 16689                           ;main.c: 884: buff[1] = (uint8_t)0XC3;
 16690  147E  30C3               	movlw	195
 16691  147F  00AA               	movwf	??_cmd_rp
 16692  1480  082A               	movf	??_cmd_rp,w
 16693  1481  00AC               	movwf	cmd_rp@buff+1
 16694                           
 16695                           ;main.c: 885: buff[2] = PMON;
 16696  1482  086E               	movf	_PMON,w
 16697  1483  00AA               	movwf	??_cmd_rp
 16698  1484  082A               	movf	??_cmd_rp,w
 16699  1485  00AD               	movwf	cmd_rp@buff+2
 16700                           
 16701                           ;main.c: 886: buff[3] = TALA;
 16702  1486  086D               	movf	_TALA,w
 16703  1487  00AA               	movwf	??_cmd_rp
 16704  1488  082A               	movf	??_cmd_rp,w
 16705  1489  00AE               	movwf	cmd_rp@buff+3
 16706                           
 16707                           ;main.c: 887: buff[4] = (uint8_t)0xFE;
 16708  148A  30FE               	movlw	254
 16709  148B  00AA               	movwf	??_cmd_rp
 16710  148C  082A               	movf	??_cmd_rp,w
 16711  148D  00AF               	movwf	cmd_rp@buff+4
 16712  148E                     l6800:
 16713                           
 16714                           ;main.c: 889: sendMessage(5,buff);
 16715  148E  3005               	movlw	5
 16716  148F  00F5               	movwf	sendMessage@num
 16717  1490  3000               	movlw	0
 16718  1491  00F6               	movwf	sendMessage@num+1
 16719  1492  302B               	movlw	(low (cmd_rp@buff| 0))& (0+255)
 16720  1493  00AA               	movwf	??_cmd_rp
 16721  1494  082A               	movf	??_cmd_rp,w
 16722  1495  00F7               	movwf	sendMessage@buffer
 16723  1496  3194  249A  3194   	fcall	_sendMessage
 16724  1499                     l1457:
 16725  1499  0008               	return
 16726  149A                     __end_of_cmd_rp:
 16727                           
 16728                           	psect	text42
 16729  1458                     __ptext42:	
 16730 ;; *************** function _cmd_rtl *****************
 16731 ;; Defined at:
 16732 ;;		line 870 in file "main.c"
 16733 ;; Parameters:    Size  Location     Type
 16734 ;;  num             2    7[BANK0 ] int 
 16735 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16736 ;;		 -> main@buff(20), 
 16737 ;; Auto vars:     Size  Location     Type
 16738 ;;  buff            5   11[BANK0 ] unsigned char [5]
 16739 ;; Return value:  Size  Location     Type
 16740 ;;                  1    wreg      void 
 16741 ;; Registers used:
 16742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16743 ;; Tracked objects:
 16744 ;;		On entry : 0/0
 16745 ;;		On exit  : 0/0
 16746 ;;		Unchanged: 0/0
 16747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16748 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16749 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16751 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16752 ;;Total ram usage:        9 bytes
 16753 ;; Hardware stack levels used:    1
 16754 ;; Hardware stack levels required when called:    7
 16755 ;; This function calls:
 16756 ;;		_sendMessage
 16757 ;; This function is called by:
 16758 ;;		_main
 16759 ;; This function uses a non-reentrant model
 16760 ;;
 16761                           
 16762                           
 16763                           ;psect for function _cmd_rtl
 16764  1458                     _cmd_rtl:
 16765  1458                     l6794:	
 16766                           ;incstack = 0
 16767                           ; Regs used in _cmd_rtl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16768                           
 16769                           
 16770                           ;main.c: 871: uint8_t buff[5];;main.c: 872: buff[0] = (uint8_t)0xFD;
 16771  1458  30FD               	movlw	253
 16772  1459  0020               	movlb	0	; select bank0
 16773  145A  00AA               	movwf	??_cmd_rtl
 16774  145B  082A               	movf	??_cmd_rtl,w
 16775  145C  00AB               	movwf	cmd_rtl@buff
 16776                           
 16777                           ;main.c: 873: buff[1] = (uint8_t)0XC2;
 16778  145D  30C2               	movlw	194
 16779  145E  00AA               	movwf	??_cmd_rtl
 16780  145F  082A               	movf	??_cmd_rtl,w
 16781  1460  00AC               	movwf	cmd_rtl@buff+1
 16782                           
 16783                           ;main.c: 874: buff[2] = temp;
 16784  1461  0866               	movf	_temp,w
 16785  1462  00AA               	movwf	??_cmd_rtl
 16786  1463  082A               	movf	??_cmd_rtl,w
 16787  1464  00AD               	movwf	cmd_rtl@buff+2
 16788                           
 16789                           ;main.c: 875: buff[3] = lumLevel;
 16790  1465  0865               	movf	_lumLevel,w
 16791  1466  00AA               	movwf	??_cmd_rtl
 16792  1467  082A               	movf	??_cmd_rtl,w
 16793  1468  00AE               	movwf	cmd_rtl@buff+3
 16794                           
 16795                           ;main.c: 876: buff[4] = (uint8_t)0xFE;
 16796  1469  30FE               	movlw	254
 16797  146A  00AA               	movwf	??_cmd_rtl
 16798  146B  082A               	movf	??_cmd_rtl,w
 16799  146C  00AF               	movwf	cmd_rtl@buff+4
 16800  146D                     l6796:
 16801                           
 16802                           ;main.c: 878: sendMessage(5,buff);
 16803  146D  3005               	movlw	5
 16804  146E  00F5               	movwf	sendMessage@num
 16805  146F  3000               	movlw	0
 16806  1470  00F6               	movwf	sendMessage@num+1
 16807  1471  302B               	movlw	(low (cmd_rtl@buff| 0))& (0+255)
 16808  1472  00AA               	movwf	??_cmd_rtl
 16809  1473  082A               	movf	??_cmd_rtl,w
 16810  1474  00F7               	movwf	sendMessage@buffer
 16811  1475  3194  249A  3194   	fcall	_sendMessage
 16812  1478                     l1454:
 16813  1478  0008               	return
 16814  1479                     __end_of_cmd_rtl:
 16815                           
 16816                           	psect	text43
 16817  1782                     __ptext43:	
 16818 ;; *************** function _cmd_sc *****************
 16819 ;; Defined at:
 16820 ;;		line 855 in file "main.c"
 16821 ;; Parameters:    Size  Location     Type
 16822 ;;  num             2    7[BANK0 ] int 
 16823 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16824 ;;		 -> main@buff(20), 
 16825 ;; Auto vars:     Size  Location     Type
 16826 ;;  s               1   13[BANK0 ] unsigned char 
 16827 ;;  m               1   12[BANK0 ] unsigned char 
 16828 ;;  h               1   11[BANK0 ] unsigned char 
 16829 ;; Return value:  Size  Location     Type
 16830 ;;                  1    wreg      void 
 16831 ;; Registers used:
 16832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16833 ;; Tracked objects:
 16834 ;;		On entry : 0/0
 16835 ;;		On exit  : 0/0
 16836 ;;		Unchanged: 0/0
 16837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16838 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16839 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16841 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16842 ;;Total ram usage:        7 bytes
 16843 ;; Hardware stack levels used:    1
 16844 ;; Hardware stack levels required when called:    8
 16845 ;; This function calls:
 16846 ;;		_sendERRORMessage
 16847 ;;		_sendOKMessage
 16848 ;; This function is called by:
 16849 ;;		_main
 16850 ;; This function uses a non-reentrant model
 16851 ;;
 16852                           
 16853                           
 16854                           ;psect for function _cmd_sc
 16855  1782                     _cmd_sc:
 16856  1782                     l6778:	
 16857                           ;incstack = 0
 16858                           ; Regs used in _cmd_sc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16859                           
 16860                           
 16861                           ;main.c: 856: uint8_t h = buffer[2];
 16862  1782  0020               	movlb	0	; select bank0
 16863  1783  0829               	movf	cmd_sc@buffer,w
 16864  1784  0086               	movwf	6
 16865  1785  0187               	clrf	7
 16866  1786  3F42               	moviw [2]fsr1
 16867  1787  00AB               	movwf	cmd_sc@h
 16868                           
 16869                           ;main.c: 857: uint8_t m = buffer[3];
 16870  1788  0829               	movf	cmd_sc@buffer,w
 16871  1789  0086               	movwf	6
 16872  178A  0187               	clrf	7
 16873  178B  3F43               	moviw [3]fsr1
 16874  178C  00AC               	movwf	cmd_sc@m
 16875                           
 16876                           ;main.c: 858: uint8_t s = buffer[4];
 16877  178D  0829               	movf	cmd_sc@buffer,w
 16878  178E  0086               	movwf	6
 16879  178F  0187               	clrf	7
 16880  1790  3F44               	moviw [4]fsr1
 16881  1791  00AD               	movwf	cmd_sc@s
 16882  1792                     l6780:
 16883                           
 16884                           ;main.c: 859: if((h >= 0 && h < 24) && (m >= 0 && m < 60) && (s >= 0 && s < 60) && num =
      +                          = 6){
 16885  1792  3018               	movlw	24
 16886  1793  022B               	subwf	cmd_sc@h,w
 16887  1794  1803               	skipnc
 16888  1795  2F97               	goto	u7841
 16889  1796  2F98               	goto	u7840
 16890  1797                     u7841:
 16891  1797  2FBC               	goto	l6792
 16892  1798                     u7840:
 16893  1798                     l6782:
 16894  1798  303C               	movlw	60
 16895  1799  022C               	subwf	cmd_sc@m,w
 16896  179A  1803               	skipnc
 16897  179B  2F9D               	goto	u7851
 16898  179C  2F9E               	goto	u7850
 16899  179D                     u7851:
 16900  179D  2FBC               	goto	l6792
 16901  179E                     u7850:
 16902  179E                     l6784:
 16903  179E  303C               	movlw	60
 16904  179F  022D               	subwf	cmd_sc@s,w
 16905  17A0  1803               	skipnc
 16906  17A1  2FA3               	goto	u7861
 16907  17A2  2FA4               	goto	u7860
 16908  17A3                     u7861:
 16909  17A3  2FBC               	goto	l6792
 16910  17A4                     u7860:
 16911  17A4                     l6786:
 16912  17A4  3006               	movlw	6
 16913  17A5  0627               	xorwf	cmd_sc@num,w
 16914  17A6  0428               	iorwf	cmd_sc@num+1,w
 16915  17A7  1D03               	btfss	3,2
 16916  17A8  2FAA               	goto	u7871
 16917  17A9  2FAB               	goto	u7870
 16918  17AA                     u7871:
 16919  17AA  2FBC               	goto	l6792
 16920  17AB                     u7870:
 16921  17AB                     l6788:
 16922                           
 16923                           ;main.c: 860: t.h = h;
 16924  17AB  082B               	movf	cmd_sc@h,w
 16925  17AC  00AA               	movwf	??_cmd_sc
 16926  17AD  082A               	movf	??_cmd_sc,w
 16927  17AE  00D9               	movwf	_t
 16928                           
 16929                           ;main.c: 861: t.m = m;
 16930  17AF  082C               	movf	cmd_sc@m,w
 16931  17B0  00AA               	movwf	??_cmd_sc
 16932  17B1  082A               	movf	??_cmd_sc,w
 16933  17B2  00DA               	movwf	_t+1
 16934                           
 16935                           ;main.c: 862: t.s = s;
 16936  17B3  082D               	movf	cmd_sc@s,w
 16937  17B4  00AA               	movwf	??_cmd_sc
 16938  17B5  082A               	movf	??_cmd_sc,w
 16939  17B6  00DB               	movwf	_t+2
 16940  17B7                     l6790:
 16941                           
 16942                           ;main.c: 863: sendOKMessage((uint8_t)0XC1);
 16943  17B7  30C1               	movlw	193
 16944  17B8  3193  236C  3197   	fcall	_sendOKMessage
 16945                           
 16946                           ;main.c: 864: } else {
 16947  17BB  2FC0               	goto	l1451
 16948  17BC                     l6792:
 16949                           
 16950                           ;main.c: 865: sendERRORMessage((uint8_t)0XC1);
 16951  17BC  30C1               	movlw	193
 16952  17BD  3193  23DC  3197   	fcall	_sendERRORMessage
 16953  17C0                     l1451:
 16954  17C0  0008               	return
 16955  17C1                     __end_of_cmd_sc:
 16956                           
 16957                           	psect	text44
 16958  1528                     __ptext44:	
 16959 ;; *************** function _cmd_rc *****************
 16960 ;; Defined at:
 16961 ;;		line 843 in file "main.c"
 16962 ;; Parameters:    Size  Location     Type
 16963 ;;  num             2    7[BANK0 ] int 
 16964 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 16965 ;;		 -> main@buff(20), 
 16966 ;; Auto vars:     Size  Location     Type
 16967 ;;  buff            6   11[BANK0 ] unsigned char [6]
 16968 ;; Return value:  Size  Location     Type
 16969 ;;                  1    wreg      void 
 16970 ;; Registers used:
 16971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16972 ;; Tracked objects:
 16973 ;;		On entry : 0/0
 16974 ;;		On exit  : 0/0
 16975 ;;		Unchanged: 0/0
 16976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16977 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16978 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16980 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16981 ;;Total ram usage:       10 bytes
 16982 ;; Hardware stack levels used:    1
 16983 ;; Hardware stack levels required when called:    7
 16984 ;; This function calls:
 16985 ;;		_sendMessage
 16986 ;; This function is called by:
 16987 ;;		_main
 16988 ;; This function uses a non-reentrant model
 16989 ;;
 16990                           
 16991                           
 16992                           ;psect for function _cmd_rc
 16993  1528                     _cmd_rc:
 16994  1528                     l6774:	
 16995                           ;incstack = 0
 16996                           ; Regs used in _cmd_rc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16997                           
 16998                           
 16999                           ;main.c: 844: uint8_t buff[6];;main.c: 845: buff[0] = (uint8_t)0xFD;
 17000  1528  30FD               	movlw	253
 17001  1529  0020               	movlb	0	; select bank0
 17002  152A  00AA               	movwf	??_cmd_rc
 17003  152B  082A               	movf	??_cmd_rc,w
 17004  152C  00AB               	movwf	cmd_rc@buff
 17005                           
 17006                           ;main.c: 846: buff[1] = (uint8_t)0xC0;
 17007  152D  30C0               	movlw	192
 17008  152E  00AA               	movwf	??_cmd_rc
 17009  152F  082A               	movf	??_cmd_rc,w
 17010  1530  00AC               	movwf	cmd_rc@buff+1
 17011                           
 17012                           ;main.c: 847: buff[2] = t.h;
 17013  1531  0859               	movf	_t,w
 17014  1532  00AA               	movwf	??_cmd_rc
 17015  1533  082A               	movf	??_cmd_rc,w
 17016  1534  00AD               	movwf	cmd_rc@buff+2
 17017                           
 17018                           ;main.c: 848: buff[3] = t.m;
 17019  1535  085A               	movf	_t+1,w
 17020  1536  00AA               	movwf	??_cmd_rc
 17021  1537  082A               	movf	??_cmd_rc,w
 17022  1538  00AE               	movwf	cmd_rc@buff+3
 17023                           
 17024                           ;main.c: 849: buff[4] = t.s;
 17025  1539  085B               	movf	_t+2,w
 17026  153A  00AA               	movwf	??_cmd_rc
 17027  153B  082A               	movf	??_cmd_rc,w
 17028  153C  00AF               	movwf	cmd_rc@buff+4
 17029                           
 17030                           ;main.c: 850: buff[5] = (uint8_t)0xFE;
 17031  153D  30FE               	movlw	254
 17032  153E  00AA               	movwf	??_cmd_rc
 17033  153F  082A               	movf	??_cmd_rc,w
 17034  1540  00B0               	movwf	cmd_rc@buff+5
 17035  1541                     l6776:
 17036                           
 17037                           ;main.c: 852: sendMessage(6,buff);
 17038  1541  3006               	movlw	6
 17039  1542  00F5               	movwf	sendMessage@num
 17040  1543  3000               	movlw	0
 17041  1544  00F6               	movwf	sendMessage@num+1
 17042  1545  302B               	movlw	(low (cmd_rc@buff| 0))& (0+255)
 17043  1546  00AA               	movwf	??_cmd_rc
 17044  1547  082A               	movf	??_cmd_rc,w
 17045  1548  00F7               	movwf	sendMessage@buffer
 17046  1549  3194  249A  3195   	fcall	_sendMessage
 17047  154C                     l1446:
 17048  154C  0008               	return
 17049  154D                     __end_of_cmd_rc:
 17050                           
 17051                           	psect	text45
 17052  0B84                     __ptext45:	
 17053 ;; *************** function _cmd_tri *****************
 17054 ;; Defined at:
 17055 ;;		line 1021 in file "main.c"
 17056 ;; Parameters:    Size  Location     Type
 17057 ;;  num             2    7[BANK0 ] int 
 17058 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
 17059 ;;		 -> main@buff(20), 
 17060 ;; Auto vars:     Size  Location     Type
 17061 ;;  buffData        5   15[BANK0 ] unsigned char [5]
 17062 ;;  buffInit        4   20[BANK0 ] unsigned char [4]
 17063 ;;  i               2   26[BANK0 ] int 
 17064 ;;  startingInde    1   31[BANK0 ] unsigned char 
 17065 ;;  j               1   30[BANK0 ] unsigned char 
 17066 ;;  n               1   29[BANK0 ] unsigned char 
 17067 ;;  index           1   28[BANK0 ] unsigned char 
 17068 ;;  maxReadings     1   25[BANK0 ] unsigned char 
 17069 ;;  buffEOM         1   24[BANK0 ] unsigned char [1]
 17070 ;; Return value:  Size  Location     Type
 17071 ;;                  1    wreg      void 
 17072 ;; Registers used:
 17073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17074 ;; Tracked objects:
 17075 ;;		On entry : 0/0
 17076 ;;		On exit  : 0/0
 17077 ;;		Unchanged: 0/0
 17078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17079 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17080 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17083 ;;Total ram usage:       25 bytes
 17084 ;; Hardware stack levels used:    1
 17085 ;; Hardware stack levels required when called:    8
 17086 ;; This function calls:
 17087 ;;		_DATAEE_ReadByte
 17088 ;;		___wmul
 17089 ;;		_sendERRORMessage
 17090 ;;		_sendMessage
 17091 ;; This function is called by:
 17092 ;;		_main
 17093 ;; This function uses a non-reentrant model
 17094 ;;
 17095                           
 17096                           
 17097                           ;psect for function _cmd_tri
 17098  0B84                     _cmd_tri:
 17099  0B84                     l6936:	
 17100                           ;incstack = 0
 17101                           ; Regs used in _cmd_tri: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17102                           
 17103                           
 17104                           ;main.c: 1022: if(num == 5){
 17105  0B84  3005               	movlw	5
 17106  0B85  0020               	movlb	0	; select bank0
 17107  0B86  0627               	xorwf	cmd_tri@num,w
 17108  0B87  0428               	iorwf	cmd_tri@num+1,w
 17109  0B88  1D03               	btfss	3,2
 17110  0B89  2B8B               	goto	u8101
 17111  0B8A  2B8C               	goto	u8100
 17112  0B8B                     u8101:
 17113  0B8B  2C70               	goto	l7000
 17114  0B8C                     u8100:
 17115  0B8C                     l6938:
 17116                           
 17117                           ;main.c: 1023: uint8_t n = buffer[2];
 17118  0B8C  0829               	movf	cmd_tri@buffer,w
 17119  0B8D  0086               	movwf	6
 17120  0B8E  0187               	clrf	7
 17121  0B8F  3F42               	moviw [2]fsr1
 17122  0B90  00BD               	movwf	cmd_tri@n
 17123                           
 17124                           ;main.c: 1024: uint8_t index = buffer[3];
 17125  0B91  0829               	movf	cmd_tri@buffer,w
 17126  0B92  0086               	movwf	6
 17127  0B93  0187               	clrf	7
 17128  0B94  3F43               	moviw [3]fsr1
 17129  0B95  00BC               	movwf	cmd_tri@index
 17130  0B96                     l6940:
 17131                           
 17132                           ;main.c: 1026: uint8_t startingIndex = iwrite + index;
 17133  0B96  087A               	movf	_iwrite,w
 17134  0B97  073C               	addwf	cmd_tri@index,w
 17135  0B98  00AA               	movwf	??_cmd_tri
 17136  0B99  082A               	movf	??_cmd_tri,w
 17137  0B9A  00BF               	movwf	cmd_tri@startingIndex
 17138  0B9B                     l6942:
 17139                           
 17140                           ;main.c: 1027: if(startingIndex >= NREG){
 17141  0B9B  087B               	movf	_NREG,w
 17142  0B9C  023F               	subwf	cmd_tri@startingIndex,w
 17143  0B9D  1C03               	skipc
 17144  0B9E  2BA0               	goto	u8111
 17145  0B9F  2BA1               	goto	u8110
 17146  0BA0                     u8111:
 17147  0BA0  2BA7               	goto	l6946
 17148  0BA1                     u8110:
 17149  0BA1                     l6944:
 17150                           
 17151                           ;main.c: 1028: startingIndex = index - (NREG - iwrite);
 17152  0BA1  087B               	movf	_NREG,w
 17153  0BA2  023C               	subwf	cmd_tri@index,w
 17154  0BA3  077A               	addwf	_iwrite,w
 17155  0BA4  00AA               	movwf	??_cmd_tri
 17156  0BA5  082A               	movf	??_cmd_tri,w
 17157  0BA6  00BF               	movwf	cmd_tri@startingIndex
 17158  0BA7                     l6946:
 17159                           
 17160                           ;main.c: 1029: };main.c: 1030: if(nr != NREG){
 17161  0BA7  0860               	movf	_nr,w
 17162  0BA8  067B               	xorwf	_NREG,w
 17163  0BA9  1903               	skipnz
 17164  0BAA  2BAC               	goto	u8121
 17165  0BAB  2BAD               	goto	u8120
 17166  0BAC                     u8121:
 17167  0BAC  2BB1               	goto	l6950
 17168  0BAD                     u8120:
 17169  0BAD                     l6948:
 17170                           
 17171                           ;main.c: 1031: startingIndex = index;
 17172  0BAD  083C               	movf	cmd_tri@index,w
 17173  0BAE  00AA               	movwf	??_cmd_tri
 17174  0BAF  082A               	movf	??_cmd_tri,w
 17175  0BB0  00BF               	movwf	cmd_tri@startingIndex
 17176  0BB1                     l6950:
 17177                           
 17178                           ;main.c: 1032: };main.c: 1033: uint8_t maxReadings = iwrite - startingIndex;
 17179  0BB1  083F               	movf	cmd_tri@startingIndex,w
 17180  0BB2  027A               	subwf	_iwrite,w
 17181  0BB3  00AA               	movwf	??_cmd_tri
 17182  0BB4  082A               	movf	??_cmd_tri,w
 17183  0BB5  00B9               	movwf	cmd_tri@maxReadings
 17184  0BB6                     l6952:
 17185                           
 17186                           ;main.c: 1034: if(maxReadings <= 0){
 17187  0BB6  0839               	movf	cmd_tri@maxReadings,w
 17188  0BB7  1D03               	btfss	3,2
 17189  0BB8  2BBA               	goto	u8131
 17190  0BB9  2BBB               	goto	u8130
 17191  0BBA                     u8131:
 17192  0BBA  2BC1               	goto	l6956
 17193  0BBB                     u8130:
 17194  0BBB                     l6954:
 17195                           
 17196                           ;main.c: 1035: maxReadings = iwrite + (NREG - startingIndex);
 17197  0BBB  083F               	movf	cmd_tri@startingIndex,w
 17198  0BBC  027A               	subwf	_iwrite,w
 17199  0BBD  077B               	addwf	_NREG,w
 17200  0BBE  00AA               	movwf	??_cmd_tri
 17201  0BBF  082A               	movf	??_cmd_tri,w
 17202  0BC0  00B9               	movwf	cmd_tri@maxReadings
 17203  0BC1                     l6956:
 17204                           
 17205                           ;main.c: 1036: };main.c: 1038: if((n > nr) || (maxReadings < n)){
 17206  0BC1  083D               	movf	cmd_tri@n,w
 17207  0BC2  0260               	subwf	_nr,w
 17208  0BC3  1C03               	skipc
 17209  0BC4  2BC6               	goto	u8141
 17210  0BC5  2BC7               	goto	u8140
 17211  0BC6                     u8141:
 17212  0BC6  2BCD               	goto	l6960
 17213  0BC7                     u8140:
 17214  0BC7                     l6958:
 17215  0BC7  083D               	movf	cmd_tri@n,w
 17216  0BC8  0239               	subwf	cmd_tri@maxReadings,w
 17217  0BC9  1803               	skipnc
 17218  0BCA  2BCC               	goto	u8151
 17219  0BCB  2BCD               	goto	u8150
 17220  0BCC                     u8151:
 17221  0BCC  2BD2               	goto	l6964
 17222  0BCD                     u8150:
 17223  0BCD                     l6960:
 17224                           
 17225                           ;main.c: 1039: sendERRORMessage((uint8_t)0XCC);
 17226  0BCD  30CC               	movlw	204
 17227  0BCE  3193  23DC  318B   	fcall	_sendERRORMessage
 17228  0BD1  2C74               	goto	l1515
 17229  0BD2                     l6964:
 17230                           
 17231                           ;main.c: 1041: };main.c: 1044: uint8_t buffInit[4];;main.c: 1045: buffInit[0] = (uint8_t
      +                          )0xFD;
 17232  0BD2  30FD               	movlw	253
 17233  0BD3  00AA               	movwf	??_cmd_tri
 17234  0BD4  082A               	movf	??_cmd_tri,w
 17235  0BD5  00B4               	movwf	cmd_tri@buffInit
 17236                           
 17237                           ;main.c: 1046: buffInit[1] = (uint8_t)0XCC;
 17238  0BD6  30CC               	movlw	204
 17239  0BD7  00AA               	movwf	??_cmd_tri
 17240  0BD8  082A               	movf	??_cmd_tri,w
 17241  0BD9  00B5               	movwf	cmd_tri@buffInit+1
 17242                           
 17243                           ;main.c: 1047: buffInit[2] = (uint8_t)n;
 17244  0BDA  083D               	movf	cmd_tri@n,w
 17245  0BDB  00AA               	movwf	??_cmd_tri
 17246  0BDC  082A               	movf	??_cmd_tri,w
 17247  0BDD  00B6               	movwf	cmd_tri@buffInit+2
 17248                           
 17249                           ;main.c: 1048: buffInit[3] = (uint8_t)index;
 17250  0BDE  083C               	movf	cmd_tri@index,w
 17251  0BDF  00AA               	movwf	??_cmd_tri
 17252  0BE0  082A               	movf	??_cmd_tri,w
 17253  0BE1  00B7               	movwf	cmd_tri@buffInit+3
 17254  0BE2                     l6966:
 17255                           
 17256                           ;main.c: 1049: sendMessage(4,buffInit);
 17257  0BE2  3004               	movlw	4
 17258  0BE3  00F5               	movwf	sendMessage@num
 17259  0BE4  3000               	movlw	0
 17260  0BE5  00F6               	movwf	sendMessage@num+1
 17261  0BE6  3034               	movlw	(low (cmd_tri@buffInit| 0))& (0+255)
 17262  0BE7  00AA               	movwf	??_cmd_tri
 17263  0BE8  082A               	movf	??_cmd_tri,w
 17264  0BE9  00F7               	movwf	sendMessage@buffer
 17265  0BEA  3194  249A  318B   	fcall	_sendMessage
 17266  0BED                     l6968:
 17267                           
 17268                           ;main.c: 1051: int i = startingIndex;
 17269  0BED  0020               	movlb	0	; select bank0
 17270  0BEE  083F               	movf	cmd_tri@startingIndex,w
 17271  0BEF  00AA               	movwf	??_cmd_tri
 17272  0BF0  01AB               	clrf	??_cmd_tri+1
 17273  0BF1  082A               	movf	??_cmd_tri,w
 17274  0BF2  00BA               	movwf	cmd_tri@i
 17275  0BF3  082B               	movf	??_cmd_tri+1,w
 17276  0BF4  00BB               	movwf	cmd_tri@i+1
 17277                           
 17278                           ;main.c: 1053: uint8_t j;;main.c: 1054: uint8_t buffData[5];;main.c: 1055: while(n){
 17279  0BF5  2C5A               	goto	l6994
 17280  0BF6                     l6970:
 17281                           
 17282                           ;main.c: 1056: for(j = 0; j < 5; j++){
 17283  0BF6  01BE               	clrf	cmd_tri@j
 17284  0BF7                     l6976:
 17285                           
 17286                           ;main.c: 1057: buffData[j] = DATAEE_ReadByte( (i * 0x5) + 0x7012 + j);
 17287  0BF7  083E               	movf	cmd_tri@j,w
 17288  0BF8  00AA               	movwf	??_cmd_tri
 17289  0BF9  01AB               	clrf	??_cmd_tri+1
 17290  0BFA  083B               	movf	cmd_tri@i+1,w
 17291  0BFB  00F3               	movwf	___wmul@multiplier+1
 17292  0BFC  083A               	movf	cmd_tri@i,w
 17293  0BFD  00F2               	movwf	___wmul@multiplier
 17294  0BFE  3005               	movlw	5
 17295  0BFF  00F4               	movwf	___wmul@multiplicand
 17296  0C00  3000               	movlw	0
 17297  0C01  00F5               	movwf	___wmul@multiplicand+1
 17298  0C02  3194  2418  318B   	fcall	___wmul
 17299  0C05  0020               	movlb	0	; select bank0
 17300  0C06  082A               	movf	??_cmd_tri,w
 17301  0C07  0772               	addwf	?___wmul,w
 17302  0C08  00AC               	movwf	??_cmd_tri+2
 17303  0C09  082B               	movf	??_cmd_tri+1,w
 17304  0C0A  3D73               	addwfc	?___wmul+1,w
 17305  0C0B  00AD               	movwf	??_cmd_tri+3
 17306  0C0C  082C               	movf	??_cmd_tri+2,w
 17307  0C0D  3E12               	addlw	18
 17308  0C0E  00F8               	movwf	DATAEE_ReadByte@bAdd
 17309  0C0F  3070               	movlw	112
 17310  0C10  3D2D               	addwfc	??_cmd_tri+3,w
 17311  0C11  00F9               	movwf	DATAEE_ReadByte@bAdd+1
 17312  0C12  3192  225B  318B   	fcall	_DATAEE_ReadByte
 17313  0C15  0020               	movlb	0	; select bank0
 17314  0C16  00AE               	movwf	??_cmd_tri+4
 17315  0C17  083E               	movf	cmd_tri@j,w
 17316  0C18  3E2F               	addlw	(low (cmd_tri@buffData| 0))& (0+255)
 17317  0C19  0086               	movwf	6
 17318  0C1A  0187               	clrf	7
 17319  0C1B  082E               	movf	??_cmd_tri+4,w
 17320  0C1C  0081               	movwf	1
 17321  0C1D                     l6978:
 17322  0C1D  3001               	movlw	1
 17323  0C1E  00AA               	movwf	??_cmd_tri
 17324  0C1F  082A               	movf	??_cmd_tri,w
 17325  0C20  07BE               	addwf	cmd_tri@j,f
 17326  0C21                     l6980:
 17327  0C21  3005               	movlw	5
 17328  0C22  023E               	subwf	cmd_tri@j,w
 17329  0C23  1C03               	skipc
 17330  0C24  2C26               	goto	u8161
 17331  0C25  2C27               	goto	u8160
 17332  0C26                     u8161:
 17333  0C26  2BF7               	goto	l6976
 17334  0C27                     u8160:
 17335  0C27                     l6982:
 17336                           
 17337                           ;main.c: 1058: };main.c: 1059: sendMessage(5,buffData);
 17338  0C27  3005               	movlw	5
 17339  0C28  00F5               	movwf	sendMessage@num
 17340  0C29  3000               	movlw	0
 17341  0C2A  00F6               	movwf	sendMessage@num+1
 17342  0C2B  302F               	movlw	(low (cmd_tri@buffData| 0))& (0+255)
 17343  0C2C  00AA               	movwf	??_cmd_tri
 17344  0C2D  082A               	movf	??_cmd_tri,w
 17345  0C2E  00F7               	movwf	sendMessage@buffer
 17346  0C2F  3194  249A  318B   	fcall	_sendMessage
 17347  0C32                     l6984:
 17348                           
 17349                           ;main.c: 1060: if(iread == i){
 17350  0C32  0020               	movlb	0	; select bank0
 17351  0C33  0861               	movf	_iread,w
 17352  0C34  00AA               	movwf	??_cmd_tri
 17353  0C35  01AB               	clrf	??_cmd_tri+1
 17354  0C36  083B               	movf	cmd_tri@i+1,w
 17355  0C37  062B               	xorwf	??_cmd_tri+1,w
 17356  0C38  1D03               	skipz
 17357  0C39  2C3C               	goto	u8175
 17358  0C3A  083A               	movf	cmd_tri@i,w
 17359  0C3B  062A               	xorwf	??_cmd_tri,w
 17360  0C3C                     u8175:
 17361  0C3C  1D03               	skipz
 17362  0C3D  2C3F               	goto	u8171
 17363  0C3E  2C40               	goto	u8170
 17364  0C3F                     u8171:
 17365  0C3F  2C44               	goto	l6988
 17366  0C40                     u8170:
 17367  0C40                     l6986:
 17368                           
 17369                           ;main.c: 1061: iread++;
 17370  0C40  3001               	movlw	1
 17371  0C41  00AA               	movwf	??_cmd_tri
 17372  0C42  082A               	movf	??_cmd_tri,w
 17373  0C43  07E1               	addwf	_iread,f
 17374  0C44                     l6988:
 17375                           
 17376                           ;main.c: 1062: };main.c: 1063: i++;
 17377  0C44  3001               	movlw	1
 17378  0C45  07BA               	addwf	cmd_tri@i,f
 17379  0C46  3000               	movlw	0
 17380  0C47  3DBB               	addwfc	cmd_tri@i+1,f
 17381  0C48                     l6990:
 17382                           
 17383                           ;main.c: 1064: n--;
 17384  0C48  3001               	movlw	1
 17385  0C49  02BD               	subwf	cmd_tri@n,f
 17386                           
 17387                           ;main.c: 1065: if(i >= NREG){
 17388  0C4A  083B               	movf	cmd_tri@i+1,w
 17389  0C4B  3A80               	xorlw	128
 17390  0C4C  00AA               	movwf	??_cmd_tri
 17391  0C4D  3080               	movlw	128
 17392  0C4E  022A               	subwf	??_cmd_tri,w
 17393  0C4F  1D03               	skipz
 17394  0C50  2C53               	goto	u8185
 17395  0C51  087B               	movf	_NREG,w
 17396  0C52  023A               	subwf	cmd_tri@i,w
 17397  0C53                     u8185:
 17398  0C53  1C03               	skipc
 17399  0C54  2C56               	goto	u8181
 17400  0C55  2C57               	goto	u8180
 17401  0C56                     u8181:
 17402  0C56  2C5A               	goto	l6994
 17403  0C57                     u8180:
 17404  0C57                     l6992:
 17405                           
 17406                           ;main.c: 1066: i=0;
 17407  0C57  0020               	movlb	0	; select bank0
 17408  0C58  01BA               	clrf	cmd_tri@i
 17409  0C59  01BB               	clrf	cmd_tri@i+1
 17410  0C5A                     l6994:
 17411  0C5A  0020               	movlb	0	; select bank0
 17412  0C5B  083D               	movf	cmd_tri@n,w
 17413  0C5C  1D03               	btfss	3,2
 17414  0C5D  2C5F               	goto	u8191
 17415  0C5E  2C60               	goto	u8190
 17416  0C5F                     u8191:
 17417  0C5F  2BF6               	goto	l6970
 17418  0C60                     u8190:
 17419  0C60                     l6996:
 17420                           
 17421                           ;main.c: 1067: };main.c: 1068: };main.c: 1071: uint8_t buffEOM[1];;main.c: 1072: buffEOM
      +                          [0] = (uint8_t)0xFE;
 17422  0C60  30FE               	movlw	254
 17423  0C61  00AA               	movwf	??_cmd_tri
 17424  0C62  082A               	movf	??_cmd_tri,w
 17425  0C63  00B8               	movwf	cmd_tri@buffEOM
 17426  0C64                     l6998:
 17427                           
 17428                           ;main.c: 1073: sendMessage(1,buffEOM);
 17429  0C64  3001               	movlw	1
 17430  0C65  00F5               	movwf	sendMessage@num
 17431  0C66  3000               	movlw	0
 17432  0C67  00F6               	movwf	sendMessage@num+1
 17433  0C68  3038               	movlw	(low (cmd_tri@buffEOM| 0))& (0+255)
 17434  0C69  00AA               	movwf	??_cmd_tri
 17435  0C6A  082A               	movf	??_cmd_tri,w
 17436  0C6B  00F7               	movwf	sendMessage@buffer
 17437  0C6C  3194  249A  318B   	fcall	_sendMessage
 17438                           
 17439                           ;main.c: 1074: } else{
 17440  0C6F  2C74               	goto	l1515
 17441  0C70                     l7000:
 17442                           
 17443                           ;main.c: 1075: sendERRORMessage((uint8_t)0XCC);
 17444  0C70  30CC               	movlw	204
 17445  0C71  3193  23DC  318B   	fcall	_sendERRORMessage
 17446  0C74                     l1515:
 17447  0C74  0008               	return
 17448  0C75                     __end_of_cmd_tri:
 17449                           
 17450                           	psect	text46
 17451  1418                     __ptext46:	
 17452 ;; *************** function ___wmul *****************
 17453 ;; Defined at:
 17454 ;;		line 15 in file "E:\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 17455 ;; Parameters:    Size  Location     Type
 17456 ;;  multiplier      2    2[COMMON] unsigned int 
 17457 ;;  multiplicand    2    4[COMMON] unsigned int 
 17458 ;; Auto vars:     Size  Location     Type
 17459 ;;  product         2    6[COMMON] unsigned int 
 17460 ;; Return value:  Size  Location     Type
 17461 ;;                  2    2[COMMON] unsigned int 
 17462 ;; Registers used:
 17463 ;;		wreg, status,2, status,0
 17464 ;; Tracked objects:
 17465 ;;		On entry : 0/0
 17466 ;;		On exit  : 0/0
 17467 ;;		Unchanged: 0/0
 17468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17472 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17473 ;;Total ram usage:        6 bytes
 17474 ;; Hardware stack levels used:    1
 17475 ;; Hardware stack levels required when called:    4
 17476 ;; This function calls:
 17477 ;;		Nothing
 17478 ;; This function is called by:
 17479 ;;		_monitoring_TEMP_LUM
 17480 ;;		_cmd_trc
 17481 ;;		_cmd_tri
 17482 ;;		_main
 17483 ;;		_sprintf
 17484 ;;		_map
 17485 ;; This function uses a non-reentrant model
 17486 ;;
 17487                           
 17488                           
 17489                           ;psect for function ___wmul
 17490  1418                     ___wmul:
 17491  1418                     l4436:	
 17492                           ;incstack = 0
 17493                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 17494                           
 17495  1418  01F6               	clrf	___wmul@product
 17496  1419  01F7               	clrf	___wmul@product+1
 17497  141A                     l4438:
 17498  141A  1C72               	btfss	___wmul@multiplier,0
 17499  141B  2C1D               	goto	u3361
 17500  141C  2C1E               	goto	u3360
 17501  141D                     u3361:
 17502  141D  2C22               	goto	l1767
 17503  141E                     u3360:
 17504  141E                     l4440:
 17505  141E  0874               	movf	___wmul@multiplicand,w
 17506  141F  07F6               	addwf	___wmul@product,f
 17507  1420  0875               	movf	___wmul@multiplicand+1,w
 17508  1421  3DF7               	addwfc	___wmul@product+1,f
 17509  1422                     l1767:
 17510  1422  3001               	movlw	1
 17511  1423                     u3375:
 17512  1423  35F4               	lslf	___wmul@multiplicand,f
 17513  1424  0DF5               	rlf	___wmul@multiplicand+1,f
 17514  1425  0B89               	decfsz	9,f
 17515  1426  2C23               	goto	u3375
 17516  1427                     l4442:
 17517  1427  3001               	movlw	1
 17518  1428                     u3385:
 17519  1428  36F3               	lsrf	___wmul@multiplier+1,f
 17520  1429  0CF2               	rrf	___wmul@multiplier,f
 17521  142A  0B89               	decfsz	9,f
 17522  142B  2C28               	goto	u3385
 17523  142C                     l4444:
 17524  142C  0872               	movf	___wmul@multiplier,w
 17525  142D  0473               	iorwf	___wmul@multiplier+1,w
 17526  142E  1D03               	btfss	3,2
 17527  142F  2C31               	goto	u3391
 17528  1430  2C32               	goto	u3390
 17529  1431                     u3391:
 17530  1431  2C1A               	goto	l4438
 17531  1432                     u3390:
 17532  1432                     l4446:
 17533  1432  0877               	movf	___wmul@product+1,w
 17534  1433  00F3               	movwf	?___wmul+1
 17535  1434  0876               	movf	___wmul@product,w
 17536  1435  00F2               	movwf	?___wmul
 17537  1436                     l1769:
 17538  1436  0008               	return
 17539  1437                     __end_of___wmul:
 17540                           
 17541                           	psect	text47
 17542  125B                     __ptext47:	
 17543 ;; *************** function _DATAEE_ReadByte *****************
 17544 ;; Defined at:
 17545 ;;		line 202 in file "mcc_generated_files/memory.c"
 17546 ;; Parameters:    Size  Location     Type
 17547 ;;  bAdd            2    8[COMMON] unsigned int 
 17548 ;; Auto vars:     Size  Location     Type
 17549 ;;		None
 17550 ;; Return value:  Size  Location     Type
 17551 ;;                  1    wreg      unsigned char 
 17552 ;; Registers used:
 17553 ;;		wreg, status,2
 17554 ;; Tracked objects:
 17555 ;;		On entry : 0/0
 17556 ;;		On exit  : 0/0
 17557 ;;		Unchanged: 0/0
 17558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17559 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17563 ;;Total ram usage:        2 bytes
 17564 ;; Hardware stack levels used:    1
 17565 ;; Hardware stack levels required when called:    4
 17566 ;; This function calls:
 17567 ;;		Nothing
 17568 ;; This function is called by:
 17569 ;;		_cmd_trc
 17570 ;;		_cmd_tri
 17571 ;;		_main
 17572 ;; This function uses a non-reentrant model
 17573 ;;
 17574                           
 17575                           
 17576                           ;psect for function _DATAEE_ReadByte
 17577  125B                     _DATAEE_ReadByte:
 17578  125B                     l5126:	
 17579                           ;incstack = 0
 17580                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 17581                           
 17582                           
 17583                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 17584  125B  0879               	movf	DATAEE_ReadByte@bAdd+1,w
 17585  125C  0030               	movlb	16	; select bank16
 17586  125D  009B               	movwf	27	;volatile
 17587  125E                     l5128:
 17588                           
 17589                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 17590  125E  0878               	movf	DATAEE_ReadByte@bAdd,w
 17591  125F  009A               	movwf	26	;volatile
 17592  1260                     l5130:
 17593                           
 17594                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 17595  1260  171E               	bsf	30,6	;volsfr
 17596  1261                     l5132:
 17597                           
 17598                           ;memory.c: 207: NVMCON1bits.RD = 1;
 17599  1261  141E               	bsf	30,0	;volsfr
 17600  1262                     l5134:
 17601                           
 17602                           ;memory.c: 208: __nop();
 17603  1262  0000               	nop
 17604  1263                     l5136:
 17605                           
 17606                           ;memory.c: 209: __nop();
 17607  1263  0000               	nop
 17608  1264                     l5138:
 17609                           
 17610                           ;memory.c: 211: return (NVMDATL);
 17611  1264  0030               	movlb	16	; select bank16
 17612  1265  081C               	movf	28,w	;volatile
 17613  1266                     l734:
 17614  1266  0008               	return
 17615  1267                     __end_of_DATAEE_ReadByte:
 17616                           
 17617                           	psect	text48
 17618  136C                     __ptext48:	
 17619 ;; *************** function _sendOKMessage *****************
 17620 ;; Defined at:
 17621 ;;		line 823 in file "main.c"
 17622 ;; Parameters:    Size  Location     Type
 17623 ;;  cmd             1    wreg     unsigned char 
 17624 ;; Auto vars:     Size  Location     Type
 17625 ;;  cmd             1    2[BANK0 ] unsigned char 
 17626 ;;  bufw            4    3[BANK0 ] unsigned char [4]
 17627 ;; Return value:  Size  Location     Type
 17628 ;;                  1    wreg      void 
 17629 ;; Registers used:
 17630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17631 ;; Tracked objects:
 17632 ;;		On entry : 0/0
 17633 ;;		On exit  : 0/0
 17634 ;;		Unchanged: 0/0
 17635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17637 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;Total ram usage:        6 bytes
 17641 ;; Hardware stack levels used:    1
 17642 ;; Hardware stack levels required when called:    7
 17643 ;; This function calls:
 17644 ;;		_sendMessage
 17645 ;; This function is called by:
 17646 ;;		_cmd_sc
 17647 ;;		_cmd_mmp
 17648 ;;		_cmd_mta
 17649 ;;		_cmd_dac
 17650 ;;		_cmd_dtl
 17651 ;;		_cmd_aa
 17652 ;; This function uses a non-reentrant model
 17653 ;;
 17654                           
 17655                           
 17656                           ;psect for function _sendOKMessage
 17657  136C                     _sendOKMessage:
 17658                           
 17659                           ;incstack = 0
 17660                           ; Regs used in _sendOKMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17661                           ;sendOKMessage@cmd stored from wreg
 17662  136C  0020               	movlb	0	; select bank0
 17663  136D  00A2               	movwf	sendOKMessage@cmd
 17664  136E                     l6570:
 17665                           
 17666                           ;main.c: 824: uint8_t bufw[4];;main.c: 825: bufw[0] = (uint8_t)0xFD;
 17667  136E  30FD               	movlw	253
 17668  136F  00F9               	movwf	??_sendOKMessage
 17669  1370  0879               	movf	??_sendOKMessage,w
 17670  1371  00A3               	movwf	sendOKMessage@bufw
 17671                           
 17672                           ;main.c: 826: bufw[1] = (uint8_t)cmd;
 17673  1372  0822               	movf	sendOKMessage@cmd,w
 17674  1373  00F9               	movwf	??_sendOKMessage
 17675  1374  0879               	movf	??_sendOKMessage,w
 17676  1375  00A4               	movwf	sendOKMessage@bufw+1
 17677  1376                     l6572:
 17678                           
 17679                           ;main.c: 827: bufw[2] = (uint8_t)0;
 17680  1376  01A5               	clrf	sendOKMessage@bufw+2
 17681  1377                     l6574:
 17682                           
 17683                           ;main.c: 828: bufw[3] = (uint8_t)0xFE;
 17684  1377  30FE               	movlw	254
 17685  1378  00F9               	movwf	??_sendOKMessage
 17686  1379  0879               	movf	??_sendOKMessage,w
 17687  137A  00A6               	movwf	sendOKMessage@bufw+3
 17688  137B                     l6576:
 17689                           
 17690                           ;main.c: 830: sendMessage(4,bufw);
 17691  137B  3004               	movlw	4
 17692  137C  00F5               	movwf	sendMessage@num
 17693  137D  3000               	movlw	0
 17694  137E  00F6               	movwf	sendMessage@num+1
 17695  137F  3023               	movlw	(low (sendOKMessage@bufw| 0))& (0+255)
 17696  1380  00F9               	movwf	??_sendOKMessage
 17697  1381  0879               	movf	??_sendOKMessage,w
 17698  1382  00F7               	movwf	sendMessage@buffer
 17699  1383  3194  249A  3193   	fcall	_sendMessage
 17700  1386                     l1440:
 17701  1386  0008               	return
 17702  1387                     __end_of_sendOKMessage:
 17703                           
 17704                           	psect	text49
 17705  13DC                     __ptext49:	
 17706 ;; *************** function _sendERRORMessage *****************
 17707 ;; Defined at:
 17708 ;;		line 833 in file "main.c"
 17709 ;; Parameters:    Size  Location     Type
 17710 ;;  cmd             1    wreg     unsigned char 
 17711 ;; Auto vars:     Size  Location     Type
 17712 ;;  cmd             1    2[BANK0 ] unsigned char 
 17713 ;;  bufw            4    3[BANK0 ] unsigned char [4]
 17714 ;; Return value:  Size  Location     Type
 17715 ;;                  1    wreg      void 
 17716 ;; Registers used:
 17717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17718 ;; Tracked objects:
 17719 ;;		On entry : 0/0
 17720 ;;		On exit  : 0/0
 17721 ;;		Unchanged: 0/0
 17722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17724 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17726 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17727 ;;Total ram usage:        6 bytes
 17728 ;; Hardware stack levels used:    1
 17729 ;; Hardware stack levels required when called:    7
 17730 ;; This function calls:
 17731 ;;		_sendMessage
 17732 ;; This function is called by:
 17733 ;;		_cmd_sc
 17734 ;;		_cmd_mmp
 17735 ;;		_cmd_mta
 17736 ;;		_cmd_dac
 17737 ;;		_cmd_dtl
 17738 ;;		_cmd_aa
 17739 ;;		_cmd_trc
 17740 ;;		_cmd_tri
 17741 ;; This function uses a non-reentrant model
 17742 ;;
 17743                           
 17744                           
 17745                           ;psect for function _sendERRORMessage
 17746  13DC                     _sendERRORMessage:
 17747                           
 17748                           ;incstack = 0
 17749                           ; Regs used in _sendERRORMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17750                           ;sendERRORMessage@cmd stored from wreg
 17751  13DC  0020               	movlb	0	; select bank0
 17752  13DD  00A2               	movwf	sendERRORMessage@cmd
 17753  13DE                     l6578:
 17754                           
 17755                           ;main.c: 834: uint8_t bufw[4];;main.c: 835: bufw[0] = (uint8_t)0xFD;
 17756  13DE  30FD               	movlw	253
 17757  13DF  00F9               	movwf	??_sendERRORMessage
 17758  13E0  0879               	movf	??_sendERRORMessage,w
 17759  13E1  00A3               	movwf	sendERRORMessage@bufw
 17760                           
 17761                           ;main.c: 836: bufw[1] = (uint8_t)cmd;
 17762  13E2  0822               	movf	sendERRORMessage@cmd,w
 17763  13E3  00F9               	movwf	??_sendERRORMessage
 17764  13E4  0879               	movf	??_sendERRORMessage,w
 17765  13E5  00A4               	movwf	sendERRORMessage@bufw+1
 17766                           
 17767                           ;main.c: 837: bufw[2] = (uint8_t)0xFF;
 17768  13E6  30FF               	movlw	255
 17769  13E7  00F9               	movwf	??_sendERRORMessage
 17770  13E8  0879               	movf	??_sendERRORMessage,w
 17771  13E9  00A5               	movwf	sendERRORMessage@bufw+2
 17772                           
 17773                           ;main.c: 838: bufw[3] = (uint8_t)0xFE;
 17774  13EA  30FE               	movlw	254
 17775  13EB  00F9               	movwf	??_sendERRORMessage
 17776  13EC  0879               	movf	??_sendERRORMessage,w
 17777  13ED  00A6               	movwf	sendERRORMessage@bufw+3
 17778  13EE                     l6580:
 17779                           
 17780                           ;main.c: 840: sendMessage(4,bufw);
 17781  13EE  3004               	movlw	4
 17782  13EF  00F5               	movwf	sendMessage@num
 17783  13F0  3000               	movlw	0
 17784  13F1  00F6               	movwf	sendMessage@num+1
 17785  13F2  3023               	movlw	(low (sendERRORMessage@bufw| 0))& (0+255)
 17786  13F3  00F9               	movwf	??_sendERRORMessage
 17787  13F4  0879               	movf	??_sendERRORMessage,w
 17788  13F5  00F7               	movwf	sendMessage@buffer
 17789  13F6  3194  249A  3193   	fcall	_sendMessage
 17790  13F9                     l1443:
 17791  13F9  0008               	return
 17792  13FA                     __end_of_sendERRORMessage:
 17793                           
 17794                           	psect	text50
 17795  149A                     __ptext50:	
 17796 ;; *************** function _sendMessage *****************
 17797 ;; Defined at:
 17798 ;;		line 815 in file "main.c"
 17799 ;; Parameters:    Size  Location     Type
 17800 ;;  num             2    5[COMMON] int 
 17801 ;;  buffer          1    7[COMMON] PTR unsigned char 
 17802 ;;		 -> cmd_tri@buffEOM(1), cmd_tri@buffData(5), cmd_tri@buffInit(4), cmd_trc@buffEOM(1), 
 17803 ;;		 -> cmd_trc@buffData(5), cmd_trc@buffInit(3), cmd_ir@buff(7), cmd_ra@buff(9), 
 17804 ;;		 -> cmd_rp@buff(5), cmd_rtl@buff(5), cmd_rc@buff(6), sendERRORMessage@bufw(4), 
 17805 ;;		 -> sendOKMessage@bufw(4), 
 17806 ;; Auto vars:     Size  Location     Type
 17807 ;;  n               2    0[BANK0 ] int 
 17808 ;; Return value:  Size  Location     Type
 17809 ;;                  1    wreg      void 
 17810 ;; Registers used:
 17811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17812 ;; Tracked objects:
 17813 ;;		On entry : 0/0
 17814 ;;		On exit  : 0/0
 17815 ;;		Unchanged: 0/0
 17816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17817 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17818 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17820 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17821 ;;Total ram usage:        6 bytes
 17822 ;; Hardware stack levels used:    1
 17823 ;; Hardware stack levels required when called:    6
 17824 ;; This function calls:
 17825 ;;		_putch
 17826 ;; This function is called by:
 17827 ;;		_sendOKMessage
 17828 ;;		_sendERRORMessage
 17829 ;;		_cmd_rc
 17830 ;;		_cmd_rtl
 17831 ;;		_cmd_rp
 17832 ;;		_cmd_ra
 17833 ;;		_cmd_ir
 17834 ;;		_cmd_trc
 17835 ;;		_cmd_tri
 17836 ;; This function uses a non-reentrant model
 17837 ;;
 17838                           
 17839                           
 17840                           ;psect for function _sendMessage
 17841  149A                     _sendMessage:
 17842  149A                     l6504:	
 17843                           ;incstack = 0
 17844                           ; Regs used in _sendMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17845                           
 17846                           
 17847                           ;main.c: 816: int n = 0;
 17848  149A  0020               	movlb	0	; select bank0
 17849  149B  01A0               	clrf	sendMessage@n
 17850  149C  01A1               	clrf	sendMessage@n+1
 17851                           
 17852                           ;main.c: 817: while(n<num){
 17853  149D  2CAE               	goto	l6510
 17854  149E                     l6506:
 17855                           
 17856                           ;main.c: 818: putch(buffer[n]);
 17857  149E  0020               	movlb	0	; select bank0
 17858  149F  0820               	movf	sendMessage@n,w
 17859  14A0  0777               	addwf	sendMessage@buffer,w
 17860  14A1  00F8               	movwf	??_sendMessage
 17861  14A2  0878               	movf	??_sendMessage,w
 17862  14A3  0086               	movwf	6
 17863  14A4  0187               	clrf	7
 17864  14A5  0801               	movf	1,w
 17865  14A6  3192  2216  3194   	fcall	_putch
 17866  14A9                     l6508:
 17867                           
 17868                           ;main.c: 819: n++;
 17869  14A9  3001               	movlw	1
 17870  14AA  0020               	movlb	0	; select bank0
 17871  14AB  07A0               	addwf	sendMessage@n,f
 17872  14AC  3000               	movlw	0
 17873  14AD  3DA1               	addwfc	sendMessage@n+1,f
 17874  14AE                     l6510:
 17875  14AE  0821               	movf	sendMessage@n+1,w
 17876  14AF  3A80               	xorlw	128
 17877  14B0  00F8               	movwf	??_sendMessage
 17878  14B1  0876               	movf	sendMessage@num+1,w
 17879  14B2  3A80               	xorlw	128
 17880  14B3  0278               	subwf	??_sendMessage,w
 17881  14B4  1D03               	skipz
 17882  14B5  2CB8               	goto	u7235
 17883  14B6  0875               	movf	sendMessage@num,w
 17884  14B7  0220               	subwf	sendMessage@n,w
 17885  14B8                     u7235:
 17886  14B8  1C03               	skipc
 17887  14B9  2CBB               	goto	u7231
 17888  14BA  2CBC               	goto	u7230
 17889  14BB                     u7231:
 17890  14BB  2C9E               	goto	l6506
 17891  14BC                     u7230:
 17892  14BC                     l1437:
 17893  14BC  0008               	return
 17894  14BD                     __end_of_sendMessage:
 17895                           
 17896                           	psect	text51
 17897  1216                     __ptext51:	
 17898 ;; *************** function _putch *****************
 17899 ;; Defined at:
 17900 ;;		line 176 in file "mcc_generated_files/eusart.c"
 17901 ;; Parameters:    Size  Location     Type
 17902 ;;  txData          1    wreg     unsigned char 
 17903 ;; Auto vars:     Size  Location     Type
 17904 ;;  txData          1    4[COMMON] unsigned char 
 17905 ;; Return value:  Size  Location     Type
 17906 ;;                  1    wreg      void 
 17907 ;; Registers used:
 17908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17909 ;; Tracked objects:
 17910 ;;		On entry : 0/0
 17911 ;;		On exit  : 0/0
 17912 ;;		Unchanged: 0/0
 17913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17918 ;;Total ram usage:        1 bytes
 17919 ;; Hardware stack levels used:    1
 17920 ;; Hardware stack levels required when called:    5
 17921 ;; This function calls:
 17922 ;;		_EUSART_Write
 17923 ;; This function is called by:
 17924 ;;		_sendMessage
 17925 ;; This function uses a non-reentrant model
 17926 ;;
 17927                           
 17928                           
 17929                           ;psect for function _putch
 17930  1216                     _putch:
 17931                           
 17932                           ;incstack = 0
 17933                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17934                           ;putch@txData stored from wreg
 17935  1216  00F4               	movwf	putch@txData
 17936  1217                     l6126:
 17937                           
 17938                           ;eusart.c: 178: EUSART_Write(txData);
 17939  1217  0874               	movf	putch@txData,w
 17940  1218  3195  2576  3192   	fcall	_EUSART_Write
 17941  121B                     l842:
 17942  121B  0008               	return
 17943  121C                     __end_of_putch:
 17944                           
 17945                           	psect	text52
 17946  1576                     __ptext52:	
 17947 ;; *************** function _EUSART_Write *****************
 17948 ;; Defined at:
 17949 ;;		line 148 in file "mcc_generated_files/eusart.c"
 17950 ;; Parameters:    Size  Location     Type
 17951 ;;  txData          1    wreg     unsigned char 
 17952 ;; Auto vars:     Size  Location     Type
 17953 ;;  txData          1    3[COMMON] unsigned char 
 17954 ;; Return value:  Size  Location     Type
 17955 ;;                  1    wreg      void 
 17956 ;; Registers used:
 17957 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17958 ;; Tracked objects:
 17959 ;;		On entry : 0/0
 17960 ;;		On exit  : 0/0
 17961 ;;		Unchanged: 0/0
 17962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17965 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17966 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17967 ;;Total ram usage:        2 bytes
 17968 ;; Hardware stack levels used:    1
 17969 ;; Hardware stack levels required when called:    4
 17970 ;; This function calls:
 17971 ;;		Nothing
 17972 ;; This function is called by:
 17973 ;;		_putch
 17974 ;; This function uses a non-reentrant model
 17975 ;;
 17976                           
 17977                           
 17978                           ;psect for function _EUSART_Write
 17979  1576                     _EUSART_Write:
 17980                           
 17981                           ;incstack = 0
 17982                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 17983                           ;EUSART_Write@txData stored from wreg
 17984  1576  00F3               	movwf	EUSART_Write@txData
 17985  1577                     l6064:
 17986  1577                     l6066:	
 17987                           ;eusart.c: 150: while(0 == eusartTxBufferRemaining)
 17988                           
 17989  1577  0021               	movlb	1	; select bank1
 17990  1578  0862               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 17991  1579  1903               	btfsc	3,2
 17992  157A  2D7C               	goto	u6261
 17993  157B  2D7D               	goto	u6260
 17994  157C                     u6261:
 17995  157C  2D77               	goto	l6066
 17996  157D                     u6260:
 17997  157D                     l832:
 17998                           
 17999                           ;eusart.c: 152: };eusart.c: 154: if(0 == PIE3bits.TXIE)
 18000  157D  002E               	movlb	14	; select bank14
 18001  157E  1A19               	btfsc	25,4	;volatile
 18002  157F  2D81               	goto	u6271
 18003  1580  2D82               	goto	u6270
 18004  1581                     u6271:
 18005  1581  2D86               	goto	l833
 18006  1582                     u6270:
 18007  1582                     l6068:
 18008                           
 18009                           ;eusart.c: 155: {;eusart.c: 156: TX1REG = txData;
 18010  1582  0873               	movf	EUSART_Write@txData,w
 18011  1583  0022               	movlb	2	; select bank2
 18012  1584  009A               	movwf	26	;volatile
 18013                           
 18014                           ;eusart.c: 157: }
 18015  1585  2D9F               	goto	l6080
 18016  1586                     l833:
 18017                           
 18018                           ;eusart.c: 158: else;eusart.c: 159: {;eusart.c: 160: PIE3bits.TXIE = 0;
 18019  1586  1219               	bcf	25,4	;volatile
 18020  1587                     l6070:
 18021                           
 18022                           ;eusart.c: 161: eusartTxBuffer[eusartTxHead++] = txData;
 18023  1587  0873               	movf	EUSART_Write@txData,w
 18024  1588  00F2               	movwf	??_EUSART_Write
 18025  1589  0020               	movlb	0	; select bank0
 18026  158A  086C               	movf	_eusartTxHead,w
 18027  158B  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 18028  158C  0086               	movwf	6
 18029  158D  3001               	movlw	1	; select bank3/4
 18030  158E  0087               	movwf	7
 18031  158F  0872               	movf	??_EUSART_Write,w
 18032  1590  0081               	movwf	1
 18033  1591                     l6072:
 18034  1591  3001               	movlw	1
 18035  1592  00F2               	movwf	??_EUSART_Write
 18036  1593  0872               	movf	??_EUSART_Write,w
 18037  1594  07EC               	addwf	_eusartTxHead,f	;volatile
 18038  1595                     l6074:
 18039                           
 18040                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 18041  1595  3040               	movlw	64
 18042  1596  026C               	subwf	_eusartTxHead,w	;volatile
 18043  1597  1C03               	skipc
 18044  1598  2D9A               	goto	u6281
 18045  1599  2D9B               	goto	u6280
 18046  159A                     u6281:
 18047  159A  2D9C               	goto	l6078
 18048  159B                     u6280:
 18049  159B                     l6076:
 18050                           
 18051                           ;eusart.c: 163: {;eusart.c: 164: eusartTxHead = 0;
 18052  159B  01EC               	clrf	_eusartTxHead	;volatile
 18053  159C                     l6078:
 18054                           
 18055                           ;eusart.c: 165: };eusart.c: 166: eusartTxBufferRemaining--;
 18056  159C  3001               	movlw	1
 18057  159D  0021               	movlb	1	; select bank1
 18058  159E  02E2               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 18059  159F                     l6080:
 18060                           
 18061                           ;eusart.c: 167: };eusart.c: 168: PIE3bits.TXIE = 1;
 18062  159F  002E               	movlb	14	; select bank14
 18063  15A0  1619               	bsf	25,4	;volatile
 18064  15A1                     l836:
 18065  15A1  0008               	return
 18066  15A2                     __end_of_EUSART_Write:
 18067                           
 18068                           	psect	text53
 18069  13A2                     __ptext53:	
 18070 ;; *************** function _SYSTEM_Initialize *****************
 18071 ;; Defined at:
 18072 ;;		line 50 in file "mcc_generated_files/mcc.c"
 18073 ;; Parameters:    Size  Location     Type
 18074 ;;		None
 18075 ;; Auto vars:     Size  Location     Type
 18076 ;;		None
 18077 ;; Return value:  Size  Location     Type
 18078 ;;                  1    wreg      void 
 18079 ;; Registers used:
 18080 ;;		wreg, status,2, status,0, pclath, cstack
 18081 ;; Tracked objects:
 18082 ;;		On entry : 0/0
 18083 ;;		On exit  : 0/0
 18084 ;;		Unchanged: 0/0
 18085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18090 ;;Total ram usage:        0 bytes
 18091 ;; Hardware stack levels used:    1
 18092 ;; Hardware stack levels required when called:    6
 18093 ;; This function calls:
 18094 ;;		_ADCC_Initialize
 18095 ;;		_EUSART_Initialize
 18096 ;;		_EXT_INT_Initialize
 18097 ;;		_OSCILLATOR_Initialize
 18098 ;;		_PIN_MANAGER_Initialize
 18099 ;;		_PMD_Initialize
 18100 ;;		_PWM6_Initialize
 18101 ;;		_TMR1_Initialize
 18102 ;;		_TMR2_Initialize
 18103 ;; This function is called by:
 18104 ;;		_main
 18105 ;; This function uses a non-reentrant model
 18106 ;;
 18107                           
 18108                           
 18109                           ;psect for function _SYSTEM_Initialize
 18110  13A2                     _SYSTEM_Initialize:
 18111  13A2                     l5282:	
 18112                           ;incstack = 0
 18113                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18114                           
 18115                           
 18116                           ;mcc.c: 52: PMD_Initialize();
 18117  13A2  3192  2228  3193   	fcall	_PMD_Initialize
 18118  13A5                     l5284:
 18119                           
 18120                           ;mcc.c: 53: PIN_MANAGER_Initialize();
 18121  13A5  3188  2043  3193   	fcall	_PIN_MANAGER_Initialize
 18122  13A8                     l5286:
 18123                           
 18124                           ;mcc.c: 54: OSCILLATOR_Initialize();
 18125  13A8  3192  2249  3193   	fcall	_OSCILLATOR_Initialize
 18126  13AB                     l5288:
 18127                           
 18128                           ;mcc.c: 55: PWM6_Initialize();
 18129  13AB  3192  228D  3193   	fcall	_PWM6_Initialize
 18130  13AE                     l5290:
 18131                           
 18132                           ;mcc.c: 56: ADCC_Initialize();
 18133  13AE  3193  230A  3193   	fcall	_ADCC_Initialize
 18134  13B1                     l5292:
 18135                           
 18136                           ;mcc.c: 57: TMR2_Initialize();
 18137  13B1  3192  229A  3193   	fcall	_TMR2_Initialize
 18138  13B4                     l5294:
 18139                           
 18140                           ;mcc.c: 58: TMR1_Initialize();
 18141  13B4  3193  23BE  3193   	fcall	_TMR1_Initialize
 18142  13B7                     l5296:
 18143                           
 18144                           ;mcc.c: 59: EXT_INT_Initialize();
 18145  13B7  3192  2280  3193   	fcall	_EXT_INT_Initialize
 18146  13BA                     l5298:
 18147                           
 18148                           ;mcc.c: 60: EUSART_Initialize();
 18149  13BA  3187  27D5  3193   	fcall	_EUSART_Initialize
 18150  13BD                     l182:
 18151  13BD  0008               	return
 18152  13BE                     __end_of_SYSTEM_Initialize:
 18153                           
 18154                           	psect	text54
 18155  129A                     __ptext54:	
 18156 ;; *************** function _TMR2_Initialize *****************
 18157 ;; Defined at:
 18158 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 18159 ;; Parameters:    Size  Location     Type
 18160 ;;		None
 18161 ;; Auto vars:     Size  Location     Type
 18162 ;;		None
 18163 ;; Return value:  Size  Location     Type
 18164 ;;                  1    wreg      void 
 18165 ;; Registers used:
 18166 ;;		wreg, status,2
 18167 ;; Tracked objects:
 18168 ;;		On entry : 0/0
 18169 ;;		On exit  : 0/0
 18170 ;;		Unchanged: 0/0
 18171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18176 ;;Total ram usage:        0 bytes
 18177 ;; Hardware stack levels used:    1
 18178 ;; Hardware stack levels required when called:    4
 18179 ;; This function calls:
 18180 ;;		Nothing
 18181 ;; This function is called by:
 18182 ;;		_SYSTEM_Initialize
 18183 ;; This function uses a non-reentrant model
 18184 ;;
 18185                           
 18186                           
 18187                           ;psect for function _TMR2_Initialize
 18188  129A                     _TMR2_Initialize:
 18189  129A                     l5046:	
 18190                           ;incstack = 0
 18191                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 18192                           
 18193                           
 18194                           ;tmr2.c: 67: T2CLKCON = 0x01;
 18195  129A  3001               	movlw	1
 18196  129B  0025               	movlb	5	; select bank5
 18197  129C  0090               	movwf	16	;volatile
 18198  129D                     l5048:
 18199                           
 18200                           ;tmr2.c: 70: T2HLT = 0x00;
 18201  129D  018F               	clrf	15	;volatile
 18202  129E                     l5050:
 18203                           
 18204                           ;tmr2.c: 73: T2RST = 0x00;
 18205  129E  0191               	clrf	17	;volatile
 18206                           
 18207                           ;tmr2.c: 76: T2PR = 0xFF;
 18208  129F  30FF               	movlw	255
 18209  12A0  008D               	movwf	13	;volatile
 18210  12A1                     l5052:
 18211                           
 18212                           ;tmr2.c: 79: T2TMR = 0x00;
 18213  12A1  018C               	clrf	12	;volatile
 18214  12A2                     l5054:
 18215                           
 18216                           ;tmr2.c: 82: PIR4bits.TMR2IF = 0;
 18217  12A2  002E               	movlb	14	; select bank14
 18218  12A3  1090               	bcf	16,1	;volatile
 18219  12A4                     l5056:
 18220                           
 18221                           ;tmr2.c: 85: T2CON = 0x80;
 18222  12A4  3080               	movlw	128
 18223  12A5  0025               	movlb	5	; select bank5
 18224  12A6  008E               	movwf	14	;volatile
 18225  12A7                     l647:
 18226  12A7  0008               	return
 18227  12A8                     __end_of_TMR2_Initialize:
 18228                           
 18229                           	psect	text55
 18230  13BE                     __ptext55:	
 18231 ;; *************** function _TMR1_Initialize *****************
 18232 ;; Defined at:
 18233 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 18234 ;; Parameters:    Size  Location     Type
 18235 ;;		None
 18236 ;; Auto vars:     Size  Location     Type
 18237 ;;		None
 18238 ;; Return value:  Size  Location     Type
 18239 ;;                  1    wreg      void 
 18240 ;; Registers used:
 18241 ;;		wreg, status,2, status,0, pclath, cstack
 18242 ;; Tracked objects:
 18243 ;;		On entry : 0/0
 18244 ;;		On exit  : 0/0
 18245 ;;		Unchanged: 0/0
 18246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18251 ;;Total ram usage:        0 bytes
 18252 ;; Hardware stack levels used:    1
 18253 ;; Hardware stack levels required when called:    5
 18254 ;; This function calls:
 18255 ;;		_TMR1_SetInterruptHandler
 18256 ;; This function is called by:
 18257 ;;		_SYSTEM_Initialize
 18258 ;; This function uses a non-reentrant model
 18259 ;;
 18260                           
 18261                           
 18262                           ;psect for function _TMR1_Initialize
 18263  13BE                     _TMR1_Initialize:
 18264  13BE                     l5058:	
 18265                           ;incstack = 0
 18266                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18267                           
 18268                           
 18269                           ;tmr1.c: 69: T1GCON = 0x00;
 18270  13BE  0024               	movlb	4	; select bank4
 18271  13BF  018F               	clrf	15	;volatile
 18272                           
 18273                           ;tmr1.c: 72: T1GATE = 0x00;
 18274  13C0  0190               	clrf	16	;volatile
 18275  13C1                     l5060:
 18276                           
 18277                           ;tmr1.c: 75: T1CLK = 0x04;
 18278  13C1  3004               	movlw	4
 18279  13C2  0091               	movwf	17	;volatile
 18280  13C3                     l5062:
 18281                           
 18282                           ;tmr1.c: 78: TMR1H = 0x86;
 18283  13C3  3086               	movlw	134
 18284  13C4  008D               	movwf	13	;volatile
 18285  13C5                     l5064:
 18286                           
 18287                           ;tmr1.c: 81: TMR1L = 0xE8;
 18288  13C5  30E8               	movlw	232
 18289  13C6  008C               	movwf	12	;volatile
 18290  13C7                     l5066:
 18291                           
 18292                           ;tmr1.c: 84: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 18293  13C7  080D               	movf	13,w	;volatile
 18294  13C8  0021               	movlb	1	; select bank1
 18295  13C9  00DD               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
 18296  13CA  0024               	movlb	4	; select bank4
 18297  13CB  080C               	movf	12,w	;volatile
 18298  13CC  0021               	movlb	1	; select bank1
 18299  13CD  00DC               	movwf	_timer1ReloadVal^(0+128)	;volatile
 18300  13CE                     l5068:
 18301                           
 18302                           ;tmr1.c: 87: PIR4bits.TMR1IF = 0;
 18303  13CE  002E               	movlb	14	; select bank14
 18304  13CF  1010               	bcf	16,0	;volatile
 18305  13D0                     l5070:
 18306                           
 18307                           ;tmr1.c: 90: PIE4bits.TMR1IE = 1;
 18308  13D0  141A               	bsf	26,0	;volatile
 18309  13D1                     l5072:
 18310                           
 18311                           ;tmr1.c: 93: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 18312  13D1  30DB               	movlw	low _TMR1_DefaultInterruptHandler
 18313  13D2  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 18314  13D3  3011               	movlw	high _TMR1_DefaultInterruptHandler
 18315  13D4  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 18316  13D5  3192  2210  3193   	fcall	_TMR1_SetInterruptHandler
 18317  13D8                     l5074:
 18318                           
 18319                           ;tmr1.c: 96: T1CON = 0x05;
 18320  13D8  3005               	movlw	5
 18321  13D9  0024               	movlb	4	; select bank4
 18322  13DA  008E               	movwf	14	;volatile
 18323  13DB                     l409:
 18324  13DB  0008               	return
 18325  13DC                     __end_of_TMR1_Initialize:
 18326                           
 18327                           	psect	text56
 18328  1210                     __ptext56:	
 18329 ;; *************** function _TMR1_SetInterruptHandler *****************
 18330 ;; Defined at:
 18331 ;;		line 178 in file "mcc_generated_files/tmr1.c"
 18332 ;; Parameters:    Size  Location     Type
 18333 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
 18334 ;;		 -> Clock_ISR(1), TMR1_DefaultInterruptHandler(1), 
 18335 ;; Auto vars:     Size  Location     Type
 18336 ;;		None
 18337 ;; Return value:  Size  Location     Type
 18338 ;;                  1    wreg      void 
 18339 ;; Registers used:
 18340 ;;		wreg
 18341 ;; Tracked objects:
 18342 ;;		On entry : 0/0
 18343 ;;		On exit  : 0/0
 18344 ;;		Unchanged: 0/0
 18345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18349 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18350 ;;Total ram usage:        2 bytes
 18351 ;; Hardware stack levels used:    1
 18352 ;; Hardware stack levels required when called:    4
 18353 ;; This function calls:
 18354 ;;		Nothing
 18355 ;; This function is called by:
 18356 ;;		_TMR1_Initialize
 18357 ;;		_main
 18358 ;; This function uses a non-reentrant model
 18359 ;;
 18360                           
 18361                           
 18362                           ;psect for function _TMR1_SetInterruptHandler
 18363  1210                     _TMR1_SetInterruptHandler:
 18364  1210                     l4726:	
 18365                           ;incstack = 0
 18366                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 18367                           
 18368                           
 18369                           ;tmr1.c: 179: TMR1_InterruptHandler = InterruptHandler;
 18370  1210  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 18371  1211  0021               	movlb	1	; select bank1
 18372  1212  00DB               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
 18373  1213  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 18374  1214  00DA               	movwf	_TMR1_InterruptHandler^(0+128)
 18375  1215                     l439:
 18376  1215  0008               	return
 18377  1216                     __end_of_TMR1_SetInterruptHandler:
 18378                           
 18379                           	psect	text57
 18380  128D                     __ptext57:	
 18381 ;; *************** function _PWM6_Initialize *****************
 18382 ;; Defined at:
 18383 ;;		line 58 in file "mcc_generated_files/pwm6.c"
 18384 ;; Parameters:    Size  Location     Type
 18385 ;;		None
 18386 ;; Auto vars:     Size  Location     Type
 18387 ;;		None
 18388 ;; Return value:  Size  Location     Type
 18389 ;;                  1    wreg      void 
 18390 ;; Registers used:
 18391 ;;		wreg, status,2, status,0
 18392 ;; Tracked objects:
 18393 ;;		On entry : 0/0
 18394 ;;		On exit  : 0/0
 18395 ;;		Unchanged: 0/0
 18396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18401 ;;Total ram usage:        0 bytes
 18402 ;; Hardware stack levels used:    1
 18403 ;; Hardware stack levels required when called:    4
 18404 ;; This function calls:
 18405 ;;		Nothing
 18406 ;; This function is called by:
 18407 ;;		_SYSTEM_Initialize
 18408 ;; This function uses a non-reentrant model
 18409 ;;
 18410                           
 18411                           
 18412                           ;psect for function _PWM6_Initialize
 18413  128D                     _PWM6_Initialize:
 18414  128D                     l5036:	
 18415                           ;incstack = 0
 18416                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 18417                           
 18418                           
 18419                           ;pwm6.c: 62: PWM6CON = 0x80;
 18420  128D  3080               	movlw	128
 18421  128E  0027               	movlb	7	; select bank7
 18422  128F  008E               	movwf	14	;volatile
 18423                           
 18424                           ;pwm6.c: 65: PWM6DCH = 0xFF;
 18425  1290  30FF               	movlw	255
 18426  1291  008D               	movwf	13	;volatile
 18427                           
 18428                           ;pwm6.c: 68: PWM6DCL = 0xC0;
 18429  1292  30C0               	movlw	192
 18430  1293  008C               	movwf	12	;volatile
 18431  1294                     l5038:
 18432                           
 18433                           ;pwm6.c: 71: CCPTMRS1bits.P6TSEL = 1;
 18434  1294  0024               	movlb	4	; select bank4
 18435  1295  081F               	movf	31,w	;volatile
 18436  1296  39F3               	andlw	-13
 18437  1297  3804               	iorlw	4
 18438  1298  009F               	movwf	31	;volatile
 18439  1299                     l617:
 18440  1299  0008               	return
 18441  129A                     __end_of_PWM6_Initialize:
 18442                           
 18443                           	psect	text58
 18444  1228                     __ptext58:	
 18445 ;; *************** function _PMD_Initialize *****************
 18446 ;; Defined at:
 18447 ;;		line 77 in file "mcc_generated_files/mcc.c"
 18448 ;; Parameters:    Size  Location     Type
 18449 ;;		None
 18450 ;; Auto vars:     Size  Location     Type
 18451 ;;		None
 18452 ;; Return value:  Size  Location     Type
 18453 ;;                  1    wreg      void 
 18454 ;; Registers used:
 18455 ;;		status,2
 18456 ;; Tracked objects:
 18457 ;;		On entry : 0/0
 18458 ;;		On exit  : 0/0
 18459 ;;		Unchanged: 0/0
 18460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18465 ;;Total ram usage:        0 bytes
 18466 ;; Hardware stack levels used:    1
 18467 ;; Hardware stack levels required when called:    4
 18468 ;; This function calls:
 18469 ;;		Nothing
 18470 ;; This function is called by:
 18471 ;;		_SYSTEM_Initialize
 18472 ;; This function uses a non-reentrant model
 18473 ;;
 18474                           
 18475                           
 18476                           ;psect for function _PMD_Initialize
 18477  1228                     _PMD_Initialize:
 18478  1228                     l5026:	
 18479                           ;incstack = 0
 18480                           ; Regs used in _PMD_Initialize: [status,2]
 18481                           
 18482                           
 18483                           ;mcc.c: 80: PMD0 = 0x00;
 18484  1228  002F               	movlb	15	; select bank15
 18485  1229  0196               	clrf	22	;volatile
 18486                           
 18487                           ;mcc.c: 82: PMD1 = 0x00;
 18488  122A  0197               	clrf	23	;volatile
 18489                           
 18490                           ;mcc.c: 84: PMD2 = 0x00;
 18491  122B  0198               	clrf	24	;volatile
 18492                           
 18493                           ;mcc.c: 86: PMD3 = 0x00;
 18494  122C  0199               	clrf	25	;volatile
 18495                           
 18496                           ;mcc.c: 88: PMD4 = 0x00;
 18497  122D  019A               	clrf	26	;volatile
 18498                           
 18499                           ;mcc.c: 90: PMD5 = 0x00;
 18500  122E  019B               	clrf	27	;volatile
 18501  122F                     l188:
 18502  122F  0008               	return
 18503  1230                     __end_of_PMD_Initialize:
 18504                           
 18505                           	psect	text59
 18506  0843                     __ptext59:	
 18507 ;; *************** function _PIN_MANAGER_Initialize *****************
 18508 ;; Defined at:
 18509 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 18510 ;; Parameters:    Size  Location     Type
 18511 ;;		None
 18512 ;; Auto vars:     Size  Location     Type
 18513 ;;		None
 18514 ;; Return value:  Size  Location     Type
 18515 ;;                  1    wreg      void 
 18516 ;; Registers used:
 18517 ;;		wreg, status,2
 18518 ;; Tracked objects:
 18519 ;;		On entry : 0/0
 18520 ;;		On exit  : 0/0
 18521 ;;		Unchanged: 0/0
 18522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18527 ;;Total ram usage:        0 bytes
 18528 ;; Hardware stack levels used:    1
 18529 ;; Hardware stack levels required when called:    4
 18530 ;; This function calls:
 18531 ;;		Nothing
 18532 ;; This function is called by:
 18533 ;;		_SYSTEM_Initialize
 18534 ;; This function uses a non-reentrant model
 18535 ;;
 18536                           
 18537                           
 18538                           ;psect for function _PIN_MANAGER_Initialize
 18539  0843                     _PIN_MANAGER_Initialize:
 18540  0843                     l4978:	
 18541                           ;incstack = 0
 18542                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 18543                           
 18544                           
 18545                           ;pin_manager.c: 62: LATE = 0x00;
 18546  0843  0020               	movlb	0	; select bank0
 18547  0844  019A               	clrf	26	;volatile
 18548                           
 18549                           ;pin_manager.c: 63: LATD = 0x00;
 18550  0845  0199               	clrf	25	;volatile
 18551                           
 18552                           ;pin_manager.c: 64: LATA = 0x00;
 18553  0846  0196               	clrf	22	;volatile
 18554                           
 18555                           ;pin_manager.c: 65: LATB = 0x00;
 18556  0847  0197               	clrf	23	;volatile
 18557                           
 18558                           ;pin_manager.c: 66: LATC = 0x00;
 18559  0848  0198               	clrf	24	;volatile
 18560  0849                     l4980:
 18561                           
 18562                           ;pin_manager.c: 71: TRISE = 0x07;
 18563  0849  3007               	movlw	7
 18564  084A  0095               	movwf	21	;volatile
 18565  084B                     l4982:
 18566                           
 18567                           ;pin_manager.c: 72: TRISA = 0x0F;
 18568  084B  300F               	movlw	15
 18569  084C  0091               	movwf	17	;volatile
 18570  084D                     l4984:
 18571                           
 18572                           ;pin_manager.c: 73: TRISB = 0xFF;
 18573  084D  30FF               	movlw	255
 18574  084E  0092               	movwf	18	;volatile
 18575  084F                     l4986:
 18576                           
 18577                           ;pin_manager.c: 74: TRISC = 0xBF;
 18578  084F  30BF               	movlw	191
 18579  0850  0093               	movwf	19	;volatile
 18580  0851                     l4988:
 18581                           
 18582                           ;pin_manager.c: 75: TRISD = 0xFF;
 18583  0851  30FF               	movlw	255
 18584  0852  0094               	movwf	20	;volatile
 18585  0853                     l4990:
 18586                           
 18587                           ;pin_manager.c: 80: ANSELD = 0xFF;
 18588  0853  30FF               	movlw	255
 18589  0854  003E               	movlb	30	; select bank30
 18590  0855  00D9               	movwf	89	;volatile
 18591  0856                     l4992:
 18592                           
 18593                           ;pin_manager.c: 81: ANSELC = 0x47;
 18594  0856  3047               	movlw	71
 18595  0857  00CE               	movwf	78	;volatile
 18596  0858                     l4994:
 18597                           
 18598                           ;pin_manager.c: 82: ANSELB = 0xEF;
 18599  0858  30EF               	movlw	239
 18600  0859  00C3               	movwf	67	;volatile
 18601  085A                     l4996:
 18602                           
 18603                           ;pin_manager.c: 83: ANSELE = 0x07;
 18604  085A  3007               	movlw	7
 18605  085B  00E4               	movwf	100	;volatile
 18606  085C                     l4998:
 18607                           
 18608                           ;pin_manager.c: 84: ANSELA = 0x4F;
 18609  085C  304F               	movlw	79
 18610  085D  00B8               	movwf	56	;volatile
 18611                           
 18612                           ;pin_manager.c: 89: WPUD = 0x00;
 18613  085E  01DA               	clrf	90	;volatile
 18614                           
 18615                           ;pin_manager.c: 90: WPUE = 0x00;
 18616  085F  01E5               	clrf	101	;volatile
 18617                           
 18618                           ;pin_manager.c: 91: WPUB = 0x00;
 18619  0860  01C4               	clrf	68	;volatile
 18620                           
 18621                           ;pin_manager.c: 92: WPUA = 0x00;
 18622  0861  01B9               	clrf	57	;volatile
 18623                           
 18624                           ;pin_manager.c: 93: WPUC = 0x00;
 18625  0862  01CF               	clrf	79	;volatile
 18626                           
 18627                           ;pin_manager.c: 98: ODCONE = 0x00;
 18628  0863  01E6               	clrf	102	;volatile
 18629                           
 18630                           ;pin_manager.c: 99: ODCONA = 0x00;
 18631  0864  01BA               	clrf	58	;volatile
 18632                           
 18633                           ;pin_manager.c: 100: ODCONB = 0x00;
 18634  0865  01C5               	clrf	69	;volatile
 18635                           
 18636                           ;pin_manager.c: 101: ODCONC = 0x00;
 18637  0866  01D0               	clrf	80	;volatile
 18638                           
 18639                           ;pin_manager.c: 102: ODCOND = 0x00;
 18640  0867  01DB               	clrf	91	;volatile
 18641  0868                     l5000:
 18642                           
 18643                           ;pin_manager.c: 107: SLRCONA = 0xFF;
 18644  0868  30FF               	movlw	255
 18645  0869  00BB               	movwf	59	;volatile
 18646  086A                     l5002:
 18647                           
 18648                           ;pin_manager.c: 108: SLRCONB = 0xFF;
 18649  086A  30FF               	movlw	255
 18650  086B  00C6               	movwf	70	;volatile
 18651  086C                     l5004:
 18652                           
 18653                           ;pin_manager.c: 109: SLRCONC = 0xFF;
 18654  086C  30FF               	movlw	255
 18655  086D  00D1               	movwf	81	;volatile
 18656  086E                     l5006:
 18657                           
 18658                           ;pin_manager.c: 110: SLRCOND = 0xFF;
 18659  086E  30FF               	movlw	255
 18660  086F  00DC               	movwf	92	;volatile
 18661  0870                     l5008:
 18662                           
 18663                           ;pin_manager.c: 111: SLRCONE = 0x07;
 18664  0870  3007               	movlw	7
 18665  0871  00E7               	movwf	103	;volatile
 18666  0872                     l5010:
 18667                           
 18668                           ;pin_manager.c: 120: INTPPS = 0x0C;
 18669  0872  300C               	movlw	12
 18670  0873  003D               	movlb	29	; select bank29
 18671  0874  0090               	movwf	16	;volatile
 18672  0875                     l5012:
 18673                           
 18674                           ;pin_manager.c: 121: RXPPS = 0x17;
 18675  0875  3017               	movlw	23
 18676  0876  00CB               	movwf	75	;volatile
 18677  0877                     l5014:
 18678                           
 18679                           ;pin_manager.c: 122: SSP1CLKPPS = 0x13;
 18680  0877  3013               	movlw	19
 18681  0878  00C5               	movwf	69	;volatile
 18682  0879                     l5016:
 18683                           
 18684                           ;pin_manager.c: 123: RC3PPS = 0x14;
 18685  0879  3014               	movlw	20
 18686  087A  003E               	movlb	30	; select bank30
 18687  087B  00A3               	movwf	35	;volatile
 18688  087C                     l5018:
 18689                           
 18690                           ;pin_manager.c: 124: RC4PPS = 0x15;
 18691  087C  3015               	movlw	21
 18692  087D  00A4               	movwf	36	;volatile
 18693  087E                     l5020:
 18694                           
 18695                           ;pin_manager.c: 125: RA6PPS = 0x0E;
 18696  087E  300E               	movlw	14
 18697  087F  0096               	movwf	22	;volatile
 18698  0880                     l5022:
 18699                           
 18700                           ;pin_manager.c: 126: RC6PPS = 0x10;
 18701  0880  3010               	movlw	16
 18702  0881  00A6               	movwf	38	;volatile
 18703  0882                     l5024:
 18704                           
 18705                           ;pin_manager.c: 127: SSP1DATPPS = 0x14;
 18706  0882  3014               	movlw	20
 18707  0883  003D               	movlb	29	; select bank29
 18708  0884  00C6               	movwf	70	;volatile
 18709  0885                     l128:
 18710  0885  0008               	return
 18711  0886                     __end_of_PIN_MANAGER_Initialize:
 18712                           
 18713                           	psect	text60
 18714  1249                     __ptext60:	
 18715 ;; *************** function _OSCILLATOR_Initialize *****************
 18716 ;; Defined at:
 18717 ;;		line 63 in file "mcc_generated_files/mcc.c"
 18718 ;; Parameters:    Size  Location     Type
 18719 ;;		None
 18720 ;; Auto vars:     Size  Location     Type
 18721 ;;		None
 18722 ;; Return value:  Size  Location     Type
 18723 ;;                  1    wreg      void 
 18724 ;; Registers used:
 18725 ;;		wreg, status,2
 18726 ;; Tracked objects:
 18727 ;;		On entry : 0/0
 18728 ;;		On exit  : 0/0
 18729 ;;		Unchanged: 0/0
 18730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18735 ;;Total ram usage:        0 bytes
 18736 ;; Hardware stack levels used:    1
 18737 ;; Hardware stack levels required when called:    4
 18738 ;; This function calls:
 18739 ;;		Nothing
 18740 ;; This function is called by:
 18741 ;;		_SYSTEM_Initialize
 18742 ;; This function uses a non-reentrant model
 18743 ;;
 18744                           
 18745                           
 18746                           ;psect for function _OSCILLATOR_Initialize
 18747  1249                     _OSCILLATOR_Initialize:
 18748  1249                     l5028:	
 18749                           ;incstack = 0
 18750                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 18751                           
 18752                           
 18753                           ;mcc.c: 66: OSCCON1 = 0x62;
 18754  1249  3062               	movlw	98
 18755  124A  0031               	movlb	17	; select bank17
 18756  124B  008D               	movwf	13	;volatile
 18757  124C                     l5030:
 18758                           
 18759                           ;mcc.c: 68: OSCCON3 = 0x00;
 18760  124C  018F               	clrf	15	;volatile
 18761  124D                     l5032:
 18762                           
 18763                           ;mcc.c: 70: OSCEN = 0x00;
 18764  124D  0191               	clrf	17	;volatile
 18765                           
 18766                           ;mcc.c: 72: OSCFRQ = 0x02;
 18767  124E  3002               	movlw	2
 18768  124F  0093               	movwf	19	;volatile
 18769  1250                     l5034:
 18770                           
 18771                           ;mcc.c: 74: OSCTUNE = 0x00;
 18772  1250  0192               	clrf	18	;volatile
 18773  1251                     l185:
 18774  1251  0008               	return
 18775  1252                     __end_of_OSCILLATOR_Initialize:
 18776                           
 18777                           	psect	text61
 18778  1280                     __ptext61:	
 18779 ;; *************** function _EXT_INT_Initialize *****************
 18780 ;; Defined at:
 18781 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 18782 ;; Parameters:    Size  Location     Type
 18783 ;;		None
 18784 ;; Auto vars:     Size  Location     Type
 18785 ;;		None
 18786 ;; Return value:  Size  Location     Type
 18787 ;;                  1    wreg      void 
 18788 ;; Registers used:
 18789 ;;		wreg, status,2, status,0, pclath, cstack
 18790 ;; Tracked objects:
 18791 ;;		On entry : 0/0
 18792 ;;		On exit  : 0/0
 18793 ;;		Unchanged: 0/0
 18794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18799 ;;Total ram usage:        0 bytes
 18800 ;; Hardware stack levels used:    1
 18801 ;; Hardware stack levels required when called:    5
 18802 ;; This function calls:
 18803 ;;		_INT_SetInterruptHandler
 18804 ;; This function is called by:
 18805 ;;		_SYSTEM_Initialize
 18806 ;; This function uses a non-reentrant model
 18807 ;;
 18808                           
 18809                           
 18810                           ;psect for function _EXT_INT_Initialize
 18811  1280                     _EXT_INT_Initialize:
 18812  1280                     l5076:	
 18813                           ;incstack = 0
 18814                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18815                           
 18816                           
 18817                           ;ext_int.c: 64: (PIR0bits.INTF = 0);
 18818  1280  002E               	movlb	14	; select bank14
 18819  1281  100C               	bcf	12,0	;volatile
 18820                           
 18821                           ;ext_int.c: 66: (INTCONbits.INTEDG = 1);
 18822  1282  140B               	bsf	11,0	;volatile
 18823  1283                     l5078:
 18824                           
 18825                           ;ext_int.c: 68: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
 18826  1283  30DA               	movlw	low _INT_DefaultInterruptHandler
 18827  1284  00F2               	movwf	INT_SetInterruptHandler@InterruptHandler
 18828  1285  3011               	movlw	high _INT_DefaultInterruptHandler
 18829  1286  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler+1
 18830  1287  3192  220A  3192   	fcall	_INT_SetInterruptHandler
 18831  128A                     l5080:
 18832                           
 18833                           ;ext_int.c: 69: (PIE0bits.INTE = 1);
 18834  128A  002E               	movlb	14	; select bank14
 18835  128B  1416               	bsf	22,0	;volatile
 18836  128C                     l760:
 18837  128C  0008               	return
 18838  128D                     __end_of_EXT_INT_Initialize:
 18839                           
 18840                           	psect	text62
 18841  120A                     __ptext62:	
 18842 ;; *************** function _INT_SetInterruptHandler *****************
 18843 ;; Defined at:
 18844 ;;		line 50 in file "mcc_generated_files/ext_int.c"
 18845 ;; Parameters:    Size  Location     Type
 18846 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
 18847 ;;		 -> S1_ISR(1), INT_DefaultInterruptHandler(1), 
 18848 ;; Auto vars:     Size  Location     Type
 18849 ;;		None
 18850 ;; Return value:  Size  Location     Type
 18851 ;;                  1    wreg      void 
 18852 ;; Registers used:
 18853 ;;		wreg
 18854 ;; Tracked objects:
 18855 ;;		On entry : 0/0
 18856 ;;		On exit  : 0/0
 18857 ;;		Unchanged: 0/0
 18858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18859 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18862 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18863 ;;Total ram usage:        2 bytes
 18864 ;; Hardware stack levels used:    1
 18865 ;; Hardware stack levels required when called:    4
 18866 ;; This function calls:
 18867 ;;		Nothing
 18868 ;; This function is called by:
 18869 ;;		_EXT_INT_Initialize
 18870 ;;		_main
 18871 ;; This function uses a non-reentrant model
 18872 ;;
 18873                           
 18874                           
 18875                           ;psect for function _INT_SetInterruptHandler
 18876  120A                     _INT_SetInterruptHandler:
 18877  120A                     l4730:	
 18878                           ;incstack = 0
 18879                           ; Regs used in _INT_SetInterruptHandler: [wreg]
 18880                           
 18881                           
 18882                           ;ext_int.c: 51: INT_InterruptHandler = InterruptHandler;
 18883  120A  0873               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
 18884  120B  0021               	movlb	1	; select bank1
 18885  120C  00D9               	movwf	(_INT_InterruptHandler+1)^(0+128)
 18886  120D  0872               	movf	INT_SetInterruptHandler@InterruptHandler,w
 18887  120E  00D8               	movwf	_INT_InterruptHandler^(0+128)
 18888  120F                     l754:
 18889  120F  0008               	return
 18890  1210                     __end_of_INT_SetInterruptHandler:
 18891                           
 18892                           	psect	text63
 18893  07D5                     __ptext63:	
 18894 ;; *************** function _EUSART_Initialize *****************
 18895 ;; Defined at:
 18896 ;;		line 75 in file "mcc_generated_files/eusart.c"
 18897 ;; Parameters:    Size  Location     Type
 18898 ;;		None
 18899 ;; Auto vars:     Size  Location     Type
 18900 ;;		None
 18901 ;; Return value:  Size  Location     Type
 18902 ;;                  1    wreg      void 
 18903 ;; Registers used:
 18904 ;;		wreg, status,2, status,0, pclath, cstack
 18905 ;; Tracked objects:
 18906 ;;		On entry : 0/0
 18907 ;;		On exit  : 0/0
 18908 ;;		Unchanged: 0/0
 18909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18914 ;;Total ram usage:        1 bytes
 18915 ;; Hardware stack levels used:    1
 18916 ;; Hardware stack levels required when called:    5
 18917 ;; This function calls:
 18918 ;;		_EUSART_SetRxInterruptHandler
 18919 ;;		_EUSART_SetTxInterruptHandler
 18920 ;; This function is called by:
 18921 ;;		_SYSTEM_Initialize
 18922 ;; This function uses a non-reentrant model
 18923 ;;
 18924                           
 18925                           
 18926                           ;psect for function _EUSART_Initialize
 18927  07D5                     _EUSART_Initialize:
 18928  07D5                     l5082:	
 18929                           ;incstack = 0
 18930                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18931                           
 18932                           
 18933                           ;eusart.c: 78: PIE3bits.RCIE = 0;
 18934  07D5  002E               	movlb	14	; select bank14
 18935  07D6  1299               	bcf	25,5	;volatile
 18936  07D7                     l5084:
 18937                           
 18938                           ;eusart.c: 79: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 18939  07D7  3037               	movlw	low _EUSART_Receive_ISR
 18940  07D8  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 18941  07D9  3014               	movlw	high _EUSART_Receive_ISR
 18942  07DA  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 18943  07DB  3191  21FE  3187   	fcall	_EUSART_SetRxInterruptHandler
 18944  07DE                     l5086:
 18945                           
 18946                           ;eusart.c: 80: PIE3bits.TXIE = 0;
 18947  07DE  002E               	movlb	14	; select bank14
 18948  07DF  1219               	bcf	25,4	;volatile
 18949                           
 18950                           ;eusart.c: 81: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
 18951  07E0  3003               	movlw	low _EUSART_Transmit_ISR
 18952  07E1  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 18953  07E2  3015               	movlw	high _EUSART_Transmit_ISR
 18954  07E3  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 18955  07E4  3192  2204  3187   	fcall	_EUSART_SetTxInterruptHandler
 18956  07E7                     l5088:
 18957                           
 18958                           ;eusart.c: 85: BAUD1CON = 0x08;
 18959  07E7  3008               	movlw	8
 18960  07E8  0022               	movlb	2	; select bank2
 18961  07E9  009F               	movwf	31	;volatile
 18962  07EA                     l5090:
 18963                           
 18964                           ;eusart.c: 88: RC1STA = 0x90;
 18965  07EA  3090               	movlw	144
 18966  07EB  009D               	movwf	29	;volatile
 18967  07EC                     l5092:
 18968                           
 18969                           ;eusart.c: 91: TX1STA = 0x24;
 18970  07EC  3024               	movlw	36
 18971  07ED  009E               	movwf	30	;volatile
 18972  07EE                     l5094:
 18973                           
 18974                           ;eusart.c: 94: SP1BRGL = 0x19;
 18975  07EE  3019               	movlw	25
 18976  07EF  009B               	movwf	27	;volatile
 18977  07F0                     l5096:
 18978                           
 18979                           ;eusart.c: 97: SP1BRGH = 0x00;
 18980  07F0  019C               	clrf	28	;volatile
 18981  07F1                     l5098:
 18982                           
 18983                           ;eusart.c: 101: eusartTxHead = 0;
 18984  07F1  0020               	movlb	0	; select bank0
 18985  07F2  01EC               	clrf	_eusartTxHead	;volatile
 18986  07F3                     l5100:
 18987                           
 18988                           ;eusart.c: 102: eusartTxTail = 0;
 18989  07F3  01EB               	clrf	_eusartTxTail	;volatile
 18990  07F4                     l5102:
 18991                           
 18992                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 18993  07F4  3040               	movlw	64
 18994  07F5  00F4               	movwf	??_EUSART_Initialize
 18995  07F6  0874               	movf	??_EUSART_Initialize,w
 18996  07F7  0021               	movlb	1	; select bank1
 18997  07F8  00E2               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
 18998  07F9                     l5104:
 18999                           
 19000                           ;eusart.c: 105: eusartRxHead = 0;
 19001  07F9  0020               	movlb	0	; select bank0
 19002  07FA  01EA               	clrf	_eusartRxHead	;volatile
 19003  07FB                     l5106:
 19004                           
 19005                           ;eusart.c: 106: eusartRxTail = 0;
 19006  07FB  01E9               	clrf	_eusartRxTail	;volatile
 19007  07FC                     l5108:
 19008                           
 19009                           ;eusart.c: 107: eusartRxCount = 0;
 19010  07FC  01E8               	clrf	_eusartRxCount	;volatile
 19011  07FD                     l5110:
 19012                           
 19013                           ;eusart.c: 110: PIE3bits.RCIE = 1;
 19014  07FD  002E               	movlb	14	; select bank14
 19015  07FE  1699               	bsf	25,5	;volatile
 19016  07FF                     l811:
 19017  07FF  0008               	return
 19018  0800                     __end_of_EUSART_Initialize:
 19019                           
 19020                           	psect	text64
 19021  1204                     __ptext64:	
 19022 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 19023 ;; Defined at:
 19024 ;;		line 220 in file "mcc_generated_files/eusart.c"
 19025 ;; Parameters:    Size  Location     Type
 19026 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
 19027 ;;		 -> EUSART_Transmit_ISR(1), 
 19028 ;; Auto vars:     Size  Location     Type
 19029 ;;		None
 19030 ;; Return value:  Size  Location     Type
 19031 ;;                  1    wreg      void 
 19032 ;; Registers used:
 19033 ;;		wreg
 19034 ;; Tracked objects:
 19035 ;;		On entry : 0/0
 19036 ;;		On exit  : 0/0
 19037 ;;		Unchanged: 0/0
 19038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19039 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19043 ;;Total ram usage:        2 bytes
 19044 ;; Hardware stack levels used:    1
 19045 ;; Hardware stack levels required when called:    4
 19046 ;; This function calls:
 19047 ;;		Nothing
 19048 ;; This function is called by:
 19049 ;;		_EUSART_Initialize
 19050 ;; This function uses a non-reentrant model
 19051 ;;
 19052                           
 19053                           
 19054                           ;psect for function _EUSART_SetTxInterruptHandler
 19055  1204                     _EUSART_SetTxInterruptHandler:
 19056  1204                     l4734:	
 19057                           ;incstack = 0
 19058                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 19059                           
 19060                           
 19061                           ;eusart.c: 221: EUSART_TxDefaultInterruptHandler = interruptHandler;
 19062  1204  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 19063  1205  0021               	movlb	1	; select bank1
 19064  1206  00E1               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
 19065  1207  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 19066  1208  00E0               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
 19067  1209                     l856:
 19068  1209  0008               	return
 19069  120A                     __end_of_EUSART_SetTxInterruptHandler:
 19070                           
 19071                           	psect	text65
 19072  11FE                     __ptext65:	
 19073 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 19074 ;; Defined at:
 19075 ;;		line 224 in file "mcc_generated_files/eusart.c"
 19076 ;; Parameters:    Size  Location     Type
 19077 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
 19078 ;;		 -> EUSART_Receive_ISR(1), 
 19079 ;; Auto vars:     Size  Location     Type
 19080 ;;		None
 19081 ;; Return value:  Size  Location     Type
 19082 ;;                  1    wreg      void 
 19083 ;; Registers used:
 19084 ;;		wreg
 19085 ;; Tracked objects:
 19086 ;;		On entry : 0/0
 19087 ;;		On exit  : 0/0
 19088 ;;		Unchanged: 0/0
 19089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19093 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19094 ;;Total ram usage:        2 bytes
 19095 ;; Hardware stack levels used:    1
 19096 ;; Hardware stack levels required when called:    4
 19097 ;; This function calls:
 19098 ;;		Nothing
 19099 ;; This function is called by:
 19100 ;;		_EUSART_Initialize
 19101 ;; This function uses a non-reentrant model
 19102 ;;
 19103                           
 19104                           
 19105                           ;psect for function _EUSART_SetRxInterruptHandler
 19106  11FE                     _EUSART_SetRxInterruptHandler:
 19107  11FE                     l4732:	
 19108                           ;incstack = 0
 19109                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 19110                           
 19111                           
 19112                           ;eusart.c: 225: EUSART_RxDefaultInterruptHandler = interruptHandler;
 19113  11FE  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 19114  11FF  0021               	movlb	1	; select bank1
 19115  1200  00DF               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
 19116  1201  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 19117  1202  00DE               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
 19118  1203                     l859:
 19119  1203  0008               	return
 19120  1204                     __end_of_EUSART_SetRxInterruptHandler:
 19121                           
 19122                           	psect	text66
 19123  130A                     __ptext66:	
 19124 ;; *************** function _ADCC_Initialize *****************
 19125 ;; Defined at:
 19126 ;;		line 63 in file "mcc_generated_files/adcc.c"
 19127 ;; Parameters:    Size  Location     Type
 19128 ;;		None
 19129 ;; Auto vars:     Size  Location     Type
 19130 ;;		None
 19131 ;; Return value:  Size  Location     Type
 19132 ;;                  1    wreg      void 
 19133 ;; Registers used:
 19134 ;;		wreg, status,2
 19135 ;; Tracked objects:
 19136 ;;		On entry : 0/0
 19137 ;;		On exit  : 0/0
 19138 ;;		Unchanged: 0/0
 19139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19144 ;;Total ram usage:        0 bytes
 19145 ;; Hardware stack levels used:    1
 19146 ;; Hardware stack levels required when called:    4
 19147 ;; This function calls:
 19148 ;;		Nothing
 19149 ;; This function is called by:
 19150 ;;		_SYSTEM_Initialize
 19151 ;; This function uses a non-reentrant model
 19152 ;;
 19153                           
 19154                           
 19155                           ;psect for function _ADCC_Initialize
 19156  130A                     _ADCC_Initialize:
 19157  130A                     l5040:	
 19158                           ;incstack = 0
 19159                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 19160                           
 19161                           
 19162                           ;adcc.c: 67: ADLTHL = 0x00;
 19163  130A  0022               	movlb	2	; select bank2
 19164  130B  018E               	clrf	14	;volatile
 19165                           
 19166                           ;adcc.c: 69: ADLTHH = 0x00;
 19167  130C  018F               	clrf	15	;volatile
 19168                           
 19169                           ;adcc.c: 71: ADUTHL = 0x00;
 19170  130D  0190               	clrf	16	;volatile
 19171                           
 19172                           ;adcc.c: 73: ADUTHH = 0x00;
 19173  130E  0191               	clrf	17	;volatile
 19174                           
 19175                           ;adcc.c: 75: ADSTPTL = 0x00;
 19176  130F  0192               	clrf	18	;volatile
 19177                           
 19178                           ;adcc.c: 77: ADSTPTH = 0x00;
 19179  1310  0193               	clrf	19	;volatile
 19180                           
 19181                           ;adcc.c: 79: ADRPT = 0x00;
 19182  1311  018D               	clrf	13	;volatile
 19183                           
 19184                           ;adcc.c: 81: ADPCH = 0x00;
 19185  1312  0021               	movlb	1	; select bank1
 19186  1313  019E               	clrf	30	;volatile
 19187                           
 19188                           ;adcc.c: 83: ADCAP = 0x00;
 19189  1314  019B               	clrf	27	;volatile
 19190                           
 19191                           ;adcc.c: 85: ADCON1 = 0x00;
 19192  1315  0194               	clrf	20	;volatile
 19193                           
 19194                           ;adcc.c: 87: ADCON2 = 0x00;
 19195  1316  0195               	clrf	21	;volatile
 19196                           
 19197                           ;adcc.c: 89: ADCON3 = 0x00;
 19198  1317  0196               	clrf	22	;volatile
 19199                           
 19200                           ;adcc.c: 91: ADSTAT = 0x00;
 19201  1318  0197               	clrf	23	;volatile
 19202                           
 19203                           ;adcc.c: 93: ADREF = 0x00;
 19204  1319  019A               	clrf	26	;volatile
 19205                           
 19206                           ;adcc.c: 95: ADACT = 0x00;
 19207  131A  0199               	clrf	25	;volatile
 19208                           
 19209                           ;adcc.c: 97: ADCLK = 0x00;
 19210  131B  0198               	clrf	24	;volatile
 19211  131C                     l5042:
 19212                           
 19213                           ;adcc.c: 99: ADCON0 = 0x80;
 19214  131C  3080               	movlw	128
 19215  131D  0093               	movwf	19	;volatile
 19216  131E                     l5044:
 19217                           
 19218                           ;adcc.c: 101: ADACQ = 0xFF;
 19219  131E  30FF               	movlw	255
 19220  131F  009D               	movwf	29	;volatile
 19221  1320                     l525:
 19222  1320  0008               	return
 19223  1321                     __end_of_ADCC_Initialize:
 19224                           
 19225                           	psect	text67
 19226  0A64                     __ptext67:	
 19227 ;; *************** function _LCDinit *****************
 19228 ;; Defined at:
 19229 ;;		line 286 in file "main.c"
 19230 ;; Parameters:    Size  Location     Type
 19231 ;;		None
 19232 ;; Auto vars:     Size  Location     Type
 19233 ;;		None
 19234 ;; Return value:  Size  Location     Type
 19235 ;;                  1    wreg      void 
 19236 ;; Registers used:
 19237 ;;		wreg, status,2, status,0, pclath, cstack
 19238 ;; Tracked objects:
 19239 ;;		On entry : 0/0
 19240 ;;		On exit  : 0/0
 19241 ;;		Unchanged: 0/0
 19242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19246 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19247 ;;Total ram usage:        1 bytes
 19248 ;; Hardware stack levels used:    1
 19249 ;; Hardware stack levels required when called:    6
 19250 ;; This function calls:
 19251 ;;		_LCDsend
 19252 ;;		_LCDsend2x4
 19253 ;; This function is called by:
 19254 ;;		_main
 19255 ;; This function uses a non-reentrant model
 19256 ;;
 19257                           
 19258                           
 19259                           ;psect for function _LCDinit
 19260  0A64                     _LCDinit:
 19261  0A64                     l6648:	
 19262                           ;incstack = 0
 19263                           ; Regs used in _LCDinit: [wreg+status,2+status,0+pclath+cstack]
 19264                           
 19265                           
 19266                           ;main.c: 288: _delay((unsigned long)((50)*(1000000/4000.0)));
 19267  0A64  3011               	movlw	17
 19268  0A65  0020               	movlb	0	; select bank0
 19269  0A66  00A0               	movwf	??_LCDinit
 19270  0A67  303A               	movlw	58
 19271  0A68                     u8477:
 19272  0A68  0B89               	decfsz	9,f
 19273  0A69  2A68               	goto	u8477
 19274  0A6A  0BA0               	decfsz	??_LCDinit,f
 19275  0A6B  2A68               	goto	u8477
 19276  0A6C  0000               	nop
 19277  0A6D                     l6650:
 19278                           
 19279                           ;main.c: 289: LCDsend(0x30);
 19280  0A6D  3030               	movlw	48
 19281  0A6E  3188  2000  318A   	fcall	_LCDsend
 19282  0A71                     l6652:
 19283                           
 19284                           ;main.c: 290: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19285  0A71  3034               	movlw	52
 19286  0A72  3188  2000  318A   	fcall	_LCDsend
 19287  0A75  3029               	movlw	41
 19288  0A76                     u8487:
 19289  0A76  0B89               	decfsz	9,f
 19290  0A77  2A76               	goto	u8487
 19291  0A78  3200               	nop2
 19292  0A79                     l6654:
 19293  0A79  3030               	movlw	48
 19294  0A7A  3188  2000  318A   	fcall	_LCDsend
 19295  0A7D                     l6656:
 19296                           
 19297                           ;main.c: 291: _delay((unsigned long)((5)*(1000000/4000.0)));
 19298  0A7D  30FA               	movlw	250
 19299  0A7E                     u8497:
 19300  0A7E  3200               	nop2
 19301  0A7F  0B89               	decfsz	9,f
 19302  0A80  2A7E               	goto	u8497
 19303                           
 19304                           ;main.c: 292: LCDsend(0x30);
 19305  0A81  3030               	movlw	48
 19306  0A82  3188  2000  318A   	fcall	_LCDsend
 19307                           
 19308                           ;main.c: 293: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19309  0A85  3034               	movlw	52
 19310  0A86  3188  2000  318A   	fcall	_LCDsend
 19311  0A89                     l6658:
 19312  0A89  3029               	movlw	41
 19313  0A8A                     u8507:
 19314  0A8A  0B89               	decfsz	9,f
 19315  0A8B  2A8A               	goto	u8507
 19316  0A8C  3200               	nop2
 19317  0A8D                     l6660:
 19318  0A8D  3030               	movlw	48
 19319  0A8E  3188  2000  318A   	fcall	_LCDsend
 19320                           
 19321                           ;main.c: 294: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19322  0A91  3008               	movlw	8
 19323  0A92                     u8517:
 19324  0A92  0B89               	decfsz	9,f
 19325  0A93  2A92               	goto	u8517
 19326  0A94  0000               	nop
 19327  0A95                     l6662:
 19328                           
 19329                           ;main.c: 295: LCDsend(0x30);
 19330  0A95  3030               	movlw	48
 19331  0A96  3188  2000  318A   	fcall	_LCDsend
 19332  0A99                     l6664:
 19333                           
 19334                           ;main.c: 296: LCDsend(0x34); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x30);
 19335  0A99  3034               	movlw	52
 19336  0A9A  3188  2000  318A   	fcall	_LCDsend
 19337  0A9D  3029               	movlw	41
 19338  0A9E                     u8527:
 19339  0A9E  0B89               	decfsz	9,f
 19340  0A9F  2A9E               	goto	u8527
 19341  0AA0  3200               	nop2
 19342  0AA1                     l6666:
 19343  0AA1  3030               	movlw	48
 19344  0AA2  3188  2000  318A   	fcall	_LCDsend
 19345  0AA5                     l6668:
 19346                           
 19347                           ;main.c: 297: _delay((unsigned long)((100)*(1000000/4000000.0)));
 19348  0AA5  3008               	movlw	8
 19349  0AA6                     u8537:
 19350  0AA6  0B89               	decfsz	9,f
 19351  0AA7  2AA6               	goto	u8537
 19352  0AA8  0000               	nop
 19353                           
 19354                           ;main.c: 298: LCDsend(0x20);
 19355  0AA9  3020               	movlw	32
 19356  0AAA  3188  2000  318A   	fcall	_LCDsend
 19357                           
 19358                           ;main.c: 299: LCDsend(0x24); _delay((unsigned long)((500)*(1000000/4000000.0))); LCDsend
      +                          (0x20);
 19359  0AAD  3024               	movlw	36
 19360  0AAE  3188  2000  318A   	fcall	_LCDsend
 19361  0AB1                     l6670:
 19362  0AB1  3029               	movlw	41
 19363  0AB2                     u8547:
 19364  0AB2  0B89               	decfsz	9,f
 19365  0AB3  2AB2               	goto	u8547
 19366  0AB4  3200               	nop2
 19367  0AB5                     l6672:
 19368  0AB5  3020               	movlw	32
 19369  0AB6  3188  2000  318A   	fcall	_LCDsend
 19370                           
 19371                           ;main.c: 300: _delay((unsigned long)((5)*(1000000/4000.0)));
 19372  0AB9  30FA               	movlw	250
 19373  0ABA                     u8557:
 19374  0ABA  3200               	nop2
 19375  0ABB  0B89               	decfsz	9,f
 19376  0ABC  2ABA               	goto	u8557
 19377  0ABD                     l6674:
 19378                           
 19379                           ;main.c: 302: LCDsend2x4(0x28, 0);
 19380  0ABD  01F4               	clrf	LCDsend2x4@mode
 19381  0ABE  3028               	movlw	40
 19382  0ABF  3187  2722  318A   	fcall	_LCDsend2x4
 19383  0AC2                     l6676:
 19384                           
 19385                           ;main.c: 303: LCDsend2x4(0x06, 0);
 19386  0AC2  01F4               	clrf	LCDsend2x4@mode
 19387  0AC3  3006               	movlw	6
 19388  0AC4  3187  2722  318A   	fcall	_LCDsend2x4
 19389  0AC7                     l6678:
 19390                           
 19391                           ;main.c: 304: LCDsend2x4(0x0f, 0);
 19392  0AC7  01F4               	clrf	LCDsend2x4@mode
 19393  0AC8  300F               	movlw	15
 19394  0AC9  3187  2722  318A   	fcall	_LCDsend2x4
 19395  0ACC                     l6680:
 19396                           
 19397                           ;main.c: 305: LCDsend2x4(0x01, 0);
 19398  0ACC  01F4               	clrf	LCDsend2x4@mode
 19399  0ACD  3001               	movlw	1
 19400  0ACE  3187  2722  318A   	fcall	_LCDsend2x4
 19401                           
 19402                           ;main.c: 306: _delay((unsigned long)((2)*(1000000/4000.0)));
 19403  0AD1  30A6               	movlw	166
 19404  0AD2                     u8567:
 19405  0AD2  0B89               	decfsz	9,f
 19406  0AD3  2AD2               	goto	u8567
 19407  0AD4  3200               	nop2
 19408  0AD5                     l1229:
 19409  0AD5  0008               	return
 19410  0AD6                     __end_of_LCDinit:
 19411                           
 19412                           	psect	text68
 19413  0722                     __ptext68:	
 19414 ;; *************** function _LCDsend2x4 *****************
 19415 ;; Defined at:
 19416 ;;		line 263 in file "main.c"
 19417 ;; Parameters:    Size  Location     Type
 19418 ;;  c               1    wreg     unsigned char 
 19419 ;;  mode            1    4[COMMON] unsigned char 
 19420 ;; Auto vars:     Size  Location     Type
 19421 ;;  c               1    7[COMMON] unsigned char 
 19422 ;;  lc              1    9[COMMON] unsigned char 
 19423 ;;  hc              1    8[COMMON] unsigned char 
 19424 ;; Return value:  Size  Location     Type
 19425 ;;                  1    wreg      void 
 19426 ;; Registers used:
 19427 ;;		wreg, status,2, status,0, pclath, cstack
 19428 ;; Tracked objects:
 19429 ;;		On entry : 0/0
 19430 ;;		On exit  : 0/0
 19431 ;;		Unchanged: 0/0
 19432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19433 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19434 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19436 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19437 ;;Total ram usage:        6 bytes
 19438 ;; Hardware stack levels used:    1
 19439 ;; Hardware stack levels required when called:    5
 19440 ;; This function calls:
 19441 ;;		_WriteI2C
 19442 ;; This function is called by:
 19443 ;;		_LCDinit
 19444 ;;		_LCDcmd
 19445 ;;		_LCDchar
 19446 ;; This function uses a non-reentrant model
 19447 ;;
 19448                           
 19449                           
 19450                           ;psect for function _LCDsend2x4
 19451  0722                     _LCDsend2x4:
 19452                           
 19453                           ;incstack = 0
 19454                           ; Regs used in _LCDsend2x4: [wreg+status,2+status,0+pclath+cstack]
 19455                           ;LCDsend2x4@c stored from wreg
 19456  0722  00F7               	movwf	LCDsend2x4@c
 19457  0723                     l6026:
 19458                           
 19459                           ;main.c: 265: unsigned char hc;;main.c: 266: unsigned char lc;;main.c: 268: hc = c & 0xf
      +                          0;
 19460  0723  0877               	movf	LCDsend2x4@c,w
 19461  0724  39F0               	andlw	240
 19462  0725  00F5               	movwf	??_LCDsend2x4
 19463  0726  0875               	movf	??_LCDsend2x4,w
 19464  0727  00F8               	movwf	LCDsend2x4@hc
 19465  0728                     l6028:
 19466                           
 19467                           ;main.c: 269: lc = (c << 4) & 0xf0;
 19468  0728  0877               	movf	LCDsend2x4@c,w
 19469  0729  00F5               	movwf	??_LCDsend2x4
 19470  072A  3003               	movlw	3
 19471  072B                     u6145:
 19472  072B  35F5               	lslf	??_LCDsend2x4,f
 19473  072C  3EFF               	addlw	-1
 19474  072D  1D03               	skipz
 19475  072E  2F2B               	goto	u6145
 19476  072F  3575               	lslf	??_LCDsend2x4,w
 19477  0730  39F0               	andlw	240
 19478  0731  00F6               	movwf	??_LCDsend2x4+1
 19479  0732  0876               	movf	??_LCDsend2x4+1,w
 19480  0733  00F9               	movwf	LCDsend2x4@lc
 19481  0734                     l6030:	
 19482                           ;main.c: 271: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 19483                           
 19484  0734  0023               	movlb	3	; select bank3
 19485  0735  0C0F               	rrf	15,w	;volatile
 19486  0736  0C89               	rrf	9,f
 19487  0737  3901               	andlw	1
 19488  0738  00F5               	movwf	??_LCDsend2x4
 19489  0739  0811               	movf	17,w	;volatile
 19490  073A  391F               	andlw	31
 19491  073B  0475               	iorwf	??_LCDsend2x4,w
 19492  073C  1D03               	btfss	3,2
 19493  073D  2F3F               	goto	u6151
 19494  073E  2F40               	goto	u6150
 19495  073F                     u6151:
 19496  073F  2F34               	goto	l6030
 19497  0740                     u6150:
 19498  0740                     l1195:
 19499                           
 19500                           ;main.c: 272: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 19501  0740  1411               	bsf	17,0	;volatile
 19502  0741                     l1196:
 19503  0741  1811               	btfsc	17,0	;volatile
 19504  0742  2F44               	goto	u6161
 19505  0743  2F45               	goto	u6160
 19506  0744                     u6161:
 19507  0744  2F41               	goto	l1196
 19508  0745                     u6160:
 19509  0745                     l6032:
 19510  0745  0C0F               	rrf	15,w	;volatile
 19511  0746  0C89               	rrf	9,f
 19512  0747  3901               	andlw	1
 19513  0748  00F5               	movwf	??_LCDsend2x4
 19514  0749  0811               	movf	17,w	;volatile
 19515  074A  391F               	andlw	31
 19516  074B  0475               	iorwf	??_LCDsend2x4,w
 19517  074C  1D03               	btfss	3,2
 19518  074D  2F4F               	goto	u6171
 19519  074E  2F50               	goto	u6170
 19520  074F                     u6171:
 19521  074F  2F45               	goto	l6032
 19522  0750                     u6170:
 19523  0750                     l6034:
 19524                           
 19525                           ;main.c: 273: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 19526  0750  304E               	movlw	78
 19527  0751  3188  2086  3187   	fcall	_WriteI2C
 19528  0754                     l6036:
 19529  0754  0023               	movlb	3	; select bank3
 19530  0755  0C0F               	rrf	15,w	;volatile
 19531  0756  0C89               	rrf	9,f
 19532  0757  3901               	andlw	1
 19533  0758  00F5               	movwf	??_LCDsend2x4
 19534  0759  0811               	movf	17,w	;volatile
 19535  075A  391F               	andlw	31
 19536  075B  0475               	iorwf	??_LCDsend2x4,w
 19537  075C  1D03               	btfss	3,2
 19538  075D  2F5F               	goto	u6181
 19539  075E  2F60               	goto	u6180
 19540  075F                     u6181:
 19541  075F  2F54               	goto	l6036
 19542  0760                     u6180:
 19543  0760                     l6038:
 19544                           
 19545                           ;main.c: 274: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 19546  0760  0878               	movf	LCDsend2x4@hc,w
 19547  0761  0474               	iorwf	LCDsend2x4@mode,w
 19548  0762  3808               	iorlw	8
 19549  0763  3188  2086  3187   	fcall	_WriteI2C
 19550  0766                     l6040:
 19551  0766  0023               	movlb	3	; select bank3
 19552  0767  0C0F               	rrf	15,w	;volatile
 19553  0768  0C89               	rrf	9,f
 19554  0769  3901               	andlw	1
 19555  076A  00F5               	movwf	??_LCDsend2x4
 19556  076B  0811               	movf	17,w	;volatile
 19557  076C  391F               	andlw	31
 19558  076D  0475               	iorwf	??_LCDsend2x4,w
 19559  076E  1D03               	btfss	3,2
 19560  076F  2F71               	goto	u6191
 19561  0770  2F72               	goto	u6190
 19562  0771                     u6191:
 19563  0771  2F66               	goto	l6040
 19564  0772                     u6190:
 19565  0772                     l6042:
 19566                           
 19567                           ;main.c: 275: WriteI2C(hc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 19568  0772  0878               	movf	LCDsend2x4@hc,w
 19569  0773  0474               	iorwf	LCDsend2x4@mode,w
 19570  0774  380C               	iorlw	12
 19571  0775  3188  2086  3187   	fcall	_WriteI2C
 19572  0778                     l6044:
 19573  0778  0023               	movlb	3	; select bank3
 19574  0779  0C0F               	rrf	15,w	;volatile
 19575  077A  0C89               	rrf	9,f
 19576  077B  3901               	andlw	1
 19577  077C  00F5               	movwf	??_LCDsend2x4
 19578  077D  0811               	movf	17,w	;volatile
 19579  077E  391F               	andlw	31
 19580  077F  0475               	iorwf	??_LCDsend2x4,w
 19581  0780  1D03               	btfss	3,2
 19582  0781  2F83               	goto	u6201
 19583  0782  2F84               	goto	u6200
 19584  0783                     u6201:
 19585  0783  2F78               	goto	l6044
 19586  0784                     u6200:
 19587  0784                     l1210:
 19588  0784                     l6046:	
 19589                           ;main.c: 276: _delay((unsigned long)((1)*(1000000/4000000.0)));
 19590                           
 19591                           
 19592                           ;main.c: 277: WriteI2C(hc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 19593  0784  0878               	movf	LCDsend2x4@hc,w
 19594  0785  0474               	iorwf	LCDsend2x4@mode,w
 19595  0786  3808               	iorlw	8
 19596  0787  3188  2086  3187   	fcall	_WriteI2C
 19597  078A                     l6048:
 19598  078A  0023               	movlb	3	; select bank3
 19599  078B  0C0F               	rrf	15,w	;volatile
 19600  078C  0C89               	rrf	9,f
 19601  078D  3901               	andlw	1
 19602  078E  00F5               	movwf	??_LCDsend2x4
 19603  078F  0811               	movf	17,w	;volatile
 19604  0790  391F               	andlw	31
 19605  0791  0475               	iorwf	??_LCDsend2x4,w
 19606  0792  1D03               	btfss	3,2
 19607  0793  2F95               	goto	u6211
 19608  0794  2F96               	goto	u6210
 19609  0795                     u6211:
 19610  0795  2F8A               	goto	l6048
 19611  0796                     u6210:
 19612  0796                     l6050:
 19613                           
 19614                           ;main.c: 278: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 19615  0796  0879               	movf	LCDsend2x4@lc,w
 19616  0797  0474               	iorwf	LCDsend2x4@mode,w
 19617  0798  3808               	iorlw	8
 19618  0799  3188  2086  3187   	fcall	_WriteI2C
 19619  079C                     l6052:
 19620  079C  0023               	movlb	3	; select bank3
 19621  079D  0C0F               	rrf	15,w	;volatile
 19622  079E  0C89               	rrf	9,f
 19623  079F  3901               	andlw	1
 19624  07A0  00F5               	movwf	??_LCDsend2x4
 19625  07A1  0811               	movf	17,w	;volatile
 19626  07A2  391F               	andlw	31
 19627  07A3  0475               	iorwf	??_LCDsend2x4,w
 19628  07A4  1D03               	btfss	3,2
 19629  07A5  2FA7               	goto	u6221
 19630  07A6  2FA8               	goto	u6220
 19631  07A7                     u6221:
 19632  07A7  2F9C               	goto	l6052
 19633  07A8                     u6220:
 19634  07A8                     l6054:
 19635                           
 19636                           ;main.c: 279: WriteI2C(lc | 0x08 | 0x04 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbit
      +                          s.R_W));
 19637  07A8  0879               	movf	LCDsend2x4@lc,w
 19638  07A9  0474               	iorwf	LCDsend2x4@mode,w
 19639  07AA  380C               	iorlw	12
 19640  07AB  3188  2086  3187   	fcall	_WriteI2C
 19641  07AE                     l6056:
 19642  07AE  0023               	movlb	3	; select bank3
 19643  07AF  0C0F               	rrf	15,w	;volatile
 19644  07B0  0C89               	rrf	9,f
 19645  07B1  3901               	andlw	1
 19646  07B2  00F5               	movwf	??_LCDsend2x4
 19647  07B3  0811               	movf	17,w	;volatile
 19648  07B4  391F               	andlw	31
 19649  07B5  0475               	iorwf	??_LCDsend2x4,w
 19650  07B6  1D03               	btfss	3,2
 19651  07B7  2FB9               	goto	u6231
 19652  07B8  2FBA               	goto	u6230
 19653  07B9                     u6231:
 19654  07B9  2FAE               	goto	l6056
 19655  07BA                     u6230:
 19656  07BA                     l1219:
 19657  07BA                     l6058:	
 19658                           ;main.c: 280: _delay((unsigned long)((1)*(1000000/4000000.0)));
 19659                           
 19660                           
 19661                           ;main.c: 281: WriteI2C(lc | 0x08 | mode); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W))
      +                          ;
 19662  07BA  0879               	movf	LCDsend2x4@lc,w
 19663  07BB  0474               	iorwf	LCDsend2x4@mode,w
 19664  07BC  3808               	iorlw	8
 19665  07BD  3188  2086  3187   	fcall	_WriteI2C
 19666  07C0                     l6060:
 19667  07C0  0023               	movlb	3	; select bank3
 19668  07C1  0C0F               	rrf	15,w	;volatile
 19669  07C2  0C89               	rrf	9,f
 19670  07C3  3901               	andlw	1
 19671  07C4  00F5               	movwf	??_LCDsend2x4
 19672  07C5  0811               	movf	17,w	;volatile
 19673  07C6  391F               	andlw	31
 19674  07C7  0475               	iorwf	??_LCDsend2x4,w
 19675  07C8  1D03               	btfss	3,2
 19676  07C9  2FCB               	goto	u6241
 19677  07CA  2FCC               	goto	u6240
 19678  07CB                     u6241:
 19679  07CB  2FC0               	goto	l6060
 19680  07CC                     u6240:
 19681  07CC                     l1222:
 19682                           
 19683                           ;main.c: 282: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 19684  07CC  1511               	bsf	17,2	;volatile
 19685  07CD                     l1223:
 19686  07CD  1911               	btfsc	17,2	;volatile
 19687  07CE  2FD0               	goto	u6251
 19688  07CF  2FD1               	goto	u6250
 19689  07D0                     u6251:
 19690  07D0  2FCD               	goto	l1223
 19691  07D1                     u6250:
 19692  07D1                     l6062:
 19693                           
 19694                           ;main.c: 283: _delay((unsigned long)((50)*(1000000/4000000.0)));
 19695  07D1  3004               	movlw	4
 19696  07D2                     u8577:
 19697  07D2  0B89               	decfsz	9,f
 19698  07D3  2FD2               	goto	u8577
 19699  07D4                     l1226:
 19700  07D4  0008               	return
 19701  07D5                     __end_of_LCDsend2x4:
 19702                           
 19703                           	psect	text69
 19704  0800                     __ptext69:	
 19705 ;; *************** function _LCDsend *****************
 19706 ;; Defined at:
 19707 ;;		line 224 in file "main.c"
 19708 ;; Parameters:    Size  Location     Type
 19709 ;;  c               1    wreg     unsigned char 
 19710 ;; Auto vars:     Size  Location     Type
 19711 ;;  c               1    5[COMMON] unsigned char 
 19712 ;; Return value:  Size  Location     Type
 19713 ;;                  1    wreg      void 
 19714 ;; Registers used:
 19715 ;;		wreg, status,2, status,0, pclath, cstack
 19716 ;; Tracked objects:
 19717 ;;		On entry : 0/0
 19718 ;;		On exit  : 0/0
 19719 ;;		Unchanged: 0/0
 19720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19725 ;;Total ram usage:        2 bytes
 19726 ;; Hardware stack levels used:    1
 19727 ;; Hardware stack levels required when called:    5
 19728 ;; This function calls:
 19729 ;;		_WriteI2C
 19730 ;; This function is called by:
 19731 ;;		_LCDinit
 19732 ;; This function uses a non-reentrant model
 19733 ;;
 19734                           
 19735                           
 19736                           ;psect for function _LCDsend
 19737  0800                     _LCDsend:
 19738                           
 19739                           ;incstack = 0
 19740                           ; Regs used in _LCDsend: [wreg+status,2+status,0+pclath+cstack]
 19741                           ;LCDsend@c stored from wreg
 19742  0800  00F5               	movwf	LCDsend@c
 19743  0801                     l6512:
 19744  0801                     l6514:	
 19745                           ;main.c: 226: while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 19746                           
 19747  0801  0023               	movlb	3	; select bank3
 19748  0802  0C0F               	rrf	15,w	;volatile
 19749  0803  0C89               	rrf	9,f
 19750  0804  3901               	andlw	1
 19751  0805  00F4               	movwf	??_LCDsend
 19752  0806  0811               	movf	17,w	;volatile
 19753  0807  391F               	andlw	31
 19754  0808  0474               	iorwf	??_LCDsend,w
 19755  0809  1D03               	btfss	3,2
 19756  080A  280C               	goto	u7241
 19757  080B  280D               	goto	u7240
 19758  080C                     u7241:
 19759  080C  2801               	goto	l6514
 19760  080D                     u7240:
 19761  080D                     l1093:
 19762                           
 19763                           ;main.c: 227: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); while ((SSP1CON2 & 0x1F) | (SS
      +                          P1STATbits.R_W));
 19764  080D  1411               	bsf	17,0	;volatile
 19765  080E                     l1094:
 19766  080E  1811               	btfsc	17,0	;volatile
 19767  080F  2811               	goto	u7251
 19768  0810  2812               	goto	u7250
 19769  0811                     u7251:
 19770  0811  280E               	goto	l1094
 19771  0812                     u7250:
 19772  0812                     l6516:
 19773  0812  0C0F               	rrf	15,w	;volatile
 19774  0813  0C89               	rrf	9,f
 19775  0814  3901               	andlw	1
 19776  0815  00F4               	movwf	??_LCDsend
 19777  0816  0811               	movf	17,w	;volatile
 19778  0817  391F               	andlw	31
 19779  0818  0474               	iorwf	??_LCDsend,w
 19780  0819  1D03               	btfss	3,2
 19781  081A  281C               	goto	u7261
 19782  081B  281D               	goto	u7260
 19783  081C                     u7261:
 19784  081C  2812               	goto	l6516
 19785  081D                     u7260:
 19786  081D                     l6518:
 19787                           
 19788                           ;main.c: 228: WriteI2C(0x4e | 0x00); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 19789  081D  304E               	movlw	78
 19790  081E  3188  2086  3188   	fcall	_WriteI2C
 19791  0821                     l6520:
 19792  0821  0023               	movlb	3	; select bank3
 19793  0822  0C0F               	rrf	15,w	;volatile
 19794  0823  0C89               	rrf	9,f
 19795  0824  3901               	andlw	1
 19796  0825  00F4               	movwf	??_LCDsend
 19797  0826  0811               	movf	17,w	;volatile
 19798  0827  391F               	andlw	31
 19799  0828  0474               	iorwf	??_LCDsend,w
 19800  0829  1D03               	btfss	3,2
 19801  082A  282C               	goto	u7271
 19802  082B  282D               	goto	u7270
 19803  082C                     u7271:
 19804  082C  2821               	goto	l6520
 19805  082D                     u7270:
 19806  082D                     l6522:
 19807                           
 19808                           ;main.c: 229: WriteI2C(c); while ((SSP1CON2 & 0x1F) | (SSP1STATbits.R_W));
 19809  082D  0875               	movf	LCDsend@c,w
 19810  082E  3188  2086  3188   	fcall	_WriteI2C
 19811  0831                     l6524:
 19812  0831  0023               	movlb	3	; select bank3
 19813  0832  0C0F               	rrf	15,w	;volatile
 19814  0833  0C89               	rrf	9,f
 19815  0834  3901               	andlw	1
 19816  0835  00F4               	movwf	??_LCDsend
 19817  0836  0811               	movf	17,w	;volatile
 19818  0837  391F               	andlw	31
 19819  0838  0474               	iorwf	??_LCDsend,w
 19820  0839  1D03               	btfss	3,2
 19821  083A  283C               	goto	u7281
 19822  083B  283D               	goto	u7280
 19823  083C                     u7281:
 19824  083C  2831               	goto	l6524
 19825  083D                     u7280:
 19826  083D                     l1105:
 19827                           
 19828                           ;main.c: 230: SSP1CON2bits.PEN = 1;while(SSP1CON2bits.PEN);
 19829  083D  1511               	bsf	17,2	;volatile
 19830  083E                     l1106:
 19831  083E  1911               	btfsc	17,2	;volatile
 19832  083F  2841               	goto	u7291
 19833  0840  2842               	goto	u7290
 19834  0841                     u7291:
 19835  0841  283E               	goto	l1106
 19836  0842                     u7290:
 19837  0842                     l1109:
 19838  0842  0008               	return
 19839  0843                     __end_of_LCDsend:
 19840                           
 19841                           	psect	text70
 19842  0886                     __ptext70:	
 19843 ;; *************** function _WriteI2C *****************
 19844 ;; Defined at:
 19845 ;;		line 47 in file "I2C/i2c.c"
 19846 ;; Parameters:    Size  Location     Type
 19847 ;;  data_out        1    wreg     unsigned char 
 19848 ;; Auto vars:     Size  Location     Type
 19849 ;;  data_out        1    3[COMMON] unsigned char 
 19850 ;; Return value:  Size  Location     Type
 19851 ;;                  1    wreg      char 
 19852 ;; Registers used:
 19853 ;;		wreg, status,2, status,0
 19854 ;; Tracked objects:
 19855 ;;		On entry : 0/0
 19856 ;;		On exit  : 0/0
 19857 ;;		Unchanged: 0/0
 19858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19862 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19863 ;;Total ram usage:        2 bytes
 19864 ;; Hardware stack levels used:    1
 19865 ;; Hardware stack levels required when called:    4
 19866 ;; This function calls:
 19867 ;;		Nothing
 19868 ;; This function is called by:
 19869 ;;		_tsttc
 19870 ;;		_LCDsend
 19871 ;;		_LCDsend2x4
 19872 ;;		_LCDrecv
 19873 ;; This function uses a non-reentrant model
 19874 ;;
 19875                           
 19876                           
 19877                           ;psect for function _WriteI2C
 19878  0886                     _WriteI2C:
 19879                           
 19880                           ;incstack = 0
 19881                           ; Regs used in _WriteI2C: [wreg+status,2+status,0]
 19882                           ;WriteI2C@data_out stored from wreg
 19883  0886  00F3               	movwf	WriteI2C@data_out
 19884  0887                     l5996:
 19885                           
 19886                           ;i2c.c: 49: SSP1BUF = data_out;
 19887  0887  0873               	movf	WriteI2C@data_out,w
 19888  0888  0023               	movlb	3	; select bank3
 19889  0889  008C               	movwf	12	;volatile
 19890  088A                     l5998:
 19891                           
 19892                           ;i2c.c: 50: if ( SSP1CON1bits.WCOL )
 19893  088A  1F90               	btfss	16,7	;volatile
 19894  088B  288D               	goto	u6051
 19895  088C  288E               	goto	u6050
 19896  088D                     u6051:
 19897  088D  288F               	goto	l6004
 19898  088E                     u6050:
 19899  088E  28D0               	goto	l30
 19900  088F                     l6004:
 19901                           
 19902                           ;i2c.c: 52: else;i2c.c: 53: {;i2c.c: 54: if( ((SSP1CON1&0x0F)!=0x08) && ((SSP1CON1&0x0F)
      +                          !=0x0B) )
 19903  088F  300F               	movlw	15
 19904  0890  0510               	andwf	16,w	;volatile
 19905  0891  00F2               	movwf	??_WriteI2C
 19906  0892  3008               	movlw	8
 19907  0893  0672               	xorwf	??_WriteI2C,w
 19908  0894  1903               	btfsc	3,2
 19909  0895  2897               	goto	u6061
 19910  0896  2898               	goto	u6060
 19911  0897                     u6061:
 19912  0897  28AE               	goto	l6016
 19913  0898                     u6060:
 19914  0898                     l6006:
 19915  0898  300F               	movlw	15
 19916  0899  0510               	andwf	16,w	;volatile
 19917  089A  00F2               	movwf	??_WriteI2C
 19918  089B  300B               	movlw	11
 19919  089C  0672               	xorwf	??_WriteI2C,w
 19920  089D  1903               	btfsc	3,2
 19921  089E  28A0               	goto	u6071
 19922  089F  28A1               	goto	u6070
 19923  08A0                     u6071:
 19924  08A0  28AE               	goto	l6016
 19925  08A1                     u6070:
 19926  08A1                     l6008:
 19927                           
 19928                           ;i2c.c: 55: {;i2c.c: 56: SSP1CON1bits.CKP = 1;
 19929  08A1  1610               	bsf	16,4	;volatile
 19930  08A2                     l33:	
 19931                           ;i2c.c: 57: while ( !PIR3bits.SSP1IF );
 19932                           
 19933  08A2  002E               	movlb	14	; select bank14
 19934  08A3  1C0F               	btfss	15,0	;volatile
 19935  08A4  28A6               	goto	u6081
 19936  08A5  28A7               	goto	u6080
 19937  08A6                     u6081:
 19938  08A6  28A2               	goto	l33
 19939  08A7                     u6080:
 19940  08A7                     l35:
 19941                           
 19942                           ;i2c.c: 59: if ( ( !SSP1STATbits.R_W ) && ( !SSP1STATbits.BF ) )
 19943  08A7  0023               	movlb	3	; select bank3
 19944  08A8  190F               	btfsc	15,2	;volatile
 19945  08A9  28AB               	goto	u6091
 19946  08AA  28AC               	goto	u6090
 19947  08AB                     u6091:
 19948  08AB  28D0               	goto	l30
 19949  08AC                     u6090:
 19950  08AC                     l6010:
 19951  08AC  080F               	movf	15,w	;volatile
 19952  08AD  28D0               	goto	l30
 19953  08AE                     l6016:
 19954                           
 19955                           ;i2c.c: 68: else if( ((SSP1CON1&0x0F)==0x08) || ((SSP1CON1&0x0F)==0x0B) )
 19956  08AE  300F               	movlw	15
 19957  08AF  0510               	andwf	16,w	;volatile
 19958  08B0  00F2               	movwf	??_WriteI2C
 19959  08B1  3008               	movlw	8
 19960  08B2  0672               	xorwf	??_WriteI2C,w
 19961  08B3  1903               	btfsc	3,2
 19962  08B4  28B6               	goto	u6101
 19963  08B5  28B7               	goto	u6100
 19964  08B6                     u6101:
 19965  08B6  28C0               	goto	l42
 19966  08B7                     u6100:
 19967  08B7                     l6018:
 19968  08B7  300F               	movlw	15
 19969  08B8  0510               	andwf	16,w	;volatile
 19970  08B9  00F2               	movwf	??_WriteI2C
 19971  08BA  300B               	movlw	11
 19972  08BB  0672               	xorwf	??_WriteI2C,w
 19973  08BC  1D03               	btfss	3,2
 19974  08BD  28BF               	goto	u6111
 19975  08BE  28C0               	goto	u6110
 19976  08BF                     u6111:
 19977  08BF  28D0               	goto	l30
 19978  08C0                     u6110:
 19979  08C0                     l42:
 19980  08C0  180F               	btfsc	15,0	;volatile
 19981  08C1  28C3               	goto	u6121
 19982  08C2  28C4               	goto	u6120
 19983  08C3                     u6121:
 19984  08C3  28C0               	goto	l42
 19985  08C4                     u6120:
 19986  08C4                     l6020:
 19987  08C4  0C0F               	rrf	15,w	;volatile
 19988  08C5  0C89               	rrf	9,f
 19989  08C6  3901               	andlw	1
 19990  08C7  00F2               	movwf	??_WriteI2C
 19991  08C8  0811               	movf	17,w	;volatile
 19992  08C9  391F               	andlw	31
 19993  08CA  0472               	iorwf	??_WriteI2C,w
 19994  08CB  1D03               	btfss	3,2
 19995  08CC  28CE               	goto	u6131
 19996  08CD  28CF               	goto	u6130
 19997  08CE                     u6131:
 19998  08CE  28C4               	goto	l6020
 19999  08CF                     u6130:
 20000  08CF                     l47:
 20001                           
 20002                           ;i2c.c: 72: if ( SSP1CON2bits.ACKSTAT )
 20003  08CF  0811               	movf	17,w	;volatile
 20004  08D0                     l30:
 20005  08D0  0008               	return
 20006  08D1                     __end_of_WriteI2C:
 20007                           
 20008                           	psect	text71
 20009  11DD                     __ptext71:	
 20010 ;; *************** function _EUSART_is_rx_ready *****************
 20011 ;; Defined at:
 20012 ;;		line 118 in file "mcc_generated_files/eusart.c"
 20013 ;; Parameters:    Size  Location     Type
 20014 ;;		None
 20015 ;; Auto vars:     Size  Location     Type
 20016 ;;		None
 20017 ;; Return value:  Size  Location     Type
 20018 ;;                  1    wreg      unsigned char 
 20019 ;; Registers used:
 20020 ;;		wreg
 20021 ;; Tracked objects:
 20022 ;;		On entry : 0/0
 20023 ;;		On exit  : 0/0
 20024 ;;		Unchanged: 0/0
 20025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20030 ;;Total ram usage:        0 bytes
 20031 ;; Hardware stack levels used:    1
 20032 ;; Hardware stack levels required when called:    4
 20033 ;; This function calls:
 20034 ;;		Nothing
 20035 ;; This function is called by:
 20036 ;;		_main
 20037 ;; This function uses a non-reentrant model
 20038 ;;
 20039                           
 20040                           
 20041                           ;psect for function _EUSART_is_rx_ready
 20042  11DD                     _EUSART_is_rx_ready:
 20043  11DD                     l5324:	
 20044                           ;incstack = 0
 20045                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 20046                           
 20047                           
 20048                           ;eusart.c: 120: return eusartRxCount;
 20049  11DD  0020               	movlb	0	; select bank0
 20050  11DE  0868               	movf	_eusartRxCount,w	;volatile
 20051  11DF                     l817:
 20052  11DF  0008               	return
 20053  11E0                     __end_of_EUSART_is_rx_ready:
 20054                           
 20055                           	psect	intentry
 20056  0004                     __pintentry:	
 20057 ;; *************** function _INTERRUPT_InterruptManager *****************
 20058 ;; Defined at:
 20059 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 20060 ;; Parameters:    Size  Location     Type
 20061 ;;		None
 20062 ;; Auto vars:     Size  Location     Type
 20063 ;;		None
 20064 ;; Return value:  Size  Location     Type
 20065 ;;                  1    wreg      void 
 20066 ;; Registers used:
 20067 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20068 ;; Tracked objects:
 20069 ;;		On entry : 0/0
 20070 ;;		On exit  : 0/0
 20071 ;;		Unchanged: 0/0
 20072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20077 ;;Total ram usage:        0 bytes
 20078 ;; Hardware stack levels used:    1
 20079 ;; Hardware stack levels required when called:    3
 20080 ;; This function calls:
 20081 ;;		Absolute function
 20082 ;;		_EUSART_Receive_ISR
 20083 ;;		_EUSART_Transmit_ISR
 20084 ;;		_INT_ISR
 20085 ;;		_TMR1_ISR
 20086 ;; This function is called by:
 20087 ;;		Interrupt level 1
 20088 ;; This function uses a non-reentrant model
 20089 ;;
 20090                           
 20091  0004                     _INTERRUPT_InterruptManager:
 20092                           
 20093                           ;incstack = 0
 20094  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 20095                           
 20096                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 20097  0005  3180               	pagesel	$
 20098  0006                     i1l5790:
 20099                           
 20100                           ;interrupt_manager.c: 55: if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
 20101  0006  002E               	movlb	14	; select bank14
 20102  0007  1C16               	btfss	22,0	;volatile
 20103  0008  280A               	goto	u572_21
 20104  0009  280B               	goto	u572_20
 20105  000A                     u572_21:
 20106  000A  2813               	goto	i1l364
 20107  000B                     u572_20:
 20108  000B                     i1l5792:
 20109  000B  1C0C               	btfss	12,0	;volatile
 20110  000C  280E               	goto	u573_21
 20111  000D  280F               	goto	u573_20
 20112  000E                     u573_21:
 20113  000E  2813               	goto	i1l364
 20114  000F                     u573_20:
 20115  000F                     i1l5794:
 20116                           
 20117                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: INT_ISR();
 20118  000F  3191  21F8  3180   	fcall	_INT_ISR
 20119                           
 20120                           ;interrupt_manager.c: 58: }
 20121  0012  2850               	goto	i1l378
 20122  0013                     i1l364:
 20123                           
 20124                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
 20125  0013  1F0B               	btfss	11,6	;volatile
 20126  0014  2816               	goto	u574_21
 20127  0015  2817               	goto	u574_20
 20128  0016                     u574_21:
 20129  0016  2850               	goto	i1l378
 20130  0017                     u574_20:
 20131  0017                     i1l5796:
 20132                           
 20133                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: if(PIE3bits.TXIE == 1 && PIR3bits.T
      +                          XIF == 1)
 20134  0017  1E19               	btfss	25,4	;volatile
 20135  0018  281A               	goto	u575_21
 20136  0019  281B               	goto	u575_20
 20137  001A                     u575_21:
 20138  001A  2826               	goto	i1l367
 20139  001B                     u575_20:
 20140  001B                     i1l5798:
 20141  001B  1E0F               	btfss	15,4	;volatile
 20142  001C  281E               	goto	u576_21
 20143  001D  281F               	goto	u576_20
 20144  001E                     u576_21:
 20145  001E  2826               	goto	i1l367
 20146  001F                     u576_20:
 20147  001F                     i1l5800:
 20148                           
 20149                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 63: EUSART_TxDefaultInterruptHandler();
 20150  001F  0021               	movlb	1	; select bank1
 20151  0020  0861               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 20152  0021  008A               	movwf	10
 20153  0022  0860               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 20154  0023  000A               	callw
 20155  0024  3180               	pagesel	$
 20156                           
 20157                           ;interrupt_manager.c: 64: }
 20158  0025  2850               	goto	i1l378
 20159  0026                     i1l367:
 20160                           
 20161                           ;interrupt_manager.c: 65: else if(PIE3bits.RCIE == 1 && PIR3bits.RCIF == 1)
 20162  0026  1E99               	btfss	25,5	;volatile
 20163  0027  2829               	goto	u577_21
 20164  0028  282A               	goto	u577_20
 20165  0029                     u577_21:
 20166  0029  2835               	goto	i1l369
 20167  002A                     u577_20:
 20168  002A                     i1l5802:
 20169  002A  1E8F               	btfss	15,5	;volatile
 20170  002B  282D               	goto	u578_21
 20171  002C  282E               	goto	u578_20
 20172  002D                     u578_21:
 20173  002D  2835               	goto	i1l369
 20174  002E                     u578_20:
 20175  002E                     i1l5804:
 20176                           
 20177                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
 20178  002E  0021               	movlb	1	; select bank1
 20179  002F  085F               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 20180  0030  008A               	movwf	10
 20181  0031  085E               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 20182  0032  000A               	callw
 20183  0033  3180               	pagesel	$
 20184                           
 20185                           ;interrupt_manager.c: 68: }
 20186  0034  2850               	goto	i1l378
 20187  0035                     i1l369:
 20188                           
 20189                           ;interrupt_manager.c: 69: else if(PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1)
 20190  0035  1C1A               	btfss	26,0	;volatile
 20191  0036  2838               	goto	u579_21
 20192  0037  2839               	goto	u579_20
 20193  0038                     u579_21:
 20194  0038  2841               	goto	i1l371
 20195  0039                     u579_20:
 20196  0039                     i1l5806:
 20197  0039  1C10               	btfss	16,0	;volatile
 20198  003A  283C               	goto	u580_21
 20199  003B  283D               	goto	u580_20
 20200  003C                     u580_21:
 20201  003C  2841               	goto	i1l371
 20202  003D                     u580_20:
 20203  003D                     i1l5808:
 20204                           
 20205                           ;interrupt_manager.c: 70: {;interrupt_manager.c: 71: TMR1_ISR();
 20206  003D  3192  22F3  3180   	fcall	_TMR1_ISR
 20207                           
 20208                           ;interrupt_manager.c: 72: }
 20209  0040  2850               	goto	i1l378
 20210  0041                     i1l371:
 20211                           
 20212                           ;interrupt_manager.c: 73: else if(PIE3bits.BCL1IE == 1 && PIR3bits.BCL1IF == 1)
 20213  0041  1C99               	btfss	25,1	;volatile
 20214  0042  2844               	goto	u581_21
 20215  0043  2845               	goto	u581_20
 20216  0044                     u581_21:
 20217  0044  284A               	goto	i1l373
 20218  0045                     u581_20:
 20219  0045                     i1l5810:
 20220                           
 20221                           ;interrupt_manager.c: 74: {;interrupt_manager.c: 75: i2c1_driver_busCollisionISR();
 20222  0045  1C8F               	btfss	15,1	;volatile
 20223  0046  2848               	goto	u582_21
 20224  0047  2849               	goto	u582_20
 20225  0048                     u582_21:
 20226  0048  284A               	goto	i1l373
 20227  0049                     u582_20:
 20228  0049  2850               	goto	i1l378
 20229  004A                     i1l373:
 20230                           
 20231                           ;interrupt_manager.c: 77: else if(PIE3bits.SSP1IE == 1 && PIR3bits.SSP1IF == 1)
 20232  004A  1C19               	btfss	25,0	;volatile
 20233  004B  284D               	goto	u583_21
 20234  004C  284E               	goto	u583_20
 20235  004D                     u583_21:
 20236  004D  2850               	goto	i1l372
 20237  004E                     u583_20:
 20238  004E                     i1l5814:
 20239                           
 20240                           ;interrupt_manager.c: 78: {;interrupt_manager.c: 79: i2c1_driver_i2cISR();
 20241  004E  080F               	movf	15,w	;volatile
 20242  004F  2850               	goto	i1l378
 20243  0050                     i1l372:
 20244  0050                     i1l378:
 20245  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 20246  0051  0009               	retfie
 20247  0052                     __end_of_INTERRUPT_InterruptManager:
 20248                           
 20249                           	psect	text73
 20250  12F3                     __ptext73:	
 20251 ;; *************** function _TMR1_ISR *****************
 20252 ;; Defined at:
 20253 ;;		line 164 in file "mcc_generated_files/tmr1.c"
 20254 ;; Parameters:    Size  Location     Type
 20255 ;;		None
 20256 ;; Auto vars:     Size  Location     Type
 20257 ;;		None
 20258 ;; Return value:  Size  Location     Type
 20259 ;;                  1    wreg      void 
 20260 ;; Registers used:
 20261 ;;		wreg, status,2, status,0, pclath, cstack
 20262 ;; Tracked objects:
 20263 ;;		On entry : 0/0
 20264 ;;		On exit  : 0/0
 20265 ;;		Unchanged: 0/0
 20266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20271 ;;Total ram usage:        0 bytes
 20272 ;; Hardware stack levels used:    1
 20273 ;; Hardware stack levels required when called:    1
 20274 ;; This function calls:
 20275 ;;		Absolute function
 20276 ;;		_Clock_ISR
 20277 ;;		_TMR1_DefaultInterruptHandler
 20278 ;;		_TMR1_WriteTimer
 20279 ;; This function is called by:
 20280 ;;		_INTERRUPT_InterruptManager
 20281 ;; This function uses a non-reentrant model
 20282 ;;
 20283                           
 20284                           
 20285                           ;psect for function _TMR1_ISR
 20286  12F3                     _TMR1_ISR:
 20287  12F3                     i1l5316:	
 20288                           ;incstack = 0
 20289                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 20290                           
 20291                           
 20292                           ;tmr1.c: 168: PIR4bits.TMR1IF = 0;
 20293  12F3  002E               	movlb	14	; select bank14
 20294  12F4  1010               	bcf	16,0	;volatile
 20295  12F5                     i1l5318:
 20296                           
 20297                           ;tmr1.c: 169: TMR1_WriteTimer(timer1ReloadVal);
 20298  12F5  0021               	movlb	1	; select bank1
 20299  12F6  085D               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 20300  12F7  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 20301  12F8  085C               	movf	_timer1ReloadVal^(0+128),w	;volatile
 20302  12F9  00F0               	movwf	TMR1_WriteTimer@timerVal
 20303  12FA  3192  22A8  3192   	fcall	_TMR1_WriteTimer
 20304  12FD                     i1l5320:
 20305                           
 20306                           ;tmr1.c: 171: if(TMR1_InterruptHandler)
 20307  12FD  0021               	movlb	1	; select bank1
 20308  12FE  085A               	movf	_TMR1_InterruptHandler^(0+128),w
 20309  12FF  045B               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 20310  1300  1903               	btfsc	3,2
 20311  1301  2B03               	goto	u483_21
 20312  1302  2B04               	goto	u483_20
 20313  1303                     u483_21:
 20314  1303  2B09               	goto	i1l436
 20315  1304                     u483_20:
 20316  1304                     i1l5322:
 20317                           
 20318                           ;tmr1.c: 172: {;tmr1.c: 173: TMR1_InterruptHandler();
 20319  1304  085B               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 20320  1305  008A               	movwf	10
 20321  1306  085A               	movf	_TMR1_InterruptHandler^(0+128),w
 20322  1307  000A               	callw
 20323  1308  3192               	pagesel	$
 20324  1309                     i1l436:
 20325  1309  0008               	return
 20326  130A                     __end_of_TMR1_ISR:
 20327                           
 20328                           	psect	text74
 20329  12A8                     __ptext74:	
 20330 ;; *************** function _TMR1_WriteTimer *****************
 20331 ;; Defined at:
 20332 ;;		line 127 in file "mcc_generated_files/tmr1.c"
 20333 ;; Parameters:    Size  Location     Type
 20334 ;;  timerVal        2    0[COMMON] unsigned int 
 20335 ;; Auto vars:     Size  Location     Type
 20336 ;;		None
 20337 ;; Return value:  Size  Location     Type
 20338 ;;                  1    wreg      void 
 20339 ;; Registers used:
 20340 ;;		wreg, status,2
 20341 ;; Tracked objects:
 20342 ;;		On entry : 0/0
 20343 ;;		On exit  : 0/0
 20344 ;;		Unchanged: 0/0
 20345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20349 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20350 ;;Total ram usage:        2 bytes
 20351 ;; Hardware stack levels used:    1
 20352 ;; This function calls:
 20353 ;;		Nothing
 20354 ;; This function is called by:
 20355 ;;		_TMR1_ISR
 20356 ;;		_TMR1_Reload
 20357 ;; This function uses a non-reentrant model
 20358 ;;
 20359                           
 20360                           
 20361                           ;psect for function _TMR1_WriteTimer
 20362  12A8                     _TMR1_WriteTimer:
 20363  12A8                     i1l5112:	
 20364                           ;incstack = 0
 20365                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 20366                           
 20367                           
 20368                           ;tmr1.c: 129: if (T1CONbits.nT1SYNC == 1)
 20369  12A8  0024               	movlb	4	; select bank4
 20370  12A9  1D0E               	btfss	14,2	;volatile
 20371  12AA  2AAC               	goto	u454_21
 20372  12AB  2AAD               	goto	u454_20
 20373  12AC                     u454_21:
 20374  12AC  2AB4               	goto	i1l5122
 20375  12AD                     u454_20:
 20376  12AD                     i1l5114:
 20377                           
 20378                           ;tmr1.c: 130: {;tmr1.c: 132: T1CONbits.TMR1ON = 0;
 20379  12AD  100E               	bcf	14,0	;volatile
 20380  12AE                     i1l5116:
 20381                           
 20382                           ;tmr1.c: 135: TMR1H = (timerVal >> 8);
 20383  12AE  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 20384  12AF  008D               	movwf	13	;volatile
 20385  12B0                     i1l5118:
 20386                           
 20387                           ;tmr1.c: 136: TMR1L = timerVal;
 20388  12B0  0870               	movf	TMR1_WriteTimer@timerVal,w
 20389  12B1  008C               	movwf	12	;volatile
 20390  12B2                     i1l5120:
 20391                           
 20392                           ;tmr1.c: 139: T1CONbits.TMR1ON =1;
 20393  12B2  140E               	bsf	14,0	;volatile
 20394                           
 20395                           ;tmr1.c: 140: }
 20396  12B3  2AB8               	goto	i1l423
 20397  12B4                     i1l5122:
 20398                           
 20399                           ;tmr1.c: 141: else;tmr1.c: 142: {;tmr1.c: 144: TMR1H = (timerVal >> 8);
 20400  12B4  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 20401  12B5  008D               	movwf	13	;volatile
 20402  12B6                     i1l5124:
 20403                           
 20404                           ;tmr1.c: 145: TMR1L = timerVal;
 20405  12B6  0870               	movf	TMR1_WriteTimer@timerVal,w
 20406  12B7  008C               	movwf	12	;volatile
 20407  12B8                     i1l423:
 20408  12B8  0008               	return
 20409  12B9                     __end_of_TMR1_WriteTimer:
 20410                           
 20411                           	psect	text75
 20412  09F6                     __ptext75:	
 20413 ;; *************** function _Clock_ISR *****************
 20414 ;; Defined at:
 20415 ;;		line 361 in file "main.c"
 20416 ;; Parameters:    Size  Location     Type
 20417 ;;		None
 20418 ;; Auto vars:     Size  Location     Type
 20419 ;;		None
 20420 ;; Return value:  Size  Location     Type
 20421 ;;                  1    wreg      void 
 20422 ;; Registers used:
 20423 ;;		wreg, status,2, status,0
 20424 ;; Tracked objects:
 20425 ;;		On entry : 0/0
 20426 ;;		On exit  : 0/0
 20427 ;;		Unchanged: 0/0
 20428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20432 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20433 ;;Total ram usage:        1 bytes
 20434 ;; Hardware stack levels used:    1
 20435 ;; This function calls:
 20436 ;;		Nothing
 20437 ;; This function is called by:
 20438 ;;		_main
 20439 ;;		_TMR1_ISR
 20440 ;; This function uses a non-reentrant model
 20441 ;;
 20442                           
 20443                           
 20444                           ;psect for function _Clock_ISR
 20445  09F6                     _Clock_ISR:
 20446  09F6                     i1l5182:	
 20447                           ;incstack = 0
 20448                           ; Regs used in _Clock_ISR: [wreg+status,2+status,0]
 20449                           
 20450                           
 20451                           ;main.c: 363: t.s++;
 20452  09F6  3001               	movlw	1
 20453  09F7  00F0               	movwf	??_Clock_ISR
 20454  09F8  0870               	movf	??_Clock_ISR,w
 20455  09F9  0020               	movlb	0	; select bank0
 20456  09FA  07DB               	addwf	_t+2,f
 20457                           
 20458                           ;main.c: 365: if(t.s==60){
 20459  09FB  303C               	movlw	60
 20460  09FC  065B               	xorwf	_t+2,w
 20461  09FD  1D03               	btfss	3,2
 20462  09FE  2A00               	goto	u464_21
 20463  09FF  2A01               	goto	u464_20
 20464  0A00                     u464_21:
 20465  0A00  2A09               	goto	i1l5190
 20466  0A01                     u464_20:
 20467  0A01                     i1l5184:
 20468                           
 20469                           ;main.c: 366: t.m++;
 20470  0A01  3001               	movlw	1
 20471  0A02  00F0               	movwf	??_Clock_ISR
 20472  0A03  0870               	movf	??_Clock_ISR,w
 20473  0A04  07DA               	addwf	_t+1,f
 20474  0A05                     i1l5186:
 20475                           
 20476                           ;main.c: 367: t.s=0;
 20477  0A05  01DB               	clrf	_t+2
 20478  0A06                     i1l5188:
 20479                           
 20480                           ;main.c: 368: writeEEPROM_flag = 1;
 20481  0A06  0021               	movlb	1	; select bank1
 20482  0A07  01D3               	clrf	_writeEEPROM_flag^(0+128)
 20483  0A08  0AD3               	incf	_writeEEPROM_flag^(0+128),f
 20484  0A09                     i1l5190:
 20485                           
 20486                           ;main.c: 369: };main.c: 370: if(t.m==60){
 20487  0A09  303C               	movlw	60
 20488  0A0A  0020               	movlb	0	; select bank0
 20489  0A0B  065A               	xorwf	_t+1,w
 20490  0A0C  1D03               	btfss	3,2
 20491  0A0D  2A0F               	goto	u465_21
 20492  0A0E  2A10               	goto	u465_20
 20493  0A0F                     u465_21:
 20494  0A0F  2A15               	goto	i1l5196
 20495  0A10                     u465_20:
 20496  0A10                     i1l5192:
 20497                           
 20498                           ;main.c: 371: t.h++;
 20499  0A10  3001               	movlw	1
 20500  0A11  00F0               	movwf	??_Clock_ISR
 20501  0A12  0870               	movf	??_Clock_ISR,w
 20502  0A13  07D9               	addwf	_t,f
 20503  0A14                     i1l5194:
 20504                           
 20505                           ;main.c: 372: t.m=0;
 20506  0A14  01DA               	clrf	_t+1
 20507  0A15                     i1l5196:
 20508                           
 20509                           ;main.c: 373: };main.c: 374: if(t.h==24){
 20510  0A15  3018               	movlw	24
 20511  0A16  0659               	xorwf	_t,w
 20512  0A17  1D03               	btfss	3,2
 20513  0A18  2A1A               	goto	u466_21
 20514  0A19  2A1B               	goto	u466_20
 20515  0A1A                     u466_21:
 20516  0A1A  2A1C               	goto	i1l5200
 20517  0A1B                     u466_20:
 20518  0A1B                     i1l5198:
 20519                           
 20520                           ;main.c: 375: t.h=0;
 20521  0A1B  01D9               	clrf	_t
 20522  0A1C                     i1l5200:
 20523                           
 20524                           ;main.c: 376: };main.c: 379: if((ALAF == 'A') && t.s >= clkAlarm.alarmVal.s && t.m >= cl
      +                          kAlarm.alarmVal.m && t.h >= clkAlarm.alarmVal.h && editingClockAlarm == 0){
 20525  0A1C  3041               	movlw	65
 20526  0A1D  0667               	xorwf	_ALAF,w
 20527  0A1E  1D03               	btfss	3,2
 20528  0A1F  2A21               	goto	u467_21
 20529  0A20  2A22               	goto	u467_20
 20530  0A21                     u467_21:
 20531  0A21  2A46               	goto	i1l5214
 20532  0A22                     u467_20:
 20533  0A22                     i1l5202:
 20534  0A22  0857               	movf	_clkAlarm+2,w
 20535  0A23  025B               	subwf	_t+2,w
 20536  0A24  1C03               	skipc
 20537  0A25  2A27               	goto	u468_21
 20538  0A26  2A28               	goto	u468_20
 20539  0A27                     u468_21:
 20540  0A27  2A46               	goto	i1l5214
 20541  0A28                     u468_20:
 20542  0A28                     i1l5204:
 20543  0A28  0856               	movf	_clkAlarm+1,w
 20544  0A29  025A               	subwf	_t+1,w
 20545  0A2A  1C03               	skipc
 20546  0A2B  2A2D               	goto	u469_21
 20547  0A2C  2A2E               	goto	u469_20
 20548  0A2D                     u469_21:
 20549  0A2D  2A46               	goto	i1l5214
 20550  0A2E                     u469_20:
 20551  0A2E                     i1l5206:
 20552  0A2E  0855               	movf	_clkAlarm,w
 20553  0A2F  0259               	subwf	_t,w
 20554  0A30  1C03               	skipc
 20555  0A31  2A33               	goto	u470_21
 20556  0A32  2A34               	goto	u470_20
 20557  0A33                     u470_21:
 20558  0A33  2A46               	goto	i1l5214
 20559  0A34                     u470_20:
 20560  0A34                     i1l5208:
 20561  0A34  085E               	movf	_editingClockAlarm,w
 20562  0A35  045F               	iorwf	_editingClockAlarm+1,w
 20563  0A36  1D03               	btfss	3,2
 20564  0A37  2A39               	goto	u471_21
 20565  0A38  2A3A               	goto	u471_20
 20566  0A39                     u471_21:
 20567  0A39  2A46               	goto	i1l5214
 20568  0A3A                     u471_20:
 20569  0A3A                     i1l5210:
 20570                           
 20571                           ;main.c: 380: alarmPWMStart.h = 0xff;
 20572  0A3A  30FF               	movlw	255
 20573  0A3B  00F0               	movwf	??_Clock_ISR
 20574  0A3C  0870               	movf	??_Clock_ISR,w
 20575  0A3D  0021               	movlb	1	; select bank1
 20576  0A3E  00E3               	movwf	_alarmPWMStart^(0+128)
 20577  0A3F                     i1l5212:
 20578                           
 20579                           ;main.c: 381: clkAlarm.trigger = 1;
 20580  0A3F  0020               	movlb	0	; select bank0
 20581  0A40  01D8               	clrf	_clkAlarm+3
 20582  0A41  0AD8               	incf	_clkAlarm+3,f
 20583                           
 20584                           ;main.c: 382: clkAlarm.alarmVal.h = 25;
 20585  0A42  3019               	movlw	25
 20586  0A43  00F0               	movwf	??_Clock_ISR
 20587  0A44  0870               	movf	??_Clock_ISR,w
 20588  0A45  00D5               	movwf	_clkAlarm
 20589  0A46                     i1l5214:
 20590  0A46  1003               	clrc
 20591  0A47  1F96               	btfss	22,7	;volatile
 20592  0A48  1403               	setc
 20593  0A49  1803               	btfsc	3,0
 20594  0A4A  2A4C               	goto	u472_21
 20595  0A4B  2A4F               	goto	u472_20
 20596  0A4C                     u472_21:
 20597  0A4C  0020               	movlb	0	; select bank0
 20598  0A4D  1796               	bsf	22,7	;volatile
 20599  0A4E  2A51               	goto	u473_24
 20600  0A4F                     u472_20:
 20601  0A4F  0020               	movlb	0	; select bank0
 20602  0A50  1396               	bcf	22,7	;volatile
 20603  0A51                     u473_24:
 20604  0A51                     i1l5216:
 20605                           
 20606                           ;main.c: 386: updateLCD = 1;
 20607  0A51  0021               	movlb	1	; select bank1
 20608  0A52  01EA               	clrf	_updateLCD^(0+128)
 20609  0A53  0AEA               	incf	_updateLCD^(0+128),f
 20610  0A54                     i1l5218:
 20611                           
 20612                           ;main.c: 387: counterMonitorAux++;
 20613  0A54  3001               	movlw	1
 20614  0A55  00F0               	movwf	??_Clock_ISR
 20615  0A56  0870               	movf	??_Clock_ISR,w
 20616  0A57  07D4               	addwf	_counterMonitorAux^(0+128),f
 20617  0A58                     i1l5220:
 20618                           
 20619                           ;main.c: 388: if(counterMonitorAux >= PMON){
 20620  0A58  0020               	movlb	0	; select bank0
 20621  0A59  086E               	movf	_PMON,w
 20622  0A5A  0021               	movlb	1	; select bank1
 20623  0A5B  0254               	subwf	_counterMonitorAux^(0+128),w
 20624  0A5C  1C03               	skipc
 20625  0A5D  2A5F               	goto	u474_21
 20626  0A5E  2A60               	goto	u474_20
 20627  0A5F                     u474_21:
 20628  0A5F  2A63               	goto	i1l1273
 20629  0A60                     u474_20:
 20630  0A60                     i1l5222:
 20631                           
 20632                           ;main.c: 389: counterMonitorAux = 0;
 20633  0A60  01D4               	clrf	_counterMonitorAux^(0+128)
 20634  0A61                     i1l5224:
 20635                           
 20636                           ;main.c: 390: monitor_TEMP_LUM = 1;
 20637  0A61  01D5               	clrf	_monitor_TEMP_LUM^(0+128)
 20638  0A62  0AD5               	incf	_monitor_TEMP_LUM^(0+128),f
 20639  0A63                     i1l1273:
 20640  0A63  0008               	return
 20641  0A64                     __end_of_Clock_ISR:
 20642                           
 20643                           	psect	text76
 20644  11DB                     __ptext76:	
 20645 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 20646 ;; Defined at:
 20647 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 20648 ;; Parameters:    Size  Location     Type
 20649 ;;		None
 20650 ;; Auto vars:     Size  Location     Type
 20651 ;;		None
 20652 ;; Return value:  Size  Location     Type
 20653 ;;                  1    wreg      void 
 20654 ;; Registers used:
 20655 ;;		None
 20656 ;; Tracked objects:
 20657 ;;		On entry : 0/0
 20658 ;;		On exit  : 0/0
 20659 ;;		Unchanged: 0/0
 20660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20665 ;;Total ram usage:        0 bytes
 20666 ;; Hardware stack levels used:    1
 20667 ;; This function calls:
 20668 ;;		Nothing
 20669 ;; This function is called by:
 20670 ;;		_TMR1_Initialize
 20671 ;;		_TMR1_ISR
 20672 ;; This function uses a non-reentrant model
 20673 ;;
 20674                           
 20675                           
 20676                           ;psect for function _TMR1_DefaultInterruptHandler
 20677  11DB                     _TMR1_DefaultInterruptHandler:
 20678  11DB                     i1l442:	
 20679                           ;incstack = 0
 20680                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 20681                           
 20682  11DB  0008               	return
 20683  11DC                     __end_of_TMR1_DefaultInterruptHandler:
 20684                           
 20685                           	psect	text77
 20686  11F8                     __ptext77:	
 20687 ;; *************** function _INT_ISR *****************
 20688 ;; Defined at:
 20689 ;;		line 32 in file "mcc_generated_files/ext_int.c"
 20690 ;; Parameters:    Size  Location     Type
 20691 ;;		None
 20692 ;; Auto vars:     Size  Location     Type
 20693 ;;		None
 20694 ;; Return value:  Size  Location     Type
 20695 ;;                  1    wreg      void 
 20696 ;; Registers used:
 20697 ;;		wreg, status,2, status,0, pclath, cstack
 20698 ;; Tracked objects:
 20699 ;;		On entry : 0/0
 20700 ;;		On exit  : 0/0
 20701 ;;		Unchanged: 0/0
 20702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20707 ;;Total ram usage:        0 bytes
 20708 ;; Hardware stack levels used:    1
 20709 ;; Hardware stack levels required when called:    2
 20710 ;; This function calls:
 20711 ;;		_INT_CallBack
 20712 ;; This function is called by:
 20713 ;;		_INTERRUPT_InterruptManager
 20714 ;; This function uses a non-reentrant model
 20715 ;;
 20716                           
 20717                           
 20718                           ;psect for function _INT_ISR
 20719  11F8                     _INT_ISR:
 20720  11F8                     i1l5312:	
 20721                           ;incstack = 0
 20722                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 20723                           
 20724                           
 20725                           ;ext_int.c: 34: (PIR0bits.INTF = 0);
 20726  11F8  002E               	movlb	14	; select bank14
 20727  11F9  100C               	bcf	12,0	;volatile
 20728  11FA                     i1l5314:
 20729                           
 20730                           ;ext_int.c: 37: INT_CallBack();
 20731  11FA  3192  2273  3191   	fcall	_INT_CallBack
 20732  11FD                     i1l747:
 20733  11FD  0008               	return
 20734  11FE                     __end_of_INT_ISR:
 20735                           
 20736                           	psect	text78
 20737  1273                     __ptext78:	
 20738 ;; *************** function _INT_CallBack *****************
 20739 ;; Defined at:
 20740 ;;		line 41 in file "mcc_generated_files/ext_int.c"
 20741 ;; Parameters:    Size  Location     Type
 20742 ;;		None
 20743 ;; Auto vars:     Size  Location     Type
 20744 ;;		None
 20745 ;; Return value:  Size  Location     Type
 20746 ;;                  1    wreg      void 
 20747 ;; Registers used:
 20748 ;;		wreg, status,2, status,0, pclath, cstack
 20749 ;; Tracked objects:
 20750 ;;		On entry : 0/0
 20751 ;;		On exit  : 0/0
 20752 ;;		Unchanged: 0/0
 20753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20758 ;;Total ram usage:        0 bytes
 20759 ;; Hardware stack levels used:    1
 20760 ;; Hardware stack levels required when called:    1
 20761 ;; This function calls:
 20762 ;;		Absolute function
 20763 ;;		_INT_DefaultInterruptHandler
 20764 ;;		_S1_ISR
 20765 ;; This function is called by:
 20766 ;;		_INT_ISR
 20767 ;; This function uses a non-reentrant model
 20768 ;;
 20769                           
 20770                           
 20771                           ;psect for function _INT_CallBack
 20772  1273                     _INT_CallBack:
 20773  1273                     i1l5142:	
 20774                           ;incstack = 0
 20775                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 20776                           
 20777                           
 20778                           ;ext_int.c: 44: if(INT_InterruptHandler)
 20779  1273  0021               	movlb	1	; select bank1
 20780  1274  0858               	movf	_INT_InterruptHandler^(0+128),w
 20781  1275  0459               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 20782  1276  1903               	btfsc	3,2
 20783  1277  2A79               	goto	u455_21
 20784  1278  2A7A               	goto	u455_20
 20785  1279                     u455_21:
 20786  1279  2A7F               	goto	i1l751
 20787  127A                     u455_20:
 20788  127A                     i1l5144:
 20789                           
 20790                           ;ext_int.c: 45: {;ext_int.c: 46: INT_InterruptHandler();
 20791  127A  0859               	movf	(_INT_InterruptHandler+1)^(0+128),w
 20792  127B  008A               	movwf	10
 20793  127C  0858               	movf	_INT_InterruptHandler^(0+128),w
 20794  127D  000A               	callw
 20795  127E  3192               	pagesel	$
 20796  127F                     i1l751:
 20797  127F  0008               	return
 20798  1280                     __end_of_INT_CallBack:
 20799                           
 20800                           	psect	text79
 20801  11DA                     __ptext79:	
 20802 ;; *************** function _INT_DefaultInterruptHandler *****************
 20803 ;; Defined at:
 20804 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 20805 ;; Parameters:    Size  Location     Type
 20806 ;;		None
 20807 ;; Auto vars:     Size  Location     Type
 20808 ;;		None
 20809 ;; Return value:  Size  Location     Type
 20810 ;;                  1    wreg      void 
 20811 ;; Registers used:
 20812 ;;		None
 20813 ;; Tracked objects:
 20814 ;;		On entry : 0/0
 20815 ;;		On exit  : 0/0
 20816 ;;		Unchanged: 0/0
 20817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20822 ;;Total ram usage:        0 bytes
 20823 ;; Hardware stack levels used:    1
 20824 ;; This function calls:
 20825 ;;		Nothing
 20826 ;; This function is called by:
 20827 ;;		_EXT_INT_Initialize
 20828 ;;		_INT_CallBack
 20829 ;; This function uses a non-reentrant model
 20830 ;;
 20831                           
 20832                           
 20833                           ;psect for function _INT_DefaultInterruptHandler
 20834  11DA                     _INT_DefaultInterruptHandler:
 20835  11DA                     i1l757:	
 20836                           ;incstack = 0
 20837                           ; Regs used in _INT_DefaultInterruptHandler: []
 20838                           
 20839  11DA  0008               	return
 20840  11DB                     __end_of_INT_DefaultInterruptHandler:
 20841                           
 20842                           	psect	text80
 20843  1240                     __ptext80:	
 20844 ;; *************** function _S1_ISR *****************
 20845 ;; Defined at:
 20846 ;;		line 786 in file "main.c"
 20847 ;; Parameters:    Size  Location     Type
 20848 ;;		None
 20849 ;; Auto vars:     Size  Location     Type
 20850 ;;		None
 20851 ;; Return value:  Size  Location     Type
 20852 ;;                  1    wreg      void 
 20853 ;; Registers used:
 20854 ;;		None
 20855 ;; Tracked objects:
 20856 ;;		On entry : 0/0
 20857 ;;		On exit  : 0/0
 20858 ;;		Unchanged: 0/0
 20859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20864 ;;Total ram usage:        0 bytes
 20865 ;; Hardware stack levels used:    1
 20866 ;; This function calls:
 20867 ;;		Nothing
 20868 ;; This function is called by:
 20869 ;;		_main
 20870 ;;		_INT_CallBack
 20871 ;; This function uses a non-reentrant model
 20872 ;;
 20873                           
 20874                           
 20875                           ;psect for function _S1_ISR
 20876  1240                     _S1_ISR:
 20877  1240                     i1l4968:	
 20878                           ;incstack = 0
 20879                           ; Regs used in _S1_ISR: []
 20880                           
 20881                           
 20882                           ;main.c: 787: PIE0bits.INTE = 0;
 20883  1240  002E               	movlb	14	; select bank14
 20884  1241  1016               	bcf	22,0	;volatile
 20885                           
 20886                           ;main.c: 788: flagS1pushed = 1;
 20887  1242  0021               	movlb	1	; select bank1
 20888  1243  01D6               	clrf	_flagS1pushed^(0+128)
 20889  1244  0AD6               	incf	_flagS1pushed^(0+128),f
 20890                           
 20891                           ;main.c: 807: (PIR0bits.INTF = 0);
 20892  1245  002E               	movlb	14	; select bank14
 20893  1246  100C               	bcf	12,0	;volatile
 20894                           
 20895                           ;main.c: 808: PIE0bits.INTE = 1;
 20896  1247  1416               	bsf	22,0	;volatile
 20897  1248                     i1l1431:
 20898  1248  0008               	return
 20899  1249                     __end_of_S1_ISR:
 20900                           
 20901                           	psect	text81
 20902  1503                     __ptext81:	
 20903 ;; *************** function _EUSART_Transmit_ISR *****************
 20904 ;; Defined at:
 20905 ;;		line 181 in file "mcc_generated_files/eusart.c"
 20906 ;; Parameters:    Size  Location     Type
 20907 ;;		None
 20908 ;; Auto vars:     Size  Location     Type
 20909 ;;		None
 20910 ;; Return value:  Size  Location     Type
 20911 ;;                  1    wreg      void 
 20912 ;; Registers used:
 20913 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20914 ;; Tracked objects:
 20915 ;;		On entry : 0/0
 20916 ;;		On exit  : 0/0
 20917 ;;		Unchanged: 0/0
 20918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20921 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20922 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20923 ;;Total ram usage:        1 bytes
 20924 ;; Hardware stack levels used:    1
 20925 ;; This function calls:
 20926 ;;		Nothing
 20927 ;; This function is called by:
 20928 ;;		_EUSART_Initialize
 20929 ;;		_INTERRUPT_InterruptManager
 20930 ;; This function uses a non-reentrant model
 20931 ;;
 20932                           
 20933                           
 20934                           ;psect for function _EUSART_Transmit_ISR
 20935  1503                     _EUSART_Transmit_ISR:
 20936  1503                     i1l5332:	
 20937                           ;incstack = 0
 20938                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 20939                           
 20940                           
 20941                           ;eusart.c: 185: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 20942  1503  3040               	movlw	64
 20943  1504  0021               	movlb	1	; select bank1
 20944  1505  0262               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 20945  1506  1803               	skipnc
 20946  1507  2D09               	goto	u484_21
 20947  1508  2D0A               	goto	u484_20
 20948  1509                     u484_21:
 20949  1509  2D25               	goto	i1l845
 20950  150A                     u484_20:
 20951  150A                     i1l5334:
 20952                           
 20953                           ;eusart.c: 186: {;eusart.c: 187: TX1REG = eusartTxBuffer[eusartTxTail++];
 20954  150A  0020               	movlb	0	; select bank0
 20955  150B  086B               	movf	_eusartTxTail,w
 20956  150C  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 20957  150D  0086               	movwf	6
 20958  150E  3001               	movlw	1	; select bank3/4
 20959  150F  0087               	movwf	7
 20960  1510  0801               	movf	1,w
 20961  1511  0022               	movlb	2	; select bank2
 20962  1512  009A               	movwf	26	;volatile
 20963  1513                     i1l5336:
 20964  1513  3001               	movlw	1
 20965  1514  00F0               	movwf	??_EUSART_Transmit_ISR
 20966  1515  0870               	movf	??_EUSART_Transmit_ISR,w
 20967  1516  0020               	movlb	0	; select bank0
 20968  1517  07EB               	addwf	_eusartTxTail,f	;volatile
 20969  1518                     i1l5338:
 20970                           
 20971                           ;eusart.c: 188: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 20972  1518  3040               	movlw	64
 20973  1519  026B               	subwf	_eusartTxTail,w	;volatile
 20974  151A  1C03               	skipc
 20975  151B  2D1D               	goto	u485_21
 20976  151C  2D1E               	goto	u485_20
 20977  151D                     u485_21:
 20978  151D  2D1F               	goto	i1l5342
 20979  151E                     u485_20:
 20980  151E                     i1l5340:
 20981                           
 20982                           ;eusart.c: 189: {;eusart.c: 190: eusartTxTail = 0;
 20983  151E  01EB               	clrf	_eusartTxTail	;volatile
 20984  151F                     i1l5342:
 20985                           
 20986                           ;eusart.c: 191: };eusart.c: 192: eusartTxBufferRemaining++;
 20987  151F  3001               	movlw	1
 20988  1520  00F0               	movwf	??_EUSART_Transmit_ISR
 20989  1521  0870               	movf	??_EUSART_Transmit_ISR,w
 20990  1522  0021               	movlb	1	; select bank1
 20991  1523  07E2               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 20992                           
 20993                           ;eusart.c: 193: }
 20994  1524  2D27               	goto	i1l848
 20995  1525                     i1l845:
 20996                           
 20997                           ;eusart.c: 194: else;eusart.c: 195: {;eusart.c: 196: PIE3bits.TXIE = 0;
 20998  1525  002E               	movlb	14	; select bank14
 20999  1526  1219               	bcf	25,4	;volatile
 21000  1527                     i1l848:
 21001  1527  0008               	return
 21002  1528                     __end_of_EUSART_Transmit_ISR:
 21003                           
 21004                           	psect	text82
 21005  1437                     __ptext82:	
 21006 ;; *************** function _EUSART_Receive_ISR *****************
 21007 ;; Defined at:
 21008 ;;		line 200 in file "mcc_generated_files/eusart.c"
 21009 ;; Parameters:    Size  Location     Type
 21010 ;;		None
 21011 ;; Auto vars:     Size  Location     Type
 21012 ;;		None
 21013 ;; Return value:  Size  Location     Type
 21014 ;;                  1    wreg      void 
 21015 ;; Registers used:
 21016 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21017 ;; Tracked objects:
 21018 ;;		On entry : 0/0
 21019 ;;		On exit  : 0/0
 21020 ;;		Unchanged: 0/0
 21021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21025 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21026 ;;Total ram usage:        1 bytes
 21027 ;; Hardware stack levels used:    1
 21028 ;; This function calls:
 21029 ;;		Nothing
 21030 ;; This function is called by:
 21031 ;;		_EUSART_Initialize
 21032 ;;		_INTERRUPT_InterruptManager
 21033 ;; This function uses a non-reentrant model
 21034 ;;
 21035                           
 21036                           
 21037                           ;psect for function _EUSART_Receive_ISR
 21038  1437                     _EUSART_Receive_ISR:
 21039  1437                     i1l5344:	
 21040                           ;incstack = 0
 21041                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 21042                           
 21043                           
 21044                           ;eusart.c: 203: if(1 == RC1STAbits.OERR)
 21045  1437  0022               	movlb	2	; select bank2
 21046  1438  1C9D               	btfss	29,1	;volatile
 21047  1439  2C3B               	goto	u486_21
 21048  143A  2C3C               	goto	u486_20
 21049  143B                     u486_21:
 21050  143B  2C3E               	goto	i1l5348
 21051  143C                     u486_20:
 21052  143C                     i1l5346:
 21053                           
 21054                           ;eusart.c: 204: {;eusart.c: 207: RC1STAbits.CREN = 0;
 21055  143C  121D               	bcf	29,4	;volatile
 21056                           
 21057                           ;eusart.c: 208: RC1STAbits.CREN = 1;
 21058  143D  161D               	bsf	29,4	;volatile
 21059  143E                     i1l5348:
 21060                           
 21061                           ;eusart.c: 209: };eusart.c: 212: eusartRxBuffer[eusartRxHead++] = RC1REG;
 21062  143E  0819               	movf	25,w	;volatile
 21063  143F  00F0               	movwf	??_EUSART_Receive_ISR
 21064  1440  0020               	movlb	0	; select bank0
 21065  1441  086A               	movf	_eusartRxHead,w
 21066  1442  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
 21067  1443  0086               	movwf	6
 21068  1444  3002               	movlw	2	; select bank4/5
 21069  1445  0087               	movwf	7
 21070  1446  0870               	movf	??_EUSART_Receive_ISR,w
 21071  1447  0081               	movwf	1
 21072  1448                     i1l5350:
 21073  1448  3001               	movlw	1
 21074  1449  00F0               	movwf	??_EUSART_Receive_ISR
 21075  144A  0870               	movf	??_EUSART_Receive_ISR,w
 21076  144B  07EA               	addwf	_eusartRxHead,f	;volatile
 21077  144C                     i1l5352:
 21078                           
 21079                           ;eusart.c: 213: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 21080  144C  3040               	movlw	64
 21081  144D  026A               	subwf	_eusartRxHead,w	;volatile
 21082  144E  1C03               	skipc
 21083  144F  2C51               	goto	u487_21
 21084  1450  2C52               	goto	u487_20
 21085  1451                     u487_21:
 21086  1451  2C53               	goto	i1l5356
 21087  1452                     u487_20:
 21088  1452                     i1l5354:
 21089                           
 21090                           ;eusart.c: 214: {;eusart.c: 215: eusartRxHead = 0;
 21091  1452  01EA               	clrf	_eusartRxHead	;volatile
 21092  1453                     i1l5356:
 21093                           
 21094                           ;eusart.c: 216: };eusart.c: 217: eusartRxCount++;
 21095  1453  3001               	movlw	1
 21096  1454  00F0               	movwf	??_EUSART_Receive_ISR
 21097  1455  0870               	movf	??_EUSART_Receive_ISR,w
 21098  1456  07E8               	addwf	_eusartRxCount,f	;volatile
 21099  1457                     i1l853:
 21100  1457  0008               	return
 21101  1458                     __end_of_EUSART_Receive_ISR:
 21102  007E                     btemp	set	126	;btemp
 21103  007E                     int$flags	set	126
 21104  007E                     wtemp0	set	126
 21105                           
 21106                           	psect	config
 21107                           
 21108                           ;Config register CONFIG1 @ 0x8007
 21109                           ;	External Oscillator mode selection bits
 21110                           ;	FEXTOSC = OFF, Oscillator not enabled
 21111                           ;	Power-up default value for COSC bits
 21112                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
 21113                           ;	Clock Out Enable bit
 21114                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
 21115                           ;	Clock Switch Enable bit
 21116                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 21117                           ;	Fail-Safe Clock Monitor Enable bit
 21118                           ;	FCMEN = ON, FSCM timer enabled
 21119  8007                     	org	32775
 21120  8007  3FEC               	dw	16364
 21121                           
 21122                           ;Config register CONFIG2 @ 0x8008
 21123                           ;	Master Clear Enable bit
 21124                           ;	MCLRE = ON, MCLR pin is Master Clear function
 21125                           ;	Power-up Timer Enable bit
 21126                           ;	PWRTE = OFF, PWRT disabled
 21127                           ;	Low-Power BOR enable bit
 21128                           ;	LPBOREN = OFF, ULPBOR disabled
 21129                           ;	Brown-out reset enable bits
 21130                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
 21131                           ;	Brown-out Reset Voltage Selection
 21132                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
 21133                           ;	Zero-cross detect disable
 21134                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
 21135                           ;	Peripheral Pin Select one-way control
 21136                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
 21137                           ;	Stack Overflow/Underflow Reset Enable bit
 21138                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
 21139                           ;	Background Debugger
 21140                           ;	DEBUG = OFF, Background Debugger disabled
 21141  8008                     	org	32776
 21142  8008  3FFF               	dw	16383
 21143                           
 21144                           ;Config register CONFIG3 @ 0x8009
 21145                           ;	WDT Period Select bits
 21146                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 21147                           ;	WDT operating mode
 21148                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
 21149                           ;	WDT Window Select bits
 21150                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 21151                           ;	WDT input clock selector
 21152                           ;	WDTCCS = SC, Software Control
 21153  8009                     	org	32777
 21154  8009  3F9F               	dw	16287
 21155                           
 21156                           ;Config register CONFIG4 @ 0x800A
 21157                           ;	UserNVM self-write protection bits
 21158                           ;	WRT = OFF, Write protection off
 21159                           ;	Scanner Enable bit
 21160                           ;	SCANE = available, Scanner module is available for use
 21161                           ;	Low Voltage Programming Enable bit
 21162                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
 21163  800A                     	org	32778
 21164  800A  3FFF               	dw	16383
 21165                           
 21166                           ;Config register CONFIG5 @ 0x800B
 21167                           ;	UserNVM Program memory code protection bit
 21168                           ;	CP = OFF, Program Memory code protection disabled
 21169                           ;	DataNVM code protection bit
 21170                           ;	CPD = OFF, Data EEPROM code protection disabled
 21171  800B                     	org	32779
 21172  800B  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    49
    Data        11
    BSS         194
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     53      79
    BANK1            80     35      75
    BANK2            80      0      20
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    main$3496$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    main$3496	const PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    cmd_rc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_rtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_rp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_ra@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_ir@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    S1885$0$1	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    memset@p1	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    memset@p	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[7]), STR_3(CODE[7]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> update_menuLCD@l(BANK0[3]), update_menuLCD@tt(BANK0[4]), update_menuLCD@str(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_tri@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_trc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_aa@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_dtl@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_dac@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_mta@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_mmp@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    cmd_sc@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> main@buff(BANK1[20]), 

    sendMessage@buffer	PTR unsigned char  size(1) Largest target is 9
		 -> cmd_tri@buffEOM(BANK0[1]), cmd_tri@buffData(BANK0[5]), cmd_tri@buffInit(BANK0[4]), cmd_trc@buffEOM(BANK0[1]), 
		 -> cmd_trc@buffData(BANK0[5]), cmd_trc@buffInit(BANK0[3]), cmd_ir@buff(BANK0[7]), cmd_ra@buff(BANK0[9]), 
		 -> cmd_rp@buff(BANK0[5]), cmd_rtl@buff(BANK0[5]), cmd_rc@buff(BANK0[6]), sendERRORMessage@bufw(BANK0[4]), 
		 -> sendOKMessage@bufw(BANK0[4]), 

    differenceBetweenTimePeriod@diff	PTR struct Time size(1) Largest target is 3
		 -> update_menuLCD@diff(BANK0[3]), 

    LCDstr@p	PTR unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[4]), update_menuLCD@l(BANK0[3]), update_menuLCD@tt(BANK0[4]), update_menuLCD@str(BANK0[8]), 

    S1885command_d$cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    commands.cmd_fnct	PTR FTN(int ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> cmd_tri(), cmd_trc(), cmd_ir(), cmd_aa(), 
		 -> cmd_dtl(), cmd_dac(), cmd_ra(), cmd_mta(), 
		 -> cmd_mmp(), cmd_rp(), cmd_rtl(), cmd_sc(), 
		 -> cmd_rc(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> S1_ISR(), INT_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Clock_ISR(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    _main->_DATAEE_ReadByte
    _getch->_EUSART_Read
    _checkFlags->_wirteEEPROMinit
    _wirteEEPROMinit->_DATAEE_WriteByte
    _update_menuLCD->_differenceBetweenTimePeriod
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _LCDchar->_LCDsend2x4
    _LCDcmd->_LCDsend2x4
    _monitoring_TEMP_LUM->_DATAEE_WriteByte
    _tsttc->_WriteI2C
    _DATAEE_WriteByte->___wmul
    _cmd_tri->_DATAEE_ReadByte
    _cmd_tri->_sendERRORMessage
    _cmd_trc->_DATAEE_ReadByte
    _cmd_trc->_sendERRORMessage
    _DATAEE_ReadByte->___wmul
    _cmd_sc->_sendERRORMessage
    _cmd_sc->_sendOKMessage
    _cmd_mta->_sendERRORMessage
    _cmd_mta->_sendOKMessage
    _cmd_mmp->_sendERRORMessage
    _cmd_mmp->_sendOKMessage
    _cmd_dtl->_sendERRORMessage
    _cmd_dtl->_sendOKMessage
    _cmd_dac->_sendERRORMessage
    _cmd_dac->_sendOKMessage
    _cmd_aa->_sendERRORMessage
    _cmd_aa->_sendOKMessage
    _sendOKMessage->_sendMessage
    _sendERRORMessage->_sendMessage
    _sendMessage->_putch
    _putch->_EUSART_Write
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _LCDinit->_LCDsend2x4
    _LCDsend2x4->_WriteI2C
    _LCDsend->_WriteI2C

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _main->_editClock
    _main->_editLum
    _main->_editTemp
    _main->_toggleAlarms
    _toggleAlarms->_checkFlags
    _editTemp->_checkFlags
    _editLum->_checkFlags
    _editClock->_checkFlags
    _checkFlags->_update_menuLCD
    _wirteEEPROMinit->_DATAEE_WriteByte
    _update_menuLCD->_sprintf
    _sprintf->___lwmod
    _LCDstr->_LCDchar
    _monitoring_TEMP_LUM->_DATAEE_WriteByte
    _cmd_tri->_sendERRORMessage
    _cmd_trc->_sendERRORMessage
    _cmd_sc->_sendERRORMessage
    _cmd_sc->_sendOKMessage
    _cmd_mta->_sendERRORMessage
    _cmd_mta->_sendOKMessage
    _cmd_mmp->_sendERRORMessage
    _cmd_mmp->_sendOKMessage
    _cmd_dtl->_sendERRORMessage
    _cmd_dtl->_sendOKMessage
    _cmd_dac->_sendERRORMessage
    _cmd_dac->_sendOKMessage
    _cmd_aa->_sendERRORMessage
    _cmd_aa->_sendOKMessage
    _sendOKMessage->_sendMessage
    _sendERRORMessage->_sendMessage

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  236338
                                              0 BANK1     35    35      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                 _EUSART_is_rx_ready
            _INT_SetInterruptHandler
                            _LCDinit
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                  _SYSTEM_Initialize
           _TMR1_SetInterruptHandler
                     _TMR2_StopTimer
                             ___wmul
                         _checkFlags
                             _cmd_aa *
                            _cmd_dac *
                            _cmd_dtl *
                             _cmd_ir *
                            _cmd_mmp *
                            _cmd_mta *
                             _cmd_ra *
                             _cmd_rc *
                             _cmd_rp *
                            _cmd_rtl *
                             _cmd_sc *
                            _cmd_trc *
                            _cmd_tri *
                          _editClock
                            _editLum
                           _editTemp
                              _getch
                   _i2c1_driver_open
                             _memset
                       _toggleAlarms
 ---------------------------------------------------------------------------------
 (1) _toggleAlarms                                         1     1      0   33271
                                             52 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     651
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getch                                                0     0      0      24
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _editTemp                                             1     1      0   33271
                                             52 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editLum                                              1     1      0   33271
                                             52 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (1) _editClock                                            1     1      0   33271
                                             52 BANK0      1     1      0
                         _checkFlags
                     _update_menuLCD
 ---------------------------------------------------------------------------------
 (2) _checkFlags                                           1     1      0   23639
                                             51 BANK0      1     1      0
                 _PWM6_LoadDutyValue
               _PWM_Output_D4_Enable
                           _S1button
                    _TMR2_StartTimer
                _monitoring_TEMP_LUM
                     _update_menuLCD
                    _wirteEEPROMinit
 ---------------------------------------------------------------------------------
 (3) _wirteEEPROMinit                                      1     1      0    5887
                                              9 COMMON     1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _update_menuLCD                                      24    24      0    9632
                                             27 BANK0     24    24      0
                            _LCDchar
                             _LCDcmd
                             _LCDstr
                 _PWM6_LoadDutyValue
              _PWM_Output_D4_Disable
                     _TMR2_StopTimer
        _differenceBetweenTimePeriod
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             29    21      8    4638
                                              6 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     412
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _differenceBetweenTimePeriod                          8     1      7     595
                                              2 COMMON     8     1      7
 ---------------------------------------------------------------------------------
 (3) _TMR2_StopTimer                                       0     0      0       0
                          _TMR2_Stop
 ---------------------------------------------------------------------------------
 (4) _TMR2_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Disable                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_LoadDutyValue                                   4     2      2     348
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _LCDstr                                               6     4      2    1467
                                              1 BANK0      6     4      2
                            _LCDchar
 ---------------------------------------------------------------------------------
 (4) _LCDchar                                              1     1      0    1042
                                              0 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _LCDcmd                                               1     1      0    1042
                                              0 BANK0      1     1      0
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (3) _monitoring_TEMP_LUM                                  3     3      0    7772
                                              3 BANK0      3     3      0
           _ADCC_GetSingleConversion
                   _DATAEE_WriteByte
                             ___wmul
                              _tsttc
 ---------------------------------------------------------------------------------
 (4) _tsttc                                                2     2      0      99
                                              4 COMMON     2     2      0
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (5) _ReadI2C                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _DATAEE_WriteByte                                     4     1      3    5887
                                              8 COMMON     1     1      0
                                              0 BANK0      3     0      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADCC_GetSingleConversion                             4     1      3      22
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (4) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _S1button                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_D4_Enable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cmd_tri                                             25    22      3    9574
                                              7 BANK0     25    22      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_trc                                             27    24      3    9085
                                              7 BANK0     27    24      3
                    _DATAEE_ReadByte
                             ___wmul
                   _sendERRORMessage
                        _sendMessage
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1764
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2    1336
                                              8 COMMON     2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _cmd_sc                                               7     4      3    5803
                                              7 BANK0      7     4      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rtl                                              9     6      3    2748
                                              7 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rp                                               9     6      3    2748
                                              7 BANK0      9     6      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_rc                                              10     7      3    2785
                                              7 BANK0     10     7      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ra                                              13    10      3    2896
                                              7 BANK0     13    10      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mta                                              3     0      3    5546
                                              7 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_mmp                                              3     0      3    5546
                                              7 BANK0      3     0      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_ir                                              11     8      3    2822
                                              7 BANK0     11     8      3
                             ___wmul (ARG)
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dtl                                              5     2      3    5707
                                              7 BANK0      5     2      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_dac                                              7     4      3    5803
                                              7 BANK0      7     4      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (1) _cmd_aa                                               4     1      3    5608
                                              7 BANK0      4     1      3
                             ___wmul (ARG)
                   _sendERRORMessage
                      _sendOKMessage
 ---------------------------------------------------------------------------------
 (2) _sendOKMessage                                        6     6      0    2742
                                              9 COMMON     1     1      0
                                              2 BANK0      5     5      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (2) _sendERRORMessage                                     6     6      0    2742
                                              9 COMMON     1     1      0
                                              2 BANK0      5     5      0
                        _sendMessage
 ---------------------------------------------------------------------------------
 (2) _sendMessage                                          6     3      3    2563
                                              5 COMMON     4     1      3
                                              0 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     544
                    _ADCC_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM6_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     174
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     196
                                              4 COMMON     1     1      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0    1073
                                              0 BANK0      1     1      0
                            _LCDsend
                         _LCDsend2x4
 ---------------------------------------------------------------------------------
 (5) _LCDsend2x4                                           6     5      1    1011
                                              4 COMMON     6     5      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _LCDsend                                              2     2      0      62
                                              4 COMMON     2     2      0
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (6) _WriteI2C                                             2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     240
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                            _INT_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     240
                   Absolute function *
                          _Clock_ISR *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Clock_ISR                                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (10) _INT_CallBack                                        0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
                             _S1_ISR *
 ---------------------------------------------------------------------------------
 (11) _S1_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
     ___wmul (ARG)
   _DATAEE_WriteByte
     ___wmul (ARG)
   _EUSART_is_rx_ready
   _INT_SetInterruptHandler
   _LCDinit
     _LCDsend
       _WriteI2C
     _LCDsend2x4
       _WriteI2C
   _PWM6_LoadDutyValue
   _PWM_Output_D4_Disable
   _SYSTEM_Initialize
     _ADCC_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM6_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
   _TMR1_SetInterruptHandler
   _TMR2_StopTimer
     _TMR2_Stop
   ___wmul
   _checkFlags
     _PWM6_LoadDutyValue
     _PWM_Output_D4_Enable
     _S1button
     _TMR2_StartTimer
       _TMR2_Start
     _monitoring_TEMP_LUM
       _ADCC_GetSingleConversion
       _DATAEE_WriteByte
         ___wmul (ARG)
       ___wmul
       _tsttc
         _ReadI2C
         _WriteI2C
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _wirteEEPROMinit
       _DATAEE_WriteByte
         ___wmul (ARG)
   _cmd_aa *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dac *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_dtl *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ir *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_mmp *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_mta *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_ra *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rc *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rp *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_rtl *
     ___wmul (ARG)
     _sendMessage (ARG)
       _putch
         _EUSART_Write
   _cmd_sc *
     ___wmul (ARG)
     _sendERRORMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
     _sendOKMessage (ARG)
       _sendMessage
         _putch
           _EUSART_Write
   _cmd_trc *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _cmd_tri *
     _DATAEE_ReadByte
       ___wmul (ARG)
     ___wmul
     _sendERRORMessage
       _sendMessage
         _putch
           _EUSART_Write
     _sendMessage
       _putch
         _EUSART_Write
   _editClock *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editLum *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _editTemp *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _getch *
     _EUSART_Read
   _i2c1_driver_open *
   _memset *
   _toggleAlarms *
     _checkFlags
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Enable
       _S1button
       _TMR2_StartTimer
         _TMR2_Start
       _monitoring_TEMP_LUM
         _ADCC_GetSingleConversion
         _DATAEE_WriteByte
           ___wmul (ARG)
         ___wmul
         _tsttc
           _ReadI2C
           _WriteI2C
       _update_menuLCD
         _LCDchar
           _LCDsend2x4
             _WriteI2C
         _LCDcmd
           _LCDsend2x4
             _WriteI2C
         _LCDstr
           _LCDchar
             _LCDsend2x4
               _WriteI2C
         _PWM6_LoadDutyValue
         _PWM_Output_D4_Disable
         _TMR2_StopTimer
           _TMR2_Stop
         _differenceBetweenTimePeriod
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _wirteEEPROMinit
         _DATAEE_WriteByte
           ___wmul (ARG)
     _update_menuLCD
       _LCDchar
         _LCDsend2x4
           _WriteI2C
       _LCDcmd
         _LCDsend2x4
           _WriteI2C
       _LCDstr
         _LCDchar
           _LCDsend2x4
             _WriteI2C
       _PWM6_LoadDutyValue
       _PWM_Output_D4_Disable
       _TMR2_StopTimer
         _TMR2_Stop
       _differenceBetweenTimePeriod
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
       _S1_ISR *
   _TMR1_ISR *
     Absolute function(Fake) *
     _Clock_ISR *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     35      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     23      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      14       9       25.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     13A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Dec 08 15:09:41 2020

               ?_EUSART_SetRxInterruptHandler 0072                                             _t 0059  
                                          l30 08D0                                            l22 1365  
                                          l23 1366                                            l33 08A2  
                                          l42 08C0                                            l26 136B  
                                          l35 08A7                                            l47 08CF  
                                          _nr 0060                           ___wmul@multiplicand 0074  
                 __size_of_PWM6_LoadDutyValue 0016                             sendMessage@buffer 0077  
                              _update_menuLCD 037A                                           l128 0885  
                                         l253 1272                                           l182 13BD  
                                         l185 1251                                           l409 13DB  
                                         l188 122F                                           l540 12CA  
                                         l620 12F2                                           l525 1320  
                                         l439 1215                                           l617 1299  
                                         l537 12C1                                           l730 14D9  
                                         l811 07FF                                           l731 14DF  
                                         l734 1266                                           l662 11EB  
                                         l647 12A7                                           l760 128C  
                                         l832 157D                                           l656 11E5  
                                         l728 14D5                                           l817 11DF  
                                         l833 1586                                           l665 11F3  
                                         l754 120F                                           l842 121B  
                                         l659 11EF                                           l827 1502  
                                         l836 15A1                                           l839 11F7  
                                         l856 1209                                           l859 1203  
                                         _PR2 028D                               _timer1ReloadVal 00DC  
                     __size_of_PMD_Initialize 0008                               _TMR2_Initialize 129A  
                                         wreg 0009                                  ?_EUSART_Read 0070  
                                 ?_LCDsend2x4 0074                               __end_of_LCDchar 125B  
                                        l1030 0DAB                                          l1014 0D6E  
                                        l1105 083D                                          l1041 0DDC  
                                        l1017 0D7A                                          l1106 083E  
                                        l1210 0784                                          l1050 0DF2  
                                        l1042 0DDE                                          l1018 0D7B  
                                        l1300 049D                                          l1109 0842  
                                        l1029 0DAA                                          l1222 07CC  
                                        l1054 0E01                                          l1223 07CD  
                                        l1055 0E02                                          l1047 0DED  
                                        l1048 0DEE                                          l1232 1237  
                                        l1241 13A1                                          l1226 07D4  
                                        l1066 0E31                                          l1410 15D0  
                                        l1219 07BA                                          l1067 0E32  
                                        l1235 125A                                          l1084 0E74  
                                        l1260 11E8                                          l2220 12DC  
                                        l1093 080D                                          l1229 0AD5  
                                        l1085 0E75                                          l1333 0F57  
                                        l1309 054B                                          l1325 0583  
                                        l1421 15A2                                          l1094 080E  
                                        l1078 0E63                                          l1254 1667  
                                        l1079 0E65                                          l2039 1781  
                                        l1407 1633                                          l1440 1386  
                                        l1088 0E7A                                          l1424 15B6  
                                        l1257 11E2                                          l1361 0909  
                                        l1353 0FFF                                          l2049 16D1  
                                        l1418 1601                                          l2226 1417  
                                        l1195 0740                                          l1443 13F9  
                                        l1515 0C74                                          l1451 17C0  
                                        l1291 0497                                          l1196 0741  
                                        l1364 092D                                          l1276 0B83  
                                        l1428 15CF                                          l1437 14BC  
                                        l1446 154C                                          l1454 1478  
                                        l1462 1337                                          l1470 1745  
                                        l1294 0459                                          l1359 0925  
                                        l1375 0991                                          l5000 0868  
                                        l1480 169C                                          l1288 0421  
                                        l1457 1499                                          l1297 0483  
                                        l1385 09DD                                          l5010 0872  
                                        l5002 086A                                          l1490 1575  
                                        l1378 0992                                          l1538 02B8  
                                        l1467 1351                                          l1475 17FF  
                                        l5100 07F3                                          l5020 087E  
                                        l5012 0875                                          l5004 086C  
                                        l1396 09F5                                          l5110 07FD  
                                        l5102 07F4                                          l5030 124C  
                                        l5022 0880                                          l5014 0877  
                                        l5006 086E                                          l1487 1709  
                                        l1399 1602                                          l5040 130A  
                                        l5104 07F9                                          l5032 124D  
                                        l5024 0882                                          l5016 0879  
                                        l5008 0870                                          l1728 05A1  
                                        l6010 08AC                                          l5042 131C  
                                        l5106 07FB                                          l5034 1250  
                                        l5018 087C                                          l5026 1228  
                                        l5050 129E                                          l5130 1260  
                                        l1498 0D6D                                          l4402 11E9  
                                        l1746 0654                                          l1763 0721  
                                        l6020 08C4                                          l6004 088F  
                                        l5044 131E                                          l5108 07FC  
                                        l5028 1249                                          l5036 128D  
                                        l5060 13C1                                          l5052 12A1  
                                        l5132 1261                                          l4500 12BD  
                                        l6100 16C7                                          l5300 1267  
                                        l6006 0898                                          l6030 0734  
                                        l5038 1294                                          l5070 13D0  
                                        l5062 13C3                                          l5054 12A2  
                                        l5046 129A                                          l5134 1262  
                                        l5126 125B                                          l4502 12BE  
                                        l6110 14C9                                          l6102 16CD  
                                        l4430 12D9                                          l5150 14E6  
                                        l5302 126C                                          l1767 1422  
                                        l6008 08A1                                          l6016 08AE  
                                        l6040 0766                                          l6032 0745  
                                        l5080 128A                                          l5072 13D1  
                                        l5064 13C5                                          l5056 12A4  
                                        l5048 129D                                          l5136 1263  
                                        l5128 125E                                          l4440 141E  
                                        l7000 0C70                                          l4504 12BF  
                                        l6120 14D2                                          l6112 14CD  
                                        l4512 12DD                                          l4600 1634  
                                        l4432 12DB                                          l4424 12CC  
                                        l5160 14FC                                          l5152 14EF  
                                        l5304 126D                                          l1769 1436  
                                        l6018 08B7                                          l6050 0796  
                                        l6042 0772                                          l6034 0750  
                                        l6026 0723                                          l5090 07EA  
                                        l5082 07D5                                          l5074 13D8  
                                        l5066 13C7                                          l5058 13BE  
                                        l5138 1264                                          l4442 1427  
                                        l4514 11E3                                          l4506 12C0  
                                        l6122 14D4                                          l6114 14CE  
                                        l6106 14BD                                          l6130 0D7F  
                                        l4610 1651                                          l4602 1635  
                                        l4450 1746                                          l4426 12CD  
                                        l6210 05CF                                          l6202 05A6  
                                        l5162 14FF                                          l5154 14F3  
                                        l5146 14E0                                          l5306 126F  
                                        l7010 00A5                                          l5324 11DD  
                                        l6060 07C0                                          l6052 079C  
                                        l6044 0778                                          l6036 0754  
                                        l6028 0728                                          l5092 07EC  
                                        l5084 07D7                                          l5076 1280  
                                        l5068 13CE                                          l4444 142C  
                                        l4436 1418                                          l4508 12C6  
                                        l6124 14DA                                          l6116 14CF  
                                        l6108 14C5                                          l6140 0DAF  
                                        l6132 0D8A                                          l4516 11F0  
                                        l4612 1657                                          l4604 163B  
                                        l4460 175A                                          l4452 1748  
                                        l4428 12D3                                          l6220 0606  
                                        l6212 05DE                                          l6204 05AF  
                                        l6300 037A                                          l5164 1501  
                                        l5156 14F9                                          l5148 14E0  
                                        l7100 0269                                          l7020 00C7  
                                        l7012 00B6                                          l6062 07D1  
                                        l6054 07A8                                          l6046 0784  
                                        l6038 0760                                          l5094 07EE  
                                        l5086 07DE                                          l5078 1283  
                                        l6070 1587                                          l6126 1217  
                                        l4446 1432                                          l4438 141A  
                                        l6118 14D0                                          l6150 0DE2  
                                        l6142 0DBA                                          l6134 0D8E  
                                        l4614 11E6                                          l4606 1641  
                                        l4470 1777                                          l4462 175E  
                                        l4454 174E                                          l6230 061E  
                                        l6222 060D                                          l6214 05E2  
                                        l6206 05BB                                          l6310 03C8  
                                        l6302 0381                                          l5158 14FA  
                                        l7110 028D                                          l7102 0270  
                                        l7030 00E5                                          l7022 00C9  
                                        l7014 00B8                                          l7006 0099  
                                        l6056 07AE                                          l6048 078A  
                                        l5096 07F0                                          l5088 07E7  
                                        l6072 1591                                          l6080 159F  
                                        l6064 1577                                          l6160 0E21  
                                        l6152 0DF6                                          l6144 0DBE  
                                        l6136 0D9A                                          l6128 0D6E  
                                        l4608 164B                                          l4464 176D  
                                        l4456 1751                                          l4472 177D  
                                        l6240 063A                                          l6224 0611  
                                        l6208 05BE                                          l6400 0528  
                                        l6320 03EB                                          l6312 03CE  
                                        l6304 039F                                          l5328 11F4  
                                        l7120 02AE                                          l7112 0290  
                                        l7104 0276                                          l7040 010B  
                                        l7032 00E9                                          l7016 00BA  
                                        l7008 00A2                               __end_of_LCDinit 0AD6  
                                        l6058 07BA                                          l5098 07F1  
                                        l4730 120A                                          l5290 13AE  
                                        l5282 13A2                                          l6074 1595  
                                        l6066 1577                                          l4394 1352  
                                        l6170 0E51                                          l6162 0E25  
                                        l6154 0E06                                          l6146 0DCA  
                                        l6138 0D9E                                          l6082 1254  
                                        l4466 1771                                          l4458 1756  
                                        l6090 16AC                                          l6250 0668  
                                        l6242 0644                                          l6226 0615  
                                        l6218 05EE                                          l6410 0546  
                                        l6402 052E                                          l6330 0412  
                                        l6322 03F4                                          l6314 03D7  
                                        l6306 03BC                                          l7130 02CC  
                                        l7114 0298                                          l7122 02B1  
                                        l7106 027C                                          l7050 01DE  
                                        l7042 0110                                          l7034 00F6  
                                        l7018 00BB                                          l4732 11FE  
                                        l5292 13B1                                          l5284 13A5  
                                        l6076 159B                                          l6068 1582  
                                        l4396 135C                                          l6172 0E57  
                                        l6164 0E36                                          l6156 0E11  
                                        l6148 0DD0                                          l6500 0FFB  
                                        l6180 1232                                          l4468 1772  
                                        l6092 16B0                                          l6084 169D  
                                        l6260 0680                                          l6252 066B  
                                        l6244 064A                                          l6236 0620  
                                        l6228 0619                                          l6420 0562  
                                        l6404 0533                                          l6412 054C  
                                        l6340 043C                                          l6332 0419  
                                        l6324 03FB                                          l6316 03DD  
                                        l6308 03C0                                          l7140 0300  
                                        l7116 029C                                          l7108 0282  
                                        l7060 0218                                          l7052 01EA  
                                        l7044 01BB                                          l7036 0103  
                                        l7028 00CD                                          l4734 1204  
                                        l4726 1210                                          l5294 13B4  
                                        l5286 13A8                                          l6078 159C  
                                        l6510 14AE                                          l4398 136A  
                                        l6174 0E69                                          l6166 0E41  
                                        l6158 0E15                                          l6502 0FFD  
                                        l6182 1387                                          l6094 16B4  
                                        l6086 16A4                                          l6270 06A2  
                                        l6262 0686                                          l6254 066F  
                                        l6246 0650                                          l6190 058B  
                                        l6430 057F                                          l6422 0569  
                                        l6414 0553                                          l6406 053A  
                                        l6350 0480                                          l6342 0441  
                                        l6334 042A                                          l6326 0403  
                                        l6318 03E5                                          l7142 0314  
                                        l7150 032F                                          l7118 02A3  
                                        l7126 02B8                                          l7070 0248  
                                        l7062 0224                                          l7054 01F6  
                                        l7046 01C6                                          l7038 0105  
                                        l6520 0821                                          l6512 0801  
                                        l5296 13B7                                          l5288 13AB  
                                        l6504 149A                                          l4736 11E0  
                                        l4728 11EC                                          l6176 0E79  
                                        l6168 0E45                                          l6440 0F46  
                                        l6432 0E7B                                          l6184 1388  
                                        l6096 16BE                                          l6088 16A7  
                                        l6280 06C4                                          l6272 06A9  
                                        l6264 068D                                          l6256 0675  
                                        l6248 065F                                          l6192 0591  
                                        l6424 056E                                          l6416 0558  
                                        l6408 053F                                          l6352 0488  
                                        l6344 0447                                          l6336 0431  
                                        l6328 0409                                          l7160 034B  
                                        l7152 0336                                          l7144 0321  
                                        l7136 02CE                                          l7128 02C0  
                                        l7080 0250                                          l7072 0249  
                                        l7064 0230                                          l7056 0202  
                                        l7048 01D2                                          l6522 082D  
                                        l6514 0801                                          l5298 13BA  
                                        l6506 149E                                          l4498 12BA  
                                        l6450 0F72                                          l6442 0F4D  
                                        l6434 0E94                                          l6186 138C  
                                        l6098 16C2                                          l6290 0700  
                                        l6274 06AD                                          l6266 0691  
                                        l6282 06C8                                          l6258 067C  
                                        l6194 0598                                          l6426 0573  
                                        l6418 055D                                          l6370 04A1  
                                        l6354 048A                                          l6346 0464  
                                        l6338 0436                                          l6530 0937  
                                        l7170 0365                                          l7162 034F  
                                        l7154 033A                                          l7146 032C  
                                        l7138 02E8                                          l7090 0259  
                                        l7082 0252                                          l7074 024A  
                                        l7066 023C                                          l7058 020D  
                                        l6524 0831                                          l6516 0812  
                                        l6508 14A9                                          l6460 0F98  
                                        l6452 0F73                                          l6444 0F53  
                                        l6436 0EA5                                          l6284 06CD  
                                        l6276 06B7                                          l6268 069C  
                                        l6196 059D                                          l6292 0709  
                                        l6188 0586                                          l6428 0578  
                                        l6380 04D4                                          l6372 04A7  
                                        l6356 0490                                          l6348 0479  
                                        l6540 0946                                          l6532 0939  
                                        l6700 09C4                                          l7172 0374  
                                        l7164 0356                                          l7156 0340  
                                        l7148 032C                                          l7092 025A  
                                        l7084 0253                                          l7076 024B  
                                        l7068 0247                                          l6518 081D  
                                        l4950 08E3                                          l6470 0FBF  
                                        l6462 0F9A                                          l6454 0F79  
                                        l6446 0F5B                                          l6438 0EB6  
                                        l6286 06F5                                          l6278 06BD  
                                        l6294 071D                                          l6198 05A2  
                                        l6390 050A                                          l6382 04DA  
                                        l6374 04B9                                          l6358 0493  
                                        l6550 0957                                          l6534 093E  
                                        l6542 0948                                          l6526 092E  
                                        l6702 09C9                                          l6710 09DD  
                                        l7166 035A                                          l7158 0344  
                                        l7094 025B                                          l7086 0255  
                                        l7078 024D                                          l6800 148E  
                                        l4960 0904                                          l4952 08E8  
                                        l4944 08D1                                          l6480 0FD4  
                                        l6472 0FC4                                          l6464 0FA5  
                                        l6456 0F7F                                          l6448 0F6F  
                                        l6288 06FC                                          l6392 050E  
                                        l6384 04EC                                          l6376 04C8  
                                        l6368 049D                                          l6560 096D  
                                        l6552 095A                                          l6544 094D  
                                        l6536 0941                                          l6528 0934  
                                        l6712 09E6                                          l6704 09D0  
                                        l6720 1607                                          l7168 0361  
                                        l7096 0266                                          l7088 0256  
                                        l6650 0A6D                                          l6570 136E  
                                        l6802 1321                                          l6810 1338  
                                        l4962 0917                                          l4954 08ED  
                                        l4946 08D8                                          l6490 0FE8  
                                        l6474 0FCA                                          l6482 0FD7  
                                        l6458 0F84                                          l6466 0FB0  
                                        l6394 0516                                          l6386 04FB  
                                        l6378 04D0                                          l6298 0AD6  
                                        l6562 097D                                          l6554 095C  
                                        l6546 0950                                          l6538 0943  
                                        l6706 09D6                                          l6714 09E9  
                                        l6730 161B                                          l6722 160C  
                                        l7098 0268                                          l6660 0A8D  
                                        l6652 0A71                                          l4980 0849  
                                        l6580 13EE                                          l6572 1376  
                                        l6804 1329                                          l6812 1343  
                                        l6820 172B                                          l6900 0CE2  
                                        l4964 091A                                          l4948 08DD  
                                        l4956 08F0                                          l6492 0FEE  
                                        l6484 0FD9                                          l6476 0FD0  
                                        l6468 0FB7                                          l6396 051D  
                                        l6388 0503                                          l6564 0983  
                                        l6556 0962                                          l6548 0952  
                                        l6716 09EC                                          l6708 09D8  
                                        l6740 15D5                                          l6732 1624  
                                        l6724 160F                                          l5780 1400  
                                        l6670 0AB1                                          l6662 0A95  
                                        l6654 0A79                                          l4990 0853  
                                        l4982 084B                                          l6574 1377  
                                        l6806 132E                                          l6814 1348  
                                        l6822 1736                                          l6830 17D7  
                                        l6910 0CE8                                          l6902 0CE2  
                                        l4966 0921                                          l4958 08F7  
                                        l6494 0FF4                                          l6486 0FDB  
                                        l6478 0FD2                                          l6398 0523  
                                        l6566 0986                                          l6558 0967  
                                        l6718 09F3                                          l6750 15E9  
                                        l6742 15DA                                          l6726 1614  
                                        l6734 1627                                          l5782 1407  
                                        l6680 0ACC                                          l6672 0AB5  
                                        l6664 0A99                                          l6656 0A7D  
                                        l6648 0A64                                          l4992 0856  
                                        l4984 084D                                          l6576 137B  
                                        l6808 1333                                          l6816 134D  
                                        l6824 173A                                          l6832 17DD  
                                        l6840 17FB                                          l6920 0D2A  
                                        l6912 0D06                                          l6904 0CE6  
                                        l6496 0FF6                                          l6488 0FE2  
                                        l6568 098D                                          l6752 15F2  
                                        l6744 15DD                                          l6736 162A  
                                        l6728 161A                                          l5784 140B  
                                        l6760 15A7                                          l6674 0ABD  
                                        l6666 0AA1                                          l6658 0A89  
                                        l4994 0858                                          l4986 084F  
                                        l4978 0843                                          l6578 13DE  
                                        l6818 170A                                          l6834 17E3  
                                        l6826 17C1                                          l6850 1686  
                                        l6842 1668                                          l6930 0D58  
                                        l6922 0D2F                                          l6914 0D15  
                                        l6498 0FF8                                          l6690 09AE  
                                        l6682 0997                                          l6746 15E2  
                                        l6754 15F5                                          l6738 1632  
                                        l5778 13FB                                          l6770 15C5  
                                        l6762 15AD                                          l6676 0AC2  
                                        l6668 0AA5                                          l4996 085A  
                                        l4988 0851                                          l6940 0B96  
                                        l6780 1792                                          l6836 17EA  
                                        l6828 17D1                                          l6852 1693  
                                        l6844 1673                                          l6860 16E3  
                                        l6932 0D5D                                          l6924 0D43  
                                        l6916 0D19                                          l6692 09B0  
                                        l6684 099D                                          l6756 15F8  
                                        l6748 15E8                                          l6772 15CD  
                                        l6764 15B2                                          l6678 0AC7  
                                        l4998 085C                                          l6950 0BB1  
                                        l6942 0B9B                                          l6774 1528  
                                        l6790 17B7                                          l6782 1798  
                                        l6838 17F6                                          l6846 1679  
                                        l6854 1698                                          l6870 1700  
                                        l6862 16E7                                          l6926 0D45  
                                        l6918 0D1F                                          l6934 0D69  
                                        l6694 09B5                                          l6686 09A2  
                                        l6758 1600                                          l6766 15BF  
                                        l6960 0BCD                                          l6952 0BB6  
                                        l6944 0BA1                                          l6936 0B84  
                                        l6776 1541                                          l6784 179E  
                                        l6792 17BC                                          l6848 167F  
                                        l6872 1705                                          l6864 16EC  
                                        l6856 16D2                                          l6928 0D4A  
                                        l6880 0C7D                                          l6696 09BC  
                                        l6688 09A8                                          l6768 15C2  
                                        _ALAF 0067                                          l6970 0BF6  
                                        l6954 0BBB                                          l6946 0BA7  
                                        l6938 0B8C                                          l6786 17A4  
                                        l6778 1782                                          l6794 1458  
                                        l6866 16F5                                          l6858 16DC  
                                        l6874 154D                                          l6890 0CB6  
                                        l6882 0C88                                          l6698 09C2  
                                        l5996 0887                                          l6980 0C21  
                                        l6964 0BD2                                          l6956 0BC1  
                                        l6948 0BAD                                          l6788 17AB  
                                        l6796 146D                                          l6868 16FC  
                                        l6876 156A                                          l6892 0CC5  
                                        l6884 0C8E                                          l5998 088A  
                                        l6990 0C48                                          l6982 0C27  
                                        l6966 0BE2                                          l6958 0BC7  
                                        l6798 1479                                          l6886 0C9B  
                                        l6878 0C75                               __end_of_LCDsend 0843  
                                        l6992 0C57                                          l6984 0C32  
                                        l6976 0BF7                                          l6968 0BED  
                                        l6896 0CCA                                          l6888 0CAA  
                                        l6986 0C40                                          l6978 0C1D  
                                        l6994 0C5A                                          l6898 0CD7  
                                        l6996 0C60                                          l6988 0C44  
                                        l6998 0C64                                          STR_1 1827  
                                        STR_2 1827                                          STR_3 1840  
                                        STR_4 1840                                          STR_5 1847  
                                        STR_6 1847                                          STR_7 184C  
                                        _LATA 0016                                          _LATB 0017  
                             __end_of_INT_ISR 11FE                                          _LATC 0018  
                                        _LATD 0019                                          _LATE 001A  
                                        u3300 136A                                          u3301 1369  
                                        u3400 174E                                          u3401 174D  
                                        _T2PR 028D                                          u3420 175E  
                                        u3340 12D3                                          u3421 175D  
                                        u3341 12D2                                          u3350 12D9  
                                        u3415 1752                                          u3351 12D8  
                                        u3360 141E                                          u3280 135C  
                                        u3440 176D                                          u3361 141D  
                                        u3281 135B                                          u3441 176C  
                                        u3530 12C6                                          u3290 1365  
                                        u3531 12C5                                          u3291 1364  
                                        u3435 175F                                          u6100 08B7  
                                        u4500 0904                                          u3460 177D  
                                        u6101 08B6                                          u4501 0903  
                                        u3461 177C                                          u3445 1769  
                                        u6110 08C0                                          u3390 1432  
                                        u4510 0917                                          u6111 08BF  
                                        u3391 1431                                          u3375 1423  
                                        u4511 0916                                          u3455 1773  
                                        u6120 08C4                                          u6200 0784  
                                        u4520 0921                                          u7000 052E  
                                        u6121 08C3                                          u6201 0783  
                                        u3385 1428                                          u4521 0920  
                                        u4505 0900                                          u3545 12EC  
                                        u7001 052D                                          u6130 08CF  
                                        u6050 088E                                          u6210 0796  
                                        u4450 08D8                                          u7010 053A  
                                        u6131 08CE                                          u6051 088D  
                                        u6211 0795                                          u4515 0913  
                                        u4451 08D7                                          u7011 0539  
                                        u6060 0898                                          u6220 07A8  
                                        u4460 08DD                                          u7100 0EB6  
                                        u3820 1641                                          u7020 0546  
                                        _PMD0 0796                                          u6061 0897  
                                        u6221 07A7                                          u4461 08DC  
                                        u7101 0EB5                                          u3821 1640  
                                        u7021 0545                                          _PMD1 0797  
                                        u6070 08A1                                          u6230 07BA  
                                        u6150 0740                                          u4470 08E3  
                                        u7110 0F4D                                          u3830 1657  
                                        u6310 16B4                                          u7030 0553  
                                        _PMD2 0798                                          u6071 08A0  
                                        u6231 07B9                                          u6151 073F  
                                        u4471 08E2                                          u7111 0F4C  
                                        u3831 1656                                          u6311 16B3  
                                        u7031 0552                                          _PMD3 0799  
                                        u6080 08A7                                          u6240 07CC  
                                        u6160 0745                                          u8000 16E3  
                                        u4480 08E8                                          u6400 0DAA  
                                        u7200 0FE2                                          u7120 0F53  
                                        u6320 16BE                                          u7040 0558  
                                        u4560 14E6                                          _PMD4 079A  
                                        u6081 08A6                                          u6241 07CB  
                                        u6161 0744                                          u6145 072B  
                                        u8001 16E2                                          u4481 08E7  
                                        u6401 0DA9                                          u7201 0FE1  
                                        u7121 0F52                                          u7105 0EB2  
                                        u6321 16BD                                          u6305 16A8  
                                        u7041 0557                                          u4561 14E5  
                                        _PMD5 079B                                          u6090 08AC  
                                        u6250 07D1                                          u6170 0750  
                                        u8010 16F5                                          u4490 08F7  
                                        u6410 0DAF                                          u7210 0FE8  
                                        u7130 0F6F                                          u7050 0569  
                                        u4570 14F9                                          u6091 08AB  
                                        u6251 07D0                                          u6171 074F  
                                        u8011 16F4                                          u4491 08F6  
                                        u6411 0DAE                                          u7211 0FE7  
                                        u7131 0F6E                                          u7051 0568  
                                        u4571 14F8                                          u6180 0760  
                                        u6260 157D                                          u8100 0B8C  
                                        u8020 16FC                                          u6500 0E06  
                                        u6420 0DBA                                          u7220 0FEE  
                                        u7140 0F79                                          u6340 16CD  
                                        u7060 056E                                          u7300 0934  
                                        u4820 126C                                          u6181 075F  
                                        u6261 157C                                          u8101 0B8B  
                                        u8021 16FB                                          u6501 0E05  
                                        u6421 0DB9                                          u7221 0FED  
                                        u7141 0F78                                          u6341 16CC  
                                        u6325 16BA                                          u7061 056D  
                                        u7301 0933                                          u4821 126B  
                                        u6190 0772                                          u6270 1582  
                                        u7230 14BC                                          u8110 0BA1  
                                        u8030 0C7D                                          u6350 14D9  
                                        u6510 0E11                                          u6430 0DCA  
                                        u7150 0F98                                          u7070 057F  
                                        u7310 093E                                          u5710 1417  
                                        u6191 0771                                          u6271 1581  
                                        u7231 14BB                                          u8111 0BA0  
                                        u8031 0C7C                                          u6351 14D8  
                                        u6511 0E10                                          u6431 0DC9  
                                        u7151 0F97                                          u7135 0F6B  
                                        u6335 16C3                                          u7071 057E  
                                        u7311 093D                                          u5711 1416  
                                        u7240 080D                                          u6280 159B  
                                        u8120 0BAD                                          u8040 0C9B  
                                        u6600 0E79                                          u6520 0E21  
                                        u6440 0DDC                                          u6360 0D7A  
                                        u7160 0FB7                                          u7320 094D  
                                        u8200 00C7                                          u7241 080C  
                                        u6281 159A                                          u8121 0BAC  
                                        u8041 0C9A                                          u6601 0E78  
                                        u6521 0E20                                          u6441 0DDB  
                                        u6361 0D79                                          u7161 0FB6  
                                        u7321 094C                                          u8201 00C6  
                                        u7250 0812                                          u8130 0BBB  
                                        u8050 0CB6                                          u6530 0E31  
                                        u6450 0DE2                                          u6370 0D7F  
                                        u7170 0FBF                                          u7090 0EA5  
                                        u6610 13A1                                          u6290 16A4  
                                        u7330 0957                                          u8210 00F6  
                                        u7251 0811                                          u7235 14B8  
                                        u8131 0BBA                                          u8051 0CB5  
                                        u6531 0E30                                          u6451 0DE1  
                                        u6371 0D7E                                          u7171 0FBE  
                                        u7155 0F94                                          u7091 0EA4  
                                        u6611 13A0                                          u6291 16A3  
                                        u7331 0956                                          u8211 00F5  
                                        u7260 081D                                          u8140 0BC7  
                                        u8060 0CC5                                          u6540 0E36  
                                        u6460 0DED                                          u6380 0D8A  
                                        u7180 0FC4                                          u6700 065F  
                                        u6620 0591                                          u7340 0962  
                                        u8300 02B7                                          u8220 0103  
                                        u7261 081C                                          u8141 0BC6  
                                        u8061 0CC4                                          u8045 0C97  
                                        u6541 0E35                                          u6461 0DEC  
                                        u6381 0D89                                          u7181 0FC3  
                                        u7085 0E8C                                          u6701 065E  
                                        u6621 0590                                          u7341 0961  
                                        u8301 02B6                                          u8221 0102  
                                        _TALA 006D                                          u7270 082D  
                                        u8150 0BCD                                          u8070 0D1F  
                                        u6550 0E41                                          u6470 0DF2  
                                        u6390 0D9A                                          u7190 0FCA  
                                        u6710 066F                                          u6630 05BB  
                                        u7350 0967                                          u8310 02C0  
                                        u8230 010B                                          u7271 082C  
                                        u8151 0BCC                                          u8071 0D1E  
                                        u8055 0CB2                                          u6551 0E40  
                                        u6471 0DF1                                          u6391 0D99  
                                        u7191 0FC9                                          u7095 0EA1  
                                        u6711 066E                                          u6631 05BA  
                                        u7351 0966                                          u8311 02BF  
                                        u8231 010A                                          u8215 00F2  
                                        u7280 083D                                          u8160 0C27  
                                        u8080 0D43                                          u6560 0E51  
                                        u6480 0DF6                                          u6720 0675  
                                        u6640 05EE                                          u6800 0381  
                                        u7360 097D                                          u8400 0374  
                                        u8320 02CC                                          u8240 0110  
                                        u7281 083C                                          u8161 0C26  
                                        u8081 0D42                                          u8065 0CC1  
                                        u6561 0E50                                          u6481 0DF5  
                                        u6721 0674                                          u6705 065B  
                                        u6641 05ED                                          u6801 0380  
                                        u7361 097C                                          u8401 0373  
                                        u8321 02CB                                          u8241 010F  
                                        u7290 0842                                          u8170 0C40  
                                        u8090 0D58                                          u6570 0E63  
                                        u6490 0E01                                          u6730 0686  
                                        u6650 0615                                          u6810 03CE  
                                        u8330 02E8                                          u8250 0263  
                                        u7291 0841                                          u8171 0C3F  
                                        u8091 0D57                                          u6571 0E62  
                                        u6491 0E00                                          u6731 0685  
                                        u6651 0614                                          u6811 03CD  
                                        u8331 02E7                                          u8180 0C57  
                                        u6580 0E69                                          u6740 069B  
                                        u6660 0639                                          u6900 0441  
                                        u6820 03DD                                          u7700 09D0  
                                        u8340 0321                                          u8260 0276  
                                        u8181 0C56                                          u8085 0D3F  
                                        u6581 0E68                                          u6741 069A  
                                        u6661 0638                                          u6901 0440  
                                        u6821 03DC                                          u7365 0979  
                                        u7701 09CF                                          u8405 0370  
                                        u8341 0320                                          u8261 0275  
                                        u8190 0C60                                          u6590 0E74  
                                        u6750 06A2                                          u6670 0644  
                                        u6910 0447                                          u6830 03EB  
                                        u7710 09D6                                          u8350 0336  
                                        u8270 027C                                          u8191 0C5F  
                                        u8175 0C3C                                          u8095 0D54  
                                        u6591 0E73                                          u6751 06A1  
                                        u6671 0643                                          u6911 0446  
                                        u6831 03EA                                          u7711 09D5  
                                        u8351 0335                                          u8271 027B  
                                        u6760 06B7                                          u6680 064A  
                                        u6920 0480                                          u6840 03FB  
                                        u7720 09F3                                          u7640 0997  
                                        u7800 1600                                          u8360 0340  
                                        u8280 0282                                          u8185 0C53  
                                        u6761 06B6                                          u6681 0649  
                                        u6665 0635                                          u6921 047F  
                                        u6841 03FA                                          u7721 09F2  
                                        u7641 0996                                          u7801 15FF  
                                        u8417 15BA                                          u8361 033F  
                                        u8281 0281                                          _NREG 007B  
                                        u6770 06BD                                          u6690 0650  
                                        u6930 0488                                          u6850 0409  
                                        u7650 099D                                          u7730 1607  
                                        u7810 15A7                                          u8370 034B  
                                        u8290 02A3                                          u8507 0A8A  
                                        u6771 06BC                                          u6691 064F  
                                        u6931 0487                                          u6851 0408  
                                        u7651 099C                                          u8427 161F  
                                        u7731 1606                                          u7811 15A6  
                                        u8371 034A                                          u8291 02A2  
                                        u7900 1732                                          u6780 0709  
                                        u6940 049C                                          u6860 0419  
                                        u7660 09A8                                          u7740 160C  
                                        u7820 15AD                                          u8380 0356  
                                        u8517 0A92                                          u7901 1730  
                                        u6781 0708                                          u6941 049B  
                                        u6861 0418                                          u7661 09A7  
                                        u8437 15ED                                          u7741 160B  
                                        u7821 15AC                                          u8381 0355  
                                        u7910 1733                                          u6790 071D  
                                        u6950 04A7                                          u6870 0431  
                                        u7670 09AE                                          u7750 161A  
                                        u7830 15CD                                          u8390 0361  
                                        u8527 0A9E                                          u6791 071C  
                                        u6951 04A6                                          u6871 0430  
                                        u8447 09E1                                          u7671 09AD  
                                        u7751 1619                                          u7831 15CC  
                                        u8391 0360                                          u7840 1798  
                                        u7920 17D7                                          u6960 04DA  
                                        u6880 0436                                          u7680 09BC  
                                        u7760 1632                                          u8537 0AA6  
                                        u7841 1797                                          u7921 17D6  
                                        u6961 04D9                                          u6881 0435  
                                        u8457 098E                                          u7681 09BB  
                                        u7761 1631                                          u7850 179E  
                                        u7930 17DD                                          u6970 050A  
                                        u6890 043C                                          u7690 09C2  
                                        u7770 15D5                                          u8547 0AB2  
                                        u7851 179D                                          u7931 17DC  
                                        u8467 0928                                          u6971 0509  
                                        u6891 043B                                          u7691 09C1  
                                        u7771 15D4                                          u7860 17A4  
                                        u7940 17E3                                          u6980 051D  
                                        u7780 15DA                                          u8557 0ABA  
                                        u8477 0A68                                          u7861 17A3  
                                        u7941 17E2                                          u6981 051C  
                                        u7781 15D9                                          u7870 17AB  
                                        u7950 17EA                                          u6990 0523  
                                        u7790 15E8                                          u8567 0AD2  
                                        u8487 0A76                                          u7871 17AA  
                                        u7951 17E9                                          u6991 0522  
                                        u7791 15E7                                          u7880 1329  
                                        u7960 1679                                          u8577 07D2  
                                        u8497 0A7E                                          u7881 1328  
                                        u7961 1678                                          u7890 1343  
                                        u7970 167F                                          u7891 1342  
                                        u7971 167E                                          u7980 1686  
                                        u7981 1685                                          u7990 16DC  
                                        u7991 16DB                                          _PMON 006E  
                                        _TMR2 028C                                          _WPUA 0F39  
                                        _WPUB 0F44                                          _WPUC 0F4F  
                                        _WPUD 0F5A                                          _WPUE 0F65  
                                 main@notInit 00BA                                          _main 0099  
                                        _temp 0066                                          fsr0h 0005  
                                        fsr1h 0007                                          indf0 0000  
                                        fsr0l 0004                                          indf1 0001  
                                        fsr1l 0006                                          btemp 007E  
         __end_of_INT_DefaultInterruptHandler 11DB                   _INT_DefaultInterruptHandler 11DA  
                                        start 0052                                cmd_dtl@tempAux 002A  
             __end_of_INT_SetInterruptHandler 1210                    ??_TMR1_SetInterruptHandler 0074  
                             __end_of_ReadI2C 136C                     __size_of_DATAEE_WriteByte 0023  
                      __end_of_update_menuLCD 0584                                 ?_EUSART_Write 0070  
              __size_of_OSCILLATOR_Initialize 0009                 __end_of_OSCILLATOR_Initialize 1252  
                                       _ADACQ 009D                                         _ADCAP 009B  
                                       _ADACT 0099                      __end_of_i2c1_driver_open 1273  
                                       ?_main 0070                                         _ADCLK 0098  
                                       _ADCNT 010C                                         _ADPCH 009E  
                                       _ADREF 009A                                         _ADPRE 009C  
                                       _ADRPT 010D                                         _T1CLK 0211  
                                       _T1CON 020E                                         _T2CON 028E  
                                       _T2HLT 028F                               __end_of___lwdiv 1782  
                                       _T2TMR 028C                                         _T2RST 0291  
                                       i1l423 12B8                               __end_of___lwmod 16D2  
                                       i1l442 11DB                                         i1l371 0041  
                                       i1l436 1309                                         i1l372 0050  
                                       i1l364 0013                                         i1l373 004A  
                                       i1l367 0026                                         i1l369 0035  
                                       i1l378 0050                                         i1l751 127F  
                                       i1l747 11FD                                         i1l853 1457  
                                       i1l845 1525                                         i1l757 11DA  
                                       i1l848 1527                                         _OSCEN 0891  
                                       _TMR1H 020D                      __size_of_wirteEEPROMinit 00AE  
                                       _TMR1L 020C                                         _TRISA 0011  
                                       _TRISB 0012                                         _TRISC 0013  
                                       _TRISD 0014                                         _TRISE 0015  
                                       _WPUC3 7A7B                                         _WPUC4 7A7C  
                                       _RXPPS 0ECB                               __end_of_cmd_dac 1800  
                             __end_of_editLum 1602                               __end_of_cmd_dtl 169D  
                             _PWM6_Initialize 128D                               __end_of_cmd_mta 1352  
                             __end_of_cmd_mmp 1338                               __end_of_cmd_trc 0D6E  
                             __end_of_cmd_rtl 1479                               __end_of_cmd_tri 0C75  
                            __end_of_TMR1_ISR 130A                              __end_of_S1button 092E  
                             _DATAEE_ReadByte 125B                                         _getch 11F4  
                             __end_of_dpowers 1840                            __size_of_TMR2_Stop 0003  
                                 ?_TMR2_Start 0070                                         _iread 0061  
                             __end_of_isdigit 12DD                                         _putch 1216  
                                       main@c 00BE                                         main@i 00BC  
                                       main@n 00C1                                         _tsttc 0D6E  
                     __end_of_TMR1_Initialize 13DC                                         pclath 000A  
                                       status 0003                                         wtemp0 007E  
                             __end_of_sprintf 0722                        ??_PWM_Output_D4_Enable 0072  
                             _TMR2_StartTimer 11EC                               _TMR1_WriteTimer 12A8  
                             __initialization 0054                                  __end_of_main 037A  
                         __size_of_LCDsend2x4 00B3                                ??_EUSART_Write 0072  
                             ?_update_menuLCD 0070                       __end_of_TMR2_Initialize 12A8  
                 ?_INTERRUPT_InterruptManager 0070                ??_EUSART_SetRxInterruptHandler 0074  
                                      ??_main 00A0                               update_menuLCD@l 004D  
                                ?_sendMessage 0075                     __size_of_sendERRORMessage 001E  
                          __size_of_Clock_ISR 006E              differenceBetweenTimePeriod@start 0072  
                                   ??_LCDchar 007A                                     ??_LCDinit 0020  
                                   ??_LCDsend 0074                                     ??_INT_ISR 0070  
                                      _ADACCH 0091                                        _ADACCL 0090  
                                      ?_getch 0070                                        _ADCON0 0093  
                                      _ADCON1 0094                                        _ADCON2 0095  
                                      _ADCON3 0096                                        _ADERRH 0117  
                                      _ADERRL 0116                                        _ADLTHH 010F  
                                      _ADLTHL 010E                                        _ADRESH 008D  
                                      _ADRESL 008C                                        _ADSTAT 0097  
                                      _ADUTHH 0111                                        _ADUTHL 0110  
                            __end_of_WriteI2C 08D1                                        _ANSELA 0F38  
                                      ?_putch 0070                                        _ANSELB 0F43  
                                      _ANSELC 0F4E                                        _ANSELD 0F59  
                                      _ANSELE 0F64                    __end_of_EUSART_is_rx_ready 11E0  
                                      _T1GATE 0210                                        _T1GCON 020F  
                                      ?_tsttc 0070                                        _RC1REG 0119  
                                      _RC1STA 011D                                        _RA6PPS 0F16  
                                      _RC3PPS 0F23                       TMR1_WriteTimer@timerVal 0070  
                                      _RC4PPS 0F24                                        i1l1431 1248  
                                      i1l1273 0A63                                        _ODCONA 0F3A  
                                      _ODCONB 0F45                                        _ODCONC 0F50  
                                      _RC6PPS 0F26                                        _ODCOND 0F5B  
                                      _ODCONE 0F66                                        i1l5200 0A1C  
                                      i1l5120 12B2                                        i1l5112 12A8  
                                      i1l5210 0A3A                                        i1l5202 0A22  
                                      i1l5114 12AD                                        i1l5122 12B4  
                                      i1l5220 0A58                                        i1l5212 0A3F  
                                      i1l5204 0A28                                        i1l5124 12B6  
                                      i1l5116 12AE                                        i1l5142 1273  
                                      i1l5222 0A60                                        i1l5206 0A2E  
                                      i1l5214 0A46                                        i1l5118 12B0  
                                      i1l5144 127A                                        i1l5312 11F8  
                                      i1l5224 0A61                                        i1l5216 0A51  
                                      i1l5208 0A34                                        i1l5320 12FD  
                                      i1l5314 11FA                                        i1l5218 0A54  
                                      i1l5322 1304                                        i1l5340 151E  
                                      i1l5332 1503                                        i1l5316 12F3  
                                      i1l5350 1448                                        i1l5342 151F  
                                      i1l5334 150A                                        i1l5190 0A09  
                                      i1l5182 09F6                                        i1l5318 12F5  
                                      i1l5352 144C                                        i1l5344 1437  
                                      i1l5336 1513                                        i1l5192 0A10  
                                      i1l5184 0A01                                        i1l5354 1452  
                                      i1l5346 143C                                        i1l5338 1518  
                                      i1l5194 0A14                                        i1l5186 0A05  
                                      i1l5356 1453                                        i1l5348 143E  
                                      i1l5196 0A15                                        i1l5188 0A06  
                                      i1l5198 0A1B                                        i1l5800 001F  
                                      i1l5810 0045                                        i1l5802 002A  
                                      i1l5804 002E                                        i1l5814 004E  
                                      i1l5806 0039                                        i1l5808 003D  
                                      _S1_ISR 1240                                        i1l5790 0006  
                                      i1l4968 1240                                        i1l5792 000B  
                                      i1l5794 000F                                        i1l5796 0017  
                                      i1l5798 001B                                        _LCDcmd 1230  
                                      _INTPPS 0E90                                 main@corrupted 00BB  
                                      _LCDstr 1387                                        u470_20 0A34  
                                      u454_20 12AD                                        u470_21 0A33  
                                      u454_21 12AC                                        u455_20 127A  
                                      u471_20 0A3A                                        u455_21 1279  
                                      u471_21 0A39                                        u472_20 0A4F  
                                      u464_20 0A01                                        u472_21 0A4C  
                                      u464_21 0A00                                        u465_20 0A10  
                                      u465_21 0A0F                                        u473_24 0A51  
                                      u474_20 0A60                                        u466_20 0A1B  
                                      u474_21 0A5F                                        u466_21 0A1A  
                                      u467_20 0A22                                        u483_20 1304  
                                      u467_21 0A21                                        u483_21 1303  
                                      u484_20 150A                                        u468_20 0A28  
                                      u580_20 003D                                        u572_20 000B  
                                      u484_21 1509                                        u468_21 0A27  
                                      u580_21 003C                                        u572_21 000A  
                                      _OSCFRQ 0893                                        u485_20 151E  
                                      u469_20 0A2E                                        u581_20 0045  
                                      u573_20 000F                                        u485_21 151D  
                                      u469_21 0A2D                                        u581_21 0044  
                                      u573_21 000E                                        u486_20 143C  
                                      u582_20 0049                                        u574_20 0017  
                                      u486_21 143B                                        u582_21 0048  
                                      u574_21 0016                                        u487_20 1452  
                                      u583_20 004E                                        u575_20 001B  
                                      u487_21 1451                                        u583_21 004D  
                                      u575_21 001A                                        u576_20 001F  
                                      u576_21 001E                                        u577_20 002A  
                                      u577_21 0029                                        u578_20 002E  
                                      u578_21 002D                                        u579_20 0039  
                                      u579_21 0038                                        _PWM6EN 1C77  
                                      _TX1REG 011A                                        _TX1STA 011E  
                                   ??_ReadI2C 0072                              _writeEEPROM_flag 00D3  
                                      _PWM_on 0062                                   LCDsend2x4@c 0077  
                            __end_of_editTemp 1634          __end_of_TMR1_DefaultInterruptHandler 11DC  
       __size_of_TMR1_DefaultInterruptHandler 0001                  _TMR1_DefaultInterruptHandler 11DB  
                                _CCPTMRS1bits 021F                              __end_of_commands 1827  
                                      ___wmul 1418                             __end_of_TMR2_Stop 11EC  
                                      _cmd_aa 16D2                                        _cmd_ir 154D  
                                      _cmd_ra 170A                                        _cmd_rc 1528  
                                      _cmd_sc 1782                                        _cmd_rp 1479  
                                      _flagNr 00D2                                     ??___lwdiv 0076  
                                   ??___lwmod 0024                           __size_of_TMR2_Start 0003  
                         _EUSART_Transmit_ISR 1503                                        _memset 13FA  
                     __end_of_PWM6_Initialize 129A                                     ??_cmd_dac 002A  
                                   ??_editLum 0054                                     ??_cmd_dtl 007A  
                                   ??_cmd_mta 007A                                     ??_cmd_mmp 007A  
                                      _iwrite 007A                                     ??_cmd_trc 002A  
                                   ??_cmd_rtl 002A                                     ??_cmd_tri 002A  
                __size_of_monitoring_TEMP_LUM 0185                                 ?_INT_CallBack 0070  
                     __end_of_DATAEE_ReadByte 1267                               _ADCC_Initialize 130A  
                              _PMD_Initialize 1228                                  __pdataCOMMON 007B  
                                   ??_isdigit 0072                             sendOKMessage@bufw 0023  
                          update_menuLCD@diff 0050             __size_of_ADCC_GetSingleConversion 0012  
            __size_of_INT_SetInterruptHandler 0006                     ?_ADCC_GetSingleConversion 0072  
                     __end_of_TMR2_StartTimer 11F0       INT_SetInterruptHandler@InterruptHandler 0072  
    TMR1_SetInterruptHandler@InterruptHandler 0072                                     ??_sprintf 002E  
                     __end_of_TMR1_WriteTimer 12B9                             ??_wirteEEPROMinit 0079  
                     ??_PWM_Output_D4_Disable 0072                          ?_EUSART_Transmit_ISR 0070  
                            ?_TMR1_Initialize 0070                          __size_of_EUSART_Read 0023  
                           _SYSTEM_Initialize 13A2                       __end_of__initialization 0095  
                              cmd_trc@address 003A                            ?_SYSTEM_Initialize 0070  
                           __end_of_Clock_ISR 0A64                                cmd_trc@buffEOM 003C  
        __end_of_EUSART_SetTxInterruptHandler 120A         __size_of_EUSART_SetTxInterruptHandler 0006  
                _EUSART_SetTxInterruptHandler 1204                            cmd_trc@maxReadings 003D  
                              __pcstackCOMMON 0070                                  __pidataBANK0 0002  
                                __pidataBANK1 1238                           ??_SYSTEM_Initialize 0075  
                                   ?_TMR1_ISR 0070                 ?_TMR1_DefaultInterruptHandler 0070  
                               __end_of_getch 11F8                                     ?_S1button 0070  
                            _DATAEE_WriteByte 14BD                                 __end_of_putch 121C  
                          __size_of_editClock 0064               differenceBetweenTimePeriod@diff 0078  
                               __end_of_tsttc 0E7B                              ?_TMR2_Initialize 0070  
                              ??_INT_CallBack 0070               differenceBetweenTimePeriod@stop 0075  
                      __end_of_PMD_Initialize 1230                                cmd_tri@buffEOM 0038  
                 __size_of_EXT_INT_Initialize 000D                                  ??_LCDsend2x4 0075  
                                     ??_getch 0074                     __end_of_SYSTEM_Initialize 13BE  
                                  _checkFlags 092E                         ??_EUSART_Transmit_ISR 0070  
                                sprintf@width 0037                              update_menuLCD@tt 0049  
                                     ??_putch 0074                                       ??_tsttc 0074  
                                  __pbssBANK0 0055                                    __pbssBANK1 00C3  
                                  __pbssBANK2 0120                                    __pbssBANK3 01A0  
                                  __pbssBANK4 0220                                       ?_S1_ISR 0070  
                                     ?_LCDcmd 0070                          __end_of_EUSART_Write 15A2  
                                     ?_LCDstr 0021                                  _flagS1pushed 00D6  
                                     LCDcmd@c 0020                   __size_of_EUSART_Receive_ISR 0021  
                                     LCDstr@c 0026                                       LCDstr@p 0021  
                                  __pmaintext 0099                 ?_EUSART_SetTxInterruptHandler 0072  
            _EUSART_TxDefaultInterruptHandler 00E0                                       ?___wmul 0072  
                                  ??_TMR1_ISR 0072                                       ?_cmd_aa 0027  
                     __end_of_ADCC_Initialize 1321                    __end_of_PWM6_LoadDutyValue 12F3  
                                     ?_cmd_ir 0027                                       ?_cmd_ra 0027  
                                     ?_cmd_rc 0027                                       ?_cmd_sc 0027  
                                     ?_cmd_rp 0027                                    ??_S1button 0072  
                                  __pintentry 0004                                       _ADFLTRH 0115  
                                     _ADFLTRL 0114                                       ?_memset 0072  
                          __end_of_LCDsend2x4 07D5                                       _ADPREVH 008F  
                                     _ADPREVL 008E                                     ?_WriteI2C 0070  
                            ?_PWM6_Initialize 0070                                       _ADSTPTH 0113  
                                     _ADSTPTL 0112                               ?_PMD_Initialize 0070  
                            _sendERRORMessage 13DC                              ?_DATAEE_ReadByte 0078  
                           ?_i2c1_driver_open 0070                                 _eusartRxCount 0068  
                                     _LCDchar 1252                                       _LCDinit 0A64  
                                     _SP1BRGH 011C                                       _SP1BRGL 011B  
                                     _LCDsend 0800                          __size_of_sendMessage 0023  
                          ??_i2c1_driver_open 0072                                       _INT_ISR 11F8  
                                     _OSCCON1 088D                                       _OSCCON3 088F  
                                   ?_editTemp 0070                        __size_of_sendOKMessage 001B  
                                     _NVMADRH 081B                                       _NVMADRL 081A  
                                     _NVMDATH 081D                                       _OSCTUNE 0892  
                                     _NVMDATL 081C                                       _NVMCON2 081F  
                                     _PWM6DCH 038D                                       _PWM6DCL 038C  
                                     _PWM6CON 038E                                       _SSP1ADD 018D  
                                     _SLRCONA 0F3B                                       _SLRCONB 0F46  
                                     _SLRCONC 0F51                                       _SLRCOND 0F5C  
                                     _SLRCONE 0F67                                       _SSP1BUF 018C  
                                     _SSP1MSK 018E                                  ??_TMR2_Start 0072  
                     __size_of_TMR2_StopTimer 0004                              ?_TMR2_StartTimer 0070  
                            ?_TMR1_WriteTimer 0070                                  LCDsend2x4@hc 0078  
                                LCDsend2x4@lc 0079                             __end_of_editClock 09F6  
                             __size_of_S1_ISR 0009                               __size_of_LCDcmd 0008  
                        DATAEE_WriteByte@bAdd 0020                            _i2c1_driver_i2cISR 00CE  
                             __size_of_LCDstr 001B                                       _ReadI2C 1352  
                            ??_update_menuLCD 003B                               __size_of___wmul 001F  
                                     ___lwdiv 1746                               __size_of_cmd_aa 0038  
                                     ___lwmod 169D                               __size_of_cmd_ir 0029  
                             __size_of_cmd_ra 003C                               __size_of_cmd_rc 0025  
                             __size_of_cmd_sc 003F                               __size_of_cmd_rp 0021  
                          __end_of_TMR2_Start 11E6                                    ??_WriteI2C 0072  
                                     _cmd_dac 17C1                               __size_of_memset 001E  
                                     _editLum 15D0                                       _cmd_dtl 1668  
                                     _cmd_mta 1338                                       _cmd_mmp 1321  
                                     _cmd_trc 0C75                                       _cmd_rtl 1458  
                                     _cmd_tri 0B84                                       __ptext1 15A2  
                                     __ptext2 13FA                                       __ptext3 1267  
                                     __ptext4 11F4                                       __ptext5 14E0  
                                     __ptext6 1602                                       __ptext7 15D0  
                                     __ptext8 0992                                       __ptext9 092E  
              ??_TMR1_DefaultInterruptHandler 0070                                     _T1CONbits 020E  
                               cmd_dac@buffer 0029                                       _dpowers 1836  
                       _OSCILLATOR_Initialize 1249                                     _T2CONbits 028E  
                                     _isdigit 12CB                                    cmd_dac@num 0027  
           __size_of_TMR1_SetInterruptHandler 0006                                       cmd_sc@h 002B  
                                     cmd_sc@m 002C                                       cmd_sc@s 002D  
                    ??_PIN_MANAGER_Initialize 0072                     ?_TMR1_SetInterruptHandler 0072  
                                   _T2HLTbits 028F                       _INT_SetInterruptHandler 120A  
                                  ??_editTemp 0054                                    cmd_ir@buff 002B  
                                  cmd_ra@buff 002B                                    cmd_rc@buff 002B  
                  __size_of_SYSTEM_Initialize 001C                                   ?_checkFlags 0070  
                                     _sprintf 0584                                       clrloop0 121D  
                                  cmd_dtl@num 0027                          end_of_initialization 0095  
                                   _T2RSTbits 0291                                    cmd_rp@buff 002B  
                                  cmd_mta@num 0027                                    cmd_mmp@num 0027  
                                     init_ram 1222                                       memset@c 0072  
                                     memset@n 0074                                       memset@p 0077  
                         _monitoring_TEMP_LUM 0E7B                                       initloop 1223  
                        __end_of_INT_CallBack 1280                                    cmd_trc@num 0027  
                                  cmd_rtl@num 0027                                    cmd_tri@num 0027  
                           _EUSART_Initialize 07D5                 __size_of_PWM_Output_D4_Enable 0003  
                               _sendOKMessage 136C                            ?_EUSART_Initialize 0070  
                          _EUSART_is_rx_ready 11DD                  ?_differenceBetweenTimePeriod 0072  
                                  main@F13047 0120                              ?_ADCC_Initialize 0070  
            __end_of_ADCC_GetSingleConversion 12CB                           ??_EUSART_Initialize 0074  
              ??_EUSART_SetTxInterruptHandler 0074                          ?_monitoring_TEMP_LUM 0070  
                         ?_EUSART_is_rx_ready 0070                                     _PORTCbits 000E  
                                   _TMR2_Stop 11E9                               _wirteEEPROMinit 0AD6  
                                   _TRISCbits 0013                         __size_of_EUSART_Write 002C  
                               ?_toggleAlarms 0070                                    main@i_2532 00BF  
                    __end_of_DATAEE_WriteByte 14E0                                 _alarmPWMStart 00E3  
              __size_of_PWM_Output_D4_Disable 0003                     __end_of_EUSART_Initialize 0800  
                        ??_EUSART_is_rx_ready 0072                 __end_of_PWM_Output_D4_Disable 11E9  
                              __end_of_S1_ISR 1249                                __end_of_LCDcmd 1238  
                              __end_of_LCDstr 13A2                               cmd_trc@buffData 0030  
                               cmd_dtl@buffer 0029                                LCDsend2x4@mode 0074  
                             cmd_trc@buffInit 0035                                 cmd_dtl@lumAux 002B  
                              ?_sendOKMessage 0070                                     _Clock_ISR 09F6  
                            _monitor_TEMP_LUM 00D5                           __size_of_checkFlags 0064  
                              __end_of___wmul 1437                                __end_of_cmd_aa 170A  
                              __end_of_cmd_ir 1576                                __end_of_cmd_ra 1746  
                              __end_of_cmd_rc 154D                                __end_of_cmd_sc 17C1  
                              __end_of_cmd_rp 149A                                 __pidataCOMMON 11DC  
                       ??_monitoring_TEMP_LUM 0023                                  _EUSART_Write 1576  
                           __size_of_TMR1_ISR 0017                             __size_of_S1button 005D  
                                  ?_TMR2_Stop 0070                        ?_OSCILLATOR_Initialize 0070  
                              __end_of_memset 1418                     ??_INT_SetInterruptHandler 0074  
                             main@checkSumAux 00B9                           start_initialization 0054  
                              ??_toggleAlarms 0054               __size_of_PIN_MANAGER_Initialize 0043  
                              _TMR2_StopTimer 11F0                                 ??_EUSART_Read 0072  
EUSART_SetRxInterruptHandler@interruptHandler 0072  EUSART_SetTxInterruptHandler@interruptHandler 0072  
                             cmd_tri@buffData 002F                              WriteI2C@data_out 0073  
                             cmd_tri@buffInit 0034                                   putch@txData 0074  
                               cmd_mta@buffer 0029                                 cmd_mmp@buffer 0029  
                                    ??_S1_ISR 0070                                      ??_LCDcmd 007A  
                                    ??_LCDstr 0023                      __end_of_sendERRORMessage 13FA  
                           _counterMonitorAux 00D4                           DATAEE_ReadByte@bAdd 0078  
                ?_INT_DefaultInterruptHandler 0070                      __size_of_TMR1_Initialize 001E  
                            ??_PMD_Initialize 0072                                    ?_Clock_ISR 0070  
                     __end_of_wirteEEPROMinit 0B84                                      ??___wmul 0076  
                                    ??_cmd_aa 002A                                      ??_cmd_ir 002A  
                                    ??_cmd_ra 002A                                      ??_cmd_rc 002A  
                                    ??_cmd_sc 002A                                      ??_cmd_rp 002A  
                                 __pdataBANK0 006D                                   __pdataBANK1 00E3  
                                    ??_memset 0076                              sendOKMessage@cmd 0022  
                  __end_of_EXT_INT_Initialize 128D                             _editingClockAlarm 005E  
                           update_menuLCD@str 0041                             __size_of_WriteI2C 004B  
                    _ADCC_GetSingleConversion 12B9                   __end_of_EUSART_Transmit_ISR 1528  
                      __end_of_TMR2_StopTimer 11F4                                      ?_LCDchar 0070  
                                 __pbssCOMMON 007A                                      ?_LCDinit 0070  
                                    ?_LCDsend 0070                                     ___latbits 0002  
                                    ?_INT_ISR 0070                                 __pcstackBANK0 0020  
                               cmd_trc@buffer 0029                                 __pcstackBANK1 00A0  
                          _PWM6_LoadDutyValue 12DD                      __size_of_TMR2_Initialize 000E  
                                _isdigit$2990 0072                         __size_of_INT_CallBack 000D  
        __size_of_differenceBetweenTimePeriod 0034                                      LCDchar@c 0020  
                           __size_of_editTemp 0032                                 cmd_rtl@buffer 0029  
                               cmd_tri@buffer 0029                    __end_of_EUSART_Receive_ISR 1458  
                                    LCDsend@c 0075                           ?_PWM6_LoadDutyValue 0072  
                  __size_of_EUSART_Initialize 002B                                   sprintf@flag 0036  
                   __size_of_i2c1_driver_open 000C                                   sprintf@prec 0033  
            _EUSART_RxDefaultInterruptHandler 00DE                               ??_sendOKMessage 0079  
                         __end_of_EUSART_Read 1503                                      ?_ReadI2C 0070  
                                   __pnvBANK1 00D8                                     _editClock 0992  
                                   _main$3496 00B7                              ___lwdiv@dividend 0074  
                      _PIN_MANAGER_Initialize 0843                 ??_INT_DefaultInterruptHandler 0070  
                        EUSART_Read@readValue 0073              __end_of_TMR1_SetInterruptHandler 1216  
             ADCC_GetSingleConversion@channel 0075                            cmd_tri@maxReadings 0039  
                                   _dimingLed 00CC                                      ?___lwdiv 0072  
                                    ?___lwmod 0020                   _i2c1_driver_busCollisionISR 00D0  
                                _eusartRxHead 006A                                  _eusartTxHead 006C  
                                _eusartRxTail 0069                                  _eusartTxTail 006B  
                        ??_PWM6_LoadDutyValue 0074                                      ?_cmd_dac 0027  
                                    ?_editLum 0070                                      ?_cmd_dtl 0027  
                                    ?_cmd_mta 0027                                      ?_cmd_mmp 0027  
                                cmd_aa@buffer 0029                  ??_INTERRUPT_InterruptManager 0072  
                                    ?_cmd_trc 0027                                      ?_cmd_rtl 0027  
                                    ?_cmd_tri 0027                                 ??_sendMessage 0078  
                                 ??_TMR2_Stop 0072                                  sendMessage@n 0020  
                     _eusartTxBufferRemaining 00E2                                  _INT_CallBack 1273  
                                    _BAUD1CON 011F                                      ?_isdigit 0070  
                             ?_TMR2_StopTimer 0070                      __size_of_PWM6_Initialize 000D  
                            ___lwdiv@quotient 0077                                  ??_checkFlags 0053  
                              __size_of_getch 0004                                      ?_sprintf 0026  
                                    _T2CLKCON 0290                      __size_of_DATAEE_ReadByte 000C  
                        cmd_tri@startingIndex 003F                                __size_of_putch 0006  
                                   cmd_aa@num 0027                                __size_of_tsttc 010D  
                              _eusartRxBuffer 0220                                _eusartTxBuffer 01A0  
                              ___wmul@product 0076                                     cmd_ir@num 0027  
                                   cmd_ra@num 0027                                      _LATAbits 0016  
                                   cmd_rc@num 0027                                     cmd_sc@num 0027  
                                   clear_ram0 121C                                     cmd_rp@num 0027  
                                    _PIE0bits 0716                                      _PIE3bits 0719  
                                    _PIE4bits 071A                      __size_of_TMR2_StartTimer 0004  
                                  ?_editClock 0070                                     _tempAlarm 00C9  
                                    _S1_Value 00D7                      __size_of_TMR1_WriteTimer 0011  
         __size_of_INTERRUPT_InterruptManager 004E                                      _PIR0bits 070C  
                                    _PIR3bits 070F                                      _PIR4bits 0710  
                                 ??_Clock_ISR 0070                          __end_of_toggleAlarms 15D0  
                            ?_wirteEEPROMinit 0070                                      _SSP1CON1 0190  
                                    _SSP1CON2 0191                                      _TMR1_ISR 12F3  
                                    _S1button 08D1                                      _SSP1STAT 018F  
                                   _updateLCD 00EA                            __end_of_checkFlags 0992  
                           ??_TMR1_Initialize 0074                                    _ADCON0bits 0093  
                                  _ADCON1bits 0094                                sendMessage@num 0075  
                                  _ADCON2bits 0095                                    _ADCON3bits 0096  
                                cmd_ir@buffer 0029                             ___wmul@multiplier 0072  
                                cmd_ra@buffer 0029                  __end_of_PWM_Output_D4_Enable 11E3  
                                cmd_rc@buffer 0029          __size_of_INT_DefaultInterruptHandler 0001  
                                cmd_sc@buffer 0029                              __size_of_LCDchar 0009  
                       DATAEE_WriteByte@bData 0022                              __size_of_LCDinit 0072  
                            __size_of_LCDsend 0043                              __size_of_INT_ISR 0006  
                         __end_of_sendMessage 14BD                                   _EUSART_Read 14E0  
                           ?_DATAEE_WriteByte 0020                             ??_TMR2_Initialize 0072  
                                cmd_rp@buffer 0029                            ??_DATAEE_WriteByte 0078  
                            __size_of_ReadI2C 001A                                    _ADSTATbits 0097  
                     ??_OSCILLATOR_Initialize 0072                              __size_of___lwdiv 003C  
                            __size_of___lwmod 0035                                      _WriteI2C 0886  
                    _TMR1_SetInterruptHandler 1210                              __size_of_cmd_dac 003F  
                            __size_of_editLum 0032                              __size_of_cmd_dtl 0035  
                     __size_of_update_menuLCD 020A                              __size_of_cmd_mta 001A  
                            __size_of_cmd_mmp 0017                              __size_of_cmd_trc 00F9  
                            __size_of_cmd_rtl 0021                              __size_of_cmd_tri 00F1  
                                cmd_tri@index 003C                         _TMR1_InterruptHandler 00DA  
                                  sprintf@val 0034                                      _clkAlarm 0055  
                    __size_of_ADCC_Initialize 0017                              __size_of_isdigit 0012  
                                    _editTemp 1602                               ___lwdiv@divisor 0072  
                             ___lwdiv@counter 0079                                      __ptext10 0AD6  
                                    __ptext11 037A                                      __ptext20 12DD  
                                    __ptext12 0584                                      __ptext21 1387  
                                    __ptext13 12CB                                    _T1GCONbits 020F  
                                    __ptext30 11E3                                      __ptext22 1252  
                                    __ptext14 169D                                      __ptext31 08D1  
                                    __ptext23 1230                                      __ptext15 1746  
                                    __ptext40 1321                                      __ptext32 11E0  
                                    __ptext24 0E7B                                      __ptext16 1634  
                                    __ptext41 1479                                      __ptext33 0C75  
                                    __ptext25 0D6E                                      __ptext17 11F0  
                                    __ptext50 149A                                      __ptext42 1458  
                                    __ptext34 154D                                      __ptext26 1352  
                                    __ptext18 11E9                                      __ptext51 1216  
                                    __ptext43 1782                                      __ptext35 16D2  
                                    __ptext27 14BD                                      __ptext19 11E6  
                                    __ptext60 1249                                      __ptext52 1576  
                                    __ptext44 1528                                      __ptext36 1668  
                                    __ptext28 12B9                                      __ptext61 1280  
                                    __ptext53 13A2                                      __ptext45 0B84  
                                    __ptext37 17C1                                      __ptext29 11EC  
                                    __ptext70 0886                                      __ptext62 120A  
                                    __ptext54 129A                                      __ptext46 1418  
                                    __ptext38 170A                                      __ptext71 11DD  
                                    __ptext63 07D5                                      __ptext55 13BE  
                                    __ptext47 125B                                      __ptext39 1338  
                                    __ptext80 1240                                      __ptext64 1204  
                                    __ptext56 1210                                      __ptext48 136C  
                                    __ptext81 1503                                      __ptext73 12F3  
                                    __ptext65 11FE                                      __ptext57 128D  
                                    __ptext49 13DC                                      __ptext82 1437  
                                    __ptext74 12A8                                      __ptext66 130A  
                                    __ptext58 1228                                      __ptext75 09F6  
                                    __ptext67 0A64                                      __ptext59 0843  
                                    __ptext76 11DB                                      __ptext68 0722  
                                    __ptext77 11F8                                      __ptext69 0800  
                                    __ptext78 1273                                      __ptext79 11DA  
                                _SSP1CON1bits 0190                                  _SSP1CON2bits 0191  
                                    _commands 1800                              __size_of_sprintf 019E  
                 DATAEE_WriteByte@GIEBitValue 0078                              _i2c1_driver_open 1267  
                                    _modeFlag 005C                             ??_PWM6_Initialize 0072  
                 __size_of_EUSART_is_rx_ready 0003                                 __size_of_main 02E1  
                                    cmd_dac@h 002B                                      cmd_dac@m 002C  
                                    _lumAlarm 00C6                                      cmd_dac@s 002D  
                           ?_sendERRORMessage 0070                             ??_DATAEE_ReadByte 007A  
                                    _lumLevel 0065                         _PWM_Output_D4_Disable 11E6  
                                 ??_editClock 0054                                      cmd_trc@i 0038  
                                    cmd_trc@j 0041                                      cmd_trc@n 003F  
                                    cmd_tri@i 003A                                      cmd_tri@j 003E  
                                    cmd_tri@n 003D                              _editingTempAlarm 0064  
                                  _RC1STAbits 011D                            ??_sendERRORMessage 0079  
                 __end_of_monitoring_TEMP_LUM 1000                                      _prevTemp 00E8  
                                  tsttc@value 0075                    ??_ADCC_GetSingleConversion 0075  
                                    int$flags 007E                             ??_TMR2_StartTimer 0072  
          __end_of_INTERRUPT_InterruptManager 0052                    _INTERRUPT_InterruptManager 0004  
                                    main@buff 00A3                                  _SSP1STATbits 018F  
                           ??_TMR1_WriteTimer 0072                                   _sendMessage 149A  
                        update_menuLCD@F12902 00C3                                    _INTCONbits 000B  
                                 _NVMCON1bits 081E                                  _prevLumLevel 00E6  
                        _INT_InterruptHandler 00D8                                      isdigit@c 0073  
                                    memset@p1 0078                                    _LCDsend2x4 0722  
                          _EXT_INT_Initialize 1280                                   cmd_rtl@buff 002B  
                                    intlevel1 0000                                     sprintf@ap 0032  
                                   sprintf@sp 003A                              ___lwmod@dividend 0022  
                     ?_PIN_MANAGER_Initialize 0070                          sendERRORMessage@bufw 0023  
                       __size_of_toggleAlarms 002E                           ?_EXT_INT_Initialize 0070  
                             _editingLumAlarm 0063          __end_of_EUSART_SetRxInterruptHandler 1204  
       __size_of_EUSART_SetRxInterruptHandler 0006                  _EUSART_SetRxInterruptHandler 11FE  
                        _PWM_Output_D4_Enable 11E0           __end_of_differenceBetweenTimePeriod 1668  
                 _differenceBetweenTimePeriod 1634                            _EUSART_Receive_ISR 1437  
                    ?_INT_SetInterruptHandler 0072                              ??_TMR2_StopTimer 0072  
                               __pstringtext1 1800                                 __pstringtext2 1836  
                               __pstringtext3 1827                                 __pstringtext4 1840  
                               __pstringtext5 1847                                 __pstringtext6 184C  
                               __pstringtext7 0000                          ??_EXT_INT_Initialize 0074  
               ??_differenceBetweenTimePeriod 0079                                      sprintf@c 0039  
                                    sprintf@f 0026                           ?_EUSART_Receive_ISR 0070  
                                  _SSP1DATPPS 0EC6                                    _SSP1CLKPPS 0EC5  
                             ___lwmod@divisor 0020                           sendERRORMessage@cmd 0022  
                             ___lwmod@counter 0025                   PWM6_LoadDutyValue@dutyValue 0072  
                                  _TX1STAbits 011E                                  _toggleAlarms 15A2  
                                  _TMR2_Start 11E3                            EUSART_Write@txData 0073  
                __size_of_EUSART_Transmit_ISR 0025                __end_of_PIN_MANAGER_Initialize 0886  
                           ??_ADCC_Initialize 0072                        ?_PWM_Output_D4_Disable 0070  
                        ??_EUSART_Receive_ISR 0070                         ?_PWM_Output_D4_Enable 0070  
                             _TMR1_Initialize 13BE                         __end_of_sendOKMessage 1387  
